
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 9b ec 00 00       	call   c000ecbb <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 c8 53 02 c0       	mov    eax,0xc00253c8
c0000025:	3d c8 53 02 c0       	cmp    eax,0xc00253c8
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 c8 53 02 c0       	push   0xc00253c8
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 c8 53 02 c0       	mov    eax,0xc00253c8
c0000051:	2d c8 53 02 c0       	sub    eax,0xc00253c8
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 c8 53 02 c0       	push   0xc00253c8
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 70 02 c0 00 	cmp    BYTE PTR ds:0xc00270c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 30 10 02 c0       	mov    ebx,0xc0021030
c0000097:	81 eb 2c 10 02 c0    	sub    ebx,0xc002102c
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 2c 10 02 c0       	mov    esi,0xc002102c
c00000a6:	a1 c4 70 02 c0       	mov    eax,ds:0xc00270c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 70 02 c0       	mov    ds:0xc00270c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 70 02 c0       	mov    eax,ds:0xc00270c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 c8 53 02 c0       	push   0xc00253c8
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 70 02 c0 01 	mov    BYTE PTR ds:0xc00270c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 70 02 c0       	push   0xc00270c8
c0000108:	68 c8 53 02 c0       	push   0xc00253c8
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 3f 4f 01 00       	call   c00151ec <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 32 32 01 00       	call   c00134f7 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 1d 4f 01 00       	call   c00151ec <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 5e 54 01 00       	call   c001574c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 0d 59 01 00       	call   c0015c04 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 80 cd 02 c0 	lgdtd  ds:0xc002cd80
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 4e e5 00 00       	jmp    c000e8cd <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 70 02 c0       	mov    ds:0xc00270e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 70 02 c0    	mov    DWORD PTR ds:0xc00270e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 70 02 c0    	mov    ebx,DWORD PTR ds:0xc00270e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 40 10 02 c0 02 	test   BYTE PTR [edx-0x3ffdefc0],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 40 10 02 c0 01 	test   BYTE PTR [edx-0x3ffdefc0],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 40 10 02 c0 08 	test   BYTE PTR [edx-0x3ffdefc0],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 40 10 02 c0 08 	test   BYTE PTR [edx-0x3ffdefc0],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 40 10 02 c0 04 	test   BYTE PTR [ecx-0x3ffdefc0],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 40 10 02 c0 01 	test   BYTE PTR [edx-0x3ffdefc0],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d8d:	85 c9                	test   ecx,ecx
c0000d8f:	0f 84 01 01 00 00    	je     c0000e96 <dlfree+0x110>
c0000d95:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d98:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d9b:	8b 1d 00 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c3                	cmp    ebx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 cb 03             	or     ebx,0x3
c0000db0:	89 1d 00 71 02 c0    	mov    DWORD PTR ds:0xc0027100,ebx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 1c 85 04 71 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd8efc]
c0000dc0:	89 19                	mov    DWORD PTR [ecx],ebx
c0000dc2:	89 14 85 04 71 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8efc],edx
c0000dc9:	e9 c8 00 00 00       	jmp    c0000e96 <dlfree+0x110>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 cb 01             	or     ebx,0x1
c0000ddd:	89 1d 00 71 02 c0    	mov    DWORD PTR ds:0xc0027100,ebx
c0000de3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000de6:	83 e3 fc             	and    ebx,0xfffffffc
c0000de9:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000df2:	29 ca                	sub    edx,ecx
c0000df4:	01 c8                	add    eax,ecx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dfc:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dff:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e02:	39 35 2c 71 02 c0    	cmp    DWORD PTR ds:0xc002712c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000e0e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000e11:	80 e1 01             	and    cl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 d8                	add    eax,ebx
c0000e1b:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000e1e:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000e21:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e24:	8b 0d 3c 71 02 c0    	mov    ecx,DWORD PTR ds:0xc002713c
c0000e2a:	c7 42 0c 34 71 02 c0 	mov    DWORD PTR [edx+0xc],0xc0027134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 d8                	add    eax,ebx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 71 02 c0    	mov    DWORD PTR ds:0xc002712c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 35                	jbe    c0000e96 <dlfree+0x110>
c0000e61:	f6 05 00 71 02 c0 02 	test   BYTE PTR ds:0xc0027100,0x2
c0000e68:	74 2c                	je     c0000e96 <dlfree+0x110>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e7a:	53                   	push   ebx
c0000e7b:	53                   	push   ebx
c0000e7c:	ff 0d 50 74 02 c0    	dec    DWORD PTR ds:0xc0027450
c0000e82:	01 c8                	add    eax,ecx
c0000e84:	29 ca                	sub    edx,ecx
c0000e86:	50                   	push   eax
c0000e87:	52                   	push   edx
c0000e88:	29 05 64 74 02 c0    	sub    DWORD PTR ds:0xc0027464,eax
c0000e8e:	e8 77 db 00 00       	call   c000ea0a <munmap>
c0000e93:	83 c4 10             	add    esp,0x10
c0000e96:	5b                   	pop    ebx
c0000e97:	5e                   	pop    esi
c0000e98:	5f                   	pop    edi
c0000e99:	c3                   	ret    

c0000e9a <sYSMALLOc>:
c0000e9a:	55                   	push   ebp
c0000e9b:	57                   	push   edi
c0000e9c:	56                   	push   esi
c0000e9d:	53                   	push   ebx
c0000e9e:	89 d3                	mov    ebx,edx
c0000ea0:	83 ec 2c             	sub    esp,0x2c
c0000ea3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000ea7:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ead:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000eb0:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000eb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000eb7:	74 1f                	je     c0000ed8 <sYSMALLOc+0x3e>
c0000eb9:	89 d0                	mov    eax,edx
c0000ebb:	e8 df fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ec0:	83 ec 0c             	sub    esp,0xc
c0000ec3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ec7:	83 e8 07             	sub    eax,0x7
c0000eca:	50                   	push   eax
c0000ecb:	e8 78 03 00 00       	call   c0001248 <dlmalloc>
c0000ed0:	83 c4 10             	add    esp,0x10
c0000ed3:	e9 68 03 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0000ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000edc:	f7 d9                	neg    ecx
c0000ede:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000ee4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0000ee8:	0f 87 be 00 00 00    	ja     c0000fac <sYSMALLOc+0x112>
c0000eee:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ef4:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000efa:	0f 8d ac 00 00 00    	jge    c0000fac <sYSMALLOc+0x112>
c0000f00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000f08:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000f0c:	21 ce                	and    esi,ecx
c0000f0e:	39 fe                	cmp    esi,edi
c0000f10:	0f 86 96 00 00 00    	jbe    c0000fac <sYSMALLOc+0x112>
c0000f16:	52                   	push   edx
c0000f17:	52                   	push   edx
c0000f18:	6a 00                	push   0x0
c0000f1a:	6a ff                	push   0xffffffff
c0000f1c:	6a 0c                	push   0xc
c0000f1e:	6a 03                	push   0x3
c0000f20:	56                   	push   esi
c0000f21:	6a 00                	push   0x0
c0000f23:	e8 84 da 00 00       	call   c000e9ac <mmap>
c0000f28:	83 c4 20             	add    esp,0x20
c0000f2b:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2e:	74 7c                	je     c0000fac <sYSMALLOc+0x112>
c0000f30:	89 c1                	mov    ecx,eax
c0000f32:	83 e1 07             	and    ecx,0x7
c0000f35:	74 13                	je     c0000f4a <sYSMALLOc+0xb0>
c0000f37:	ba 08 00 00 00       	mov    edx,0x8
c0000f3c:	89 f7                	mov    edi,esi
c0000f3e:	29 ca                	sub    edx,ecx
c0000f40:	01 d0                	add    eax,edx
c0000f42:	29 d7                	sub    edi,edx
c0000f44:	89 10                	mov    DWORD PTR [eax],edx
c0000f46:	89 fa                	mov    edx,edi
c0000f48:	eb 08                	jmp    c0000f52 <sYSMALLOc+0xb8>
c0000f4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f50:	89 f2                	mov    edx,esi
c0000f52:	83 ca 02             	or     edx,0x2
c0000f55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f58:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f5e:	8d 57 01             	lea    edx,[edi+0x1]
c0000f61:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f67:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f6d:	7e 06                	jle    c0000f75 <sYSMALLOc+0xdb>
c0000f6f:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f75:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f7b:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f81:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f87:	76 06                	jbe    c0000f8f <sYSMALLOc+0xf5>
c0000f89:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f8f:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f95:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f9b:	0f 83 41 01 00 00    	jae    c00010e2 <sYSMALLOc+0x248>
c0000fa1:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000fa7:	e9 36 01 00 00       	jmp    c00010e2 <sYSMALLOc+0x248>
c0000fac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000faf:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000fbc:	83 e0 fc             	and    eax,0xfffffffc
c0000fbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000fc7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fd3:	83 c0 10             	add    eax,0x10
c0000fd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000fda:	01 c5                	add    ebp,eax
c0000fdc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fe3:	74 04                	je     c0000fe9 <sYSMALLOc+0x14f>
c0000fe5:	2b 6c 24 04          	sub    ebp,DWORD PTR [esp+0x4]
c0000fe9:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c0000fed:	23 6c 24 14          	and    ebp,DWORD PTR [esp+0x14]
c0000ff1:	89 ee                	mov    esi,ebp
c0000ff3:	7f 19                	jg     c000100e <sYSMALLOc+0x174>
c0000ff5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ffc:	74 28                	je     c0001026 <sYSMALLOc+0x18c>
c0000ffe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001002:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001006:	01 ee                	add    esi,ebp
c0001008:	23 74 24 14          	and    esi,DWORD PTR [esp+0x14]
c000100c:	eb 18                	jmp    c0001026 <sYSMALLOc+0x18c>
c000100e:	83 ec 0c             	sub    esp,0xc
c0001011:	55                   	push   ebp
c0001012:	e8 5f d9 00 00       	call   c000e976 <sbrk_thunk>
c0001017:	83 c4 10             	add    esp,0x10
c000101a:	89 c7                	mov    edi,eax
c000101c:	83 c8 ff             	or     eax,0xffffffff
c000101f:	83 ff ff             	cmp    edi,0xffffffff
c0001022:	75 42                	jne    c0001066 <sYSMALLOc+0x1cc>
c0001024:	eb cf                	jmp    c0000ff5 <sYSMALLOc+0x15b>
c0001026:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c000102c:	77 05                	ja     c0001033 <sYSMALLOc+0x199>
c000102e:	be 00 c0 00 00       	mov    esi,0xc000
c0001033:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0001037:	77 07                	ja     c0001040 <sYSMALLOc+0x1a6>
c0001039:	31 c0                	xor    eax,eax
c000103b:	e9 00 02 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0001040:	50                   	push   eax
c0001041:	50                   	push   eax
c0001042:	6a 00                	push   0x0
c0001044:	6a ff                	push   0xffffffff
c0001046:	6a 0c                	push   0xc
c0001048:	6a 03                	push   0x3
c000104a:	56                   	push   esi
c000104b:	6a 00                	push   0x0
c000104d:	e8 5a d9 00 00       	call   c000e9ac <mmap>
c0001052:	83 c4 20             	add    esp,0x20
c0001055:	83 f8 ff             	cmp    eax,0xffffffff
c0001058:	89 c7                	mov    edi,eax
c000105a:	74 dd                	je     c0001039 <sYSMALLOc+0x19f>
c000105c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001063:	8d 04 30             	lea    eax,[eax+esi*1]
c0001066:	8b 8b 68 03 00 00    	mov    ecx,DWORD PTR [ebx+0x368]
c000106c:	01 f1                	add    ecx,esi
c000106e:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001072:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001078:	75 70                	jne    c00010ea <sYSMALLOc+0x250>
c000107a:	83 f8 ff             	cmp    eax,0xffffffff
c000107d:	75 6b                	jne    c00010ea <sYSMALLOc+0x250>
c000107f:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001083:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001087:	83 ce 01             	or     esi,0x1
c000108a:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c000108d:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001093:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001099:	73 06                	jae    c00010a1 <sYSMALLOc+0x207>
c000109b:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a1:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a7:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010ad:	73 06                	jae    c00010b5 <sYSMALLOc+0x21b>
c00010af:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bb:	83 e2 fc             	and    edx,0xfffffffc
c00010be:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
c00010c2:	0f 87 71 ff ff ff    	ja     c0001039 <sYSMALLOc+0x19f>
c00010c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010cc:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010cf:	29 fa                	sub    edx,edi
c00010d1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d4:	89 fb                	mov    ebx,edi
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	83 cb 01             	or     ebx,0x1
c00010dc:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e2:	83 c0 08             	add    eax,0x8
c00010e5:	e9 56 01 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c00010ea:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010f0:	f6 c2 01             	test   dl,0x1
c00010f3:	74 1e                	je     c0001113 <sYSMALLOc+0x279>
c00010f5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010fa:	0f 84 bb 00 00 00    	je     c00011bb <sYSMALLOc+0x321>
c0001100:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001104:	0f 86 b1 00 00 00    	jbe    c00011bb <sYSMALLOc+0x321>
c000110a:	83 e2 fe             	and    edx,0xfffffffe
c000110d:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001113:	83 f8 ff             	cmp    eax,0xffffffff
c0001116:	89 fd                	mov    ebp,edi
c0001118:	75 24                	jne    c000113e <sYSMALLOc+0x2a4>
c000111a:	83 ec 0c             	sub    esp,0xc
c000111d:	89 fd                	mov    ebp,edi
c000111f:	6a 00                	push   0x0
c0001121:	e8 50 d8 00 00       	call   c000e976 <sbrk_thunk>
c0001126:	83 c4 10             	add    esp,0x10
c0001129:	89 c2                	mov    edx,eax
c000112b:	29 fa                	sub    edx,edi
c000112d:	29 f2                	sub    edx,esi
c000112f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001135:	83 f8 ff             	cmp    eax,0xffffffff
c0001138:	0f 84 4f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000113e:	31 c9                	xor    ecx,ecx
c0001140:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001143:	29 e8                	sub    eax,ebp
c0001145:	01 c8                	add    eax,ecx
c0001147:	83 c8 01             	or     eax,0x1
c000114a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000114d:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0001153:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001158:	0f 84 2f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000115e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0001162:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001166:	83 ee 0c             	sub    esi,0xc
c0001169:	83 e6 f8             	and    esi,0xfffffff8
c000116c:	89 f0                	mov    eax,esi
c000116e:	83 c8 01             	or     eax,0x1
c0001171:	83 fe 0f             	cmp    esi,0xf
c0001174:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001177:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c000117f:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c0001187:	0f 86 00 ff ff ff    	jbe    c000108d <sYSMALLOc+0x1f3>
c000118d:	83 ec 0c             	sub    esp,0xc
c0001190:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001196:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00011a4:	83 c0 08             	add    eax,0x8
c00011a7:	50                   	push   eax
c00011a8:	e8 d9 fb ff ff       	call   c0000d86 <dlfree>
c00011ad:	83 c4 10             	add    esp,0x10
c00011b0:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00011b6:	e9 d2 fe ff ff       	jmp    c000108d <sYSMALLOc+0x1f3>
c00011bb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00011c0:	74 0e                	je     c00011d0 <sYSMALLOc+0x336>
c00011c2:	89 f8                	mov    eax,edi
c00011c4:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00011c8:	01 c1                	add    ecx,eax
c00011ca:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c00011d0:	89 fa                	mov    edx,edi
c00011d2:	83 e2 07             	and    edx,0x7
c00011d5:	74 0c                	je     c00011e3 <sYSMALLOc+0x349>
c00011d7:	b8 08 00 00 00       	mov    eax,0x8
c00011dc:	29 d0                	sub    eax,edx
c00011de:	8d 2c 07             	lea    ebp,[edi+eax*1]
c00011e1:	eb 04                	jmp    c00011e7 <sYSMALLOc+0x34d>
c00011e3:	89 fd                	mov    ebp,edi
c00011e5:	31 c0                	xor    eax,eax
c00011e7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00011eb:	83 ec 0c             	sub    esp,0xc
c00011ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00011f2:	8d 14 06             	lea    edx,[esi+eax*1]
c00011f5:	01 fa                	add    edx,edi
c00011f7:	01 d1                	add    ecx,edx
c00011f9:	29 d0                	sub    eax,edx
c00011fb:	23 4c 24 20          	and    ecx,DWORD PTR [esp+0x20]
c00011ff:	01 c1                	add    ecx,eax
c0001201:	51                   	push   ecx
c0001202:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0001206:	e8 6b d7 00 00       	call   c000e976 <sbrk_thunk>
c000120b:	83 c4 10             	add    esp,0x10
c000120e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001212:	83 f8 ff             	cmp    eax,0xffffffff
c0001215:	75 12                	jne    c0001229 <sYSMALLOc+0x38f>
c0001217:	83 ec 0c             	sub    esp,0xc
c000121a:	6a 00                	push   0x0
c000121c:	e8 55 d7 00 00       	call   c000e976 <sbrk_thunk>
c0001221:	83 c4 10             	add    esp,0x10
c0001224:	e9 0c ff ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001229:	39 f8                	cmp    eax,edi
c000122b:	0f 83 0f ff ff ff    	jae    c0001140 <sYSMALLOc+0x2a6>
c0001231:	8d 04 37             	lea    eax,[edi+esi*1]
c0001234:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000123b:	e9 f5 fe ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001240:	83 c4 2c             	add    esp,0x2c
c0001243:	5b                   	pop    ebx
c0001244:	5e                   	pop    esi
c0001245:	5f                   	pop    edi
c0001246:	5d                   	pop    ebp
c0001247:	c3                   	ret    

c0001248 <dlmalloc>:
c0001248:	55                   	push   ebp
c0001249:	57                   	push   edi
c000124a:	56                   	push   esi
c000124b:	53                   	push   ebx
c000124c:	83 ec 1c             	sub    esp,0x1c
c000124f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001253:	83 f8 df             	cmp    eax,0xffffffdf
c0001256:	0f 87 70 03 00 00    	ja     c00015cc <dlmalloc+0x384>
c000125c:	83 c0 0b             	add    eax,0xb
c000125f:	be 10 00 00 00       	mov    esi,0x10
c0001264:	83 f8 0f             	cmp    eax,0xf
c0001267:	76 05                	jbe    c000126e <dlmalloc+0x26>
c0001269:	83 e0 f8             	and    eax,0xfffffff8
c000126c:	89 c6                	mov    esi,eax
c000126e:	8b 3d 00 71 02 c0    	mov    edi,DWORD PTR ds:0xc0027100
c0001274:	f7 c7 01 00 00 00    	test   edi,0x1
c000127a:	75 17                	jne    c0001293 <dlmalloc+0x4b>
c000127c:	85 ff                	test   edi,edi
c000127e:	0f 85 05 03 00 00    	jne    c0001589 <dlmalloc+0x341>
c0001284:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001289:	e8 11 fa ff ff       	call   c0000c9f <malloc_consolidate>
c000128e:	e9 f6 02 00 00       	jmp    c0001589 <dlmalloc+0x341>
c0001293:	39 f7                	cmp    edi,esi
c0001295:	72 1f                	jb     c00012b6 <dlmalloc+0x6e>
c0001297:	89 f2                	mov    edx,esi
c0001299:	c1 ea 03             	shr    edx,0x3
c000129c:	83 ea 02             	sub    edx,0x2
c000129f:	8b 04 95 04 71 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8efc]
c00012a6:	85 c0                	test   eax,eax
c00012a8:	74 0c                	je     c00012b6 <dlmalloc+0x6e>
c00012aa:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00012ad:	89 0c 95 04 71 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8efc],ecx
c00012b4:	eb 30                	jmp    c00012e6 <dlmalloc+0x9e>
c00012b6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012bc:	89 f0                	mov    eax,esi
c00012be:	77 2e                	ja     c00012ee <dlmalloc+0xa6>
c00012c0:	c1 e8 03             	shr    eax,0x3
c00012c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012c7:	8d 14 c5 34 71 02 c0 	lea    edx,[eax*8-0x3ffd8ecc]
c00012ce:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012d1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012d4:	39 c3                	cmp    ebx,eax
c00012d6:	74 2e                	je     c0001306 <dlmalloc+0xbe>
c00012d8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012db:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012e0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012e3:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012e6:	83 c0 08             	add    eax,0x8
c00012e9:	e9 e0 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00012ee:	e8 28 f9 ff ff       	call   c0000c1b <largebin_index>
c00012f3:	83 e7 02             	and    edi,0x2
c00012f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012fa:	74 0a                	je     c0001306 <dlmalloc+0xbe>
c00012fc:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001301:	e8 99 f9 ff ff       	call   c0000c9f <malloc_consolidate>
c0001306:	8d 46 10             	lea    eax,[esi+0x10]
c0001309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000130d:	8b 1d 40 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027140
c0001313:	81 fb 34 71 02 c0    	cmp    ebx,0xc0027134
c0001319:	0f 84 13 01 00 00    	je     c0001432 <dlmalloc+0x1ea>
c000131f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001322:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001325:	83 e7 fc             	and    edi,0xfffffffc
c0001328:	81 fe ff 00 00 00    	cmp    esi,0xff
c000132e:	77 4c                	ja     c000137c <dlmalloc+0x134>
c0001330:	3d 34 71 02 c0       	cmp    eax,0xc0027134
c0001335:	75 45                	jne    c000137c <dlmalloc+0x134>
c0001337:	39 1d 30 71 02 c0    	cmp    DWORD PTR ds:0xc0027130,ebx
c000133d:	75 3d                	jne    c000137c <dlmalloc+0x134>
c000133f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001343:	73 37                	jae    c000137c <dlmalloc+0x134>
c0001345:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001348:	89 fa                	mov    edx,edi
c000134a:	a3 3c 71 02 c0       	mov    ds:0xc002713c,eax
c000134f:	29 f2                	sub    edx,esi
c0001351:	83 ce 01             	or     esi,0x1
c0001354:	a3 40 71 02 c0       	mov    ds:0xc0027140,eax
c0001359:	89 d1                	mov    ecx,edx
c000135b:	a3 30 71 02 c0       	mov    ds:0xc0027130,eax
c0001360:	83 c9 01             	or     ecx,0x1
c0001363:	c7 40 08 34 71 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027134
c000136a:	c7 40 0c 34 71 02 c0 	mov    DWORD PTR [eax+0xc],0xc0027134
c0001371:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001374:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001377:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000137a:	eb 15                	jmp    c0001391 <dlmalloc+0x149>
c000137c:	a3 40 71 02 c0       	mov    ds:0xc0027140,eax
c0001381:	39 fe                	cmp    esi,edi
c0001383:	c7 40 08 34 71 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027134
c000138a:	75 0d                	jne    c0001399 <dlmalloc+0x151>
c000138c:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001391:	8d 43 08             	lea    eax,[ebx+0x8]
c0001394:	e9 35 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c0001399:	81 ff ff 00 00 00    	cmp    edi,0xff
c000139f:	89 f8                	mov    eax,edi
c00013a1:	77 19                	ja     c00013bc <dlmalloc+0x174>
c00013a3:	c1 e8 03             	shr    eax,0x3
c00013a6:	8d 14 00             	lea    edx,[eax+eax*1]
c00013a9:	83 c2 0d             	add    edx,0xd
c00013ac:	8d 2c 95 f8 70 02 c0 	lea    ebp,[edx*4-0x3ffd8f08]
c00013b3:	8b 14 95 00 71 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8f00]
c00013ba:	eb 46                	jmp    c0001402 <dlmalloc+0x1ba>
c00013bc:	e8 5a f8 ff ff       	call   c0000c1b <largebin_index>
c00013c1:	8d 14 00             	lea    edx,[eax+eax*1]
c00013c4:	83 c2 0d             	add    edx,0xd
c00013c7:	8d 0c 95 00 71 02 c0 	lea    ecx,[edx*4-0x3ffd8f00]
c00013ce:	8b 14 95 00 71 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8f00]
c00013d5:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013d8:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013dc:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013e0:	89 d5                	mov    ebp,edx
c00013e2:	74 1e                	je     c0001402 <dlmalloc+0x1ba>
c00013e4:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013e7:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013ea:	77 12                	ja     c00013fe <dlmalloc+0x1b6>
c00013ec:	83 cf 01             	or     edi,0x1
c00013ef:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013f2:	76 05                	jbe    c00013f9 <dlmalloc+0x1b1>
c00013f4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013f7:	eb f6                	jmp    c00013ef <dlmalloc+0x1a7>
c00013f9:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013fc:	eb 04                	jmp    c0001402 <dlmalloc+0x1ba>
c00013fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001402:	89 c7                	mov    edi,eax
c0001404:	88 c1                	mov    cl,al
c0001406:	c1 ff 05             	sar    edi,0x5
c0001409:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000140d:	bf 01 00 00 00       	mov    edi,0x1
c0001412:	d3 e7                	shl    edi,cl
c0001414:	89 f8                	mov    eax,edi
c0001416:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000141a:	09 04 bd 34 74 02 c0 	or     DWORD PTR [edi*4-0x3ffd8bcc],eax
c0001421:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001424:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001427:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000142a:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000142d:	e9 db fe ff ff       	jmp    c000130d <dlmalloc+0xc5>
c0001432:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001438:	76 78                	jbe    c00014b2 <dlmalloc+0x26a>
c000143a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000143e:	8d 04 c5 34 71 02 c0 	lea    eax,[eax*8-0x3ffd8ecc]
c0001445:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001448:	8d 48 f8             	lea    ecx,[eax-0x8]
c000144b:	39 ca                	cmp    edx,ecx
c000144d:	74 63                	je     c00014b2 <dlmalloc+0x26a>
c000144f:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001452:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001455:	83 e3 fc             	and    ebx,0xfffffffc
c0001458:	39 de                	cmp    esi,ebx
c000145a:	77 52                	ja     c00014ae <dlmalloc+0x266>
c000145c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000145f:	89 df                	mov    edi,ebx
c0001461:	01 d3                	add    ebx,edx
c0001463:	29 f7                	sub    edi,esi
c0001465:	83 ff 0f             	cmp    edi,0xf
c0001468:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000146b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000146e:	8d 42 08             	lea    eax,[edx+0x8]
c0001471:	77 09                	ja     c000147c <dlmalloc+0x234>
c0001473:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001477:	e9 52 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000147c:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000147f:	83 ce 01             	or     esi,0x1
c0001482:	89 0d 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,ecx
c0001488:	89 0d 40 71 02 c0    	mov    DWORD PTR ds:0xc0027140,ecx
c000148e:	c7 41 08 34 71 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0027134
c0001495:	c7 41 0c 34 71 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0027134
c000149c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000149f:	89 fa                	mov    edx,edi
c00014a1:	83 ca 01             	or     edx,0x1
c00014a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014a7:	89 3b                	mov    DWORD PTR [ebx],edi
c00014a9:	e9 20 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00014ae:	89 c2                	mov    edx,eax
c00014b0:	eb 99                	jmp    c000144b <dlmalloc+0x203>
c00014b2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00014b6:	b8 01 00 00 00       	mov    eax,0x1
c00014bb:	41                   	inc    ecx
c00014bc:	8d 14 cd 2c 71 02 c0 	lea    edx,[ecx*8-0x3ffd8ed4]
c00014c3:	89 cb                	mov    ebx,ecx
c00014c5:	c1 eb 05             	shr    ebx,0x5
c00014c8:	8b 3c 9d 34 74 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd8bcc]
c00014cf:	d3 e0                	shl    eax,cl
c00014d1:	39 f8                	cmp    eax,edi
c00014d3:	77 04                	ja     c00014d9 <dlmalloc+0x291>
c00014d5:	85 c0                	test   eax,eax
c00014d7:	75 26                	jne    c00014ff <dlmalloc+0x2b7>
c00014d9:	43                   	inc    ebx
c00014da:	83 fb 02             	cmp    ebx,0x2
c00014dd:	0f 87 a6 00 00 00    	ja     c0001589 <dlmalloc+0x341>
c00014e3:	8b 3c 9d 34 74 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd8bcc]
c00014ea:	85 ff                	test   edi,edi
c00014ec:	74 eb                	je     c00014d9 <dlmalloc+0x291>
c00014ee:	89 d8                	mov    eax,ebx
c00014f0:	c1 e0 06             	shl    eax,0x6
c00014f3:	8d 14 85 2c 71 02 c0 	lea    edx,[eax*4-0x3ffd8ed4]
c00014fa:	b8 01 00 00 00       	mov    eax,0x1
c00014ff:	85 f8                	test   eax,edi
c0001501:	75 07                	jne    c000150a <dlmalloc+0x2c2>
c0001503:	83 c2 08             	add    edx,0x8
c0001506:	01 c0                	add    eax,eax
c0001508:	eb f5                	jmp    c00014ff <dlmalloc+0x2b7>
c000150a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000150d:	39 ca                	cmp    edx,ecx
c000150f:	75 14                	jne    c0001525 <dlmalloc+0x2dd>
c0001511:	89 c1                	mov    ecx,eax
c0001513:	83 c2 08             	add    edx,0x8
c0001516:	f7 d1                	not    ecx
c0001518:	01 c0                	add    eax,eax
c000151a:	21 cf                	and    edi,ecx
c000151c:	89 3c 9d 34 74 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8bcc],edi
c0001523:	eb ac                	jmp    c00014d1 <dlmalloc+0x289>
c0001525:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001528:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000152b:	83 e0 fc             	and    eax,0xfffffffc
c000152e:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001531:	89 c3                	mov    ebx,eax
c0001533:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001536:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001539:	29 f3                	sub    ebx,esi
c000153b:	8d 41 08             	lea    eax,[ecx+0x8]
c000153e:	83 fb 0f             	cmp    ebx,0xf
c0001541:	77 09                	ja     c000154c <dlmalloc+0x304>
c0001543:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001547:	e9 82 00 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000154c:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000154f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001555:	89 3d 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,edi
c000155b:	89 3d 40 71 02 c0    	mov    DWORD PTR ds:0xc0027140,edi
c0001561:	c7 47 08 34 71 02 c0 	mov    DWORD PTR [edi+0x8],0xc0027134
c0001568:	c7 47 0c 34 71 02 c0 	mov    DWORD PTR [edi+0xc],0xc0027134
c000156f:	77 06                	ja     c0001577 <dlmalloc+0x32f>
c0001571:	89 3d 30 71 02 c0    	mov    DWORD PTR ds:0xc0027130,edi
c0001577:	83 ce 01             	or     esi,0x1
c000157a:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000157d:	89 d9                	mov    ecx,ebx
c000157f:	83 c9 01             	or     ecx,0x1
c0001582:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001585:	89 1a                	mov    DWORD PTR [edx],ebx
c0001587:	eb 45                	jmp    c00015ce <dlmalloc+0x386>
c0001589:	a1 2c 71 02 c0       	mov    eax,ds:0xc002712c
c000158e:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001591:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001594:	83 e2 fc             	and    edx,0xfffffffc
c0001597:	39 d1                	cmp    ecx,edx
c0001599:	77 1e                	ja     c00015b9 <dlmalloc+0x371>
c000159b:	89 f3                	mov    ebx,esi
c000159d:	29 f2                	sub    edx,esi
c000159f:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00015a2:	83 cb 01             	or     ebx,0x1
c00015a5:	89 0d 2c 71 02 c0    	mov    DWORD PTR ds:0xc002712c,ecx
c00015ab:	83 ca 01             	or     edx,0x1
c00015ae:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015b1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00015b4:	e9 2d fd ff ff       	jmp    c00012e6 <dlmalloc+0x9e>
c00015b9:	83 c4 1c             	add    esp,0x1c
c00015bc:	89 f0                	mov    eax,esi
c00015be:	5b                   	pop    ebx
c00015bf:	ba 00 71 02 c0       	mov    edx,0xc0027100
c00015c4:	5e                   	pop    esi
c00015c5:	5f                   	pop    edi
c00015c6:	5d                   	pop    ebp
c00015c7:	e9 ce f8 ff ff       	jmp    c0000e9a <sYSMALLOc>
c00015cc:	31 c0                	xor    eax,eax
c00015ce:	83 c4 1c             	add    esp,0x1c
c00015d1:	5b                   	pop    ebx
c00015d2:	5e                   	pop    esi
c00015d3:	5f                   	pop    edi
c00015d4:	5d                   	pop    ebp
c00015d5:	c3                   	ret    

c00015d6 <iALLOc>:
c00015d6:	55                   	push   ebp
c00015d7:	89 c5                	mov    ebp,eax
c00015d9:	57                   	push   edi
c00015da:	56                   	push   esi
c00015db:	53                   	push   ebx
c00015dc:	83 ec 2c             	sub    esp,0x2c
c00015df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015e7:	83 3d 00 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027100,0x0
c00015ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015f2:	75 12                	jne    c0001606 <iALLOc+0x30>
c00015f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015f8:	b8 00 71 02 c0       	mov    eax,0xc0027100
c00015fd:	e8 9d f6 ff ff       	call   c0000c9f <malloc_consolidate>
c0001602:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001606:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000160b:	74 12                	je     c000161f <iALLOc+0x49>
c000160d:	85 ed                	test   ebp,ebp
c000160f:	0f 84 64 01 00 00    	je     c0001779 <iALLOc+0x1a3>
c0001615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000161d:	eb 33                	jmp    c0001652 <iALLOc+0x7c>
c000161f:	85 ed                	test   ebp,ebp
c0001621:	75 14                	jne    c0001637 <iALLOc+0x61>
c0001623:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000162b:	83 c4 2c             	add    esp,0x2c
c000162e:	5b                   	pop    ebx
c000162f:	5e                   	pop    esi
c0001630:	5f                   	pop    edi
c0001631:	5d                   	pop    ebp
c0001632:	e9 11 fc ff ff       	jmp    c0001248 <dlmalloc>
c0001637:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000163f:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001646:	83 f8 0f             	cmp    eax,0xf
c0001649:	76 07                	jbe    c0001652 <iALLOc+0x7c>
c000164b:	83 e0 f8             	and    eax,0xfffffff8
c000164e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001652:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001657:	75 09                	jne    c0001662 <iALLOc+0x8c>
c0001659:	89 d0                	mov    eax,edx
c000165b:	31 f6                	xor    esi,esi
c000165d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001660:	eb 3b                	jmp    c000169d <iALLOc+0xc7>
c0001662:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000166a:	8b 02                	mov    eax,DWORD PTR [edx]
c000166c:	83 c0 0b             	add    eax,0xb
c000166f:	83 f8 0f             	cmp    eax,0xf
c0001672:	76 07                	jbe    c000167b <iALLOc+0xa5>
c0001674:	83 e0 f8             	and    eax,0xfffffff8
c0001677:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000167b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000167f:	0f af f5             	imul   esi,ebp
c0001682:	eb 25                	jmp    c00016a9 <iALLOc+0xd3>
c0001684:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001686:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001689:	bb 10 00 00 00       	mov    ebx,0x10
c000168e:	83 f9 0f             	cmp    ecx,0xf
c0001691:	76 05                	jbe    c0001698 <iALLOc+0xc2>
c0001693:	83 e1 f8             	and    ecx,0xfffffff8
c0001696:	89 cb                	mov    ebx,ecx
c0001698:	01 de                	add    esi,ebx
c000169a:	83 c0 04             	add    eax,0x4
c000169d:	39 c7                	cmp    edi,eax
c000169f:	75 e3                	jne    c0001684 <iALLOc+0xae>
c00016a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00016a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00016ad:	83 ec 0c             	sub    esp,0xc
c00016b0:	8b 1d 54 74 02 c0    	mov    ebx,DWORD PTR ds:0xc0027454
c00016b6:	c7 05 54 74 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027454,0x0
c00016c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016c4:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00016c8:	50                   	push   eax
c00016c9:	e8 7a fb ff ff       	call   c0001248 <dlmalloc>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	89 1d 54 74 02 c0    	mov    DWORD PTR ds:0xc0027454,ebx
c00016d7:	85 c0                	test   eax,eax
c00016d9:	0f 84 92 00 00 00    	je     c0001771 <iALLOc+0x19b>
c00016df:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016e2:	8d 78 f8             	lea    edi,[eax-0x8]
c00016e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016e9:	83 e3 fc             	and    ebx,0xfffffffc
c00016ec:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016f1:	74 1e                	je     c0001711 <iALLOc+0x13b>
c00016f3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016f7:	89 d9                	mov    ecx,ebx
c00016f9:	52                   	push   edx
c00016fa:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016fe:	83 e9 04             	sub    ecx,0x4
c0001701:	51                   	push   ecx
c0001702:	6a 00                	push   0x0
c0001704:	50                   	push   eax
c0001705:	e8 e6 ed ff ff       	call   c00004f0 <memset>
c000170a:	83 c4 10             	add    esp,0x10
c000170d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001711:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001716:	75 14                	jne    c000172c <iALLOc+0x156>
c0001718:	8d 04 37             	lea    eax,[edi+esi*1]
c000171b:	29 f3                	sub    ebx,esi
c000171d:	8d 48 08             	lea    ecx,[eax+0x8]
c0001720:	83 cb 01             	or     ebx,0x1
c0001723:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001726:	89 f3                	mov    ebx,esi
c0001728:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000172c:	31 c0                	xor    eax,eax
c000172e:	4d                   	dec    ebp
c000172f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001733:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001736:	39 c5                	cmp    ebp,eax
c0001738:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000173b:	74 2c                	je     c0001769 <iALLOc+0x193>
c000173d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001741:	85 c9                	test   ecx,ecx
c0001743:	75 15                	jne    c000175a <iALLOc+0x184>
c0001745:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001748:	8d 71 0b             	lea    esi,[ecx+0xb]
c000174b:	b9 10 00 00 00       	mov    ecx,0x10
c0001750:	83 fe 0f             	cmp    esi,0xf
c0001753:	76 05                	jbe    c000175a <iALLOc+0x184>
c0001755:	83 e6 f8             	and    esi,0xfffffff8
c0001758:	89 f1                	mov    ecx,esi
c000175a:	89 ce                	mov    esi,ecx
c000175c:	29 cb                	sub    ebx,ecx
c000175e:	83 ce 01             	or     esi,0x1
c0001761:	40                   	inc    eax
c0001762:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001765:	01 cf                	add    edi,ecx
c0001767:	eb c6                	jmp    c000172f <iALLOc+0x159>
c0001769:	83 cb 01             	or     ebx,0x1
c000176c:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000176f:	eb 08                	jmp    c0001779 <iALLOc+0x1a3>
c0001771:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001779:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177d:	83 c4 2c             	add    esp,0x2c
c0001780:	5b                   	pop    ebx
c0001781:	5e                   	pop    esi
c0001782:	5f                   	pop    edi
c0001783:	5d                   	pop    ebp
c0001784:	c3                   	ret    

c0001785 <dlrealloc>:
c0001785:	55                   	push   ebp
c0001786:	57                   	push   edi
c0001787:	56                   	push   esi
c0001788:	53                   	push   ebx
c0001789:	83 ec 1c             	sub    esp,0x1c
c000178c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001790:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001794:	85 db                	test   ebx,ebx
c0001796:	75 10                	jne    c00017a8 <dlrealloc+0x23>
c0001798:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000179c:	83 c4 1c             	add    esp,0x1c
c000179f:	5b                   	pop    ebx
c00017a0:	5e                   	pop    esi
c00017a1:	5f                   	pop    edi
c00017a2:	5d                   	pop    ebp
c00017a3:	e9 a0 fa ff ff       	jmp    c0001248 <dlmalloc>
c00017a8:	83 f8 df             	cmp    eax,0xffffffdf
c00017ab:	0f 87 a6 01 00 00    	ja     c0001957 <dlrealloc+0x1d2>
c00017b1:	83 c0 0b             	add    eax,0xb
c00017b4:	bd 10 00 00 00       	mov    ebp,0x10
c00017b9:	83 f8 0f             	cmp    eax,0xf
c00017bc:	76 05                	jbe    c00017c3 <dlrealloc+0x3e>
c00017be:	83 e0 f8             	and    eax,0xfffffff8
c00017c1:	89 c5                	mov    ebp,eax
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	89 ce                	mov    esi,ecx
c00017c8:	83 e6 fc             	and    esi,0xfffffffc
c00017cb:	f6 c1 02             	test   cl,0x2
c00017ce:	0f 85 4e 01 00 00    	jne    c0001922 <dlrealloc+0x19d>
c00017d4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017d7:	39 f5                	cmp    ebp,esi
c00017d9:	0f 86 04 01 00 00    	jbe    c00018e3 <dlrealloc+0x15e>
c00017df:	8d 14 37             	lea    edx,[edi+esi*1]
c00017e2:	39 15 2c 71 02 c0    	cmp    DWORD PTR ds:0xc002712c,edx
c00017e8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00017eb:	75 33                	jne    c0001820 <dlrealloc+0x9b>
c00017ed:	83 e0 fc             	and    eax,0xfffffffc
c00017f0:	01 f0                	add    eax,esi
c00017f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017f6:	8d 45 10             	lea    eax,[ebp+0x10]
c00017f9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00017fd:	77 49                	ja     c0001848 <dlrealloc+0xc3>
c00017ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001803:	83 e1 01             	and    ecx,0x1
c0001806:	01 ef                	add    edi,ebp
c0001808:	09 e9                	or     ecx,ebp
c000180a:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c000180d:	89 3d 2c 71 02 c0    	mov    DWORD PTR ds:0xc002712c,edi
c0001813:	29 e8                	sub    eax,ebp
c0001815:	83 c8 01             	or     eax,0x1
c0001818:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000181b:	e9 39 01 00 00       	jmp    c0001959 <dlrealloc+0x1d4>
c0001820:	89 c1                	mov    ecx,eax
c0001822:	83 e1 fe             	and    ecx,0xfffffffe
c0001825:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000182a:	75 1c                	jne    c0001848 <dlrealloc+0xc3>
c000182c:	83 e0 fc             	and    eax,0xfffffffc
c000182f:	01 f0                	add    eax,esi
c0001831:	39 c5                	cmp    ebp,eax
c0001833:	77 13                	ja     c0001848 <dlrealloc+0xc3>
c0001835:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001838:	89 c6                	mov    esi,eax
c000183a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000183d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001840:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001843:	e9 9b 00 00 00       	jmp    c00018e3 <dlrealloc+0x15e>
c0001848:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000184c:	8d 45 f9             	lea    eax,[ebp-0x7]
c000184f:	83 ec 0c             	sub    esp,0xc
c0001852:	50                   	push   eax
c0001853:	e8 f0 f9 ff ff       	call   c0001248 <dlmalloc>
c0001858:	83 c4 10             	add    esp,0x10
c000185b:	85 c0                	test   eax,eax
c000185d:	0f 84 f4 00 00 00    	je     c0001957 <dlrealloc+0x1d2>
c0001863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001867:	8d 48 f8             	lea    ecx,[eax-0x8]
c000186a:	39 ca                	cmp    edx,ecx
c000186c:	75 0a                	jne    c0001878 <dlrealloc+0xf3>
c000186e:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001871:	83 e0 fc             	and    eax,0xfffffffc
c0001874:	01 c6                	add    esi,eax
c0001876:	eb 6b                	jmp    c00018e3 <dlrealloc+0x15e>
c0001878:	8d 4e fc             	lea    ecx,[esi-0x4]
c000187b:	83 f9 27             	cmp    ecx,0x27
c000187e:	76 08                	jbe    c0001888 <dlrealloc+0x103>
c0001880:	89 de                	mov    esi,ebx
c0001882:	89 c7                	mov    edi,eax
c0001884:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001886:	eb 43                	jmp    c00018cb <dlrealloc+0x146>
c0001888:	8b 13                	mov    edx,DWORD PTR [ebx]
c000188a:	83 f9 13             	cmp    ecx,0x13
c000188d:	89 10                	mov    DWORD PTR [eax],edx
c000188f:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001892:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001895:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001898:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000189b:	76 2e                	jbe    c00018cb <dlrealloc+0x146>
c000189d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00018a0:	83 f9 1b             	cmp    ecx,0x1b
c00018a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00018a6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00018a9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00018ac:	76 1d                	jbe    c00018cb <dlrealloc+0x146>
c00018ae:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00018b1:	83 f9 23             	cmp    ecx,0x23
c00018b4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00018b7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00018ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00018bd:	76 0c                	jbe    c00018cb <dlrealloc+0x146>
c00018bf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00018c2:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00018c5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00018c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00018cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018cf:	83 ec 0c             	sub    esp,0xc
c00018d2:	53                   	push   ebx
c00018d3:	e8 ae f4 ff ff       	call   c0000d86 <dlfree>
c00018d8:	83 c4 10             	add    esp,0x10
c00018db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018df:	89 c3                	mov    ebx,eax
c00018e1:	eb 76                	jmp    c0001959 <dlrealloc+0x1d4>
c00018e3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018e6:	8d 04 37             	lea    eax,[edi+esi*1]
c00018e9:	89 f2                	mov    edx,esi
c00018eb:	29 ea                	sub    edx,ebp
c00018ed:	83 e1 01             	and    ecx,0x1
c00018f0:	83 fa 0f             	cmp    edx,0xf
c00018f3:	77 0b                	ja     c0001900 <dlrealloc+0x17b>
c00018f5:	09 f1                	or     ecx,esi
c00018f7:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018fe:	eb 59                	jmp    c0001959 <dlrealloc+0x1d4>
c0001900:	01 ef                	add    edi,ebp
c0001902:	83 ca 01             	or     edx,0x1
c0001905:	09 cd                	or     ebp,ecx
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000190d:	83 c7 08             	add    edi,0x8
c0001910:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001913:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001917:	57                   	push   edi
c0001918:	e8 69 f4 ff ff       	call   c0000d86 <dlfree>
c000191d:	83 c4 10             	add    esp,0x10
c0001920:	eb 37                	jmp    c0001959 <dlrealloc+0x1d4>
c0001922:	8d 45 04             	lea    eax,[ebp+0x4]
c0001925:	39 f0                	cmp    eax,esi
c0001927:	76 30                	jbe    c0001959 <dlrealloc+0x1d4>
c0001929:	83 ec 0c             	sub    esp,0xc
c000192c:	83 ed 07             	sub    ebp,0x7
c000192f:	55                   	push   ebp
c0001930:	e8 13 f9 ff ff       	call   c0001248 <dlmalloc>
c0001935:	83 c4 10             	add    esp,0x10
c0001938:	85 c0                	test   eax,eax
c000193a:	89 c5                	mov    ebp,eax
c000193c:	74 19                	je     c0001957 <dlrealloc+0x1d2>
c000193e:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001941:	89 c7                	mov    edi,eax
c0001943:	89 de                	mov    esi,ebx
c0001945:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001947:	83 ec 0c             	sub    esp,0xc
c000194a:	53                   	push   ebx
c000194b:	89 eb                	mov    ebx,ebp
c000194d:	e8 34 f4 ff ff       	call   c0000d86 <dlfree>
c0001952:	83 c4 10             	add    esp,0x10
c0001955:	eb 02                	jmp    c0001959 <dlrealloc+0x1d4>
c0001957:	31 db                	xor    ebx,ebx
c0001959:	83 c4 1c             	add    esp,0x1c
c000195c:	89 d8                	mov    eax,ebx
c000195e:	5b                   	pop    ebx
c000195f:	5e                   	pop    esi
c0001960:	5f                   	pop    edi
c0001961:	5d                   	pop    ebp
c0001962:	c3                   	ret    

c0001963 <dlmemalign>:
c0001963:	55                   	push   ebp
c0001964:	57                   	push   edi
c0001965:	56                   	push   esi
c0001966:	53                   	push   ebx
c0001967:	83 ec 0c             	sub    esp,0xc
c000196a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000196e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001972:	83 fa 08             	cmp    edx,0x8
c0001975:	77 10                	ja     c0001987 <dlmemalign+0x24>
c0001977:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000197b:	83 c4 0c             	add    esp,0xc
c000197e:	5b                   	pop    ebx
c000197f:	5e                   	pop    esi
c0001980:	5f                   	pop    edi
c0001981:	5d                   	pop    ebp
c0001982:	e9 c1 f8 ff ff       	jmp    c0001248 <dlmalloc>
c0001987:	83 fa 0f             	cmp    edx,0xf
c000198a:	bf 10 00 00 00       	mov    edi,0x10
c000198f:	76 13                	jbe    c00019a4 <dlmemalign+0x41>
c0001991:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001994:	85 d1                	test   ecx,edx
c0001996:	75 04                	jne    c000199c <dlmemalign+0x39>
c0001998:	89 d7                	mov    edi,edx
c000199a:	eb 08                	jmp    c00019a4 <dlmemalign+0x41>
c000199c:	39 d7                	cmp    edi,edx
c000199e:	73 04                	jae    c00019a4 <dlmemalign+0x41>
c00019a0:	01 ff                	add    edi,edi
c00019a2:	eb f8                	jmp    c000199c <dlmemalign+0x39>
c00019a4:	83 f8 df             	cmp    eax,0xffffffdf
c00019a7:	76 07                	jbe    c00019b0 <dlmemalign+0x4d>
c00019a9:	31 c0                	xor    eax,eax
c00019ab:	e9 ce 00 00 00       	jmp    c0001a7e <dlmemalign+0x11b>
c00019b0:	83 c0 0b             	add    eax,0xb
c00019b3:	bd 10 00 00 00       	mov    ebp,0x10
c00019b8:	83 f8 0f             	cmp    eax,0xf
c00019bb:	76 05                	jbe    c00019c2 <dlmemalign+0x5f>
c00019bd:	83 e0 f8             	and    eax,0xfffffff8
c00019c0:	89 c5                	mov    ebp,eax
c00019c2:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00019c6:	83 ec 0c             	sub    esp,0xc
c00019c9:	50                   	push   eax
c00019ca:	e8 79 f8 ff ff       	call   c0001248 <dlmalloc>
c00019cf:	83 c4 10             	add    esp,0x10
c00019d2:	85 c0                	test   eax,eax
c00019d4:	89 c1                	mov    ecx,eax
c00019d6:	74 d1                	je     c00019a9 <dlmemalign+0x46>
c00019d8:	8d 70 f8             	lea    esi,[eax-0x8]
c00019db:	31 d2                	xor    edx,edx
c00019dd:	f7 f7                	div    edi
c00019df:	85 d2                	test   edx,edx
c00019e1:	74 62                	je     c0001a45 <dlmemalign+0xe2>
c00019e3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019e7:	89 f8                	mov    eax,edi
c00019e9:	f7 d8                	neg    eax
c00019eb:	21 c3                	and    ebx,eax
c00019ed:	83 eb 08             	sub    ebx,0x8
c00019f0:	89 d8                	mov    eax,ebx
c00019f2:	29 f0                	sub    eax,esi
c00019f4:	83 f8 0f             	cmp    eax,0xf
c00019f7:	77 02                	ja     c00019fb <dlmemalign+0x98>
c00019f9:	01 fb                	add    ebx,edi
c00019fb:	89 d8                	mov    eax,ebx
c00019fd:	29 f0                	sub    eax,esi
c00019ff:	89 c6                	mov    esi,eax
c0001a01:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a04:	89 c2                	mov    edx,eax
c0001a06:	83 e2 fc             	and    edx,0xfffffffc
c0001a09:	29 f2                	sub    edx,esi
c0001a0b:	a8 02                	test   al,0x2
c0001a0d:	74 10                	je     c0001a1f <dlmemalign+0xbc>
c0001a0f:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001a12:	83 ca 02             	or     edx,0x2
c0001a15:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001a18:	8d 43 08             	lea    eax,[ebx+0x8]
c0001a1b:	89 33                	mov    DWORD PTR [ebx],esi
c0001a1d:	eb 5f                	jmp    c0001a7e <dlmemalign+0x11b>
c0001a1f:	89 d0                	mov    eax,edx
c0001a21:	83 ec 0c             	sub    esp,0xc
c0001a24:	83 c8 01             	or     eax,0x1
c0001a27:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001a2a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a2f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a32:	83 e0 01             	and    eax,0x1
c0001a35:	09 f0                	or     eax,esi
c0001a37:	89 de                	mov    esi,ebx
c0001a39:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a3c:	51                   	push   ecx
c0001a3d:	e8 44 f3 ff ff       	call   c0000d86 <dlfree>
c0001a42:	83 c4 10             	add    esp,0x10
c0001a45:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a48:	a8 02                	test   al,0x2
c0001a4a:	75 2f                	jne    c0001a7b <dlmemalign+0x118>
c0001a4c:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a4f:	83 e0 fc             	and    eax,0xfffffffc
c0001a52:	39 c2                	cmp    edx,eax
c0001a54:	73 25                	jae    c0001a7b <dlmemalign+0x118>
c0001a56:	29 e8                	sub    eax,ebp
c0001a58:	83 ec 0c             	sub    esp,0xc
c0001a5b:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a5e:	83 c8 01             	or     eax,0x1
c0001a61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001a64:	83 c2 08             	add    edx,0x8
c0001a67:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a6a:	83 e0 01             	and    eax,0x1
c0001a6d:	09 c5                	or     ebp,eax
c0001a6f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a72:	52                   	push   edx
c0001a73:	e8 0e f3 ff ff       	call   c0000d86 <dlfree>
c0001a78:	83 c4 10             	add    esp,0x10
c0001a7b:	8d 46 08             	lea    eax,[esi+0x8]
c0001a7e:	83 c4 0c             	add    esp,0xc
c0001a81:	5b                   	pop    ebx
c0001a82:	5e                   	pop    esi
c0001a83:	5f                   	pop    edi
c0001a84:	5d                   	pop    ebp
c0001a85:	c3                   	ret    

c0001a86 <dlcalloc>:
c0001a86:	53                   	push   ebx
c0001a87:	83 ec 14             	sub    esp,0x14
c0001a8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a8e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a93:	50                   	push   eax
c0001a94:	e8 af f7 ff ff       	call   c0001248 <dlmalloc>
c0001a99:	83 c4 10             	add    esp,0x10
c0001a9c:	85 c0                	test   eax,eax
c0001a9e:	89 c3                	mov    ebx,eax
c0001aa0:	74 6e                	je     c0001b10 <dlcalloc+0x8a>
c0001aa2:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001aa5:	a8 02                	test   al,0x2
c0001aa7:	75 67                	jne    c0001b10 <dlcalloc+0x8a>
c0001aa9:	83 e0 fc             	and    eax,0xfffffffc
c0001aac:	83 e8 04             	sub    eax,0x4
c0001aaf:	83 f8 27             	cmp    eax,0x27
c0001ab2:	76 0f                	jbe    c0001ac3 <dlcalloc+0x3d>
c0001ab4:	52                   	push   edx
c0001ab5:	50                   	push   eax
c0001ab6:	6a 00                	push   0x0
c0001ab8:	53                   	push   ebx
c0001ab9:	e8 32 ea ff ff       	call   c00004f0 <memset>
c0001abe:	83 c4 10             	add    esp,0x10
c0001ac1:	eb 4d                	jmp    c0001b10 <dlcalloc+0x8a>
c0001ac3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001ac9:	83 f8 13             	cmp    eax,0x13
c0001acc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001ad3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001ada:	76 34                	jbe    c0001b10 <dlcalloc+0x8a>
c0001adc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ae3:	83 f8 1b             	cmp    eax,0x1b
c0001ae6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001aed:	76 21                	jbe    c0001b10 <dlcalloc+0x8a>
c0001aef:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001af6:	83 f8 23             	cmp    eax,0x23
c0001af9:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001b00:	76 0e                	jbe    c0001b10 <dlcalloc+0x8a>
c0001b02:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001b09:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001b10:	83 c4 08             	add    esp,0x8
c0001b13:	89 d8                	mov    eax,ebx
c0001b15:	5b                   	pop    ebx
c0001b16:	c3                   	ret    

c0001b17 <dlcfree>:
c0001b17:	e9 6a f2 ff ff       	jmp    c0000d86 <dlfree>

c0001b1c <dlindependent_calloc>:
c0001b1c:	83 ec 28             	sub    esp,0x28
c0001b1f:	b9 03 00 00 00       	mov    ecx,0x3
c0001b24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001b2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b34:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b38:	e8 99 fa ff ff       	call   c00015d6 <iALLOc>
c0001b3d:	83 c4 2c             	add    esp,0x2c
c0001b40:	c3                   	ret    

c0001b41 <dlindependent_comalloc>:
c0001b41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b45:	31 c9                	xor    ecx,ecx
c0001b47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b53:	e9 7e fa ff ff       	jmp    c00015d6 <iALLOc>

c0001b58 <dlvalloc>:
c0001b58:	83 ec 0c             	sub    esp,0xc
c0001b5b:	83 3d 00 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027100,0x0
c0001b62:	75 0a                	jne    c0001b6e <dlvalloc+0x16>
c0001b64:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001b69:	e8 31 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b6e:	50                   	push   eax
c0001b6f:	50                   	push   eax
c0001b70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b74:	ff 35 5c 74 02 c0    	push   DWORD PTR ds:0xc002745c
c0001b7a:	e8 e4 fd ff ff       	call   c0001963 <dlmemalign>
c0001b7f:	83 c4 1c             	add    esp,0x1c
c0001b82:	c3                   	ret    

c0001b83 <dlpvalloc>:
c0001b83:	83 ec 0c             	sub    esp,0xc
c0001b86:	83 3d 00 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027100,0x0
c0001b8d:	75 0a                	jne    c0001b99 <dlpvalloc+0x16>
c0001b8f:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001b94:	e8 06 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b99:	52                   	push   edx
c0001b9a:	a1 5c 74 02 c0       	mov    eax,ds:0xc002745c
c0001b9f:	52                   	push   edx
c0001ba0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001ba4:	89 c1                	mov    ecx,eax
c0001ba6:	f7 d9                	neg    ecx
c0001ba8:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001bac:	21 ca                	and    edx,ecx
c0001bae:	52                   	push   edx
c0001baf:	50                   	push   eax
c0001bb0:	e8 ae fd ff ff       	call   c0001963 <dlmemalign>
c0001bb5:	83 c4 1c             	add    esp,0x1c
c0001bb8:	c3                   	ret    

c0001bb9 <dlmalloc_trim>:
c0001bb9:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001bbe:	e8 dc f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001bc3:	31 c0                	xor    eax,eax
c0001bc5:	c3                   	ret    

c0001bc6 <dlmalloc_usable_size>:
c0001bc6:	53                   	push   ebx
c0001bc7:	31 c0                	xor    eax,eax
c0001bc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001bcd:	85 c9                	test   ecx,ecx
c0001bcf:	74 24                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bd1:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001bd4:	f6 c2 02             	test   dl,0x2
c0001bd7:	74 08                	je     c0001be1 <dlmalloc_usable_size+0x1b>
c0001bd9:	83 e2 fc             	and    edx,0xfffffffc
c0001bdc:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bdf:	eb 14                	jmp    c0001bf5 <dlmalloc_usable_size+0x2f>
c0001be1:	89 d3                	mov    ebx,edx
c0001be3:	31 c0                	xor    eax,eax
c0001be5:	83 e3 fe             	and    ebx,0xfffffffe
c0001be8:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bed:	74 06                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bef:	83 e2 fc             	and    edx,0xfffffffc
c0001bf2:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bf5:	5b                   	pop    ebx
c0001bf6:	c3                   	ret    

c0001bf7 <dlmallinfo>:
c0001bf7:	55                   	push   ebp
c0001bf8:	57                   	push   edi
c0001bf9:	56                   	push   esi
c0001bfa:	53                   	push   ebx
c0001bfb:	83 ec 08             	sub    esp,0x8
c0001bfe:	83 3d 2c 71 02 c0 00 	cmp    DWORD PTR ds:0xc002712c,0x0
c0001c05:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001c09:	75 0a                	jne    c0001c15 <dlmallinfo+0x1e>
c0001c0b:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001c10:	e8 8a f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001c15:	a1 2c 71 02 c0       	mov    eax,ds:0xc002712c
c0001c1a:	31 ed                	xor    ebp,ebp
c0001c1c:	31 c9                	xor    ecx,ecx
c0001c1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001c21:	83 e0 fc             	and    eax,0xfffffffc
c0001c24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c28:	31 c0                	xor    eax,eax
c0001c2a:	8b 14 85 04 71 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8efc]
c0001c31:	85 d2                	test   edx,edx
c0001c33:	74 0e                	je     c0001c43 <dlmallinfo+0x4c>
c0001c35:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c38:	45                   	inc    ebp
c0001c39:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c3c:	83 e6 fc             	and    esi,0xfffffffc
c0001c3f:	01 f1                	add    ecx,esi
c0001c41:	eb ee                	jmp    c0001c31 <dlmallinfo+0x3a>
c0001c43:	40                   	inc    eax
c0001c44:	83 f8 0a             	cmp    eax,0xa
c0001c47:	75 e1                	jne    c0001c2a <dlmallinfo+0x33>
c0001c49:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c54:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c57:	b8 34 71 02 c0       	mov    eax,0xc0027134
c0001c5c:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c5f:	39 f0                	cmp    eax,esi
c0001c61:	74 10                	je     c0001c73 <dlmallinfo+0x7c>
c0001c63:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c66:	ff 04 24             	inc    DWORD PTR [esp]
c0001c69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c6c:	83 e7 fc             	and    edi,0xfffffffc
c0001c6f:	01 fa                	add    edx,edi
c0001c71:	eb ec                	jmp    c0001c5f <dlmallinfo+0x68>
c0001c73:	83 c0 08             	add    eax,0x8
c0001c76:	3d 2c 74 02 c0       	cmp    eax,0xc002742c
c0001c7b:	75 df                	jne    c0001c5c <dlmallinfo+0x65>
c0001c7d:	8b 35 50 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027450
c0001c83:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c86:	a1 68 74 02 c0       	mov    eax,ds:0xc0027468
c0001c8b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c8e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c91:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c97:	8b 35 64 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027464
c0001c9d:	89 03                	mov    DWORD PTR [ebx],eax
c0001c9f:	29 d0                	sub    eax,edx
c0001ca1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ca8:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001cab:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001cae:	8b 35 74 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027474
c0001cb4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001cb7:	89 d8                	mov    eax,ebx
c0001cb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001cbc:	83 c4 08             	add    esp,0x8
c0001cbf:	5b                   	pop    ebx
c0001cc0:	5e                   	pop    esi
c0001cc1:	5f                   	pop    edi
c0001cc2:	5d                   	pop    ebp
c0001cc3:	c2 04 00             	ret    0x4

c0001cc6 <dlmalloc_stats>:
c0001cc6:	83 ec 30             	sub    esp,0x30
c0001cc9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001ccd:	50                   	push   eax
c0001cce:	e8 24 ff ff ff       	call   c0001bf7 <dlmallinfo>
c0001cd3:	83 c4 30             	add    esp,0x30
c0001cd6:	c3                   	ret    

c0001cd7 <dlmallopt>:
c0001cd7:	56                   	push   esi
c0001cd8:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001cdd:	53                   	push   ebx
c0001cde:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001ce2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001ce6:	e8 b4 ef ff ff       	call   c0000c9f <malloc_consolidate>
c0001ceb:	8d 46 04             	lea    eax,[esi+0x4]
c0001cee:	83 f8 05             	cmp    eax,0x5
c0001cf1:	77 5d                	ja     c0001d50 <dlmallopt+0x79>
c0001cf3:	ff 24 85 44 11 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdeebc]
c0001cfa:	83 fb 50             	cmp    ebx,0x50
c0001cfd:	77 51                	ja     c0001d50 <dlmallopt+0x79>
c0001cff:	85 db                	test   ebx,ebx
c0001d01:	ba 08 00 00 00       	mov    edx,0x8
c0001d06:	74 12                	je     c0001d1a <dlmallopt+0x43>
c0001d08:	83 c3 0b             	add    ebx,0xb
c0001d0b:	ba 10 00 00 00       	mov    edx,0x10
c0001d10:	83 fb 0f             	cmp    ebx,0xf
c0001d13:	76 05                	jbe    c0001d1a <dlmallopt+0x43>
c0001d15:	89 da                	mov    edx,ebx
c0001d17:	83 e2 f8             	and    edx,0xfffffff8
c0001d1a:	a1 00 71 02 c0       	mov    eax,ds:0xc0027100
c0001d1f:	83 e0 03             	and    eax,0x3
c0001d22:	09 d0                	or     eax,edx
c0001d24:	a3 00 71 02 c0       	mov    ds:0xc0027100,eax
c0001d29:	eb 27                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d2b:	89 1d 44 74 02 c0    	mov    DWORD PTR ds:0xc0027444,ebx
c0001d31:	eb 16                	jmp    c0001d49 <dlmallopt+0x72>
c0001d33:	89 1d 48 74 02 c0    	mov    DWORD PTR ds:0xc0027448,ebx
c0001d39:	eb 0e                	jmp    c0001d49 <dlmallopt+0x72>
c0001d3b:	89 1d 4c 74 02 c0    	mov    DWORD PTR ds:0xc002744c,ebx
c0001d41:	eb 06                	jmp    c0001d49 <dlmallopt+0x72>
c0001d43:	89 1d 54 74 02 c0    	mov    DWORD PTR ds:0xc0027454,ebx
c0001d49:	be 01 00 00 00       	mov    esi,0x1
c0001d4e:	eb 02                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d50:	31 f6                	xor    esi,esi
c0001d52:	5b                   	pop    ebx
c0001d53:	89 f0                	mov    eax,esi
c0001d55:	5e                   	pop    esi
c0001d56:	c3                   	ret    
c0001d57:	90                   	nop

c0001d58 <isblank>:
c0001d58:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d5d:	74 09                	je     c0001d68 <isblank+0x10>
c0001d5f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d64:	75 0a                	jne    c0001d70 <isblank+0x18>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	b8 01 00 00 00       	mov    eax,0x1
c0001d6d:	c3                   	ret    
c0001d6e:	66 90                	xchg   ax,ax
c0001d70:	b8 00 00 00 00       	mov    eax,0x0
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax

c0001d78 <iscntrl>:
c0001d78:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d7d:	7e 09                	jle    c0001d88 <iscntrl+0x10>
c0001d7f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d84:	75 0a                	jne    c0001d90 <iscntrl+0x18>
c0001d86:	66 90                	xchg   ax,ax
c0001d88:	b8 01 00 00 00       	mov    eax,0x1
c0001d8d:	c3                   	ret    
c0001d8e:	66 90                	xchg   ax,ax
c0001d90:	b8 00 00 00 00       	mov    eax,0x0
c0001d95:	c3                   	ret    
c0001d96:	66 90                	xchg   ax,ax

c0001d98 <isdigit>:
c0001d98:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d9d:	7e 0d                	jle    c0001dac <isdigit+0x14>
c0001d9f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001da4:	7f 06                	jg     c0001dac <isdigit+0x14>
c0001da6:	b8 01 00 00 00       	mov    eax,0x1
c0001dab:	c3                   	ret    
c0001dac:	b8 00 00 00 00       	mov    eax,0x0
c0001db1:	c3                   	ret    
c0001db2:	66 90                	xchg   ax,ax

c0001db4 <islower>:
c0001db4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001db9:	7e 0d                	jle    c0001dc8 <islower+0x14>
c0001dbb:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001dc0:	7f 06                	jg     c0001dc8 <islower+0x14>
c0001dc2:	b8 01 00 00 00       	mov    eax,0x1
c0001dc7:	c3                   	ret    
c0001dc8:	b8 00 00 00 00       	mov    eax,0x0
c0001dcd:	c3                   	ret    
c0001dce:	66 90                	xchg   ax,ax

c0001dd0 <isspace>:
c0001dd0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001dd5:	7c 19                	jl     c0001df0 <isspace+0x20>
c0001dd7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001ddc:	7e 0a                	jle    c0001de8 <isspace+0x18>
c0001dde:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001de3:	75 0b                	jne    c0001df0 <isspace+0x20>
c0001de5:	8d 76 00             	lea    esi,[esi+0x0]
c0001de8:	b8 01 00 00 00       	mov    eax,0x1
c0001ded:	c3                   	ret    
c0001dee:	66 90                	xchg   ax,ax
c0001df0:	b8 00 00 00 00       	mov    eax,0x0
c0001df5:	c3                   	ret    
c0001df6:	66 90                	xchg   ax,ax

c0001df8 <isupper>:
c0001df8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dfd:	7e 0d                	jle    c0001e0c <isupper+0x14>
c0001dff:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001e04:	7f 06                	jg     c0001e0c <isupper+0x14>
c0001e06:	b8 01 00 00 00       	mov    eax,0x1
c0001e0b:	c3                   	ret    
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalpha>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 db ff ff ff       	call   c0001df8 <isupper>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalpha+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 87 ff ff ff       	call   c0001db4 <islower>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalpha+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <isalnum>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalpha>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 10                	jne    c0001e64 <isalnum+0x20>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 3b ff ff ff       	call   c0001d98 <isdigit>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	74 08                	je     c0001e6c <isalnum+0x28>
c0001e64:	b8 01 00 00 00       	mov    eax,0x1
c0001e69:	c3                   	ret    
c0001e6a:	66 90                	xchg   ax,ax
c0001e6c:	b8 00 00 00 00       	mov    eax,0x0
c0001e71:	c3                   	ret    
c0001e72:	66 90                	xchg   ax,ax

c0001e74 <ispunct>:
c0001e74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e78:	e8 c7 ff ff ff       	call   c0001e44 <isalnum>
c0001e7d:	83 c4 04             	add    esp,0x4
c0001e80:	85 c0                	test   eax,eax
c0001e82:	75 28                	jne    c0001eac <ispunct+0x38>
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 43 ff ff ff       	call   c0001dd0 <isspace>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 18                	jne    c0001eac <ispunct+0x38>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 db fe ff ff       	call   c0001d78 <iscntrl>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	75 08                	jne    c0001eac <ispunct+0x38>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isgraph>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 87 ff ff ff       	call   c0001e44 <isalnum>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 10                	jne    c0001ed4 <isgraph+0x20>
c0001ec4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ec8:	e8 a7 ff ff ff       	call   c0001e74 <ispunct>
c0001ecd:	83 c4 04             	add    esp,0x4
c0001ed0:	85 c0                	test   eax,eax
c0001ed2:	74 08                	je     c0001edc <isgraph+0x28>
c0001ed4:	b8 01 00 00 00       	mov    eax,0x1
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax
c0001edc:	b8 00 00 00 00       	mov    eax,0x0
c0001ee1:	c3                   	ret    
c0001ee2:	66 90                	xchg   ax,ax

c0001ee4 <isprint>:
c0001ee4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee8:	e8 c7 ff ff ff       	call   c0001eb4 <isgraph>
c0001eed:	83 c4 04             	add    esp,0x4
c0001ef0:	85 c0                	test   eax,eax
c0001ef2:	75 08                	jne    c0001efc <isprint+0x18>
c0001ef4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ef9:	75 09                	jne    c0001f04 <isprint+0x20>
c0001efb:	90                   	nop
c0001efc:	b8 01 00 00 00       	mov    eax,0x1
c0001f01:	c3                   	ret    
c0001f02:	66 90                	xchg   ax,ax
c0001f04:	b8 00 00 00 00       	mov    eax,0x0
c0001f09:	c3                   	ret    
c0001f0a:	66 90                	xchg   ax,ax

c0001f0c <isxdigit>:
c0001f0c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f10:	e8 83 fe ff ff       	call   c0001d98 <isdigit>
c0001f15:	83 c4 04             	add    esp,0x4
c0001f18:	85 c0                	test   eax,eax
c0001f1a:	75 20                	jne    c0001f3c <isxdigit+0x30>
c0001f1c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f21:	7e 09                	jle    c0001f2c <isxdigit+0x20>
c0001f23:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001f28:	7e 12                	jle    c0001f3c <isxdigit+0x30>
c0001f2a:	66 90                	xchg   ax,ax
c0001f2c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f31:	7e 11                	jle    c0001f44 <isxdigit+0x38>
c0001f33:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f38:	7f 0a                	jg     c0001f44 <isxdigit+0x38>
c0001f3a:	66 90                	xchg   ax,ax
c0001f3c:	b8 01 00 00 00       	mov    eax,0x1
c0001f41:	c3                   	ret    
c0001f42:	66 90                	xchg   ax,ax
c0001f44:	b8 00 00 00 00       	mov    eax,0x0
c0001f49:	c3                   	ret    
c0001f4a:	66 90                	xchg   ax,ax

c0001f4c <LWIP_PLATFORM_HTONS>:
c0001f4c:	83 ec 04             	sub    esp,0x4
c0001f4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f53:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f57:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f5b:	c1 e8 08             	shr    eax,0x8
c0001f5e:	89 c2                	mov    edx,eax
c0001f60:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f64:	c1 e0 08             	shl    eax,0x8
c0001f67:	09 d0                	or     eax,edx
c0001f69:	83 c4 04             	add    esp,0x4
c0001f6c:	c3                   	ret    
c0001f6d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f70 <LWIP_PLATFORM_HTONL>:
c0001f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f74:	c1 e8 18             	shr    eax,0x18
c0001f77:	89 c2                	mov    edx,eax
c0001f79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f7d:	c1 e8 08             	shr    eax,0x8
c0001f80:	25 00 ff 00 00       	and    eax,0xff00
c0001f85:	09 c2                	or     edx,eax
c0001f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f8b:	c1 e0 08             	shl    eax,0x8
c0001f8e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f93:	09 c2                	or     edx,eax
c0001f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f99:	c1 e0 18             	shl    eax,0x18
c0001f9c:	09 d0                	or     eax,edx
c0001f9e:	c3                   	ret    

c0001f9f <disk_status>:
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <disk_initialize>:
c0001fa2:	31 c0                	xor    eax,eax
c0001fa4:	c3                   	ret    

c0001fa5 <disk_read>:
c0001fa5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faa:	0f b6 04 85 40 d8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd27c0]
c0001fb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fb6:	e9 91 88 01 00       	jmp    c001a84c <fatWrapperReadDisk>

c0001fbb <disk_write>:
c0001fbb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fc0:	0f b6 04 85 40 d8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd27c0]
c0001fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fcc:	e9 bb 88 01 00       	jmp    c001a88c <fatWrapperWriteDisk>

c0001fd1 <disk_ioctl>:
c0001fd1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001fda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fdf:	0f b6 04 85 40 d8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd27c0]
c0001fe7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001feb:	e9 dc 88 01 00       	jmp    c001a8cc <fatWrapperIoctl>

c0001ff0 <ld_word>:
c0001ff0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ff4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ff7:	c1 e2 08             	shl    edx,0x8
c0001ffa:	09 d0                	or     eax,edx
c0001ffc:	c3                   	ret    

c0001ffd <ld_dword>:
c0001ffd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002001:	89 d1                	mov    ecx,edx
c0002003:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002007:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000200a:	c1 e1 08             	shl    ecx,0x8
c000200d:	09 ca                	or     edx,ecx
c000200f:	c1 e2 08             	shl    edx,0x8
c0002012:	09 d0                	or     eax,edx
c0002014:	c3                   	ret    

c0002015 <st_word>:
c0002015:	66 89 10             	mov    WORD PTR [eax],dx
c0002018:	c3                   	ret    

c0002019 <st_dword>:
c0002019:	89 10                	mov    DWORD PTR [eax],edx
c000201b:	c3                   	ret    

c000201c <mem_cpy>:
c000201c:	85 c9                	test   ecx,ecx
c000201e:	74 10                	je     c0002030 <mem_cpy+0x14>
c0002020:	57                   	push   edi
c0002021:	01 c1                	add    ecx,eax
c0002023:	56                   	push   esi
c0002024:	89 c7                	mov    edi,eax
c0002026:	89 d6                	mov    esi,edx
c0002028:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0002029:	39 f9                	cmp    ecx,edi
c000202b:	75 fb                	jne    c0002028 <mem_cpy+0xc>
c000202d:	5e                   	pop    esi
c000202e:	5f                   	pop    edi
c000202f:	c3                   	ret    
c0002030:	c3                   	ret    

c0002031 <mem_set>:
c0002031:	01 c1                	add    ecx,eax
c0002033:	88 10                	mov    BYTE PTR [eax],dl
c0002035:	40                   	inc    eax
c0002036:	39 c8                	cmp    eax,ecx
c0002038:	75 f9                	jne    c0002033 <mem_set+0x2>
c000203a:	c3                   	ret    

c000203b <mem_cmp>:
c000203b:	57                   	push   edi
c000203c:	56                   	push   esi
c000203d:	89 c6                	mov    esi,eax
c000203f:	53                   	push   ebx
c0002040:	46                   	inc    esi
c0002041:	42                   	inc    edx
c0002042:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0002046:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c000204a:	29 fb                	sub    ebx,edi
c000204c:	89 cf                	mov    edi,ecx
c000204e:	29 f7                	sub    edi,esi
c0002050:	01 c7                	add    edi,eax
c0002052:	74 04                	je     c0002058 <mem_cmp+0x1d>
c0002054:	85 db                	test   ebx,ebx
c0002056:	74 e8                	je     c0002040 <mem_cmp+0x5>
c0002058:	89 d8                	mov    eax,ebx
c000205a:	5b                   	pop    ebx
c000205b:	5e                   	pop    esi
c000205c:	5f                   	pop    edi
c000205d:	c3                   	ret    

c000205e <chk_chr>:
c000205e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002061:	85 c9                	test   ecx,ecx
c0002063:	74 07                	je     c000206c <chk_chr+0xe>
c0002065:	39 d1                	cmp    ecx,edx
c0002067:	74 03                	je     c000206c <chk_chr+0xe>
c0002069:	40                   	inc    eax
c000206a:	eb f2                	jmp    c000205e <chk_chr>
c000206c:	89 c8                	mov    eax,ecx
c000206e:	c3                   	ret    

c000206f <dbc_1st>:
c000206f:	31 c0                	xor    eax,eax
c0002071:	c3                   	ret    

c0002072 <dbc_2nd>:
c0002072:	31 c0                	xor    eax,eax
c0002074:	c3                   	ret    

c0002075 <tchar2uni>:
c0002075:	57                   	push   edi
c0002076:	56                   	push   esi
c0002077:	53                   	push   ebx
c0002078:	8b 18                	mov    ebx,DWORD PTR [eax]
c000207a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000207c:	8d 73 01             	lea    esi,[ebx+0x1]
c000207f:	f6 c1 80             	test   cl,0x80
c0002082:	75 0a                	jne    c000208e <tchar2uni+0x19>
c0002084:	0f b6 d1             	movzx  edx,cl
c0002087:	89 f3                	mov    ebx,esi
c0002089:	e9 b2 00 00 00       	jmp    c0002140 <tchar2uni+0xcb>
c000208e:	89 ca                	mov    edx,ecx
c0002090:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002096:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000209c:	89 ca                	mov    edx,ecx
c000209e:	75 0a                	jne    c00020aa <tchar2uni+0x35>
c00020a0:	83 e2 1f             	and    edx,0x1f
c00020a3:	b9 01 00 00 00       	mov    ecx,0x1
c00020a8:	eb 37                	jmp    c00020e1 <tchar2uni+0x6c>
c00020aa:	81 e2 f0 00 00 00    	and    edx,0xf0
c00020b0:	81 fa e0 00 00 00    	cmp    edx,0xe0
c00020b6:	75 0c                	jne    c00020c4 <tchar2uni+0x4f>
c00020b8:	89 ca                	mov    edx,ecx
c00020ba:	b9 02 00 00 00       	mov    ecx,0x2
c00020bf:	83 e2 0f             	and    edx,0xf
c00020c2:	eb 1d                	jmp    c00020e1 <tchar2uni+0x6c>
c00020c4:	89 cf                	mov    edi,ecx
c00020c6:	83 ca ff             	or     edx,0xffffffff
c00020c9:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020cf:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020d5:	75 70                	jne    c0002147 <tchar2uni+0xd2>
c00020d7:	89 ca                	mov    edx,ecx
c00020d9:	b9 03 00 00 00       	mov    ecx,0x3
c00020de:	83 e2 07             	and    edx,0x7
c00020e1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020e5:	46                   	inc    esi
c00020e6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020e9:	89 cf                	mov    edi,ecx
c00020eb:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020f1:	83 c7 80             	add    edi,0xffffff80
c00020f4:	75 4e                	jne    c0002144 <tchar2uni+0xcf>
c00020f6:	c1 e2 06             	shl    edx,0x6
c00020f9:	83 e1 3f             	and    ecx,0x3f
c00020fc:	09 ca                	or     edx,ecx
c00020fe:	39 de                	cmp    esi,ebx
c0002100:	75 e3                	jne    c00020e5 <tchar2uni+0x70>
c0002102:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0002108:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000210e:	76 34                	jbe    c0002144 <tchar2uni+0xcf>
c0002110:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002113:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0002119:	77 29                	ja     c0002144 <tchar2uni+0xcf>
c000211b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002121:	76 1d                	jbe    c0002140 <tchar2uni+0xcb>
c0002123:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0002129:	81 e2 ff 03 00 00    	and    edx,0x3ff
c000212f:	c1 e1 06             	shl    ecx,0x6
c0002132:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002138:	09 ca                	or     edx,ecx
c000213a:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002140:	89 18                	mov    DWORD PTR [eax],ebx
c0002142:	eb 03                	jmp    c0002147 <tchar2uni+0xd2>
c0002144:	83 ca ff             	or     edx,0xffffffff
c0002147:	5b                   	pop    ebx
c0002148:	89 d0                	mov    eax,edx
c000214a:	5e                   	pop    esi
c000214b:	5f                   	pop    edi
c000214c:	c3                   	ret    

c000214d <put_utf>:
c000214d:	53                   	push   ebx
c000214e:	83 f8 7f             	cmp    eax,0x7f
c0002151:	89 c3                	mov    ebx,eax
c0002153:	b0 00                	mov    al,0x0
c0002155:	77 11                	ja     c0002168 <put_utf+0x1b>
c0002157:	85 c9                	test   ecx,ecx
c0002159:	0f 84 e5 00 00 00    	je     c0002244 <put_utf+0xf7>
c000215f:	88 1a                	mov    BYTE PTR [edx],bl
c0002161:	b0 01                	mov    al,0x1
c0002163:	e9 dc 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002168:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000216e:	77 23                	ja     c0002193 <put_utf+0x46>
c0002170:	83 f9 01             	cmp    ecx,0x1
c0002173:	0f 86 cb 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c0002179:	89 d8                	mov    eax,ebx
c000217b:	83 e3 3f             	and    ebx,0x3f
c000217e:	c1 e8 06             	shr    eax,0x6
c0002181:	83 cb 80             	or     ebx,0xffffff80
c0002184:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0002187:	83 c8 c0             	or     eax,0xffffffc0
c000218a:	88 02                	mov    BYTE PTR [edx],al
c000218c:	b0 02                	mov    al,0x2
c000218e:	e9 b1 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002193:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002199:	77 40                	ja     c00021db <put_utf+0x8e>
c000219b:	83 f9 02             	cmp    ecx,0x2
c000219e:	0f 86 a0 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021a4:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00021aa:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00021b0:	0f 86 8e 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021b6:	89 d8                	mov    eax,ebx
c00021b8:	c1 e8 0c             	shr    eax,0xc
c00021bb:	83 c8 e0             	or     eax,0xffffffe0
c00021be:	88 02                	mov    BYTE PTR [edx],al
c00021c0:	89 d8                	mov    eax,ebx
c00021c2:	83 e3 3f             	and    ebx,0x3f
c00021c5:	c1 e8 06             	shr    eax,0x6
c00021c8:	83 cb 80             	or     ebx,0xffffff80
c00021cb:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021ce:	83 e0 3f             	and    eax,0x3f
c00021d1:	83 c8 80             	or     eax,0xffffff80
c00021d4:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021d7:	b0 03                	mov    al,0x3
c00021d9:	eb 69                	jmp    c0002244 <put_utf+0xf7>
c00021db:	83 f9 03             	cmp    ecx,0x3
c00021de:	76 64                	jbe    c0002244 <put_utf+0xf7>
c00021e0:	89 d9                	mov    ecx,ebx
c00021e2:	0f b7 c3             	movzx  eax,bx
c00021e5:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021eb:	66 31 c9             	xor    cx,cx
c00021ee:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021f4:	c1 e9 06             	shr    ecx,0x6
c00021f7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021fd:	77 43                	ja     c0002242 <put_utf+0xf5>
c00021ff:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002205:	77 3b                	ja     c0002242 <put_utf+0xf5>
c0002207:	09 cb                	or     ebx,ecx
c0002209:	81 c3 00 00 01 00    	add    ebx,0x10000
c000220f:	89 d8                	mov    eax,ebx
c0002211:	c1 e8 12             	shr    eax,0x12
c0002214:	83 c8 f0             	or     eax,0xfffffff0
c0002217:	88 02                	mov    BYTE PTR [edx],al
c0002219:	89 d8                	mov    eax,ebx
c000221b:	c1 e8 0c             	shr    eax,0xc
c000221e:	83 e0 3f             	and    eax,0x3f
c0002221:	83 c8 80             	or     eax,0xffffff80
c0002224:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002227:	89 d8                	mov    eax,ebx
c0002229:	83 e3 3f             	and    ebx,0x3f
c000222c:	c1 e8 06             	shr    eax,0x6
c000222f:	83 cb 80             	or     ebx,0xffffff80
c0002232:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002235:	83 e0 3f             	and    eax,0x3f
c0002238:	83 c8 80             	or     eax,0xffffff80
c000223b:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000223e:	b0 04                	mov    al,0x4
c0002240:	eb 02                	jmp    c0002244 <put_utf+0xf7>
c0002242:	31 c0                	xor    eax,eax
c0002244:	5b                   	pop    ebx
c0002245:	c3                   	ret    

c0002246 <clst2sect>:
c0002246:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002249:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000224c:	83 ea 02             	sub    edx,0x2
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	76 0d                	jbe    c0002260 <clst2sect+0x1a>
c0002253:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002257:	0f af d1             	imul   edx,ecx
c000225a:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000225d:	89 d0                	mov    eax,edx
c000225f:	c3                   	ret    
c0002260:	31 c0                	xor    eax,eax
c0002262:	c3                   	ret    

c0002263 <pick_lfn>:
c0002263:	55                   	push   ebp
c0002264:	57                   	push   edi
c0002265:	89 c7                	mov    edi,eax
c0002267:	56                   	push   esi
c0002268:	53                   	push   ebx
c0002269:	89 d3                	mov    ebx,edx
c000226b:	8d 42 1a             	lea    eax,[edx+0x1a]
c000226e:	e8 7d fd ff ff       	call   c0001ff0 <ld_word>
c0002273:	66 85 c0             	test   ax,ax
c0002276:	74 04                	je     c000227c <pick_lfn+0x19>
c0002278:	31 c0                	xor    eax,eax
c000227a:	eb 62                	jmp    c00022de <pick_lfn+0x7b>
c000227c:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000227f:	bd 01 00 00 00       	mov    ebp,0x1
c0002284:	31 f6                	xor    esi,esi
c0002286:	83 e1 bf             	and    ecx,0xffffffbf
c0002289:	49                   	dec    ecx
c000228a:	6b c9 0d             	imul   ecx,ecx,0xd
c000228d:	0f b6 86 a0 12 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffded60]
c0002294:	01 d8                	add    eax,ebx
c0002296:	e8 55 fd ff ff       	call   c0001ff0 <ld_word>
c000229b:	66 85 ed             	test   bp,bp
c000229e:	74 11                	je     c00022b1 <pick_lfn+0x4e>
c00022a0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a6:	77 d0                	ja     c0002278 <pick_lfn+0x15>
c00022a8:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00022ac:	89 c5                	mov    ebp,eax
c00022ae:	41                   	inc    ecx
c00022af:	eb 0a                	jmp    c00022bb <pick_lfn+0x58>
c00022b1:	0f b7 c0             	movzx  eax,ax
c00022b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00022b9:	75 bd                	jne    c0002278 <pick_lfn+0x15>
c00022bb:	46                   	inc    esi
c00022bc:	83 fe 0d             	cmp    esi,0xd
c00022bf:	75 cc                	jne    c000228d <pick_lfn+0x2a>
c00022c1:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00022c4:	74 13                	je     c00022d9 <pick_lfn+0x76>
c00022c6:	66 85 ed             	test   bp,bp
c00022c9:	74 0e                	je     c00022d9 <pick_lfn+0x76>
c00022cb:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022d1:	77 a5                	ja     c0002278 <pick_lfn+0x15>
c00022d3:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022d9:	b8 01 00 00 00       	mov    eax,0x1
c00022de:	5b                   	pop    ebx
c00022df:	5e                   	pop    esi
c00022e0:	5f                   	pop    edi
c00022e1:	5d                   	pop    ebp
c00022e2:	c3                   	ret    

c00022e3 <put_lfn>:
c00022e3:	55                   	push   ebp
c00022e4:	57                   	push   edi
c00022e5:	89 d7                	mov    edi,edx
c00022e7:	56                   	push   esi
c00022e8:	31 f6                	xor    esi,esi
c00022ea:	53                   	push   ebx
c00022eb:	83 ec 0c             	sub    esp,0xc
c00022ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022f2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00022f6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022fc:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002300:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002303:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002306:	31 d2                	xor    edx,edx
c0002308:	e8 08 fd ff ff       	call   c0002015 <st_word>
c000230d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002314:	0f b6 d9             	movzx  ebx,cl
c0002317:	4b                   	dec    ebx
c0002318:	6b db 0d             	imul   ebx,ebx,0xd
c000231b:	0f b7 c6             	movzx  eax,si
c000231e:	3d ff ff 00 00       	cmp    eax,0xffff
c0002323:	74 09                	je     c000232e <put_lfn+0x4b>
c0002325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002329:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000232d:	43                   	inc    ebx
c000232e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002331:	0f b7 ee             	movzx  ebp,si
c0002334:	89 ea                	mov    edx,ebp
c0002336:	0f b6 80 a0 12 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffded60]
c000233d:	01 f8                	add    eax,edi
c000233f:	e8 d1 fc ff ff       	call   c0002015 <st_word>
c0002344:	85 ed                	test   ebp,ebp
c0002346:	75 05                	jne    c000234d <put_lfn+0x6a>
c0002348:	be ff ff 00 00       	mov    esi,0xffff
c000234d:	ff 04 24             	inc    DWORD PTR [esp]
c0002350:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002354:	75 c5                	jne    c000231b <put_lfn+0x38>
c0002356:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000235c:	74 0b                	je     c0002369 <put_lfn+0x86>
c000235e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002362:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002367:	75 07                	jne    c0002370 <put_lfn+0x8d>
c0002369:	83 c9 40             	or     ecx,0x40
c000236c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002370:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002374:	88 07                	mov    BYTE PTR [edi],al
c0002376:	83 c4 0c             	add    esp,0xc
c0002379:	5b                   	pop    ebx
c000237a:	5e                   	pop    esi
c000237b:	5f                   	pop    edi
c000237c:	5d                   	pop    ebp
c000237d:	c3                   	ret    

c000237e <gen_numname>:
c000237e:	57                   	push   edi
c000237f:	89 cf                	mov    edi,ecx
c0002381:	56                   	push   esi
c0002382:	b9 0b 00 00 00       	mov    ecx,0xb
c0002387:	53                   	push   ebx
c0002388:	89 c6                	mov    esi,eax
c000238a:	83 ec 10             	sub    esp,0x10
c000238d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002391:	e8 86 fc ff ff       	call   c000201c <mem_cpy>
c0002396:	83 fb 05             	cmp    ebx,0x5
c0002399:	76 30                	jbe    c00023cb <gen_numname+0x4d>
c000239b:	66 8b 07             	mov    ax,WORD PTR [edi]
c000239e:	66 85 c0             	test   ax,ax
c00023a1:	74 28                	je     c00023cb <gen_numname+0x4d>
c00023a3:	83 c7 02             	add    edi,0x2
c00023a6:	ba 10 00 00 00       	mov    edx,0x10
c00023ab:	89 c1                	mov    ecx,eax
c00023ad:	01 db                	add    ebx,ebx
c00023af:	c1 e0 10             	shl    eax,0x10
c00023b2:	83 e1 01             	and    ecx,0x1
c00023b5:	c1 e8 11             	shr    eax,0x11
c00023b8:	01 cb                	add    ebx,ecx
c00023ba:	0f ba e3 10          	bt     ebx,0x10
c00023be:	73 06                	jae    c00023c6 <gen_numname+0x48>
c00023c0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00023c6:	4a                   	dec    edx
c00023c7:	75 e2                	jne    c00023ab <gen_numname+0x2d>
c00023c9:	eb d0                	jmp    c000239b <gen_numname+0x1d>
c00023cb:	b8 07 00 00 00       	mov    eax,0x7
c00023d0:	89 d9                	mov    ecx,ebx
c00023d2:	83 e1 0f             	and    ecx,0xf
c00023d5:	8d 79 30             	lea    edi,[ecx+0x30]
c00023d8:	83 ff 39             	cmp    edi,0x39
c00023db:	89 fa                	mov    edx,edi
c00023dd:	76 03                	jbe    c00023e2 <gen_numname+0x64>
c00023df:	8d 51 37             	lea    edx,[ecx+0x37]
c00023e2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023e5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023e9:	89 da                	mov    edx,ebx
c00023eb:	c1 ea 04             	shr    edx,0x4
c00023ee:	83 fb 0f             	cmp    ebx,0xf
c00023f1:	76 06                	jbe    c00023f9 <gen_numname+0x7b>
c00023f3:	89 c8                	mov    eax,ecx
c00023f5:	89 d3                	mov    ebx,edx
c00023f7:	eb d7                	jmp    c00023d0 <gen_numname+0x52>
c00023f9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023fe:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002401:	31 d2                	xor    edx,edx
c0002403:	8d 04 16             	lea    eax,[esi+edx*1]
c0002406:	39 ca                	cmp    edx,ecx
c0002408:	73 19                	jae    c0002423 <gen_numname+0xa5>
c000240a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000240d:	83 f8 20             	cmp    eax,0x20
c0002410:	74 11                	je     c0002423 <gen_numname+0xa5>
c0002412:	e8 58 fc ff ff       	call   c000206f <dbc_1st>
c0002417:	85 c0                	test   eax,eax
c0002419:	74 05                	je     c0002420 <gen_numname+0xa2>
c000241b:	39 d3                	cmp    ebx,edx
c000241d:	74 04                	je     c0002423 <gen_numname+0xa5>
c000241f:	42                   	inc    edx
c0002420:	42                   	inc    edx
c0002421:	eb e0                	jmp    c0002403 <gen_numname+0x85>
c0002423:	83 f9 07             	cmp    ecx,0x7
c0002426:	b0 20                	mov    al,0x20
c0002428:	77 05                	ja     c000242f <gen_numname+0xb1>
c000242a:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000242e:	41                   	inc    ecx
c000242f:	42                   	inc    edx
c0002430:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002434:	83 fa 07             	cmp    edx,0x7
c0002437:	76 ea                	jbe    c0002423 <gen_numname+0xa5>
c0002439:	83 c4 10             	add    esp,0x10
c000243c:	5b                   	pop    ebx
c000243d:	5e                   	pop    esi
c000243e:	5f                   	pop    edi
c000243f:	c3                   	ret    

c0002440 <sum_sfn>:
c0002440:	53                   	push   ebx
c0002441:	31 c9                	xor    ecx,ecx
c0002443:	31 db                	xor    ebx,ebx
c0002445:	0f b6 d1             	movzx  edx,cl
c0002448:	d1 ea                	shr    edx,1
c000244a:	c1 e1 07             	shl    ecx,0x7
c000244d:	09 ca                	or     edx,ecx
c000244f:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002452:	43                   	inc    ebx
c0002453:	01 ca                	add    edx,ecx
c0002455:	83 fb 0b             	cmp    ebx,0xb
c0002458:	88 d1                	mov    cl,dl
c000245a:	75 e9                	jne    c0002445 <sum_sfn+0x5>
c000245c:	5b                   	pop    ebx
c000245d:	88 d0                	mov    al,dl
c000245f:	c3                   	ret    

c0002460 <get_ldnumber>:
c0002460:	55                   	push   ebp
c0002461:	57                   	push   edi
c0002462:	56                   	push   esi
c0002463:	83 ce ff             	or     esi,0xffffffff
c0002466:	53                   	push   ebx
c0002467:	8b 10                	mov    edx,DWORD PTR [eax]
c0002469:	85 d2                	test   edx,edx
c000246b:	74 38                	je     c00024a5 <get_ldnumber+0x45>
c000246d:	89 c5                	mov    ebp,eax
c000246f:	89 d1                	mov    ecx,edx
c0002471:	41                   	inc    ecx
c0002472:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002476:	80 fb 1f             	cmp    bl,0x1f
c0002479:	76 05                	jbe    c0002480 <get_ldnumber+0x20>
c000247b:	83 fb 3a             	cmp    ebx,0x3a
c000247e:	75 f1                	jne    c0002471 <get_ldnumber+0x11>
c0002480:	31 f6                	xor    esi,esi
c0002482:	83 fb 3a             	cmp    ebx,0x3a
c0002485:	75 1e                	jne    c00024a5 <get_ldnumber+0x45>
c0002487:	8a 1a                	mov    bl,BYTE PTR [edx]
c0002489:	83 ce ff             	or     esi,0xffffffff
c000248c:	8d 7b d0             	lea    edi,[ebx-0x30]
c000248f:	89 f8                	mov    eax,edi
c0002491:	3c 09                	cmp    al,0x9
c0002493:	77 10                	ja     c00024a5 <get_ldnumber+0x45>
c0002495:	83 c2 02             	add    edx,0x2
c0002498:	39 d1                	cmp    ecx,edx
c000249a:	75 09                	jne    c00024a5 <get_ldnumber+0x45>
c000249c:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000249f:	0f be f3             	movsx  esi,bl
c00024a2:	83 ee 30             	sub    esi,0x30
c00024a5:	5b                   	pop    ebx
c00024a6:	89 f0                	mov    eax,esi
c00024a8:	5e                   	pop    esi
c00024a9:	5f                   	pop    edi
c00024aa:	5d                   	pop    ebp
c00024ab:	c3                   	ret    

c00024ac <validate>:
c00024ac:	56                   	push   esi
c00024ad:	85 c0                	test   eax,eax
c00024af:	53                   	push   ebx
c00024b0:	89 d6                	mov    esi,edx
c00024b2:	51                   	push   ecx
c00024b3:	75 09                	jne    c00024be <validate+0x12>
c00024b5:	b8 09 00 00 00       	mov    eax,0x9
c00024ba:	31 c9                	xor    ecx,ecx
c00024bc:	eb 2e                	jmp    c00024ec <validate+0x40>
c00024be:	89 c3                	mov    ebx,eax
c00024c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00024c2:	85 c0                	test   eax,eax
c00024c4:	74 ef                	je     c00024b5 <validate+0x9>
c00024c6:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00024c9:	74 ea                	je     c00024b5 <validate+0x9>
c00024cb:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024ce:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024d2:	75 e1                	jne    c00024b5 <validate+0x9>
c00024d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	50                   	push   eax
c00024dc:	e8 be fa ff ff       	call   c0001f9f <disk_status>
c00024e1:	83 c4 10             	add    esp,0x10
c00024e4:	a8 01                	test   al,0x1
c00024e6:	75 cd                	jne    c00024b5 <validate+0x9>
c00024e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024ea:	31 c0                	xor    eax,eax
c00024ec:	89 0e                	mov    DWORD PTR [esi],ecx
c00024ee:	5a                   	pop    edx
c00024ef:	5b                   	pop    ebx
c00024f0:	5e                   	pop    esi
c00024f1:	c3                   	ret    

c00024f2 <sync_window>:
c00024f2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024f6:	74 58                	je     c0002550 <sync_window+0x5e>
c00024f8:	56                   	push   esi
c00024f9:	53                   	push   ebx
c00024fa:	89 c3                	mov    ebx,eax
c00024fc:	51                   	push   ecx
c00024fd:	6a 01                	push   0x1
c00024ff:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002502:	8d 70 34             	lea    esi,[eax+0x34]
c0002505:	56                   	push   esi
c0002506:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000250a:	50                   	push   eax
c000250b:	e8 ab fa ff ff       	call   c0001fbb <disk_write>
c0002510:	83 c4 10             	add    esp,0x10
c0002513:	ba 01 00 00 00       	mov    edx,0x1
c0002518:	85 c0                	test   eax,eax
c000251a:	75 2e                	jne    c000254a <sync_window+0x58>
c000251c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002520:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002523:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002526:	89 c1                	mov    ecx,eax
c0002528:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000252b:	39 d1                	cmp    ecx,edx
c000252d:	73 19                	jae    c0002548 <sync_window+0x56>
c000252f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002533:	75 13                	jne    c0002548 <sync_window+0x56>
c0002535:	6a 01                	push   0x1
c0002537:	01 d0                	add    eax,edx
c0002539:	50                   	push   eax
c000253a:	56                   	push   esi
c000253b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000253f:	50                   	push   eax
c0002540:	e8 76 fa ff ff       	call   c0001fbb <disk_write>
c0002545:	83 c4 10             	add    esp,0x10
c0002548:	31 d2                	xor    edx,edx
c000254a:	89 d0                	mov    eax,edx
c000254c:	5a                   	pop    edx
c000254d:	5b                   	pop    ebx
c000254e:	5e                   	pop    esi
c000254f:	c3                   	ret    
c0002550:	31 d2                	xor    edx,edx
c0002552:	89 d0                	mov    eax,edx
c0002554:	c3                   	ret    

c0002555 <move_window>:
c0002555:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002558:	74 3a                	je     c0002594 <move_window+0x3f>
c000255a:	56                   	push   esi
c000255b:	89 d6                	mov    esi,edx
c000255d:	53                   	push   ebx
c000255e:	89 c3                	mov    ebx,eax
c0002560:	51                   	push   ecx
c0002561:	e8 8c ff ff ff       	call   c00024f2 <sync_window>
c0002566:	85 c0                	test   eax,eax
c0002568:	75 2d                	jne    c0002597 <move_window+0x42>
c000256a:	6a 01                	push   0x1
c000256c:	56                   	push   esi
c000256d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002570:	50                   	push   eax
c0002571:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002575:	50                   	push   eax
c0002576:	e8 2a fa ff ff       	call   c0001fa5 <disk_read>
c000257b:	83 c4 10             	add    esp,0x10
c000257e:	89 c2                	mov    edx,eax
c0002580:	31 c0                	xor    eax,eax
c0002582:	85 d2                	test   edx,edx
c0002584:	ba ff ff ff ff       	mov    edx,0xffffffff
c0002589:	0f 45 f2             	cmovne esi,edx
c000258c:	0f 95 c0             	setne  al
c000258f:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0002592:	eb 03                	jmp    c0002597 <move_window+0x42>
c0002594:	31 c0                	xor    eax,eax
c0002596:	c3                   	ret    
c0002597:	5a                   	pop    edx
c0002598:	5b                   	pop    ebx
c0002599:	5e                   	pop    esi
c000259a:	c3                   	ret    

c000259b <check_fs>:
c000259b:	53                   	push   ebx
c000259c:	89 c3                	mov    ebx,eax
c000259e:	83 ec 08             	sub    esp,0x8
c00025a1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00025a5:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00025ac:	e8 a4 ff ff ff       	call   c0002555 <move_window>
c00025b1:	ba 04 00 00 00       	mov    edx,0x4
c00025b6:	85 c0                	test   eax,eax
c00025b8:	75 68                	jne    c0002622 <check_fs+0x87>
c00025ba:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00025c0:	e8 2b fa ff ff       	call   c0001ff0 <ld_word>
c00025c5:	ba 03 00 00 00       	mov    edx,0x3
c00025ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00025ce:	75 52                	jne    c0002622 <check_fs+0x87>
c00025d0:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025d3:	8d 50 18             	lea    edx,[eax+0x18]
c00025d6:	80 fa 01             	cmp    dl,0x1
c00025d9:	76 09                	jbe    c00025e4 <check_fs+0x49>
c00025db:	3c eb                	cmp    al,0xeb
c00025dd:	ba 02 00 00 00       	mov    edx,0x2
c00025e2:	75 3e                	jne    c0002622 <check_fs+0x87>
c00025e4:	ba 60 3f 02 c0       	mov    edx,0xc0023f60
c00025e9:	b9 03 00 00 00       	mov    ecx,0x3
c00025ee:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025f1:	e8 45 fa ff ff       	call   c000203b <mem_cmp>
c00025f6:	31 d2                	xor    edx,edx
c00025f8:	85 c0                	test   eax,eax
c00025fa:	74 26                	je     c0002622 <check_fs+0x87>
c00025fc:	ba 5c 11 02 c0       	mov    edx,0xc002115c
c0002601:	b9 05 00 00 00       	mov    ecx,0x5
c0002606:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000260c:	e8 2a fa ff ff       	call   c000203b <mem_cmp>
c0002611:	31 d2                	xor    edx,edx
c0002613:	85 c0                	test   eax,eax
c0002615:	74 0b                	je     c0002622 <check_fs+0x87>
c0002617:	31 d2                	xor    edx,edx
c0002619:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000261d:	0f 95 c2             	setne  dl
c0002620:	01 d2                	add    edx,edx
c0002622:	83 c4 08             	add    esp,0x8
c0002625:	89 d0                	mov    eax,edx
c0002627:	5b                   	pop    ebx
c0002628:	c3                   	ret    

c0002629 <find_volume>:
c0002629:	55                   	push   ebp
c000262a:	57                   	push   edi
c000262b:	56                   	push   esi
c000262c:	89 c6                	mov    esi,eax
c000262e:	53                   	push   ebx
c000262f:	89 d3                	mov    ebx,edx
c0002631:	83 ec 2c             	sub    esp,0x2c
c0002634:	31 d2                	xor    edx,edx
c0002636:	e8 60 ff ff ff       	call   c000259b <check_fs>
c000263b:	85 db                	test   ebx,ebx
c000263d:	0f 94 c2             	sete   dl
c0002640:	83 f8 02             	cmp    eax,0x2
c0002643:	74 07                	je     c000264c <find_volume+0x23>
c0002645:	77 63                	ja     c00026aa <find_volume+0x81>
c0002647:	f6 c2 01             	test   dl,0x1
c000264a:	75 5e                	jne    c00026aa <find_volume+0x81>
c000264c:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002652:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002656:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000265c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0002660:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002664:	89 f8                	mov    eax,edi
c0002666:	83 c7 10             	add    edi,0x10
c0002669:	e8 8f f9 ff ff       	call   c0001ffd <ld_dword>
c000266e:	83 c5 04             	add    ebp,0x4
c0002671:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002675:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002678:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000267c:	75 e2                	jne    c0002660 <find_volume+0x37>
c000267e:	83 fb 01             	cmp    ebx,0x1
c0002681:	0f b6 fa             	movzx  edi,dl
c0002684:	83 d3 ff             	adc    ebx,0xffffffff
c0002687:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c000268b:	b8 03 00 00 00       	mov    eax,0x3
c0002690:	85 d2                	test   edx,edx
c0002692:	74 07                	je     c000269b <find_volume+0x72>
c0002694:	89 f0                	mov    eax,esi
c0002696:	e8 00 ff ff ff       	call   c000259b <check_fs>
c000269b:	83 f8 01             	cmp    eax,0x1
c000269e:	76 0a                	jbe    c00026aa <find_volume+0x81>
c00026a0:	85 ff                	test   edi,edi
c00026a2:	74 06                	je     c00026aa <find_volume+0x81>
c00026a4:	43                   	inc    ebx
c00026a5:	83 fb 03             	cmp    ebx,0x3
c00026a8:	76 dd                	jbe    c0002687 <find_volume+0x5e>
c00026aa:	83 c4 2c             	add    esp,0x2c
c00026ad:	5b                   	pop    ebx
c00026ae:	5e                   	pop    esi
c00026af:	5f                   	pop    edi
c00026b0:	5d                   	pop    ebp
c00026b1:	c3                   	ret    

c00026b2 <mount_volume>:
c00026b2:	55                   	push   ebp
c00026b3:	89 d5                	mov    ebp,edx
c00026b5:	57                   	push   edi
c00026b6:	89 cf                	mov    edi,ecx
c00026b8:	56                   	push   esi
c00026b9:	53                   	push   ebx
c00026ba:	bb 0b 00 00 00       	mov    ebx,0xb
c00026bf:	83 ec 2c             	sub    esp,0x2c
c00026c2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026c8:	e8 93 fd ff ff       	call   c0002460 <get_ldnumber>
c00026cd:	85 c0                	test   eax,eax
c00026cf:	0f 88 d0 02 00 00    	js     c00029a5 <mount_volume+0x2f3>
c00026d5:	8b 34 85 a0 74 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd8b60]
c00026dc:	89 c2                	mov    edx,eax
c00026de:	bb 0c 00 00 00       	mov    ebx,0xc
c00026e3:	85 f6                	test   esi,esi
c00026e5:	0f 84 ba 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c00026eb:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026ee:	83 e7 fe             	and    edi,0xfffffffe
c00026f1:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026f4:	74 3c                	je     c0002732 <mount_volume+0x80>
c00026f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026fa:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026fe:	83 ec 0c             	sub    esp,0xc
c0002701:	50                   	push   eax
c0002702:	e8 98 f8 ff ff       	call   c0001f9f <disk_status>
c0002707:	83 c4 10             	add    esp,0x10
c000270a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000270e:	a8 01                	test   al,0x1
c0002710:	75 20                	jne    c0002732 <mount_volume+0x80>
c0002712:	31 db                	xor    ebx,ebx
c0002714:	81 e7 fe 00 00 00    	and    edi,0xfe
c000271a:	0f 84 85 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002720:	a8 04                	test   al,0x4
c0002722:	0f 84 7d 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002728:	bb 0a 00 00 00       	mov    ebx,0xa
c000272d:	e9 73 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002732:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002735:	83 ec 0c             	sub    esp,0xc
c0002738:	0f b6 c2             	movzx  eax,dl
c000273b:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000273e:	bb 03 00 00 00       	mov    ebx,0x3
c0002743:	50                   	push   eax
c0002744:	e8 59 f8 ff ff       	call   c0001fa2 <disk_initialize>
c0002749:	83 c4 10             	add    esp,0x10
c000274c:	a8 01                	test   al,0x1
c000274e:	0f 85 51 02 00 00    	jne    c00029a5 <mount_volume+0x2f3>
c0002754:	81 e7 fe 00 00 00    	and    edi,0xfe
c000275a:	74 04                	je     c0002760 <mount_volume+0xae>
c000275c:	a8 04                	test   al,0x4
c000275e:	75 c8                	jne    c0002728 <mount_volume+0x76>
c0002760:	31 d2                	xor    edx,edx
c0002762:	89 f0                	mov    eax,esi
c0002764:	e8 c0 fe ff ff       	call   c0002629 <find_volume>
c0002769:	bb 01 00 00 00       	mov    ebx,0x1
c000276e:	83 f8 04             	cmp    eax,0x4
c0002771:	0f 84 2e 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002777:	83 f8 01             	cmp    eax,0x1
c000277a:	76 0a                	jbe    c0002786 <mount_volume+0xd4>
c000277c:	bb 0d 00 00 00       	mov    ebx,0xd
c0002781:	e9 1f 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002786:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002789:	e8 62 f8 ff ff       	call   c0001ff0 <ld_word>
c000278e:	66 3d 00 02          	cmp    ax,0x200
c0002792:	75 e8                	jne    c000277c <mount_volume+0xca>
c0002794:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002797:	e8 54 f8 ff ff       	call   c0001ff0 <ld_word>
c000279c:	0f b7 c0             	movzx  eax,ax
c000279f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027a3:	85 c0                	test   eax,eax
c00027a5:	75 0c                	jne    c00027b3 <mount_volume+0x101>
c00027a7:	8d 46 58             	lea    eax,[esi+0x58]
c00027aa:	e8 4e f8 ff ff       	call   c0001ffd <ld_dword>
c00027af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027b3:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00027b6:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00027b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00027c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00027c4:	89 e8                	mov    eax,ebp
c00027c6:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00027c9:	8d 45 ff             	lea    eax,[ebp-0x1]
c00027cc:	3c 01                	cmp    al,0x1
c00027ce:	77 ac                	ja     c000277c <mount_volume+0xca>
c00027d0:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00027d4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027d8:	66 85 c0             	test   ax,ax
c00027db:	89 c3                	mov    ebx,eax
c00027dd:	74 9d                	je     c000277c <mount_volume+0xca>
c00027df:	8d 40 ff             	lea    eax,[eax-0x1]
c00027e2:	85 d8                	test   eax,ebx
c00027e4:	75 96                	jne    c000277c <mount_volume+0xca>
c00027e6:	8d 46 45             	lea    eax,[esi+0x45]
c00027e9:	e8 02 f8 ff ff       	call   c0001ff0 <ld_word>
c00027ee:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027f2:	a8 0f                	test   al,0xf
c00027f4:	89 c7                	mov    edi,eax
c00027f6:	75 84                	jne    c000277c <mount_volume+0xca>
c00027f8:	8d 46 47             	lea    eax,[esi+0x47]
c00027fb:	e8 f0 f7 ff ff       	call   c0001ff0 <ld_word>
c0002800:	0f b7 d0             	movzx  edx,ax
c0002803:	85 d2                	test   edx,edx
c0002805:	75 0a                	jne    c0002811 <mount_volume+0x15f>
c0002807:	8d 46 54             	lea    eax,[esi+0x54]
c000280a:	e8 ee f7 ff ff       	call   c0001ffd <ld_dword>
c000280f:	89 c2                	mov    edx,eax
c0002811:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002815:	8d 46 42             	lea    eax,[esi+0x42]
c0002818:	e8 d3 f7 ff ff       	call   c0001ff0 <ld_word>
c000281d:	0f b7 c8             	movzx  ecx,ax
c0002820:	85 c9                	test   ecx,ecx
c0002822:	0f 84 54 ff ff ff    	je     c000277c <mount_volume+0xca>
c0002828:	89 e8                	mov    eax,ebp
c000282a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000282e:	0f b6 e8             	movzx  ebp,al
c0002831:	0f b7 c7             	movzx  eax,di
c0002834:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002839:	c1 e8 04             	shr    eax,0x4
c000283c:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0002840:	01 e8                	add    eax,ebp
c0002842:	01 c8                	add    eax,ecx
c0002844:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002848:	39 c2                	cmp    edx,eax
c000284a:	0f 82 2c ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002850:	29 c2                	sub    edx,eax
c0002852:	89 d5                	mov    ebp,edx
c0002854:	89 d0                	mov    eax,edx
c0002856:	31 d2                	xor    edx,edx
c0002858:	f7 f3                	div    ebx
c000285a:	39 dd                	cmp    ebp,ebx
c000285c:	0f 82 1a ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002862:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002867:	0f 87 0f ff ff ff    	ja     c000277c <mount_volume+0xca>
c000286d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002872:	0f 86 1e 01 00 00    	jbe    c0002996 <mount_volume+0x2e4>
c0002878:	bb 03 00 00 00       	mov    ebx,0x3
c000287d:	8d 68 02             	lea    ebp,[eax+0x2]
c0002880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002884:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002887:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000288b:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c000288f:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002892:	01 c8                	add    eax,ecx
c0002894:	83 fb 03             	cmp    ebx,0x3
c0002897:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000289a:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000289d:	75 23                	jne    c00028c2 <mount_volume+0x210>
c000289f:	8d 46 5e             	lea    eax,[esi+0x5e]
c00028a2:	e8 49 f7 ff ff       	call   c0001ff0 <ld_word>
c00028a7:	09 c7                	or     edi,eax
c00028a9:	66 85 ff             	test   di,di
c00028ac:	0f 85 ca fe ff ff    	jne    c000277c <mount_volume+0xca>
c00028b2:	8d 46 60             	lea    eax,[esi+0x60]
c00028b5:	e8 43 f7 ff ff       	call   c0001ffd <ld_dword>
c00028ba:	c1 e5 02             	shl    ebp,0x2
c00028bd:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028c0:	eb 25                	jmp    c00028e7 <mount_volume+0x235>
c00028c2:	66 85 ff             	test   di,di
c00028c5:	0f 84 b1 fe ff ff    	je     c000277c <mount_volume+0xca>
c00028cb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00028cf:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00028d3:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00028d7:	83 e5 01             	and    ebp,0x1
c00028da:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028dd:	d1 ea                	shr    edx,1
c00028df:	01 d5                	add    ebp,edx
c00028e1:	83 fb 02             	cmp    ebx,0x2
c00028e4:	0f 44 ef             	cmove  ebp,edi
c00028e7:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028ed:	c1 ed 09             	shr    ebp,0x9
c00028f0:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00028f4:	0f 87 82 fe ff ff    	ja     c000277c <mount_volume+0xca>
c00028fa:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002901:	83 fb 03             	cmp    ebx,0x3
c0002904:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000290b:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000290f:	75 6e                	jne    c000297f <mount_volume+0x2cd>
c0002911:	8d 46 64             	lea    eax,[esi+0x64]
c0002914:	e8 d7 f6 ff ff       	call   c0001ff0 <ld_word>
c0002919:	66 48                	dec    ax
c000291b:	75 62                	jne    c000297f <mount_volume+0x2cd>
c000291d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002921:	89 f0                	mov    eax,esi
c0002923:	42                   	inc    edx
c0002924:	e8 2c fc ff ff       	call   c0002555 <move_window>
c0002929:	85 c0                	test   eax,eax
c000292b:	75 52                	jne    c000297f <mount_volume+0x2cd>
c000292d:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002931:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002937:	e8 b4 f6 ff ff       	call   c0001ff0 <ld_word>
c000293c:	66 3d 55 aa          	cmp    ax,0xaa55
c0002940:	75 3d                	jne    c000297f <mount_volume+0x2cd>
c0002942:	8d 46 34             	lea    eax,[esi+0x34]
c0002945:	e8 b3 f6 ff ff       	call   c0001ffd <ld_dword>
c000294a:	3d 52 52 61 41       	cmp    eax,0x41615252
c000294f:	75 2e                	jne    c000297f <mount_volume+0x2cd>
c0002951:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002957:	e8 a1 f6 ff ff       	call   c0001ffd <ld_dword>
c000295c:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002961:	75 1c                	jne    c000297f <mount_volume+0x2cd>
c0002963:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002969:	e8 8f f6 ff ff       	call   c0001ffd <ld_dword>
c000296e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002971:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002977:	e8 81 f6 ff ff       	call   c0001ffd <ld_dword>
c000297c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000297f:	88 1e                	mov    BYTE PTR [esi],bl
c0002981:	66 a1 80 74 02 c0    	mov    ax,ds:0xc0027480
c0002987:	31 db                	xor    ebx,ebx
c0002989:	40                   	inc    eax
c000298a:	66 a3 80 74 02 c0    	mov    ds:0xc0027480,ax
c0002990:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002994:	eb 0f                	jmp    c00029a5 <mount_volume+0x2f3>
c0002996:	3d f6 0f 00 00       	cmp    eax,0xff6
c000299b:	19 db                	sbb    ebx,ebx
c000299d:	83 c3 02             	add    ebx,0x2
c00029a0:	e9 d8 fe ff ff       	jmp    c000287d <mount_volume+0x1cb>
c00029a5:	83 c4 2c             	add    esp,0x2c
c00029a8:	89 d8                	mov    eax,ebx
c00029aa:	5b                   	pop    ebx
c00029ab:	5e                   	pop    esi
c00029ac:	5f                   	pop    edi
c00029ad:	5d                   	pop    ebp
c00029ae:	c3                   	ret    

c00029af <put_fat>:
c00029af:	55                   	push   ebp
c00029b0:	bd 02 00 00 00       	mov    ebp,0x2
c00029b5:	57                   	push   edi
c00029b6:	56                   	push   esi
c00029b7:	53                   	push   ebx
c00029b8:	83 ec 1c             	sub    esp,0x1c
c00029bb:	83 fa 01             	cmp    edx,0x1
c00029be:	0f 86 38 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029c4:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00029c7:	0f 86 2f 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029cd:	89 c6                	mov    esi,eax
c00029cf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00029d2:	89 cf                	mov    edi,ecx
c00029d4:	89 d3                	mov    ebx,edx
c00029d6:	83 f8 02             	cmp    eax,0x2
c00029d9:	0f 84 b1 00 00 00    	je     c0002a90 <put_fat+0xe1>
c00029df:	83 f8 03             	cmp    eax,0x3
c00029e2:	0f 84 d5 00 00 00    	je     c0002abd <put_fat+0x10e>
c00029e8:	48                   	dec    eax
c00029e9:	0f 85 0d 01 00 00    	jne    c0002afc <put_fat+0x14d>
c00029ef:	89 d1                	mov    ecx,edx
c00029f1:	89 f0                	mov    eax,esi
c00029f3:	d1 e9                	shr    ecx,1
c00029f5:	01 d1                	add    ecx,edx
c00029f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029fb:	89 ca                	mov    edx,ecx
c00029fd:	c1 ea 09             	shr    edx,0x9
c0002a00:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a03:	e8 4d fb ff ff       	call   c0002555 <move_window>
c0002a08:	85 c0                	test   eax,eax
c0002a0a:	89 c5                	mov    ebp,eax
c0002a0c:	0f 85 ea 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a16:	8d 46 34             	lea    eax,[esi+0x34]
c0002a19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002a1d:	8d 41 01             	lea    eax,[ecx+0x1]
c0002a20:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002a26:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2a:	83 e3 01             	and    ebx,0x1
c0002a2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a31:	89 f8                	mov    eax,edi
c0002a33:	74 11                	je     c0002a46 <put_fat+0x97>
c0002a35:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002a37:	89 f8                	mov    eax,edi
c0002a39:	c1 e0 04             	shl    eax,0x4
c0002a3c:	25 f0 0f 00 00       	and    eax,0xff0
c0002a41:	83 e2 0f             	and    edx,0xf
c0002a44:	09 d0                	or     eax,edx
c0002a46:	88 01                	mov    BYTE PTR [ecx],al
c0002a48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a4c:	89 f0                	mov    eax,esi
c0002a4e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a52:	c1 ea 09             	shr    edx,0x9
c0002a55:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a58:	e8 f8 fa ff ff       	call   c0002555 <move_window>
c0002a5d:	85 c0                	test   eax,eax
c0002a5f:	89 c5                	mov    ebp,eax
c0002a61:	0f 85 95 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a6b:	25 ff 01 00 00       	and    eax,0x1ff
c0002a70:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a74:	85 db                	test   ebx,ebx
c0002a76:	74 07                	je     c0002a7f <put_fat+0xd0>
c0002a78:	c1 ef 04             	shr    edi,0x4
c0002a7b:	89 f9                	mov    ecx,edi
c0002a7d:	eb 0d                	jmp    c0002a8c <put_fat+0xdd>
c0002a7f:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a81:	c1 ef 08             	shr    edi,0x8
c0002a84:	83 e7 0f             	and    edi,0xf
c0002a87:	83 e1 f0             	and    ecx,0xfffffff0
c0002a8a:	09 f9                	or     ecx,edi
c0002a8c:	88 08                	mov    BYTE PTR [eax],cl
c0002a8e:	eb 27                	jmp    c0002ab7 <put_fat+0x108>
c0002a90:	c1 ea 08             	shr    edx,0x8
c0002a93:	89 f0                	mov    eax,esi
c0002a95:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a98:	e8 b8 fa ff ff       	call   c0002555 <move_window>
c0002a9d:	85 c0                	test   eax,eax
c0002a9f:	89 c5                	mov    ebp,eax
c0002aa1:	75 59                	jne    c0002afc <put_fat+0x14d>
c0002aa3:	01 db                	add    ebx,ebx
c0002aa5:	0f b7 d7             	movzx  edx,di
c0002aa8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002aae:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002ab2:	e8 5e f5 ff ff       	call   c0002015 <st_word>
c0002ab7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002abb:	eb 3f                	jmp    c0002afc <put_fat+0x14d>
c0002abd:	c1 ea 07             	shr    edx,0x7
c0002ac0:	89 f0                	mov    eax,esi
c0002ac2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002ac5:	e8 8b fa ff ff       	call   c0002555 <move_window>
c0002aca:	85 c0                	test   eax,eax
c0002acc:	89 c5                	mov    ebp,eax
c0002ace:	75 2c                	jne    c0002afc <put_fat+0x14d>
c0002ad0:	c1 e3 02             	shl    ebx,0x2
c0002ad3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ad9:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002adf:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002ae3:	89 d8                	mov    eax,ebx
c0002ae5:	e8 13 f5 ff ff       	call   c0001ffd <ld_dword>
c0002aea:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aef:	09 f8                	or     eax,edi
c0002af1:	89 c2                	mov    edx,eax
c0002af3:	89 d8                	mov    eax,ebx
c0002af5:	e8 1f f5 ff ff       	call   c0002019 <st_dword>
c0002afa:	eb bb                	jmp    c0002ab7 <put_fat+0x108>
c0002afc:	83 c4 1c             	add    esp,0x1c
c0002aff:	89 e8                	mov    eax,ebp
c0002b01:	5b                   	pop    ebx
c0002b02:	5e                   	pop    esi
c0002b03:	5f                   	pop    edi
c0002b04:	5d                   	pop    ebp
c0002b05:	c3                   	ret    

c0002b06 <dir_clear>:
c0002b06:	55                   	push   ebp
c0002b07:	57                   	push   edi
c0002b08:	56                   	push   esi
c0002b09:	89 c6                	mov    esi,eax
c0002b0b:	53                   	push   ebx
c0002b0c:	83 ec 1c             	sub    esp,0x1c
c0002b0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002b13:	e8 da f9 ff ff       	call   c00024f2 <sync_window>
c0002b18:	85 c0                	test   eax,eax
c0002b1a:	0f 85 c1 00 00 00    	jne    c0002be1 <dir_clear+0xdb>
c0002b20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b24:	89 f0                	mov    eax,esi
c0002b26:	e8 1b f7 ff ff       	call   c0002246 <clst2sect>
c0002b2b:	31 d2                	xor    edx,edx
c0002b2d:	b9 00 02 00 00       	mov    ecx,0x200
c0002b32:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002b35:	89 c5                	mov    ebp,eax
c0002b37:	8d 46 34             	lea    eax,[esi+0x34]
c0002b3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b3e:	e8 ee f4 ff ff       	call   c0002031 <mem_set>
c0002b43:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b47:	b8 00 80 00 00       	mov    eax,0x8000
c0002b4c:	c1 e3 09             	shl    ebx,0x9
c0002b4f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b55:	0f 47 d8             	cmova  ebx,eax
c0002b58:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b5e:	76 16                	jbe    c0002b76 <dir_clear+0x70>
c0002b60:	83 ec 0c             	sub    esp,0xc
c0002b63:	53                   	push   ebx
c0002b64:	e8 cb 32 00 00       	call   c0005e34 <ff_memalloc>
c0002b69:	83 c4 10             	add    esp,0x10
c0002b6c:	85 c0                	test   eax,eax
c0002b6e:	89 c7                	mov    edi,eax
c0002b70:	75 76                	jne    c0002be8 <dir_clear+0xe2>
c0002b72:	d1 eb                	shr    ebx,1
c0002b74:	eb e2                	jmp    c0002b58 <dir_clear+0x52>
c0002b76:	31 db                	xor    ebx,ebx
c0002b78:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7c:	39 d8                	cmp    eax,ebx
c0002b7e:	76 53                	jbe    c0002bd3 <dir_clear+0xcd>
c0002b80:	6a 01                	push   0x1
c0002b82:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b85:	50                   	push   eax
c0002b86:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b8e:	50                   	push   eax
c0002b8f:	e8 27 f4 ff ff       	call   c0001fbb <disk_write>
c0002b94:	83 c4 10             	add    esp,0x10
c0002b97:	85 c0                	test   eax,eax
c0002b99:	75 38                	jne    c0002bd3 <dir_clear+0xcd>
c0002b9b:	43                   	inc    ebx
c0002b9c:	eb da                	jmp    c0002b78 <dir_clear+0x72>
c0002b9e:	52                   	push   edx
c0002b9f:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ba2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002ba6:	50                   	push   eax
c0002ba7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002bab:	57                   	push   edi
c0002bac:	50                   	push   eax
c0002bad:	e8 09 f4 ff ff       	call   c0001fbb <disk_write>
c0002bb2:	83 c4 10             	add    esp,0x10
c0002bb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bb9:	85 c0                	test   eax,eax
c0002bbb:	75 0a                	jne    c0002bc7 <dir_clear+0xc1>
c0002bbd:	01 d3                	add    ebx,edx
c0002bbf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bc3:	39 d8                	cmp    eax,ebx
c0002bc5:	77 d7                	ja     c0002b9e <dir_clear+0x98>
c0002bc7:	83 ec 0c             	sub    esp,0xc
c0002bca:	57                   	push   edi
c0002bcb:	e8 7c 32 00 00       	call   c0005e4c <ff_memfree>
c0002bd0:	83 c4 10             	add    esp,0x10
c0002bd3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bd7:	39 d8                	cmp    eax,ebx
c0002bd9:	0f 95 c0             	setne  al
c0002bdc:	0f b6 c0             	movzx  eax,al
c0002bdf:	eb 19                	jmp    c0002bfa <dir_clear+0xf4>
c0002be1:	b8 01 00 00 00       	mov    eax,0x1
c0002be6:	eb 12                	jmp    c0002bfa <dir_clear+0xf4>
c0002be8:	89 d9                	mov    ecx,ebx
c0002bea:	31 d2                	xor    edx,edx
c0002bec:	e8 40 f4 ff ff       	call   c0002031 <mem_set>
c0002bf1:	89 da                	mov    edx,ebx
c0002bf3:	31 db                	xor    ebx,ebx
c0002bf5:	c1 ea 09             	shr    edx,0x9
c0002bf8:	eb c5                	jmp    c0002bbf <dir_clear+0xb9>
c0002bfa:	83 c4 1c             	add    esp,0x1c
c0002bfd:	5b                   	pop    ebx
c0002bfe:	5e                   	pop    esi
c0002bff:	5f                   	pop    edi
c0002c00:	5d                   	pop    ebp
c0002c01:	c3                   	ret    

c0002c02 <create_name>:
c0002c02:	55                   	push   ebp
c0002c03:	89 c5                	mov    ebp,eax
c0002c05:	57                   	push   edi
c0002c06:	89 d7                	mov    edi,edx
c0002c08:	56                   	push   esi
c0002c09:	31 f6                	xor    esi,esi
c0002c0b:	53                   	push   ebx
c0002c0c:	83 ec 3c             	sub    esp,0x3c
c0002c0f:	8b 02                	mov    eax,DWORD PTR [edx]
c0002c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002c18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002c1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c1f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002c23:	e8 4d f4 ff ff       	call   c0002075 <tchar2uni>
c0002c28:	83 f8 ff             	cmp    eax,0xffffffff
c0002c2b:	89 c3                	mov    ebx,eax
c0002c2d:	75 0a                	jne    c0002c39 <create_name+0x37>
c0002c2f:	b8 06 00 00 00       	mov    eax,0x6
c0002c34:	e9 7c 02 00 00       	jmp    c0002eb5 <create_name+0x2b3>
c0002c39:	3d ff ff 00 00       	cmp    eax,0xffff
c0002c3e:	76 0c                	jbe    c0002c4c <create_name+0x4a>
c0002c40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002c44:	c1 e8 10             	shr    eax,0x10
c0002c47:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002c4b:	46                   	inc    esi
c0002c4c:	0f b7 d3             	movzx  edx,bx
c0002c4f:	89 d8                	mov    eax,ebx
c0002c51:	83 fa 1f             	cmp    edx,0x1f
c0002c54:	76 30                	jbe    c0002c86 <create_name+0x84>
c0002c56:	83 fa 2f             	cmp    edx,0x2f
c0002c59:	74 2b                	je     c0002c86 <create_name+0x84>
c0002c5b:	83 fa 5c             	cmp    edx,0x5c
c0002c5e:	74 35                	je     c0002c95 <create_name+0x93>
c0002c60:	83 fa 7f             	cmp    edx,0x7f
c0002c63:	77 0e                	ja     c0002c73 <create_name+0x71>
c0002c65:	b8 62 11 02 c0       	mov    eax,0xc0021162
c0002c6a:	e8 ef f3 ff ff       	call   c000205e <chk_chr>
c0002c6f:	85 c0                	test   eax,eax
c0002c71:	75 bc                	jne    c0002c2f <create_name+0x2d>
c0002c73:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c79:	77 b4                	ja     c0002c2f <create_name+0x2d>
c0002c7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c7f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c83:	46                   	inc    esi
c0002c84:	eb 99                	jmp    c0002c1f <create_name+0x1d>
c0002c86:	66 83 f8 1f          	cmp    ax,0x1f
c0002c8a:	b3 04                	mov    bl,0x4
c0002c8c:	76 1a                	jbe    c0002ca8 <create_name+0xa6>
c0002c8e:	eb 05                	jmp    c0002c95 <create_name+0x93>
c0002c90:	40                   	inc    eax
c0002c91:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c99:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c9c:	83 fa 2f             	cmp    edx,0x2f
c0002c9f:	74 ef                	je     c0002c90 <create_name+0x8e>
c0002ca1:	83 fa 5c             	cmp    edx,0x5c
c0002ca4:	74 ea                	je     c0002c90 <create_name+0x8e>
c0002ca6:	31 db                	xor    ebx,ebx
c0002ca8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002cac:	89 07                	mov    DWORD PTR [edi],eax
c0002cae:	85 f6                	test   esi,esi
c0002cb0:	74 16                	je     c0002cc8 <create_name+0xc6>
c0002cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cb6:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002cbb:	83 f8 20             	cmp    eax,0x20
c0002cbe:	74 05                	je     c0002cc5 <create_name+0xc3>
c0002cc0:	83 f8 2e             	cmp    eax,0x2e
c0002cc3:	75 03                	jne    c0002cc8 <create_name+0xc6>
c0002cc5:	4e                   	dec    esi
c0002cc6:	eb e6                	jmp    c0002cae <create_name+0xac>
c0002cc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ccc:	31 ff                	xor    edi,edi
c0002cce:	85 f6                	test   esi,esi
c0002cd0:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002cd6:	0f 84 53 ff ff ff    	je     c0002c2f <create_name+0x2d>
c0002cdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ce0:	8d 57 01             	lea    edx,[edi+0x1]
c0002ce3:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ce7:	83 f8 20             	cmp    eax,0x20
c0002cea:	75 04                	jne    c0002cf0 <create_name+0xee>
c0002cec:	89 d7                	mov    edi,edx
c0002cee:	eb ec                	jmp    c0002cdc <create_name+0xda>
c0002cf0:	85 ff                	test   edi,edi
c0002cf2:	75 05                	jne    c0002cf9 <create_name+0xf7>
c0002cf4:	83 f8 2e             	cmp    eax,0x2e
c0002cf7:	75 08                	jne    c0002d01 <create_name+0xff>
c0002cf9:	83 cb 03             	or     ebx,0x3
c0002cfc:	eb 03                	jmp    c0002d01 <create_name+0xff>
c0002cfe:	4e                   	dec    esi
c0002cff:	74 0c                	je     c0002d0d <create_name+0x10b>
c0002d01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d05:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002d0b:	75 f1                	jne    c0002cfe <create_name+0xfc>
c0002d0d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d12:	ba 20 00 00 00       	mov    edx,0x20
c0002d17:	8d 45 20             	lea    eax,[ebp+0x20]
c0002d1a:	e8 12 f3 ff ff       	call   c0002031 <mem_set>
c0002d1f:	31 c9                	xor    ecx,ecx
c0002d21:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002d29:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002d2e:	8d 47 01             	lea    eax,[edi+0x1]
c0002d31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d39:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002d3d:	85 c0                	test   eax,eax
c0002d3f:	89 c7                	mov    edi,eax
c0002d41:	0f 84 1d 01 00 00    	je     c0002e64 <create_name+0x262>
c0002d47:	83 f8 20             	cmp    eax,0x20
c0002d4a:	74 0b                	je     c0002d57 <create_name+0x155>
c0002d4c:	83 f8 2e             	cmp    eax,0x2e
c0002d4f:	75 0f                	jne    c0002d60 <create_name+0x15e>
c0002d51:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d55:	74 09                	je     c0002d60 <create_name+0x15e>
c0002d57:	83 cb 03             	or     ebx,0x3
c0002d5a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002d5e:	eb ce                	jmp    c0002d2e <create_name+0x12c>
c0002d60:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002d64:	73 06                	jae    c0002d6c <create_name+0x16a>
c0002d66:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d6a:	75 3a                	jne    c0002da6 <create_name+0x1a4>
c0002d6c:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002d71:	75 08                	jne    c0002d7b <create_name+0x179>
c0002d73:	83 cb 03             	or     ebx,0x3
c0002d76:	e9 e9 00 00 00       	jmp    c0002e64 <create_name+0x262>
c0002d7b:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d7f:	74 0d                	je     c0002d8e <create_name+0x18c>
c0002d81:	83 cb 03             	or     ebx,0x3
c0002d84:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d88:	0f 87 d6 00 00 00    	ja     c0002e64 <create_name+0x262>
c0002d8e:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d93:	b9 08 00 00 00       	mov    ecx,0x8
c0002d98:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002d9c:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002da4:	eb b4                	jmp    c0002d5a <create_name+0x158>
c0002da6:	0f b7 c7             	movzx  eax,di
c0002da9:	83 f8 7f             	cmp    eax,0x7f
c0002dac:	76 66                	jbe    c0002e14 <create_name+0x212>
c0002dae:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002db2:	89 d9                	mov    ecx,ebx
c0002db4:	83 c9 02             	or     ecx,0x2
c0002db7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dbb:	52                   	push   edx
c0002dbc:	52                   	push   edx
c0002dbd:	68 b5 01 00 00       	push   0x1b5
c0002dc2:	50                   	push   eax
c0002dc3:	e8 9c 30 00 00       	call   c0005e64 <ff_uni2oem>
c0002dc8:	83 c4 10             	add    esp,0x10
c0002dcb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002dcf:	a8 80                	test   al,0x80
c0002dd1:	89 c7                	mov    edi,eax
c0002dd3:	74 0c                	je     c0002de1 <create_name+0x1df>
c0002dd5:	83 e7 7f             	and    edi,0x7f
c0002dd8:	0f b6 bf 20 12 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdede0]
c0002ddf:	eb 2a                	jmp    c0002e0b <create_name+0x209>
c0002de1:	0f b7 c0             	movzx  eax,ax
c0002de4:	3d ff 00 00 00       	cmp    eax,0xff
c0002de9:	76 20                	jbe    c0002e0b <create_name+0x209>
c0002deb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002def:	4a                   	dec    edx
c0002df0:	39 ca                	cmp    edx,ecx
c0002df2:	77 0c                	ja     c0002e00 <create_name+0x1fe>
c0002df4:	83 cb 03             	or     ebx,0x3
c0002df7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002dfb:	e9 5a ff ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e00:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002e04:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e08:	41                   	inc    ecx
c0002e09:	eb 4d                	jmp    c0002e58 <create_name+0x256>
c0002e0b:	66 85 ff             	test   di,di
c0002e0e:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e12:	74 19                	je     c0002e2d <create_name+0x22b>
c0002e14:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002e18:	0f b7 d7             	movzx  edx,di
c0002e1b:	b8 6b 11 02 c0       	mov    eax,0xc002116b
c0002e20:	e8 39 f2 ff ff       	call   c000205e <chk_chr>
c0002e25:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	74 0a                	je     c0002e37 <create_name+0x235>
c0002e2d:	83 cb 03             	or     ebx,0x3
c0002e30:	bf 5f 00 00 00       	mov    edi,0x5f
c0002e35:	eb 21                	jmp    c0002e58 <create_name+0x256>
c0002e37:	8d 47 bf             	lea    eax,[edi-0x41]
c0002e3a:	66 83 f8 19          	cmp    ax,0x19
c0002e3e:	77 07                	ja     c0002e47 <create_name+0x245>
c0002e40:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e45:	eb 11                	jmp    c0002e58 <create_name+0x256>
c0002e47:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e4a:	66 83 f8 19          	cmp    ax,0x19
c0002e4e:	77 08                	ja     c0002e58 <create_name+0x256>
c0002e50:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e55:	83 ef 20             	sub    edi,0x20
c0002e58:	89 f8                	mov    eax,edi
c0002e5a:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002e5e:	41                   	inc    ecx
c0002e5f:	e9 f6 fe ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e64:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002e68:	75 04                	jne    c0002e6e <create_name+0x26c>
c0002e6a:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002e6e:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002e73:	75 05                	jne    c0002e7a <create_name+0x278>
c0002e75:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e7e:	83 e0 0c             	and    eax,0xc
c0002e81:	83 f8 0c             	cmp    eax,0xc
c0002e84:	74 0c                	je     c0002e92 <create_name+0x290>
c0002e86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e8a:	83 e0 03             	and    eax,0x3
c0002e8d:	83 f8 03             	cmp    eax,0x3
c0002e90:	75 05                	jne    c0002e97 <create_name+0x295>
c0002e92:	83 cb 02             	or     ebx,0x2
c0002e95:	eb 19                	jmp    c0002eb0 <create_name+0x2ae>
c0002e97:	f6 c3 02             	test   bl,0x2
c0002e9a:	75 14                	jne    c0002eb0 <create_name+0x2ae>
c0002e9c:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002ea1:	74 03                	je     c0002ea6 <create_name+0x2a4>
c0002ea3:	83 cb 10             	or     ebx,0x10
c0002ea6:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002eab:	74 03                	je     c0002eb0 <create_name+0x2ae>
c0002ead:	83 cb 08             	or     ebx,0x8
c0002eb0:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002eb3:	31 c0                	xor    eax,eax
c0002eb5:	83 c4 3c             	add    esp,0x3c
c0002eb8:	5b                   	pop    ebx
c0002eb9:	5e                   	pop    esi
c0002eba:	5f                   	pop    edi
c0002ebb:	5d                   	pop    ebp
c0002ebc:	c3                   	ret    

c0002ebd <cmp_lfn>:
c0002ebd:	55                   	push   ebp
c0002ebe:	57                   	push   edi
c0002ebf:	89 d7                	mov    edi,edx
c0002ec1:	56                   	push   esi
c0002ec2:	53                   	push   ebx
c0002ec3:	83 ec 1c             	sub    esp,0x1c
c0002ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002eca:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ecd:	e8 1e f1 ff ff       	call   c0001ff0 <ld_word>
c0002ed2:	66 85 c0             	test   ax,ax
c0002ed5:	74 07                	je     c0002ede <cmp_lfn+0x21>
c0002ed7:	31 c0                	xor    eax,eax
c0002ed9:	e9 a4 00 00 00       	jmp    c0002f82 <cmp_lfn+0xc5>
c0002ede:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002ee0:	bd 01 00 00 00       	mov    ebp,0x1
c0002ee5:	31 c9                	xor    ecx,ecx
c0002ee7:	83 e3 3f             	and    ebx,0x3f
c0002eea:	4b                   	dec    ebx
c0002eeb:	6b db 0d             	imul   ebx,ebx,0xd
c0002eee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef2:	0f b6 81 a0 12 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffded60]
c0002ef9:	01 f8                	add    eax,edi
c0002efb:	e8 f0 f0 ff ff       	call   c0001ff0 <ld_word>
c0002f00:	66 85 ed             	test   bp,bp
c0002f03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f07:	0f b7 f0             	movzx  esi,ax
c0002f0a:	74 44                	je     c0002f50 <cmp_lfn+0x93>
c0002f0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002f10:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002f16:	77 bf                	ja     c0002ed7 <cmp_lfn+0x1a>
c0002f18:	83 ec 0c             	sub    esp,0xc
c0002f1b:	0f b7 c6             	movzx  eax,si
c0002f1e:	50                   	push   eax
c0002f1f:	e8 54 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f24:	89 c5                	mov    ebp,eax
c0002f26:	8d 43 01             	lea    eax,[ebx+0x1]
c0002f29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002f2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f31:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f35:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f38:	e8 3b 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f3d:	83 c4 10             	add    esp,0x10
c0002f40:	39 c5                	cmp    ebp,eax
c0002f42:	75 93                	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f44:	89 f5                	mov    ebp,esi
c0002f46:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002f4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002f4e:	eb 0c                	jmp    c0002f5c <cmp_lfn+0x9f>
c0002f50:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002f56:	0f 85 7b ff ff ff    	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f5c:	41                   	inc    ecx
c0002f5d:	83 f9 0d             	cmp    ecx,0xd
c0002f60:	75 8c                	jne    c0002eee <cmp_lfn+0x31>
c0002f62:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f65:	74 16                	je     c0002f7d <cmp_lfn+0xc0>
c0002f67:	66 85 ed             	test   bp,bp
c0002f6a:	74 11                	je     c0002f7d <cmp_lfn+0xc0>
c0002f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f75:	0f 94 c0             	sete   al
c0002f78:	0f b6 c0             	movzx  eax,al
c0002f7b:	eb 05                	jmp    c0002f82 <cmp_lfn+0xc5>
c0002f7d:	b8 01 00 00 00       	mov    eax,0x1
c0002f82:	83 c4 1c             	add    esp,0x1c
c0002f85:	5b                   	pop    ebx
c0002f86:	5e                   	pop    esi
c0002f87:	5f                   	pop    edi
c0002f88:	5d                   	pop    ebp
c0002f89:	c3                   	ret    

c0002f8a <sync_fs>:
c0002f8a:	56                   	push   esi
c0002f8b:	53                   	push   ebx
c0002f8c:	53                   	push   ebx
c0002f8d:	89 c3                	mov    ebx,eax
c0002f8f:	e8 5e f5 ff ff       	call   c00024f2 <sync_window>
c0002f94:	85 c0                	test   eax,eax
c0002f96:	0f 85 9a 00 00 00    	jne    c0003036 <sync_fs+0xac>
c0002f9c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f9f:	75 7b                	jne    c000301c <sync_fs+0x92>
c0002fa1:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002fa5:	75 75                	jne    c000301c <sync_fs+0x92>
c0002fa7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002faa:	b9 00 02 00 00       	mov    ecx,0x200
c0002faf:	31 d2                	xor    edx,edx
c0002fb1:	89 f0                	mov    eax,esi
c0002fb3:	e8 79 f0 ff ff       	call   c0002031 <mem_set>
c0002fb8:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002fbe:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fc3:	e8 4d f0 ff ff       	call   c0002015 <st_word>
c0002fc8:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fcd:	89 f0                	mov    eax,esi
c0002fcf:	e8 45 f0 ff ff       	call   c0002019 <st_dword>
c0002fd4:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fda:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fdf:	e8 35 f0 ff ff       	call   c0002019 <st_dword>
c0002fe4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fe7:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fed:	e8 27 f0 ff ff       	call   c0002019 <st_dword>
c0002ff2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff5:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ffb:	e8 19 f0 ff ff       	call   c0002019 <st_dword>
c0003000:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0003003:	6a 01                	push   0x1
c0003005:	40                   	inc    eax
c0003006:	50                   	push   eax
c0003007:	56                   	push   esi
c0003008:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000300b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000300f:	50                   	push   eax
c0003010:	e8 a6 ef ff ff       	call   c0001fbb <disk_write>
c0003015:	83 c4 10             	add    esp,0x10
c0003018:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000301c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003020:	51                   	push   ecx
c0003021:	6a 00                	push   0x0
c0003023:	6a 00                	push   0x0
c0003025:	50                   	push   eax
c0003026:	e8 a6 ef ff ff       	call   c0001fd1 <disk_ioctl>
c000302b:	83 c4 10             	add    esp,0x10
c000302e:	85 c0                	test   eax,eax
c0003030:	0f 95 c0             	setne  al
c0003033:	0f b6 c0             	movzx  eax,al
c0003036:	5a                   	pop    edx
c0003037:	5b                   	pop    ebx
c0003038:	5e                   	pop    esi
c0003039:	c3                   	ret    

c000303a <create_partition>:
c000303a:	55                   	push   ebp
c000303b:	0f b6 c0             	movzx  eax,al
c000303e:	57                   	push   edi
c000303f:	56                   	push   esi
c0003040:	53                   	push   ebx
c0003041:	83 ec 40             	sub    esp,0x40
c0003044:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003048:	8d 44 24 30          	lea    eax,[esp+0x30]
c000304c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003050:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003054:	50                   	push   eax
c0003055:	6a 01                	push   0x1
c0003057:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000305b:	e8 71 ef ff ff       	call   c0001fd1 <disk_ioctl>
c0003060:	83 c4 10             	add    esp,0x10
c0003063:	85 c0                	test   eax,eax
c0003065:	0f 85 68 01 00 00    	jne    c00031d3 <create_partition+0x199>
c000306b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000306f:	b9 05 00 00 00       	mov    ecx,0x5
c0003074:	be 08 00 00 00       	mov    esi,0x8
c0003079:	89 f0                	mov    eax,esi
c000307b:	31 d2                	xor    edx,edx
c000307d:	0f b6 d8             	movzx  ebx,al
c0003080:	89 e8                	mov    eax,ebp
c0003082:	f7 f3                	div    ebx
c0003084:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003089:	76 0a                	jbe    c0003095 <create_partition+0x5b>
c000308b:	d1 e6                	shl    esi,1
c000308d:	49                   	dec    ecx
c000308e:	75 e9                	jne    c0003079 <create_partition+0x3f>
c0003090:	be ff ff ff ff       	mov    esi,0xffffffff
c0003095:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003099:	b9 00 02 00 00       	mov    ecx,0x200
c000309e:	31 d2                	xor    edx,edx
c00030a0:	e8 8c ef ff ff       	call   c0002031 <mem_set>
c00030a5:	b9 64 00 00 00       	mov    ecx,0x64
c00030aa:	89 e8                	mov    eax,ebp
c00030ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00030b4:	31 d2                	xor    edx,edx
c00030b6:	f7 f1                	div    ecx
c00030b8:	b9 3f 00 00 00       	mov    ecx,0x3f
c00030bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00030c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030c5:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030cb:	89 f0                	mov    eax,esi
c00030cd:	0f b6 c0             	movzx  eax,al
c00030d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030d4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00030d9:	0f 96 c0             	setbe  al
c00030dc:	31 d2                	xor    edx,edx
c00030de:	85 c9                	test   ecx,ecx
c00030e0:	0f 95 c2             	setne  dl
c00030e3:	85 c2                	test   edx,eax
c00030e5:	0f 84 b7 00 00 00    	je     c00031a2 <create_partition+0x168>
c00030eb:	39 e9                	cmp    ecx,ebp
c00030ed:	0f 83 af 00 00 00    	jae    c00031a2 <create_partition+0x168>
c00030f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030fb:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030fe:	83 fe 64             	cmp    esi,0x64
c0003101:	77 0b                	ja     c000310e <create_partition+0xd4>
c0003103:	74 07                	je     c000310c <create_partition+0xd2>
c0003105:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c000310a:	eb 02                	jmp    c000310e <create_partition+0xd4>
c000310c:	89 ee                	mov    esi,ebp
c000310e:	89 ca                	mov    edx,ecx
c0003110:	31 c0                	xor    eax,eax
c0003112:	01 f2                	add    edx,esi
c0003114:	0f 92 c0             	setb   al
c0003117:	39 ea                	cmp    edx,ebp
c0003119:	77 04                	ja     c000311f <create_partition+0xe5>
c000311b:	85 c0                	test   eax,eax
c000311d:	74 06                	je     c0003125 <create_partition+0xeb>
c000311f:	89 ee                	mov    esi,ebp
c0003121:	29 ce                	sub    esi,ecx
c0003123:	eb 04                	jmp    c0003129 <create_partition+0xef>
c0003125:	85 f6                	test   esi,esi
c0003127:	74 79                	je     c00031a2 <create_partition+0x168>
c0003129:	89 ca                	mov    edx,ecx
c000312b:	89 d8                	mov    eax,ebx
c000312d:	e8 e7 ee ff ff       	call   c0002019 <st_dword>
c0003132:	8d 43 04             	lea    eax,[ebx+0x4]
c0003135:	89 f2                	mov    edx,esi
c0003137:	e8 dd ee ff ff       	call   c0002019 <st_dword>
c000313c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003140:	bf 3f 00 00 00       	mov    edi,0x3f
c0003145:	31 d2                	xor    edx,edx
c0003147:	83 c3 10             	add    ebx,0x10
c000314a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000314e:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003151:	89 c8                	mov    eax,ecx
c0003153:	01 f1                	add    ecx,esi
c0003155:	f7 f7                	div    edi
c0003157:	89 d7                	mov    edi,edx
c0003159:	31 d2                	xor    edx,edx
c000315b:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000315f:	47                   	inc    edi
c0003160:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003163:	89 c2                	mov    edx,eax
c0003165:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003168:	c1 ea 02             	shr    edx,0x2
c000316b:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316e:	83 e2 c0             	and    edx,0xffffffc0
c0003171:	09 fa                	or     edx,edi
c0003173:	bf 3f 00 00 00       	mov    edi,0x3f
c0003178:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c000317b:	31 d2                	xor    edx,edx
c000317d:	f7 f7                	div    edi
c000317f:	89 d6                	mov    esi,edx
c0003181:	31 d2                	xor    edx,edx
c0003183:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003187:	46                   	inc    esi
c0003188:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c000318b:	89 c7                	mov    edi,eax
c000318d:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003190:	c1 ef 02             	shr    edi,0x2
c0003193:	83 e7 c0             	and    edi,0xffffffc0
c0003196:	09 fe                	or     esi,edi
c0003198:	89 f2                	mov    edx,esi
c000319a:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c000319d:	e9 32 ff ff ff       	jmp    c00030d4 <create_partition+0x9a>
c00031a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00031ab:	05 fe 01 00 00       	add    eax,0x1fe
c00031b0:	e8 60 ee ff ff       	call   c0002015 <st_word>
c00031b5:	6a 01                	push   0x1
c00031b7:	6a 00                	push   0x0
c00031b9:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00031bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00031c1:	e8 f5 ed ff ff       	call   c0001fbb <disk_write>
c00031c6:	83 c4 10             	add    esp,0x10
c00031c9:	85 c0                	test   eax,eax
c00031cb:	0f 95 c0             	setne  al
c00031ce:	0f b6 c0             	movzx  eax,al
c00031d1:	eb 05                	jmp    c00031d8 <create_partition+0x19e>
c00031d3:	b8 01 00 00 00       	mov    eax,0x1
c00031d8:	83 c4 3c             	add    esp,0x3c
c00031db:	5b                   	pop    ebx
c00031dc:	5e                   	pop    esi
c00031dd:	5f                   	pop    edi
c00031de:	5d                   	pop    ebp
c00031df:	c3                   	ret    

c00031e0 <get_fileinfo>:
c00031e0:	55                   	push   ebp
c00031e1:	57                   	push   edi
c00031e2:	56                   	push   esi
c00031e3:	53                   	push   ebx
c00031e4:	83 ec 1c             	sub    esp,0x1c
c00031e7:	8b 30                	mov    esi,DWORD PTR [eax]
c00031e9:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031ed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031f1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031f5:	0f 84 de 01 00 00    	je     c00033d9 <get_fileinfo+0x1f9>
c00031fb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031ff:	89 d3                	mov    ebx,edx
c0003201:	89 c6                	mov    esi,eax
c0003203:	74 7d                	je     c0003282 <get_fileinfo+0xa2>
c0003205:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000320d:	31 ff                	xor    edi,edi
c000320f:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003216:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000321a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000321e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003221:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003225:	85 c0                	test   eax,eax
c0003227:	89 c2                	mov    edx,eax
c0003229:	74 44                	je     c000326f <get_fileinfo+0x8f>
c000322b:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003230:	85 ed                	test   ebp,ebp
c0003232:	75 0d                	jne    c0003241 <get_fileinfo+0x61>
c0003234:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000323a:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000323f:	76 20                	jbe    c0003261 <get_fileinfo+0x81>
c0003241:	c1 e5 10             	shl    ebp,0x10
c0003244:	b9 ff 00 00 00       	mov    ecx,0xff
c0003249:	29 f9                	sub    ecx,edi
c000324b:	09 e8                	or     eax,ebp
c000324d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003251:	e8 f7 ee ff ff       	call   c000214d <put_utf>
c0003256:	0f b6 c0             	movzx  eax,al
c0003259:	85 c0                	test   eax,eax
c000325b:	74 10                	je     c000326d <get_fileinfo+0x8d>
c000325d:	01 c7                	add    edi,eax
c000325f:	31 d2                	xor    edx,edx
c0003261:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003266:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000326b:	eb a9                	jmp    c0003216 <get_fileinfo+0x36>
c000326d:	31 ff                	xor    edi,edi
c000326f:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003275:	b8 00 00 00 00       	mov    eax,0x0
c000327a:	0f 45 f8             	cmovne edi,eax
c000327d:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003282:	31 ff                	xor    edi,edi
c0003284:	31 c9                	xor    ecx,ecx
c0003286:	83 f9 0a             	cmp    ecx,0xa
c0003289:	0f 87 ac 00 00 00    	ja     c000333b <get_fileinfo+0x15b>
c000328f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003292:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003295:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003299:	83 f8 20             	cmp    eax,0x20
c000329c:	89 c2                	mov    edx,eax
c000329e:	0f 84 90 00 00 00    	je     c0003334 <get_fileinfo+0x154>
c00032a4:	83 f8 05             	cmp    eax,0x5
c00032a7:	75 05                	jne    c00032ae <get_fileinfo+0xce>
c00032a9:	ba e5 00 00 00       	mov    edx,0xe5
c00032ae:	83 fd 09             	cmp    ebp,0x9
c00032b1:	75 0b                	jne    c00032be <get_fileinfo+0xde>
c00032b3:	83 ff 0b             	cmp    edi,0xb
c00032b6:	77 06                	ja     c00032be <get_fileinfo+0xde>
c00032b8:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00032bd:	47                   	inc    edi
c00032be:	0f b7 c2             	movzx  eax,dx
c00032c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00032c5:	e8 a5 ed ff ff       	call   c000206f <dbc_1st>
c00032ca:	85 c0                	test   eax,eax
c00032cc:	74 2f                	je     c00032fd <get_fileinfo+0x11d>
c00032ce:	83 fd 08             	cmp    ebp,0x8
c00032d1:	74 2a                	je     c00032fd <get_fileinfo+0x11d>
c00032d3:	83 fd 0b             	cmp    ebp,0xb
c00032d6:	74 25                	je     c00032fd <get_fileinfo+0x11d>
c00032d8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032db:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032df:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c00032e3:	e8 8a ed ff ff       	call   c0002072 <dbc_2nd>
c00032e8:	85 c0                	test   eax,eax
c00032ea:	74 11                	je     c00032fd <get_fileinfo+0x11d>
c00032ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032f0:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032f3:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c00032f8:	c1 e0 08             	shl    eax,0x8
c00032fb:	09 c2                	or     edx,eax
c00032fd:	50                   	push   eax
c00032fe:	0f b7 d2             	movzx  edx,dx
c0003301:	50                   	push   eax
c0003302:	68 b5 01 00 00       	push   0x1b5
c0003307:	52                   	push   edx
c0003308:	e8 f3 2b 00 00       	call   c0005f00 <ff_oem2uni>
c000330d:	83 c4 10             	add    esp,0x10
c0003310:	0f b7 c0             	movzx  eax,ax
c0003313:	85 c0                	test   eax,eax
c0003315:	75 04                	jne    c000331b <get_fileinfo+0x13b>
c0003317:	31 ff                	xor    edi,edi
c0003319:	eb 20                	jmp    c000333b <get_fileinfo+0x15b>
c000331b:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000331f:	b9 0c 00 00 00       	mov    ecx,0xc
c0003324:	29 f9                	sub    ecx,edi
c0003326:	e8 22 ee ff ff       	call   c000214d <put_utf>
c000332b:	0f b6 c0             	movzx  eax,al
c000332e:	85 c0                	test   eax,eax
c0003330:	74 e5                	je     c0003317 <get_fileinfo+0x137>
c0003332:	01 c7                	add    edi,eax
c0003334:	89 e9                	mov    ecx,ebp
c0003336:	e9 4b ff ff ff       	jmp    c0003286 <get_fileinfo+0xa6>
c000333b:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003340:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003344:	75 5f                	jne    c00033a5 <get_fileinfo+0x1c5>
c0003346:	85 ff                	test   edi,edi
c0003348:	75 0b                	jne    c0003355 <get_fileinfo+0x175>
c000334a:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000334e:	ba 01 00 00 00       	mov    edx,0x1
c0003353:	eb 3e                	jmp    c0003393 <get_fileinfo+0x1b3>
c0003355:	bf 08 00 00 00       	mov    edi,0x8
c000335a:	31 d2                	xor    edx,edx
c000335c:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003362:	84 c0                	test   al,al
c0003364:	74 2d                	je     c0003393 <get_fileinfo+0x1b3>
c0003366:	66 83 f8 2e          	cmp    ax,0x2e
c000336a:	74 1b                	je     c0003387 <get_fileinfo+0x1a7>
c000336c:	8d 48 bf             	lea    ecx,[eax-0x41]
c000336f:	66 83 f9 19          	cmp    cx,0x19
c0003373:	77 17                	ja     c000338c <get_fileinfo+0x1ac>
c0003375:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003378:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000337b:	21 f9                	and    ecx,edi
c000337d:	80 e1 18             	and    cl,0x18
c0003380:	74 0a                	je     c000338c <get_fileinfo+0x1ac>
c0003382:	83 c0 20             	add    eax,0x20
c0003385:	eb 05                	jmp    c000338c <get_fileinfo+0x1ac>
c0003387:	bf 10 00 00 00       	mov    edi,0x10
c000338c:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003390:	42                   	inc    edx
c0003391:	eb c9                	jmp    c000335c <get_fileinfo+0x17c>
c0003393:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003398:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000339b:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000339f:	75 04                	jne    c00033a5 <get_fileinfo+0x1c5>
c00033a1:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00033a5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033a8:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00033ab:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00033ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033b1:	83 c0 1c             	add    eax,0x1c
c00033b4:	e8 44 ec ff ff       	call   c0001ffd <ld_dword>
c00033b9:	89 03                	mov    DWORD PTR [ebx],eax
c00033bb:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033be:	83 c0 16             	add    eax,0x16
c00033c1:	e8 2a ec ff ff       	call   c0001ff0 <ld_word>
c00033c6:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00033ca:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033cd:	83 c0 18             	add    eax,0x18
c00033d0:	e8 1b ec ff ff       	call   c0001ff0 <ld_word>
c00033d5:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033d9:	83 c4 1c             	add    esp,0x1c
c00033dc:	5b                   	pop    ebx
c00033dd:	5e                   	pop    esi
c00033de:	5f                   	pop    edi
c00033df:	5d                   	pop    ebp
c00033e0:	c3                   	ret    

c00033e1 <ld_clust.isra.0>:
c00033e1:	56                   	push   esi
c00033e2:	89 c6                	mov    esi,eax
c00033e4:	53                   	push   ebx
c00033e5:	89 d3                	mov    ebx,edx
c00033e7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033ea:	e8 01 ec ff ff       	call   c0001ff0 <ld_word>
c00033ef:	0f b7 c8             	movzx  ecx,ax
c00033f2:	89 f0                	mov    eax,esi
c00033f4:	3c 03                	cmp    al,0x3
c00033f6:	75 0d                	jne    c0003405 <ld_clust.isra.0+0x24>
c00033f8:	8d 43 14             	lea    eax,[ebx+0x14]
c00033fb:	e8 f0 eb ff ff       	call   c0001ff0 <ld_word>
c0003400:	c1 e0 10             	shl    eax,0x10
c0003403:	09 c1                	or     ecx,eax
c0003405:	5b                   	pop    ebx
c0003406:	89 c8                	mov    eax,ecx
c0003408:	5e                   	pop    esi
c0003409:	c3                   	ret    

c000340a <st_clust.isra.1>:
c000340a:	56                   	push   esi
c000340b:	89 c6                	mov    esi,eax
c000340d:	53                   	push   ebx
c000340e:	89 d3                	mov    ebx,edx
c0003410:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003413:	0f b7 d1             	movzx  edx,cx
c0003416:	e8 fa eb ff ff       	call   c0002015 <st_word>
c000341b:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000341e:	75 0f                	jne    c000342f <st_clust.isra.1+0x25>
c0003420:	8d 43 14             	lea    eax,[ebx+0x14]
c0003423:	5b                   	pop    ebx
c0003424:	c1 e9 10             	shr    ecx,0x10
c0003427:	89 ca                	mov    edx,ecx
c0003429:	5e                   	pop    esi
c000342a:	e9 e6 eb ff ff       	jmp    c0002015 <st_word>
c000342f:	5b                   	pop    ebx
c0003430:	5e                   	pop    esi
c0003431:	c3                   	ret    

c0003432 <get_fat.isra.2>:
c0003432:	83 fa 01             	cmp    edx,0x1
c0003435:	b9 01 00 00 00       	mov    ecx,0x1
c000343a:	0f 86 f4 00 00 00    	jbe    c0003534 <get_fat.isra.2+0x102>
c0003440:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003443:	0f 83 eb 00 00 00    	jae    c0003534 <get_fat.isra.2+0x102>
c0003449:	55                   	push   ebp
c000344a:	57                   	push   edi
c000344b:	56                   	push   esi
c000344c:	89 c6                	mov    esi,eax
c000344e:	53                   	push   ebx
c000344f:	89 d3                	mov    ebx,edx
c0003451:	83 ec 0c             	sub    esp,0xc
c0003454:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003457:	83 f8 02             	cmp    eax,0x2
c000345a:	74 79                	je     c00034d5 <get_fat.isra.2+0xa3>
c000345c:	83 f8 03             	cmp    eax,0x3
c000345f:	0f 84 97 00 00 00    	je     c00034fc <get_fat.isra.2+0xca>
c0003465:	48                   	dec    eax
c0003466:	0f 85 be 00 00 00    	jne    c000352a <get_fat.isra.2+0xf8>
c000346c:	89 d7                	mov    edi,edx
c000346e:	89 f0                	mov    eax,esi
c0003470:	d1 ef                	shr    edi,1
c0003472:	01 d7                	add    edi,edx
c0003474:	89 fa                	mov    edx,edi
c0003476:	c1 ea 09             	shr    edx,0x9
c0003479:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000347c:	e8 d4 f0 ff ff       	call   c0002555 <move_window>
c0003481:	85 c0                	test   eax,eax
c0003483:	74 08                	je     c000348d <get_fat.isra.2+0x5b>
c0003485:	83 c9 ff             	or     ecx,0xffffffff
c0003488:	e9 9d 00 00 00       	jmp    c000352a <get_fat.isra.2+0xf8>
c000348d:	8d 6f 01             	lea    ebp,[edi+0x1]
c0003490:	89 f0                	mov    eax,esi
c0003492:	89 ea                	mov    edx,ebp
c0003494:	81 e7 ff 01 00 00    	and    edi,0x1ff
c000349a:	c1 ea 09             	shr    edx,0x9
c000349d:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00034a2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034a5:	e8 ab f0 ff ff       	call   c0002555 <move_window>
c00034aa:	85 c0                	test   eax,eax
c00034ac:	75 d7                	jne    c0003485 <get_fat.isra.2+0x53>
c00034ae:	89 f8                	mov    eax,edi
c00034b0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00034b6:	0f b6 f8             	movzx  edi,al
c00034b9:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00034be:	c1 e0 08             	shl    eax,0x8
c00034c1:	09 f8                	or     eax,edi
c00034c3:	89 c1                	mov    ecx,eax
c00034c5:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00034cb:	80 e3 01             	and    bl,0x1
c00034ce:	74 5a                	je     c000352a <get_fat.isra.2+0xf8>
c00034d0:	c1 e8 04             	shr    eax,0x4
c00034d3:	eb 53                	jmp    c0003528 <get_fat.isra.2+0xf6>
c00034d5:	c1 ea 08             	shr    edx,0x8
c00034d8:	89 f0                	mov    eax,esi
c00034da:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034dd:	e8 73 f0 ff ff       	call   c0002555 <move_window>
c00034e2:	85 c0                	test   eax,eax
c00034e4:	75 9f                	jne    c0003485 <get_fat.isra.2+0x53>
c00034e6:	01 db                	add    ebx,ebx
c00034e8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00034ee:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00034f2:	e8 f9 ea ff ff       	call   c0001ff0 <ld_word>
c00034f7:	0f b7 c8             	movzx  ecx,ax
c00034fa:	eb 2e                	jmp    c000352a <get_fat.isra.2+0xf8>
c00034fc:	c1 ea 07             	shr    edx,0x7
c00034ff:	89 f0                	mov    eax,esi
c0003501:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003504:	e8 4c f0 ff ff       	call   c0002555 <move_window>
c0003509:	85 c0                	test   eax,eax
c000350b:	0f 85 74 ff ff ff    	jne    c0003485 <get_fat.isra.2+0x53>
c0003511:	c1 e3 02             	shl    ebx,0x2
c0003514:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c000351a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000351e:	e8 da ea ff ff       	call   c0001ffd <ld_dword>
c0003523:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003528:	89 c1                	mov    ecx,eax
c000352a:	83 c4 0c             	add    esp,0xc
c000352d:	89 c8                	mov    eax,ecx
c000352f:	5b                   	pop    ebx
c0003530:	5e                   	pop    esi
c0003531:	5f                   	pop    edi
c0003532:	5d                   	pop    ebp
c0003533:	c3                   	ret    
c0003534:	89 c8                	mov    eax,ecx
c0003536:	c3                   	ret    

c0003537 <dir_sdi>:
c0003537:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000353d:	0f 87 b6 00 00 00    	ja     c00035f9 <dir_sdi+0xc2>
c0003543:	55                   	push   ebp
c0003544:	57                   	push   edi
c0003545:	56                   	push   esi
c0003546:	53                   	push   ebx
c0003547:	89 d3                	mov    ebx,edx
c0003549:	83 ec 1c             	sub    esp,0x1c
c000354c:	f6 c2 1f             	test   dl,0x1f
c000354f:	74 0a                	je     c000355b <dir_sdi+0x24>
c0003551:	b8 02 00 00 00       	mov    eax,0x2
c0003556:	e9 96 00 00 00       	jmp    c00035f1 <dir_sdi+0xba>
c000355b:	89 c6                	mov    esi,eax
c000355d:	8b 28                	mov    ebp,DWORD PTR [eax]
c000355f:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003562:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003565:	85 ff                	test   edi,edi
c0003567:	75 21                	jne    c000358a <dir_sdi+0x53>
c0003569:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000356d:	76 07                	jbe    c0003576 <dir_sdi+0x3f>
c000356f:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003572:	85 c0                	test   eax,eax
c0003574:	75 12                	jne    c0003588 <dir_sdi+0x51>
c0003576:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000357a:	89 da                	mov    edx,ebx
c000357c:	c1 ea 05             	shr    edx,0x5
c000357f:	39 c2                	cmp    edx,eax
c0003581:	73 ce                	jae    c0003551 <dir_sdi+0x1a>
c0003583:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003586:	eb 3c                	jmp    c00035c4 <dir_sdi+0x8d>
c0003588:	89 c7                	mov    edi,eax
c000358a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000358e:	c1 e1 09             	shl    ecx,0x9
c0003591:	39 cb                	cmp    ebx,ecx
c0003593:	72 26                	jb     c00035bb <dir_sdi+0x84>
c0003595:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003599:	8b 06                	mov    eax,DWORD PTR [esi]
c000359b:	89 fa                	mov    edx,edi
c000359d:	e8 90 fe ff ff       	call   c0003432 <get_fat.isra.2>
c00035a2:	83 f8 ff             	cmp    eax,0xffffffff
c00035a5:	89 c7                	mov    edi,eax
c00035a7:	74 43                	je     c00035ec <dir_sdi+0xb5>
c00035a9:	83 f8 01             	cmp    eax,0x1
c00035ac:	76 a3                	jbe    c0003551 <dir_sdi+0x1a>
c00035ae:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00035b1:	76 9e                	jbe    c0003551 <dir_sdi+0x1a>
c00035b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035b7:	29 cb                	sub    ebx,ecx
c00035b9:	eb d6                	jmp    c0003591 <dir_sdi+0x5a>
c00035bb:	89 fa                	mov    edx,edi
c00035bd:	89 e8                	mov    eax,ebp
c00035bf:	e8 82 ec ff ff       	call   c0002246 <clst2sect>
c00035c4:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035c7:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00035ca:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00035cd:	85 d2                	test   edx,edx
c00035cf:	74 80                	je     c0003551 <dir_sdi+0x1a>
c00035d1:	89 d8                	mov    eax,ebx
c00035d3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035d9:	c1 e8 09             	shr    eax,0x9
c00035dc:	01 d0                	add    eax,edx
c00035de:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035e1:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c00035e5:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035e8:	31 c0                	xor    eax,eax
c00035ea:	eb 05                	jmp    c00035f1 <dir_sdi+0xba>
c00035ec:	b8 01 00 00 00       	mov    eax,0x1
c00035f1:	83 c4 1c             	add    esp,0x1c
c00035f4:	5b                   	pop    ebx
c00035f5:	5e                   	pop    esi
c00035f6:	5f                   	pop    edi
c00035f7:	5d                   	pop    ebp
c00035f8:	c3                   	ret    
c00035f9:	b8 02 00 00 00       	mov    eax,0x2
c00035fe:	c3                   	ret    

c00035ff <create_chain>:
c00035ff:	55                   	push   ebp
c0003600:	89 c5                	mov    ebp,eax
c0003602:	57                   	push   edi
c0003603:	89 d7                	mov    edi,edx
c0003605:	56                   	push   esi
c0003606:	53                   	push   ebx
c0003607:	83 ec 1c             	sub    esp,0x1c
c000360a:	85 d2                	test   edx,edx
c000360c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000360e:	75 0e                	jne    c000361e <create_chain+0x1f>
c0003610:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003613:	85 c9                	test   ecx,ecx
c0003615:	74 32                	je     c0003649 <create_chain+0x4a>
c0003617:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000361a:	77 32                	ja     c000364e <create_chain+0x4f>
c000361c:	eb 2b                	jmp    c0003649 <create_chain+0x4a>
c000361e:	89 d8                	mov    eax,ebx
c0003620:	e8 0d fe ff ff       	call   c0003432 <get_fat.isra.2>
c0003625:	83 f8 01             	cmp    eax,0x1
c0003628:	77 0a                	ja     c0003634 <create_chain+0x35>
c000362a:	b8 01 00 00 00       	mov    eax,0x1
c000362f:	e9 fd 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003634:	83 f8 ff             	cmp    eax,0xffffffff
c0003637:	0f 84 f1 00 00 00    	je     c000372e <create_chain+0x12f>
c000363d:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003640:	89 f9                	mov    ecx,edi
c0003642:	76 0a                	jbe    c000364e <create_chain+0x4f>
c0003644:	e9 e8 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003649:	b9 01 00 00 00       	mov    ecx,0x1
c000364e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003652:	75 07                	jne    c000365b <create_chain+0x5c>
c0003654:	31 c0                	xor    eax,eax
c0003656:	e9 d6 00 00 00       	jmp    c0003731 <create_chain+0x132>
c000365b:	39 f9                	cmp    ecx,edi
c000365d:	75 49                	jne    c00036a8 <create_chain+0xa9>
c000365f:	8d 71 01             	lea    esi,[ecx+0x1]
c0003662:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003665:	77 05                	ja     c000366c <create_chain+0x6d>
c0003667:	be 02 00 00 00       	mov    esi,0x2
c000366c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003670:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003673:	89 f2                	mov    edx,esi
c0003675:	e8 b8 fd ff ff       	call   c0003432 <get_fat.isra.2>
c000367a:	83 f8 01             	cmp    eax,0x1
c000367d:	0f 84 ae 00 00 00    	je     c0003731 <create_chain+0x132>
c0003683:	83 f8 ff             	cmp    eax,0xffffffff
c0003686:	0f 84 a5 00 00 00    	je     c0003731 <create_chain+0x132>
c000368c:	85 c0                	test   eax,eax
c000368e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003692:	74 10                	je     c00036a4 <create_chain+0xa5>
c0003694:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003697:	83 f8 01             	cmp    eax,0x1
c000369a:	76 0c                	jbe    c00036a8 <create_chain+0xa9>
c000369c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000369f:	0f 47 c8             	cmova  ecx,eax
c00036a2:	eb 04                	jmp    c00036a8 <create_chain+0xa9>
c00036a4:	85 f6                	test   esi,esi
c00036a6:	75 3b                	jne    c00036e3 <create_chain+0xe4>
c00036a8:	89 ce                	mov    esi,ecx
c00036aa:	46                   	inc    esi
c00036ab:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00036ae:	77 0a                	ja     c00036ba <create_chain+0xbb>
c00036b0:	83 f9 01             	cmp    ecx,0x1
c00036b3:	76 9f                	jbe    c0003654 <create_chain+0x55>
c00036b5:	be 02 00 00 00       	mov    esi,0x2
c00036ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00036c1:	89 f2                	mov    edx,esi
c00036c3:	e8 6a fd ff ff       	call   c0003432 <get_fat.isra.2>
c00036c8:	85 c0                	test   eax,eax
c00036ca:	74 17                	je     c00036e3 <create_chain+0xe4>
c00036cc:	83 f8 01             	cmp    eax,0x1
c00036cf:	74 60                	je     c0003731 <create_chain+0x132>
c00036d1:	83 f8 ff             	cmp    eax,0xffffffff
c00036d4:	74 5b                	je     c0003731 <create_chain+0x132>
c00036d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036da:	39 ce                	cmp    esi,ecx
c00036dc:	75 cc                	jne    c00036aa <create_chain+0xab>
c00036de:	e9 71 ff ff ff       	jmp    c0003654 <create_chain+0x55>
c00036e3:	83 c9 ff             	or     ecx,0xffffffff
c00036e6:	89 f2                	mov    edx,esi
c00036e8:	89 d8                	mov    eax,ebx
c00036ea:	e8 c0 f2 ff ff       	call   c00029af <put_fat>
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 0f                	jne    c0003702 <create_chain+0x103>
c00036f3:	85 ff                	test   edi,edi
c00036f5:	74 0b                	je     c0003702 <create_chain+0x103>
c00036f7:	89 f1                	mov    ecx,esi
c00036f9:	89 fa                	mov    edx,edi
c00036fb:	89 d8                	mov    eax,ebx
c00036fd:	e8 ad f2 ff ff       	call   c00029af <put_fat>
c0003702:	85 c0                	test   eax,eax
c0003704:	75 21                	jne    c0003727 <create_chain+0x128>
c0003706:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003709:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000370c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000370f:	8d 57 fe             	lea    edx,[edi-0x2]
c0003712:	39 d0                	cmp    eax,edx
c0003714:	77 04                	ja     c000371a <create_chain+0x11b>
c0003716:	48                   	dec    eax
c0003717:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000371a:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000371d:	83 c8 01             	or     eax,0x1
c0003720:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003723:	89 f0                	mov    eax,esi
c0003725:	eb 0a                	jmp    c0003731 <create_chain+0x132>
c0003727:	48                   	dec    eax
c0003728:	0f 85 fc fe ff ff    	jne    c000362a <create_chain+0x2b>
c000372e:	83 c8 ff             	or     eax,0xffffffff
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <remove_chain>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 d6                	mov    esi,edx
c000373e:	53                   	push   ebx
c000373f:	83 ec 0c             	sub    esp,0xc
c0003742:	83 fa 01             	cmp    edx,0x1
c0003745:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003747:	76 6a                	jbe    c00037b3 <remove_chain+0x7a>
c0003749:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000374c:	76 65                	jbe    c00037b3 <remove_chain+0x7a>
c000374e:	85 c9                	test   ecx,ecx
c0003750:	89 c5                	mov    ebp,eax
c0003752:	89 ca                	mov    edx,ecx
c0003754:	74 0e                	je     c0003764 <remove_chain+0x2b>
c0003756:	83 c9 ff             	or     ecx,0xffffffff
c0003759:	89 d8                	mov    eax,ebx
c000375b:	e8 4f f2 ff ff       	call   c00029af <put_fat>
c0003760:	85 c0                	test   eax,eax
c0003762:	75 5b                	jne    c00037bf <remove_chain+0x86>
c0003764:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003767:	89 f2                	mov    edx,esi
c0003769:	e8 c4 fc ff ff       	call   c0003432 <get_fat.isra.2>
c000376e:	85 c0                	test   eax,eax
c0003770:	89 c7                	mov    edi,eax
c0003772:	75 04                	jne    c0003778 <remove_chain+0x3f>
c0003774:	31 c0                	xor    eax,eax
c0003776:	eb 47                	jmp    c00037bf <remove_chain+0x86>
c0003778:	83 f8 01             	cmp    eax,0x1
c000377b:	74 36                	je     c00037b3 <remove_chain+0x7a>
c000377d:	83 f8 ff             	cmp    eax,0xffffffff
c0003780:	74 38                	je     c00037ba <remove_chain+0x81>
c0003782:	31 c9                	xor    ecx,ecx
c0003784:	89 f2                	mov    edx,esi
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 22 f2 ff ff       	call   c00029af <put_fat>
c000378d:	85 c0                	test   eax,eax
c000378f:	75 2e                	jne    c00037bf <remove_chain+0x86>
c0003791:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003797:	8d 4a fe             	lea    ecx,[edx-0x2]
c000379a:	39 c8                	cmp    eax,ecx
c000379c:	73 0d                	jae    c00037ab <remove_chain+0x72>
c000379e:	40                   	inc    eax
c000379f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00037a2:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00037a5:	83 c8 01             	or     eax,0x1
c00037a8:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00037ab:	39 fa                	cmp    edx,edi
c00037ad:	89 fe                	mov    esi,edi
c00037af:	77 b3                	ja     c0003764 <remove_chain+0x2b>
c00037b1:	eb c1                	jmp    c0003774 <remove_chain+0x3b>
c00037b3:	b8 02 00 00 00       	mov    eax,0x2
c00037b8:	eb 05                	jmp    c00037bf <remove_chain+0x86>
c00037ba:	b8 01 00 00 00       	mov    eax,0x1
c00037bf:	83 c4 0c             	add    esp,0xc
c00037c2:	5b                   	pop    ebx
c00037c3:	5e                   	pop    esi
c00037c4:	5f                   	pop    edi
c00037c5:	5d                   	pop    ebp
c00037c6:	c3                   	ret    

c00037c7 <dir_next>:
c00037c7:	55                   	push   ebp
c00037c8:	57                   	push   edi
c00037c9:	56                   	push   esi
c00037ca:	53                   	push   ebx
c00037cb:	83 ec 1c             	sub    esp,0x1c
c00037ce:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037d1:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037d3:	83 c7 20             	add    edi,0x20
c00037d6:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037dc:	76 07                	jbe    c00037e5 <dir_next+0x1e>
c00037de:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037e5:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037e8:	b9 04 00 00 00       	mov    ecx,0x4
c00037ed:	85 f6                	test   esi,esi
c00037ef:	0f 84 cd 00 00 00    	je     c00038c2 <dir_next+0xfb>
c00037f5:	89 c3                	mov    ebx,eax
c00037f7:	89 f8                	mov    eax,edi
c00037f9:	25 ff 01 00 00       	and    eax,0x1ff
c00037fe:	89 d1                	mov    ecx,edx
c0003800:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003804:	0f 85 a8 00 00 00    	jne    c00038b2 <dir_next+0xeb>
c000380a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000380d:	46                   	inc    esi
c000380e:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003811:	85 d2                	test   edx,edx
c0003813:	75 22                	jne    c0003837 <dir_next+0x70>
c0003815:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003819:	89 fa                	mov    edx,edi
c000381b:	c1 ea 05             	shr    edx,0x5
c000381e:	39 c2                	cmp    edx,eax
c0003820:	0f 82 8c 00 00 00    	jb     c00038b2 <dir_next+0xeb>
c0003826:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000382d:	b9 04 00 00 00       	mov    ecx,0x4
c0003832:	e9 8b 00 00 00       	jmp    c00038c2 <dir_next+0xfb>
c0003837:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000383b:	89 fe                	mov    esi,edi
c000383d:	c1 ee 09             	shr    esi,0x9
c0003840:	48                   	dec    eax
c0003841:	85 f0                	test   eax,esi
c0003843:	75 6d                	jne    c00038b2 <dir_next+0xeb>
c0003845:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003849:	89 e8                	mov    eax,ebp
c000384b:	e8 e2 fb ff ff       	call   c0003432 <get_fat.isra.2>
c0003850:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003854:	83 f8 01             	cmp    eax,0x1
c0003857:	89 c6                	mov    esi,eax
c0003859:	77 07                	ja     c0003862 <dir_next+0x9b>
c000385b:	b9 02 00 00 00       	mov    ecx,0x2
c0003860:	eb 60                	jmp    c00038c2 <dir_next+0xfb>
c0003862:	83 f8 ff             	cmp    eax,0xffffffff
c0003865:	75 07                	jne    c000386e <dir_next+0xa7>
c0003867:	b9 01 00 00 00       	mov    ecx,0x1
c000386c:	eb 54                	jmp    c00038c2 <dir_next+0xfb>
c000386e:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003871:	77 30                	ja     c00038a3 <dir_next+0xdc>
c0003873:	85 c9                	test   ecx,ecx
c0003875:	74 af                	je     c0003826 <dir_next+0x5f>
c0003877:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000387a:	89 d8                	mov    eax,ebx
c000387c:	e8 7e fd ff ff       	call   c00035ff <create_chain>
c0003881:	b9 07 00 00 00       	mov    ecx,0x7
c0003886:	85 c0                	test   eax,eax
c0003888:	89 c6                	mov    esi,eax
c000388a:	74 36                	je     c00038c2 <dir_next+0xfb>
c000388c:	83 f8 01             	cmp    eax,0x1
c000388f:	74 ca                	je     c000385b <dir_next+0x94>
c0003891:	83 f8 ff             	cmp    eax,0xffffffff
c0003894:	74 d1                	je     c0003867 <dir_next+0xa0>
c0003896:	89 c2                	mov    edx,eax
c0003898:	89 e8                	mov    eax,ebp
c000389a:	e8 67 f2 ff ff       	call   c0002b06 <dir_clear>
c000389f:	85 c0                	test   eax,eax
c00038a1:	75 c4                	jne    c0003867 <dir_next+0xa0>
c00038a3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00038a6:	89 f2                	mov    edx,esi
c00038a8:	89 e8                	mov    eax,ebp
c00038aa:	e8 97 e9 ff ff       	call   c0002246 <clst2sect>
c00038af:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00038b2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00038b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00038b9:	31 c9                	xor    ecx,ecx
c00038bb:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00038bf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00038c2:	83 c4 1c             	add    esp,0x1c
c00038c5:	89 c8                	mov    eax,ecx
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	5d                   	pop    ebp
c00038cb:	c3                   	ret    

c00038cc <dir_alloc>:
c00038cc:	55                   	push   ebp
c00038cd:	89 c5                	mov    ebp,eax
c00038cf:	57                   	push   edi
c00038d0:	89 d7                	mov    edi,edx
c00038d2:	56                   	push   esi
c00038d3:	31 d2                	xor    edx,edx
c00038d5:	53                   	push   ebx
c00038d6:	83 ec 0c             	sub    esp,0xc
c00038d9:	8b 30                	mov    esi,DWORD PTR [eax]
c00038db:	e8 57 fc ff ff       	call   c0003537 <dir_sdi>
c00038e0:	85 c0                	test   eax,eax
c00038e2:	75 3b                	jne    c000391f <dir_alloc+0x53>
c00038e4:	31 db                	xor    ebx,ebx
c00038e6:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038e9:	89 f0                	mov    eax,esi
c00038eb:	e8 65 ec ff ff       	call   c0002555 <move_window>
c00038f0:	85 c0                	test   eax,eax
c00038f2:	75 2b                	jne    c000391f <dir_alloc+0x53>
c00038f4:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038f7:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038fa:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003900:	74 04                	je     c0003906 <dir_alloc+0x3a>
c0003902:	85 d2                	test   edx,edx
c0003904:	75 07                	jne    c000390d <dir_alloc+0x41>
c0003906:	43                   	inc    ebx
c0003907:	39 fb                	cmp    ebx,edi
c0003909:	75 04                	jne    c000390f <dir_alloc+0x43>
c000390b:	eb 1c                	jmp    c0003929 <dir_alloc+0x5d>
c000390d:	31 db                	xor    ebx,ebx
c000390f:	ba 01 00 00 00       	mov    edx,0x1
c0003914:	89 e8                	mov    eax,ebp
c0003916:	e8 ac fe ff ff       	call   c00037c7 <dir_next>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c7                	je     c00038e6 <dir_alloc+0x1a>
c000391f:	83 f8 04             	cmp    eax,0x4
c0003922:	75 05                	jne    c0003929 <dir_alloc+0x5d>
c0003924:	b8 07 00 00 00       	mov    eax,0x7
c0003929:	83 c4 0c             	add    esp,0xc
c000392c:	5b                   	pop    ebx
c000392d:	5e                   	pop    esi
c000392e:	5f                   	pop    edi
c000392f:	5d                   	pop    ebp
c0003930:	c3                   	ret    

c0003931 <dir_read>:
c0003931:	55                   	push   ebp
c0003932:	57                   	push   edi
c0003933:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003938:	56                   	push   esi
c0003939:	be 04 00 00 00       	mov    esi,0x4
c000393e:	53                   	push   ebx
c000393f:	89 c3                	mov    ebx,eax
c0003941:	83 ec 1c             	sub    esp,0x1c
c0003944:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003948:	8b 28                	mov    ebp,DWORD PTR [eax]
c000394a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000394f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003952:	85 d2                	test   edx,edx
c0003954:	0f 84 e3 00 00 00    	je     c0003a3d <dir_read+0x10c>
c000395a:	89 e8                	mov    eax,ebp
c000395c:	e8 f4 eb ff ff       	call   c0002555 <move_window>
c0003961:	85 c0                	test   eax,eax
c0003963:	89 c6                	mov    esi,eax
c0003965:	0f 85 dd 00 00 00    	jne    c0003a48 <dir_read+0x117>
c000396b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000396e:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003971:	88 04 24             	mov    BYTE PTR [esp],al
c0003974:	85 c0                	test   eax,eax
c0003976:	0f 84 c7 00 00 00    	je     c0003a43 <dir_read+0x112>
c000397c:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000397f:	83 e1 3f             	and    ecx,0x3f
c0003982:	3d e5 00 00 00       	cmp    eax,0xe5
c0003987:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000398a:	0f 84 93 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003990:	83 f8 2e             	cmp    eax,0x2e
c0003993:	0f 84 8a 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003999:	0f b6 c9             	movzx  ecx,cl
c000399c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00039a0:	83 e1 df             	and    ecx,0xffffffdf
c00039a3:	83 f9 08             	cmp    ecx,0x8
c00039a6:	0f 94 c1             	sete   cl
c00039a9:	0f b6 c9             	movzx  ecx,cl
c00039ac:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00039b0:	75 71                	jne    c0003a23 <dir_read+0xf2>
c00039b2:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00039b7:	75 4a                	jne    c0003a03 <dir_read+0xd2>
c00039b9:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00039bd:	74 16                	je     c00039d5 <dir_read+0xa4>
c00039bf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039c2:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00039c9:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00039d0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039d3:	eb 0e                	jmp    c00039e3 <dir_read+0xb2>
c00039d5:	89 f9                	mov    ecx,edi
c00039d7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039dc:	0f b6 c9             	movzx  ecx,cl
c00039df:	39 c1                	cmp    ecx,eax
c00039e1:	75 45                	jne    c0003a28 <dir_read+0xf7>
c00039e3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039e7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ec:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039ef:	75 37                	jne    c0003a28 <dir_read+0xf7>
c00039f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039f4:	e8 6a e8 ff ff       	call   c0002263 <pick_lfn>
c00039f9:	85 c0                	test   eax,eax
c00039fb:	74 2b                	je     c0003a28 <dir_read+0xf7>
c00039fd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003a00:	4f                   	dec    edi
c0003a01:	eb 25                	jmp    c0003a28 <dir_read+0xf7>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	84 c0                	test   al,al
c0003a07:	75 11                	jne    c0003a1a <dir_read+0xe9>
c0003a09:	89 d0                	mov    eax,edx
c0003a0b:	e8 30 ea ff ff       	call   c0002440 <sum_sfn>
c0003a10:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003a14:	75 04                	jne    c0003a1a <dir_read+0xe9>
c0003a16:	31 f6                	xor    esi,esi
c0003a18:	eb 35                	jmp    c0003a4f <dir_read+0x11e>
c0003a1a:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a21:	eb 2c                	jmp    c0003a4f <dir_read+0x11e>
c0003a23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a28:	31 d2                	xor    edx,edx
c0003a2a:	89 d8                	mov    eax,ebx
c0003a2c:	e8 96 fd ff ff       	call   c00037c7 <dir_next>
c0003a31:	85 c0                	test   eax,eax
c0003a33:	89 c6                	mov    esi,eax
c0003a35:	0f 84 14 ff ff ff    	je     c000394f <dir_read+0x1e>
c0003a3b:	eb 0b                	jmp    c0003a48 <dir_read+0x117>
c0003a3d:	85 f6                	test   esi,esi
c0003a3f:	74 d5                	je     c0003a16 <dir_read+0xe5>
c0003a41:	eb 05                	jmp    c0003a48 <dir_read+0x117>
c0003a43:	be 04 00 00 00       	mov    esi,0x4
c0003a48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a4f:	83 c4 1c             	add    esp,0x1c
c0003a52:	89 f0                	mov    eax,esi
c0003a54:	5b                   	pop    ebx
c0003a55:	5e                   	pop    esi
c0003a56:	5f                   	pop    edi
c0003a57:	5d                   	pop    ebp
c0003a58:	c3                   	ret    

c0003a59 <dir_remove>:
c0003a59:	57                   	push   edi
c0003a5a:	56                   	push   esi
c0003a5b:	53                   	push   ebx
c0003a5c:	89 c3                	mov    ebx,eax
c0003a5e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a61:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a63:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a66:	83 fa ff             	cmp    edx,0xffffffff
c0003a69:	74 09                	je     c0003a74 <dir_remove+0x1b>
c0003a6b:	e8 c7 fa ff ff       	call   c0003537 <dir_sdi>
c0003a70:	85 c0                	test   eax,eax
c0003a72:	75 34                	jne    c0003aa8 <dir_remove+0x4f>
c0003a74:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a77:	89 f0                	mov    eax,esi
c0003a79:	e8 d7 ea ff ff       	call   c0002555 <move_window>
c0003a7e:	85 c0                	test   eax,eax
c0003a80:	75 1c                	jne    c0003a9e <dir_remove+0x45>
c0003a82:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a8c:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a8f:	73 17                	jae    c0003aa8 <dir_remove+0x4f>
c0003a91:	31 d2                	xor    edx,edx
c0003a93:	89 d8                	mov    eax,ebx
c0003a95:	e8 2d fd ff ff       	call   c00037c7 <dir_next>
c0003a9a:	85 c0                	test   eax,eax
c0003a9c:	74 d6                	je     c0003a74 <dir_remove+0x1b>
c0003a9e:	83 f8 04             	cmp    eax,0x4
c0003aa1:	75 05                	jne    c0003aa8 <dir_remove+0x4f>
c0003aa3:	b8 02 00 00 00       	mov    eax,0x2
c0003aa8:	5b                   	pop    ebx
c0003aa9:	5e                   	pop    esi
c0003aaa:	5f                   	pop    edi
c0003aab:	c3                   	ret    

c0003aac <dir_find>:
c0003aac:	55                   	push   ebp
c0003aad:	31 d2                	xor    edx,edx
c0003aaf:	57                   	push   edi
c0003ab0:	56                   	push   esi
c0003ab1:	53                   	push   ebx
c0003ab2:	89 c3                	mov    ebx,eax
c0003ab4:	83 ec 1c             	sub    esp,0x1c
c0003ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003abd:	89 d8                	mov    eax,ebx
c0003abf:	e8 73 fa ff ff       	call   c0003537 <dir_sdi>
c0003ac4:	85 c0                	test   eax,eax
c0003ac6:	89 c6                	mov    esi,eax
c0003ac8:	0f 85 22 01 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003ace:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003ad5:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003ada:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003adf:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ae6:	e8 6a ea ff ff       	call   c0002555 <move_window>
c0003aeb:	85 c0                	test   eax,eax
c0003aed:	89 c6                	mov    esi,eax
c0003aef:	0f 85 fb 00 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003af5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003af8:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003afb:	85 d2                	test   edx,edx
c0003afd:	89 d1                	mov    ecx,edx
c0003aff:	0f 84 e6 00 00 00    	je     c0003beb <dir_find+0x13f>
c0003b05:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003b08:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003b0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b10:	83 e0 3f             	and    eax,0x3f
c0003b13:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003b19:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003b1c:	0f 84 a8 00 00 00    	je     c0003bca <dir_find+0x11e>
c0003b22:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003b27:	0f b6 c0             	movzx  eax,al
c0003b2a:	74 0b                	je     c0003b37 <dir_find+0x8b>
c0003b2c:	83 f8 0f             	cmp    eax,0xf
c0003b2f:	0f 85 95 00 00 00    	jne    c0003bca <dir_find+0x11e>
c0003b35:	eb 05                	jmp    c0003b3c <dir_find+0x90>
c0003b37:	83 f8 0f             	cmp    eax,0xf
c0003b3a:	75 62                	jne    c0003b9e <dir_find+0xf2>
c0003b3c:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b40:	0f 85 90 00 00 00    	jne    c0003bd6 <dir_find+0x12a>
c0003b46:	f6 c1 40             	test   cl,0x40
c0003b49:	74 15                	je     c0003b60 <dir_find+0xb4>
c0003b4b:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003b4e:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003b54:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003b58:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b5b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b5e:	eb 11                	jmp    c0003b71 <dir_find+0xc5>
c0003b60:	89 e8                	mov    eax,ebp
c0003b62:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b67:	0f b6 d0             	movzx  edx,al
c0003b6a:	0f b6 c1             	movzx  eax,cl
c0003b6d:	39 c2                	cmp    edx,eax
c0003b6f:	75 65                	jne    c0003bd6 <dir_find+0x12a>
c0003b71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b75:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b7a:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003b7d:	75 57                	jne    c0003bd6 <dir_find+0x12a>
c0003b7f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b87:	89 fa                	mov    edx,edi
c0003b89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b8c:	e8 2c f3 ff ff       	call   c0002ebd <cmp_lfn>
c0003b91:	85 c0                	test   eax,eax
c0003b93:	74 41                	je     c0003bd6 <dir_find+0x12a>
c0003b95:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b99:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003b9c:	eb 38                	jmp    c0003bd6 <dir_find+0x12a>
c0003b9e:	89 e8                	mov    eax,ebp
c0003ba0:	84 c0                	test   al,al
c0003ba2:	75 0d                	jne    c0003bb1 <dir_find+0x105>
c0003ba4:	89 f8                	mov    eax,edi
c0003ba6:	e8 95 e8 ff ff       	call   c0002440 <sum_sfn>
c0003bab:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003baf:	74 3f                	je     c0003bf0 <dir_find+0x144>
c0003bb1:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003bb5:	75 13                	jne    c0003bca <dir_find+0x11e>
c0003bb7:	8d 53 20             	lea    edx,[ebx+0x20]
c0003bba:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bbf:	89 f8                	mov    eax,edi
c0003bc1:	e8 75 e4 ff ff       	call   c000203b <mem_cmp>
c0003bc6:	85 c0                	test   eax,eax
c0003bc8:	74 26                	je     c0003bf0 <dir_find+0x144>
c0003bca:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003bd1:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003bd6:	31 d2                	xor    edx,edx
c0003bd8:	89 d8                	mov    eax,ebx
c0003bda:	e8 e8 fb ff ff       	call   c00037c7 <dir_next>
c0003bdf:	85 c0                	test   eax,eax
c0003be1:	89 c6                	mov    esi,eax
c0003be3:	0f 84 f6 fe ff ff    	je     c0003adf <dir_find+0x33>
c0003be9:	eb 05                	jmp    c0003bf0 <dir_find+0x144>
c0003beb:	be 04 00 00 00       	mov    esi,0x4
c0003bf0:	83 c4 1c             	add    esp,0x1c
c0003bf3:	89 f0                	mov    eax,esi
c0003bf5:	5b                   	pop    ebx
c0003bf6:	5e                   	pop    esi
c0003bf7:	5f                   	pop    edi
c0003bf8:	5d                   	pop    ebp
c0003bf9:	c3                   	ret    

c0003bfa <follow_path>:
c0003bfa:	56                   	push   esi
c0003bfb:	53                   	push   ebx
c0003bfc:	89 c3                	mov    ebx,eax
c0003bfe:	83 ec 14             	sub    esp,0x14
c0003c01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003c05:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c0b:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003c0e:	83 fa 2f             	cmp    edx,0x2f
c0003c11:	75 07                	jne    c0003c1a <follow_path+0x20>
c0003c13:	40                   	inc    eax
c0003c14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c18:	eb ed                	jmp    c0003c07 <follow_path+0xd>
c0003c1a:	83 fa 5c             	cmp    edx,0x5c
c0003c1d:	74 f4                	je     c0003c13 <follow_path+0x19>
c0003c1f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003c26:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003c29:	77 3e                	ja     c0003c69 <follow_path+0x6f>
c0003c2b:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003c2f:	31 d2                	xor    edx,edx
c0003c31:	89 d8                	mov    eax,ebx
c0003c33:	e8 ff f8 ff ff       	call   c0003537 <dir_sdi>
c0003c38:	eb 57                	jmp    c0003c91 <follow_path+0x97>
c0003c3a:	89 d8                	mov    eax,ebx
c0003c3c:	e8 6b fe ff ff       	call   c0003aac <dir_find>
c0003c41:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c44:	85 c0                	test   eax,eax
c0003c46:	75 32                	jne    c0003c7a <follow_path+0x80>
c0003c48:	80 e2 04             	and    dl,0x4
c0003c4b:	75 44                	jne    c0003c91 <follow_path+0x97>
c0003c4d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c51:	74 39                	je     c0003c8c <follow_path+0x92>
c0003c53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c56:	25 ff 01 00 00       	and    eax,0x1ff
c0003c5b:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c5f:	8a 06                	mov    al,BYTE PTR [esi]
c0003c61:	e8 7b f7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003c66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c69:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c6d:	89 d8                	mov    eax,ebx
c0003c6f:	e8 8e ef ff ff       	call   c0002c02 <create_name>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 c2                	je     c0003c3a <follow_path+0x40>
c0003c78:	eb 17                	jmp    c0003c91 <follow_path+0x97>
c0003c7a:	83 f8 04             	cmp    eax,0x4
c0003c7d:	75 12                	jne    c0003c91 <follow_path+0x97>
c0003c7f:	80 e2 04             	and    dl,0x4
c0003c82:	ba 05 00 00 00       	mov    edx,0x5
c0003c87:	0f 44 c2             	cmove  eax,edx
c0003c8a:	eb 05                	jmp    c0003c91 <follow_path+0x97>
c0003c8c:	b8 05 00 00 00       	mov    eax,0x5
c0003c91:	83 c4 14             	add    esp,0x14
c0003c94:	5b                   	pop    ebx
c0003c95:	5e                   	pop    esi
c0003c96:	c3                   	ret    

c0003c97 <dir_register>:
c0003c97:	55                   	push   ebp
c0003c98:	57                   	push   edi
c0003c99:	56                   	push   esi
c0003c9a:	be 06 00 00 00       	mov    esi,0x6
c0003c9f:	53                   	push   ebx
c0003ca0:	83 ec 2c             	sub    esp,0x2c
c0003ca3:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ca6:	80 e2 a0             	and    dl,0xa0
c0003ca9:	0f 85 66 01 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003caf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003cb7:	8b 38                	mov    edi,DWORD PTR [eax]
c0003cb9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003cbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cc0:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003cc5:	74 06                	je     c0003ccd <dir_register+0x36>
c0003cc7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003ccb:	eb ef                	jmp    c0003cbc <dir_register+0x25>
c0003ccd:	89 c3                	mov    ebx,eax
c0003ccf:	b9 0c 00 00 00       	mov    ecx,0xc
c0003cd4:	8d 40 20             	lea    eax,[eax+0x20]
c0003cd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003cdb:	89 c2                	mov    edx,eax
c0003cdd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ce1:	e8 36 e3 ff ff       	call   c000201c <mem_cpy>
c0003ce6:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ceb:	74 48                	je     c0003d35 <dir_register+0x9e>
c0003ced:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cf1:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf6:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cf9:	55                   	push   ebp
c0003cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cfe:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003d02:	e8 77 e6 ff ff       	call   c000237e <gen_numname>
c0003d07:	58                   	pop    eax
c0003d08:	89 d8                	mov    eax,ebx
c0003d0a:	e8 9d fd ff ff       	call   c0003aac <dir_find>
c0003d0f:	85 c0                	test   eax,eax
c0003d11:	89 c6                	mov    esi,eax
c0003d13:	75 10                	jne    c0003d25 <dir_register+0x8e>
c0003d15:	45                   	inc    ebp
c0003d16:	83 fd 64             	cmp    ebp,0x64
c0003d19:	75 db                	jne    c0003cf6 <dir_register+0x5f>
c0003d1b:	be 07 00 00 00       	mov    esi,0x7
c0003d20:	e9 f0 00 00 00       	jmp    c0003e15 <dir_register+0x17e>
c0003d25:	83 f8 04             	cmp    eax,0x4
c0003d28:	0f 85 e7 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d2e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003d32:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003d35:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d3a:	bd 01 00 00 00       	mov    ebp,0x1
c0003d3f:	74 13                	je     c0003d54 <dir_register+0xbd>
c0003d41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d45:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d4a:	31 d2                	xor    edx,edx
c0003d4c:	83 c0 0c             	add    eax,0xc
c0003d4f:	f7 f1                	div    ecx
c0003d51:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d54:	89 ea                	mov    edx,ebp
c0003d56:	89 d8                	mov    eax,ebx
c0003d58:	e8 6f fb ff ff       	call   c00038cc <dir_alloc>
c0003d5d:	85 c0                	test   eax,eax
c0003d5f:	89 c6                	mov    esi,eax
c0003d61:	0f 85 ae 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d67:	4d                   	dec    ebp
c0003d68:	74 6b                	je     c0003dd5 <dir_register+0x13e>
c0003d6a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d6d:	89 e8                	mov    eax,ebp
c0003d6f:	c1 e0 05             	shl    eax,0x5
c0003d72:	29 c2                	sub    edx,eax
c0003d74:	89 d8                	mov    eax,ebx
c0003d76:	e8 bc f7 ff ff       	call   c0003537 <dir_sdi>
c0003d7b:	85 c0                	test   eax,eax
c0003d7d:	89 c6                	mov    esi,eax
c0003d7f:	0f 85 90 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d89:	e8 b2 e6 ff ff       	call   c0002440 <sum_sfn>
c0003d8e:	0f b6 c0             	movzx  eax,al
c0003d91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d95:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d98:	89 f8                	mov    eax,edi
c0003d9a:	e8 b6 e7 ff ff       	call   c0002555 <move_window>
c0003d9f:	85 c0                	test   eax,eax
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	75 70                	jne    c0003e15 <dir_register+0x17e>
c0003da5:	83 ec 0c             	sub    esp,0xc
c0003da8:	89 e8                	mov    eax,ebp
c0003daa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dad:	0f b6 c8             	movzx  ecx,al
c0003db0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003db3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003db7:	e8 27 e5 ff ff       	call   c00022e3 <put_lfn>
c0003dbc:	31 d2                	xor    edx,edx
c0003dbe:	89 d8                	mov    eax,ebx
c0003dc0:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dc4:	e8 fe f9 ff ff       	call   c00037c7 <dir_next>
c0003dc9:	83 c4 10             	add    esp,0x10
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	89 c6                	mov    esi,eax
c0003dd0:	75 43                	jne    c0003e15 <dir_register+0x17e>
c0003dd2:	4d                   	dec    ebp
c0003dd3:	75 c0                	jne    c0003d95 <dir_register+0xfe>
c0003dd5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003dd8:	89 f8                	mov    eax,edi
c0003dda:	e8 76 e7 ff ff       	call   c0002555 <move_window>
c0003ddf:	85 c0                	test   eax,eax
c0003de1:	89 c6                	mov    esi,eax
c0003de3:	75 30                	jne    c0003e15 <dir_register+0x17e>
c0003de5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003de8:	b9 20 00 00 00       	mov    ecx,0x20
c0003ded:	31 d2                	xor    edx,edx
c0003def:	e8 3d e2 ff ff       	call   c0002031 <mem_set>
c0003df4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e00:	e8 17 e2 ff ff       	call   c000201c <mem_cpy>
c0003e05:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003e08:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003e0b:	83 e0 18             	and    eax,0x18
c0003e0e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003e11:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003e15:	83 c4 2c             	add    esp,0x2c
c0003e18:	89 f0                	mov    eax,esi
c0003e1a:	5b                   	pop    ebx
c0003e1b:	5e                   	pop    esi
c0003e1c:	5f                   	pop    edi
c0003e1d:	5d                   	pop    ebp
c0003e1e:	c3                   	ret    

c0003e1f <f_mount>:
c0003e1f:	53                   	push   ebx
c0003e20:	83 ec 18             	sub    esp,0x18
c0003e23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003e27:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003e2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003e2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003e33:	e8 28 e6 ff ff       	call   c0002460 <get_ldnumber>
c0003e38:	89 c2                	mov    edx,eax
c0003e3a:	b8 0b 00 00 00       	mov    eax,0xb
c0003e3f:	85 d2                	test   edx,edx
c0003e41:	78 39                	js     c0003e7c <f_mount+0x5d>
c0003e43:	8b 04 95 a0 74 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8b60]
c0003e4a:	85 c0                	test   eax,eax
c0003e4c:	74 03                	je     c0003e51 <f_mount+0x32>
c0003e4e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e55:	85 c0                	test   eax,eax
c0003e57:	74 03                	je     c0003e5c <f_mount+0x3d>
c0003e59:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e60:	89 04 95 a0 74 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8b60],eax
c0003e67:	31 c0                	xor    eax,eax
c0003e69:	84 db                	test   bl,bl
c0003e6b:	74 0f                	je     c0003e7c <f_mount+0x5d>
c0003e6d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e71:	31 c9                	xor    ecx,ecx
c0003e73:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e77:	e8 36 e8 ff ff       	call   c00026b2 <mount_volume>
c0003e7c:	83 c4 18             	add    esp,0x18
c0003e7f:	5b                   	pop    ebx
c0003e80:	c3                   	ret    

c0003e81 <f_open>:
c0003e81:	55                   	push   ebp
c0003e82:	b8 09 00 00 00       	mov    eax,0x9
c0003e87:	57                   	push   edi
c0003e88:	56                   	push   esi
c0003e89:	53                   	push   ebx
c0003e8a:	83 ec 5c             	sub    esp,0x5c
c0003e8d:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e95:	85 db                	test   ebx,ebx
c0003e97:	0f 84 9f 02 00 00    	je     c000413c <f_open+0x2bb>
c0003e9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ea1:	89 fd                	mov    ebp,edi
c0003ea3:	83 e5 3f             	and    ebp,0x3f
c0003ea6:	89 e8                	mov    eax,ebp
c0003ea8:	89 ee                	mov    esi,ebp
c0003eaa:	0f b6 c8             	movzx  ecx,al
c0003ead:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003eb1:	e8 fc e7 ff ff       	call   c00026b2 <mount_volume>
c0003eb6:	85 c0                	test   eax,eax
c0003eb8:	0f 85 78 02 00 00    	jne    c0004136 <f_open+0x2b5>
c0003ebe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec2:	83 ec 0c             	sub    esp,0xc
c0003ec5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ec9:	68 00 02 00 00       	push   0x200
c0003ece:	e8 61 1f 00 00       	call   c0005e34 <ff_memalloc>
c0003ed3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003ed7:	83 c4 10             	add    esp,0x10
c0003eda:	b8 11 00 00 00       	mov    eax,0x11
c0003edf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ee4:	0f 84 52 02 00 00    	je     c000413c <f_open+0x2bb>
c0003eea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ef2:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ef6:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ef9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003efd:	e8 f8 fc ff ff       	call   c0003bfa <follow_path>
c0003f02:	85 c0                	test   eax,eax
c0003f04:	75 0d                	jne    c0003f13 <f_open+0x92>
c0003f06:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003f0b:	ba 06 00 00 00       	mov    edx,0x6
c0003f10:	0f 45 c2             	cmovne eax,edx
c0003f13:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003f19:	0f 84 d5 00 00 00    	je     c0003ff4 <f_open+0x173>
c0003f1f:	85 c0                	test   eax,eax
c0003f21:	74 21                	je     c0003f44 <f_open+0xc3>
c0003f23:	83 f8 04             	cmp    eax,0x4
c0003f26:	0f 85 ef 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f30:	e8 62 fd ff ff       	call   c0003c97 <dir_register>
c0003f35:	85 c0                	test   eax,eax
c0003f37:	0f 85 de 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f3d:	83 cd 08             	or     ebp,0x8
c0003f40:	89 ee                	mov    esi,ebp
c0003f42:	eb 2c                	jmp    c0003f70 <f_open+0xef>
c0003f44:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f48:	b8 07 00 00 00       	mov    eax,0x7
c0003f4d:	80 e2 11             	and    dl,0x11
c0003f50:	0f 85 c5 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f56:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f5c:	b8 08 00 00 00       	mov    eax,0x8
c0003f61:	0f 85 b4 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f67:	83 e7 08             	and    edi,0x8
c0003f6a:	0f 84 b1 00 00 00    	je     c0004021 <f_open+0x1a0>
c0003f70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f74:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f78:	8a 00                	mov    al,BYTE PTR [eax]
c0003f7a:	89 ea                	mov    edx,ebp
c0003f7c:	e8 60 f4 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003f81:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f86:	89 c7                	mov    edi,eax
c0003f88:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f8b:	e8 89 e0 ff ff       	call   c0002019 <st_dword>
c0003f90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f94:	31 c9                	xor    ecx,ecx
c0003f96:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003fa2:	e8 63 f4 ff ff       	call   c000340a <st_clust.isra.1>
c0003fa7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003fab:	31 d2                	xor    edx,edx
c0003fad:	83 c0 1c             	add    eax,0x1c
c0003fb0:	e8 64 e0 ff ff       	call   c0002019 <st_dword>
c0003fb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fb9:	85 ff                	test   edi,edi
c0003fbb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003fbf:	74 60                	je     c0004021 <f_open+0x1a0>
c0003fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fc5:	31 c9                	xor    ecx,ecx
c0003fc7:	89 fa                	mov    edx,edi
c0003fc9:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003fcc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003fd0:	e8 64 f7 ff ff       	call   c0003739 <remove_chain>
c0003fd5:	85 c0                	test   eax,eax
c0003fd7:	0f 85 3e 01 00 00    	jne    c000411b <f_open+0x29a>
c0003fdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fe1:	89 ea                	mov    edx,ebp
c0003fe3:	4f                   	dec    edi
c0003fe4:	e8 6c e5 ff ff       	call   c0002555 <move_window>
c0003fe9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fed:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ff0:	85 c0                	test   eax,eax
c0003ff2:	eb 27                	jmp    c000401b <f_open+0x19a>
c0003ff4:	85 c0                	test   eax,eax
c0003ff6:	0f 85 1f 01 00 00    	jne    c000411b <f_open+0x29a>
c0003ffc:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004000:	b8 04 00 00 00       	mov    eax,0x4
c0004005:	f6 c2 10             	test   dl,0x10
c0004008:	0f 85 0d 01 00 00    	jne    c000411b <f_open+0x29a>
c000400e:	83 e7 02             	and    edi,0x2
c0004011:	74 0e                	je     c0004021 <f_open+0x1a0>
c0004013:	b8 07 00 00 00       	mov    eax,0x7
c0004018:	80 e2 01             	and    dl,0x1
c000401b:	0f 85 fa 00 00 00    	jne    c000411b <f_open+0x29a>
c0004021:	f7 c6 08 00 00 00    	test   esi,0x8
c0004027:	74 03                	je     c000402c <f_open+0x1ab>
c0004029:	83 ce 40             	or     esi,0x40
c000402c:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004030:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004034:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0004037:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000403a:	89 fa                	mov    edx,edi
c000403c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000403f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004042:	e8 9a f3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004047:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000404a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000404d:	e8 ab df ff ff       	call   c0001ffd <ld_dword>
c0004052:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004055:	31 d2                	xor    edx,edx
c0004057:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004059:	b9 00 02 00 00       	mov    ecx,0x200
c000405e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004061:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004065:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004069:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004070:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004077:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000407b:	89 f0                	mov    eax,esi
c000407d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004080:	89 f8                	mov    eax,edi
c0004082:	e8 aa df ff ff       	call   c0002031 <mem_set>
c0004087:	83 e6 20             	and    esi,0x20
c000408a:	75 07                	jne    c0004093 <f_open+0x212>
c000408c:	31 c0                	xor    eax,eax
c000408e:	e9 88 00 00 00       	jmp    c000411b <f_open+0x29a>
c0004093:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0004096:	85 f6                	test   esi,esi
c0004098:	74 f2                	je     c000408c <f_open+0x20b>
c000409a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000409d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040a1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00040a4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00040a8:	31 c0                	xor    eax,eax
c00040aa:	c1 e5 09             	shl    ebp,0x9
c00040ad:	85 c0                	test   eax,eax
c00040af:	75 23                	jne    c00040d4 <f_open+0x253>
c00040b1:	39 ee                	cmp    esi,ebp
c00040b3:	76 1f                	jbe    c00040d4 <f_open+0x253>
c00040b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040b7:	e8 76 f3 ff ff       	call   c0003432 <get_fat.isra.2>
c00040bc:	89 c2                	mov    edx,eax
c00040be:	b8 02 00 00 00       	mov    eax,0x2
c00040c3:	83 fa 01             	cmp    edx,0x1
c00040c6:	76 08                	jbe    c00040d0 <f_open+0x24f>
c00040c8:	31 c0                	xor    eax,eax
c00040ca:	83 fa ff             	cmp    edx,0xffffffff
c00040cd:	0f 94 c0             	sete   al
c00040d0:	29 ee                	sub    esi,ebp
c00040d2:	eb d9                	jmp    c00040ad <f_open+0x22c>
c00040d4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00040d7:	85 c0                	test   eax,eax
c00040d9:	75 40                	jne    c000411b <f_open+0x29a>
c00040db:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00040e1:	74 a9                	je     c000408c <f_open+0x20b>
c00040e3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00040e7:	89 e8                	mov    eax,ebp
c00040e9:	e8 58 e1 ff ff       	call   c0002246 <clst2sect>
c00040ee:	89 c2                	mov    edx,eax
c00040f0:	b8 02 00 00 00       	mov    eax,0x2
c00040f5:	85 d2                	test   edx,edx
c00040f7:	74 22                	je     c000411b <f_open+0x29a>
c00040f9:	c1 ee 09             	shr    esi,0x9
c00040fc:	8d 04 16             	lea    eax,[esi+edx*1]
c00040ff:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004102:	6a 01                	push   0x1
c0004104:	50                   	push   eax
c0004105:	57                   	push   edi
c0004106:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000410a:	50                   	push   eax
c000410b:	e8 95 de ff ff       	call   c0001fa5 <disk_read>
c0004110:	83 c4 10             	add    esp,0x10
c0004113:	85 c0                	test   eax,eax
c0004115:	0f 95 c0             	setne  al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000411f:	83 ec 0c             	sub    esp,0xc
c0004122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0004126:	e8 21 1d 00 00       	call   c0005e4c <ff_memfree>
c000412b:	83 c4 10             	add    esp,0x10
c000412e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004132:	85 c0                	test   eax,eax
c0004134:	74 06                	je     c000413c <f_open+0x2bb>
c0004136:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000413c:	83 c4 5c             	add    esp,0x5c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_read>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c000415b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004161:	89 d8                	mov    eax,ebx
c0004163:	e8 44 e3 ff ff       	call   c00024ac <validate>
c0004168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000416c:	85 c0                	test   eax,eax
c000416e:	0f 85 a5 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004174:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0004178:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000417c:	85 c0                	test   eax,eax
c000417e:	0f 85 95 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004184:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004188:	0f 84 83 01 00 00    	je     c0004311 <f_read+0x1cd>
c000418e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004191:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004194:	39 f8                	cmp    eax,edi
c0004196:	0f 46 f8             	cmovbe edi,eax
c0004199:	85 ff                	test   edi,edi
c000419b:	0f 84 78 01 00 00    	je     c0004319 <f_read+0x1d5>
c00041a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a4:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a9:	0f 85 2b 01 00 00    	jne    c00042da <f_read+0x196>
c00041af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b3:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b7:	89 c2                	mov    edx,eax
c00041b9:	c1 ea 09             	shr    edx,0x9
c00041bc:	4d                   	dec    ebp
c00041bd:	21 d5                	and    ebp,edx
c00041bf:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c3:	75 42                	jne    c0004207 <f_read+0xc3>
c00041c5:	85 c0                	test   eax,eax
c00041c7:	75 05                	jne    c00041ce <f_read+0x8a>
c00041c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041cc:	eb 0a                	jmp    c00041d8 <f_read+0x94>
c00041ce:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041d3:	e8 5a f2 ff ff       	call   c0003432 <get_fat.isra.2>
c00041d8:	83 f8 01             	cmp    eax,0x1
c00041db:	77 11                	ja     c00041ee <f_read+0xaa>
c00041dd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041e1:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c00041e9:	e9 2b 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c00041ee:	83 f8 ff             	cmp    eax,0xffffffff
c00041f1:	75 11                	jne    c0004204 <f_read+0xc0>
c00041f3:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041f7:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00041ff:	e9 15 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c0004204:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004207:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000420b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000420e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004212:	89 c8                	mov    eax,ecx
c0004214:	e8 2d e0 ff ff       	call   c0002246 <clst2sect>
c0004219:	85 c0                	test   eax,eax
c000421b:	74 c0                	je     c00041dd <f_read+0x99>
c000421d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004221:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004227:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000422a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000422e:	76 58                	jbe    c0004288 <f_read+0x144>
c0004230:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004234:	89 fe                	mov    esi,edi
c0004236:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000423a:	c1 ee 09             	shr    esi,0x9
c000423d:	01 f2                	add    edx,esi
c000423f:	39 c2                	cmp    edx,eax
c0004241:	76 06                	jbe    c0004249 <f_read+0x105>
c0004243:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004247:	89 c6                	mov    esi,eax
c0004249:	56                   	push   esi
c000424a:	55                   	push   ebp
c000424b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000424f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004253:	50                   	push   eax
c0004254:	e8 4c dd ff ff       	call   c0001fa5 <disk_read>
c0004259:	83 c4 10             	add    esp,0x10
c000425c:	85 c0                	test   eax,eax
c000425e:	75 93                	jne    c00041f3 <f_read+0xaf>
c0004260:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004264:	74 1d                	je     c0004283 <f_read+0x13f>
c0004266:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004269:	29 e8                	sub    eax,ebp
c000426b:	39 f0                	cmp    eax,esi
c000426d:	73 14                	jae    c0004283 <f_read+0x13f>
c000426f:	c1 e0 09             	shl    eax,0x9
c0004272:	b9 00 02 00 00       	mov    ecx,0x200
c0004277:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000427b:	8d 53 28             	lea    edx,[ebx+0x28]
c000427e:	e8 99 dd ff ff       	call   c000201c <mem_cpy>
c0004283:	c1 e6 09             	shl    esi,0x9
c0004286:	eb 75                	jmp    c00042fd <f_read+0x1b9>
c0004288:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000428b:	39 e8                	cmp    eax,ebp
c000428d:	74 48                	je     c00042d7 <f_read+0x193>
c000428f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004293:	8d 73 28             	lea    esi,[ebx+0x28]
c0004296:	74 22                	je     c00042ba <f_read+0x176>
c0004298:	6a 01                	push   0x1
c000429a:	50                   	push   eax
c000429b:	56                   	push   esi
c000429c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00042a0:	50                   	push   eax
c00042a1:	e8 15 dd ff ff       	call   c0001fbb <disk_write>
c00042a6:	83 c4 10             	add    esp,0x10
c00042a9:	85 c0                	test   eax,eax
c00042ab:	0f 85 42 ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042b1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042b4:	83 e0 7f             	and    eax,0x7f
c00042b7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ba:	6a 01                	push   0x1
c00042bc:	55                   	push   ebp
c00042bd:	56                   	push   esi
c00042be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042c6:	50                   	push   eax
c00042c7:	e8 d9 dc ff ff       	call   c0001fa5 <disk_read>
c00042cc:	83 c4 10             	add    esp,0x10
c00042cf:	85 c0                	test   eax,eax
c00042d1:	0f 85 1c ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042d7:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00042da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042dd:	be 00 02 00 00       	mov    esi,0x200
c00042e2:	25 ff 01 00 00       	and    eax,0x1ff
c00042e7:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042eb:	29 c6                	sub    esi,eax
c00042ed:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042f1:	39 f7                	cmp    edi,esi
c00042f3:	0f 46 f7             	cmovbe esi,edi
c00042f6:	89 f1                	mov    ecx,esi
c00042f8:	e8 1f dd ff ff       	call   c000201c <mem_cpy>
c00042fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004301:	29 f7                	sub    edi,esi
c0004303:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004307:	01 30                	add    DWORD PTR [eax],esi
c0004309:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000430c:	e9 88 fe ff ff       	jmp    c0004199 <f_read+0x55>
c0004311:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000431d:	83 c4 2c             	add    esp,0x2c
c0004320:	5b                   	pop    ebx
c0004321:	5e                   	pop    esi
c0004322:	5f                   	pop    edi
c0004323:	5d                   	pop    ebp
c0004324:	c3                   	ret    

c0004325 <f_write>:
c0004325:	55                   	push   ebp
c0004326:	57                   	push   edi
c0004327:	56                   	push   esi
c0004328:	53                   	push   ebx
c0004329:	83 ec 2c             	sub    esp,0x2c
c000432c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004330:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004334:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004338:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000433e:	89 d8                	mov    eax,ebx
c0004340:	e8 67 e1 ff ff       	call   c00024ac <validate>
c0004345:	85 c0                	test   eax,eax
c0004347:	89 c7                	mov    edi,eax
c0004349:	0f 85 13 02 00 00    	jne    c0004562 <f_write+0x23d>
c000434f:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004353:	85 ff                	test   edi,edi
c0004355:	0f 85 07 02 00 00    	jne    c0004562 <f_write+0x23d>
c000435b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435f:	0f 84 f8 01 00 00    	je     c000455d <f_write+0x238>
c0004365:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004368:	89 c1                	mov    ecx,eax
c000436a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000436e:	0f 83 ed 00 00 00    	jae    c0004461 <f_write+0x13c>
c0004374:	f7 d0                	not    eax
c0004376:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000437a:	e9 e2 00 00 00       	jmp    c0004461 <f_write+0x13c>
c000437f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004382:	a9 ff 01 00 00       	test   eax,0x1ff
c0004387:	0f 85 9b 01 00 00    	jne    c0004528 <f_write+0x203>
c000438d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004391:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0004395:	89 c2                	mov    edx,eax
c0004397:	c1 ea 09             	shr    edx,0x9
c000439a:	4d                   	dec    ebp
c000439b:	21 d5                	and    ebp,edx
c000439d:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00043a1:	0f 84 c7 00 00 00    	je     c000446e <f_write+0x149>
c00043a7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043ab:	0f 85 23 01 00 00    	jne    c00044d4 <f_write+0x1af>
c00043b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00043b5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043bc:	89 c8                	mov    eax,ecx
c00043be:	e8 83 de ff ff       	call   c0002246 <clst2sect>
c00043c3:	85 c0                	test   eax,eax
c00043c5:	0f 84 d3 00 00 00    	je     c000449e <f_write+0x179>
c00043cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00043cf:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043d7:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00043da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043de:	0f 86 1c 01 00 00    	jbe    c0004500 <f_write+0x1db>
c00043e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043ec:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043f0:	c1 ee 09             	shr    esi,0x9
c00043f3:	01 f2                	add    edx,esi
c00043f5:	39 c2                	cmp    edx,eax
c00043f7:	76 06                	jbe    c00043ff <f_write+0xda>
c00043f9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043fd:	89 c6                	mov    esi,eax
c00043ff:	56                   	push   esi
c0004400:	55                   	push   ebp
c0004401:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004405:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004409:	50                   	push   eax
c000440a:	e8 ac db ff ff       	call   c0001fbb <disk_write>
c000440f:	83 c4 10             	add    esp,0x10
c0004412:	85 c0                	test   eax,eax
c0004414:	0f 85 97 00 00 00    	jne    c00044b1 <f_write+0x18c>
c000441a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000441d:	29 ea                	sub    edx,ebp
c000441f:	39 f2                	cmp    edx,esi
c0004421:	73 1d                	jae    c0004440 <f_write+0x11b>
c0004423:	c1 e2 09             	shl    edx,0x9
c0004426:	b9 00 02 00 00       	mov    ecx,0x200
c000442b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000442f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004432:	e8 e5 db ff ff       	call   c000201c <mem_cpy>
c0004437:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000443a:	83 e0 7f             	and    eax,0x7f
c000443d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004440:	c1 e6 09             	shl    esi,0x9
c0004443:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004447:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000444b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000444f:	01 30                	add    DWORD PTR [eax],esi
c0004451:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004454:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004457:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000445a:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000445e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004461:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004466:	0f 85 13 ff ff ff    	jne    c000437f <f_write+0x5a>
c000446c:	eb 1d                	jmp    c000448b <f_write+0x166>
c000446e:	85 c0                	test   eax,eax
c0004470:	75 0b                	jne    c000447d <f_write+0x158>
c0004472:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004475:	31 d2                	xor    edx,edx
c0004477:	85 c0                	test   eax,eax
c0004479:	75 1e                	jne    c0004499 <f_write+0x174>
c000447b:	eb 03                	jmp    c0004480 <f_write+0x15b>
c000447d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004480:	89 d8                	mov    eax,ebx
c0004482:	e8 78 f1 ff ff       	call   c00035ff <create_chain>
c0004487:	85 c0                	test   eax,eax
c0004489:	75 0e                	jne    c0004499 <f_write+0x174>
c000448b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000448e:	83 c8 40             	or     eax,0x40
c0004491:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004494:	e9 c9 00 00 00       	jmp    c0004562 <f_write+0x23d>
c0004499:	83 f8 01             	cmp    eax,0x1
c000449c:	75 0e                	jne    c00044ac <f_write+0x187>
c000449e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044a2:	bf 02 00 00 00       	mov    edi,0x2
c00044a7:	e9 b6 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044ac:	83 f8 ff             	cmp    eax,0xffffffff
c00044af:	75 0e                	jne    c00044bf <f_write+0x19a>
c00044b1:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00044b5:	bf 01 00 00 00       	mov    edi,0x1
c00044ba:	e9 a3 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044bf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044c6:	0f 85 db fe ff ff    	jne    c00043a7 <f_write+0x82>
c00044cc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044cf:	e9 d3 fe ff ff       	jmp    c00043a7 <f_write+0x82>
c00044d4:	6a 01                	push   0x1
c00044d6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044d9:	8d 43 28             	lea    eax,[ebx+0x28]
c00044dc:	50                   	push   eax
c00044dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044e5:	50                   	push   eax
c00044e6:	e8 d0 da ff ff       	call   c0001fbb <disk_write>
c00044eb:	83 c4 10             	add    esp,0x10
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 bf                	jne    c00044b1 <f_write+0x18c>
c00044f2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044f5:	83 e0 7f             	and    eax,0x7f
c00044f8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044fb:	e9 b1 fe ff ff       	jmp    c00043b1 <f_write+0x8c>
c0004500:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004503:	74 20                	je     c0004525 <f_write+0x200>
c0004505:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004508:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000450b:	76 18                	jbe    c0004525 <f_write+0x200>
c000450d:	6a 01                	push   0x1
c000450f:	55                   	push   ebp
c0004510:	8d 43 28             	lea    eax,[ebx+0x28]
c0004513:	50                   	push   eax
c0004514:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004518:	50                   	push   eax
c0004519:	e8 87 da ff ff       	call   c0001fa5 <disk_read>
c000451e:	83 c4 10             	add    esp,0x10
c0004521:	85 c0                	test   eax,eax
c0004523:	75 8c                	jne    c00044b1 <f_write+0x18c>
c0004525:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004528:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000452b:	be 00 02 00 00       	mov    esi,0x200
c0004530:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004534:	25 ff 01 00 00       	and    eax,0x1ff
c0004539:	29 c6                	sub    esi,eax
c000453b:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000453f:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004543:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004548:	89 f1                	mov    ecx,esi
c000454a:	e8 cd da ff ff       	call   c000201c <mem_cpy>
c000454f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004552:	83 c8 80             	or     eax,0xffffff80
c0004555:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004558:	e9 e6 fe ff ff       	jmp    c0004443 <f_write+0x11e>
c000455d:	bf 07 00 00 00       	mov    edi,0x7
c0004562:	83 c4 2c             	add    esp,0x2c
c0004565:	89 f8                	mov    eax,edi
c0004567:	5b                   	pop    ebx
c0004568:	5e                   	pop    esi
c0004569:	5f                   	pop    edi
c000456a:	5d                   	pop    ebp
c000456b:	c3                   	ret    

c000456c <f_sync>:
c000456c:	56                   	push   esi
c000456d:	53                   	push   ebx
c000456e:	83 ec 14             	sub    esp,0x14
c0004571:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004575:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004579:	89 d8                	mov    eax,ebx
c000457b:	e8 2c df ff ff       	call   c00024ac <validate>
c0004580:	85 c0                	test   eax,eax
c0004582:	0f 85 a3 00 00 00    	jne    c000462b <f_sync+0xbf>
c0004588:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000458b:	f6 c2 40             	test   dl,0x40
c000458e:	0f 84 97 00 00 00    	je     c000462b <f_sync+0xbf>
c0004594:	80 e2 80             	and    dl,0x80
c0004597:	74 2e                	je     c00045c7 <f_sync+0x5b>
c0004599:	6a 01                	push   0x1
c000459b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000459e:	8d 43 28             	lea    eax,[ebx+0x28]
c00045a1:	50                   	push   eax
c00045a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045aa:	50                   	push   eax
c00045ab:	e8 0b da ff ff       	call   c0001fbb <disk_write>
c00045b0:	83 c4 10             	add    esp,0x10
c00045b3:	89 c2                	mov    edx,eax
c00045b5:	b8 01 00 00 00       	mov    eax,0x1
c00045ba:	85 d2                	test   edx,edx
c00045bc:	75 6d                	jne    c000462b <f_sync+0xbf>
c00045be:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045c1:	83 e0 7f             	and    eax,0x7f
c00045c4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045c7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045ce:	e8 82 df ff ff       	call   c0002555 <move_window>
c00045d3:	85 c0                	test   eax,eax
c00045d5:	75 54                	jne    c000462b <f_sync+0xbf>
c00045d7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045da:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045dd:	89 f2                	mov    edx,esi
c00045df:	83 c8 20             	or     eax,0x20
c00045e2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045e5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045ea:	e8 1b ee ff ff       	call   c000340a <st_clust.isra.1>
c00045ef:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045f2:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045f5:	e8 1f da ff ff       	call   c0002019 <st_dword>
c00045fa:	8d 46 16             	lea    eax,[esi+0x16]
c00045fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004602:	e8 12 da ff ff       	call   c0002019 <st_dword>
c0004607:	8d 46 12             	lea    eax,[esi+0x12]
c000460a:	31 d2                	xor    edx,edx
c000460c:	e8 04 da ff ff       	call   c0002015 <st_word>
c0004611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004615:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461d:	e8 68 e9 ff ff       	call   c0002f8a <sync_fs>
c0004622:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004625:	83 e2 bf             	and    edx,0xffffffbf
c0004628:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000462b:	83 c4 14             	add    esp,0x14
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <f_close>:
c0004631:	53                   	push   ebx
c0004632:	83 ec 24             	sub    esp,0x24
c0004635:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004639:	53                   	push   ebx
c000463a:	e8 2d ff ff ff       	call   c000456c <f_sync>
c000463f:	83 c4 10             	add    esp,0x10
c0004642:	85 c0                	test   eax,eax
c0004644:	75 15                	jne    c000465b <f_close+0x2a>
c0004646:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000464a:	89 d8                	mov    eax,ebx
c000464c:	e8 5b de ff ff       	call   c00024ac <validate>
c0004651:	85 c0                	test   eax,eax
c0004653:	75 06                	jne    c000465b <f_close+0x2a>
c0004655:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000465b:	83 c4 18             	add    esp,0x18
c000465e:	5b                   	pop    ebx
c000465f:	c3                   	ret    

c0004660 <f_lseek>:
c0004660:	55                   	push   ebp
c0004661:	57                   	push   edi
c0004662:	56                   	push   esi
c0004663:	53                   	push   ebx
c0004664:	83 ec 2c             	sub    esp,0x2c
c0004667:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000466b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000466f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004673:	89 d8                	mov    eax,ebx
c0004675:	e8 32 de ff ff       	call   c00024ac <validate>
c000467a:	85 c0                	test   eax,eax
c000467c:	89 c5                	mov    ebp,eax
c000467e:	0f 85 82 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004684:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004688:	85 ed                	test   ebp,ebp
c000468a:	0f 85 76 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004690:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004693:	39 f0                	cmp    eax,esi
c0004695:	73 07                	jae    c000469e <f_lseek+0x3e>
c0004697:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000469b:	0f 44 f0             	cmove  esi,eax
c000469e:	85 f6                	test   esi,esi
c00046a0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00046a3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00046aa:	75 07                	jne    c00046b3 <f_lseek+0x53>
c00046ac:	31 f6                	xor    esi,esi
c00046ae:	e9 e2 00 00 00       	jmp    c0004795 <f_lseek+0x135>
c00046b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b7:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00046bb:	c1 e7 09             	shl    edi,0x9
c00046be:	85 c9                	test   ecx,ecx
c00046c0:	74 28                	je     c00046ea <f_lseek+0x8a>
c00046c2:	31 d2                	xor    edx,edx
c00046c4:	49                   	dec    ecx
c00046c5:	8d 46 ff             	lea    eax,[esi-0x1]
c00046c8:	f7 f7                	div    edi
c00046ca:	31 d2                	xor    edx,edx
c00046cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046d0:	89 c8                	mov    eax,ecx
c00046d2:	f7 f7                	div    edi
c00046d4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046d8:	72 10                	jb     c00046ea <f_lseek+0x8a>
c00046da:	89 f8                	mov    eax,edi
c00046dc:	f7 d8                	neg    eax
c00046de:	21 c1                	and    ecx,eax
c00046e0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046e3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046e6:	29 ce                	sub    esi,ecx
c00046e8:	eb 3c                	jmp    c0004726 <f_lseek+0xc6>
c00046ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046ed:	85 c0                	test   eax,eax
c00046ef:	75 32                	jne    c0004723 <f_lseek+0xc3>
c00046f1:	31 d2                	xor    edx,edx
c00046f3:	89 d8                	mov    eax,ebx
c00046f5:	e8 05 ef ff ff       	call   c00035ff <create_chain>
c00046fa:	83 f8 01             	cmp    eax,0x1
c00046fd:	75 0e                	jne    c000470d <f_lseek+0xad>
c00046ff:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004703:	bd 02 00 00 00       	mov    ebp,0x2
c0004708:	e9 f9 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c000470d:	83 f8 ff             	cmp    eax,0xffffffff
c0004710:	75 0e                	jne    c0004720 <f_lseek+0xc0>
c0004712:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004716:	bd 01 00 00 00       	mov    ebp,0x1
c000471b:	e9 e6 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c0004720:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004723:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004726:	85 c0                	test   eax,eax
c0004728:	74 82                	je     c00046ac <f_lseek+0x4c>
c000472a:	39 fe                	cmp    esi,edi
c000472c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000472f:	76 3d                	jbe    c000476e <f_lseek+0x10e>
c0004731:	01 fa                	add    edx,edi
c0004733:	29 fe                	sub    esi,edi
c0004735:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004739:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000473c:	89 c2                	mov    edx,eax
c000473e:	74 0d                	je     c000474d <f_lseek+0xed>
c0004740:	89 d8                	mov    eax,ebx
c0004742:	e8 b8 ee ff ff       	call   c00035ff <create_chain>
c0004747:	85 c0                	test   eax,eax
c0004749:	75 09                	jne    c0004754 <f_lseek+0xf4>
c000474b:	eb 1f                	jmp    c000476c <f_lseek+0x10c>
c000474d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000474f:	e8 de ec ff ff       	call   c0003432 <get_fat.isra.2>
c0004754:	83 f8 ff             	cmp    eax,0xffffffff
c0004757:	74 b9                	je     c0004712 <f_lseek+0xb2>
c0004759:	83 f8 01             	cmp    eax,0x1
c000475c:	76 a1                	jbe    c00046ff <f_lseek+0x9f>
c000475e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004762:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004765:	76 98                	jbe    c00046ff <f_lseek+0x9f>
c0004767:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000476a:	eb be                	jmp    c000472a <f_lseek+0xca>
c000476c:	31 f6                	xor    esi,esi
c000476e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004771:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004777:	0f 84 2f ff ff ff    	je     c00046ac <f_lseek+0x4c>
c000477d:	89 c2                	mov    edx,eax
c000477f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004783:	e8 be da ff ff       	call   c0002246 <clst2sect>
c0004788:	85 c0                	test   eax,eax
c000478a:	0f 84 6f ff ff ff    	je     c00046ff <f_lseek+0x9f>
c0004790:	c1 ee 09             	shr    esi,0x9
c0004793:	01 c6                	add    esi,eax
c0004795:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004798:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000479b:	76 0c                	jbe    c00047a9 <f_lseek+0x149>
c000479d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00047a0:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00047a3:	83 ca 40             	or     edx,0x40
c00047a6:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00047a9:	a9 ff 01 00 00       	test   eax,0x1ff
c00047ae:	74 56                	je     c0004806 <f_lseek+0x1a6>
c00047b0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00047b3:	39 f0                	cmp    eax,esi
c00047b5:	74 4f                	je     c0004806 <f_lseek+0x1a6>
c00047b7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047bb:	8d 7b 28             	lea    edi,[ebx+0x28]
c00047be:	74 26                	je     c00047e6 <f_lseek+0x186>
c00047c0:	6a 01                	push   0x1
c00047c2:	50                   	push   eax
c00047c3:	57                   	push   edi
c00047c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047c8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047cc:	50                   	push   eax
c00047cd:	e8 e9 d7 ff ff       	call   c0001fbb <disk_write>
c00047d2:	83 c4 10             	add    esp,0x10
c00047d5:	85 c0                	test   eax,eax
c00047d7:	0f 85 35 ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c00047dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047e0:	83 e0 7f             	and    eax,0x7f
c00047e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047e6:	6a 01                	push   0x1
c00047e8:	56                   	push   esi
c00047e9:	57                   	push   edi
c00047ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047ee:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047f2:	50                   	push   eax
c00047f3:	e8 ad d7 ff ff       	call   c0001fa5 <disk_read>
c00047f8:	83 c4 10             	add    esp,0x10
c00047fb:	85 c0                	test   eax,eax
c00047fd:	0f 85 0f ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c0004803:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004806:	83 c4 2c             	add    esp,0x2c
c0004809:	89 e8                	mov    eax,ebp
c000480b:	5b                   	pop    ebx
c000480c:	5e                   	pop    esi
c000480d:	5f                   	pop    edi
c000480e:	5d                   	pop    ebp
c000480f:	c3                   	ret    

c0004810 <f_opendir>:
c0004810:	56                   	push   esi
c0004811:	b8 09 00 00 00       	mov    eax,0x9
c0004816:	53                   	push   ebx
c0004817:	83 ec 24             	sub    esp,0x24
c000481a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000481e:	85 db                	test   ebx,ebx
c0004820:	0f 84 af 00 00 00    	je     c00048d5 <f_opendir+0xc5>
c0004826:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000482a:	31 c9                	xor    ecx,ecx
c000482c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004830:	e8 7d de ff ff       	call   c00026b2 <mount_volume>
c0004835:	85 c0                	test   eax,eax
c0004837:	0f 85 92 00 00 00    	jne    c00048cf <f_opendir+0xbf>
c000483d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004841:	83 ec 0c             	sub    esp,0xc
c0004844:	89 03                	mov    DWORD PTR [ebx],eax
c0004846:	68 00 02 00 00       	push   0x200
c000484b:	e8 e4 15 00 00       	call   c0005e34 <ff_memalloc>
c0004850:	83 c4 10             	add    esp,0x10
c0004853:	89 c6                	mov    esi,eax
c0004855:	b8 11 00 00 00       	mov    eax,0x11
c000485a:	85 f6                	test   esi,esi
c000485c:	74 77                	je     c00048d5 <f_opendir+0xc5>
c000485e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004862:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004866:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004869:	89 d8                	mov    eax,ebx
c000486b:	e8 8a f3 ff ff       	call   c0003bfa <follow_path>
c0004870:	85 c0                	test   eax,eax
c0004872:	75 37                	jne    c00048ab <f_opendir+0x9b>
c0004874:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004878:	75 1c                	jne    c0004896 <f_opendir+0x86>
c000487a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000487e:	b8 05 00 00 00       	mov    eax,0x5
c0004883:	74 26                	je     c00048ab <f_opendir+0x9b>
c0004885:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004889:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000488c:	8a 00                	mov    al,BYTE PTR [eax]
c000488e:	e8 4e eb ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004893:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004896:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000489a:	31 d2                	xor    edx,edx
c000489c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00048a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00048a4:	89 d8                	mov    eax,ebx
c00048a6:	e8 8c ec ff ff       	call   c0003537 <dir_sdi>
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	83 ec 0c             	sub    esp,0xc
c00048b2:	56                   	push   esi
c00048b3:	e8 94 15 00 00       	call   c0005e4c <ff_memfree>
c00048b8:	83 c4 10             	add    esp,0x10
c00048bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048bf:	83 f8 04             	cmp    eax,0x4
c00048c2:	74 06                	je     c00048ca <f_opendir+0xba>
c00048c4:	85 c0                	test   eax,eax
c00048c6:	74 0d                	je     c00048d5 <f_opendir+0xc5>
c00048c8:	eb 05                	jmp    c00048cf <f_opendir+0xbf>
c00048ca:	b8 05 00 00 00       	mov    eax,0x5
c00048cf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048d5:	83 c4 24             	add    esp,0x24
c00048d8:	5b                   	pop    ebx
c00048d9:	5e                   	pop    esi
c00048da:	c3                   	ret    

c00048db <f_closedir>:
c00048db:	53                   	push   ebx
c00048dc:	83 ec 18             	sub    esp,0x18
c00048df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048e3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048e7:	89 d8                	mov    eax,ebx
c00048e9:	e8 be db ff ff       	call   c00024ac <validate>
c00048ee:	85 c0                	test   eax,eax
c00048f0:	75 06                	jne    c00048f8 <f_closedir+0x1d>
c00048f2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048f8:	83 c4 18             	add    esp,0x18
c00048fb:	5b                   	pop    ebx
c00048fc:	c3                   	ret    

c00048fd <f_readdir>:
c00048fd:	57                   	push   edi
c00048fe:	56                   	push   esi
c00048ff:	53                   	push   ebx
c0004900:	83 ec 20             	sub    esp,0x20
c0004903:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004907:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000490b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000490f:	89 d8                	mov    eax,ebx
c0004911:	e8 96 db ff ff       	call   c00024ac <validate>
c0004916:	85 c0                	test   eax,eax
c0004918:	75 6e                	jne    c0004988 <f_readdir+0x8b>
c000491a:	85 ff                	test   edi,edi
c000491c:	75 0b                	jne    c0004929 <f_readdir+0x2c>
c000491e:	31 d2                	xor    edx,edx
c0004920:	89 d8                	mov    eax,ebx
c0004922:	e8 10 ec ff ff       	call   c0003537 <dir_sdi>
c0004927:	eb 5f                	jmp    c0004988 <f_readdir+0x8b>
c0004929:	83 ec 0c             	sub    esp,0xc
c000492c:	68 00 02 00 00       	push   0x200
c0004931:	e8 fe 14 00 00       	call   c0005e34 <ff_memalloc>
c0004936:	83 c4 10             	add    esp,0x10
c0004939:	89 c6                	mov    esi,eax
c000493b:	b8 11 00 00 00       	mov    eax,0x11
c0004940:	85 f6                	test   esi,esi
c0004942:	74 44                	je     c0004988 <f_readdir+0x8b>
c0004944:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004948:	31 d2                	xor    edx,edx
c000494a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000494d:	89 d8                	mov    eax,ebx
c000494f:	e8 dd ef ff ff       	call   c0003931 <dir_read>
c0004954:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004959:	75 19                	jne    c0004974 <f_readdir+0x77>
c000495b:	89 fa                	mov    edx,edi
c000495d:	89 d8                	mov    eax,ebx
c000495f:	e8 7c e8 ff ff       	call   c00031e0 <get_fileinfo>
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 d8                	mov    eax,ebx
c0004968:	e8 5a ee ff ff       	call   c00037c7 <dir_next>
c000496d:	83 f8 04             	cmp    eax,0x4
c0004970:	75 02                	jne    c0004974 <f_readdir+0x77>
c0004972:	31 c0                	xor    eax,eax
c0004974:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004978:	83 ec 0c             	sub    esp,0xc
c000497b:	56                   	push   esi
c000497c:	e8 cb 14 00 00       	call   c0005e4c <ff_memfree>
c0004981:	83 c4 10             	add    esp,0x10
c0004984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004988:	83 c4 20             	add    esp,0x20
c000498b:	5b                   	pop    ebx
c000498c:	5e                   	pop    esi
c000498d:	5f                   	pop    edi
c000498e:	c3                   	ret    

c000498f <f_stat>:
c000498f:	57                   	push   edi
c0004990:	31 c9                	xor    ecx,ecx
c0004992:	56                   	push   esi
c0004993:	53                   	push   ebx
c0004994:	83 ec 30             	sub    esp,0x30
c0004997:	8d 44 24 40          	lea    eax,[esp+0x40]
c000499b:	89 e2                	mov    edx,esp
c000499d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00049a1:	e8 0c dd ff ff       	call   c00026b2 <mount_volume>
c00049a6:	85 c0                	test   eax,eax
c00049a8:	89 c3                	mov    ebx,eax
c00049aa:	75 59                	jne    c0004a05 <f_stat+0x76>
c00049ac:	83 ec 0c             	sub    esp,0xc
c00049af:	bb 11 00 00 00       	mov    ebx,0x11
c00049b4:	68 00 02 00 00       	push   0x200
c00049b9:	e8 76 14 00 00       	call   c0005e34 <ff_memalloc>
c00049be:	83 c4 10             	add    esp,0x10
c00049c1:	85 c0                	test   eax,eax
c00049c3:	89 c6                	mov    esi,eax
c00049c5:	74 3e                	je     c0004a05 <f_stat+0x76>
c00049c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ca:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049ce:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049d1:	89 e0                	mov    eax,esp
c00049d3:	e8 22 f2 ff ff       	call   c0003bfa <follow_path>
c00049d8:	85 c0                	test   eax,eax
c00049da:	89 c3                	mov    ebx,eax
c00049dc:	75 1b                	jne    c00049f9 <f_stat+0x6a>
c00049de:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049e3:	75 0f                	jne    c00049f4 <f_stat+0x65>
c00049e5:	85 ff                	test   edi,edi
c00049e7:	74 10                	je     c00049f9 <f_stat+0x6a>
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	89 e0                	mov    eax,esp
c00049ed:	e8 ee e7 ff ff       	call   c00031e0 <get_fileinfo>
c00049f2:	eb 05                	jmp    c00049f9 <f_stat+0x6a>
c00049f4:	bb 06 00 00 00       	mov    ebx,0x6
c00049f9:	83 ec 0c             	sub    esp,0xc
c00049fc:	56                   	push   esi
c00049fd:	e8 4a 14 00 00       	call   c0005e4c <ff_memfree>
c0004a02:	83 c4 10             	add    esp,0x10
c0004a05:	83 c4 30             	add    esp,0x30
c0004a08:	89 d8                	mov    eax,ebx
c0004a0a:	5b                   	pop    ebx
c0004a0b:	5e                   	pop    esi
c0004a0c:	5f                   	pop    edi
c0004a0d:	c3                   	ret    

c0004a0e <f_getfree>:
c0004a0e:	55                   	push   ebp
c0004a0f:	31 c9                	xor    ecx,ecx
c0004a11:	57                   	push   edi
c0004a12:	56                   	push   esi
c0004a13:	53                   	push   ebx
c0004a14:	83 ec 2c             	sub    esp,0x2c
c0004a17:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a1b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a1f:	e8 8e dc ff ff       	call   c00026b2 <mount_volume>
c0004a24:	85 c0                	test   eax,eax
c0004a26:	89 c6                	mov    esi,eax
c0004a28:	0f 85 df 00 00 00    	jne    c0004b0d <f_getfree+0xff>
c0004a2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004a32:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a36:	89 18                	mov    DWORD PTR [eax],ebx
c0004a38:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004a3b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a3e:	8d 57 fe             	lea    edx,[edi-0x2]
c0004a41:	39 d0                	cmp    eax,edx
c0004a43:	77 0b                	ja     c0004a50 <f_getfree+0x42>
c0004a45:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a49:	89 01                	mov    DWORD PTR [ecx],eax
c0004a4b:	e9 bd 00 00 00       	jmp    c0004b0d <f_getfree+0xff>
c0004a50:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004a53:	75 29                	jne    c0004a7e <f_getfree+0x70>
c0004a55:	bf 02 00 00 00       	mov    edi,0x2
c0004a5a:	31 ed                	xor    ebp,ebp
c0004a5c:	89 fa                	mov    edx,edi
c0004a5e:	89 d8                	mov    eax,ebx
c0004a60:	e8 cd e9 ff ff       	call   c0003432 <get_fat.isra.2>
c0004a65:	83 f8 ff             	cmp    eax,0xffffffff
c0004a68:	74 7d                	je     c0004ae7 <f_getfree+0xd9>
c0004a6a:	83 f8 01             	cmp    eax,0x1
c0004a6d:	74 7f                	je     c0004aee <f_getfree+0xe0>
c0004a6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a73:	83 d5 00             	adc    ebp,0x0
c0004a76:	47                   	inc    edi
c0004a77:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004a7a:	77 e0                	ja     c0004a5c <f_getfree+0x4e>
c0004a7c:	eb 79                	jmp    c0004af7 <f_getfree+0xe9>
c0004a7e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004a81:	31 ed                	xor    ebp,ebp
c0004a83:	31 db                	xor    ebx,ebx
c0004a85:	85 db                	test   ebx,ebx
c0004a87:	75 18                	jne    c0004aa1 <f_getfree+0x93>
c0004a89:	8d 42 01             	lea    eax,[edx+0x1]
c0004a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a94:	e8 bc da ff ff       	call   c0002555 <move_window>
c0004a99:	85 c0                	test   eax,eax
c0004a9b:	75 58                	jne    c0004af5 <f_getfree+0xe7>
c0004a9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004aa5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004aa9:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004aac:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004ab0:	75 13                	jne    c0004ac5 <f_getfree+0xb7>
c0004ab2:	e8 39 d5 ff ff       	call   c0001ff0 <ld_word>
c0004ab7:	0f b7 c0             	movzx  eax,ax
c0004aba:	83 f8 01             	cmp    eax,0x1
c0004abd:	83 d5 00             	adc    ebp,0x0
c0004ac0:	83 c3 02             	add    ebx,0x2
c0004ac3:	eb 13                	jmp    c0004ad8 <f_getfree+0xca>
c0004ac5:	e8 33 d5 ff ff       	call   c0001ffd <ld_dword>
c0004aca:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004acf:	83 f8 01             	cmp    eax,0x1
c0004ad2:	83 d5 00             	adc    ebp,0x0
c0004ad5:	83 c3 04             	add    ebx,0x4
c0004ad8:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004ade:	4f                   	dec    edi
c0004adf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ae3:	75 a0                	jne    c0004a85 <f_getfree+0x77>
c0004ae5:	eb 10                	jmp    c0004af7 <f_getfree+0xe9>
c0004ae7:	be 01 00 00 00       	mov    esi,0x1
c0004aec:	eb 09                	jmp    c0004af7 <f_getfree+0xe9>
c0004aee:	be 02 00 00 00       	mov    esi,0x2
c0004af3:	eb 02                	jmp    c0004af7 <f_getfree+0xe9>
c0004af5:	89 c6                	mov    esi,eax
c0004af7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004afb:	89 28                	mov    DWORD PTR [eax],ebp
c0004afd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b01:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004b04:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004b07:	83 ca 01             	or     edx,0x1
c0004b0a:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004b0d:	83 c4 2c             	add    esp,0x2c
c0004b10:	89 f0                	mov    eax,esi
c0004b12:	5b                   	pop    ebx
c0004b13:	5e                   	pop    esi
c0004b14:	5f                   	pop    edi
c0004b15:	5d                   	pop    ebp
c0004b16:	c3                   	ret    

c0004b17 <f_truncate>:
c0004b17:	56                   	push   esi
c0004b18:	53                   	push   ebx
c0004b19:	83 ec 14             	sub    esp,0x14
c0004b1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b20:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b24:	89 d8                	mov    eax,ebx
c0004b26:	e8 81 d9 ff ff       	call   c00024ac <validate>
c0004b2b:	85 c0                	test   eax,eax
c0004b2d:	89 c6                	mov    esi,eax
c0004b2f:	0f 85 c4 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b35:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b39:	85 f6                	test   esi,esi
c0004b3b:	0f 85 b8 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b41:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b45:	0f 84 a9 00 00 00    	je     c0004bf4 <f_truncate+0xdd>
c0004b4b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b4e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b51:	0f 83 a2 00 00 00    	jae    c0004bf9 <f_truncate+0xe2>
c0004b57:	85 c0                	test   eax,eax
c0004b59:	75 15                	jne    c0004b70 <f_truncate+0x59>
c0004b5b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b5e:	31 c9                	xor    ecx,ecx
c0004b60:	89 d8                	mov    eax,ebx
c0004b62:	e8 d2 eb ff ff       	call   c0003739 <remove_chain>
c0004b67:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b6e:	eb 35                	jmp    c0004ba5 <f_truncate+0x8e>
c0004b70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b75:	e8 b8 e8 ff ff       	call   c0003432 <get_fat.isra.2>
c0004b7a:	89 c2                	mov    edx,eax
c0004b7c:	b8 01 00 00 00       	mov    eax,0x1
c0004b81:	83 fa ff             	cmp    edx,0xffffffff
c0004b84:	74 1f                	je     c0004ba5 <f_truncate+0x8e>
c0004b86:	83 fa 01             	cmp    edx,0x1
c0004b89:	b8 02 00 00 00       	mov    eax,0x2
c0004b8e:	74 15                	je     c0004ba5 <f_truncate+0x8e>
c0004b90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b94:	31 c0                	xor    eax,eax
c0004b96:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b99:	76 0a                	jbe    c0004ba5 <f_truncate+0x8e>
c0004b9b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b9e:	89 d8                	mov    eax,ebx
c0004ba0:	e8 94 eb ff ff       	call   c0003739 <remove_chain>
c0004ba5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004ba8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004bab:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004bae:	83 ca 40             	or     edx,0x40
c0004bb1:	85 c0                	test   eax,eax
c0004bb3:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004bb6:	75 35                	jne    c0004bed <f_truncate+0xd6>
c0004bb8:	80 e2 80             	and    dl,0x80
c0004bbb:	74 3c                	je     c0004bf9 <f_truncate+0xe2>
c0004bbd:	6a 01                	push   0x1
c0004bbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004bc2:	8d 43 28             	lea    eax,[ebx+0x28]
c0004bc5:	50                   	push   eax
c0004bc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bce:	50                   	push   eax
c0004bcf:	e8 e7 d3 ff ff       	call   c0001fbb <disk_write>
c0004bd4:	83 c4 10             	add    esp,0x10
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	75 0d                	jne    c0004be8 <f_truncate+0xd1>
c0004bdb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bde:	31 f6                	xor    esi,esi
c0004be0:	83 e0 7f             	and    eax,0x7f
c0004be3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004be6:	eb 11                	jmp    c0004bf9 <f_truncate+0xe2>
c0004be8:	b8 01 00 00 00       	mov    eax,0x1
c0004bed:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	eb 05                	jmp    c0004bf9 <f_truncate+0xe2>
c0004bf4:	be 07 00 00 00       	mov    esi,0x7
c0004bf9:	83 c4 14             	add    esp,0x14
c0004bfc:	89 f0                	mov    eax,esi
c0004bfe:	5b                   	pop    ebx
c0004bff:	5e                   	pop    esi
c0004c00:	c3                   	ret    

c0004c01 <f_unlink>:
c0004c01:	55                   	push   ebp
c0004c02:	b9 02 00 00 00       	mov    ecx,0x2
c0004c07:	57                   	push   edi
c0004c08:	56                   	push   esi
c0004c09:	53                   	push   ebx
c0004c0a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004c10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c14:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004c1b:	e8 92 da ff ff       	call   c00026b2 <mount_volume>
c0004c20:	85 c0                	test   eax,eax
c0004c22:	0f 85 ee 00 00 00    	jne    c0004d16 <f_unlink+0x115>
c0004c28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c2c:	83 ec 0c             	sub    esp,0xc
c0004c2f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c33:	68 00 02 00 00       	push   0x200
c0004c38:	e8 f7 11 00 00       	call   c0005e34 <ff_memalloc>
c0004c3d:	83 c4 10             	add    esp,0x10
c0004c40:	89 c3                	mov    ebx,eax
c0004c42:	b8 11 00 00 00       	mov    eax,0x11
c0004c47:	85 db                	test   ebx,ebx
c0004c49:	0f 84 c7 00 00 00    	je     c0004d16 <f_unlink+0x115>
c0004c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c53:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c5a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c5d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c61:	e8 94 ef ff ff       	call   c0003bfa <follow_path>
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 94 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c6e:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c73:	b8 06 00 00 00       	mov    eax,0x6
c0004c78:	0f 85 84 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c7e:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c83:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c89:	74 07                	je     c0004c92 <f_unlink+0x91>
c0004c8b:	b8 07 00 00 00       	mov    eax,0x7
c0004c90:	eb 70                	jmp    c0004d02 <f_unlink+0x101>
c0004c92:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c96:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c9a:	8a 07                	mov    al,BYTE PTR [edi]
c0004c9c:	e8 40 e7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004ca1:	83 e5 10             	and    ebp,0x10
c0004ca4:	89 c6                	mov    esi,eax
c0004ca6:	75 20                	jne    c0004cc8 <f_unlink+0xc7>
c0004ca8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cac:	e8 a8 ed ff ff       	call   c0003a59 <dir_remove>
c0004cb1:	85 c0                	test   eax,eax
c0004cb3:	75 40                	jne    c0004cf5 <f_unlink+0xf4>
c0004cb5:	85 f6                	test   esi,esi
c0004cb7:	74 3c                	je     c0004cf5 <f_unlink+0xf4>
c0004cb9:	31 c9                	xor    ecx,ecx
c0004cbb:	89 f2                	mov    edx,esi
c0004cbd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc1:	e8 73 ea ff ff       	call   c0003739 <remove_chain>
c0004cc6:	eb 2d                	jmp    c0004cf5 <f_unlink+0xf4>
c0004cc8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ccc:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cd0:	31 d2                	xor    edx,edx
c0004cd2:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004cd6:	e8 5c e8 ff ff       	call   c0003537 <dir_sdi>
c0004cdb:	85 c0                	test   eax,eax
c0004cdd:	75 23                	jne    c0004d02 <f_unlink+0x101>
c0004cdf:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ce3:	31 d2                	xor    edx,edx
c0004ce5:	e8 47 ec ff ff       	call   c0003931 <dir_read>
c0004cea:	85 c0                	test   eax,eax
c0004cec:	74 9d                	je     c0004c8b <f_unlink+0x8a>
c0004cee:	83 f8 04             	cmp    eax,0x4
c0004cf1:	75 0f                	jne    c0004d02 <f_unlink+0x101>
c0004cf3:	eb b3                	jmp    c0004ca8 <f_unlink+0xa7>
c0004cf5:	85 c0                	test   eax,eax
c0004cf7:	75 09                	jne    c0004d02 <f_unlink+0x101>
c0004cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfd:	e8 88 e2 ff ff       	call   c0002f8a <sync_fs>
c0004d02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d06:	83 ec 0c             	sub    esp,0xc
c0004d09:	53                   	push   ebx
c0004d0a:	e8 3d 11 00 00       	call   c0005e4c <ff_memfree>
c0004d0f:	83 c4 10             	add    esp,0x10
c0004d12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d16:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	5f                   	pop    edi
c0004d1f:	5d                   	pop    ebp
c0004d20:	c3                   	ret    

c0004d21 <f_mkdir>:
c0004d21:	57                   	push   edi
c0004d22:	b9 02 00 00 00       	mov    ecx,0x2
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	83 ec 50             	sub    esp,0x50
c0004d2c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d30:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d34:	e8 79 d9 ff ff       	call   c00026b2 <mount_volume>
c0004d39:	85 c0                	test   eax,eax
c0004d3b:	89 c3                	mov    ebx,eax
c0004d3d:	0f 85 70 01 00 00    	jne    c0004eb3 <f_mkdir+0x192>
c0004d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d47:	83 ec 0c             	sub    esp,0xc
c0004d4a:	bb 11 00 00 00       	mov    ebx,0x11
c0004d4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d53:	68 00 02 00 00       	push   0x200
c0004d58:	e8 d7 10 00 00       	call   c0005e34 <ff_memalloc>
c0004d5d:	83 c4 10             	add    esp,0x10
c0004d60:	85 c0                	test   eax,eax
c0004d62:	89 c7                	mov    edi,eax
c0004d64:	0f 84 49 01 00 00    	je     c0004eb3 <f_mkdir+0x192>
c0004d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d72:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d75:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d79:	e8 7c ee ff ff       	call   c0003bfa <follow_path>
c0004d7e:	85 c0                	test   eax,eax
c0004d80:	89 c3                	mov    ebx,eax
c0004d82:	74 3e                	je     c0004dc2 <f_mkdir+0xa1>
c0004d84:	83 f8 04             	cmp    eax,0x4
c0004d87:	75 3e                	jne    c0004dc7 <f_mkdir+0xa6>
c0004d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8d:	31 d2                	xor    edx,edx
c0004d8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d93:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d97:	e8 63 e8 ff ff       	call   c00035ff <create_chain>
c0004d9c:	85 c0                	test   eax,eax
c0004d9e:	89 c6                	mov    esi,eax
c0004da0:	74 0c                	je     c0004dae <f_mkdir+0x8d>
c0004da2:	83 f8 01             	cmp    eax,0x1
c0004da5:	bb 02 00 00 00       	mov    ebx,0x2
c0004daa:	74 07                	je     c0004db3 <f_mkdir+0x92>
c0004dac:	eb 2a                	jmp    c0004dd8 <f_mkdir+0xb7>
c0004dae:	bb 07 00 00 00       	mov    ebx,0x7
c0004db3:	31 c9                	xor    ecx,ecx
c0004db5:	89 f2                	mov    edx,esi
c0004db7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004dbb:	e8 79 e9 ff ff       	call   c0003739 <remove_chain>
c0004dc0:	eb 05                	jmp    c0004dc7 <f_mkdir+0xa6>
c0004dc2:	bb 08 00 00 00       	mov    ebx,0x8
c0004dc7:	83 ec 0c             	sub    esp,0xc
c0004dca:	57                   	push   edi
c0004dcb:	e8 7c 10 00 00       	call   c0005e4c <ff_memfree>
c0004dd0:	83 c4 10             	add    esp,0x10
c0004dd3:	e9 db 00 00 00       	jmp    c0004eb3 <f_mkdir+0x192>
c0004dd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004ddb:	bb 01 00 00 00       	mov    ebx,0x1
c0004de0:	74 d1                	je     c0004db3 <f_mkdir+0x92>
c0004de2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de6:	89 f2                	mov    edx,esi
c0004de8:	e8 19 dd ff ff       	call   c0002b06 <dir_clear>
c0004ded:	85 c0                	test   eax,eax
c0004def:	89 c3                	mov    ebx,eax
c0004df1:	75 c0                	jne    c0004db3 <f_mkdir+0x92>
c0004df3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004dfc:	ba 20 00 00 00       	mov    edx,0x20
c0004e01:	83 c0 34             	add    eax,0x34
c0004e04:	e8 28 d2 ff ff       	call   c0002031 <mem_set>
c0004e09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e12:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004e16:	83 c0 4a             	add    eax,0x4a
c0004e19:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004e1d:	e8 f7 d1 ff ff       	call   c0002019 <st_dword>
c0004e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e26:	89 f1                	mov    ecx,esi
c0004e28:	8d 50 34             	lea    edx,[eax+0x34]
c0004e2b:	e8 da e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e34:	b9 20 00 00 00       	mov    ecx,0x20
c0004e39:	8d 50 34             	lea    edx,[eax+0x34]
c0004e3c:	83 c0 54             	add    eax,0x54
c0004e3f:	e8 d8 d1 ff ff       	call   c000201c <mem_cpy>
c0004e44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e48:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e4c:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e50:	8d 50 54             	lea    edx,[eax+0x54]
c0004e53:	e8 b2 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e60:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e64:	e8 2e ee ff ff       	call   c0003c97 <dir_register>
c0004e69:	85 c0                	test   eax,eax
c0004e6b:	89 c3                	mov    ebx,eax
c0004e6d:	0f 85 40 ff ff ff    	jne    c0004db3 <f_mkdir+0x92>
c0004e73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e77:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e7c:	83 c0 16             	add    eax,0x16
c0004e7f:	e8 95 d1 ff ff       	call   c0002019 <st_dword>
c0004e84:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e88:	89 f1                	mov    ecx,esi
c0004e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8e:	e8 77 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e97:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e9f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ea3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ea7:	e8 de e0 ff ff       	call   c0002f8a <sync_fs>
c0004eac:	89 c3                	mov    ebx,eax
c0004eae:	e9 14 ff ff ff       	jmp    c0004dc7 <f_mkdir+0xa6>
c0004eb3:	83 c4 50             	add    esp,0x50
c0004eb6:	89 d8                	mov    eax,ebx
c0004eb8:	5b                   	pop    ebx
c0004eb9:	5e                   	pop    esi
c0004eba:	5f                   	pop    edi
c0004ebb:	c3                   	ret    

c0004ebc <f_rename>:
c0004ebc:	57                   	push   edi
c0004ebd:	56                   	push   esi
c0004ebe:	53                   	push   ebx
c0004ebf:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ec5:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ecc:	e8 8f d5 ff ff       	call   c0002460 <get_ldnumber>
c0004ed1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ed5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eda:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ee1:	e8 cc d7 ff ff       	call   c00026b2 <mount_volume>
c0004ee6:	85 c0                	test   eax,eax
c0004ee8:	0f 85 7c 01 00 00    	jne    c000506a <f_rename+0x1ae>
c0004eee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef2:	83 ec 0c             	sub    esp,0xc
c0004ef5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ef9:	68 00 02 00 00       	push   0x200
c0004efe:	e8 31 0f 00 00       	call   c0005e34 <ff_memalloc>
c0004f03:	83 c4 10             	add    esp,0x10
c0004f06:	89 c6                	mov    esi,eax
c0004f08:	b8 11 00 00 00       	mov    eax,0x11
c0004f0d:	85 f6                	test   esi,esi
c0004f0f:	0f 84 55 01 00 00    	je     c000506a <f_rename+0x1ae>
c0004f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f19:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f20:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f23:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f27:	e8 ce ec ff ff       	call   c0003bfa <follow_path>
c0004f2c:	85 c0                	test   eax,eax
c0004f2e:	0f 85 22 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f34:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f38:	b8 06 00 00 00       	mov    eax,0x6
c0004f3d:	80 e2 a0             	and    dl,0xa0
c0004f40:	0f 85 10 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f4e:	b9 20 00 00 00       	mov    ecx,0x20
c0004f53:	e8 c4 d0 ff ff       	call   c000201c <mem_cpy>
c0004f58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f5c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f65:	e8 b2 d0 ff ff       	call   c000201c <mem_cpy>
c0004f6a:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f71:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f75:	e8 80 ec ff ff       	call   c0003bfa <follow_path>
c0004f7a:	85 c0                	test   eax,eax
c0004f7c:	75 20                	jne    c0004f9e <f_rename+0xe2>
c0004f7e:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f82:	b8 08 00 00 00       	mov    eax,0x8
c0004f87:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f8b:	0f 85 c5 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f91:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f95:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f9c:	eb 03                	jmp    c0004fa1 <f_rename+0xe5>
c0004f9e:	83 f8 04             	cmp    eax,0x4
c0004fa1:	0f 85 af 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fa7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fab:	e8 e7 ec ff ff       	call   c0003c97 <dir_register>
c0004fb0:	85 c0                	test   eax,eax
c0004fb2:	0f 85 9e 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fb8:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fbf:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004fc3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fc8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fcb:	e8 4c d0 ff ff       	call   c000201c <mem_cpy>
c0004fd0:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fd4:	a8 10                	test   al,0x10
c0004fd6:	75 03                	jne    c0004fdb <f_rename+0x11f>
c0004fd8:	83 c8 20             	or     eax,0x20
c0004fdb:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fe2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fe6:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fea:	74 54                	je     c0005040 <f_rename+0x184>
c0004fec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004ff0:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004ff4:	74 4a                	je     c0005040 <f_rename+0x184>
c0004ff6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ffa:	89 da                	mov    edx,ebx
c0004ffc:	8a 07                	mov    al,BYTE PTR [edi]
c0004ffe:	e8 de e3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0005003:	89 c2                	mov    edx,eax
c0005005:	89 f8                	mov    eax,edi
c0005007:	e8 3a d2 ff ff       	call   c0002246 <clst2sect>
c000500c:	89 c2                	mov    edx,eax
c000500e:	b8 02 00 00 00       	mov    eax,0x2
c0005013:	85 d2                	test   edx,edx
c0005015:	74 3f                	je     c0005056 <f_rename+0x19a>
c0005017:	89 f8                	mov    eax,edi
c0005019:	e8 37 d5 ff ff       	call   c0002555 <move_window>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 34                	jne    c0005056 <f_rename+0x19a>
c0005022:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005026:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000502a:	75 14                	jne    c0005040 <f_rename+0x184>
c000502c:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005030:	8d 50 54             	lea    edx,[eax+0x54]
c0005033:	e8 d2 e3 ff ff       	call   c000340a <st_clust.isra.1>
c0005038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000503c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005040:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005044:	e8 10 ea ff ff       	call   c0003a59 <dir_remove>
c0005049:	85 c0                	test   eax,eax
c000504b:	75 09                	jne    c0005056 <f_rename+0x19a>
c000504d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005051:	e8 34 df ff ff       	call   c0002f8a <sync_fs>
c0005056:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000505a:	83 ec 0c             	sub    esp,0xc
c000505d:	56                   	push   esi
c000505e:	e8 e9 0d 00 00       	call   c0005e4c <ff_memfree>
c0005063:	83 c4 10             	add    esp,0x10
c0005066:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000506a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005070:	5b                   	pop    ebx
c0005071:	5e                   	pop    esi
c0005072:	5f                   	pop    edi
c0005073:	c3                   	ret    

c0005074 <f_chmod>:
c0005074:	57                   	push   edi
c0005075:	b9 02 00 00 00       	mov    ecx,0x2
c000507a:	56                   	push   esi
c000507b:	53                   	push   ebx
c000507c:	83 ec 50             	sub    esp,0x50
c000507f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005083:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005087:	8d 44 24 60          	lea    eax,[esp+0x60]
c000508b:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000508f:	e8 1e d6 ff ff       	call   c00026b2 <mount_volume>
c0005094:	85 c0                	test   eax,eax
c0005096:	0f 85 81 00 00 00    	jne    c000511d <f_chmod+0xa9>
c000509c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a0:	83 ec 0c             	sub    esp,0xc
c00050a3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00050a7:	68 00 02 00 00       	push   0x200
c00050ac:	e8 83 0d 00 00       	call   c0005e34 <ff_memalloc>
c00050b1:	83 c4 10             	add    esp,0x10
c00050b4:	89 c6                	mov    esi,eax
c00050b6:	b8 11 00 00 00       	mov    eax,0x11
c00050bb:	85 f6                	test   esi,esi
c00050bd:	74 5e                	je     c000511d <f_chmod+0xa9>
c00050bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050c3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ca:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050ce:	e8 27 eb ff ff       	call   c0003bfa <follow_path>
c00050d3:	85 c0                	test   eax,eax
c00050d5:	75 32                	jne    c0005109 <f_chmod+0x95>
c00050d7:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050db:	b8 06 00 00 00       	mov    eax,0x6
c00050e0:	80 e2 a0             	and    dl,0xa0
c00050e3:	75 24                	jne    c0005109 <f_chmod+0x95>
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050ec:	31 d7                	xor    edi,edx
c00050ee:	21 fb                	and    ebx,edi
c00050f0:	83 e3 27             	and    ebx,0x27
c00050f3:	31 d3                	xor    ebx,edx
c00050f5:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050fc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005104:	e8 81 de ff ff       	call   c0002f8a <sync_fs>
c0005109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000510d:	83 ec 0c             	sub    esp,0xc
c0005110:	56                   	push   esi
c0005111:	e8 36 0d 00 00       	call   c0005e4c <ff_memfree>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000511d:	83 c4 50             	add    esp,0x50
c0005120:	5b                   	pop    ebx
c0005121:	5e                   	pop    esi
c0005122:	5f                   	pop    edi
c0005123:	c3                   	ret    

c0005124 <f_utime>:
c0005124:	56                   	push   esi
c0005125:	b9 02 00 00 00       	mov    ecx,0x2
c000512a:	53                   	push   ebx
c000512b:	83 ec 54             	sub    esp,0x54
c000512e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005132:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005136:	8d 44 24 60          	lea    eax,[esp+0x60]
c000513a:	e8 73 d5 ff ff       	call   c00026b2 <mount_volume>
c000513f:	85 c0                	test   eax,eax
c0005141:	0f 85 87 00 00 00    	jne    c00051ce <f_utime+0xaa>
c0005147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000514b:	83 ec 0c             	sub    esp,0xc
c000514e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005152:	68 00 02 00 00       	push   0x200
c0005157:	e8 d8 0c 00 00       	call   c0005e34 <ff_memalloc>
c000515c:	83 c4 10             	add    esp,0x10
c000515f:	89 c3                	mov    ebx,eax
c0005161:	b8 11 00 00 00       	mov    eax,0x11
c0005166:	85 db                	test   ebx,ebx
c0005168:	74 64                	je     c00051ce <f_utime+0xaa>
c000516a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005172:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005175:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005179:	e8 7c ea ff ff       	call   c0003bfa <follow_path>
c000517e:	85 c0                	test   eax,eax
c0005180:	75 38                	jne    c00051ba <f_utime+0x96>
c0005182:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005186:	b8 06 00 00 00       	mov    eax,0x6
c000518b:	80 e2 a0             	and    dl,0xa0
c000518e:	75 2a                	jne    c00051ba <f_utime+0x96>
c0005190:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0005194:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005198:	c1 e2 10             	shl    edx,0x10
c000519b:	09 c2                	or     edx,eax
c000519d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00051a1:	83 c0 16             	add    eax,0x16
c00051a4:	e8 70 ce ff ff       	call   c0002019 <st_dword>
c00051a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ad:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b5:	e8 d0 dd ff ff       	call   c0002f8a <sync_fs>
c00051ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051be:	83 ec 0c             	sub    esp,0xc
c00051c1:	53                   	push   ebx
c00051c2:	e8 85 0c 00 00       	call   c0005e4c <ff_memfree>
c00051c7:	83 c4 10             	add    esp,0x10
c00051ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051ce:	83 c4 54             	add    esp,0x54
c00051d1:	5b                   	pop    ebx
c00051d2:	5e                   	pop    esi
c00051d3:	c3                   	ret    

c00051d4 <f_getlabel>:
c00051d4:	55                   	push   ebp
c00051d5:	31 c9                	xor    ecx,ecx
c00051d7:	57                   	push   edi
c00051d8:	56                   	push   esi
c00051d9:	53                   	push   ebx
c00051da:	83 ec 5c             	sub    esp,0x5c
c00051dd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051e1:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c00051e5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051e9:	e8 c4 d4 ff ff       	call   c00026b2 <mount_volume>
c00051ee:	85 c0                	test   eax,eax
c00051f0:	89 c3                	mov    ebx,eax
c00051f2:	0f 85 d9 00 00 00    	jne    c00052d1 <f_getlabel+0xfd>
c00051f8:	85 ff                	test   edi,edi
c00051fa:	0f 84 d1 00 00 00    	je     c00052d1 <f_getlabel+0xfd>
c0005200:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005208:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000520c:	31 d2                	xor    edx,edx
c000520e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005216:	e8 1c e3 ff ff       	call   c0003537 <dir_sdi>
c000521b:	85 c0                	test   eax,eax
c000521d:	89 c3                	mov    ebx,eax
c000521f:	0f 85 a2 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c0005225:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005229:	ba 01 00 00 00       	mov    edx,0x1
c000522e:	e8 fe e6 ff ff       	call   c0003931 <dir_read>
c0005233:	85 c0                	test   eax,eax
c0005235:	89 c3                	mov    ebx,eax
c0005237:	0f 85 8a 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c000523d:	31 f6                	xor    esi,esi
c000523f:	31 d2                	xor    edx,edx
c0005241:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005245:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000524c:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c0005250:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005255:	89 c8                	mov    eax,ecx
c0005257:	e8 13 ce ff ff       	call   c000206f <dbc_1st>
c000525c:	85 c0                	test   eax,eax
c000525e:	74 19                	je     c0005279 <f_getlabel+0xa5>
c0005260:	83 fd 0b             	cmp    ebp,0xb
c0005263:	74 14                	je     c0005279 <f_getlabel+0xa5>
c0005265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005269:	c1 e1 08             	shl    ecx,0x8
c000526c:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0005270:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005273:	09 c1                	or     ecx,eax
c0005275:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005279:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000527e:	52                   	push   edx
c000527f:	52                   	push   edx
c0005280:	68 b5 01 00 00       	push   0x1b5
c0005285:	50                   	push   eax
c0005286:	e8 75 0c 00 00       	call   c0005f00 <ff_oem2uni>
c000528b:	83 c4 10             	add    esp,0x10
c000528e:	0f b7 c0             	movzx  eax,ax
c0005291:	85 c0                	test   eax,eax
c0005293:	74 1f                	je     c00052b4 <f_getlabel+0xe0>
c0005295:	8d 14 37             	lea    edx,[edi+esi*1]
c0005298:	b9 04 00 00 00       	mov    ecx,0x4
c000529d:	e8 ab ce ff ff       	call   c000214d <put_utf>
c00052a2:	0f b6 c0             	movzx  eax,al
c00052a5:	85 c0                	test   eax,eax
c00052a7:	74 0b                	je     c00052b4 <f_getlabel+0xe0>
c00052a9:	01 c6                	add    esi,eax
c00052ab:	83 fd 0b             	cmp    ebp,0xb
c00052ae:	74 06                	je     c00052b6 <f_getlabel+0xe2>
c00052b0:	89 ea                	mov    edx,ebp
c00052b2:	eb 8d                	jmp    c0005241 <f_getlabel+0x6d>
c00052b4:	31 f6                	xor    esi,esi
c00052b6:	01 fe                	add    esi,edi
c00052b8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00052bb:	39 f7                	cmp    edi,esi
c00052bd:	74 12                	je     c00052d1 <f_getlabel+0xfd>
c00052bf:	4e                   	dec    esi
c00052c0:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00052c3:	74 f3                	je     c00052b8 <f_getlabel+0xe4>
c00052c5:	eb 0a                	jmp    c00052d1 <f_getlabel+0xfd>
c00052c7:	83 fb 04             	cmp    ebx,0x4
c00052ca:	75 05                	jne    c00052d1 <f_getlabel+0xfd>
c00052cc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00052cf:	31 db                	xor    ebx,ebx
c00052d1:	85 db                	test   ebx,ebx
c00052d3:	75 49                	jne    c000531e <f_getlabel+0x14a>
c00052d5:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052da:	74 42                	je     c000531e <f_getlabel+0x14a>
c00052dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052e3:	e8 6d d2 ff ff       	call   c0002555 <move_window>
c00052e8:	85 c0                	test   eax,eax
c00052ea:	89 c3                	mov    ebx,eax
c00052ec:	75 30                	jne    c000531e <f_getlabel+0x14a>
c00052ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052f2:	b8 43 00 00 00       	mov    eax,0x43
c00052f7:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052fa:	83 f9 03             	cmp    ecx,0x3
c00052fd:	74 10                	je     c000530f <f_getlabel+0x13b>
c00052ff:	83 f9 04             	cmp    ecx,0x4
c0005302:	b8 64 00 00 00       	mov    eax,0x64
c0005307:	b9 27 00 00 00       	mov    ecx,0x27
c000530c:	0f 45 c1             	cmovne eax,ecx
c000530f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005313:	e8 e5 cc ff ff       	call   c0001ffd <ld_dword>
c0005318:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000531c:	89 07                	mov    DWORD PTR [edi],eax
c000531e:	83 c4 5c             	add    esp,0x5c
c0005321:	89 d8                	mov    eax,ebx
c0005323:	5b                   	pop    ebx
c0005324:	5e                   	pop    esi
c0005325:	5f                   	pop    edi
c0005326:	5d                   	pop    ebp
c0005327:	c3                   	ret    

c0005328 <f_setlabel>:
c0005328:	57                   	push   edi
c0005329:	b9 02 00 00 00       	mov    ecx,0x2
c000532e:	56                   	push   esi
c000532f:	53                   	push   ebx
c0005330:	83 ec 50             	sub    esp,0x50
c0005333:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005337:	8d 44 24 60          	lea    eax,[esp+0x60]
c000533b:	e8 72 d3 ff ff       	call   c00026b2 <mount_volume>
c0005340:	85 c0                	test   eax,eax
c0005342:	89 c6                	mov    esi,eax
c0005344:	0f 85 65 01 00 00    	jne    c00054af <f_setlabel+0x187>
c000534a:	b9 0b 00 00 00       	mov    ecx,0xb
c000534f:	ba 20 00 00 00       	mov    edx,0x20
c0005354:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005358:	31 db                	xor    ebx,ebx
c000535a:	e8 d2 cc ff ff       	call   c0002031 <mem_set>
c000535f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005363:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005366:	76 5d                	jbe    c00053c5 <f_setlabel+0x9d>
c0005368:	8d 44 24 60          	lea    eax,[esp+0x60]
c000536c:	e8 04 cd ff ff       	call   c0002075 <tchar2uni>
c0005371:	3d ff ff 00 00       	cmp    eax,0xffff
c0005376:	76 0a                	jbe    c0005382 <f_setlabel+0x5a>
c0005378:	be 06 00 00 00       	mov    esi,0x6
c000537d:	e9 2d 01 00 00       	jmp    c00054af <f_setlabel+0x187>
c0005382:	83 ec 0c             	sub    esp,0xc
c0005385:	50                   	push   eax
c0005386:	e8 ed 0b 00 00       	call   c0005f78 <ff_wtoupper>
c000538b:	5a                   	pop    edx
c000538c:	59                   	pop    ecx
c000538d:	68 b5 01 00 00       	push   0x1b5
c0005392:	50                   	push   eax
c0005393:	e8 cc 0a 00 00       	call   c0005e64 <ff_uni2oem>
c0005398:	83 c4 10             	add    esp,0x10
c000539b:	0f b7 f0             	movzx  esi,ax
c000539e:	85 f6                	test   esi,esi
c00053a0:	89 f7                	mov    edi,esi
c00053a2:	74 d4                	je     c0005378 <f_setlabel+0x50>
c00053a4:	89 f2                	mov    edx,esi
c00053a6:	b8 f0 11 02 c0       	mov    eax,0xc00211f0
c00053ab:	e8 ae cc ff ff       	call   c000205e <chk_chr>
c00053b0:	85 c0                	test   eax,eax
c00053b2:	75 c4                	jne    c0005378 <f_setlabel+0x50>
c00053b4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00053ba:	0f 87 c9 00 00 00    	ja     c0005489 <f_setlabel+0x161>
c00053c0:	e9 e0 00 00 00       	jmp    c00054a5 <f_setlabel+0x17d>
c00053c5:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ca:	74 ac                	je     c0005378 <f_setlabel+0x50>
c00053cc:	85 db                	test   ebx,ebx
c00053ce:	74 0e                	je     c00053de <f_setlabel+0xb6>
c00053d0:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053d5:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053d8:	75 04                	jne    c00053de <f_setlabel+0xb6>
c00053da:	89 c3                	mov    ebx,eax
c00053dc:	eb ee                	jmp    c00053cc <f_setlabel+0xa4>
c00053de:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053ea:	31 d2                	xor    edx,edx
c00053ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053f4:	e8 3e e1 ff ff       	call   c0003537 <dir_sdi>
c00053f9:	85 c0                	test   eax,eax
c00053fb:	89 c6                	mov    esi,eax
c00053fd:	0f 85 ac 00 00 00    	jne    c00054af <f_setlabel+0x187>
c0005403:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005407:	ba 01 00 00 00       	mov    edx,0x1
c000540c:	e8 20 e5 ff ff       	call   c0003931 <dir_read>
c0005411:	85 c0                	test   eax,eax
c0005413:	75 18                	jne    c000542d <f_setlabel+0x105>
c0005415:	85 db                	test   ebx,ebx
c0005417:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000541b:	74 0b                	je     c0005428 <f_setlabel+0x100>
c000541d:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005421:	b9 0b 00 00 00       	mov    ecx,0xb
c0005426:	eb 47                	jmp    c000546f <f_setlabel+0x147>
c0005428:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000542b:	eb 47                	jmp    c0005474 <f_setlabel+0x14c>
c000542d:	83 f8 04             	cmp    eax,0x4
c0005430:	75 53                	jne    c0005485 <f_setlabel+0x15d>
c0005432:	85 db                	test   ebx,ebx
c0005434:	74 79                	je     c00054af <f_setlabel+0x187>
c0005436:	8d 44 24 20          	lea    eax,[esp+0x20]
c000543a:	ba 01 00 00 00       	mov    edx,0x1
c000543f:	e8 88 e4 ff ff       	call   c00038cc <dir_alloc>
c0005444:	85 c0                	test   eax,eax
c0005446:	89 c6                	mov    esi,eax
c0005448:	75 65                	jne    c00054af <f_setlabel+0x187>
c000544a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000544e:	b9 20 00 00 00       	mov    ecx,0x20
c0005453:	31 d2                	xor    edx,edx
c0005455:	e8 d7 cb ff ff       	call   c0002031 <mem_set>
c000545a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000545e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005463:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005467:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000546b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000546f:	e8 a8 cb ff ff       	call   c000201c <mem_cpy>
c0005474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005478:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000547c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005480:	e8 05 db ff ff       	call   c0002f8a <sync_fs>
c0005485:	89 c6                	mov    esi,eax
c0005487:	eb 26                	jmp    c00054af <f_setlabel+0x187>
c0005489:	83 fb 09             	cmp    ebx,0x9
c000548c:	0f 87 e6 fe ff ff    	ja     c0005378 <f_setlabel+0x50>
c0005492:	89 f0                	mov    eax,esi
c0005494:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005498:	43                   	inc    ebx
c0005499:	89 f8                	mov    eax,edi
c000549b:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000549f:	43                   	inc    ebx
c00054a0:	e9 ba fe ff ff       	jmp    c000535f <f_setlabel+0x37>
c00054a5:	83 fb 0a             	cmp    ebx,0xa
c00054a8:	76 ef                	jbe    c0005499 <f_setlabel+0x171>
c00054aa:	e9 c9 fe ff ff       	jmp    c0005378 <f_setlabel+0x50>
c00054af:	83 c4 50             	add    esp,0x50
c00054b2:	89 f0                	mov    eax,esi
c00054b4:	5b                   	pop    ebx
c00054b5:	5e                   	pop    esi
c00054b6:	5f                   	pop    edi
c00054b7:	c3                   	ret    

c00054b8 <f_expand>:
c00054b8:	55                   	push   ebp
c00054b9:	57                   	push   edi
c00054ba:	56                   	push   esi
c00054bb:	53                   	push   ebx
c00054bc:	83 ec 2c             	sub    esp,0x2c
c00054bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054c7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054cf:	89 d8                	mov    eax,ebx
c00054d1:	e8 d6 cf ff ff       	call   c00024ac <validate>
c00054d6:	85 c0                	test   eax,eax
c00054d8:	89 c6                	mov    esi,eax
c00054da:	0f 85 3b 01 00 00    	jne    c000561b <f_expand+0x163>
c00054e0:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054e4:	85 f6                	test   esi,esi
c00054e6:	0f 85 2f 01 00 00    	jne    c000561b <f_expand+0x163>
c00054ec:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054f1:	75 0a                	jne    c00054fd <f_expand+0x45>
c00054f3:	be 07 00 00 00       	mov    esi,0x7
c00054f8:	e9 1e 01 00 00       	jmp    c000561b <f_expand+0x163>
c00054fd:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005501:	75 f0                	jne    c00054f3 <f_expand+0x3b>
c0005503:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005507:	74 ea                	je     c00054f3 <f_expand+0x3b>
c0005509:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000550d:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005511:	c1 e7 09             	shl    edi,0x9
c0005514:	8d 47 ff             	lea    eax,[edi-0x1]
c0005517:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000551b:	0f 95 c0             	setne  al
c000551e:	31 d2                	xor    edx,edx
c0005520:	0f b6 c0             	movzx  eax,al
c0005523:	89 c5                	mov    ebp,eax
c0005525:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005529:	f7 f7                	div    edi
c000552b:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000552e:	01 e8                	add    eax,ebp
c0005530:	83 ff 01             	cmp    edi,0x1
c0005533:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005537:	76 05                	jbe    c000553e <f_expand+0x86>
c0005539:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000553c:	77 05                	ja     c0005543 <f_expand+0x8b>
c000553e:	bf 02 00 00 00       	mov    edi,0x2
c0005543:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005546:	89 fd                	mov    ebp,edi
c0005548:	31 c9                	xor    ecx,ecx
c000554a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000554e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005550:	89 ea                	mov    edx,ebp
c0005552:	45                   	inc    ebp
c0005553:	e8 da de ff ff       	call   c0003432 <get_fat.isra.2>
c0005558:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000555c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005560:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005563:	77 05                	ja     c000556a <f_expand+0xb2>
c0005565:	bd 02 00 00 00       	mov    ebp,0x2
c000556a:	83 f8 01             	cmp    eax,0x1
c000556d:	74 20                	je     c000558f <f_expand+0xd7>
c000556f:	83 f8 ff             	cmp    eax,0xffffffff
c0005572:	74 25                	je     c0005599 <f_expand+0xe1>
c0005574:	85 c0                	test   eax,eax
c0005576:	75 09                	jne    c0005581 <f_expand+0xc9>
c0005578:	41                   	inc    ecx
c0005579:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000557d:	75 07                	jne    c0005586 <f_expand+0xce>
c000557f:	eb 1f                	jmp    c00055a0 <f_expand+0xe8>
c0005581:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005584:	31 c9                	xor    ecx,ecx
c0005586:	39 fd                	cmp    ebp,edi
c0005588:	75 c0                	jne    c000554a <f_expand+0x92>
c000558a:	e9 64 ff ff ff       	jmp    c00054f3 <f_expand+0x3b>
c000558f:	be 02 00 00 00       	mov    esi,0x2
c0005594:	e9 82 00 00 00       	jmp    c000561b <f_expand+0x163>
c0005599:	be 01 00 00 00       	mov    esi,0x1
c000559e:	eb 7b                	jmp    c000561b <f_expand+0x163>
c00055a0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055a5:	74 2b                	je     c00055d2 <f_expand+0x11a>
c00055a7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00055aa:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00055ae:	85 ed                	test   ebp,ebp
c00055b0:	74 24                	je     c00055d6 <f_expand+0x11e>
c00055b2:	83 c9 ff             	or     ecx,0xffffffff
c00055b5:	83 fd 01             	cmp    ebp,0x1
c00055b8:	74 03                	je     c00055bd <f_expand+0x105>
c00055ba:	8d 4f 01             	lea    ecx,[edi+0x1]
c00055bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c1:	89 fa                	mov    edx,edi
c00055c3:	e8 e7 d3 ff ff       	call   c00029af <put_fat>
c00055c8:	85 c0                	test   eax,eax
c00055ca:	75 4d                	jne    c0005619 <f_expand+0x161>
c00055cc:	89 f8                	mov    eax,edi
c00055ce:	4d                   	dec    ebp
c00055cf:	47                   	inc    edi
c00055d0:	eb dc                	jmp    c00055ae <f_expand+0xf6>
c00055d2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055d5:	48                   	dec    eax
c00055d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055da:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055df:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055e2:	74 37                	je     c000561b <f_expand+0x163>
c00055e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055ee:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055f1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055f4:	83 c8 40             	or     eax,0x40
c00055f7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055fa:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055fd:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005600:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005603:	39 c8                	cmp    eax,ecx
c0005605:	77 14                	ja     c000561b <f_expand+0x163>
c0005607:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000560b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000560e:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005611:	83 c8 01             	or     eax,0x1
c0005614:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005617:	eb 02                	jmp    c000561b <f_expand+0x163>
c0005619:	89 c6                	mov    esi,eax
c000561b:	83 c4 2c             	add    esp,0x2c
c000561e:	89 f0                	mov    eax,esi
c0005620:	5b                   	pop    ebx
c0005621:	5e                   	pop    esi
c0005622:	5f                   	pop    edi
c0005623:	5d                   	pop    ebp
c0005624:	c3                   	ret    

c0005625 <f_mkfs>:
c0005625:	55                   	push   ebp
c0005626:	57                   	push   edi
c0005627:	56                   	push   esi
c0005628:	be 0b 00 00 00       	mov    esi,0xb
c000562d:	53                   	push   ebx
c000562e:	83 ec 5c             	sub    esp,0x5c
c0005631:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005635:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005639:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000563d:	e8 1e ce ff ff       	call   c0002460 <get_ldnumber>
c0005642:	85 c0                	test   eax,eax
c0005644:	0f 88 e0 07 00 00    	js     c0005e2a <f_mkfs+0x805>
c000564a:	8b 14 85 a0 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8b60]
c0005651:	85 d2                	test   edx,edx
c0005653:	74 03                	je     c0005658 <f_mkfs+0x33>
c0005655:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005658:	85 db                	test   ebx,ebx
c000565a:	75 05                	jne    c0005661 <f_mkfs+0x3c>
c000565c:	bb e0 11 02 c0       	mov    ebx,0xc00211e0
c0005661:	0f b6 c0             	movzx  eax,al
c0005664:	83 ec 0c             	sub    esp,0xc
c0005667:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000566b:	be 03 00 00 00       	mov    esi,0x3
c0005670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005674:	e8 29 c9 ff ff       	call   c0001fa2 <disk_initialize>
c0005679:	83 c4 10             	add    esp,0x10
c000567c:	a8 01                	test   al,0x1
c000567e:	0f 85 a6 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005684:	a8 04                	test   al,0x4
c0005686:	be 0a 00 00 00       	mov    esi,0xa
c000568b:	0f 85 99 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005691:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005694:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005698:	85 c0                	test   eax,eax
c000569a:	75 20                	jne    c00056bc <f_mkfs+0x97>
c000569c:	51                   	push   ecx
c000569d:	8d 44 24 44          	lea    eax,[esp+0x44]
c00056a1:	50                   	push   eax
c00056a2:	6a 03                	push   0x3
c00056a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00056a8:	e8 24 c9 ff ff       	call   c0001fd1 <disk_ioctl>
c00056ad:	83 c4 10             	add    esp,0x10
c00056b0:	85 c0                	test   eax,eax
c00056b2:	74 08                	je     c00056bc <f_mkfs+0x97>
c00056b4:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056bc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056c0:	8d 42 ff             	lea    eax,[edx-0x1]
c00056c3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056c8:	77 04                	ja     c00056ce <f_mkfs+0xa9>
c00056ca:	85 c2                	test   edx,eax
c00056cc:	74 08                	je     c00056d6 <f_mkfs+0xb1>
c00056ce:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056d6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056d9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e1:	48                   	dec    eax
c00056e2:	3c 01                	cmp    al,0x1
c00056e4:	76 05                	jbe    c00056eb <f_mkfs+0xc6>
c00056e6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00056f2:	48                   	dec    eax
c00056f3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056f8:	77 15                	ja     c000570f <f_mkfs+0xea>
c00056fa:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c00056ff:	b8 00 02 00 00       	mov    eax,0x200
c0005704:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005709:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000570d:	eb 08                	jmp    c0005717 <f_mkfs+0xf2>
c000570f:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005717:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000571a:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005720:	77 0f                	ja     c0005731 <f_mkfs+0x10c>
c0005722:	8d 47 ff             	lea    eax,[edi-0x1]
c0005725:	85 f8                	test   eax,edi
c0005727:	b8 00 00 00 00       	mov    eax,0x0
c000572c:	0f 45 f8             	cmovne edi,eax
c000572f:	eb 02                	jmp    c0005733 <f_mkfs+0x10e>
c0005731:	31 ff                	xor    edi,edi
c0005733:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000573b:	77 0a                	ja     c0005747 <f_mkfs+0x122>
c000573d:	be 11 00 00 00       	mov    esi,0x11
c0005742:	e9 e3 06 00 00       	jmp    c0005e2a <f_mkfs+0x805>
c0005747:	85 ed                	test   ebp,ebp
c0005749:	8b 33                	mov    esi,DWORD PTR [ebx]
c000574b:	89 eb                	mov    ebx,ebp
c000574d:	75 1e                	jne    c000576d <f_mkfs+0x148>
c000574f:	83 ec 0c             	sub    esp,0xc
c0005752:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005759:	25 00 fe ff ff       	and    eax,0xfffffe00
c000575e:	50                   	push   eax
c000575f:	e8 d0 06 00 00       	call   c0005e34 <ff_memalloc>
c0005764:	83 c4 10             	add    esp,0x10
c0005767:	85 c0                	test   eax,eax
c0005769:	89 c3                	mov    ebx,eax
c000576b:	74 d0                	je     c000573d <f_mkfs+0x118>
c000576d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005775:	52                   	push   edx
c0005776:	8d 44 24 48          	lea    eax,[esp+0x48]
c000577a:	50                   	push   eax
c000577b:	6a 01                	push   0x1
c000577d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005781:	e8 4b c8 ff ff       	call   c0001fd1 <disk_ioctl>
c0005786:	83 c4 10             	add    esp,0x10
c0005789:	85 c0                	test   eax,eax
c000578b:	0f 85 42 06 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005791:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005799:	89 f0                	mov    eax,esi
c000579b:	83 e0 08             	and    eax,0x8
c000579e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00057a2:	75 18                	jne    c00057bc <f_mkfs+0x197>
c00057a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057a8:	83 f8 3f             	cmp    eax,0x3f
c00057ab:	76 0f                	jbe    c00057bc <f_mkfs+0x197>
c00057ad:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00057b5:	83 e8 3f             	sub    eax,0x3f
c00057b8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00057bc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00057c4:	83 f8 7f             	cmp    eax,0x7f
c00057c7:	0f 86 5f 02 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c00057cd:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057d3:	b9 80 00 00 00       	mov    ecx,0x80
c00057d8:	77 05                	ja     c00057df <f_mkfs+0x1ba>
c00057da:	c1 ef 09             	shr    edi,0x9
c00057dd:	89 f9                	mov    ecx,edi
c00057df:	89 f0                	mov    eax,esi
c00057e1:	89 f7                	mov    edi,esi
c00057e3:	83 e0 01             	and    eax,0x1
c00057e6:	83 e7 02             	and    edi,0x2
c00057e9:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057ed:	0f b6 c0             	movzx  eax,al
c00057f0:	74 0a                	je     c00057fc <f_mkfs+0x1d7>
c00057f2:	85 c0                	test   eax,eax
c00057f4:	0f 84 53 01 00 00    	je     c000594d <f_mkfs+0x328>
c00057fa:	eb 37                	jmp    c0005833 <f_mkfs+0x20e>
c00057fc:	85 c0                	test   eax,eax
c00057fe:	be 13 00 00 00       	mov    esi,0x13
c0005803:	75 2e                	jne    c0005833 <f_mkfs+0x20e>
c0005805:	e9 e0 05 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c000580a:	83 f8 02             	cmp    eax,0x2
c000580d:	0f 85 11 02 00 00    	jne    c0005a24 <f_mkfs+0x3ff>
c0005813:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005819:	0f 86 e8 01 00 00    	jbe    c0005a07 <f_mkfs+0x3e2>
c000581f:	85 c9                	test   ecx,ecx
c0005821:	0f 85 d5 05 00 00    	jne    c0005dfc <f_mkfs+0x7d7>
c0005827:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000582a:	83 f9 40             	cmp    ecx,0x40
c000582d:	0f 87 d9 05 00 00    	ja     c0005e0c <f_mkfs+0x7e7>
c0005833:	85 c9                	test   ecx,ecx
c0005835:	89 cf                	mov    edi,ecx
c0005837:	75 1c                	jne    c0005855 <f_mkfs+0x230>
c0005839:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000583d:	b8 c0 11 02 c0       	mov    eax,0xc00211c0
c0005842:	bf 01 00 00 00       	mov    edi,0x1
c0005847:	c1 ee 0c             	shr    esi,0xc
c000584a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000584d:	85 d2                	test   edx,edx
c000584f:	0f 85 67 01 00 00    	jne    c00059bc <f_mkfs+0x397>
c0005855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005859:	31 d2                	xor    edx,edx
c000585b:	f7 f7                	div    edi
c000585d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005862:	0f 86 66 01 00 00    	jbe    c00059ce <f_mkfs+0x3a9>
c0005868:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000586d:	83 c0 02             	add    eax,0x2
c0005870:	01 c0                	add    eax,eax
c0005872:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000587a:	05 ff 01 00 00       	add    eax,0x1ff
c000587f:	c1 e8 09             	shr    eax,0x9
c0005882:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000588a:	c1 e0 05             	shl    eax,0x5
c000588d:	c1 e8 09             	shr    eax,0x9
c0005890:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005894:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005899:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000589d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058a1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00058a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00058a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ad:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00058b2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00058b6:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00058ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00058be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00058c2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00058c6:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00058ca:	f7 d8                	neg    eax
c00058cc:	21 c6                	and    esi,eax
c00058ce:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058d3:	29 d6                	sub    esi,edx
c00058d5:	83 f8 03             	cmp    eax,0x3
c00058d8:	0f 85 03 01 00 00    	jne    c00059e1 <f_mkfs+0x3bc>
c00058de:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058e2:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058e6:	89 f8                	mov    eax,edi
c00058e8:	c1 e0 04             	shl    eax,0x4
c00058eb:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00058ef:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058f3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058f7:	0f 82 2f 01 00 00    	jb     c0005a2c <f_mkfs+0x407>
c00058fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005901:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005905:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005909:	89 c2                	mov    edx,eax
c000590b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000590f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005914:	29 c2                	sub    edx,eax
c0005916:	89 d0                	mov    eax,edx
c0005918:	31 d2                	xor    edx,edx
c000591a:	f7 f7                	div    edi
c000591c:	89 c6                	mov    esi,eax
c000591e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005923:	83 f8 03             	cmp    eax,0x3
c0005926:	0f 85 de fe ff ff    	jne    c000580a <f_mkfs+0x1e5>
c000592c:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005932:	0f 87 03 01 00 00    	ja     c0005a3b <f_mkfs+0x416>
c0005938:	85 c9                	test   ecx,ecx
c000593a:	0f 85 ec 00 00 00    	jne    c0005a2c <f_mkfs+0x407>
c0005940:	83 ff 01             	cmp    edi,0x1
c0005943:	0f 86 e3 00 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c0005949:	d1 ef                	shr    edi,1
c000594b:	89 f9                	mov    ecx,edi
c000594d:	85 c9                	test   ecx,ecx
c000594f:	89 ce                	mov    esi,ecx
c0005951:	75 25                	jne    c0005978 <f_mkfs+0x353>
c0005953:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005957:	b8 d0 11 02 c0       	mov    eax,0xc00211d0
c000595c:	b9 01 00 00 00       	mov    ecx,0x1
c0005961:	c1 ee 11             	shr    esi,0x11
c0005964:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005967:	85 d2                	test   edx,edx
c0005969:	74 0b                	je     c0005976 <f_mkfs+0x351>
c000596b:	83 c0 02             	add    eax,0x2
c000596e:	39 f2                	cmp    edx,esi
c0005970:	77 04                	ja     c0005976 <f_mkfs+0x351>
c0005972:	01 c9                	add    ecx,ecx
c0005974:	eb ee                	jmp    c0005964 <f_mkfs+0x33f>
c0005976:	31 f6                	xor    esi,esi
c0005978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000597c:	31 d2                	xor    edx,edx
c000597e:	f7 f1                	div    ecx
c0005980:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005987:	2d f6 ff 00 00       	sub    eax,0xfff6
c000598c:	c1 ea 09             	shr    edx,0x9
c000598f:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005994:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005998:	0f 87 8e 00 00 00    	ja     c0005a2c <f_mkfs+0x407>
c000599e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00059a6:	89 cf                	mov    edi,ecx
c00059a8:	89 f1                	mov    ecx,esi
c00059aa:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00059b2:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00059b7:	e9 d8 fe ff ff       	jmp    c0005894 <f_mkfs+0x26f>
c00059bc:	83 c0 02             	add    eax,0x2
c00059bf:	39 f2                	cmp    edx,esi
c00059c1:	0f 87 8e fe ff ff    	ja     c0005855 <f_mkfs+0x230>
c00059c7:	01 ff                	add    edi,edi
c00059c9:	e9 7c fe ff ff       	jmp    c000584a <f_mkfs+0x225>
c00059ce:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00059d3:	8d 04 40             	lea    eax,[eax+eax*2]
c00059d6:	40                   	inc    eax
c00059d7:	d1 e8                	shr    eax,1
c00059d9:	83 c0 03             	add    eax,0x3
c00059dc:	e9 91 fe ff ff       	jmp    c0005872 <f_mkfs+0x24d>
c00059e1:	31 d2                	xor    edx,edx
c00059e3:	89 f0                	mov    eax,esi
c00059e5:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059e9:	85 d2                	test   edx,edx
c00059eb:	74 09                	je     c00059f6 <f_mkfs+0x3d1>
c00059ed:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059f1:	4e                   	dec    esi
c00059f2:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059f6:	89 f0                	mov    eax,esi
c00059f8:	31 d2                	xor    edx,edx
c00059fa:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059fe:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005a02:	e9 df fe ff ff       	jmp    c00058e6 <f_mkfs+0x2c1>
c0005a07:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a0d:	77 2c                	ja     c0005a3b <f_mkfs+0x416>
c0005a0f:	85 c9                	test   ecx,ecx
c0005a11:	75 19                	jne    c0005a2c <f_mkfs+0x407>
c0005a13:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005a16:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a1c:	0f 86 11 fe ff ff    	jbe    c0005833 <f_mkfs+0x20e>
c0005a22:	eb 08                	jmp    c0005a2c <f_mkfs+0x407>
c0005a24:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a2a:	76 0a                	jbe    c0005a36 <f_mkfs+0x411>
c0005a2c:	be 0e 00 00 00       	mov    esi,0xe
c0005a31:	e9 b4 03 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c0005a36:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a3b:	31 d2                	xor    edx,edx
c0005a3d:	b9 00 02 00 00       	mov    ecx,0x200
c0005a42:	89 d8                	mov    eax,ebx
c0005a44:	e8 e8 c5 ff ff       	call   c0002031 <mem_set>
c0005a49:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a4e:	ba 72 11 02 c0       	mov    edx,0xc0021172
c0005a53:	89 d8                	mov    eax,ebx
c0005a55:	e8 c2 c5 ff ff       	call   c000201c <mem_cpy>
c0005a5a:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a5d:	ba 00 02 00 00       	mov    edx,0x200
c0005a62:	e8 ae c5 ff ff       	call   c0002015 <st_word>
c0005a67:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a6c:	89 f8                	mov    eax,edi
c0005a6e:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a71:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a74:	e8 9c c5 ff ff       	call   c0002015 <st_word>
c0005a79:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a7d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a80:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a85:	83 f8 03             	cmp    eax,0x3
c0005a88:	b8 00 00 00 00       	mov    eax,0x0
c0005a8d:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005a92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a96:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005a9d:	e8 73 c5 ff ff       	call   c0002015 <st_word>
c0005aa2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005aa6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005aac:	77 0a                	ja     c0005ab8 <f_mkfs+0x493>
c0005aae:	8d 43 13             	lea    eax,[ebx+0x13]
c0005ab1:	e8 5f c5 ff ff       	call   c0002015 <st_word>
c0005ab6:	eb 08                	jmp    c0005ac0 <f_mkfs+0x49b>
c0005ab8:	8d 43 20             	lea    eax,[ebx+0x20]
c0005abb:	e8 59 c5 ff ff       	call   c0002019 <st_dword>
c0005ac0:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005ac4:	8d 43 18             	lea    eax,[ebx+0x18]
c0005ac7:	ba 3f 00 00 00       	mov    edx,0x3f
c0005acc:	e8 44 c5 ff ff       	call   c0002015 <st_word>
c0005ad1:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005ad4:	ba ff 00 00 00       	mov    edx,0xff
c0005ad9:	e8 37 c5 ff ff       	call   c0002015 <st_word>
c0005ade:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ae2:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005ae5:	e8 2f c5 ff ff       	call   c0002019 <st_dword>
c0005aea:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005aef:	83 f8 03             	cmp    eax,0x3
c0005af2:	75 57                	jne    c0005b4b <f_mkfs+0x526>
c0005af4:	8d 43 43             	lea    eax,[ebx+0x43]
c0005af7:	ba 00 00 21 50       	mov    edx,0x50210000
c0005afc:	e8 18 c5 ff ff       	call   c0002019 <st_dword>
c0005b01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005b05:	8d 43 24             	lea    eax,[ebx+0x24]
c0005b08:	e8 0c c5 ff ff       	call   c0002019 <st_dword>
c0005b0d:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005b10:	ba 02 00 00 00       	mov    edx,0x2
c0005b15:	e8 ff c4 ff ff       	call   c0002019 <st_dword>
c0005b1a:	8d 43 30             	lea    eax,[ebx+0x30]
c0005b1d:	ba 01 00 00 00       	mov    edx,0x1
c0005b22:	e8 ee c4 ff ff       	call   c0002015 <st_word>
c0005b27:	8d 43 32             	lea    eax,[ebx+0x32]
c0005b2a:	ba 06 00 00 00       	mov    edx,0x6
c0005b2f:	e8 e1 c4 ff ff       	call   c0002015 <st_word>
c0005b34:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b37:	b9 13 00 00 00       	mov    ecx,0x13
c0005b3c:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005b40:	ba 7e 11 02 c0       	mov    edx,0xc002117e
c0005b45:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005b49:	eb 2f                	jmp    c0005b7a <f_mkfs+0x555>
c0005b4b:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b4e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b53:	e8 c1 c4 ff ff       	call   c0002019 <st_dword>
c0005b58:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b5d:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b60:	e8 b0 c4 ff ff       	call   c0002015 <st_word>
c0005b65:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b68:	b9 13 00 00 00       	mov    ecx,0x13
c0005b6d:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b71:	ba 92 11 02 c0       	mov    edx,0xc0021192
c0005b76:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b7a:	e8 9d c4 ff ff       	call   c000201c <mem_cpy>
c0005b7f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b85:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b8e:	e8 82 c4 ff ff       	call   c0002015 <st_word>
c0005b93:	6a 01                	push   0x1
c0005b95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b99:	53                   	push   ebx
c0005b9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b9e:	e8 18 c4 ff ff       	call   c0001fbb <disk_write>
c0005ba3:	83 c4 10             	add    esp,0x10
c0005ba6:	85 c0                	test   eax,eax
c0005ba8:	0f 85 25 02 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005bae:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005bb3:	83 f8 03             	cmp    eax,0x3
c0005bb6:	0f 85 98 00 00 00    	jne    c0005c54 <f_mkfs+0x62f>
c0005bbc:	6a 01                	push   0x1
c0005bbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005bc2:	83 c0 06             	add    eax,0x6
c0005bc5:	50                   	push   eax
c0005bc6:	53                   	push   ebx
c0005bc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bcb:	e8 eb c3 ff ff       	call   c0001fbb <disk_write>
c0005bd0:	b9 00 02 00 00       	mov    ecx,0x200
c0005bd5:	31 d2                	xor    edx,edx
c0005bd7:	89 d8                	mov    eax,ebx
c0005bd9:	e8 53 c4 ff ff       	call   c0002031 <mem_set>
c0005bde:	ba 52 52 61 41       	mov    edx,0x41615252
c0005be3:	89 d8                	mov    eax,ebx
c0005be5:	e8 2f c4 ff ff       	call   c0002019 <st_dword>
c0005bea:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bf0:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bf5:	e8 1f c4 ff ff       	call   c0002019 <st_dword>
c0005bfa:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bfd:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005c03:	e8 11 c4 ff ff       	call   c0002019 <st_dword>
c0005c08:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005c0e:	ba 02 00 00 00       	mov    edx,0x2
c0005c13:	e8 01 c4 ff ff       	call   c0002019 <st_dword>
c0005c18:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005c1e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005c23:	e8 ed c3 ff ff       	call   c0002015 <st_word>
c0005c28:	6a 01                	push   0x1
c0005c2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005c2e:	83 c0 07             	add    eax,0x7
c0005c31:	50                   	push   eax
c0005c32:	53                   	push   ebx
c0005c33:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005c37:	e8 7f c3 ff ff       	call   c0001fbb <disk_write>
c0005c3c:	83 c4 20             	add    esp,0x20
c0005c3f:	6a 01                	push   0x1
c0005c41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c45:	40                   	inc    eax
c0005c46:	50                   	push   eax
c0005c47:	53                   	push   ebx
c0005c48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c4c:	e8 6a c3 ff ff       	call   c0001fbb <disk_write>
c0005c51:	83 c4 10             	add    esp,0x10
c0005c54:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c58:	31 d2                	xor    edx,edx
c0005c5a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c5e:	c1 e8 09             	shr    eax,0x9
c0005c61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c65:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c6b:	89 d8                	mov    eax,ebx
c0005c6d:	e8 bf c3 ff ff       	call   c0002031 <mem_set>
c0005c72:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c77:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005c7c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005c84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c89:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c8d:	83 f8 01             	cmp    eax,0x1
c0005c90:	0f 44 d1             	cmove  edx,ecx
c0005c93:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005c97:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c9c:	75 21                	jne    c0005cbf <f_mkfs+0x69a>
c0005c9e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ca3:	89 d8                	mov    eax,ebx
c0005ca5:	e8 6f c3 ff ff       	call   c0002019 <st_dword>
c0005caa:	8d 43 04             	lea    eax,[ebx+0x4]
c0005cad:	83 ca ff             	or     edx,0xffffffff
c0005cb0:	e8 64 c3 ff ff       	call   c0002019 <st_dword>
c0005cb5:	8d 43 08             	lea    eax,[ebx+0x8]
c0005cb8:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005cbd:	eb 06                	jmp    c0005cc5 <f_mkfs+0x6a0>
c0005cbf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005cc3:	89 d8                	mov    eax,ebx
c0005cc5:	e8 4f c3 ff ff       	call   c0002019 <st_dword>
c0005cca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cd2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005cd6:	0f 46 c6             	cmovbe eax,esi
c0005cd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cdd:	50                   	push   eax
c0005cde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ce2:	53                   	push   ebx
c0005ce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ce7:	e8 cf c2 ff ff       	call   c0001fbb <disk_write>
c0005cec:	83 c4 10             	add    esp,0x10
c0005cef:	85 c0                	test   eax,eax
c0005cf1:	0f 85 dc 00 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005cf7:	b9 00 02 00 00       	mov    ecx,0x200
c0005cfc:	31 d2                	xor    edx,edx
c0005cfe:	89 d8                	mov    eax,ebx
c0005d00:	e8 2c c3 ff ff       	call   c0002031 <mem_set>
c0005d05:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005d09:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005d0d:	29 ce                	sub    esi,ecx
c0005d0f:	75 bd                	jne    c0005cce <f_mkfs+0x6a9>
c0005d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d15:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005d1d:	40                   	inc    eax
c0005d1e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005d22:	0f 87 6f ff ff ff    	ja     c0005c97 <f_mkfs+0x672>
c0005d28:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d2d:	83 f8 03             	cmp    eax,0x3
c0005d30:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005d35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d39:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d3d:	0f 46 f7             	cmovbe esi,edi
c0005d40:	56                   	push   esi
c0005d41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d45:	53                   	push   ebx
c0005d46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d4a:	e8 6c c2 ff ff       	call   c0001fbb <disk_write>
c0005d4f:	83 c4 10             	add    esp,0x10
c0005d52:	85 c0                	test   eax,eax
c0005d54:	75 7d                	jne    c0005dd3 <f_mkfs+0x7ae>
c0005d56:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d5a:	29 f7                	sub    edi,esi
c0005d5c:	75 d7                	jne    c0005d35 <f_mkfs+0x710>
c0005d5e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d63:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d68:	83 f8 03             	cmp    eax,0x3
c0005d6b:	74 1e                	je     c0005d8b <f_mkfs+0x766>
c0005d6d:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d75:	b9 06 00 00 00       	mov    ecx,0x6
c0005d7a:	77 0f                	ja     c0005d8b <f_mkfs+0x766>
c0005d7c:	83 f8 02             	cmp    eax,0x2
c0005d7f:	b9 04 00 00 00       	mov    ecx,0x4
c0005d84:	74 05                	je     c0005d8b <f_mkfs+0x766>
c0005d86:	b9 01 00 00 00       	mov    ecx,0x1
c0005d8b:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d90:	75 2a                	jne    c0005dbc <f_mkfs+0x797>
c0005d92:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d9a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d9e:	83 ec 0c             	sub    esp,0xc
c0005da1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005da5:	53                   	push   ebx
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005dae:	e8 87 d2 ff ff       	call   c000303a <create_partition>
c0005db3:	83 c4 10             	add    esp,0x10
c0005db6:	85 c0                	test   eax,eax
c0005db8:	89 c6                	mov    esi,eax
c0005dba:	75 2e                	jne    c0005dea <f_mkfs+0x7c5>
c0005dbc:	50                   	push   eax
c0005dbd:	31 f6                	xor    esi,esi
c0005dbf:	6a 00                	push   0x0
c0005dc1:	6a 00                	push   0x0
c0005dc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005dc7:	e8 05 c2 ff ff       	call   c0001fd1 <disk_ioctl>
c0005dcc:	83 c4 10             	add    esp,0x10
c0005dcf:	85 c0                	test   eax,eax
c0005dd1:	74 17                	je     c0005dea <f_mkfs+0x7c5>
c0005dd3:	85 ed                	test   ebp,ebp
c0005dd5:	75 0c                	jne    c0005de3 <f_mkfs+0x7be>
c0005dd7:	83 ec 0c             	sub    esp,0xc
c0005dda:	53                   	push   ebx
c0005ddb:	e8 6c 00 00 00       	call   c0005e4c <ff_memfree>
c0005de0:	83 c4 10             	add    esp,0x10
c0005de3:	be 01 00 00 00       	mov    esi,0x1
c0005de8:	eb 40                	jmp    c0005e2a <f_mkfs+0x805>
c0005dea:	85 ed                	test   ebp,ebp
c0005dec:	75 3c                	jne    c0005e2a <f_mkfs+0x805>
c0005dee:	83 ec 0c             	sub    esp,0xc
c0005df1:	53                   	push   ebx
c0005df2:	e8 55 00 00 00       	call   c0005e4c <ff_memfree>
c0005df7:	83 c4 10             	add    esp,0x10
c0005dfa:	eb 2e                	jmp    c0005e2a <f_mkfs+0x805>
c0005dfc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e01:	0f 85 46 fb ff ff    	jne    c000594d <f_mkfs+0x328>
c0005e07:	e9 20 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e0c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e11:	0f 85 3c fb ff ff    	jne    c0005953 <f_mkfs+0x32e>
c0005e17:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005e1d:	89 cf                	mov    edi,ecx
c0005e1f:	0f 86 30 fa ff ff    	jbe    c0005855 <f_mkfs+0x230>
c0005e25:	e9 02 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e2a:	83 c4 5c             	add    esp,0x5c
c0005e2d:	89 f0                	mov    eax,esi
c0005e2f:	5b                   	pop    ebx
c0005e30:	5e                   	pop    esi
c0005e31:	5f                   	pop    edi
c0005e32:	5d                   	pop    ebp
c0005e33:	c3                   	ret    

c0005e34 <ff_memalloc>:
c0005e34:	83 ec 0c             	sub    esp,0xc
c0005e37:	83 ec 0c             	sub    esp,0xc
c0005e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e3e:	e8 49 8c 00 00       	call   c000ea8c <malloc>
c0005e43:	83 c4 10             	add    esp,0x10
c0005e46:	83 c4 0c             	add    esp,0xc
c0005e49:	c3                   	ret    
c0005e4a:	66 90                	xchg   ax,ax

c0005e4c <ff_memfree>:
c0005e4c:	83 ec 0c             	sub    esp,0xc
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e56:	e8 41 8c 00 00       	call   c000ea9c <free>
c0005e5b:	83 c4 10             	add    esp,0x10
c0005e5e:	90                   	nop
c0005e5f:	83 c4 0c             	add    esp,0xc
c0005e62:	c3                   	ret    
c0005e63:	90                   	nop

c0005e64 <ff_uni2oem>:
c0005e64:	83 ec 14             	sub    esp,0x14
c0005e67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e6b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e6f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e76:	c7 44 24 0c c0 15 02 c0 	mov    DWORD PTR [esp+0xc],0xc00215c0
c0005e7e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e83:	77 0b                	ja     c0005e90 <ff_uni2oem+0x2c>
c0005e85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e89:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e8e:	eb 64                	jmp    c0005ef4 <ff_uni2oem+0x90>
c0005e90:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e98:	77 5a                	ja     c0005ef4 <ff_uni2oem+0x90>
c0005e9a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e9e:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005ea3:	75 4f                	jne    c0005ef4 <ff_uni2oem+0x90>
c0005ea5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005eac:	eb 12                	jmp    c0005ec0 <ff_uni2oem+0x5c>
c0005eae:	66 90                	xchg   ax,ax
c0005eb0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005eb5:	83 c0 01             	add    eax,0x1
c0005eb8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ec0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ec5:	83 f8 7f             	cmp    eax,0x7f
c0005ec8:	77 1a                	ja     c0005ee4 <ff_uni2oem+0x80>
c0005eca:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ecf:	8d 14 00             	lea    edx,[eax+eax*1]
c0005ed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ed6:	01 d0                	add    eax,edx
c0005ed8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005edb:	0f b7 c0             	movzx  eax,ax
c0005ede:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ee2:	75 cc                	jne    c0005eb0 <ff_uni2oem+0x4c>
c0005ee4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ee9:	83 e8 80             	sub    eax,0xffffff80
c0005eec:	0f b6 c0             	movzx  eax,al
c0005eef:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ef4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ef9:	83 c4 14             	add    esp,0x14
c0005efc:	c3                   	ret    
c0005efd:	8d 76 00             	lea    esi,[esi+0x0]

c0005f00 <ff_oem2uni>:
c0005f00:	83 ec 18             	sub    esp,0x18
c0005f03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005f0b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005f10:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005f14:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005f1b:	c7 44 24 10 c0 15 02 c0 	mov    DWORD PTR [esp+0x10],0xc00215c0
c0005f23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f28:	83 f8 7f             	cmp    eax,0x7f
c0005f2b:	77 0b                	ja     c0005f38 <ff_oem2uni+0x38>
c0005f2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f31:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f36:	eb 34                	jmp    c0005f6c <ff_oem2uni+0x6c>
c0005f38:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f3c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f41:	75 29                	jne    c0005f6c <ff_oem2uni+0x6c>
c0005f43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f48:	3d ff 00 00 00       	cmp    eax,0xff
c0005f4d:	77 1d                	ja     c0005f6c <ff_oem2uni+0x6c>
c0005f4f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f54:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f59:	8d 14 00             	lea    edx,[eax+eax*1]
c0005f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f60:	01 d0                	add    eax,edx
c0005f62:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f65:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f6a:	66 90                	xchg   ax,ax
c0005f6c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f71:	83 c4 18             	add    esp,0x18
c0005f74:	c3                   	ret    
c0005f75:	8d 76 00             	lea    esi,[esi+0x0]

c0005f78 <ff_wtoupper>:
c0005f78:	83 ec 10             	sub    esp,0x10
c0005f7b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f83:	0f 87 a7 01 00 00    	ja     c0006130 <ff_wtoupper+0x1b8>
c0005f89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f8d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f92:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f97:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f9c:	77 0a                	ja     c0005fa8 <ff_wtoupper+0x30>
c0005f9e:	b8 c0 13 02 c0       	mov    eax,0xc00213c0
c0005fa3:	eb 0b                	jmp    c0005fb0 <ff_wtoupper+0x38>
c0005fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0005fa8:	b8 00 13 02 c0       	mov    eax,0xc0021300
c0005fad:	8d 76 00             	lea    esi,[esi+0x0]
c0005fb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fb8:	8d 50 02             	lea    edx,[eax+0x2]
c0005fbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fbf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fc2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005fc7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fcc:	85 c0                	test   eax,eax
c0005fce:	0f 84 50 01 00 00    	je     c0006124 <ff_wtoupper+0x1ac>
c0005fd4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fd9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fde:	39 c2                	cmp    edx,eax
c0005fe0:	0f 82 3e 01 00 00    	jb     c0006124 <ff_wtoupper+0x1ac>
c0005fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fea:	8d 50 02             	lea    edx,[eax+0x2]
c0005fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ff1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ff4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005ff9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ffe:	c1 e8 08             	shr    eax,0x8
c0006001:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0006006:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000600b:	0f b6 c0             	movzx  eax,al
c000600e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006013:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006018:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000601d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0006022:	01 ca                	add    edx,ecx
c0006024:	39 d0                	cmp    eax,edx
c0006026:	0f 8d d4 00 00 00    	jge    c0006100 <ff_wtoupper+0x188>
c000602c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006031:	83 f8 08             	cmp    eax,0x8
c0006034:	0f 87 e6 00 00 00    	ja     c0006120 <ff_wtoupper+0x1a8>
c000603a:	8b 04 85 c0 12 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffded40]
c0006041:	ff e0                	jmp    eax
c0006043:	90                   	nop
c0006044:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006049:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000604e:	29 c2                	sub    edx,eax
c0006050:	89 d0                	mov    eax,edx
c0006052:	8d 14 00             	lea    edx,[eax+eax*1]
c0006055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006059:	01 d0                	add    eax,edx
c000605b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000605e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006063:	e9 94 00 00 00       	jmp    c00060fc <ff_wtoupper+0x184>
c0006068:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c000606d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006071:	89 d1                	mov    ecx,edx
c0006073:	29 c1                	sub    ecx,eax
c0006075:	89 c8                	mov    eax,ecx
c0006077:	83 e0 01             	and    eax,0x1
c000607a:	89 c2                	mov    edx,eax
c000607c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006081:	29 d0                	sub    eax,edx
c0006083:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006088:	eb 72                	jmp    c00060fc <ff_wtoupper+0x184>
c000608a:	66 90                	xchg   ax,ax
c000608c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006091:	83 e8 10             	sub    eax,0x10
c0006094:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006099:	eb 61                	jmp    c00060fc <ff_wtoupper+0x184>
c000609b:	90                   	nop
c000609c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060a1:	83 e8 20             	sub    eax,0x20
c00060a4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a9:	eb 51                	jmp    c00060fc <ff_wtoupper+0x184>
c00060ab:	90                   	nop
c00060ac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060b1:	83 e8 30             	sub    eax,0x30
c00060b4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b9:	eb 41                	jmp    c00060fc <ff_wtoupper+0x184>
c00060bb:	90                   	nop
c00060bc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060c1:	83 e8 1a             	sub    eax,0x1a
c00060c4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c9:	eb 31                	jmp    c00060fc <ff_wtoupper+0x184>
c00060cb:	90                   	nop
c00060cc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060d1:	83 c0 08             	add    eax,0x8
c00060d4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d9:	eb 21                	jmp    c00060fc <ff_wtoupper+0x184>
c00060db:	90                   	nop
c00060dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060e1:	83 e8 50             	sub    eax,0x50
c00060e4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060e9:	eb 11                	jmp    c00060fc <ff_wtoupper+0x184>
c00060eb:	90                   	nop
c00060ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060f1:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060f6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060fb:	90                   	nop
c00060fc:	eb 22                	jmp    c0006120 <ff_wtoupper+0x1a8>
c00060fe:	66 90                	xchg   ax,ax
c0006100:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006105:	85 c0                	test   eax,eax
c0006107:	0f 85 a7 fe ff ff    	jne    c0005fb4 <ff_wtoupper+0x3c>
c000610d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006112:	d1 e0                	shl    eax,1
c0006114:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006118:	e9 97 fe ff ff       	jmp    c0005fb4 <ff_wtoupper+0x3c>
c000611d:	8d 76 00             	lea    esi,[esi+0x0]
c0006120:	90                   	nop
c0006121:	8d 76 00             	lea    esi,[esi+0x0]
c0006124:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006129:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000612d:	8d 76 00             	lea    esi,[esi+0x0]
c0006130:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006134:	83 c4 10             	add    esp,0x10
c0006137:	c3                   	ret    

c0006138 <utf2ucs>:
c0006138:	57                   	push   edi
c0006139:	31 c9                	xor    ecx,ecx
c000613b:	56                   	push   esi
c000613c:	89 d7                	mov    edi,edx
c000613e:	53                   	push   ebx
c000613f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0006143:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006147:	89 de                	mov    esi,ebx
c0006149:	c1 fe 08             	sar    esi,0x8
c000614c:	89 f2                	mov    edx,esi
c000614e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006151:	41                   	inc    ecx
c0006152:	85 db                	test   ebx,ebx
c0006154:	75 e9                	jne    c000613f <utf2ucs+0x7>
c0006156:	5b                   	pop    ebx
c0006157:	5e                   	pop    esi
c0006158:	5f                   	pop    edi
c0006159:	c3                   	ret    

c000615a <ucs2utfn>:
c000615a:	83 e1 fe             	and    ecx,0xfffffffe
c000615d:	01 d1                	add    ecx,edx
c000615f:	39 d1                	cmp    ecx,edx
c0006161:	75 04                	jne    c0006167 <ucs2utfn+0xd>
c0006163:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006166:	c3                   	ret    
c0006167:	57                   	push   edi
c0006168:	56                   	push   esi
c0006169:	53                   	push   ebx
c000616a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c000616d:	83 c2 02             	add    edx,0x2
c0006170:	89 de                	mov    esi,ebx
c0006172:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006176:	c1 e6 08             	shl    esi,0x8
c0006179:	09 f3                	or     ebx,esi
c000617b:	83 fb 3b             	cmp    ebx,0x3b
c000617e:	74 50                	je     c00061d0 <ucs2utfn+0x76>
c0006180:	83 fb 7f             	cmp    ebx,0x7f
c0006183:	7f 05                	jg     c000618a <ucs2utfn+0x30>
c0006185:	88 18                	mov    BYTE PTR [eax],bl
c0006187:	40                   	inc    eax
c0006188:	eb 42                	jmp    c00061cc <ucs2utfn+0x72>
c000618a:	89 df                	mov    edi,ebx
c000618c:	89 de                	mov    esi,ebx
c000618e:	c1 fe 06             	sar    esi,0x6
c0006191:	83 e7 3f             	and    edi,0x3f
c0006194:	83 cf 80             	or     edi,0xffffff80
c0006197:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000619d:	7f 12                	jg     c00061b1 <ucs2utfn+0x57>
c000619f:	83 ce c0             	or     esi,0xffffffc0
c00061a2:	83 c0 02             	add    eax,0x2
c00061a5:	89 f3                	mov    ebx,esi
c00061a7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061aa:	89 fb                	mov    ebx,edi
c00061ac:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061af:	eb 1b                	jmp    c00061cc <ucs2utfn+0x72>
c00061b1:	c1 fb 0c             	sar    ebx,0xc
c00061b4:	83 e6 3f             	and    esi,0x3f
c00061b7:	83 cb e0             	or     ebx,0xffffffe0
c00061ba:	83 ce 80             	or     esi,0xffffff80
c00061bd:	88 18                	mov    BYTE PTR [eax],bl
c00061bf:	89 f3                	mov    ebx,esi
c00061c1:	83 c0 03             	add    eax,0x3
c00061c4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061c7:	89 fb                	mov    ebx,edi
c00061c9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061cc:	39 d1                	cmp    ecx,edx
c00061ce:	75 9a                	jne    c000616a <ucs2utfn+0x10>
c00061d0:	5b                   	pop    ebx
c00061d1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061d4:	5e                   	pop    esi
c00061d5:	5f                   	pop    edi
c00061d6:	c3                   	ret    

c00061d7 <isjoliet>:
c00061d7:	31 d2                	xor    edx,edx
c00061d9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061dc:	75 26                	jne    c0006204 <isjoliet+0x2d>
c00061de:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061e2:	75 20                	jne    c0006204 <isjoliet+0x2d>
c00061e4:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061e8:	ba 02 00 00 00       	mov    edx,0x2
c00061ed:	83 f8 43             	cmp    eax,0x43
c00061f0:	74 12                	je     c0006204 <isjoliet+0x2d>
c00061f2:	83 f8 45             	cmp    eax,0x45
c00061f5:	ba 03 00 00 00       	mov    edx,0x3
c00061fa:	74 08                	je     c0006204 <isjoliet+0x2d>
c00061fc:	31 d2                	xor    edx,edx
c00061fe:	83 f8 40             	cmp    eax,0x40
c0006201:	0f 94 c2             	sete   dl
c0006204:	89 d0                	mov    eax,edx
c0006206:	c3                   	ret    

c0006207 <htohl_32>:
c0006207:	8b 00                	mov    eax,DWORD PTR [eax]
c0006209:	c3                   	ret    

c000620a <iso_733>:
c000620a:	eb fb                	jmp    c0006207 <htohl_32>

c000620c <bgrad_cache>:
c000620c:	83 fa 0e             	cmp    edx,0xe
c000620f:	77 16                	ja     c0006227 <bgrad_cache+0x1b>
c0006211:	53                   	push   ebx
c0006212:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006215:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006219:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000621c:	42                   	inc    edx
c000621d:	83 fa 0f             	cmp    edx,0xf
c0006220:	75 f3                	jne    c0006215 <bgrad_cache+0x9>
c0006222:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006225:	5b                   	pop    ebx
c0006226:	c3                   	ret    
c0006227:	c3                   	ret    

c0006228 <ucscompare>:
c0006228:	55                   	push   ebp
c0006229:	57                   	push   edi
c000622a:	89 c7                	mov    edi,eax
c000622c:	56                   	push   esi
c000622d:	89 d6                	mov    esi,edx
c000622f:	53                   	push   ebx
c0006230:	31 d2                	xor    edx,edx
c0006232:	83 ec 1c             	sub    esp,0x1c
c0006235:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006239:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000623e:	c1 e3 08             	shl    ebx,0x8
c0006241:	09 c3                	or     ebx,eax
c0006243:	39 ca                	cmp    edx,ecx
c0006245:	7d 42                	jge    c0006289 <ucscompare+0x61>
c0006247:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000624b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000624f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006253:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006258:	c1 e0 08             	shl    eax,0x8
c000625b:	09 e8                	or     eax,ebp
c000625d:	83 f8 3b             	cmp    eax,0x3b
c0006260:	74 27                	je     c0006289 <ucscompare+0x61>
c0006262:	83 ec 0c             	sub    esp,0xc
c0006265:	50                   	push   eax
c0006266:	e8 15 a7 ff ff       	call   c0000980 <tolower>
c000626b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000626e:	89 c5                	mov    ebp,eax
c0006270:	e8 0b a7 ff ff       	call   c0000980 <tolower>
c0006275:	83 c4 10             	add    esp,0x10
c0006278:	39 c5                	cmp    ebp,eax
c000627a:	75 20                	jne    c000629c <ucscompare+0x74>
c000627c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006280:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006284:	83 c2 02             	add    edx,0x2
c0006287:	eb ac                	jmp    c0006235 <ucscompare+0xd>
c0006289:	83 fb 2f             	cmp    ebx,0x2f
c000628c:	0f 95 c2             	setne  dl
c000628f:	31 c0                	xor    eax,eax
c0006291:	85 db                	test   ebx,ebx
c0006293:	0f 95 c0             	setne  al
c0006296:	21 d0                	and    eax,edx
c0006298:	f7 d8                	neg    eax
c000629a:	eb 03                	jmp    c000629f <ucscompare+0x77>
c000629c:	83 c8 ff             	or     eax,0xffffffff
c000629f:	83 c4 1c             	add    esp,0x1c
c00062a2:	5b                   	pop    ebx
c00062a3:	5e                   	pop    esi
c00062a4:	5f                   	pop    edi
c00062a5:	5d                   	pop    ebp
c00062a6:	c3                   	ret    

c00062a7 <fncompare>:
c00062a7:	55                   	push   ebp
c00062a8:	57                   	push   edi
c00062a9:	89 c7                	mov    edi,eax
c00062ab:	56                   	push   esi
c00062ac:	89 ce                	mov    esi,ecx
c00062ae:	53                   	push   ebx
c00062af:	31 db                	xor    ebx,ebx
c00062b1:	83 ec 1c             	sub    esp,0x1c
c00062b4:	39 d3                	cmp    ebx,edx
c00062b6:	7d 45                	jge    c00062fd <fncompare+0x56>
c00062b8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00062bc:	83 f8 3b             	cmp    eax,0x3b
c00062bf:	74 3c                	je     c00062fd <fncompare+0x56>
c00062c1:	83 f8 2e             	cmp    eax,0x2e
c00062c4:	75 0e                	jne    c00062d4 <fncompare+0x2d>
c00062c6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062c9:	39 d9                	cmp    ecx,ebx
c00062cb:	74 30                	je     c00062fd <fncompare+0x56>
c00062cd:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062d2:	74 29                	je     c00062fd <fncompare+0x56>
c00062d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062d8:	83 ec 0c             	sub    esp,0xc
c00062db:	50                   	push   eax
c00062dc:	e8 9f a6 ff ff       	call   c0000980 <tolower>
c00062e1:	89 c5                	mov    ebp,eax
c00062e3:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00062ea:	e8 91 a6 ff ff       	call   c0000980 <tolower>
c00062ef:	83 c4 10             	add    esp,0x10
c00062f2:	39 c5                	cmp    ebp,eax
c00062f4:	75 1e                	jne    c0006314 <fncompare+0x6d>
c00062f6:	43                   	inc    ebx
c00062f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062fb:	eb b7                	jmp    c00062b4 <fncompare+0xd>
c00062fd:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006301:	83 fa 2f             	cmp    edx,0x2f
c0006304:	0f 95 c1             	setne  cl
c0006307:	31 c0                	xor    eax,eax
c0006309:	85 d2                	test   edx,edx
c000630b:	0f 95 c0             	setne  al
c000630e:	21 c8                	and    eax,ecx
c0006310:	f7 d8                	neg    eax
c0006312:	eb 03                	jmp    c0006317 <fncompare+0x70>
c0006314:	83 c8 ff             	or     eax,0xffffffff
c0006317:	83 c4 1c             	add    esp,0x1c
c000631a:	5b                   	pop    ebx
c000631b:	5e                   	pop    esi
c000631c:	5f                   	pop    edi
c000631d:	5d                   	pop    ebp
c000631e:	c3                   	ret    

c000631f <bclear_cache>:
c000631f:	83 ec 18             	sub    esp,0x18
c0006322:	68 c0 16 02 c0       	push   0xc00216c0
c0006327:	e8 c4 4e 01 00       	call   c001b1f0 <iso_kprintf>
c000632c:	83 c4 10             	add    esp,0x10
c000632f:	31 c0                	xor    eax,eax
c0006331:	8b 14 85 20 70 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8fe0]
c0006338:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000633e:	8b 14 85 80 70 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8f80]
c0006345:	40                   	inc    eax
c0006346:	83 f8 10             	cmp    eax,0x10
c0006349:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000634f:	75 e0                	jne    c0006331 <bclear_cache+0x12>
c0006351:	83 c4 0c             	add    esp,0xc
c0006354:	c3                   	ret    

c0006355 <bclear>:
c0006355:	eb c8                	jmp    c000631f <bclear_cache>

c0006357 <iso_break_all>:
c0006357:	83 ec 18             	sub    esp,0x18
c000635a:	68 ce 16 02 c0       	push   0xc00216ce
c000635f:	e8 8c 4e 01 00       	call   c001b1f0 <iso_kprintf>
c0006364:	83 c4 10             	add    esp,0x10
c0006367:	31 c0                	xor    eax,eax
c0006369:	c7 80 d0 75 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd8a30],0x1
c0006373:	05 94 00 00 00       	add    eax,0x94
c0006378:	3d 40 09 00 00       	cmp    eax,0x940
c000637d:	75 ea                	jne    c0006369 <iso_break_all+0x12>
c000637f:	83 c4 0c             	add    esp,0xc
c0006382:	c3                   	ret    

c0006383 <isoReadDiscSector>:
c0006383:	83 ec 0c             	sub    esp,0xc
c0006386:	0f be 05 60 70 02 c0 	movsx  eax,BYTE PTR ds:0xc0027060
c000638d:	50                   	push   eax
c000638e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000639a:	e8 f5 4d 01 00       	call   c001b194 <isoReadDiscSectorHelper>
c000639f:	83 c4 1c             	add    esp,0x1c
c00063a2:	c3                   	ret    

c00063a3 <bread_cache>:
c00063a3:	55                   	push   ebp
c00063a4:	57                   	push   edi
c00063a5:	89 d7                	mov    edi,edx
c00063a7:	56                   	push   esi
c00063a8:	ba 0f 00 00 00       	mov    edx,0xf
c00063ad:	53                   	push   ebx
c00063ae:	89 c6                	mov    esi,eax
c00063b0:	83 ec 0c             	sub    esp,0xc
c00063b3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00063b6:	39 38                	cmp    DWORD PTR [eax],edi
c00063b8:	74 3c                	je     c00063f6 <bread_cache+0x53>
c00063ba:	4a                   	dec    edx
c00063bb:	83 fa ff             	cmp    edx,0xffffffff
c00063be:	75 f3                	jne    c00063b3 <bread_cache+0x10>
c00063c0:	31 db                	xor    ebx,ebx
c00063c2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063c5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063c8:	74 08                	je     c00063d2 <bread_cache+0x2f>
c00063ca:	43                   	inc    ebx
c00063cb:	83 fb 10             	cmp    ebx,0x10
c00063ce:	75 f2                	jne    c00063c2 <bread_cache+0x1f>
c00063d0:	31 db                	xor    ebx,ebx
c00063d2:	50                   	push   eax
c00063d3:	6a 01                	push   0x1
c00063d5:	57                   	push   edi
c00063d6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063dc:	83 c0 04             	add    eax,0x4
c00063df:	50                   	push   eax
c00063e0:	e8 9e ff ff ff       	call   c0006383 <isoReadDiscSector>
c00063e5:	83 c4 10             	add    esp,0x10
c00063e8:	83 c9 ff             	or     ecx,0xffffffff
c00063eb:	85 c0                	test   eax,eax
c00063ed:	78 13                	js     c0006402 <bread_cache+0x5f>
c00063ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063f2:	89 da                	mov    edx,ebx
c00063f4:	89 38                	mov    DWORD PTR [eax],edi
c00063f6:	89 f0                	mov    eax,esi
c00063f8:	e8 0f fe ff ff       	call   c000620c <bgrad_cache>
c00063fd:	b9 0f 00 00 00       	mov    ecx,0xf
c0006402:	83 c4 0c             	add    esp,0xc
c0006405:	89 c8                	mov    eax,ecx
c0006407:	5b                   	pop    ebx
c0006408:	5e                   	pop    esi
c0006409:	5f                   	pop    edi
c000640a:	5d                   	pop    ebp
c000640b:	c3                   	ret    

c000640c <biread>:
c000640c:	89 c2                	mov    edx,eax
c000640e:	b8 80 70 02 c0       	mov    eax,0xc0027080
c0006413:	eb 8e                	jmp    c00063a3 <bread_cache>

c0006415 <bdread>:
c0006415:	89 c2                	mov    edx,eax
c0006417:	b8 20 70 02 c0       	mov    eax,0xc0027020
c000641c:	eb 85                	jmp    c00063a3 <bread_cache>

c000641e <strnicmp>:
c000641e:	55                   	push   ebp
c000641f:	57                   	push   edi
c0006420:	31 ff                	xor    edi,edi
c0006422:	56                   	push   esi
c0006423:	53                   	push   ebx
c0006424:	83 ec 0c             	sub    esp,0xc
c0006427:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000642b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000642f:	74 43                	je     c0006474 <strnicmp+0x56>
c0006431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006435:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006439:	85 c0                	test   eax,eax
c000643b:	74 37                	je     c0006474 <strnicmp+0x56>
c000643d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006441:	85 d2                	test   edx,edx
c0006443:	74 2f                	je     c0006474 <strnicmp+0x56>
c0006445:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006448:	39 d0                	cmp    eax,edx
c000644a:	75 04                	jne    c0006450 <strnicmp+0x32>
c000644c:	89 ef                	mov    edi,ebp
c000644e:	eb db                	jmp    c000642b <strnicmp+0xd>
c0006450:	83 ec 0c             	sub    esp,0xc
c0006453:	50                   	push   eax
c0006454:	e8 27 a5 ff ff       	call   c0000980 <tolower>
c0006459:	89 c3                	mov    ebx,eax
c000645b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000645f:	89 ef                	mov    edi,ebp
c0006461:	89 04 24             	mov    DWORD PTR [esp],eax
c0006464:	e8 17 a5 ff ff       	call   c0000980 <tolower>
c0006469:	83 c4 10             	add    esp,0x10
c000646c:	29 c3                	sub    ebx,eax
c000646e:	89 d8                	mov    eax,ebx
c0006470:	74 b9                	je     c000642b <strnicmp+0xd>
c0006472:	eb 02                	jmp    c0006476 <strnicmp+0x58>
c0006474:	31 c0                	xor    eax,eax
c0006476:	83 c4 0c             	add    esp,0xc
c0006479:	5b                   	pop    ebx
c000647a:	5e                   	pop    esi
c000647b:	5f                   	pop    edi
c000647c:	5d                   	pop    ebp
c000647d:	c3                   	ret    

c000647e <find_object>:
c000647e:	55                   	push   ebp
c000647f:	57                   	push   edi
c0006480:	89 c7                	mov    edi,eax
c0006482:	56                   	push   esi
c0006483:	53                   	push   ebx
c0006484:	89 d3                	mov    ebx,edx
c0006486:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000648c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0006490:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006497:	83 3d b4 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027eb4,0x0
c000649e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00064a2:	74 0b                	je     c00064af <find_object+0x31>
c00064a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00064a8:	89 fa                	mov    edx,edi
c00064aa:	e8 89 fc ff ff       	call   c0006138 <utf2ucs>
c00064af:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00064b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064b6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00064bb:	7e 11                	jle    c00064ce <find_object+0x50>
c00064bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064c1:	e8 46 ff ff ff       	call   c000640c <biread>
c00064c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00064ca:	85 c0                	test   eax,eax
c00064cc:	79 07                	jns    c00064d5 <find_object+0x57>
c00064ce:	31 db                	xor    ebx,ebx
c00064d0:	e9 47 01 00 00       	jmp    c000661c <find_object+0x19e>
c00064d5:	31 ed                	xor    ebp,ebp
c00064d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064db:	8b 04 85 80 70 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8f80]
c00064e2:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c00064e6:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064e9:	85 f6                	test   esi,esi
c00064eb:	75 0e                	jne    c00064fb <find_object+0x7d>
c00064ed:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00064f1:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c00064f9:	eb bb                	jmp    c00064b6 <find_object+0x38>
c00064fb:	8b 0d b4 7e 02 c0    	mov    ecx,DWORD PTR ds:0xc0027eb4
c0006501:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006505:	85 c9                	test   ecx,ecx
c0006507:	89 d0                	mov    eax,edx
c0006509:	74 2b                	je     c0006536 <find_object+0xb8>
c000650b:	8d 43 21             	lea    eax,[ebx+0x21]
c000650e:	89 d1                	mov    ecx,edx
c0006510:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006514:	e8 0f fd ff ff       	call   c0006228 <ucscompare>
c0006519:	85 c0                	test   eax,eax
c000651b:	0f 84 cd 00 00 00    	je     c00065ee <find_object+0x170>
c0006521:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006524:	01 c5                	add    ebp,eax
c0006526:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000652c:	7f bf                	jg     c00064ed <find_object+0x6f>
c000652e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006532:	7f a3                	jg     c00064d7 <find_object+0x59>
c0006534:	eb b7                	jmp    c00064ed <find_object+0x6f>
c0006536:	29 d6                	sub    esi,edx
c0006538:	a8 01                	test   al,0x1
c000653a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000653e:	74 05                	je     c0006545 <find_object+0xc7>
c0006540:	83 ee 21             	sub    esi,0x21
c0006543:	eb 6a                	jmp    c00065af <find_object+0x131>
c0006545:	42                   	inc    edx
c0006546:	83 ee 22             	sub    esi,0x22
c0006549:	eb 64                	jmp    c00065af <find_object+0x131>
c000654b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000654e:	48                   	dec    eax
c000654f:	3c 01                	cmp    al,0x1
c0006551:	77 61                	ja     c00065b4 <find_object+0x136>
c0006553:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006557:	50                   	push   eax
c0006558:	6a 02                	push   0x2
c000655a:	68 dd 16 02 c0       	push   0xc00216dd
c000655f:	52                   	push   edx
c0006560:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006564:	e8 a7 a2 ff ff       	call   c0000810 <strncmp>
c0006569:	83 c4 10             	add    esp,0x10
c000656c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006570:	85 c0                	test   eax,eax
c0006572:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006576:	75 2f                	jne    c00065a7 <find_object+0x129>
c0006578:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000657c:	50                   	push   eax
c000657d:	8d 42 05             	lea    eax,[edx+0x5]
c0006580:	83 e9 05             	sub    ecx,0x5
c0006583:	51                   	push   ecx
c0006584:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0006588:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000658c:	50                   	push   eax
c000658d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006591:	50                   	push   eax
c0006592:	e8 f9 a0 ff ff       	call   c0000690 <strncpy>
c0006597:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000659b:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00065a0:	83 c4 10             	add    esp,0x10
c00065a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00065a7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00065ab:	29 c6                	sub    esi,eax
c00065ad:	01 c2                	add    edx,eax
c00065af:	83 fe 03             	cmp    esi,0x3
c00065b2:	7f 97                	jg     c000654b <find_object+0xcd>
c00065b4:	85 c9                	test   ecx,ecx
c00065b6:	7e 40                	jle    c00065f8 <find_object+0x17a>
c00065b8:	51                   	push   ecx
c00065b9:	51                   	push   ecx
c00065ba:	6a 2f                	push   0x2f
c00065bc:	57                   	push   edi
c00065bd:	e8 0e a2 ff ff       	call   c00007d0 <strchr>
c00065c2:	83 c4 10             	add    esp,0x10
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 04                	je     c00065cd <find_object+0x14f>
c00065c9:	29 f8                	sub    eax,edi
c00065cb:	eb 0c                	jmp    c00065d9 <find_object+0x15b>
c00065cd:	83 ec 0c             	sub    esp,0xc
c00065d0:	57                   	push   edi
c00065d1:	e8 aa 9f ff ff       	call   c0000580 <strlen>
c00065d6:	83 c4 10             	add    esp,0x10
c00065d9:	52                   	push   edx
c00065da:	50                   	push   eax
c00065db:	57                   	push   edi
c00065dc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065e0:	50                   	push   eax
c00065e1:	e8 38 fe ff ff       	call   c000641e <strnicmp>
c00065e6:	83 c4 10             	add    esp,0x10
c00065e9:	e9 2b ff ff ff       	jmp    c0006519 <find_object+0x9b>
c00065ee:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065f2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00065f6:	eb 1e                	jmp    c0006616 <find_object+0x198>
c00065f8:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065fc:	8d 43 21             	lea    eax,[ebx+0x21]
c00065ff:	89 f9                	mov    ecx,edi
c0006601:	e8 a1 fc ff ff       	call   c00062a7 <fncompare>
c0006606:	85 c0                	test   eax,eax
c0006608:	0f 85 13 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000660e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006612:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006616:	0f 85 05 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000661c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006622:	89 d8                	mov    eax,ebx
c0006624:	5b                   	pop    ebx
c0006625:	5e                   	pop    esi
c0006626:	5f                   	pop    edi
c0006627:	5d                   	pop    ebp
c0006628:	c3                   	ret    

c0006629 <find_object_path>:
c0006629:	55                   	push   ebp
c000662a:	57                   	push   edi
c000662b:	89 d7                	mov    edi,edx
c000662d:	56                   	push   esi
c000662e:	89 c6                	mov    esi,eax
c0006630:	53                   	push   ebx
c0006631:	89 cb                	mov    ebx,ecx
c0006633:	83 ec 0c             	sub    esp,0xc
c0006636:	50                   	push   eax
c0006637:	50                   	push   eax
c0006638:	6a 2f                	push   0x2f
c000663a:	56                   	push   esi
c000663b:	e8 90 a1 ff ff       	call   c00007d0 <strchr>
c0006640:	83 c4 10             	add    esp,0x10
c0006643:	85 c0                	test   eax,eax
c0006645:	89 c5                	mov    ebp,eax
c0006647:	74 3a                	je     c0006683 <find_object_path+0x5a>
c0006649:	39 ee                	cmp    esi,ebp
c000664b:	74 31                	je     c000667e <find_object_path+0x55>
c000664d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006650:	e8 b5 fb ff ff       	call   c000620a <iso_733>
c0006655:	89 c2                	mov    edx,eax
c0006657:	8d 43 02             	lea    eax,[ebx+0x2]
c000665a:	e8 ab fb ff ff       	call   c000620a <iso_733>
c000665f:	83 ec 0c             	sub    esp,0xc
c0006662:	52                   	push   edx
c0006663:	89 c1                	mov    ecx,eax
c0006665:	ba 01 00 00 00       	mov    edx,0x1
c000666a:	89 f0                	mov    eax,esi
c000666c:	e8 0d fe ff ff       	call   c000647e <find_object>
c0006671:	83 c4 10             	add    esp,0x10
c0006674:	85 c0                	test   eax,eax
c0006676:	89 c3                	mov    ebx,eax
c0006678:	75 04                	jne    c000667e <find_object_path+0x55>
c000667a:	31 db                	xor    ebx,ebx
c000667c:	eb 36                	jmp    c00066b4 <find_object_path+0x8b>
c000667e:	8d 75 01             	lea    esi,[ebp+0x1]
c0006681:	eb b3                	jmp    c0006636 <find_object_path+0xd>
c0006683:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006686:	74 28                	je     c00066b0 <find_object_path+0x87>
c0006688:	8d 43 0a             	lea    eax,[ebx+0xa]
c000668b:	e8 7a fb ff ff       	call   c000620a <iso_733>
c0006690:	89 c2                	mov    edx,eax
c0006692:	8d 43 02             	lea    eax,[ebx+0x2]
c0006695:	e8 70 fb ff ff       	call   c000620a <iso_733>
c000669a:	83 ec 0c             	sub    esp,0xc
c000669d:	52                   	push   edx
c000669e:	89 c1                	mov    ecx,eax
c00066a0:	89 fa                	mov    edx,edi
c00066a2:	89 f0                	mov    eax,esi
c00066a4:	e8 d5 fd ff ff       	call   c000647e <find_object>
c00066a9:	83 c4 10             	add    esp,0x10
c00066ac:	89 c3                	mov    ebx,eax
c00066ae:	eb 04                	jmp    c00066b4 <find_object_path+0x8b>
c00066b0:	85 ff                	test   edi,edi
c00066b2:	74 c6                	je     c000667a <find_object_path+0x51>
c00066b4:	83 c4 0c             	add    esp,0xc
c00066b7:	89 d8                	mov    eax,ebx
c00066b9:	5b                   	pop    ebx
c00066ba:	5e                   	pop    esi
c00066bb:	5f                   	pop    edi
c00066bc:	5d                   	pop    ebp
c00066bd:	c3                   	ret    

c00066be <stricmp>:
c00066be:	57                   	push   edi
c00066bf:	56                   	push   esi
c00066c0:	31 f6                	xor    esi,esi
c00066c2:	53                   	push   ebx
c00066c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c7:	83 ec 0c             	sub    esp,0xc
c00066ca:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066d2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066d6:	46                   	inc    esi
c00066d7:	50                   	push   eax
c00066d8:	e8 83 a2 ff ff       	call   c0000960 <toupper>
c00066dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00066e0:	e8 9b a2 ff ff       	call   c0000980 <tolower>
c00066e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066e8:	89 c3                	mov    ebx,eax
c00066ea:	e8 71 a2 ff ff       	call   c0000960 <toupper>
c00066ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00066f2:	e8 89 a2 ff ff       	call   c0000980 <tolower>
c00066f7:	83 c4 10             	add    esp,0x10
c00066fa:	39 c3                	cmp    ebx,eax
c00066fc:	75 04                	jne    c0006702 <stricmp+0x44>
c00066fe:	85 db                	test   ebx,ebx
c0006700:	75 c1                	jne    c00066c3 <stricmp+0x5>
c0006702:	29 c3                	sub    ebx,eax
c0006704:	89 d8                	mov    eax,ebx
c0006706:	5b                   	pop    ebx
c0006707:	5e                   	pop    esi
c0006708:	5f                   	pop    edi
c0006709:	c3                   	ret    

c000670a <iso_open>:
c000670a:	57                   	push   edi
c000670b:	31 c0                	xor    eax,eax
c000670d:	56                   	push   esi
c000670e:	b9 80 7e 02 c0       	mov    ecx,0xc0027e80
c0006713:	53                   	push   ebx
c0006714:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006719:	0f 95 c0             	setne  al
c000671c:	89 c2                	mov    edx,eax
c000671e:	89 c6                	mov    esi,eax
c0006720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006724:	e8 00 ff ff ff       	call   c0006629 <find_object_path>
c0006729:	83 ca ff             	or     edx,0xffffffff
c000672c:	85 c0                	test   eax,eax
c000672e:	74 5e                	je     c000678e <iso_open+0x84>
c0006730:	89 c1                	mov    ecx,eax
c0006732:	31 d2                	xor    edx,edx
c0006734:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000673a:	83 bf 40 75 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd8ac0],0x0
c0006741:	75 42                	jne    c0006785 <iso_open+0x7b>
c0006743:	c7 87 40 75 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd8ac0],0xffffffff
c000674d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006750:	e8 b5 fa ff ff       	call   c000620a <iso_733>
c0006755:	89 b7 44 75 02 c0    	mov    DWORD PTR [edi-0x3ffd8abc],esi
c000675b:	c7 87 48 75 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd8ab8],0x0
c0006765:	89 87 40 75 02 c0    	mov    DWORD PTR [edi-0x3ffd8ac0],eax
c000676b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000676e:	e8 97 fa ff ff       	call   c000620a <iso_733>
c0006773:	c7 87 d0 75 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd8a30],0x0
c000677d:	89 87 4c 75 02 c0    	mov    DWORD PTR [edi-0x3ffd8ab4],eax
c0006783:	eb 09                	jmp    c000678e <iso_open+0x84>
c0006785:	42                   	inc    edx
c0006786:	83 fa 10             	cmp    edx,0x10
c0006789:	75 a9                	jne    c0006734 <iso_open+0x2a>
c000678b:	83 ca ff             	or     edx,0xffffffff
c000678e:	5b                   	pop    ebx
c000678f:	89 d0                	mov    eax,edx
c0006791:	5e                   	pop    esi
c0006792:	5f                   	pop    edi
c0006793:	c3                   	ret    

c0006794 <iso_close>:
c0006794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006798:	83 f8 0f             	cmp    eax,0xf
c000679b:	7f 10                	jg     c00067ad <iso_close+0x19>
c000679d:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00067a3:	c7 80 40 75 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8ac0],0x0
c00067ad:	e9 6d fb ff ff       	jmp    c000631f <bclear_cache>

c00067b2 <iso_read>:
c00067b2:	55                   	push   ebp
c00067b3:	57                   	push   edi
c00067b4:	56                   	push   esi
c00067b5:	53                   	push   ebx
c00067b6:	83 ec 1c             	sub    esp,0x1c
c00067b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067bd:	83 fd 0f             	cmp    ebp,0xf
c00067c0:	7e 0a                	jle    c00067cc <iso_read+0x1a>
c00067c2:	83 c8 ff             	or     eax,0xffffffff
c00067c5:	89 c2                	mov    edx,eax
c00067c7:	e9 f4 00 00 00       	jmp    c00068c0 <iso_read+0x10e>
c00067cc:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067d2:	83 bd 40 75 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd8ac0],0x0
c00067d9:	74 e7                	je     c00067c2 <iso_read+0x10>
c00067db:	8b 95 d0 75 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd8a30]
c00067e1:	85 d2                	test   edx,edx
c00067e3:	75 dd                	jne    c00067c2 <iso_read+0x10>
c00067e5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067ea:	0f 84 cd 00 00 00    	je     c00068bd <iso_read+0x10b>
c00067f0:	8b 85 48 75 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd8ab8]
c00067f6:	8b 9d 4c 75 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd8ab4]
c00067fc:	29 c3                	sub    ebx,eax
c00067fe:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006802:	89 d9                	mov    ecx,ebx
c0006804:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006809:	85 c9                	test   ecx,ecx
c000680b:	0f 84 ac 00 00 00    	je     c00068bd <iso_read+0x10b>
c0006811:	89 c6                	mov    esi,eax
c0006813:	bb 00 08 00 00       	mov    ebx,0x800
c0006818:	c1 e8 0b             	shr    eax,0xb
c000681b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006821:	03 85 40 75 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd8ac0]
c0006827:	29 f3                	sub    ebx,esi
c0006829:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000682f:	75 3f                	jne    c0006870 <iso_read+0xbe>
c0006831:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006837:	7e 37                	jle    c0006870 <iso_read+0xbe>
c0006839:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000683f:	be 20 00 00 00       	mov    esi,0x20
c0006844:	7f 05                	jg     c000684b <iso_read+0x99>
c0006846:	89 ce                	mov    esi,ecx
c0006848:	c1 fe 0b             	sar    esi,0xb
c000684b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000684f:	89 f3                	mov    ebx,esi
c0006851:	52                   	push   edx
c0006852:	56                   	push   esi
c0006853:	50                   	push   eax
c0006854:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006858:	c1 e3 0b             	shl    ebx,0xb
c000685b:	e8 23 fb ff ff       	call   c0006383 <isoReadDiscSector>
c0006860:	83 c4 10             	add    esp,0x10
c0006863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006867:	85 c0                	test   eax,eax
c0006869:	7f 3d                	jg     c00068a8 <iso_read+0xf6>
c000686b:	e9 52 ff ff ff       	jmp    c00067c2 <iso_read+0x10>
c0006870:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006874:	39 d9                	cmp    ecx,ebx
c0006876:	0f 4e d9             	cmovle ebx,ecx
c0006879:	e8 97 fb ff ff       	call   c0006415 <bdread>
c000687e:	85 c0                	test   eax,eax
c0006880:	0f 88 3c ff ff ff    	js     c00067c2 <iso_read+0x10>
c0006886:	8b 0c 85 20 70 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8fe0]
c000688d:	8b 85 48 75 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd8ab8]
c0006893:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006897:	25 ff 07 00 00       	and    eax,0x7ff
c000689c:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00068a0:	89 d9                	mov    ecx,ebx
c00068a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00068a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00068a8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00068ac:	01 da                	add    edx,ebx
c00068ae:	01 9d 48 75 02 c0    	add    DWORD PTR [ebp-0x3ffd8ab8],ebx
c00068b4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068b8:	e9 28 ff ff ff       	jmp    c00067e5 <iso_read+0x33>
c00068bd:	89 d0                	mov    eax,edx
c00068bf:	99                   	cdq    
c00068c0:	83 c4 1c             	add    esp,0x1c
c00068c3:	5b                   	pop    ebx
c00068c4:	5e                   	pop    esi
c00068c5:	5f                   	pop    edi
c00068c6:	5d                   	pop    ebp
c00068c7:	c3                   	ret    

c00068c8 <iso_seek>:
c00068c8:	55                   	push   ebp
c00068c9:	83 c8 ff             	or     eax,0xffffffff
c00068cc:	57                   	push   edi
c00068cd:	89 c2                	mov    edx,eax
c00068cf:	56                   	push   esi
c00068d0:	53                   	push   ebx
c00068d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068dd:	83 fe 0f             	cmp    esi,0xf
c00068e0:	7f 65                	jg     c0006947 <iso_seek+0x7f>
c00068e2:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068e8:	83 bd 40 75 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd8ac0],0x0
c00068ef:	8d 8d 40 75 02 c0    	lea    ecx,[ebp-0x3ffd8ac0]
c00068f5:	74 50                	je     c0006947 <iso_seek+0x7f>
c00068f7:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068fe:	75 47                	jne    c0006947 <iso_seek+0x7f>
c0006900:	83 fb 01             	cmp    ebx,0x1
c0006903:	74 0e                	je     c0006913 <iso_seek+0x4b>
c0006905:	83 fb 02             	cmp    ebx,0x2
c0006908:	74 0e                	je     c0006918 <iso_seek+0x50>
c000690a:	85 db                	test   ebx,ebx
c000690c:	75 39                	jne    c0006947 <iso_seek+0x7f>
c000690e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006911:	eb 0d                	jmp    c0006920 <iso_seek+0x58>
c0006913:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006916:	eb 08                	jmp    c0006920 <iso_seek+0x58>
c0006918:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000691b:	01 f8                	add    eax,edi
c000691d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006920:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006926:	8b 88 4c 75 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd8ab4]
c000692c:	05 40 75 02 c0       	add    eax,0xc0027540
c0006931:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006934:	76 03                	jbe    c0006939 <iso_seek+0x71>
c0006936:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006939:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000693f:	8b 82 48 75 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd8ab8]
c0006945:	31 d2                	xor    edx,edx
c0006947:	5b                   	pop    ebx
c0006948:	5e                   	pop    esi
c0006949:	5f                   	pop    edi
c000694a:	5d                   	pop    ebp
c000694b:	c3                   	ret    

c000694c <iso_tell>:
c000694c:	53                   	push   ebx
c000694d:	83 c8 ff             	or     eax,0xffffffff
c0006950:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006954:	89 c2                	mov    edx,eax
c0006956:	83 f9 0f             	cmp    ecx,0xf
c0006959:	7f 20                	jg     c000697b <iso_tell+0x2f>
c000695b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006961:	83 bb 40 75 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd8ac0],0x0
c0006968:	74 11                	je     c000697b <iso_tell+0x2f>
c000696a:	83 bb d0 75 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd8a30],0x0
c0006971:	75 08                	jne    c000697b <iso_tell+0x2f>
c0006973:	8b 83 48 75 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd8ab8]
c0006979:	31 d2                	xor    edx,edx
c000697b:	5b                   	pop    ebx
c000697c:	c3                   	ret    

c000697d <iso_total>:
c000697d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006981:	83 c8 ff             	or     eax,0xffffffff
c0006984:	83 fa 0f             	cmp    edx,0xf
c0006987:	7f 1e                	jg     c00069a7 <iso_total+0x2a>
c0006989:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000698f:	83 ba 40 75 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd8ac0],0x0
c0006996:	74 0f                	je     c00069a7 <iso_total+0x2a>
c0006998:	83 ba d0 75 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd8a30],0x0
c000699f:	75 06                	jne    c00069a7 <iso_total+0x2a>
c00069a1:	8b 82 4c 75 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd8ab4]
c00069a7:	c3                   	ret    

c00069a8 <fn_postprocess>:
c00069a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00069ac:	89 d0                	mov    eax,edx
c00069ae:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00069b1:	85 c9                	test   ecx,ecx
c00069b3:	74 08                	je     c00069bd <fn_postprocess+0x15>
c00069b5:	83 f9 3b             	cmp    ecx,0x3b
c00069b8:	74 03                	je     c00069bd <fn_postprocess+0x15>
c00069ba:	40                   	inc    eax
c00069bb:	eb f1                	jmp    c00069ae <fn_postprocess+0x6>
c00069bd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069c0:	39 d0                	cmp    eax,edx
c00069c2:	76 0a                	jbe    c00069ce <fn_postprocess+0x26>
c00069c4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069c8:	75 04                	jne    c00069ce <fn_postprocess+0x26>
c00069ca:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069ce:	c3                   	ret    

c00069cf <iso_readdir>:
c00069cf:	55                   	push   ebp
c00069d0:	57                   	push   edi
c00069d1:	56                   	push   esi
c00069d2:	53                   	push   ebx
c00069d3:	83 ec 1c             	sub    esp,0x1c
c00069d6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069da:	83 fb 0f             	cmp    ebx,0xf
c00069dd:	7f 28                	jg     c0006a07 <iso_readdir+0x38>
c00069df:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069e5:	83 b8 40 75 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd8ac0],0x0
c00069ec:	8d b8 40 75 02 c0    	lea    edi,[eax-0x3ffd8ac0]
c00069f2:	74 13                	je     c0006a07 <iso_readdir+0x38>
c00069f4:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069f8:	74 0d                	je     c0006a07 <iso_readdir+0x38>
c00069fa:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006a01:	0f 84 b1 00 00 00    	je     c0006ab8 <iso_readdir+0xe9>
c0006a07:	83 ec 0c             	sub    esp,0xc
c0006a0a:	68 e0 16 02 c0       	push   0xc00216e0
c0006a0f:	e8 dc 47 01 00       	call   c001b1f0 <iso_kprintf>
c0006a14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a17:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a1d:	e8 ea 47 01 00       	call   c001b20c <iso_kprintfd>
c0006a22:	c7 04 24 e5 16 02 c0 	mov    DWORD PTR [esp],0xc00216e5
c0006a29:	e8 c2 47 01 00       	call   c001b1f0 <iso_kprintf>
c0006a2e:	58                   	pop    eax
c0006a2f:	ff b3 40 75 02 c0    	push   DWORD PTR [ebx-0x3ffd8ac0]
c0006a35:	e8 d2 47 01 00       	call   c001b20c <iso_kprintfd>
c0006a3a:	c7 04 24 eb 16 02 c0 	mov    DWORD PTR [esp],0xc00216eb
c0006a41:	e8 aa 47 01 00       	call   c001b1f0 <iso_kprintf>
c0006a46:	58                   	pop    eax
c0006a47:	ff b3 44 75 02 c0    	push   DWORD PTR [ebx-0x3ffd8abc]
c0006a4d:	e8 ba 47 01 00       	call   c001b20c <iso_kprintfd>
c0006a52:	c7 04 24 f1 16 02 c0 	mov    DWORD PTR [esp],0xc00216f1
c0006a59:	e8 92 47 01 00       	call   c001b1f0 <iso_kprintf>
c0006a5e:	58                   	pop    eax
c0006a5f:	ff b3 d0 75 02 c0    	push   DWORD PTR [ebx-0x3ffd8a30]
c0006a65:	e8 a2 47 01 00       	call   c001b20c <iso_kprintfd>
c0006a6a:	83 c4 10             	add    esp,0x10
c0006a6d:	eb 42                	jmp    c0006ab1 <iso_readdir+0xe2>
c0006a6f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a72:	8b 34 85 80 70 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd8f80]
c0006a79:	89 d1                	mov    ecx,edx
c0006a7b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a81:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a85:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a88:	75 35                	jne    c0006abf <iso_readdir+0xf0>
c0006a8a:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a90:	81 c2 00 08 00 00    	add    edx,0x800
c0006a96:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a99:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a9c:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a9f:	73 1e                	jae    c0006abf <iso_readdir+0xf0>
c0006aa1:	8b 07                	mov    eax,DWORD PTR [edi]
c0006aa3:	c1 ea 0b             	shr    edx,0xb
c0006aa6:	01 d0                	add    eax,edx
c0006aa8:	e8 5f f9 ff ff       	call   c000640c <biread>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	79 be                	jns    c0006a6f <iso_readdir+0xa0>
c0006ab1:	31 c0                	xor    eax,eax
c0006ab3:	e9 6a 01 00 00       	jmp    c0006c22 <iso_readdir+0x253>
c0006ab8:	31 f6                	xor    esi,esi
c0006aba:	83 c8 ff             	or     eax,0xffffffff
c0006abd:	eb da                	jmp    c0006a99 <iso_readdir+0xca>
c0006abf:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ac5:	8b ba 48 75 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd8ab8]
c0006acb:	81 c2 40 75 02 c0    	add    edx,0xc0027540
c0006ad1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006ad4:	73 db                	jae    c0006ab1 <iso_readdir+0xe2>
c0006ad6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ada:	75 34                	jne    c0006b10 <iso_readdir+0x141>
c0006adc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006ae0:	75 2e                	jne    c0006b10 <iso_readdir+0x141>
c0006ae2:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ae5:	8b 34 85 80 70 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd8f80]
c0006aec:	01 f9                	add    ecx,edi
c0006aee:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006af1:	89 c8                	mov    eax,ecx
c0006af3:	25 ff 07 00 00       	and    eax,0x7ff
c0006af8:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006afd:	01 c8                	add    eax,ecx
c0006aff:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006b02:	25 ff 07 00 00       	and    eax,0x7ff
c0006b07:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006b0b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006b0e:	74 a1                	je     c0006ab1 <iso_readdir+0xe2>
c0006b10:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006b16:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b1a:	83 3d b4 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027eb4,0x0
c0006b21:	8d 56 21             	lea    edx,[esi+0x21]
c0006b24:	8d af 58 75 02 c0    	lea    ebp,[edi-0x3ffd8aa8]
c0006b2a:	74 0c                	je     c0006b38 <iso_readdir+0x169>
c0006b2c:	89 e8                	mov    eax,ebp
c0006b2e:	e8 27 f6 ff ff       	call   c000615a <ucs2utfn>
c0006b33:	e9 b1 00 00 00       	jmp    c0006be9 <iso_readdir+0x21a>
c0006b38:	50                   	push   eax
c0006b39:	51                   	push   ecx
c0006b3a:	52                   	push   edx
c0006b3b:	55                   	push   ebp
c0006b3c:	e8 4f 9b ff ff       	call   c0000690 <strncpy>
c0006b41:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b48:	c6 84 07 58 75 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd8aa8],0x0
c0006b50:	e8 53 fe ff ff       	call   c00069a8 <fn_postprocess>
c0006b55:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b59:	83 c4 10             	add    esp,0x10
c0006b5c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b5f:	89 d1                	mov    ecx,edx
c0006b61:	29 d0                	sub    eax,edx
c0006b63:	80 e1 01             	and    cl,0x1
c0006b66:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006b6a:	74 05                	je     c0006b71 <iso_readdir+0x1a2>
c0006b6c:	83 e8 21             	sub    eax,0x21
c0006b6f:	eb 04                	jmp    c0006b75 <iso_readdir+0x1a6>
c0006b71:	42                   	inc    edx
c0006b72:	83 e8 22             	sub    eax,0x22
c0006b75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b79:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b83:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b88:	7e 5f                	jle    c0006be9 <iso_readdir+0x21a>
c0006b8a:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006b8d:	48                   	dec    eax
c0006b8e:	3c 01                	cmp    al,0x1
c0006b90:	77 57                	ja     c0006be9 <iso_readdir+0x21a>
c0006b92:	51                   	push   ecx
c0006b93:	6a 02                	push   0x2
c0006b95:	68 dd 16 02 c0       	push   0xc00216dd
c0006b9a:	52                   	push   edx
c0006b9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006b9f:	e8 6c 9c ff ff       	call   c0000810 <strncmp>
c0006ba4:	83 c4 10             	add    esp,0x10
c0006ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006bab:	85 c0                	test   eax,eax
c0006bad:	75 2e                	jne    c0006bdd <iso_readdir+0x20e>
c0006baf:	50                   	push   eax
c0006bb0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bb4:	83 e8 05             	sub    eax,0x5
c0006bb7:	50                   	push   eax
c0006bb8:	8d 42 05             	lea    eax,[edx+0x5]
c0006bbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006bbf:	50                   	push   eax
c0006bc0:	55                   	push   ebp
c0006bc1:	e8 ca 9a ff ff       	call   c0000690 <strncpy>
c0006bc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006bca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006bce:	83 c4 10             	add    esp,0x10
c0006bd1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bd5:	c6 84 08 53 75 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd8aad],0x0
c0006bdd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006be1:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006be5:	01 c2                	add    edx,eax
c0006be7:	eb 9a                	jmp    c0006b83 <iso_readdir+0x1b4>
c0006be9:	83 c8 ff             	or     eax,0xffffffff
c0006bec:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bf0:	89 c2                	mov    edx,eax
c0006bf2:	75 0a                	jne    c0006bfe <iso_readdir+0x22f>
c0006bf4:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bf7:	e8 0e f6 ff ff       	call   c000620a <iso_733>
c0006bfc:	31 d2                	xor    edx,edx
c0006bfe:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006c04:	89 83 50 75 02 c0    	mov    DWORD PTR [ebx-0x3ffd8ab0],eax
c0006c0a:	89 93 54 75 02 c0    	mov    DWORD PTR [ebx-0x3ffd8aac],edx
c0006c10:	81 c3 40 75 02 c0    	add    ebx,0xc0027540
c0006c16:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006c19:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c1c:	8d 87 50 75 02 c0    	lea    eax,[edi-0x3ffd8ab0]
c0006c22:	83 c4 1c             	add    esp,0x1c
c0006c25:	5b                   	pop    ebx
c0006c26:	5e                   	pop    esi
c0006c27:	5f                   	pop    edi
c0006c28:	5d                   	pop    ebp
c0006c29:	c3                   	ret    

c0006c2a <iso_reset>:
c0006c2a:	83 ec 18             	sub    esp,0x18
c0006c2d:	68 fa 16 02 c0       	push   0xc00216fa
c0006c32:	e8 b9 45 01 00       	call   c001b1f0 <iso_kprintf>
c0006c37:	e8 1b f7 ff ff       	call   c0006357 <iso_break_all>
c0006c3c:	e8 14 f7 ff ff       	call   c0006355 <bclear>
c0006c41:	31 c0                	xor    eax,eax
c0006c43:	83 c4 1c             	add    esp,0x1c
c0006c46:	c3                   	ret    

c0006c47 <init_percd>:
c0006c47:	57                   	push   edi
c0006c48:	56                   	push   esi
c0006c49:	53                   	push   ebx
c0006c4a:	bb 01 00 00 00       	mov    ebx,0x1
c0006c4f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006c53:	a2 60 70 02 c0       	mov    ds:0xc0027060,al
c0006c58:	e8 cd ff ff ff       	call   c0006c2a <iso_reset>
c0006c5d:	c7 05 b4 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027eb4,0x0
c0006c67:	a1 ac 7e 02 c0       	mov    eax,ds:0xc0027eac
c0006c6c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c70:	e8 97 f7 ff ff       	call   c000640c <biread>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	89 c6                	mov    esi,eax
c0006c79:	0f 88 ba 00 00 00    	js     c0006d39 <init_percd+0xf2>
c0006c7f:	8b 04 85 80 70 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8f80]
c0006c86:	52                   	push   edx
c0006c87:	6a 06                	push   0x6
c0006c89:	68 05 17 02 c0       	push   0xc0021705
c0006c8e:	83 c0 04             	add    eax,0x4
c0006c91:	50                   	push   eax
c0006c92:	e8 e9 96 ff ff       	call   c0000380 <memcmp>
c0006c97:	83 c4 10             	add    esp,0x10
c0006c9a:	85 c0                	test   eax,eax
c0006c9c:	74 08                	je     c0006ca6 <init_percd+0x5f>
c0006c9e:	43                   	inc    ebx
c0006c9f:	83 fb 04             	cmp    ebx,0x4
c0006ca2:	75 c3                	jne    c0006c67 <init_percd+0x20>
c0006ca4:	eb 1a                	jmp    c0006cc0 <init_percd+0x79>
c0006ca6:	8b 04 b5 80 70 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd8f80]
c0006cad:	83 c0 5c             	add    eax,0x5c
c0006cb0:	e8 22 f5 ff ff       	call   c00061d7 <isjoliet>
c0006cb5:	a3 b4 7e 02 c0       	mov    ds:0xc0027eb4,eax
c0006cba:	85 c0                	test   eax,eax
c0006cbc:	74 e0                	je     c0006c9e <init_percd+0x57>
c0006cbe:	eb 3e                	jmp    c0006cfe <init_percd+0xb7>
c0006cc0:	83 3d b4 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027eb4,0x0
c0006cc7:	75 35                	jne    c0006cfe <init_percd+0xb7>
c0006cc9:	a1 ac 7e 02 c0       	mov    eax,ds:0xc0027eac
c0006cce:	83 c0 10             	add    eax,0x10
c0006cd1:	e8 36 f7 ff ff       	call   c000640c <biread>
c0006cd6:	85 c0                	test   eax,eax
c0006cd8:	89 c6                	mov    esi,eax
c0006cda:	78 5f                	js     c0006d3b <init_percd+0xf4>
c0006cdc:	50                   	push   eax
c0006cdd:	8b 04 b5 80 70 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd8f80]
c0006ce4:	83 cb ff             	or     ebx,0xffffffff
c0006ce7:	6a 06                	push   0x6
c0006ce9:	68 0c 17 02 c0       	push   0xc002170c
c0006cee:	83 c0 04             	add    eax,0x4
c0006cf1:	50                   	push   eax
c0006cf2:	e8 89 96 ff ff       	call   c0000380 <memcmp>
c0006cf7:	83 c4 10             	add    esp,0x10
c0006cfa:	85 c0                	test   eax,eax
c0006cfc:	75 3d                	jne    c0006d3b <init_percd+0xf4>
c0006cfe:	8b 34 b5 80 70 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd8f80]
c0006d05:	bf 80 7e 02 c0       	mov    edi,0xc0027e80
c0006d0a:	b9 22 00 00 00       	mov    ecx,0x22
c0006d0f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d17:	b8 82 7e 02 c0       	mov    eax,0xc0027e82
c0006d1c:	31 db                	xor    ebx,ebx
c0006d1e:	e8 e7 f4 ff ff       	call   c000620a <iso_733>
c0006d23:	a3 a8 7e 02 c0       	mov    ds:0xc0027ea8,eax
c0006d28:	b8 8a 7e 02 c0       	mov    eax,0xc0027e8a
c0006d2d:	e8 d8 f4 ff ff       	call   c000620a <iso_733>
c0006d32:	a3 a4 7e 02 c0       	mov    ds:0xc0027ea4,eax
c0006d37:	eb 02                	jmp    c0006d3b <init_percd+0xf4>
c0006d39:	89 c3                	mov    ebx,eax
c0006d3b:	89 d8                	mov    eax,ebx
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	5f                   	pop    edi
c0006d40:	c3                   	ret    

c0006d41 <iso_ioctl>:
c0006d41:	83 ec 18             	sub    esp,0x18
c0006d44:	68 13 17 02 c0       	push   0xc0021713
c0006d49:	e8 a2 44 01 00       	call   c001b1f0 <iso_kprintf>
c0006d4e:	e8 d7 fe ff ff       	call   c0006c2a <iso_reset>
c0006d53:	31 c0                	xor    eax,eax
c0006d55:	83 c4 1c             	add    esp,0x1c
c0006d58:	c3                   	ret    

c0006d59 <fs_iso9660_init>:
c0006d59:	53                   	push   ebx
c0006d5a:	31 db                	xor    ebx,ebx
c0006d5c:	83 ec 14             	sub    esp,0x14
c0006d5f:	68 1e 17 02 c0       	push   0xc002171e
c0006d64:	e8 87 44 01 00       	call   c001b1f0 <iso_kprintf>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	68 40 09 00 00       	push   0x940
c0006d71:	6a 00                	push   0x0
c0006d73:	68 40 75 02 c0       	push   0xc0027540
c0006d78:	e8 73 97 ff ff       	call   c00004f0 <memset>
c0006d7d:	c7 05 40 75 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0027540,0xffffffff
c0006d87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d8e:	e8 f9 7c 00 00       	call   c000ea8c <malloc>
c0006d93:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d9a:	a3 b0 7e 02 c0       	mov    ds:0xc0027eb0,eax
c0006d9f:	e8 e8 7c 00 00       	call   c000ea8c <malloc>
c0006da4:	83 c4 10             	add    esp,0x10
c0006da7:	a3 20 75 02 c0       	mov    ds:0xc0027520,eax
c0006dac:	83 ec 0c             	sub    esp,0xc
c0006daf:	68 04 08 00 00       	push   0x804
c0006db4:	e8 d3 7c 00 00       	call   c000ea8c <malloc>
c0006db9:	89 04 9d 80 70 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8f80],eax
c0006dc0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dc6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006dcd:	e8 ba 7c 00 00       	call   c000ea8c <malloc>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	89 04 9d 20 70 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8fe0],eax
c0006ddc:	43                   	inc    ebx
c0006ddd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006de3:	83 fb 10             	cmp    ebx,0x10
c0006de6:	75 c4                	jne    c0006dac <fs_iso9660_init+0x53>
c0006de8:	83 c4 08             	add    esp,0x8
c0006deb:	31 c0                	xor    eax,eax
c0006ded:	5b                   	pop    ebx
c0006dee:	c3                   	ret    

c0006def <fs_iso9660_shutdown>:
c0006def:	53                   	push   ebx
c0006df0:	31 db                	xor    ebx,ebx
c0006df2:	83 ec 08             	sub    esp,0x8
c0006df5:	83 ec 0c             	sub    esp,0xc
c0006df8:	ff 34 9d 80 70 02 c0 	push   DWORD PTR [ebx*4-0x3ffd8f80]
c0006dff:	e8 98 7c 00 00       	call   c000ea9c <free>
c0006e04:	58                   	pop    eax
c0006e05:	ff 34 9d 20 70 02 c0 	push   DWORD PTR [ebx*4-0x3ffd8fe0]
c0006e0c:	43                   	inc    ebx
c0006e0d:	e8 8a 7c 00 00       	call   c000ea9c <free>
c0006e12:	83 c4 10             	add    esp,0x10
c0006e15:	83 fb 10             	cmp    ebx,0x10
c0006e18:	75 db                	jne    c0006df5 <fs_iso9660_shutdown+0x6>
c0006e1a:	a1 b0 7e 02 c0       	mov    eax,ds:0xc0027eb0
c0006e1f:	85 c0                	test   eax,eax
c0006e21:	74 0c                	je     c0006e2f <fs_iso9660_shutdown+0x40>
c0006e23:	83 ec 0c             	sub    esp,0xc
c0006e26:	50                   	push   eax
c0006e27:	e8 70 7c 00 00       	call   c000ea9c <free>
c0006e2c:	83 c4 10             	add    esp,0x10
c0006e2f:	a1 20 75 02 c0       	mov    eax,ds:0xc0027520
c0006e34:	85 c0                	test   eax,eax
c0006e36:	74 0c                	je     c0006e44 <fs_iso9660_shutdown+0x55>
c0006e38:	83 ec 0c             	sub    esp,0xc
c0006e3b:	50                   	push   eax
c0006e3c:	e8 5b 7c 00 00       	call   c000ea9c <free>
c0006e41:	83 c4 10             	add    esp,0x10
c0006e44:	c7 05 20 75 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027520,0x0
c0006e4e:	31 c0                	xor    eax,eax
c0006e50:	c7 05 b0 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027eb0,0x0
c0006e5a:	83 c4 08             	add    esp,0x8
c0006e5d:	5b                   	pop    ebx
c0006e5e:	c3                   	ret    

c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e5f:	55                   	push   ebp
c0006e60:	57                   	push   edi
c0006e61:	56                   	push   esi
c0006e62:	53                   	push   ebx
c0006e63:	83 ec 20             	sub    esp,0x20
c0006e66:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0006e6a:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c0006e72:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0006e76:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c0006e7e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006e82:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c0006e8a:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c0006e92:	89 f7                	mov    edi,esi
c0006e94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0006e99:	89 eb                	mov    ebx,ebp
c0006e9b:	eb 02                	jmp    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c0006e9d:	89 c7                	mov    edi,eax
c0006e9f:	31 d2                	xor    edx,edx
c0006ea1:	89 f8                	mov    eax,edi
c0006ea3:	f7 f1                	div    ecx
c0006ea5:	83 c3 01             	add    ebx,0x1
c0006ea8:	39 cf                	cmp    edi,ecx
c0006eaa:	73 f1                	jae    c0006e9d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c0006eac:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eaf:	eb 02                	jmp    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c0006eb1:	89 c6                	mov    esi,eax
c0006eb3:	31 d2                	xor    edx,edx
c0006eb5:	89 f0                	mov    eax,esi
c0006eb7:	f7 f1                	div    ecx
c0006eb9:	83 eb 01             	sub    ebx,0x1
c0006ebc:	39 ce                	cmp    esi,ecx
c0006ebe:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec2:	88 13                	mov    BYTE PTR [ebx],dl
c0006ec4:	73 eb                	jae    c0006eb1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c0006ec6:	83 c4 20             	add    esp,0x20
c0006ec9:	89 e8                	mov    eax,ebp
c0006ecb:	5b                   	pop    ebx
c0006ecc:	5e                   	pop    esi
c0006ecd:	5f                   	pop    edi
c0006ece:	5d                   	pop    ebp
c0006ecf:	c3                   	ret    

c0006ed0 <Dbg::logc(char)>:
c0006ed0:	f6 05 90 cd 02 c0 10 	test   BYTE PTR ds:0xc002cd90,0x10
c0006ed7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006edb:	75 12                	jne    c0006eef <Dbg::logc(char)+0x1f>
c0006edd:	ba fd 03 00 00       	mov    edx,0x3fd
c0006ee2:	ec                   	in     al,dx
c0006ee3:	a8 20                	test   al,0x20
c0006ee5:	74 fb                	je     c0006ee2 <Dbg::logc(char)+0x12>
c0006ee7:	ba f8 03 00 00       	mov    edx,0x3f8
c0006eec:	88 c8                	mov    al,cl
c0006eee:	ee                   	out    dx,al
c0006eef:	c3                   	ret    

c0006ef0 <Dbg::logs(char*)>:
c0006ef0:	53                   	push   ebx
c0006ef1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006ef5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006ef8:	85 c0                	test   eax,eax
c0006efa:	74 11                	je     c0006f0d <Dbg::logs(char*)+0x1d>
c0006efc:	50                   	push   eax
c0006efd:	83 c3 01             	add    ebx,0x1
c0006f00:	e8 cb ff ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006f05:	58                   	pop    eax
c0006f06:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f09:	85 c0                	test   eax,eax
c0006f0b:	75 ef                	jne    c0006efc <Dbg::logs(char*)+0xc>
c0006f0d:	5b                   	pop    ebx
c0006f0e:	c3                   	ret    

c0006f0f <Dbg::logWriteInt(unsigned int)>:
c0006f0f:	83 ec 10             	sub    esp,0x10
c0006f12:	6a 0a                	push   0xa
c0006f14:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f18:	50                   	push   eax
c0006f19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006f1d:	50                   	push   eax
c0006f1e:	e8 3c ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f23:	50                   	push   eax
c0006f24:	e8 c7 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006f29:	83 c4 20             	add    esp,0x20
c0006f2c:	c3                   	ret    

c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f2d:	83 ec 10             	sub    esp,0x10
c0006f30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006f34:	50                   	push   eax
c0006f35:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f39:	50                   	push   eax
c0006f3a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006f3e:	52                   	push   edx
c0006f3f:	e8 1b ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f44:	50                   	push   eax
c0006f45:	e8 a6 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006f4a:	83 c4 20             	add    esp,0x20
c0006f4d:	c3                   	ret    

c0006f4e <Dbg::kprintf(char const*, ...)>:
c0006f4e:	55                   	push   ebp
c0006f4f:	57                   	push   edi
c0006f50:	56                   	push   esi
c0006f51:	53                   	push   ebx
c0006f52:	83 ec 0c             	sub    esp,0xc
c0006f55:	f6 05 90 cd 02 c0 10 	test   BYTE PTR ds:0xc002cd90,0x10
c0006f5c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006f60:	74 08                	je     c0006f6a <Dbg::kprintf(char const*, ...)+0x1c>
c0006f62:	83 c4 0c             	add    esp,0xc
c0006f65:	5b                   	pop    ebx
c0006f66:	5e                   	pop    esi
c0006f67:	5f                   	pop    edi
c0006f68:	5d                   	pop    ebp
c0006f69:	c3                   	ret    
c0006f6a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f6e:	31 ff                	xor    edi,edi
c0006f70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f74:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f77:	85 c0                	test   eax,eax
c0006f79:	74 e7                	je     c0006f62 <Dbg::kprintf(char const*, ...)+0x14>
c0006f7b:	8d 77 01             	lea    esi,[edi+0x1]
c0006f7e:	83 f8 25             	cmp    eax,0x25
c0006f81:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006f84:	75 47                	jne    c0006fcd <Dbg::kprintf(char const*, ...)+0x7f>
c0006f86:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006f89:	83 c7 02             	add    edi,0x2
c0006f8c:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006f8f:	83 e8 25             	sub    eax,0x25
c0006f92:	0f b6 c0             	movzx  eax,al
c0006f95:	83 f8 53             	cmp    eax,0x53
c0006f98:	0f 87 ce 00 00 00    	ja     c000706c <Dbg::kprintf(char const*, ...)+0x11e>
c0006f9e:	ff 24 85 30 17 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde8d0]
c0006fa5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fa9:	89 c8                	mov    eax,ecx
c0006fab:	83 c1 04             	add    ecx,0x4
c0006fae:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fb2:	8b 28                	mov    ebp,DWORD PTR [eax]
c0006fb4:	55                   	push   ebp
c0006fb5:	e8 55 ff ff ff       	call   c0006f0f <Dbg::logWriteInt(unsigned int)>
c0006fba:	58                   	pop    eax
c0006fbb:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006fbe:	85 c0                	test   eax,eax
c0006fc0:	74 a0                	je     c0006f62 <Dbg::kprintf(char const*, ...)+0x14>
c0006fc2:	8d 77 01             	lea    esi,[edi+0x1]
c0006fc5:	83 f8 25             	cmp    eax,0x25
c0006fc8:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fcb:	74 b9                	je     c0006f86 <Dbg::kprintf(char const*, ...)+0x38>
c0006fcd:	50                   	push   eax
c0006fce:	89 f7                	mov    edi,esi
c0006fd0:	e8 fb fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006fd5:	89 ee                	mov    esi,ebp
c0006fd7:	58                   	pop    eax
c0006fd8:	eb e1                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0006fda:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fde:	89 c8                	mov    eax,ecx
c0006fe0:	83 c1 04             	add    ecx,0x4
c0006fe3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fe7:	8b 00                	mov    eax,DWORD PTR [eax]
c0006fe9:	50                   	push   eax
c0006fea:	e8 01 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006fef:	58                   	pop    eax
c0006ff0:	eb c9                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0006ff2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006ff6:	89 d0                	mov    eax,edx
c0006ff8:	83 c2 04             	add    edx,0x4
c0006ffb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0006fff:	8b 00                	mov    eax,DWORD PTR [eax]
c0007001:	50                   	push   eax
c0007002:	e8 08 ff ff ff       	call   c0006f0f <Dbg::logWriteInt(unsigned int)>
c0007007:	58                   	pop    eax
c0007008:	eb b1                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000700a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000700e:	89 d0                	mov    eax,edx
c0007010:	83 c2 04             	add    edx,0x4
c0007013:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007017:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000701a:	50                   	push   eax
c000701b:	e8 b0 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007020:	58                   	pop    eax
c0007021:	eb 98                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0007023:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007027:	89 c8                	mov    eax,ecx
c0007029:	83 c1 04             	add    ecx,0x4
c000702c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007030:	6a 10                	push   0x10
c0007032:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007034:	51                   	push   ecx
c0007035:	e8 f3 fe ff ff       	call   c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>
c000703a:	5d                   	pop    ebp
c000703b:	58                   	pop    eax
c000703c:	e9 7a ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0007041:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007045:	89 d0                	mov    eax,edx
c0007047:	83 c2 08             	add    edx,0x8
c000704a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000704e:	6a 10                	push   0x10
c0007050:	8b 00                	mov    eax,DWORD PTR [eax]
c0007052:	50                   	push   eax
c0007053:	e8 d5 fe ff ff       	call   c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>
c0007058:	58                   	pop    eax
c0007059:	5a                   	pop    edx
c000705a:	e9 5c ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000705f:	6a 25                	push   0x25
c0007061:	e8 6a fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007066:	5a                   	pop    edx
c0007067:	e9 4f ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000706c:	6a 25                	push   0x25
c000706e:	e8 5d fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007073:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007077:	50                   	push   eax
c0007078:	e8 53 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000707d:	5a                   	pop    edx
c000707e:	59                   	pop    ecx
c000707f:	e9 37 ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>

c0007084 <KiUbsanPrintDetails(char const*, void*)>:
c0007084:	83 ec 1c             	sub    esp,0x1c
c0007087:	83 ec 08             	sub    esp,0x8
c000708a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000708e:	68 80 18 02 c0       	push   0xc0021880
c0007093:	e8 b6 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007098:	83 c4 10             	add    esp,0x10
c000709b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000709f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00070a9:	83 ec 08             	sub    esp,0x8
c00070ac:	50                   	push   eax
c00070ad:	68 94 18 02 c0       	push   0xc0021894
c00070b2:	e8 97 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070b7:	83 c4 10             	add    esp,0x10
c00070ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00070c1:	83 ec 08             	sub    esp,0x8
c00070c4:	50                   	push   eax
c00070c5:	68 9e 18 02 c0       	push   0xc002189e
c00070ca:	e8 7f fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070cf:	83 c4 10             	add    esp,0x10
c00070d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00070d9:	83 ec 08             	sub    esp,0x8
c00070dc:	50                   	push   eax
c00070dd:	68 a8 18 02 c0       	push   0xc00218a8
c00070e2:	e8 67 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	90                   	nop
c00070eb:	83 c4 1c             	add    esp,0x1c
c00070ee:	c3                   	ret    
c00070ef:	90                   	nop

c00070f0 <__ubsan_handle_type_mismatch_v1>:
c00070f0:	83 ec 0c             	sub    esp,0xc
c00070f3:	83 ec 08             	sub    esp,0x8
c00070f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070fa:	68 ec 19 02 c0       	push   0xc00219ec
c00070ff:	e8 80 ff ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007104:	83 c4 10             	add    esp,0x10
c0007107:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000710c:	75 16                	jne    c0007124 <__ubsan_handle_type_mismatch_v1+0x34>
c000710e:	83 ec 0c             	sub    esp,0xc
c0007111:	68 b2 18 02 c0       	push   0xc00218b2
c0007116:	e8 33 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000711b:	83 c4 10             	add    esp,0x10
c000711e:	e9 91 00 00 00       	jmp    c00071b4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007123:	90                   	nop
c0007124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007128:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000712b:	85 c0                	test   eax,eax
c000712d:	74 29                	je     c0007158 <__ubsan_handle_type_mismatch_v1+0x68>
c000712f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007133:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007136:	83 e8 01             	sub    eax,0x1
c0007139:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000713d:	75 19                	jne    c0007158 <__ubsan_handle_type_mismatch_v1+0x68>
c000713f:	83 ec 08             	sub    esp,0x8
c0007142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007146:	68 0c 1a 02 c0       	push   0xc0021a0c
c000714b:	e8 fe fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007150:	83 c4 10             	add    esp,0x10
c0007153:	eb 5f                	jmp    c00071b4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007155:	8d 76 00             	lea    esi,[esi+0x0]
c0007158:	83 ec 0c             	sub    esp,0xc
c000715b:	68 c7 18 02 c0       	push   0xc00218c7
c0007160:	e8 e9 fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007165:	83 c4 10             	add    esp,0x10
c0007168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000716c:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000716f:	0f b6 c0             	movzx  eax,al
c0007172:	83 ec 08             	sub    esp,0x8
c0007175:	50                   	push   eax
c0007176:	68 e1 18 02 c0       	push   0xc00218e1
c000717b:	e8 ce fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007180:	83 c4 10             	add    esp,0x10
c0007183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007187:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000718a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000718d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007195:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007198:	0f b6 c0             	movzx  eax,al
c000719b:	8b 04 85 80 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb680]
c00071a2:	51                   	push   ecx
c00071a3:	52                   	push   edx
c00071a4:	50                   	push   eax
c00071a5:	68 34 1a 02 c0       	push   0xc0021a34
c00071aa:	e8 9f fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00071af:	83 c4 10             	add    esp,0x10
c00071b2:	66 90                	xchg   ax,ax
c00071b4:	83 ec 0c             	sub    esp,0xc
c00071b7:	68 ec 19 02 c0       	push   0xc00219ec
c00071bc:	e8 11 7c 00 00       	call   c000edd2 <KePanic(char const*)>
c00071c1:	83 c4 10             	add    esp,0x10
c00071c4:	90                   	nop
c00071c5:	83 c4 0c             	add    esp,0xc
c00071c8:	c3                   	ret    
c00071c9:	8d 76 00             	lea    esi,[esi+0x0]

c00071cc <__ubsan_handle_pointer_overflow>:
c00071cc:	83 ec 0c             	sub    esp,0xc
c00071cf:	83 ec 08             	sub    esp,0x8
c00071d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071d6:	68 7c 1a 02 c0       	push   0xc0021a7c
c00071db:	e8 a4 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00071e0:	83 c4 10             	add    esp,0x10
c00071e3:	83 ec 0c             	sub    esp,0xc
c00071e6:	68 7c 1a 02 c0       	push   0xc0021a7c
c00071eb:	e8 e2 7b 00 00       	call   c000edd2 <KePanic(char const*)>
c00071f0:	83 c4 10             	add    esp,0x10
c00071f3:	90                   	nop
c00071f4:	83 c4 0c             	add    esp,0xc
c00071f7:	c3                   	ret    

c00071f8 <__ubsan_handle_out_of_bounds>:
c00071f8:	83 ec 0c             	sub    esp,0xc
c00071fb:	83 ec 08             	sub    esp,0x8
c00071fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007202:	68 ec 18 02 c0       	push   0xc00218ec
c0007207:	e8 78 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c000720c:	83 c4 10             	add    esp,0x10
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	68 ec 18 02 c0       	push   0xc00218ec
c0007217:	e8 b6 7b 00 00       	call   c000edd2 <KePanic(char const*)>
c000721c:	83 c4 10             	add    esp,0x10
c000721f:	90                   	nop
c0007220:	83 c4 0c             	add    esp,0xc
c0007223:	c3                   	ret    

c0007224 <__ubsan_handle_add_overflow>:
c0007224:	83 ec 0c             	sub    esp,0xc
c0007227:	83 ec 08             	sub    esp,0x8
c000722a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000722e:	68 09 19 02 c0       	push   0xc0021909
c0007233:	e8 4c fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007238:	83 c4 10             	add    esp,0x10
c000723b:	83 ec 0c             	sub    esp,0xc
c000723e:	68 09 19 02 c0       	push   0xc0021909
c0007243:	e8 8a 7b 00 00       	call   c000edd2 <KePanic(char const*)>
c0007248:	83 c4 10             	add    esp,0x10
c000724b:	90                   	nop
c000724c:	83 c4 0c             	add    esp,0xc
c000724f:	c3                   	ret    

c0007250 <__ubsan_handle_load_invalid_value>:
c0007250:	83 ec 0c             	sub    esp,0xc
c0007253:	83 ec 08             	sub    esp,0x8
c0007256:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000725a:	68 9c 1a 02 c0       	push   0xc0021a9c
c000725f:	e8 20 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007264:	83 c4 10             	add    esp,0x10
c0007267:	83 ec 0c             	sub    esp,0xc
c000726a:	68 9c 1a 02 c0       	push   0xc0021a9c
c000726f:	e8 5e 7b 00 00       	call   c000edd2 <KePanic(char const*)>
c0007274:	83 c4 10             	add    esp,0x10
c0007277:	90                   	nop
c0007278:	83 c4 0c             	add    esp,0xc
c000727b:	c3                   	ret    

c000727c <__ubsan_handle_divrem_overflow>:
c000727c:	83 ec 0c             	sub    esp,0xc
c000727f:	83 ec 08             	sub    esp,0x8
c0007282:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007286:	68 c0 1a 02 c0       	push   0xc0021ac0
c000728b:	e8 f4 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007290:	83 c4 10             	add    esp,0x10
c0007293:	83 ec 0c             	sub    esp,0xc
c0007296:	68 c0 1a 02 c0       	push   0xc0021ac0
c000729b:	e8 32 7b 00 00       	call   c000edd2 <KePanic(char const*)>
c00072a0:	83 c4 10             	add    esp,0x10
c00072a3:	90                   	nop
c00072a4:	83 c4 0c             	add    esp,0xc
c00072a7:	c3                   	ret    

c00072a8 <__ubsan_handle_mul_overflow>:
c00072a8:	83 ec 0c             	sub    esp,0xc
c00072ab:	83 ec 08             	sub    esp,0x8
c00072ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b2:	68 25 19 02 c0       	push   0xc0021925
c00072b7:	e8 c8 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00072bc:	83 c4 10             	add    esp,0x10
c00072bf:	83 ec 0c             	sub    esp,0xc
c00072c2:	68 25 19 02 c0       	push   0xc0021925
c00072c7:	e8 06 7b 00 00       	call   c000edd2 <KePanic(char const*)>
c00072cc:	83 c4 10             	add    esp,0x10
c00072cf:	90                   	nop
c00072d0:	83 c4 0c             	add    esp,0xc
c00072d3:	c3                   	ret    

c00072d4 <__ubsan_handle_sub_overflow>:
c00072d4:	83 ec 0c             	sub    esp,0xc
c00072d7:	83 ec 08             	sub    esp,0x8
c00072da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072de:	68 41 19 02 c0       	push   0xc0021941
c00072e3:	e8 9c fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00072e8:	83 c4 10             	add    esp,0x10
c00072eb:	83 ec 0c             	sub    esp,0xc
c00072ee:	68 41 19 02 c0       	push   0xc0021941
c00072f3:	e8 da 7a 00 00       	call   c000edd2 <KePanic(char const*)>
c00072f8:	83 c4 10             	add    esp,0x10
c00072fb:	90                   	nop
c00072fc:	83 c4 0c             	add    esp,0xc
c00072ff:	c3                   	ret    

c0007300 <__ubsan_handle_shift_out_of_bounds>:
c0007300:	83 ec 0c             	sub    esp,0xc
c0007303:	83 ec 08             	sub    esp,0x8
c0007306:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000730a:	68 e0 1a 02 c0       	push   0xc0021ae0
c000730f:	e8 70 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007314:	83 c4 10             	add    esp,0x10
c0007317:	83 ec 0c             	sub    esp,0xc
c000731a:	68 e0 1a 02 c0       	push   0xc0021ae0
c000731f:	e8 ae 7a 00 00       	call   c000edd2 <KePanic(char const*)>
c0007324:	83 c4 10             	add    esp,0x10
c0007327:	90                   	nop
c0007328:	83 c4 0c             	add    esp,0xc
c000732b:	c3                   	ret    

c000732c <__ubsan_handle_negate_overflow>:
c000732c:	83 ec 0c             	sub    esp,0xc
c000732f:	83 ec 08             	sub    esp,0x8
c0007332:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007336:	68 04 1b 02 c0       	push   0xc0021b04
c000733b:	e8 44 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007340:	83 c4 10             	add    esp,0x10
c0007343:	83 ec 0c             	sub    esp,0xc
c0007346:	68 04 1b 02 c0       	push   0xc0021b04
c000734b:	e8 82 7a 00 00       	call   c000edd2 <KePanic(char const*)>
c0007350:	83 c4 10             	add    esp,0x10
c0007353:	90                   	nop
c0007354:	83 c4 0c             	add    esp,0xc
c0007357:	c3                   	ret    

c0007358 <KiIsHashInTable(unsigned short)>:
c0007358:	0f b7 d0             	movzx  edx,ax
c000735b:	83 e0 07             	and    eax,0x7
c000735e:	c1 fa 03             	sar    edx,0x3
c0007361:	88 c1                	mov    cl,al
c0007363:	0f b6 92 00 83 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd7d00]
c000736a:	d3 fa                	sar    edx,cl
c000736c:	89 d0                	mov    eax,edx
c000736e:	83 e0 01             	and    eax,0x1
c0007371:	c3                   	ret    

c0007372 <KiSetHashInTable(unsigned short, bool)>:
c0007372:	56                   	push   esi
c0007373:	53                   	push   ebx
c0007374:	0f b7 d8             	movzx  ebx,ax
c0007377:	c1 fb 03             	sar    ebx,0x3
c000737a:	83 e0 07             	and    eax,0x7
c000737d:	89 c1                	mov    ecx,eax
c000737f:	b8 01 00 00 00       	mov    eax,0x1
c0007384:	0f b6 b3 00 83 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd7d00]
c000738b:	d3 e0                	shl    eax,cl
c000738d:	84 d2                	test   dl,dl
c000738f:	74 04                	je     c0007395 <KiSetHashInTable(unsigned short, bool)+0x23>
c0007391:	09 f0                	or     eax,esi
c0007393:	eb 04                	jmp    c0007399 <KiSetHashInTable(unsigned short, bool)+0x27>
c0007395:	f7 d0                	not    eax
c0007397:	21 f0                	and    eax,esi
c0007399:	88 83 00 83 02 c0    	mov    BYTE PTR [ebx-0x3ffd7d00],al
c000739f:	5b                   	pop    ebx
c00073a0:	5e                   	pop    esi
c00073a1:	c3                   	ret    

c00073a2 <KiFlushSymlinkChanges()>:
c00073a2:	57                   	push   edi
c00073a3:	56                   	push   esi
c00073a4:	53                   	push   ebx
c00073a5:	83 ec 1c             	sub    esp,0x1c
c00073a8:	68 14 01 00 00       	push   0x114
c00073ad:	e8 da 76 00 00       	call   c000ea8c <malloc>
c00073b2:	83 c4 0c             	add    esp,0xc
c00073b5:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c00073bb:	68 23 1b 02 c0       	push   0xc0021b23
c00073c0:	50                   	push   eax
c00073c1:	89 c3                	mov    ebx,eax
c00073c3:	e8 64 0d 00 00       	call   c000812c <File::File(char const*, Process*)>
c00073c8:	83 c4 10             	add    esp,0x10
c00073cb:	85 db                	test   ebx,ebx
c00073cd:	75 10                	jne    c00073df <KiFlushSymlinkChanges()+0x3d>
c00073cf:	83 ec 0c             	sub    esp,0xc
c00073d2:	68 41 1b 02 c0       	push   0xc0021b41
c00073d7:	e8 f6 79 00 00       	call   c000edd2 <KePanic(char const*)>
c00073dc:	83 c4 10             	add    esp,0x10
c00073df:	50                   	push   eax
c00073e0:	50                   	push   eax
c00073e1:	6a 06                	push   0x6
c00073e3:	53                   	push   ebx
c00073e4:	e8 61 0d 00 00       	call   c000814a <File::open(FileOpenMode)>
c00073e9:	83 c4 10             	add    esp,0x10
c00073ec:	85 c0                	test   eax,eax
c00073ee:	74 10                	je     c0007400 <KiFlushSymlinkChanges()+0x5e>
c00073f0:	83 ec 0c             	sub    esp,0xc
c00073f3:	68 5b 1b 02 c0       	push   0xc0021b5b
c00073f8:	e8 d5 79 00 00       	call   c000edd2 <KePanic(char const*)>
c00073fd:	83 c4 10             	add    esp,0x10
c0007400:	31 f6                	xor    esi,esi
c0007402:	39 35 c0 7e 02 c0    	cmp    DWORD PTR ds:0xc0027ec0,esi
c0007408:	7e 70                	jle    c000747a <KiFlushSymlinkChanges()+0xd8>
c000740a:	83 ec 0c             	sub    esp,0xc
c000740d:	89 f0                	mov    eax,esi
c000740f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007411:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007415:	c1 e0 08             	shl    eax,0x8
c0007418:	57                   	push   edi
c0007419:	05 00 7f 02 c0       	add    eax,0xc0027f00
c000741e:	50                   	push   eax
c000741f:	6a 00                	push   0x0
c0007421:	68 00 01 00 00       	push   0x100
c0007426:	53                   	push   ebx
c0007427:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000742a:	83 c4 20             	add    esp,0x20
c000742d:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0007435:	74 10                	je     c0007447 <KiFlushSymlinkChanges()+0xa5>
c0007437:	83 ec 0c             	sub    esp,0xc
c000743a:	68 75 1b 02 c0       	push   0xc0021b75
c000743f:	e8 8e 79 00 00       	call   c000edd2 <KePanic(char const*)>
c0007444:	83 c4 10             	add    esp,0x10
c0007447:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007449:	8d 14 f5 e0 7e 02 c0 	lea    edx,[esi*8-0x3ffd8120]
c0007450:	83 ec 0c             	sub    esp,0xc
c0007453:	57                   	push   edi
c0007454:	52                   	push   edx
c0007455:	6a 00                	push   0x0
c0007457:	6a 08                	push   0x8
c0007459:	53                   	push   ebx
c000745a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000745d:	83 c4 20             	add    esp,0x20
c0007460:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007465:	74 10                	je     c0007477 <KiFlushSymlinkChanges()+0xd5>
c0007467:	83 ec 0c             	sub    esp,0xc
c000746a:	68 8f 1b 02 c0       	push   0xc0021b8f
c000746f:	e8 5e 79 00 00       	call   c000edd2 <KePanic(char const*)>
c0007474:	83 c4 10             	add    esp,0x10
c0007477:	46                   	inc    esi
c0007478:	eb 88                	jmp    c0007402 <KiFlushSymlinkChanges()+0x60>
c000747a:	83 ec 0c             	sub    esp,0xc
c000747d:	53                   	push   ebx
c000747e:	e8 25 0d 00 00       	call   c00081a8 <File::close()>
c0007483:	83 c4 10             	add    esp,0x10
c0007486:	85 db                	test   ebx,ebx
c0007488:	74 0c                	je     c0007496 <KiFlushSymlinkChanges()+0xf4>
c000748a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000748c:	83 ec 0c             	sub    esp,0xc
c000748f:	53                   	push   ebx
c0007490:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	c7 05 c0 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027ec0,0x0
c00074a0:	83 c4 10             	add    esp,0x10
c00074a3:	5b                   	pop    ebx
c00074a4:	5e                   	pop    esi
c00074a5:	5f                   	pop    edi
c00074a6:	c3                   	ret    

c00074a7 <KiDeinitialiseSymlinks(void*)>:
c00074a7:	e9 f6 fe ff ff       	jmp    c00073a2 <KiFlushSymlinkChanges()>

c00074ac <KiGetSymlinkHash(char const*)>:
c00074ac:	53                   	push   ebx
c00074ad:	89 c3                	mov    ebx,eax
c00074af:	83 ec 14             	sub    esp,0x14
c00074b2:	50                   	push   eax
c00074b3:	e8 c8 90 ff ff       	call   c0000580 <strlen>
c00074b8:	5a                   	pop    edx
c00074b9:	59                   	pop    ecx
c00074ba:	50                   	push   eax
c00074bb:	53                   	push   ebx
c00074bc:	e8 d0 63 00 00       	call   c000d891 <KeCalculateCRC32(unsigned char*, int)>
c00074c1:	83 c4 18             	add    esp,0x18
c00074c4:	5b                   	pop    ebx
c00074c5:	89 c2                	mov    edx,eax
c00074c7:	c1 ea 10             	shr    edx,0x10
c00074ca:	31 d0                	xor    eax,edx
c00074cc:	c3                   	ret    

c00074cd <KiCreateSymlinkID()>:
c00074cd:	55                   	push   ebp
c00074ce:	57                   	push   edi
c00074cf:	56                   	push   esi
c00074d0:	53                   	push   ebx
c00074d1:	31 db                	xor    ebx,ebx
c00074d3:	83 ec 1c             	sub    esp,0x1c
c00074d6:	e8 e5 82 00 00       	call   c000f7c0 <KeRand()>
c00074db:	8b 2d 00 a3 02 c0    	mov    ebp,DWORD PTR ds:0xc002a300
c00074e1:	31 d2                	xor    edx,edx
c00074e3:	43                   	inc    ebx
c00074e4:	31 ff                	xor    edi,edi
c00074e6:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00074e9:	89 ee                	mov    esi,ebp
c00074eb:	89 0d 00 a3 02 c0    	mov    DWORD PTR ds:0xc002a300,ecx
c00074f1:	0f a4 c2 1f          	shld   edx,eax,0x1f
c00074f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00074f9:	c1 e0 1f             	shl    eax,0x1f
c00074fc:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007502:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007506:	75 10                	jne    c0007518 <KiCreateSymlinkID()+0x4b>
c0007508:	83 ec 0c             	sub    esp,0xc
c000750b:	68 a9 1b 02 c0       	push   0xc0021ba9
c0007510:	e8 bd 78 00 00       	call   c000edd2 <KePanic(char const*)>
c0007515:	83 c4 10             	add    esp,0x10
c0007518:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000751c:	75 06                	jne    c0007524 <KiCreateSymlinkID()+0x57>
c000751e:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0007522:	74 b2                	je     c00074d6 <KiCreateSymlinkID()+0x9>
c0007524:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007528:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000752c:	83 c4 1c             	add    esp,0x1c
c000752f:	5b                   	pop    ebx
c0007530:	31 f0                	xor    eax,esi
c0007532:	5e                   	pop    esi
c0007533:	31 fa                	xor    edx,edi
c0007535:	5f                   	pop    edi
c0007536:	5d                   	pop    ebp
c0007537:	c3                   	ret    

c0007538 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007538:	53                   	push   ebx
c0007539:	83 ec 0c             	sub    esp,0xc
c000753c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007540:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007544:	a1 c0 7e 02 c0       	mov    eax,ds:0xc0027ec0
c0007549:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000754d:	68 00 01 00 00       	push   0x100
c0007552:	6a 00                	push   0x0
c0007554:	89 0c c5 e4 7e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd811c],ecx
c000755b:	89 14 c5 e0 7e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8120],edx
c0007562:	c1 e0 08             	shl    eax,0x8
c0007565:	05 00 7f 02 c0       	add    eax,0xc0027f00
c000756a:	50                   	push   eax
c000756b:	e8 80 8f ff ff       	call   c00004f0 <memset>
c0007570:	58                   	pop    eax
c0007571:	a1 c0 7e 02 c0       	mov    eax,ds:0xc0027ec0
c0007576:	5a                   	pop    edx
c0007577:	c1 e0 08             	shl    eax,0x8
c000757a:	53                   	push   ebx
c000757b:	05 00 7f 02 c0       	add    eax,0xc0027f00
c0007580:	50                   	push   eax
c0007581:	e8 ca 90 ff ff       	call   c0000650 <strcpy>
c0007586:	89 d8                	mov    eax,ebx
c0007588:	e8 1f ff ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c000758d:	ba 01 00 00 00       	mov    edx,0x1
c0007592:	0f b7 c0             	movzx  eax,ax
c0007595:	e8 d8 fd ff ff       	call   c0007372 <KiSetHashInTable(unsigned short, bool)>
c000759a:	a1 c0 7e 02 c0       	mov    eax,ds:0xc0027ec0
c000759f:	83 c4 10             	add    esp,0x10
c00075a2:	40                   	inc    eax
c00075a3:	a3 c0 7e 02 c0       	mov    ds:0xc0027ec0,eax
c00075a8:	83 f8 03             	cmp    eax,0x3
c00075ab:	7e 09                	jle    c00075b6 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c00075ad:	83 c4 08             	add    esp,0x8
c00075b0:	5b                   	pop    ebx
c00075b1:	e9 ec fd ff ff       	jmp    c00073a2 <KiFlushSymlinkChanges()>
c00075b6:	83 c4 08             	add    esp,0x8
c00075b9:	5b                   	pop    ebx
c00075ba:	c3                   	ret    

c00075bb <KeInitialiseSymlinks()>:
c00075bb:	57                   	push   edi
c00075bc:	56                   	push   esi
c00075bd:	53                   	push   ebx
c00075be:	81 ec 14 01 00 00    	sub    esp,0x114
c00075c4:	68 00 20 00 00       	push   0x2000
c00075c9:	6a 00                	push   0x0
c00075cb:	68 00 83 02 c0       	push   0xc0028300
c00075d0:	c7 05 00 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a300,0x0
c00075da:	c7 05 c0 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027ec0,0x0
c00075e4:	e8 07 8f ff ff       	call   c00004f0 <memset>
c00075e9:	59                   	pop    ecx
c00075ea:	5b                   	pop    ebx
c00075eb:	6a 00                	push   0x0
c00075ed:	68 a7 74 00 c0       	push   0xc00074a7
c00075f2:	e8 8a 50 00 00       	call   c000c681 <KeRegisterAtexit(void (*)(void*), void*)>
c00075f7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00075fe:	e8 89 74 00 00       	call   c000ea8c <malloc>
c0007603:	83 c4 0c             	add    esp,0xc
c0007606:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c000760c:	68 23 1b 02 c0       	push   0xc0021b23
c0007611:	50                   	push   eax
c0007612:	89 c3                	mov    ebx,eax
c0007614:	e8 13 0b 00 00       	call   c000812c <File::File(char const*, Process*)>
c0007619:	83 c4 10             	add    esp,0x10
c000761c:	85 db                	test   ebx,ebx
c000761e:	75 10                	jne    c0007630 <KeInitialiseSymlinks()+0x75>
c0007620:	83 ec 0c             	sub    esp,0xc
c0007623:	68 b2 1b 02 c0       	push   0xc0021bb2
c0007628:	e8 a5 77 00 00       	call   c000edd2 <KePanic(char const*)>
c000762d:	83 c4 10             	add    esp,0x10
c0007630:	83 ec 0c             	sub    esp,0xc
c0007633:	53                   	push   ebx
c0007634:	e8 d5 0d 00 00       	call   c000840e <File::exists()>
c0007639:	83 c4 10             	add    esp,0x10
c000763c:	84 c0                	test   al,al
c000763e:	75 3a                	jne    c000767a <KeInitialiseSymlinks()+0xbf>
c0007640:	52                   	push   edx
c0007641:	52                   	push   edx
c0007642:	6a 12                	push   0x12
c0007644:	53                   	push   ebx
c0007645:	e8 00 0b 00 00       	call   c000814a <File::open(FileOpenMode)>
c000764a:	83 c4 10             	add    esp,0x10
c000764d:	85 c0                	test   eax,eax
c000764f:	74 10                	je     c0007661 <KeInitialiseSymlinks()+0xa6>
c0007651:	83 ec 0c             	sub    esp,0xc
c0007654:	68 cf 1b 02 c0       	push   0xc0021bcf
c0007659:	e8 74 77 00 00       	call   c000edd2 <KePanic(char const*)>
c000765e:	83 c4 10             	add    esp,0x10
c0007661:	83 ec 0c             	sub    esp,0xc
c0007664:	53                   	push   ebx
c0007665:	e8 3e 0b 00 00       	call   c00081a8 <File::close()>
c000766a:	83 c4 10             	add    esp,0x10
c000766d:	85 db                	test   ebx,ebx
c000766f:	0f 84 9e 00 00 00    	je     c0007713 <KeInitialiseSymlinks()+0x158>
c0007675:	e9 8d 00 00 00       	jmp    c0007707 <KeInitialiseSymlinks()+0x14c>
c000767a:	50                   	push   eax
c000767b:	50                   	push   eax
c000767c:	6a 01                	push   0x1
c000767e:	53                   	push   ebx
c000767f:	e8 c6 0a 00 00       	call   c000814a <File::open(FileOpenMode)>
c0007684:	83 c4 10             	add    esp,0x10
c0007687:	85 c0                	test   eax,eax
c0007689:	74 10                	je     c000769b <KeInitialiseSymlinks()+0xe0>
c000768b:	83 ec 0c             	sub    esp,0xc
c000768e:	68 ec 1b 02 c0       	push   0xc0021bec
c0007693:	e8 3a 77 00 00       	call   c000edd2 <KePanic(char const*)>
c0007698:	83 c4 10             	add    esp,0x10
c000769b:	ff 05 00 a3 02 c0    	inc    DWORD PTR ds:0xc002a300
c00076a1:	83 ec 0c             	sub    esp,0xc
c00076a4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00076a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076aa:	57                   	push   edi
c00076ab:	8d 74 24 20          	lea    esi,[esp+0x20]
c00076af:	56                   	push   esi
c00076b0:	6a 00                	push   0x0
c00076b2:	68 00 01 00 00       	push   0x100
c00076b7:	53                   	push   ebx
c00076b8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076bb:	83 c4 20             	add    esp,0x20
c00076be:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00076c6:	75 33                	jne    c00076fb <KeInitialiseSymlinks()+0x140>
c00076c8:	83 ec 0c             	sub    esp,0xc
c00076cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076cd:	57                   	push   edi
c00076ce:	8d 54 24 18          	lea    edx,[esp+0x18]
c00076d2:	52                   	push   edx
c00076d3:	6a 00                	push   0x0
c00076d5:	6a 08                	push   0x8
c00076d7:	53                   	push   ebx
c00076d8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076db:	83 c4 20             	add    esp,0x20
c00076de:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00076e3:	75 16                	jne    c00076fb <KeInitialiseSymlinks()+0x140>
c00076e5:	89 f0                	mov    eax,esi
c00076e7:	e8 c0 fd ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c00076ec:	ba 01 00 00 00       	mov    edx,0x1
c00076f1:	0f b7 c0             	movzx  eax,ax
c00076f4:	e8 79 fc ff ff       	call   c0007372 <KiSetHashInTable(unsigned short, bool)>
c00076f9:	eb a0                	jmp    c000769b <KeInitialiseSymlinks()+0xe0>
c00076fb:	83 ec 0c             	sub    esp,0xc
c00076fe:	53                   	push   ebx
c00076ff:	e8 a4 0a 00 00       	call   c00081a8 <File::close()>
c0007704:	83 c4 10             	add    esp,0x10
c0007707:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007709:	83 ec 0c             	sub    esp,0xc
c000770c:	53                   	push   ebx
c000770d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007710:	83 c4 10             	add    esp,0x10
c0007713:	81 c4 10 01 00 00    	add    esp,0x110
c0007719:	5b                   	pop    ebx
c000771a:	5e                   	pop    esi
c000771b:	5f                   	pop    edi
c000771c:	c3                   	ret    

c000771d <KiIsSymlinkRegistered(char const*)>:
c000771d:	55                   	push   ebp
c000771e:	57                   	push   edi
c000771f:	56                   	push   esi
c0007720:	53                   	push   ebx
c0007721:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007727:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000772e:	89 f0                	mov    eax,esi
c0007730:	e8 77 fd ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c0007735:	0f b7 c0             	movzx  eax,ax
c0007738:	e8 1b fc ff ff       	call   c0007358 <KiIsHashInTable(unsigned short)>
c000773d:	31 d2                	xor    edx,edx
c000773f:	88 c1                	mov    cl,al
c0007741:	31 c0                	xor    eax,eax
c0007743:	84 c9                	test   cl,cl
c0007745:	0f 84 31 01 00 00    	je     c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c000774b:	31 db                	xor    ebx,ebx
c000774d:	39 1d c0 7e 02 c0    	cmp    DWORD PTR ds:0xc0027ec0,ebx
c0007753:	7e 30                	jle    c0007785 <KiIsSymlinkRegistered(char const*)+0x68>
c0007755:	89 d8                	mov    eax,ebx
c0007757:	c1 e0 08             	shl    eax,0x8
c000775a:	51                   	push   ecx
c000775b:	05 00 7f 02 c0       	add    eax,0xc0027f00
c0007760:	51                   	push   ecx
c0007761:	50                   	push   eax
c0007762:	56                   	push   esi
c0007763:	e8 18 90 ff ff       	call   c0000780 <strcmp>
c0007768:	83 c4 10             	add    esp,0x10
c000776b:	85 c0                	test   eax,eax
c000776d:	75 13                	jne    c0007782 <KiIsSymlinkRegistered(char const*)+0x65>
c000776f:	8b 04 dd e0 7e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd8120]
c0007776:	8b 14 dd e4 7e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd811c]
c000777d:	e9 fa 00 00 00       	jmp    c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c0007782:	43                   	inc    ebx
c0007783:	eb c8                	jmp    c000774d <KiIsSymlinkRegistered(char const*)+0x30>
c0007785:	83 ec 0c             	sub    esp,0xc
c0007788:	68 14 01 00 00       	push   0x114
c000778d:	e8 fa 72 00 00       	call   c000ea8c <malloc>
c0007792:	83 c4 0c             	add    esp,0xc
c0007795:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c000779b:	68 23 1b 02 c0       	push   0xc0021b23
c00077a0:	50                   	push   eax
c00077a1:	89 c3                	mov    ebx,eax
c00077a3:	e8 84 09 00 00       	call   c000812c <File::File(char const*, Process*)>
c00077a8:	83 c4 10             	add    esp,0x10
c00077ab:	85 db                	test   ebx,ebx
c00077ad:	75 12                	jne    c00077c1 <KiIsSymlinkRegistered(char const*)+0xa4>
c00077af:	83 ec 0c             	sub    esp,0xc
c00077b2:	68 07 1c 02 c0       	push   0xc0021c07
c00077b7:	e8 16 76 00 00       	call   c000edd2 <KePanic(char const*)>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	eb 10                	jmp    c00077d1 <KiIsSymlinkRegistered(char const*)+0xb4>
c00077c1:	83 ec 0c             	sub    esp,0xc
c00077c4:	53                   	push   ebx
c00077c5:	e8 44 0c 00 00       	call   c000840e <File::exists()>
c00077ca:	83 c4 10             	add    esp,0x10
c00077cd:	84 c0                	test   al,al
c00077cf:	74 de                	je     c00077af <KiIsSymlinkRegistered(char const*)+0x92>
c00077d1:	52                   	push   edx
c00077d2:	52                   	push   edx
c00077d3:	6a 01                	push   0x1
c00077d5:	53                   	push   ebx
c00077d6:	e8 6f 09 00 00       	call   c000814a <File::open(FileOpenMode)>
c00077db:	83 c4 10             	add    esp,0x10
c00077de:	85 c0                	test   eax,eax
c00077e0:	74 10                	je     c00077f2 <KiIsSymlinkRegistered(char const*)+0xd5>
c00077e2:	83 ec 0c             	sub    esp,0xc
c00077e5:	68 22 1c 02 c0       	push   0xc0021c22
c00077ea:	e8 e3 75 00 00       	call   c000edd2 <KePanic(char const*)>
c00077ef:	83 c4 10             	add    esp,0x10
c00077f2:	83 ec 0c             	sub    esp,0xc
c00077f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00077f7:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c00077fb:	55                   	push   ebp
c00077fc:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0007800:	57                   	push   edi
c0007801:	6a 00                	push   0x0
c0007803:	68 00 01 00 00       	push   0x100
c0007808:	53                   	push   ebx
c0007809:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000780c:	83 c4 20             	add    esp,0x20
c000780f:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007817:	75 4b                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0x147>
c0007819:	83 ec 0c             	sub    esp,0xc
c000781c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000781e:	55                   	push   ebp
c000781f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007823:	52                   	push   edx
c0007824:	6a 00                	push   0x0
c0007826:	6a 08                	push   0x8
c0007828:	53                   	push   ebx
c0007829:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000782c:	83 c4 20             	add    esp,0x20
c000782f:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007834:	75 2e                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0x147>
c0007836:	50                   	push   eax
c0007837:	50                   	push   eax
c0007838:	57                   	push   edi
c0007839:	56                   	push   esi
c000783a:	e8 41 8f ff ff       	call   c0000780 <strcmp>
c000783f:	83 c4 10             	add    esp,0x10
c0007842:	85 c0                	test   eax,eax
c0007844:	75 ac                	jne    c00077f2 <KiIsSymlinkRegistered(char const*)+0xd5>
c0007846:	83 ec 0c             	sub    esp,0xc
c0007849:	53                   	push   ebx
c000784a:	e8 59 09 00 00       	call   c00081a8 <File::close()>
c000784f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007851:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007854:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007857:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000785b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000785f:	83 c4 10             	add    esp,0x10
c0007862:	eb 18                	jmp    c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c0007864:	83 ec 0c             	sub    esp,0xc
c0007867:	53                   	push   ebx
c0007868:	e8 3b 09 00 00       	call   c00081a8 <File::close()>
c000786d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000786f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007872:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007875:	83 c4 10             	add    esp,0x10
c0007878:	31 c0                	xor    eax,eax
c000787a:	31 d2                	xor    edx,edx
c000787c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0007882:	5b                   	pop    ebx
c0007883:	5e                   	pop    esi
c0007884:	5f                   	pop    edi
c0007885:	5d                   	pop    ebp
c0007886:	c3                   	ret    

c0007887 <KeDereferenceSymlink(char const*, char*)>:
c0007887:	55                   	push   ebp
c0007888:	57                   	push   edi
c0007889:	56                   	push   esi
c000788a:	53                   	push   ebx
c000788b:	83 ec 48             	sub    esp,0x48
c000788e:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0007892:	56                   	push   esi
c0007893:	e8 85 fe ff ff       	call   c000771d <KiIsSymlinkRegistered(char const*)>
c0007898:	83 c4 10             	add    esp,0x10
c000789b:	89 c7                	mov    edi,eax
c000789d:	89 d0                	mov    eax,edx
c000789f:	09 f8                	or     eax,edi
c00078a1:	75 07                	jne    c00078aa <KeDereferenceSymlink(char const*, char*)+0x23>
c00078a3:	31 c0                	xor    eax,eax
c00078a5:	e9 7c 01 00 00       	jmp    c0007a26 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00078aa:	83 ec 0c             	sub    esp,0xc
c00078ad:	89 d5                	mov    ebp,edx
c00078af:	68 14 01 00 00       	push   0x114
c00078b4:	e8 d3 71 00 00       	call   c000ea8c <malloc>
c00078b9:	83 c4 0c             	add    esp,0xc
c00078bc:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c00078c2:	56                   	push   esi
c00078c3:	50                   	push   eax
c00078c4:	89 c3                	mov    ebx,eax
c00078c6:	e8 61 08 00 00       	call   c000812c <File::File(char const*, Process*)>
c00078cb:	83 c4 10             	add    esp,0x10
c00078ce:	85 db                	test   ebx,ebx
c00078d0:	0f 84 32 01 00 00    	je     c0007a08 <KeDereferenceSymlink(char const*, char*)+0x181>
c00078d6:	56                   	push   esi
c00078d7:	56                   	push   esi
c00078d8:	6a 01                	push   0x1
c00078da:	53                   	push   ebx
c00078db:	e8 6a 08 00 00       	call   c000814a <File::open(FileOpenMode)>
c00078e0:	83 c4 10             	add    esp,0x10
c00078e3:	85 c0                	test   eax,eax
c00078e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078e7:	74 09                	je     c00078f2 <KeDereferenceSymlink(char const*, char*)+0x6b>
c00078e9:	83 ec 0c             	sub    esp,0xc
c00078ec:	53                   	push   ebx
c00078ed:	e9 10 01 00 00       	jmp    c0007a02 <KeDereferenceSymlink(char const*, char*)+0x17b>
c00078f2:	83 ec 0c             	sub    esp,0xc
c00078f5:	8d 74 24 18          	lea    esi,[esp+0x18]
c00078f9:	56                   	push   esi
c00078fa:	8d 54 24 37          	lea    edx,[esp+0x37]
c00078fe:	52                   	push   edx
c00078ff:	6a 00                	push   0x0
c0007901:	6a 08                	push   0x8
c0007903:	53                   	push   ebx
c0007904:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007907:	83 c4 20             	add    esp,0x20
c000790a:	85 c0                	test   eax,eax
c000790c:	0f 85 e2 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007912:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007917:	0f 85 d7 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000791d:	83 ec 0c             	sub    esp,0xc
c0007920:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007922:	56                   	push   esi
c0007923:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007927:	52                   	push   edx
c0007928:	6a 00                	push   0x0
c000792a:	6a 08                	push   0x8
c000792c:	53                   	push   ebx
c000792d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007930:	83 c4 20             	add    esp,0x20
c0007933:	85 c0                	test   eax,eax
c0007935:	0f 85 b9 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000793b:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007940:	0f 85 ae 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007946:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000794a:	0f 85 53 ff ff ff    	jne    c00078a3 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007950:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0007954:	0f 85 49 ff ff ff    	jne    c00078a3 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000795a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0007962:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000796a:	51                   	push   ecx
c000796b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000796f:	50                   	push   eax
c0007970:	8d 44 24 20          	lea    eax,[esp+0x20]
c0007974:	50                   	push   eax
c0007975:	53                   	push   ebx
c0007976:	e8 d1 0a 00 00       	call   c000844c <File::stat(unsigned long long*, bool*)>
c000797b:	83 c4 10             	add    esp,0x10
c000797e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0007983:	75 6f                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007985:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007989:	31 c9                	xor    ecx,ecx
c000798b:	bf 0f 00 00 00       	mov    edi,0xf
c0007990:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007994:	39 c7                	cmp    edi,eax
c0007996:	89 cf                	mov    edi,ecx
c0007998:	19 d7                	sbb    edi,edx
c000799a:	73 58                	jae    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000799c:	83 c0 f0             	add    eax,0xfffffff0
c000799f:	bf ff 00 00 00       	mov    edi,0xff
c00079a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079a8:	83 d2 ff             	adc    edx,0xffffffff
c00079ab:	39 c7                	cmp    edi,eax
c00079ad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079b1:	19 d1                	sbb    ecx,edx
c00079b3:	72 53                	jb     c0007a08 <KeDereferenceSymlink(char const*, char*)+0x181>
c00079b5:	40                   	inc    eax
c00079b6:	52                   	push   edx
c00079b7:	50                   	push   eax
c00079b8:	6a 00                	push   0x0
c00079ba:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00079be:	e8 2d 8b ff ff       	call   c00004f0 <memset>
c00079c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079c5:	89 34 24             	mov    DWORD PTR [esp],esi
c00079c8:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00079cc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079d0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079d4:	53                   	push   ebx
c00079d5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079d8:	83 c4 20             	add    esp,0x20
c00079db:	85 c0                	test   eax,eax
c00079dd:	75 15                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079e3:	89 c7                	mov    edi,eax
c00079e5:	c1 ff 1f             	sar    edi,0x1f
c00079e8:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00079ec:	75 06                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079ee:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00079f2:	74 19                	je     c0007a0d <KeDereferenceSymlink(char const*, char*)+0x186>
c00079f4:	83 ec 0c             	sub    esp,0xc
c00079f7:	53                   	push   ebx
c00079f8:	e8 ab 07 00 00       	call   c00081a8 <File::close()>
c00079fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a02:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a05:	83 c4 10             	add    esp,0x10
c0007a08:	83 c8 ff             	or     eax,0xffffffff
c0007a0b:	eb 19                	jmp    c0007a26 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a0d:	83 ec 0c             	sub    esp,0xc
c0007a10:	53                   	push   ebx
c0007a11:	e8 92 07 00 00       	call   c00081a8 <File::close()>
c0007a16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a1b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a1e:	83 c4 10             	add    esp,0x10
c0007a21:	b8 01 00 00 00       	mov    eax,0x1
c0007a26:	83 c4 3c             	add    esp,0x3c
c0007a29:	5b                   	pop    ebx
c0007a2a:	5e                   	pop    esi
c0007a2b:	5f                   	pop    edi
c0007a2c:	5d                   	pop    ebp
c0007a2d:	c3                   	ret    

c0007a2e <KeCreateSymlink(char const*, char const*)>:
c0007a2e:	55                   	push   ebp
c0007a2f:	57                   	push   edi
c0007a30:	56                   	push   esi
c0007a31:	53                   	push   ebx
c0007a32:	83 ec 38             	sub    esp,0x38
c0007a35:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a39:	68 14 01 00 00       	push   0x114
c0007a3e:	e8 49 70 00 00       	call   c000ea8c <malloc>
c0007a43:	6a 00                	push   0x0
c0007a45:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0007a4b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a4f:	89 c3                	mov    ebx,eax
c0007a51:	50                   	push   eax
c0007a52:	e8 d7 05 00 00       	call   c000802e <File::File(char const*, Process*, bool)>
c0007a57:	83 c4 20             	add    esp,0x20
c0007a5a:	85 db                	test   ebx,ebx
c0007a5c:	b8 01 00 00 00       	mov    eax,0x1
c0007a61:	0f 84 fb 00 00 00    	je     c0007b62 <KeCreateSymlink(char const*, char const*)+0x134>
c0007a67:	52                   	push   edx
c0007a68:	52                   	push   edx
c0007a69:	6a 12                	push   0x12
c0007a6b:	53                   	push   ebx
c0007a6c:	e8 d9 06 00 00       	call   c000814a <File::open(FileOpenMode)>
c0007a71:	83 c4 10             	add    esp,0x10
c0007a74:	85 c0                	test   eax,eax
c0007a76:	74 0b                	je     c0007a83 <KeCreateSymlink(char const*, char const*)+0x55>
c0007a78:	83 ec 0c             	sub    esp,0xc
c0007a7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a7d:	53                   	push   ebx
c0007a7e:	e9 d4 00 00 00       	jmp    c0007b57 <KeCreateSymlink(char const*, char const*)+0x129>
c0007a83:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007a87:	be 3d 1c 02 c0       	mov    esi,0xc0021c3d
c0007a8c:	b9 09 00 00 00       	mov    ecx,0x9
c0007a91:	fc                   	cld    
c0007a92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007a94:	83 ec 0c             	sub    esp,0xc
c0007a97:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007a9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a9d:	56                   	push   esi
c0007a9e:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007aa2:	52                   	push   edx
c0007aa3:	6a 00                	push   0x0
c0007aa5:	6a 08                	push   0x8
c0007aa7:	53                   	push   ebx
c0007aa8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007aab:	83 c4 20             	add    esp,0x20
c0007aae:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007ab3:	0f 85 90 00 00 00    	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ab9:	85 c0                	test   eax,eax
c0007abb:	0f 85 88 00 00 00    	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ac1:	e8 07 fa ff ff       	call   c00074cd <KiCreateSymlinkID()>
c0007ac6:	83 ec 0c             	sub    esp,0xc
c0007ac9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007acd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007ad1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ad3:	56                   	push   esi
c0007ad4:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007ad8:	52                   	push   edx
c0007ad9:	6a 00                	push   0x0
c0007adb:	6a 08                	push   0x8
c0007add:	53                   	push   ebx
c0007ade:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007ae1:	83 c4 20             	add    esp,0x20
c0007ae4:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007ae9:	75 5e                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007aeb:	85 c0                	test   eax,eax
c0007aed:	75 5a                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007aef:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007af1:	83 ec 0c             	sub    esp,0xc
c0007af4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007af7:	55                   	push   ebp
c0007af8:	e8 83 8a ff ff       	call   c0000580 <strlen>
c0007afd:	31 d2                	xor    edx,edx
c0007aff:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b02:	55                   	push   ebp
c0007b03:	52                   	push   edx
c0007b04:	50                   	push   eax
c0007b05:	53                   	push   ebx
c0007b06:	ff d7                	call   edi
c0007b08:	83 c4 14             	add    esp,0x14
c0007b0b:	55                   	push   ebp
c0007b0c:	89 c6                	mov    esi,eax
c0007b0e:	e8 6d 8a ff ff       	call   c0000580 <strlen>
c0007b13:	83 c4 10             	add    esp,0x10
c0007b16:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b1a:	75 2d                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b1c:	85 f6                	test   esi,esi
c0007b1e:	75 29                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b20:	50                   	push   eax
c0007b21:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b25:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b29:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b2d:	e8 06 fa ff ff       	call   c0007538 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b35:	e8 6e 06 00 00       	call   c00081a8 <File::close()>
c0007b3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b3f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b42:	83 c4 10             	add    esp,0x10
c0007b45:	31 c0                	xor    eax,eax
c0007b47:	eb 19                	jmp    c0007b62 <KeCreateSymlink(char const*, char const*)+0x134>
c0007b49:	83 ec 0c             	sub    esp,0xc
c0007b4c:	53                   	push   ebx
c0007b4d:	e8 56 06 00 00       	call   c00081a8 <File::close()>
c0007b52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b57:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b5a:	83 c4 10             	add    esp,0x10
c0007b5d:	b8 01 00 00 00       	mov    eax,0x1
c0007b62:	83 c4 2c             	add    esp,0x2c
c0007b65:	5b                   	pop    ebx
c0007b66:	5e                   	pop    esi
c0007b67:	5f                   	pop    edi
c0007b68:	5d                   	pop    ebp
c0007b69:	c3                   	ret    

c0007b6a <File::read(unsigned long long, void*, int*)>:
c0007b6a:	53                   	push   ebx
c0007b6b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007b6f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007b73:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007b7a:	83 f8 19             	cmp    eax,0x19
c0007b7d:	77 35                	ja     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b7f:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0007b86:	85 c0                	test   eax,eax
c0007b88:	74 2a                	je     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b8a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007b90:	85 c0                	test   eax,eax
c0007b92:	74 20                	je     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b94:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007b98:	74 21                	je     c0007bbb <File::read(unsigned long long, void*, int*)+0x51>
c0007b9a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007b9c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007ba0:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007ba6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007baa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007bae:	5b                   	pop    ebx
c0007baf:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007bb2:	ff e0                	jmp    eax
c0007bb4:	b8 0b 00 00 00       	mov    eax,0xb
c0007bb9:	eb 05                	jmp    c0007bc0 <File::read(unsigned long long, void*, int*)+0x56>
c0007bbb:	b8 05 00 00 00       	mov    eax,0x5
c0007bc0:	5b                   	pop    ebx
c0007bc1:	c3                   	ret    

c0007bc2 <File::write(unsigned long long, void*, int*)>:
c0007bc2:	53                   	push   ebx
c0007bc3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007bc7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007bcb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bd2:	83 f8 19             	cmp    eax,0x19
c0007bd5:	77 35                	ja     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007bd7:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0007bde:	85 c0                	test   eax,eax
c0007be0:	74 2a                	je     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007be2:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007be8:	85 c0                	test   eax,eax
c0007bea:	74 20                	je     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007bec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bf0:	74 21                	je     c0007c13 <File::write(unsigned long long, void*, int*)+0x51>
c0007bf2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bf4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bf8:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007bfe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c02:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c06:	5b                   	pop    ebx
c0007c07:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c0a:	ff e0                	jmp    eax
c0007c0c:	b8 0b 00 00 00       	mov    eax,0xb
c0007c11:	eb 05                	jmp    c0007c18 <File::write(unsigned long long, void*, int*)+0x56>
c0007c13:	b8 05 00 00 00       	mov    eax,0x5
c0007c18:	5b                   	pop    ebx
c0007c19:	c3                   	ret    

c0007c1a <Directory::read(unsigned long long, void*, int*)>:
c0007c1a:	53                   	push   ebx
c0007c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c1f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c23:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c2a:	83 f8 19             	cmp    eax,0x19
c0007c2d:	77 35                	ja     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c2f:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0007c36:	85 c0                	test   eax,eax
c0007c38:	74 2a                	je     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c3a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c40:	85 c0                	test   eax,eax
c0007c42:	74 20                	je     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c44:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c48:	74 21                	je     c0007c6b <Directory::read(unsigned long long, void*, int*)+0x51>
c0007c4a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c4c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c50:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c5e:	5b                   	pop    ebx
c0007c5f:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007c62:	ff e0                	jmp    eax
c0007c64:	b8 0b 00 00 00       	mov    eax,0xb
c0007c69:	eb 05                	jmp    c0007c70 <Directory::read(unsigned long long, void*, int*)+0x56>
c0007c6b:	b8 05 00 00 00       	mov    eax,0x5
c0007c70:	5b                   	pop    ebx
c0007c71:	c3                   	ret    

c0007c72 <Directory::write(unsigned long long, void*, int*)>:
c0007c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c76:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007c7d:	b8 0b 00 00 00       	mov    eax,0xb
c0007c82:	83 fa 19             	cmp    edx,0x19
c0007c85:	77 18                	ja     c0007c9f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007c87:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c0007c8e:	85 d2                	test   edx,edx
c0007c90:	74 0d                	je     c0007c9f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007c92:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007c99:	19 c0                	sbb    eax,eax
c0007c9b:	83 e0 0a             	and    eax,0xa
c0007c9e:	40                   	inc    eax
c0007c9f:	c3                   	ret    

c0007ca0 <File::isAtty()>:
c0007ca0:	31 c0                	xor    eax,eax
c0007ca2:	c3                   	ret    
c0007ca3:	90                   	nop

c0007ca4 <Directory::isAtty()>:
c0007ca4:	31 c0                	xor    eax,eax
c0007ca6:	c3                   	ret    
c0007ca7:	90                   	nop

c0007ca8 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007ca8:	b8 0a 00 00 00       	mov    eax,0xa
c0007cad:	c3                   	ret    

c0007cae <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007cae:	b8 0a 00 00 00       	mov    eax,0xa
c0007cb3:	c3                   	ret    

c0007cb4 <Filesystem::allocateSwapfile(char const*, int)>:
c0007cb4:	31 c0                	xor    eax,eax
c0007cb6:	31 d2                	xor    edx,edx
c0007cb8:	c3                   	ret    
c0007cb9:	90                   	nop

c0007cba <File::~File()>:
c0007cba:	83 ec 0c             	sub    esp,0xc
c0007cbd:	ba 14 1d 02 c0       	mov    edx,0xc0021d14
c0007cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cc6:	89 10                	mov    DWORD PTR [eax],edx
c0007cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ccc:	83 ec 0c             	sub    esp,0xc
c0007ccf:	50                   	push   eax
c0007cd0:	e8 41 a2 00 00       	call   c0011f16 <UnixFile::~UnixFile()>
c0007cd5:	83 c4 10             	add    esp,0x10
c0007cd8:	90                   	nop
c0007cd9:	83 c4 0c             	add    esp,0xc
c0007cdc:	c3                   	ret    
c0007cdd:	90                   	nop

c0007cde <File::~File()>:
c0007cde:	83 ec 0c             	sub    esp,0xc
c0007ce1:	83 ec 0c             	sub    esp,0xc
c0007ce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ce8:	e8 cd ff ff ff       	call   c0007cba <File::~File()>
c0007ced:	83 c4 10             	add    esp,0x10
c0007cf0:	83 ec 08             	sub    esp,0x8
c0007cf3:	68 14 01 00 00       	push   0x114
c0007cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cfc:	e8 06 4b 00 00       	call   c000c807 <operator delete(void*, unsigned long)>
c0007d01:	83 c4 10             	add    esp,0x10
c0007d04:	83 c4 0c             	add    esp,0xc
c0007d07:	c3                   	ret    

c0007d08 <Directory::~Directory()>:
c0007d08:	83 ec 0c             	sub    esp,0xc
c0007d0b:	ba 30 1d 02 c0       	mov    edx,0xc0021d30
c0007d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d14:	89 10                	mov    DWORD PTR [eax],edx
c0007d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d1a:	83 ec 0c             	sub    esp,0xc
c0007d1d:	50                   	push   eax
c0007d1e:	e8 f3 a1 00 00       	call   c0011f16 <UnixFile::~UnixFile()>
c0007d23:	83 c4 10             	add    esp,0x10
c0007d26:	90                   	nop
c0007d27:	83 c4 0c             	add    esp,0xc
c0007d2a:	c3                   	ret    
c0007d2b:	90                   	nop

c0007d2c <Directory::~Directory()>:
c0007d2c:	83 ec 0c             	sub    esp,0xc
c0007d2f:	83 ec 0c             	sub    esp,0xc
c0007d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d36:	e8 cd ff ff ff       	call   c0007d08 <Directory::~Directory()>
c0007d3b:	83 c4 10             	add    esp,0x10
c0007d3e:	83 ec 08             	sub    esp,0x8
c0007d41:	68 14 01 00 00       	push   0x114
c0007d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d4a:	e8 b8 4a 00 00       	call   c000c807 <operator delete(void*, unsigned long)>
c0007d4f:	83 c4 10             	add    esp,0x10
c0007d52:	83 c4 0c             	add    esp,0xc
c0007d55:	c3                   	ret    

c0007d56 <Filesystem::Filesystem()>:
c0007d56:	ba a8 1c 02 c0       	mov    edx,0xc0021ca8
c0007d5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d5f:	89 10                	mov    DWORD PTR [eax],edx
c0007d61:	8b 15 04 a3 02 c0    	mov    edx,DWORD PTR ds:0xc002a304
c0007d67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d6b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007d6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d72:	a3 04 a3 02 c0       	mov    ds:0xc002a304,eax
c0007d77:	90                   	nop
c0007d78:	c3                   	ret    
c0007d79:	90                   	nop

c0007d7a <Filesystem::~Filesystem()>:
c0007d7a:	ba a8 1c 02 c0       	mov    edx,0xc0021ca8
c0007d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d83:	89 10                	mov    DWORD PTR [eax],edx
c0007d85:	90                   	nop
c0007d86:	c3                   	ret    
c0007d87:	90                   	nop

c0007d88 <Filesystem::~Filesystem()>:
c0007d88:	83 ec 0c             	sub    esp,0xc
c0007d8b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007d8f:	e8 e6 ff ff ff       	call   c0007d7a <Filesystem::~Filesystem()>
c0007d94:	83 c4 04             	add    esp,0x4
c0007d97:	83 ec 08             	sub    esp,0x8
c0007d9a:	6a 08                	push   0x8
c0007d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007da0:	e8 62 4a 00 00       	call   c000c807 <operator delete(void*, unsigned long)>
c0007da5:	83 c4 10             	add    esp,0x10
c0007da8:	83 c4 0c             	add    esp,0xc
c0007dab:	c3                   	ret    

c0007dac <Fs::getcwd(Process*, char*, int)>:
c0007dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007db0:	31 c0                	xor    eax,eax
c0007db2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007db6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007db9:	7d 15                	jge    c0007dd0 <Fs::getcwd(Process*, char*, int)+0x24>
c0007dbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007dbf:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007dc6:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007dc9:	84 c9                	test   cl,cl
c0007dcb:	74 06                	je     c0007dd3 <Fs::getcwd(Process*, char*, int)+0x27>
c0007dcd:	40                   	inc    eax
c0007dce:	eb e2                	jmp    c0007db2 <Fs::getcwd(Process*, char*, int)+0x6>
c0007dd0:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007dd3:	31 c0                	xor    eax,eax
c0007dd5:	c3                   	ret    

c0007dd6 <Fs::initVFS()>:
c0007dd6:	83 ec 18             	sub    esp,0x18
c0007dd9:	6a 08                	push   0x8
c0007ddb:	e8 ac 6c 00 00       	call   c000ea8c <malloc>
c0007de0:	89 04 24             	mov    DWORD PTR [esp],eax
c0007de3:	e8 04 2c 01 00       	call   c001a9ec <FAT::FAT()>
c0007de8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007def:	e8 98 6c 00 00       	call   c000ea8c <malloc>
c0007df4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007df7:	e8 1e 3b 01 00       	call   c001b91a <ISO9660::ISO9660()>
c0007dfc:	83 c4 1c             	add    esp,0x1c
c0007dff:	c3                   	ret    

c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e00:	55                   	push   ebp
c0007e01:	57                   	push   edi
c0007e02:	56                   	push   esi
c0007e03:	53                   	push   ebx
c0007e04:	81 ec 20 04 00 00    	sub    esp,0x420
c0007e0a:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c0007e11:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c0007e18:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c0007e1f:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c0007e26:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0007e2a:	68 00 04 00 00       	push   0x400
c0007e2f:	6a 00                	push   0x0
c0007e31:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0007e35:	57                   	push   edi
c0007e36:	e8 b5 86 ff ff       	call   c00004f0 <memset>
c0007e3b:	83 c4 10             	add    esp,0x10
c0007e3e:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c0007e42:	75 0b                	jne    c0007e4f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c0007e44:	50                   	push   eax
c0007e45:	50                   	push   eax
c0007e46:	56                   	push   esi
c0007e47:	57                   	push   edi
c0007e48:	e8 03 88 ff ff       	call   c0000650 <strcpy>
c0007e4d:	eb 45                	jmp    c0007e94 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c0007e4f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007e52:	83 f8 2f             	cmp    eax,0x2f
c0007e55:	74 05                	je     c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c0007e57:	83 f8 5c             	cmp    eax,0x5c
c0007e5a:	75 19                	jne    c0007e75 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c0007e5c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0007e5f:	3c 60                	cmp    al,0x60
c0007e61:	7e 03                	jle    c0007e66 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c0007e63:	83 e8 20             	sub    eax,0x20
c0007e66:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007e6a:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007e71:	50                   	push   eax
c0007e72:	50                   	push   eax
c0007e73:	eb 18                	jmp    c0007e8d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c0007e75:	50                   	push   eax
c0007e76:	50                   	push   eax
c0007e77:	55                   	push   ebp
c0007e78:	57                   	push   edi
c0007e79:	e8 d2 87 ff ff       	call   c0000650 <strcpy>
c0007e7e:	58                   	pop    eax
c0007e7f:	5a                   	pop    edx
c0007e80:	68 1e 38 02 c0       	push   0xc002381e
c0007e85:	57                   	push   edi
c0007e86:	e8 e5 89 ff ff       	call   c0000870 <strcat>
c0007e8b:	59                   	pop    ecx
c0007e8c:	5d                   	pop    ebp
c0007e8d:	56                   	push   esi
c0007e8e:	57                   	push   edi
c0007e8f:	e8 dc 89 ff ff       	call   c0000870 <strcat>
c0007e94:	83 c4 10             	add    esp,0x10
c0007e97:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0007e9b:	3c 60                	cmp    al,0x60
c0007e9d:	7e 03                	jle    c0007ea2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c0007e9f:	83 e8 20             	sub    eax,0x20
c0007ea2:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007ea6:	be 03 00 00 00       	mov    esi,0x3
c0007eab:	88 03                	mov    BYTE PTR [ebx],al
c0007ead:	b8 03 00 00 00       	mov    eax,0x3
c0007eb2:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007eb9:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0007ebf:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0007ec3:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c0007ec8:	89 fa                	mov    edx,edi
c0007eca:	0f be ea             	movsx  ebp,dl
c0007ecd:	85 ed                	test   ebp,ebp
c0007ecf:	0f 84 a1 00 00 00    	je     c0007f76 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c0007ed5:	8d 56 01             	lea    edx,[esi+0x1]
c0007ed8:	83 fd 2f             	cmp    ebp,0x2f
c0007edb:	74 05                	je     c0007ee2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c0007edd:	83 fd 5c             	cmp    ebp,0x5c
c0007ee0:	75 12                	jne    c0007ef4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007ee2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007ee7:	89 c5                	mov    ebp,eax
c0007ee9:	74 09                	je     c0007ef4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007eeb:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0007eef:	40                   	inc    eax
c0007ef0:	89 d6                	mov    esi,edx
c0007ef2:	eb cf                	jmp    c0007ec3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007ef4:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c0007ef9:	89 f9                	mov    ecx,edi
c0007efb:	0f be e9             	movsx  ebp,cl
c0007efe:	75 61                	jne    c0007f61 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f00:	83 fd 2e             	cmp    ebp,0x2e
c0007f03:	75 5c                	jne    c0007f61 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f05:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c0007f0a:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c0007f0f:	74 19                	je     c0007f2a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c0007f11:	83 fd 2e             	cmp    ebp,0x2e
c0007f14:	74 55                	je     c0007f6b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f16:	89 f2                	mov    edx,esi
c0007f18:	42                   	inc    edx
c0007f19:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f1e:	83 f9 2f             	cmp    ecx,0x2f
c0007f21:	74 f5                	je     c0007f18 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f23:	83 f9 5c             	cmp    ecx,0x5c
c0007f26:	74 f0                	je     c0007f18 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f28:	eb c6                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f2a:	83 fd 2e             	cmp    ebp,0x2e
c0007f2d:	74 3c                	je     c0007f6b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f2f:	83 f8 03             	cmp    eax,0x3
c0007f32:	74 bc                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f34:	42                   	inc    edx
c0007f35:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f3a:	83 f9 2f             	cmp    ecx,0x2f
c0007f3d:	74 f5                	je     c0007f34 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f3f:	83 f9 5c             	cmp    ecx,0x5c
c0007f42:	74 f0                	je     c0007f34 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f44:	48                   	dec    eax
c0007f45:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007f49:	75 06                	jne    c0007f51 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007f4b:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f4f:	eb f3                	jmp    c0007f44 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c0007f51:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007f55:	74 07                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c0007f57:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f5b:	48                   	dec    eax
c0007f5c:	eb f3                	jmp    c0007f51 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007f5e:	40                   	inc    eax
c0007f5f:	eb 8f                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f61:	83 fd 2f             	cmp    ebp,0x2f
c0007f64:	74 8a                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f66:	83 fd 5c             	cmp    ebp,0x5c
c0007f69:	74 85                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f6b:	89 f9                	mov    ecx,edi
c0007f6d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0007f70:	40                   	inc    eax
c0007f71:	e9 7a ff ff ff       	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f76:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f7a:	83 ec 0c             	sub    esp,0xc
c0007f7d:	53                   	push   ebx
c0007f7e:	e8 fd 85 ff ff       	call   c0000580 <strlen>
c0007f83:	83 c4 10             	add    esp,0x10
c0007f86:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0007f8b:	74 1c                	je     c0007fa9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007f8d:	83 ec 0c             	sub    esp,0xc
c0007f90:	53                   	push   ebx
c0007f91:	e8 ea 85 ff ff       	call   c0000580 <strlen>
c0007f96:	83 c4 10             	add    esp,0x10
c0007f99:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007f9e:	74 09                	je     c0007fa9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007fa0:	31 ff                	xor    edi,edi
c0007fa2:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c0007fa7:	eb 5c                	jmp    c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0007fa9:	83 ec 0c             	sub    esp,0xc
c0007fac:	53                   	push   ebx
c0007fad:	e8 ce 85 ff ff       	call   c0000580 <strlen>
c0007fb2:	83 c4 10             	add    esp,0x10
c0007fb5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0007fba:	74 e4                	je     c0007fa0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c0007fbc:	83 ec 0c             	sub    esp,0xc
c0007fbf:	53                   	push   ebx
c0007fc0:	e8 bb 85 ff ff       	call   c0000580 <strlen>
c0007fc5:	83 c4 10             	add    esp,0x10
c0007fc8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0007fcd:	eb ab                	jmp    c0007f7a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c0007fcf:	52                   	push   edx
c0007fd0:	52                   	push   edx
c0007fd1:	53                   	push   ebx
c0007fd2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0007fd6:	55                   	push   ebp
c0007fd7:	e8 74 86 ff ff       	call   c0000650 <strcpy>
c0007fdc:	59                   	pop    ecx
c0007fdd:	58                   	pop    eax
c0007fde:	53                   	push   ebx
c0007fdf:	55                   	push   ebp
c0007fe0:	e8 a2 f8 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c0007fe5:	83 c4 10             	add    esp,0x10
c0007fe8:	48                   	dec    eax
c0007fe9:	75 37                	jne    c0008022 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0007feb:	50                   	push   eax
c0007fec:	53                   	push   ebx
c0007fed:	55                   	push   ebp
c0007fee:	68 46 1c 02 c0       	push   0xc0021c46
c0007ff3:	e8 56 ef ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007ff8:	8d 47 01             	lea    eax,[edi+0x1]
c0007ffb:	83 c4 10             	add    esp,0x10
c0007ffe:	83 ff 14             	cmp    edi,0x14
c0008001:	74 08                	je     c000800b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c0008003:	89 c7                	mov    edi,eax
c0008005:	85 f6                	test   esi,esi
c0008007:	75 c6                	jne    c0007fcf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c0008009:	eb 17                	jmp    c0008022 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000800b:	83 ec 0c             	sub    esp,0xc
c000800e:	bf 15 00 00 00       	mov    edi,0x15
c0008013:	68 61 1c 02 c0       	push   0xc0021c61
c0008018:	e8 b5 6d 00 00       	call   c000edd2 <KePanic(char const*)>
c000801d:	83 c4 10             	add    esp,0x10
c0008020:	eb e3                	jmp    c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0008022:	81 c4 1c 04 00 00    	add    esp,0x41c
c0008028:	5b                   	pop    ebx
c0008029:	5e                   	pop    esi
c000802a:	5f                   	pop    edi
c000802b:	5d                   	pop    ebp
c000802c:	c3                   	ret    
c000802d:	90                   	nop

c000802e <File::File(char const*, Process*, bool)>:
c000802e:	83 ec 1c             	sub    esp,0x1c
c0008031:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008035:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000803d:	83 ec 08             	sub    esp,0x8
c0008040:	6a 00                	push   0x0
c0008042:	50                   	push   eax
c0008043:	e8 e8 9c 00 00       	call   c0011d30 <UnixFile::UnixFile(int)>
c0008048:	83 c4 10             	add    esp,0x10
c000804b:	ba 14 1d 02 c0       	mov    edx,0xc0021d14
c0008050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008054:	89 10                	mov    DWORD PTR [eax],edx
c0008056:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000805b:	85 c0                	test   eax,eax
c000805d:	74 0f                	je     c000806e <File::File(char const*, Process*, bool)+0x40>
c000805f:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0008064:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0008068:	74 04                	je     c000806e <File::File(char const*, Process*, bool)+0x40>
c000806a:	b0 01                	mov    al,0x1
c000806c:	eb 02                	jmp    c0008070 <File::File(char const*, Process*, bool)+0x42>
c000806e:	b0 00                	mov    al,0x0
c0008070:	0f b6 c0             	movzx  eax,al
c0008073:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008077:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000807d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008081:	83 c2 0d             	add    edx,0xd
c0008084:	50                   	push   eax
c0008085:	51                   	push   ecx
c0008086:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000808a:	52                   	push   edx
c000808b:	e8 70 fd ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008090:	83 c4 10             	add    esp,0x10
c0008093:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008097:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000809a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000809e:	83 c2 0d             	add    edx,0xd
c00080a1:	83 ec 04             	sub    esp,0x4
c00080a4:	50                   	push   eax
c00080a5:	52                   	push   edx
c00080a6:	68 87 1c 02 c0       	push   0xc0021c87
c00080ab:	e8 9e ee ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00080b0:	83 c4 10             	add    esp,0x10
c00080b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b7:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00080ba:	83 e8 41             	sub    eax,0x41
c00080bd:	88 c2                	mov    dl,al
c00080bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080c3:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00080c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080cd:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00080d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080d5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080db:	0f b6 c0             	movzx  eax,al
c00080de:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c00080e5:	85 c0                	test   eax,eax
c00080e7:	74 3e                	je     c0008127 <File::File(char const*, Process*, bool)+0xf9>
c00080e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080ed:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080f3:	0f b6 c0             	movzx  eax,al
c00080f6:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c00080fd:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008103:	85 c0                	test   eax,eax
c0008105:	75 20                	jne    c0008127 <File::File(char const*, Process*, bool)+0xf9>
c0008107:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000810b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008111:	0f b6 c0             	movzx  eax,al
c0008114:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c000811b:	83 ec 0c             	sub    esp,0xc
c000811e:	50                   	push   eax
c000811f:	e8 02 1f 00 00       	call   c000a026 <LogicalDisk::mount()>
c0008124:	83 c4 10             	add    esp,0x10
c0008127:	90                   	nop
c0008128:	83 c4 1c             	add    esp,0x1c
c000812b:	c3                   	ret    

c000812c <File::File(char const*, Process*)>:
c000812c:	83 ec 0c             	sub    esp,0xc
c000812f:	6a 01                	push   0x1
c0008131:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008135:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008139:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000813d:	e8 ec fe ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0008142:	83 c4 10             	add    esp,0x10
c0008145:	90                   	nop
c0008146:	83 c4 0c             	add    esp,0xc
c0008149:	c3                   	ret    

c000814a <File::open(FileOpenMode)>:
c000814a:	53                   	push   ebx
c000814b:	b8 0b 00 00 00       	mov    eax,0xb
c0008150:	83 ec 08             	sub    esp,0x8
c0008153:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008157:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000815e:	83 fa 19             	cmp    edx,0x19
c0008161:	77 40                	ja     c00081a3 <File::open(FileOpenMode)+0x59>
c0008163:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c000816a:	85 d2                	test   edx,edx
c000816c:	74 35                	je     c00081a3 <File::open(FileOpenMode)+0x59>
c000816e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008174:	85 d2                	test   edx,edx
c0008176:	74 2b                	je     c00081a3 <File::open(FileOpenMode)+0x59>
c0008178:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000817c:	b8 06 00 00 00       	mov    eax,0x6
c0008181:	75 20                	jne    c00081a3 <File::open(FileOpenMode)+0x59>
c0008183:	8b 02                	mov    eax,DWORD PTR [edx]
c0008185:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000818b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000818f:	51                   	push   ecx
c0008190:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008193:	51                   	push   ecx
c0008194:	52                   	push   edx
c0008195:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0008198:	83 c4 10             	add    esp,0x10
c000819b:	85 c0                	test   eax,eax
c000819d:	75 04                	jne    c00081a3 <File::open(FileOpenMode)+0x59>
c000819f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00081a3:	83 c4 08             	add    esp,0x8
c00081a6:	5b                   	pop    ebx
c00081a7:	c3                   	ret    

c00081a8 <File::close()>:
c00081a8:	53                   	push   ebx
c00081a9:	b8 0b 00 00 00       	mov    eax,0xb
c00081ae:	83 ec 08             	sub    esp,0x8
c00081b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00081b5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00081bc:	83 f9 19             	cmp    ecx,0x19
c00081bf:	77 41                	ja     c0008202 <File::close()+0x5a>
c00081c1:	8b 1c 8d 80 a7 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd5880]
c00081c8:	85 db                	test   ebx,ebx
c00081ca:	74 36                	je     c0008202 <File::close()+0x5a>
c00081cc:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00081d3:	74 2d                	je     c0008202 <File::close()+0x5a>
c00081d5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00081d9:	b8 05 00 00 00       	mov    eax,0x5
c00081de:	74 22                	je     c0008202 <File::close()+0x5a>
c00081e0:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00081e4:	8b 04 8d 80 a7 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd5880]
c00081eb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00081f1:	53                   	push   ebx
c00081f2:	53                   	push   ebx
c00081f3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00081f5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00081fb:	50                   	push   eax
c00081fc:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c00081ff:	83 c4 10             	add    esp,0x10
c0008202:	83 c4 08             	add    esp,0x8
c0008205:	5b                   	pop    ebx
c0008206:	c3                   	ret    
c0008207:	90                   	nop

c0008208 <File::seek(unsigned long long)>:
c0008208:	56                   	push   esi
c0008209:	b8 0b 00 00 00       	mov    eax,0xb
c000820e:	53                   	push   ebx
c000820f:	51                   	push   ecx
c0008210:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008214:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008218:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000821c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008223:	83 fa 19             	cmp    edx,0x19
c0008226:	77 31                	ja     c0008259 <File::seek(unsigned long long)+0x51>
c0008228:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c000822f:	85 d2                	test   edx,edx
c0008231:	74 26                	je     c0008259 <File::seek(unsigned long long)+0x51>
c0008233:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008239:	85 d2                	test   edx,edx
c000823b:	74 1c                	je     c0008259 <File::seek(unsigned long long)+0x51>
c000823d:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008241:	b8 05 00 00 00       	mov    eax,0x5
c0008246:	74 11                	je     c0008259 <File::seek(unsigned long long)+0x51>
c0008248:	8b 02                	mov    eax,DWORD PTR [edx]
c000824a:	53                   	push   ebx
c000824b:	51                   	push   ecx
c000824c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008252:	52                   	push   edx
c0008253:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0008256:	83 c4 10             	add    esp,0x10
c0008259:	5a                   	pop    edx
c000825a:	5b                   	pop    ebx
c000825b:	5e                   	pop    esi
c000825c:	c3                   	ret    
c000825d:	90                   	nop

c000825e <File::truncate(unsigned long long)>:
c000825e:	56                   	push   esi
c000825f:	b8 0b 00 00 00       	mov    eax,0xb
c0008264:	53                   	push   ebx
c0008265:	51                   	push   ecx
c0008266:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000826a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000826e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008272:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008279:	83 fa 19             	cmp    edx,0x19
c000827c:	77 31                	ja     c00082af <File::truncate(unsigned long long)+0x51>
c000827e:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c0008285:	85 d2                	test   edx,edx
c0008287:	74 26                	je     c00082af <File::truncate(unsigned long long)+0x51>
c0008289:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000828f:	85 d2                	test   edx,edx
c0008291:	74 1c                	je     c00082af <File::truncate(unsigned long long)+0x51>
c0008293:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008297:	b8 05 00 00 00       	mov    eax,0x5
c000829c:	74 11                	je     c00082af <File::truncate(unsigned long long)+0x51>
c000829e:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a0:	53                   	push   ebx
c00082a1:	51                   	push   ecx
c00082a2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082a8:	52                   	push   edx
c00082a9:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00082ac:	83 c4 10             	add    esp,0x10
c00082af:	5a                   	pop    edx
c00082b0:	5b                   	pop    ebx
c00082b1:	5e                   	pop    esi
c00082b2:	c3                   	ret    
c00082b3:	90                   	nop

c00082b4 <File::tell(unsigned long long*)>:
c00082b4:	83 ec 0c             	sub    esp,0xc
c00082b7:	b8 0b 00 00 00       	mov    eax,0xb
c00082bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00082c0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00082c7:	83 fa 19             	cmp    edx,0x19
c00082ca:	77 34                	ja     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082cc:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c00082d3:	85 d2                	test   edx,edx
c00082d5:	74 29                	je     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082d7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082dd:	85 d2                	test   edx,edx
c00082df:	74 1f                	je     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082e1:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00082e5:	b8 05 00 00 00       	mov    eax,0x5
c00082ea:	74 14                	je     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082ec:	50                   	push   eax
c00082ed:	8b 02                	mov    eax,DWORD PTR [edx]
c00082ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00082f3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00082f9:	52                   	push   edx
c00082fa:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00082fd:	83 c4 10             	add    esp,0x10
c0008300:	83 c4 0c             	add    esp,0xc
c0008303:	c3                   	ret    

c0008304 <File::rewind()>:
c0008304:	83 ec 10             	sub    esp,0x10
c0008307:	6a 00                	push   0x0
c0008309:	6a 00                	push   0x0
c000830b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000830f:	e8 f4 fe ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0008314:	83 c4 1c             	add    esp,0x1c
c0008317:	c3                   	ret    

c0008318 <File::unlink()>:
c0008318:	83 ec 0c             	sub    esp,0xc
c000831b:	b8 0b 00 00 00       	mov    eax,0xb
c0008320:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008324:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000832b:	83 f9 19             	cmp    ecx,0x19
c000832e:	77 2f                	ja     c000835f <File::unlink()+0x47>
c0008330:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008337:	85 c9                	test   ecx,ecx
c0008339:	74 24                	je     c000835f <File::unlink()+0x47>
c000833b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008341:	85 c9                	test   ecx,ecx
c0008343:	74 1a                	je     c000835f <File::unlink()+0x47>
c0008345:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008349:	b8 06 00 00 00       	mov    eax,0x6
c000834e:	75 0f                	jne    c000835f <File::unlink()+0x47>
c0008350:	50                   	push   eax
c0008351:	83 c2 0d             	add    edx,0xd
c0008354:	50                   	push   eax
c0008355:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008357:	52                   	push   edx
c0008358:	51                   	push   ecx
c0008359:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000835c:	83 c4 10             	add    esp,0x10
c000835f:	83 c4 0c             	add    esp,0xc
c0008362:	c3                   	ret    
c0008363:	90                   	nop

c0008364 <File::rename(char const*)>:
c0008364:	83 ec 0c             	sub    esp,0xc
c0008367:	b8 0b 00 00 00       	mov    eax,0xb
c000836c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008370:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008377:	83 f9 19             	cmp    ecx,0x19
c000837a:	77 32                	ja     c00083ae <File::rename(char const*)+0x4a>
c000837c:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008383:	85 c9                	test   ecx,ecx
c0008385:	74 27                	je     c00083ae <File::rename(char const*)+0x4a>
c0008387:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000838d:	85 c9                	test   ecx,ecx
c000838f:	74 1d                	je     c00083ae <File::rename(char const*)+0x4a>
c0008391:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008395:	b8 06 00 00 00       	mov    eax,0x6
c000839a:	75 12                	jne    c00083ae <File::rename(char const*)+0x4a>
c000839c:	50                   	push   eax
c000839d:	83 c2 0d             	add    edx,0xd
c00083a0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083a6:	52                   	push   edx
c00083a7:	51                   	push   ecx
c00083a8:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00083ab:	83 c4 10             	add    esp,0x10
c00083ae:	83 c4 0c             	add    esp,0xc
c00083b1:	c3                   	ret    

c00083b2 <File::chfatattr(unsigned char, unsigned char)>:
c00083b2:	57                   	push   edi
c00083b3:	b8 0b 00 00 00       	mov    eax,0xb
c00083b8:	56                   	push   esi
c00083b9:	53                   	push   ebx
c00083ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083be:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00083c2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00083c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083cd:	83 f9 19             	cmp    ecx,0x19
c00083d0:	77 37                	ja     c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083d2:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00083d9:	85 c9                	test   ecx,ecx
c00083db:	74 2c                	je     c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083dd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083e3:	85 c9                	test   ecx,ecx
c00083e5:	74 22                	je     c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083e7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083eb:	b8 06 00 00 00       	mov    eax,0x6
c00083f0:	75 17                	jne    c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083f2:	89 f0                	mov    eax,esi
c00083f4:	8b 39                	mov    edi,DWORD PTR [ecx]
c00083f6:	0f b6 db             	movzx  ebx,bl
c00083f9:	0f b6 f0             	movzx  esi,al
c00083fc:	83 c2 0d             	add    edx,0xd
c00083ff:	56                   	push   esi
c0008400:	53                   	push   ebx
c0008401:	52                   	push   edx
c0008402:	51                   	push   ecx
c0008403:	ff 57 38             	call   DWORD PTR [edi+0x38]
c0008406:	83 c4 10             	add    esp,0x10
c0008409:	5b                   	pop    ebx
c000840a:	5e                   	pop    esi
c000840b:	5f                   	pop    edi
c000840c:	c3                   	ret    
c000840d:	90                   	nop

c000840e <File::exists()>:
c000840e:	83 ec 0c             	sub    esp,0xc
c0008411:	31 c0                	xor    eax,eax
c0008413:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008417:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000841e:	83 f9 19             	cmp    ecx,0x19
c0008421:	77 24                	ja     c0008447 <File::exists()+0x39>
c0008423:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c000842a:	85 c9                	test   ecx,ecx
c000842c:	74 19                	je     c0008447 <File::exists()+0x39>
c000842e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008434:	85 c9                	test   ecx,ecx
c0008436:	74 0f                	je     c0008447 <File::exists()+0x39>
c0008438:	50                   	push   eax
c0008439:	83 c2 0d             	add    edx,0xd
c000843c:	50                   	push   eax
c000843d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000843f:	52                   	push   edx
c0008440:	51                   	push   ecx
c0008441:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008444:	83 c4 10             	add    esp,0x10
c0008447:	83 c4 0c             	add    esp,0xc
c000844a:	c3                   	ret    
c000844b:	90                   	nop

c000844c <File::stat(unsigned long long*, bool*)>:
c000844c:	56                   	push   esi
c000844d:	53                   	push   ebx
c000844e:	50                   	push   eax
c000844f:	b8 0b 00 00 00       	mov    eax,0xb
c0008454:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008458:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000845c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008460:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008467:	83 f9 19             	cmp    ecx,0x19
c000846a:	77 3d                	ja     c00084a9 <File::stat(unsigned long long*, bool*)+0x5d>
c000846c:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008473:	85 c9                	test   ecx,ecx
c0008475:	74 32                	je     c00084a9 <File::stat(unsigned long long*, bool*)+0x5d>
c0008477:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000847d:	85 c9                	test   ecx,ecx
c000847f:	74 28                	je     c00084a9 <File::stat(unsigned long long*, bool*)+0x5d>
c0008481:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008485:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008487:	74 13                	je     c000849c <File::stat(unsigned long long*, bool*)+0x50>
c0008489:	83 ec 04             	sub    esp,0x4
c000848c:	56                   	push   esi
c000848d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008493:	51                   	push   ecx
c0008494:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0008497:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000849a:	eb 0a                	jmp    c00084a6 <File::stat(unsigned long long*, bool*)+0x5a>
c000849c:	53                   	push   ebx
c000849d:	83 c2 0d             	add    edx,0xd
c00084a0:	56                   	push   esi
c00084a1:	52                   	push   edx
c00084a2:	51                   	push   ecx
c00084a3:	ff 50 34             	call   DWORD PTR [eax+0x34]
c00084a6:	83 c4 10             	add    esp,0x10
c00084a9:	5a                   	pop    edx
c00084aa:	5b                   	pop    ebx
c00084ab:	5e                   	pop    esi
c00084ac:	c3                   	ret    

c00084ad <Fs::setcwd(Process*, char*)>:
c00084ad:	55                   	push   ebp
c00084ae:	57                   	push   edi
c00084af:	56                   	push   esi
c00084b0:	53                   	push   ebx
c00084b1:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00084b7:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c00084be:	6a 00                	push   0x0
c00084c0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00084c6:	57                   	push   edi
c00084c7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00084ce:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00084d2:	56                   	push   esi
c00084d3:	e8 28 f9 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00084d8:	89 34 24             	mov    DWORD PTR [esp],esi
c00084db:	e8 a0 80 ff ff       	call   c0000580 <strlen>
c00084e0:	83 c4 10             	add    esp,0x10
c00084e3:	83 f8 02             	cmp    eax,0x2
c00084e6:	77 15                	ja     c00084fd <Fs::setcwd(Process*, char*)+0x50>
c00084e8:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c00084ed:	83 eb 41             	sub    ebx,0x41
c00084f0:	8b 04 9d 80 a7 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5880]
c00084f7:	85 c0                	test   eax,eax
c00084f9:	75 1c                	jne    c0008517 <Fs::setcwd(Process*, char*)+0x6a>
c00084fb:	eb 2f                	jmp    c000852c <Fs::setcwd(Process*, char*)+0x7f>
c00084fd:	83 ec 0c             	sub    esp,0xc
c0008500:	56                   	push   esi
c0008501:	e8 7a 80 ff ff       	call   c0000580 <strlen>
c0008506:	83 c4 10             	add    esp,0x10
c0008509:	83 f8 03             	cmp    eax,0x3
c000850c:	75 57                	jne    c0008565 <Fs::setcwd(Process*, char*)+0xb8>
c000850e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008513:	75 50                	jne    c0008565 <Fs::setcwd(Process*, char*)+0xb8>
c0008515:	eb d1                	jmp    c00084e8 <Fs::setcwd(Process*, char*)+0x3b>
c0008517:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000851e:	75 0c                	jne    c000852c <Fs::setcwd(Process*, char*)+0x7f>
c0008520:	83 ec 0c             	sub    esp,0xc
c0008523:	50                   	push   eax
c0008524:	e8 fd 1a 00 00       	call   c000a026 <LogicalDisk::mount()>
c0008529:	83 c4 10             	add    esp,0x10
c000852c:	83 fb 19             	cmp    ebx,0x19
c000852f:	b8 03 00 00 00       	mov    eax,0x3
c0008534:	0f 87 c6 00 00 00    	ja     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c000853a:	8b 14 9d 80 a7 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd5880]
c0008541:	b8 05 00 00 00       	mov    eax,0x5
c0008546:	85 d2                	test   edx,edx
c0008548:	0f 84 b2 00 00 00    	je     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c000854e:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008555:	b8 06 00 00 00       	mov    eax,0x6
c000855a:	0f 85 92 00 00 00    	jne    c00085f2 <Fs::setcwd(Process*, char*)+0x145>
c0008560:	e9 9b 00 00 00       	jmp    c0008600 <Fs::setcwd(Process*, char*)+0x153>
c0008565:	83 ec 0c             	sub    esp,0xc
c0008568:	68 14 01 00 00       	push   0x114
c000856d:	e8 1a 65 00 00       	call   c000ea8c <malloc>
c0008572:	83 c4 0c             	add    esp,0xc
c0008575:	55                   	push   ebp
c0008576:	56                   	push   esi
c0008577:	50                   	push   eax
c0008578:	89 c3                	mov    ebx,eax
c000857a:	e8 ad fb ff ff       	call   c000812c <File::File(char const*, Process*)>
c000857f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0008584:	83 c4 0c             	add    esp,0xc
c0008587:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000858b:	50                   	push   eax
c000858c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008590:	50                   	push   eax
c0008591:	53                   	push   ebx
c0008592:	e8 b5 fe ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0008597:	83 c4 10             	add    esp,0x10
c000859a:	83 f8 02             	cmp    eax,0x2
c000859d:	74 27                	je     c00085c6 <Fs::setcwd(Process*, char*)+0x119>
c000859f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00085a4:	75 1c                	jne    c00085c2 <Fs::setcwd(Process*, char*)+0x115>
c00085a6:	85 db                	test   ebx,ebx
c00085a8:	b8 02 00 00 00       	mov    eax,0x2
c00085ad:	74 51                	je     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085b1:	83 ec 0c             	sub    esp,0xc
c00085b4:	53                   	push   ebx
c00085b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085b8:	83 c4 10             	add    esp,0x10
c00085bb:	b8 02 00 00 00       	mov    eax,0x2
c00085c0:	eb 3e                	jmp    c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085c2:	85 c0                	test   eax,eax
c00085c4:	74 1c                	je     c00085e2 <Fs::setcwd(Process*, char*)+0x135>
c00085c6:	85 db                	test   ebx,ebx
c00085c8:	b8 01 00 00 00       	mov    eax,0x1
c00085cd:	74 31                	je     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085d1:	83 ec 0c             	sub    esp,0xc
c00085d4:	53                   	push   ebx
c00085d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085d8:	83 c4 10             	add    esp,0x10
c00085db:	b8 01 00 00 00       	mov    eax,0x1
c00085e0:	eb 1e                	jmp    c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085e2:	85 db                	test   ebx,ebx
c00085e4:	74 0c                	je     c00085f2 <Fs::setcwd(Process*, char*)+0x145>
c00085e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085e8:	83 ec 0c             	sub    esp,0xc
c00085eb:	53                   	push   ebx
c00085ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085ef:	83 c4 10             	add    esp,0x10
c00085f2:	50                   	push   eax
c00085f3:	50                   	push   eax
c00085f4:	56                   	push   esi
c00085f5:	57                   	push   edi
c00085f6:	e8 55 80 ff ff       	call   c0000650 <strcpy>
c00085fb:	83 c4 10             	add    esp,0x10
c00085fe:	31 c0                	xor    eax,eax
c0008600:	81 c4 1c 02 00 00    	add    esp,0x21c
c0008606:	5b                   	pop    ebx
c0008607:	5e                   	pop    esi
c0008608:	5f                   	pop    edi
c0008609:	5d                   	pop    ebp
c000860a:	c3                   	ret    
c000860b:	90                   	nop

c000860c <Directory::Directory(char const*, Process*)>:
c000860c:	83 ec 0c             	sub    esp,0xc
c000860f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008613:	83 ec 08             	sub    esp,0x8
c0008616:	6a 00                	push   0x0
c0008618:	50                   	push   eax
c0008619:	e8 12 97 00 00       	call   c0011d30 <UnixFile::UnixFile(int)>
c000861e:	83 c4 10             	add    esp,0x10
c0008621:	ba 30 1d 02 c0       	mov    edx,0xc0021d30
c0008626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000862a:	89 10                	mov    DWORD PTR [eax],edx
c000862c:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0008631:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008635:	0f 95 c0             	setne  al
c0008638:	0f b6 c0             	movzx  eax,al
c000863b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000863f:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008645:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008649:	83 c2 0d             	add    edx,0xd
c000864c:	50                   	push   eax
c000864d:	51                   	push   ecx
c000864e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008652:	52                   	push   edx
c0008653:	e8 a8 f7 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008658:	83 c4 10             	add    esp,0x10
c000865b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000865f:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008662:	83 e8 41             	sub    eax,0x41
c0008665:	88 c2                	mov    dl,al
c0008667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000866b:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008675:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0008679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000867d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008683:	0f b6 c0             	movzx  eax,al
c0008686:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c000868d:	85 c0                	test   eax,eax
c000868f:	74 3e                	je     c00086cf <Directory::Directory(char const*, Process*)+0xc3>
c0008691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008695:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000869b:	0f b6 c0             	movzx  eax,al
c000869e:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c00086a5:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00086ab:	85 c0                	test   eax,eax
c00086ad:	75 20                	jne    c00086cf <Directory::Directory(char const*, Process*)+0xc3>
c00086af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086b3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086b9:	0f b6 c0             	movzx  eax,al
c00086bc:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c00086c3:	83 ec 0c             	sub    esp,0xc
c00086c6:	50                   	push   eax
c00086c7:	e8 5a 19 00 00       	call   c000a026 <LogicalDisk::mount()>
c00086cc:	83 c4 10             	add    esp,0x10
c00086cf:	90                   	nop
c00086d0:	83 c4 0c             	add    esp,0xc
c00086d3:	c3                   	ret    

c00086d4 <Directory::open()>:
c00086d4:	53                   	push   ebx
c00086d5:	b8 0b 00 00 00       	mov    eax,0xb
c00086da:	83 ec 08             	sub    esp,0x8
c00086dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086e1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00086e8:	83 fa 19             	cmp    edx,0x19
c00086eb:	77 3d                	ja     c000872a <Directory::open()+0x56>
c00086ed:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c00086f4:	85 d2                	test   edx,edx
c00086f6:	74 32                	je     c000872a <Directory::open()+0x56>
c00086f8:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00086fe:	85 d2                	test   edx,edx
c0008700:	74 28                	je     c000872a <Directory::open()+0x56>
c0008702:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008706:	b8 06 00 00 00       	mov    eax,0x6
c000870b:	75 1d                	jne    c000872a <Directory::open()+0x56>
c000870d:	50                   	push   eax
c000870e:	8b 02                	mov    eax,DWORD PTR [edx]
c0008710:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008716:	51                   	push   ecx
c0008717:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000871a:	51                   	push   ecx
c000871b:	52                   	push   edx
c000871c:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000871f:	83 c4 10             	add    esp,0x10
c0008722:	85 c0                	test   eax,eax
c0008724:	75 04                	jne    c000872a <Directory::open()+0x56>
c0008726:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000872a:	83 c4 08             	add    esp,0x8
c000872d:	5b                   	pop    ebx
c000872e:	c3                   	ret    
c000872f:	90                   	nop

c0008730 <Directory::close()>:
c0008730:	53                   	push   ebx
c0008731:	b8 0b 00 00 00       	mov    eax,0xb
c0008736:	83 ec 08             	sub    esp,0x8
c0008739:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000873d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008744:	83 f9 19             	cmp    ecx,0x19
c0008747:	77 41                	ja     c000878a <Directory::close()+0x5a>
c0008749:	8b 1c 8d 80 a7 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd5880]
c0008750:	85 db                	test   ebx,ebx
c0008752:	74 36                	je     c000878a <Directory::close()+0x5a>
c0008754:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000875b:	74 2d                	je     c000878a <Directory::close()+0x5a>
c000875d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008761:	b8 05 00 00 00       	mov    eax,0x5
c0008766:	74 22                	je     c000878a <Directory::close()+0x5a>
c0008768:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000876c:	8b 04 8d 80 a7 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd5880]
c0008773:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008779:	53                   	push   ebx
c000877a:	53                   	push   ebx
c000877b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000877d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008783:	50                   	push   eax
c0008784:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c0008787:	83 c4 10             	add    esp,0x10
c000878a:	83 c4 08             	add    esp,0x8
c000878d:	5b                   	pop    ebx
c000878e:	c3                   	ret    
c000878f:	90                   	nop

c0008790 <Directory::unlink()>:
c0008790:	83 ec 0c             	sub    esp,0xc
c0008793:	b8 0b 00 00 00       	mov    eax,0xb
c0008798:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000879c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a3:	83 f9 19             	cmp    ecx,0x19
c00087a6:	77 2f                	ja     c00087d7 <Directory::unlink()+0x47>
c00087a8:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00087af:	85 c9                	test   ecx,ecx
c00087b1:	74 24                	je     c00087d7 <Directory::unlink()+0x47>
c00087b3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00087b9:	85 c9                	test   ecx,ecx
c00087bb:	74 1a                	je     c00087d7 <Directory::unlink()+0x47>
c00087bd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087c1:	b8 06 00 00 00       	mov    eax,0x6
c00087c6:	75 0f                	jne    c00087d7 <Directory::unlink()+0x47>
c00087c8:	50                   	push   eax
c00087c9:	83 c2 0d             	add    edx,0xd
c00087cc:	50                   	push   eax
c00087cd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087cf:	52                   	push   edx
c00087d0:	51                   	push   ecx
c00087d1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00087d4:	83 c4 10             	add    esp,0x10
c00087d7:	83 c4 0c             	add    esp,0xc
c00087da:	c3                   	ret    
c00087db:	90                   	nop

c00087dc <Directory::rename(char const*)>:
c00087dc:	83 ec 0c             	sub    esp,0xc
c00087df:	b8 0b 00 00 00       	mov    eax,0xb
c00087e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087e8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087ef:	83 f9 19             	cmp    ecx,0x19
c00087f2:	77 32                	ja     c0008826 <Directory::rename(char const*)+0x4a>
c00087f4:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00087fb:	85 c9                	test   ecx,ecx
c00087fd:	74 27                	je     c0008826 <Directory::rename(char const*)+0x4a>
c00087ff:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008805:	85 c9                	test   ecx,ecx
c0008807:	74 1d                	je     c0008826 <Directory::rename(char const*)+0x4a>
c0008809:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000880d:	b8 06 00 00 00       	mov    eax,0x6
c0008812:	75 12                	jne    c0008826 <Directory::rename(char const*)+0x4a>
c0008814:	50                   	push   eax
c0008815:	83 c2 0d             	add    edx,0xd
c0008818:	8b 01                	mov    eax,DWORD PTR [ecx]
c000881a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000881e:	52                   	push   edx
c000881f:	51                   	push   ecx
c0008820:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 c4 0c             	add    esp,0xc
c0008829:	c3                   	ret    

c000882a <Directory::exists()>:
c000882a:	83 ec 0c             	sub    esp,0xc
c000882d:	31 c0                	xor    eax,eax
c000882f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008833:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000883a:	83 f9 19             	cmp    ecx,0x19
c000883d:	77 24                	ja     c0008863 <Directory::exists()+0x39>
c000883f:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008846:	85 c9                	test   ecx,ecx
c0008848:	74 19                	je     c0008863 <Directory::exists()+0x39>
c000884a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008850:	85 c9                	test   ecx,ecx
c0008852:	74 0f                	je     c0008863 <Directory::exists()+0x39>
c0008854:	50                   	push   eax
c0008855:	83 c2 0d             	add    edx,0xd
c0008858:	50                   	push   eax
c0008859:	8b 01                	mov    eax,DWORD PTR [ecx]
c000885b:	52                   	push   edx
c000885c:	51                   	push   ecx
c000885d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008860:	83 c4 10             	add    esp,0x10
c0008863:	83 c4 0c             	add    esp,0xc
c0008866:	c3                   	ret    
c0008867:	90                   	nop

c0008868 <Directory::read(dirent*)>:
c0008868:	83 ec 1c             	sub    esp,0x1c
c000886b:	b8 0b 00 00 00       	mov    eax,0xb
c0008870:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008874:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000887b:	83 f9 19             	cmp    ecx,0x19
c000887e:	77 30                	ja     c00088b0 <Directory::read(dirent*)+0x48>
c0008880:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008887:	85 c9                	test   ecx,ecx
c0008889:	74 25                	je     c00088b0 <Directory::read(dirent*)+0x48>
c000888b:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0008892:	74 1c                	je     c00088b0 <Directory::read(dirent*)+0x48>
c0008894:	83 ec 0c             	sub    esp,0xc
c0008897:	8b 02                	mov    eax,DWORD PTR [edx]
c0008899:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000889d:	51                   	push   ecx
c000889e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00088a2:	6a 00                	push   0x0
c00088a4:	68 10 01 00 00       	push   0x110
c00088a9:	52                   	push   edx
c00088aa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00088ad:	83 c4 20             	add    esp,0x20
c00088b0:	83 c4 1c             	add    esp,0x1c
c00088b3:	c3                   	ret    

c00088b4 <Directory::create()>:
c00088b4:	83 ec 0c             	sub    esp,0xc
c00088b7:	b8 0b 00 00 00       	mov    eax,0xb
c00088bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088c0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088c7:	83 f9 19             	cmp    ecx,0x19
c00088ca:	77 2f                	ja     c00088fb <Directory::create()+0x47>
c00088cc:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00088d3:	85 c9                	test   ecx,ecx
c00088d5:	74 24                	je     c00088fb <Directory::create()+0x47>
c00088d7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088dd:	85 c9                	test   ecx,ecx
c00088df:	74 1a                	je     c00088fb <Directory::create()+0x47>
c00088e1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00088e5:	b8 06 00 00 00       	mov    eax,0x6
c00088ea:	75 0f                	jne    c00088fb <Directory::create()+0x47>
c00088ec:	50                   	push   eax
c00088ed:	83 c2 0d             	add    edx,0xd
c00088f0:	50                   	push   eax
c00088f1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088f3:	52                   	push   edx
c00088f4:	51                   	push   ecx
c00088f5:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00088f8:	83 c4 10             	add    esp,0x10
c00088fb:	83 c4 0c             	add    esp,0xc
c00088fe:	c3                   	ret    
c00088ff:	90                   	nop

c0008900 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0008900:	b8 0a 00 00 00       	mov    eax,0xa
c0008905:	c3                   	ret    
c0008906:	66 90                	xchg   ax,ax

c0008908 <Bus::Bus(char const*)>:
c0008908:	83 ec 0c             	sub    esp,0xc
c000890b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000890f:	83 ec 08             	sub    esp,0x8
c0008912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008916:	50                   	push   eax
c0008917:	e8 d8 08 00 00       	call   c00091f4 <Device::Device(char const*)>
c000891c:	83 c4 10             	add    esp,0x10
c000891f:	ba 4c 1d 02 c0       	mov    edx,0xc0021d4c
c0008924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008928:	89 10                	mov    DWORD PTR [eax],edx
c000892a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008938:	90                   	nop
c0008939:	83 c4 0c             	add    esp,0xc
c000893c:	c3                   	ret    
c000893d:	90                   	nop
c000893e:	66 90                	xchg   ax,ax

c0008940 <Bus::~Bus()>:
c0008940:	83 ec 0c             	sub    esp,0xc
c0008943:	ba 4c 1d 02 c0       	mov    edx,0xc0021d4c
c0008948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000894c:	89 10                	mov    DWORD PTR [eax],edx
c000894e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008952:	83 ec 0c             	sub    esp,0xc
c0008955:	50                   	push   eax
c0008956:	e8 39 06 00 00       	call   c0008f94 <Device::~Device()>
c000895b:	83 c4 10             	add    esp,0x10
c000895e:	90                   	nop
c000895f:	83 c4 0c             	add    esp,0xc
c0008962:	c3                   	ret    
c0008963:	90                   	nop

c0008964 <Bus::~Bus()>:
c0008964:	83 ec 0c             	sub    esp,0xc
c0008967:	83 ec 0c             	sub    esp,0xc
c000896a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000896e:	e8 cd ff ff ff       	call   c0008940 <Bus::~Bus()>
c0008973:	83 c4 10             	add    esp,0x10
c0008976:	83 ec 08             	sub    esp,0x8
c0008979:	68 58 01 00 00       	push   0x158
c000897e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008982:	e8 80 3e 00 00       	call   c000c807 <operator delete(void*, unsigned long)>
c0008987:	83 c4 10             	add    esp,0x10
c000898a:	83 c4 0c             	add    esp,0xc
c000898d:	c3                   	ret    

c000898e <KeBeepThread(void*)>:
c000898e:	83 ec 0c             	sub    esp,0xc
c0008991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008995:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000899c:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c00089a3:	75 01                	jne    c00089a6 <KeBeepThread(void*)+0x18>
c00089a5:	fb                   	sti    
c00089a6:	6b c0 0a             	imul   eax,eax,0xa
c00089a9:	83 ec 0c             	sub    esp,0xc
c00089ac:	50                   	push   eax
c00089ad:	e8 2e d2 00 00       	call   c0015be0 <milliTenthSleep(unsigned int)>
c00089b2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00089b9:	e8 77 02 01 00       	call   c0018c35 <HalMakeBeep(int)>
c00089be:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00089c6:	83 c4 1c             	add    esp,0x1c
c00089c9:	e9 ea d0 00 00       	jmp    c0015ab8 <blockTask(TaskState)>

c00089ce <KeBeep(int, int, bool)>:
c00089ce:	56                   	push   esi
c00089cf:	53                   	push   ebx
c00089d0:	83 ec 10             	sub    esp,0x10
c00089d3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089d7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089df:	e8 51 02 01 00       	call   c0018c35 <HalMakeBeep(int)>
c00089e4:	89 f0                	mov    eax,esi
c00089e6:	83 c4 10             	add    esp,0x10
c00089e9:	84 c0                	test   al,al
c00089eb:	74 1e                	je     c0008a0b <KeBeep(int, int, bool)+0x3d>
c00089ed:	6b db 0a             	imul   ebx,ebx,0xa
c00089f0:	83 ec 0c             	sub    esp,0xc
c00089f3:	53                   	push   ebx
c00089f4:	e8 e7 d1 00 00       	call   c0015be0 <milliTenthSleep(unsigned int)>
c00089f9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a01:	83 c4 14             	add    esp,0x14
c0008a04:	5b                   	pop    ebx
c0008a05:	5e                   	pop    esi
c0008a06:	e9 2a 02 01 00       	jmp    c0018c35 <HalMakeBeep(int)>
c0008a0b:	68 e6 00 00 00       	push   0xe6
c0008a10:	53                   	push   ebx
c0008a11:	68 8e 89 00 c0       	push   0xc000898e
c0008a16:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0008a1c:	e8 7f cd 00 00       	call   c00157a0 <Process::createThread(void (*)(void*), void*, int)>
c0008a21:	83 c4 14             	add    esp,0x14
c0008a24:	5b                   	pop    ebx
c0008a25:	5e                   	pop    esi
c0008a26:	c3                   	ret    
c0008a27:	90                   	nop

c0008a28 <KeLoadClockSettings()>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	81 ec 6c 02 00 00    	sub    esp,0x26c
c0008a31:	c6 44 24 14 00       	mov    BYTE PTR [esp+0x14],0x0
c0008a36:	68 70 1d 02 c0       	push   0xc0021d70
c0008a3b:	e8 1c 3e 00 00       	call   c000c85c <CmOpen(char const*)>
c0008a40:	59                   	pop    ecx
c0008a41:	5e                   	pop    esi
c0008a42:	89 c3                	mov    ebx,eax
c0008a44:	68 95 1d 02 c0       	push   0xc0021d95
c0008a49:	50                   	push   eax
c0008a4a:	e8 08 4a 00 00       	call   c000d457 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008a4f:	5f                   	pop    edi
c0008a50:	5a                   	pop    edx
c0008a51:	89 c6                	mov    esi,eax
c0008a53:	50                   	push   eax
c0008a54:	68 aa 1d 02 c0       	push   0xc0021daa
c0008a59:	e8 f0 e4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008a5e:	83 c4 10             	add    esp,0x10
c0008a61:	85 f6                	test   esi,esi
c0008a63:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0008a67:	7e 0c                	jle    c0008a75 <KeLoadClockSettings()+0x4d>
c0008a69:	52                   	push   edx
c0008a6a:	57                   	push   edi
c0008a6b:	56                   	push   esi
c0008a6c:	53                   	push   ebx
c0008a6d:	e8 5a 3f 00 00       	call   c000c9cc <CmGetString(Reghive_Tag*, int, char*)>
c0008a72:	83 c4 10             	add    esp,0x10
c0008a75:	83 ec 0c             	sub    esp,0xc
c0008a78:	53                   	push   ebx
c0008a79:	e8 fc 3e 00 00       	call   c000c97a <CmClose(Reghive_Tag*)>
c0008a7e:	83 c4 0c             	add    esp,0xc
c0008a81:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0008a86:	50                   	push   eax
c0008a87:	57                   	push   edi
c0008a88:	68 b8 1d 02 c0       	push   0xc0021db8
c0008a8d:	e8 bc e4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008a92:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
c0008a96:	83 c4 10             	add    esp,0x10
c0008a99:	c6 05 08 a3 02 c0 00 	mov    BYTE PTR ds:0xc002a308,0x0
c0008aa0:	8d 41 d5             	lea    eax,[ecx-0x2b]
c0008aa3:	a8 fd                	test   al,0xfd
c0008aa5:	75 51                	jne    c0008af8 <KeLoadClockSettings()+0xd0>
c0008aa7:	0f be 5c 24 0a       	movsx  ebx,BYTE PTR [esp+0xa]
c0008aac:	0f be 54 24 0b       	movsx  edx,BYTE PTR [esp+0xb]
c0008ab1:	83 fb 2e             	cmp    ebx,0x2e
c0008ab4:	75 07                	jne    c0008abd <KeLoadClockSettings()+0x95>
c0008ab6:	83 fa 35             	cmp    edx,0x35
c0008ab9:	b0 01                	mov    al,0x1
c0008abb:	74 0f                	je     c0008acc <KeLoadClockSettings()+0xa4>
c0008abd:	31 c0                	xor    eax,eax
c0008abf:	83 fa 2e             	cmp    edx,0x2e
c0008ac2:	75 08                	jne    c0008acc <KeLoadClockSettings()+0xa4>
c0008ac4:	80 7c 24 0c 35       	cmp    BYTE PTR [esp+0xc],0x35
c0008ac9:	0f 94 c0             	sete   al
c0008acc:	a2 09 a3 02 c0       	mov    ds:0xc002a309,al
c0008ad1:	0f be 44 24 09       	movsx  eax,BYTE PTR [esp+0x9]
c0008ad6:	83 e8 30             	sub    eax,0x30
c0008ad9:	6b f0 0a             	imul   esi,eax,0xa
c0008adc:	83 fa 2e             	cmp    edx,0x2e
c0008adf:	8d 5c 33 d0          	lea    ebx,[ebx+esi*1-0x30]
c0008ae3:	0f 44 c3             	cmove  eax,ebx
c0008ae6:	80 f9 2d             	cmp    cl,0x2d
c0008ae9:	a3 0c a3 02 c0       	mov    ds:0xc002a30c,eax
c0008aee:	75 19                	jne    c0008b09 <KeLoadClockSettings()+0xe1>
c0008af0:	f7 1d 0c a3 02 c0    	neg    DWORD PTR ds:0xc002a30c
c0008af6:	eb 11                	jmp    c0008b09 <KeLoadClockSettings()+0xe1>
c0008af8:	c6 05 09 a3 02 c0 00 	mov    BYTE PTR ds:0xc002a309,0x0
c0008aff:	c7 05 0c a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a30c,0x0
c0008b09:	50                   	push   eax
c0008b0a:	0f b6 05 09 a3 02 c0 	movzx  eax,BYTE PTR ds:0xc002a309
c0008b11:	8d 04 80             	lea    eax,[eax+eax*4]
c0008b14:	50                   	push   eax
c0008b15:	ff 35 0c a3 02 c0    	push   DWORD PTR ds:0xc002a30c
c0008b1b:	68 cf 1d 02 c0       	push   0xc0021dcf
c0008b20:	e8 29 e4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008b25:	81 c4 70 02 00 00    	add    esp,0x270
c0008b2b:	5b                   	pop    ebx
c0008b2c:	5e                   	pop    esi
c0008b2d:	5f                   	pop    edi
c0008b2e:	c3                   	ret    
c0008b2f:	90                   	nop

c0008b30 <Clock::Clock(char const*)>:
c0008b30:	83 ec 0c             	sub    esp,0xc
c0008b33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b37:	83 ec 08             	sub    esp,0x8
c0008b3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b3e:	50                   	push   eax
c0008b3f:	e8 b0 06 00 00       	call   c00091f4 <Device::Device(char const*)>
c0008b44:	83 c4 10             	add    esp,0x10
c0008b47:	ba f8 1d 02 c0       	mov    edx,0xc0021df8
c0008b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b50:	89 10                	mov    DWORD PTR [eax],edx
c0008b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b56:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0008b60:	90                   	nop
c0008b61:	83 c4 0c             	add    esp,0xc
c0008b64:	c3                   	ret    
c0008b65:	90                   	nop

c0008b66 <Clock::~Clock()>:
c0008b66:	83 ec 0c             	sub    esp,0xc
c0008b69:	ba f8 1d 02 c0       	mov    edx,0xc0021df8
c0008b6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b72:	89 10                	mov    DWORD PTR [eax],edx
c0008b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b78:	83 ec 0c             	sub    esp,0xc
c0008b7b:	50                   	push   eax
c0008b7c:	e8 13 04 00 00       	call   c0008f94 <Device::~Device()>
c0008b81:	83 c4 10             	add    esp,0x10
c0008b84:	90                   	nop
c0008b85:	83 c4 0c             	add    esp,0xc
c0008b88:	c3                   	ret    
c0008b89:	90                   	nop

c0008b8a <Clock::~Clock()>:
c0008b8a:	83 ec 0c             	sub    esp,0xc
c0008b8d:	83 ec 0c             	sub    esp,0xc
c0008b90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b94:	e8 cd ff ff ff       	call   c0008b66 <Clock::~Clock()>
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	83 ec 08             	sub    esp,0x8
c0008b9f:	68 58 01 00 00       	push   0x158
c0008ba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ba8:	e8 5a 3c 00 00       	call   c000c807 <operator delete(void*, unsigned long)>
c0008bad:	83 c4 10             	add    esp,0x10
c0008bb0:	83 c4 0c             	add    esp,0xc
c0008bb3:	c3                   	ret    

c0008bb4 <Clock::timeInSecondsLocal()>:
c0008bb4:	53                   	push   ebx
c0008bb5:	83 ec 14             	sub    esp,0x14
c0008bb8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bbc:	8b 10                	mov    edx,DWORD PTR [eax]
c0008bbe:	50                   	push   eax
c0008bbf:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0008bc2:	0f b6 0d 08 a3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a308
c0008bc9:	03 0d 0c a3 02 c0    	add    ecx,DWORD PTR ds:0xc002a30c
c0008bcf:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008bd5:	89 cb                	mov    ebx,ecx
c0008bd7:	c1 fb 1f             	sar    ebx,0x1f
c0008bda:	01 c8                	add    eax,ecx
c0008bdc:	11 da                	adc    edx,ebx
c0008bde:	83 c4 10             	add    esp,0x10
c0008be1:	31 c9                	xor    ecx,ecx
c0008be3:	80 3d 09 a3 02 c0 00 	cmp    BYTE PTR ds:0xc002a309,0x0
c0008bea:	74 05                	je     c0008bf1 <Clock::timeInSecondsLocal()+0x3d>
c0008bec:	b9 08 07 00 00       	mov    ecx,0x708
c0008bf1:	31 db                	xor    ebx,ebx
c0008bf3:	01 c8                	add    eax,ecx
c0008bf5:	11 da                	adc    edx,ebx
c0008bf7:	83 c4 08             	add    esp,0x8
c0008bfa:	5b                   	pop    ebx
c0008bfb:	c3                   	ret    

c0008bfc <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0008bfc:	57                   	push   edi
c0008bfd:	56                   	push   esi
c0008bfe:	53                   	push   ebx
c0008bff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c03:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008c07:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008c0b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008c0d:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0008c10:	0f b6 05 08 a3 02 c0 	movzx  eax,BYTE PTR ds:0xc002a308
c0008c17:	03 05 0c a3 02 c0    	add    eax,DWORD PTR ds:0xc002a30c
c0008c1d:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0008c23:	99                   	cdq    
c0008c24:	29 c6                	sub    esi,eax
c0008c26:	19 d7                	sbb    edi,edx
c0008c28:	89 f0                	mov    eax,esi
c0008c2a:	31 f6                	xor    esi,esi
c0008c2c:	89 fa                	mov    edx,edi
c0008c2e:	80 3d 09 a3 02 c0 00 	cmp    BYTE PTR ds:0xc002a309,0x0
c0008c35:	74 05                	je     c0008c3c <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0008c37:	be 08 07 00 00       	mov    esi,0x708
c0008c3c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008c40:	31 ff                	xor    edi,edi
c0008c42:	29 f0                	sub    eax,esi
c0008c44:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008c48:	19 fa                	sbb    edx,edi
c0008c4a:	89 d8                	mov    eax,ebx
c0008c4c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008c50:	5b                   	pop    ebx
c0008c51:	5e                   	pop    esi
c0008c52:	5f                   	pop    edi
c0008c53:	ff e0                	jmp    eax

c0008c55 <KeDatetimeToSeconds(datetime_t)>:
c0008c55:	55                   	push   ebp
c0008c56:	57                   	push   edi
c0008c57:	56                   	push   esi
c0008c58:	53                   	push   ebx
c0008c59:	83 ec 0c             	sub    esp,0xc
c0008c5c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008c60:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008c64:	89 f7                	mov    edi,esi
c0008c66:	89 f0                	mov    eax,esi
c0008c68:	0f b6 cf             	movzx  ecx,bh
c0008c6b:	0f b6 c4             	movzx  eax,ah
c0008c6e:	c1 ef 10             	shr    edi,0x10
c0008c71:	89 da                	mov    edx,ebx
c0008c73:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0008c76:	89 f9                	mov    ecx,edi
c0008c78:	0f b6 f9             	movzx  edi,cl
c0008c7b:	89 f1                	mov    ecx,esi
c0008c7d:	6b c0 3c             	imul   eax,eax,0x3c
c0008c80:	0f b6 f1             	movzx  esi,cl
c0008c83:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c0008c89:	0f b6 db             	movzx  ebx,bl
c0008c8c:	c1 ea 10             	shr    edx,0x10
c0008c8f:	81 ea 6c 07 00 00    	sub    edx,0x76c
c0008c95:	01 f8                	add    eax,edi
c0008c97:	01 f0                	add    eax,esi
c0008c99:	89 04 24             	mov    DWORD PTR [esp],eax
c0008c9c:	c1 f8 1f             	sar    eax,0x1f
c0008c9f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ca3:	89 e8                	mov    eax,ebp
c0008ca5:	0f b6 c0             	movzx  eax,al
c0008ca8:	8b 0c 85 40 1e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde1c0]
c0008caf:	83 f8 01             	cmp    eax,0x1
c0008cb2:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c0008cb6:	0f b7 da             	movzx  ebx,dx
c0008cb9:	76 27                	jbe    c0008ce2 <KeDatetimeToSeconds(datetime_t)+0x8d>
c0008cbb:	80 e2 03             	and    dl,0x3
c0008cbe:	75 22                	jne    c0008ce2 <KeDatetimeToSeconds(datetime_t)+0x8d>
c0008cc0:	31 d2                	xor    edx,edx
c0008cc2:	be 64 00 00 00       	mov    esi,0x64
c0008cc7:	89 d8                	mov    eax,ebx
c0008cc9:	f7 f6                	div    esi
c0008ccb:	85 d2                	test   edx,edx
c0008ccd:	75 12                	jne    c0008ce1 <KeDatetimeToSeconds(datetime_t)+0x8c>
c0008ccf:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0008cd5:	be 90 01 00 00       	mov    esi,0x190
c0008cda:	99                   	cdq    
c0008cdb:	f7 fe                	idiv   esi
c0008cdd:	85 d2                	test   edx,edx
c0008cdf:	75 01                	jne    c0008ce2 <KeDatetimeToSeconds(datetime_t)+0x8d>
c0008ce1:	41                   	inc    ecx
c0008ce2:	83 fb 46             	cmp    ebx,0x46
c0008ce5:	76 48                	jbe    c0008d2f <KeDatetimeToSeconds(datetime_t)+0xda>
c0008ce7:	be 46 00 00 00       	mov    esi,0x46
c0008cec:	bf 64 00 00 00       	mov    edi,0x64
c0008cf1:	bd 90 01 00 00       	mov    ebp,0x190
c0008cf6:	f7 c6 03 00 00 00    	test   esi,0x3
c0008cfc:	b8 6d 01 00 00       	mov    eax,0x16d
c0008d01:	75 23                	jne    c0008d26 <KeDatetimeToSeconds(datetime_t)+0xd1>
c0008d03:	89 f0                	mov    eax,esi
c0008d05:	99                   	cdq    
c0008d06:	f7 ff                	idiv   edi
c0008d08:	b8 6e 01 00 00       	mov    eax,0x16e
c0008d0d:	85 d2                	test   edx,edx
c0008d0f:	75 15                	jne    c0008d26 <KeDatetimeToSeconds(datetime_t)+0xd1>
c0008d11:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0008d17:	99                   	cdq    
c0008d18:	f7 fd                	idiv   ebp
c0008d1a:	83 fa 01             	cmp    edx,0x1
c0008d1d:	19 c0                	sbb    eax,eax
c0008d1f:	f7 d0                	not    eax
c0008d21:	05 6e 01 00 00       	add    eax,0x16e
c0008d26:	46                   	inc    esi
c0008d27:	01 c1                	add    ecx,eax
c0008d29:	39 de                	cmp    esi,ebx
c0008d2b:	7c c9                	jl     c0008cf6 <KeDatetimeToSeconds(datetime_t)+0xa1>
c0008d2d:	eb 34                	jmp    c0008d63 <KeDatetimeToSeconds(datetime_t)+0x10e>
c0008d2f:	74 32                	je     c0008d63 <KeDatetimeToSeconds(datetime_t)+0x10e>
c0008d31:	b8 45 00 00 00       	mov    eax,0x45
c0008d36:	89 c2                	mov    edx,eax
c0008d38:	83 e2 03             	and    edx,0x3
c0008d3b:	39 d8                	cmp    eax,ebx
c0008d3d:	7e 0f                	jle    c0008d4e <KeDatetimeToSeconds(datetime_t)+0xf9>
c0008d3f:	83 fa 01             	cmp    edx,0x1
c0008d42:	19 d2                	sbb    edx,edx
c0008d44:	48                   	dec    eax
c0008d45:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0008d4c:	eb e8                	jmp    c0008d36 <KeDatetimeToSeconds(datetime_t)+0xe1>
c0008d4e:	85 d2                	test   edx,edx
c0008d50:	b8 6d 01 00 00       	mov    eax,0x16d
c0008d55:	75 0a                	jne    c0008d61 <KeDatetimeToSeconds(datetime_t)+0x10c>
c0008d57:	83 fb 01             	cmp    ebx,0x1
c0008d5a:	19 c0                	sbb    eax,eax
c0008d5c:	05 6e 01 00 00       	add    eax,0x16e
c0008d61:	29 c1                	sub    ecx,eax
c0008d63:	b8 80 51 01 00       	mov    eax,0x15180
c0008d68:	f7 e9                	imul   ecx
c0008d6a:	03 04 24             	add    eax,DWORD PTR [esp]
c0008d6d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008d71:	83 c4 0c             	add    esp,0xc
c0008d74:	5b                   	pop    ebx
c0008d75:	5e                   	pop    esi
c0008d76:	5f                   	pop    edi
c0008d77:	5d                   	pop    ebp
c0008d78:	c3                   	ret    
c0008d79:	90                   	nop

c0008d7a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0008d7a:	57                   	push   edi
c0008d7b:	56                   	push   esi
c0008d7c:	53                   	push   ebx
c0008d7d:	83 ec 10             	sub    esp,0x10
c0008d80:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008d84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008d88:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008d8c:	e8 c4 fe ff ff       	call   c0008c55 <KeDatetimeToSeconds(datetime_t)>
c0008d91:	5e                   	pop    esi
c0008d92:	0f b6 35 08 a3 02 c0 	movzx  esi,BYTE PTR ds:0xc002a308
c0008d99:	5f                   	pop    edi
c0008d9a:	03 35 0c a3 02 c0    	add    esi,DWORD PTR ds:0xc002a30c
c0008da0:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c0008da6:	89 f7                	mov    edi,esi
c0008da8:	c1 ff 1f             	sar    edi,0x1f
c0008dab:	29 f0                	sub    eax,esi
c0008dad:	19 fa                	sbb    edx,edi
c0008daf:	31 f6                	xor    esi,esi
c0008db1:	80 3d 09 a3 02 c0 00 	cmp    BYTE PTR ds:0xc002a309,0x0
c0008db8:	74 05                	je     c0008dbf <Clock::setTimeInDatetimeLocal(datetime_t)+0x45>
c0008dba:	be 08 07 00 00       	mov    esi,0x708
c0008dbf:	31 ff                	xor    edi,edi
c0008dc1:	29 f0                	sub    eax,esi
c0008dc3:	19 fa                	sbb    edx,edi
c0008dc5:	83 ec 0c             	sub    esp,0xc
c0008dc8:	31 ff                	xor    edi,edi
c0008dca:	57                   	push   edi
c0008dcb:	31 ff                	xor    edi,edi
c0008dcd:	52                   	push   edx
c0008dce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008dd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0008dd6:	57                   	push   edi
c0008dd7:	50                   	push   eax
c0008dd8:	68 e0 1d 02 c0       	push   0xc0021de0
c0008ddd:	e8 6c e1 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008de2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008de6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008dea:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0008dec:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0008df0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0008df4:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0008df8:	8b 41 2c             	mov    eax,DWORD PTR [ecx+0x2c]
c0008dfb:	83 c4 30             	add    esp,0x30
c0008dfe:	5b                   	pop    ebx
c0008dff:	5e                   	pop    esi
c0008e00:	5f                   	pop    edi
c0008e01:	ff e0                	jmp    eax

c0008e03 <KeSecondsToDatetime(unsigned long long)>:
c0008e03:	55                   	push   ebp
c0008e04:	57                   	push   edi
c0008e05:	56                   	push   esi
c0008e06:	53                   	push   ebx
c0008e07:	83 ec 1c             	sub    esp,0x1c
c0008e0a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0008e0e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008e12:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0008e16:	6a 00                	push   0x0
c0008e18:	68 80 51 01 00       	push   0x15180
c0008e1d:	55                   	push   ebp
c0008e1e:	57                   	push   edi
c0008e1f:	e8 40 75 01 00       	call   c0020364 <__udivdi3>
c0008e24:	83 c4 10             	add    esp,0x10
c0008e27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e2b:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0008e31:	6a 00                	push   0x0
c0008e33:	68 80 51 01 00       	push   0x15180
c0008e38:	55                   	push   ebp
c0008e39:	57                   	push   edi
c0008e3a:	bf 10 0e 00 00       	mov    edi,0xe10
c0008e3f:	e8 20 76 01 00       	call   c0020464 <__umoddi3>
c0008e44:	83 c4 10             	add    esp,0x10
c0008e47:	99                   	cdq    
c0008e48:	f7 ff                	idiv   edi
c0008e4a:	bf 3c 00 00 00       	mov    edi,0x3c
c0008e4f:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0008e52:	89 d0                	mov    eax,edx
c0008e54:	99                   	cdq    
c0008e55:	f7 ff                	idiv   edi
c0008e57:	85 db                	test   ebx,ebx
c0008e59:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0008e5c:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0008e5f:	79 11                	jns    c0008e72 <KeSecondsToDatetime(unsigned long long)+0x6f>
c0008e61:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008e65:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0008e6b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e70:	eb 07                	jmp    c0008e79 <KeSecondsToDatetime(unsigned long long)+0x76>
c0008e72:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e77:	89 d8                	mov    eax,ebx
c0008e79:	99                   	cdq    
c0008e7a:	bf b4 05 00 00       	mov    edi,0x5b4
c0008e7f:	f7 f9                	idiv   ecx
c0008e81:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0008e86:	31 d2                	xor    edx,edx
c0008e88:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0008e8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e91:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0008e99:	01 c3                	add    ebx,eax
c0008e9b:	89 d8                	mov    eax,ebx
c0008e9d:	f7 f1                	div    ecx
c0008e9f:	31 d2                	xor    edx,edx
c0008ea1:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0008ea4:	89 d8                	mov    eax,ebx
c0008ea6:	f7 f7                	div    edi
c0008ea8:	31 d2                	xor    edx,edx
c0008eaa:	29 c1                	sub    ecx,eax
c0008eac:	89 d8                	mov    eax,ebx
c0008eae:	f7 f5                	div    ebp
c0008eb0:	bd 6d 01 00 00       	mov    ebp,0x16d
c0008eb5:	31 d2                	xor    edx,edx
c0008eb7:	29 c1                	sub    ecx,eax
c0008eb9:	89 c8                	mov    eax,ecx
c0008ebb:	f7 f5                	div    ebp
c0008ebd:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0008ec2:	31 d2                	xor    edx,edx
c0008ec4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ec8:	89 c8                	mov    eax,ecx
c0008eca:	f7 f5                	div    ebp
c0008ecc:	31 d2                	xor    edx,edx
c0008ece:	01 c3                	add    ebx,eax
c0008ed0:	89 c8                	mov    eax,ecx
c0008ed2:	f7 f7                	div    edi
c0008ed4:	bf 99 00 00 00       	mov    edi,0x99
c0008ed9:	31 d2                	xor    edx,edx
c0008edb:	29 c3                	sub    ebx,eax
c0008edd:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0008ee5:	29 c3                	sub    ebx,eax
c0008ee7:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0008eea:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0008eed:	83 c1 02             	add    ecx,0x2
c0008ef0:	89 c8                	mov    eax,ecx
c0008ef2:	bb 05 00 00 00       	mov    ebx,0x5
c0008ef7:	f7 f7                	div    edi
c0008ef9:	31 d2                	xor    edx,edx
c0008efb:	89 c7                	mov    edi,eax
c0008efd:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0008f03:	83 c0 02             	add    eax,0x2
c0008f06:	f7 f3                	div    ebx
c0008f08:	89 eb                	mov    ebx,ebp
c0008f0a:	29 c3                	sub    ebx,eax
c0008f0c:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0008f12:	88 1e                	mov    BYTE PTR [esi],bl
c0008f14:	19 c0                	sbb    eax,eax
c0008f16:	31 c9                	xor    ecx,ecx
c0008f18:	83 e0 0c             	and    eax,0xc
c0008f1b:	8d 54 38 f6          	lea    edx,[eax+edi*1-0xa]
c0008f1f:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0008f27:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0008f2b:	83 fa 01             	cmp    edx,0x1
c0008f2e:	0f 96 c1             	setbe  cl
c0008f31:	42                   	inc    edx
c0008f32:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0008f35:	8d 44 08 46          	lea    eax,[eax+ecx*1+0x46]
c0008f39:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0008f3d:	83 c4 1c             	add    esp,0x1c
c0008f40:	89 f0                	mov    eax,esi
c0008f42:	5b                   	pop    ebx
c0008f43:	5e                   	pop    esi
c0008f44:	5f                   	pop    edi
c0008f45:	5d                   	pop    ebp
c0008f46:	c2 04 00             	ret    0x4
c0008f49:	90                   	nop

c0008f4a <Clock::timeInDatetimeLocal()>:
c0008f4a:	53                   	push   ebx
c0008f4b:	83 ec 14             	sub    esp,0x14
c0008f4e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f52:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f56:	e8 59 fc ff ff       	call   c0008bb4 <Clock::timeInSecondsLocal()>
c0008f5b:	83 c4 0c             	add    esp,0xc
c0008f5e:	52                   	push   edx
c0008f5f:	50                   	push   eax
c0008f60:	53                   	push   ebx
c0008f61:	e8 9d fe ff ff       	call   c0008e03 <KeSecondsToDatetime(unsigned long long)>
c0008f66:	89 d8                	mov    eax,ebx
c0008f68:	83 c4 14             	add    esp,0x14
c0008f6b:	5b                   	pop    ebx
c0008f6c:	c2 04 00             	ret    0x4
c0008f6f:	90                   	nop

c0008f70 <Device::hibernate()>:
c0008f70:	c3                   	ret    
c0008f71:	90                   	nop

c0008f72 <Device::wake()>:
c0008f72:	c3                   	ret    
c0008f73:	90                   	nop

c0008f74 <Device::detect()>:
c0008f74:	c3                   	ret    
c0008f75:	90                   	nop

c0008f76 <Device::disableLegacy()>:
c0008f76:	c3                   	ret    
c0008f77:	90                   	nop

c0008f78 <Device::powerSaving(PowerSavingLevel)>:
c0008f78:	c3                   	ret    
c0008f79:	90                   	nop

c0008f7a <DriverlessDevice::close(int, int, void*)>:
c0008f7a:	31 c0                	xor    eax,eax
c0008f7c:	c3                   	ret    
c0008f7d:	90                   	nop

c0008f7e <DriverlessDevice::detect()>:
c0008f7e:	c3                   	ret    
c0008f7f:	90                   	nop

c0008f80 <DriverlessDevice::open(int, int, void*)>:
c0008f80:	83 ec 18             	sub    esp,0x18
c0008f83:	68 70 1e 02 c0       	push   0xc0021e70
c0008f88:	e8 45 5e 00 00       	call   c000edd2 <KePanic(char const*)>
c0008f8d:	83 c8 ff             	or     eax,0xffffffff
c0008f90:	83 c4 1c             	add    esp,0x1c
c0008f93:	c3                   	ret    

c0008f94 <Device::~Device()>:
c0008f94:	ba 14 1f 02 c0       	mov    edx,0xc0021f14
c0008f99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f9d:	89 10                	mov    DWORD PTR [eax],edx
c0008f9f:	90                   	nop
c0008fa0:	c3                   	ret    
c0008fa1:	90                   	nop

c0008fa2 <Device::~Device()>:
c0008fa2:	83 ec 0c             	sub    esp,0xc
c0008fa5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008fa9:	e8 e6 ff ff ff       	call   c0008f94 <Device::~Device()>
c0008fae:	83 c4 04             	add    esp,0x4
c0008fb1:	83 ec 08             	sub    esp,0x8
c0008fb4:	68 58 01 00 00       	push   0x158
c0008fb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008fbd:	e8 45 38 00 00       	call   c000c807 <operator delete(void*, unsigned long)>
c0008fc2:	83 c4 10             	add    esp,0x10
c0008fc5:	83 c4 0c             	add    esp,0xc
c0008fc8:	c3                   	ret    
c0008fc9:	90                   	nop

c0008fca <Device::findAndLoadDriver()>:
c0008fca:	c7 44 24 04 8e 1e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021e8e
c0008fd2:	e9 77 df ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c0008fd7:	90                   	nop

c0008fd8 <Device::preOpenPCI(PCIDeviceInfo)>:
c0008fd8:	57                   	push   edi
c0008fd9:	b9 09 00 00 00       	mov    ecx,0x9
c0008fde:	56                   	push   esi
c0008fdf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008fe3:	8d 74 24 10          	lea    esi,[esp+0x10]
c0008fe7:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0008ff1:	81 c7 18 01 00 00    	add    edi,0x118
c0008ff7:	fc                   	cld    
c0008ff8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0008ffa:	5e                   	pop    esi
c0008ffb:	5f                   	pop    edi
c0008ffc:	c3                   	ret    
c0008ffd:	90                   	nop

c0008ffe <Device::preOpenACPI(void*, char*, char*)>:
c0008ffe:	57                   	push   edi
c0008fff:	b9 1e 00 00 00       	mov    ecx,0x1e
c0009004:	56                   	push   esi
c0009005:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009009:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000900d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009011:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000901b:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0009021:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0009027:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009029:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000902f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009033:	b9 0e 00 00 00       	mov    ecx,0xe
c0009038:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000903a:	5e                   	pop    esi
c000903b:	5f                   	pop    edi
c000903c:	c3                   	ret    
c000903d:	90                   	nop

c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000903e:	53                   	push   ebx
c000903f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009043:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009047:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000904b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000904f:	0f b6 c0             	movzx  eax,al
c0009052:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009056:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000905a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000905e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009062:	5b                   	pop    ebx
c0009063:	e9 95 ff 00 00       	jmp    c0018ffd <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c0009068 <Device::getParent()>:
c0009068:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000906c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0009072:	c3                   	ret    
c0009073:	90                   	nop

c0009074 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0009074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009078:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000907c:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0009081:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009085:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009089:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000908d:	e9 dc 00 01 00       	jmp    c001916e <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c0009092 <Device::addChild(Device*)>:
c0009092:	53                   	push   ebx
c0009093:	83 ec 08             	sub    esp,0x8
c0009096:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000909a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000909e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00090a4:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00090aa:	8b 13                	mov    edx,DWORD PTR [ebx]
c00090ac:	85 d2                	test   edx,edx
c00090ae:	74 04                	je     c00090b4 <Device::addChild(Device*)+0x22>
c00090b0:	89 d3                	mov    ebx,edx
c00090b2:	eb f6                	jmp    c00090aa <Device::addChild(Device*)+0x18>
c00090b4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00090b7:	83 ec 0c             	sub    esp,0xc
c00090ba:	6a 08                	push   0x8
c00090bc:	e8 cb 59 00 00       	call   c000ea8c <malloc>
c00090c1:	89 03                	mov    DWORD PTR [ebx],eax
c00090c3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00090c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00090d0:	83 c4 18             	add    esp,0x18
c00090d3:	5b                   	pop    ebx
c00090d4:	c3                   	ret    
c00090d5:	90                   	nop

c00090d6 <Device::removeAllChildren()>:
c00090d6:	56                   	push   esi
c00090d7:	53                   	push   ebx
c00090d8:	52                   	push   edx
c00090d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00090dd:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00090e3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00090e6:	74 17                	je     c00090ff <Device::removeAllChildren()+0x29>
c00090e8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00090eb:	85 c0                	test   eax,eax
c00090ed:	74 0c                	je     c00090fb <Device::removeAllChildren()+0x25>
c00090ef:	8b 10                	mov    edx,DWORD PTR [eax]
c00090f1:	83 ec 0c             	sub    esp,0xc
c00090f4:	50                   	push   eax
c00090f5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00090f8:	83 c4 10             	add    esp,0x10
c00090fb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00090fd:	eb e4                	jmp    c00090e3 <Device::removeAllChildren()+0xd>
c00090ff:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009105:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000910b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009111:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009118:	58                   	pop    eax
c0009119:	5b                   	pop    ebx
c000911a:	5e                   	pop    esi
c000911b:	c3                   	ret    

c000911c <Device::hibernateAll()>:
c000911c:	53                   	push   ebx
c000911d:	83 ec 14             	sub    esp,0x14
c0009120:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009124:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009126:	53                   	push   ebx
c0009127:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000912a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009130:	83 c4 10             	add    esp,0x10
c0009133:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009136:	74 0f                	je     c0009147 <Device::hibernateAll()+0x2b>
c0009138:	83 ec 0c             	sub    esp,0xc
c000913b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000913e:	e8 d9 ff ff ff       	call   c000911c <Device::hibernateAll()>
c0009143:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009145:	eb e9                	jmp    c0009130 <Device::hibernateAll()+0x14>
c0009147:	83 c4 08             	add    esp,0x8
c000914a:	5b                   	pop    ebx
c000914b:	c3                   	ret    

c000914c <Device::wakeAll()>:
c000914c:	53                   	push   ebx
c000914d:	83 ec 14             	sub    esp,0x14
c0009150:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009154:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009156:	53                   	push   ebx
c0009157:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000915a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009160:	83 c4 10             	add    esp,0x10
c0009163:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009166:	74 0f                	je     c0009177 <Device::wakeAll()+0x2b>
c0009168:	83 ec 0c             	sub    esp,0xc
c000916b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000916e:	e8 d9 ff ff ff       	call   c000914c <Device::wakeAll()>
c0009173:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009175:	eb e9                	jmp    c0009160 <Device::wakeAll()+0x14>
c0009177:	83 c4 08             	add    esp,0x8
c000917a:	5b                   	pop    ebx
c000917b:	c3                   	ret    

c000917c <Device::detectAll()>:
c000917c:	53                   	push   ebx
c000917d:	83 ec 14             	sub    esp,0x14
c0009180:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009184:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009186:	53                   	push   ebx
c0009187:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000918a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009190:	83 c4 10             	add    esp,0x10
c0009193:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009196:	74 0f                	je     c00091a7 <Device::detectAll()+0x2b>
c0009198:	83 ec 0c             	sub    esp,0xc
c000919b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000919e:	e8 d9 ff ff ff       	call   c000917c <Device::detectAll()>
c00091a3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00091a5:	eb e9                	jmp    c0009190 <Device::detectAll()+0x14>
c00091a7:	83 c4 08             	add    esp,0x8
c00091aa:	5b                   	pop    ebx
c00091ab:	c3                   	ret    

c00091ac <Device::disableLegacyAll()>:
c00091ac:	c3                   	ret    
c00091ad:	90                   	nop

c00091ae <Device::loadDriversForAll()>:
c00091ae:	c3                   	ret    
c00091af:	90                   	nop

c00091b0 <Device::powerSavingAll(PowerSavingLevel)>:
c00091b0:	56                   	push   esi
c00091b1:	53                   	push   ebx
c00091b2:	83 ec 0c             	sub    esp,0xc
c00091b5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00091b9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00091bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00091bf:	56                   	push   esi
c00091c0:	53                   	push   ebx
c00091c1:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00091c4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00091ca:	83 c4 10             	add    esp,0x10
c00091cd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00091d0:	74 0f                	je     c00091e1 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00091d2:	52                   	push   edx
c00091d3:	52                   	push   edx
c00091d4:	56                   	push   esi
c00091d5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00091d8:	e8 d3 ff ff ff       	call   c00091b0 <Device::powerSavingAll(PowerSavingLevel)>
c00091dd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00091df:	eb e9                	jmp    c00091ca <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00091e1:	58                   	pop    eax
c00091e2:	5b                   	pop    ebx
c00091e3:	5e                   	pop    esi
c00091e4:	c3                   	ret    
c00091e5:	90                   	nop

c00091e6 <Device::setName(char const*)>:
c00091e6:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00091ee:	e9 5d 74 ff ff       	jmp    c0000650 <strcpy>
c00091f3:	90                   	nop

c00091f4 <Device::Device(char const*)>:
c00091f4:	83 ec 1c             	sub    esp,0x1c
c00091f7:	ba 14 1f 02 c0       	mov    edx,0xc0021f14
c00091fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009200:	89 10                	mov    DWORD PTR [eax],edx
c0009202:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009206:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0009210:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009214:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000921e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009222:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000922c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009230:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000923a:	83 ec 08             	sub    esp,0x8
c000923d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009241:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009245:	e8 9c ff ff ff       	call   c00091e6 <Device::setName(char const*)>
c000924a:	83 c4 10             	add    esp,0x10
c000924d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009255:	83 ec 0c             	sub    esp,0xc
c0009258:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000925c:	e8 2b 58 00 00       	call   c000ea8c <malloc>
c0009261:	83 c4 10             	add    esp,0x10
c0009264:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000926a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009271:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009275:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000927b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000927f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009285:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000928b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000928f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009295:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000929c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092a0:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00092a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092ab:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00092b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092b6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00092c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092c4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00092ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092d2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00092dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092e0:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c00092ea:	90                   	nop
c00092eb:	83 c4 1c             	add    esp,0x1c
c00092ee:	c3                   	ret    
c00092ef:	90                   	nop

c00092f0 <Device::getName()>:
c00092f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092f4:	05 d0 00 00 00       	add    eax,0xd0
c00092f9:	c3                   	ret    

c00092fa <Device::closeAll()>:
c00092fa:	53                   	push   ebx
c00092fb:	83 ec 08             	sub    esp,0x8
c00092fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009302:	53                   	push   ebx
c0009303:	e8 e8 ff ff ff       	call   c00092f0 <Device::getName()>
c0009308:	52                   	push   edx
c0009309:	50                   	push   eax
c000930a:	68 c8 1e 02 c0       	push   0xc0021ec8
c000930f:	e8 3a dc ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0009314:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009316:	6a 00                	push   0x0
c0009318:	6a 00                	push   0x0
c000931a:	6a 00                	push   0x0
c000931c:	53                   	push   ebx
c000931d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009320:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009326:	83 c4 20             	add    esp,0x20
c0009329:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000932c:	74 12                	je     c0009340 <Device::closeAll()+0x46>
c000932e:	83 ec 0c             	sub    esp,0xc
c0009331:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009334:	e8 c1 ff ff ff       	call   c00092fa <Device::closeAll()>
c0009339:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	eb e9                	jmp    c0009329 <Device::closeAll()+0x2f>
c0009340:	83 c4 08             	add    esp,0x8
c0009343:	5b                   	pop    ebx
c0009344:	c3                   	ret    
c0009345:	90                   	nop

c0009346 <DriverlessDevice::DriverlessDevice(char const*)>:
c0009346:	83 ec 0c             	sub    esp,0xc
c0009349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000934d:	83 ec 08             	sub    esp,0x8
c0009350:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009354:	50                   	push   eax
c0009355:	e8 9a fe ff ff       	call   c00091f4 <Device::Device(char const*)>
c000935a:	83 c4 10             	add    esp,0x10
c000935d:	ba 40 1f 02 c0       	mov    edx,0xc0021f40
c0009362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009366:	89 10                	mov    DWORD PTR [eax],edx
c0009368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000936c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009376:	90                   	nop
c0009377:	83 c4 0c             	add    esp,0xc
c000937a:	c3                   	ret    
c000937b:	90                   	nop

c000937c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000937c:	57                   	push   edi
c000937d:	56                   	push   esi
c000937e:	53                   	push   ebx
c000937f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009383:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009387:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000938b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009391:	75 0c                	jne    c000939f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009393:	52                   	push   edx
c0009394:	52                   	push   edx
c0009395:	53                   	push   ebx
c0009396:	56                   	push   esi
c0009397:	e8 40 72 01 00       	call   c00205dc <LinkedList<Device>::addElement(Device*)>
c000939c:	83 c4 10             	add    esp,0x10
c000939f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00093a5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00093a8:	74 12                	je     c00093bc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00093aa:	50                   	push   eax
c00093ab:	57                   	push   edi
c00093ac:	56                   	push   esi
c00093ad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00093b0:	e8 c7 ff ff ff       	call   c000937c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00093b5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00093b7:	83 c4 10             	add    esp,0x10
c00093ba:	eb e9                	jmp    c00093a5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00093bc:	5b                   	pop    ebx
c00093bd:	5e                   	pop    esi
c00093be:	5f                   	pop    edi
c00093bf:	c3                   	ret    

c00093c0 <getDevicesOfType(DeviceType)>:
c00093c0:	53                   	push   ebx
c00093c1:	83 ec 14             	sub    esp,0x14
c00093c4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00093c8:	53                   	push   ebx
c00093c9:	e8 ea 72 01 00       	call   c00206b8 <LinkedList<Device>::LinkedList()>
c00093ce:	83 c4 0c             	add    esp,0xc
c00093d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00093d5:	53                   	push   ebx
c00093d6:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c00093dc:	e8 9b ff ff ff       	call   c000937c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 d8                	mov    eax,ebx
c00093e6:	5b                   	pop    ebx
c00093e7:	c2 04 00             	ret    0x4
c00093ea:	66 90                	xchg   ax,ax

c00093ec <HardDiskController::HardDiskController(char const*)>:
c00093ec:	83 ec 0c             	sub    esp,0xc
c00093ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093f3:	83 ec 08             	sub    esp,0x8
c00093f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093fa:	50                   	push   eax
c00093fb:	e8 f4 fd ff ff       	call   c00091f4 <Device::Device(char const*)>
c0009400:	83 c4 10             	add    esp,0x10
c0009403:	ba 6c 1f 02 c0       	mov    edx,0xc0021f6c
c0009408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000940c:	89 10                	mov    DWORD PTR [eax],edx
c000940e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009412:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000941c:	90                   	nop
c000941d:	83 c4 0c             	add    esp,0xc
c0009420:	c3                   	ret    
c0009421:	90                   	nop
c0009422:	66 90                	xchg   ax,ax

c0009424 <HardDiskController::~HardDiskController()>:
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	ba 6c 1f 02 c0       	mov    edx,0xc0021f6c
c000942c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009430:	89 10                	mov    DWORD PTR [eax],edx
c0009432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009436:	83 ec 0c             	sub    esp,0xc
c0009439:	50                   	push   eax
c000943a:	e8 55 fb ff ff       	call   c0008f94 <Device::~Device()>
c000943f:	83 c4 10             	add    esp,0x10
c0009442:	90                   	nop
c0009443:	83 c4 0c             	add    esp,0xc
c0009446:	c3                   	ret    
c0009447:	90                   	nop

c0009448 <HardDiskController::~HardDiskController()>:
c0009448:	83 ec 0c             	sub    esp,0xc
c000944b:	83 ec 0c             	sub    esp,0xc
c000944e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009452:	e8 cd ff ff ff       	call   c0009424 <HardDiskController::~HardDiskController()>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	83 ec 08             	sub    esp,0x8
c000945d:	68 58 01 00 00       	push   0x158
c0009462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009466:	e8 9c 33 00 00       	call   c000c807 <operator delete(void*, unsigned long)>
c000946b:	83 c4 10             	add    esp,0x10
c000946e:	83 c4 0c             	add    esp,0xc
c0009471:	c3                   	ret    

c0009472 <PhysicalDisk::eject()>:
c0009472:	83 c8 ff             	or     eax,0xffffffff
c0009475:	c3                   	ret    

c0009476 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009476:	83 ec 0c             	sub    esp,0xc
c0009479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947d:	83 ec 08             	sub    esp,0x8
c0009480:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009484:	50                   	push   eax
c0009485:	e8 6a fd ff ff       	call   c00091f4 <Device::Device(char const*)>
c000948a:	83 c4 10             	add    esp,0x10
c000948d:	ba 98 1f 02 c0       	mov    edx,0xc0021f98
c0009492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009496:	89 10                	mov    DWORD PTR [eax],edx
c0009498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000949c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00094a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094a7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00094ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094b2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00094bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00094c4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00094ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094ce:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00094d8:	90                   	nop
c00094d9:	83 c4 0c             	add    esp,0xc
c00094dc:	c3                   	ret    
c00094dd:	90                   	nop

c00094de <PhysicalDisk::startCache()>:
c00094de:	56                   	push   esi
c00094df:	53                   	push   ebx
c00094e0:	83 ec 10             	sub    esp,0x10
c00094e3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00094e7:	6a 44                	push   0x44
c00094e9:	e8 9e 55 00 00       	call   c000ea8c <malloc>
c00094ee:	89 c6                	mov    esi,eax
c00094f0:	58                   	pop    eax
c00094f1:	5a                   	pop    edx
c00094f2:	53                   	push   ebx
c00094f3:	56                   	push   esi
c00094f4:	e8 a7 13 00 00       	call   c000a8a0 <VCache::VCache(PhysicalDisk*)>
c00094f9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00094ff:	83 c4 14             	add    esp,0x14
c0009502:	5b                   	pop    ebx
c0009503:	5e                   	pop    esi
c0009504:	c3                   	ret    
c0009505:	90                   	nop

c0009506 <PhysicalDisk::~PhysicalDisk()>:
c0009506:	83 ec 0c             	sub    esp,0xc
c0009509:	ba 98 1f 02 c0       	mov    edx,0xc0021f98
c000950e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009512:	89 10                	mov    DWORD PTR [eax],edx
c0009514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009518:	83 ec 0c             	sub    esp,0xc
c000951b:	50                   	push   eax
c000951c:	e8 73 fa ff ff       	call   c0008f94 <Device::~Device()>
c0009521:	83 c4 10             	add    esp,0x10
c0009524:	90                   	nop
c0009525:	83 c4 0c             	add    esp,0xc
c0009528:	c3                   	ret    
c0009529:	90                   	nop

c000952a <PhysicalDisk::~PhysicalDisk()>:
c000952a:	83 ec 0c             	sub    esp,0xc
c000952d:	83 ec 0c             	sub    esp,0xc
c0009530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009534:	e8 cd ff ff ff       	call   c0009506 <PhysicalDisk::~PhysicalDisk()>
c0009539:	83 c4 10             	add    esp,0x10
c000953c:	83 ec 08             	sub    esp,0x8
c000953f:	68 6c 01 00 00       	push   0x16c
c0009544:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009548:	e8 ba 32 00 00       	call   c000c807 <operator delete(void*, unsigned long)>
c000954d:	83 c4 10             	add    esp,0x10
c0009550:	83 c4 0c             	add    esp,0xc
c0009553:	c3                   	ret    

c0009554 <startGUI(void*)>:
c0009554:	55                   	push   ebp
c0009555:	89 e5                	mov    ebp,esp
c0009557:	53                   	push   ebx
c0009558:	83 ec 04             	sub    esp,0x4
c000955b:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0009563:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0009568:	85 c0                	test   eax,eax
c000956a:	75 01                	jne    c000956d <startGUI(void*)+0x19>
c000956c:	fb                   	sti    
c000956d:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c0009573:	83 ec 08             	sub    esp,0x8
c0009576:	6a 01                	push   0x1
c0009578:	68 c8 1f 02 c0       	push   0xc0021fc8
c000957d:	e8 47 b9 00 00       	call   c0014ec9 <Thr::loadDLL(char const*, bool)>
c0009582:	83 c4 10             	add    esp,0x10
c0009585:	83 ec 08             	sub    esp,0x8
c0009588:	53                   	push   ebx
c0009589:	50                   	push   eax
c000958a:	e8 9b bb 00 00       	call   c001512a <Thr::executeDLL(unsigned long, void*)>
c000958f:	83 c4 10             	add    esp,0x10
c0009592:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c0009598:	83 ec 08             	sub    esp,0x8
c000959b:	6a 01                	push   0x1
c000959d:	68 e2 1f 02 c0       	push   0xc0021fe2
c00095a2:	e8 22 b9 00 00       	call   c0014ec9 <Thr::loadDLL(char const*, bool)>
c00095a7:	83 c4 10             	add    esp,0x10
c00095aa:	83 ec 08             	sub    esp,0x8
c00095ad:	53                   	push   ebx
c00095ae:	50                   	push   eax
c00095af:	e8 76 bb 00 00       	call   c001512a <Thr::executeDLL(unsigned long, void*)>
c00095b4:	83 c4 10             	add    esp,0x10
c00095b7:	eb fe                	jmp    c00095b7 <startGUI(void*)+0x63>

c00095b9 <startGUIVESA(void*)>:
c00095b9:	55                   	push   ebp
c00095ba:	89 e5                	mov    ebp,esp
c00095bc:	53                   	push   ebx
c00095bd:	83 ec 04             	sub    esp,0x4
c00095c0:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c00095c8:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00095cd:	85 c0                	test   eax,eax
c00095cf:	75 01                	jne    c00095d2 <startGUIVESA(void*)+0x19>
c00095d1:	fb                   	sti    
c00095d2:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c00095d8:	83 ec 08             	sub    esp,0x8
c00095db:	6a 01                	push   0x1
c00095dd:	68 00 20 02 c0       	push   0xc0022000
c00095e2:	e8 e2 b8 00 00       	call   c0014ec9 <Thr::loadDLL(char const*, bool)>
c00095e7:	83 c4 10             	add    esp,0x10
c00095ea:	83 ec 08             	sub    esp,0x8
c00095ed:	53                   	push   ebx
c00095ee:	50                   	push   eax
c00095ef:	e8 36 bb 00 00       	call   c001512a <Thr::executeDLL(unsigned long, void*)>
c00095f4:	83 c4 10             	add    esp,0x10
c00095f7:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c00095fd:	83 ec 08             	sub    esp,0x8
c0009600:	6a 01                	push   0x1
c0009602:	68 e2 1f 02 c0       	push   0xc0021fe2
c0009607:	e8 bd b8 00 00       	call   c0014ec9 <Thr::loadDLL(char const*, bool)>
c000960c:	83 c4 10             	add    esp,0x10
c000960f:	83 ec 08             	sub    esp,0x8
c0009612:	53                   	push   ebx
c0009613:	50                   	push   eax
c0009614:	e8 11 bb 00 00       	call   c001512a <Thr::executeDLL(unsigned long, void*)>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	eb fe                	jmp    c000961c <startGUIVESA(void*)+0x63>

c000961e <sendKeyToTerminal(unsigned char)>:
c000961e:	55                   	push   ebp
c000961f:	89 e5                	mov    ebp,esp
c0009621:	83 ec 28             	sub    esp,0x28
c0009624:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009627:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000962a:	a1 34 ce 02 c0       	mov    eax,ds:0xc002ce34
c000962f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009633:	83 ec 08             	sub    esp,0x8
c0009636:	52                   	push   edx
c0009637:	50                   	push   eax
c0009638:	e8 87 82 00 00       	call   c00118c4 <VgaText::receiveKey(unsigned char)>
c000963d:	83 c4 10             	add    esp,0x10
c0009640:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009644:	83 f8 0a             	cmp    eax,0xa
c0009647:	74 16                	je     c000965f <sendKeyToTerminal(unsigned char)+0x41>
c0009649:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000964d:	83 f8 03             	cmp    eax,0x3
c0009650:	74 0d                	je     c000965f <sendKeyToTerminal(unsigned char)+0x41>
c0009652:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009656:	83 f8 1c             	cmp    eax,0x1c
c0009659:	0f 85 92 00 00 00    	jne    c00096f1 <sendKeyToTerminal(unsigned char)+0xd3>
c000965f:	fa                   	cli    
c0009660:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0009665:	83 c0 01             	add    eax,0x1
c0009668:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000966d:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0009672:	83 c0 01             	add    eax,0x1
c0009675:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000967a:	a1 20 a3 02 c0       	mov    eax,ds:0xc002a320
c000967f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009682:	c7 05 20 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a320,0x0
c000968c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009690:	74 1f                	je     c00096b1 <sendKeyToTerminal(unsigned char)+0x93>
c0009692:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009695:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009698:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000969b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000969e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00096a7:	e8 4c c6 00 00       	call   c0015cf8 <unblockTask(ThreadControlBlock*)>
c00096ac:	83 c4 10             	add    esp,0x10
c00096af:	eb db                	jmp    c000968c <sendKeyToTerminal(unsigned char)+0x6e>
c00096b1:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c00096b6:	83 e8 01             	sub    eax,0x1
c00096b9:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c00096be:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c00096c3:	85 c0                	test   eax,eax
c00096c5:	75 18                	jne    c00096df <sendKeyToTerminal(unsigned char)+0xc1>
c00096c7:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c00096cc:	85 c0                	test   eax,eax
c00096ce:	74 0f                	je     c00096df <sendKeyToTerminal(unsigned char)+0xc1>
c00096d0:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c00096da:	e8 19 c3 00 00       	call   c00159f8 <schedule()>
c00096df:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c00096e7:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00096ec:	85 c0                	test   eax,eax
c00096ee:	75 01                	jne    c00096f1 <sendKeyToTerminal(unsigned char)+0xd3>
c00096f0:	fb                   	sti    
c00096f1:	90                   	nop
c00096f2:	c9                   	leave  
c00096f3:	c3                   	ret    

c00096f4 <sendKeyboardToken(KeyboardToken)>:
c00096f4:	55                   	push   ebp
c00096f5:	89 e5                	mov    ebp,esp
c00096f7:	83 ec 18             	sub    esp,0x18
c00096fa:	e8 fd 5f 00 00       	call   c000f6fc <KeUserIOReceived()>
c00096ff:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0009702:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009705:	0f b7 c0             	movzx  eax,ax
c0009708:	83 f2 01             	xor    edx,0x1
c000970b:	88 90 40 a3 02 c0    	mov    BYTE PTR [eax-0x3ffd5cc0],dl
c0009711:	a1 28 a3 02 c0       	mov    eax,ds:0xc002a328
c0009716:	85 c0                	test   eax,eax
c0009718:	74 24                	je     c000973e <sendKeyboardToken(KeyboardToken)+0x4a>
c000971a:	8b 15 28 a3 02 c0    	mov    edx,DWORD PTR ds:0xc002a328
c0009720:	83 ec 04             	sub    esp,0x4
c0009723:	68 40 a3 02 c0       	push   0xc002a340
c0009728:	83 ec 08             	sub    esp,0x8
c000972b:	89 e0                	mov    eax,esp
c000972d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0009730:	89 08                	mov    DWORD PTR [eax],ecx
c0009732:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009735:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c0009739:	ff d2                	call   edx
c000973b:	83 c4 10             	add    esp,0x10
c000973e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0009742:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0009745:	0f b6 c0             	movzx  eax,al
c0009748:	85 c0                	test   eax,eax
c000974a:	0f 84 da 00 00 00    	je     c000982a <sendKeyboardToken(KeyboardToken)+0x136>
c0009750:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009753:	0f b7 c0             	movzx  eax,ax
c0009756:	3d 18 03 00 00       	cmp    eax,0x318
c000975b:	75 06                	jne    c0009763 <sendKeyboardToken(KeyboardToken)+0x6f>
c000975d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0009763:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009766:	0f b7 c0             	movzx  eax,ax
c0009769:	3d 19 03 00 00       	cmp    eax,0x319
c000976e:	75 06                	jne    c0009776 <sendKeyboardToken(KeyboardToken)+0x82>
c0009770:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0009776:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009779:	0f b7 c0             	movzx  eax,ax
c000977c:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009781:	75 06                	jne    c0009789 <sendKeyboardToken(KeyboardToken)+0x95>
c0009783:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0009789:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000978c:	0f b7 c0             	movzx  eax,ax
c000978f:	3d 1b 03 00 00       	cmp    eax,0x31b
c0009794:	75 06                	jne    c000979c <sendKeyboardToken(KeyboardToken)+0xa8>
c0009796:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000979c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000979f:	0f b7 c0             	movzx  eax,ax
c00097a2:	3d 1c 03 00 00       	cmp    eax,0x31c
c00097a7:	75 06                	jne    c00097af <sendKeyboardToken(KeyboardToken)+0xbb>
c00097a9:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00097af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097b2:	0f b7 c0             	movzx  eax,ax
c00097b5:	3d 1d 03 00 00       	cmp    eax,0x31d
c00097ba:	75 06                	jne    c00097c2 <sendKeyboardToken(KeyboardToken)+0xce>
c00097bc:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00097c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097c5:	0f b7 c0             	movzx  eax,ax
c00097c8:	3d 1e 03 00 00       	cmp    eax,0x31e
c00097cd:	75 06                	jne    c00097d5 <sendKeyboardToken(KeyboardToken)+0xe1>
c00097cf:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00097d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097d8:	0f b7 c0             	movzx  eax,ax
c00097db:	3d 1f 03 00 00       	cmp    eax,0x31f
c00097e0:	75 06                	jne    c00097e8 <sendKeyboardToken(KeyboardToken)+0xf4>
c00097e2:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00097e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097eb:	0f b7 c0             	movzx  eax,ax
c00097ee:	3d 20 03 00 00       	cmp    eax,0x320
c00097f3:	75 06                	jne    c00097fb <sendKeyboardToken(KeyboardToken)+0x107>
c00097f5:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00097fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097fe:	0f b7 c0             	movzx  eax,ax
c0009801:	3d 21 03 00 00       	cmp    eax,0x321
c0009806:	75 06                	jne    c000980e <sendKeyboardToken(KeyboardToken)+0x11a>
c0009808:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000980e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009811:	0f b7 c0             	movzx  eax,ax
c0009814:	3d 22 03 00 00       	cmp    eax,0x322
c0009819:	0f 85 f1 00 00 00    	jne    c0009910 <sendKeyboardToken(KeyboardToken)+0x21c>
c000981f:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0009825:	e9 e6 00 00 00       	jmp    c0009910 <sendKeyboardToken(KeyboardToken)+0x21c>
c000982a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000982d:	0f b7 c0             	movzx  eax,ax
c0009830:	3d 18 03 00 00       	cmp    eax,0x318
c0009835:	75 0a                	jne    c0009841 <sendKeyboardToken(KeyboardToken)+0x14d>
c0009837:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000983d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009841:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009844:	0f b7 c0             	movzx  eax,ax
c0009847:	3d 19 03 00 00       	cmp    eax,0x319
c000984c:	75 0a                	jne    c0009858 <sendKeyboardToken(KeyboardToken)+0x164>
c000984e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0009854:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009858:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000985b:	0f b7 c0             	movzx  eax,ax
c000985e:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009863:	75 0a                	jne    c000986f <sendKeyboardToken(KeyboardToken)+0x17b>
c0009865:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000986b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000986f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009872:	0f b7 c0             	movzx  eax,ax
c0009875:	3d 1b 03 00 00       	cmp    eax,0x31b
c000987a:	75 0a                	jne    c0009886 <sendKeyboardToken(KeyboardToken)+0x192>
c000987c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0009882:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009889:	0f b7 c0             	movzx  eax,ax
c000988c:	3d 1c 03 00 00       	cmp    eax,0x31c
c0009891:	75 0a                	jne    c000989d <sendKeyboardToken(KeyboardToken)+0x1a9>
c0009893:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0009899:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000989d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098a0:	0f b7 c0             	movzx  eax,ax
c00098a3:	3d 1d 03 00 00       	cmp    eax,0x31d
c00098a8:	75 0a                	jne    c00098b4 <sendKeyboardToken(KeyboardToken)+0x1c0>
c00098aa:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00098b0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098b7:	0f b7 c0             	movzx  eax,ax
c00098ba:	3d 1e 03 00 00       	cmp    eax,0x31e
c00098bf:	75 0a                	jne    c00098cb <sendKeyboardToken(KeyboardToken)+0x1d7>
c00098c1:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00098c7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098ce:	0f b7 c0             	movzx  eax,ax
c00098d1:	3d 1f 03 00 00       	cmp    eax,0x31f
c00098d6:	75 0a                	jne    c00098e2 <sendKeyboardToken(KeyboardToken)+0x1ee>
c00098d8:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00098de:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098e5:	0f b7 c0             	movzx  eax,ax
c00098e8:	3d 20 03 00 00       	cmp    eax,0x320
c00098ed:	75 0a                	jne    c00098f9 <sendKeyboardToken(KeyboardToken)+0x205>
c00098ef:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00098f5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098fc:	0f b7 c0             	movzx  eax,ax
c00098ff:	3d 21 03 00 00       	cmp    eax,0x321
c0009904:	75 0a                	jne    c0009910 <sendKeyboardToken(KeyboardToken)+0x21c>
c0009906:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000990c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009913:	0f b7 c0             	movzx  eax,ax
c0009916:	3d 00 02 00 00       	cmp    eax,0x200
c000991b:	75 2f                	jne    c000994c <sendKeyboardToken(KeyboardToken)+0x258>
c000991d:	a0 40 a7 02 c0       	mov    al,ds:0xc002a740
c0009922:	83 f0 01             	xor    eax,0x1
c0009925:	0f b6 c0             	movzx  eax,al
c0009928:	85 c0                	test   eax,eax
c000992a:	74 20                	je     c000994c <sendKeyboardToken(KeyboardToken)+0x258>
c000992c:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0009931:	6a 01                	push   0x1
c0009933:	6a 00                	push   0x0
c0009935:	68 54 95 00 c0       	push   0xc0009554
c000993a:	50                   	push   eax
c000993b:	e8 60 be 00 00       	call   c00157a0 <Process::createThread(void (*)(void*), void*, int)>
c0009940:	83 c4 10             	add    esp,0x10
c0009943:	c6 05 40 a7 02 c0 01 	mov    BYTE PTR ds:0xc002a740,0x1
c000994a:	eb 3a                	jmp    c0009986 <sendKeyboardToken(KeyboardToken)+0x292>
c000994c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000994f:	0f b7 c0             	movzx  eax,ax
c0009952:	3d 01 02 00 00       	cmp    eax,0x201
c0009957:	75 2d                	jne    c0009986 <sendKeyboardToken(KeyboardToken)+0x292>
c0009959:	a0 40 a7 02 c0       	mov    al,ds:0xc002a740
c000995e:	83 f0 01             	xor    eax,0x1
c0009961:	0f b6 c0             	movzx  eax,al
c0009964:	85 c0                	test   eax,eax
c0009966:	74 1e                	je     c0009986 <sendKeyboardToken(KeyboardToken)+0x292>
c0009968:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000996d:	6a 01                	push   0x1
c000996f:	6a 00                	push   0x0
c0009971:	68 b9 95 00 c0       	push   0xc00095b9
c0009976:	50                   	push   eax
c0009977:	e8 24 be 00 00       	call   c00157a0 <Process::createThread(void (*)(void*), void*, int)>
c000997c:	83 c4 10             	add    esp,0x10
c000997f:	c6 05 40 a7 02 c0 01 	mov    BYTE PTR ds:0xc002a740,0x1
c0009986:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009989:	0f b7 c0             	movzx  eax,ax
c000998c:	3d 25 03 00 00       	cmp    eax,0x325
c0009991:	75 06                	jne    c0009999 <sendKeyboardToken(KeyboardToken)+0x2a5>
c0009993:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0009999:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000999c:	0f b7 c0             	movzx  eax,ax
c000999f:	3d 24 03 00 00       	cmp    eax,0x324
c00099a4:	75 06                	jne    c00099ac <sendKeyboardToken(KeyboardToken)+0x2b8>
c00099a6:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00099ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099af:	0f b7 c0             	movzx  eax,ax
c00099b2:	3d 23 03 00 00       	cmp    eax,0x323
c00099b7:	75 06                	jne    c00099bf <sendKeyboardToken(KeyboardToken)+0x2cb>
c00099b9:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00099bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099c2:	0f b7 c0             	movzx  eax,ax
c00099c5:	3d 26 03 00 00       	cmp    eax,0x326
c00099ca:	75 06                	jne    c00099d2 <sendKeyboardToken(KeyboardToken)+0x2de>
c00099cc:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00099d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099d5:	0f b7 c0             	movzx  eax,ax
c00099d8:	3d 27 03 00 00       	cmp    eax,0x327
c00099dd:	75 06                	jne    c00099e5 <sendKeyboardToken(KeyboardToken)+0x2f1>
c00099df:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00099e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099e8:	0f b7 c0             	movzx  eax,ax
c00099eb:	3d 22 03 00 00       	cmp    eax,0x322
c00099f0:	75 06                	jne    c00099f8 <sendKeyboardToken(KeyboardToken)+0x304>
c00099f2:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00099f8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00099fc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00099ff:	83 f0 01             	xor    eax,0x1
c0009a02:	0f b6 c0             	movzx  eax,al
c0009a05:	85 c0                	test   eax,eax
c0009a07:	74 7c                	je     c0009a85 <sendKeyboardToken(KeyboardToken)+0x391>
c0009a09:	a0 41 a4 02 c0       	mov    al,ds:0xc002a441
c0009a0e:	0f b6 c0             	movzx  eax,al
c0009a11:	85 c0                	test   eax,eax
c0009a13:	74 43                	je     c0009a58 <sendKeyboardToken(KeyboardToken)+0x364>
c0009a15:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a19:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0009a1d:	85 c0                	test   eax,eax
c0009a1f:	74 2b                	je     c0009a4c <sendKeyboardToken(KeyboardToken)+0x358>
c0009a21:	8b 15 44 a7 02 c0    	mov    edx,DWORD PTR ds:0xc002a744
c0009a27:	89 d0                	mov    eax,edx
c0009a29:	c1 e0 02             	shl    eax,0x2
c0009a2c:	01 d0                	add    eax,edx
c0009a2e:	d1 e0                	shl    eax,1
c0009a30:	a3 44 a7 02 c0       	mov    ds:0xc002a744,eax
c0009a35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a38:	0f b7 c0             	movzx  eax,ax
c0009a3b:	8d 50 d0             	lea    edx,[eax-0x30]
c0009a3e:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a43:	01 d0                	add    eax,edx
c0009a45:	a3 44 a7 02 c0       	mov    ds:0xc002a744,eax
c0009a4a:	eb 71                	jmp    c0009abd <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a4c:	c7 05 44 a7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a744,0x0
c0009a56:	eb 65                	jmp    c0009abd <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a58:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a5d:	85 c0                	test   eax,eax
c0009a5f:	74 18                	je     c0009a79 <sendKeyboardToken(KeyboardToken)+0x385>
c0009a61:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a66:	0f b6 c0             	movzx  eax,al
c0009a69:	83 ec 0c             	sub    esp,0xc
c0009a6c:	50                   	push   eax
c0009a6d:	e8 ac fb ff ff       	call   c000961e <sendKeyToTerminal(unsigned char)>
c0009a72:	83 c4 10             	add    esp,0x10
c0009a75:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a79:	c7 05 44 a7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a744,0x0
c0009a83:	eb 38                	jmp    c0009abd <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a88:	0f b7 c0             	movzx  eax,ax
c0009a8b:	3d 01 01 00 00       	cmp    eax,0x101
c0009a90:	75 2b                	jne    c0009abd <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a92:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a97:	85 c0                	test   eax,eax
c0009a99:	74 18                	je     c0009ab3 <sendKeyboardToken(KeyboardToken)+0x3bf>
c0009a9b:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009aa0:	0f b6 c0             	movzx  eax,al
c0009aa3:	83 ec 0c             	sub    esp,0xc
c0009aa6:	50                   	push   eax
c0009aa7:	e8 72 fb ff ff       	call   c000961e <sendKeyToTerminal(unsigned char)>
c0009aac:	83 c4 10             	add    esp,0x10
c0009aaf:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009ab3:	c7 05 44 a7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a744,0x0
c0009abd:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009ac0:	83 f0 01             	xor    eax,0x1
c0009ac3:	0f b6 c0             	movzx  eax,al
c0009ac6:	85 c0                	test   eax,eax
c0009ac8:	74 5a                	je     c0009b24 <sendKeyboardToken(KeyboardToken)+0x430>
c0009aca:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009acd:	83 f0 01             	xor    eax,0x1
c0009ad0:	0f b6 c0             	movzx  eax,al
c0009ad3:	85 c0                	test   eax,eax
c0009ad5:	74 4d                	je     c0009b24 <sendKeyboardToken(KeyboardToken)+0x430>
c0009ad7:	a0 40 a4 02 c0       	mov    al,ds:0xc002a440
c0009adc:	83 f0 01             	xor    eax,0x1
c0009adf:	0f b6 c0             	movzx  eax,al
c0009ae2:	85 c0                	test   eax,eax
c0009ae4:	74 3e                	je     c0009b24 <sendKeyboardToken(KeyboardToken)+0x430>
c0009ae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ae9:	0f b7 c0             	movzx  eax,ax
c0009aec:	83 f8 1f             	cmp    eax,0x1f
c0009aef:	76 0b                	jbe    c0009afc <sendKeyboardToken(KeyboardToken)+0x408>
c0009af1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009af4:	0f b7 c0             	movzx  eax,ax
c0009af7:	83 f8 7e             	cmp    eax,0x7e
c0009afa:	76 16                	jbe    c0009b12 <sendKeyboardToken(KeyboardToken)+0x41e>
c0009afc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009aff:	0f b7 c0             	movzx  eax,ax
c0009b02:	83 f8 0a             	cmp    eax,0xa
c0009b05:	74 0b                	je     c0009b12 <sendKeyboardToken(KeyboardToken)+0x41e>
c0009b07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b0a:	0f b7 c0             	movzx  eax,ax
c0009b0d:	83 f8 08             	cmp    eax,0x8
c0009b10:	75 12                	jne    c0009b24 <sendKeyboardToken(KeyboardToken)+0x430>
c0009b12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b15:	0f b6 c0             	movzx  eax,al
c0009b18:	83 ec 0c             	sub    esp,0xc
c0009b1b:	50                   	push   eax
c0009b1c:	e8 fd fa ff ff       	call   c000961e <sendKeyToTerminal(unsigned char)>
c0009b21:	83 c4 10             	add    esp,0x10
c0009b24:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009b27:	83 f0 01             	xor    eax,0x1
c0009b2a:	0f b6 c0             	movzx  eax,al
c0009b2d:	85 c0                	test   eax,eax
c0009b2f:	74 5d                	je     c0009b8e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b31:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009b34:	83 f0 01             	xor    eax,0x1
c0009b37:	0f b6 c0             	movzx  eax,al
c0009b3a:	85 c0                	test   eax,eax
c0009b3c:	74 50                	je     c0009b8e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b3e:	a0 40 a4 02 c0       	mov    al,ds:0xc002a440
c0009b43:	0f b6 c0             	movzx  eax,al
c0009b46:	85 c0                	test   eax,eax
c0009b48:	74 44                	je     c0009b8e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b4d:	0f b7 c0             	movzx  eax,ax
c0009b50:	83 f8 3f             	cmp    eax,0x3f
c0009b53:	76 39                	jbe    c0009b8e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b58:	0f b7 c0             	movzx  eax,ax
c0009b5b:	83 f8 7f             	cmp    eax,0x7f
c0009b5e:	77 2e                	ja     c0009b8e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b63:	88 c2                	mov    dl,al
c0009b65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b68:	0f b7 c0             	movzx  eax,ax
c0009b6b:	83 f8 5f             	cmp    eax,0x5f
c0009b6e:	76 04                	jbe    c0009b74 <sendKeyboardToken(KeyboardToken)+0x480>
c0009b70:	b0 20                	mov    al,0x20
c0009b72:	eb 02                	jmp    c0009b76 <sendKeyboardToken(KeyboardToken)+0x482>
c0009b74:	b0 00                	mov    al,0x0
c0009b76:	89 d1                	mov    ecx,edx
c0009b78:	29 c1                	sub    ecx,eax
c0009b7a:	89 c8                	mov    eax,ecx
c0009b7c:	83 e8 40             	sub    eax,0x40
c0009b7f:	0f b6 c0             	movzx  eax,al
c0009b82:	83 ec 0c             	sub    esp,0xc
c0009b85:	50                   	push   eax
c0009b86:	e8 93 fa ff ff       	call   c000961e <sendKeyToTerminal(unsigned char)>
c0009b8b:	83 c4 10             	add    esp,0x10
c0009b8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b91:	0f b7 c0             	movzx  eax,ax
c0009b94:	3d 00 03 00 00       	cmp    eax,0x300
c0009b99:	75 12                	jne    c0009bad <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009b9b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009b9e:	83 f0 01             	xor    eax,0x1
c0009ba1:	0f b6 c0             	movzx  eax,al
c0009ba4:	85 c0                	test   eax,eax
c0009ba6:	74 05                	je     c0009bad <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009ba8:	e8 1c 74 00 00       	call   c0010fc9 <doTerminalCycle()>
c0009bad:	90                   	nop
c0009bae:	c9                   	leave  
c0009baf:	c3                   	ret    

c0009bb0 <clearInternalKeybuffer(VgaText*)>:
c0009bb0:	55                   	push   ebp
c0009bb1:	89 e5                	mov    ebp,esp
c0009bb3:	83 ec 08             	sub    esp,0x8
c0009bb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009bb9:	05 02 01 00 00       	add    eax,0x102
c0009bbe:	83 ec 0c             	sub    esp,0xc
c0009bc1:	50                   	push   eax
c0009bc2:	e8 b9 69 ff ff       	call   c0000580 <strlen>
c0009bc7:	83 c4 10             	add    esp,0x10
c0009bca:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009bcd:	81 c2 02 01 00 00    	add    edx,0x102
c0009bd3:	83 ec 04             	sub    esp,0x4
c0009bd6:	50                   	push   eax
c0009bd7:	6a 00                	push   0x0
c0009bd9:	52                   	push   edx
c0009bda:	e8 11 69 ff ff       	call   c00004f0 <memset>
c0009bdf:	83 c4 10             	add    esp,0x10
c0009be2:	90                   	nop
c0009be3:	c9                   	leave  
c0009be4:	c3                   	ret    

c0009be5 <readKeyboard(VgaText*, char*, unsigned long)>:
c0009be5:	55                   	push   ebp
c0009be6:	89 e5                	mov    ebp,esp
c0009be8:	83 ec 18             	sub    esp,0x18
c0009beb:	a1 28 a3 02 c0       	mov    eax,ds:0xc002a328
c0009bf0:	85 c0                	test   eax,eax
c0009bf2:	74 2a                	je     c0009c1e <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0009bf4:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0009bfa:	8b 15 28 a3 02 c0    	mov    edx,DWORD PTR ds:0xc002a328
c0009c00:	83 ec 04             	sub    esp,0x4
c0009c03:	68 40 a3 02 c0       	push   0xc002a340
c0009c08:	83 ec 08             	sub    esp,0x8
c0009c0b:	89 e0                	mov    eax,esp
c0009c0d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0009c10:	89 08                	mov    DWORD PTR [eax],ecx
c0009c12:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009c15:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c0009c19:	ff d2                	call   edx
c0009c1b:	83 c4 10             	add    esp,0x10
c0009c1e:	fb                   	sti    
c0009c1f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009c26:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0009c2a:	0f 84 08 01 00 00    	je     c0009d38 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c0009c30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c33:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c39:	0f be c0             	movsx  eax,al
c0009c3c:	85 c0                	test   eax,eax
c0009c3e:	75 27                	jne    c0009c67 <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c0009c40:	fa                   	cli    
c0009c41:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0009c46:	83 c0 01             	add    eax,0x1
c0009c49:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0009c4e:	e8 a5 bd 00 00       	call   c00159f8 <schedule()>
c0009c53:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0009c5b:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0009c60:	85 c0                	test   eax,eax
c0009c62:	75 cc                	jne    c0009c30 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0009c64:	fb                   	sti    
c0009c65:	eb c9                	jmp    c0009c30 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0009c67:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009c6a:	8d 50 01             	lea    edx,[eax+0x1]
c0009c6d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0009c70:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009c73:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c0009c79:	88 10                	mov    BYTE PTR [eax],dl
c0009c7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c7e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c84:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0009c87:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009c8b:	83 f8 03             	cmp    eax,0x3
c0009c8e:	75 1e                	jne    c0009cae <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c0009c90:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c95:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c97:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c9a:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009ca0:	83 ec 08             	sub    esp,0x8
c0009ca3:	6a 02                	push   0x2
c0009ca5:	50                   	push   eax
c0009ca6:	e8 65 62 00 00       	call   c000ff10 <KeRaiseSignal(SigHandlerBlock*, int)>
c0009cab:	83 c4 10             	add    esp,0x10
c0009cae:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009cb2:	83 f8 1c             	cmp    eax,0x1c
c0009cb5:	75 1e                	jne    c0009cd5 <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c0009cb7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009cbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0009cbe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009cc1:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009cc7:	83 ec 08             	sub    esp,0x8
c0009cca:	6a 09                	push   0x9
c0009ccc:	50                   	push   eax
c0009ccd:	e8 3e 62 00 00       	call   c000ff10 <KeRaiseSignal(SigHandlerBlock*, int)>
c0009cd2:	83 c4 10             	add    esp,0x10
c0009cd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009cd8:	05 02 01 00 00       	add    eax,0x102
c0009cdd:	83 ec 0c             	sub    esp,0xc
c0009ce0:	50                   	push   eax
c0009ce1:	e8 9a 68 ff ff       	call   c0000580 <strlen>
c0009ce6:	83 c4 10             	add    esp,0x10
c0009ce9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009cec:	81 c2 02 01 00 00    	add    edx,0x102
c0009cf2:	8d 4a 01             	lea    ecx,[edx+0x1]
c0009cf5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009cf8:	81 c2 02 01 00 00    	add    edx,0x102
c0009cfe:	83 ec 04             	sub    esp,0x4
c0009d01:	50                   	push   eax
c0009d02:	51                   	push   ecx
c0009d03:	52                   	push   edx
c0009d04:	e8 c7 66 ff ff       	call   c00003d0 <memmove>
c0009d09:	83 c4 10             	add    esp,0x10
c0009d0c:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c0009d10:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009d14:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009d18:	83 f8 0a             	cmp    eax,0xa
c0009d1b:	74 16                	je     c0009d33 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c0009d1d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009d21:	83 f8 03             	cmp    eax,0x3
c0009d24:	74 0d                	je     c0009d33 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c0009d26:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009d2a:	83 f8 1c             	cmp    eax,0x1c
c0009d2d:	0f 85 f3 fe ff ff    	jne    c0009c26 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0009d33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d36:	eb 03                	jmp    c0009d3b <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c0009d38:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d3b:	c9                   	leave  
c0009d3c:	c3                   	ret    
c0009d3d:	90                   	nop

c0009d3e <Keyboard::Keyboard(char const*)>:
c0009d3e:	83 ec 0c             	sub    esp,0xc
c0009d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d45:	83 ec 08             	sub    esp,0x8
c0009d48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d4c:	50                   	push   eax
c0009d4d:	e8 a2 f4 ff ff       	call   c00091f4 <Device::Device(char const*)>
c0009d52:	83 c4 10             	add    esp,0x10
c0009d55:	ba 24 20 02 c0       	mov    edx,0xc0022024
c0009d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d5e:	89 10                	mov    DWORD PTR [eax],edx
c0009d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d64:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0009d6e:	c6 05 24 a3 02 c0 01 	mov    BYTE PTR ds:0xc002a324,0x1
c0009d75:	90                   	nop
c0009d76:	83 c4 0c             	add    esp,0xc
c0009d79:	c3                   	ret    

c0009d7a <Keyboard::~Keyboard()>:
c0009d7a:	83 ec 0c             	sub    esp,0xc
c0009d7d:	ba 24 20 02 c0       	mov    edx,0xc0022024
c0009d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d86:	89 10                	mov    DWORD PTR [eax],edx
c0009d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d8c:	83 ec 0c             	sub    esp,0xc
c0009d8f:	50                   	push   eax
c0009d90:	e8 ff f1 ff ff       	call   c0008f94 <Device::~Device()>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	90                   	nop
c0009d99:	83 c4 0c             	add    esp,0xc
c0009d9c:	c3                   	ret    
c0009d9d:	90                   	nop

c0009d9e <Keyboard::~Keyboard()>:
c0009d9e:	83 ec 0c             	sub    esp,0xc
c0009da1:	83 ec 0c             	sub    esp,0xc
c0009da4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009da8:	e8 cd ff ff ff       	call   c0009d7a <Keyboard::~Keyboard()>
c0009dad:	83 c4 10             	add    esp,0x10
c0009db0:	83 ec 08             	sub    esp,0x8
c0009db3:	68 5c 01 00 00       	push   0x15c
c0009db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dbc:	e8 46 2a 00 00       	call   c000c807 <operator delete(void*, unsigned long)>
c0009dc1:	83 c4 10             	add    esp,0x10
c0009dc4:	83 c4 0c             	add    esp,0xc
c0009dc7:	c3                   	ret    

c0009dc8 <LogicalDisk::close(int, int, void*)>:
c0009dc8:	83 c8 ff             	or     eax,0xffffffff
c0009dcb:	c3                   	ret    

c0009dcc <LogicalDisk::~LogicalDisk()>:
c0009dcc:	83 ec 0c             	sub    esp,0xc
c0009dcf:	ba 9c 20 02 c0       	mov    edx,0xc002209c
c0009dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dd8:	89 10                	mov    DWORD PTR [eax],edx
c0009dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dde:	83 ec 0c             	sub    esp,0xc
c0009de1:	50                   	push   eax
c0009de2:	e8 ad f1 ff ff       	call   c0008f94 <Device::~Device()>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	90                   	nop
c0009deb:	83 c4 0c             	add    esp,0xc
c0009dee:	c3                   	ret    
c0009def:	90                   	nop

c0009df0 <LogicalDisk::~LogicalDisk()>:
c0009df0:	83 ec 0c             	sub    esp,0xc
c0009df3:	83 ec 0c             	sub    esp,0xc
c0009df6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dfa:	e8 cd ff ff ff       	call   c0009dcc <LogicalDisk::~LogicalDisk()>
c0009dff:	83 c4 10             	add    esp,0x10
c0009e02:	83 ec 08             	sub    esp,0x8
c0009e05:	68 78 01 00 00       	push   0x178
c0009e0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e0e:	e8 f4 29 00 00       	call   c000c807 <operator delete(void*, unsigned long)>
c0009e13:	83 c4 10             	add    esp,0x10
c0009e16:	83 c4 0c             	add    esp,0xc
c0009e19:	c3                   	ret    

c0009e1a <LogicalDisk::open(int, int, void*)>:
c0009e1a:	83 ec 18             	sub    esp,0x18
c0009e1d:	68 50 20 02 c0       	push   0xc0022050
c0009e22:	e8 ab 4f 00 00       	call   c000edd2 <KePanic(char const*)>
c0009e27:	83 c8 ff             	or     eax,0xffffffff
c0009e2a:	83 c4 1c             	add    esp,0x1c
c0009e2d:	c3                   	ret    

c0009e2e <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0009e2e:	53                   	push   ebx
c0009e2f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009e33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e37:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009e3b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0009e41:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0009e47:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0009e4d:	77 10                	ja     c0009e5f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0009e4f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0009e55:	89 d3                	mov    ebx,edx
c0009e57:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0009e5d:	72 05                	jb     c0009e64 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0009e5f:	83 c8 ff             	or     eax,0xffffffff
c0009e62:	89 c2                	mov    edx,eax
c0009e64:	5b                   	pop    ebx
c0009e65:	c3                   	ret    

c0009e66 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0009e66:	56                   	push   esi
c0009e67:	83 c8 ff             	or     eax,0xffffffff
c0009e6a:	53                   	push   ebx
c0009e6b:	89 c2                	mov    edx,eax
c0009e6d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009e71:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0009e75:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009e79:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0009e7f:	77 27                	ja     c0009ea8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e81:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0009e87:	89 d8                	mov    eax,ebx
c0009e89:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0009e8f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009e94:	89 c2                	mov    edx,eax
c0009e96:	73 10                	jae    c0009ea8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e98:	89 c8                	mov    eax,ecx
c0009e9a:	89 da                	mov    edx,ebx
c0009e9c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0009ea2:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0009ea8:	5b                   	pop    ebx
c0009ea9:	5e                   	pop    esi
c0009eaa:	c3                   	ret    
c0009eab:	90                   	nop

c0009eac <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0009eac:	83 ec 1c             	sub    esp,0x1c
c0009eaf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009eb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ebb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ebf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ec3:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ec6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009ece:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ed2:	83 ec 08             	sub    esp,0x8
c0009ed5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ed9:	50                   	push   eax
c0009eda:	e8 15 f3 ff ff       	call   c00091f4 <Device::Device(char const*)>
c0009edf:	83 c4 10             	add    esp,0x10
c0009ee2:	ba 9c 20 02 c0       	mov    edx,0xc002209c
c0009ee7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009eeb:	89 10                	mov    DWORD PTR [eax],edx
c0009eed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ef1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009ef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009efc:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0009f03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f07:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009f0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f12:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0009f1c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009f20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f24:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f28:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0009f2e:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0009f34:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009f38:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009f3b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009f3f:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0009f45:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0009f4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f4f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009f53:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0009f59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f5d:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c0009f67:	90                   	nop
c0009f68:	83 c4 1c             	add    esp,0x1c
c0009f6b:	c3                   	ret    

c0009f6c <LogicalDisk::assignDriveLetter()>:
c0009f6c:	55                   	push   ebp
c0009f6d:	57                   	push   edi
c0009f6e:	56                   	push   esi
c0009f6f:	53                   	push   ebx
c0009f70:	83 ec 14             	sub    esp,0x14
c0009f73:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f77:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0009f7d:	b0 41                	mov    al,0x41
c0009f7f:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c0009f85:	84 d2                	test   dl,dl
c0009f87:	75 02                	jne    c0009f8b <LogicalDisk::assignDriveLetter()+0x1f>
c0009f89:	b0 43                	mov    al,0x43
c0009f8b:	8b 3d 60 a7 02 c0    	mov    edi,DWORD PTR ds:0xc002a760
c0009f91:	0f b6 ca             	movzx  ecx,dl
c0009f94:	0f be e8             	movsx  ebp,al
c0009f97:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009f9b:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0009f9f:	8b 3d 64 a7 02 c0    	mov    edi,DWORD PTR ds:0xc002a764
c0009fa5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0009fa9:	3c 43                	cmp    al,0x43
c0009fab:	75 10                	jne    c0009fbd <LogicalDisk::assignDriveLetter()+0x51>
c0009fad:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0009fb4:	75 5a                	jne    c000a010 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fb6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009fbb:	75 53                	jne    c000a010 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fbd:	8d 75 bf             	lea    esi,[ebp-0x41]
c0009fc0:	ba 01 00 00 00       	mov    edx,0x1
c0009fc5:	89 34 24             	mov    DWORD PTR [esp],esi
c0009fc8:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c0009fcb:	d3 e2                	shl    edx,cl
c0009fcd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009fd1:	89 d7                	mov    edi,edx
c0009fd3:	89 d6                	mov    esi,edx
c0009fd5:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c0009fd9:	c1 ff 1f             	sar    edi,0x1f
c0009fdc:	21 f9                	and    ecx,edi
c0009fde:	09 d1                	or     ecx,edx
c0009fe0:	75 2e                	jne    c000a010 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fe2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009fe6:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0009fea:	09 f2                	or     edx,esi
c0009fec:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0009fef:	89 15 60 a7 02 c0    	mov    DWORD PTR ds:0xc002a760,edx
c0009ff5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ff9:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0009fff:	89 1c b5 80 a7 02 c0 	mov    DWORD PTR [esi*4-0x3ffd5880],ebx
c000a006:	09 fa                	or     edx,edi
c000a008:	89 15 64 a7 02 c0    	mov    DWORD PTR ds:0xc002a764,edx
c000a00e:	eb 0d                	jmp    c000a01d <LogicalDisk::assignDriveLetter()+0xb1>
c000a010:	8d 50 01             	lea    edx,[eax+0x1]
c000a013:	45                   	inc    ebp
c000a014:	80 fa 5b             	cmp    dl,0x5b
c000a017:	88 d0                	mov    al,dl
c000a019:	75 8e                	jne    c0009fa9 <LogicalDisk::assignDriveLetter()+0x3d>
c000a01b:	31 c0                	xor    eax,eax
c000a01d:	83 c4 14             	add    esp,0x14
c000a020:	5b                   	pop    ebx
c000a021:	5e                   	pop    esi
c000a022:	5f                   	pop    edi
c000a023:	5d                   	pop    ebp
c000a024:	c3                   	ret    
c000a025:	90                   	nop

c000a026 <LogicalDisk::mount()>:
c000a026:	56                   	push   esi
c000a027:	53                   	push   ebx
c000a028:	53                   	push   ebx
c000a029:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a02d:	8b 1d 04 a3 02 c0    	mov    ebx,DWORD PTR ds:0xc002a304
c000a033:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a03d:	85 db                	test   ebx,ebx
c000a03f:	74 27                	je     c000a068 <LogicalDisk::mount()+0x42>
c000a041:	51                   	push   ecx
c000a042:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a049:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a04b:	83 e8 41             	sub    eax,0x41
c000a04e:	50                   	push   eax
c000a04f:	56                   	push   esi
c000a050:	53                   	push   ebx
c000a051:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a054:	83 c4 10             	add    esp,0x10
c000a057:	84 c0                	test   al,al
c000a059:	74 08                	je     c000a063 <LogicalDisk::mount()+0x3d>
c000a05b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a061:	eb 07                	jmp    c000a06a <LogicalDisk::mount()+0x44>
c000a063:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a066:	eb d5                	jmp    c000a03d <LogicalDisk::mount()+0x17>
c000a068:	31 c0                	xor    eax,eax
c000a06a:	5a                   	pop    edx
c000a06b:	5b                   	pop    ebx
c000a06c:	5e                   	pop    esi
c000a06d:	c3                   	ret    

c000a06e <LogicalDisk::unmount()>:
c000a06e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a072:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a07c:	c3                   	ret    
c000a07d:	90                   	nop

c000a07e <LogicalDisk::eject()>:
c000a07e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a082:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a088:	8b 10                	mov    edx,DWORD PTR [eax]
c000a08a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a08e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a091:	90                   	nop

c000a092 <LogicalDisk::unassignDriveLetter()>:
c000a092:	57                   	push   edi
c000a093:	56                   	push   esi
c000a094:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a098:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000a09f:	85 c9                	test   ecx,ecx
c000a0a1:	75 0f                	jne    c000a0b2 <LogicalDisk::unassignDriveLetter()+0x20>
c000a0a3:	c7 44 24 0c 74 20 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022074
c000a0ab:	5e                   	pop    esi
c000a0ac:	5f                   	pop    edi
c000a0ad:	e9 20 4d 00 00       	jmp    c000edd2 <KePanic(char const*)>
c000a0b2:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000a0b9:	83 e9 41             	sub    ecx,0x41
c000a0bc:	b8 01 00 00 00       	mov    eax,0x1
c000a0c1:	c7 04 8d 80 a7 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd5880],0x0
c000a0cc:	d3 e0                	shl    eax,cl
c000a0ce:	89 c7                	mov    edi,eax
c000a0d0:	f7 d0                	not    eax
c000a0d2:	c1 ff 1f             	sar    edi,0x1f
c000a0d5:	21 05 60 a7 02 c0    	and    DWORD PTR ds:0xc002a760,eax
c000a0db:	89 fe                	mov    esi,edi
c000a0dd:	f7 d6                	not    esi
c000a0df:	21 35 64 a7 02 c0    	and    DWORD PTR ds:0xc002a764,esi
c000a0e5:	5e                   	pop    esi
c000a0e6:	5f                   	pop    edi
c000a0e7:	c3                   	ret    

c000a0e8 <LogicalDisk::read(unsigned long long, int, void*)>:
c000a0e8:	57                   	push   edi
c000a0e9:	56                   	push   esi
c000a0ea:	53                   	push   ebx
c000a0eb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a0ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a0f3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a0f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a0fb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a101:	77 41                	ja     c000a144 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000a103:	99                   	cdq    
c000a104:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a10a:	01 c8                	add    eax,ecx
c000a10c:	11 da                	adc    edx,ebx
c000a10e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a114:	19 d7                	sbb    edi,edx
c000a116:	72 33                	jb     c000a14b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000a118:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a11e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a124:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a128:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a12c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a132:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a138:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a13c:	5b                   	pop    ebx
c000a13d:	5e                   	pop    esi
c000a13e:	5f                   	pop    edi
c000a13f:	e9 76 0b 00 00       	jmp    c000acba <VCache::read(unsigned long long, int, void*)>
c000a144:	b8 05 00 00 00       	mov    eax,0x5
c000a149:	eb 05                	jmp    c000a150 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000a14b:	b8 07 00 00 00       	mov    eax,0x7
c000a150:	5b                   	pop    ebx
c000a151:	5e                   	pop    esi
c000a152:	5f                   	pop    edi
c000a153:	c3                   	ret    

c000a154 <LogicalDisk::write(unsigned long long, int, void*)>:
c000a154:	57                   	push   edi
c000a155:	56                   	push   esi
c000a156:	53                   	push   ebx
c000a157:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a15b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a15f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a163:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a167:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a16d:	77 41                	ja     c000a1b0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000a16f:	99                   	cdq    
c000a170:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a176:	01 c8                	add    eax,ecx
c000a178:	11 da                	adc    edx,ebx
c000a17a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a180:	19 d7                	sbb    edi,edx
c000a182:	72 33                	jb     c000a1b7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000a184:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a18a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a190:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a194:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a198:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a19e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a1a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1a8:	5b                   	pop    ebx
c000a1a9:	5e                   	pop    esi
c000a1aa:	5f                   	pop    edi
c000a1ab:	e9 3c 09 00 00       	jmp    c000aaec <VCache::write(unsigned long long, int, void*)>
c000a1b0:	b8 05 00 00 00       	mov    eax,0x5
c000a1b5:	eb 05                	jmp    c000a1bc <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000a1b7:	b8 07 00 00 00       	mov    eax,0x7
c000a1bc:	5b                   	pop    ebx
c000a1bd:	5e                   	pop    esi
c000a1be:	5f                   	pop    edi
c000a1bf:	c3                   	ret    

c000a1c0 <Mouse::Mouse(char const*)>:
c000a1c0:	83 ec 0c             	sub    esp,0xc
c000a1c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1c7:	83 ec 08             	sub    esp,0x8
c000a1ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1ce:	50                   	push   eax
c000a1cf:	e8 20 f0 ff ff       	call   c00091f4 <Device::Device(char const*)>
c000a1d4:	83 c4 10             	add    esp,0x10
c000a1d7:	ba c8 20 02 c0       	mov    edx,0xc00220c8
c000a1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1e0:	89 10                	mov    DWORD PTR [eax],edx
c000a1e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1e6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000a1f0:	90                   	nop
c000a1f1:	83 c4 0c             	add    esp,0xc
c000a1f4:	c3                   	ret    
c000a1f5:	90                   	nop
c000a1f6:	66 90                	xchg   ax,ax

c000a1f8 <Mouse::~Mouse()>:
c000a1f8:	83 ec 0c             	sub    esp,0xc
c000a1fb:	ba c8 20 02 c0       	mov    edx,0xc00220c8
c000a200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a204:	89 10                	mov    DWORD PTR [eax],edx
c000a206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a20a:	83 ec 0c             	sub    esp,0xc
c000a20d:	50                   	push   eax
c000a20e:	e8 81 ed ff ff       	call   c0008f94 <Device::~Device()>
c000a213:	83 c4 10             	add    esp,0x10
c000a216:	90                   	nop
c000a217:	83 c4 0c             	add    esp,0xc
c000a21a:	c3                   	ret    
c000a21b:	90                   	nop

c000a21c <Mouse::~Mouse()>:
c000a21c:	83 ec 0c             	sub    esp,0xc
c000a21f:	83 ec 0c             	sub    esp,0xc
c000a222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a226:	e8 cd ff ff ff       	call   c000a1f8 <Mouse::~Mouse()>
c000a22b:	83 c4 10             	add    esp,0x10
c000a22e:	83 ec 08             	sub    esp,0x8
c000a231:	68 58 01 00 00       	push   0x158
c000a236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a23a:	e8 c8 25 00 00       	call   c000c807 <operator delete(void*, unsigned long)>
c000a23f:	83 c4 10             	add    esp,0x10
c000a242:	83 c4 0c             	add    esp,0xc
c000a245:	c3                   	ret    

c000a246 <NIC::getMAC()>:
c000a246:	31 c0                	xor    eax,eax
c000a248:	31 d2                	xor    edx,edx
c000a24a:	c3                   	ret    
c000a24b:	90                   	nop

c000a24c <NIC::write(int, unsigned char*, int*)>:
c000a24c:	b8 01 00 00 00       	mov    eax,0x1
c000a251:	c3                   	ret    

c000a252 <NIC::NIC(char const*)>:
c000a252:	83 ec 0c             	sub    esp,0xc
c000a255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a259:	83 ec 08             	sub    esp,0x8
c000a25c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a260:	50                   	push   eax
c000a261:	e8 8e ef ff ff       	call   c00091f4 <Device::Device(char const*)>
c000a266:	83 c4 10             	add    esp,0x10
c000a269:	ba f4 20 02 c0       	mov    edx,0xc00220f4
c000a26e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a272:	89 10                	mov    DWORD PTR [eax],edx
c000a274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a278:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000a282:	90                   	nop
c000a283:	83 c4 0c             	add    esp,0xc
c000a286:	c3                   	ret    
c000a287:	90                   	nop

c000a288 <NIC::~NIC()>:
c000a288:	83 ec 0c             	sub    esp,0xc
c000a28b:	ba f4 20 02 c0       	mov    edx,0xc00220f4
c000a290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a294:	89 10                	mov    DWORD PTR [eax],edx
c000a296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a29a:	83 ec 0c             	sub    esp,0xc
c000a29d:	50                   	push   eax
c000a29e:	e8 f1 ec ff ff       	call   c0008f94 <Device::~Device()>
c000a2a3:	83 c4 10             	add    esp,0x10
c000a2a6:	90                   	nop
c000a2a7:	83 c4 0c             	add    esp,0xc
c000a2aa:	c3                   	ret    
c000a2ab:	90                   	nop

c000a2ac <NIC::~NIC()>:
c000a2ac:	83 ec 0c             	sub    esp,0xc
c000a2af:	83 ec 0c             	sub    esp,0xc
c000a2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b6:	e8 cd ff ff ff       	call   c000a288 <NIC::~NIC()>
c000a2bb:	83 c4 10             	add    esp,0x10
c000a2be:	83 ec 08             	sub    esp,0x8
c000a2c1:	68 58 01 00 00       	push   0x158
c000a2c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2ca:	e8 38 25 00 00       	call   c000c807 <operator delete(void*, unsigned long)>
c000a2cf:	83 c4 10             	add    esp,0x10
c000a2d2:	83 c4 0c             	add    esp,0xc
c000a2d5:	c3                   	ret    

c000a2d6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a2d6:	55                   	push   ebp
c000a2d7:	57                   	push   edi
c000a2d8:	56                   	push   esi
c000a2d9:	53                   	push   ebx
c000a2da:	81 ec 28 01 00 00    	sub    esp,0x128
c000a2e0:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000a2e7:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000a2ee:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000a2f5:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000a2fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a300:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000a304:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a30b:	e8 e0 ef ff ff       	call   c00092f0 <Device::getName()>
c000a310:	5a                   	pop    edx
c000a311:	59                   	pop    ecx
c000a312:	50                   	push   eax
c000a313:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000a317:	55                   	push   ebp
c000a318:	e8 33 63 ff ff       	call   c0000650 <strcpy>
c000a31d:	5b                   	pop    ebx
c000a31e:	58                   	pop    eax
c000a31f:	68 20 21 02 c0       	push   0xc0022120
c000a324:	55                   	push   ebp
c000a325:	e8 46 65 ff ff       	call   c0000870 <strcat>
c000a32a:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000a331:	e8 56 47 00 00       	call   c000ea8c <malloc>
c000a336:	83 c4 0c             	add    esp,0xc
c000a339:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a33d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a341:	89 c3                	mov    ebx,eax
c000a343:	57                   	push   edi
c000a344:	56                   	push   esi
c000a345:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000a34c:	55                   	push   ebp
c000a34d:	50                   	push   eax
c000a34e:	e8 59 fb ff ff       	call   c0009eac <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000a353:	83 c4 14             	add    esp,0x14
c000a356:	53                   	push   ebx
c000a357:	e8 10 fc ff ff       	call   c0009f6c <LogicalDisk::assignDriveLetter()>
c000a35c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a35f:	e8 c2 fc ff ff       	call   c000a026 <LogicalDisk::mount()>
c000a364:	58                   	pop    eax
c000a365:	5a                   	pop    edx
c000a366:	53                   	push   ebx
c000a367:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a36e:	e8 1f ed ff ff       	call   c0009092 <Device::addChild(Device*)>
c000a373:	81 c4 2c 01 00 00    	add    esp,0x12c
c000a379:	5b                   	pop    ebx
c000a37a:	5e                   	pop    esi
c000a37b:	5f                   	pop    edi
c000a37c:	5d                   	pop    ebp
c000a37d:	c3                   	ret    

c000a37e <createPartitionsForDisk(PhysicalDisk*)>:
c000a37e:	55                   	push   ebp
c000a37f:	57                   	push   edi
c000a380:	56                   	push   esi
c000a381:	53                   	push   ebx
c000a382:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000a388:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000a38f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000a395:	3d 00 02 00 00       	cmp    eax,0x200
c000a39a:	74 27                	je     c000a3c3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000a39c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000a3a2:	83 ec 10             	sub    esp,0x10
c000a3a5:	99                   	cdq    
c000a3a6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000a3ac:	52                   	push   edx
c000a3ad:	50                   	push   eax
c000a3ae:	0f a4 f7 0a          	shld   edi,esi,0xa
c000a3b2:	c1 e6 0a             	shl    esi,0xa
c000a3b5:	89 fd                	mov    ebp,edi
c000a3b7:	55                   	push   ebp
c000a3b8:	56                   	push   esi
c000a3b9:	e8 a6 5f 01 00       	call   c0020364 <__udivdi3>
c000a3be:	e9 b9 00 00 00       	jmp    c000a47c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a3c3:	83 ec 0c             	sub    esp,0xc
c000a3c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a3c8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000a3cc:	56                   	push   esi
c000a3cd:	6a 01                	push   0x1
c000a3cf:	6a 00                	push   0x0
c000a3d1:	6a 00                	push   0x0
c000a3d3:	53                   	push   ebx
c000a3d4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000a3d7:	83 c4 20             	add    esp,0x20
c000a3da:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000a3e2:	75 0a                	jne    c000a3ee <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000a3e4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000a3ec:	74 2c                	je     c000a41a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000a3ee:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a3f4:	83 ec 10             	sub    esp,0x10
c000a3f7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a3fd:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a403:	89 f7                	mov    edi,esi
c000a405:	c1 ff 1f             	sar    edi,0x1f
c000a408:	57                   	push   edi
c000a409:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a40d:	56                   	push   esi
c000a40e:	c1 e0 0a             	shl    eax,0xa
c000a411:	52                   	push   edx
c000a412:	50                   	push   eax
c000a413:	e8 4c 5f 01 00       	call   c0020364 <__udivdi3>
c000a418:	eb 62                	jmp    c000a47c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a41a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000a421:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000a428:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000a42f:	89 cf                	mov    edi,ecx
c000a431:	83 e2 7f             	and    edx,0x7f
c000a434:	83 e7 7f             	and    edi,0x7f
c000a437:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000a43a:	83 e0 7f             	and    eax,0x7f
c000a43d:	8d 14 01             	lea    edx,[ecx+eax*1]
c000a440:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000a447:	83 e0 7f             	and    eax,0x7f
c000a44a:	01 d0                	add    eax,edx
c000a44c:	84 c0                	test   al,al
c000a44e:	89 c5                	mov    ebp,eax
c000a450:	74 41                	je     c000a493 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000a452:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a458:	83 ec 10             	sub    esp,0x10
c000a45b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a461:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a467:	89 f7                	mov    edi,esi
c000a469:	c1 ff 1f             	sar    edi,0x1f
c000a46c:	57                   	push   edi
c000a46d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a471:	56                   	push   esi
c000a472:	c1 e0 0a             	shl    eax,0xa
c000a475:	52                   	push   edx
c000a476:	50                   	push   eax
c000a477:	e8 e8 5e 01 00       	call   c0020364 <__udivdi3>
c000a47c:	83 c4 14             	add    esp,0x14
c000a47f:	52                   	push   edx
c000a480:	50                   	push   eax
c000a481:	6a 00                	push   0x0
c000a483:	6a 00                	push   0x0
c000a485:	53                   	push   ebx
c000a486:	e8 4b fe ff ff       	call   c000a2d6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a48b:	83 c4 20             	add    esp,0x20
c000a48e:	e9 73 01 00 00       	jmp    c000a606 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000a493:	89 f0                	mov    eax,esi
c000a495:	31 c9                	xor    ecx,ecx
c000a497:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000a49e:	75 02                	jne    c000a4a2 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000a4a0:	89 cd                	mov    ebp,ecx
c000a4a2:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000a4aa:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000a4b1:	83 c0 10             	add    eax,0x10
c000a4b4:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000a4bc:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000a4c3:	c1 e2 08             	shl    edx,0x8
c000a4c6:	c1 e6 10             	shl    esi,0x10
c000a4c9:	09 f2                	or     edx,esi
c000a4cb:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000a4d2:	09 f2                	or     edx,esi
c000a4d4:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000a4db:	c1 e6 18             	shl    esi,0x18
c000a4de:	09 f2                	or     edx,esi
c000a4e0:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000a4e7:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000a4eb:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000a4f2:	c1 e6 10             	shl    esi,0x10
c000a4f5:	c1 e2 08             	shl    edx,0x8
c000a4f8:	09 f2                	or     edx,esi
c000a4fa:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000a501:	09 f2                	or     edx,esi
c000a503:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000a50a:	c1 e6 18             	shl    esi,0x18
c000a50d:	09 f2                	or     edx,esi
c000a50f:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000a513:	41                   	inc    ecx
c000a514:	83 f9 04             	cmp    ecx,0x4
c000a517:	0f 85 7a ff ff ff    	jne    c000a497 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000a51d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a521:	83 f0 01             	xor    eax,0x1
c000a524:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000a528:	75 4f                	jne    c000a579 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a52a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a52e:	83 f0 01             	xor    eax,0x1
c000a531:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000a535:	75 42                	jne    c000a579 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a537:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a53d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000a545:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a54b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a553:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a559:	89 f7                	mov    edi,esi
c000a55b:	c1 ff 1f             	sar    edi,0x1f
c000a55e:	57                   	push   edi
c000a55f:	56                   	push   esi
c000a560:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a564:	52                   	push   edx
c000a565:	c1 e0 0a             	shl    eax,0xa
c000a568:	50                   	push   eax
c000a569:	e8 f6 5d 01 00       	call   c0020364 <__udivdi3>
c000a56e:	83 c4 10             	add    esp,0x10
c000a571:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a575:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a579:	89 e8                	mov    eax,ebp
c000a57b:	0f b6 e8             	movzx  ebp,al
c000a57e:	85 ed                	test   ebp,ebp
c000a580:	74 50                	je     c000a5d2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000a582:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a586:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a58a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a58e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000a592:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a596:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a59a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a59e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a5a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a5aa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a5b2:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000a5b6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a5ba:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000a5be:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a5c2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000a5c6:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000a5ca:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000a5ce:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000a5d2:	31 ed                	xor    ebp,ebp
c000a5d4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a5d8:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a5dc:	89 f8                	mov    eax,edi
c000a5de:	09 f0                	or     eax,esi
c000a5e0:	74 1e                	je     c000a600 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5e2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a5e6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a5ea:	89 d1                	mov    ecx,edx
c000a5ec:	09 c1                	or     ecx,eax
c000a5ee:	74 10                	je     c000a600 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5f0:	83 ec 0c             	sub    esp,0xc
c000a5f3:	57                   	push   edi
c000a5f4:	56                   	push   esi
c000a5f5:	52                   	push   edx
c000a5f6:	50                   	push   eax
c000a5f7:	53                   	push   ebx
c000a5f8:	e8 d9 fc ff ff       	call   c000a2d6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a5fd:	83 c4 20             	add    esp,0x20
c000a600:	45                   	inc    ebp
c000a601:	83 fd 04             	cmp    ebp,0x4
c000a604:	75 ce                	jne    c000a5d4 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000a606:	81 c4 5c 02 00 00    	add    esp,0x25c
c000a60c:	5b                   	pop    ebx
c000a60d:	5e                   	pop    esi
c000a60e:	5f                   	pop    edi
c000a60f:	5d                   	pop    ebp
c000a610:	c3                   	ret    
c000a611:	66 90                	xchg   ax,ax
c000a613:	90                   	nop

c000a614 <Serial::Serial(char const*)>:
c000a614:	83 ec 0c             	sub    esp,0xc
c000a617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a61b:	83 ec 08             	sub    esp,0x8
c000a61e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a622:	50                   	push   eax
c000a623:	e8 cc eb ff ff       	call   c00091f4 <Device::Device(char const*)>
c000a628:	83 c4 10             	add    esp,0x10
c000a62b:	ba 34 21 02 c0       	mov    edx,0xc0022134
c000a630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a634:	89 10                	mov    DWORD PTR [eax],edx
c000a636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a63a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000a644:	90                   	nop
c000a645:	83 c4 0c             	add    esp,0xc
c000a648:	c3                   	ret    
c000a649:	90                   	nop
c000a64a:	66 90                	xchg   ax,ax

c000a64c <Serial::~Serial()>:
c000a64c:	83 ec 0c             	sub    esp,0xc
c000a64f:	ba 34 21 02 c0       	mov    edx,0xc0022134
c000a654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a658:	89 10                	mov    DWORD PTR [eax],edx
c000a65a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a65e:	83 ec 0c             	sub    esp,0xc
c000a661:	50                   	push   eax
c000a662:	e8 2d e9 ff ff       	call   c0008f94 <Device::~Device()>
c000a667:	83 c4 10             	add    esp,0x10
c000a66a:	90                   	nop
c000a66b:	83 c4 0c             	add    esp,0xc
c000a66e:	c3                   	ret    
c000a66f:	90                   	nop

c000a670 <Serial::~Serial()>:
c000a670:	83 ec 0c             	sub    esp,0xc
c000a673:	83 ec 0c             	sub    esp,0xc
c000a676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a67a:	e8 cd ff ff ff       	call   c000a64c <Serial::~Serial()>
c000a67f:	83 c4 10             	add    esp,0x10
c000a682:	83 ec 08             	sub    esp,0x8
c000a685:	68 58 01 00 00       	push   0x158
c000a68a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a68e:	e8 74 21 00 00       	call   c000c807 <operator delete(void*, unsigned long)>
c000a693:	83 c4 10             	add    esp,0x10
c000a696:	83 c4 0c             	add    esp,0xc
c000a699:	c3                   	ret    
c000a69a:	66 90                	xchg   ax,ax

c000a69c <Timer::Timer(char const*)>:
c000a69c:	83 ec 0c             	sub    esp,0xc
c000a69f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6a3:	83 ec 08             	sub    esp,0x8
c000a6a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6aa:	50                   	push   eax
c000a6ab:	e8 44 eb ff ff       	call   c00091f4 <Device::Device(char const*)>
c000a6b0:	83 c4 10             	add    esp,0x10
c000a6b3:	ba ec 21 02 c0       	mov    edx,0xc00221ec
c000a6b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6bc:	89 10                	mov    DWORD PTR [eax],edx
c000a6be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6c2:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000a6cc:	90                   	nop
c000a6cd:	83 c4 0c             	add    esp,0xc
c000a6d0:	c3                   	ret    
c000a6d1:	90                   	nop
c000a6d2:	66 90                	xchg   ax,ax

c000a6d4 <Timer::~Timer()>:
c000a6d4:	83 ec 0c             	sub    esp,0xc
c000a6d7:	ba ec 21 02 c0       	mov    edx,0xc00221ec
c000a6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6e0:	89 10                	mov    DWORD PTR [eax],edx
c000a6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6e6:	83 ec 0c             	sub    esp,0xc
c000a6e9:	50                   	push   eax
c000a6ea:	e8 a5 e8 ff ff       	call   c0008f94 <Device::~Device()>
c000a6ef:	83 c4 10             	add    esp,0x10
c000a6f2:	90                   	nop
c000a6f3:	83 c4 0c             	add    esp,0xc
c000a6f6:	c3                   	ret    
c000a6f7:	90                   	nop

c000a6f8 <Timer::~Timer()>:
c000a6f8:	83 ec 0c             	sub    esp,0xc
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a702:	e8 cd ff ff ff       	call   c000a6d4 <Timer::~Timer()>
c000a707:	83 c4 10             	add    esp,0x10
c000a70a:	83 ec 08             	sub    esp,0x8
c000a70d:	68 5c 01 00 00       	push   0x15c
c000a712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a716:	e8 ec 20 00 00       	call   c000c807 <operator delete(void*, unsigned long)>
c000a71b:	83 c4 10             	add    esp,0x10
c000a71e:	83 c4 0c             	add    esp,0xc
c000a721:	c3                   	ret    

c000a722 <Timer::read()>:
c000a722:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a726:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a72c:	c3                   	ret    

c000a72d <setupTimer(int)>:
c000a72d:	53                   	push   ebx
c000a72e:	83 ec 14             	sub    esp,0x14
c000a731:	68 5c 01 00 00       	push   0x15c
c000a736:	e8 51 43 00 00       	call   c000ea8c <malloc>
c000a73b:	89 04 24             	mov    DWORD PTR [esp],eax
c000a73e:	89 c3                	mov    ebx,eax
c000a740:	e8 a7 54 01 00       	call   c001fbec <PIT::PIT()>
c000a745:	58                   	pop    eax
c000a746:	5a                   	pop    edx
c000a747:	53                   	push   ebx
c000a748:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c000a74e:	e8 3f e9 ff ff       	call   c0009092 <Device::addChild(Device*)>
c000a753:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a755:	6a 00                	push   0x0
c000a757:	6a 00                	push   0x0
c000a759:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a75d:	53                   	push   ebx
c000a75e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a761:	83 c4 28             	add    esp,0x28
c000a764:	89 d8                	mov    eax,ebx
c000a766:	5b                   	pop    ebx
c000a767:	c3                   	ret    

c000a768 <timerHandler(unsigned int)>:
c000a768:	57                   	push   edi
c000a769:	56                   	push   esi
c000a76a:	53                   	push   ebx
c000a76b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a76f:	83 ec 0c             	sub    esp,0xc
c000a772:	68 c3 21 02 c0       	push   0xc00221c3
c000a777:	01 35 ec a7 02 c0    	add    DWORD PTR ds:0xc002a7ec,esi
c000a77d:	e8 cc c7 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	80 3d 75 ad 02 c0 00 	cmp    BYTE PTR ds:0xc002ad75,0x0
c000a78c:	75 12                	jne    c000a7a0 <timerHandler(unsigned int)+0x38>
c000a78e:	c7 44 24 10 cb 21 02 c0 	mov    DWORD PTR [esp+0x10],0xc00221cb
c000a796:	5b                   	pop    ebx
c000a797:	5e                   	pop    esi
c000a798:	5f                   	pop    edi
c000a799:	e9 b0 c7 ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c000a79e:	66 90                	xchg   ax,ax
c000a7a0:	fa                   	cli    
c000a7a1:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c000a7a7:	83 ec 0c             	sub    esp,0xc
c000a7aa:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a7af:	e8 48 5f 01 00       	call   c00206fc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a7b4:	83 c4 10             	add    esp,0x10
c000a7b7:	84 c0                	test   al,al
c000a7b9:	0f 85 a1 00 00 00    	jne    c000a860 <timerHandler(unsigned int)+0xf8>
c000a7bf:	83 ec 0c             	sub    esp,0xc
c000a7c2:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a7c7:	e8 4c 5f 01 00       	call   c0020718 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7cc:	83 c4 10             	add    esp,0x10
c000a7cf:	89 c7                	mov    edi,eax
c000a7d1:	8d 76 00             	lea    esi,[esi+0x0]
c000a7d4:	83 ec 0c             	sub    esp,0xc
c000a7d7:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a7dc:	e8 37 5f 01 00       	call   c0020718 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7e1:	c7 04 24 c0 d6 02 c0 	mov    DWORD PTR [esp],0xc002d6c0
c000a7e8:	89 c3                	mov    ebx,eax
c000a7ea:	e8 31 5f 01 00       	call   c0020720 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000a7ef:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000a7f2:	83 c4 10             	add    esp,0x10
c000a7f5:	3b 05 ec a7 02 c0    	cmp    eax,DWORD PTR ds:0xc002a7ec
c000a7fb:	77 23                	ja     c000a820 <timerHandler(unsigned int)+0xb8>
c000a7fd:	83 ec 0c             	sub    esp,0xc
c000a800:	53                   	push   ebx
c000a801:	e8 f2 b4 00 00       	call   c0015cf8 <unblockTask(ThreadControlBlock*)>
c000a806:	83 c4 10             	add    esp,0x10
c000a809:	39 df                	cmp    edi,ebx
c000a80b:	75 27                	jne    c000a834 <timerHandler(unsigned int)+0xcc>
c000a80d:	83 ec 0c             	sub    esp,0xc
c000a810:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a815:	e8 fe 5e 01 00       	call   c0020718 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a81a:	89 c7                	mov    edi,eax
c000a81c:	eb 12                	jmp    c000a830 <timerHandler(unsigned int)+0xc8>
c000a81e:	66 90                	xchg   ax,ax
c000a820:	50                   	push   eax
c000a821:	50                   	push   eax
c000a822:	53                   	push   ebx
c000a823:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a828:	e8 af 5f 01 00       	call   c00207dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000a82d:	8d 76 00             	lea    esi,[esi+0x0]
c000a830:	83 c4 10             	add    esp,0x10
c000a833:	90                   	nop
c000a834:	83 ec 0c             	sub    esp,0xc
c000a837:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a83c:	e8 bb 5e 01 00       	call   c00206fc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a841:	83 c4 10             	add    esp,0x10
c000a844:	84 c0                	test   al,al
c000a846:	75 18                	jne    c000a860 <timerHandler(unsigned int)+0xf8>
c000a848:	83 ec 0c             	sub    esp,0xc
c000a84b:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a850:	e8 c3 5e 01 00       	call   c0020718 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a855:	83 c4 10             	add    esp,0x10
c000a858:	39 f8                	cmp    eax,edi
c000a85a:	0f 85 74 ff ff ff    	jne    c000a7d4 <timerHandler(unsigned int)+0x6c>
c000a860:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000a866:	8b 42 34             	mov    eax,DWORD PTR [edx+0x34]
c000a869:	85 c0                	test   eax,eax
c000a86b:	74 1b                	je     c000a888 <timerHandler(unsigned int)+0x120>
c000a86d:	80 3d 74 ad 02 c0 00 	cmp    BYTE PTR ds:0xc002ad74,0x0
c000a874:	74 12                	je     c000a888 <timerHandler(unsigned int)+0x120>
c000a876:	89 c1                	mov    ecx,eax
c000a878:	29 f1                	sub    ecx,esi
c000a87a:	39 f0                	cmp    eax,esi
c000a87c:	89 4a 34             	mov    DWORD PTR [edx+0x34],ecx
c000a87f:	77 07                	ja     c000a888 <timerHandler(unsigned int)+0x120>
c000a881:	e8 72 b1 00 00       	call   c00159f8 <schedule()>
c000a886:	66 90                	xchg   ax,ax
c000a888:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000a88f:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000a896:	75 04                	jne    c000a89c <timerHandler(unsigned int)+0x134>
c000a898:	fb                   	sti    
c000a899:	8d 76 00             	lea    esi,[esi+0x0]
c000a89c:	5b                   	pop    ebx
c000a89d:	5e                   	pop    esi
c000a89e:	5f                   	pop    edi
c000a89f:	c3                   	ret    

c000a8a0 <VCache::VCache(PhysicalDisk*)>:
c000a8a0:	53                   	push   ebx
c000a8a1:	83 ec 18             	sub    esp,0x18
c000a8a4:	ba 5c 22 02 c0       	mov    edx,0xc002225c
c000a8a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8ad:	89 10                	mov    DWORD PTR [eax],edx
c000a8af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8b3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000a8ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8be:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000a8c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8c9:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000a8d0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000a8d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8db:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000a8e2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000a8e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8ed:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000a8f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8f8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000a8fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a900:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000a907:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000a90e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a912:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a916:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a91a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000a91e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a922:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000a926:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a92a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000a931:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000a939:	83 ec 0c             	sub    esp,0xc
c000a93c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a940:	e8 47 41 00 00       	call   c000ea8c <malloc>
c000a945:	83 c4 10             	add    esp,0x10
c000a948:	89 c3                	mov    ebx,eax
c000a94a:	83 ec 0c             	sub    esp,0xc
c000a94d:	53                   	push   ebx
c000a94e:	e8 65 44 00 00       	call   c000edb8 <Mutex::Mutex()>
c000a953:	83 c4 10             	add    esp,0x10
c000a956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a95a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000a95d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a961:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000a965:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000a968:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a96c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000a973:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a977:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000a97d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a981:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a984:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a988:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000a98e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a994:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a998:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000a99b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000a99e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9a2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a9a6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9aa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000a9b0:	05 00 01 00 00       	add    eax,0x100
c000a9b5:	c1 e0 04             	shl    eax,0x4
c000a9b8:	83 ec 0c             	sub    esp,0xc
c000a9bb:	50                   	push   eax
c000a9bc:	e8 cb 40 00 00       	call   c000ea8c <malloc>
c000a9c1:	83 c4 10             	add    esp,0x10
c000a9c4:	89 c2                	mov    edx,eax
c000a9c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9ca:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a9cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9d1:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000a9d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9dc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000a9e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9e4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000a9ea:	89 d0                	mov    eax,edx
c000a9ec:	c1 e0 02             	shl    eax,0x2
c000a9ef:	01 d0                	add    eax,edx
c000a9f1:	c1 e0 04             	shl    eax,0x4
c000a9f4:	83 ec 0c             	sub    esp,0xc
c000a9f7:	50                   	push   eax
c000a9f8:	e8 8f 40 00 00       	call   c000ea8c <malloc>
c000a9fd:	83 c4 10             	add    esp,0x10
c000aa00:	89 c2                	mov    edx,eax
c000aa02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa06:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000aa09:	90                   	nop
c000aa0a:	83 c4 18             	add    esp,0x18
c000aa0d:	5b                   	pop    ebx
c000aa0e:	c3                   	ret    
c000aa0f:	90                   	nop

c000aa10 <VCache::invalidateReadBuffer()>:
c000aa10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa14:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000aa1a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000aa1e:	c3                   	ret    
c000aa1f:	90                   	nop

c000aa20 <VCache::writeWriteBuffer()>:
c000aa20:	53                   	push   ebx
c000aa21:	83 ec 08             	sub    esp,0x8
c000aa24:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aa28:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000aa2c:	74 1e                	je     c000aa4c <VCache::writeWriteBuffer()+0x2c>
c000aa2e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000aa31:	83 ec 0c             	sub    esp,0xc
c000aa34:	8b 10                	mov    edx,DWORD PTR [eax]
c000aa36:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000aa39:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000aa3c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000aa3f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000aa42:	50                   	push   eax
c000aa43:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000aa46:	83 c4 20             	add    esp,0x20
c000aa49:	8d 76 00             	lea    esi,[esi+0x0]
c000aa4c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000aa53:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000aa5a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000aa5e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000aa65:	83 c4 08             	add    esp,0x8
c000aa68:	5b                   	pop    ebx
c000aa69:	c3                   	ret    
c000aa6a:	66 90                	xchg   ax,ax

c000aa6c <VCache::~VCache()>:
c000aa6c:	83 ec 0c             	sub    esp,0xc
c000aa6f:	ba 5c 22 02 c0       	mov    edx,0xc002225c
c000aa74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa78:	89 10                	mov    DWORD PTR [eax],edx
c000aa7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa7e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000aa81:	0f b6 c0             	movzx  eax,al
c000aa84:	85 c0                	test   eax,eax
c000aa86:	74 10                	je     c000aa98 <VCache::~VCache()+0x2c>
c000aa88:	83 ec 0c             	sub    esp,0xc
c000aa8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa8f:	e8 8c ff ff ff       	call   c000aa20 <VCache::writeWriteBuffer()>
c000aa94:	83 c4 10             	add    esp,0x10
c000aa97:	90                   	nop
c000aa98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa9c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000aa9f:	83 ec 0c             	sub    esp,0xc
c000aaa2:	50                   	push   eax
c000aaa3:	e8 f4 3f 00 00       	call   c000ea9c <free>
c000aaa8:	83 c4 10             	add    esp,0x10
c000aaab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaaf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000aab2:	83 ec 0c             	sub    esp,0xc
c000aab5:	50                   	push   eax
c000aab6:	e8 e1 3f 00 00       	call   c000ea9c <free>
c000aabb:	83 c4 10             	add    esp,0x10
c000aabe:	90                   	nop
c000aabf:	83 c4 0c             	add    esp,0xc
c000aac2:	c3                   	ret    
c000aac3:	90                   	nop

c000aac4 <VCache::~VCache()>:
c000aac4:	83 ec 0c             	sub    esp,0xc
c000aac7:	83 ec 0c             	sub    esp,0xc
c000aaca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aace:	e8 99 ff ff ff       	call   c000aa6c <VCache::~VCache()>
c000aad3:	83 c4 10             	add    esp,0x10
c000aad6:	83 ec 08             	sub    esp,0x8
c000aad9:	6a 44                	push   0x44
c000aadb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aadf:	e8 23 1d 00 00       	call   c000c807 <operator delete(void*, unsigned long)>
c000aae4:	83 c4 10             	add    esp,0x10
c000aae7:	83 c4 0c             	add    esp,0xc
c000aaea:	c3                   	ret    
c000aaeb:	90                   	nop

c000aaec <VCache::write(unsigned long long, int, void*)>:
c000aaec:	55                   	push   ebp
c000aaed:	57                   	push   edi
c000aaee:	56                   	push   esi
c000aaef:	53                   	push   ebx
c000aaf0:	83 ec 1c             	sub    esp,0x1c
c000aaf3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000aaf7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000aafb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000aaff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ab03:	e8 50 ac 00 00       	call   c0015758 <KeDisablePreemption()>
c000ab08:	b9 00 10 00 00       	mov    ecx,0x1000
c000ab0d:	50                   	push   eax
c000ab0e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ab11:	0f af c3             	imul   eax,ebx
c000ab14:	05 ff 0f 00 00       	add    eax,0xfff
c000ab19:	99                   	cdq    
c000ab1a:	f7 f9                	idiv   ecx
c000ab1c:	50                   	push   eax
c000ab1d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ab21:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000ab27:	e8 bc 83 00 00       	call   c0012ee8 <VAS::canLockPages(unsigned long, int)>
c000ab2c:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000ab30:	83 c4 10             	add    esp,0x10
c000ab33:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000ab38:	74 2a                	je     c000ab64 <VCache::write(unsigned long long, int, void*)+0x78>
c000ab3a:	50                   	push   eax
c000ab3b:	b9 00 10 00 00       	mov    ecx,0x1000
c000ab40:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ab43:	0f af c3             	imul   eax,ebx
c000ab46:	05 ff 0f 00 00       	add    eax,0xfff
c000ab4b:	99                   	cdq    
c000ab4c:	f7 f9                	idiv   ecx
c000ab4e:	50                   	push   eax
c000ab4f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ab53:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000ab59:	e8 84 87 00 00       	call   c00132e2 <VAS::lockPages(unsigned long, int)>
c000ab5e:	83 c4 10             	add    esp,0x10
c000ab61:	8d 76 00             	lea    esi,[esi+0x0]
c000ab64:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000ab68:	74 0e                	je     c000ab78 <VCache::write(unsigned long long, int, void*)+0x8c>
c000ab6a:	83 ec 0c             	sub    esp,0xc
c000ab6d:	55                   	push   ebp
c000ab6e:	e8 9d fe ff ff       	call   c000aa10 <VCache::invalidateReadBuffer()>
c000ab73:	83 c4 10             	add    esp,0x10
c000ab76:	66 90                	xchg   ax,ax
c000ab78:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000ab7c:	74 72                	je     c000abf0 <VCache::write(unsigned long long, int, void*)+0x104>
c000ab7e:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000ab81:	89 c8                	mov    eax,ecx
c000ab83:	99                   	cdq    
c000ab84:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000ab87:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000ab8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ab92:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ab9a:	31 f0                	xor    eax,esi
c000ab9c:	31 fa                	xor    edx,edi
c000ab9e:	09 d0                	or     eax,edx
c000aba0:	75 42                	jne    c000abe4 <VCache::write(unsigned long long, int, void*)+0xf8>
c000aba2:	83 fb 01             	cmp    ebx,0x1
c000aba5:	75 3d                	jne    c000abe4 <VCache::write(unsigned long long, int, void*)+0xf8>
c000aba7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000abaa:	89 cf                	mov    edi,ecx
c000abac:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000abb0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000abb6:	0f af f8             	imul   edi,eax
c000abb9:	89 c1                	mov    ecx,eax
c000abbb:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000abbe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000abc0:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000abc3:	40                   	inc    eax
c000abc4:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000abc7:	83 f8 50             	cmp    eax,0x50
c000abca:	0f 85 a8 00 00 00    	jne    c000ac78 <VCache::write(unsigned long long, int, void*)+0x18c>
c000abd0:	83 ec 0c             	sub    esp,0xc
c000abd3:	55                   	push   ebp
c000abd4:	e8 47 fe ff ff       	call   c000aa20 <VCache::writeWriteBuffer()>
c000abd9:	83 c4 10             	add    esp,0x10
c000abdc:	e9 97 00 00 00       	jmp    c000ac78 <VCache::write(unsigned long long, int, void*)+0x18c>
c000abe1:	8d 76 00             	lea    esi,[esi+0x0]
c000abe4:	83 ec 0c             	sub    esp,0xc
c000abe7:	55                   	push   ebp
c000abe8:	e8 33 fe ff ff       	call   c000aa20 <VCache::writeWriteBuffer()>
c000abed:	83 c4 10             	add    esp,0x10
c000abf0:	83 fb 4f             	cmp    ebx,0x4f
c000abf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000abf6:	7f 20                	jg     c000ac18 <VCache::write(unsigned long long, int, void*)+0x12c>
c000abf8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000abfb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000abff:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000ac02:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000ac05:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000ac08:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000ac0c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ac12:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ac14:	eb 62                	jmp    c000ac78 <VCache::write(unsigned long long, int, void*)+0x18c>
c000ac16:	66 90                	xchg   ax,ax
c000ac18:	83 ec 0c             	sub    esp,0xc
c000ac1b:	8b 10                	mov    edx,DWORD PTR [eax]
c000ac1d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac21:	53                   	push   ebx
c000ac22:	57                   	push   edi
c000ac23:	56                   	push   esi
c000ac24:	50                   	push   eax
c000ac25:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000ac28:	83 c4 20             	add    esp,0x20
c000ac2b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000ac30:	89 c6                	mov    esi,eax
c000ac32:	74 28                	je     c000ac5c <VCache::write(unsigned long long, int, void*)+0x170>
c000ac34:	52                   	push   edx
c000ac35:	b9 00 10 00 00       	mov    ecx,0x1000
c000ac3a:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000ac3e:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000ac44:	99                   	cdq    
c000ac45:	f7 f9                	idiv   ecx
c000ac47:	50                   	push   eax
c000ac48:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ac4c:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000ac52:	e8 cd 82 00 00       	call   c0012f24 <VAS::unlockPages(unsigned long, int)>
c000ac57:	83 c4 10             	add    esp,0x10
c000ac5a:	66 90                	xchg   ax,ax
c000ac5c:	e8 1f ab 00 00       	call   c0015780 <KeRestorePreemption()>
c000ac61:	85 f6                	test   esi,esi
c000ac63:	74 4b                	je     c000acb0 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000ac65:	83 ec 0c             	sub    esp,0xc
c000ac68:	68 14 22 02 c0       	push   0xc0022214
c000ac6d:	e8 dc c2 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ac72:	83 c4 10             	add    esp,0x10
c000ac75:	eb 39                	jmp    c000acb0 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000ac77:	90                   	nop
c000ac78:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000ac7d:	74 29                	je     c000aca8 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000ac7f:	50                   	push   eax
c000ac80:	b9 00 10 00 00       	mov    ecx,0x1000
c000ac85:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000ac89:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000ac8f:	99                   	cdq    
c000ac90:	f7 f9                	idiv   ecx
c000ac92:	50                   	push   eax
c000ac93:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ac97:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000ac9d:	e8 82 82 00 00       	call   c0012f24 <VAS::unlockPages(unsigned long, int)>
c000aca2:	83 c4 10             	add    esp,0x10
c000aca5:	8d 76 00             	lea    esi,[esi+0x0]
c000aca8:	e8 d3 aa 00 00       	call   c0015780 <KeRestorePreemption()>
c000acad:	31 f6                	xor    esi,esi
c000acaf:	90                   	nop
c000acb0:	83 c4 1c             	add    esp,0x1c
c000acb3:	89 f0                	mov    eax,esi
c000acb5:	5b                   	pop    ebx
c000acb6:	5e                   	pop    esi
c000acb7:	5f                   	pop    edi
c000acb8:	5d                   	pop    ebp
c000acb9:	c3                   	ret    

c000acba <VCache::read(unsigned long long, int, void*)>:
c000acba:	55                   	push   ebp
c000acbb:	bd 00 10 00 00       	mov    ebp,0x1000
c000acc0:	57                   	push   edi
c000acc1:	56                   	push   esi
c000acc2:	53                   	push   ebx
c000acc3:	83 ec 2c             	sub    esp,0x2c
c000acc6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000acca:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000acce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000acd2:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000acd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acde:	e8 75 aa 00 00       	call   c0015758 <KeDisablePreemption()>
c000ace3:	50                   	push   eax
c000ace4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000ace7:	0f af c6             	imul   eax,esi
c000acea:	05 ff 0f 00 00       	add    eax,0xfff
c000acef:	99                   	cdq    
c000acf0:	f7 fd                	idiv   ebp
c000acf2:	50                   	push   eax
c000acf3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000acf7:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000acfd:	e8 e6 81 00 00       	call   c0012ee8 <VAS::canLockPages(unsigned long, int)>
c000ad02:	83 c4 10             	add    esp,0x10
c000ad05:	84 c0                	test   al,al
c000ad07:	89 c7                	mov    edi,eax
c000ad09:	74 25                	je     c000ad30 <VCache::read(unsigned long long, int, void*)+0x76>
c000ad0b:	50                   	push   eax
c000ad0c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000ad0f:	0f af c6             	imul   eax,esi
c000ad12:	05 ff 0f 00 00       	add    eax,0xfff
c000ad17:	99                   	cdq    
c000ad18:	f7 fd                	idiv   ebp
c000ad1a:	50                   	push   eax
c000ad1b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000ad1f:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000ad25:	e8 b8 85 00 00       	call   c00132e2 <VAS::lockPages(unsigned long, int)>
c000ad2a:	83 c4 10             	add    esp,0x10
c000ad2d:	8d 76 00             	lea    esi,[esi+0x0]
c000ad30:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ad34:	74 0e                	je     c000ad44 <VCache::read(unsigned long long, int, void*)+0x8a>
c000ad36:	83 ec 0c             	sub    esp,0xc
c000ad39:	53                   	push   ebx
c000ad3a:	e8 e1 fc ff ff       	call   c000aa20 <VCache::writeWriteBuffer()>
c000ad3f:	83 c4 10             	add    esp,0x10
c000ad42:	66 90                	xchg   ax,ax
c000ad44:	83 fe 01             	cmp    esi,0x1
c000ad47:	0f 85 fb 00 00 00    	jne    c000ae48 <VCache::read(unsigned long long, int, void*)+0x18e>
c000ad4d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ad50:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000ad57:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ad5b:	0f 85 e7 00 00 00    	jne    c000ae48 <VCache::read(unsigned long long, int, void*)+0x18e>
c000ad61:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000ad64:	89 ee                	mov    esi,ebp
c000ad66:	f7 de                	neg    esi
c000ad68:	89 f0                	mov    eax,esi
c000ad6a:	c1 f8 1f             	sar    eax,0x1f
c000ad6d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ad71:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ad75:	23 4c 24 0c          	and    ecx,DWORD PTR [esp+0xc]
c000ad79:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000ad7d:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ad81:	89 ca                	mov    edx,ecx
c000ad83:	89 f9                	mov    ecx,edi
c000ad85:	0f b6 f9             	movzx  edi,cl
c000ad88:	89 f0                	mov    eax,esi
c000ad8a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000ad8e:	74 0c                	je     c000ad9c <VCache::read(unsigned long long, int, void*)+0xe2>
c000ad90:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000ad93:	75 07                	jne    c000ad9c <VCache::read(unsigned long long, int, void*)+0xe2>
c000ad95:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c000ad98:	74 56                	je     c000adf0 <VCache::read(unsigned long long, int, void*)+0x136>
c000ad9a:	66 90                	xchg   ax,ax
c000ad9c:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000ada0:	83 ec 0c             	sub    esp,0xc
c000ada3:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000ada6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000adaa:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000adad:	8b 37                	mov    esi,DWORD PTR [edi]
c000adaf:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000adb2:	55                   	push   ebp
c000adb3:	52                   	push   edx
c000adb4:	50                   	push   eax
c000adb5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000adb9:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000adbc:	83 c4 20             	add    esp,0x20
c000adbf:	85 c0                	test   eax,eax
c000adc1:	89 c5                	mov    ebp,eax
c000adc3:	74 2b                	je     c000adf0 <VCache::read(unsigned long long, int, void*)+0x136>
c000adc5:	83 ec 0c             	sub    esp,0xc
c000adc8:	68 2c 22 02 c0       	push   0xc002222c
c000adcd:	e8 7c c1 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000add2:	83 c4 10             	add    esp,0x10
c000add5:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000adda:	0f 84 bc 00 00 00    	je     c000ae9c <VCache::read(unsigned long long, int, void*)+0x1e2>
c000ade0:	56                   	push   esi
c000ade1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000ade4:	05 ff 0f 00 00       	add    eax,0xfff
c000ade9:	e9 92 00 00 00       	jmp    c000ae80 <VCache::read(unsigned long long, int, void*)+0x1c6>
c000adee:	66 90                	xchg   ax,ax
c000adf0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000adf3:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000adf7:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000adfd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ae00:	8d 70 ff             	lea    esi,[eax-0x1]
c000ae03:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000ae07:	0f af f1             	imul   esi,ecx
c000ae0a:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000ae0d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ae0f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ae14:	74 26                	je     c000ae3c <VCache::read(unsigned long long, int, void*)+0x182>
c000ae16:	51                   	push   ecx
c000ae17:	b9 00 10 00 00       	mov    ecx,0x1000
c000ae1c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000ae1f:	05 ff 0f 00 00       	add    eax,0xfff
c000ae24:	99                   	cdq    
c000ae25:	f7 f9                	idiv   ecx
c000ae27:	50                   	push   eax
c000ae28:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000ae2c:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000ae32:	e8 ed 80 00 00       	call   c0012f24 <VAS::unlockPages(unsigned long, int)>
c000ae37:	83 c4 10             	add    esp,0x10
c000ae3a:	66 90                	xchg   ax,ax
c000ae3c:	e8 3f a9 00 00       	call   c0015780 <KeRestorePreemption()>
c000ae41:	31 ed                	xor    ebp,ebp
c000ae43:	eb 5f                	jmp    c000aea4 <VCache::read(unsigned long long, int, void*)+0x1ea>
c000ae45:	8d 76 00             	lea    esi,[esi+0x0]
c000ae48:	83 ec 0c             	sub    esp,0xc
c000ae4b:	53                   	push   ebx
c000ae4c:	e8 bf fb ff ff       	call   c000aa10 <VCache::invalidateReadBuffer()>
c000ae51:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ae54:	5a                   	pop    edx
c000ae55:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae57:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ae5b:	56                   	push   esi
c000ae5c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ae60:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ae64:	50                   	push   eax
c000ae65:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000ae68:	83 c4 20             	add    esp,0x20
c000ae6b:	89 c5                	mov    ebp,eax
c000ae6d:	89 f8                	mov    eax,edi
c000ae6f:	84 c0                	test   al,al
c000ae71:	74 29                	je     c000ae9c <VCache::read(unsigned long long, int, void*)+0x1e2>
c000ae73:	50                   	push   eax
c000ae74:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000ae78:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000ae7e:	66 90                	xchg   ax,ax
c000ae80:	b9 00 10 00 00       	mov    ecx,0x1000
c000ae85:	99                   	cdq    
c000ae86:	f7 f9                	idiv   ecx
c000ae88:	50                   	push   eax
c000ae89:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000ae8d:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000ae93:	e8 8c 80 00 00       	call   c0012f24 <VAS::unlockPages(unsigned long, int)>
c000ae98:	83 c4 10             	add    esp,0x10
c000ae9b:	90                   	nop
c000ae9c:	e8 df a8 00 00       	call   c0015780 <KeRestorePreemption()>
c000aea1:	8d 76 00             	lea    esi,[esi+0x0]
c000aea4:	83 c4 2c             	add    esp,0x2c
c000aea7:	89 e8                	mov    eax,ebp
c000aea9:	5b                   	pop    ebx
c000aeaa:	5e                   	pop    esi
c000aeab:	5f                   	pop    edi
c000aeac:	5d                   	pop    ebp
c000aead:	c3                   	ret    

c000aeae <Video::putrect(int, int, int, int, unsigned int)>:
c000aeae:	55                   	push   ebp
c000aeaf:	57                   	push   edi
c000aeb0:	56                   	push   esi
c000aeb1:	53                   	push   ebx
c000aeb2:	83 ec 1c             	sub    esp,0x1c
c000aeb5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000aeb9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aebd:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aec1:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000aec5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000aec9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aecd:	01 df                	add    edi,ebx
c000aecf:	39 fb                	cmp    ebx,edi
c000aed1:	7d 1f                	jge    c000aef2 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000aed3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000aed7:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000aedb:	7d 12                	jge    c000aeef <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000aedd:	8b 16                	mov    edx,DWORD PTR [esi]
c000aedf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee3:	53                   	push   ebx
c000aee4:	55                   	push   ebp
c000aee5:	45                   	inc    ebp
c000aee6:	56                   	push   esi
c000aee7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000aeea:	83 c4 10             	add    esp,0x10
c000aeed:	eb e8                	jmp    c000aed7 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000aeef:	43                   	inc    ebx
c000aef0:	eb dd                	jmp    c000aecf <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000aef2:	83 c4 1c             	add    esp,0x1c
c000aef5:	5b                   	pop    ebx
c000aef6:	5e                   	pop    esi
c000aef7:	5f                   	pop    edi
c000aef8:	5d                   	pop    ebp
c000aef9:	c3                   	ret    

c000aefa <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000aefa:	55                   	push   ebp
c000aefb:	57                   	push   edi
c000aefc:	31 ff                	xor    edi,edi
c000aefe:	56                   	push   esi
c000aeff:	53                   	push   ebx
c000af00:	83 ec 1c             	sub    esp,0x1c
c000af03:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000af07:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000af0b:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000af12:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000af17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af1b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000af1f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000af23:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000af26:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000af2a:	01 f9                	add    ecx,edi
c000af2c:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000af30:	7d 2f                	jge    c000af61 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000af32:	31 f6                	xor    esi,esi
c000af34:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000af38:	01 f2                	add    edx,esi
c000af3a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000af3e:	7d 1a                	jge    c000af5a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000af40:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000af43:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000af46:	46                   	inc    esi
c000af47:	51                   	push   ecx
c000af48:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000af4c:	52                   	push   edx
c000af4d:	55                   	push   ebp
c000af4e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000af51:	83 c4 10             	add    esp,0x10
c000af54:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000af58:	eb da                	jmp    c000af34 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000af5a:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000af5e:	47                   	inc    edi
c000af5f:	eb c5                	jmp    c000af26 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000af61:	83 c4 1c             	add    esp,0x1c
c000af64:	5b                   	pop    ebx
c000af65:	5e                   	pop    esi
c000af66:	5f                   	pop    edi
c000af67:	5d                   	pop    ebp
c000af68:	c3                   	ret    
c000af69:	90                   	nop

c000af6a <Video::blit(unsigned int*, int, int, int, int)>:
c000af6a:	55                   	push   ebp
c000af6b:	ba 00 00 00 00       	mov    edx,0x0
c000af70:	57                   	push   edi
c000af71:	56                   	push   esi
c000af72:	53                   	push   ebx
c000af73:	83 ec 1c             	sub    esp,0x1c
c000af76:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000af7a:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000af7e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000af82:	85 c0                	test   eax,eax
c000af84:	0f 49 d0             	cmovns edx,eax
c000af87:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000af8e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000af92:	89 eb                	mov    ebx,ebp
c000af94:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000af98:	01 ea                	add    edx,ebp
c000af9a:	39 da                	cmp    edx,ebx
c000af9c:	7e 54                	jle    c000aff2 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000af9e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000afa4:	7c 4c                	jl     c000aff2 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000afa6:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000afaa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000afae:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000afb2:	01 c1                	add    ecx,eax
c000afb4:	39 f9                	cmp    ecx,edi
c000afb6:	7e 2f                	jle    c000afe7 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000afb8:	83 c2 04             	add    edx,0x4
c000afbb:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000afc1:	7c 21                	jl     c000afe4 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000afc3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000afc7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000afc9:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000afcc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000afd0:	55                   	push   ebp
c000afd1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000afd5:	56                   	push   esi
c000afd6:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000afd9:	83 c4 10             	add    esp,0x10
c000afdc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000afe0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000afe4:	47                   	inc    edi
c000afe5:	eb c7                	jmp    c000afae <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000afe7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000afeb:	43                   	inc    ebx
c000afec:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000aff0:	eb a2                	jmp    c000af94 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000aff2:	83 c4 1c             	add    esp,0x1c
c000aff5:	5b                   	pop    ebx
c000aff6:	5e                   	pop    esi
c000aff7:	5f                   	pop    edi
c000aff8:	5d                   	pop    ebp
c000aff9:	c3                   	ret    

c000affa <Video::clearScreen(unsigned int)>:
c000affa:	57                   	push   edi
c000affb:	56                   	push   esi
c000affc:	53                   	push   ebx
c000affd:	31 db                	xor    ebx,ebx
c000afff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b003:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b009:	7e 1f                	jle    c000b02a <Video::clearScreen(unsigned int)+0x30>
c000b00b:	31 ff                	xor    edi,edi
c000b00d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b013:	7e 12                	jle    c000b027 <Video::clearScreen(unsigned int)+0x2d>
c000b015:	8b 06                	mov    eax,DWORD PTR [esi]
c000b017:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b01b:	53                   	push   ebx
c000b01c:	57                   	push   edi
c000b01d:	47                   	inc    edi
c000b01e:	56                   	push   esi
c000b01f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b022:	83 c4 10             	add    esp,0x10
c000b025:	eb e6                	jmp    c000b00d <Video::clearScreen(unsigned int)+0x13>
c000b027:	43                   	inc    ebx
c000b028:	eb d9                	jmp    c000b003 <Video::clearScreen(unsigned int)+0x9>
c000b02a:	5b                   	pop    ebx
c000b02b:	5e                   	pop    esi
c000b02c:	5f                   	pop    edi
c000b02d:	c3                   	ret    

c000b02e <Video::putpixel(int, int, unsigned int)>:
c000b02e:	c7 44 24 04 64 22 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022264
c000b036:	e9 97 3d 00 00       	jmp    c000edd2 <KePanic(char const*)>
c000b03b:	90                   	nop

c000b03c <Video::readPixelApprox(int, int)>:
c000b03c:	83 ec 18             	sub    esp,0x18
c000b03f:	68 85 22 02 c0       	push   0xc0022285
c000b044:	e8 89 3d 00 00       	call   c000edd2 <KePanic(char const*)>
c000b049:	31 c0                	xor    eax,eax
c000b04b:	83 c4 1c             	add    esp,0x1c
c000b04e:	c3                   	ret    
c000b04f:	90                   	nop

c000b050 <Video::Video(char const*)>:
c000b050:	83 ec 0c             	sub    esp,0xc
c000b053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b057:	83 ec 08             	sub    esp,0x8
c000b05a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b05e:	50                   	push   eax
c000b05f:	e8 90 e1 ff ff       	call   c00091f4 <Device::Device(char const*)>
c000b064:	83 c4 10             	add    esp,0x10
c000b067:	ba 28 23 02 c0       	mov    edx,0xc0022328
c000b06c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b070:	89 10                	mov    DWORD PTR [eax],edx
c000b072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b076:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000b080:	90                   	nop
c000b081:	83 c4 0c             	add    esp,0xc
c000b084:	c3                   	ret    
c000b085:	90                   	nop

c000b086 <Video::~Video()>:
c000b086:	83 ec 0c             	sub    esp,0xc
c000b089:	ba 28 23 02 c0       	mov    edx,0xc0022328
c000b08e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b092:	89 10                	mov    DWORD PTR [eax],edx
c000b094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b098:	83 ec 0c             	sub    esp,0xc
c000b09b:	50                   	push   eax
c000b09c:	e8 f3 de ff ff       	call   c0008f94 <Device::~Device()>
c000b0a1:	83 c4 10             	add    esp,0x10
c000b0a4:	90                   	nop
c000b0a5:	83 c4 0c             	add    esp,0xc
c000b0a8:	c3                   	ret    
c000b0a9:	90                   	nop

c000b0aa <Video::~Video()>:
c000b0aa:	83 ec 0c             	sub    esp,0xc
c000b0ad:	83 ec 0c             	sub    esp,0xc
c000b0b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0b4:	e8 cd ff ff ff       	call   c000b086 <Video::~Video()>
c000b0b9:	83 c4 10             	add    esp,0x10
c000b0bc:	83 ec 08             	sub    esp,0x8
c000b0bf:	68 64 01 00 00       	push   0x164
c000b0c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0c8:	e8 3a 17 00 00       	call   c000c807 <operator delete(void*, unsigned long)>
c000b0cd:	83 c4 10             	add    esp,0x10
c000b0d0:	83 c4 0c             	add    esp,0xc
c000b0d3:	c3                   	ret    

c000b0d4 <Video::isMonochrome()>:
c000b0d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0d8:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000b0de:	c3                   	ret    
c000b0df:	90                   	nop

c000b0e0 <Video::getWidth()>:
c000b0e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0e4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b0ea:	c3                   	ret    
c000b0eb:	90                   	nop

c000b0ec <Video::getHeight()>:
c000b0ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0f0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b0f6:	c3                   	ret    
c000b0f7:	90                   	nop

c000b0f8 <Video::drawCursor(int, int, unsigned int*, int)>:
c000b0f8:	55                   	push   ebp
c000b0f9:	57                   	push   edi
c000b0fa:	56                   	push   esi
c000b0fb:	53                   	push   ebx
c000b0fc:	83 ec 2c             	sub    esp,0x2c
c000b0ff:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b103:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000b107:	83 f8 01             	cmp    eax,0x1
c000b10a:	19 c9                	sbb    ecx,ecx
c000b10c:	31 db                	xor    ebx,ebx
c000b10e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b112:	89 ce                	mov    esi,ecx
c000b114:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000b11c:	f7 d6                	not    esi
c000b11e:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000b124:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000b128:	01 d8                	add    eax,ebx
c000b12a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b12e:	57                   	push   edi
c000b12f:	e8 b8 ff ff ff       	call   c000b0ec <Video::getHeight()>
c000b134:	59                   	pop    ecx
c000b135:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b139:	7e 70                	jle    c000b1ab <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000b13b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000b13f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000b143:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000b146:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b14a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000b14e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000b155:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b159:	89 e8                	mov    eax,ebp
c000b15b:	83 c0 20             	add    eax,0x20
c000b15e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b162:	57                   	push   edi
c000b163:	e8 78 ff ff ff       	call   c000b0e0 <Video::getWidth()>
c000b168:	5a                   	pop    edx
c000b169:	39 c5                	cmp    ebp,eax
c000b16b:	7d 34                	jge    c000b1a1 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000b16d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000b172:	74 05                	je     c000b179 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000b174:	8b 07                	mov    eax,DWORD PTR [edi]
c000b176:	56                   	push   esi
c000b177:	eb 0d                	jmp    c000b186 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000b179:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000b17e:	74 12                	je     c000b192 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000b180:	8b 07                	mov    eax,DWORD PTR [edi]
c000b182:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b186:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b18a:	55                   	push   ebp
c000b18b:	57                   	push   edi
c000b18c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b18f:	83 c4 10             	add    esp,0x10
c000b192:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000b196:	45                   	inc    ebp
c000b197:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000b19b:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000b19f:	75 c1                	jne    c000b162 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000b1a1:	43                   	inc    ebx
c000b1a2:	83 fb 20             	cmp    ebx,0x20
c000b1a5:	0f 85 79 ff ff ff    	jne    c000b124 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000b1ab:	83 c4 2c             	add    esp,0x2c
c000b1ae:	5b                   	pop    ebx
c000b1af:	5e                   	pop    esi
c000b1b0:	5f                   	pop    edi
c000b1b1:	5d                   	pop    ebp
c000b1b2:	c3                   	ret    
c000b1b3:	90                   	nop

c000b1b4 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000b1b4:	55                   	push   ebp
c000b1b5:	57                   	push   edi
c000b1b6:	56                   	push   esi
c000b1b7:	53                   	push   ebx
c000b1b8:	83 ec 48             	sub    esp,0x48
c000b1bb:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000b1bf:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000b1c3:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000b1c7:	c1 e0 08             	shl    eax,0x8
c000b1ca:	01 d0                	add    eax,edx
c000b1cc:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000b1d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d4:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000b1d8:	c1 e0 08             	shl    eax,0x8
c000b1db:	01 d0                	add    eax,edx
c000b1dd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b1e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1e5:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c000b1ea:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b1ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b1f2:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000b1f9:	50                   	push   eax
c000b1fa:	e8 8d 38 00 00       	call   c000ea8c <malloc>
c000b1ff:	83 c4 10             	add    esp,0x10
c000b202:	85 c0                	test   eax,eax
c000b204:	89 c5                	mov    ebp,eax
c000b206:	75 10                	jne    c000b218 <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c000b208:	83 ec 0c             	sub    esp,0xc
c000b20b:	68 b0 22 02 c0       	push   0xc00222b0
c000b210:	e8 bd 3b 00 00       	call   c000edd2 <KePanic(char const*)>
c000b215:	83 c4 10             	add    esp,0x10
c000b218:	52                   	push   edx
c000b219:	bf 12 00 00 00       	mov    edi,0x12
c000b21e:	52                   	push   edx
c000b21f:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b223:	50                   	push   eax
c000b224:	68 c0 22 02 c0       	push   0xc00222c0
c000b229:	e8 20 bd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b22e:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000b231:	83 e0 20             	and    eax,0x20
c000b234:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000b238:	85 c0                	test   eax,eax
c000b23a:	59                   	pop    ecx
c000b23b:	0f 94 c0             	sete   al
c000b23e:	0f b6 c0             	movzx  eax,al
c000b241:	5e                   	pop    esi
c000b242:	50                   	push   eax
c000b243:	68 ca 22 02 c0       	push   0xc00222ca
c000b248:	e8 01 bd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b24d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000b251:	83 c4 10             	add    esp,0x10
c000b254:	85 c0                	test   eax,eax
c000b256:	89 c2                	mov    edx,eax
c000b258:	74 11                	je     c000b26b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c000b25a:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c000b25e:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000b262:	c1 ff 03             	sar    edi,0x3
c000b265:	0f af f9             	imul   edi,ecx
c000b268:	83 c7 12             	add    edi,0x12
c000b26b:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000b270:	74 07                	je     c000b279 <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c000b272:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b277:	75 12                	jne    c000b28b <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c000b279:	83 ec 0c             	sub    esp,0xc
c000b27c:	68 d8 22 02 c0       	push   0xc00222d8
c000b281:	e8 c8 bc ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b286:	e9 aa 02 00 00       	jmp    c000b535 <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c000b28b:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000b28f:	83 f9 02             	cmp    ecx,0x2
c000b292:	74 0e                	je     c000b2a2 <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c000b294:	83 f9 0a             	cmp    ecx,0xa
c000b297:	0f 84 d1 00 00 00    	je     c000b36e <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c000b29d:	e9 7e 02 00 00       	jmp    c000b520 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c000b2a2:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b2a7:	75 0e                	jne    c000b2b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000b2a9:	84 d2                	test   dl,dl
c000b2ab:	75 0a                	jne    c000b2b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000b2ad:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b2b0:	83 e8 18             	sub    eax,0x18
c000b2b3:	a8 f7                	test   al,0xf7
c000b2b5:	74 0d                	je     c000b2c4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c000b2b7:	83 ec 0c             	sub    esp,0xc
c000b2ba:	68 ed 22 02 c0       	push   0xc00222ed
c000b2bf:	e9 64 02 00 00       	jmp    c000b528 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000b2c4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b2cc:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000b2d1:	31 c0                	xor    eax,eax
c000b2d3:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000b2d7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000b2df:	89 c6                	mov    esi,eax
c000b2e1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b2e6:	75 15                	jne    c000b2fd <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000b2e8:	99                   	cdq    
c000b2e9:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000b2ed:	85 d2                	test   edx,edx
c000b2ef:	75 0c                	jne    c000b2fd <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000b2f1:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000b2f5:	29 c6                	sub    esi,eax
c000b2f7:	4e                   	dec    esi
c000b2f8:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c000b2fd:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b301:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b309:	75 0c                	jne    c000b317 <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c000b30b:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c000b310:	c1 e2 18             	shl    edx,0x18
c000b313:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b317:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c000b31c:	8d 46 01             	lea    eax,[esi+0x1]
c000b31f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000b323:	c1 e1 10             	shl    ecx,0x10
c000b326:	89 ca                	mov    edx,ecx
c000b328:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c000b32d:	c1 e1 08             	shl    ecx,0x8
c000b330:	09 d1                	or     ecx,edx
c000b332:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000b336:	09 d1                	or     ecx,edx
c000b338:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000b33c:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c000b340:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000b344:	c1 fa 03             	sar    edx,0x3
c000b347:	01 d7                	add    edi,edx
c000b349:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b34d:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c000b351:	7e 04                	jle    c000b357 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c000b353:	89 c6                	mov    esi,eax
c000b355:	eb 8a                	jmp    c000b2e1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c000b357:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000b35b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b35f:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000b363:	0f 8f 6e ff ff ff    	jg     c000b2d7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c000b369:	e9 ce 01 00 00       	jmp    c000b53c <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000b36e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b373:	75 0e                	jne    c000b383 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000b375:	85 c0                	test   eax,eax
c000b377:	75 0a                	jne    c000b383 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000b379:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b37c:	83 e8 18             	sub    eax,0x18
c000b37f:	a8 f7                	test   al,0xf7
c000b381:	74 0d                	je     c000b390 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c000b383:	83 ec 0c             	sub    esp,0xc
c000b386:	68 fb 22 02 c0       	push   0xc00222fb
c000b38b:	e9 98 01 00 00       	jmp    c000b528 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000b390:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000b398:	31 c9                	xor    ecx,ecx
c000b39a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b3a2:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c000b3a6:	0f 8d 90 01 00 00    	jge    c000b53c <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000b3ac:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b3b0:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c000b3b4:	0f 8e 82 01 00 00    	jle    c000b53c <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000b3ba:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000b3be:	8d 77 01             	lea    esi,[edi+0x1]
c000b3c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b3c5:	83 fa 7f             	cmp    edx,0x7f
c000b3c8:	89 d0                	mov    eax,edx
c000b3ca:	0f 8e a3 00 00 00    	jle    c000b473 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c000b3d0:	83 e0 7f             	and    eax,0x7f
c000b3d3:	31 d2                	xor    edx,edx
c000b3d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b3d9:	40                   	inc    eax
c000b3da:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b3de:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b3e2:	75 08                	jne    c000b3ec <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c000b3e4:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c000b3e9:	c1 e2 18             	shl    edx,0x18
c000b3ec:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c000b3f1:	c1 e0 10             	shl    eax,0x10
c000b3f4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b3f8:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c000b3fd:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000b401:	c1 e0 08             	shl    eax,0x8
c000b404:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000b408:	09 f8                	or     eax,edi
c000b40a:	31 ff                	xor    edi,edi
c000b40c:	09 d0                	or     eax,edx
c000b40e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b412:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000b417:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b41b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b420:	75 1d                	jne    c000b43f <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000b422:	89 c8                	mov    eax,ecx
c000b424:	99                   	cdq    
c000b425:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000b429:	85 d2                	test   edx,edx
c000b42b:	75 12                	jne    c000b43f <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000b42d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b431:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000b435:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000b439:	49                   	dec    ecx
c000b43a:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000b43f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b443:	8d 51 01             	lea    edx,[ecx+0x1]
c000b446:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c000b44a:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000b44e:	8d 47 01             	lea    eax,[edi+0x1]
c000b451:	7e 06                	jle    c000b459 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c000b453:	89 c7                	mov    edi,eax
c000b455:	89 d1                	mov    ecx,edx
c000b457:	eb c2                	jmp    c000b41b <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c000b459:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b45d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b461:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000b465:	c1 f8 03             	sar    eax,0x3
c000b468:	01 c6                	add    esi,eax
c000b46a:	89 d1                	mov    ecx,edx
c000b46c:	89 f7                	mov    edi,esi
c000b46e:	e9 2f ff ff ff       	jmp    c000b3a2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c000b473:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b47b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b47f:	40                   	inc    eax
c000b480:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b484:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000b489:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b48d:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000b492:	75 1d                	jne    c000b4b1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000b494:	89 c8                	mov    eax,ecx
c000b496:	99                   	cdq    
c000b497:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000b49b:	85 d2                	test   edx,edx
c000b49d:	75 12                	jne    c000b4b1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000b49f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b4a3:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000b4a7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000b4ab:	49                   	dec    ecx
c000b4ac:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000b4b1:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b4b5:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000b4bd:	75 0c                	jne    c000b4cb <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c000b4bf:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c000b4c4:	c1 e7 18             	shl    edi,0x18
c000b4c7:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000b4cb:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000b4d0:	8d 51 01             	lea    edx,[ecx+0x1]
c000b4d3:	c1 e0 10             	shl    eax,0x10
c000b4d6:	89 c7                	mov    edi,eax
c000b4d8:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c000b4dd:	c1 e0 08             	shl    eax,0x8
c000b4e0:	09 f8                	or     eax,edi
c000b4e2:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000b4e6:	09 f8                	or     eax,edi
c000b4e8:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000b4ec:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000b4f0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000b4f4:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b4f8:	c1 f8 03             	sar    eax,0x3
c000b4fb:	01 c6                	add    esi,eax
c000b4fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b501:	40                   	inc    eax
c000b502:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c000b506:	7e 0b                	jle    c000b513 <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c000b508:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b50c:	89 d1                	mov    ecx,edx
c000b50e:	e9 7a ff ff ff       	jmp    c000b48d <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c000b513:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000b517:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000b51b:	e9 4a ff ff ff       	jmp    c000b46a <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c000b520:	50                   	push   eax
c000b521:	50                   	push   eax
c000b522:	51                   	push   ecx
c000b523:	68 0a 23 02 c0       	push   0xc002230a
c000b528:	e8 21 ba ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b52d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b530:	e8 67 35 00 00       	call   c000ea9c <free>
c000b535:	83 c4 10             	add    esp,0x10
c000b538:	31 ed                	xor    ebp,ebp
c000b53a:	eb 14                	jmp    c000b550 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c000b53c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b540:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000b544:	89 18                	mov    DWORD PTR [eax],ebx
c000b546:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b54a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000b54e:	89 18                	mov    DWORD PTR [eax],ebx
c000b550:	83 c4 3c             	add    esp,0x3c
c000b553:	89 e8                	mov    eax,ebp
c000b555:	5b                   	pop    ebx
c000b556:	5e                   	pop    esi
c000b557:	5f                   	pop    edi
c000b558:	5d                   	pop    ebp
c000b559:	c3                   	ret    

c000b55a <Video::putTGA(int, int, unsigned char*, int)>:
c000b55a:	55                   	push   ebp
c000b55b:	57                   	push   edi
c000b55c:	56                   	push   esi
c000b55d:	53                   	push   ebx
c000b55e:	83 ec 28             	sub    esp,0x28
c000b561:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b565:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000b569:	50                   	push   eax
c000b56a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b56e:	50                   	push   eax
c000b56f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b573:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b577:	55                   	push   ebp
c000b578:	e8 37 fc ff ff       	call   c000b1b4 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000b57d:	83 c4 20             	add    esp,0x20
c000b580:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b584:	85 c0                	test   eax,eax
c000b586:	74 3b                	je     c000b5c3 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000b588:	89 c6                	mov    esi,eax
c000b58a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b58e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b592:	39 d8                	cmp    eax,ebx
c000b594:	7e 2d                	jle    c000b5c3 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000b596:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b59a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b59e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b5a2:	39 f8                	cmp    eax,edi
c000b5a4:	7e 1a                	jle    c000b5c0 <Video::putTGA(int, int, unsigned char*, int)+0x66>
c000b5a6:	83 c6 04             	add    esi,0x4
c000b5a9:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000b5ac:	85 c0                	test   eax,eax
c000b5ae:	79 0d                	jns    c000b5bd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000b5b0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000b5b3:	50                   	push   eax
c000b5b4:	53                   	push   ebx
c000b5b5:	57                   	push   edi
c000b5b6:	55                   	push   ebp
c000b5b7:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b5ba:	83 c4 10             	add    esp,0x10
c000b5bd:	47                   	inc    edi
c000b5be:	eb da                	jmp    c000b59a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000b5c0:	43                   	inc    ebx
c000b5c1:	eb c7                	jmp    c000b58a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000b5c3:	83 c4 1c             	add    esp,0x1c
c000b5c6:	5b                   	pop    ebx
c000b5c7:	5e                   	pop    esi
c000b5c8:	5f                   	pop    edi
c000b5c9:	5d                   	pop    ebp
c000b5ca:	c3                   	ret    
c000b5cb:	90                   	nop

c000b5cc <ACPI::close(int, int, void*)>:
c000b5cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b5d1:	c3                   	ret    
c000b5d2:	66 90                	xchg   ax,ax

c000b5d4 <loadACPITables(unsigned char*)>:
c000b5d4:	57                   	push   edi
c000b5d5:	56                   	push   esi
c000b5d6:	53                   	push   ebx
c000b5d7:	83 ec 60             	sub    esp,0x60
c000b5da:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000b5df:	0f 84 43 02 00 00    	je     c000b828 <loadACPITables(unsigned char*)+0x254>
c000b5e5:	a0 20 aa 02 c0       	mov    al,ds:0xc002aa20
c000b5ea:	0f b6 c0             	movzx  eax,al
c000b5ed:	85 c0                	test   eax,eax
c000b5ef:	74 7b                	je     c000b66c <loadACPITables(unsigned char*)+0x98>
c000b5f1:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b5f5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000b5f9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b5fd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b600:	83 e8 24             	sub    eax,0x24
c000b603:	c1 e8 03             	shr    eax,0x3
c000b606:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b60a:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000b612:	66 90                	xchg   ax,ax
c000b614:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b618:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000b61c:	0f 8d ba 00 00 00    	jge    c000b6dc <loadACPITables(unsigned char*)+0x108>
c000b622:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b626:	83 c0 24             	add    eax,0x24
c000b629:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b62d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000b631:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b635:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b639:	c1 e0 03             	shl    eax,0x3
c000b63c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000b640:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b644:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b647:	8b 00                	mov    eax,DWORD PTR [eax]
c000b649:	89 c1                	mov    ecx,eax
c000b64b:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b650:	8d 50 01             	lea    edx,[eax+0x1]
c000b653:	89 15 00 a8 02 c0    	mov    DWORD PTR ds:0xc002a800,edx
c000b659:	89 ca                	mov    edx,ecx
c000b65b:	89 14 c5 24 a8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd57dc],edx
c000b662:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000b667:	eb ab                	jmp    c000b614 <loadACPITables(unsigned char*)+0x40>
c000b669:	8d 76 00             	lea    esi,[esi+0x0]
c000b66c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b670:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b674:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b678:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b67b:	83 e8 24             	sub    eax,0x24
c000b67e:	c1 e8 02             	shr    eax,0x2
c000b681:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b685:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000b68d:	8d 76 00             	lea    esi,[esi+0x0]
c000b690:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b694:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000b698:	7d 42                	jge    c000b6dc <loadACPITables(unsigned char*)+0x108>
c000b69a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b69e:	83 c0 24             	add    eax,0x24
c000b6a1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b6a5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b6a9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000b6ad:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b6b1:	c1 e0 02             	shl    eax,0x2
c000b6b4:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b6b8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b6bc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b6be:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b6c3:	8d 50 01             	lea    edx,[eax+0x1]
c000b6c6:	89 15 00 a8 02 c0    	mov    DWORD PTR ds:0xc002a800,edx
c000b6cc:	89 ca                	mov    edx,ecx
c000b6ce:	89 14 c5 24 a8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd57dc],edx
c000b6d5:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000b6da:	eb b4                	jmp    c000b690 <loadACPITables(unsigned char*)+0xbc>
c000b6dc:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000b6e4:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b6e9:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000b6ed:	0f 8d 39 01 00 00    	jge    c000b82c <loadACPITables(unsigned char*)+0x258>
c000b6f3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b6f7:	8b 04 c5 24 a8 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd57dc]
c000b6fe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b702:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b706:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b70a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b70e:	25 ff 0f 00 00       	and    eax,0xfff
c000b713:	89 c6                	mov    esi,eax
c000b715:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c000b71b:	83 ec 0c             	sub    esp,0xc
c000b71e:	6a 01                	push   0x1
c000b720:	e8 6c 6a 00 00       	call   c0012191 <Virt::allocateKernelVirtualPages(int)>
c000b725:	83 c4 10             	add    esp,0x10
c000b728:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b72c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b732:	83 ec 0c             	sub    esp,0xc
c000b735:	6a 01                	push   0x1
c000b737:	6a 01                	push   0x1
c000b739:	50                   	push   eax
c000b73a:	52                   	push   edx
c000b73b:	53                   	push   ebx
c000b73c:	e8 23 73 00 00       	call   c0012a64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b741:	83 c4 20             	add    esp,0x20
c000b744:	09 f0                	or     eax,esi
c000b746:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b74a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b74e:	c1 e0 03             	shl    eax,0x3
c000b751:	05 20 a8 02 c0       	add    eax,0xc002a820
c000b756:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b75a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b75e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b762:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000b76a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b76e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b772:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b776:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b77a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b77e:	89 c6                	mov    esi,eax
c000b780:	89 d7                	mov    edi,edx
c000b782:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b784:	89 c8                	mov    eax,ecx
c000b786:	89 fa                	mov    edx,edi
c000b788:	89 f3                	mov    ebx,esi
c000b78a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000b78e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b792:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b796:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b79a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b79d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b7a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b7a5:	05 00 10 00 00       	add    eax,0x1000
c000b7aa:	c1 e8 0c             	shr    eax,0xc
c000b7ad:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b7b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b7b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7bd:	25 ff 0f 00 00       	and    eax,0xfff
c000b7c2:	89 c6                	mov    esi,eax
c000b7c4:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c000b7ca:	83 ec 0c             	sub    esp,0xc
c000b7cd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b7d1:	e8 bb 69 00 00       	call   c0012191 <Virt::allocateKernelVirtualPages(int)>
c000b7d6:	83 c4 10             	add    esp,0x10
c000b7d9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b7dd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b7e3:	83 ec 0c             	sub    esp,0xc
c000b7e6:	6a 01                	push   0x1
c000b7e8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b7ec:	50                   	push   eax
c000b7ed:	52                   	push   edx
c000b7ee:	53                   	push   ebx
c000b7ef:	e8 70 72 00 00       	call   c0012a64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b7f4:	83 c4 20             	add    esp,0x20
c000b7f7:	09 f0                	or     eax,esi
c000b7f9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b7fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b801:	83 ec 0c             	sub    esp,0xc
c000b804:	50                   	push   eax
c000b805:	e8 85 6c 00 00       	call   c001248f <Virt::freeKernelVirtualPages(unsigned long)>
c000b80a:	83 c4 10             	add    esp,0x10
c000b80d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b811:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b815:	89 14 c5 24 a8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd57dc],edx
c000b81c:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000b821:	e9 be fe ff ff       	jmp    c000b6e4 <loadACPITables(unsigned char*)+0x110>
c000b826:	66 90                	xchg   ax,ax
c000b828:	90                   	nop
c000b829:	8d 76 00             	lea    esi,[esi+0x0]
c000b82c:	83 c4 60             	add    esp,0x60
c000b82f:	5b                   	pop    ebx
c000b830:	5e                   	pop    esi
c000b831:	5f                   	pop    edi
c000b832:	c3                   	ret    
c000b833:	90                   	nop

c000b834 <findRSDT(unsigned char*)>:
c000b834:	57                   	push   edi
c000b835:	56                   	push   esi
c000b836:	53                   	push   ebx
c000b837:	83 ec 50             	sub    esp,0x50
c000b83a:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000b83f:	85 c0                	test   eax,eax
c000b841:	75 0d                	jne    c000b850 <findRSDT(unsigned char*)+0x1c>
c000b843:	b8 00 00 00 00       	mov    eax,0x0
c000b848:	e9 2b 01 00 00       	jmp    c000b978 <findRSDT(unsigned char*)+0x144>
c000b84d:	8d 76 00             	lea    esi,[esi+0x0]
c000b850:	89 e0                	mov    eax,esp
c000b852:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b856:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b85a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b85e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000b866:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b86a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b86e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b872:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b876:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000b87a:	89 c6                	mov    esi,eax
c000b87c:	89 d7                	mov    edi,edx
c000b87e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b880:	89 c8                	mov    eax,ecx
c000b882:	89 fa                	mov    edx,edi
c000b884:	89 f3                	mov    ebx,esi
c000b886:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000b88a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000b88e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b892:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000b896:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000b89a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000b8a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b8a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b8aa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b8ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8b2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b8b6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b8ba:	25 ff 0f 00 00       	and    eax,0xfff
c000b8bf:	89 c6                	mov    esi,eax
c000b8c1:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c000b8c7:	83 ec 0c             	sub    esp,0xc
c000b8ca:	6a 02                	push   0x2
c000b8cc:	e8 c0 68 00 00       	call   c0012191 <Virt::allocateKernelVirtualPages(int)>
c000b8d1:	83 c4 10             	add    esp,0x10
c000b8d4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000b8d8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b8de:	83 ec 0c             	sub    esp,0xc
c000b8e1:	6a 01                	push   0x1
c000b8e3:	6a 02                	push   0x2
c000b8e5:	50                   	push   eax
c000b8e6:	52                   	push   edx
c000b8e7:	53                   	push   ebx
c000b8e8:	e8 77 71 00 00       	call   c0012a64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b8ed:	83 c4 20             	add    esp,0x20
c000b8f0:	09 f0                	or     eax,esi
c000b8f2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b8f6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b8fa:	25 ff 0f 00 00       	and    eax,0xfff
c000b8ff:	89 c6                	mov    esi,eax
c000b901:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c000b907:	83 ec 0c             	sub    esp,0xc
c000b90a:	6a 02                	push   0x2
c000b90c:	e8 80 68 00 00       	call   c0012191 <Virt::allocateKernelVirtualPages(int)>
c000b911:	83 c4 10             	add    esp,0x10
c000b914:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000b918:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b91e:	83 ec 0c             	sub    esp,0xc
c000b921:	6a 01                	push   0x1
c000b923:	6a 02                	push   0x2
c000b925:	50                   	push   eax
c000b926:	52                   	push   edx
c000b927:	53                   	push   ebx
c000b928:	e8 37 71 00 00       	call   c0012a64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b92d:	83 c4 20             	add    esp,0x20
c000b930:	09 f0                	or     eax,esi
c000b932:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b936:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b93b:	85 c0                	test   eax,eax
c000b93d:	75 11                	jne    c000b950 <findRSDT(unsigned char*)+0x11c>
c000b93f:	c6 05 20 aa 02 c0 00 	mov    BYTE PTR ds:0xc002aa20,0x0
c000b946:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b94a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b94e:	eb 24                	jmp    c000b974 <findRSDT(unsigned char*)+0x140>
c000b950:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b955:	83 f8 02             	cmp    eax,0x2
c000b958:	75 12                	jne    c000b96c <findRSDT(unsigned char*)+0x138>
c000b95a:	c6 05 20 aa 02 c0 01 	mov    BYTE PTR ds:0xc002aa20,0x1
c000b961:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b965:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b969:	eb 09                	jmp    c000b974 <findRSDT(unsigned char*)+0x140>
c000b96b:	90                   	nop
c000b96c:	b8 00 00 00 00       	mov    eax,0x0
c000b971:	eb 05                	jmp    c000b978 <findRSDT(unsigned char*)+0x144>
c000b973:	90                   	nop
c000b974:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000b978:	83 c4 50             	add    esp,0x50
c000b97b:	5b                   	pop    ebx
c000b97c:	5e                   	pop    esi
c000b97d:	5f                   	pop    edi
c000b97e:	c3                   	ret    
c000b97f:	90                   	nop

c000b980 <findDataTable(unsigned char*, char*)>:
c000b980:	83 ec 1c             	sub    esp,0x1c
c000b983:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000b988:	75 0a                	jne    c000b994 <findDataTable(unsigned char*, char*)+0x14>
c000b98a:	b8 00 00 00 00       	mov    eax,0x0
c000b98f:	eb 5f                	jmp    c000b9f0 <findDataTable(unsigned char*, char*)+0x70>
c000b991:	8d 76 00             	lea    esi,[esi+0x0]
c000b994:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b99c:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b9a1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000b9a5:	7d 41                	jge    c000b9e8 <findDataTable(unsigned char*, char*)+0x68>
c000b9a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9ab:	c1 e0 03             	shl    eax,0x3
c000b9ae:	05 20 a8 02 c0       	add    eax,0xc002a820
c000b9b3:	83 ec 04             	sub    esp,0x4
c000b9b6:	6a 04                	push   0x4
c000b9b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b9bc:	50                   	push   eax
c000b9bd:	e8 be 49 ff ff       	call   c0000380 <memcmp>
c000b9c2:	83 c4 10             	add    esp,0x10
c000b9c5:	85 c0                	test   eax,eax
c000b9c7:	0f 94 c0             	sete   al
c000b9ca:	0f b6 c0             	movzx  eax,al
c000b9cd:	85 c0                	test   eax,eax
c000b9cf:	74 0f                	je     c000b9e0 <findDataTable(unsigned char*, char*)+0x60>
c000b9d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9d5:	8b 04 c5 24 a8 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd57dc]
c000b9dc:	eb 12                	jmp    c000b9f0 <findDataTable(unsigned char*, char*)+0x70>
c000b9de:	66 90                	xchg   ax,ax
c000b9e0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000b9e5:	eb b5                	jmp    c000b99c <findDataTable(unsigned char*, char*)+0x1c>
c000b9e7:	90                   	nop
c000b9e8:	b8 00 00 00 00       	mov    eax,0x0
c000b9ed:	8d 76 00             	lea    esi,[esi+0x0]
c000b9f0:	83 c4 1c             	add    esp,0x1c
c000b9f3:	c3                   	ret    

c000b9f4 <scanMADT()>:
c000b9f4:	53                   	push   ebx
c000b9f5:	83 ec 38             	sub    esp,0x38
c000b9f8:	c7 05 28 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aa28,0x0
c000ba02:	c7 05 24 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aa24,0x0
c000ba0c:	e8 19 c8 00 00       	call   c001822a <HalFindRSDP()>
c000ba11:	a3 28 aa 02 c0       	mov    ds:0xc002aa28,eax
c000ba16:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000ba1b:	85 c0                	test   eax,eax
c000ba1d:	0f 84 11 04 00 00    	je     c000be34 <scanMADT()+0x440>
c000ba23:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000ba28:	83 ec 0c             	sub    esp,0xc
c000ba2b:	50                   	push   eax
c000ba2c:	e8 03 fe ff ff       	call   c000b834 <findRSDT(unsigned char*)>
c000ba31:	83 c4 10             	add    esp,0x10
c000ba34:	a3 24 aa 02 c0       	mov    ds:0xc002aa24,eax
c000ba39:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000ba3e:	85 c0                	test   eax,eax
c000ba40:	0f 84 f2 03 00 00    	je     c000be38 <scanMADT()+0x444>
c000ba46:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000ba4b:	83 ec 0c             	sub    esp,0xc
c000ba4e:	50                   	push   eax
c000ba4f:	e8 80 fb ff ff       	call   c000b5d4 <loadACPITables(unsigned char*)>
c000ba54:	83 c4 10             	add    esp,0x10
c000ba57:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000ba5c:	83 ec 08             	sub    esp,0x8
c000ba5f:	68 6c 23 02 c0       	push   0xc002236c
c000ba64:	50                   	push   eax
c000ba65:	e8 16 ff ff ff       	call   c000b980 <findDataTable(unsigned char*, char*)>
c000ba6a:	83 c4 10             	add    esp,0x10
c000ba6d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba71:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000ba76:	0f 84 c0 03 00 00    	je     c000be3c <scanMADT()+0x448>
c000ba7c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000ba84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ba8b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000ba8f:	0f 87 af 03 00 00    	ja     c000be44 <scanMADT()+0x450>
c000ba95:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000ba9d:	0f 87 a1 03 00 00    	ja     c000be44 <scanMADT()+0x450>
c000baa3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000baa7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000baab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000baaf:	8d 50 01             	lea    edx,[eax+0x1]
c000bab2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bab6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000baba:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000babe:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000bac2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bac6:	8d 50 01             	lea    edx,[eax+0x1]
c000bac9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bacd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bad1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bad5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000bad9:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000bade:	83 f8 02             	cmp    eax,0x2
c000bae1:	0f 86 59 03 00 00    	jbe    c000be40 <scanMADT()+0x44c>
c000bae7:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000baec:	85 c0                	test   eax,eax
c000baee:	75 58                	jne    c000bb48 <scanMADT()+0x154>
c000baf0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000baf4:	8d 50 01             	lea    edx,[eax+0x1]
c000baf7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bafb:	8a 15 20 ac 02 c0    	mov    dl,BYTE PTR ds:0xc002ac20
c000bb01:	0f b6 d2             	movzx  edx,dl
c000bb04:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000bb08:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000bb0c:	88 82 60 ac 02 c0    	mov    BYTE PTR [edx-0x3ffd53a0],al
c000bb12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb16:	8d 50 01             	lea    edx,[eax+0x1]
c000bb19:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bb1d:	8a 15 20 ac 02 c0    	mov    dl,BYTE PTR ds:0xc002ac20
c000bb23:	8d 4a 01             	lea    ecx,[edx+0x1]
c000bb26:	88 0d 20 ac 02 c0    	mov    BYTE PTR ds:0xc002ac20,cl
c000bb2c:	0f b6 d2             	movzx  edx,dl
c000bb2f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000bb33:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000bb37:	88 82 40 ac 02 c0    	mov    BYTE PTR [edx-0x3ffd53c0],al
c000bb3d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bb42:	e9 d9 02 00 00       	jmp    c000be20 <scanMADT()+0x42c>
c000bb47:	90                   	nop
c000bb48:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bb4d:	83 f8 01             	cmp    eax,0x1
c000bb50:	0f 85 1a 01 00 00    	jne    c000bc70 <scanMADT()+0x27c>
c000bb56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb5a:	8d 50 01             	lea    edx,[eax+0x1]
c000bb5d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bb61:	8a 15 e0 aa 02 c0    	mov    dl,BYTE PTR ds:0xc002aae0
c000bb67:	0f b6 d2             	movzx  edx,dl
c000bb6a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000bb6e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000bb72:	88 82 00 ab 02 c0    	mov    BYTE PTR [edx-0x3ffd5500],al
c000bb78:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000bb7d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb81:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb85:	01 d0                	add    eax,edx
c000bb87:	83 c0 2c             	add    eax,0x2c
c000bb8a:	8a 00                	mov    al,BYTE PTR [eax]
c000bb8c:	0f b6 d0             	movzx  edx,al
c000bb8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb93:	8d 48 01             	lea    ecx,[eax+0x1]
c000bb96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb9a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bb9e:	0f b6 c0             	movzx  eax,al
c000bba1:	c1 e0 08             	shl    eax,0x8
c000bba4:	89 d1                	mov    ecx,edx
c000bba6:	09 c1                	or     ecx,eax
c000bba8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbac:	8d 50 02             	lea    edx,[eax+0x2]
c000bbaf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bbb3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bbb7:	0f b6 c0             	movzx  eax,al
c000bbba:	c1 e0 10             	shl    eax,0x10
c000bbbd:	09 c1                	or     ecx,eax
c000bbbf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbc3:	8d 50 03             	lea    edx,[eax+0x3]
c000bbc6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bbca:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bbce:	0f b6 c0             	movzx  eax,al
c000bbd1:	c1 e0 18             	shl    eax,0x18
c000bbd4:	09 c1                	or     ecx,eax
c000bbd6:	89 ca                	mov    edx,ecx
c000bbd8:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c000bbdd:	0f b6 c0             	movzx  eax,al
c000bbe0:	89 14 85 20 ab 02 c0 	mov    DWORD PTR [eax*4-0x3ffd54e0],edx
c000bbe7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bbec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bbf0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbf4:	01 d0                	add    eax,edx
c000bbf6:	83 c0 2c             	add    eax,0x2c
c000bbf9:	8a 00                	mov    al,BYTE PTR [eax]
c000bbfb:	0f b6 d0             	movzx  edx,al
c000bbfe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc02:	8d 48 01             	lea    ecx,[eax+0x1]
c000bc05:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bc09:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bc0d:	0f b6 c0             	movzx  eax,al
c000bc10:	c1 e0 08             	shl    eax,0x8
c000bc13:	89 d1                	mov    ecx,edx
c000bc15:	09 c1                	or     ecx,eax
c000bc17:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc1b:	8d 50 02             	lea    edx,[eax+0x2]
c000bc1e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bc22:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bc26:	0f b6 c0             	movzx  eax,al
c000bc29:	c1 e0 10             	shl    eax,0x10
c000bc2c:	09 c1                	or     ecx,eax
c000bc2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc32:	8d 50 03             	lea    edx,[eax+0x3]
c000bc35:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bc39:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bc3d:	0f b6 c0             	movzx  eax,al
c000bc40:	c1 e0 18             	shl    eax,0x18
c000bc43:	09 c1                	or     ecx,eax
c000bc45:	89 ca                	mov    edx,ecx
c000bc47:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c000bc4c:	0f b6 c0             	movzx  eax,al
c000bc4f:	89 14 85 a0 ab 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5460],edx
c000bc56:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bc5b:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c000bc60:	83 c0 01             	add    eax,0x1
c000bc63:	a2 e0 aa 02 c0       	mov    ds:0xc002aae0,al
c000bc68:	e9 b3 01 00 00       	jmp    c000be20 <scanMADT()+0x42c>
c000bc6d:	8d 76 00             	lea    esi,[esi+0x0]
c000bc70:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bc75:	83 f8 02             	cmp    eax,0x2
c000bc78:	0f 85 ea 00 00 00    	jne    c000bd68 <scanMADT()+0x374>
c000bc7e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc82:	8d 50 01             	lea    edx,[eax+0x1]
c000bc85:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc89:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc8d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bc91:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000bc95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc99:	8d 50 01             	lea    edx,[eax+0x1]
c000bc9c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bca0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bca4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bca8:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000bcac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bcb0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bcb4:	01 d0                	add    eax,edx
c000bcb6:	83 c0 2c             	add    eax,0x2c
c000bcb9:	8a 00                	mov    al,BYTE PTR [eax]
c000bcbb:	0f b6 d0             	movzx  edx,al
c000bcbe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bcc2:	8d 48 01             	lea    ecx,[eax+0x1]
c000bcc5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bcc9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bccd:	0f b6 c0             	movzx  eax,al
c000bcd0:	c1 e0 08             	shl    eax,0x8
c000bcd3:	89 d1                	mov    ecx,edx
c000bcd5:	09 c1                	or     ecx,eax
c000bcd7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bcdb:	8d 50 02             	lea    edx,[eax+0x2]
c000bcde:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bce2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bce6:	0f b6 c0             	movzx  eax,al
c000bce9:	c1 e0 10             	shl    eax,0x10
c000bcec:	09 c1                	or     ecx,eax
c000bcee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bcf2:	8d 50 03             	lea    edx,[eax+0x3]
c000bcf5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bcf9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bcfd:	0f b6 c0             	movzx  eax,al
c000bd00:	c1 e0 18             	shl    eax,0x18
c000bd03:	09 c8                	or     eax,ecx
c000bd05:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bd09:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bd0e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bd12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bd16:	01 d0                	add    eax,edx
c000bd18:	83 c0 2c             	add    eax,0x2c
c000bd1b:	8a 00                	mov    al,BYTE PTR [eax]
c000bd1d:	0f b6 d0             	movzx  edx,al
c000bd20:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bd24:	8d 48 01             	lea    ecx,[eax+0x1]
c000bd27:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bd2b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bd2f:	0f b6 c0             	movzx  eax,al
c000bd32:	c1 e0 08             	shl    eax,0x8
c000bd35:	09 d0                	or     eax,edx
c000bd37:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000bd3c:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bd41:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000bd46:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd4a:	88 90 a8 49 02 c0    	mov    BYTE PTR [eax-0x3ffdb658],dl
c000bd50:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000bd55:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000bd5a:	66 89 94 00 c0 aa 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd5540],dx
c000bd62:	e9 b9 00 00 00       	jmp    c000be20 <scanMADT()+0x42c>
c000bd67:	90                   	nop
c000bd68:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bd6d:	83 f8 04             	cmp    eax,0x4
c000bd70:	0f 85 9a 00 00 00    	jne    c000be10 <scanMADT()+0x41c>
c000bd76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bd7a:	8d 50 01             	lea    edx,[eax+0x1]
c000bd7d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd81:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bd85:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bd89:	0f b6 c0             	movzx  eax,al
c000bd8c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bd90:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bd94:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bd98:	01 d0                	add    eax,edx
c000bd9a:	83 c0 2c             	add    eax,0x2c
c000bd9d:	8a 00                	mov    al,BYTE PTR [eax]
c000bd9f:	0f b6 d0             	movzx  edx,al
c000bda2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bda6:	8d 48 01             	lea    ecx,[eax+0x1]
c000bda9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bdad:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bdb1:	0f b6 c0             	movzx  eax,al
c000bdb4:	c1 e0 08             	shl    eax,0x8
c000bdb7:	09 d0                	or     eax,edx
c000bdb9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bdbd:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bdc2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bdc6:	8d 50 01             	lea    edx,[eax+0x1]
c000bdc9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bdcd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bdd1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bdd5:	0f b6 c0             	movzx  eax,al
c000bdd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bde0:	c1 e0 08             	shl    eax,0x8
c000bde3:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000bde7:	89 c1                	mov    ecx,eax
c000bde9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bded:	c1 e0 18             	shl    eax,0x18
c000bdf0:	89 c3                	mov    ebx,eax
c000bdf2:	a1 2c aa 02 c0       	mov    eax,ds:0xc002aa2c
c000bdf7:	8d 50 01             	lea    edx,[eax+0x1]
c000bdfa:	89 15 2c aa 02 c0    	mov    DWORD PTR ds:0xc002aa2c,edx
c000be00:	09 d9                	or     ecx,ebx
c000be02:	89 ca                	mov    edx,ecx
c000be04:	89 14 85 40 aa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd55c0],edx
c000be0b:	eb 13                	jmp    c000be20 <scanMADT()+0x42c>
c000be0d:	8d 76 00             	lea    esi,[esi+0x0]
c000be10:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000be15:	83 f8 05             	cmp    eax,0x5
c000be18:	75 06                	jne    c000be20 <scanMADT()+0x42c>
c000be1a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000be1f:	90                   	nop
c000be20:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000be25:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000be29:	01 d0                	add    eax,edx
c000be2b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be2f:	e9 50 fc ff ff       	jmp    c000ba84 <scanMADT()+0x90>
c000be34:	90                   	nop
c000be35:	eb 0d                	jmp    c000be44 <scanMADT()+0x450>
c000be37:	90                   	nop
c000be38:	90                   	nop
c000be39:	eb 09                	jmp    c000be44 <scanMADT()+0x450>
c000be3b:	90                   	nop
c000be3c:	90                   	nop
c000be3d:	eb 05                	jmp    c000be44 <scanMADT()+0x450>
c000be3f:	90                   	nop
c000be40:	90                   	nop
c000be41:	8d 76 00             	lea    esi,[esi+0x0]
c000be44:	83 c4 38             	add    esp,0x38
c000be47:	5b                   	pop    ebx
c000be48:	c3                   	ret    
c000be49:	90                   	nop
c000be4a:	66 90                	xchg   ax,ax

c000be4c <ACPI::ACPI()>:
c000be4c:	83 ec 0c             	sub    esp,0xc
c000be4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be53:	83 ec 08             	sub    esp,0x8
c000be56:	68 71 23 02 c0       	push   0xc0022371
c000be5b:	50                   	push   eax
c000be5c:	e8 93 d3 ff ff       	call   c00091f4 <Device::Device(char const*)>
c000be61:	83 c4 10             	add    esp,0x10
c000be64:	ba 6c 25 02 c0       	mov    edx,0xc002256c
c000be69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be6d:	89 10                	mov    DWORD PTR [eax],edx
c000be6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be73:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000be7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be7e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000be88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be8c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000be96:	e8 59 fb ff ff       	call   c000b9f4 <scanMADT()>
c000be9b:	90                   	nop
c000be9c:	83 c4 0c             	add    esp,0xc
c000be9f:	c3                   	ret    

c000bea0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000bea0:	83 ec 2c             	sub    esp,0x2c
c000bea3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000bea7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000beab:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000beaf:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000beb3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000beb8:	88 c8                	mov    al,cl
c000beba:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000bebe:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000bec3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000becb:	90                   	nop
c000becc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bed0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000bed6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000beda:	0f 8d b0 00 00 00    	jge    c000bf90 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000bee0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bee4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bee8:	83 c2 2a             	add    edx,0x2a
c000beeb:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000beef:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000bef4:	0f b7 c0             	movzx  eax,ax
c000bef7:	39 c2                	cmp    edx,eax
c000bef9:	0f 85 85 00 00 00    	jne    c000bf84 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000beff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf03:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bf07:	83 c2 2a             	add    edx,0x2a
c000bf0a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000bf0e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000bf13:	0f b6 c0             	movzx  eax,al
c000bf16:	39 c2                	cmp    edx,eax
c000bf18:	75 6a                	jne    c000bf84 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000bf1a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bf1f:	85 c0                	test   eax,eax
c000bf21:	74 3d                	je     c000bf60 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000bf23:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf27:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bf2b:	83 c2 2a             	add    edx,0x2a
c000bf2e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000bf32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bf39:	39 c2                	cmp    edx,eax
c000bf3b:	74 13                	je     c000bf50 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000bf3d:	83 ec 0c             	sub    esp,0xc
c000bf40:	68 ec 24 02 c0       	push   0xc00224ec
c000bf45:	e8 88 2e 00 00       	call   c000edd2 <KePanic(char const*)>
c000bf4a:	83 c4 10             	add    esp,0x10
c000bf4d:	8d 76 00             	lea    esi,[esi+0x0]
c000bf50:	83 ec 0c             	sub    esp,0xc
c000bf53:	68 76 23 02 c0       	push   0xc0022376
c000bf58:	e8 75 2e 00 00       	call   c000edd2 <KePanic(char const*)>
c000bf5d:	83 c4 10             	add    esp,0x10
c000bf60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000bf64:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf68:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bf6c:	83 c2 2a             	add    edx,0x2a
c000bf6f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000bf73:	8b 02                	mov    eax,DWORD PTR [edx]
c000bf75:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000bf78:	89 01                	mov    DWORD PTR [ecx],eax
c000bf7a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000bf7d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf82:	66 90                	xchg   ax,ax
c000bf84:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000bf89:	e9 3e ff ff ff       	jmp    c000becc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000bf8e:	66 90                	xchg   ax,ax
c000bf90:	90                   	nop
c000bf91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf95:	83 c4 2c             	add    esp,0x2c
c000bf98:	c2 04 00             	ret    0x4
c000bf9b:	90                   	nop

c000bf9c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000bf9c:	83 ec 1c             	sub    esp,0x1c
c000bf9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bfa3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bfa7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000bfab:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000bfb0:	88 c8                	mov    al,cl
c000bfb2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000bfb6:	88 d0                	mov    al,dl
c000bfb8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000bfbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfc0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000bfc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfca:	83 c2 2a             	add    edx,0x2a
c000bfcd:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000bfd1:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000bfd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfd9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000bfdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfe3:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000bfe6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bfea:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000bfef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bff3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000bff9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000bffd:	83 c0 01             	add    eax,0x1
c000c000:	88 c1                	mov    cl,al
c000c002:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c006:	83 c2 2a             	add    edx,0x2a
c000c009:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000c00d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c011:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c017:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c01b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c01e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c022:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000c026:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c02a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c030:	8d 50 01             	lea    edx,[eax+0x1]
c000c033:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c037:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000c03d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c041:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c047:	3d 00 02 00 00       	cmp    eax,0x200
c000c04c:	75 12                	jne    c000c060 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000c04e:	83 ec 0c             	sub    esp,0xc
c000c051:	68 85 23 02 c0       	push   0xc0022385
c000c056:	e8 77 2d 00 00       	call   c000edd2 <KePanic(char const*)>
c000c05b:	83 c4 10             	add    esp,0x10
c000c05e:	66 90                	xchg   ax,ax
c000c060:	90                   	nop
c000c061:	83 c4 1c             	add    esp,0x1c
c000c064:	c3                   	ret    
c000c065:	90                   	nop
c000c066:	66 90                	xchg   ax,ax

c000c068 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000c068:	b8 00 00 00 00       	mov    eax,0x0
c000c06d:	c3                   	ret    
c000c06e:	66 90                	xchg   ax,ax

c000c070 <ACPI::detectPCI()>:
c000c070:	53                   	push   ebx
c000c071:	83 ec 28             	sub    esp,0x28
c000c074:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c079:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000c07e:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000c083:	83 ec 08             	sub    esp,0x8
c000c086:	68 a2 23 02 c0       	push   0xc00223a2
c000c08b:	50                   	push   eax
c000c08c:	e8 ef f8 ff ff       	call   c000b980 <findDataTable(unsigned char*, char*)>
c000c091:	83 c4 10             	add    esp,0x10
c000c094:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c098:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000c09d:	74 0d                	je     c000c0ac <ACPI::detectPCI()+0x3c>
c000c09f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c0a4:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000c0a9:	8d 76 00             	lea    esi,[esi+0x0]
c000c0ac:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000c0b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c0b8:	8a 00                	mov    al,BYTE PTR [eax]
c000c0ba:	0f b6 c0             	movzx  eax,al
c000c0bd:	83 f8 01             	cmp    eax,0x1
c000c0c0:	75 0e                	jne    c000c0d0 <ACPI::detectPCI()+0x60>
c000c0c2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c0c7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000c0cc:	eb 2e                	jmp    c000c0fc <ACPI::detectPCI()+0x8c>
c000c0ce:	66 90                	xchg   ax,ax
c000c0d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c0d4:	8a 00                	mov    al,BYTE PTR [eax]
c000c0d6:	0f b6 c0             	movzx  eax,al
c000c0d9:	83 f8 02             	cmp    eax,0x2
c000c0dc:	75 1e                	jne    c000c0fc <ACPI::detectPCI()+0x8c>
c000c0de:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c0e3:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000c0e8:	85 c0                	test   eax,eax
c000c0ea:	74 10                	je     c000c0fc <ACPI::detectPCI()+0x8c>
c000c0ec:	83 ec 0c             	sub    esp,0xc
c000c0ef:	68 1c 25 02 c0       	push   0xc002251c
c000c0f4:	e8 d9 2c 00 00       	call   c000edd2 <KePanic(char const*)>
c000c0f9:	83 c4 10             	add    esp,0x10
c000c0fc:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000c100:	83 f0 01             	xor    eax,0x1
c000c103:	0f b6 c0             	movzx  eax,al
c000c106:	85 c0                	test   eax,eax
c000c108:	74 46                	je     c000c150 <ACPI::detectPCI()+0xe0>
c000c10a:	e8 21 40 ff ff       	call   c0000130 <manualPCIProbe>
c000c10f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c113:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000c118:	75 0e                	jne    c000c128 <ACPI::detectPCI()+0xb8>
c000c11a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c11f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000c124:	eb 2a                	jmp    c000c150 <ACPI::detectPCI()+0xe0>
c000c126:	66 90                	xchg   ax,ax
c000c128:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000c12d:	75 21                	jne    c000c150 <ACPI::detectPCI()+0xe0>
c000c12f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c134:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000c139:	85 c0                	test   eax,eax
c000c13b:	74 13                	je     c000c150 <ACPI::detectPCI()+0xe0>
c000c13d:	83 ec 0c             	sub    esp,0xc
c000c140:	68 1c 25 02 c0       	push   0xc002251c
c000c145:	e8 88 2c 00 00       	call   c000edd2 <KePanic(char const*)>
c000c14a:	83 c4 10             	add    esp,0x10
c000c14d:	8d 76 00             	lea    esi,[esi+0x0]
c000c150:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c155:	85 c0                	test   eax,eax
c000c157:	0f 84 87 00 00 00    	je     c000c1e4 <ACPI::detectPCI()+0x174>
c000c15d:	83 ec 0c             	sub    esp,0xc
c000c160:	68 a7 23 02 c0       	push   0xc00223a7
c000c165:	e8 dd 05 00 00       	call   c000c747 <KeSetBootMessage(char const*)>
c000c16a:	83 c4 10             	add    esp,0x10
c000c16d:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000c175:	83 ec 0c             	sub    esp,0xc
c000c178:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c17c:	e8 0b 29 00 00       	call   c000ea8c <malloc>
c000c181:	83 c4 10             	add    esp,0x10
c000c184:	89 c3                	mov    ebx,eax
c000c186:	83 ec 0c             	sub    esp,0xc
c000c189:	53                   	push   ebx
c000c18a:	e8 73 fe 00 00       	call   c001c002 <PCI::PCI()>
c000c18f:	83 c4 10             	add    esp,0x10
c000c192:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c196:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c19a:	83 ec 08             	sub    esp,0x8
c000c19d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1a1:	50                   	push   eax
c000c1a2:	e8 eb ce ff ff       	call   c0009092 <Device::addChild(Device*)>
c000c1a7:	83 c4 10             	add    esp,0x10
c000c1aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c1ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1b0:	83 c0 08             	add    eax,0x8
c000c1b3:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1b5:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000c1ba:	85 d2                	test   edx,edx
c000c1bc:	74 0a                	je     c000c1c8 <ACPI::detectPCI()+0x158>
c000c1be:	ba 01 00 00 00       	mov    edx,0x1
c000c1c3:	eb 0b                	jmp    c000c1d0 <ACPI::detectPCI()+0x160>
c000c1c5:	8d 76 00             	lea    esi,[esi+0x0]
c000c1c8:	ba 02 00 00 00       	mov    edx,0x2
c000c1cd:	8d 76 00             	lea    esi,[esi+0x0]
c000c1d0:	6a 00                	push   0x0
c000c1d2:	6a 00                	push   0x0
c000c1d4:	52                   	push   edx
c000c1d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c1d9:	ff d0                	call   eax
c000c1db:	83 c4 10             	add    esp,0x10
c000c1de:	e9 91 00 00 00       	jmp    c000c274 <ACPI::detectPCI()+0x204>
c000c1e3:	90                   	nop
c000c1e4:	83 ec 0c             	sub    esp,0xc
c000c1e7:	68 bf 23 02 c0       	push   0xc00223bf
c000c1ec:	e8 56 05 00 00       	call   c000c747 <KeSetBootMessage(char const*)>
c000c1f1:	83 c4 10             	add    esp,0x10
c000c1f4:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000c1fb:	83 ec 0c             	sub    esp,0xc
c000c1fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c202:	e8 85 28 00 00       	call   c000ea8c <malloc>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 c3                	mov    ebx,eax
c000c20c:	83 ec 0c             	sub    esp,0xc
c000c20f:	53                   	push   ebx
c000c210:	e8 f5 09 01 00       	call   c001cc0a <IDE::IDE()>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000c21c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c220:	83 ec 08             	sub    esp,0x8
c000c223:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c227:	50                   	push   eax
c000c228:	e8 65 ce ff ff       	call   c0009092 <Device::addChild(Device*)>
c000c22d:	83 c4 10             	add    esp,0x10
c000c230:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c234:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000c23e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c242:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000c24b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c24f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000c258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c25c:	8b 00                	mov    eax,DWORD PTR [eax]
c000c25e:	83 c0 08             	add    eax,0x8
c000c261:	8b 00                	mov    eax,DWORD PTR [eax]
c000c263:	6a 00                	push   0x0
c000c265:	6a 00                	push   0x0
c000c267:	6a 00                	push   0x0
c000c269:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c26d:	ff d0                	call   eax
c000c26f:	83 c4 10             	add    esp,0x10
c000c272:	66 90                	xchg   ax,ax
c000c274:	90                   	nop
c000c275:	83 c4 28             	add    esp,0x28
c000c278:	5b                   	pop    ebx
c000c279:	c3                   	ret    
c000c27a:	66 90                	xchg   ax,ax

c000c27c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000c27c:	83 ec 0c             	sub    esp,0xc
c000c27f:	83 ec 0c             	sub    esp,0xc
c000c282:	68 d4 23 02 c0       	push   0xc00223d4
c000c287:	e8 46 2b 00 00       	call   c000edd2 <KePanic(char const*)>
c000c28c:	83 c4 10             	add    esp,0x10
c000c28f:	90                   	nop
c000c290:	83 c4 0c             	add    esp,0xc
c000c293:	c3                   	ret    

c000c294 <ACPI::open(int, int, void*)>:
c000c294:	55                   	push   ebp
c000c295:	89 e5                	mov    ebp,esp
c000c297:	53                   	push   ebx
c000c298:	81 ec 74 01 00 00    	sub    esp,0x174
c000c29e:	83 ec 0c             	sub    esp,0xc
c000c2a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000c2a4:	e8 c7 fd ff ff       	call   c000c070 <ACPI::detectPCI()>
c000c2a9:	83 c4 10             	add    esp,0x10
c000c2ac:	83 ec 0c             	sub    esp,0xc
c000c2af:	68 44 25 02 c0       	push   0xc0022544
c000c2b4:	e8 8e 04 00 00       	call   c000c747 <KeSetBootMessage(char const*)>
c000c2b9:	83 c4 10             	add    esp,0x10
c000c2bc:	b8 4c 05 00 00       	mov    eax,0x54c
c000c2c1:	8a 00                	mov    al,BYTE PTR [eax]
c000c2c3:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000c2c6:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000c2ca:	83 f8 01             	cmp    eax,0x1
c000c2cd:	75 15                	jne    c000c2e4 <ACPI::open(int, int, void*)+0x50>
c000c2cf:	83 ec 0c             	sub    esp,0xc
c000c2d2:	68 e5 23 02 c0       	push   0xc00223e5
c000c2d7:	e8 6b 81 00 00       	call   c0014447 <Thr::loadKernelSymbolTable(char const*)>
c000c2dc:	83 c4 10             	add    esp,0x10
c000c2df:	eb 33                	jmp    c000c314 <ACPI::open(int, int, void*)+0x80>
c000c2e1:	8d 76 00             	lea    esi,[esi+0x0]
c000c2e4:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000c2e8:	3d bb 00 00 00       	cmp    eax,0xbb
c000c2ed:	75 15                	jne    c000c304 <ACPI::open(int, int, void*)+0x70>
c000c2ef:	83 ec 0c             	sub    esp,0xc
c000c2f2:	68 03 24 02 c0       	push   0xc0022403
c000c2f7:	e8 4b 81 00 00       	call   c0014447 <Thr::loadKernelSymbolTable(char const*)>
c000c2fc:	83 c4 10             	add    esp,0x10
c000c2ff:	eb 13                	jmp    c000c314 <ACPI::open(int, int, void*)+0x80>
c000c301:	8d 76 00             	lea    esi,[esi+0x0]
c000c304:	83 ec 0c             	sub    esp,0xc
c000c307:	68 21 24 02 c0       	push   0xc0022421
c000c30c:	e8 c1 2a 00 00       	call   c000edd2 <KePanic(char const*)>
c000c311:	83 c4 10             	add    esp,0x10
c000c314:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c318:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000c31f:	83 ec 0c             	sub    esp,0xc
c000c322:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000c325:	e8 62 27 00 00       	call   c000ea8c <malloc>
c000c32a:	83 c4 10             	add    esp,0x10
c000c32d:	89 c3                	mov    ebx,eax
c000c32f:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000c334:	83 ec 04             	sub    esp,0x4
c000c337:	50                   	push   eax
c000c338:	68 3b 24 02 c0       	push   0xc002243b
c000c33d:	53                   	push   ebx
c000c33e:	e8 e9 bd ff ff       	call   c000812c <File::File(char const*, Process*)>
c000c343:	83 c4 10             	add    esp,0x10
c000c346:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000c349:	83 ec 08             	sub    esp,0x8
c000c34c:	6a 01                	push   0x1
c000c34e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c351:	e8 f4 bd ff ff       	call   c000814a <File::open(FileOpenMode)>
c000c356:	83 c4 10             	add    esp,0x10
c000c359:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000c35c:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000c360:	75 12                	jne    c000c374 <ACPI::open(int, int, void*)+0xe0>
c000c362:	83 ec 0c             	sub    esp,0xc
c000c365:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c368:	e8 3b be ff ff       	call   c00081a8 <File::close()>
c000c36d:	83 c4 10             	add    esp,0x10
c000c370:	eb 06                	jmp    c000c378 <ACPI::open(int, int, void*)+0xe4>
c000c372:	66 90                	xchg   ax,ax
c000c374:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c378:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000c37c:	74 16                	je     c000c394 <ACPI::open(int, int, void*)+0x100>
c000c37e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c381:	8b 00                	mov    eax,DWORD PTR [eax]
c000c383:	83 c0 08             	add    eax,0x8
c000c386:	8b 00                	mov    eax,DWORD PTR [eax]
c000c388:	83 ec 0c             	sub    esp,0xc
c000c38b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c38e:	ff d0                	call   eax
c000c390:	83 c4 10             	add    esp,0x10
c000c393:	90                   	nop
c000c394:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000c397:	83 f0 01             	xor    eax,0x1
c000c39a:	0f b6 c0             	movzx  eax,al
c000c39d:	85 c0                	test   eax,eax
c000c39f:	74 27                	je     c000c3c8 <ACPI::open(int, int, void*)+0x134>
c000c3a1:	83 ec 0c             	sub    esp,0xc
c000c3a4:	68 59 24 02 c0       	push   0xc0022459
c000c3a9:	e8 99 03 00 00       	call   c000c747 <KeSetBootMessage(char const*)>
c000c3ae:	83 c4 10             	add    esp,0x10
c000c3b1:	c7 45 e8 0c 00 00 00 	mov    DWORD PTR [ebp-0x18],0xc
c000c3b8:	83 ec 0c             	sub    esp,0xc
c000c3bb:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000c3be:	e8 f3 5f 00 00       	call   c00123b6 <Virt::setupPageSwapping(int)>
c000c3c3:	83 c4 10             	add    esp,0x10
c000c3c6:	66 90                	xchg   ax,ax
c000c3c8:	83 ec 0c             	sub    esp,0xc
c000c3cb:	68 74 24 02 c0       	push   0xc0022474
c000c3d0:	e8 72 03 00 00       	call   c000c747 <KeSetBootMessage(char const*)>
c000c3d5:	83 c4 10             	add    esp,0x10
c000c3d8:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c3db:	83 ec 08             	sub    esp,0x8
c000c3de:	6a 13                	push   0x13
c000c3e0:	50                   	push   eax
c000c3e1:	e8 da cf ff ff       	call   c00093c0 <getDevicesOfType(DeviceType)>
c000c3e6:	83 c4 0c             	add    esp,0xc
c000c3e9:	8d 76 00             	lea    esi,[esi+0x0]
c000c3ec:	83 ec 0c             	sub    esp,0xc
c000c3ef:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c3f2:	50                   	push   eax
c000c3f3:	e8 14 45 01 00       	call   c002090c <LinkedList<Device>::isEmpty()>
c000c3f8:	83 c4 10             	add    esp,0x10
c000c3fb:	83 f0 01             	xor    eax,0x1
c000c3fe:	0f b6 c0             	movzx  eax,al
c000c401:	85 c0                	test   eax,eax
c000c403:	0f 84 1f 01 00 00    	je     c000c528 <ACPI::open(int, int, void*)+0x294>
c000c409:	83 ec 0c             	sub    esp,0xc
c000c40c:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c40f:	50                   	push   eax
c000c410:	e8 13 45 01 00       	call   c0020928 <LinkedList<Device>::getFirstElement()>
c000c415:	83 c4 10             	add    esp,0x10
c000c418:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000c41b:	83 ec 0c             	sub    esp,0xc
c000c41e:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c421:	50                   	push   eax
c000c422:	e8 09 45 01 00       	call   c0020930 <LinkedList<Device>::removeFirst()>
c000c427:	83 c4 10             	add    esp,0x10
c000c42a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000c42d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000c430:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000c433:	b8 24 00 00 00       	mov    eax,0x24
c000c438:	83 e0 fc             	and    eax,0xfffffffc
c000c43b:	89 c3                	mov    ebx,eax
c000c43d:	b8 00 00 00 00       	mov    eax,0x0
c000c442:	66 90                	xchg   ax,ax
c000c444:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000c44b:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000c452:	83 c0 04             	add    eax,0x4
c000c455:	39 d8                	cmp    eax,ebx
c000c457:	72 eb                	jb     c000c444 <ACPI::open(int, int, void*)+0x1b0>
c000c459:	83 ec 08             	sub    esp,0x8
c000c45c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000c462:	50                   	push   eax
c000c463:	83 ec 24             	sub    esp,0x24
c000c466:	89 e1                	mov    ecx,esp
c000c468:	b8 24 00 00 00       	mov    eax,0x24
c000c46d:	83 e0 fc             	and    eax,0xfffffffc
c000c470:	89 c3                	mov    ebx,eax
c000c472:	b8 00 00 00 00       	mov    eax,0x0
c000c477:	90                   	nop
c000c478:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000c47f:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000c482:	83 c0 04             	add    eax,0x4
c000c485:	39 d8                	cmp    eax,ebx
c000c487:	72 ef                	jb     c000c478 <ACPI::open(int, int, void*)+0x1e4>
c000c489:	e8 5c 00 01 00       	call   c001c4ea <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000c48e:	83 c4 30             	add    esp,0x30
c000c491:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000c494:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000c498:	0f 84 4e ff ff ff    	je     c000c3ec <ACPI::open(int, int, void*)+0x158>
c000c49e:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000c4a5:	83 ec 0c             	sub    esp,0xc
c000c4a8:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000c4ab:	e8 dc 25 00 00       	call   c000ea8c <malloc>
c000c4b0:	83 c4 10             	add    esp,0x10
c000c4b3:	89 c3                	mov    ebx,eax
c000c4b5:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000c4ba:	83 ec 04             	sub    esp,0x4
c000c4bd:	50                   	push   eax
c000c4be:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000c4c1:	53                   	push   ebx
c000c4c2:	e8 65 bc ff ff       	call   c000812c <File::File(char const*, Process*)>
c000c4c7:	83 c4 10             	add    esp,0x10
c000c4ca:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000c4cd:	83 ec 0c             	sub    esp,0xc
c000c4d0:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000c4d3:	e8 36 bf ff ff       	call   c000840e <File::exists()>
c000c4d8:	83 c4 10             	add    esp,0x10
c000c4db:	0f b6 c0             	movzx  eax,al
c000c4de:	85 c0                	test   eax,eax
c000c4e0:	74 22                	je     c000c504 <ACPI::open(int, int, void*)+0x270>
c000c4e2:	83 ec 08             	sub    esp,0x8
c000c4e5:	6a 01                	push   0x1
c000c4e7:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000c4ea:	e8 da 89 00 00       	call   c0014ec9 <Thr::loadDLL(char const*, bool)>
c000c4ef:	83 c4 10             	add    esp,0x10
c000c4f2:	83 ec 08             	sub    esp,0x8
c000c4f5:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000c4f8:	50                   	push   eax
c000c4f9:	e8 2c 8c 00 00       	call   c001512a <Thr::executeDLL(unsigned long, void*)>
c000c4fe:	83 c4 10             	add    esp,0x10
c000c501:	8d 76 00             	lea    esi,[esi+0x0]
c000c504:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000c508:	0f 84 de fe ff ff    	je     c000c3ec <ACPI::open(int, int, void*)+0x158>
c000c50e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000c511:	8b 00                	mov    eax,DWORD PTR [eax]
c000c513:	83 c0 08             	add    eax,0x8
c000c516:	8b 00                	mov    eax,DWORD PTR [eax]
c000c518:	83 ec 0c             	sub    esp,0xc
c000c51b:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000c51e:	ff d0                	call   eax
c000c520:	83 c4 10             	add    esp,0x10
c000c523:	e9 c4 fe ff ff       	jmp    c000c3ec <ACPI::open(int, int, void*)+0x158>
c000c528:	83 ec 0c             	sub    esp,0xc
c000c52b:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c52e:	50                   	push   eax
c000c52f:	e8 d4 43 01 00       	call   c0020908 <LinkedList<Device>::~LinkedList()>
c000c534:	83 c4 10             	add    esp,0x10
c000c537:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c000c53d:	83 ec 08             	sub    esp,0x8
c000c540:	6a 01                	push   0x1
c000c542:	68 8e 24 02 c0       	push   0xc002248e
c000c547:	e8 7d 89 00 00       	call   c0014ec9 <Thr::loadDLL(char const*, bool)>
c000c54c:	83 c4 10             	add    esp,0x10
c000c54f:	83 ec 08             	sub    esp,0x8
c000c552:	53                   	push   ebx
c000c553:	50                   	push   eax
c000c554:	e8 d1 8b 00 00       	call   c001512a <Thr::executeDLL(unsigned long, void*)>
c000c559:	83 c4 10             	add    esp,0x10
c000c55c:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000c561:	85 c0                	test   eax,eax
c000c563:	0f 84 ef 00 00 00    	je     c000c658 <ACPI::open(int, int, void*)+0x3c4>
c000c569:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000c56e:	85 c0                	test   eax,eax
c000c570:	0f 84 e2 00 00 00    	je     c000c658 <ACPI::open(int, int, void*)+0x3c4>
c000c576:	83 ec 0c             	sub    esp,0xc
c000c579:	68 ab 24 02 c0       	push   0xc00224ab
c000c57e:	e8 c4 01 00 00       	call   c000c747 <KeSetBootMessage(char const*)>
c000c583:	83 c4 10             	add    esp,0x10
c000c586:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000c58d:	83 ec 0c             	sub    esp,0xc
c000c590:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000c593:	e8 f4 24 00 00       	call   c000ea8c <malloc>
c000c598:	83 c4 10             	add    esp,0x10
c000c59b:	89 c3                	mov    ebx,eax
c000c59d:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000c5a2:	83 ec 04             	sub    esp,0x4
c000c5a5:	50                   	push   eax
c000c5a6:	68 c8 24 02 c0       	push   0xc00224c8
c000c5ab:	53                   	push   ebx
c000c5ac:	e8 7b bb ff ff       	call   c000812c <File::File(char const*, Process*)>
c000c5b1:	83 c4 10             	add    esp,0x10
c000c5b4:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000c5b7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000c5bb:	74 1b                	je     c000c5d8 <ACPI::open(int, int, void*)+0x344>
c000c5bd:	83 ec 0c             	sub    esp,0xc
c000c5c0:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000c5c3:	e8 46 be ff ff       	call   c000840e <File::exists()>
c000c5c8:	83 c4 10             	add    esp,0x10
c000c5cb:	0f b6 c0             	movzx  eax,al
c000c5ce:	85 c0                	test   eax,eax
c000c5d0:	74 06                	je     c000c5d8 <ACPI::open(int, int, void*)+0x344>
c000c5d2:	b0 01                	mov    al,0x1
c000c5d4:	eb 06                	jmp    c000c5dc <ACPI::open(int, int, void*)+0x348>
c000c5d6:	66 90                	xchg   ax,ax
c000c5d8:	b0 00                	mov    al,0x0
c000c5da:	66 90                	xchg   ax,ax
c000c5dc:	0f b6 c0             	movzx  eax,al
c000c5df:	85 c0                	test   eax,eax
c000c5e1:	74 21                	je     c000c604 <ACPI::open(int, int, void*)+0x370>
c000c5e3:	83 ec 08             	sub    esp,0x8
c000c5e6:	6a 01                	push   0x1
c000c5e8:	68 c8 24 02 c0       	push   0xc00224c8
c000c5ed:	e8 d7 88 00 00       	call   c0014ec9 <Thr::loadDLL(char const*, bool)>
c000c5f2:	83 c4 10             	add    esp,0x10
c000c5f5:	83 ec 08             	sub    esp,0x8
c000c5f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000c5fb:	50                   	push   eax
c000c5fc:	e8 29 8b 00 00       	call   c001512a <Thr::executeDLL(unsigned long, void*)>
c000c601:	83 c4 10             	add    esp,0x10
c000c604:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000c608:	74 1e                	je     c000c628 <ACPI::open(int, int, void*)+0x394>
c000c60a:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000c60e:	74 18                	je     c000c628 <ACPI::open(int, int, void*)+0x394>
c000c610:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000c613:	8b 00                	mov    eax,DWORD PTR [eax]
c000c615:	83 c0 08             	add    eax,0x8
c000c618:	8b 00                	mov    eax,DWORD PTR [eax]
c000c61a:	83 ec 0c             	sub    esp,0xc
c000c61d:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000c620:	ff d0                	call   eax
c000c622:	83 c4 10             	add    esp,0x10
c000c625:	8d 76 00             	lea    esi,[esi+0x0]
c000c628:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000c62d:	83 ec 08             	sub    esp,0x8
c000c630:	68 e5 24 02 c0       	push   0xc00224e5
c000c635:	50                   	push   eax
c000c636:	e8 45 f3 ff ff       	call   c000b980 <findDataTable(unsigned char*, char*)>
c000c63b:	83 c4 10             	add    esp,0x10
c000c63e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000c641:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000c645:	74 11                	je     c000c658 <ACPI::open(int, int, void*)+0x3c4>
c000c647:	83 ec 08             	sub    esp,0x8
c000c64a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000c64d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000c650:	e8 27 fc ff ff       	call   c000c27c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000c655:	83 c4 10             	add    esp,0x10
c000c658:	b8 00 00 00 00       	mov    eax,0x0
c000c65d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c660:	c9                   	leave  
c000c661:	c3                   	ret    

c000c662 <KeInitialiseAtexit()>:
c000c662:	83 ec 10             	sub    esp,0x10
c000c665:	6a 60                	push   0x60
c000c667:	6a 00                	push   0x0
c000c669:	68 00 ad 02 c0       	push   0xc002ad00
c000c66e:	c7 05 80 ac 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ac80,0x0
c000c678:	e8 73 3e ff ff       	call   c00004f0 <memset>
c000c67d:	83 c4 1c             	add    esp,0x1c
c000c680:	c3                   	ret    

c000c681 <KeRegisterAtexit(void (*)(void*), void*)>:
c000c681:	a1 80 ac 02 c0       	mov    eax,ds:0xc002ac80
c000c686:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c68a:	89 14 85 00 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5300],edx
c000c691:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c695:	89 14 85 a0 ac 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5360],edx
c000c69c:	40                   	inc    eax
c000c69d:	a3 80 ac 02 c0       	mov    ds:0xc002ac80,eax
c000c6a2:	83 f8 17             	cmp    eax,0x17
c000c6a5:	7e 0d                	jle    c000c6b4 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000c6a7:	c7 44 24 04 90 25 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022590
c000c6af:	e9 1e 27 00 00       	jmp    c000edd2 <KePanic(char const*)>
c000c6b4:	c3                   	ret    

c000c6b5 <KeExecuteAtexit()>:
c000c6b5:	53                   	push   ebx
c000c6b6:	31 db                	xor    ebx,ebx
c000c6b8:	83 ec 08             	sub    esp,0x8
c000c6bb:	39 1d 80 ac 02 c0    	cmp    DWORD PTR ds:0xc002ac80,ebx
c000c6c1:	7e 50                	jle    c000c713 <KeExecuteAtexit()+0x5e>
c000c6c3:	8b 04 9d 00 ad 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5300]
c000c6ca:	85 c0                	test   eax,eax
c000c6cc:	74 42                	je     c000c710 <KeExecuteAtexit()+0x5b>
c000c6ce:	51                   	push   ecx
c000c6cf:	50                   	push   eax
c000c6d0:	53                   	push   ebx
c000c6d1:	68 a9 25 02 c0       	push   0xc00225a9
c000c6d6:	e8 73 a8 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c6db:	58                   	pop    eax
c000c6dc:	ff 34 9d a0 ac 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5360]
c000c6e3:	ff 14 9d 00 ad 02 c0 	call   DWORD PTR [ebx*4-0x3ffd5300]
c000c6ea:	c7 04 24 cb 25 02 c0 	mov    DWORD PTR [esp],0xc00225cb
c000c6f1:	e8 58 a8 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c6f6:	c7 04 24 5b 29 02 c0 	mov    DWORD PTR [esp],0xc002295b
c000c6fd:	c7 04 9d 00 ad 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd5300],0x0
c000c708:	e8 41 a8 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c70d:	83 c4 10             	add    esp,0x10
c000c710:	43                   	inc    ebx
c000c711:	eb a8                	jmp    c000c6bb <KeExecuteAtexit()+0x6>
c000c713:	83 c4 08             	add    esp,0x8
c000c716:	5b                   	pop    ebx
c000c717:	c3                   	ret    

c000c718 <KeDisplaySplashScreen()>:
c000c718:	53                   	push   ebx
c000c719:	bb 01 00 00 00       	mov    ebx,0x1
c000c71e:	83 ec 08             	sub    esp,0x8
c000c721:	43                   	inc    ebx
c000c722:	0f be 83 ce 25 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdda32]
c000c729:	85 c0                	test   eax,eax
c000c72b:	74 15                	je     c000c742 <KeDisplaySplashScreen()+0x2a>
c000c72d:	83 ec 0c             	sub    esp,0xc
c000c730:	6a 01                	push   0x1
c000c732:	53                   	push   ebx
c000c733:	6a 00                	push   0x0
c000c735:	6a 0f                	push   0xf
c000c737:	50                   	push   eax
c000c738:	e8 77 d4 00 00       	call   c0019bb4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000c73d:	83 c4 20             	add    esp,0x20
c000c740:	eb df                	jmp    c000c721 <KeDisplaySplashScreen()+0x9>
c000c742:	83 c4 08             	add    esp,0x8
c000c745:	5b                   	pop    ebx
c000c746:	c3                   	ret    

c000c747 <KeSetBootMessage(char const*)>:
c000c747:	57                   	push   edi
c000c748:	56                   	push   esi
c000c749:	53                   	push   ebx
c000c74a:	81 ec a4 00 00 00    	sub    esp,0xa4
c000c750:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000c757:	68 9e 00 00 00       	push   0x9e
c000c75c:	6a 00                	push   0x0
c000c75e:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000c762:	56                   	push   esi
c000c763:	e8 88 3d ff ff       	call   c00004f0 <memset>
c000c768:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c76b:	e8 10 3e ff ff       	call   c0000580 <strlen>
c000c770:	ba 50 00 00 00       	mov    edx,0x50
c000c775:	83 c4 10             	add    esp,0x10
c000c778:	31 c9                	xor    ecx,ecx
c000c77a:	29 c2                	sub    edx,eax
c000c77c:	83 e2 fe             	and    edx,0xfffffffe
c000c77f:	01 f2                	add    edx,esi
c000c781:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000c786:	84 c0                	test   al,al
c000c788:	74 0a                	je     c000c794 <KeSetBootMessage(char const*)+0x4d>
c000c78a:	80 cc 07             	or     ah,0x7
c000c78d:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000c791:	41                   	inc    ecx
c000c792:	eb ed                	jmp    c000c781 <KeSetBootMessage(char const*)+0x3a>
c000c794:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000c799:	b9 9e 00 00 00       	mov    ecx,0x9e
c000c79e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c7a0:	50                   	push   eax
c000c7a1:	50                   	push   eax
c000c7a2:	53                   	push   ebx
c000c7a3:	68 e3 25 02 c0       	push   0xc00225e3
c000c7a8:	e8 a1 a7 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c7ad:	81 c4 b0 00 00 00    	add    esp,0xb0
c000c7b3:	5b                   	pop    ebx
c000c7b4:	5e                   	pop    esi
c000c7b5:	5f                   	pop    edi
c000c7b6:	c3                   	ret    

c000c7b7 <__cxa_atexit>:
c000c7b7:	31 c0                	xor    eax,eax
c000c7b9:	c3                   	ret    

c000c7ba <__cxa_finalize>:
c000c7ba:	c3                   	ret    

c000c7bb <__stack_chk_fail>:
c000c7bb:	55                   	push   ebp
c000c7bc:	89 e5                	mov    ebp,esp
c000c7be:	83 ec 10             	sub    esp,0x10
c000c7c1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c7c4:	68 f1 25 02 c0       	push   0xc00225f1
c000c7c9:	e8 80 a7 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c7ce:	58                   	pop    eax
c000c7cf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c7d2:	5a                   	pop    edx
c000c7d3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c7d6:	68 f1 25 02 c0       	push   0xc00225f1
c000c7db:	e8 6e a7 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c7e0:	c7 04 24 f9 25 02 c0 	mov    DWORD PTR [esp],0xc00225f9
c000c7e7:	e8 e6 25 00 00       	call   c000edd2 <KePanic(char const*)>
c000c7ec:	83 c4 10             	add    esp,0x10
c000c7ef:	c9                   	leave  
c000c7f0:	c3                   	ret    

c000c7f1 <__cxa_pure_virtual>:
c000c7f1:	83 ec 18             	sub    esp,0x18
c000c7f4:	68 11 26 02 c0       	push   0xc0022611
c000c7f9:	e8 d4 25 00 00       	call   c000edd2 <KePanic(char const*)>
c000c7fe:	83 c4 1c             	add    esp,0x1c
c000c801:	c3                   	ret    

c000c802 <operator new[](unsigned long)>:
c000c802:	e9 85 22 00 00       	jmp    c000ea8c <malloc>

c000c807 <operator delete(void*, unsigned long)>:
c000c807:	e9 a0 22 00 00       	jmp    c000eaac <rfree>

c000c80c <operator delete[](void*)>:
c000c80c:	e9 9b 22 00 00       	jmp    c000eaac <rfree>

c000c811 <operator delete[](void*, unsigned long)>:
c000c811:	e9 96 22 00 00       	jmp    c000eaac <rfree>
c000c816:	66 90                	xchg   ax,ax

c000c818 <CUnlockScheduler>:
c000c818:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000c820:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000c825:	85 c0                	test   eax,eax
c000c827:	75 03                	jne    c000c82c <CUnlockScheduler+0x14>
c000c829:	fb                   	sti    
c000c82a:	66 90                	xchg   ax,ax
c000c82c:	90                   	nop
c000c82d:	c3                   	ret    
c000c82e:	66 90                	xchg   ax,ax

c000c830 <CLockScheduler>:
c000c830:	fa                   	cli    
c000c831:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000c836:	83 c0 01             	add    eax,0x1
c000c839:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000c83e:	90                   	nop
c000c83f:	c3                   	ret    

c000c840 <CPrintf>:
c000c840:	83 ec 0c             	sub    esp,0xc
c000c843:	83 ec 08             	sub    esp,0x8
c000c846:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c84a:	68 24 26 02 c0       	push   0xc0022624
c000c84f:	e8 fa a6 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c854:	83 c4 10             	add    esp,0x10
c000c857:	90                   	nop
c000c858:	83 c4 0c             	add    esp,0xc
c000c85b:	c3                   	ret    

c000c85c <CmOpen(char const*)>:
c000c85c:	57                   	push   edi
c000c85d:	56                   	push   esi
c000c85e:	53                   	push   ebx
c000c85f:	83 ec 1c             	sub    esp,0x1c
c000c862:	6a 30                	push   0x30
c000c864:	e8 23 22 00 00       	call   c000ea8c <malloc>
c000c869:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000c870:	89 c3                	mov    ebx,eax
c000c872:	e8 15 22 00 00       	call   c000ea8c <malloc>
c000c877:	83 c4 0c             	add    esp,0xc
c000c87a:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c000c880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c884:	89 c6                	mov    esi,eax
c000c886:	50                   	push   eax
c000c887:	e8 a0 b8 ff ff       	call   c000812c <File::File(char const*, Process*)>
c000c88c:	83 c4 0c             	add    esp,0xc
c000c88f:	89 33                	mov    DWORD PTR [ebx],esi
c000c891:	8d 44 24 07          	lea    eax,[esp+0x7]
c000c895:	50                   	push   eax
c000c896:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c89a:	50                   	push   eax
c000c89b:	56                   	push   esi
c000c89c:	e8 ab bb ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c000c8a1:	5a                   	pop    edx
c000c8a2:	59                   	pop    ecx
c000c8a3:	6a 01                	push   0x1
c000c8a5:	ff 33                	push   DWORD PTR [ebx]
c000c8a7:	e8 9e b8 ff ff       	call   c000814a <File::open(FileOpenMode)>
c000c8ac:	5e                   	pop    esi
c000c8ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b1:	e8 d6 21 00 00       	call   c000ea8c <malloc>
c000c8b6:	5a                   	pop    edx
c000c8b7:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c8bb:	89 c7                	mov    edi,eax
c000c8bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c8bf:	8b 10                	mov    edx,DWORD PTR [eax]
c000c8c1:	56                   	push   esi
c000c8c2:	57                   	push   edi
c000c8c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c8c7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c8cb:	50                   	push   eax
c000c8cc:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c8cf:	83 c4 14             	add    esp,0x14
c000c8d2:	ff 33                	push   DWORD PTR [ebx]
c000c8d4:	e8 cf b8 ff ff       	call   c00081a8 <File::close()>
c000c8d9:	59                   	pop    ecx
c000c8da:	58                   	pop    eax
c000c8db:	6a 13                	push   0x13
c000c8dd:	ff 33                	push   DWORD PTR [ebx]
c000c8df:	e8 66 b8 ff ff       	call   c000814a <File::open(FileOpenMode)>
c000c8e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c8e6:	8b 10                	mov    edx,DWORD PTR [eax]
c000c8e8:	89 34 24             	mov    DWORD PTR [esp],esi
c000c8eb:	57                   	push   edi
c000c8ec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c8f0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c8f4:	50                   	push   eax
c000c8f5:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c8f8:	83 c4 14             	add    esp,0x14
c000c8fb:	57                   	push   edi
c000c8fc:	e8 9b 21 00 00       	call   c000ea9c <free>
c000c901:	83 c4 10             	add    esp,0x10
c000c904:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c907:	75 10                	jne    c000c919 <CmOpen(char const*)+0xbd>
c000c909:	83 ec 0c             	sub    esp,0xc
c000c90c:	68 27 26 02 c0       	push   0xc0022627
c000c911:	e8 bc 24 00 00       	call   c000edd2 <KePanic(char const*)>
c000c916:	83 c4 10             	add    esp,0x10
c000c919:	50                   	push   eax
c000c91a:	6a 00                	push   0x0
c000c91c:	6a 00                	push   0x0
c000c91e:	ff 33                	push   DWORD PTR [ebx]
c000c920:	8d 7b 05             	lea    edi,[ebx+0x5]
c000c923:	e8 e0 b8 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000c928:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c92a:	8b 10                	mov    edx,DWORD PTR [eax]
c000c92c:	89 34 24             	mov    DWORD PTR [esp],esi
c000c92f:	57                   	push   edi
c000c930:	6a 00                	push   0x0
c000c932:	6a 2b                	push   0x2b
c000c934:	50                   	push   eax
c000c935:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c938:	83 c4 1c             	add    esp,0x1c
c000c93b:	6a 00                	push   0x0
c000c93d:	6a 00                	push   0x0
c000c93f:	ff 33                	push   DWORD PTR [ebx]
c000c941:	e8 c2 b8 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000c946:	83 c4 0c             	add    esp,0xc
c000c949:	6a 08                	push   0x8
c000c94b:	68 38 26 02 c0       	push   0xc0022638
c000c950:	57                   	push   edi
c000c951:	e8 2a 3a ff ff       	call   c0000380 <memcmp>
c000c956:	83 c4 10             	add    esp,0x10
c000c959:	85 c0                	test   eax,eax
c000c95b:	74 10                	je     c000c96d <CmOpen(char const*)+0x111>
c000c95d:	83 ec 0c             	sub    esp,0xc
c000c960:	68 41 26 02 c0       	push   0xc0022641
c000c965:	e8 68 24 00 00       	call   c000edd2 <KePanic(char const*)>
c000c96a:	83 c4 10             	add    esp,0x10
c000c96d:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000c971:	83 c4 10             	add    esp,0x10
c000c974:	89 d8                	mov    eax,ebx
c000c976:	5b                   	pop    ebx
c000c977:	5e                   	pop    esi
c000c978:	5f                   	pop    edi
c000c979:	c3                   	ret    

c000c97a <CmClose(Reghive_Tag*)>:
c000c97a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c97e:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000c982:	74 0b                	je     c000c98f <CmClose(Reghive_Tag*)+0x15>
c000c984:	8b 00                	mov    eax,DWORD PTR [eax]
c000c986:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c98a:	e9 19 b8 ff ff       	jmp    c00081a8 <File::close()>
c000c98f:	c3                   	ret    

c000c990 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000c990:	53                   	push   ebx
c000c991:	83 ec 18             	sub    esp,0x18
c000c994:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c998:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c99c:	74 29                	je     c000c9c7 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000c99e:	50                   	push   eax
c000c99f:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000c9a4:	99                   	cdq    
c000c9a5:	52                   	push   edx
c000c9a6:	50                   	push   eax
c000c9a7:	ff 33                	push   DWORD PTR [ebx]
c000c9a9:	e8 5a b8 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000c9ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c9b0:	5a                   	pop    edx
c000c9b1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c9b5:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9b7:	51                   	push   ecx
c000c9b8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c9bc:	6a 00                	push   0x0
c000c9be:	6a 2b                	push   0x2b
c000c9c0:	50                   	push   eax
c000c9c1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c9c4:	83 c4 20             	add    esp,0x20
c000c9c7:	83 c4 18             	add    esp,0x18
c000c9ca:	5b                   	pop    ebx
c000c9cb:	c3                   	ret    

c000c9cc <CmGetString(Reghive_Tag*, int, char*)>:
c000c9cc:	55                   	push   ebp
c000c9cd:	57                   	push   edi
c000c9ce:	56                   	push   esi
c000c9cf:	53                   	push   ebx
c000c9d0:	31 db                	xor    ebx,ebx
c000c9d2:	83 ec 70             	sub    esp,0x70
c000c9d5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000c9d9:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000c9e0:	50                   	push   eax
c000c9e1:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000c9e8:	55                   	push   ebp
c000c9e9:	e8 a2 ff ff ff       	call   c000c990 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c9ee:	83 c4 10             	add    esp,0x10
c000c9f1:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000c9f6:	c1 e0 08             	shl    eax,0x8
c000c9f9:	89 c2                	mov    edx,eax
c000c9fb:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000ca00:	09 d0                	or     eax,edx
c000ca02:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000ca07:	c1 e0 08             	shl    eax,0x8
c000ca0a:	09 d0                	or     eax,edx
c000ca0c:	74 25                	je     c000ca33 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000ca0e:	52                   	push   edx
c000ca0f:	8d 54 24 39          	lea    edx,[esp+0x39]
c000ca13:	52                   	push   edx
c000ca14:	6b fb 0d             	imul   edi,ebx,0xd
c000ca17:	50                   	push   eax
c000ca18:	55                   	push   ebp
c000ca19:	e8 72 ff ff ff       	call   c000c990 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ca1e:	8d 74 24 49          	lea    esi,[esp+0x49]
c000ca22:	b9 27 00 00 00       	mov    ecx,0x27
c000ca27:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000ca2e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ca30:	83 c4 10             	add    esp,0x10
c000ca33:	83 c3 03             	add    ebx,0x3
c000ca36:	83 fb 15             	cmp    ebx,0x15
c000ca39:	75 b6                	jne    c000c9f1 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000ca3b:	83 c4 6c             	add    esp,0x6c
c000ca3e:	5b                   	pop    ebx
c000ca3f:	5e                   	pop    esi
c000ca40:	5f                   	pop    edi
c000ca41:	5d                   	pop    ebp
c000ca42:	c3                   	ret    

c000ca43 <CmEnterDirectory(Reghive_Tag*, int)>:
c000ca43:	83 ec 40             	sub    esp,0x40
c000ca46:	8d 44 24 09          	lea    eax,[esp+0x9]
c000ca4a:	50                   	push   eax
c000ca4b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ca4f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ca53:	e8 38 ff ff ff       	call   c000c990 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ca58:	83 c4 10             	add    esp,0x10
c000ca5b:	83 c8 ff             	or     eax,0xffffffff
c000ca5e:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000ca63:	75 19                	jne    c000ca7e <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000ca65:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ca6a:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000ca6f:	c1 e0 08             	shl    eax,0x8
c000ca72:	09 c2                	or     edx,eax
c000ca74:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000ca79:	c1 e0 10             	shl    eax,0x10
c000ca7c:	09 d0                	or     eax,edx
c000ca7e:	83 c4 3c             	add    esp,0x3c
c000ca81:	c3                   	ret    

c000ca82 <CmGetNext(Reghive_Tag*, int)>:
c000ca82:	83 ec 40             	sub    esp,0x40
c000ca85:	8d 44 24 09          	lea    eax,[esp+0x9]
c000ca89:	50                   	push   eax
c000ca8a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ca8e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ca92:	e8 f9 fe ff ff       	call   c000c990 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ca97:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000ca9c:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000caa1:	c1 e0 08             	shl    eax,0x8
c000caa4:	09 c2                	or     edx,eax
c000caa6:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000caab:	83 c4 4c             	add    esp,0x4c
c000caae:	c1 e0 10             	shl    eax,0x10
c000cab1:	09 d0                	or     eax,edx
c000cab3:	c3                   	ret    

c000cab4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000cab4:	53                   	push   ebx
c000cab5:	83 ec 18             	sub    esp,0x18
c000cab8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000cabc:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000cac0:	74 29                	je     c000caeb <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000cac2:	50                   	push   eax
c000cac3:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000cac8:	99                   	cdq    
c000cac9:	52                   	push   edx
c000caca:	50                   	push   eax
c000cacb:	ff 33                	push   DWORD PTR [ebx]
c000cacd:	e8 36 b7 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000cad2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cad4:	5a                   	pop    edx
c000cad5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000cad9:	8b 10                	mov    edx,DWORD PTR [eax]
c000cadb:	51                   	push   ecx
c000cadc:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000cae0:	6a 00                	push   0x0
c000cae2:	6a 2b                	push   0x2b
c000cae4:	50                   	push   eax
c000cae5:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000cae8:	83 c4 20             	add    esp,0x20
c000caeb:	83 c4 18             	add    esp,0x18
c000caee:	5b                   	pop    ebx
c000caef:	c3                   	ret    

c000caf0 <CmFreeExtent(Reghive_Tag*, int)>:
c000caf0:	53                   	push   ebx
c000caf1:	83 ec 3c             	sub    esp,0x3c
c000caf4:	6a 2b                	push   0x2b
c000caf6:	6a 00                	push   0x0
c000caf8:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000cafc:	53                   	push   ebx
c000cafd:	e8 ee 39 ff ff       	call   c00004f0 <memset>
c000cb02:	83 c4 0c             	add    esp,0xc
c000cb05:	53                   	push   ebx
c000cb06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cb0a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cb0e:	e8 a1 ff ff ff       	call   c000cab4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cb13:	83 c4 48             	add    esp,0x48
c000cb16:	5b                   	pop    ebx
c000cb17:	c3                   	ret    

c000cb18 <CmUpdateHeader(Reghive_Tag*)>:
c000cb18:	83 ec 0c             	sub    esp,0xc
c000cb1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1f:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000cb23:	74 10                	je     c000cb35 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000cb25:	52                   	push   edx
c000cb26:	8d 50 05             	lea    edx,[eax+0x5]
c000cb29:	52                   	push   edx
c000cb2a:	6a 00                	push   0x0
c000cb2c:	50                   	push   eax
c000cb2d:	e8 82 ff ff ff       	call   c000cab4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cb32:	83 c4 10             	add    esp,0x10
c000cb35:	83 c4 0c             	add    esp,0xc
c000cb38:	c3                   	ret    

c000cb39 <CmExpand(Reghive_Tag*, int)>:
c000cb39:	55                   	push   ebp
c000cb3a:	57                   	push   edi
c000cb3b:	83 cf ff             	or     edi,0xffffffff
c000cb3e:	56                   	push   esi
c000cb3f:	53                   	push   ebx
c000cb40:	83 ec 3c             	sub    esp,0x3c
c000cb43:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000cb47:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000cb4b:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000cb4f:	74 59                	je     c000cbaa <CmExpand(Reghive_Tag*, int)+0x71>
c000cb51:	50                   	push   eax
c000cb52:	31 d2                	xor    edx,edx
c000cb54:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000cb58:	31 ff                	xor    edi,edi
c000cb5a:	52                   	push   edx
c000cb5b:	50                   	push   eax
c000cb5c:	ff 33                	push   DWORD PTR [ebx]
c000cb5e:	e8 a5 b6 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000cb63:	83 c4 0c             	add    esp,0xc
c000cb66:	6a 2b                	push   0x2b
c000cb68:	6a 00                	push   0x0
c000cb6a:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c000cb6e:	55                   	push   ebp
c000cb6f:	e8 7c 39 ff ff       	call   c00004f0 <memset>
c000cb74:	83 c4 10             	add    esp,0x10
c000cb77:	39 f7                	cmp    edi,esi
c000cb79:	7d 1b                	jge    c000cb96 <CmExpand(Reghive_Tag*, int)+0x5d>
c000cb7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb7d:	83 ec 0c             	sub    esp,0xc
c000cb80:	47                   	inc    edi
c000cb81:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000cb85:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb87:	51                   	push   ecx
c000cb88:	55                   	push   ebp
c000cb89:	6a 00                	push   0x0
c000cb8b:	6a 2b                	push   0x2b
c000cb8d:	50                   	push   eax
c000cb8e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000cb91:	83 c4 20             	add    esp,0x20
c000cb94:	eb e1                	jmp    c000cb77 <CmExpand(Reghive_Tag*, int)+0x3e>
c000cb96:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c000cb99:	83 ec 0c             	sub    esp,0xc
c000cb9c:	01 fe                	add    esi,edi
c000cb9e:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c000cba1:	53                   	push   ebx
c000cba2:	e8 71 ff ff ff       	call   c000cb18 <CmUpdateHeader(Reghive_Tag*)>
c000cba7:	83 c4 10             	add    esp,0x10
c000cbaa:	83 c4 3c             	add    esp,0x3c
c000cbad:	89 f8                	mov    eax,edi
c000cbaf:	5b                   	pop    ebx
c000cbb0:	5e                   	pop    esi
c000cbb1:	5f                   	pop    edi
c000cbb2:	5d                   	pop    ebp
c000cbb3:	c3                   	ret    

c000cbb4 <CmFindUnusedExtent(Reghive_Tag*)>:
c000cbb4:	55                   	push   ebp
c000cbb5:	57                   	push   edi
c000cbb6:	56                   	push   esi
c000cbb7:	53                   	push   ebx
c000cbb8:	83 cb ff             	or     ebx,0xffffffff
c000cbbb:	83 ec 1c             	sub    esp,0x1c
c000cbbe:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000cbc2:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000cbc6:	74 68                	je     c000cc30 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000cbc8:	51                   	push   ecx
c000cbc9:	be 2b 00 00 00       	mov    esi,0x2b
c000cbce:	6a 00                	push   0x0
c000cbd0:	31 ff                	xor    edi,edi
c000cbd2:	6a 00                	push   0x0
c000cbd4:	31 db                	xor    ebx,ebx
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 2a b6 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000cbde:	83 c4 10             	add    esp,0x10
c000cbe1:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000cbe4:	76 3b                	jbe    c000cc21 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000cbe6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe9:	83 ec 0c             	sub    esp,0xc
c000cbec:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000cbf0:	8b 10                	mov    edx,DWORD PTR [eax]
c000cbf2:	51                   	push   ecx
c000cbf3:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000cbf7:	51                   	push   ecx
c000cbf8:	6a 00                	push   0x0
c000cbfa:	6a 01                	push   0x1
c000cbfc:	50                   	push   eax
c000cbfd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cc00:	83 c4 20             	add    esp,0x20
c000cc03:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000cc08:	74 26                	je     c000cc30 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000cc0a:	52                   	push   edx
c000cc0b:	43                   	inc    ebx
c000cc0c:	57                   	push   edi
c000cc0d:	56                   	push   esi
c000cc0e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cc11:	e8 f2 b5 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000cc16:	83 c6 2b             	add    esi,0x2b
c000cc19:	83 d7 00             	adc    edi,0x0
c000cc1c:	83 c4 10             	add    esp,0x10
c000cc1f:	eb c0                	jmp    c000cbe1 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000cc21:	50                   	push   eax
c000cc22:	50                   	push   eax
c000cc23:	6a 40                	push   0x40
c000cc25:	55                   	push   ebp
c000cc26:	e8 0e ff ff ff       	call   c000cb39 <CmExpand(Reghive_Tag*, int)>
c000cc2b:	83 c4 10             	add    esp,0x10
c000cc2e:	89 c3                	mov    ebx,eax
c000cc30:	83 c4 1c             	add    esp,0x1c
c000cc33:	89 d8                	mov    eax,ebx
c000cc35:	5b                   	pop    ebx
c000cc36:	5e                   	pop    esi
c000cc37:	5f                   	pop    edi
c000cc38:	5d                   	pop    ebp
c000cc39:	c3                   	ret    

c000cc3a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000cc3a:	55                   	push   ebp
c000cc3b:	57                   	push   edi
c000cc3c:	56                   	push   esi
c000cc3d:	53                   	push   ebx
c000cc3e:	81 ec 88 00 00 00    	sub    esp,0x88
c000cc44:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000cc4b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cc52:	e8 5d ff ff ff       	call   c000cbb4 <CmFindUnusedExtent(Reghive_Tag*)>
c000cc57:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cc5b:	83 c4 0c             	add    esp,0xc
c000cc5e:	6a 2b                	push   0x2b
c000cc60:	6a 00                	push   0x0
c000cc62:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000cc66:	55                   	push   ebp
c000cc67:	e8 84 38 ff ff       	call   c00004f0 <memset>
c000cc6c:	83 c4 10             	add    esp,0x10
c000cc6f:	85 db                	test   ebx,ebx
c000cc71:	74 12                	je     c000cc85 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000cc73:	51                   	push   ecx
c000cc74:	55                   	push   ebp
c000cc75:	53                   	push   ebx
c000cc76:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cc7d:	e8 0e fd ff ff       	call   c000c990 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cc82:	83 c4 10             	add    esp,0x10
c000cc85:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000cc89:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000cc90:	b9 2b 00 00 00       	mov    ecx,0x2b
c000cc95:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cc97:	85 db                	test   ebx,ebx
c000cc99:	74 49                	je     c000cce4 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000cc9b:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000cca0:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000cca5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cca9:	c1 e0 08             	shl    eax,0x8
c000ccac:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000ccb2:	09 c8                	or     eax,ecx
c000ccb4:	74 11                	je     c000ccc7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000ccb6:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000ccba:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000ccbe:	c1 e8 10             	shr    eax,0x10
c000ccc1:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000ccc5:	eb 0f                	jmp    c000ccd6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000ccc7:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cccc:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000ccd1:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000ccd6:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000ccda:	c1 ea 08             	shr    edx,0x8
c000ccdd:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000cce2:	eb 0f                	jmp    c000ccf3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000cce4:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cce9:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000ccee:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000ccf3:	52                   	push   edx
c000ccf4:	8d 44 24 49          	lea    eax,[esp+0x49]
c000ccf8:	50                   	push   eax
c000ccf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ccfd:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cd04:	e8 ab fd ff ff       	call   c000cab4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cd09:	83 c4 10             	add    esp,0x10
c000cd0c:	85 db                	test   ebx,ebx
c000cd0e:	74 12                	je     c000cd22 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000cd10:	50                   	push   eax
c000cd11:	55                   	push   ebp
c000cd12:	53                   	push   ebx
c000cd13:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cd1a:	e8 95 fd ff ff       	call   c000cab4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cd1f:	83 c4 10             	add    esp,0x10
c000cd22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cd26:	83 c4 7c             	add    esp,0x7c
c000cd29:	5b                   	pop    ebx
c000cd2a:	5e                   	pop    esi
c000cd2b:	5f                   	pop    edi
c000cd2c:	5d                   	pop    ebp
c000cd2d:	c3                   	ret    

c000cd2e <CmSetString(Reghive_Tag*, int, char const*)>:
c000cd2e:	55                   	push   ebp
c000cd2f:	57                   	push   edi
c000cd30:	56                   	push   esi
c000cd31:	53                   	push   ebx
c000cd32:	bb 27 00 00 00       	mov    ebx,0x27
c000cd37:	81 ec 88 00 00 00    	sub    esp,0x88
c000cd3d:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c000cd44:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000cd4b:	e8 30 38 ff ff       	call   c0000580 <strlen>
c000cd50:	8d 48 26             	lea    ecx,[eax+0x26]
c000cd53:	89 c8                	mov    eax,ecx
c000cd55:	99                   	cdq    
c000cd56:	f7 fb                	idiv   ebx
c000cd58:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cd5c:	83 c4 10             	add    esp,0x10
c000cd5f:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000cd65:	7e 10                	jle    c000cd77 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000cd67:	83 ec 0c             	sub    esp,0xc
c000cd6a:	68 52 26 02 c0       	push   0xc0022652
c000cd6f:	e8 5e 20 00 00       	call   c000edd2 <KePanic(char const*)>
c000cd74:	83 c4 10             	add    esp,0x10
c000cd77:	53                   	push   ebx
c000cd78:	31 ed                	xor    ebp,ebp
c000cd7a:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000cd7e:	53                   	push   ebx
c000cd7f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cd86:	57                   	push   edi
c000cd87:	e8 04 fc ff ff       	call   c000c990 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cd8c:	83 c4 10             	add    esp,0x10
c000cd8f:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c000cd93:	89 f0                	mov    eax,esi
c000cd95:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c000cd99:	c1 e0 08             	shl    eax,0x8
c000cd9c:	09 c6                	or     esi,eax
c000cd9e:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000cda2:	c1 e6 08             	shl    esi,0x8
c000cda5:	09 c6                	or     esi,eax
c000cda7:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000cdab:	7e 72                	jle    c000ce1f <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c000cdad:	85 f6                	test   esi,esi
c000cdaf:	75 25                	jne    c000cdd6 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000cdb1:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000cdb6:	8d 44 24 45          	lea    eax,[esp+0x45]
c000cdba:	50                   	push   eax
c000cdbb:	6a 00                	push   0x0
c000cdbd:	6a 00                	push   0x0
c000cdbf:	57                   	push   edi
c000cdc0:	e8 75 fe ff ff       	call   c000cc3a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000cdc5:	83 c4 10             	add    esp,0x10
c000cdc8:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000cdcb:	89 c6                	mov    esi,eax
c000cdcd:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000cdd0:	c1 f8 10             	sar    eax,0x10
c000cdd3:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000cdd6:	51                   	push   ecx
c000cdd7:	8d 54 24 49          	lea    edx,[esp+0x49]
c000cddb:	52                   	push   edx
c000cddc:	56                   	push   esi
c000cddd:	57                   	push   edi
c000cdde:	e8 ad fb ff ff       	call   c000c990 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cde3:	83 c4 0c             	add    esp,0xc
c000cde6:	6a 27                	push   0x27
c000cde8:	6a 00                	push   0x0
c000cdea:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000cdee:	51                   	push   ecx
c000cdef:	e8 fc 36 ff ff       	call   c00004f0 <memset>
c000cdf4:	6b c5 27             	imul   eax,ebp,0x27
c000cdf7:	83 c4 0c             	add    esp,0xc
c000cdfa:	6a 27                	push   0x27
c000cdfc:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000ce03:	50                   	push   eax
c000ce04:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000ce08:	51                   	push   ecx
c000ce09:	e8 82 38 ff ff       	call   c0000690 <strncpy>
c000ce0e:	83 c4 0c             	add    esp,0xc
c000ce11:	8d 54 24 49          	lea    edx,[esp+0x49]
c000ce15:	52                   	push   edx
c000ce16:	56                   	push   esi
c000ce17:	57                   	push   edi
c000ce18:	e8 97 fc ff ff       	call   c000cab4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ce1d:	eb 19                	jmp    c000ce38 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c000ce1f:	85 f6                	test   esi,esi
c000ce21:	74 18                	je     c000ce3b <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c000ce23:	52                   	push   edx
c000ce24:	52                   	push   edx
c000ce25:	56                   	push   esi
c000ce26:	57                   	push   edi
c000ce27:	e8 c4 fc ff ff       	call   c000caf0 <CmFreeExtent(Reghive_Tag*, int)>
c000ce2c:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000ce30:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000ce34:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000ce38:	83 c4 10             	add    esp,0x10
c000ce3b:	45                   	inc    ebp
c000ce3c:	83 c3 03             	add    ebx,0x3
c000ce3f:	83 fd 07             	cmp    ebp,0x7
c000ce42:	0f 85 47 ff ff ff    	jne    c000cd8f <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000ce48:	50                   	push   eax
c000ce49:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000ce4d:	50                   	push   eax
c000ce4e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000ce55:	57                   	push   edi
c000ce56:	e8 59 fc ff ff       	call   c000cab4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ce5b:	81 c4 8c 00 00 00    	add    esp,0x8c
c000ce61:	5b                   	pop    ebx
c000ce62:	5e                   	pop    esi
c000ce63:	5f                   	pop    edi
c000ce64:	5d                   	pop    ebp
c000ce65:	c3                   	ret    

c000ce66 <CmGetMatch(char*, char*, bool, bool*)>:
c000ce66:	56                   	push   esi
c000ce67:	53                   	push   ebx
c000ce68:	50                   	push   eax
c000ce69:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ce6e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ce72:	74 25                	je     c000ce99 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000ce74:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000ce77:	31 db                	xor    ebx,ebx
c000ce79:	50                   	push   eax
c000ce7a:	50                   	push   eax
c000ce7b:	8d 04 9d c0 49 02 c0 	lea    eax,[ebx*4-0x3ffdb640]
c000ce82:	50                   	push   eax
c000ce83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce87:	e8 f4 38 ff ff       	call   c0000780 <strcmp>
c000ce8c:	83 c4 10             	add    esp,0x10
c000ce8f:	85 c0                	test   eax,eax
c000ce91:	74 2e                	je     c000cec1 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000ce93:	43                   	inc    ebx
c000ce94:	83 fb 3f             	cmp    ebx,0x3f
c000ce97:	75 e0                	jne    c000ce79 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000ce99:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000ce9c:	31 db                	xor    ebx,ebx
c000ce9e:	51                   	push   ecx
c000ce9f:	51                   	push   ecx
c000cea0:	8d 04 9d c0 49 02 c0 	lea    eax,[ebx*4-0x3ffdb640]
c000cea7:	50                   	push   eax
c000cea8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ceac:	e8 cf 38 ff ff       	call   c0000780 <strcmp>
c000ceb1:	83 c4 10             	add    esp,0x10
c000ceb4:	85 c0                	test   eax,eax
c000ceb6:	74 09                	je     c000cec1 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000ceb8:	43                   	inc    ebx
c000ceb9:	83 fb 3f             	cmp    ebx,0x3f
c000cebc:	75 e0                	jne    c000ce9e <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000cebe:	83 cb ff             	or     ebx,0xffffffff
c000cec1:	5a                   	pop    edx
c000cec2:	89 d8                	mov    eax,ebx
c000cec4:	5b                   	pop    ebx
c000cec5:	5e                   	pop    esi
c000cec6:	c3                   	ret    

c000cec7 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000cec7:	55                   	push   ebp
c000cec8:	31 c0                	xor    eax,eax
c000ceca:	57                   	push   edi
c000cecb:	56                   	push   esi
c000cecc:	53                   	push   ebx
c000cecd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ced1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ced5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000ced9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cedd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000cedf:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000cee2:	83 fd 1f             	cmp    ebp,0x1f
c000cee5:	7f 0b                	jg     c000cef2 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000cee7:	0f b6 c2             	movzx  eax,dl
c000ceea:	d3 e0                	shl    eax,cl
c000ceec:	09 07                	or     DWORD PTR [edi],eax
c000ceee:	b0 01                	mov    al,0x1
c000cef0:	01 33                	add    DWORD PTR [ebx],esi
c000cef2:	5b                   	pop    ebx
c000cef3:	5e                   	pop    esi
c000cef4:	5f                   	pop    edi
c000cef5:	5d                   	pop    ebp
c000cef6:	c3                   	ret    

c000cef7 <CmGetShift(unsigned int*, int*, int, bool*)>:
c000cef7:	57                   	push   edi
c000cef8:	56                   	push   esi
c000cef9:	53                   	push   ebx
c000cefa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cefe:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000cf02:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000cf06:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cf0a:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000cf0c:	7c 17                	jl     c000cf25 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000cf0e:	8b 17                	mov    edx,DWORD PTR [edi]
c000cf10:	b8 01 00 00 00       	mov    eax,0x1
c000cf15:	d3 e0                	shl    eax,cl
c000cf17:	48                   	dec    eax
c000cf18:	21 d0                	and    eax,edx
c000cf1a:	d3 ea                	shr    edx,cl
c000cf1c:	89 17                	mov    DWORD PTR [edi],edx
c000cf1e:	29 0b                	sub    DWORD PTR [ebx],ecx
c000cf20:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000cf23:	eb 05                	jmp    c000cf2a <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000cf25:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000cf28:	31 c0                	xor    eax,eax
c000cf2a:	5b                   	pop    ebx
c000cf2b:	5e                   	pop    esi
c000cf2c:	5f                   	pop    edi
c000cf2d:	c3                   	ret    

c000cf2e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000cf2e:	83 ec 40             	sub    esp,0x40
c000cf31:	8d 44 24 09          	lea    eax,[esp+0x9]
c000cf35:	50                   	push   eax
c000cf36:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cf3a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cf3e:	e8 4d fa ff ff       	call   c000c990 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cf43:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000cf47:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000cf4b:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000cf4f:	89 10                	mov    DWORD PTR [eax],edx
c000cf51:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000cf54:	83 c4 4c             	add    esp,0x4c
c000cf57:	c3                   	ret    

c000cf58 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000cf58:	55                   	push   ebp
c000cf59:	57                   	push   edi
c000cf5a:	56                   	push   esi
c000cf5b:	53                   	push   ebx
c000cf5c:	83 ec 40             	sub    esp,0x40
c000cf5f:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000cf63:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000cf67:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000cf6b:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cf6f:	53                   	push   ebx
c000cf70:	56                   	push   esi
c000cf71:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000cf75:	e8 16 fa ff ff       	call   c000c990 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cf7a:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000cf7e:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000cf82:	83 c4 0c             	add    esp,0xc
c000cf85:	53                   	push   ebx
c000cf86:	56                   	push   esi
c000cf87:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000cf8b:	e8 24 fb ff ff       	call   c000cab4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cf90:	83 c4 4c             	add    esp,0x4c
c000cf93:	5b                   	pop    ebx
c000cf94:	5e                   	pop    esi
c000cf95:	5f                   	pop    edi
c000cf96:	5d                   	pop    ebp
c000cf97:	c3                   	ret    

c000cf98 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000cf98:	55                   	push   ebp
c000cf99:	57                   	push   edi
c000cf9a:	56                   	push   esi
c000cf9b:	31 f6                	xor    esi,esi
c000cf9d:	53                   	push   ebx
c000cf9e:	31 db                	xor    ebx,ebx
c000cfa0:	83 ec 40             	sub    esp,0x40
c000cfa3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cfab:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cfb3:	6a 12                	push   0x12
c000cfb5:	68 ee 00 00 00       	push   0xee
c000cfba:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000cfbe:	e8 2d 35 ff ff       	call   c00004f0 <memset>
c000cfc3:	83 c4 10             	add    esp,0x10
c000cfc6:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000cfca:	6a 08                	push   0x8
c000cfcc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000cfd0:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000cfd4:	50                   	push   eax
c000cfd5:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cfd9:	55                   	push   ebp
c000cfda:	57                   	push   edi
c000cfdb:	e8 e7 fe ff ff       	call   c000cec7 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000cfe0:	83 c4 10             	add    esp,0x10
c000cfe3:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000cfe7:	50                   	push   eax
c000cfe8:	6a 06                	push   0x6
c000cfea:	55                   	push   ebp
c000cfeb:	57                   	push   edi
c000cfec:	e8 06 ff ff ff       	call   c000cef7 <CmGetShift(unsigned int*, int*, int, bool*)>
c000cff1:	83 c4 10             	add    esp,0x10
c000cff4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000cff9:	74 07                	je     c000d002 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000cffb:	46                   	inc    esi
c000cffc:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000d000:	eb e1                	jmp    c000cfe3 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000d002:	43                   	inc    ebx
c000d003:	83 fb 12             	cmp    ebx,0x12
c000d006:	75 c2                	jne    c000cfca <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000d008:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d00c:	31 f6                	xor    esi,esi
c000d00e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000d011:	50                   	push   eax
c000d012:	50                   	push   eax
c000d013:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c000d018:	46                   	inc    esi
c000d019:	8d 04 85 c0 49 02 c0 	lea    eax,[eax*4-0x3ffdb640]
c000d020:	50                   	push   eax
c000d021:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000d025:	e8 46 38 ff ff       	call   c0000870 <strcat>
c000d02a:	83 c4 10             	add    esp,0x10
c000d02d:	83 fe 18             	cmp    esi,0x18
c000d030:	75 df                	jne    c000d011 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000d032:	83 c4 3c             	add    esp,0x3c
c000d035:	31 c0                	xor    eax,eax
c000d037:	5b                   	pop    ebx
c000d038:	5e                   	pop    esi
c000d039:	5f                   	pop    edi
c000d03a:	5d                   	pop    ebp
c000d03b:	c3                   	ret    

c000d03c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000d03c:	83 ec 40             	sub    esp,0x40
c000d03f:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d043:	50                   	push   eax
c000d044:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d048:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d04c:	e8 3f f9 ff ff       	call   c000c990 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d051:	58                   	pop    eax
c000d052:	5a                   	pop    edx
c000d053:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000d057:	8d 44 24 15          	lea    eax,[esp+0x15]
c000d05b:	50                   	push   eax
c000d05c:	e8 37 ff ff ff       	call   c000cf98 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000d061:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000d066:	83 c4 4c             	add    esp,0x4c
c000d069:	c3                   	ret    

c000d06a <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000d06a:	55                   	push   ebp
c000d06b:	57                   	push   edi
c000d06c:	56                   	push   esi
c000d06d:	53                   	push   ebx
c000d06e:	31 db                	xor    ebx,ebx
c000d070:	83 ec 70             	sub    esp,0x70
c000d073:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000d07a:	6a 30                	push   0x30
c000d07c:	6a 00                	push   0x0
c000d07e:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000d082:	56                   	push   esi
c000d083:	e8 68 34 ff ff       	call   c00004f0 <memset>
c000d088:	83 c4 10             	add    esp,0x10
c000d08b:	83 ec 0c             	sub    esp,0xc
c000d08e:	57                   	push   edi
c000d08f:	e8 ec 34 ff ff       	call   c0000580 <strlen>
c000d094:	83 c4 10             	add    esp,0x10
c000d097:	39 d8                	cmp    eax,ebx
c000d099:	76 16                	jbe    c000d0b1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000d09b:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000d09f:	83 ec 0c             	sub    esp,0xc
c000d0a2:	50                   	push   eax
c000d0a3:	e8 b8 38 ff ff       	call   c0000960 <toupper>
c000d0a8:	83 c4 10             	add    esp,0x10
c000d0ab:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000d0ae:	43                   	inc    ebx
c000d0af:	eb da                	jmp    c000d08b <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000d0b1:	52                   	push   edx
c000d0b2:	31 db                	xor    ebx,ebx
c000d0b4:	6a 18                	push   0x18
c000d0b6:	31 ff                	xor    edi,edi
c000d0b8:	6a 3f                	push   0x3f
c000d0ba:	8d 44 24 24          	lea    eax,[esp+0x24]
c000d0be:	50                   	push   eax
c000d0bf:	e8 2c 34 ff ff       	call   c00004f0 <memset>
c000d0c4:	83 c4 10             	add    esp,0x10
c000d0c7:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c000d0cb:	8d 74 24 10          	lea    esi,[esp+0x10]
c000d0cf:	84 c0                	test   al,al
c000d0d1:	0f 84 af 00 00 00    	je     c000d186 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000d0d7:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000d0db:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d0de:	83 ec 0c             	sub    esp,0xc
c000d0e1:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c000d0e6:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000d0ea:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000d0ee:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000d0f3:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000d0f7:	56                   	push   esi
c000d0f8:	e8 83 34 ff ff       	call   c0000580 <strlen>
c000d0fd:	83 c4 10             	add    esp,0x10
c000d100:	85 c0                	test   eax,eax
c000d102:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d106:	74 0b                	je     c000d113 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000d108:	50                   	push   eax
c000d109:	6a 01                	push   0x1
c000d10b:	56                   	push   esi
c000d10c:	8d 44 24 20          	lea    eax,[esp+0x20]
c000d110:	50                   	push   eax
c000d111:	eb 0a                	jmp    c000d11d <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000d113:	50                   	push   eax
c000d114:	6a 00                	push   0x0
c000d116:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000d11a:	50                   	push   eax
c000d11b:	6a 00                	push   0x0
c000d11d:	e8 44 fd ff ff       	call   c000ce66 <CmGetMatch(char*, char*, bool, bool*)>
c000d122:	83 c4 10             	add    esp,0x10
c000d125:	83 f8 ff             	cmp    eax,0xffffffff
c000d128:	75 1a                	jne    c000d144 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000d12a:	83 ec 0c             	sub    esp,0xc
c000d12d:	68 67 26 02 c0       	push   0xc0022667
c000d132:	e8 9b 1c 00 00       	call   c000edd2 <KePanic(char const*)>
c000d137:	83 c4 10             	add    esp,0x10
c000d13a:	b8 02 00 00 00       	mov    eax,0x2
c000d13f:	e9 bb 00 00 00       	jmp    c000d1ff <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000d144:	83 ff 18             	cmp    edi,0x18
c000d147:	75 1a                	jne    c000d163 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000d149:	83 ec 0c             	sub    esp,0xc
c000d14c:	68 7c 26 02 c0       	push   0xc002267c
c000d151:	e8 7c 1c 00 00       	call   c000edd2 <KePanic(char const*)>
c000d156:	83 c4 10             	add    esp,0x10
c000d159:	b8 01 00 00 00       	mov    eax,0x1
c000d15e:	e9 9c 00 00 00       	jmp    c000d1ff <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000d163:	47                   	inc    edi
c000d164:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d169:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000d16d:	0f 45 dd             	cmovne ebx,ebp
c000d170:	83 ec 0c             	sub    esp,0xc
c000d173:	56                   	push   esi
c000d174:	e8 07 34 ff ff       	call   c0000580 <strlen>
c000d179:	83 c4 10             	add    esp,0x10
c000d17c:	85 c0                	test   eax,eax
c000d17e:	74 06                	je     c000d186 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000d180:	43                   	inc    ebx
c000d181:	e9 41 ff ff ff       	jmp    c000d0c7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000d186:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d18e:	31 db                	xor    ebx,ebx
c000d190:	31 ff                	xor    edi,edi
c000d192:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d19a:	50                   	push   eax
c000d19b:	6a 12                	push   0x12
c000d19d:	68 ee 00 00 00       	push   0xee
c000d1a2:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000d1a9:	e8 42 33 ff ff       	call   c00004f0 <memset>
c000d1ae:	83 c4 10             	add    esp,0x10
c000d1b1:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000d1b5:	83 fb 17             	cmp    ebx,0x17
c000d1b8:	7e 26                	jle    c000d1e0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c000d1ba:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d1be:	50                   	push   eax
c000d1bf:	6a 08                	push   0x8
c000d1c1:	55                   	push   ebp
c000d1c2:	56                   	push   esi
c000d1c3:	e8 2f fd ff ff       	call   c000cef7 <CmGetShift(unsigned int*, int*, int, bool*)>
c000d1c8:	83 c4 10             	add    esp,0x10
c000d1cb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d1d0:	74 26                	je     c000d1f8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c000d1d2:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000d1d9:	4b                   	dec    ebx
c000d1da:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000d1dd:	47                   	inc    edi
c000d1de:	eb 1c                	jmp    c000d1fc <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000d1e0:	6a 06                	push   0x6
c000d1e2:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c000d1e7:	50                   	push   eax
c000d1e8:	55                   	push   ebp
c000d1e9:	56                   	push   esi
c000d1ea:	e8 d8 fc ff ff       	call   c000cec7 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000d1ef:	83 c4 10             	add    esp,0x10
c000d1f2:	84 c0                	test   al,al
c000d1f4:	75 06                	jne    c000d1fc <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000d1f6:	eb c2                	jmp    c000d1ba <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c000d1f8:	31 c0                	xor    eax,eax
c000d1fa:	eb 03                	jmp    c000d1ff <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000d1fc:	43                   	inc    ebx
c000d1fd:	eb b2                	jmp    c000d1b1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c000d1ff:	83 c4 6c             	add    esp,0x6c
c000d202:	5b                   	pop    ebx
c000d203:	5e                   	pop    esi
c000d204:	5f                   	pop    edi
c000d205:	5d                   	pop    ebp
c000d206:	c3                   	ret    

c000d207 <CmCreateString(Reghive_Tag*, int, char const*)>:
c000d207:	53                   	push   ebx
c000d208:	83 ec 3c             	sub    esp,0x3c
c000d20b:	6a 2b                	push   0x2b
c000d20d:	6a 00                	push   0x0
c000d20f:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d213:	53                   	push   ebx
c000d214:	e8 d7 32 ff ff       	call   c00004f0 <memset>
c000d219:	58                   	pop    eax
c000d21a:	5a                   	pop    edx
c000d21b:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d21f:	50                   	push   eax
c000d220:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d224:	e8 41 fe ff ff       	call   c000d06a <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d229:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000d22e:	83 c4 0c             	add    esp,0xc
c000d231:	6a 15                	push   0x15
c000d233:	6a 00                	push   0x0
c000d235:	8d 44 24 27          	lea    eax,[esp+0x27]
c000d239:	50                   	push   eax
c000d23a:	e8 b1 32 ff ff       	call   c00004f0 <memset>
c000d23f:	53                   	push   ebx
c000d240:	6a 00                	push   0x0
c000d242:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d246:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d24a:	e8 eb f9 ff ff       	call   c000cc3a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d24f:	83 c4 58             	add    esp,0x58
c000d252:	5b                   	pop    ebx
c000d253:	c3                   	ret    

c000d254 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000d254:	56                   	push   esi
c000d255:	53                   	push   ebx
c000d256:	83 ec 48             	sub    esp,0x48
c000d259:	6a 12                	push   0x12
c000d25b:	68 ff 00 00 00       	push   0xff
c000d260:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000d264:	56                   	push   esi
c000d265:	e8 86 32 ff ff       	call   c00004f0 <memset>
c000d26a:	5a                   	pop    edx
c000d26b:	59                   	pop    ecx
c000d26c:	56                   	push   esi
c000d26d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d271:	e8 f4 fd ff ff       	call   c000d06a <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d276:	83 c4 10             	add    esp,0x10
c000d279:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d27d:	85 db                	test   ebx,ebx
c000d27f:	74 42                	je     c000d2c3 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000d281:	50                   	push   eax
c000d282:	8d 44 24 19          	lea    eax,[esp+0x19]
c000d286:	50                   	push   eax
c000d287:	53                   	push   ebx
c000d288:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d28c:	e8 ff f6 ff ff       	call   c000c990 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d291:	83 c4 0c             	add    esp,0xc
c000d294:	6a 12                	push   0x12
c000d296:	8d 44 24 21          	lea    eax,[esp+0x21]
c000d29a:	50                   	push   eax
c000d29b:	56                   	push   esi
c000d29c:	e8 df 30 ff ff       	call   c0000380 <memcmp>
c000d2a1:	83 c4 10             	add    esp,0x10
c000d2a4:	85 c0                	test   eax,eax
c000d2a6:	74 1e                	je     c000d2c6 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000d2a8:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000d2ad:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d2b2:	c1 e3 08             	shl    ebx,0x8
c000d2b5:	09 d8                	or     eax,ebx
c000d2b7:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000d2bc:	c1 e3 10             	shl    ebx,0x10
c000d2bf:	09 c3                	or     ebx,eax
c000d2c1:	eb ba                	jmp    c000d27d <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000d2c3:	83 cb ff             	or     ebx,0xffffffff
c000d2c6:	83 c4 44             	add    esp,0x44
c000d2c9:	89 d8                	mov    eax,ebx
c000d2cb:	5b                   	pop    ebx
c000d2cc:	5e                   	pop    esi
c000d2cd:	c3                   	ret    

c000d2ce <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000d2ce:	57                   	push   edi
c000d2cf:	56                   	push   esi
c000d2d0:	53                   	push   ebx
c000d2d1:	83 ec 34             	sub    esp,0x34
c000d2d4:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000d2d8:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000d2dc:	6a 2b                	push   0x2b
c000d2de:	6a 00                	push   0x0
c000d2e0:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d2e4:	53                   	push   ebx
c000d2e5:	e8 06 32 ff ff       	call   c00004f0 <memset>
c000d2ea:	58                   	pop    eax
c000d2eb:	5a                   	pop    edx
c000d2ec:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d2f0:	50                   	push   eax
c000d2f1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d2f5:	e8 70 fd ff ff       	call   c000d06a <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d2fa:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c000d2fe:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000d302:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000d306:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000d30a:	53                   	push   ebx
c000d30b:	6a 00                	push   0x0
c000d30d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d311:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d315:	e8 20 f9 ff ff       	call   c000cc3a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d31a:	83 c4 50             	add    esp,0x50
c000d31d:	5b                   	pop    ebx
c000d31e:	5e                   	pop    esi
c000d31f:	5f                   	pop    edi
c000d320:	c3                   	ret    

c000d321 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000d321:	55                   	push   ebp
c000d322:	57                   	push   edi
c000d323:	56                   	push   esi
c000d324:	53                   	push   ebx
c000d325:	83 ec 40             	sub    esp,0x40
c000d328:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000d32c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d330:	6a 2b                	push   0x2b
c000d332:	6a 00                	push   0x0
c000d334:	8d 74 24 11          	lea    esi,[esp+0x11]
c000d338:	56                   	push   esi
c000d339:	e8 b2 31 ff ff       	call   c00004f0 <memset>
c000d33e:	5f                   	pop    edi
c000d33f:	89 ef                	mov    edi,ebp
c000d341:	58                   	pop    eax
c000d342:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d346:	50                   	push   eax
c000d347:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d34b:	e8 1a fd ff ff       	call   c000d06a <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d350:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000d355:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000d35a:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000d35f:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000d364:	83 c4 10             	add    esp,0x10
c000d367:	85 ed                	test   ebp,ebp
c000d369:	74 14                	je     c000d37f <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d36b:	51                   	push   ecx
c000d36c:	51                   	push   ecx
c000d36d:	57                   	push   edi
c000d36e:	53                   	push   ebx
c000d36f:	e8 0e f7 ff ff       	call   c000ca82 <CmGetNext(Reghive_Tag*, int)>
c000d374:	83 c4 10             	add    esp,0x10
c000d377:	85 c0                	test   eax,eax
c000d379:	74 04                	je     c000d37f <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d37b:	89 c7                	mov    edi,eax
c000d37d:	eb e8                	jmp    c000d367 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000d37f:	56                   	push   esi
c000d380:	6a 00                	push   0x0
c000d382:	57                   	push   edi
c000d383:	53                   	push   ebx
c000d384:	e8 b1 f8 ff ff       	call   c000cc3a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d389:	83 c4 0c             	add    esp,0xc
c000d38c:	56                   	push   esi
c000d38d:	50                   	push   eax
c000d38e:	89 c7                	mov    edi,eax
c000d390:	53                   	push   ebx
c000d391:	e8 fa f5 ff ff       	call   c000c990 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d396:	58                   	pop    eax
c000d397:	5a                   	pop    edx
c000d398:	6a 6c                	push   0x6c
c000d39a:	6a 00                	push   0x0
c000d39c:	6a 00                	push   0x0
c000d39e:	68 8d 26 02 c0       	push   0xc002268d
c000d3a3:	57                   	push   edi
c000d3a4:	53                   	push   ebx
c000d3a5:	e8 24 ff ff ff       	call   c000d2ce <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000d3aa:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000d3ae:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000d3b2:	c1 e8 10             	shr    eax,0x10
c000d3b5:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000d3b9:	83 c4 1c             	add    esp,0x1c
c000d3bc:	56                   	push   esi
c000d3bd:	57                   	push   edi
c000d3be:	53                   	push   ebx
c000d3bf:	e8 f0 f6 ff ff       	call   c000cab4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d3c4:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000d3c9:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000d3ce:	c1 e0 08             	shl    eax,0x8
c000d3d1:	09 c2                	or     edx,eax
c000d3d3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000d3d8:	83 c4 4c             	add    esp,0x4c
c000d3db:	5b                   	pop    ebx
c000d3dc:	5e                   	pop    esi
c000d3dd:	c1 e0 10             	shl    eax,0x10
c000d3e0:	09 d0                	or     eax,edx
c000d3e2:	5f                   	pop    edi
c000d3e3:	5d                   	pop    ebp
c000d3e4:	c3                   	ret    

c000d3e5 <zStrtok(char*, char const*)>:
c000d3e5:	55                   	push   ebp
c000d3e6:	57                   	push   edi
c000d3e7:	56                   	push   esi
c000d3e8:	53                   	push   ebx
c000d3e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d3ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d3f1:	85 db                	test   ebx,ebx
c000d3f3:	74 2f                	je     c000d424 <zStrtok(char*, char const*)+0x3f>
c000d3f5:	85 c0                	test   eax,eax
c000d3f7:	75 09                	jne    c000d402 <zStrtok(char*, char const*)+0x1d>
c000d3f9:	a1 60 ad 02 c0       	mov    eax,ds:0xc002ad60
c000d3fe:	85 c0                	test   eax,eax
c000d400:	74 50                	je     c000d452 <zStrtok(char*, char const*)+0x6d>
c000d402:	31 c9                	xor    ecx,ecx
c000d404:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000d408:	74 03                	je     c000d40d <zStrtok(char*, char const*)+0x28>
c000d40a:	41                   	inc    ecx
c000d40b:	eb f7                	jmp    c000d404 <zStrtok(char*, char const*)+0x1f>
c000d40d:	31 d2                	xor    edx,edx
c000d40f:	39 ca                	cmp    edx,ecx
c000d411:	74 15                	je     c000d428 <zStrtok(char*, char const*)+0x43>
c000d413:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000d417:	8d 3c 10             	lea    edi,[eax+edx*1]
c000d41a:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000d41d:	39 ee                	cmp    esi,ebp
c000d41f:	74 13                	je     c000d434 <zStrtok(char*, char const*)+0x4f>
c000d421:	42                   	inc    edx
c000d422:	eb eb                	jmp    c000d40f <zStrtok(char*, char const*)+0x2a>
c000d424:	31 c0                	xor    eax,eax
c000d426:	eb 2a                	jmp    c000d452 <zStrtok(char*, char const*)+0x6d>
c000d428:	c7 05 60 ad 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ad60,0x0
c000d432:	eb 1e                	jmp    c000d452 <zStrtok(char*, char const*)+0x6d>
c000d434:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000d437:	39 ce                	cmp    esi,ecx
c000d439:	75 0a                	jne    c000d445 <zStrtok(char*, char const*)+0x60>
c000d43b:	40                   	inc    eax
c000d43c:	a3 60 ad 02 c0       	mov    ds:0xc002ad60,eax
c000d441:	89 d8                	mov    eax,ebx
c000d443:	eb 0d                	jmp    c000d452 <zStrtok(char*, char const*)+0x6d>
c000d445:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000d448:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000d44c:	89 15 60 ad 02 c0    	mov    DWORD PTR ds:0xc002ad60,edx
c000d452:	5b                   	pop    ebx
c000d453:	5e                   	pop    esi
c000d454:	5f                   	pop    edi
c000d455:	5d                   	pop    ebp
c000d456:	c3                   	ret    

c000d457 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000d457:	57                   	push   edi
c000d458:	56                   	push   esi
c000d459:	53                   	push   ebx
c000d45a:	81 ec 08 01 00 00    	sub    esp,0x108
c000d460:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000d467:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000d46e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000d472:	53                   	push   ebx
c000d473:	e8 d8 31 ff ff       	call   c0000650 <strcpy>
c000d478:	59                   	pop    ecx
c000d479:	5e                   	pop    esi
c000d47a:	68 1e 38 02 c0       	push   0xc002381e
c000d47f:	53                   	push   ebx
c000d480:	bb 01 00 00 00       	mov    ebx,0x1
c000d485:	e8 5b ff ff ff       	call   c000d3e5 <zStrtok(char*, char const*)>
c000d48a:	83 c4 10             	add    esp,0x10
c000d48d:	85 c0                	test   eax,eax
c000d48f:	74 3b                	je     c000d4cc <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d491:	52                   	push   edx
c000d492:	50                   	push   eax
c000d493:	6a 01                	push   0x1
c000d495:	57                   	push   edi
c000d496:	e8 b9 fd ff ff       	call   c000d254 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000d49b:	59                   	pop    ecx
c000d49c:	5e                   	pop    esi
c000d49d:	89 c3                	mov    ebx,eax
c000d49f:	68 1e 38 02 c0       	push   0xc002381e
c000d4a4:	6a 00                	push   0x0
c000d4a6:	e8 3a ff ff ff       	call   c000d3e5 <zStrtok(char*, char const*)>
c000d4ab:	83 c4 10             	add    esp,0x10
c000d4ae:	85 c0                	test   eax,eax
c000d4b0:	89 c6                	mov    esi,eax
c000d4b2:	74 18                	je     c000d4cc <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d4b4:	52                   	push   edx
c000d4b5:	52                   	push   edx
c000d4b6:	53                   	push   ebx
c000d4b7:	57                   	push   edi
c000d4b8:	e8 86 f5 ff ff       	call   c000ca43 <CmEnterDirectory(Reghive_Tag*, int)>
c000d4bd:	83 c4 10             	add    esp,0x10
c000d4c0:	83 f8 ff             	cmp    eax,0xffffffff
c000d4c3:	89 c3                	mov    ebx,eax
c000d4c5:	74 05                	je     c000d4cc <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d4c7:	50                   	push   eax
c000d4c8:	56                   	push   esi
c000d4c9:	53                   	push   ebx
c000d4ca:	eb c9                	jmp    c000d495 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000d4cc:	81 c4 00 01 00 00    	add    esp,0x100
c000d4d2:	89 d8                	mov    eax,ebx
c000d4d4:	5b                   	pop    ebx
c000d4d5:	5e                   	pop    esi
c000d4d6:	5f                   	pop    edi
c000d4d7:	c3                   	ret    

c000d4d8 <CmDisplayTree(Reghive_Tag*, int, int)>:
c000d4d8:	55                   	push   ebp
c000d4d9:	57                   	push   edi
c000d4da:	56                   	push   esi
c000d4db:	53                   	push   ebx
c000d4dc:	83 ec 5c             	sub    esp,0x5c
c000d4df:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000d4e3:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000d4e7:	85 db                	test   ebx,ebx
c000d4e9:	0f 8e 84 00 00 00    	jle    c000d573 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000d4ef:	57                   	push   edi
c000d4f0:	31 ed                	xor    ebp,ebp
c000d4f2:	6a 32                	push   0x32
c000d4f4:	6a 00                	push   0x0
c000d4f6:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000d4fa:	57                   	push   edi
c000d4fb:	e8 f0 2f ff ff       	call   c00004f0 <memset>
c000d500:	83 c4 0c             	add    esp,0xc
c000d503:	57                   	push   edi
c000d504:	53                   	push   ebx
c000d505:	56                   	push   esi
c000d506:	e8 31 fb ff ff       	call   c000d03c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000d50b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d50f:	83 c4 10             	add    esp,0x10
c000d512:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000d516:	7d 13                	jge    c000d52b <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000d518:	83 ec 0c             	sub    esp,0xc
c000d51b:	45                   	inc    ebp
c000d51c:	68 10 3d 02 c0       	push   0xc0023d10
c000d521:	e8 28 9a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d526:	83 c4 10             	add    esp,0x10
c000d529:	eb e7                	jmp    c000d512 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000d52b:	51                   	push   ecx
c000d52c:	57                   	push   edi
c000d52d:	53                   	push   ebx
c000d52e:	68 93 26 02 c0       	push   0xc0022693
c000d533:	e8 16 9a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d538:	83 c4 10             	add    esp,0x10
c000d53b:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000d540:	75 1e                	jne    c000d560 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000d542:	52                   	push   edx
c000d543:	52                   	push   edx
c000d544:	53                   	push   ebx
c000d545:	56                   	push   esi
c000d546:	e8 f8 f4 ff ff       	call   c000ca43 <CmEnterDirectory(Reghive_Tag*, int)>
c000d54b:	83 c4 0c             	add    esp,0xc
c000d54e:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000d552:	8d 51 04             	lea    edx,[ecx+0x4]
c000d555:	52                   	push   edx
c000d556:	50                   	push   eax
c000d557:	56                   	push   esi
c000d558:	e8 7b ff ff ff       	call   c000d4d8 <CmDisplayTree(Reghive_Tag*, int, int)>
c000d55d:	83 c4 10             	add    esp,0x10
c000d560:	50                   	push   eax
c000d561:	50                   	push   eax
c000d562:	53                   	push   ebx
c000d563:	56                   	push   esi
c000d564:	e8 19 f5 ff ff       	call   c000ca82 <CmGetNext(Reghive_Tag*, int)>
c000d569:	83 c4 10             	add    esp,0x10
c000d56c:	89 c3                	mov    ebx,eax
c000d56e:	e9 74 ff ff ff       	jmp    c000d4e7 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000d573:	83 c4 5c             	add    esp,0x5c
c000d576:	5b                   	pop    ebx
c000d577:	5e                   	pop    esi
c000d578:	5f                   	pop    edi
c000d579:	5d                   	pop    ebp
c000d57a:	c3                   	ret    

c000d57b <CmSplitFinalSlashInPlace(char*)>:
c000d57b:	53                   	push   ebx
c000d57c:	83 ec 14             	sub    esp,0x14
c000d57f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000d583:	53                   	push   ebx
c000d584:	e8 f7 2f ff ff       	call   c0000580 <strlen>
c000d589:	83 c4 10             	add    esp,0x10
c000d58c:	48                   	dec    eax
c000d58d:	85 c0                	test   eax,eax
c000d58f:	74 15                	je     c000d5a6 <CmSplitFinalSlashInPlace(char*)+0x2b>
c000d591:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d595:	8d 14 03             	lea    edx,[ebx+eax*1]
c000d598:	75 09                	jne    c000d5a3 <CmSplitFinalSlashInPlace(char*)+0x28>
c000d59a:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000d59d:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000d5a1:	eb 05                	jmp    c000d5a8 <CmSplitFinalSlashInPlace(char*)+0x2d>
c000d5a3:	48                   	dec    eax
c000d5a4:	eb e7                	jmp    c000d58d <CmSplitFinalSlashInPlace(char*)+0x12>
c000d5a6:	31 c0                	xor    eax,eax
c000d5a8:	83 c4 08             	add    esp,0x8
c000d5ab:	5b                   	pop    ebx
c000d5ac:	c3                   	ret    
c000d5ad:	66 90                	xchg   ax,ax
c000d5af:	90                   	nop

c000d5b0 <Krnl::handlePowerButton()>:
c000d5b0:	83 ec 0c             	sub    esp,0xc
c000d5b3:	e8 4f 21 00 00       	call   c000f707 <KeHandlePowerButton()>
c000d5b8:	90                   	nop
c000d5b9:	83 c4 0c             	add    esp,0xc
c000d5bc:	c3                   	ret    
c000d5bd:	8d 76 00             	lea    esi,[esi+0x0]

c000d5c0 <Krnl::handleSleepButton()>:
c000d5c0:	83 ec 0c             	sub    esp,0xc
c000d5c3:	e8 57 21 00 00       	call   c000f71f <KeHandleSleepButton()>
c000d5c8:	90                   	nop
c000d5c9:	83 c4 0c             	add    esp,0xc
c000d5cc:	c3                   	ret    
c000d5cd:	90                   	nop

c000d5ce <Computer::close(int, int, void*)>:
c000d5ce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d5d3:	c3                   	ret    

c000d5d4 <Computer::open(int, int, void*)>:
c000d5d4:	56                   	push   esi
c000d5d5:	53                   	push   ebx
c000d5d6:	83 ec 04             	sub    esp,0x4
c000d5d9:	f6 05 90 cd 02 c0 04 	test   BYTE PTR ds:0xc002cd90,0x4
c000d5e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d5e4:	0f 94 05 a0 50 02 c0 	sete   BYTE PTR ds:0xc00250a0
c000d5eb:	39 1d 70 ad 02 c0    	cmp    DWORD PTR ds:0xc002ad70,ebx
c000d5f1:	74 10                	je     c000d603 <Computer::open(int, int, void*)+0x2f>
c000d5f3:	83 ec 0c             	sub    esp,0xc
c000d5f6:	68 a0 26 02 c0       	push   0xc00226a0
c000d5fb:	e8 d2 17 00 00       	call   c000edd2 <KePanic(char const*)>
c000d600:	83 c4 10             	add    esp,0x10
c000d603:	83 ec 0c             	sub    esp,0xc
c000d606:	68 58 27 02 c0       	push   0xc0022758
c000d60b:	e8 37 f1 ff ff       	call   c000c747 <KeSetBootMessage(char const*)>
c000d610:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000d617:	e8 70 14 00 00       	call   c000ea8c <malloc>
c000d61c:	89 04 24             	mov    DWORD PTR [esp],eax
c000d61f:	89 c6                	mov    esi,eax
c000d621:	e8 26 e8 ff ff       	call   c000be4c <ACPI::ACPI()>
c000d626:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000d62c:	58                   	pop    eax
c000d62d:	5a                   	pop    edx
c000d62e:	56                   	push   esi
c000d62f:	53                   	push   ebx
c000d630:	e8 5d ba ff ff       	call   c0009092 <Device::addChild(Device*)>
c000d635:	c7 04 24 70 27 02 c0 	mov    DWORD PTR [esp],0xc0022770
c000d63c:	e8 06 f1 ff ff       	call   c000c747 <KeSetBootMessage(char const*)>
c000d641:	e8 1f ab 00 00       	call   c0018165 <HalEnableNMI()>
c000d646:	e8 4f 9d 00 00       	call   c001739a <HalDetectFeatures()>
c000d64b:	c7 04 24 78 11 00 00 	mov    DWORD PTR [esp],0x1178
c000d652:	e8 35 14 00 00       	call   c000ea8c <malloc>
c000d657:	89 04 24             	mov    DWORD PTR [esp],eax
c000d65a:	89 c6                	mov    esi,eax
c000d65c:	e8 3f b6 00 00       	call   c0018ca0 <CPU::CPU()>
c000d661:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000d667:	59                   	pop    ecx
c000d668:	58                   	pop    eax
c000d669:	56                   	push   esi
c000d66a:	53                   	push   ebx
c000d66b:	e8 22 ba ff ff       	call   c0009092 <Device::addChild(Device*)>
c000d670:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000d674:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d67a:	8b 10                	mov    edx,DWORD PTR [eax]
c000d67c:	51                   	push   ecx
c000d67d:	6a 00                	push   0x0
c000d67f:	6a 00                	push   0x0
c000d681:	50                   	push   eax
c000d682:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d685:	83 c4 14             	add    esp,0x14
c000d688:	68 cc 26 02 c0       	push   0xc00226cc
c000d68d:	e8 b5 f0 ff ff       	call   c000c747 <KeSetBootMessage(char const*)>
c000d692:	e8 64 b2 00 00       	call   c00188fb <HalInitialiseCoprocessor()>
c000d697:	c7 04 24 8a 27 02 c0 	mov    DWORD PTR [esp],0xc002278a
c000d69e:	e8 a4 f0 ff ff       	call   c000c747 <KeSetBootMessage(char const*)>
c000d6a3:	c7 04 24 ba d6 00 c0 	mov    DWORD PTR [esp],0xc000d6ba
c000d6aa:	e8 25 82 00 00       	call   c00158d4 <setupMultitasking(void (*)())>
c000d6af:	83 c4 14             	add    esp,0x14
c000d6b2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d6b7:	5b                   	pop    ebx
c000d6b8:	5e                   	pop    esi
c000d6b9:	c3                   	ret    

c000d6ba <KeFirstTask()>:
c000d6ba:	53                   	push   ebx
c000d6bb:	83 ec 14             	sub    esp,0x14
c000d6be:	fb                   	sti    
c000d6bf:	68 a5 27 02 c0       	push   0xc00227a5
c000d6c4:	e8 7e f0 ff ff       	call   c000c747 <KeSetBootMessage(char const*)>
c000d6c9:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c000d6d0:	e8 b7 13 00 00       	call   c000ea8c <malloc>
c000d6d5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000d6dc:	89 c3                	mov    ebx,eax
c000d6de:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000d6e3:	50                   	push   eax
c000d6e4:	68 be 27 02 c0       	push   0xc00227be
c000d6e9:	6a 01                	push   0x1
c000d6eb:	53                   	push   ebx
c000d6ec:	e8 6f 7e 00 00       	call   c0015560 <Process::Process(bool, char const*, Process*, char**)>
c000d6f1:	83 c4 20             	add    esp,0x20
c000d6f4:	68 ff 00 00 00       	push   0xff
c000d6f9:	6a 00                	push   0x0
c000d6fb:	68 b9 e3 00 c0       	push   0xc000e3b9
c000d700:	53                   	push   ebx
c000d701:	e8 9a 80 00 00       	call   c00157a0 <Process::createThread(void (*)(void*), void*, int)>
c000d706:	8b 15 d8 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6d8
c000d70c:	6a 7a                	push   0x7a
c000d70e:	6a 00                	push   0x0
c000d710:	68 80 60 01 c0       	push   0xc0016080
c000d715:	52                   	push   edx
c000d716:	e8 85 80 00 00       	call   c00157a0 <Process::createThread(void (*)(void*), void*, int)>
c000d71b:	83 c4 14             	add    esp,0x14
c000d71e:	68 f0 26 02 c0       	push   0xc00226f0
c000d723:	a3 90 d6 02 c0       	mov    ds:0xc002d690,eax
c000d728:	e8 1a f0 ff ff       	call   c000c747 <KeSetBootMessage(char const*)>
c000d72d:	c6 05 75 ad 02 c0 01 	mov    BYTE PTR ds:0xc002ad75,0x1
c000d734:	e8 f0 20 00 00       	call   c000f829 <KeInitRand()>
c000d739:	e8 10 8d 00 00       	call   c001644e <Vm::initialise8086()>
c000d73e:	e8 93 a6 ff ff       	call   c0007dd6 <Fs::initVFS()>
c000d743:	c7 04 24 74 24 02 c0 	mov    DWORD PTR [esp],0xc0022474
c000d74a:	e8 f8 ef ff ff       	call   c000c747 <KeSetBootMessage(char const*)>
c000d74f:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000d754:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d75a:	8b 10                	mov    edx,DWORD PTR [eax]
c000d75c:	6a 00                	push   0x0
c000d75e:	6a 00                	push   0x0
c000d760:	6a 00                	push   0x0
c000d762:	50                   	push   eax
c000d763:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d766:	83 c4 14             	add    esp,0x14
c000d769:	68 f0 26 02 c0       	push   0xc00226f0
c000d76e:	e8 d4 ef ff ff       	call   c000c747 <KeSetBootMessage(char const*)>
c000d773:	e8 43 9e ff ff       	call   c00075bb <KeInitialiseSymlinks()>
c000d778:	e8 f5 05 00 00       	call   c000dd72 <KeLoadSystemEnv()>
c000d77d:	e8 b5 1f 00 00       	call   c000f737 <KeSetupPowerManager()>
c000d782:	c7 04 24 14 27 02 c0 	mov    DWORD PTR [esp],0xc0022714
c000d789:	e8 b9 ef ff ff       	call   c000c747 <KeSetBootMessage(char const*)>
c000d78e:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000d793:	59                   	pop    ecx
c000d794:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000d79a:	53                   	push   ebx
c000d79b:	e8 0e ba ff ff       	call   c00091ae <Device::loadDriversForAll()>
c000d7a0:	c7 04 24 cb 27 02 c0 	mov    DWORD PTR [esp],0xc00227cb
c000d7a7:	e8 9b ef ff ff       	call   c000c747 <KeSetBootMessage(char const*)>
c000d7ac:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c000d7b2:	58                   	pop    eax
c000d7b3:	5a                   	pop    edx
c000d7b4:	6a 01                	push   0x1
c000d7b6:	68 dc 27 02 c0       	push   0xc00227dc
c000d7bb:	e8 09 77 00 00       	call   c0014ec9 <Thr::loadDLL(char const*, bool)>
c000d7c0:	59                   	pop    ecx
c000d7c1:	5a                   	pop    edx
c000d7c2:	53                   	push   ebx
c000d7c3:	50                   	push   eax
c000d7c4:	e8 61 79 00 00       	call   c001512a <Thr::executeDLL(unsigned long, void*)>
c000d7c9:	83 c4 10             	add    esp,0x10
c000d7cc:	83 ec 0c             	sub    esp,0xc
c000d7cf:	6a 02                	push   0x2
c000d7d1:	e8 e2 82 00 00       	call   c0015ab8 <blockTask(TaskState)>
c000d7d6:	83 c4 10             	add    esp,0x10
c000d7d9:	eb f1                	jmp    c000d7cc <KeFirstTask()+0x112>
c000d7db:	90                   	nop

c000d7dc <Computer::Computer()>:
c000d7dc:	83 ec 0c             	sub    esp,0xc
c000d7df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7e3:	83 ec 08             	sub    esp,0x8
c000d7e6:	68 f8 27 02 c0       	push   0xc00227f8
c000d7eb:	50                   	push   eax
c000d7ec:	e8 03 ba ff ff       	call   c00091f4 <Device::Device(char const*)>
c000d7f1:	83 c4 10             	add    esp,0x10
c000d7f4:	ba 0c 28 02 c0       	mov    edx,0xc002280c
c000d7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7fd:	89 10                	mov    DWORD PTR [eax],edx
c000d7ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d803:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d80d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d811:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000d81b:	90                   	nop
c000d81c:	83 c4 0c             	add    esp,0xc
c000d81f:	c3                   	ret    

c000d820 <KePrepareShutdown()>:
c000d820:	83 ec 0c             	sub    esp,0xc
c000d823:	e8 8d ee ff ff       	call   c000c6b5 <KeExecuteAtexit()>
c000d828:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000d82d:	83 ec 0c             	sub    esp,0xc
c000d830:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d836:	50                   	push   eax
c000d837:	e8 be ba ff ff       	call   c00092fa <Device::closeAll()>
c000d83c:	83 c4 1c             	add    esp,0x1c
c000d83f:	c3                   	ret    

c000d840 <KeShutdown()>:
c000d840:	83 ec 0c             	sub    esp,0xc
c000d843:	e8 d8 ff ff ff       	call   c000d820 <KePrepareShutdown()>
c000d848:	a1 6c ad 02 c0       	mov    eax,ds:0xc002ad6c
c000d84d:	85 c0                	test   eax,eax
c000d84f:	74 02                	je     c000d853 <KeShutdown()+0x13>
c000d851:	ff d0                	call   eax
c000d853:	83 ec 0c             	sub    esp,0xc
c000d856:	68 34 27 02 c0       	push   0xc0022734
c000d85b:	e8 72 15 00 00       	call   c000edd2 <KePanic(char const*)>
c000d860:	83 c4 1c             	add    esp,0x1c
c000d863:	c3                   	ret    

c000d864 <KeSleep()>:
c000d864:	a1 64 ad 02 c0       	mov    eax,ds:0xc002ad64
c000d869:	85 c0                	test   eax,eax
c000d86b:	74 02                	je     c000d86f <KeSleep()+0xb>
c000d86d:	ff e0                	jmp    eax
c000d86f:	c3                   	ret    

c000d870 <KeRestart()>:
c000d870:	83 ec 0c             	sub    esp,0xc
c000d873:	e8 a8 ff ff ff       	call   c000d820 <KePrepareShutdown()>
c000d878:	a1 68 ad 02 c0       	mov    eax,ds:0xc002ad68
c000d87d:	85 c0                	test   eax,eax
c000d87f:	74 02                	je     c000d883 <KeRestart()+0x13>
c000d881:	ff d0                	call   eax
c000d883:	e4 64                	in     al,0x64
c000d885:	a8 02                	test   al,0x2
c000d887:	75 fa                	jne    c000d883 <KeRestart()+0x13>
c000d889:	b0 fe                	mov    al,0xfe
c000d88b:	e6 64                	out    0x64,al
c000d88d:	83 c4 0c             	add    esp,0xc
c000d890:	c3                   	ret    

c000d891 <KeCalculateCRC32(unsigned char*, int)>:
c000d891:	53                   	push   ebx
c000d892:	83 c8 ff             	or     eax,0xffffffff
c000d895:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d899:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d89d:	01 cb                	add    ebx,ecx
c000d89f:	39 d9                	cmp    ecx,ebx
c000d8a1:	74 15                	je     c000d8b8 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000d8a3:	41                   	inc    ecx
c000d8a4:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000d8a7:	31 c2                	xor    edx,eax
c000d8a9:	c1 e8 08             	shr    eax,0x8
c000d8ac:	0f b6 d2             	movzx  edx,dl
c000d8af:	33 04 95 c0 4a 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdb540]
c000d8b6:	eb e7                	jmp    c000d89f <KeCalculateCRC32(unsigned char*, int)+0xe>
c000d8b8:	5b                   	pop    ebx
c000d8b9:	f7 d0                	not    eax
c000d8bb:	c3                   	ret    

c000d8bc <EnvVarContainer::getEnv(char const*)>:
c000d8bc:	57                   	push   edi
c000d8bd:	56                   	push   esi
c000d8be:	53                   	push   ebx
c000d8bf:	31 db                	xor    ebx,ebx
c000d8c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d8c5:	39 1e                	cmp    DWORD PTR [esi],ebx
c000d8c7:	7e 2b                	jle    c000d8f4 <EnvVarContainer::getEnv(char const*)+0x38>
c000d8c9:	50                   	push   eax
c000d8ca:	50                   	push   eax
c000d8cb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d8ce:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000d8d5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000d8d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d8dc:	e8 9f 2e ff ff       	call   c0000780 <strcmp>
c000d8e1:	83 c4 10             	add    esp,0x10
c000d8e4:	85 c0                	test   eax,eax
c000d8e6:	75 09                	jne    c000d8f1 <EnvVarContainer::getEnv(char const*)+0x35>
c000d8e8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d8eb:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000d8ef:	eb 05                	jmp    c000d8f6 <EnvVarContainer::getEnv(char const*)+0x3a>
c000d8f1:	43                   	inc    ebx
c000d8f2:	eb d1                	jmp    c000d8c5 <EnvVarContainer::getEnv(char const*)+0x9>
c000d8f4:	31 c0                	xor    eax,eax
c000d8f6:	5b                   	pop    ebx
c000d8f7:	5e                   	pop    esi
c000d8f8:	5f                   	pop    edi
c000d8f9:	c3                   	ret    

c000d8fa <EnvVarContainer::setEnv(char const*, char const*)>:
c000d8fa:	55                   	push   ebp
c000d8fb:	57                   	push   edi
c000d8fc:	56                   	push   esi
c000d8fd:	53                   	push   ebx
c000d8fe:	83 ec 28             	sub    esp,0x28
c000d901:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d905:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000d909:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d90d:	56                   	push   esi
c000d90e:	e8 6d 2c ff ff       	call   c0000580 <strlen>
c000d913:	40                   	inc    eax
c000d914:	89 04 24             	mov    DWORD PTR [esp],eax
c000d917:	e8 70 11 00 00       	call   c000ea8c <malloc>
c000d91c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d91f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d923:	e8 58 2c ff ff       	call   c0000580 <strlen>
c000d928:	40                   	inc    eax
c000d929:	89 04 24             	mov    DWORD PTR [esp],eax
c000d92c:	e8 5b 11 00 00       	call   c000ea8c <malloc>
c000d931:	89 34 24             	mov    DWORD PTR [esp],esi
c000d934:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d938:	e8 43 2c ff ff       	call   c0000580 <strlen>
c000d93d:	83 c4 0c             	add    esp,0xc
c000d940:	40                   	inc    eax
c000d941:	50                   	push   eax
c000d942:	6a 00                	push   0x0
c000d944:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d948:	e8 a3 2b ff ff       	call   c00004f0 <memset>
c000d94d:	89 34 24             	mov    DWORD PTR [esp],esi
c000d950:	e8 2b 2c ff ff       	call   c0000580 <strlen>
c000d955:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000d959:	8d 48 01             	lea    ecx,[eax+0x1]
c000d95c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d95e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d961:	89 de                	mov    esi,ebx
c000d963:	e8 18 2c ff ff       	call   c0000580 <strlen>
c000d968:	83 c4 0c             	add    esp,0xc
c000d96b:	40                   	inc    eax
c000d96c:	50                   	push   eax
c000d96d:	6a 00                	push   0x0
c000d96f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d973:	e8 78 2b ff ff       	call   c00004f0 <memset>
c000d978:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d97b:	e8 00 2c ff ff       	call   c0000580 <strlen>
c000d980:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d984:	8d 48 01             	lea    ecx,[eax+0x1]
c000d987:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d989:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d98c:	40                   	inc    eax
c000d98d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d990:	c1 e0 03             	shl    eax,0x3
c000d993:	5a                   	pop    edx
c000d994:	59                   	pop    ecx
c000d995:	50                   	push   eax
c000d996:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d999:	e8 da 10 00 00       	call   c000ea78 <realloc>
c000d99e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d9a1:	8d 74 24 18          	lea    esi,[esp+0x18]
c000d9a5:	b9 08 00 00 00       	mov    ecx,0x8
c000d9aa:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000d9ad:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000d9b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d9b3:	83 c4 2c             	add    esp,0x2c
c000d9b6:	5b                   	pop    ebx
c000d9b7:	5e                   	pop    esi
c000d9b8:	5f                   	pop    edi
c000d9b9:	5d                   	pop    ebp
c000d9ba:	c3                   	ret    
c000d9bb:	90                   	nop

c000d9bc <EnvVarContainer::deleteEnv(char const*)>:
c000d9bc:	c3                   	ret    
c000d9bd:	90                   	nop

c000d9be <EnvVarContainer::loadFrom(char const*, char const*)>:
c000d9be:	55                   	push   ebp
c000d9bf:	57                   	push   edi
c000d9c0:	56                   	push   esi
c000d9c1:	53                   	push   ebx
c000d9c2:	81 ec 38 01 00 00    	sub    esp,0x138
c000d9c8:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000d9cf:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000d9d6:	68 14 01 00 00       	push   0x114
c000d9db:	e8 ac 10 00 00       	call   c000ea8c <malloc>
c000d9e0:	83 c4 0c             	add    esp,0xc
c000d9e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000d9e6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000d9ed:	89 c3                	mov    ebx,eax
c000d9ef:	50                   	push   eax
c000d9f0:	e8 37 a7 ff ff       	call   c000812c <File::File(char const*, Process*)>
c000d9f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d9f8:	e8 11 aa ff ff       	call   c000840e <File::exists()>
c000d9fd:	83 c4 10             	add    esp,0x10
c000da00:	84 c0                	test   al,al
c000da02:	75 31                	jne    c000da35 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000da04:	50                   	push   eax
c000da05:	50                   	push   eax
c000da06:	6a 12                	push   0x12
c000da08:	53                   	push   ebx
c000da09:	e8 3c a7 ff ff       	call   c000814a <File::open(FileOpenMode)>
c000da0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da10:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000da13:	89 34 24             	mov    DWORD PTR [esp],esi
c000da16:	e8 65 2b ff ff       	call   c0000580 <strlen>
c000da1b:	5a                   	pop    edx
c000da1c:	8d 54 24 20          	lea    edx,[esp+0x20]
c000da20:	52                   	push   edx
c000da21:	31 d2                	xor    edx,edx
c000da23:	56                   	push   esi
c000da24:	52                   	push   edx
c000da25:	50                   	push   eax
c000da26:	53                   	push   ebx
c000da27:	ff d7                	call   edi
c000da29:	83 c4 14             	add    esp,0x14
c000da2c:	53                   	push   ebx
c000da2d:	e8 76 a7 ff ff       	call   c00081a8 <File::close()>
c000da32:	83 c4 10             	add    esp,0x10
c000da35:	56                   	push   esi
c000da36:	31 f6                	xor    esi,esi
c000da38:	68 00 01 00 00       	push   0x100
c000da3d:	6a 00                	push   0x0
c000da3f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000da43:	50                   	push   eax
c000da44:	e8 a7 2a ff ff       	call   c00004f0 <memset>
c000da49:	5f                   	pop    edi
c000da4a:	58                   	pop    eax
c000da4b:	6a 01                	push   0x1
c000da4d:	53                   	push   ebx
c000da4e:	e8 f7 a6 ff ff       	call   c000814a <File::open(FileOpenMode)>
c000da53:	83 c4 10             	add    esp,0x10
c000da56:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000da5e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000da66:	83 ec 0c             	sub    esp,0xc
c000da69:	8d 54 24 20          	lea    edx,[esp+0x20]
c000da6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da6f:	52                   	push   edx
c000da70:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c000da74:	51                   	push   ecx
c000da75:	6a 00                	push   0x0
c000da77:	6a 01                	push   0x1
c000da79:	53                   	push   ebx
c000da7a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000da7d:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000da82:	83 c4 20             	add    esp,0x20
c000da85:	85 c0                	test   eax,eax
c000da87:	89 c1                	mov    ecx,eax
c000da89:	0f 84 36 01 00 00    	je     c000dbc5 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000da8f:	83 f8 0d             	cmp    eax,0xd
c000da92:	0f 84 22 01 00 00    	je     c000dbba <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000da98:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000da9d:	0f 84 f0 00 00 00    	je     c000db93 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000daa3:	83 f8 0a             	cmp    eax,0xa
c000daa6:	74 13                	je     c000dabb <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000daa8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000daad:	74 0c                	je     c000dabb <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000daaf:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000dab5:	0f 8e f6 00 00 00    	jle    c000dbb1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000dabb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dabf:	83 ec 0c             	sub    esp,0xc
c000dac2:	8d 78 01             	lea    edi,[eax+0x1]
c000dac5:	57                   	push   edi
c000dac6:	e8 c1 0f 00 00       	call   c000ea8c <malloc>
c000dacb:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000dacf:	8d 56 04             	lea    edx,[esi+0x4]
c000dad2:	89 14 24             	mov    DWORD PTR [esp],edx
c000dad5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dad9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dadd:	e8 aa 0f 00 00       	call   c000ea8c <malloc>
c000dae2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000dae6:	83 c4 0c             	add    esp,0xc
c000dae9:	57                   	push   edi
c000daea:	6a 00                	push   0x0
c000daec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daf0:	e8 fb 29 ff ff       	call   c00004f0 <memset>
c000daf5:	8d 74 24 30          	lea    esi,[esp+0x30]
c000daf9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dafd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000db01:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000db03:	83 c4 0c             	add    esp,0xc
c000db06:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000db0a:	52                   	push   edx
c000db0b:	6a 00                	push   0x0
c000db0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000db11:	e8 da 29 ff ff       	call   c00004f0 <memset>
c000db16:	8d 74 24 30          	lea    esi,[esp+0x30]
c000db1a:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000db1e:	89 34 24             	mov    DWORD PTR [esp],esi
c000db21:	e8 5a 2a ff ff       	call   c0000580 <strlen>
c000db26:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000db2a:	89 c1                	mov    ecx,eax
c000db2c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000db2e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000db31:	83 c4 10             	add    esp,0x10
c000db34:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000db37:	40                   	inc    eax
c000db38:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000db3b:	85 d2                	test   edx,edx
c000db3d:	75 0c                	jne    c000db4b <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000db3f:	83 ec 0c             	sub    esp,0xc
c000db42:	6a 08                	push   0x8
c000db44:	e8 43 0f 00 00       	call   c000ea8c <malloc>
c000db49:	eb 0c                	jmp    c000db57 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000db4b:	51                   	push   ecx
c000db4c:	51                   	push   ecx
c000db4d:	c1 e0 03             	shl    eax,0x3
c000db50:	50                   	push   eax
c000db51:	52                   	push   edx
c000db52:	e8 21 0f 00 00       	call   c000ea78 <realloc>
c000db57:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000db5a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000db5d:	83 c4 10             	add    esp,0x10
c000db60:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000db63:	8d 74 24 18          	lea    esi,[esp+0x18]
c000db67:	b9 08 00 00 00       	mov    ecx,0x8
c000db6c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000db70:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000db72:	50                   	push   eax
c000db73:	31 f6                	xor    esi,esi
c000db75:	68 00 01 00 00       	push   0x100
c000db7a:	6a 00                	push   0x0
c000db7c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000db80:	50                   	push   eax
c000db81:	e8 6a 29 ff ff       	call   c00004f0 <memset>
c000db86:	83 c4 10             	add    esp,0x10
c000db89:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000db91:	eb 27                	jmp    c000dbba <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000db93:	83 f8 3d             	cmp    eax,0x3d
c000db96:	74 1e                	je     c000dbb6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000db98:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000db9e:	7f 07                	jg     c000dba7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000dba0:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c000dba4:	46                   	inc    esi
c000dba5:	eb 13                	jmp    c000dbba <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000dba7:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000dbaf:	eb 09                	jmp    c000dbba <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000dbb1:	83 f8 3d             	cmp    eax,0x3d
c000dbb4:	75 ea                	jne    c000dba0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000dbb6:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000dbba:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000dbbf:	0f 85 99 fe ff ff    	jne    c000da5e <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000dbc5:	83 ec 0c             	sub    esp,0xc
c000dbc8:	53                   	push   ebx
c000dbc9:	e8 da a5 ff ff       	call   c00081a8 <File::close()>
c000dbce:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dbd0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dbd3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dbd6:	81 c4 3c 01 00 00    	add    esp,0x13c
c000dbdc:	5b                   	pop    ebx
c000dbdd:	5e                   	pop    esi
c000dbde:	5f                   	pop    edi
c000dbdf:	5d                   	pop    ebp
c000dbe0:	c3                   	ret    
c000dbe1:	90                   	nop

c000dbe2 <EnvVarContainer::__loadSystem()>:
c000dbe2:	83 ec 10             	sub    esp,0x10
c000dbe5:	68 c0 4e 02 c0       	push   0xc0024ec0
c000dbea:	68 30 28 02 c0       	push   0xc0022830
c000dbef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf3:	e8 c6 fd ff ff       	call   c000d9be <EnvVarContainer::loadFrom(char const*, char const*)>
c000dbf8:	83 c4 1c             	add    esp,0x1c
c000dbfb:	c3                   	ret    

c000dbfc <EnvVarContainer::__loadUser()>:
c000dbfc:	c3                   	ret    
c000dbfd:	90                   	nop

c000dbfe <EnvVarContainer::EnvVarContainer(Process*)>:
c000dbfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dc02:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000dc08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dc0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dc10:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000dc13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dc17:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dc1e:	90                   	nop
c000dc1f:	c3                   	ret    

c000dc20 <EnvVarContainer::~EnvVarContainer()>:
c000dc20:	83 ec 0c             	sub    esp,0xc
c000dc23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc27:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc2a:	85 c0                	test   eax,eax
c000dc2c:	74 1d                	je     c000dc4b <EnvVarContainer::~EnvVarContainer()+0x2b>
c000dc2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc32:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc34:	85 c0                	test   eax,eax
c000dc36:	74 13                	je     c000dc4b <EnvVarContainer::~EnvVarContainer()+0x2b>
c000dc38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc3f:	83 ec 0c             	sub    esp,0xc
c000dc42:	50                   	push   eax
c000dc43:	e8 54 0e 00 00       	call   c000ea9c <free>
c000dc48:	83 c4 10             	add    esp,0x10
c000dc4b:	90                   	nop
c000dc4c:	83 c4 0c             	add    esp,0xc
c000dc4f:	c3                   	ret    

c000dc50 <KeGetEnv(Process*, char const*)>:
c000dc50:	53                   	push   ebx
c000dc51:	83 ec 08             	sub    esp,0x8
c000dc54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc58:	39 05 d8 d6 02 c0    	cmp    DWORD PTR ds:0xc002d6d8,eax
c000dc5e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000dc62:	74 04                	je     c000dc68 <KeGetEnv(Process*, char const*)+0x18>
c000dc64:	85 c0                	test   eax,eax
c000dc66:	75 0b                	jne    c000dc73 <KeGetEnv(Process*, char const*)+0x23>
c000dc68:	a1 78 ad 02 c0       	mov    eax,ds:0xc002ad78
c000dc6d:	85 c0                	test   eax,eax
c000dc6f:	75 19                	jne    c000dc8a <KeGetEnv(Process*, char const*)+0x3a>
c000dc71:	eb 27                	jmp    c000dc9a <KeGetEnv(Process*, char const*)+0x4a>
c000dc73:	52                   	push   edx
c000dc74:	52                   	push   edx
c000dc75:	53                   	push   ebx
c000dc76:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000dc7c:	e8 3b fc ff ff       	call   c000d8bc <EnvVarContainer::getEnv(char const*)>
c000dc81:	83 c4 10             	add    esp,0x10
c000dc84:	85 c0                	test   eax,eax
c000dc86:	75 28                	jne    c000dcb0 <KeGetEnv(Process*, char const*)+0x60>
c000dc88:	eb de                	jmp    c000dc68 <KeGetEnv(Process*, char const*)+0x18>
c000dc8a:	52                   	push   edx
c000dc8b:	52                   	push   edx
c000dc8c:	53                   	push   ebx
c000dc8d:	50                   	push   eax
c000dc8e:	e8 29 fc ff ff       	call   c000d8bc <EnvVarContainer::getEnv(char const*)>
c000dc93:	83 c4 10             	add    esp,0x10
c000dc96:	85 c0                	test   eax,eax
c000dc98:	75 16                	jne    c000dcb0 <KeGetEnv(Process*, char const*)+0x60>
c000dc9a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000dc9e:	a1 7c ad 02 c0       	mov    eax,ds:0xc002ad7c
c000dca3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dca7:	83 c4 08             	add    esp,0x8
c000dcaa:	5b                   	pop    ebx
c000dcab:	e9 0c fc ff ff       	jmp    c000d8bc <EnvVarContainer::getEnv(char const*)>
c000dcb0:	83 c4 08             	add    esp,0x8
c000dcb3:	5b                   	pop    ebx
c000dcb4:	c3                   	ret    

c000dcb5 <KeSetEnvSystem(char const*, char const*)>:
c000dcb5:	83 ec 10             	sub    esp,0x10
c000dcb8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dcbc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dcc0:	ff 35 7c ad 02 c0    	push   DWORD PTR ds:0xc002ad7c
c000dcc6:	e8 2f fc ff ff       	call   c000d8fa <EnvVarContainer::setEnv(char const*, char const*)>
c000dccb:	83 c4 1c             	add    esp,0x1c
c000dcce:	c3                   	ret    

c000dccf <KeSetEnvUser(char const*, char const*)>:
c000dccf:	a1 78 ad 02 c0       	mov    eax,ds:0xc002ad78
c000dcd4:	85 c0                	test   eax,eax
c000dcd6:	74 15                	je     c000dced <KeSetEnvUser(char const*, char const*)+0x1e>
c000dcd8:	83 ec 10             	sub    esp,0x10
c000dcdb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dcdf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dce3:	50                   	push   eax
c000dce4:	e8 11 fc ff ff       	call   c000d8fa <EnvVarContainer::setEnv(char const*, char const*)>
c000dce9:	83 c4 1c             	add    esp,0x1c
c000dcec:	c3                   	ret    
c000dced:	c3                   	ret    

c000dcee <KeSetEnvProcess(Process*, char const*, char const*)>:
c000dcee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcf2:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000dcf8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dcfc:	e9 f9 fb ff ff       	jmp    c000d8fa <EnvVarContainer::setEnv(char const*, char const*)>

c000dd01 <KeDeleteEnvSystem(char const*)>:
c000dd01:	c3                   	ret    

c000dd02 <KeDeleteEnvUser(char const*)>:
c000dd02:	c3                   	ret    

c000dd03 <KeDeleteEnvProcess(Process*, char const*)>:
c000dd03:	c3                   	ret    

c000dd04 <KeNewProcessEnv(Process*)>:
c000dd04:	83 ec 28             	sub    esp,0x28
c000dd07:	6a 0c                	push   0xc
c000dd09:	e8 7e 0d 00 00       	call   c000ea8c <malloc>
c000dd0e:	5a                   	pop    edx
c000dd0f:	59                   	pop    ecx
c000dd10:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dd14:	50                   	push   eax
c000dd15:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dd19:	e8 e0 fe ff ff       	call   c000dbfe <EnvVarContainer::EnvVarContainer(Process*)>
c000dd1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dd22:	83 c4 2c             	add    esp,0x2c
c000dd25:	c3                   	ret    

c000dd26 <KeCopyProcessEnv(Process*, Process*)>:
c000dd26:	57                   	push   edi
c000dd27:	56                   	push   esi
c000dd28:	53                   	push   ebx
c000dd29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd2d:	83 ec 0c             	sub    esp,0xc
c000dd30:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000dd36:	6a 0c                	push   0xc
c000dd38:	e8 4f 0d 00 00       	call   c000ea8c <malloc>
c000dd3d:	89 c3                	mov    ebx,eax
c000dd3f:	58                   	pop    eax
c000dd40:	5a                   	pop    edx
c000dd41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd45:	53                   	push   ebx
c000dd46:	e8 b3 fe ff ff       	call   c000dbfe <EnvVarContainer::EnvVarContainer(Process*)>
c000dd4b:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd4d:	89 03                	mov    DWORD PTR [ebx],eax
c000dd4f:	c1 e0 03             	shl    eax,0x3
c000dd52:	89 04 24             	mov    DWORD PTR [esp],eax
c000dd55:	e8 32 0d 00 00       	call   c000ea8c <malloc>
c000dd5a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000dd5d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000dd5f:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000dd62:	89 c7                	mov    edi,eax
c000dd64:	c1 e1 03             	shl    ecx,0x3
c000dd67:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dd69:	83 c4 10             	add    esp,0x10
c000dd6c:	89 d8                	mov    eax,ebx
c000dd6e:	5b                   	pop    ebx
c000dd6f:	5e                   	pop    esi
c000dd70:	5f                   	pop    edi
c000dd71:	c3                   	ret    

c000dd72 <KeLoadSystemEnv()>:
c000dd72:	53                   	push   ebx
c000dd73:	83 ec 14             	sub    esp,0x14
c000dd76:	6a 0c                	push   0xc
c000dd78:	e8 0f 0d 00 00       	call   c000ea8c <malloc>
c000dd7d:	89 c3                	mov    ebx,eax
c000dd7f:	58                   	pop    eax
c000dd80:	5a                   	pop    edx
c000dd81:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c000dd87:	53                   	push   ebx
c000dd88:	e8 71 fe ff ff       	call   c000dbfe <EnvVarContainer::EnvVarContainer(Process*)>
c000dd8d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dd90:	89 1d 7c ad 02 c0    	mov    DWORD PTR ds:0xc002ad7c,ebx
c000dd96:	e8 47 fe ff ff       	call   c000dbe2 <EnvVarContainer::__loadSystem()>
c000dd9b:	83 c4 18             	add    esp,0x18
c000dd9e:	5b                   	pop    ebx
c000dd9f:	c3                   	ret    

c000dda0 <KeLoadUserEnv()>:
c000dda0:	53                   	push   ebx
c000dda1:	83 ec 14             	sub    esp,0x14
c000dda4:	6a 0c                	push   0xc
c000dda6:	e8 e1 0c 00 00       	call   c000ea8c <malloc>
c000ddab:	89 c3                	mov    ebx,eax
c000ddad:	58                   	pop    eax
c000ddae:	5a                   	pop    edx
c000ddaf:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c000ddb5:	53                   	push   ebx
c000ddb6:	e8 43 fe ff ff       	call   c000dbfe <EnvVarContainer::EnvVarContainer(Process*)>
c000ddbb:	89 1d 78 ad 02 c0    	mov    DWORD PTR ds:0xc002ad78,ebx
c000ddc1:	83 c4 18             	add    esp,0x18
c000ddc4:	5b                   	pop    ebx
c000ddc5:	c3                   	ret    

c000ddc6 <KeFlushEnv()>:
c000ddc6:	c3                   	ret    

c000ddc7 <KeGetProcessTotalEnvCount(Process*)>:
c000ddc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ddcb:	8b 15 78 ad 02 c0    	mov    edx,DWORD PTR ds:0xc002ad78
c000ddd1:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000ddd7:	a1 7c ad 02 c0       	mov    eax,ds:0xc002ad7c
c000dddc:	8b 00                	mov    eax,DWORD PTR [eax]
c000ddde:	03 01                	add    eax,DWORD PTR [ecx]
c000dde0:	85 d2                	test   edx,edx
c000dde2:	74 02                	je     c000dde6 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000dde4:	03 02                	add    eax,DWORD PTR [edx]
c000dde6:	c3                   	ret    

c000dde7 <KeGetProcessEnvPair(Process*, int)>:
c000dde7:	57                   	push   edi
c000dde8:	56                   	push   esi
c000dde9:	8b 35 78 ad 02 c0    	mov    esi,DWORD PTR ds:0xc002ad78
c000ddef:	53                   	push   ebx
c000ddf0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ddf4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ddf8:	85 f6                	test   esi,esi
c000ddfa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ddfe:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000de04:	8b 01                	mov    eax,DWORD PTR [ecx]
c000de06:	75 16                	jne    c000de1e <KeGetProcessEnvPair(Process*, int)+0x37>
c000de08:	39 c2                	cmp    edx,eax
c000de0a:	7c 16                	jl     c000de22 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000de0c:	8b 0d 7c ad 02 c0    	mov    ecx,DWORD PTR ds:0xc002ad7c
c000de12:	8b 31                	mov    esi,DWORD PTR [ecx]
c000de14:	01 c6                	add    esi,eax
c000de16:	39 d6                	cmp    esi,edx
c000de18:	7e 3c                	jle    c000de56 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000de1a:	29 c2                	sub    edx,eax
c000de1c:	eb 04                	jmp    c000de22 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000de1e:	39 c2                	cmp    edx,eax
c000de20:	7d 05                	jge    c000de27 <KeGetProcessEnvPair(Process*, int)+0x40>
c000de22:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000de25:	eb 20                	jmp    c000de47 <KeGetProcessEnvPair(Process*, int)+0x60>
c000de27:	8b 3e                	mov    edi,DWORD PTR [esi]
c000de29:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000de2c:	39 d1                	cmp    ecx,edx
c000de2e:	7e 04                	jle    c000de34 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000de30:	29 c2                	sub    edx,eax
c000de32:	eb 10                	jmp    c000de44 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000de34:	8b 35 7c ad 02 c0    	mov    esi,DWORD PTR ds:0xc002ad7c
c000de3a:	03 0e                	add    ecx,DWORD PTR [esi]
c000de3c:	39 d1                	cmp    ecx,edx
c000de3e:	7e 16                	jle    c000de56 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000de40:	29 c2                	sub    edx,eax
c000de42:	29 fa                	sub    edx,edi
c000de44:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000de47:	8d 14 d0             	lea    edx,[eax+edx*8]
c000de4a:	8b 02                	mov    eax,DWORD PTR [edx]
c000de4c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000de4f:	89 03                	mov    DWORD PTR [ebx],eax
c000de51:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000de54:	eb 1d                	jmp    c000de73 <KeGetProcessEnvPair(Process*, int)+0x8c>
c000de56:	83 ec 0c             	sub    esp,0xc
c000de59:	68 52 28 02 c0       	push   0xc0022852
c000de5e:	e8 6f 0f 00 00       	call   c000edd2 <KePanic(char const*)>
c000de63:	83 c4 10             	add    esp,0x10
c000de66:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000de6c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000de73:	89 d8                	mov    eax,ebx
c000de75:	5b                   	pop    ebx
c000de76:	5e                   	pop    esi
c000de77:	5f                   	pop    edi
c000de78:	c2 04 00             	ret    0x4
c000de7b:	90                   	nop

c000de7c <KeSetupInterrupts()>:
c000de7c:	83 ec 10             	sub    esp,0x10
c000de7f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000de87:	90                   	nop
c000de88:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000de90:	7f 5a                	jg     c000deec <KeSetupInterrupts()+0x70>
c000de92:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000de9a:	66 90                	xchg   ax,ax
c000de9c:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000dea1:	7f 41                	jg     c000dee4 <KeSetupInterrupts()+0x68>
c000dea3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dea7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000deae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000deb2:	01 d0                	add    eax,edx
c000deb4:	c7 04 85 80 bd 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd4280],0x0
c000debf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dec3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000deca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dece:	01 d0                	add    eax,edx
c000ded0:	c7 04 85 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd5280],0x0
c000dedb:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000dee0:	eb ba                	jmp    c000de9c <KeSetupInterrupts()+0x20>
c000dee2:	66 90                	xchg   ax,ax
c000dee4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000dee9:	eb 9d                	jmp    c000de88 <KeSetupInterrupts()+0xc>
c000deeb:	90                   	nop
c000deec:	90                   	nop
c000deed:	83 c4 10             	add    esp,0x10
c000def0:	c3                   	ret    
c000def1:	8d 76 00             	lea    esi,[esi+0x0]

c000def4 <int_handler>:
c000def4:	83 ec 2c             	sub    esp,0x2c
c000def7:	90                   	nop
c000def8:	a0 94 cd 02 c0       	mov    al,ds:0xc002cd94
c000defd:	0f b6 c0             	movzx  eax,al
c000df00:	85 c0                	test   eax,eax
c000df02:	74 04                	je     c000df08 <int_handler+0x14>
c000df04:	fa                   	cli    
c000df05:	f4                   	hlt    
c000df06:	eb f0                	jmp    c000def8 <int_handler+0x4>
c000df08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df0c:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000df0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df13:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000df18:	7e 1a                	jle    c000df34 <int_handler+0x40>
c000df1a:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000df1f:	7f 13                	jg     c000df34 <int_handler+0x40>
c000df21:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000df25:	83 e8 20             	sub    eax,0x20
c000df28:	83 ec 0c             	sub    esp,0xc
c000df2b:	50                   	push   eax
c000df2c:	e8 41 ad 00 00       	call   c0018c72 <HalEndOfInterrupt(int)>
c000df31:	83 c4 10             	add    esp,0x10
c000df34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000df38:	c1 e0 04             	shl    eax,0x4
c000df3b:	05 80 bd 02 c0       	add    eax,0xc002bd80
c000df40:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000df48:	c1 e0 04             	shl    eax,0x4
c000df4b:	05 80 ad 02 c0       	add    eax,0xc002ad80
c000df50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df54:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000df5c:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000df61:	0f 8f ad 00 00 00    	jg     c000e014 <int_handler+0x120>
c000df67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000df6b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000df72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000df76:	01 d0                	add    eax,edx
c000df78:	8b 00                	mov    eax,DWORD PTR [eax]
c000df7a:	85 c0                	test   eax,eax
c000df7c:	0f 84 86 00 00 00    	je     c000e008 <int_handler+0x114>
c000df82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df86:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000df89:	83 f8 60             	cmp    eax,0x60
c000df8c:	75 46                	jne    c000dfd4 <int_handler+0xe0>
c000df8e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000df92:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000df99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000df9d:	01 d0                	add    eax,edx
c000df9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000dfa1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dfa5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000dfac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dfb0:	01 ca                	add    edx,ecx
c000dfb2:	8b 12                	mov    edx,DWORD PTR [edx]
c000dfb4:	83 ec 08             	sub    esp,0x8
c000dfb7:	52                   	push   edx
c000dfb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dfbc:	ff d0                	call   eax
c000dfbe:	83 c4 10             	add    esp,0x10
c000dfc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dfcd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dfd1:	eb 4d                	jmp    c000e020 <int_handler+0x12c>
c000dfd3:	90                   	nop
c000dfd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dfd8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dfdf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dfe3:	01 d0                	add    eax,edx
c000dfe5:	8b 00                	mov    eax,DWORD PTR [eax]
c000dfe7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dfeb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000dff2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dff6:	01 ca                	add    edx,ecx
c000dff8:	8b 12                	mov    edx,DWORD PTR [edx]
c000dffa:	83 ec 08             	sub    esp,0x8
c000dffd:	52                   	push   edx
c000dffe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e002:	ff d0                	call   eax
c000e004:	83 c4 10             	add    esp,0x10
c000e007:	90                   	nop
c000e008:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000e00d:	e9 4a ff ff ff       	jmp    c000df5c <int_handler+0x68>
c000e012:	66 90                	xchg   ax,ax
c000e014:	b8 00 00 00 00       	mov    eax,0x0
c000e019:	ba 00 00 00 00       	mov    edx,0x0
c000e01e:	66 90                	xchg   ax,ax
c000e020:	83 c4 2c             	add    esp,0x2c
c000e023:	c3                   	ret    

c000e024 <KeDisplayProgramFault(char const*)>:
c000e024:	83 ec 0c             	sub    esp,0xc
c000e027:	83 ec 0c             	sub    esp,0xc
c000e02a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02e:	e8 1b 8f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000e033:	83 c4 10             	add    esp,0x10
c000e036:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e03b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e03d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000e040:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000e046:	85 c0                	test   eax,eax
c000e048:	74 22                	je     c000e06c <KeDisplayProgramFault(char const*)+0x48>
c000e04a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e04f:	8b 00                	mov    eax,DWORD PTR [eax]
c000e051:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000e054:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000e05a:	6a 04                	push   0x4
c000e05c:	6a 0f                	push   0xf
c000e05e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e062:	50                   	push   eax
c000e063:	e8 82 35 00 00       	call   c00115ea <VgaText::puts(char const*, VgaColour, VgaColour)>
c000e068:	83 c4 10             	add    esp,0x10
c000e06b:	90                   	nop
c000e06c:	90                   	nop
c000e06d:	83 c4 0c             	add    esp,0xc
c000e070:	c3                   	ret    
c000e071:	8d 76 00             	lea    esi,[esi+0x0]

c000e074 <KeGeneralProtectionFault(void*, void*)>:
c000e074:	83 ec 0c             	sub    esp,0xc
c000e077:	83 ec 08             	sub    esp,0x8
c000e07a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e07e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e082:	e8 8d a1 00 00       	call   c0018214 <HalHandleGeneralProtectionFault(void*, void*)>
c000e087:	83 c4 10             	add    esp,0x10
c000e08a:	0f b6 c0             	movzx  eax,al
c000e08d:	85 c0                	test   eax,eax
c000e08f:	75 2f                	jne    c000e0c0 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000e091:	83 ec 0c             	sub    esp,0xc
c000e094:	68 6c 28 02 c0       	push   0xc002286c
c000e099:	e8 86 ff ff ff       	call   c000e024 <KeDisplayProgramFault(char const*)>
c000e09e:	83 c4 10             	add    esp,0x10
c000e0a1:	83 ec 0c             	sub    esp,0xc
c000e0a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0a8:	e8 01 a3 00 00       	call   c00183ae <HalDisplayDebugInfo(void*)>
c000e0ad:	83 c4 10             	add    esp,0x10
c000e0b0:	83 ec 0c             	sub    esp,0xc
c000e0b3:	6a 00                	push   0x0
c000e0b5:	e8 ee 81 00 00       	call   c00162a8 <Thr::terminateFromIRQ(int)>
c000e0ba:	83 c4 10             	add    esp,0x10
c000e0bd:	eb 05                	jmp    c000e0c4 <KeGeneralProtectionFault(void*, void*)+0x50>
c000e0bf:	90                   	nop
c000e0c0:	90                   	nop
c000e0c1:	8d 76 00             	lea    esi,[esi+0x0]
c000e0c4:	83 c4 0c             	add    esp,0xc
c000e0c7:	c3                   	ret    

c000e0c8 <KePageFault(void*, void*)>:
c000e0c8:	83 ec 0c             	sub    esp,0xc
c000e0cb:	83 ec 0c             	sub    esp,0xc
c000e0ce:	68 85 28 02 c0       	push   0xc0022885
c000e0d3:	e8 76 8e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000e0d8:	83 c4 10             	add    esp,0x10
c000e0db:	83 ec 08             	sub    esp,0x8
c000e0de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0e6:	e8 d4 a1 00 00       	call   c00182bf <HalHandlePageFault(void*, void*)>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	0f b6 c0             	movzx  eax,al
c000e0f1:	85 c0                	test   eax,eax
c000e0f3:	75 2f                	jne    c000e124 <KePageFault(void*, void*)+0x5c>
c000e0f5:	83 ec 0c             	sub    esp,0xc
c000e0f8:	68 92 28 02 c0       	push   0xc0022892
c000e0fd:	e8 22 ff ff ff       	call   c000e024 <KeDisplayProgramFault(char const*)>
c000e102:	83 c4 10             	add    esp,0x10
c000e105:	83 ec 0c             	sub    esp,0xc
c000e108:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e10c:	e8 9d a2 00 00       	call   c00183ae <HalDisplayDebugInfo(void*)>
c000e111:	83 c4 10             	add    esp,0x10
c000e114:	83 ec 0c             	sub    esp,0xc
c000e117:	6a 00                	push   0x0
c000e119:	e8 8a 81 00 00       	call   c00162a8 <Thr::terminateFromIRQ(int)>
c000e11e:	83 c4 10             	add    esp,0x10
c000e121:	eb 05                	jmp    c000e128 <KePageFault(void*, void*)+0x60>
c000e123:	90                   	nop
c000e124:	90                   	nop
c000e125:	8d 76 00             	lea    esi,[esi+0x0]
c000e128:	83 c4 0c             	add    esp,0xc
c000e12b:	c3                   	ret    

c000e12c <KeNonMaskableInterrupt(void*, void*)>:
c000e12c:	83 ec 0c             	sub    esp,0xc
c000e12f:	e8 08 a6 00 00       	call   c001873c <HalReceivedNMI()>
c000e134:	90                   	nop
c000e135:	83 c4 0c             	add    esp,0xc
c000e138:	c3                   	ret    
c000e139:	8d 76 00             	lea    esi,[esi+0x0]

c000e13c <KeOtherFault(void*, void*)>:
c000e13c:	83 ec 0c             	sub    esp,0xc
c000e13f:	83 ec 0c             	sub    esp,0xc
c000e142:	68 a0 28 02 c0       	push   0xc00228a0
c000e147:	e8 d8 fe ff ff       	call   c000e024 <KeDisplayProgramFault(char const*)>
c000e14c:	83 c4 10             	add    esp,0x10
c000e14f:	83 ec 0c             	sub    esp,0xc
c000e152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e156:	e8 53 a2 00 00       	call   c00183ae <HalDisplayDebugInfo(void*)>
c000e15b:	83 c4 10             	add    esp,0x10
c000e15e:	83 ec 0c             	sub    esp,0xc
c000e161:	6a 00                	push   0x0
c000e163:	e8 40 81 00 00       	call   c00162a8 <Thr::terminateFromIRQ(int)>
c000e168:	83 c4 10             	add    esp,0x10
c000e16b:	90                   	nop
c000e16c:	83 c4 0c             	add    esp,0xc
c000e16f:	c3                   	ret    

c000e170 <KeOpcodeFault(void*, void*)>:
c000e170:	55                   	push   ebp
c000e171:	89 e5                	mov    ebp,esp
c000e173:	83 ec 08             	sub    esp,0x8
c000e176:	83 ec 08             	sub    esp,0x8
c000e179:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000e17c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e17f:	e8 e8 a1 00 00       	call   c001836c <HalHandleOpcodeFault(void*, void*)>
c000e184:	83 c4 10             	add    esp,0x10
c000e187:	0f b6 c0             	movzx  eax,al
c000e18a:	85 c0                	test   eax,eax
c000e18c:	75 2e                	jne    c000e1bc <KeOpcodeFault(void*, void*)+0x4c>
c000e18e:	83 ec 0c             	sub    esp,0xc
c000e191:	68 c8 28 02 c0       	push   0xc00228c8
c000e196:	e8 89 fe ff ff       	call   c000e024 <KeDisplayProgramFault(char const*)>
c000e19b:	83 c4 10             	add    esp,0x10
c000e19e:	83 ec 0c             	sub    esp,0xc
c000e1a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e1a4:	e8 05 a2 00 00       	call   c00183ae <HalDisplayDebugInfo(void*)>
c000e1a9:	83 c4 10             	add    esp,0x10
c000e1ac:	83 ec 0c             	sub    esp,0xc
c000e1af:	6a 00                	push   0x0
c000e1b1:	e8 f2 80 00 00       	call   c00162a8 <Thr::terminateFromIRQ(int)>
c000e1b6:	83 c4 10             	add    esp,0x10
c000e1b9:	eb 05                	jmp    c000e1c0 <KeOpcodeFault(void*, void*)+0x50>
c000e1bb:	90                   	nop
c000e1bc:	90                   	nop
c000e1bd:	8d 76 00             	lea    esi,[esi+0x0]
c000e1c0:	c9                   	leave  
c000e1c1:	c3                   	ret    
c000e1c2:	66 90                	xchg   ax,ax

c000e1c4 <KeDoubleFault(void*, void*)>:
c000e1c4:	55                   	push   ebp
c000e1c5:	89 e5                	mov    ebp,esp
c000e1c7:	83 ec 08             	sub    esp,0x8
c000e1ca:	83 ec 0c             	sub    esp,0xc
c000e1cd:	68 d5 28 02 c0       	push   0xc00228d5
c000e1d2:	e8 fb 0b 00 00       	call   c000edd2 <KePanic(char const*)>
c000e1d7:	83 c4 10             	add    esp,0x10
c000e1da:	90                   	nop
c000e1db:	c9                   	leave  
c000e1dc:	c3                   	ret    
c000e1dd:	90                   	nop

c000e1de <GDTEntry::setBase(unsigned int)>:
c000e1de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e1e2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e1e6:	89 c1                	mov    ecx,eax
c000e1e8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e1ec:	c1 e9 10             	shr    ecx,0x10
c000e1ef:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e1f2:	c1 e8 18             	shr    eax,0x18
c000e1f5:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e1f8:	c3                   	ret    
c000e1f9:	90                   	nop

c000e1fa <GDTEntry::setLimit(unsigned int)>:
c000e1fa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e1fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e202:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e205:	66 89 01             	mov    WORD PTR [ecx],ax
c000e208:	c1 e8 10             	shr    eax,0x10
c000e20b:	83 e0 0f             	and    eax,0xf
c000e20e:	83 e2 f0             	and    edx,0xfffffff0
c000e211:	09 d0                	or     eax,edx
c000e213:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e216:	c3                   	ret    
c000e217:	90                   	nop

c000e218 <GDT::GDT()>:
c000e218:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e21c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e222:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e226:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e22c:	90                   	nop
c000e22d:	c3                   	ret    

c000e22e <GDT::addEntry(GDTEntry)>:
c000e22e:	53                   	push   ebx
c000e22f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e233:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e237:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e23b:	8b 02                	mov    eax,DWORD PTR [edx]
c000e23d:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000e241:	8d 48 01             	lea    ecx,[eax+0x1]
c000e244:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000e248:	c1 e0 03             	shl    eax,0x3
c000e24b:	89 0a                	mov    DWORD PTR [edx],ecx
c000e24d:	5b                   	pop    ebx
c000e24e:	c3                   	ret    
c000e24f:	90                   	nop

c000e250 <GDT::getNumberOfEntries()>:
c000e250:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e254:	8b 00                	mov    eax,DWORD PTR [eax]
c000e256:	c3                   	ret    
c000e257:	90                   	nop

c000e258 <GDT::flush()>:
c000e258:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e25c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e25e:	83 c0 04             	add    eax,0x4
c000e261:	a3 82 cd 02 c0       	mov    ds:0xc002cd82,eax
c000e266:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e26d:	66 89 15 80 cd 02 c0 	mov    WORD PTR ds:0xc002cd80,dx
c000e274:	e9 e1 20 ff ff       	jmp    c000035a <loadGDT>
c000e279:	90                   	nop

c000e27a <GDT::setup()>:
c000e27a:	57                   	push   edi
c000e27b:	56                   	push   esi
c000e27c:	53                   	push   ebx
c000e27d:	83 ec 30             	sub    esp,0x30
c000e280:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e284:	6a 00                	push   0x0
c000e286:	8d 74 24 14          	lea    esi,[esp+0x14]
c000e28a:	56                   	push   esi
c000e28b:	e8 4e ff ff ff       	call   c000e1de <GDTEntry::setBase(unsigned int)>
c000e290:	6a 00                	push   0x0
c000e292:	56                   	push   esi
c000e293:	e8 62 ff ff ff       	call   c000e1fa <GDTEntry::setLimit(unsigned int)>
c000e298:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000e2a0:	6a 00                	push   0x0
c000e2a2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000e2a6:	56                   	push   esi
c000e2a7:	e8 32 ff ff ff       	call   c000e1de <GDTEntry::setBase(unsigned int)>
c000e2ac:	68 ff ff ff 00       	push   0xffffff
c000e2b1:	56                   	push   esi
c000e2b2:	e8 43 ff ff ff       	call   c000e1fa <GDTEntry::setLimit(unsigned int)>
c000e2b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e2bb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e2bf:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000e2c4:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e2c8:	0d 00 9a c0 00       	or     eax,0xc09a00
c000e2cd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e2d1:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000e2d5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e2d9:	89 f8                	mov    eax,edi
c000e2db:	89 fa                	mov    edx,edi
c000e2dd:	80 e4 f7             	and    ah,0xf7
c000e2e0:	80 ce 60             	or     dh,0x60
c000e2e3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2e7:	89 c7                	mov    edi,eax
c000e2e9:	80 cc 60             	or     ah,0x60
c000e2ec:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e2f0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e2f4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e2f8:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000e2fc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e300:	83 c4 20             	add    esp,0x20
c000e303:	6a 00                	push   0x0
c000e305:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e309:	50                   	push   eax
c000e30a:	e8 cf fe ff ff       	call   c000e1de <GDTEntry::setBase(unsigned int)>
c000e30f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000e313:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e317:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e31b:	83 e0 3f             	and    eax,0x3f
c000e31e:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000e322:	6a 00                	push   0x0
c000e324:	8d 44 24 34          	lea    eax,[esp+0x34]
c000e328:	50                   	push   eax
c000e329:	e8 b0 fe ff ff       	call   c000e1de <GDTEntry::setBase(unsigned int)>
c000e32e:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000e332:	83 e0 3f             	and    eax,0x3f
c000e335:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000e339:	83 c4 0c             	add    esp,0xc
c000e33c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e340:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e344:	53                   	push   ebx
c000e345:	e8 e4 fe ff ff       	call   c000e22e <GDT::addEntry(GDTEntry)>
c000e34a:	83 c4 0c             	add    esp,0xc
c000e34d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e351:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e355:	53                   	push   ebx
c000e356:	e8 d3 fe ff ff       	call   c000e22e <GDT::addEntry(GDTEntry)>
c000e35b:	83 c4 0c             	add    esp,0xc
c000e35e:	57                   	push   edi
c000e35f:	56                   	push   esi
c000e360:	53                   	push   ebx
c000e361:	e8 c8 fe ff ff       	call   c000e22e <GDT::addEntry(GDTEntry)>
c000e366:	83 c4 0c             	add    esp,0xc
c000e369:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e36d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e371:	53                   	push   ebx
c000e372:	e8 b7 fe ff ff       	call   c000e22e <GDT::addEntry(GDTEntry)>
c000e377:	83 c4 0c             	add    esp,0xc
c000e37a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e37e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e382:	53                   	push   ebx
c000e383:	e8 a6 fe ff ff       	call   c000e22e <GDT::addEntry(GDTEntry)>
c000e388:	83 c4 0c             	add    esp,0xc
c000e38b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e38f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e393:	53                   	push   ebx
c000e394:	e8 95 fe ff ff       	call   c000e22e <GDT::addEntry(GDTEntry)>
c000e399:	83 c4 0c             	add    esp,0xc
c000e39c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e3a0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e3a4:	53                   	push   ebx
c000e3a5:	e8 84 fe ff ff       	call   c000e22e <GDT::addEntry(GDTEntry)>
c000e3aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e3ad:	e8 a6 fe ff ff       	call   c000e258 <GDT::flush()>
c000e3b2:	83 c4 40             	add    esp,0x40
c000e3b5:	5b                   	pop    ebx
c000e3b6:	5e                   	pop    esi
c000e3b7:	5f                   	pop    edi
c000e3b8:	c3                   	ret    

c000e3b9 <idleFunction(void*)>:
c000e3b9:	83 ec 0c             	sub    esp,0xc
c000e3bc:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000e3c3:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000e3ca:	75 01                	jne    c000e3cd <idleFunction(void*)+0x14>
c000e3cc:	fb                   	sti    
c000e3cd:	e8 05 a4 00 00       	call   c00187d7 <HalSystemIdle()>
c000e3d2:	e8 5f 26 01 00       	call   c0020a36 <idleCommon()>
c000e3d7:	eb f4                	jmp    c000e3cd <idleFunction(void*)+0x14>
c000e3d9:	66 90                	xchg   ax,ax
c000e3db:	90                   	nop

c000e3dc <IDTEntry::IDTEntry(bool)>:
c000e3dc:	53                   	push   ebx
c000e3dd:	83 ec 04             	sub    esp,0x4
c000e3e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3e4:	88 04 24             	mov    BYTE PTR [esp],al
c000e3e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3eb:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000e3f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3f5:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000e3f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3fd:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e400:	83 e2 f0             	and    edx,0xfffffff0
c000e403:	83 ca 0e             	or     edx,0xe
c000e406:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e40d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e410:	83 e2 ef             	and    edx,0xffffffef
c000e413:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e416:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000e41a:	85 c0                	test   eax,eax
c000e41c:	74 06                	je     c000e424 <IDTEntry::IDTEntry(bool)+0x48>
c000e41e:	b2 03                	mov    dl,0x3
c000e420:	eb 06                	jmp    c000e428 <IDTEntry::IDTEntry(bool)+0x4c>
c000e422:	66 90                	xchg   ax,ax
c000e424:	b2 00                	mov    dl,0x0
c000e426:	66 90                	xchg   ax,ax
c000e428:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e42c:	83 e2 03             	and    edx,0x3
c000e42f:	89 d3                	mov    ebx,edx
c000e431:	c1 e3 05             	shl    ebx,0x5
c000e434:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e437:	83 e2 9f             	and    edx,0xffffff9f
c000e43a:	88 d1                	mov    cl,dl
c000e43c:	88 da                	mov    dl,bl
c000e43e:	09 ca                	or     edx,ecx
c000e440:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e443:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e447:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e44a:	83 ca 80             	or     edx,0xffffff80
c000e44d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e450:	90                   	nop
c000e451:	83 c4 04             	add    esp,0x4
c000e454:	5b                   	pop    ebx
c000e455:	c3                   	ret    

c000e456 <IDTEntry::setOffset(unsigned int)>:
c000e456:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e45a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e45e:	66 89 02             	mov    WORD PTR [edx],ax
c000e461:	c1 e8 10             	shr    eax,0x10
c000e464:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000e468:	c3                   	ret    
c000e469:	90                   	nop
c000e46a:	66 90                	xchg   ax,ax

c000e46c <IDT::IDT()>:
c000e46c:	90                   	nop
c000e46d:	c3                   	ret    

c000e46e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000e46e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e472:	83 c0 30             	add    eax,0x30
c000e475:	c3                   	ret    

c000e476 <IDT::addEntry(IDTEntry, int)>:
c000e476:	53                   	push   ebx
c000e477:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e47b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e47f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e483:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e487:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000e48a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000e48e:	5b                   	pop    ebx
c000e48f:	c3                   	ret    

c000e490 <IDT::addEntry(int, void (*)(), bool)>:
c000e490:	53                   	push   ebx
c000e491:	83 ec 10             	sub    esp,0x10
c000e494:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000e499:	50                   	push   eax
c000e49a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000e49e:	53                   	push   ebx
c000e49f:	e8 38 ff ff ff       	call   c000e3dc <IDTEntry::IDTEntry(bool)>
c000e4a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e4a8:	53                   	push   ebx
c000e4a9:	e8 a8 ff ff ff       	call   c000e456 <IDTEntry::setOffset(unsigned int)>
c000e4ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e4b2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e4b6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e4ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e4be:	e8 b3 ff ff ff       	call   c000e476 <IDT::addEntry(IDTEntry, int)>
c000e4c3:	83 c4 30             	add    esp,0x30
c000e4c6:	5b                   	pop    ebx
c000e4c7:	c3                   	ret    

c000e4c8 <IDT::flush()>:
c000e4c8:	66 c7 05 88 cd 02 c0 ff 07 	mov    WORD PTR ds:0xc002cd88,0x7ff
c000e4d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4d5:	a3 8a cd 02 c0       	mov    ds:0xc002cd8a,eax
c000e4da:	0f 01 1d 88 cd 02 c0 	lidtd  ds:0xc002cd88
c000e4e1:	c3                   	ret    

c000e4e2 <IDT::setup()>:
c000e4e2:	57                   	push   edi
c000e4e3:	56                   	push   esi
c000e4e4:	53                   	push   ebx
c000e4e5:	83 ec 10             	sub    esp,0x10
c000e4e8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e4ec:	6a 00                	push   0x0
c000e4ee:	68 e0 fc 01 c0       	push   0xc001fce0
c000e4f3:	6a 00                	push   0x0
c000e4f5:	53                   	push   ebx
c000e4f6:	e8 95 ff ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e4fb:	6a 00                	push   0x0
c000e4fd:	68 f0 fc 01 c0       	push   0xc001fcf0
c000e502:	6a 01                	push   0x1
c000e504:	53                   	push   ebx
c000e505:	e8 86 ff ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e50a:	83 c4 20             	add    esp,0x20
c000e50d:	6a 00                	push   0x0
c000e50f:	68 fa fc 01 c0       	push   0xc001fcfa
c000e514:	6a 02                	push   0x2
c000e516:	53                   	push   ebx
c000e517:	e8 74 ff ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e51c:	6a 00                	push   0x0
c000e51e:	68 04 fd 01 c0       	push   0xc001fd04
c000e523:	6a 03                	push   0x3
c000e525:	53                   	push   ebx
c000e526:	e8 65 ff ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e52b:	83 c4 20             	add    esp,0x20
c000e52e:	6a 00                	push   0x0
c000e530:	68 0e fd 01 c0       	push   0xc001fd0e
c000e535:	6a 04                	push   0x4
c000e537:	53                   	push   ebx
c000e538:	e8 53 ff ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e53d:	6a 00                	push   0x0
c000e53f:	68 18 fd 01 c0       	push   0xc001fd18
c000e544:	6a 05                	push   0x5
c000e546:	53                   	push   ebx
c000e547:	e8 44 ff ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e54c:	83 c4 20             	add    esp,0x20
c000e54f:	6a 00                	push   0x0
c000e551:	68 22 fd 01 c0       	push   0xc001fd22
c000e556:	6a 06                	push   0x6
c000e558:	53                   	push   ebx
c000e559:	e8 32 ff ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e55e:	6a 00                	push   0x0
c000e560:	68 2c fd 01 c0       	push   0xc001fd2c
c000e565:	6a 07                	push   0x7
c000e567:	53                   	push   ebx
c000e568:	e8 23 ff ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e56d:	83 c4 20             	add    esp,0x20
c000e570:	6a 00                	push   0x0
c000e572:	68 36 fd 01 c0       	push   0xc001fd36
c000e577:	6a 08                	push   0x8
c000e579:	53                   	push   ebx
c000e57a:	e8 11 ff ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e57f:	6a 00                	push   0x0
c000e581:	68 3e fd 01 c0       	push   0xc001fd3e
c000e586:	6a 09                	push   0x9
c000e588:	53                   	push   ebx
c000e589:	e8 02 ff ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e58e:	83 c4 20             	add    esp,0x20
c000e591:	6a 00                	push   0x0
c000e593:	68 48 fd 01 c0       	push   0xc001fd48
c000e598:	6a 0a                	push   0xa
c000e59a:	53                   	push   ebx
c000e59b:	e8 f0 fe ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e5a0:	6a 00                	push   0x0
c000e5a2:	68 50 fd 01 c0       	push   0xc001fd50
c000e5a7:	6a 0b                	push   0xb
c000e5a9:	53                   	push   ebx
c000e5aa:	e8 e1 fe ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e5af:	83 c4 20             	add    esp,0x20
c000e5b2:	6a 00                	push   0x0
c000e5b4:	68 58 fd 01 c0       	push   0xc001fd58
c000e5b9:	6a 0c                	push   0xc
c000e5bb:	53                   	push   ebx
c000e5bc:	e8 cf fe ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e5c1:	6a 00                	push   0x0
c000e5c3:	68 60 fd 01 c0       	push   0xc001fd60
c000e5c8:	6a 0d                	push   0xd
c000e5ca:	53                   	push   ebx
c000e5cb:	e8 c0 fe ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e5d0:	83 c4 20             	add    esp,0x20
c000e5d3:	6a 00                	push   0x0
c000e5d5:	68 7a fd 01 c0       	push   0xc001fd7a
c000e5da:	6a 0e                	push   0xe
c000e5dc:	53                   	push   ebx
c000e5dd:	e8 ae fe ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e5e2:	6a 00                	push   0x0
c000e5e4:	68 82 fd 01 c0       	push   0xc001fd82
c000e5e9:	6a 0f                	push   0xf
c000e5eb:	53                   	push   ebx
c000e5ec:	e8 9f fe ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e5f1:	83 c4 20             	add    esp,0x20
c000e5f4:	6a 00                	push   0x0
c000e5f6:	68 8c fd 01 c0       	push   0xc001fd8c
c000e5fb:	6a 10                	push   0x10
c000e5fd:	53                   	push   ebx
c000e5fe:	e8 8d fe ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e603:	6a 00                	push   0x0
c000e605:	68 96 fd 01 c0       	push   0xc001fd96
c000e60a:	6a 11                	push   0x11
c000e60c:	53                   	push   ebx
c000e60d:	e8 7e fe ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e612:	83 c4 20             	add    esp,0x20
c000e615:	6a 00                	push   0x0
c000e617:	68 a0 fd 01 c0       	push   0xc001fda0
c000e61c:	6a 12                	push   0x12
c000e61e:	53                   	push   ebx
c000e61f:	e8 6c fe ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e624:	6a 01                	push   0x1
c000e626:	68 3a fe 01 c0       	push   0xc001fe3a
c000e62b:	6a 60                	push   0x60
c000e62d:	53                   	push   ebx
c000e62e:	e8 5d fe ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e633:	83 c4 20             	add    esp,0x20
c000e636:	6a 00                	push   0x0
c000e638:	68 41 fe 01 c0       	push   0xc001fe41
c000e63d:	6a 20                	push   0x20
c000e63f:	53                   	push   ebx
c000e640:	e8 4b fe ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e645:	6a 00                	push   0x0
c000e647:	68 2c fe 01 c0       	push   0xc001fe2c
c000e64c:	6a 21                	push   0x21
c000e64e:	53                   	push   ebx
c000e64f:	e8 3c fe ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e654:	83 c4 20             	add    esp,0x20
c000e657:	6a 00                	push   0x0
c000e659:	68 33 fe 01 c0       	push   0xc001fe33
c000e65e:	6a 22                	push   0x22
c000e660:	53                   	push   ebx
c000e661:	e8 2a fe ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e666:	6a 00                	push   0x0
c000e668:	68 aa fd 01 c0       	push   0xc001fdaa
c000e66d:	6a 23                	push   0x23
c000e66f:	53                   	push   ebx
c000e670:	e8 1b fe ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	6a 00                	push   0x0
c000e67a:	68 b4 fd 01 c0       	push   0xc001fdb4
c000e67f:	6a 24                	push   0x24
c000e681:	53                   	push   ebx
c000e682:	e8 09 fe ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e687:	6a 00                	push   0x0
c000e689:	68 be fd 01 c0       	push   0xc001fdbe
c000e68e:	6a 25                	push   0x25
c000e690:	53                   	push   ebx
c000e691:	e8 fa fd ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e696:	83 c4 20             	add    esp,0x20
c000e699:	6a 00                	push   0x0
c000e69b:	68 c8 fd 01 c0       	push   0xc001fdc8
c000e6a0:	6a 26                	push   0x26
c000e6a2:	53                   	push   ebx
c000e6a3:	e8 e8 fd ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e6a8:	6a 00                	push   0x0
c000e6aa:	68 d2 fd 01 c0       	push   0xc001fdd2
c000e6af:	6a 27                	push   0x27
c000e6b1:	53                   	push   ebx
c000e6b2:	e8 d9 fd ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e6b7:	83 c4 20             	add    esp,0x20
c000e6ba:	6a 00                	push   0x0
c000e6bc:	68 dc fd 01 c0       	push   0xc001fddc
c000e6c1:	6a 28                	push   0x28
c000e6c3:	53                   	push   ebx
c000e6c4:	e8 c7 fd ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e6c9:	6a 00                	push   0x0
c000e6cb:	68 e6 fd 01 c0       	push   0xc001fde6
c000e6d0:	6a 29                	push   0x29
c000e6d2:	53                   	push   ebx
c000e6d3:	e8 b8 fd ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e6d8:	83 c4 20             	add    esp,0x20
c000e6db:	6a 00                	push   0x0
c000e6dd:	68 f0 fd 01 c0       	push   0xc001fdf0
c000e6e2:	6a 2a                	push   0x2a
c000e6e4:	53                   	push   ebx
c000e6e5:	e8 a6 fd ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e6ea:	6a 00                	push   0x0
c000e6ec:	68 fa fd 01 c0       	push   0xc001fdfa
c000e6f1:	6a 2b                	push   0x2b
c000e6f3:	53                   	push   ebx
c000e6f4:	e8 97 fd ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e6f9:	83 c4 20             	add    esp,0x20
c000e6fc:	6a 00                	push   0x0
c000e6fe:	68 04 fe 01 c0       	push   0xc001fe04
c000e703:	6a 2c                	push   0x2c
c000e705:	53                   	push   ebx
c000e706:	e8 85 fd ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e70b:	6a 00                	push   0x0
c000e70d:	68 0e fe 01 c0       	push   0xc001fe0e
c000e712:	6a 2d                	push   0x2d
c000e714:	53                   	push   ebx
c000e715:	e8 76 fd ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e71a:	83 c4 20             	add    esp,0x20
c000e71d:	6a 00                	push   0x0
c000e71f:	68 18 fe 01 c0       	push   0xc001fe18
c000e724:	6a 2e                	push   0x2e
c000e726:	53                   	push   ebx
c000e727:	e8 64 fd ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e72c:	6a 00                	push   0x0
c000e72e:	68 22 fe 01 c0       	push   0xc001fe22
c000e733:	6a 2f                	push   0x2f
c000e735:	53                   	push   ebx
c000e736:	e8 55 fd ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e73b:	83 c4 20             	add    esp,0x20
c000e73e:	6a 00                	push   0x0
c000e740:	68 7c ff 01 c0       	push   0xc001ff7c
c000e745:	6a 30                	push   0x30
c000e747:	53                   	push   ebx
c000e748:	e8 43 fd ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e74d:	6a 00                	push   0x0
c000e74f:	68 86 ff 01 c0       	push   0xc001ff86
c000e754:	6a 31                	push   0x31
c000e756:	53                   	push   ebx
c000e757:	e8 34 fd ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e75c:	83 c4 20             	add    esp,0x20
c000e75f:	6a 00                	push   0x0
c000e761:	68 90 ff 01 c0       	push   0xc001ff90
c000e766:	6a 32                	push   0x32
c000e768:	53                   	push   ebx
c000e769:	e8 22 fd ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e76e:	6a 00                	push   0x0
c000e770:	68 9a ff 01 c0       	push   0xc001ff9a
c000e775:	6a 33                	push   0x33
c000e777:	53                   	push   ebx
c000e778:	e8 13 fd ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e77d:	83 c4 20             	add    esp,0x20
c000e780:	6a 00                	push   0x0
c000e782:	68 a4 ff 01 c0       	push   0xc001ffa4
c000e787:	6a 34                	push   0x34
c000e789:	53                   	push   ebx
c000e78a:	e8 01 fd ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e78f:	6a 00                	push   0x0
c000e791:	68 ae ff 01 c0       	push   0xc001ffae
c000e796:	6a 35                	push   0x35
c000e798:	53                   	push   ebx
c000e799:	e8 f2 fc ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e79e:	83 c4 20             	add    esp,0x20
c000e7a1:	6a 00                	push   0x0
c000e7a3:	68 b8 ff 01 c0       	push   0xc001ffb8
c000e7a8:	6a 36                	push   0x36
c000e7aa:	53                   	push   ebx
c000e7ab:	e8 e0 fc ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e7b0:	6a 00                	push   0x0
c000e7b2:	68 c2 ff 01 c0       	push   0xc001ffc2
c000e7b7:	6a 37                	push   0x37
c000e7b9:	53                   	push   ebx
c000e7ba:	e8 d1 fc ff ff       	call   c000e490 <IDT::addEntry(int, void (*)(), bool)>
c000e7bf:	83 c4 1c             	add    esp,0x1c
c000e7c2:	6a 03                	push   0x3
c000e7c4:	6a 02                	push   0x2
c000e7c6:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000e7cc:	e8 a1 41 00 00       	call   c0012972 <VAS::allocatePages(int, int)>
c000e7d1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000e7d8:	89 c6                	mov    esi,eax
c000e7da:	e8 ad 02 00 00       	call   c000ea8c <malloc>
c000e7df:	81 c6 00 20 00 00    	add    esi,0x2000
c000e7e5:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7e8:	89 c7                	mov    edi,eax
c000e7ea:	e8 45 32 00 00       	call   c0011a34 <TSS::TSS()>
c000e7ef:	83 c4 0c             	add    esp,0xc
c000e7f2:	68 36 fd 01 c0       	push   0xc001fd36
c000e7f7:	56                   	push   esi
c000e7f8:	57                   	push   edi
c000e7f9:	e8 7a 32 00 00       	call   c0011a78 <TSS::setup(unsigned long, unsigned long)>
c000e7fe:	89 c6                	mov    esi,eax
c000e800:	58                   	pop    eax
c000e801:	5a                   	pop    edx
c000e802:	6a 00                	push   0x0
c000e804:	8d 44 24 14          	lea    eax,[esp+0x14]
c000e808:	50                   	push   eax
c000e809:	e8 ce fb ff ff       	call   c000e3dc <IDTEntry::IDTEntry(bool)>
c000e80e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e812:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000e817:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000e81e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e822:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000e828:	80 ce 05             	or     dh,0x5
c000e82b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e82f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000e832:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e836:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000e839:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e83c:	e8 87 fc ff ff       	call   c000e4c8 <IDT::flush()>
c000e841:	83 c4 20             	add    esp,0x20
c000e844:	5b                   	pop    ebx
c000e845:	5e                   	pop    esi
c000e846:	5f                   	pop    edi
c000e847:	c3                   	ret    

c000e848 <CPU::current()>:
c000e848:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000e84d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e853:	c3                   	ret    

c000e854 <operator new(unsigned long)>:
c000e854:	e9 33 02 00 00       	jmp    c000ea8c <malloc>

c000e859 <operator delete(void*)>:
c000e859:	e9 4e 02 00 00       	jmp    c000eaac <rfree>

c000e85e <disableIRQs()>:
c000e85e:	fa                   	cli    
c000e85f:	c3                   	ret    

c000e860 <enableIRQs()>:
c000e860:	fb                   	sti    
c000e861:	c3                   	ret    

c000e862 <lockScheduler()>:
c000e862:	fa                   	cli    
c000e863:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c000e869:	c3                   	ret    

c000e86a <unlockScheduler()>:
c000e86a:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000e871:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000e878:	75 01                	jne    c000e87b <unlockScheduler()+0x11>
c000e87a:	fb                   	sti    
c000e87b:	c3                   	ret    

c000e87c <lockStuff()>:
c000e87c:	fa                   	cli    
c000e87d:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c000e883:	ff 05 ac d6 02 c0    	inc    DWORD PTR ds:0xc002d6ac
c000e889:	c3                   	ret    

c000e88a <unlockStuff()>:
c000e88a:	83 ec 0c             	sub    esp,0xc
c000e88d:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000e892:	48                   	dec    eax
c000e893:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000e898:	75 18                	jne    c000e8b2 <unlockStuff()+0x28>
c000e89a:	83 3d a8 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6a8,0x0
c000e8a1:	74 0f                	je     c000e8b2 <unlockStuff()+0x28>
c000e8a3:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000e8ad:	e8 46 71 00 00       	call   c00159f8 <schedule()>
c000e8b2:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000e8b9:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000e8c0:	75 01                	jne    c000e8c3 <unlockStuff()+0x39>
c000e8c2:	fb                   	sti    
c000e8c3:	83 c4 0c             	add    esp,0xc
c000e8c6:	c3                   	ret    

c000e8c7 <Virt::getAKernelVAS()>:
c000e8c7:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c000e8cc:	c3                   	ret    

c000e8cd <__not_memcpy>:
c000e8cd:	57                   	push   edi
c000e8ce:	56                   	push   esi
c000e8cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e8d7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e8db:	89 c7                	mov    edi,eax
c000e8dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e8df:	5e                   	pop    esi
c000e8e0:	5f                   	pop    edi
c000e8e1:	c3                   	ret    

c000e8e2 <sbrk>:
c000e8e2:	55                   	push   ebp
c000e8e3:	57                   	push   edi
c000e8e4:	56                   	push   esi
c000e8e5:	53                   	push   ebx
c000e8e6:	83 ec 1c             	sub    esp,0x1c
c000e8e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e8ed:	85 c0                	test   eax,eax
c000e8ef:	74 66                	je     c000e957 <sbrk+0x75>
c000e8f1:	78 6b                	js     c000e95e <sbrk+0x7c>
c000e8f3:	8b 15 10 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024f10
c000e8f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e8fd:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c000e903:	05 ff 0f 00 00       	add    eax,0xfff
c000e908:	0f 49 e8             	cmovns ebp,eax
c000e90b:	c1 fd 0c             	sar    ebp,0xc
c000e90e:	bb 00 00 00 00       	mov    ebx,0x0
c000e913:	8b 35 d0 ce 02 c0    	mov    esi,DWORD PTR ds:0xc002ced0
c000e919:	8b 3d 10 4f 02 c0    	mov    edi,DWORD PTR ds:0xc0024f10
c000e91f:	e8 a8 06 00 00       	call   c000efcc <Phys::allocatePage()>
c000e924:	68 01 04 00 00       	push   0x401
c000e929:	57                   	push   edi
c000e92a:	50                   	push   eax
c000e92b:	56                   	push   esi
c000e92c:	e8 39 3f 00 00       	call   c001286a <VAS::mapPage(unsigned long, unsigned long, int)>
c000e931:	81 05 10 4f 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0024f10,0x1000
c000e93b:	83 c3 01             	add    ebx,0x1
c000e93e:	83 c4 10             	add    esp,0x10
c000e941:	39 dd                	cmp    ebp,ebx
c000e943:	75 ce                	jne    c000e913 <sbrk+0x31>
c000e945:	0f 20 d8             	mov    eax,cr3
c000e948:	0f 22 d8             	mov    cr3,eax
c000e94b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e94f:	83 c4 1c             	add    esp,0x1c
c000e952:	5b                   	pop    ebx
c000e953:	5e                   	pop    esi
c000e954:	5f                   	pop    edi
c000e955:	5d                   	pop    ebp
c000e956:	c3                   	ret    
c000e957:	a1 10 4f 02 c0       	mov    eax,ds:0xc0024f10
c000e95c:	eb f1                	jmp    c000e94f <sbrk+0x6d>
c000e95e:	83 ec 08             	sub    esp,0x8
c000e961:	50                   	push   eax
c000e962:	68 e4 28 02 c0       	push   0xc00228e4
c000e967:	e8 e2 85 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000e96c:	83 c4 10             	add    esp,0x10
c000e96f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e974:	eb d9                	jmp    c000e94f <sbrk+0x6d>

c000e976 <sbrk_thunk>:
c000e976:	83 ec 0c             	sub    esp,0xc
c000e979:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e97d:	3d ff bf 00 00       	cmp    eax,0xbfff
c000e982:	7f 10                	jg     c000e994 <sbrk_thunk+0x1e>
c000e984:	83 ec 0c             	sub    esp,0xc
c000e987:	50                   	push   eax
c000e988:	e8 55 ff ff ff       	call   c000e8e2 <sbrk>
c000e98d:	83 c4 10             	add    esp,0x10
c000e990:	83 c4 0c             	add    esp,0xc
c000e993:	c3                   	ret    
c000e994:	83 ec 08             	sub    esp,0x8
c000e997:	50                   	push   eax
c000e998:	68 14 29 02 c0       	push   0xc0022914
c000e99d:	e8 ac 85 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000e9a2:	83 c4 10             	add    esp,0x10
c000e9a5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e9aa:	eb e4                	jmp    c000e990 <sbrk_thunk+0x1a>

c000e9ac <mmap>:
c000e9ac:	55                   	push   ebp
c000e9ad:	57                   	push   edi
c000e9ae:	56                   	push   esi
c000e9af:	53                   	push   ebx
c000e9b0:	83 ec 18             	sub    esp,0x18
c000e9b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9b7:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000e9bd:	89 fb                	mov    ebx,edi
c000e9bf:	c1 eb 0c             	shr    ebx,0xc
c000e9c2:	53                   	push   ebx
c000e9c3:	e8 c9 37 00 00       	call   c0012191 <Virt::allocateKernelVirtualPages(int)>
c000e9c8:	89 c5                	mov    ebp,eax
c000e9ca:	83 c4 10             	add    esp,0x10
c000e9cd:	85 db                	test   ebx,ebx
c000e9cf:	7e 2f                	jle    c000ea00 <mmap+0x54>
c000e9d1:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000e9d7:	01 c7                	add    edi,eax
c000e9d9:	89 c3                	mov    ebx,eax
c000e9db:	8b 35 d0 ce 02 c0    	mov    esi,DWORD PTR ds:0xc002ced0
c000e9e1:	e8 e6 05 00 00       	call   c000efcc <Phys::allocatePage()>
c000e9e6:	68 01 04 00 00       	push   0x401
c000e9eb:	53                   	push   ebx
c000e9ec:	50                   	push   eax
c000e9ed:	56                   	push   esi
c000e9ee:	e8 77 3e 00 00       	call   c001286a <VAS::mapPage(unsigned long, unsigned long, int)>
c000e9f3:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e9f9:	83 c4 10             	add    esp,0x10
c000e9fc:	39 fb                	cmp    ebx,edi
c000e9fe:	75 db                	jne    c000e9db <mmap+0x2f>
c000ea00:	89 e8                	mov    eax,ebp
c000ea02:	83 c4 0c             	add    esp,0xc
c000ea05:	5b                   	pop    ebx
c000ea06:	5e                   	pop    esi
c000ea07:	5f                   	pop    edi
c000ea08:	5d                   	pop    ebp
c000ea09:	c3                   	ret    

c000ea0a <munmap>:
c000ea0a:	83 ec 18             	sub    esp,0x18
c000ea0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea11:	e8 79 3a 00 00       	call   c001248f <Virt::freeKernelVirtualPages(unsigned long)>
c000ea16:	b8 00 00 00 00       	mov    eax,0x0
c000ea1b:	83 c4 1c             	add    esp,0x1c
c000ea1e:	c3                   	ret    

c000ea1f <liballoc_lock()>:
c000ea1f:	fa                   	cli    
c000ea20:	83 05 b0 d6 02 c0 01 	add    DWORD PTR ds:0xc002d6b0,0x1
c000ea27:	b8 00 00 00 00       	mov    eax,0x0
c000ea2c:	c3                   	ret    

c000ea2d <liballoc_unlock()>:
c000ea2d:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000ea35:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000ea3c:	75 01                	jne    c000ea3f <liballoc_unlock()+0x12>
c000ea3e:	fb                   	sti    
c000ea3f:	b8 00 00 00 00       	mov    eax,0x0
c000ea44:	c3                   	ret    

c000ea45 <liballoc_alloc(int)>:
c000ea45:	83 ec 10             	sub    esp,0x10
c000ea48:	6a 01                	push   0x1
c000ea4a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea4e:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000ea54:	e8 19 3f 00 00       	call   c0012972 <VAS::allocatePages(int, int)>
c000ea59:	83 c4 1c             	add    esp,0x1c
c000ea5c:	c3                   	ret    

c000ea5d <liballoc_free(void*, int)>:
c000ea5d:	83 ec 14             	sub    esp,0x14
c000ea60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea64:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000ea6a:	e8 5d 3b 00 00       	call   c00125cc <VAS::freeAllocatedPages(unsigned long)>
c000ea6f:	b8 00 00 00 00       	mov    eax,0x0
c000ea74:	83 c4 1c             	add    esp,0x1c
c000ea77:	c3                   	ret    

c000ea78 <realloc>:
c000ea78:	83 ec 14             	sub    esp,0x14
c000ea7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea83:	e8 fd 2c ff ff       	call   c0001785 <dlrealloc>
c000ea88:	83 c4 1c             	add    esp,0x1c
c000ea8b:	c3                   	ret    

c000ea8c <malloc>:
c000ea8c:	83 ec 18             	sub    esp,0x18
c000ea8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea93:	e8 b0 27 ff ff       	call   c0001248 <dlmalloc>
c000ea98:	83 c4 1c             	add    esp,0x1c
c000ea9b:	c3                   	ret    

c000ea9c <free>:
c000ea9c:	83 ec 18             	sub    esp,0x18
c000ea9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eaa3:	e8 de 22 ff ff       	call   c0000d86 <dlfree>
c000eaa8:	83 c4 1c             	add    esp,0x1c
c000eaab:	c3                   	ret    

c000eaac <rfree>:
c000eaac:	83 ec 18             	sub    esp,0x18
c000eaaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eab3:	e8 ce 22 ff ff       	call   c0000d86 <dlfree>
c000eab8:	83 c4 1c             	add    esp,0x1c
c000eabb:	c3                   	ret    

c000eabc <calloc>:
c000eabc:	56                   	push   esi
c000eabd:	53                   	push   ebx
c000eabe:	83 ec 10             	sub    esp,0x10
c000eac1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000eac5:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000eaca:	53                   	push   ebx
c000eacb:	e8 bc ff ff ff       	call   c000ea8c <malloc>
c000ead0:	89 c6                	mov    esi,eax
c000ead2:	83 c4 0c             	add    esp,0xc
c000ead5:	53                   	push   ebx
c000ead6:	6a 00                	push   0x0
c000ead8:	50                   	push   eax
c000ead9:	e8 12 1a ff ff       	call   c00004f0 <memset>
c000eade:	89 f0                	mov    eax,esi
c000eae0:	83 c4 14             	add    esp,0x14
c000eae3:	5b                   	pop    ebx
c000eae4:	5e                   	pop    esi
c000eae5:	c3                   	ret    
c000eae6:	66 90                	xchg   ax,ax

c000eae8 <KeMailboxTryPost(Mailbox*, void*)>:
c000eae8:	83 ec 10             	sub    esp,0x10
c000eaeb:	fa                   	cli    
c000eaec:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000eaf1:	83 c0 01             	add    eax,0x1
c000eaf4:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000eaf9:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000eafe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000eb05:	85 c0                	test   eax,eax
c000eb07:	75 23                	jne    c000eb2c <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000eb09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb0d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eb11:	89 10                	mov    DWORD PTR [eax],edx
c000eb13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000eb1a:	8d 50 01             	lea    edx,[eax+0x1]
c000eb1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb21:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000eb24:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000eb29:	8d 76 00             	lea    esi,[esi+0x0]
c000eb2c:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000eb34:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000eb39:	85 c0                	test   eax,eax
c000eb3b:	75 03                	jne    c000eb40 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000eb3d:	fb                   	sti    
c000eb3e:	66 90                	xchg   ax,ax
c000eb40:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eb44:	83 c4 10             	add    esp,0x10
c000eb47:	c3                   	ret    

c000eb48 <KeMailboxTryGet(Mailbox*, void**)>:
c000eb48:	83 ec 10             	sub    esp,0x10
c000eb4b:	fa                   	cli    
c000eb4c:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000eb51:	83 c0 01             	add    eax,0x1
c000eb54:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000eb59:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000eb5e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000eb65:	83 f8 01             	cmp    eax,0x1
c000eb68:	75 22                	jne    c000eb8c <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000eb6a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb6e:	8b 10                	mov    edx,DWORD PTR [eax]
c000eb70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb74:	89 10                	mov    DWORD PTR [eax],edx
c000eb76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000eb7d:	8d 50 ff             	lea    edx,[eax-0x1]
c000eb80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb84:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000eb87:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000eb8c:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000eb94:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000eb99:	85 c0                	test   eax,eax
c000eb9b:	75 03                	jne    c000eba0 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000eb9d:	fb                   	sti    
c000eb9e:	66 90                	xchg   ax,ax
c000eba0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eba4:	83 c4 10             	add    esp,0x10
c000eba7:	c3                   	ret    

c000eba8 <KeMailboxCreate()>:
c000eba8:	83 ec 1c             	sub    esp,0x1c
c000ebab:	83 ec 0c             	sub    esp,0xc
c000ebae:	6a 08                	push   0x8
c000ebb0:	e8 d7 fe ff ff       	call   c000ea8c <malloc>
c000ebb5:	83 c4 10             	add    esp,0x10
c000ebb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ebbc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ebc0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ebc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ebca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ebd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ebd5:	83 c4 1c             	add    esp,0x1c
c000ebd8:	c3                   	ret    
c000ebd9:	8d 76 00             	lea    esi,[esi+0x0]

c000ebdc <KeMailboxPost(Mailbox*, void*)>:
c000ebdc:	83 ec 1c             	sub    esp,0x1c
c000ebdf:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ebe4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ebe8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ebec:	e8 f7 fe ff ff       	call   c000eae8 <KeMailboxTryPost(Mailbox*, void*)>
c000ebf1:	83 c4 08             	add    esp,0x8
c000ebf4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ebf8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ebfc:	83 f0 01             	xor    eax,0x1
c000ebff:	0f b6 c0             	movzx  eax,al
c000ec02:	85 c0                	test   eax,eax
c000ec04:	74 26                	je     c000ec2c <KeMailboxPost(Mailbox*, void*)+0x50>
c000ec06:	fa                   	cli    
c000ec07:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000ec0c:	83 c0 01             	add    eax,0x1
c000ec0f:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000ec14:	e8 df 6d 00 00       	call   c00159f8 <schedule()>
c000ec19:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000ec21:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000ec26:	85 c0                	test   eax,eax
c000ec28:	75 02                	jne    c000ec2c <KeMailboxPost(Mailbox*, void*)+0x50>
c000ec2a:	fb                   	sti    
c000ec2b:	90                   	nop
c000ec2c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ec31:	85 c0                	test   eax,eax
c000ec33:	75 03                	jne    c000ec38 <KeMailboxPost(Mailbox*, void*)+0x5c>
c000ec35:	eb ad                	jmp    c000ebe4 <KeMailboxPost(Mailbox*, void*)+0x8>
c000ec37:	90                   	nop
c000ec38:	90                   	nop
c000ec39:	83 c4 1c             	add    esp,0x1c
c000ec3c:	c3                   	ret    
c000ec3d:	8d 76 00             	lea    esi,[esi+0x0]

c000ec40 <KeMailboxGet(Mailbox*, void**)>:
c000ec40:	83 ec 1c             	sub    esp,0x1c
c000ec43:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ec48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ec4c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ec50:	e8 f3 fe ff ff       	call   c000eb48 <KeMailboxTryGet(Mailbox*, void**)>
c000ec55:	83 c4 08             	add    esp,0x8
c000ec58:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ec5c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ec60:	83 f0 01             	xor    eax,0x1
c000ec63:	0f b6 c0             	movzx  eax,al
c000ec66:	85 c0                	test   eax,eax
c000ec68:	74 26                	je     c000ec90 <KeMailboxGet(Mailbox*, void**)+0x50>
c000ec6a:	fa                   	cli    
c000ec6b:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000ec70:	83 c0 01             	add    eax,0x1
c000ec73:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000ec78:	e8 7b 6d 00 00       	call   c00159f8 <schedule()>
c000ec7d:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000ec85:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000ec8a:	85 c0                	test   eax,eax
c000ec8c:	75 02                	jne    c000ec90 <KeMailboxGet(Mailbox*, void**)+0x50>
c000ec8e:	fb                   	sti    
c000ec8f:	90                   	nop
c000ec90:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ec95:	85 c0                	test   eax,eax
c000ec97:	75 03                	jne    c000ec9c <KeMailboxGet(Mailbox*, void**)+0x5c>
c000ec99:	eb ad                	jmp    c000ec48 <KeMailboxGet(Mailbox*, void**)+0x8>
c000ec9b:	90                   	nop
c000ec9c:	90                   	nop
c000ec9d:	83 c4 1c             	add    esp,0x1c
c000eca0:	c3                   	ret    
c000eca1:	8d 76 00             	lea    esi,[esi+0x0]

c000eca4 <KeMailboxDestroy(Mailbox*)>:
c000eca4:	83 ec 0c             	sub    esp,0xc
c000eca7:	83 ec 0c             	sub    esp,0xc
c000ecaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ecae:	e8 e9 fd ff ff       	call   c000ea9c <free>
c000ecb3:	83 c4 10             	add    esp,0x10
c000ecb6:	90                   	nop
c000ecb7:	83 c4 0c             	add    esp,0xc
c000ecba:	c3                   	ret    

c000ecbb <KeEntryPoint>:
c000ecbb:	57                   	push   edi
c000ecbc:	bf f9 03 00 00       	mov    edi,0x3f9
c000ecc1:	56                   	push   esi
c000ecc2:	31 f6                	xor    esi,esi
c000ecc4:	53                   	push   ebx
c000ecc5:	89 fa                	mov    edx,edi
c000ecc7:	83 ec 2c             	sub    esp,0x2c
c000ecca:	a1 00 05 00 00       	mov    eax,ds:0x500
c000eccf:	a3 90 cd 02 c0       	mov    ds:0xc002cd90,eax
c000ecd4:	89 f0                	mov    eax,esi
c000ecd6:	ee                   	out    dx,al
c000ecd7:	bb fb 03 00 00       	mov    ebx,0x3fb
c000ecdc:	b0 80                	mov    al,0x80
c000ecde:	89 da                	mov    edx,ebx
c000ece0:	ee                   	out    dx,al
c000ece1:	b1 03                	mov    cl,0x3
c000ece3:	ba f8 03 00 00       	mov    edx,0x3f8
c000ece8:	88 c8                	mov    al,cl
c000ecea:	ee                   	out    dx,al
c000eceb:	89 f0                	mov    eax,esi
c000eced:	89 fa                	mov    edx,edi
c000ecef:	ee                   	out    dx,al
c000ecf0:	88 c8                	mov    al,cl
c000ecf2:	89 da                	mov    edx,ebx
c000ecf4:	ee                   	out    dx,al
c000ecf5:	b0 c7                	mov    al,0xc7
c000ecf7:	ba fa 03 00 00       	mov    edx,0x3fa
c000ecfc:	ee                   	out    dx,al
c000ecfd:	b0 0b                	mov    al,0xb
c000ecff:	ba fc 03 00 00       	mov    edx,0x3fc
c000ed04:	ee                   	out    dx,al
c000ed05:	68 23 29 02 c0       	push   0xc0022923
c000ed0a:	e8 3f 82 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ed0f:	e8 04 da ff ff       	call   c000c718 <KeDisplaySplashScreen()>
c000ed14:	a1 24 05 00 00       	mov    eax,ds:0x524
c000ed19:	05 ff 0f 00 00       	add    eax,0xfff
c000ed1e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ed23:	89 04 24             	mov    DWORD PTR [esp],eax
c000ed26:	e8 32 04 00 00       	call   c000f15d <Phys::physicalMemorySetup(unsigned int)>
c000ed2b:	e8 35 36 00 00       	call   c0012365 <Virt::virtualMemorySetup()>
c000ed30:	e8 2d d9 ff ff       	call   c000c662 <KeInitialiseAtexit()>
c000ed35:	c7 04 24 3a 29 02 c0 	mov    DWORD PTR [esp],0xc002293a
c000ed3c:	e8 0d 82 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ed41:	58                   	pop    eax
c000ed42:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000ed46:	53                   	push   ebx
c000ed47:	e8 00 39 00 00       	call   c001264c <VAS::VAS()>
c000ed4c:	c7 04 24 4a 29 02 c0 	mov    DWORD PTR [esp],0xc002294a
c000ed53:	89 1d d0 ce 02 c0    	mov    DWORD PTR ds:0xc002ced0,ebx
c000ed59:	e8 f0 81 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ed5e:	e8 1b 18 01 00       	call   c002057e <_init>
c000ed63:	c7 04 24 5e 29 02 c0 	mov    DWORD PTR [esp],0xc002295e
c000ed6a:	e8 df 81 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ed6f:	c7 04 24 6c 01 00 00 	mov    DWORD PTR [esp],0x16c
c000ed76:	e8 11 fd ff ff       	call   c000ea8c <malloc>
c000ed7b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ed7e:	89 c6                	mov    esi,eax
c000ed80:	e8 57 ea ff ff       	call   c000d7dc <Computer::Computer()>
c000ed85:	5a                   	pop    edx
c000ed86:	89 35 70 ad 02 c0    	mov    DWORD PTR ds:0xc002ad70,esi
c000ed8c:	59                   	pop    ecx
c000ed8d:	56                   	push   esi
c000ed8e:	68 6d 29 02 c0       	push   0xc002296d
c000ed93:	e8 b6 81 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ed98:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000ed9d:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed9f:	53                   	push   ebx
c000eda0:	6a 00                	push   0x0
c000eda2:	6a 00                	push   0x0
c000eda4:	50                   	push   eax
c000eda5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000eda8:	83 c4 14             	add    esp,0x14
c000edab:	53                   	push   ebx
c000edac:	e8 51 39 00 00       	call   c0012702 <VAS::~VAS()>
c000edb1:	83 c4 30             	add    esp,0x30
c000edb4:	5b                   	pop    ebx
c000edb5:	5e                   	pop    esi
c000edb6:	5f                   	pop    edi
c000edb7:	c3                   	ret    

c000edb8 <Mutex::Mutex()>:
c000edb8:	83 ec 0c             	sub    esp,0xc
c000edbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edbf:	83 ec 08             	sub    esp,0x8
c000edc2:	6a 01                	push   0x1
c000edc4:	50                   	push   eax
c000edc5:	e8 4e 0c 00 00       	call   c000fa18 <Semaphore::Semaphore(int)>
c000edca:	83 c4 10             	add    esp,0x10
c000edcd:	90                   	nop
c000edce:	83 c4 0c             	add    esp,0xc
c000edd1:	c3                   	ret    

c000edd2 <KePanic(char const*)>:
c000edd2:	c6 05 94 cd 02 c0 01 	mov    BYTE PTR ds:0xc002cd94,0x1
c000edd9:	e9 a1 9b 00 00       	jmp    c001897f <HalPanic(char const*)>

c000edde <Phys::allocateDMA(unsigned long)>:
c000edde:	55                   	push   ebp
c000eddf:	31 ed                	xor    ebp,ebp
c000ede1:	57                   	push   edi
c000ede2:	56                   	push   esi
c000ede3:	31 f6                	xor    esi,esi
c000ede5:	53                   	push   ebx
c000ede6:	31 db                	xor    ebx,ebx
c000ede8:	83 ec 1c             	sub    esp,0x1c
c000edeb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edef:	05 ff 0f 00 00       	add    eax,0xfff
c000edf4:	c1 e8 0c             	shr    eax,0xc
c000edf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000edfb:	31 c0                	xor    eax,eax
c000edfd:	eb 1b                	jmp    c000ee1a <Phys::allocateDMA(unsigned long)+0x3c>
c000edff:	8d 78 01             	lea    edi,[eax+0x1]
c000ee02:	85 c0                	test   eax,eax
c000ee04:	0f 44 eb             	cmove  ebp,ebx
c000ee07:	0f 44 f3             	cmove  esi,ebx
c000ee0a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000ee0e:	74 37                	je     c000ee47 <Phys::allocateDMA(unsigned long)+0x69>
c000ee10:	89 f8                	mov    eax,edi
c000ee12:	83 c3 01             	add    ebx,0x1
c000ee15:	83 fb 0f             	cmp    ebx,0xf
c000ee18:	7f 13                	jg     c000ee2d <Phys::allocateDMA(unsigned long)+0x4f>
c000ee1a:	80 bb b0 cd 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd3250],0x0
c000ee21:	74 dc                	je     c000edff <Phys::allocateDMA(unsigned long)+0x21>
c000ee23:	31 c0                	xor    eax,eax
c000ee25:	83 c3 01             	add    ebx,0x1
c000ee28:	83 fb 0f             	cmp    ebx,0xf
c000ee2b:	7e ed                	jle    c000ee1a <Phys::allocateDMA(unsigned long)+0x3c>
c000ee2d:	83 ec 0c             	sub    esp,0xc
c000ee30:	68 84 29 02 c0       	push   0xc0022984
c000ee35:	e8 98 ff ff ff       	call   c000edd2 <KePanic(char const*)>
c000ee3a:	83 c4 10             	add    esp,0x10
c000ee3d:	31 c0                	xor    eax,eax
c000ee3f:	83 c4 1c             	add    esp,0x1c
c000ee42:	5b                   	pop    ebx
c000ee43:	5e                   	pop    esi
c000ee44:	5f                   	pop    edi
c000ee45:	5d                   	pop    ebp
c000ee46:	c3                   	ret    
c000ee47:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ee4b:	89 f2                	mov    edx,esi
c000ee4d:	c1 fa 04             	sar    edx,0x4
c000ee50:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ee54:	01 f1                	add    ecx,esi
c000ee56:	8d 51 0e             	lea    edx,[ecx+0xe]
c000ee59:	83 e9 01             	sub    ecx,0x1
c000ee5c:	0f 48 ca             	cmovs  ecx,edx
c000ee5f:	c1 f9 04             	sar    ecx,0x4
c000ee62:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000ee66:	74 06                	je     c000ee6e <Phys::allocateDMA(unsigned long)+0x90>
c000ee68:	89 eb                	mov    ebx,ebp
c000ee6a:	31 c0                	xor    eax,eax
c000ee6c:	eb b7                	jmp    c000ee25 <Phys::allocateDMA(unsigned long)+0x47>
c000ee6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee72:	85 d2                	test   edx,edx
c000ee74:	74 17                	je     c000ee8d <Phys::allocateDMA(unsigned long)+0xaf>
c000ee76:	8d 96 b0 cd 02 c0    	lea    edx,[esi-0x3ffd3250]
c000ee7c:	8d 84 06 b1 cd 02 c0 	lea    eax,[esi+eax*1-0x3ffd324f]
c000ee83:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000ee86:	83 c2 01             	add    edx,0x1
c000ee89:	39 d0                	cmp    eax,edx
c000ee8b:	75 f6                	jne    c000ee83 <Phys::allocateDMA(unsigned long)+0xa5>
c000ee8d:	8b 15 a8 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cda8
c000ee93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee97:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee9b:	01 c2                	add    edx,eax
c000ee9d:	89 15 a8 cd 02 c0    	mov    DWORD PTR ds:0xc002cda8,edx
c000eea3:	85 c9                	test   ecx,ecx
c000eea5:	74 17                	je     c000eebe <Phys::allocateDMA(unsigned long)+0xe0>
c000eea7:	83 ec 0c             	sub    esp,0xc
c000eeaa:	68 84 29 02 c0       	push   0xc0022984
c000eeaf:	e8 1e ff ff ff       	call   c000edd2 <KePanic(char const*)>
c000eeb4:	83 c4 10             	add    esp,0x10
c000eeb7:	89 f8                	mov    eax,edi
c000eeb9:	e9 54 ff ff ff       	jmp    c000ee12 <Phys::allocateDMA(unsigned long)+0x34>
c000eebe:	c1 e6 0c             	shl    esi,0xc
c000eec1:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000eec7:	e9 73 ff ff ff       	jmp    c000ee3f <Phys::allocateDMA(unsigned long)+0x61>

c000eecc <Phys::freeDMA(unsigned long, unsigned long)>:
c000eecc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eed0:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000eed6:	a1 a8 cd 02 c0       	mov    eax,ds:0xc002cda8
c000eedb:	c1 ea 0c             	shr    edx,0xc
c000eede:	29 d0                	sub    eax,edx
c000eee0:	a3 a8 cd 02 c0       	mov    ds:0xc002cda8,eax
c000eee5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eee9:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000eeee:	c1 e8 0c             	shr    eax,0xc
c000eef1:	85 d2                	test   edx,edx
c000eef3:	74 11                	je     c000ef06 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000eef5:	05 b0 cd 02 c0       	add    eax,0xc002cdb0
c000eefa:	01 c2                	add    edx,eax
c000eefc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000eeff:	83 c0 01             	add    eax,0x1
c000ef02:	39 d0                	cmp    eax,edx
c000ef04:	75 f6                	jne    c000eefc <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000ef06:	c3                   	ret    

c000ef07 <Phys::setPageState(unsigned long, bool)>:
c000ef07:	57                   	push   edi
c000ef08:	56                   	push   esi
c000ef09:	8b 35 14 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024f14
c000ef0f:	53                   	push   ebx
c000ef10:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000ef15:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ef19:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef1d:	89 ca                	mov    edx,ecx
c000ef1f:	83 e1 07             	and    ecx,0x7
c000ef22:	c1 ea 03             	shr    edx,0x3
c000ef25:	0f b6 c0             	movzx  eax,al
c000ef28:	d3 c3                	rol    ebx,cl
c000ef2a:	01 d6                	add    esi,edx
c000ef2c:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000ef2f:	d3 e0                	shl    eax,cl
c000ef31:	21 fb                	and    ebx,edi
c000ef33:	88 1e                	mov    BYTE PTR [esi],bl
c000ef35:	8b 1d 14 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024f14
c000ef3b:	01 da                	add    edx,ebx
c000ef3d:	8a 0a                	mov    cl,BYTE PTR [edx]
c000ef3f:	09 c8                	or     eax,ecx
c000ef41:	88 02                	mov    BYTE PTR [edx],al
c000ef43:	5b                   	pop    ebx
c000ef44:	5e                   	pop    esi
c000ef45:	5f                   	pop    edi
c000ef46:	c3                   	ret    

c000ef47 <Phys::getPageState(unsigned long)>:
c000ef47:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ef4b:	8b 15 14 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024f14
c000ef51:	89 c8                	mov    eax,ecx
c000ef53:	83 e1 07             	and    ecx,0x7
c000ef56:	c1 e8 03             	shr    eax,0x3
c000ef59:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000ef5d:	d3 f8                	sar    eax,cl
c000ef5f:	83 e0 01             	and    eax,0x1
c000ef62:	c3                   	ret    

c000ef63 <Phys::freePage(unsigned long)>:
c000ef63:	53                   	push   ebx
c000ef64:	83 ec 08             	sub    esp,0x8
c000ef67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef6b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000ef71:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000ef77:	76 41                	jbe    c000efba <Phys::freePage(unsigned long)+0x57>
c000ef79:	c1 e8 0c             	shr    eax,0xc
c000ef7c:	50                   	push   eax
c000ef7d:	89 c3                	mov    ebx,eax
c000ef7f:	e8 c3 ff ff ff       	call   c000ef47 <Phys::getPageState(unsigned long)>
c000ef84:	5a                   	pop    edx
c000ef85:	84 c0                	test   al,al
c000ef87:	74 20                	je     c000efa9 <Phys::freePage(unsigned long)+0x46>
c000ef89:	a1 a8 cd 02 c0       	mov    eax,ds:0xc002cda8
c000ef8e:	83 ec 08             	sub    esp,0x8
c000ef91:	6a 00                	push   0x0
c000ef93:	53                   	push   ebx
c000ef94:	83 e8 01             	sub    eax,0x1
c000ef97:	a3 a8 cd 02 c0       	mov    ds:0xc002cda8,eax
c000ef9c:	e8 66 ff ff ff       	call   c000ef07 <Phys::setPageState(unsigned long, bool)>
c000efa1:	83 c4 10             	add    esp,0x10
c000efa4:	83 c4 08             	add    esp,0x8
c000efa7:	5b                   	pop    ebx
c000efa8:	c3                   	ret    
c000efa9:	c7 44 24 10 89 2a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022a89
c000efb1:	83 c4 08             	add    esp,0x8
c000efb4:	5b                   	pop    ebx
c000efb5:	e9 18 fe ff ff       	jmp    c000edd2 <KePanic(char const*)>
c000efba:	68 00 10 00 00       	push   0x1000
c000efbf:	50                   	push   eax
c000efc0:	e8 07 ff ff ff       	call   c000eecc <Phys::freeDMA(unsigned long, unsigned long)>
c000efc5:	59                   	pop    ecx
c000efc6:	5b                   	pop    ebx
c000efc7:	83 c4 08             	add    esp,0x8
c000efca:	5b                   	pop    ebx
c000efcb:	c3                   	ret    

c000efcc <Phys::allocatePage()>:
c000efcc:	56                   	push   esi
c000efcd:	53                   	push   ebx
c000efce:	83 ec 14             	sub    esp,0x14
c000efd1:	8b 35 9c cd 02 c0    	mov    esi,DWORD PTR ds:0xc002cd9c
c000efd7:	89 f3                	mov    ebx,esi
c000efd9:	eb 0a                	jmp    c000efe5 <Phys::allocatePage()+0x19>
c000efdb:	89 1d 9c cd 02 c0    	mov    DWORD PTR ds:0xc002cd9c,ebx
c000efe1:	39 de                	cmp    esi,ebx
c000efe3:	74 26                	je     c000f00b <Phys::allocatePage()+0x3f>
c000efe5:	53                   	push   ebx
c000efe6:	e8 5c ff ff ff       	call   c000ef47 <Phys::getPageState(unsigned long)>
c000efeb:	59                   	pop    ecx
c000efec:	84 c0                	test   al,al
c000efee:	74 67                	je     c000f057 <Phys::allocatePage()+0x8b>
c000eff0:	83 c3 01             	add    ebx,0x1
c000eff3:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000eff9:	75 e0                	jne    c000efdb <Phys::allocatePage()+0xf>
c000effb:	c7 05 9c cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cd9c,0x0
c000f005:	31 db                	xor    ebx,ebx
c000f007:	39 de                	cmp    esi,ebx
c000f009:	75 da                	jne    c000efe5 <Phys::allocatePage()+0x19>
c000f00b:	a0 c0 cd 02 c0       	mov    al,ds:0xc002cdc0
c000f010:	83 ec 0c             	sub    esp,0xc
c000f013:	83 f0 01             	xor    eax,0x1
c000f016:	a2 c0 cd 02 c0       	mov    ds:0xc002cdc0,al
c000f01b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f020:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f023:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c000f029:	51                   	push   ecx
c000f02a:	e8 8f 43 00 00       	call   c00133be <VAS::scanForEviction()>
c000f02f:	83 c4 10             	add    esp,0x10
c000f032:	85 c0                	test   eax,eax
c000f034:	75 48                	jne    c000f07e <Phys::allocatePage()+0xb2>
c000f036:	83 ec 0c             	sub    esp,0xc
c000f039:	68 ac 29 02 c0       	push   0xc00229ac
c000f03e:	e8 8f fd ff ff       	call   c000edd2 <KePanic(char const*)>
c000f043:	8b 1d 9c cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cd9c
c000f049:	83 c4 10             	add    esp,0x10
c000f04c:	53                   	push   ebx
c000f04d:	e8 f5 fe ff ff       	call   c000ef47 <Phys::getPageState(unsigned long)>
c000f052:	59                   	pop    ecx
c000f053:	84 c0                	test   al,al
c000f055:	75 99                	jne    c000eff0 <Phys::allocatePage()+0x24>
c000f057:	6a 01                	push   0x1
c000f059:	53                   	push   ebx
c000f05a:	e8 a8 fe ff ff       	call   c000ef07 <Phys::setPageState(unsigned long, bool)>
c000f05f:	8b 1d a8 cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cda8
c000f065:	5e                   	pop    esi
c000f066:	a1 9c cd 02 c0       	mov    eax,ds:0xc002cd9c
c000f06b:	5a                   	pop    edx
c000f06c:	83 c3 01             	add    ebx,0x1
c000f06f:	89 1d a8 cd 02 c0    	mov    DWORD PTR ds:0xc002cda8,ebx
c000f075:	c1 e0 0c             	shl    eax,0xc
c000f078:	83 c4 14             	add    esp,0x14
c000f07b:	5b                   	pop    ebx
c000f07c:	5e                   	pop    esi
c000f07d:	c3                   	ret    
c000f07e:	8b 15 a8 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cda8
c000f084:	83 ec 08             	sub    esp,0x8
c000f087:	6a 01                	push   0x1
c000f089:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f08d:	83 c2 01             	add    edx,0x1
c000f090:	89 15 a8 cd 02 c0    	mov    DWORD PTR ds:0xc002cda8,edx
c000f096:	89 c2                	mov    edx,eax
c000f098:	c1 ea 0c             	shr    edx,0xc
c000f09b:	52                   	push   edx
c000f09c:	e8 66 fe ff ff       	call   c000ef07 <Phys::setPageState(unsigned long, bool)>
c000f0a1:	83 c4 10             	add    esp,0x10
c000f0a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0a8:	eb ce                	jmp    c000f078 <Phys::allocatePage()+0xac>

c000f0aa <Phys::allocateContiguousPages(int)>:
c000f0aa:	57                   	push   edi
c000f0ab:	56                   	push   esi
c000f0ac:	53                   	push   ebx
c000f0ad:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000f0b1:	fa                   	cli    
c000f0b2:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c000f0b8:	83 ec 0c             	sub    esp,0xc
c000f0bb:	31 db                	xor    ebx,ebx
c000f0bd:	68 dc 29 02 c0       	push   0xc00229dc
c000f0c2:	83 c2 01             	add    edx,0x1
c000f0c5:	89 15 b0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6b0,edx
c000f0cb:	e8 7e 7e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f0d0:	83 c4 10             	add    esp,0x10
c000f0d3:	85 db                	test   ebx,ebx
c000f0d5:	75 11                	jne    c000f0e8 <Phys::allocateContiguousPages(int)+0x3e>
c000f0d7:	e8 f0 fe ff ff       	call   c000efcc <Phys::allocatePage()>
c000f0dc:	83 ff 01             	cmp    edi,0x1
c000f0df:	89 c6                	mov    esi,eax
c000f0e1:	74 21                	je     c000f104 <Phys::allocateContiguousPages(int)+0x5a>
c000f0e3:	bb 01 00 00 00       	mov    ebx,0x1
c000f0e8:	e8 df fe ff ff       	call   c000efcc <Phys::allocatePage()>
c000f0ed:	89 da                	mov    edx,ebx
c000f0ef:	c1 e2 0c             	shl    edx,0xc
c000f0f2:	01 f2                	add    edx,esi
c000f0f4:	39 c2                	cmp    edx,eax
c000f0f6:	74 24                	je     c000f11c <Phys::allocateContiguousPages(int)+0x72>
c000f0f8:	83 ff 01             	cmp    edi,0x1
c000f0fb:	bb 01 00 00 00       	mov    ebx,0x1
c000f100:	89 c6                	mov    esi,eax
c000f102:	75 e4                	jne    c000f0e8 <Phys::allocateContiguousPages(int)+0x3e>
c000f104:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000f10c:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000f111:	85 c0                	test   eax,eax
c000f113:	75 01                	jne    c000f116 <Phys::allocateContiguousPages(int)+0x6c>
c000f115:	fb                   	sti    
c000f116:	5b                   	pop    ebx
c000f117:	89 f0                	mov    eax,esi
c000f119:	5e                   	pop    esi
c000f11a:	5f                   	pop    edi
c000f11b:	c3                   	ret    
c000f11c:	83 c3 01             	add    ebx,0x1
c000f11f:	39 fb                	cmp    ebx,edi
c000f121:	75 b0                	jne    c000f0d3 <Phys::allocateContiguousPages(int)+0x29>
c000f123:	eb df                	jmp    c000f104 <Phys::allocateContiguousPages(int)+0x5a>

c000f125 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000f125:	56                   	push   esi
c000f126:	53                   	push   ebx
c000f127:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f12b:	39 1d a0 cd 02 c0    	cmp    DWORD PTR ds:0xc002cda0,ebx
c000f131:	73 06                	jae    c000f139 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000f133:	89 1d a0 cd 02 c0    	mov    DWORD PTR ds:0xc002cda0,ebx
c000f139:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f13d:	c1 eb 0c             	shr    ebx,0xc
c000f140:	c1 e8 0c             	shr    eax,0xc
c000f143:	39 d8                	cmp    eax,ebx
c000f145:	73 13                	jae    c000f15a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000f147:	6a 00                	push   0x0
c000f149:	50                   	push   eax
c000f14a:	8d 70 01             	lea    esi,[eax+0x1]
c000f14d:	e8 b5 fd ff ff       	call   c000ef07 <Phys::setPageState(unsigned long, bool)>
c000f152:	39 f3                	cmp    ebx,esi
c000f154:	89 f0                	mov    eax,esi
c000f156:	5a                   	pop    edx
c000f157:	59                   	pop    ecx
c000f158:	75 ed                	jne    c000f147 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000f15a:	5b                   	pop    ebx
c000f15b:	5e                   	pop    esi
c000f15c:	c3                   	ret    

c000f15d <Phys::physicalMemorySetup(unsigned int)>:
c000f15d:	55                   	push   ebp
c000f15e:	57                   	push   edi
c000f15f:	56                   	push   esi
c000f160:	53                   	push   ebx
c000f161:	31 db                	xor    ebx,ebx
c000f163:	83 ec 40             	sub    esp,0x40
c000f166:	6a 10                	push   0x10
c000f168:	6a 00                	push   0x0
c000f16a:	68 b0 cd 02 c0       	push   0xc002cdb0
c000f16f:	e8 7c 13 ff ff       	call   c00004f0 <memset>
c000f174:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f178:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f17d:	05 00 10 00 00       	add    eax,0x1000
c000f182:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f186:	5a                   	pop    edx
c000f187:	59                   	pop    ecx
c000f188:	50                   	push   eax
c000f189:	68 9f 2a 02 c0       	push   0xc0022a9f
c000f18e:	e8 bb 7d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f193:	83 c4 10             	add    esp,0x10
c000f196:	83 ec 08             	sub    esp,0x8
c000f199:	6a 01                	push   0x1
c000f19b:	53                   	push   ebx
c000f19c:	83 c3 01             	add    ebx,0x1
c000f19f:	e8 63 fd ff ff       	call   c000ef07 <Phys::setPageState(unsigned long, bool)>
c000f1a4:	83 c4 10             	add    esp,0x10
c000f1a7:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f1ad:	75 e7                	jne    c000f196 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000f1af:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c000f1b6:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c000f1bd:	c1 e0 08             	shl    eax,0x8
c000f1c0:	09 c2                	or     edx,eax
c000f1c2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f1c6:	0f 84 43 01 00 00    	je     c000f30f <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c000f1cc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f1d4:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000f1d9:	e9 82 00 00 00       	jmp    c000f260 <Phys::physicalMemorySetup(unsigned int)+0x103>
c000f1de:	ba 00 00 08 00       	mov    edx,0x80000
c000f1e3:	89 c1                	mov    ecx,eax
c000f1e5:	39 f2                	cmp    edx,esi
c000f1e7:	19 f9                	sbb    ecx,edi
c000f1e9:	0f 82 c0 00 00 00    	jb     c000f2af <Phys::physicalMemorySetup(unsigned int)+0x152>
c000f1ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1f3:	89 c5                	mov    ebp,eax
c000f1f5:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000f1f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f1fd:	19 cd                	sbb    ebp,ecx
c000f1ff:	0f 83 af 00 00 00    	jae    c000f2b4 <Phys::physicalMemorySetup(unsigned int)+0x157>
c000f205:	89 d6                	mov    esi,edx
c000f207:	ba 00 00 0a 00       	mov    edx,0xa0000
c000f20c:	39 f2                	cmp    edx,esi
c000f20e:	89 cf                	mov    edi,ecx
c000f210:	19 c8                	sbb    eax,ecx
c000f212:	73 07                	jae    c000f21b <Phys::physicalMemorySetup(unsigned int)+0xbe>
c000f214:	be 00 00 0a 00       	mov    esi,0xa0000
c000f219:	31 ff                	xor    edi,edi
c000f21b:	89 f2                	mov    edx,esi
c000f21d:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000f222:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000f228:	89 f9                	mov    ecx,edi
c000f22a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000f22e:	83 d1 ff             	adc    ecx,0xffffffff
c000f231:	39 d0                	cmp    eax,edx
c000f233:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000f237:	b8 00 00 00 00       	mov    eax,0x0
c000f23c:	19 c8                	sbb    eax,ecx
c000f23e:	0f 82 9d 01 00 00    	jb     c000f3e1 <Phys::physicalMemorySetup(unsigned int)+0x284>
c000f244:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f248:	83 c3 18             	add    ebx,0x18
c000f24b:	83 c6 01             	add    esi,0x1
c000f24e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000f252:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f256:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000f25a:	0f 84 bf 00 00 00    	je     c000f31f <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c000f260:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f262:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f265:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000f268:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000f26b:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000f26f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000f272:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f276:	01 f0                	add    eax,esi
c000f278:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f27c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f280:	55                   	push   ebp
c000f281:	11 fa                	adc    edx,edi
c000f283:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f287:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f28b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f28f:	50                   	push   eax
c000f290:	56                   	push   esi
c000f291:	68 3c 2a 02 c0       	push   0xc0022a3c
c000f296:	e8 b3 7c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f29b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f29f:	83 c4 10             	add    esp,0x10
c000f2a2:	09 f8                	or     eax,edi
c000f2a4:	75 79                	jne    c000f31f <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c000f2a6:	83 fd 01             	cmp    ebp,0x1
c000f2a9:	0f 84 2f ff ff ff    	je     c000f1de <Phys::physicalMemorySetup(unsigned int)+0x81>
c000f2af:	83 fd 01             	cmp    ebp,0x1
c000f2b2:	75 90                	jne    c000f244 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f2b4:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f2b8:	31 d2                	xor    edx,edx
c000f2ba:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000f2be:	89 c8                	mov    eax,ecx
c000f2c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2c4:	19 d1                	sbb    ecx,edx
c000f2c6:	0f 82 78 ff ff ff    	jb     c000f244 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f2cc:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000f2d1:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c000f2d5:	b9 00 00 00 00       	mov    ecx,0x0
c000f2da:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000f2de:	0f 83 60 ff ff ff    	jae    c000f244 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f2e4:	39 c6                	cmp    esi,eax
c000f2e6:	19 d7                	sbb    edi,edx
c000f2e8:	0f 83 ff 00 00 00    	jae    c000f3ed <Phys::physicalMemorySetup(unsigned int)+0x290>
c000f2ee:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f2f2:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f2f6:	29 c7                	sub    edi,eax
c000f2f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2fc:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000f300:	19 d5                	sbb    ebp,edx
c000f302:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000f306:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f30a:	e9 de 00 00 00       	jmp    c000f3ed <Phys::physicalMemorySetup(unsigned int)+0x290>
c000f30f:	83 ec 0c             	sub    esp,0xc
c000f312:	68 b7 2a 02 c0       	push   0xc0022ab7
c000f317:	e8 b6 fa ff ff       	call   c000edd2 <KePanic(char const*)>
c000f31c:	83 c4 10             	add    esp,0x10
c000f31f:	83 ec 08             	sub    esp,0x8
c000f322:	bb 60 00 00 00       	mov    ebx,0x60
c000f327:	6a 00                	push   0x0
c000f329:	6a 06                	push   0x6
c000f32b:	e8 d7 fb ff ff       	call   c000ef07 <Phys::setPageState(unsigned long, bool)>
c000f330:	58                   	pop    eax
c000f331:	5a                   	pop    edx
c000f332:	6a 00                	push   0x0
c000f334:	6a 07                	push   0x7
c000f336:	e8 cc fb ff ff       	call   c000ef07 <Phys::setPageState(unsigned long, bool)>
c000f33b:	8b 0d ac cd 02 c0    	mov    ecx,DWORD PTR ds:0xc002cdac
c000f341:	83 c4 10             	add    esp,0x10
c000f344:	83 c1 02             	add    ecx,0x2
c000f347:	89 0d ac cd 02 c0    	mov    DWORD PTR ds:0xc002cdac,ecx
c000f34d:	83 ec 08             	sub    esp,0x8
c000f350:	6a 00                	push   0x0
c000f352:	53                   	push   ebx
c000f353:	83 c3 01             	add    ebx,0x1
c000f356:	e8 ac fb ff ff       	call   c000ef07 <Phys::setPageState(unsigned long, bool)>
c000f35b:	83 c4 10             	add    esp,0x10
c000f35e:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000f364:	75 e7                	jne    c000f34d <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c000f366:	a1 ac cd 02 c0       	mov    eax,ds:0xc002cdac
c000f36b:	bb 40 01 00 00       	mov    ebx,0x140
c000f370:	83 c0 20             	add    eax,0x20
c000f373:	a3 ac cd 02 c0       	mov    ds:0xc002cdac,eax
c000f378:	eb 26                	jmp    c000f3a0 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000f37a:	83 ec 08             	sub    esp,0x8
c000f37d:	6a 00                	push   0x0
c000f37f:	53                   	push   ebx
c000f380:	83 c3 01             	add    ebx,0x1
c000f383:	e8 7f fb ff ff       	call   c000ef07 <Phys::setPageState(unsigned long, bool)>
c000f388:	a1 ac cd 02 c0       	mov    eax,ds:0xc002cdac
c000f38d:	83 c4 10             	add    esp,0x10
c000f390:	83 c0 01             	add    eax,0x1
c000f393:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000f399:	a3 ac cd 02 c0       	mov    ds:0xc002cdac,eax
c000f39e:	74 07                	je     c000f3a7 <Phys::physicalMemorySetup(unsigned int)+0x24a>
c000f3a0:	3d ff 03 00 00       	cmp    eax,0x3ff
c000f3a5:	7e d3                	jle    c000f37a <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000f3a7:	bb d0 01 00 00       	mov    ebx,0x1d0
c000f3ac:	3d ff 07 00 00       	cmp    eax,0x7ff
c000f3b1:	7f 26                	jg     c000f3d9 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000f3b3:	83 ec 08             	sub    esp,0x8
c000f3b6:	6a 00                	push   0x0
c000f3b8:	53                   	push   ebx
c000f3b9:	83 c3 01             	add    ebx,0x1
c000f3bc:	e8 46 fb ff ff       	call   c000ef07 <Phys::setPageState(unsigned long, bool)>
c000f3c1:	a1 ac cd 02 c0       	mov    eax,ds:0xc002cdac
c000f3c6:	83 c4 10             	add    esp,0x10
c000f3c9:	83 c0 01             	add    eax,0x1
c000f3cc:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000f3d2:	a3 ac cd 02 c0       	mov    ds:0xc002cdac,eax
c000f3d7:	75 d3                	jne    c000f3ac <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000f3d9:	83 c4 3c             	add    esp,0x3c
c000f3dc:	5b                   	pop    ebx
c000f3dd:	5e                   	pop    esi
c000f3de:	5f                   	pop    edi
c000f3df:	5d                   	pop    ebp
c000f3e0:	c3                   	ret    
c000f3e1:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c000f3e5:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c000f3ed:	83 ec 04             	sub    esp,0x4
c000f3f0:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000f3f4:	56                   	push   esi
c000f3f5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000f3f9:	57                   	push   edi
c000f3fa:	68 60 2a 02 c0       	push   0xc0022a60
c000f3ff:	e8 4a 7b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f404:	5d                   	pop    ebp
c000f405:	58                   	pop    eax
c000f406:	56                   	push   esi
c000f407:	57                   	push   edi
c000f408:	e8 18 fd ff ff       	call   c000f125 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000f40d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f411:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f415:	83 c4 0c             	add    esp,0xc
c000f418:	8b 35 ac cd 02 c0    	mov    esi,DWORD PTR ds:0xc002cdac
c000f41e:	0f ac d0 0c          	shrd   eax,edx,0xc
c000f422:	01 f0                	add    eax,esi
c000f424:	a3 ac cd 02 c0       	mov    ds:0xc002cdac,eax
c000f429:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f430:	52                   	push   edx
c000f431:	50                   	push   eax
c000f432:	68 c5 2a 02 c0       	push   0xc0022ac5
c000f437:	e8 12 7b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f43c:	83 c4 10             	add    esp,0x10
c000f43f:	e9 00 fe ff ff       	jmp    c000f244 <Phys::physicalMemorySetup(unsigned int)+0xe7>

c000f444 <Pipe::isAtty()>:
c000f444:	31 c0                	xor    eax,eax
c000f446:	c3                   	ret    
c000f447:	90                   	nop

c000f448 <Pipe::~Pipe()>:
c000f448:	83 ec 0c             	sub    esp,0xc
c000f44b:	ba 24 2b 02 c0       	mov    edx,0xc0022b24
c000f450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f454:	89 10                	mov    DWORD PTR [eax],edx
c000f456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f45a:	83 ec 0c             	sub    esp,0xc
c000f45d:	50                   	push   eax
c000f45e:	e8 b3 2a 00 00       	call   c0011f16 <UnixFile::~UnixFile()>
c000f463:	83 c4 10             	add    esp,0x10
c000f466:	90                   	nop
c000f467:	83 c4 0c             	add    esp,0xc
c000f46a:	c3                   	ret    
c000f46b:	90                   	nop

c000f46c <Pipe::~Pipe()>:
c000f46c:	83 ec 0c             	sub    esp,0xc
c000f46f:	83 ec 0c             	sub    esp,0xc
c000f472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f476:	e8 cd ff ff ff       	call   c000f448 <Pipe::~Pipe()>
c000f47b:	83 c4 10             	add    esp,0x10
c000f47e:	83 ec 08             	sub    esp,0x8
c000f481:	6a 20                	push   0x20
c000f483:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f487:	e8 7b d3 ff ff       	call   c000c807 <operator delete(void*, unsigned long)>
c000f48c:	83 c4 10             	add    esp,0x10
c000f48f:	83 c4 0c             	add    esp,0xc
c000f492:	c3                   	ret    
c000f493:	90                   	nop

c000f494 <Pipe::write(unsigned long long, void*, int*)>:
c000f494:	55                   	push   ebp
c000f495:	57                   	push   edi
c000f496:	56                   	push   esi
c000f497:	53                   	push   ebx
c000f498:	83 ec 1c             	sub    esp,0x1c
c000f49b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000f49f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f4a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f4a7:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000f4aa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f4ae:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000f4b1:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4b4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f4b8:	89 d8                	mov    eax,ebx
c000f4ba:	89 d6                	mov    esi,edx
c000f4bc:	89 d7                	mov    edi,edx
c000f4be:	c1 ff 1f             	sar    edi,0x1f
c000f4c1:	03 34 24             	add    esi,DWORD PTR [esp]
c000f4c4:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000f4c8:	c1 f8 1f             	sar    eax,0x1f
c000f4cb:	39 f3                	cmp    ebx,esi
c000f4cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f4d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4d5:	19 f8                	sbb    eax,edi
c000f4d7:	b8 01 00 00 00       	mov    eax,0x1
c000f4dc:	72 72                	jb     c000f550 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c000f4de:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000f4e1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000f4e5:	01 d0                	add    eax,edx
c000f4e7:	99                   	cdq    
c000f4e8:	f7 fb                	idiv   ebx
c000f4ea:	89 d8                	mov    eax,ebx
c000f4ec:	29 d0                	sub    eax,edx
c000f4ee:	89 d6                	mov    esi,edx
c000f4f0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000f4f3:	89 c3                	mov    ebx,eax
c000f4f5:	c1 fb 1f             	sar    ebx,0x1f
c000f4f8:	39 c2                	cmp    edx,eax
c000f4fa:	19 df                	sbb    edi,ebx
c000f4fc:	bb 00 00 00 00       	mov    ebx,0x0
c000f501:	72 04                	jb     c000f507 <Pipe::write(unsigned long long, void*, int*)+0x73>
c000f503:	89 d3                	mov    ebx,edx
c000f505:	29 c3                	sub    ebx,eax
c000f507:	89 d0                	mov    eax,edx
c000f509:	29 d8                	sub    eax,ebx
c000f50b:	74 0d                	je     c000f51a <Pipe::write(unsigned long long, void*, int*)+0x86>
c000f50d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000f510:	89 c1                	mov    ecx,eax
c000f512:	01 f7                	add    edi,esi
c000f514:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000f518:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f51a:	85 db                	test   ebx,ebx
c000f51c:	74 0d                	je     c000f52b <Pipe::write(unsigned long long, void*, int*)+0x97>
c000f51e:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000f522:	89 d9                	mov    ecx,ebx
c000f524:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000f527:	89 c6                	mov    esi,eax
c000f529:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f52b:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000f52e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f533:	75 10                	jne    c000f545 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c000f535:	83 ec 0c             	sub    esp,0xc
c000f538:	68 e1 2a 02 c0       	push   0xc0022ae1
c000f53d:	e8 90 f8 ff ff       	call   c000edd2 <KePanic(char const*)>
c000f542:	83 c4 10             	add    esp,0x10
c000f545:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f549:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000f54c:	89 08                	mov    DWORD PTR [eax],ecx
c000f54e:	31 c0                	xor    eax,eax
c000f550:	83 c4 1c             	add    esp,0x1c
c000f553:	5b                   	pop    ebx
c000f554:	5e                   	pop    esi
c000f555:	5f                   	pop    edi
c000f556:	5d                   	pop    ebp
c000f557:	c3                   	ret    

c000f558 <Pipe::read(unsigned long long, void*, int*)>:
c000f558:	55                   	push   ebp
c000f559:	57                   	push   edi
c000f55a:	56                   	push   esi
c000f55b:	53                   	push   ebx
c000f55c:	83 ec 1c             	sub    esp,0x1c
c000f55f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000f563:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000f567:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f56b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000f56e:	89 c8                	mov    eax,ecx
c000f570:	99                   	cdq    
c000f571:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000f575:	74 27                	je     c000f59e <Pipe::read(unsigned long long, void*, int*)+0x46>
c000f577:	39 f9                	cmp    ecx,edi
c000f579:	89 d1                	mov    ecx,edx
c000f57b:	19 f1                	sbb    ecx,esi
c000f57d:	73 1f                	jae    c000f59e <Pipe::read(unsigned long long, void*, int*)+0x46>
c000f57f:	fa                   	cli    
c000f580:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c000f586:	e8 6d 64 00 00       	call   c00159f8 <schedule()>
c000f58b:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000f592:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000f599:	75 d0                	jne    c000f56b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000f59b:	fb                   	sti    
c000f59c:	eb cd                	jmp    c000f56b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000f59e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000f5a2:	39 f8                	cmp    eax,edi
c000f5a4:	89 d1                	mov    ecx,edx
c000f5a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000f5aa:	19 f1                	sbb    ecx,esi
c000f5ac:	73 08                	jae    c000f5b6 <Pipe::read(unsigned long long, void*, int*)+0x5e>
c000f5ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f5b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f5b6:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000f5b9:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000f5bc:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c000f5c0:	29 f7                	sub    edi,esi
c000f5c2:	89 f8                	mov    eax,edi
c000f5c4:	99                   	cdq    
c000f5c5:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000f5c9:	89 d0                	mov    eax,edx
c000f5cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f5cf:	19 c2                	sbb    edx,eax
c000f5d1:	89 f8                	mov    eax,edi
c000f5d3:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c000f5d8:	89 ea                	mov    edx,ebp
c000f5da:	29 c2                	sub    edx,eax
c000f5dc:	85 c0                	test   eax,eax
c000f5de:	74 0b                	je     c000f5eb <Pipe::read(unsigned long long, void*, int*)+0x93>
c000f5e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000f5e3:	89 c1                	mov    ecx,eax
c000f5e5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f5e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f5eb:	85 d2                	test   edx,edx
c000f5ed:	74 0d                	je     c000f5fc <Pipe::read(unsigned long long, void*, int*)+0xa4>
c000f5ef:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000f5f3:	89 d1                	mov    ecx,edx
c000f5f5:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000f5f8:	89 c7                	mov    edi,eax
c000f5fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f5fc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000f5ff:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000f602:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000f605:	99                   	cdq    
c000f606:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000f60a:	89 f7                	mov    edi,esi
c000f60c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000f610:	c1 ff 1f             	sar    edi,0x1f
c000f613:	57                   	push   edi
c000f614:	56                   	push   esi
c000f615:	52                   	push   edx
c000f616:	50                   	push   eax
c000f617:	e8 48 0e 01 00       	call   c0020464 <__umoddi3>
c000f61c:	83 c4 10             	add    esp,0x10
c000f61f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f624:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000f627:	75 10                	jne    c000f639 <Pipe::read(unsigned long long, void*, int*)+0xe1>
c000f629:	83 ec 0c             	sub    esp,0xc
c000f62c:	68 fe 2a 02 c0       	push   0xc0022afe
c000f631:	e8 9c f7 ff ff       	call   c000edd2 <KePanic(char const*)>
c000f636:	83 c4 10             	add    esp,0x10
c000f639:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f63d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f641:	89 10                	mov    DWORD PTR [eax],edx
c000f643:	83 c4 1c             	add    esp,0x1c
c000f646:	31 c0                	xor    eax,eax
c000f648:	5b                   	pop    ebx
c000f649:	5e                   	pop    esi
c000f64a:	5f                   	pop    edi
c000f64b:	5d                   	pop    ebp
c000f64c:	c3                   	ret    
c000f64d:	90                   	nop

c000f64e <Pipe::Pipe(int)>:
c000f64e:	83 ec 0c             	sub    esp,0xc
c000f651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f655:	83 ec 08             	sub    esp,0x8
c000f658:	6a 00                	push   0x0
c000f65a:	50                   	push   eax
c000f65b:	e8 d0 26 00 00       	call   c0011d30 <UnixFile::UnixFile(int)>
c000f660:	83 c4 10             	add    esp,0x10
c000f663:	ba 24 2b 02 c0       	mov    edx,0xc0022b24
c000f668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f66c:	89 10                	mov    DWORD PTR [eax],edx
c000f66e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f672:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f676:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000f679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f67d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000f684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f688:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000f68f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f693:	83 ec 0c             	sub    esp,0xc
c000f696:	50                   	push   eax
c000f697:	e8 f0 f3 ff ff       	call   c000ea8c <malloc>
c000f69c:	83 c4 10             	add    esp,0x10
c000f69f:	89 c2                	mov    edx,eax
c000f6a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6a5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f6a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6ac:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000f6b0:	90                   	nop
c000f6b1:	83 c4 0c             	add    esp,0xc
c000f6b4:	c3                   	ret    

c000f6b5 <KePowerThread(void*)>:
c000f6b5:	83 ec 0c             	sub    esp,0xc
c000f6b8:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000f6bf:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000f6c6:	75 01                	jne    c000f6c9 <KePowerThread(void*)+0x14>
c000f6c8:	fb                   	sti    
c000f6c9:	c6 05 e0 cd 02 c0 00 	mov    BYTE PTR ds:0xc002cde0,0x0
c000f6d0:	83 ec 0c             	sub    esp,0xc
c000f6d3:	6a 0a                	push   0xa
c000f6d5:	e8 1a 65 00 00       	call   c0015bf4 <sleep(unsigned int)>
c000f6da:	83 c4 10             	add    esp,0x10
c000f6dd:	83 05 24 ce 02 c0 0a 	add    DWORD PTR ds:0xc002ce24,0xa
c000f6e4:	eb e3                	jmp    c000f6c9 <KePowerThread(void*)+0x14>

c000f6e6 <KeChangePowerSettings(PowerSettings)>:
c000f6e6:	57                   	push   edi
c000f6e7:	b9 09 00 00 00       	mov    ecx,0x9
c000f6ec:	56                   	push   esi
c000f6ed:	bf 00 ce 02 c0       	mov    edi,0xc002ce00
c000f6f2:	fc                   	cld    
c000f6f3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f6f7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f6f9:	5e                   	pop    esi
c000f6fa:	5f                   	pop    edi
c000f6fb:	c3                   	ret    

c000f6fc <KeUserIOReceived()>:
c000f6fc:	c7 05 24 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce24,0x0
c000f706:	c3                   	ret    

c000f707 <KeHandlePowerButton()>:
c000f707:	a1 00 ce 02 c0       	mov    eax,ds:0xc002ce00
c000f70c:	83 f8 02             	cmp    eax,0x2
c000f70f:	75 05                	jne    c000f716 <KeHandlePowerButton()+0xf>
c000f711:	e9 2a e1 ff ff       	jmp    c000d840 <KeShutdown()>
c000f716:	48                   	dec    eax
c000f717:	75 05                	jne    c000f71e <KeHandlePowerButton()+0x17>
c000f719:	e9 46 e1 ff ff       	jmp    c000d864 <KeSleep()>
c000f71e:	c3                   	ret    

c000f71f <KeHandleSleepButton()>:
c000f71f:	a1 04 ce 02 c0       	mov    eax,ds:0xc002ce04
c000f724:	83 f8 02             	cmp    eax,0x2
c000f727:	75 05                	jne    c000f72e <KeHandleSleepButton()+0xf>
c000f729:	e9 12 e1 ff ff       	jmp    c000d840 <KeShutdown()>
c000f72e:	48                   	dec    eax
c000f72f:	75 05                	jne    c000f736 <KeHandleSleepButton()+0x17>
c000f731:	e9 2e e1 ff ff       	jmp    c000d864 <KeSleep()>
c000f736:	c3                   	ret    

c000f737 <KeSetupPowerManager()>:
c000f737:	83 ec 0c             	sub    esp,0xc
c000f73a:	68 f0 00 00 00       	push   0xf0
c000f73f:	6a 00                	push   0x0
c000f741:	68 b5 f6 00 c0       	push   0xc000f6b5
c000f746:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c000f74c:	c7 05 24 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce24,0x0
c000f756:	c6 05 e0 cd 02 c0 00 	mov    BYTE PTR ds:0xc002cde0,0x0
c000f75d:	e8 3e 60 00 00       	call   c00157a0 <Process::createThread(void (*)(void*), void*, int)>
c000f762:	c7 05 00 ce 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002ce00,0x2
c000f76c:	c7 05 04 ce 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ce04,0x1
c000f776:	c7 05 08 ce 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002ce08,0x3
c000f780:	c7 05 0c ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce0c,0x0
c000f78a:	c7 05 18 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce18,0x0
c000f794:	c7 05 10 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce10,0x0
c000f79e:	c7 05 1c ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce1c,0x0
c000f7a8:	c7 05 14 ce 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002ce14,0x3c
c000f7b2:	c7 05 20 ce 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002ce20,0x3c
c000f7bc:	83 c4 1c             	add    esp,0x1c
c000f7bf:	c3                   	ret    

c000f7c0 <KeRand()>:
c000f7c0:	69 05 28 ce 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002ce28,0x2875
c000f7ca:	69 0d 2c ce 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002ce2c,0xa2e7b175
c000f7d4:	53                   	push   ebx
c000f7d5:	01 c1                	add    ecx,eax
c000f7d7:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c000f7dc:	f7 25 28 ce 02 c0    	mul    DWORD PTR ds:0xc002ce28
c000f7e2:	01 ca                	add    edx,ecx
c000f7e4:	05 ef 04 b5 00       	add    eax,0xb504ef
c000f7e9:	a3 28 ce 02 c0       	mov    ds:0xc002ce28,eax
c000f7ee:	83 d2 00             	adc    edx,0x0
c000f7f1:	0f b7 da             	movzx  ebx,dx
c000f7f4:	89 1d 2c ce 02 c0    	mov    DWORD PTR ds:0xc002ce2c,ebx
c000f7fa:	0f ac d8 0e          	shrd   eax,ebx,0xe
c000f7fe:	5b                   	pop    ebx
c000f7ff:	c3                   	ret    

c000f800 <KeSeedRand(unsigned int)>:
c000f800:	53                   	push   ebx
c000f801:	83 ec 08             	sub    esp,0x8
c000f804:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f808:	e8 62 94 00 00       	call   c0018c6f <HalGetRand()>
c000f80d:	c7 05 2c ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce2c,0x0
c000f817:	31 d8                	xor    eax,ebx
c000f819:	a3 28 ce 02 c0       	mov    ds:0xc002ce28,eax
c000f81e:	e8 9d ff ff ff       	call   c000f7c0 <KeRand()>
c000f823:	83 c4 08             	add    esp,0x8
c000f826:	5b                   	pop    ebx
c000f827:	eb 97                	jmp    c000f7c0 <KeRand()>

c000f829 <KeInitRand()>:
c000f829:	83 ec 0c             	sub    esp,0xc
c000f82c:	e8 62 92 00 00       	call   c0018a93 <HalQueryPerformanceCounter()>
c000f831:	0f 20 da             	mov    edx,cr3
c000f834:	0f 22 da             	mov    cr3,edx
c000f837:	0f 20 da             	mov    edx,cr3
c000f83a:	0f 22 da             	mov    cr3,edx
c000f83d:	0f 20 da             	mov    edx,cr3
c000f840:	0f 22 da             	mov    cr3,edx
c000f843:	0f 20 da             	mov    edx,cr3
c000f846:	0f 22 da             	mov    cr3,edx
c000f849:	83 ec 0c             	sub    esp,0xc
c000f84c:	35 03 8a 95 38       	xor    eax,0x38958a03
c000f851:	50                   	push   eax
c000f852:	e8 a9 ff ff ff       	call   c000f800 <KeSeedRand(unsigned int)>
c000f857:	83 c4 1c             	add    esp,0x1c
c000f85a:	c3                   	ret    
c000f85b:	90                   	nop

c000f85c <KeResolveCompatibilitySymbol(char*)>:
c000f85c:	83 ec 0c             	sub    esp,0xc
c000f85f:	83 ec 08             	sub    esp,0x8
c000f862:	68 38 2b 02 c0       	push   0xc0022b38
c000f867:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f86b:	e8 10 0f ff ff       	call   c0000780 <strcmp>
c000f870:	83 c4 10             	add    esp,0x10
c000f873:	85 c0                	test   eax,eax
c000f875:	0f 94 c0             	sete   al
c000f878:	0f b6 c0             	movzx  eax,al
c000f87b:	85 c0                	test   eax,eax
c000f87d:	74 0d                	je     c000f88c <KeResolveCompatibilitySymbol(char*)+0x30>
c000f87f:	b8 70 ad 02 c0       	mov    eax,0xc002ad70
c000f884:	e9 8b 01 00 00       	jmp    c000fa14 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f889:	8d 76 00             	lea    esi,[esi+0x0]
c000f88c:	83 ec 08             	sub    esp,0x8
c000f88f:	68 41 2b 02 c0       	push   0xc0022b41
c000f894:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f898:	e8 e3 0e ff ff       	call   c0000780 <strcmp>
c000f89d:	83 c4 10             	add    esp,0x10
c000f8a0:	85 c0                	test   eax,eax
c000f8a2:	0f 94 c0             	sete   al
c000f8a5:	0f b6 c0             	movzx  eax,al
c000f8a8:	85 c0                	test   eax,eax
c000f8aa:	74 0c                	je     c000f8b8 <KeResolveCompatibilitySymbol(char*)+0x5c>
c000f8ac:	b8 64 03 02 c0       	mov    eax,0xc0020364
c000f8b1:	e9 5e 01 00 00       	jmp    c000fa14 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f8b6:	66 90                	xchg   ax,ax
c000f8b8:	83 ec 08             	sub    esp,0x8
c000f8bb:	68 4b 2b 02 c0       	push   0xc0022b4b
c000f8c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8c4:	e8 b7 0e ff ff       	call   c0000780 <strcmp>
c000f8c9:	83 c4 10             	add    esp,0x10
c000f8cc:	85 c0                	test   eax,eax
c000f8ce:	0f 94 c0             	sete   al
c000f8d1:	0f b6 c0             	movzx  eax,al
c000f8d4:	85 c0                	test   eax,eax
c000f8d6:	74 0c                	je     c000f8e4 <KeResolveCompatibilitySymbol(char*)+0x88>
c000f8d8:	b8 98 00 02 c0       	mov    eax,0xc0020098
c000f8dd:	e9 32 01 00 00       	jmp    c000fa14 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f8e2:	66 90                	xchg   ax,ax
c000f8e4:	83 ec 08             	sub    esp,0x8
c000f8e7:	68 54 2b 02 c0       	push   0xc0022b54
c000f8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8f0:	e8 8b 0e ff ff       	call   c0000780 <strcmp>
c000f8f5:	83 c4 10             	add    esp,0x10
c000f8f8:	85 c0                	test   eax,eax
c000f8fa:	0f 94 c0             	sete   al
c000f8fd:	0f b6 c0             	movzx  eax,al
c000f900:	85 c0                	test   eax,eax
c000f902:	74 0c                	je     c000f910 <KeResolveCompatibilitySymbol(char*)+0xb4>
c000f904:	b8 d2 ed 00 c0       	mov    eax,0xc000edd2
c000f909:	e9 06 01 00 00       	jmp    c000fa14 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f90e:	66 90                	xchg   ax,ax
c000f910:	83 ec 08             	sub    esp,0x8
c000f913:	68 67 2b 02 c0       	push   0xc0022b67
c000f918:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f91c:	e8 5f 0e ff ff       	call   c0000780 <strcmp>
c000f921:	83 c4 10             	add    esp,0x10
c000f924:	85 c0                	test   eax,eax
c000f926:	0f 94 c0             	sete   al
c000f929:	0f b6 c0             	movzx  eax,al
c000f92c:	85 c0                	test   eax,eax
c000f92e:	74 0c                	je     c000f93c <KeResolveCompatibilitySymbol(char*)+0xe0>
c000f930:	b8 47 c7 00 c0       	mov    eax,0xc000c747
c000f935:	e9 da 00 00 00       	jmp    c000fa14 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f93a:	66 90                	xchg   ax,ax
c000f93c:	83 ec 08             	sub    esp,0x8
c000f93f:	68 84 2b 02 c0       	push   0xc0022b84
c000f944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f948:	e8 33 0e ff ff       	call   c0000780 <strcmp>
c000f94d:	83 c4 10             	add    esp,0x10
c000f950:	85 c0                	test   eax,eax
c000f952:	0f 94 c0             	sete   al
c000f955:	0f b6 c0             	movzx  eax,al
c000f958:	85 c0                	test   eax,eax
c000f95a:	74 0c                	je     c000f968 <KeResolveCompatibilitySymbol(char*)+0x10c>
c000f95c:	b8 64 04 02 c0       	mov    eax,0xc0020464
c000f961:	e9 ae 00 00 00       	jmp    c000fa14 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f966:	66 90                	xchg   ax,ax
c000f968:	83 ec 08             	sub    esp,0x8
c000f96b:	68 8e 2b 02 c0       	push   0xc0022b8e
c000f970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f974:	e8 07 0e ff ff       	call   c0000780 <strcmp>
c000f979:	83 c4 10             	add    esp,0x10
c000f97c:	85 c0                	test   eax,eax
c000f97e:	0f 94 c0             	sete   al
c000f981:	0f b6 c0             	movzx  eax,al
c000f984:	85 c0                	test   eax,eax
c000f986:	74 0c                	je     c000f994 <KeResolveCompatibilitySymbol(char*)+0x138>
c000f988:	b8 e4 01 02 c0       	mov    eax,0xc00201e4
c000f98d:	e9 82 00 00 00       	jmp    c000fa14 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f992:	66 90                	xchg   ax,ax
c000f994:	83 ec 08             	sub    esp,0x8
c000f997:	68 97 2b 02 c0       	push   0xc0022b97
c000f99c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9a0:	e8 db 0d ff ff       	call   c0000780 <strcmp>
c000f9a5:	83 c4 10             	add    esp,0x10
c000f9a8:	85 c0                	test   eax,eax
c000f9aa:	0f 94 c0             	sete   al
c000f9ad:	0f b6 c0             	movzx  eax,al
c000f9b0:	85 c0                	test   eax,eax
c000f9b2:	74 08                	je     c000f9bc <KeResolveCompatibilitySymbol(char*)+0x160>
c000f9b4:	b8 74 ad 02 c0       	mov    eax,0xc002ad74
c000f9b9:	eb 59                	jmp    c000fa14 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f9bb:	90                   	nop
c000f9bc:	83 ec 08             	sub    esp,0x8
c000f9bf:	68 af 2b 02 c0       	push   0xc0022baf
c000f9c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9c8:	e8 b3 0d ff ff       	call   c0000780 <strcmp>
c000f9cd:	83 c4 10             	add    esp,0x10
c000f9d0:	85 c0                	test   eax,eax
c000f9d2:	0f 94 c0             	sete   al
c000f9d5:	0f b6 c0             	movzx  eax,al
c000f9d8:	85 c0                	test   eax,eax
c000f9da:	74 08                	je     c000f9e4 <KeResolveCompatibilitySymbol(char*)+0x188>
c000f9dc:	b8 74 ad 02 c0       	mov    eax,0xc002ad74
c000f9e1:	eb 31                	jmp    c000fa14 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f9e3:	90                   	nop
c000f9e4:	83 ec 08             	sub    esp,0x8
c000f9e7:	68 bc 2b 02 c0       	push   0xc0022bbc
c000f9ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9f0:	e8 8b 0d ff ff       	call   c0000780 <strcmp>
c000f9f5:	83 c4 10             	add    esp,0x10
c000f9f8:	85 c0                	test   eax,eax
c000f9fa:	0f 94 c0             	sete   al
c000f9fd:	0f b6 c0             	movzx  eax,al
c000fa00:	85 c0                	test   eax,eax
c000fa02:	74 08                	je     c000fa0c <KeResolveCompatibilitySymbol(char*)+0x1b0>
c000fa04:	b8 75 ad 02 c0       	mov    eax,0xc002ad75
c000fa09:	eb 09                	jmp    c000fa14 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000fa0b:	90                   	nop
c000fa0c:	b8 00 00 00 00       	mov    eax,0x0
c000fa11:	8d 76 00             	lea    esi,[esi+0x0]
c000fa14:	83 c4 0c             	add    esp,0xc
c000fa17:	c3                   	ret    

c000fa18 <Semaphore::Semaphore(int)>:
c000fa18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fa1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fa20:	89 10                	mov    DWORD PTR [eax],edx
c000fa22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fa26:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000fa2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fa31:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fa38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fa3c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000fa43:	90                   	nop
c000fa44:	c3                   	ret    
c000fa45:	90                   	nop
c000fa46:	66 90                	xchg   ax,ax

c000fa48 <Semaphore::tryAcquire()>:
c000fa48:	83 ec 0c             	sub    esp,0xc
c000fa4b:	fa                   	cli    
c000fa4c:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fa51:	83 c0 01             	add    eax,0x1
c000fa54:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000fa59:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fa5e:	83 c0 01             	add    eax,0x1
c000fa61:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fa66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa6a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fa6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa71:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa73:	39 c2                	cmp    edx,eax
c000fa75:	7d 59                	jge    c000fad0 <Semaphore::tryAcquire()+0x88>
c000fa77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa7b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fa7e:	8d 50 01             	lea    edx,[eax+0x1]
c000fa81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa85:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fa88:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fa8d:	83 e8 01             	sub    eax,0x1
c000fa90:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fa95:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fa9a:	85 c0                	test   eax,eax
c000fa9c:	75 1a                	jne    c000fab8 <Semaphore::tryAcquire()+0x70>
c000fa9e:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000faa3:	85 c0                	test   eax,eax
c000faa5:	74 11                	je     c000fab8 <Semaphore::tryAcquire()+0x70>
c000faa7:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000fab1:	e8 42 5f 00 00       	call   c00159f8 <schedule()>
c000fab6:	66 90                	xchg   ax,ax
c000fab8:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000fac0:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fac5:	85 c0                	test   eax,eax
c000fac7:	75 03                	jne    c000facc <Semaphore::tryAcquire()+0x84>
c000fac9:	fb                   	sti    
c000faca:	66 90                	xchg   ax,ax
c000facc:	b0 01                	mov    al,0x1
c000face:	eb 48                	jmp    c000fb18 <Semaphore::tryAcquire()+0xd0>
c000fad0:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fad5:	83 e8 01             	sub    eax,0x1
c000fad8:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fadd:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fae2:	85 c0                	test   eax,eax
c000fae4:	75 1a                	jne    c000fb00 <Semaphore::tryAcquire()+0xb8>
c000fae6:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000faeb:	85 c0                	test   eax,eax
c000faed:	74 11                	je     c000fb00 <Semaphore::tryAcquire()+0xb8>
c000faef:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000faf9:	e8 fa 5e 00 00       	call   c00159f8 <schedule()>
c000fafe:	66 90                	xchg   ax,ax
c000fb00:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000fb08:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fb0d:	85 c0                	test   eax,eax
c000fb0f:	75 03                	jne    c000fb14 <Semaphore::tryAcquire()+0xcc>
c000fb11:	fb                   	sti    
c000fb12:	66 90                	xchg   ax,ax
c000fb14:	b0 00                	mov    al,0x0
c000fb16:	66 90                	xchg   ax,ax
c000fb18:	83 c4 0c             	add    esp,0xc
c000fb1b:	c3                   	ret    

c000fb1c <Semaphore::assertLocked(char const*)>:
c000fb1c:	83 ec 0c             	sub    esp,0xc
c000fb1f:	fa                   	cli    
c000fb20:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fb25:	83 c0 01             	add    eax,0x1
c000fb28:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000fb2d:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fb32:	83 c0 01             	add    eax,0x1
c000fb35:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fb3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb3e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fb41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb45:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb47:	39 c2                	cmp    edx,eax
c000fb49:	7d 11                	jge    c000fb5c <Semaphore::assertLocked(char const*)+0x40>
c000fb4b:	83 ec 0c             	sub    esp,0xc
c000fb4e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fb52:	e8 7b f2 ff ff       	call   c000edd2 <KePanic(char const*)>
c000fb57:	83 c4 10             	add    esp,0x10
c000fb5a:	66 90                	xchg   ax,ax
c000fb5c:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fb61:	83 e8 01             	sub    eax,0x1
c000fb64:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fb69:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fb6e:	85 c0                	test   eax,eax
c000fb70:	75 1a                	jne    c000fb8c <Semaphore::assertLocked(char const*)+0x70>
c000fb72:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000fb77:	85 c0                	test   eax,eax
c000fb79:	74 11                	je     c000fb8c <Semaphore::assertLocked(char const*)+0x70>
c000fb7b:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000fb85:	e8 6e 5e 00 00       	call   c00159f8 <schedule()>
c000fb8a:	66 90                	xchg   ax,ax
c000fb8c:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000fb94:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fb99:	85 c0                	test   eax,eax
c000fb9b:	75 03                	jne    c000fba0 <Semaphore::assertLocked(char const*)+0x84>
c000fb9d:	fb                   	sti    
c000fb9e:	66 90                	xchg   ax,ax
c000fba0:	90                   	nop
c000fba1:	83 c4 0c             	add    esp,0xc
c000fba4:	c3                   	ret    
c000fba5:	90                   	nop
c000fba6:	66 90                	xchg   ax,ax

c000fba8 <Semaphore::acquire(int)>:
c000fba8:	83 ec 1c             	sub    esp,0x1c
c000fbab:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000fbb0:	0f 84 9a 00 00 00    	je     c000fc50 <Semaphore::acquire(int)+0xa8>
c000fbb6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fbbe:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000fbc3:	90                   	nop
c000fbc4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000fbc9:	85 c0                	test   eax,eax
c000fbcb:	74 77                	je     c000fc44 <Semaphore::acquire(int)+0x9c>
c000fbcd:	83 ec 0c             	sub    esp,0xc
c000fbd0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fbd4:	e8 6f fe ff ff       	call   c000fa48 <Semaphore::tryAcquire()>
c000fbd9:	83 c4 10             	add    esp,0x10
c000fbdc:	83 f0 01             	xor    eax,0x1
c000fbdf:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000fbe3:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000fbe7:	83 f0 01             	xor    eax,0x1
c000fbea:	0f b6 c0             	movzx  eax,al
c000fbed:	85 c0                	test   eax,eax
c000fbef:	75 4f                	jne    c000fc40 <Semaphore::acquire(int)+0x98>
c000fbf1:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c000fbf6:	7f 2c                	jg     c000fc24 <Semaphore::acquire(int)+0x7c>
c000fbf8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fbfc:	89 d0                	mov    eax,edx
c000fbfe:	c1 e0 02             	shl    eax,0x2
c000fc01:	01 d0                	add    eax,edx
c000fc03:	d1 e0                	shl    eax,1
c000fc05:	83 ec 0c             	sub    esp,0xc
c000fc08:	50                   	push   eax
c000fc09:	e8 d2 5f 00 00       	call   c0015be0 <milliTenthSleep(unsigned int)>
c000fc0e:	83 c4 10             	add    esp,0x10
c000fc11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc15:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000fc19:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000fc21:	eb a1                	jmp    c000fbc4 <Semaphore::acquire(int)+0x1c>
c000fc23:	90                   	nop
c000fc24:	83 ec 0c             	sub    esp,0xc
c000fc27:	68 90 01 00 00       	push   0x190
c000fc2c:	e8 af 5f 00 00       	call   c0015be0 <milliTenthSleep(unsigned int)>
c000fc31:	83 c4 10             	add    esp,0x10
c000fc34:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c000fc39:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c000fc3e:	eb 84                	jmp    c000fbc4 <Semaphore::acquire(int)+0x1c>
c000fc40:	90                   	nop
c000fc41:	8d 76 00             	lea    esi,[esi+0x0]
c000fc44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc48:	e9 fb 00 00 00       	jmp    c000fd48 <Semaphore::acquire(int)+0x1a0>
c000fc4d:	8d 76 00             	lea    esi,[esi+0x0]
c000fc50:	fa                   	cli    
c000fc51:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fc56:	83 c0 01             	add    eax,0x1
c000fc59:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000fc5e:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fc63:	83 c0 01             	add    eax,0x1
c000fc66:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fc6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc6f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fc72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc76:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc78:	39 c2                	cmp    edx,eax
c000fc7a:	7d 14                	jge    c000fc90 <Semaphore::acquire(int)+0xe8>
c000fc7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc80:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fc83:	8d 50 01             	lea    edx,[eax+0x1]
c000fc86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc8a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fc8d:	eb 6d                	jmp    c000fcfc <Semaphore::acquire(int)+0x154>
c000fc8f:	90                   	nop
c000fc90:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fc95:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc97:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000fc9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fca2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fca5:	85 c0                	test   eax,eax
c000fca7:	75 13                	jne    c000fcbc <Semaphore::acquire(int)+0x114>
c000fca9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fcae:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcb4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fcb7:	eb 17                	jmp    c000fcd0 <Semaphore::acquire(int)+0x128>
c000fcb9:	8d 76 00             	lea    esi,[esi+0x0]
c000fcbc:	ba 00 20 00 c2       	mov    edx,0xc2002000
c000fcc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcc5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fcc8:	8b 12                	mov    edx,DWORD PTR [edx]
c000fcca:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000fccd:	8d 76 00             	lea    esi,[esi+0x0]
c000fcd0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fcd5:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcdb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fcde:	83 ec 0c             	sub    esp,0xc
c000fce1:	68 cc 2b 02 c0       	push   0xc0022bcc
c000fce6:	e8 63 72 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fceb:	83 c4 10             	add    esp,0x10
c000fcee:	83 ec 0c             	sub    esp,0xc
c000fcf1:	6a 05                	push   0x5
c000fcf3:	e8 c0 5d 00 00       	call   c0015ab8 <blockTask(TaskState)>
c000fcf8:	83 c4 10             	add    esp,0x10
c000fcfb:	90                   	nop
c000fcfc:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fd01:	83 e8 01             	sub    eax,0x1
c000fd04:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fd09:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fd0e:	85 c0                	test   eax,eax
c000fd10:	75 1a                	jne    c000fd2c <Semaphore::acquire(int)+0x184>
c000fd12:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000fd17:	85 c0                	test   eax,eax
c000fd19:	74 11                	je     c000fd2c <Semaphore::acquire(int)+0x184>
c000fd1b:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000fd25:	e8 ce 5c 00 00       	call   c00159f8 <schedule()>
c000fd2a:	66 90                	xchg   ax,ax
c000fd2c:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000fd34:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fd39:	85 c0                	test   eax,eax
c000fd3b:	75 03                	jne    c000fd40 <Semaphore::acquire(int)+0x198>
c000fd3d:	fb                   	sti    
c000fd3e:	66 90                	xchg   ax,ax
c000fd40:	b8 00 00 00 00       	mov    eax,0x0
c000fd45:	8d 76 00             	lea    esi,[esi+0x0]
c000fd48:	83 c4 1c             	add    esp,0x1c
c000fd4b:	c3                   	ret    

c000fd4c <Semaphore::acquire()>:
c000fd4c:	83 ec 0c             	sub    esp,0xc
c000fd4f:	83 ec 08             	sub    esp,0x8
c000fd52:	6a 00                	push   0x0
c000fd54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd58:	e8 4b fe ff ff       	call   c000fba8 <Semaphore::acquire(int)>
c000fd5d:	83 c4 10             	add    esp,0x10
c000fd60:	90                   	nop
c000fd61:	83 c4 0c             	add    esp,0xc
c000fd64:	c3                   	ret    
c000fd65:	90                   	nop
c000fd66:	66 90                	xchg   ax,ax

c000fd68 <Semaphore::release()>:
c000fd68:	83 ec 1c             	sub    esp,0x1c
c000fd6b:	fa                   	cli    
c000fd6c:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fd71:	83 c0 01             	add    eax,0x1
c000fd74:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000fd79:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fd7e:	83 c0 01             	add    eax,0x1
c000fd81:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fd86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd8d:	85 c0                	test   eax,eax
c000fd8f:	74 2b                	je     c000fdbc <Semaphore::release()+0x54>
c000fd91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fd9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fda0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000fda3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fda7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fdaa:	83 ec 0c             	sub    esp,0xc
c000fdad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fdb1:	e8 42 5f 00 00       	call   c0015cf8 <unblockTask(ThreadControlBlock*)>
c000fdb6:	83 c4 10             	add    esp,0x10
c000fdb9:	eb 15                	jmp    c000fdd0 <Semaphore::release()+0x68>
c000fdbb:	90                   	nop
c000fdbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdc0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fdc3:	8d 50 ff             	lea    edx,[eax-0x1]
c000fdc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdca:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fdcd:	8d 76 00             	lea    esi,[esi+0x0]
c000fdd0:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fdd5:	83 e8 01             	sub    eax,0x1
c000fdd8:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fddd:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fde2:	85 c0                	test   eax,eax
c000fde4:	75 1a                	jne    c000fe00 <Semaphore::release()+0x98>
c000fde6:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000fdeb:	85 c0                	test   eax,eax
c000fded:	74 11                	je     c000fe00 <Semaphore::release()+0x98>
c000fdef:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000fdf9:	e8 fa 5b 00 00       	call   c00159f8 <schedule()>
c000fdfe:	66 90                	xchg   ax,ax
c000fe00:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000fe08:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fe0d:	85 c0                	test   eax,eax
c000fe0f:	75 03                	jne    c000fe14 <Semaphore::release()+0xac>
c000fe11:	fb                   	sti    
c000fe12:	66 90                	xchg   ax,ax
c000fe14:	90                   	nop
c000fe15:	83 c4 1c             	add    esp,0x1c
c000fe18:	c3                   	ret    

c000fe19 <KiSigKill(int)>:
c000fe19:	83 ec 0c             	sub    esp,0xc
c000fe1c:	6a 00                	push   0x0
c000fe1e:	6a 00                	push   0x0
c000fe20:	6a ff                	push   0xffffffff
c000fe22:	6a 01                	push   0x1
c000fe24:	e8 29 62 01 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fe29:	83 c4 1c             	add    esp,0x1c
c000fe2c:	c3                   	ret    

c000fe2d <KiDefaultSignalHandlerIgnore(int)>:
c000fe2d:	c3                   	ret    

c000fe2e <KiDefaultSignalHandlerPause(int)>:
c000fe2e:	57                   	push   edi
c000fe2f:	b9 07 00 00 00       	mov    ecx,0x7
c000fe34:	56                   	push   esi
c000fe35:	be 27 2c 02 c0       	mov    esi,0xc0022c27
c000fe3a:	83 ec 24             	sub    esp,0x24
c000fe3d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c000fe41:	fc                   	cld    
c000fe42:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fe44:	8d 44 24 04          	lea    eax,[esp+0x4]
c000fe48:	50                   	push   eax
c000fe49:	6a 00                	push   0x0
c000fe4b:	6a 00                	push   0x0
c000fe4d:	6a 27                	push   0x27
c000fe4f:	e8 fe 61 01 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fe54:	83 c4 34             	add    esp,0x34
c000fe57:	5e                   	pop    esi
c000fe58:	5f                   	pop    edi
c000fe59:	c3                   	ret    

c000fe5a <KiDefaultSignalHandlerResume(int)>:
c000fe5a:	57                   	push   edi
c000fe5b:	b9 1d 00 00 00       	mov    ecx,0x1d
c000fe60:	56                   	push   esi
c000fe61:	be 43 2c 02 c0       	mov    esi,0xc0022c43
c000fe66:	83 ec 24             	sub    esp,0x24
c000fe69:	8d 7c 24 03          	lea    edi,[esp+0x3]
c000fe6d:	fc                   	cld    
c000fe6e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe70:	8d 44 24 03          	lea    eax,[esp+0x3]
c000fe74:	50                   	push   eax
c000fe75:	6a 00                	push   0x0
c000fe77:	6a 00                	push   0x0
c000fe79:	6a 27                	push   0x27
c000fe7b:	e8 d2 61 01 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fe80:	83 c4 34             	add    esp,0x34
c000fe83:	5e                   	pop    esi
c000fe84:	5f                   	pop    edi
c000fe85:	c3                   	ret    

c000fe86 <KeDeinitSignals(SigHandlerBlock*)>:
c000fe86:	e9 11 ec ff ff       	jmp    c000ea9c <free>

c000fe8b <KeInitSignals()>:
c000fe8b:	53                   	push   ebx
c000fe8c:	83 ec 14             	sub    esp,0x14
c000fe8f:	68 c8 00 00 00       	push   0xc8
c000fe94:	e8 f3 eb ff ff       	call   c000ea8c <malloc>
c000fe99:	83 c4 0c             	add    esp,0xc
c000fe9c:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c000fea6:	89 c3                	mov    ebx,eax
c000fea8:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c000feb2:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c000feb8:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c000febc:	6a 20                	push   0x20
c000febe:	6a 00                	push   0x0
c000fec0:	50                   	push   eax
c000fec1:	e8 2a 06 ff ff       	call   c00004f0 <memset>
c000fec6:	83 c4 0c             	add    esp,0xc
c000fec9:	6a 44                	push   0x44
c000fecb:	6a 00                	push   0x0
c000fecd:	53                   	push   ebx
c000fece:	e8 1d 06 ff ff       	call   c00004f0 <memset>
c000fed3:	83 c4 18             	add    esp,0x18
c000fed6:	89 d8                	mov    eax,ebx
c000fed8:	5b                   	pop    ebx
c000fed9:	c3                   	ret    

c000feda <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c000feda:	53                   	push   ebx
c000fedb:	b8 01 00 00 00       	mov    eax,0x1
c000fee0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fee4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fee8:	83 f9 10             	cmp    ecx,0x10
c000feeb:	7f 21                	jg     c000ff0e <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c000feed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fef1:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c000fef4:	89 03                	mov    DWORD PTR [ebx],eax
c000fef6:	b8 01 00 00 00       	mov    eax,0x1
c000fefb:	d3 e0                	shl    eax,cl
c000fefd:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ff01:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c000ff04:	31 c0                	xor    eax,eax
c000ff06:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c000ff0e:	5b                   	pop    ebx
c000ff0f:	c3                   	ret    

c000ff10 <KeRaiseSignal(SigHandlerBlock*, int)>:
c000ff10:	55                   	push   ebp
c000ff11:	57                   	push   edi
c000ff12:	bf 08 00 00 00       	mov    edi,0x8
c000ff17:	56                   	push   esi
c000ff18:	53                   	push   ebx
c000ff19:	83 ec 18             	sub    esp,0x18
c000ff1c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000ff20:	68 60 2c 02 c0       	push   0xc0022c60
c000ff25:	e8 24 70 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ff2a:	83 c4 10             	add    esp,0x10
c000ff2d:	31 c9                	xor    ecx,ecx
c000ff2f:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c000ff36:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c000ff3c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000ff40:	99                   	cdq    
c000ff41:	f7 ff                	idiv   edi
c000ff43:	8d 42 24             	lea    eax,[edx+0x24]
c000ff46:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c000ff4a:	85 f6                	test   esi,esi
c000ff4c:	75 1a                	jne    c000ff68 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c000ff4e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000ff52:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c000ff56:	50                   	push   eax
c000ff57:	50                   	push   eax
c000ff58:	52                   	push   edx
c000ff59:	68 71 2c 02 c0       	push   0xc0022c71
c000ff5e:	e8 eb 6f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ff63:	83 c4 10             	add    esp,0x10
c000ff66:	eb 1b                	jmp    c000ff83 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c000ff68:	41                   	inc    ecx
c000ff69:	83 f9 08             	cmp    ecx,0x8
c000ff6c:	75 ce                	jne    c000ff3c <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c000ff6e:	83 ec 0c             	sub    esp,0xc
c000ff71:	be 01 00 00 00       	mov    esi,0x1
c000ff76:	68 92 2c 02 c0       	push   0xc0022c92
c000ff7b:	e8 ce 6f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ff80:	83 c4 10             	add    esp,0x10
c000ff83:	83 c4 0c             	add    esp,0xc
c000ff86:	89 f0                	mov    eax,esi
c000ff88:	5b                   	pop    ebx
c000ff89:	5e                   	pop    esi
c000ff8a:	5f                   	pop    edi
c000ff8b:	5d                   	pop    ebp
c000ff8c:	c3                   	ret    

c000ff8d <KeCheckSignal(SigHandlerBlock*, int*)>:
c000ff8d:	55                   	push   ebp
c000ff8e:	57                   	push   edi
c000ff8f:	56                   	push   esi
c000ff90:	53                   	push   ebx
c000ff91:	51                   	push   ecx
c000ff92:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ff96:	85 db                	test   ebx,ebx
c000ff98:	0f 84 bc 00 00 00    	je     c001005a <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000ff9e:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c000ffa5:	0f 84 af 00 00 00    	je     c001005a <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000ffab:	31 c9                	xor    ecx,ecx
c000ffad:	bf 08 00 00 00       	mov    edi,0x8
c000ffb2:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c000ffb8:	8d 04 0e             	lea    eax,[esi+ecx*1]
c000ffbb:	99                   	cdq    
c000ffbc:	f7 ff                	idiv   edi
c000ffbe:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c000ffc5:	85 ed                	test   ebp,ebp
c000ffc7:	0f 84 9e 00 00 00    	je     c001006b <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c000ffcd:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c000ffd3:	89 e9                	mov    ecx,ebp
c000ffd5:	bf 01 00 00 00       	mov    edi,0x1
c000ffda:	d3 e7                	shl    edi,cl
c000ffdc:	31 c9                	xor    ecx,ecx
c000ffde:	89 04 24             	mov    DWORD PTR [esp],eax
c000ffe1:	b8 01 00 00 00       	mov    eax,0x1
c000ffe6:	d3 e0                	shl    eax,cl
c000ffe8:	85 04 24             	test   DWORD PTR [esp],eax
c000ffeb:	74 06                	je     c000fff3 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c000ffed:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c000fff1:	75 67                	jne    c001005a <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fff3:	41                   	inc    ecx
c000fff4:	83 f9 11             	cmp    ecx,0x11
c000fff7:	75 e8                	jne    c000ffe1 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c000fff9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fffc:	46                   	inc    esi
c000fffd:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010003:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c001000e:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010015:	09 f8                	or     eax,edi
c0010017:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c001001d:	31 c0                	xor    eax,eax
c001001f:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010027:	74 09                	je     c0010032 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0010029:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010030:	eb 06                	jmp    c0010038 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0010032:	40                   	inc    eax
c0010033:	83 f8 08             	cmp    eax,0x8
c0010036:	75 e7                	jne    c001001f <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0010038:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001003c:	83 fd 09             	cmp    ebp,0x9
c001003f:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0010042:	89 2a                	mov    DWORD PTR [edx],ebp
c0010044:	75 07                	jne    c001004d <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0010046:	b8 19 fe 00 c0       	mov    eax,0xc000fe19
c001004b:	eb 31                	jmp    c001007e <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001004d:	83 f8 01             	cmp    eax,0x1
c0010050:	75 0c                	jne    c001005e <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0010052:	f7 d7                	not    edi
c0010054:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c001005a:	31 c0                	xor    eax,eax
c001005c:	eb 20                	jmp    c001007e <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001005e:	85 c0                	test   eax,eax
c0010060:	75 1c                	jne    c001007e <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0010062:	8b 04 ad 20 4f 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdb0e0]
c0010069:	eb 13                	jmp    c001007e <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001006b:	41                   	inc    ecx
c001006c:	46                   	inc    esi
c001006d:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010073:	83 f9 08             	cmp    ecx,0x8
c0010076:	0f 85 36 ff ff ff    	jne    c000ffb2 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c001007c:	eb dc                	jmp    c001005a <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001007e:	5a                   	pop    edx
c001007f:	5b                   	pop    ebx
c0010080:	5e                   	pop    esi
c0010081:	5f                   	pop    edi
c0010082:	5d                   	pop    ebp
c0010083:	c3                   	ret    

c0010084 <KiCheckSignalZ>:
c0010084:	83 ec 10             	sub    esp,0x10
c0010087:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001008b:	50                   	push   eax
c001008c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010091:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010094:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001009a:	e8 ee fe ff ff       	call   c000ff8d <KeCheckSignal(SigHandlerBlock*, int*)>
c001009f:	5a                   	pop    edx
c00100a0:	31 d2                	xor    edx,edx
c00100a2:	59                   	pop    ecx
c00100a3:	85 c0                	test   eax,eax
c00100a5:	74 19                	je     c00100c0 <KiCheckSignalZ+0x3c>
c00100a7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00100ad:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00100b0:	89 02                	mov    DWORD PTR [edx],eax
c00100b2:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c00100b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100bd:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00100c0:	89 d0                	mov    eax,edx
c00100c2:	83 c4 10             	add    esp,0x10
c00100c5:	c3                   	ret    

c00100c6 <KeCompleteSignal(SigHandlerBlock*, int)>:
c00100c6:	56                   	push   esi
c00100c7:	53                   	push   ebx
c00100c8:	bb 01 00 00 00       	mov    ebx,0x1
c00100cd:	52                   	push   edx
c00100ce:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00100d2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00100d6:	d3 e3                	shl    ebx,cl
c00100d8:	83 f9 10             	cmp    ecx,0x10
c00100db:	7f 08                	jg     c00100e5 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00100dd:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00100e3:	75 10                	jne    c00100f5 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00100e5:	83 ec 0c             	sub    esp,0xc
c00100e8:	68 a3 2c 02 c0       	push   0xc0022ca3
c00100ed:	e8 e0 ec ff ff       	call   c000edd2 <KePanic(char const*)>
c00100f2:	83 c4 10             	add    esp,0x10
c00100f5:	f7 d3                	not    ebx
c00100f7:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00100fd:	58                   	pop    eax
c00100fe:	5b                   	pop    ebx
c00100ff:	5e                   	pop    esi
c0010100:	c3                   	ret    

c0010101 <KiFinishSignalZ>:
c0010101:	53                   	push   ebx
c0010102:	83 ec 10             	sub    esp,0x10
c0010105:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010109:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001010c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010111:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010114:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001011a:	e8 a7 ff ff ff       	call   c00100c6 <KeCompleteSignal(SigHandlerBlock*, int)>
c001011f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010125:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001012c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010133:	83 c4 18             	add    esp,0x18
c0010136:	5b                   	pop    ebx
c0010137:	c3                   	ret    

c0010138 <SysSeekDir(regs*)>:
c0010138:	31 c0                	xor    eax,eax
c001013a:	31 d2                	xor    edx,edx
c001013c:	c3                   	ret    

c001013d <SysTellDir(regs*)>:
c001013d:	31 c0                	xor    eax,eax
c001013f:	31 d2                	xor    edx,edx
c0010141:	c3                   	ret    

c0010142 <SysVerify(regs*)>:
c0010142:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010146:	31 d2                	xor    edx,edx
c0010148:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001014b:	c3                   	ret    

c001014c <SysGetArgc(regs*)>:
c001014c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010151:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010154:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c001015a:	89 c2                	mov    edx,eax
c001015c:	c1 fa 1f             	sar    edx,0x1f
c001015f:	c3                   	ret    

c0010160 <SysTTYName(regs*)>:
c0010160:	b8 01 00 00 00       	mov    eax,0x1
c0010165:	31 d2                	xor    edx,edx
c0010167:	c3                   	ret    

c0010168 <SysFormatDisk(regs*)>:
c0010168:	56                   	push   esi
c0010169:	53                   	push   ebx
c001016a:	83 ec 04             	sub    esp,0x4
c001016d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010171:	8b 1d 04 a3 02 c0    	mov    ebx,DWORD PTR ds:0xc002a304
c0010177:	eb 2a                	jmp    c00101a3 <SysFormatDisk(regs*)+0x3b>
c0010179:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001017c:	83 ec 0c             	sub    esp,0xc
c001017f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010182:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010184:	51                   	push   ecx
c0010185:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010188:	51                   	push   ecx
c0010189:	50                   	push   eax
c001018a:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0010191:	50                   	push   eax
c0010192:	53                   	push   ebx
c0010193:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0010196:	83 c4 20             	add    esp,0x20
c0010199:	83 f8 08             	cmp    eax,0x8
c001019c:	89 c1                	mov    ecx,eax
c001019e:	75 14                	jne    c00101b4 <SysFormatDisk(regs*)+0x4c>
c00101a0:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00101a3:	85 db                	test   ebx,ebx
c00101a5:	75 d2                	jne    c0010179 <SysFormatDisk(regs*)+0x11>
c00101a7:	b8 03 00 00 00       	mov    eax,0x3
c00101ac:	31 d2                	xor    edx,edx
c00101ae:	83 c4 04             	add    esp,0x4
c00101b1:	5b                   	pop    ebx
c00101b2:	5e                   	pop    esi
c00101b3:	c3                   	ret    
c00101b4:	85 c0                	test   eax,eax
c00101b6:	74 13                	je     c00101cb <SysFormatDisk(regs*)+0x63>
c00101b8:	31 d2                	xor    edx,edx
c00101ba:	83 f9 09             	cmp    ecx,0x9
c00101bd:	b8 01 00 00 00       	mov    eax,0x1
c00101c2:	74 ea                	je     c00101ae <SysFormatDisk(regs*)+0x46>
c00101c4:	b8 02 00 00 00       	mov    eax,0x2
c00101c9:	eb e1                	jmp    c00101ac <SysFormatDisk(regs*)+0x44>
c00101cb:	31 c0                	xor    eax,eax
c00101cd:	eb dd                	jmp    c00101ac <SysFormatDisk(regs*)+0x44>

c00101cf <SysSetDiskVolumeLabel(regs*)>:
c00101cf:	56                   	push   esi
c00101d0:	53                   	push   ebx
c00101d1:	83 ec 04             	sub    esp,0x4
c00101d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00101d8:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00101db:	83 f8 19             	cmp    eax,0x19
c00101de:	77 33                	ja     c0010213 <SysSetDiskVolumeLabel(regs*)+0x44>
c00101e0:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c00101e7:	85 c9                	test   ecx,ecx
c00101e9:	74 28                	je     c0010213 <SysSetDiskVolumeLabel(regs*)+0x44>
c00101eb:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00101ee:	85 db                	test   ebx,ebx
c00101f0:	74 21                	je     c0010213 <SysSetDiskVolumeLabel(regs*)+0x44>
c00101f2:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c00101f8:	85 d2                	test   edx,edx
c00101fa:	74 17                	je     c0010213 <SysSetDiskVolumeLabel(regs*)+0x44>
c00101fc:	8b 32                	mov    esi,DWORD PTR [edx]
c00101fe:	53                   	push   ebx
c00101ff:	50                   	push   eax
c0010200:	51                   	push   ecx
c0010201:	52                   	push   edx
c0010202:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0010205:	83 c4 10             	add    esp,0x10
c0010208:	83 c4 04             	add    esp,0x4
c001020b:	5b                   	pop    ebx
c001020c:	5e                   	pop    esi
c001020d:	89 c2                	mov    edx,eax
c001020f:	c1 fa 1f             	sar    edx,0x1f
c0010212:	c3                   	ret    
c0010213:	83 c4 04             	add    esp,0x4
c0010216:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001021b:	5b                   	pop    ebx
c001021c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010221:	5e                   	pop    esi
c0010222:	c3                   	ret    

c0010223 <SysGetDiskVolumeLabel(regs*)>:
c0010223:	57                   	push   edi
c0010224:	56                   	push   esi
c0010225:	53                   	push   ebx
c0010226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001022a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001022d:	83 fa 19             	cmp    edx,0x19
c0010230:	77 3c                	ja     c001026e <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010232:	8b 0c 95 80 a7 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd5880]
c0010239:	85 c9                	test   ecx,ecx
c001023b:	74 31                	je     c001026e <SysGetDiskVolumeLabel(regs*)+0x4b>
c001023d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010240:	85 db                	test   ebx,ebx
c0010242:	74 2a                	je     c001026e <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010244:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010247:	85 f6                	test   esi,esi
c0010249:	74 23                	je     c001026e <SysGetDiskVolumeLabel(regs*)+0x4b>
c001024b:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0010251:	85 c0                	test   eax,eax
c0010253:	74 19                	je     c001026e <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010255:	83 ec 0c             	sub    esp,0xc
c0010258:	8b 38                	mov    edi,DWORD PTR [eax]
c001025a:	56                   	push   esi
c001025b:	53                   	push   ebx
c001025c:	52                   	push   edx
c001025d:	51                   	push   ecx
c001025e:	50                   	push   eax
c001025f:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0010262:	83 c4 20             	add    esp,0x20
c0010265:	5b                   	pop    ebx
c0010266:	5e                   	pop    esi
c0010267:	89 c2                	mov    edx,eax
c0010269:	c1 fa 1f             	sar    edx,0x1f
c001026c:	5f                   	pop    edi
c001026d:	c3                   	ret    
c001026e:	5b                   	pop    ebx
c001026f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010274:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010279:	5e                   	pop    esi
c001027a:	5f                   	pop    edi
c001027b:	c3                   	ret    

c001027c <SysRealpath(regs*)>:
c001027c:	53                   	push   ebx
c001027d:	83 ec 08             	sub    esp,0x8
c0010280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010284:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0010287:	85 c9                	test   ecx,ecx
c0010289:	74 36                	je     c00102c1 <SysRealpath(regs*)+0x45>
c001028b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001028e:	31 d2                	xor    edx,edx
c0010290:	b8 01 00 00 00       	mov    eax,0x1
c0010295:	85 db                	test   ebx,ebx
c0010297:	75 05                	jne    c001029e <SysRealpath(regs*)+0x22>
c0010299:	83 c4 08             	add    esp,0x8
c001029c:	5b                   	pop    ebx
c001029d:	c3                   	ret    
c001029e:	6a 00                	push   0x0
c00102a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00102a5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00102a8:	05 0c 01 00 00       	add    eax,0x10c
c00102ad:	50                   	push   eax
c00102ae:	51                   	push   ecx
c00102af:	53                   	push   ebx
c00102b0:	e8 4b 7b ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00102b5:	83 c4 10             	add    esp,0x10
c00102b8:	31 c0                	xor    eax,eax
c00102ba:	31 d2                	xor    edx,edx
c00102bc:	83 c4 08             	add    esp,0x8
c00102bf:	5b                   	pop    ebx
c00102c0:	c3                   	ret    
c00102c1:	b8 01 00 00 00       	mov    eax,0x1
c00102c6:	31 d2                	xor    edx,edx
c00102c8:	eb f2                	jmp    c00102bc <SysRealpath(regs*)+0x40>

c00102ca <SysReadDir(regs*)>:
c00102ca:	53                   	push   ebx
c00102cb:	83 ec 18             	sub    esp,0x18
c00102ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00102d2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00102d5:	83 f8 02             	cmp    eax,0x2
c00102d8:	76 4f                	jbe    c0010329 <SysReadDir(regs*)+0x5f>
c00102da:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00102e1:	77 52                	ja     c0010335 <SysReadDir(regs*)+0x6b>
c00102e3:	83 ec 0c             	sub    esp,0xc
c00102e6:	50                   	push   eax
c00102e7:	e8 39 1d 00 00       	call   c0012025 <KeGetFileFromDescriptor(int)>
c00102ec:	83 c4 10             	add    esp,0x10
c00102ef:	85 c0                	test   eax,eax
c00102f1:	74 42                	je     c0010335 <SysReadDir(regs*)+0x6b>
c00102f3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102fb:	83 ec 0c             	sub    esp,0xc
c00102fe:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010302:	8b 10                	mov    edx,DWORD PTR [eax]
c0010304:	51                   	push   ecx
c0010305:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010308:	51                   	push   ecx
c0010309:	6a 00                	push   0x0
c001030b:	68 10 01 00 00       	push   0x110
c0010310:	50                   	push   eax
c0010311:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010314:	83 c4 20             	add    esp,0x20
c0010317:	85 c0                	test   eax,eax
c0010319:	89 c1                	mov    ecx,eax
c001031b:	74 27                	je     c0010344 <SysReadDir(regs*)+0x7a>
c001031d:	31 d2                	xor    edx,edx
c001031f:	83 f9 07             	cmp    ecx,0x7
c0010322:	b8 02 00 00 00       	mov    eax,0x2
c0010327:	75 16                	jne    c001033f <SysReadDir(regs*)+0x75>
c0010329:	b8 01 00 00 00       	mov    eax,0x1
c001032e:	31 d2                	xor    edx,edx
c0010330:	83 c4 18             	add    esp,0x18
c0010333:	5b                   	pop    ebx
c0010334:	c3                   	ret    
c0010335:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001033a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001033f:	83 c4 18             	add    esp,0x18
c0010342:	5b                   	pop    ebx
c0010343:	c3                   	ret    
c0010344:	31 c0                	xor    eax,eax
c0010346:	31 d2                	xor    edx,edx
c0010348:	eb e6                	jmp    c0010330 <SysReadDir(regs*)+0x66>

c001034a <SysIsATTY(regs*)>:
c001034a:	83 ec 0c             	sub    esp,0xc
c001034d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010351:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010354:	83 f8 02             	cmp    eax,0x2
c0010357:	76 07                	jbe    c0010360 <SysIsATTY(regs*)+0x16>
c0010359:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001035e:	75 26                	jne    c0010386 <SysIsATTY(regs*)+0x3c>
c0010360:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010365:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010368:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001036e:	85 c0                	test   eax,eax
c0010370:	74 24                	je     c0010396 <SysIsATTY(regs*)+0x4c>
c0010372:	8b 10                	mov    edx,DWORD PTR [eax]
c0010374:	83 ec 0c             	sub    esp,0xc
c0010377:	50                   	push   eax
c0010378:	ff 12                	call   DWORD PTR [edx]
c001037a:	83 c4 10             	add    esp,0x10
c001037d:	31 d2                	xor    edx,edx
c001037f:	83 c4 0c             	add    esp,0xc
c0010382:	0f b6 c0             	movzx  eax,al
c0010385:	c3                   	ret    
c0010386:	83 ec 0c             	sub    esp,0xc
c0010389:	50                   	push   eax
c001038a:	e8 96 1c 00 00       	call   c0012025 <KeGetFileFromDescriptor(int)>
c001038f:	83 c4 10             	add    esp,0x10
c0010392:	85 c0                	test   eax,eax
c0010394:	75 dc                	jne    c0010372 <SysIsATTY(regs*)+0x28>
c0010396:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001039b:	ba ff ff ff ff       	mov    edx,0xffffffff
c00103a0:	83 c4 0c             	add    esp,0xc
c00103a3:	c3                   	ret    

c00103a4 <SysSeek(regs*)>:
c00103a4:	53                   	push   ebx
c00103a5:	83 ec 08             	sub    esp,0x8
c00103a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103ac:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00103af:	8d 50 fd             	lea    edx,[eax-0x3]
c00103b2:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00103b8:	77 39                	ja     c00103f3 <SysSeek(regs*)+0x4f>
c00103ba:	83 ec 0c             	sub    esp,0xc
c00103bd:	50                   	push   eax
c00103be:	e8 62 1c 00 00       	call   c0012025 <KeGetFileFromDescriptor(int)>
c00103c3:	83 c4 10             	add    esp,0x10
c00103c6:	85 c0                	test   eax,eax
c00103c8:	74 29                	je     c00103f3 <SysSeek(regs*)+0x4f>
c00103ca:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00103cd:	83 ec 04             	sub    esp,0x4
c00103d0:	31 db                	xor    ebx,ebx
c00103d2:	53                   	push   ebx
c00103d3:	51                   	push   ecx
c00103d4:	50                   	push   eax
c00103d5:	e8 2e 7e ff ff       	call   c0008208 <File::seek(unsigned long long)>
c00103da:	83 c4 10             	add    esp,0x10
c00103dd:	85 c0                	test   eax,eax
c00103df:	0f 95 c0             	setne  al
c00103e2:	31 d2                	xor    edx,edx
c00103e4:	0f b6 c0             	movzx  eax,al
c00103e7:	f7 d8                	neg    eax
c00103e9:	83 d2 00             	adc    edx,0x0
c00103ec:	83 c4 08             	add    esp,0x8
c00103ef:	5b                   	pop    ebx
c00103f0:	f7 da                	neg    edx
c00103f2:	c3                   	ret    
c00103f3:	83 c4 08             	add    esp,0x8
c00103f6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00103fb:	5b                   	pop    ebx
c00103fc:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010401:	c3                   	ret    

c0010402 <SysTell(regs*)>:
c0010402:	53                   	push   ebx
c0010403:	83 ec 08             	sub    esp,0x8
c0010406:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001040a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001040d:	83 f8 02             	cmp    eax,0x2
c0010410:	76 56                	jbe    c0010468 <SysTell(regs*)+0x66>
c0010412:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010417:	76 19                	jbe    c0010432 <SysTell(regs*)+0x30>
c0010419:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001041c:	31 d2                	xor    edx,edx
c001041e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010424:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001042b:	83 c4 08             	add    esp,0x8
c001042e:	31 c0                	xor    eax,eax
c0010430:	5b                   	pop    ebx
c0010431:	c3                   	ret    
c0010432:	83 ec 0c             	sub    esp,0xc
c0010435:	50                   	push   eax
c0010436:	e8 ea 1b 00 00       	call   c0012025 <KeGetFileFromDescriptor(int)>
c001043b:	83 c4 10             	add    esp,0x10
c001043e:	85 c0                	test   eax,eax
c0010440:	74 26                	je     c0010468 <SysTell(regs*)+0x66>
c0010442:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010445:	83 ec 08             	sub    esp,0x8
c0010448:	52                   	push   edx
c0010449:	50                   	push   eax
c001044a:	e8 65 7e ff ff       	call   c00082b4 <File::tell(unsigned long long*)>
c001044f:	83 c4 10             	add    esp,0x10
c0010452:	85 c0                	test   eax,eax
c0010454:	0f 95 c0             	setne  al
c0010457:	31 d2                	xor    edx,edx
c0010459:	0f b6 c0             	movzx  eax,al
c001045c:	f7 d8                	neg    eax
c001045e:	83 d2 00             	adc    edx,0x0
c0010461:	83 c4 08             	add    esp,0x8
c0010464:	5b                   	pop    ebx
c0010465:	f7 da                	neg    edx
c0010467:	c3                   	ret    
c0010468:	83 c4 08             	add    esp,0x8
c001046b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010470:	5b                   	pop    ebx
c0010471:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010476:	c3                   	ret    

c0010477 <SysSize(regs*)>:
c0010477:	53                   	push   ebx
c0010478:	83 ec 18             	sub    esp,0x18
c001047b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001047f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010482:	83 f8 02             	cmp    eax,0x2
c0010485:	76 5b                	jbe    c00104e2 <SysSize(regs*)+0x6b>
c0010487:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001048c:	76 19                	jbe    c00104a7 <SysSize(regs*)+0x30>
c001048e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010491:	31 d2                	xor    edx,edx
c0010493:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010499:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00104a0:	83 c4 18             	add    esp,0x18
c00104a3:	31 c0                	xor    eax,eax
c00104a5:	5b                   	pop    ebx
c00104a6:	c3                   	ret    
c00104a7:	83 ec 0c             	sub    esp,0xc
c00104aa:	50                   	push   eax
c00104ab:	e8 75 1b 00 00       	call   c0012025 <KeGetFileFromDescriptor(int)>
c00104b0:	83 c4 10             	add    esp,0x10
c00104b3:	85 c0                	test   eax,eax
c00104b5:	74 2b                	je     c00104e2 <SysSize(regs*)+0x6b>
c00104b7:	83 ec 04             	sub    esp,0x4
c00104ba:	8d 54 24 13          	lea    edx,[esp+0x13]
c00104be:	52                   	push   edx
c00104bf:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00104c2:	52                   	push   edx
c00104c3:	50                   	push   eax
c00104c4:	e8 83 7f ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c00104c9:	83 c4 10             	add    esp,0x10
c00104cc:	85 c0                	test   eax,eax
c00104ce:	0f 95 c0             	setne  al
c00104d1:	31 d2                	xor    edx,edx
c00104d3:	0f b6 c0             	movzx  eax,al
c00104d6:	f7 d8                	neg    eax
c00104d8:	83 d2 00             	adc    edx,0x0
c00104db:	83 c4 18             	add    esp,0x18
c00104de:	5b                   	pop    ebx
c00104df:	f7 da                	neg    edx
c00104e1:	c3                   	ret    
c00104e2:	83 c4 18             	add    esp,0x18
c00104e5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00104ea:	5b                   	pop    ebx
c00104eb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00104f0:	c3                   	ret    

c00104f1 <SysSizeFromFilename(regs*)>:
c00104f1:	55                   	push   ebp
c00104f2:	57                   	push   edi
c00104f3:	56                   	push   esi
c00104f4:	53                   	push   ebx
c00104f5:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00104fb:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0010502:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010505:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010508:	85 f6                	test   esi,esi
c001050a:	89 f8                	mov    eax,edi
c001050c:	74 09                	je     c0010517 <SysSizeFromFilename(regs*)+0x26>
c001050e:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010514:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010517:	83 f8 02             	cmp    eax,0x2
c001051a:	0f 86 c9 00 00 00    	jbe    c00105e9 <SysSizeFromFilename(regs*)+0xf8>
c0010520:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010525:	76 1f                	jbe    c0010546 <SysSizeFromFilename(regs*)+0x55>
c0010527:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001052a:	31 d2                	xor    edx,edx
c001052c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010532:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010539:	31 c0                	xor    eax,eax
c001053b:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010541:	5b                   	pop    ebx
c0010542:	5e                   	pop    esi
c0010543:	5f                   	pop    edi
c0010544:	5d                   	pop    ebp
c0010545:	c3                   	ret    
c0010546:	83 ec 0c             	sub    esp,0xc
c0010549:	68 14 01 00 00       	push   0x114
c001054e:	e8 39 e5 ff ff       	call   c000ea8c <malloc>
c0010553:	6a 01                	push   0x1
c0010555:	89 c5                	mov    ebp,eax
c0010557:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001055c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001055f:	50                   	push   eax
c0010560:	57                   	push   edi
c0010561:	55                   	push   ebp
c0010562:	e8 c7 7a ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0010567:	83 c4 20             	add    esp,0x20
c001056a:	85 ed                	test   ebp,ebp
c001056c:	74 7b                	je     c00105e9 <SysSizeFromFilename(regs*)+0xf8>
c001056e:	83 ec 04             	sub    esp,0x4
c0010571:	8d 44 24 13          	lea    eax,[esp+0x13]
c0010575:	50                   	push   eax
c0010576:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010579:	51                   	push   ecx
c001057a:	55                   	push   ebp
c001057b:	e8 cc 7e ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0010580:	89 c3                	mov    ebx,eax
c0010582:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010585:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010588:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001058b:	83 c4 10             	add    esp,0x10
c001058e:	85 db                	test   ebx,ebx
c0010590:	75 57                	jne    c00105e9 <SysSizeFromFilename(regs*)+0xf8>
c0010592:	6a 00                	push   0x0
c0010594:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010599:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001059c:	05 0c 01 00 00       	add    eax,0x10c
c00105a1:	50                   	push   eax
c00105a2:	57                   	push   edi
c00105a3:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00105aa:	53                   	push   ebx
c00105ab:	e8 50 78 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00105b0:	58                   	pop    eax
c00105b1:	5a                   	pop    edx
c00105b2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00105b6:	50                   	push   eax
c00105b7:	53                   	push   ebx
c00105b8:	e8 ca 72 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c00105bd:	83 c4 10             	add    esp,0x10
c00105c0:	ba 00 00 00 00       	mov    edx,0x0
c00105c5:	83 f8 01             	cmp    eax,0x1
c00105c8:	b8 00 00 00 00       	mov    eax,0x0
c00105cd:	74 2f                	je     c00105fe <SysSizeFromFilename(regs*)+0x10d>
c00105cf:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00105d4:	74 3b                	je     c0010611 <SysSizeFromFilename(regs*)+0x120>
c00105d6:	85 f6                	test   esi,esi
c00105d8:	0f 84 5d ff ff ff    	je     c001053b <SysSizeFromFilename(regs*)+0x4a>
c00105de:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00105e4:	e9 52 ff ff ff       	jmp    c001053b <SysSizeFromFilename(regs*)+0x4a>
c00105e9:	81 c4 4c 02 00 00    	add    esp,0x24c
c00105ef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00105f4:	5b                   	pop    ebx
c00105f5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00105fa:	5e                   	pop    esi
c00105fb:	5f                   	pop    edi
c00105fc:	5d                   	pop    ebp
c00105fd:	c3                   	ret    
c00105fe:	85 f6                	test   esi,esi
c0010600:	0f 84 35 ff ff ff    	je     c001053b <SysSizeFromFilename(regs*)+0x4a>
c0010606:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001060c:	e9 2a ff ff ff       	jmp    c001053b <SysSizeFromFilename(regs*)+0x4a>
c0010611:	85 f6                	test   esi,esi
c0010613:	0f 84 22 ff ff ff    	je     c001053b <SysSizeFromFilename(regs*)+0x4a>
c0010619:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001061f:	e9 17 ff ff ff       	jmp    c001053b <SysSizeFromFilename(regs*)+0x4a>

c0010624 <SysSizeFromFilenameNoSymlink(regs*)>:
c0010624:	55                   	push   ebp
c0010625:	57                   	push   edi
c0010626:	56                   	push   esi
c0010627:	53                   	push   ebx
c0010628:	81 ec 4c 02 00 00    	sub    esp,0x24c
c001062e:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0010635:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010638:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001063b:	85 f6                	test   esi,esi
c001063d:	89 f8                	mov    eax,edi
c001063f:	74 09                	je     c001064a <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c0010641:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010647:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001064a:	83 f8 02             	cmp    eax,0x2
c001064d:	0f 86 c9 00 00 00    	jbe    c001071c <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c0010653:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010658:	76 1f                	jbe    c0010679 <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c001065a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001065d:	31 d2                	xor    edx,edx
c001065f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010665:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001066c:	31 c0                	xor    eax,eax
c001066e:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010674:	5b                   	pop    ebx
c0010675:	5e                   	pop    esi
c0010676:	5f                   	pop    edi
c0010677:	5d                   	pop    ebp
c0010678:	c3                   	ret    
c0010679:	83 ec 0c             	sub    esp,0xc
c001067c:	68 14 01 00 00       	push   0x114
c0010681:	e8 06 e4 ff ff       	call   c000ea8c <malloc>
c0010686:	6a 00                	push   0x0
c0010688:	89 c5                	mov    ebp,eax
c001068a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001068f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010692:	50                   	push   eax
c0010693:	57                   	push   edi
c0010694:	55                   	push   ebp
c0010695:	e8 94 79 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c001069a:	83 c4 20             	add    esp,0x20
c001069d:	85 ed                	test   ebp,ebp
c001069f:	74 7b                	je     c001071c <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c00106a1:	83 ec 04             	sub    esp,0x4
c00106a4:	8d 44 24 13          	lea    eax,[esp+0x13]
c00106a8:	50                   	push   eax
c00106a9:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00106ac:	51                   	push   ecx
c00106ad:	55                   	push   ebp
c00106ae:	e8 99 7d ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c00106b3:	89 c3                	mov    ebx,eax
c00106b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00106b8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00106bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00106be:	83 c4 10             	add    esp,0x10
c00106c1:	85 db                	test   ebx,ebx
c00106c3:	75 57                	jne    c001071c <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c00106c5:	6a 00                	push   0x0
c00106c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00106cc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00106cf:	05 0c 01 00 00       	add    eax,0x10c
c00106d4:	50                   	push   eax
c00106d5:	57                   	push   edi
c00106d6:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00106dd:	53                   	push   ebx
c00106de:	e8 1d 77 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00106e3:	58                   	pop    eax
c00106e4:	5a                   	pop    edx
c00106e5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00106e9:	50                   	push   eax
c00106ea:	53                   	push   ebx
c00106eb:	e8 97 71 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c00106f0:	83 c4 10             	add    esp,0x10
c00106f3:	ba 00 00 00 00       	mov    edx,0x0
c00106f8:	83 f8 01             	cmp    eax,0x1
c00106fb:	b8 00 00 00 00       	mov    eax,0x0
c0010700:	74 2f                	je     c0010731 <SysSizeFromFilenameNoSymlink(regs*)+0x10d>
c0010702:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0010707:	74 3b                	je     c0010744 <SysSizeFromFilenameNoSymlink(regs*)+0x120>
c0010709:	85 f6                	test   esi,esi
c001070b:	0f 84 5d ff ff ff    	je     c001066e <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0010711:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0010717:	e9 52 ff ff ff       	jmp    c001066e <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001071c:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010722:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010727:	5b                   	pop    ebx
c0010728:	ba ff ff ff ff       	mov    edx,0xffffffff
c001072d:	5e                   	pop    esi
c001072e:	5f                   	pop    edi
c001072f:	5d                   	pop    ebp
c0010730:	c3                   	ret    
c0010731:	85 f6                	test   esi,esi
c0010733:	0f 84 35 ff ff ff    	je     c001066e <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0010739:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001073f:	e9 2a ff ff ff       	jmp    c001066e <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0010744:	85 f6                	test   esi,esi
c0010746:	0f 84 22 ff ff ff    	je     c001066e <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001074c:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010752:	e9 17 ff ff ff       	jmp    c001066e <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c0010757 <SysClose(regs*)>:
c0010757:	57                   	push   edi
c0010758:	56                   	push   esi
c0010759:	53                   	push   ebx
c001075a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001075e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010761:	83 f8 02             	cmp    eax,0x2
c0010764:	76 44                	jbe    c00107aa <SysClose(regs*)+0x53>
c0010766:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001076c:	31 f6                	xor    esi,esi
c001076e:	31 ff                	xor    edi,edi
c0010770:	83 fa 01             	cmp    edx,0x1
c0010773:	76 2d                	jbe    c00107a2 <SysClose(regs*)+0x4b>
c0010775:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001077a:	77 2e                	ja     c00107aa <SysClose(regs*)+0x53>
c001077c:	83 ec 0c             	sub    esp,0xc
c001077f:	50                   	push   eax
c0010780:	e8 a0 18 00 00       	call   c0012025 <KeGetFileFromDescriptor(int)>
c0010785:	83 c4 10             	add    esp,0x10
c0010788:	85 c0                	test   eax,eax
c001078a:	89 c3                	mov    ebx,eax
c001078c:	74 1c                	je     c00107aa <SysClose(regs*)+0x53>
c001078e:	83 ec 0c             	sub    esp,0xc
c0010791:	50                   	push   eax
c0010792:	e8 11 7a ff ff       	call   c00081a8 <File::close()>
c0010797:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010799:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001079c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001079f:	83 c4 10             	add    esp,0x10
c00107a2:	5b                   	pop    ebx
c00107a3:	89 f0                	mov    eax,esi
c00107a5:	89 fa                	mov    edx,edi
c00107a7:	5e                   	pop    esi
c00107a8:	5f                   	pop    edi
c00107a9:	c3                   	ret    
c00107aa:	5b                   	pop    ebx
c00107ab:	be ff ff ff ff       	mov    esi,0xffffffff
c00107b0:	89 f0                	mov    eax,esi
c00107b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00107b7:	89 fa                	mov    edx,edi
c00107b9:	5e                   	pop    esi
c00107ba:	5f                   	pop    edi
c00107bb:	c3                   	ret    

c00107bc <SysOpenDir(regs*)>:
c00107bc:	56                   	push   esi
c00107bd:	53                   	push   ebx
c00107be:	83 ec 04             	sub    esp,0x4
c00107c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107c5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00107c8:	85 c9                	test   ecx,ecx
c00107ca:	74 5d                	je     c0010829 <SysOpenDir(regs*)+0x6d>
c00107cc:	83 ec 0c             	sub    esp,0xc
c00107cf:	68 14 01 00 00       	push   0x114
c00107d4:	e8 b3 e2 ff ff       	call   c000ea8c <malloc>
c00107d9:	83 c4 0c             	add    esp,0xc
c00107dc:	89 c6                	mov    esi,eax
c00107de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00107e3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00107e6:	50                   	push   eax
c00107e7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00107ea:	52                   	push   edx
c00107eb:	56                   	push   esi
c00107ec:	e8 1b 7e ff ff       	call   c000860c <Directory::Directory(char const*, Process*)>
c00107f1:	83 c4 10             	add    esp,0x10
c00107f4:	85 f6                	test   esi,esi
c00107f6:	74 31                	je     c0010829 <SysOpenDir(regs*)+0x6d>
c00107f8:	83 ec 0c             	sub    esp,0xc
c00107fb:	56                   	push   esi
c00107fc:	e8 d3 7e ff ff       	call   c00086d4 <Directory::open()>
c0010801:	83 c4 10             	add    esp,0x10
c0010804:	85 c0                	test   eax,eax
c0010806:	75 21                	jne    c0010829 <SysOpenDir(regs*)+0x6d>
c0010808:	83 ec 0c             	sub    esp,0xc
c001080b:	56                   	push   esi
c001080c:	e8 17 15 00 00       	call   c0011d28 <UnixFile::getFileDescriptor()>
c0010811:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010814:	83 c4 10             	add    esp,0x10
c0010817:	89 02                	mov    DWORD PTR [edx],eax
c0010819:	c1 f8 1f             	sar    eax,0x1f
c001081c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001081f:	83 c4 04             	add    esp,0x4
c0010822:	31 c0                	xor    eax,eax
c0010824:	5b                   	pop    ebx
c0010825:	31 d2                	xor    edx,edx
c0010827:	5e                   	pop    esi
c0010828:	c3                   	ret    
c0010829:	83 c4 04             	add    esp,0x4
c001082c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010831:	5b                   	pop    ebx
c0010832:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010837:	5e                   	pop    esi
c0010838:	c3                   	ret    

c0010839 <SysMakeDir(regs*)>:
c0010839:	56                   	push   esi
c001083a:	53                   	push   ebx
c001083b:	83 ec 10             	sub    esp,0x10
c001083e:	68 14 01 00 00       	push   0x114
c0010843:	e8 44 e2 ff ff       	call   c000ea8c <malloc>
c0010848:	83 c4 0c             	add    esp,0xc
c001084b:	89 c3                	mov    ebx,eax
c001084d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010852:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010855:	50                   	push   eax
c0010856:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001085a:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001085d:	52                   	push   edx
c001085e:	53                   	push   ebx
c001085f:	e8 a8 7d ff ff       	call   c000860c <Directory::Directory(char const*, Process*)>
c0010864:	83 c4 10             	add    esp,0x10
c0010867:	85 db                	test   ebx,ebx
c0010869:	74 2c                	je     c0010897 <SysMakeDir(regs*)+0x5e>
c001086b:	83 ec 0c             	sub    esp,0xc
c001086e:	53                   	push   ebx
c001086f:	e8 40 80 ff ff       	call   c00088b4 <Directory::create()>
c0010874:	89 c6                	mov    esi,eax
c0010876:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010878:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001087b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001087e:	83 c4 10             	add    esp,0x10
c0010881:	31 c0                	xor    eax,eax
c0010883:	85 f6                	test   esi,esi
c0010885:	0f 95 c0             	setne  al
c0010888:	31 d2                	xor    edx,edx
c001088a:	f7 d8                	neg    eax
c001088c:	83 d2 00             	adc    edx,0x0
c001088f:	83 c4 04             	add    esp,0x4
c0010892:	5b                   	pop    ebx
c0010893:	f7 da                	neg    edx
c0010895:	5e                   	pop    esi
c0010896:	c3                   	ret    
c0010897:	83 c4 04             	add    esp,0x4
c001089a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001089f:	5b                   	pop    ebx
c00108a0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108a5:	5e                   	pop    esi
c00108a6:	c3                   	ret    

c00108a7 <SysCloseDir(regs*)>:
c00108a7:	53                   	push   ebx
c00108a8:	83 ec 08             	sub    esp,0x8
c00108ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108af:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00108b2:	8d 50 fd             	lea    edx,[eax-0x3]
c00108b5:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00108bb:	77 2f                	ja     c00108ec <SysCloseDir(regs*)+0x45>
c00108bd:	83 ec 0c             	sub    esp,0xc
c00108c0:	50                   	push   eax
c00108c1:	e8 5f 17 00 00       	call   c0012025 <KeGetFileFromDescriptor(int)>
c00108c6:	83 c4 10             	add    esp,0x10
c00108c9:	85 c0                	test   eax,eax
c00108cb:	89 c3                	mov    ebx,eax
c00108cd:	74 1d                	je     c00108ec <SysCloseDir(regs*)+0x45>
c00108cf:	83 ec 0c             	sub    esp,0xc
c00108d2:	50                   	push   eax
c00108d3:	e8 58 7e ff ff       	call   c0008730 <Directory::close()>
c00108d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00108da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108dd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00108e0:	83 c4 10             	add    esp,0x10
c00108e3:	31 c0                	xor    eax,eax
c00108e5:	83 c4 08             	add    esp,0x8
c00108e8:	31 d2                	xor    edx,edx
c00108ea:	5b                   	pop    ebx
c00108eb:	c3                   	ret    
c00108ec:	83 c4 08             	add    esp,0x8
c00108ef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00108f4:	5b                   	pop    ebx
c00108f5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108fa:	c3                   	ret    

c00108fb <SysWait(regs*)>:
c00108fb:	83 ec 10             	sub    esp,0x10
c00108fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010902:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010905:	52                   	push   edx
c0010906:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010909:	51                   	push   ecx
c001090a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001090d:	50                   	push   eax
c001090e:	e8 e1 51 00 00       	call   c0015af4 <waitTask(int, int*, int)>
c0010913:	83 c4 1c             	add    esp,0x1c
c0010916:	89 c2                	mov    edx,eax
c0010918:	c1 fa 1f             	sar    edx,0x1f
c001091b:	c3                   	ret    

c001091c <SysNotImpl(regs*)>:
c001091c:	83 ec 18             	sub    esp,0x18
c001091f:	68 b4 2c 02 c0       	push   0xc0022cb4
c0010924:	e8 a9 e4 ff ff       	call   c000edd2 <KePanic(char const*)>
c0010929:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001092e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010933:	83 c4 1c             	add    esp,0x1c
c0010936:	c3                   	ret    

c0010937 <SysPanic(regs*)>:
c0010937:	83 ec 18             	sub    esp,0x18
c001093a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001093e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010941:	50                   	push   eax
c0010942:	e8 8b e4 ff ff       	call   c000edd2 <KePanic(char const*)>
c0010947:	b8 01 00 00 00       	mov    eax,0x1
c001094c:	31 d2                	xor    edx,edx
c001094e:	83 c4 1c             	add    esp,0x1c
c0010951:	c3                   	ret    

c0010952 <SysRmdir(regs*)>:
c0010952:	56                   	push   esi
c0010953:	53                   	push   ebx
c0010954:	83 ec 10             	sub    esp,0x10
c0010957:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001095b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001095e:	68 14 01 00 00       	push   0x114
c0010963:	e8 24 e1 ff ff       	call   c000ea8c <malloc>
c0010968:	6a 00                	push   0x0
c001096a:	89 c3                	mov    ebx,eax
c001096c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010971:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010974:	50                   	push   eax
c0010975:	56                   	push   esi
c0010976:	53                   	push   ebx
c0010977:	e8 b2 76 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c001097c:	83 c4 14             	add    esp,0x14
c001097f:	53                   	push   ebx
c0010980:	e8 93 79 ff ff       	call   c0008318 <File::unlink()>
c0010985:	83 c4 10             	add    esp,0x10
c0010988:	85 db                	test   ebx,ebx
c001098a:	89 c6                	mov    esi,eax
c001098c:	74 0c                	je     c001099a <SysRmdir(regs*)+0x48>
c001098e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010990:	83 ec 0c             	sub    esp,0xc
c0010993:	53                   	push   ebx
c0010994:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010997:	83 c4 10             	add    esp,0x10
c001099a:	31 c0                	xor    eax,eax
c001099c:	85 f6                	test   esi,esi
c001099e:	0f 95 c0             	setne  al
c00109a1:	31 d2                	xor    edx,edx
c00109a3:	f7 d8                	neg    eax
c00109a5:	83 d2 00             	adc    edx,0x0
c00109a8:	83 c4 04             	add    esp,0x4
c00109ab:	5b                   	pop    ebx
c00109ac:	f7 da                	neg    edx
c00109ae:	5e                   	pop    esi
c00109af:	c3                   	ret    

c00109b0 <SysUnlink(regs*)>:
c00109b0:	56                   	push   esi
c00109b1:	53                   	push   ebx
c00109b2:	83 ec 10             	sub    esp,0x10
c00109b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00109b9:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00109bc:	68 14 01 00 00       	push   0x114
c00109c1:	e8 c6 e0 ff ff       	call   c000ea8c <malloc>
c00109c6:	6a 00                	push   0x0
c00109c8:	89 c3                	mov    ebx,eax
c00109ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00109d2:	50                   	push   eax
c00109d3:	56                   	push   esi
c00109d4:	53                   	push   ebx
c00109d5:	e8 54 76 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c00109da:	83 c4 14             	add    esp,0x14
c00109dd:	53                   	push   ebx
c00109de:	e8 35 79 ff ff       	call   c0008318 <File::unlink()>
c00109e3:	83 c4 10             	add    esp,0x10
c00109e6:	85 db                	test   ebx,ebx
c00109e8:	89 c6                	mov    esi,eax
c00109ea:	74 0c                	je     c00109f8 <SysUnlink(regs*)+0x48>
c00109ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00109ee:	83 ec 0c             	sub    esp,0xc
c00109f1:	53                   	push   ebx
c00109f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00109f5:	83 c4 10             	add    esp,0x10
c00109f8:	31 c0                	xor    eax,eax
c00109fa:	85 f6                	test   esi,esi
c00109fc:	0f 95 c0             	setne  al
c00109ff:	31 d2                	xor    edx,edx
c0010a01:	f7 d8                	neg    eax
c0010a03:	83 d2 00             	adc    edx,0x0
c0010a06:	83 c4 04             	add    esp,0x4
c0010a09:	5b                   	pop    ebx
c0010a0a:	f7 da                	neg    edx
c0010a0c:	5e                   	pop    esi
c0010a0d:	c3                   	ret    

c0010a0e <SysGetArgv(regs*)>:
c0010a0e:	83 ec 0c             	sub    esp,0xc
c0010a11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010a15:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010a18:	85 c0                	test   eax,eax
c0010a1a:	78 2c                	js     c0010a48 <SysGetArgv(regs*)+0x3a>
c0010a1c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010a22:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010a25:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010a2b:	7d 1b                	jge    c0010a48 <SysGetArgv(regs*)+0x3a>
c0010a2d:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010a34:	85 c0                	test   eax,eax
c0010a36:	74 18                	je     c0010a50 <SysGetArgv(regs*)+0x42>
c0010a38:	83 ec 08             	sub    esp,0x8
c0010a3b:	50                   	push   eax
c0010a3c:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010a3f:	50                   	push   eax
c0010a40:	e8 0b fc fe ff       	call   c0000650 <strcpy>
c0010a45:	83 c4 10             	add    esp,0x10
c0010a48:	31 c0                	xor    eax,eax
c0010a4a:	31 d2                	xor    edx,edx
c0010a4c:	83 c4 0c             	add    esp,0xc
c0010a4f:	c3                   	ret    
c0010a50:	b8 01 00 00 00       	mov    eax,0x1
c0010a55:	31 d2                	xor    edx,edx
c0010a57:	83 c4 0c             	add    esp,0xc
c0010a5a:	c3                   	ret    

c0010a5b <SysUSleep(regs*)>:
c0010a5b:	83 ec 1c             	sub    esp,0x1c
c0010a5e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010a62:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010a65:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010a68:	6a 00                	push   0x0
c0010a6a:	6a 64                	push   0x64
c0010a6c:	52                   	push   edx
c0010a6d:	50                   	push   eax
c0010a6e:	e8 f1 f8 00 00       	call   c0020364 <__udivdi3>
c0010a73:	83 c4 14             	add    esp,0x14
c0010a76:	50                   	push   eax
c0010a77:	e8 64 51 00 00       	call   c0015be0 <milliTenthSleep(unsigned int)>
c0010a7c:	31 c0                	xor    eax,eax
c0010a7e:	31 d2                	xor    edx,edx
c0010a80:	83 c4 1c             	add    esp,0x1c
c0010a83:	c3                   	ret    

c0010a84 <SysSpawn(regs*)>:
c0010a84:	56                   	push   esi
c0010a85:	53                   	push   ebx
c0010a86:	83 ec 04             	sub    esp,0x4
c0010a89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a8d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010a90:	85 f6                	test   esi,esi
c0010a92:	75 0a                	jne    c0010a9e <SysSpawn(regs*)+0x1a>
c0010a94:	83 c4 04             	add    esp,0x4
c0010a97:	31 c0                	xor    eax,eax
c0010a99:	5b                   	pop    ebx
c0010a9a:	31 d2                	xor    edx,edx
c0010a9c:	5e                   	pop    esi
c0010a9d:	c3                   	ret    
c0010a9e:	83 ec 0c             	sub    esp,0xc
c0010aa1:	68 24 07 00 00       	push   0x724
c0010aa6:	e8 e1 df ff ff       	call   c000ea8c <malloc>
c0010aab:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010aae:	83 c4 10             	add    esp,0x10
c0010ab1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010ab4:	89 c6                	mov    esi,eax
c0010ab6:	31 c0                	xor    eax,eax
c0010ab8:	85 c9                	test   ecx,ecx
c0010aba:	74 08                	je     c0010ac4 <SysSpawn(regs*)+0x40>
c0010abc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ac1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ac4:	52                   	push   edx
c0010ac5:	50                   	push   eax
c0010ac6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ac9:	50                   	push   eax
c0010aca:	56                   	push   esi
c0010acb:	e8 68 48 00 00       	call   c0015338 <Process::Process(char const*, Process*, char**)>
c0010ad0:	83 c4 10             	add    esp,0x10
c0010ad3:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0010ada:	75 b8                	jne    c0010a94 <SysSpawn(regs*)+0x10>
c0010adc:	83 ec 0c             	sub    esp,0xc
c0010adf:	56                   	push   esi
c0010ae0:	e8 cf 4d 00 00       	call   c00158b4 <Process::createUserThread()>
c0010ae5:	8b 06                	mov    eax,DWORD PTR [esi]
c0010ae7:	83 c4 10             	add    esp,0x10
c0010aea:	83 c4 04             	add    esp,0x4
c0010aed:	5b                   	pop    ebx
c0010aee:	89 c2                	mov    edx,eax
c0010af0:	c1 fa 1f             	sar    edx,0x1f
c0010af3:	5e                   	pop    esi
c0010af4:	c3                   	ret    

c0010af5 <SysGetEnv(regs*)>:
c0010af5:	57                   	push   edi
c0010af6:	56                   	push   esi
c0010af7:	53                   	push   ebx
c0010af8:	83 ec 1c             	sub    esp,0x1c
c0010afb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b00:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010b04:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0010b07:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010b0a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010b0d:	51                   	push   ecx
c0010b0e:	e8 b4 d2 ff ff       	call   c000ddc7 <KeGetProcessTotalEnvCount(Process*)>
c0010b13:	83 c4 10             	add    esp,0x10
c0010b16:	39 c7                	cmp    edi,eax
c0010b18:	7c 12                	jl     c0010b2c <SysGetEnv(regs*)+0x37>
c0010b1a:	31 c0                	xor    eax,eax
c0010b1c:	31 d2                	xor    edx,edx
c0010b1e:	85 f6                	test   esi,esi
c0010b20:	74 03                	je     c0010b25 <SysGetEnv(regs*)+0x30>
c0010b22:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010b25:	83 c4 10             	add    esp,0x10
c0010b28:	5b                   	pop    ebx
c0010b29:	5e                   	pop    esi
c0010b2a:	5f                   	pop    edi
c0010b2b:	c3                   	ret    
c0010b2c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0010b30:	83 ec 04             	sub    esp,0x4
c0010b33:	57                   	push   edi
c0010b34:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010b3a:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0010b3d:	57                   	push   edi
c0010b3e:	50                   	push   eax
c0010b3f:	e8 a3 d2 ff ff       	call   c000dde7 <KeGetProcessEnvPair(Process*, int)>
c0010b44:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010b47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b4b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010b4f:	83 c4 0c             	add    esp,0xc
c0010b52:	85 d2                	test   edx,edx
c0010b54:	75 23                	jne    c0010b79 <SysGetEnv(regs*)+0x84>
c0010b56:	83 ec 0c             	sub    esp,0xc
c0010b59:	50                   	push   eax
c0010b5a:	e8 21 fa fe ff       	call   c0000580 <strlen>
c0010b5f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010b62:	89 c3                	mov    ebx,eax
c0010b64:	e8 17 fa fe ff       	call   c0000580 <strlen>
c0010b69:	83 c4 10             	add    esp,0x10
c0010b6c:	31 d2                	xor    edx,edx
c0010b6e:	83 c4 10             	add    esp,0x10
c0010b71:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010b75:	5b                   	pop    ebx
c0010b76:	5e                   	pop    esi
c0010b77:	5f                   	pop    edi
c0010b78:	c3                   	ret    
c0010b79:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010b7c:	83 ec 08             	sub    esp,0x8
c0010b7f:	50                   	push   eax
c0010b80:	56                   	push   esi
c0010b81:	e8 ca fa fe ff       	call   c0000650 <strcpy>
c0010b86:	58                   	pop    eax
c0010b87:	5a                   	pop    edx
c0010b88:	68 ce 2c 02 c0       	push   0xc0022cce
c0010b8d:	56                   	push   esi
c0010b8e:	e8 dd fc fe ff       	call   c0000870 <strcat>
c0010b93:	59                   	pop    ecx
c0010b94:	5b                   	pop    ebx
c0010b95:	57                   	push   edi
c0010b96:	56                   	push   esi
c0010b97:	e8 d4 fc fe ff       	call   c0000870 <strcat>
c0010b9c:	83 c4 10             	add    esp,0x10
c0010b9f:	31 c0                	xor    eax,eax
c0010ba1:	83 c4 10             	add    esp,0x10
c0010ba4:	31 d2                	xor    edx,edx
c0010ba6:	5b                   	pop    ebx
c0010ba7:	5e                   	pop    esi
c0010ba8:	5f                   	pop    edi
c0010ba9:	c3                   	ret    

c0010baa <SysSetFatAttrib(regs*)>:
c0010baa:	57                   	push   edi
c0010bab:	56                   	push   esi
c0010bac:	53                   	push   ebx
c0010bad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010bb1:	83 ec 0c             	sub    esp,0xc
c0010bb4:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0010bb7:	68 14 01 00 00       	push   0x114
c0010bbc:	e8 cb de ff ff       	call   c000ea8c <malloc>
c0010bc1:	83 c4 0c             	add    esp,0xc
c0010bc4:	89 c3                	mov    ebx,eax
c0010bc6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010bcb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010bce:	50                   	push   eax
c0010bcf:	57                   	push   edi
c0010bd0:	53                   	push   ebx
c0010bd1:	e8 56 75 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0010bd6:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010bd9:	83 c4 0c             	add    esp,0xc
c0010bdc:	0f b6 d4             	movzx  edx,ah
c0010bdf:	0f b6 c0             	movzx  eax,al
c0010be2:	52                   	push   edx
c0010be3:	50                   	push   eax
c0010be4:	53                   	push   ebx
c0010be5:	e8 c8 77 ff ff       	call   c00083b2 <File::chfatattr(unsigned char, unsigned char)>
c0010bea:	83 c4 10             	add    esp,0x10
c0010bed:	85 db                	test   ebx,ebx
c0010bef:	89 c6                	mov    esi,eax
c0010bf1:	74 0c                	je     c0010bff <SysSetFatAttrib(regs*)+0x55>
c0010bf3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010bf5:	83 ec 0c             	sub    esp,0xc
c0010bf8:	53                   	push   ebx
c0010bf9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010bfc:	83 c4 10             	add    esp,0x10
c0010bff:	5b                   	pop    ebx
c0010c00:	31 c0                	xor    eax,eax
c0010c02:	85 f6                	test   esi,esi
c0010c04:	0f 95 c0             	setne  al
c0010c07:	31 d2                	xor    edx,edx
c0010c09:	5e                   	pop    esi
c0010c0a:	f7 d8                	neg    eax
c0010c0c:	83 d2 00             	adc    edx,0x0
c0010c0f:	f7 da                	neg    edx
c0010c11:	5f                   	pop    edi
c0010c12:	c3                   	ret    

c0010c13 <SysShutdown(regs*)>:
c0010c13:	83 ec 1c             	sub    esp,0x1c
c0010c16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c1a:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0010c1d:	85 c9                	test   ecx,ecx
c0010c1f:	74 18                	je     c0010c39 <SysShutdown(regs*)+0x26>
c0010c21:	83 f9 01             	cmp    ecx,0x1
c0010c24:	74 26                	je     c0010c4c <SysShutdown(regs*)+0x39>
c0010c26:	83 f9 02             	cmp    ecx,0x2
c0010c29:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c2e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c33:	74 24                	je     c0010c59 <SysShutdown(regs*)+0x46>
c0010c35:	83 c4 1c             	add    esp,0x1c
c0010c38:	c3                   	ret    
c0010c39:	e8 02 cc ff ff       	call   c000d840 <KeShutdown()>
c0010c3e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c43:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c48:	83 c4 1c             	add    esp,0x1c
c0010c4b:	c3                   	ret    
c0010c4c:	e8 13 cc ff ff       	call   c000d864 <KeSleep()>
c0010c51:	31 c0                	xor    eax,eax
c0010c53:	31 d2                	xor    edx,edx
c0010c55:	83 c4 1c             	add    esp,0x1c
c0010c58:	c3                   	ret    
c0010c59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010c61:	e8 0a cc ff ff       	call   c000d870 <KeRestart()>
c0010c66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010c6e:	eb c5                	jmp    c0010c35 <SysShutdown(regs*)+0x22>

c0010c70 <SysPipe(regs*)>:
c0010c70:	57                   	push   edi
c0010c71:	56                   	push   esi
c0010c72:	53                   	push   ebx
c0010c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c77:	83 ec 0c             	sub    esp,0xc
c0010c7a:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010c7d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010c80:	6a 20                	push   0x20
c0010c82:	e8 05 de ff ff       	call   c000ea8c <malloc>
c0010c87:	89 c3                	mov    ebx,eax
c0010c89:	58                   	pop    eax
c0010c8a:	5a                   	pop    edx
c0010c8b:	68 00 50 00 00       	push   0x5000
c0010c90:	53                   	push   ebx
c0010c91:	e8 b8 e9 ff ff       	call   c000f64e <Pipe::Pipe(int)>
c0010c96:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c99:	e8 8a 10 00 00       	call   c0011d28 <UnixFile::getFileDescriptor()>
c0010c9e:	89 07                	mov    DWORD PTR [edi],eax
c0010ca0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ca3:	e8 80 10 00 00       	call   c0011d28 <UnixFile::getFileDescriptor()>
c0010ca8:	83 c4 10             	add    esp,0x10
c0010cab:	31 d2                	xor    edx,edx
c0010cad:	89 06                	mov    DWORD PTR [esi],eax
c0010caf:	31 c0                	xor    eax,eax
c0010cb1:	5b                   	pop    ebx
c0010cb2:	5e                   	pop    esi
c0010cb3:	5f                   	pop    edi
c0010cb4:	c3                   	ret    

c0010cb5 <SysGetUnixTime(regs*)>:
c0010cb5:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0010cba:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010cc0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010cc4:	e9 eb 7e ff ff       	jmp    c0008bb4 <Clock::timeInSecondsLocal()>

c0010cc9 <string_ends_with(char const*, char const*)>:
c0010cc9:	57                   	push   edi
c0010cca:	56                   	push   esi
c0010ccb:	53                   	push   ebx
c0010ccc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cd0:	83 ec 0c             	sub    esp,0xc
c0010cd3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0010cd7:	53                   	push   ebx
c0010cd8:	e8 a3 f8 fe ff       	call   c0000580 <strlen>
c0010cdd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ce0:	89 c6                	mov    esi,eax
c0010ce2:	e8 99 f8 fe ff       	call   c0000580 <strlen>
c0010ce7:	83 c4 10             	add    esp,0x10
c0010cea:	31 d2                	xor    edx,edx
c0010cec:	39 c6                	cmp    esi,eax
c0010cee:	7d 06                	jge    c0010cf6 <string_ends_with(char const*, char const*)+0x2d>
c0010cf0:	5b                   	pop    ebx
c0010cf1:	89 d0                	mov    eax,edx
c0010cf3:	5e                   	pop    esi
c0010cf4:	5f                   	pop    edi
c0010cf5:	c3                   	ret    
c0010cf6:	83 ec 08             	sub    esp,0x8
c0010cf9:	29 c6                	sub    esi,eax
c0010cfb:	57                   	push   edi
c0010cfc:	01 f3                	add    ebx,esi
c0010cfe:	53                   	push   ebx
c0010cff:	e8 7c fa fe ff       	call   c0000780 <strcmp>
c0010d04:	83 c4 10             	add    esp,0x10
c0010d07:	31 d2                	xor    edx,edx
c0010d09:	5b                   	pop    ebx
c0010d0a:	5e                   	pop    esi
c0010d0b:	85 c0                	test   eax,eax
c0010d0d:	5f                   	pop    edi
c0010d0e:	0f 94 c2             	sete   dl
c0010d11:	89 d0                	mov    eax,edx
c0010d13:	c3                   	ret    

c0010d14 <SysOpen(regs*)>:
c0010d14:	56                   	push   esi
c0010d15:	53                   	push   ebx
c0010d16:	81 ec 04 01 00 00    	sub    esp,0x104
c0010d1c:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010d23:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d26:	85 c0                	test   eax,eax
c0010d28:	0f 84 c4 01 00 00    	je     c0010ef2 <SysOpen(regs*)+0x1de>
c0010d2e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d31:	85 c0                	test   eax,eax
c0010d33:	0f 84 b9 01 00 00    	je     c0010ef2 <SysOpen(regs*)+0x1de>
c0010d39:	6a 00                	push   0x0
c0010d3b:	68 d0 2c 02 c0       	push   0xc0022cd0
c0010d40:	50                   	push   eax
c0010d41:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010d45:	56                   	push   esi
c0010d46:	e8 b5 70 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010d4b:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d4e:	e8 2d f8 fe ff       	call   c0000580 <strlen>
c0010d53:	83 c4 10             	add    esp,0x10
c0010d56:	83 e8 01             	sub    eax,0x1
c0010d59:	74 29                	je     c0010d84 <SysOpen(regs*)+0x70>
c0010d5b:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0010d5f:	83 fa 2e             	cmp    edx,0x2e
c0010d62:	74 1c                	je     c0010d80 <SysOpen(regs*)+0x6c>
c0010d64:	83 fa 3a             	cmp    edx,0x3a
c0010d67:	74 17                	je     c0010d80 <SysOpen(regs*)+0x6c>
c0010d69:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010d6d:	83 e8 01             	sub    eax,0x1
c0010d70:	74 12                	je     c0010d84 <SysOpen(regs*)+0x70>
c0010d72:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0010d76:	83 fa 3a             	cmp    edx,0x3a
c0010d79:	74 05                	je     c0010d80 <SysOpen(regs*)+0x6c>
c0010d7b:	83 fa 2e             	cmp    edx,0x2e
c0010d7e:	75 e9                	jne    c0010d69 <SysOpen(regs*)+0x55>
c0010d80:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010d84:	83 ec 08             	sub    esp,0x8
c0010d87:	68 d4 2c 02 c0       	push   0xc0022cd4
c0010d8c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d8f:	50                   	push   eax
c0010d90:	e8 34 ff ff ff       	call   c0010cc9 <string_ends_with(char const*, char const*)>
c0010d95:	83 c4 10             	add    esp,0x10
c0010d98:	85 c0                	test   eax,eax
c0010d9a:	74 1d                	je     c0010db9 <SysOpen(regs*)+0xa5>
c0010d9c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d9f:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010da5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010dac:	81 c4 04 01 00 00    	add    esp,0x104
c0010db2:	31 c0                	xor    eax,eax
c0010db4:	5b                   	pop    ebx
c0010db5:	31 d2                	xor    edx,edx
c0010db7:	5e                   	pop    esi
c0010db8:	c3                   	ret    
c0010db9:	83 ec 08             	sub    esp,0x8
c0010dbc:	68 d9 2c 02 c0       	push   0xc0022cd9
c0010dc1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010dc4:	50                   	push   eax
c0010dc5:	e8 ff fe ff ff       	call   c0010cc9 <string_ends_with(char const*, char const*)>
c0010dca:	83 c4 10             	add    esp,0x10
c0010dcd:	85 c0                	test   eax,eax
c0010dcf:	75 cb                	jne    c0010d9c <SysOpen(regs*)+0x88>
c0010dd1:	83 ec 08             	sub    esp,0x8
c0010dd4:	68 d5 2c 02 c0       	push   0xc0022cd5
c0010dd9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ddc:	50                   	push   eax
c0010ddd:	e8 9e f9 fe ff       	call   c0000780 <strcmp>
c0010de2:	83 c4 10             	add    esp,0x10
c0010de5:	85 c0                	test   eax,eax
c0010de7:	74 b3                	je     c0010d9c <SysOpen(regs*)+0x88>
c0010de9:	83 ec 08             	sub    esp,0x8
c0010dec:	68 d4 2c 02 c0       	push   0xc0022cd4
c0010df1:	56                   	push   esi
c0010df2:	e8 d2 fe ff ff       	call   c0010cc9 <string_ends_with(char const*, char const*)>
c0010df7:	83 c4 10             	add    esp,0x10
c0010dfa:	85 c0                	test   eax,eax
c0010dfc:	75 9e                	jne    c0010d9c <SysOpen(regs*)+0x88>
c0010dfe:	83 ec 08             	sub    esp,0x8
c0010e01:	68 de 2c 02 c0       	push   0xc0022cde
c0010e06:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e09:	50                   	push   eax
c0010e0a:	e8 ba fe ff ff       	call   c0010cc9 <string_ends_with(char const*, char const*)>
c0010e0f:	83 c4 10             	add    esp,0x10
c0010e12:	85 c0                	test   eax,eax
c0010e14:	0f 85 eb 00 00 00    	jne    c0010f05 <SysOpen(regs*)+0x1f1>
c0010e1a:	83 ec 08             	sub    esp,0x8
c0010e1d:	68 e3 2c 02 c0       	push   0xc0022ce3
c0010e22:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e25:	50                   	push   eax
c0010e26:	e8 9e fe ff ff       	call   c0010cc9 <string_ends_with(char const*, char const*)>
c0010e2b:	83 c4 10             	add    esp,0x10
c0010e2e:	85 c0                	test   eax,eax
c0010e30:	0f 85 cf 00 00 00    	jne    c0010f05 <SysOpen(regs*)+0x1f1>
c0010e36:	83 ec 08             	sub    esp,0x8
c0010e39:	68 df 2c 02 c0       	push   0xc0022cdf
c0010e3e:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010e41:	51                   	push   ecx
c0010e42:	e8 39 f9 fe ff       	call   c0000780 <strcmp>
c0010e47:	83 c4 10             	add    esp,0x10
c0010e4a:	85 c0                	test   eax,eax
c0010e4c:	0f 84 b3 00 00 00    	je     c0010f05 <SysOpen(regs*)+0x1f1>
c0010e52:	83 ec 08             	sub    esp,0x8
c0010e55:	68 de 2c 02 c0       	push   0xc0022cde
c0010e5a:	56                   	push   esi
c0010e5b:	e8 69 fe ff ff       	call   c0010cc9 <string_ends_with(char const*, char const*)>
c0010e60:	83 c4 10             	add    esp,0x10
c0010e63:	85 c0                	test   eax,eax
c0010e65:	0f 85 9a 00 00 00    	jne    c0010f05 <SysOpen(regs*)+0x1f1>
c0010e6b:	83 ec 0c             	sub    esp,0xc
c0010e6e:	68 14 01 00 00       	push   0x114
c0010e73:	e8 14 dc ff ff       	call   c000ea8c <malloc>
c0010e78:	83 c4 0c             	add    esp,0xc
c0010e7b:	89 c6                	mov    esi,eax
c0010e7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e82:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e85:	50                   	push   eax
c0010e86:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010e89:	52                   	push   edx
c0010e8a:	56                   	push   esi
c0010e8b:	e8 9c 72 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0010e90:	83 c4 10             	add    esp,0x10
c0010e93:	85 f6                	test   esi,esi
c0010e95:	74 5b                	je     c0010ef2 <SysOpen(regs*)+0x1de>
c0010e97:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010e9a:	0f b6 c2             	movzx  eax,dl
c0010e9d:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010ea0:	89 d0                	mov    eax,edx
c0010ea2:	83 e0 01             	and    eax,0x1
c0010ea5:	f6 c2 02             	test   dl,0x2
c0010ea8:	74 03                	je     c0010ead <SysOpen(regs*)+0x199>
c0010eaa:	83 c8 02             	or     eax,0x2
c0010ead:	f6 c2 04             	test   dl,0x4
c0010eb0:	74 03                	je     c0010eb5 <SysOpen(regs*)+0x1a1>
c0010eb2:	83 c8 04             	or     eax,0x4
c0010eb5:	f6 c2 08             	test   dl,0x8
c0010eb8:	74 03                	je     c0010ebd <SysOpen(regs*)+0x1a9>
c0010eba:	83 c8 0a             	or     eax,0xa
c0010ebd:	80 e2 10             	and    dl,0x10
c0010ec0:	74 03                	je     c0010ec5 <SysOpen(regs*)+0x1b1>
c0010ec2:	83 c8 12             	or     eax,0x12
c0010ec5:	83 ec 08             	sub    esp,0x8
c0010ec8:	50                   	push   eax
c0010ec9:	56                   	push   esi
c0010eca:	e8 7b 72 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0010ecf:	83 c4 10             	add    esp,0x10
c0010ed2:	85 c0                	test   eax,eax
c0010ed4:	75 1c                	jne    c0010ef2 <SysOpen(regs*)+0x1de>
c0010ed6:	83 ec 0c             	sub    esp,0xc
c0010ed9:	56                   	push   esi
c0010eda:	e8 49 0e 00 00       	call   c0011d28 <UnixFile::getFileDescriptor()>
c0010edf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010ee2:	83 c4 10             	add    esp,0x10
c0010ee5:	89 02                	mov    DWORD PTR [edx],eax
c0010ee7:	c1 f8 1f             	sar    eax,0x1f
c0010eea:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010eed:	e9 ba fe ff ff       	jmp    c0010dac <SysOpen(regs*)+0x98>
c0010ef2:	81 c4 04 01 00 00    	add    esp,0x104
c0010ef8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010efd:	5b                   	pop    ebx
c0010efe:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f03:	5e                   	pop    esi
c0010f04:	c3                   	ret    
c0010f05:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010f08:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0010f0e:	e9 92 fe ff ff       	jmp    c0010da5 <SysOpen(regs*)+0x91>

c0010f13 <KeSystemCall(regs*, void*)>:
c0010f13:	53                   	push   ebx
c0010f14:	83 ec 08             	sub    esp,0x8
c0010f17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f1b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010f1e:	83 f8 40             	cmp    eax,0x40
c0010f21:	77 16                	ja     c0010f39 <KeSystemCall(regs*, void*)+0x26>
c0010f23:	8b 14 85 80 4f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb080]
c0010f2a:	85 d2                	test   edx,edx
c0010f2c:	74 0b                	je     c0010f39 <KeSystemCall(regs*, void*)+0x26>
c0010f2e:	83 ec 0c             	sub    esp,0xc
c0010f31:	53                   	push   ebx
c0010f32:	ff d2                	call   edx
c0010f34:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0010f37:	eb 0d                	jmp    c0010f46 <KeSystemCall(regs*, void*)+0x33>
c0010f39:	52                   	push   edx
c0010f3a:	52                   	push   edx
c0010f3b:	50                   	push   eax
c0010f3c:	68 e8 2c 02 c0       	push   0xc0022ce8
c0010f41:	e8 08 60 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010f46:	83 c4 10             	add    esp,0x10
c0010f49:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0010f4e:	83 c4 08             	add    esp,0x8
c0010f51:	31 d2                	xor    edx,edx
c0010f53:	5b                   	pop    ebx
c0010f54:	c3                   	ret    
c0010f55:	90                   	nop

c0010f56 <VgaText::isAtty()>:
c0010f56:	b0 01                	mov    al,0x1
c0010f58:	c3                   	ret    
c0010f59:	90                   	nop

c0010f5a <VgaText::~VgaText()>:
c0010f5a:	83 ec 0c             	sub    esp,0xc
c0010f5d:	ba 64 2d 02 c0       	mov    edx,0xc0022d64
c0010f62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f66:	89 10                	mov    DWORD PTR [eax],edx
c0010f68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f6c:	83 ec 0c             	sub    esp,0xc
c0010f6f:	50                   	push   eax
c0010f70:	e8 a1 0f 00 00       	call   c0011f16 <UnixFile::~UnixFile()>
c0010f75:	83 c4 10             	add    esp,0x10
c0010f78:	90                   	nop
c0010f79:	83 c4 0c             	add    esp,0xc
c0010f7c:	c3                   	ret    
c0010f7d:	90                   	nop

c0010f7e <VgaText::~VgaText()>:
c0010f7e:	83 ec 0c             	sub    esp,0xc
c0010f81:	83 ec 0c             	sub    esp,0xc
c0010f84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f88:	e8 cd ff ff ff       	call   c0010f5a <VgaText::~VgaText()>
c0010f8d:	83 c4 10             	add    esp,0x10
c0010f90:	83 ec 08             	sub    esp,0x8
c0010f93:	68 84 01 00 00       	push   0x184
c0010f98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f9c:	e8 66 b8 ff ff       	call   c000c807 <operator delete(void*, unsigned long)>
c0010fa1:	83 c4 10             	add    esp,0x10
c0010fa4:	83 c4 0c             	add    esp,0xc
c0010fa7:	c3                   	ret    

c0010fa8 <VgaText::read(unsigned long long, void*, int*)>:
c0010fa8:	83 ec 10             	sub    esp,0x10
c0010fab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010faf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010fb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fb7:	e8 29 8c ff ff       	call   c0009be5 <readKeyboard(VgaText*, char*, unsigned long)>
c0010fbc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010fc0:	89 02                	mov    DWORD PTR [edx],eax
c0010fc2:	31 c0                	xor    eax,eax
c0010fc4:	83 c4 1c             	add    esp,0x1c
c0010fc7:	c3                   	ret    

c0010fc8 <setTerminalScrollLock(bool)>:
c0010fc8:	c3                   	ret    

c0010fc9 <doTerminalCycle()>:
c0010fc9:	c3                   	ret    

c0010fca <addToTerminalCycle(VgaText*)>:
c0010fca:	c3                   	ret    

c0010fcb <scrollTerminalScrollLock(int)>:
c0010fcb:	c3                   	ret    

c0010fcc <VgaText::updateTitle()>:
c0010fcc:	c3                   	ret    
c0010fcd:	90                   	nop

c0010fce <VgaText::load()>:
c0010fce:	c3                   	ret    
c0010fcf:	90                   	nop

c0010fd0 <VgaText::updateCursor()>:
c0010fd0:	83 ec 14             	sub    esp,0x14
c0010fd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010fd7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010fda:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010fdd:	e8 36 8c 00 00       	call   c0019c18 <HalConsoleCursorUpdate(int, int)>
c0010fe2:	83 c4 1c             	add    esp,0x1c
c0010fe5:	c3                   	ret    

c0010fe6 <VgaText::doANSI_SGR(int)>:
c0010fe6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fee:	85 d2                	test   edx,edx
c0010ff0:	75 0b                	jne    c0010ffd <VgaText::doANSI_SGR(int)+0x17>
c0010ff2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010ff5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010ff8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010ffb:	eb 59                	jmp    c0011056 <VgaText::doANSI_SGR(int)+0x70>
c0010ffd:	83 fa 07             	cmp    edx,0x7
c0011000:	75 0b                	jne    c001100d <VgaText::doANSI_SGR(int)+0x27>
c0011002:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0011005:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0011008:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c001100b:	eb 49                	jmp    c0011056 <VgaText::doANSI_SGR(int)+0x70>
c001100d:	83 fa 1b             	cmp    edx,0x1b
c0011010:	74 e0                	je     c0010ff2 <VgaText::doANSI_SGR(int)+0xc>
c0011012:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0011015:	83 f9 07             	cmp    ecx,0x7
c0011018:	77 09                	ja     c0011023 <VgaText::doANSI_SGR(int)+0x3d>
c001101a:	8b 14 8d c0 50 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdaf40]
c0011021:	eb 20                	jmp    c0011043 <VgaText::doANSI_SGR(int)+0x5d>
c0011023:	8d 4a d8             	lea    ecx,[edx-0x28]
c0011026:	83 f9 07             	cmp    ecx,0x7
c0011029:	77 09                	ja     c0011034 <VgaText::doANSI_SGR(int)+0x4e>
c001102b:	8b 14 8d c0 50 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdaf40]
c0011032:	eb 22                	jmp    c0011056 <VgaText::doANSI_SGR(int)+0x70>
c0011034:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0011037:	83 f9 07             	cmp    ecx,0x7
c001103a:	77 0b                	ja     c0011047 <VgaText::doANSI_SGR(int)+0x61>
c001103c:	8b 14 95 78 4f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb088]
c0011043:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0011046:	c3                   	ret    
c0011047:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001104a:	83 f9 07             	cmp    ecx,0x7
c001104d:	77 0a                	ja     c0011059 <VgaText::doANSI_SGR(int)+0x73>
c001104f:	8b 14 95 50 4f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb0b0]
c0011056:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0011059:	c3                   	ret    

c001105a <VgaText::setDefaultBgColour(VgaColour)>:
c001105a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001105e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011062:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0011065:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0011068:	c3                   	ret    
c0011069:	90                   	nop

c001106a <VgaText::setDefaultFgColour(VgaColour)>:
c001106a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001106e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011072:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011075:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0011078:	c3                   	ret    
c0011079:	90                   	nop

c001107a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001107a:	53                   	push   ebx
c001107b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001107f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011083:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011087:	51                   	push   ecx
c0011088:	e8 cd ff ff ff       	call   c001105a <VgaText::setDefaultBgColour(VgaColour)>
c001108d:	58                   	pop    eax
c001108e:	5a                   	pop    edx
c001108f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011093:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0011097:	5b                   	pop    ebx
c0011098:	eb d0                	jmp    c001106a <VgaText::setDefaultFgColour(VgaColour)>

c001109a <VgaText::setTitleTextColour(VgaColour)>:
c001109a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001109e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00110a2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00110a5:	c3                   	ret    

c00110a6 <VgaText::setTitleColour(VgaColour)>:
c00110a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00110ae:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00110b1:	c3                   	ret    

c00110b2 <VgaText::setTitle(char*)>:
c00110b2:	c3                   	ret    
c00110b3:	90                   	nop

c00110b4 <VgaText::combineColours(unsigned char, unsigned char)>:
c00110b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110b8:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00110bd:	83 e0 0f             	and    eax,0xf
c00110c0:	c1 e2 04             	shl    edx,0x4
c00110c3:	09 d0                	or     eax,edx
c00110c5:	c3                   	ret    

c00110c6 <VgaText::scrollScreen()>:
c00110c6:	55                   	push   ebp
c00110c7:	57                   	push   edi
c00110c8:	56                   	push   esi
c00110c9:	be 01 00 00 00       	mov    esi,0x1
c00110ce:	53                   	push   ebx
c00110cf:	83 ec 0c             	sub    esp,0xc
c00110d2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00110d6:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00110d9:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00110df:	31 ff                	xor    edi,edi
c00110e1:	01 e9                	add    ecx,ebp
c00110e3:	8a 01                	mov    al,BYTE PTR [ecx]
c00110e5:	83 fe 18             	cmp    esi,0x18
c00110e8:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c00110ee:	75 20                	jne    c0011110 <VgaText::scrollScreen()+0x4a>
c00110f0:	f7 c7 01 00 00 00    	test   edi,0x1
c00110f6:	74 15                	je     c001110d <VgaText::scrollScreen()+0x47>
c00110f8:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00110fc:	50                   	push   eax
c00110fd:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0011101:	50                   	push   eax
c0011102:	e8 ad ff ff ff       	call   c00110b4 <VgaText::combineColours(unsigned char, unsigned char)>
c0011107:	5a                   	pop    edx
c0011108:	5a                   	pop    edx
c0011109:	88 01                	mov    BYTE PTR [ecx],al
c001110b:	eb 03                	jmp    c0011110 <VgaText::scrollScreen()+0x4a>
c001110d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0011110:	47                   	inc    edi
c0011111:	41                   	inc    ecx
c0011112:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0011118:	75 c9                	jne    c00110e3 <VgaText::scrollScreen()+0x1d>
c001111a:	46                   	inc    esi
c001111b:	83 fe 19             	cmp    esi,0x19
c001111e:	75 b9                	jne    c00110d9 <VgaText::scrollScreen()+0x13>
c0011120:	39 1d 34 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce34,ebx
c0011126:	75 1f                	jne    c0011147 <VgaText::scrollScreen()+0x81>
c0011128:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001112c:	74 05                	je     c0011133 <VgaText::scrollScreen()+0x6d>
c001112e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0011131:	eb 14                	jmp    c0011147 <VgaText::scrollScreen()+0x81>
c0011133:	50                   	push   eax
c0011134:	50                   	push   eax
c0011135:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0011139:	50                   	push   eax
c001113a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001113e:	50                   	push   eax
c001113f:	e8 68 89 00 00       	call   c0019aac <HalConsoleScroll(int, int)>
c0011144:	83 c4 10             	add    esp,0x10
c0011147:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001114b:	83 c4 0c             	add    esp,0xc
c001114e:	5b                   	pop    ebx
c001114f:	5e                   	pop    esi
c0011150:	5f                   	pop    edi
c0011151:	5d                   	pop    ebp
c0011152:	e9 79 fe ff ff       	jmp    c0010fd0 <VgaText::updateCursor()>
c0011157:	90                   	nop

c0011158 <VgaText::combineCharAndColour(char, unsigned char)>:
c0011158:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001115d:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0011162:	c1 e0 08             	shl    eax,0x8
c0011165:	09 d0                	or     eax,edx
c0011167:	c3                   	ret    

c0011168 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0011168:	55                   	push   ebp
c0011169:	57                   	push   edi
c001116a:	56                   	push   esi
c001116b:	53                   	push   ebx
c001116c:	83 ec 1c             	sub    esp,0x1c
c001116f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011173:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011177:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001117b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001117f:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c0011182:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011186:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001118a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001118e:	85 ed                	test   ebp,ebp
c0011190:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011194:	75 14                	jne    c00111aa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c0011196:	c7 44 24 30 fc 2c 02 c0 	mov    DWORD PTR [esp+0x30],0xc0022cfc
c001119e:	83 c4 1c             	add    esp,0x1c
c00111a1:	5b                   	pop    ebx
c00111a2:	5e                   	pop    esi
c00111a3:	5f                   	pop    edi
c00111a4:	5d                   	pop    ebp
c00111a5:	e9 28 dc ff ff       	jmp    c000edd2 <KePanic(char const*)>
c00111aa:	50                   	push   eax
c00111ab:	50                   	push   eax
c00111ac:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00111b1:	50                   	push   eax
c00111b2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00111b7:	50                   	push   eax
c00111b8:	e8 f7 fe ff ff       	call   c00110b4 <VgaText::combineColours(unsigned char, unsigned char)>
c00111bd:	5a                   	pop    edx
c00111be:	5a                   	pop    edx
c00111bf:	0f b6 c0             	movzx  eax,al
c00111c2:	0f be c9             	movsx  ecx,cl
c00111c5:	50                   	push   eax
c00111c6:	51                   	push   ecx
c00111c7:	e8 8c ff ff ff       	call   c0011158 <VgaText::combineCharAndColour(char, unsigned char)>
c00111cc:	6b d6 50             	imul   edx,esi,0x50
c00111cf:	83 c4 10             	add    esp,0x10
c00111d2:	01 da                	add    edx,ebx
c00111d4:	0f b7 d2             	movzx  edx,dx
c00111d7:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c00111dc:	39 3d 34 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce34,edi
c00111e2:	75 28                	jne    c001120c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c00111e4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00111e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00111ec:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c00111f0:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c00111f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00111f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111fc:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0011200:	83 c4 1c             	add    esp,0x1c
c0011203:	5b                   	pop    ebx
c0011204:	5e                   	pop    esi
c0011205:	5f                   	pop    edi
c0011206:	5d                   	pop    ebp
c0011207:	e9 a8 89 00 00       	jmp    c0019bb4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001120c:	83 c4 1c             	add    esp,0x1c
c001120f:	5b                   	pop    ebx
c0011210:	5e                   	pop    esi
c0011211:	5f                   	pop    edi
c0011212:	5d                   	pop    ebp
c0011213:	c3                   	ret    

c0011214 <VgaText::getCursorX()>:
c0011214:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011218:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001121b:	c3                   	ret    

c001121c <VgaText::getCursorY()>:
c001121c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011220:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011223:	c3                   	ret    

c0011224 <VgaText::setCursor(int, int)>:
c0011224:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011228:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001122c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001122f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011233:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0011236:	e9 95 fd ff ff       	jmp    c0010fd0 <VgaText::updateCursor()>

c001123b <setActiveTerminal(VgaText*)>:
c001123b:	53                   	push   ebx
c001123c:	83 ec 08             	sub    esp,0x8
c001123f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011243:	85 db                	test   ebx,ebx
c0011245:	75 11                	jne    c0011258 <setActiveTerminal(VgaText*)+0x1d>
c0011247:	c7 44 24 10 0c 2d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022d0c
c001124f:	83 c4 08             	add    esp,0x8
c0011252:	5b                   	pop    ebx
c0011253:	e9 7a db ff ff       	jmp    c000edd2 <KePanic(char const*)>
c0011258:	a1 34 ce 02 c0       	mov    eax,ds:0xc002ce34
c001125d:	85 c0                	test   eax,eax
c001125f:	74 0c                	je     c001126d <setActiveTerminal(VgaText*)+0x32>
c0011261:	83 ec 0c             	sub    esp,0xc
c0011264:	50                   	push   eax
c0011265:	e8 66 fd ff ff       	call   c0010fd0 <VgaText::updateCursor()>
c001126a:	83 c4 10             	add    esp,0x10
c001126d:	50                   	push   eax
c001126e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011271:	89 1d 34 ce 02 c0    	mov    DWORD PTR ds:0xc002ce34,ebx
c0011277:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001127a:	53                   	push   ebx
c001127b:	e8 a4 ff ff ff       	call   c0011224 <VgaText::setCursor(int, int)>
c0011280:	83 c4 18             	add    esp,0x18
c0011283:	5b                   	pop    ebx
c0011284:	c3                   	ret    
c0011285:	90                   	nop

c0011286 <VgaText::clearScreen()>:
c0011286:	57                   	push   edi
c0011287:	56                   	push   esi
c0011288:	31 f6                	xor    esi,esi
c001128a:	53                   	push   ebx
c001128b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001128f:	52                   	push   edx
c0011290:	6a 00                	push   0x0
c0011292:	6a 00                	push   0x0
c0011294:	53                   	push   ebx
c0011295:	e8 8a ff ff ff       	call   c0011224 <VgaText::setCursor(int, int)>
c001129a:	83 c4 10             	add    esp,0x10
c001129d:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00112a4:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00112a7:	7e 20                	jle    c00112c9 <VgaText::clearScreen()+0x43>
c00112a9:	31 ff                	xor    edi,edi
c00112ab:	50                   	push   eax
c00112ac:	50                   	push   eax
c00112ad:	56                   	push   esi
c00112ae:	57                   	push   edi
c00112af:	47                   	inc    edi
c00112b0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00112b3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00112b6:	6a 20                	push   0x20
c00112b8:	53                   	push   ebx
c00112b9:	e8 aa fe ff ff       	call   c0011168 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00112be:	83 c4 20             	add    esp,0x20
c00112c1:	83 ff 50             	cmp    edi,0x50
c00112c4:	75 e5                	jne    c00112ab <VgaText::clearScreen()+0x25>
c00112c6:	46                   	inc    esi
c00112c7:	eb db                	jmp    c00112a4 <VgaText::clearScreen()+0x1e>
c00112c9:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00112d0:	5b                   	pop    ebx
c00112d1:	5e                   	pop    esi
c00112d2:	5f                   	pop    edi
c00112d3:	c3                   	ret    

c00112d4 <VgaText::setCursorX(int)>:
c00112d4:	83 ec 10             	sub    esp,0x10
c00112d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00112db:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00112de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112e2:	50                   	push   eax
c00112e3:	e8 3c ff ff ff       	call   c0011224 <VgaText::setCursor(int, int)>
c00112e8:	83 c4 1c             	add    esp,0x1c
c00112eb:	c3                   	ret    

c00112ec <VgaText::setCursorY(int)>:
c00112ec:	83 ec 10             	sub    esp,0x10
c00112ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00112f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00112f7:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00112fa:	50                   	push   eax
c00112fb:	e8 24 ff ff ff       	call   c0011224 <VgaText::setCursor(int, int)>
c0011300:	83 c4 1c             	add    esp,0x1c
c0011303:	c3                   	ret    

c0011304 <VgaText::incrementCursor(bool)>:
c0011304:	56                   	push   esi
c0011305:	53                   	push   ebx
c0011306:	51                   	push   ecx
c0011307:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001130b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001130f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0011312:	40                   	inc    eax
c0011313:	83 f8 50             	cmp    eax,0x50
c0011316:	74 05                	je     c001131d <VgaText::incrementCursor(bool)+0x19>
c0011318:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001131b:	eb 24                	jmp    c0011341 <VgaText::incrementCursor(bool)+0x3d>
c001131d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011324:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011327:	8d 50 01             	lea    edx,[eax+0x1]
c001132a:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001132d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0011330:	75 0f                	jne    c0011341 <VgaText::incrementCursor(bool)+0x3d>
c0011332:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0011335:	83 ec 0c             	sub    esp,0xc
c0011338:	53                   	push   ebx
c0011339:	e8 88 fd ff ff       	call   c00110c6 <VgaText::scrollScreen()>
c001133e:	83 c4 10             	add    esp,0x10
c0011341:	89 f0                	mov    eax,esi
c0011343:	84 c0                	test   al,al
c0011345:	74 0c                	je     c0011353 <VgaText::incrementCursor(bool)+0x4f>
c0011347:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001134b:	5a                   	pop    edx
c001134c:	5b                   	pop    ebx
c001134d:	5e                   	pop    esi
c001134e:	e9 7d fc ff ff       	jmp    c0010fd0 <VgaText::updateCursor()>
c0011353:	58                   	pop    eax
c0011354:	5b                   	pop    ebx
c0011355:	5e                   	pop    esi
c0011356:	c3                   	ret    
c0011357:	90                   	nop

c0011358 <VgaText::decrementCursor(bool)>:
c0011358:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001135c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011360:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0011363:	85 c0                	test   eax,eax
c0011365:	74 04                	je     c001136b <VgaText::decrementCursor(bool)+0x13>
c0011367:	48                   	dec    eax
c0011368:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c001136b:	84 c9                	test   cl,cl
c001136d:	74 09                	je     c0011378 <VgaText::decrementCursor(bool)+0x20>
c001136f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011373:	e9 58 fc ff ff       	jmp    c0010fd0 <VgaText::updateCursor()>
c0011378:	c3                   	ret    
c0011379:	90                   	nop

c001137a <VgaText::putchar(char, VgaColour, VgaColour)>:
c001137a:	53                   	push   ebx
c001137b:	83 ec 08             	sub    esp,0x8
c001137e:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0011383:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011387:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001138b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001138f:	83 f8 07             	cmp    eax,0x7
c0011392:	75 21                	jne    c00113b5 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0011394:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001139c:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00113a4:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00113ac:	83 c4 08             	add    esp,0x8
c00113af:	5b                   	pop    ebx
c00113b0:	e9 19 76 ff ff       	jmp    c00089ce <KeBeep(int, int, bool)>
c00113b5:	83 f8 0d             	cmp    eax,0xd
c00113b8:	75 09                	jne    c00113c3 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00113ba:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00113c1:	eb 2d                	jmp    c00113f0 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00113c3:	83 f8 0a             	cmp    eax,0xa
c00113c6:	75 31                	jne    c00113f9 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00113c8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00113cf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00113d2:	8d 50 01             	lea    edx,[eax+0x1]
c00113d5:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00113d8:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00113db:	75 0f                	jne    c00113ec <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00113dd:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00113e0:	83 ec 0c             	sub    esp,0xc
c00113e3:	53                   	push   ebx
c00113e4:	e8 dd fc ff ff       	call   c00110c6 <VgaText::scrollScreen()>
c00113e9:	83 c4 10             	add    esp,0x10
c00113ec:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00113f0:	83 c4 08             	add    esp,0x8
c00113f3:	5b                   	pop    ebx
c00113f4:	e9 d7 fb ff ff       	jmp    c0010fd0 <VgaText::updateCursor()>
c00113f9:	83 f8 08             	cmp    eax,0x8
c00113fc:	75 25                	jne    c0011423 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c00113fe:	50                   	push   eax
c00113ff:	50                   	push   eax
c0011400:	6a 01                	push   0x1
c0011402:	53                   	push   ebx
c0011403:	e8 50 ff ff ff       	call   c0011358 <VgaText::decrementCursor(bool)>
c0011408:	5a                   	pop    edx
c0011409:	59                   	pop    ecx
c001140a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001140d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011410:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011413:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011416:	6a 20                	push   0x20
c0011418:	53                   	push   ebx
c0011419:	e8 4a fd ff ff       	call   c0011168 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001141e:	83 c4 28             	add    esp,0x28
c0011421:	5b                   	pop    ebx
c0011422:	c3                   	ret    
c0011423:	83 ec 08             	sub    esp,0x8
c0011426:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011429:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001142c:	51                   	push   ecx
c001142d:	52                   	push   edx
c001142e:	50                   	push   eax
c001142f:	53                   	push   ebx
c0011430:	e8 33 fd ff ff       	call   c0011168 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011435:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0011439:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0011441:	83 c4 28             	add    esp,0x28
c0011444:	5b                   	pop    ebx
c0011445:	e9 ba fe ff ff       	jmp    c0011304 <VgaText::incrementCursor(bool)>

c001144a <VgaText::putchar(char)>:
c001144a:	57                   	push   edi
c001144b:	56                   	push   esi
c001144c:	53                   	push   ebx
c001144d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011451:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011455:	0f be c2             	movsx  eax,dl
c0011458:	83 f8 5b             	cmp    eax,0x5b
c001145b:	75 18                	jne    c0011475 <VgaText::putchar(char)+0x2b>
c001145d:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0011461:	74 20                	je     c0011483 <VgaText::putchar(char)+0x39>
c0011463:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0011469:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0011470:	e9 b8 00 00 00       	jmp    c001152d <VgaText::putchar(char)+0xe3>
c0011475:	83 f8 1b             	cmp    eax,0x1b
c0011478:	75 09                	jne    c0011483 <VgaText::putchar(char)+0x39>
c001147a:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001147e:	e9 aa 00 00 00       	jmp    c001152d <VgaText::putchar(char)+0xe3>
c0011483:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c0011487:	89 f9                	mov    ecx,edi
c0011489:	84 c9                	test   cl,cl
c001148b:	0f 84 8c 00 00 00    	je     c001151d <VgaText::putchar(char)+0xd3>
c0011491:	8d 4a c0             	lea    ecx,[edx-0x40]
c0011494:	80 f9 3e             	cmp    cl,0x3e
c0011497:	77 70                	ja     c0011509 <VgaText::putchar(char)+0xbf>
c0011499:	83 f8 6d             	cmp    eax,0x6d
c001149c:	75 3f                	jne    c00114dd <VgaText::putchar(char)+0x93>
c001149e:	31 f6                	xor    esi,esi
c00114a0:	31 d2                	xor    edx,edx
c00114a2:	31 c0                	xor    eax,eax
c00114a4:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00114a7:	7e 25                	jle    c00114ce <VgaText::putchar(char)+0x84>
c00114a9:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00114ae:	83 fa 3b             	cmp    edx,0x3b
c00114b1:	75 0f                	jne    c00114c2 <VgaText::putchar(char)+0x78>
c00114b3:	50                   	push   eax
c00114b4:	53                   	push   ebx
c00114b5:	e8 2c fb ff ff       	call   c0010fe6 <VgaText::doANSI_SGR(int)>
c00114ba:	31 d2                	xor    edx,edx
c00114bc:	59                   	pop    ecx
c00114bd:	58                   	pop    eax
c00114be:	31 c0                	xor    eax,eax
c00114c0:	eb 09                	jmp    c00114cb <VgaText::putchar(char)+0x81>
c00114c2:	6b c0 0a             	imul   eax,eax,0xa
c00114c5:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00114c9:	89 fa                	mov    edx,edi
c00114cb:	46                   	inc    esi
c00114cc:	eb d6                	jmp    c00114a4 <VgaText::putchar(char)+0x5a>
c00114ce:	84 d2                	test   dl,dl
c00114d0:	74 2f                	je     c0011501 <VgaText::putchar(char)+0xb7>
c00114d2:	50                   	push   eax
c00114d3:	53                   	push   ebx
c00114d4:	e8 0d fb ff ff       	call   c0010fe6 <VgaText::doANSI_SGR(int)>
c00114d9:	58                   	pop    eax
c00114da:	5a                   	pop    edx
c00114db:	eb 24                	jmp    c0011501 <VgaText::putchar(char)+0xb7>
c00114dd:	83 f8 4a             	cmp    eax,0x4a
c00114e0:	75 1f                	jne    c0011501 <VgaText::putchar(char)+0xb7>
c00114e2:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00114e6:	75 19                	jne    c0011501 <VgaText::putchar(char)+0xb7>
c00114e8:	83 ec 0c             	sub    esp,0xc
c00114eb:	53                   	push   ebx
c00114ec:	e8 95 fd ff ff       	call   c0011286 <VgaText::clearScreen()>
c00114f1:	83 c4 0c             	add    esp,0xc
c00114f4:	6a 00                	push   0x0
c00114f6:	6a 00                	push   0x0
c00114f8:	53                   	push   ebx
c00114f9:	e8 26 fd ff ff       	call   c0011224 <VgaText::setCursor(int, int)>
c00114fe:	83 c4 10             	add    esp,0x10
c0011501:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0011507:	eb 24                	jmp    c001152d <VgaText::putchar(char)+0xe3>
c0011509:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c001150c:	83 f8 0e             	cmp    eax,0xe
c001150f:	7f 1c                	jg     c001152d <VgaText::putchar(char)+0xe3>
c0011511:	8d 48 01             	lea    ecx,[eax+0x1]
c0011514:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0011517:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c001151b:	eb 10                	jmp    c001152d <VgaText::putchar(char)+0xe3>
c001151d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011520:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011523:	50                   	push   eax
c0011524:	53                   	push   ebx
c0011525:	e8 50 fe ff ff       	call   c001137a <VgaText::putchar(char, VgaColour, VgaColour)>
c001152a:	83 c4 10             	add    esp,0x10
c001152d:	5b                   	pop    ebx
c001152e:	5e                   	pop    esi
c001152f:	5f                   	pop    edi
c0011530:	c3                   	ret    
c0011531:	90                   	nop

c0011532 <VgaText::putx(unsigned int)>:
c0011532:	57                   	push   edi
c0011533:	b9 11 00 00 00       	mov    ecx,0x11
c0011538:	56                   	push   esi
c0011539:	be 1a 2d 02 c0       	mov    esi,0xc0022d1a
c001153e:	53                   	push   ebx
c001153f:	83 ec 20             	sub    esp,0x20
c0011542:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011546:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001154a:	fc                   	cld    
c001154b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001154d:	be 08 00 00 00       	mov    esi,0x8
c0011552:	50                   	push   eax
c0011553:	50                   	push   eax
c0011554:	89 d8                	mov    eax,ebx
c0011556:	c1 e8 1c             	shr    eax,0x1c
c0011559:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001155e:	c1 e3 04             	shl    ebx,0x4
c0011561:	50                   	push   eax
c0011562:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011566:	e8 df fe ff ff       	call   c001144a <VgaText::putchar(char)>
c001156b:	83 c4 10             	add    esp,0x10
c001156e:	4e                   	dec    esi
c001156f:	75 e1                	jne    c0011552 <VgaText::putx(unsigned int)+0x20>
c0011571:	83 c4 20             	add    esp,0x20
c0011574:	5b                   	pop    ebx
c0011575:	5e                   	pop    esi
c0011576:	5f                   	pop    edi
c0011577:	c3                   	ret    

c0011578 <VgaText::puts(char const*)>:
c0011578:	53                   	push   ebx
c0011579:	83 ec 08             	sub    esp,0x8
c001157c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011580:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011583:	85 c0                	test   eax,eax
c0011585:	74 12                	je     c0011599 <VgaText::puts(char const*)+0x21>
c0011587:	51                   	push   ecx
c0011588:	43                   	inc    ebx
c0011589:	51                   	push   ecx
c001158a:	50                   	push   eax
c001158b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001158f:	e8 b6 fe ff ff       	call   c001144a <VgaText::putchar(char)>
c0011594:	83 c4 10             	add    esp,0x10
c0011597:	eb e7                	jmp    c0011580 <VgaText::puts(char const*)+0x8>
c0011599:	83 c4 08             	add    esp,0x8
c001159c:	5b                   	pop    ebx
c001159d:	c3                   	ret    

c001159e <VgaText::write(unsigned long long, void*, int*)>:
c001159e:	55                   	push   ebp
c001159f:	57                   	push   edi
c00115a0:	56                   	push   esi
c00115a1:	53                   	push   ebx
c00115a2:	83 ec 0c             	sub    esp,0xc
c00115a5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00115a9:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00115ad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00115b1:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00115b8:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00115bb:	39 eb                	cmp    ebx,ebp
c00115bd:	74 13                	je     c00115d2 <VgaText::write(unsigned long long, void*, int*)+0x34>
c00115bf:	50                   	push   eax
c00115c0:	43                   	inc    ebx
c00115c1:	50                   	push   eax
c00115c2:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00115c6:	50                   	push   eax
c00115c7:	56                   	push   esi
c00115c8:	e8 7d fe ff ff       	call   c001144a <VgaText::putchar(char)>
c00115cd:	83 c4 10             	add    esp,0x10
c00115d0:	eb e9                	jmp    c00115bb <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00115d2:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00115d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115dd:	89 38                	mov    DWORD PTR [eax],edi
c00115df:	83 c4 0c             	add    esp,0xc
c00115e2:	31 c0                	xor    eax,eax
c00115e4:	5b                   	pop    ebx
c00115e5:	5e                   	pop    esi
c00115e6:	5f                   	pop    edi
c00115e7:	5d                   	pop    ebp
c00115e8:	c3                   	ret    
c00115e9:	90                   	nop

c00115ea <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00115ea:	55                   	push   ebp
c00115eb:	57                   	push   edi
c00115ec:	56                   	push   esi
c00115ed:	53                   	push   ebx
c00115ee:	83 ec 1c             	sub    esp,0x1c
c00115f1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00115f5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00115f9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00115fd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0011601:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c0011604:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011608:	85 db                	test   ebx,ebx
c001160a:	75 14                	jne    c0011620 <VgaText::puts(char const*, VgaColour, VgaColour)+0x36>
c001160c:	c7 44 24 30 2b 2d 02 c0 	mov    DWORD PTR [esp+0x30],0xc0022d2b
c0011614:	83 c4 1c             	add    esp,0x1c
c0011617:	5b                   	pop    ebx
c0011618:	5e                   	pop    esi
c0011619:	5f                   	pop    edi
c001161a:	5d                   	pop    ebp
c001161b:	e9 b2 d7 ff ff       	jmp    c000edd2 <KePanic(char const*)>
c0011620:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c0011627:	50                   	push   eax
c0011628:	50                   	push   eax
c0011629:	89 e8                	mov    eax,ebp
c001162b:	0f b6 c0             	movzx  eax,al
c001162e:	50                   	push   eax
c001162f:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0011634:	50                   	push   eax
c0011635:	e8 7a fa ff ff       	call   c00110b4 <VgaText::combineColours(unsigned char, unsigned char)>
c001163a:	83 c4 10             	add    esp,0x10
c001163d:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c0011641:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c0011644:	0f b6 c0             	movzx  eax,al
c0011647:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001164b:	0f b7 c9             	movzx  ecx,cx
c001164e:	01 c9                	add    ecx,ecx
c0011650:	01 cb                	add    ebx,ecx
c0011652:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0011655:	85 c0                	test   eax,eax
c0011657:	0f 84 ef 00 00 00    	je     c001174c <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c001165d:	83 f8 0d             	cmp    eax,0xd
c0011660:	75 0c                	jne    c001166e <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c0011662:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0011669:	e9 d8 00 00 00       	jmp    c0011746 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c001166e:	83 f8 0a             	cmp    eax,0xa
c0011671:	75 44                	jne    c00116b7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c0011673:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c001167a:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001167d:	8d 48 01             	lea    ecx,[eax+0x1]
c0011680:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c0011683:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c0011686:	75 0f                	jne    c0011697 <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c0011688:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c001168b:	83 ec 0c             	sub    esp,0xc
c001168e:	57                   	push   edi
c001168f:	e8 32 fa ff ff       	call   c00110c6 <VgaText::scrollScreen()>
c0011694:	83 c4 10             	add    esp,0x10
c0011697:	83 ec 0c             	sub    esp,0xc
c001169a:	57                   	push   edi
c001169b:	e8 30 f9 ff ff       	call   c0010fd0 <VgaText::updateCursor()>
c00116a0:	83 c4 10             	add    esp,0x10
c00116a3:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c00116a7:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c00116aa:	0f b7 db             	movzx  ebx,bx
c00116ad:	01 db                	add    ebx,ebx
c00116af:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c00116b2:	e9 8f 00 00 00       	jmp    c0011746 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00116b7:	83 f8 08             	cmp    eax,0x8
c00116ba:	75 34                	jne    c00116f0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c00116bc:	51                   	push   ecx
c00116bd:	51                   	push   ecx
c00116be:	6a 01                	push   0x1
c00116c0:	57                   	push   edi
c00116c1:	e8 92 fc ff ff       	call   c0011358 <VgaText::decrementCursor(bool)>
c00116c6:	5b                   	pop    ebx
c00116c7:	58                   	pop    eax
c00116c8:	ff 77 18             	push   DWORD PTR [edi+0x18]
c00116cb:	ff 77 14             	push   DWORD PTR [edi+0x14]
c00116ce:	ff 77 30             	push   DWORD PTR [edi+0x30]
c00116d1:	ff 77 34             	push   DWORD PTR [edi+0x34]
c00116d4:	6a 20                	push   0x20
c00116d6:	57                   	push   edi
c00116d7:	e8 8c fa ff ff       	call   c0011168 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00116dc:	83 c4 20             	add    esp,0x20
c00116df:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c00116e3:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c00116e6:	0f b7 db             	movzx  ebx,bx
c00116e9:	01 db                	add    ebx,ebx
c00116eb:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c00116ee:	eb 56                	jmp    c0011746 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00116f0:	52                   	push   edx
c00116f1:	52                   	push   edx
c00116f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00116f6:	50                   	push   eax
c00116f7:	e8 5c fa ff ff       	call   c0011158 <VgaText::combineCharAndColour(char, unsigned char)>
c00116fc:	83 c4 10             	add    esp,0x10
c00116ff:	66 89 03             	mov    WORD PTR [ebx],ax
c0011702:	39 3d 34 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce34,edi
c0011708:	75 1a                	jne    c0011724 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c001170a:	83 ec 0c             	sub    esp,0xc
c001170d:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0011710:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0011713:	55                   	push   ebp
c0011714:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011718:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001171b:	50                   	push   eax
c001171c:	e8 93 84 00 00       	call   c0019bb4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0011721:	83 c4 20             	add    esp,0x20
c0011724:	50                   	push   eax
c0011725:	83 c3 02             	add    ebx,0x2
c0011728:	50                   	push   eax
c0011729:	6a 00                	push   0x0
c001172b:	57                   	push   edi
c001172c:	e8 d3 fb ff ff       	call   c0011304 <VgaText::incrementCursor(bool)>
c0011731:	83 c4 10             	add    esp,0x10
c0011734:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c0011738:	75 0c                	jne    c0011746 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c001173a:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c001173e:	0f b7 db             	movzx  ebx,bx
c0011741:	01 db                	add    ebx,ebx
c0011743:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0011746:	46                   	inc    esi
c0011747:	e9 06 ff ff ff       	jmp    c0011652 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c001174c:	83 ec 0c             	sub    esp,0xc
c001174f:	57                   	push   edi
c0011750:	e8 7b f8 ff ff       	call   c0010fd0 <VgaText::updateCursor()>
c0011755:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c001175c:	83 c4 2c             	add    esp,0x2c
c001175f:	5b                   	pop    ebx
c0011760:	5e                   	pop    esi
c0011761:	5f                   	pop    edi
c0011762:	5d                   	pop    ebp
c0011763:	c3                   	ret    

c0011764 <VgaText::VgaText(char const*)>:
c0011764:	56                   	push   esi
c0011765:	53                   	push   ebx
c0011766:	83 ec 04             	sub    esp,0x4
c0011769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001176d:	83 ec 08             	sub    esp,0x8
c0011770:	6a 00                	push   0x0
c0011772:	50                   	push   eax
c0011773:	e8 b8 05 00 00       	call   c0011d30 <UnixFile::UnixFile(int)>
c0011778:	83 c4 10             	add    esp,0x10
c001177b:	ba 64 2d 02 c0       	mov    edx,0xc0022d64
c0011780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011784:	89 10                	mov    DWORD PTR [eax],edx
c0011786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001178a:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0011791:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011795:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c001179c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117a0:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00117a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117a8:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00117ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117b0:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00117b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117bb:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00117c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117c6:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00117cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117d1:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00117d8:	83 ec 0c             	sub    esp,0xc
c00117db:	68 3b 2d 02 c0       	push   0xc0022d3b
c00117e0:	e8 69 57 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00117e5:	83 c4 10             	add    esp,0x10
c00117e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117ec:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00117f3:	83 ec 0c             	sub    esp,0xc
c00117f6:	6a 01                	push   0x1
c00117f8:	e8 94 09 00 00       	call   c0012191 <Virt::allocateKernelVirtualPages(int)>
c00117fd:	83 c4 10             	add    esp,0x10
c0011800:	89 c2                	mov    edx,eax
c0011802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011806:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011809:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c001180f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011813:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011816:	89 c6                	mov    esi,eax
c0011818:	e8 af d7 ff ff       	call   c000efcc <Phys::allocatePage()>
c001181d:	68 05 0c 00 00       	push   0xc05
c0011822:	56                   	push   esi
c0011823:	50                   	push   eax
c0011824:	53                   	push   ebx
c0011825:	e8 40 10 00 00       	call   c001286a <VAS::mapPage(unsigned long, unsigned long, int)>
c001182a:	83 c4 10             	add    esp,0x10
c001182d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011831:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011834:	83 ec 04             	sub    esp,0x4
c0011837:	68 a0 0f 00 00       	push   0xfa0
c001183c:	6a 00                	push   0x0
c001183e:	50                   	push   eax
c001183f:	e8 ac ec fe ff       	call   c00004f0 <memset>
c0011844:	83 c4 10             	add    esp,0x10
c0011847:	83 ec 04             	sub    esp,0x4
c001184a:	6a 00                	push   0x0
c001184c:	6a 07                	push   0x7
c001184e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011852:	e8 23 f8 ff ff       	call   c001107a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011857:	83 c4 10             	add    esp,0x10
c001185a:	83 ec 04             	sub    esp,0x4
c001185d:	6a 00                	push   0x0
c001185f:	6a 00                	push   0x0
c0011861:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011865:	e8 ba f9 ff ff       	call   c0011224 <VgaText::setCursor(int, int)>
c001186a:	83 c4 10             	add    esp,0x10
c001186d:	83 ec 0c             	sub    esp,0xc
c0011870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011874:	e8 0d fa ff ff       	call   c0011286 <VgaText::clearScreen()>
c0011879:	83 c4 10             	add    esp,0x10
c001187c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011880:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0011884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011888:	05 82 00 00 00       	add    eax,0x82
c001188d:	83 ec 04             	sub    esp,0x4
c0011890:	68 80 00 00 00       	push   0x80
c0011895:	6a 00                	push   0x0
c0011897:	50                   	push   eax
c0011898:	e8 53 ec fe ff       	call   c00004f0 <memset>
c001189d:	83 c4 10             	add    esp,0x10
c00118a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118a4:	05 02 01 00 00       	add    eax,0x102
c00118a9:	83 ec 04             	sub    esp,0x4
c00118ac:	68 80 00 00 00       	push   0x80
c00118b1:	6a 00                	push   0x0
c00118b3:	50                   	push   eax
c00118b4:	e8 37 ec fe ff       	call   c00004f0 <memset>
c00118b9:	83 c4 10             	add    esp,0x10
c00118bc:	90                   	nop
c00118bd:	83 c4 04             	add    esp,0x4
c00118c0:	5b                   	pop    ebx
c00118c1:	5e                   	pop    esi
c00118c2:	c3                   	ret    
c00118c3:	90                   	nop

c00118c4 <VgaText::receiveKey(unsigned char)>:
c00118c4:	55                   	push   ebp
c00118c5:	57                   	push   edi
c00118c6:	56                   	push   esi
c00118c7:	53                   	push   ebx
c00118c8:	83 ec 2c             	sub    esp,0x2c
c00118cb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00118cf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00118d3:	89 fd                	mov    ebp,edi
c00118d5:	81 e5 ff 00 00 00    	and    ebp,0xff
c00118db:	0f 84 48 01 00 00    	je     c0011a29 <VgaText::receiveKey(unsigned char)+0x165>
c00118e1:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c00118e7:	83 fd 08             	cmp    ebp,0x8
c00118ea:	75 6a                	jne    c0011956 <VgaText::receiveKey(unsigned char)+0x92>
c00118ec:	83 ec 0c             	sub    esp,0xc
c00118ef:	56                   	push   esi
c00118f0:	e8 8b ec fe ff       	call   c0000580 <strlen>
c00118f5:	83 c4 10             	add    esp,0x10
c00118f8:	85 c0                	test   eax,eax
c00118fa:	0f 84 ef 00 00 00    	je     c00119ef <VgaText::receiveKey(unsigned char)+0x12b>
c0011900:	50                   	push   eax
c0011901:	50                   	push   eax
c0011902:	6a 08                	push   0x8
c0011904:	53                   	push   ebx
c0011905:	e8 40 fb ff ff       	call   c001144a <VgaText::putchar(char)>
c001190a:	89 34 24             	mov    DWORD PTR [esp],esi
c001190d:	e8 6e ec fe ff       	call   c0000580 <strlen>
c0011912:	83 c4 10             	add    esp,0x10
c0011915:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c001191d:	83 fa 1f             	cmp    edx,0x1f
c0011920:	89 d0                	mov    eax,edx
c0011922:	7f 1c                	jg     c0011940 <VgaText::receiveKey(unsigned char)+0x7c>
c0011924:	83 e8 08             	sub    eax,0x8
c0011927:	3c 02                	cmp    al,0x2
c0011929:	76 15                	jbe    c0011940 <VgaText::receiveKey(unsigned char)+0x7c>
c001192b:	83 fa 0d             	cmp    edx,0xd
c001192e:	74 10                	je     c0011940 <VgaText::receiveKey(unsigned char)+0x7c>
c0011930:	57                   	push   edi
c0011931:	57                   	push   edi
c0011932:	68 4e 2d 02 c0       	push   0xc0022d4e
c0011937:	53                   	push   ebx
c0011938:	e8 3b fc ff ff       	call   c0011578 <VgaText::puts(char const*)>
c001193d:	83 c4 10             	add    esp,0x10
c0011940:	83 ec 0c             	sub    esp,0xc
c0011943:	56                   	push   esi
c0011944:	e8 37 ec fe ff       	call   c0000580 <strlen>
c0011949:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0011951:	e9 96 00 00 00       	jmp    c00119ec <VgaText::receiveKey(unsigned char)+0x128>
c0011956:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c001195c:	83 ec 0c             	sub    esp,0xc
c001195f:	50                   	push   eax
c0011960:	e8 1b ec fe ff       	call   c0000580 <strlen>
c0011965:	89 34 24             	mov    DWORD PTR [esp],esi
c0011968:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001196c:	e8 0f ec fe ff       	call   c0000580 <strlen>
c0011971:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011975:	83 c4 10             	add    esp,0x10
c0011978:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c001197c:	3d 80 00 00 00       	cmp    eax,0x80
c0011981:	0f 87 a2 00 00 00    	ja     c0011a29 <VgaText::receiveKey(unsigned char)+0x165>
c0011987:	8d 47 ff             	lea    eax,[edi-0x1]
c001198a:	3c 1e                	cmp    al,0x1e
c001198c:	77 35                	ja     c00119c3 <VgaText::receiveKey(unsigned char)+0xff>
c001198e:	8d 47 f7             	lea    eax,[edi-0x9]
c0011991:	3c 01                	cmp    al,0x1
c0011993:	76 2e                	jbe    c00119c3 <VgaText::receiveKey(unsigned char)+0xff>
c0011995:	83 fd 0d             	cmp    ebp,0xd
c0011998:	74 29                	je     c00119c3 <VgaText::receiveKey(unsigned char)+0xff>
c001199a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001199d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00119a0:	68 54 2d 02 c0       	push   0xc0022d54
c00119a5:	53                   	push   ebx
c00119a6:	e8 3f fc ff ff       	call   c00115ea <VgaText::puts(char const*, VgaColour, VgaColour)>
c00119ab:	8d 47 40             	lea    eax,[edi+0x40]
c00119ae:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00119b1:	0f b6 c0             	movzx  eax,al
c00119b4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00119b7:	50                   	push   eax
c00119b8:	53                   	push   ebx
c00119b9:	e8 bc f9 ff ff       	call   c001137a <VgaText::putchar(char, VgaColour, VgaColour)>
c00119be:	83 c4 20             	add    esp,0x20
c00119c1:	eb 11                	jmp    c00119d4 <VgaText::receiveKey(unsigned char)+0x110>
c00119c3:	51                   	push   ecx
c00119c4:	89 f8                	mov    eax,edi
c00119c6:	51                   	push   ecx
c00119c7:	0f be c0             	movsx  eax,al
c00119ca:	50                   	push   eax
c00119cb:	53                   	push   ebx
c00119cc:	e8 79 fa ff ff       	call   c001144a <VgaText::putchar(char)>
c00119d1:	83 c4 10             	add    esp,0x10
c00119d4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00119d9:	89 f8                	mov    eax,edi
c00119db:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00119df:	52                   	push   edx
c00119e0:	52                   	push   edx
c00119e1:	8d 44 24 26          	lea    eax,[esp+0x26]
c00119e5:	50                   	push   eax
c00119e6:	56                   	push   esi
c00119e7:	e8 84 ee fe ff       	call   c0000870 <strcat>
c00119ec:	83 c4 10             	add    esp,0x10
c00119ef:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c00119f6:	75 0f                	jne    c0011a07 <VgaText::receiveKey(unsigned char)+0x143>
c00119f8:	83 fd 1c             	cmp    ebp,0x1c
c00119fb:	77 2c                	ja     c0011a29 <VgaText::receiveKey(unsigned char)+0x165>
c00119fd:	b8 08 04 00 10       	mov    eax,0x10000408
c0011a02:	0f a3 e8             	bt     eax,ebp
c0011a05:	73 22                	jae    c0011a29 <VgaText::receiveKey(unsigned char)+0x165>
c0011a07:	50                   	push   eax
c0011a08:	81 c3 02 01 00 00    	add    ebx,0x102
c0011a0e:	50                   	push   eax
c0011a0f:	56                   	push   esi
c0011a10:	53                   	push   ebx
c0011a11:	e8 5a ee fe ff       	call   c0000870 <strcat>
c0011a16:	83 c4 0c             	add    esp,0xc
c0011a19:	68 80 00 00 00       	push   0x80
c0011a1e:	6a 00                	push   0x0
c0011a20:	56                   	push   esi
c0011a21:	e8 ca ea fe ff       	call   c00004f0 <memset>
c0011a26:	83 c4 10             	add    esp,0x10
c0011a29:	83 c4 2c             	add    esp,0x2c
c0011a2c:	5b                   	pop    ebx
c0011a2d:	5e                   	pop    esi
c0011a2e:	5f                   	pop    edi
c0011a2f:	5d                   	pop    ebp
c0011a30:	c3                   	ret    
c0011a31:	90                   	nop

c0011a32 <VgaText::doUpdate()>:
c0011a32:	c3                   	ret    
c0011a33:	90                   	nop

c0011a34 <TSS::TSS()>:
c0011a34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a38:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011a3f:	90                   	nop
c0011a40:	c3                   	ret    
c0011a41:	90                   	nop
c0011a42:	66 90                	xchg   ax,ax

c0011a44 <TSS::setESP(unsigned long)>:
c0011a44:	55                   	push   ebp
c0011a45:	89 e5                	mov    ebp,esp
c0011a47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a4d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011a50:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011a53:	90                   	nop
c0011a54:	5d                   	pop    ebp
c0011a55:	c3                   	ret    
c0011a56:	66 90                	xchg   ax,ax

c0011a58 <TSS::flush()>:
c0011a58:	55                   	push   ebp
c0011a59:	89 e5                	mov    ebp,esp
c0011a5b:	83 ec 10             	sub    esp,0x10
c0011a5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a61:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a63:	83 c8 03             	or     eax,0x3
c0011a66:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011a6a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011a6e:	66 89 d0             	mov    ax,dx
c0011a71:	0f 00 d8             	ltr    ax
c0011a74:	90                   	nop
c0011a75:	c9                   	leave  
c0011a76:	c3                   	ret    
c0011a77:	90                   	nop

c0011a78 <TSS::setup(unsigned long, unsigned long)>:
c0011a78:	55                   	push   ebp
c0011a79:	89 e5                	mov    ebp,esp
c0011a7b:	83 ec 18             	sub    esp,0x18
c0011a7e:	83 ec 0c             	sub    esp,0xc
c0011a81:	6a 68                	push   0x68
c0011a83:	e8 04 d0 ff ff       	call   c000ea8c <malloc>
c0011a88:	83 c4 10             	add    esp,0x10
c0011a8b:	89 c2                	mov    edx,eax
c0011a8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a90:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011a93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a99:	83 ec 08             	sub    esp,0x8
c0011a9c:	50                   	push   eax
c0011a9d:	68 78 2d 02 c0       	push   0xc0022d78
c0011aa2:	e8 a7 54 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011aa7:	83 c4 10             	add    esp,0x10
c0011aaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011ab0:	83 ec 04             	sub    esp,0x4
c0011ab3:	6a 68                	push   0x68
c0011ab5:	6a 00                	push   0x0
c0011ab7:	50                   	push   eax
c0011ab8:	e8 33 ea fe ff       	call   c00004f0 <memset>
c0011abd:	83 c4 10             	add    esp,0x10
c0011ac0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ac3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011ac6:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011acc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011acf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011ad2:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011ad8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011adb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011ade:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011ae1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011ae4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ae7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011aea:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011af0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011af3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011af6:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011afc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b02:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011b08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b0b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b0e:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011b14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b1a:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011b20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b26:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011b2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b2f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b32:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011b35:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011b38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b3b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b3e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011b41:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011b44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b47:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b4a:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011b51:	83 ec 0c             	sub    esp,0xc
c0011b54:	68 8f 2d 02 c0       	push   0xc0022d8f
c0011b59:	e8 f0 53 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011b5e:	83 c4 10             	add    esp,0x10
c0011b61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b67:	0f 20 da             	mov    edx,cr3
c0011b6a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011b6d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011b70:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011b73:	83 ec 0c             	sub    esp,0xc
c0011b76:	68 92 2d 02 c0       	push   0xc0022d92
c0011b7b:	e8 ce 53 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011b80:	83 c4 10             	add    esp,0x10
c0011b83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b89:	83 ec 08             	sub    esp,0x8
c0011b8c:	50                   	push   eax
c0011b8d:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011b90:	50                   	push   eax
c0011b91:	e8 48 c6 ff ff       	call   c000e1de <GDTEntry::setBase(unsigned int)>
c0011b96:	83 c4 10             	add    esp,0x10
c0011b99:	83 ec 08             	sub    esp,0x8
c0011b9c:	6a 68                	push   0x68
c0011b9e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011ba1:	50                   	push   eax
c0011ba2:	e8 53 c6 ff ff       	call   c000e1fa <GDTEntry::setLimit(unsigned int)>
c0011ba7:	83 c4 10             	add    esp,0x10
c0011baa:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011bae:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011bb1:	83 e0 0f             	and    eax,0xf
c0011bb4:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011bb7:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011bba:	83 c8 40             	or     eax,0x40
c0011bbd:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011bc0:	83 ec 0c             	sub    esp,0xc
c0011bc3:	68 95 2d 02 c0       	push   0xc0022d95
c0011bc8:	e8 81 53 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011bcd:	83 c4 10             	add    esp,0x10
c0011bd0:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0011bd5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011bdb:	83 ec 08             	sub    esp,0x8
c0011bde:	50                   	push   eax
c0011bdf:	68 98 2d 02 c0       	push   0xc0022d98
c0011be4:	e8 65 53 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011be9:	83 c4 10             	add    esp,0x10
c0011bec:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0011bf1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011bf7:	05 64 01 00 00       	add    eax,0x164
c0011bfc:	83 ec 04             	sub    esp,0x4
c0011bff:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011c02:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011c05:	50                   	push   eax
c0011c06:	e8 23 c6 ff ff       	call   c000e22e <GDT::addEntry(GDTEntry)>
c0011c0b:	83 c4 10             	add    esp,0x10
c0011c0e:	89 c2                	mov    edx,eax
c0011c10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c13:	89 10                	mov    DWORD PTR [eax],edx
c0011c15:	83 ec 0c             	sub    esp,0xc
c0011c18:	68 ad 2d 02 c0       	push   0xc0022dad
c0011c1d:	e8 2c 53 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011c22:	83 c4 10             	add    esp,0x10
c0011c25:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0011c2a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c30:	05 64 01 00 00       	add    eax,0x164
c0011c35:	83 ec 0c             	sub    esp,0xc
c0011c38:	50                   	push   eax
c0011c39:	e8 1a c6 ff ff       	call   c000e258 <GDT::flush()>
c0011c3e:	83 c4 10             	add    esp,0x10
c0011c41:	83 ec 0c             	sub    esp,0xc
c0011c44:	68 b0 2d 02 c0       	push   0xc0022db0
c0011c49:	e8 00 53 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011c4e:	83 c4 10             	add    esp,0x10
c0011c51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c54:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c56:	c9                   	leave  
c0011c57:	c3                   	ret    

c0011c58 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011c58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c5c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011c60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c63:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011c68:	75 08                	jne    c0011c72 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011c6a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011c70:	eb 38                	jmp    c0011caa <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011c72:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011c77:	75 17                	jne    c0011c90 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011c79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c7e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c81:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011c87:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c89:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c8d:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011c90:	89 c1                	mov    ecx,eax
c0011c92:	83 e1 fd             	and    ecx,0xfffffffd
c0011c95:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011c9b:	74 cd                	je     c0011c6a <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011c9d:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011ca2:	83 e0 ef             	and    eax,0xffffffef
c0011ca5:	83 f8 08             	cmp    eax,0x8
c0011ca8:	76 c0                	jbe    c0011c6a <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011caa:	31 c0                	xor    eax,eax
c0011cac:	c3                   	ret    
c0011cad:	90                   	nop

c0011cae <ReservedFilename::isAtty()>:
c0011cae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cb2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011cb5:	31 c0                	xor    eax,eax
c0011cb7:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011cbd:	74 09                	je     c0011cc8 <ReservedFilename::isAtty()+0x1a>
c0011cbf:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011cc5:	0f 94 c0             	sete   al
c0011cc8:	c3                   	ret    
c0011cc9:	90                   	nop

c0011cca <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011cca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cce:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011cd2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011cd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011cd9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011cde:	75 08                	jne    c0011ce8 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011ce0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011ce6:	eb 3d                	jmp    c0011d25 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011ce8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011ced:	75 17                	jne    c0011d06 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011cef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cf4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cf7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011cfd:	8b 10                	mov    edx,DWORD PTR [eax]
c0011cff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011d03:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011d06:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011d0b:	75 04                	jne    c0011d11 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011d0d:	89 0a                	mov    DWORD PTR [edx],ecx
c0011d0f:	eb 14                	jmp    c0011d25 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011d11:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011d16:	74 c8                	je     c0011ce0 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011d18:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011d1d:	83 e0 ef             	and    eax,0xffffffef
c0011d20:	83 f8 08             	cmp    eax,0x8
c0011d23:	76 bb                	jbe    c0011ce0 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011d25:	31 c0                	xor    eax,eax
c0011d27:	c3                   	ret    

c0011d28 <UnixFile::getFileDescriptor()>:
c0011d28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011d2f:	c3                   	ret    

c0011d30 <UnixFile::UnixFile(int)>:
c0011d30:	53                   	push   ebx
c0011d31:	83 ec 28             	sub    esp,0x28
c0011d34:	ba 00 2e 02 c0       	mov    edx,0xc0022e00
c0011d39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d3d:	89 10                	mov    DWORD PTR [eax],edx
c0011d3f:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011d47:	0f 8f 90 01 00 00    	jg     c0011edd <UnixFile::UnixFile(int)+0x1ad>
c0011d4d:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0011d52:	8d 50 01             	lea    edx,[eax+0x1]
c0011d55:	89 15 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,edx
c0011d5b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011d5f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011d62:	83 ec 08             	sub    esp,0x8
c0011d65:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011d69:	68 b8 ce 02 c0       	push   0xc002ceb8
c0011d6e:	e8 2b ed 00 00       	call   c0020a9e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011d73:	83 c4 10             	add    esp,0x10
c0011d76:	a0 b4 ce 02 c0       	mov    al,ds:0xc002ceb4
c0011d7b:	83 f0 01             	xor    eax,0x1
c0011d7e:	0f b6 c0             	movzx  eax,al
c0011d81:	85 c0                	test   eax,eax
c0011d83:	0f 84 55 01 00 00    	je     c0011ede <UnixFile::UnixFile(int)+0x1ae>
c0011d89:	c6 05 b4 ce 02 c0 01 	mov    BYTE PTR ds:0xc002ceb4,0x1
c0011d90:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011d98:	83 ec 0c             	sub    esp,0xc
c0011d9b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011d9f:	e8 e8 cc ff ff       	call   c000ea8c <malloc>
c0011da4:	83 c4 10             	add    esp,0x10
c0011da7:	89 c3                	mov    ebx,eax
c0011da9:	83 ec 08             	sub    esp,0x8
c0011dac:	68 03 ff ff 0f       	push   0xfffff03
c0011db1:	53                   	push   ebx
c0011db2:	e8 2d 01 00 00       	call   c0011ee4 <ReservedFilename::ReservedFilename(int)>
c0011db7:	83 c4 10             	add    esp,0x10
c0011dba:	89 1d ac ce 02 c0    	mov    DWORD PTR ds:0xc002ceac,ebx
c0011dc0:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011dc8:	83 ec 0c             	sub    esp,0xc
c0011dcb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011dcf:	e8 b8 cc ff ff       	call   c000ea8c <malloc>
c0011dd4:	83 c4 10             	add    esp,0x10
c0011dd7:	89 c3                	mov    ebx,eax
c0011dd9:	83 ec 08             	sub    esp,0x8
c0011ddc:	68 01 ff ff 0f       	push   0xfffff01
c0011de1:	53                   	push   ebx
c0011de2:	e8 fd 00 00 00       	call   c0011ee4 <ReservedFilename::ReservedFilename(int)>
c0011de7:	83 c4 10             	add    esp,0x10
c0011dea:	89 1d b0 ce 02 c0    	mov    DWORD PTR ds:0xc002ceb0,ebx
c0011df0:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011df8:	83 ec 0c             	sub    esp,0xc
c0011dfb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011dff:	e8 88 cc ff ff       	call   c000ea8c <malloc>
c0011e04:	83 c4 10             	add    esp,0x10
c0011e07:	89 c3                	mov    ebx,eax
c0011e09:	83 ec 08             	sub    esp,0x8
c0011e0c:	68 00 ff ff 0f       	push   0xfffff00
c0011e11:	53                   	push   ebx
c0011e12:	e8 cd 00 00 00       	call   c0011ee4 <ReservedFilename::ReservedFilename(int)>
c0011e17:	83 c4 10             	add    esp,0x10
c0011e1a:	89 1d a4 ce 02 c0    	mov    DWORD PTR ds:0xc002cea4,ebx
c0011e20:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011e28:	83 ec 0c             	sub    esp,0xc
c0011e2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011e2f:	e8 58 cc ff ff       	call   c000ea8c <malloc>
c0011e34:	83 c4 10             	add    esp,0x10
c0011e37:	89 c3                	mov    ebx,eax
c0011e39:	83 ec 08             	sub    esp,0x8
c0011e3c:	68 02 ff ff 0f       	push   0xfffff02
c0011e41:	53                   	push   ebx
c0011e42:	e8 9d 00 00 00       	call   c0011ee4 <ReservedFilename::ReservedFilename(int)>
c0011e47:	83 c4 10             	add    esp,0x10
c0011e4a:	89 1d a8 ce 02 c0    	mov    DWORD PTR ds:0xc002cea8,ebx
c0011e50:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e58:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011e5d:	7f 7f                	jg     c0011ede <UnixFile::UnixFile(int)+0x1ae>
c0011e5f:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011e67:	83 ec 0c             	sub    esp,0xc
c0011e6a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011e6e:	e8 19 cc ff ff       	call   c000ea8c <malloc>
c0011e73:	83 c4 10             	add    esp,0x10
c0011e76:	89 c3                	mov    ebx,eax
c0011e78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011e7c:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011e81:	83 ec 08             	sub    esp,0x8
c0011e84:	50                   	push   eax
c0011e85:	53                   	push   ebx
c0011e86:	e8 59 00 00 00       	call   c0011ee4 <ReservedFilename::ReservedFilename(int)>
c0011e8b:	83 c4 10             	add    esp,0x10
c0011e8e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011e92:	89 1c 85 80 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3180],ebx
c0011e99:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011ea1:	83 ec 0c             	sub    esp,0xc
c0011ea4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011ea8:	e8 df cb ff ff       	call   c000ea8c <malloc>
c0011ead:	83 c4 10             	add    esp,0x10
c0011eb0:	89 c3                	mov    ebx,eax
c0011eb2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011eb6:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011ebb:	83 ec 08             	sub    esp,0x8
c0011ebe:	50                   	push   eax
c0011ebf:	53                   	push   ebx
c0011ec0:	e8 1f 00 00 00       	call   c0011ee4 <ReservedFilename::ReservedFilename(int)>
c0011ec5:	83 c4 10             	add    esp,0x10
c0011ec8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011ecc:	89 1c 85 40 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd31c0],ebx
c0011ed3:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0011ed8:	e9 7b ff ff ff       	jmp    c0011e58 <UnixFile::UnixFile(int)+0x128>
c0011edd:	90                   	nop
c0011ede:	83 c4 28             	add    esp,0x28
c0011ee1:	5b                   	pop    ebx
c0011ee2:	c3                   	ret    
c0011ee3:	90                   	nop

c0011ee4 <ReservedFilename::ReservedFilename(int)>:
c0011ee4:	83 ec 0c             	sub    esp,0xc
c0011ee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011eeb:	83 ec 08             	sub    esp,0x8
c0011eee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ef2:	50                   	push   eax
c0011ef3:	e8 38 fe ff ff       	call   c0011d30 <UnixFile::UnixFile(int)>
c0011ef8:	83 c4 10             	add    esp,0x10
c0011efb:	ba 1c 2e 02 c0       	mov    edx,0xc0022e1c
c0011f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f04:	89 10                	mov    DWORD PTR [eax],edx
c0011f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011f0e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011f11:	90                   	nop
c0011f12:	83 c4 0c             	add    esp,0xc
c0011f15:	c3                   	ret    

c0011f16 <UnixFile::~UnixFile()>:
c0011f16:	83 ec 1c             	sub    esp,0x1c
c0011f19:	ba 00 2e 02 c0       	mov    edx,0xc0022e00
c0011f1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f22:	89 10                	mov    DWORD PTR [eax],edx
c0011f24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011f2b:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011f30:	7f 76                	jg     c0011fa8 <UnixFile::~UnixFile()+0x92>
c0011f32:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f3a:	83 ec 0c             	sub    esp,0xc
c0011f3d:	68 b8 ce 02 c0       	push   0xc002ceb8
c0011f42:	e8 2b ec 00 00       	call   c0020b72 <LinkedList<UnixFile>::getFirstElement()>
c0011f47:	83 c4 10             	add    esp,0x10
c0011f4a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011f4e:	83 ec 0c             	sub    esp,0xc
c0011f51:	68 b8 ce 02 c0       	push   0xc002ceb8
c0011f56:	e8 1f ec 00 00       	call   c0020b7a <LinkedList<UnixFile>::removeFirst()>
c0011f5b:	83 c4 10             	add    esp,0x10
c0011f5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011f62:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011f66:	74 43                	je     c0011fab <UnixFile::~UnixFile()+0x95>
c0011f68:	83 ec 08             	sub    esp,0x8
c0011f6b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011f6f:	68 b8 ce 02 c0       	push   0xc002ceb8
c0011f74:	e8 25 eb 00 00       	call   c0020a9e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011f79:	83 c4 10             	add    esp,0x10
c0011f7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f80:	8d 50 01             	lea    edx,[eax+0x1]
c0011f83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011f87:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0011f8c:	0f 94 c0             	sete   al
c0011f8f:	0f b6 c0             	movzx  eax,al
c0011f92:	85 c0                	test   eax,eax
c0011f94:	74 a4                	je     c0011f3a <UnixFile::~UnixFile()+0x24>
c0011f96:	83 ec 0c             	sub    esp,0xc
c0011f99:	68 b4 2d 02 c0       	push   0xc0022db4
c0011f9e:	e8 2f ce ff ff       	call   c000edd2 <KePanic(char const*)>
c0011fa3:	83 c4 10             	add    esp,0x10
c0011fa6:	eb 92                	jmp    c0011f3a <UnixFile::~UnixFile()+0x24>
c0011fa8:	90                   	nop
c0011fa9:	eb 01                	jmp    c0011fac <UnixFile::~UnixFile()+0x96>
c0011fab:	90                   	nop
c0011fac:	90                   	nop
c0011fad:	83 c4 1c             	add    esp,0x1c
c0011fb0:	c3                   	ret    
c0011fb1:	90                   	nop

c0011fb2 <UnixFile::~UnixFile()>:
c0011fb2:	83 ec 0c             	sub    esp,0xc
c0011fb5:	83 ec 0c             	sub    esp,0xc
c0011fb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011fbc:	e8 55 ff ff ff       	call   c0011f16 <UnixFile::~UnixFile()>
c0011fc1:	83 c4 10             	add    esp,0x10
c0011fc4:	83 ec 08             	sub    esp,0x8
c0011fc7:	6a 0c                	push   0xc
c0011fc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011fcd:	e8 35 a8 ff ff       	call   c000c807 <operator delete(void*, unsigned long)>
c0011fd2:	83 c4 10             	add    esp,0x10
c0011fd5:	83 c4 0c             	add    esp,0xc
c0011fd8:	c3                   	ret    
c0011fd9:	90                   	nop

c0011fda <ReservedFilename::~ReservedFilename()>:
c0011fda:	83 ec 0c             	sub    esp,0xc
c0011fdd:	ba 1c 2e 02 c0       	mov    edx,0xc0022e1c
c0011fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fe6:	89 10                	mov    DWORD PTR [eax],edx
c0011fe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fec:	83 ec 0c             	sub    esp,0xc
c0011fef:	50                   	push   eax
c0011ff0:	e8 21 ff ff ff       	call   c0011f16 <UnixFile::~UnixFile()>
c0011ff5:	83 c4 10             	add    esp,0x10
c0011ff8:	90                   	nop
c0011ff9:	83 c4 0c             	add    esp,0xc
c0011ffc:	c3                   	ret    
c0011ffd:	90                   	nop

c0011ffe <ReservedFilename::~ReservedFilename()>:
c0011ffe:	83 ec 0c             	sub    esp,0xc
c0012001:	83 ec 0c             	sub    esp,0xc
c0012004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012008:	e8 cd ff ff ff       	call   c0011fda <ReservedFilename::~ReservedFilename()>
c001200d:	83 c4 10             	add    esp,0x10
c0012010:	83 ec 08             	sub    esp,0x8
c0012013:	6a 0c                	push   0xc
c0012015:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012019:	e8 e9 a7 ff ff       	call   c000c807 <operator delete(void*, unsigned long)>
c001201e:	83 c4 10             	add    esp,0x10
c0012021:	83 c4 0c             	add    esp,0xc
c0012024:	c3                   	ret    

c0012025 <KeGetFileFromDescriptor(int)>:
c0012025:	53                   	push   ebx
c0012026:	83 ec 10             	sub    esp,0x10
c0012029:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001202d:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0012033:	53                   	push   ebx
c0012034:	68 d4 2d 02 c0       	push   0xc0022dd4
c0012039:	e8 10 4f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001203e:	83 c4 10             	add    esp,0x10
c0012041:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0012047:	7f 30                	jg     c0012079 <KeGetFileFromDescriptor(int)+0x54>
c0012049:	83 ec 0c             	sub    esp,0xc
c001204c:	68 b8 ce 02 c0       	push   0xc002ceb8
c0012051:	e8 1c eb 00 00       	call   c0020b72 <LinkedList<UnixFile>::getFirstElement()>
c0012056:	8d 50 ff             	lea    edx,[eax-0x1]
c0012059:	83 c4 10             	add    esp,0x10
c001205c:	83 fa fd             	cmp    edx,0xfffffffd
c001205f:	76 04                	jbe    c0012065 <KeGetFileFromDescriptor(int)+0x40>
c0012061:	31 c0                	xor    eax,eax
c0012063:	eb 6e                	jmp    c00120d3 <KeGetFileFromDescriptor(int)+0xae>
c0012065:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0012068:	74 69                	je     c00120d3 <KeGetFileFromDescriptor(int)+0xae>
c001206a:	52                   	push   edx
c001206b:	52                   	push   edx
c001206c:	50                   	push   eax
c001206d:	68 b8 ce 02 c0       	push   0xc002ceb8
c0012072:	e8 a5 eb 00 00       	call   c0020c1c <LinkedList<UnixFile>::getNext(UnixFile*)>
c0012077:	eb dd                	jmp    c0012056 <KeGetFileFromDescriptor(int)+0x31>
c0012079:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001207f:	a1 ac ce 02 c0       	mov    eax,ds:0xc002ceac
c0012084:	74 4d                	je     c00120d3 <KeGetFileFromDescriptor(int)+0xae>
c0012086:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c001208c:	a1 b0 ce 02 c0       	mov    eax,ds:0xc002ceb0
c0012091:	74 40                	je     c00120d3 <KeGetFileFromDescriptor(int)+0xae>
c0012093:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0012099:	a1 a8 ce 02 c0       	mov    eax,ds:0xc002cea8
c001209e:	74 33                	je     c00120d3 <KeGetFileFromDescriptor(int)+0xae>
c00120a0:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00120a6:	a1 a4 ce 02 c0       	mov    eax,ds:0xc002cea4
c00120ab:	74 26                	je     c00120d3 <KeGetFileFromDescriptor(int)+0xae>
c00120ad:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00120b3:	83 f8 08             	cmp    eax,0x8
c00120b6:	77 09                	ja     c00120c1 <KeGetFileFromDescriptor(int)+0x9c>
c00120b8:	8b 04 85 80 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3180]
c00120bf:	eb 12                	jmp    c00120d3 <KeGetFileFromDescriptor(int)+0xae>
c00120c1:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00120c7:	83 fb 08             	cmp    ebx,0x8
c00120ca:	77 95                	ja     c0012061 <KeGetFileFromDescriptor(int)+0x3c>
c00120cc:	8b 04 9d 40 ce 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd31c0]
c00120d3:	83 c4 08             	add    esp,0x8
c00120d6:	5b                   	pop    ebx
c00120d7:	c3                   	ret    

c00120d8 <__static_initialization_and_destruction_0(int, int)>:
c00120d8:	83 ec 0c             	sub    esp,0xc
c00120db:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00120e0:	75 34                	jne    c0012116 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00120e2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00120ea:	75 2a                	jne    c0012116 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00120ec:	83 ec 0c             	sub    esp,0xc
c00120ef:	68 b8 ce 02 c0       	push   0xc002ceb8
c00120f4:	e8 63 e9 00 00       	call   c0020a5c <LinkedList<UnixFile>::LinkedList()>
c00120f9:	83 c4 10             	add    esp,0x10
c00120fc:	83 ec 04             	sub    esp,0x4
c00120ff:	68 60 49 02 c0       	push   0xc0024960
c0012104:	68 b8 ce 02 c0       	push   0xc002ceb8
c0012109:	68 5a 0a 02 c0       	push   0xc0020a5a
c001210e:	e8 a4 a6 ff ff       	call   c000c7b7 <__cxa_atexit>
c0012113:	83 c4 10             	add    esp,0x10
c0012116:	90                   	nop
c0012117:	83 c4 0c             	add    esp,0xc
c001211a:	c3                   	ret    

c001211b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001211b:	83 ec 0c             	sub    esp,0xc
c001211e:	83 ec 08             	sub    esp,0x8
c0012121:	68 ff ff 00 00       	push   0xffff
c0012126:	6a 01                	push   0x1
c0012128:	e8 ab ff ff ff       	call   c00120d8 <__static_initialization_and_destruction_0(int, int)>
c001212d:	83 c4 10             	add    esp,0x10
c0012130:	83 c4 0c             	add    esp,0xc
c0012133:	c3                   	ret    

c0012134 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0012134:	53                   	push   ebx
c0012135:	8b 15 08 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025108
c001213b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001213f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012143:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0012149:	89 d8                	mov    eax,ebx
c001214b:	d1 e8                	shr    eax,1
c001214d:	01 d0                	add    eax,edx
c001214f:	80 e3 01             	and    bl,0x1
c0012152:	8a 10                	mov    dl,BYTE PTR [eax]
c0012154:	75 09                	jne    c001215f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0012156:	83 e2 f0             	and    edx,0xfffffff0
c0012159:	09 ca                	or     edx,ecx
c001215b:	88 10                	mov    BYTE PTR [eax],dl
c001215d:	5b                   	pop    ebx
c001215e:	c3                   	ret    
c001215f:	0f b6 c9             	movzx  ecx,cl
c0012162:	83 e2 0f             	and    edx,0xf
c0012165:	c1 e1 04             	shl    ecx,0x4
c0012168:	09 ca                	or     edx,ecx
c001216a:	88 10                	mov    BYTE PTR [eax],dl
c001216c:	5b                   	pop    ebx
c001216d:	c3                   	ret    

c001216e <Virt::getPageState(unsigned long)>:
c001216e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012172:	8b 0d 08 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025108
c0012178:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001217e:	89 d0                	mov    eax,edx
c0012180:	d1 e8                	shr    eax,1
c0012182:	80 e2 01             	and    dl,0x1
c0012185:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0012188:	74 03                	je     c001218d <Virt::getPageState(unsigned long)+0x1f>
c001218a:	c1 e8 04             	shr    eax,0x4
c001218d:	83 e0 0f             	and    eax,0xf
c0012190:	c3                   	ret    

c0012191 <Virt::allocateKernelVirtualPages(int)>:
c0012191:	55                   	push   ebp
c0012192:	57                   	push   edi
c0012193:	56                   	push   esi
c0012194:	31 f6                	xor    esi,esi
c0012196:	53                   	push   ebx
c0012197:	31 db                	xor    ebx,ebx
c0012199:	83 ec 1c             	sub    esp,0x1c
c001219c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00121a1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00121a5:	8b 2d 04 51 02 c0    	mov    ebp,DWORD PTR ds:0xc0025104
c00121ab:	55                   	push   ebp
c00121ac:	e8 bd ff ff ff       	call   c001216e <Virt::getPageState(unsigned long)>
c00121b1:	5a                   	pop    edx
c00121b2:	84 c0                	test   al,al
c00121b4:	75 3d                	jne    c00121f3 <Virt::allocateKernelVirtualPages(int)+0x62>
c00121b6:	85 db                	test   ebx,ebx
c00121b8:	0f 44 f5             	cmove  esi,ebp
c00121bb:	83 c3 01             	add    ebx,0x1
c00121be:	39 fb                	cmp    ebx,edi
c00121c0:	74 5e                	je     c0012220 <Virt::allocateKernelVirtualPages(int)+0x8f>
c00121c2:	83 c5 01             	add    ebp,0x1
c00121c5:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c00121cb:	76 33                	jbe    c0012200 <Virt::allocateKernelVirtualPages(int)+0x6f>
c00121cd:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00121d2:	c7 05 04 51 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0025104,0xc8000
c00121dc:	75 2a                	jne    c0012208 <Virt::allocateKernelVirtualPages(int)+0x77>
c00121de:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00121e3:	bd 00 80 0c 00       	mov    ebp,0xc8000
c00121e8:	55                   	push   ebp
c00121e9:	e8 80 ff ff ff       	call   c001216e <Virt::getPageState(unsigned long)>
c00121ee:	5a                   	pop    edx
c00121ef:	84 c0                	test   al,al
c00121f1:	74 c3                	je     c00121b6 <Virt::allocateKernelVirtualPages(int)+0x25>
c00121f3:	83 c5 01             	add    ebp,0x1
c00121f6:	31 db                	xor    ebx,ebx
c00121f8:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c00121fe:	77 cd                	ja     c00121cd <Virt::allocateKernelVirtualPages(int)+0x3c>
c0012200:	89 2d 04 51 02 c0    	mov    DWORD PTR ds:0xc0025104,ebp
c0012206:	eb a3                	jmp    c00121ab <Virt::allocateKernelVirtualPages(int)+0x1a>
c0012208:	83 ec 0c             	sub    esp,0xc
c001220b:	68 30 2e 02 c0       	push   0xc0022e30
c0012210:	e8 bd cb ff ff       	call   c000edd2 <KePanic(char const*)>
c0012215:	8b 2d 04 51 02 c0    	mov    ebp,DWORD PTR ds:0xc0025104
c001221b:	83 c4 10             	add    esp,0x10
c001221e:	eb 8b                	jmp    c00121ab <Virt::allocateKernelVirtualPages(int)+0x1a>
c0012220:	89 35 04 51 02 c0    	mov    DWORD PTR ds:0xc0025104,esi
c0012226:	83 fb 01             	cmp    ebx,0x1
c0012229:	74 63                	je     c001228e <Virt::allocateKernelVirtualPages(int)+0xfd>
c001222b:	85 ff                	test   edi,edi
c001222d:	74 41                	je     c0012270 <Virt::allocateKernelVirtualPages(int)+0xdf>
c001222f:	89 f0                	mov    eax,esi
c0012231:	31 db                	xor    ebx,ebx
c0012233:	8d 6f ff             	lea    ebp,[edi-0x1]
c0012236:	eb 16                	jmp    c001224e <Virt::allocateKernelVirtualPages(int)+0xbd>
c0012238:	6a 01                	push   0x1
c001223a:	83 c3 01             	add    ebx,0x1
c001223d:	50                   	push   eax
c001223e:	e8 f1 fe ff ff       	call   c0012134 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012243:	39 fb                	cmp    ebx,edi
c0012245:	58                   	pop    eax
c0012246:	5a                   	pop    edx
c0012247:	74 27                	je     c0012270 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0012249:	a1 04 51 02 c0       	mov    eax,ds:0xc0025104
c001224e:	8d 50 01             	lea    edx,[eax+0x1]
c0012251:	85 db                	test   ebx,ebx
c0012253:	89 15 04 51 02 c0    	mov    DWORD PTR ds:0xc0025104,edx
c0012259:	74 22                	je     c001227d <Virt::allocateKernelVirtualPages(int)+0xec>
c001225b:	39 dd                	cmp    ebp,ebx
c001225d:	75 d9                	jne    c0012238 <Virt::allocateKernelVirtualPages(int)+0xa7>
c001225f:	6a 03                	push   0x3
c0012261:	83 c3 01             	add    ebx,0x1
c0012264:	50                   	push   eax
c0012265:	e8 ca fe ff ff       	call   c0012134 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001226a:	39 fb                	cmp    ebx,edi
c001226c:	59                   	pop    ecx
c001226d:	58                   	pop    eax
c001226e:	75 d9                	jne    c0012249 <Virt::allocateKernelVirtualPages(int)+0xb8>
c0012270:	83 c4 1c             	add    esp,0x1c
c0012273:	89 f0                	mov    eax,esi
c0012275:	5b                   	pop    ebx
c0012276:	c1 e0 0c             	shl    eax,0xc
c0012279:	5e                   	pop    esi
c001227a:	5f                   	pop    edi
c001227b:	5d                   	pop    ebp
c001227c:	c3                   	ret    
c001227d:	6a 02                	push   0x2
c001227f:	bb 01 00 00 00       	mov    ebx,0x1
c0012284:	50                   	push   eax
c0012285:	e8 aa fe ff ff       	call   c0012134 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001228a:	58                   	pop    eax
c001228b:	5a                   	pop    edx
c001228c:	eb bb                	jmp    c0012249 <Virt::allocateKernelVirtualPages(int)+0xb8>
c001228e:	6a 04                	push   0x4
c0012290:	56                   	push   esi
c0012291:	8d 46 01             	lea    eax,[esi+0x1]
c0012294:	a3 04 51 02 c0       	mov    ds:0xc0025104,eax
c0012299:	e8 96 fe ff ff       	call   c0012134 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001229e:	89 f0                	mov    eax,esi
c00122a0:	59                   	pop    ecx
c00122a1:	c1 e0 0c             	shl    eax,0xc
c00122a4:	5b                   	pop    ebx
c00122a5:	83 c4 1c             	add    esp,0x1c
c00122a8:	5b                   	pop    ebx
c00122a9:	5e                   	pop    esi
c00122aa:	5f                   	pop    edi
c00122ab:	5d                   	pop    ebp
c00122ac:	c3                   	ret    

c00122ad <Virt::freeSwapfilePage(unsigned long)>:
c00122ad:	53                   	push   ebx
c00122ae:	8b 15 cc ce 02 c0    	mov    edx,DWORD PTR ds:0xc002cecc
c00122b4:	b8 01 00 00 00       	mov    eax,0x1
c00122b9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00122bd:	d3 e0                	shl    eax,cl
c00122bf:	89 cb                	mov    ebx,ecx
c00122c1:	c1 eb 05             	shr    ebx,0x5
c00122c4:	f7 d0                	not    eax
c00122c6:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c00122c9:	21 c1                	and    ecx,eax
c00122cb:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c00122ce:	5b                   	pop    ebx
c00122cf:	c3                   	ret    

c00122d0 <Virt::swapIDToSector(unsigned long)>:
c00122d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122d4:	8b 15 0c 51 02 c0    	mov    edx,DWORD PTR ds:0xc002510c
c00122da:	8b 0d 14 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025114
c00122e0:	0f af c2             	imul   eax,edx
c00122e3:	01 c8                	add    eax,ecx
c00122e5:	c3                   	ret    

c00122e6 <Virt::allocateSwapfilePage()>:
c00122e6:	55                   	push   ebp
c00122e7:	31 d2                	xor    edx,edx
c00122e9:	57                   	push   edi
c00122ea:	56                   	push   esi
c00122eb:	53                   	push   ebx
c00122ec:	83 ec 0c             	sub    esp,0xc
c00122ef:	8b 1d 10 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025110
c00122f5:	8b 0d 0c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002510c
c00122fb:	89 d8                	mov    eax,ebx
c00122fd:	f7 f1                	div    ecx
c00122ff:	39 cb                	cmp    ebx,ecx
c0012301:	72 2f                	jb     c0012332 <Virt::allocateSwapfilePage()+0x4c>
c0012303:	8b 35 cc ce 02 c0    	mov    esi,DWORD PTR ds:0xc002cecc
c0012309:	8b 16                	mov    edx,DWORD PTR [esi]
c001230b:	f6 c2 01             	test   dl,0x1
c001230e:	74 3e                	je     c001234e <Virt::allocateSwapfilePage()+0x68>
c0012310:	31 c9                	xor    ecx,ecx
c0012312:	bf 01 00 00 00       	mov    edi,0x1
c0012317:	eb 12                	jmp    c001232b <Virt::allocateSwapfilePage()+0x45>
c0012319:	89 ca                	mov    edx,ecx
c001231b:	89 fd                	mov    ebp,edi
c001231d:	c1 ea 05             	shr    edx,0x5
c0012320:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0012323:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012325:	d3 e5                	shl    ebp,cl
c0012327:	85 ea                	test   edx,ebp
c0012329:	74 2c                	je     c0012357 <Virt::allocateSwapfilePage()+0x71>
c001232b:	83 c1 01             	add    ecx,0x1
c001232e:	39 c8                	cmp    eax,ecx
c0012330:	77 e7                	ja     c0012319 <Virt::allocateSwapfilePage()+0x33>
c0012332:	83 ec 0c             	sub    esp,0xc
c0012335:	68 b3 33 02 c0       	push   0xc00233b3
c001233a:	e8 93 ca ff ff       	call   c000edd2 <KePanic(char const*)>
c001233f:	83 c4 10             	add    esp,0x10
c0012342:	31 c9                	xor    ecx,ecx
c0012344:	83 c4 0c             	add    esp,0xc
c0012347:	89 c8                	mov    eax,ecx
c0012349:	5b                   	pop    ebx
c001234a:	5e                   	pop    esi
c001234b:	5f                   	pop    edi
c001234c:	5d                   	pop    ebp
c001234d:	c3                   	ret    
c001234e:	89 f3                	mov    ebx,esi
c0012350:	bd 01 00 00 00       	mov    ebp,0x1
c0012355:	31 c9                	xor    ecx,ecx
c0012357:	09 ea                	or     edx,ebp
c0012359:	89 c8                	mov    eax,ecx
c001235b:	89 13                	mov    DWORD PTR [ebx],edx
c001235d:	83 c4 0c             	add    esp,0xc
c0012360:	5b                   	pop    ebx
c0012361:	5e                   	pop    esi
c0012362:	5f                   	pop    edi
c0012363:	5d                   	pop    ebp
c0012364:	c3                   	ret    

c0012365 <Virt::virtualMemorySetup()>:
c0012365:	53                   	push   ebx
c0012366:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001236b:	6a 0f                	push   0xf
c001236d:	53                   	push   ebx
c001236e:	83 c3 01             	add    ebx,0x1
c0012371:	e8 be fd ff ff       	call   c0012134 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012376:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001237c:	58                   	pop    eax
c001237d:	5a                   	pop    edx
c001237e:	75 eb                	jne    c001236b <Virt::virtualMemorySetup()+0x6>
c0012380:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0012385:	6a 00                	push   0x0
c0012387:	53                   	push   ebx
c0012388:	83 c3 01             	add    ebx,0x1
c001238b:	e8 a4 fd ff ff       	call   c0012134 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012390:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0012396:	59                   	pop    ecx
c0012397:	58                   	pop    eax
c0012398:	75 eb                	jne    c0012385 <Virt::virtualMemorySetup()+0x20>
c001239a:	bb 00 00 0d 00       	mov    ebx,0xd0000
c001239f:	6a 0f                	push   0xf
c00123a1:	53                   	push   ebx
c00123a2:	83 c3 01             	add    ebx,0x1
c00123a5:	e8 8a fd ff ff       	call   c0012134 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00123aa:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00123b0:	58                   	pop    eax
c00123b1:	5a                   	pop    edx
c00123b2:	75 eb                	jne    c001239f <Virt::virtualMemorySetup()+0x3a>
c00123b4:	5b                   	pop    ebx
c00123b5:	c3                   	ret    

c00123b6 <Virt::setupPageSwapping(int)>:
c00123b6:	53                   	push   ebx
c00123b7:	83 ec 0c             	sub    esp,0xc
c00123ba:	a1 88 a7 02 c0       	mov    eax,ds:0xc002a788
c00123bf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00123c3:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00123c9:	8b 10                	mov    edx,DWORD PTR [eax]
c00123cb:	53                   	push   ebx
c00123cc:	68 ca 33 02 c0       	push   0xc00233ca
c00123d1:	50                   	push   eax
c00123d2:	ff 52 60             	call   DWORD PTR [edx+0x60]
c00123d5:	c1 e3 0b             	shl    ebx,0xb
c00123d8:	89 1d 10 51 02 c0    	mov    DWORD PTR ds:0xc0025110,ebx
c00123de:	c1 eb 08             	shr    ebx,0x8
c00123e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00123e4:	c6 05 18 51 02 c0 43 	mov    BYTE PTR ds:0xc0025118,0x43
c00123eb:	c7 05 0c 51 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002510c,0x8
c00123f5:	a3 14 51 02 c0       	mov    ds:0xc0025114,eax
c00123fa:	e8 8d c6 ff ff       	call   c000ea8c <malloc>
c00123ff:	31 d2                	xor    edx,edx
c0012401:	83 c4 0c             	add    esp,0xc
c0012404:	a3 cc ce 02 c0       	mov    ds:0xc002cecc,eax
c0012409:	89 c1                	mov    ecx,eax
c001240b:	a1 10 51 02 c0       	mov    eax,ds:0xc0025110
c0012410:	f7 35 0c 51 02 c0    	div    DWORD PTR ds:0xc002510c
c0012416:	c1 e8 05             	shr    eax,0x5
c0012419:	50                   	push   eax
c001241a:	6a 00                	push   0x0
c001241c:	51                   	push   ecx
c001241d:	e8 ce e0 fe ff       	call   c00004f0 <memset>
c0012422:	83 c4 18             	add    esp,0x18
c0012425:	5b                   	pop    ebx
c0012426:	c3                   	ret    
c0012427:	90                   	nop

c0012428 <VAS::setCPUSpecific(unsigned long)>:
c0012428:	c3                   	ret    
c0012429:	90                   	nop

c001242a <VAS::VAS(VAS*)>:
c001242a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001242e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012435:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012439:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012440:	90                   	nop
c0012441:	c3                   	ret    

c0012442 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0012442:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012446:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001244b:	89 c2                	mov    edx,eax
c001244d:	c1 ea 16             	shr    edx,0x16
c0012450:	c1 e8 0a             	shr    eax,0xa
c0012453:	83 f9 01             	cmp    ecx,0x1
c0012456:	19 c9                	sbb    ecx,ecx
c0012458:	25 fc 0f 00 00       	and    eax,0xffc
c001245d:	c1 e2 0c             	shl    edx,0xc
c0012460:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0012466:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c001246d:	01 d0                	add    eax,edx
c001246f:	c3                   	ret    

c0012470 <VAS::getPageTableEntry(unsigned long)>:
c0012470:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012474:	89 ca                	mov    edx,ecx
c0012476:	c1 ea 16             	shr    edx,0x16
c0012479:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001247f:	c1 e9 0a             	shr    ecx,0xa
c0012482:	c1 e0 0c             	shl    eax,0xc
c0012485:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c001248b:	8d 04 08             	lea    eax,[eax+ecx*1]
c001248e:	c3                   	ret    

c001248f <Virt::freeKernelVirtualPages(unsigned long)>:
c001248f:	55                   	push   ebp
c0012490:	57                   	push   edi
c0012491:	bf 01 00 00 00       	mov    edi,0x1
c0012496:	56                   	push   esi
c0012497:	53                   	push   ebx
c0012498:	83 ec 1c             	sub    esp,0x1c
c001249b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001249f:	c1 ee 0c             	shr    esi,0xc
c00124a2:	eb 48                	jmp    c00124ec <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c00124a4:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c00124a9:	83 ec 08             	sub    esp,0x8
c00124ac:	55                   	push   ebp
c00124ad:	50                   	push   eax
c00124ae:	e8 bd ff ff ff       	call   c0012470 <VAS::getPageTableEntry(unsigned long)>
c00124b3:	83 c4 10             	add    esp,0x10
c00124b6:	8b 10                	mov    edx,DWORD PTR [eax]
c00124b8:	f6 c6 04             	test   dh,0x4
c00124bb:	75 70                	jne    c001252d <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00124bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00124c3:	83 fb 04             	cmp    ebx,0x4
c00124c6:	0f 84 8a 00 00 00    	je     c0012556 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00124cc:	83 fb 02             	cmp    ebx,0x2
c00124cf:	0f 84 9a 00 00 00    	je     c001256f <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c00124d5:	83 fb 03             	cmp    ebx,0x3
c00124d8:	0f 84 be 00 00 00    	je     c001259c <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c00124de:	83 fb 01             	cmp    ebx,0x1
c00124e1:	0f 84 a2 00 00 00    	je     c0012589 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00124e7:	83 c6 01             	add    esi,0x1
c00124ea:	31 ff                	xor    edi,edi
c00124ec:	56                   	push   esi
c00124ed:	89 f5                	mov    ebp,esi
c00124ef:	e8 7a fc ff ff       	call   c001216e <Virt::getPageState(unsigned long)>
c00124f4:	c1 e5 0c             	shl    ebp,0xc
c00124f7:	5a                   	pop    edx
c00124f8:	0f b6 d8             	movzx  ebx,al
c00124fb:	85 db                	test   ebx,ebx
c00124fd:	75 a5                	jne    c00124a4 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00124ff:	83 ec 0c             	sub    esp,0xc
c0012502:	68 e1 33 02 c0       	push   0xc00233e1
c0012507:	e8 c6 c8 ff ff       	call   c000edd2 <KePanic(char const*)>
c001250c:	5a                   	pop    edx
c001250d:	59                   	pop    ecx
c001250e:	55                   	push   ebp
c001250f:	8b 2d d0 ce 02 c0    	mov    ebp,DWORD PTR ds:0xc002ced0
c0012515:	55                   	push   ebp
c0012516:	e8 55 ff ff ff       	call   c0012470 <VAS::getPageTableEntry(unsigned long)>
c001251b:	83 c4 10             	add    esp,0x10
c001251e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012520:	f6 c6 04             	test   dh,0x4
c0012523:	75 08                	jne    c001252d <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0012525:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001252b:	eb ba                	jmp    c00124e7 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001252d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012531:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012537:	83 ec 0c             	sub    esp,0xc
c001253a:	52                   	push   edx
c001253b:	e8 23 ca ff ff       	call   c000ef63 <Phys::freePage(unsigned long)>
c0012540:	83 c4 10             	add    esp,0x10
c0012543:	83 fb 04             	cmp    ebx,0x4
c0012546:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001254a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012550:	0f 85 76 ff ff ff    	jne    c00124cc <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0012556:	83 e7 01             	and    edi,0x1
c0012559:	75 46                	jne    c00125a1 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c001255b:	c7 44 24 30 50 2e 02 c0 	mov    DWORD PTR [esp+0x30],0xc0022e50
c0012563:	83 c4 1c             	add    esp,0x1c
c0012566:	5b                   	pop    ebx
c0012567:	5e                   	pop    esi
c0012568:	5f                   	pop    edi
c0012569:	5d                   	pop    ebp
c001256a:	e9 63 c8 ff ff       	jmp    c000edd2 <KePanic(char const*)>
c001256f:	83 e7 01             	and    edi,0x1
c0012572:	75 15                	jne    c0012589 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0012574:	83 ec 0c             	sub    esp,0xc
c0012577:	68 fd 33 02 c0       	push   0xc00233fd
c001257c:	e8 51 c8 ff ff       	call   c000edd2 <KePanic(char const*)>
c0012581:	83 c4 10             	add    esp,0x10
c0012584:	e9 5e ff ff ff       	jmp    c00124e7 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0012589:	83 ec 08             	sub    esp,0x8
c001258c:	6a 00                	push   0x0
c001258e:	56                   	push   esi
c001258f:	e8 a0 fb ff ff       	call   c0012134 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012594:	83 c4 10             	add    esp,0x10
c0012597:	e9 4b ff ff ff       	jmp    c00124e7 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001259c:	83 e7 01             	and    edi,0x1
c001259f:	75 16                	jne    c00125b7 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c00125a1:	83 ec 08             	sub    esp,0x8
c00125a4:	6a 00                	push   0x0
c00125a6:	56                   	push   esi
c00125a7:	e8 88 fb ff ff       	call   c0012134 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00125ac:	83 c4 10             	add    esp,0x10
c00125af:	83 c4 1c             	add    esp,0x1c
c00125b2:	5b                   	pop    ebx
c00125b3:	5e                   	pop    esi
c00125b4:	5f                   	pop    edi
c00125b5:	5d                   	pop    ebp
c00125b6:	c3                   	ret    
c00125b7:	c7 44 24 30 19 34 02 c0 	mov    DWORD PTR [esp+0x30],0xc0023419
c00125bf:	83 c4 1c             	add    esp,0x1c
c00125c2:	5b                   	pop    ebx
c00125c3:	5e                   	pop    esi
c00125c4:	5f                   	pop    edi
c00125c5:	5d                   	pop    ebp
c00125c6:	e9 07 c8 ff ff       	jmp    c000edd2 <KePanic(char const*)>
c00125cb:	90                   	nop

c00125cc <VAS::freeAllocatedPages(unsigned long)>:
c00125cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00125d4:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00125d8:	74 09                	je     c00125e3 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00125da:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00125de:	e9 ac fe ff ff       	jmp    c001248f <Virt::freeKernelVirtualPages(unsigned long)>
c00125e3:	c7 44 24 04 74 2e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022e74
c00125eb:	e9 5e 49 ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>

c00125f0 <VAS::virtualToPhysical(unsigned long)>:
c00125f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00125f4:	50                   	push   eax
c00125f5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00125f9:	52                   	push   edx
c00125fa:	e8 71 fe ff ff       	call   c0012470 <VAS::getPageTableEntry(unsigned long)>
c00125ff:	59                   	pop    ecx
c0012600:	5a                   	pop    edx
c0012601:	8b 00                	mov    eax,DWORD PTR [eax]
c0012603:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012608:	c3                   	ret    
c0012609:	90                   	nop

c001260a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c001260a:	55                   	push   ebp
c001260b:	57                   	push   edi
c001260c:	56                   	push   esi
c001260d:	53                   	push   ebx
c001260e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012612:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012616:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001261a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001261e:	85 db                	test   ebx,ebx
c0012620:	7e 24                	jle    c0012646 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0012622:	c1 e3 0c             	shl    ebx,0xc
c0012625:	01 f3                	add    ebx,esi
c0012627:	56                   	push   esi
c0012628:	81 c6 00 10 00 00    	add    esi,0x1000
c001262e:	55                   	push   ebp
c001262f:	e8 3c fe ff ff       	call   c0012470 <VAS::getPageTableEntry(unsigned long)>
c0012634:	5a                   	pop    edx
c0012635:	59                   	pop    ecx
c0012636:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012638:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001263c:	21 f9                	and    ecx,edi
c001263e:	09 d1                	or     ecx,edx
c0012640:	39 f3                	cmp    ebx,esi
c0012642:	89 08                	mov    DWORD PTR [eax],ecx
c0012644:	75 e1                	jne    c0012627 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0012646:	5b                   	pop    ebx
c0012647:	5e                   	pop    esi
c0012648:	5f                   	pop    edi
c0012649:	5d                   	pop    ebp
c001264a:	c3                   	ret    
c001264b:	90                   	nop

c001264c <VAS::VAS()>:
c001264c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012650:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001265b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012662:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012666:	a3 d0 ce 02 c0       	mov    ds:0xc002ced0,eax
c001266b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001266f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0012673:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012677:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001267a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001267e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0012685:	ba 7d 60 02 c0       	mov    edx,0xc002607d
c001268a:	b8 00 60 02 c0       	mov    eax,0xc0026000
c001268f:	29 c2                	sub    edx,eax
c0012691:	89 d0                	mov    eax,edx
c0012693:	05 ff 0f 00 00       	add    eax,0xfff
c0012698:	c1 e8 0c             	shr    eax,0xc
c001269b:	89 c2                	mov    edx,eax
c001269d:	b8 00 60 02 c0       	mov    eax,0xc0026000
c00126a2:	6a 04                	push   0x4
c00126a4:	6a ff                	push   0xffffffff
c00126a6:	52                   	push   edx
c00126a7:	50                   	push   eax
c00126a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00126ac:	e8 59 ff ff ff       	call   c001260a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00126b1:	83 c4 14             	add    esp,0x14
c00126b4:	90                   	nop
c00126b5:	c3                   	ret    

c00126b6 <VAS::setToWriteCombining(unsigned long, int)>:
c00126b6:	a1 64 d7 02 c0       	mov    eax,ds:0xc002d764
c00126bb:	50                   	push   eax
c00126bc:	6a ff                	push   0xffffffff
c00126be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00126c2:	52                   	push   edx
c00126c3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00126c7:	51                   	push   ecx
c00126c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00126cc:	50                   	push   eax
c00126cd:	e8 38 ff ff ff       	call   c001260a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00126d2:	83 c4 14             	add    esp,0x14
c00126d5:	c3                   	ret    

c00126d6 <VAS::mapOtherVASIn(bool, VAS*)>:
c00126d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00126da:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00126dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126e1:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00126e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00126e9:	83 f8 01             	cmp    eax,0x1
c00126ec:	19 c0                	sbb    eax,eax
c00126ee:	83 ca 03             	or     edx,0x3
c00126f1:	83 e0 fc             	and    eax,0xfffffffc
c00126f4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00126fb:	0f 20 d8             	mov    eax,cr3
c00126fe:	0f 22 d8             	mov    cr3,eax
c0012701:	c3                   	ret    

c0012702 <VAS::~VAS()>:
c0012702:	83 ec 2c             	sub    esp,0x2c
c0012705:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001270d:	fa                   	cli    
c001270e:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0012713:	83 c0 01             	add    eax,0x1
c0012716:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c001271b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012720:	8b 00                	mov    eax,DWORD PTR [eax]
c0012722:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012725:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001272b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001272f:	6a 01                	push   0x1
c0012731:	50                   	push   eax
c0012732:	e8 9f ff ff ff       	call   c00126d6 <VAS::mapOtherVASIn(bool, VAS*)>
c0012737:	83 c4 0c             	add    esp,0xc
c001273a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012742:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001274a:	0f 8f d8 00 00 00    	jg     c0012828 <VAS::~VAS()+0x126>
c0012750:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012754:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012757:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001275b:	c1 e2 02             	shl    edx,0x2
c001275e:	01 d0                	add    eax,edx
c0012760:	8b 00                	mov    eax,DWORD PTR [eax]
c0012762:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001276a:	83 e0 01             	and    eax,0x1
c001276d:	0f 84 ab 00 00 00    	je     c001281e <VAS::~VAS()+0x11c>
c0012773:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001277b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012783:	7f 74                	jg     c00127f9 <VAS::~VAS()+0xf7>
c0012785:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012789:	c1 e0 0a             	shl    eax,0xa
c001278c:	89 c2                	mov    edx,eax
c001278e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012792:	01 d0                	add    eax,edx
c0012794:	c1 e0 0c             	shl    eax,0xc
c0012797:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001279b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00127a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00127a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00127a5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00127ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00127af:	6a 01                	push   0x1
c00127b1:	50                   	push   eax
c00127b2:	e8 8b fc ff ff       	call   c0012442 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00127b7:	83 c4 0c             	add    esp,0xc
c00127ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00127be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00127c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00127c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00127c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127cc:	25 01 04 00 00       	and    eax,0x401
c00127d1:	3d 01 04 00 00       	cmp    eax,0x401
c00127d6:	75 1a                	jne    c00127f2 <VAS::~VAS()+0xf0>
c00127d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127dc:	25 00 f0 ff ff       	and    eax,0xfffff000
c00127e1:	83 ec 0c             	sub    esp,0xc
c00127e4:	50                   	push   eax
c00127e5:	e8 79 c7 ff ff       	call   c000ef63 <Phys::freePage(unsigned long)>
c00127ea:	83 c4 10             	add    esp,0x10
c00127ed:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00127f2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c00127f7:	eb 82                	jmp    c001277b <VAS::~VAS()+0x79>
c00127f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127fd:	25 00 04 00 00       	and    eax,0x400
c0012802:	74 1a                	je     c001281e <VAS::~VAS()+0x11c>
c0012804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012808:	25 00 f0 ff ff       	and    eax,0xfffff000
c001280d:	83 ec 0c             	sub    esp,0xc
c0012810:	50                   	push   eax
c0012811:	e8 4d c7 ff ff       	call   c000ef63 <Phys::freePage(unsigned long)>
c0012816:	83 c4 10             	add    esp,0x10
c0012819:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001281e:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0012823:	e9 1a ff ff ff       	jmp    c0012742 <VAS::~VAS()+0x40>
c0012828:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001282c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001282f:	83 ec 0c             	sub    esp,0xc
c0012832:	50                   	push   eax
c0012833:	e8 57 fc ff ff       	call   c001248f <Virt::freeKernelVirtualPages(unsigned long)>
c0012838:	83 c4 10             	add    esp,0x10
c001283b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001283f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012842:	83 ec 0c             	sub    esp,0xc
c0012845:	50                   	push   eax
c0012846:	e8 18 c7 ff ff       	call   c000ef63 <Phys::freePage(unsigned long)>
c001284b:	83 c4 10             	add    esp,0x10
c001284e:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012853:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c001285b:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0012860:	85 c0                	test   eax,eax
c0012862:	75 01                	jne    c0012865 <VAS::~VAS()+0x163>
c0012864:	fb                   	sti    
c0012865:	90                   	nop
c0012866:	83 c4 2c             	add    esp,0x2c
c0012869:	c3                   	ret    

c001286a <VAS::mapPage(unsigned long, unsigned long, int)>:
c001286a:	55                   	push   ebp
c001286b:	57                   	push   edi
c001286c:	56                   	push   esi
c001286d:	53                   	push   ebx
c001286e:	83 ec 1c             	sub    esp,0x1c
c0012871:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012875:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012879:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001287d:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012883:	77 08                	ja     c001288d <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0012885:	0f 20 d8             	mov    eax,cr3
c0012888:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c001288b:	75 43                	jne    c00128d0 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001288d:	89 d8                	mov    eax,ebx
c001288f:	09 f8                	or     eax,edi
c0012891:	a9 ff 0f 00 00       	test   eax,0xfff
c0012896:	75 53                	jne    c00128eb <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0012898:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001289b:	89 de                	mov    esi,ebx
c001289d:	c1 ee 16             	shr    esi,0x16
c00128a0:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00128a7:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00128ab:	74 50                	je     c00128fd <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c00128ad:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00128b1:	c1 eb 0a             	shr    ebx,0xa
c00128b4:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00128ba:	c1 e6 0c             	shl    esi,0xc
c00128bd:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00128c3:	09 c7                	or     edi,eax
c00128c5:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c00128c8:	83 c4 1c             	add    esp,0x1c
c00128cb:	5b                   	pop    ebx
c00128cc:	5e                   	pop    esi
c00128cd:	5f                   	pop    edi
c00128ce:	5d                   	pop    ebp
c00128cf:	c3                   	ret    
c00128d0:	83 ec 0c             	sub    esp,0xc
c00128d3:	68 98 2e 02 c0       	push   0xc0022e98
c00128d8:	e8 71 46 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00128dd:	89 d8                	mov    eax,ebx
c00128df:	83 c4 10             	add    esp,0x10
c00128e2:	09 f8                	or     eax,edi
c00128e4:	a9 ff 0f 00 00       	test   eax,0xfff
c00128e9:	74 ad                	je     c0012898 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c00128eb:	83 ec 0c             	sub    esp,0xc
c00128ee:	68 00 2f 02 c0       	push   0xc0022f00
c00128f3:	e8 da c4 ff ff       	call   c000edd2 <KePanic(char const*)>
c00128f8:	83 c4 10             	add    esp,0x10
c00128fb:	eb 9b                	jmp    c0012898 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c00128fd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012901:	e8 c6 c6 ff ff       	call   c000efcc <Phys::allocatePage()>
c0012906:	8b 0d d0 ce 02 c0    	mov    ecx,DWORD PTR ds:0xc002ced0
c001290c:	83 ec 0c             	sub    esp,0xc
c001290f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012913:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012917:	6a 01                	push   0x1
c0012919:	e8 73 f8 ff ff       	call   c0012191 <Virt::allocateKernelVirtualPages(int)>
c001291e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012925:	6a 01                	push   0x1
c0012927:	50                   	push   eax
c0012928:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001292c:	52                   	push   edx
c001292d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012931:	51                   	push   ecx
c0012932:	e8 2d 01 00 00       	call   c0012a64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012937:	83 c4 1c             	add    esp,0x1c
c001293a:	68 00 10 00 00       	push   0x1000
c001293f:	6a 00                	push   0x0
c0012941:	50                   	push   eax
c0012942:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012946:	e8 a5 db fe ff       	call   c00004f0 <memset>
c001294b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001294f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012952:	e8 38 fb ff ff       	call   c001248f <Virt::freeKernelVirtualPages(unsigned long)>
c0012957:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001295b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001295f:	83 c4 10             	add    esp,0x10
c0012962:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0012965:	0d 07 04 00 00       	or     eax,0x407
c001296a:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c001296d:	e9 3b ff ff ff       	jmp    c00128ad <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0012972 <VAS::allocatePages(int, int)>:
c0012972:	55                   	push   ebp
c0012973:	57                   	push   edi
c0012974:	56                   	push   esi
c0012975:	53                   	push   ebx
c0012976:	83 ec 1c             	sub    esp,0x1c
c0012979:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001297d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012981:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0012985:	75 75                	jne    c00129fc <VAS::allocatePages(int, int)+0x8a>
c0012987:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001298a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001298e:	85 c0                	test   eax,eax
c0012990:	74 49                	je     c00129db <VAS::allocatePages(int, int)+0x69>
c0012992:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012996:	89 d5                	mov    ebp,edx
c0012998:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001299c:	c1 e5 0c             	shl    ebp,0xc
c001299f:	01 dd                	add    ebp,ebx
c00129a1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00129a4:	81 cf 00 04 00 00    	or     edi,0x400
c00129aa:	85 d2                	test   edx,edx
c00129ac:	7e 1b                	jle    c00129c9 <VAS::allocatePages(int, int)+0x57>
c00129ae:	e8 19 c6 ff ff       	call   c000efcc <Phys::allocatePage()>
c00129b3:	57                   	push   edi
c00129b4:	53                   	push   ebx
c00129b5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00129bb:	50                   	push   eax
c00129bc:	56                   	push   esi
c00129bd:	e8 a8 fe ff ff       	call   c001286a <VAS::mapPage(unsigned long, unsigned long, int)>
c00129c2:	83 c4 10             	add    esp,0x10
c00129c5:	39 dd                	cmp    ebp,ebx
c00129c7:	75 e5                	jne    c00129ae <VAS::allocatePages(int, int)+0x3c>
c00129c9:	0f 20 d8             	mov    eax,cr3
c00129cc:	0f 22 d8             	mov    cr3,eax
c00129cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00129d3:	83 c4 1c             	add    esp,0x1c
c00129d6:	5b                   	pop    ebx
c00129d7:	5e                   	pop    esi
c00129d8:	5f                   	pop    edi
c00129d9:	5d                   	pop    ebp
c00129da:	c3                   	ret    
c00129db:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00129df:	83 ec 0c             	sub    esp,0xc
c00129e2:	68 24 2f 02 c0       	push   0xc0022f24
c00129e7:	e8 e6 c3 ff ff       	call   c000edd2 <KePanic(char const*)>
c00129ec:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00129ef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00129f3:	83 c4 10             	add    esp,0x10
c00129f6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00129fa:	eb 96                	jmp    c0012992 <VAS::allocatePages(int, int)+0x20>
c00129fc:	83 ec 0c             	sub    esp,0xc
c00129ff:	52                   	push   edx
c0012a00:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0012a04:	e8 88 f7 ff ff       	call   c0012191 <Virt::allocateKernelVirtualPages(int)>
c0012a09:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a0d:	83 c4 10             	add    esp,0x10
c0012a10:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012a15:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012a19:	77 38                	ja     c0012a53 <VAS::allocatePages(int, int)+0xe1>
c0012a1b:	85 d2                	test   edx,edx
c0012a1d:	7e aa                	jle    c00129c9 <VAS::allocatePages(int, int)+0x57>
c0012a1f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012a23:	c1 e2 0c             	shl    edx,0xc
c0012a26:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a2a:	81 cf 00 04 00 00    	or     edi,0x400
c0012a30:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0012a33:	e8 94 c5 ff ff       	call   c000efcc <Phys::allocatePage()>
c0012a38:	57                   	push   edi
c0012a39:	53                   	push   ebx
c0012a3a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012a40:	50                   	push   eax
c0012a41:	56                   	push   esi
c0012a42:	e8 23 fe ff ff       	call   c001286a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a47:	83 c4 10             	add    esp,0x10
c0012a4a:	39 dd                	cmp    ebp,ebx
c0012a4c:	75 e5                	jne    c0012a33 <VAS::allocatePages(int, int)+0xc1>
c0012a4e:	e9 76 ff ff ff       	jmp    c00129c9 <VAS::allocatePages(int, int)+0x57>
c0012a53:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012a57:	a1 68 d7 02 c0       	mov    eax,ds:0xc002d768
c0012a5c:	09 c1                	or     ecx,eax
c0012a5e:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0012a62:	eb b7                	jmp    c0012a1b <VAS::allocatePages(int, int)+0xa9>

c0012a64 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012a64:	55                   	push   ebp
c0012a65:	57                   	push   edi
c0012a66:	56                   	push   esi
c0012a67:	53                   	push   ebx
c0012a68:	83 ec 1c             	sub    esp,0x1c
c0012a6b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012a6f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012a73:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012a77:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012a7b:	85 db                	test   ebx,ebx
c0012a7d:	7e 2c                	jle    c0012aab <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0012a7f:	c1 e3 0c             	shl    ebx,0xc
c0012a82:	8d 04 33             	lea    eax,[ebx+esi*1]
c0012a85:	89 f3                	mov    ebx,esi
c0012a87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a8b:	55                   	push   ebp
c0012a8c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012a90:	29 f2                	sub    edx,esi
c0012a92:	01 da                	add    edx,ebx
c0012a94:	52                   	push   edx
c0012a95:	53                   	push   ebx
c0012a96:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012a9c:	57                   	push   edi
c0012a9d:	e8 c8 fd ff ff       	call   c001286a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012aa2:	83 c4 10             	add    esp,0x10
c0012aa5:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0012aa9:	75 e0                	jne    c0012a8b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0012aab:	0f 20 d8             	mov    eax,cr3
c0012aae:	0f 22 d8             	mov    cr3,eax
c0012ab1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012ab5:	83 c4 1c             	add    esp,0x1c
c0012ab8:	5b                   	pop    ebx
c0012ab9:	5e                   	pop    esi
c0012aba:	5f                   	pop    edi
c0012abb:	5d                   	pop    ebp
c0012abc:	c3                   	ret    
c0012abd:	90                   	nop

c0012abe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012abe:	55                   	push   ebp
c0012abf:	57                   	push   edi
c0012ac0:	56                   	push   esi
c0012ac1:	53                   	push   ebx
c0012ac2:	83 ec 1c             	sub    esp,0x1c
c0012ac5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012ac9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012acd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012ad1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ad5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012ad9:	09 d8                	or     eax,ebx
c0012adb:	a9 ff 0f 00 00       	test   eax,0xfff
c0012ae0:	75 4b                	jne    c0012b2d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0012ae2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012ae5:	89 de                	mov    esi,ebx
c0012ae7:	c1 ee 16             	shr    esi,0x16
c0012aea:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0012af1:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0012af5:	74 48                	je     c0012b3f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0012af7:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0012afc:	c1 eb 0a             	shr    ebx,0xa
c0012aff:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012b03:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0012b07:	83 ff 01             	cmp    edi,0x1
c0012b0a:	19 c0                	sbb    eax,eax
c0012b0c:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012b12:	c1 e6 0c             	shl    esi,0xc
c0012b15:	25 00 00 c0 ff       	and    eax,0xffc00000
c0012b1a:	01 f3                	add    ebx,esi
c0012b1c:	09 ca                	or     edx,ecx
c0012b1e:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0012b25:	83 c4 1c             	add    esp,0x1c
c0012b28:	5b                   	pop    ebx
c0012b29:	5e                   	pop    esi
c0012b2a:	5f                   	pop    edi
c0012b2b:	5d                   	pop    ebp
c0012b2c:	c3                   	ret    
c0012b2d:	83 ec 0c             	sub    esp,0xc
c0012b30:	68 50 2f 02 c0       	push   0xc0022f50
c0012b35:	e8 98 c2 ff ff       	call   c000edd2 <KePanic(char const*)>
c0012b3a:	83 c4 10             	add    esp,0x10
c0012b3d:	eb a3                	jmp    c0012ae2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0012b3f:	e8 88 c4 ff ff       	call   c000efcc <Phys::allocatePage()>
c0012b44:	8b 0d d0 ce 02 c0    	mov    ecx,DWORD PTR ds:0xc002ced0
c0012b4a:	83 ec 0c             	sub    esp,0xc
c0012b4d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0012b51:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012b55:	6a 01                	push   0x1
c0012b57:	e8 35 f6 ff ff       	call   c0012191 <Virt::allocateKernelVirtualPages(int)>
c0012b5c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012b63:	6a 01                	push   0x1
c0012b65:	50                   	push   eax
c0012b66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b6a:	50                   	push   eax
c0012b6b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012b6f:	51                   	push   ecx
c0012b70:	e8 ef fe ff ff       	call   c0012a64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012b75:	83 c4 1c             	add    esp,0x1c
c0012b78:	68 00 10 00 00       	push   0x1000
c0012b7d:	6a 00                	push   0x0
c0012b7f:	50                   	push   eax
c0012b80:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012b84:	e8 67 d9 fe ff       	call   c00004f0 <memset>
c0012b89:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012b8d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012b90:	e8 fa f8 ff ff       	call   c001248f <Virt::freeKernelVirtualPages(unsigned long)>
c0012b95:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012b99:	83 c4 10             	add    esp,0x10
c0012b9c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012b9f:	81 ca 07 04 00 00    	or     edx,0x407
c0012ba5:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c0012ba8:	e9 4a ff ff ff       	jmp    c0012af7 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c0012bad:	90                   	nop

c0012bae <VAS::VAS(bool)>:
c0012bae:	53                   	push   ebx
c0012baf:	83 ec 28             	sub    esp,0x28
c0012bb2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012bb6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012bba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012bbe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012bc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012bc9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012bd0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012bd4:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012bd8:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012bdb:	e8 ec c3 ff ff       	call   c000efcc <Phys::allocatePage()>
c0012be0:	89 c2                	mov    edx,eax
c0012be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012be6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012be9:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c0012bef:	83 ec 0c             	sub    esp,0xc
c0012bf2:	6a 01                	push   0x1
c0012bf4:	e8 98 f5 ff ff       	call   c0012191 <Virt::allocateKernelVirtualPages(int)>
c0012bf9:	83 c4 10             	add    esp,0x10
c0012bfc:	89 c2                	mov    edx,eax
c0012bfe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c02:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012c05:	83 ec 0c             	sub    esp,0xc
c0012c08:	6a 03                	push   0x3
c0012c0a:	6a 01                	push   0x1
c0012c0c:	52                   	push   edx
c0012c0d:	50                   	push   eax
c0012c0e:	53                   	push   ebx
c0012c0f:	e8 50 fe ff ff       	call   c0012a64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c14:	83 c4 20             	add    esp,0x20
c0012c17:	89 c2                	mov    edx,eax
c0012c19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c1d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012c20:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012c28:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012c30:	7f 1d                	jg     c0012c4f <VAS::VAS(bool)+0xa1>
c0012c32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c36:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c39:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012c3d:	c1 e2 02             	shl    edx,0x2
c0012c40:	01 d0                	add    eax,edx
c0012c42:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012c48:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012c4d:	eb d9                	jmp    c0012c28 <VAS::VAS(bool)+0x7a>
c0012c4f:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012c57:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012c5f:	7f 59                	jg     c0012cba <VAS::VAS(bool)+0x10c>
c0012c61:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c65:	2d 00 02 00 00       	sub    eax,0x200
c0012c6a:	c1 e0 0c             	shl    eax,0xc
c0012c6d:	89 c2                	mov    edx,eax
c0012c6f:	a1 68 d7 02 c0       	mov    eax,ds:0xc002d768
c0012c74:	89 d1                	mov    ecx,edx
c0012c76:	09 c1                	or     ecx,eax
c0012c78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c7c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c7f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012c83:	c1 e2 02             	shl    edx,0x2
c0012c86:	01 d0                	add    eax,edx
c0012c88:	83 c9 05             	or     ecx,0x5
c0012c8b:	89 ca                	mov    edx,ecx
c0012c8d:	89 10                	mov    DWORD PTR [eax],edx
c0012c8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c93:	2d 40 03 00 00       	sub    eax,0x340
c0012c98:	83 f8 7f             	cmp    eax,0x7f
c0012c9b:	77 16                	ja     c0012cb3 <VAS::VAS(bool)+0x105>
c0012c9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ca1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012ca4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012ca8:	c1 e2 02             	shl    edx,0x2
c0012cab:	01 d0                	add    eax,edx
c0012cad:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012cb3:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0012cb8:	eb 9d                	jmp    c0012c57 <VAS::VAS(bool)+0xa9>
c0012cba:	8b 15 68 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d768
c0012cc0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012cc4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012cc7:	05 20 0c 00 00       	add    eax,0xc20
c0012ccc:	81 ca 03 40 00 00    	or     edx,0x4003
c0012cd2:	89 10                	mov    DWORD PTR [eax],edx
c0012cd4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012cd8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012cdb:	a1 68 d7 02 c0       	mov    eax,ds:0xc002d768
c0012ce0:	09 c2                	or     edx,eax
c0012ce2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ce6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012ce9:	05 fc 0f 00 00       	add    eax,0xffc
c0012cee:	83 ca 03             	or     edx,0x3
c0012cf1:	89 10                	mov    DWORD PTR [eax],edx
c0012cf3:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0012cf8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012cfe:	83 ec 0c             	sub    esp,0xc
c0012d01:	50                   	push   eax
c0012d02:	e8 e9 65 ff ff       	call   c00092f0 <Device::getName()>
c0012d07:	83 c4 10             	add    esp,0x10
c0012d0a:	83 ec 08             	sub    esp,0x8
c0012d0d:	68 33 34 02 c0       	push   0xc0023433
c0012d12:	50                   	push   eax
c0012d13:	e8 68 da fe ff       	call   c0000780 <strcmp>
c0012d18:	83 c4 10             	add    esp,0x10
c0012d1b:	85 c0                	test   eax,eax
c0012d1d:	0f 94 c0             	sete   al
c0012d20:	0f b6 c0             	movzx  eax,al
c0012d23:	85 c0                	test   eax,eax
c0012d25:	74 68                	je     c0012d8f <VAS::VAS(bool)+0x1e1>
c0012d27:	fa                   	cli    
c0012d28:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0012d2d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012d33:	05 68 09 00 00       	add    eax,0x968
c0012d38:	83 ec 0c             	sub    esp,0xc
c0012d3b:	50                   	push   eax
c0012d3c:	e8 2d b7 ff ff       	call   c000e46e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012d41:	83 c4 10             	add    esp,0x10
c0012d44:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012d49:	89 c3                	mov    ebx,eax
c0012d4b:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0012d50:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012d56:	05 68 09 00 00       	add    eax,0x968
c0012d5b:	83 ec 0c             	sub    esp,0xc
c0012d5e:	50                   	push   eax
c0012d5f:	e8 0a b7 ff ff       	call   c000e46e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012d64:	83 c4 10             	add    esp,0x10
c0012d67:	83 ec 08             	sub    esp,0x8
c0012d6a:	50                   	push   eax
c0012d6b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d6f:	e8 fc f6 ff ff       	call   c0012470 <VAS::getPageTableEntry(unsigned long)>
c0012d74:	83 c4 10             	add    esp,0x10
c0012d77:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d79:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012d7e:	6a 11                	push   0x11
c0012d80:	53                   	push   ebx
c0012d81:	50                   	push   eax
c0012d82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d86:	e8 df fa ff ff       	call   c001286a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012d8b:	83 c4 10             	add    esp,0x10
c0012d8e:	fb                   	sti    
c0012d8f:	90                   	nop
c0012d90:	83 c4 28             	add    esp,0x28
c0012d93:	5b                   	pop    ebx
c0012d94:	c3                   	ret    
c0012d95:	90                   	nop

c0012d96 <VAS::evict(unsigned long)>:
c0012d96:	55                   	push   ebp
c0012d97:	57                   	push   edi
c0012d98:	56                   	push   esi
c0012d99:	53                   	push   ebx
c0012d9a:	83 ec 24             	sub    esp,0x24
c0012d9d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012da1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0012da5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012da9:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0012dae:	50                   	push   eax
c0012daf:	68 41 34 02 c0       	push   0xc0023441
c0012db4:	e8 95 41 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012db9:	e8 28 f5 ff ff       	call   c00122e6 <Virt::allocateSwapfilePage()>
c0012dbe:	83 c4 10             	add    esp,0x10
c0012dc1:	89 c7                	mov    edi,eax
c0012dc3:	a1 0c 51 02 c0       	mov    eax,ds:0xc002510c
c0012dc8:	85 c0                	test   eax,eax
c0012dca:	7e 40                	jle    c0012e0c <VAS::evict(unsigned long)+0x76>
c0012dcc:	89 ee                	mov    esi,ebp
c0012dce:	31 db                	xor    ebx,ebx
c0012dd0:	83 ec 0c             	sub    esp,0xc
c0012dd3:	57                   	push   edi
c0012dd4:	e8 f7 f4 ff ff       	call   c00122d0 <Virt::swapIDToSector(unsigned long)>
c0012dd9:	31 d2                	xor    edx,edx
c0012ddb:	89 34 24             	mov    DWORD PTR [esp],esi
c0012dde:	81 c6 00 02 00 00    	add    esi,0x200
c0012de4:	6a 01                	push   0x1
c0012de6:	52                   	push   edx
c0012de7:	01 d8                	add    eax,ebx
c0012de9:	83 c3 01             	add    ebx,0x1
c0012dec:	50                   	push   eax
c0012ded:	0f be 05 18 51 02 c0 	movsx  eax,BYTE PTR ds:0xc0025118
c0012df4:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c0012dfb:	50                   	push   eax
c0012dfc:	e8 53 73 ff ff       	call   c000a154 <LogicalDisk::write(unsigned long long, int, void*)>
c0012e01:	83 c4 20             	add    esp,0x20
c0012e04:	39 1d 0c 51 02 c0    	cmp    DWORD PTR ds:0xc002510c,ebx
c0012e0a:	7f c4                	jg     c0012dd0 <VAS::evict(unsigned long)+0x3a>
c0012e0c:	c1 e7 0c             	shl    edi,0xc
c0012e0f:	83 ec 08             	sub    esp,0x8
c0012e12:	55                   	push   ebp
c0012e13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e17:	50                   	push   eax
c0012e18:	e8 53 f6 ff ff       	call   c0012470 <VAS::getPageTableEntry(unsigned long)>
c0012e1d:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e1f:	89 d3                	mov    ebx,edx
c0012e21:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012e27:	09 d7                	or     edi,edx
c0012e29:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012e2f:	89 38                	mov    DWORD PTR [eax],edi
c0012e31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012e34:	8b 15 c8 ce 02 c0    	mov    edx,DWORD PTR ds:0xc002cec8
c0012e3a:	83 c2 01             	add    edx,0x1
c0012e3d:	89 15 c8 ce 02 c0    	mov    DWORD PTR ds:0xc002cec8,edx
c0012e43:	e8 1b c1 ff ff       	call   c000ef63 <Phys::freePage(unsigned long)>
c0012e48:	0f 20 d8             	mov    eax,cr3
c0012e4b:	0f 22 d8             	mov    cr3,eax
c0012e4e:	8b 0d c8 ce 02 c0    	mov    ecx,DWORD PTR ds:0xc002cec8
c0012e54:	51                   	push   ecx
c0012e55:	55                   	push   ebp
c0012e56:	53                   	push   ebx
c0012e57:	68 74 2f 02 c0       	push   0xc0022f74
c0012e5c:	e8 ed 40 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012e61:	a1 c4 ce 02 c0       	mov    eax,ds:0xc002cec4
c0012e66:	83 c4 18             	add    esp,0x18
c0012e69:	50                   	push   eax
c0012e6a:	68 56 34 02 c0       	push   0xc0023456
c0012e6f:	8d 50 01             	lea    edx,[eax+0x1]
c0012e72:	89 15 c4 ce 02 c0    	mov    DWORD PTR ds:0xc002cec4,edx
c0012e78:	e8 d1 40 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012e7d:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0012e82:	c7 44 24 40 68 34 02 c0 	mov    DWORD PTR [esp+0x40],0xc0023468
c0012e8a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012e8e:	83 c4 2c             	add    esp,0x2c
c0012e91:	5b                   	pop    ebx
c0012e92:	5e                   	pop    esi
c0012e93:	5f                   	pop    edi
c0012e94:	5d                   	pop    ebp
c0012e95:	e9 b4 40 ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>

c0012e9a <VAS::canLockPage(unsigned long)>:
c0012e9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012e9e:	50                   	push   eax
c0012e9f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ea3:	52                   	push   edx
c0012ea4:	e8 c7 f5 ff ff       	call   c0012470 <VAS::getPageTableEntry(unsigned long)>
c0012ea9:	59                   	pop    ecx
c0012eaa:	5a                   	pop    edx
c0012eab:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ead:	c1 e8 0b             	shr    eax,0xb
c0012eb0:	83 e0 01             	and    eax,0x1
c0012eb3:	c3                   	ret    

c0012eb4 <VAS::unlockPage(unsigned long)>:
c0012eb4:	83 ec 0c             	sub    esp,0xc
c0012eb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012ebb:	50                   	push   eax
c0012ebc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012ec0:	52                   	push   edx
c0012ec1:	e8 aa f5 ff ff       	call   c0012470 <VAS::getPageTableEntry(unsigned long)>
c0012ec6:	59                   	pop    ecx
c0012ec7:	5a                   	pop    edx
c0012ec8:	8b 10                	mov    edx,DWORD PTR [eax]
c0012eca:	f6 c6 08             	test   dh,0x8
c0012ecd:	75 09                	jne    c0012ed8 <VAS::unlockPage(unsigned long)+0x24>
c0012ecf:	80 ce 08             	or     dh,0x8
c0012ed2:	89 10                	mov    DWORD PTR [eax],edx
c0012ed4:	83 c4 0c             	add    esp,0xc
c0012ed7:	c3                   	ret    
c0012ed8:	c7 44 24 10 a8 2f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022fa8
c0012ee0:	83 c4 0c             	add    esp,0xc
c0012ee3:	e9 ea be ff ff       	jmp    c000edd2 <KePanic(char const*)>

c0012ee8 <VAS::canLockPages(unsigned long, int)>:
c0012ee8:	55                   	push   ebp
c0012ee9:	57                   	push   edi
c0012eea:	56                   	push   esi
c0012eeb:	53                   	push   ebx
c0012eec:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0012ef0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012ef4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012ef8:	85 ff                	test   edi,edi
c0012efa:	7e 23                	jle    c0012f1f <VAS::canLockPages(unsigned long, int)+0x37>
c0012efc:	31 f6                	xor    esi,esi
c0012efe:	eb 0d                	jmp    c0012f0d <VAS::canLockPages(unsigned long, int)+0x25>
c0012f00:	83 c6 01             	add    esi,0x1
c0012f03:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012f09:	39 f7                	cmp    edi,esi
c0012f0b:	74 0d                	je     c0012f1a <VAS::canLockPages(unsigned long, int)+0x32>
c0012f0d:	53                   	push   ebx
c0012f0e:	55                   	push   ebp
c0012f0f:	e8 86 ff ff ff       	call   c0012e9a <VAS::canLockPage(unsigned long)>
c0012f14:	5a                   	pop    edx
c0012f15:	59                   	pop    ecx
c0012f16:	84 c0                	test   al,al
c0012f18:	75 e6                	jne    c0012f00 <VAS::canLockPages(unsigned long, int)+0x18>
c0012f1a:	5b                   	pop    ebx
c0012f1b:	5e                   	pop    esi
c0012f1c:	5f                   	pop    edi
c0012f1d:	5d                   	pop    ebp
c0012f1e:	c3                   	ret    
c0012f1f:	b0 01                	mov    al,0x1
c0012f21:	eb f7                	jmp    c0012f1a <VAS::canLockPages(unsigned long, int)+0x32>
c0012f23:	90                   	nop

c0012f24 <VAS::unlockPages(unsigned long, int)>:
c0012f24:	55                   	push   ebp
c0012f25:	57                   	push   edi
c0012f26:	56                   	push   esi
c0012f27:	53                   	push   ebx
c0012f28:	83 ec 0c             	sub    esp,0xc
c0012f2b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0012f2f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0012f33:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0012f37:	85 ff                	test   edi,edi
c0012f39:	7e 1c                	jle    c0012f57 <VAS::unlockPages(unsigned long, int)+0x33>
c0012f3b:	31 f6                	xor    esi,esi
c0012f3d:	83 ec 08             	sub    esp,0x8
c0012f40:	83 c6 01             	add    esi,0x1
c0012f43:	53                   	push   ebx
c0012f44:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012f4a:	55                   	push   ebp
c0012f4b:	e8 64 ff ff ff       	call   c0012eb4 <VAS::unlockPage(unsigned long)>
c0012f50:	83 c4 10             	add    esp,0x10
c0012f53:	39 f7                	cmp    edi,esi
c0012f55:	75 e6                	jne    c0012f3d <VAS::unlockPages(unsigned long, int)+0x19>
c0012f57:	83 c4 0c             	add    esp,0xc
c0012f5a:	5b                   	pop    ebx
c0012f5b:	5e                   	pop    esi
c0012f5c:	5f                   	pop    edi
c0012f5d:	5d                   	pop    ebp
c0012f5e:	c3                   	ret    
c0012f5f:	90                   	nop

c0012f60 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012f60:	55                   	push   ebp
c0012f61:	57                   	push   edi
c0012f62:	56                   	push   esi
c0012f63:	53                   	push   ebx
c0012f64:	81 ec 0c 10 00 00    	sub    esp,0x100c
c0012f6a:	8b b4 24 24 10 00 00 	mov    esi,DWORD PTR [esp+0x1024]
c0012f71:	89 f3                	mov    ebx,esi
c0012f73:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012f79:	53                   	push   ebx
c0012f7a:	8b 84 24 24 10 00 00 	mov    eax,DWORD PTR [esp+0x1024]
c0012f81:	50                   	push   eax
c0012f82:	e8 e9 f4 ff ff       	call   c0012470 <VAS::getPageTableEntry(unsigned long)>
c0012f87:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c0012f8d:	5a                   	pop    edx
c0012f8e:	59                   	pop    ecx
c0012f8f:	89 c5                	mov    ebp,eax
c0012f91:	0f 87 cb 00 00 00    	ja     c0013062 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c0012f97:	83 ec 08             	sub    esp,0x8
c0012f9a:	56                   	push   esi
c0012f9b:	68 d8 2f 02 c0       	push   0xc0022fd8
c0012fa0:	e8 a9 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012fa5:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c0012faa:	5e                   	pop    esi
c0012fab:	5f                   	pop    edi
c0012fac:	50                   	push   eax
c0012fad:	68 08 30 02 c0       	push   0xc0023008
c0012fb2:	e8 97 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012fb7:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0012fbd:	58                   	pop    eax
c0012fbe:	5a                   	pop    edx
c0012fbf:	51                   	push   ecx
c0012fc0:	68 2c 30 02 c0       	push   0xc002302c
c0012fc5:	e8 84 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012fca:	83 c4 10             	add    esp,0x10
c0012fcd:	85 db                	test   ebx,ebx
c0012fcf:	74 5b                	je     c001302c <VAS::tryLoadBackOffDisk(unsigned long)+0xcc>
c0012fd1:	85 ed                	test   ebp,ebp
c0012fd3:	74 21                	je     c0012ff6 <VAS::tryLoadBackOffDisk(unsigned long)+0x96>
c0012fd5:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c0012fd8:	f7 c6 00 02 00 00    	test   esi,0x200
c0012fde:	0f 85 c5 00 00 00    	jne    c00130a9 <VAS::tryLoadBackOffDisk(unsigned long)+0x149>
c0012fe4:	89 f0                	mov    eax,esi
c0012fe6:	25 01 04 00 00       	and    eax,0x401
c0012feb:	3d 00 04 00 00       	cmp    eax,0x400
c0012ff0:	0f 84 39 01 00 00    	je     c001312f <VAS::tryLoadBackOffDisk(unsigned long)+0x1cf>
c0012ff6:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c0012ffb:	83 ec 08             	sub    esp,0x8
c0012ffe:	50                   	push   eax
c0012fff:	68 20 32 02 c0       	push   0xc0023220
c0013004:	e8 45 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013009:	8b 1d b0 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6b0
c001300f:	5a                   	pop    edx
c0013010:	59                   	pop    ecx
c0013011:	53                   	push   ebx
c0013012:	68 44 32 02 c0       	push   0xc0023244
c0013017:	e8 32 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001301c:	83 c4 10             	add    esp,0x10
c001301f:	31 c0                	xor    eax,eax
c0013021:	81 c4 0c 10 00 00    	add    esp,0x100c
c0013027:	5b                   	pop    ebx
c0013028:	5e                   	pop    esi
c0013029:	5f                   	pop    edi
c001302a:	5d                   	pop    ebp
c001302b:	c3                   	ret    
c001302c:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c0013031:	83 ec 08             	sub    esp,0x8
c0013034:	50                   	push   eax
c0013035:	68 50 30 02 c0       	push   0xc0023050
c001303a:	e8 0f 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001303f:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0013045:	58                   	pop    eax
c0013046:	5a                   	pop    edx
c0013047:	51                   	push   ecx
c0013048:	68 74 30 02 c0       	push   0xc0023074
c001304d:	e8 fc 3e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013052:	83 c4 10             	add    esp,0x10
c0013055:	31 c0                	xor    eax,eax
c0013057:	81 c4 0c 10 00 00    	add    esp,0x100c
c001305d:	5b                   	pop    ebx
c001305e:	5e                   	pop    esi
c001305f:	5f                   	pop    edi
c0013060:	5d                   	pop    ebp
c0013061:	c3                   	ret    
c0013062:	83 ec 0c             	sub    esp,0xc
c0013065:	68 7d 34 02 c0       	push   0xc002347d
c001306a:	e8 63 bd ff ff       	call   c000edd2 <KePanic(char const*)>
c001306f:	5f                   	pop    edi
c0013070:	58                   	pop    eax
c0013071:	56                   	push   esi
c0013072:	68 d8 2f 02 c0       	push   0xc0022fd8
c0013077:	e8 d2 3e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001307c:	8b 0d 8c d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d68c
c0013082:	58                   	pop    eax
c0013083:	5a                   	pop    edx
c0013084:	51                   	push   ecx
c0013085:	68 08 30 02 c0       	push   0xc0023008
c001308a:	e8 bf 3e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001308f:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0013094:	5e                   	pop    esi
c0013095:	5f                   	pop    edi
c0013096:	50                   	push   eax
c0013097:	68 2c 30 02 c0       	push   0xc002302c
c001309c:	e8 ad 3e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00130a1:	83 c4 10             	add    esp,0x10
c00130a4:	e9 28 ff ff ff       	jmp    c0012fd1 <VAS::tryLoadBackOffDisk(unsigned long)+0x71>
c00130a9:	83 ec 0c             	sub    esp,0xc
c00130ac:	68 98 30 02 c0       	push   0xc0023098
c00130b1:	e8 98 3e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00130b6:	e8 11 bf ff ff       	call   c000efcc <Phys::allocatePage()>
c00130bb:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00130be:	83 ca 01             	or     edx,0x1
c00130c1:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c00130c4:	0f 20 da             	mov    edx,cr3
c00130c7:	0f 22 da             	mov    cr3,edx
c00130ca:	ba 00 10 00 00       	mov    edx,0x1000
c00130cf:	89 de                	mov    esi,ebx
c00130d1:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00130d5:	89 d1                	mov    ecx,edx
c00130d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00130d9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00130dc:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c00130e2:	09 c8                	or     eax,ecx
c00130e4:	83 c8 02             	or     eax,0x2
c00130e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00130ea:	0f 20 d8             	mov    eax,cr3
c00130ed:	0f 22 d8             	mov    cr3,eax
c00130f0:	8d 74 24 10          	lea    esi,[esp+0x10]
c00130f4:	89 df                	mov    edi,ebx
c00130f6:	89 d1                	mov    ecx,edx
c00130f8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00130fa:	59                   	pop    ecx
c00130fb:	8b 35 8c d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d68c
c0013101:	5b                   	pop    ebx
c0013102:	56                   	push   esi
c0013103:	68 b8 30 02 c0       	push   0xc00230b8
c0013108:	e8 41 3e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001310d:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0013112:	5f                   	pop    edi
c0013113:	5d                   	pop    ebp
c0013114:	50                   	push   eax
c0013115:	68 dc 30 02 c0       	push   0xc00230dc
c001311a:	e8 2f 3e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001311f:	83 c4 10             	add    esp,0x10
c0013122:	b0 01                	mov    al,0x1
c0013124:	81 c4 0c 10 00 00    	add    esp,0x100c
c001312a:	5b                   	pop    ebx
c001312b:	5e                   	pop    esi
c001312c:	5f                   	pop    edi
c001312d:	5d                   	pop    ebp
c001312e:	c3                   	ret    
c001312f:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0013134:	c1 ee 0c             	shr    esi,0xc
c0013137:	83 ec 08             	sub    esp,0x8
c001313a:	50                   	push   eax
c001313b:	68 00 31 02 c0       	push   0xc0023100
c0013140:	e8 09 3e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013145:	e8 82 be ff ff       	call   c000efcc <Phys::allocatePage()>
c001314a:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0013150:	89 c7                	mov    edi,eax
c0013152:	58                   	pop    eax
c0013153:	5a                   	pop    edx
c0013154:	51                   	push   ecx
c0013155:	68 24 31 02 c0       	push   0xc0023124
c001315a:	e8 ef 3d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001315f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013162:	83 c4 10             	add    esp,0x10
c0013165:	81 e2 ff 0f 00 00    	and    edx,0xfff
c001316b:	09 fa                	or     edx,edi
c001316d:	31 ff                	xor    edi,edi
c001316f:	81 ca 01 08 00 00    	or     edx,0x801
c0013175:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0013178:	89 dd                	mov    ebp,ebx
c001317a:	a1 0c 51 02 c0       	mov    eax,ds:0xc002510c
c001317f:	85 c0                	test   eax,eax
c0013181:	7e 61                	jle    c00131e4 <VAS::tryLoadBackOffDisk(unsigned long)+0x284>
c0013183:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0013188:	83 ec 08             	sub    esp,0x8
c001318b:	50                   	push   eax
c001318c:	68 d8 31 02 c0       	push   0xc00231d8
c0013191:	e8 b8 3d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013196:	89 34 24             	mov    DWORD PTR [esp],esi
c0013199:	e8 32 f1 ff ff       	call   c00122d0 <Virt::swapIDToSector(unsigned long)>
c001319e:	31 d2                	xor    edx,edx
c00131a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00131a3:	81 c5 00 02 00 00    	add    ebp,0x200
c00131a9:	6a 01                	push   0x1
c00131ab:	52                   	push   edx
c00131ac:	01 f8                	add    eax,edi
c00131ae:	83 c7 01             	add    edi,0x1
c00131b1:	50                   	push   eax
c00131b2:	0f be 05 18 51 02 c0 	movsx  eax,BYTE PTR ds:0xc0025118
c00131b9:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c00131c0:	50                   	push   eax
c00131c1:	e8 22 6f ff ff       	call   c000a0e8 <LogicalDisk::read(unsigned long long, int, void*)>
c00131c6:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00131cb:	83 c4 18             	add    esp,0x18
c00131ce:	50                   	push   eax
c00131cf:	68 fc 31 02 c0       	push   0xc00231fc
c00131d4:	e8 75 3d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00131d9:	83 c4 10             	add    esp,0x10
c00131dc:	39 3d 0c 51 02 c0    	cmp    DWORD PTR ds:0xc002510c,edi
c00131e2:	7f 9f                	jg     c0013183 <VAS::tryLoadBackOffDisk(unsigned long)+0x223>
c00131e4:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00131e9:	83 ec 08             	sub    esp,0x8
c00131ec:	50                   	push   eax
c00131ed:	68 48 31 02 c0       	push   0xc0023148
c00131f2:	e8 57 3d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00131f7:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c00131fc:	83 c4 0c             	add    esp,0xc
c00131ff:	83 e8 01             	sub    eax,0x1
c0013202:	50                   	push   eax
c0013203:	53                   	push   ebx
c0013204:	68 8f 34 02 c0       	push   0xc002348f
c0013209:	a3 c8 ce 02 c0       	mov    ds:0xc002cec8,eax
c001320e:	e8 3b 3d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013213:	89 34 24             	mov    DWORD PTR [esp],esi
c0013216:	e8 92 f0 ff ff       	call   c00122ad <Virt::freeSwapfilePage(unsigned long)>
c001321b:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0013221:	58                   	pop    eax
c0013222:	5a                   	pop    edx
c0013223:	51                   	push   ecx
c0013224:	68 6c 31 02 c0       	push   0xc002316c
c0013229:	e8 20 3d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001322e:	0f 20 d8             	mov    eax,cr3
c0013231:	0f 22 d8             	mov    cr3,eax
c0013234:	c7 04 24 a4 34 02 c0 	mov    DWORD PTR [esp],0xc00234a4
c001323b:	e8 0e 3d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013240:	8b 3d 8c d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d68c
c0013246:	5b                   	pop    ebx
c0013247:	5e                   	pop    esi
c0013248:	57                   	push   edi
c0013249:	68 90 31 02 c0       	push   0xc0023190
c001324e:	e8 fb 3c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013253:	5d                   	pop    ebp
c0013254:	58                   	pop    eax
c0013255:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c001325a:	50                   	push   eax
c001325b:	68 b4 31 02 c0       	push   0xc00231b4
c0013260:	e8 e9 3c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013265:	83 c4 10             	add    esp,0x10
c0013268:	b0 01                	mov    al,0x1
c001326a:	e9 b2 fd ff ff       	jmp    c0013021 <VAS::tryLoadBackOffDisk(unsigned long)+0xc1>
c001326f:	90                   	nop

c0013270 <VAS::lockPage(unsigned long)>:
c0013270:	56                   	push   esi
c0013271:	53                   	push   ebx
c0013272:	83 ec 04             	sub    esp,0x4
c0013275:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013279:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001327d:	50                   	push   eax
c001327e:	56                   	push   esi
c001327f:	e8 ec f1 ff ff       	call   c0012470 <VAS::getPageTableEntry(unsigned long)>
c0013284:	5a                   	pop    edx
c0013285:	59                   	pop    ecx
c0013286:	89 c3                	mov    ebx,eax
c0013288:	8b 00                	mov    eax,DWORD PTR [eax]
c001328a:	a8 01                	test   al,0x1
c001328c:	74 10                	je     c001329e <VAS::lockPage(unsigned long)+0x2e>
c001328e:	f6 c4 08             	test   ah,0x8
c0013291:	74 28                	je     c00132bb <VAS::lockPage(unsigned long)+0x4b>
c0013293:	80 e4 f7             	and    ah,0xf7
c0013296:	89 03                	mov    DWORD PTR [ebx],eax
c0013298:	83 c4 04             	add    esp,0x4
c001329b:	5b                   	pop    ebx
c001329c:	5e                   	pop    esi
c001329d:	c3                   	ret    
c001329e:	83 ec 08             	sub    esp,0x8
c00132a1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00132a6:	50                   	push   eax
c00132a7:	56                   	push   esi
c00132a8:	e8 b3 fc ff ff       	call   c0012f60 <VAS::tryLoadBackOffDisk(unsigned long)>
c00132ad:	83 c4 10             	add    esp,0x10
c00132b0:	84 c0                	test   al,al
c00132b2:	74 19                	je     c00132cd <VAS::lockPage(unsigned long)+0x5d>
c00132b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132b6:	f6 c4 08             	test   ah,0x8
c00132b9:	75 d8                	jne    c0013293 <VAS::lockPage(unsigned long)+0x23>
c00132bb:	c7 44 24 10 a8 2f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022fa8
c00132c3:	83 c4 04             	add    esp,0x4
c00132c6:	5b                   	pop    ebx
c00132c7:	5e                   	pop    esi
c00132c8:	e9 05 bb ff ff       	jmp    c000edd2 <KePanic(char const*)>
c00132cd:	83 ec 0c             	sub    esp,0xc
c00132d0:	68 68 32 02 c0       	push   0xc0023268
c00132d5:	e8 f8 ba ff ff       	call   c000edd2 <KePanic(char const*)>
c00132da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132dc:	83 c4 10             	add    esp,0x10
c00132df:	eb ad                	jmp    c001328e <VAS::lockPage(unsigned long)+0x1e>
c00132e1:	90                   	nop

c00132e2 <VAS::lockPages(unsigned long, int)>:
c00132e2:	55                   	push   ebp
c00132e3:	57                   	push   edi
c00132e4:	56                   	push   esi
c00132e5:	53                   	push   ebx
c00132e6:	83 ec 0c             	sub    esp,0xc
c00132e9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00132ed:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00132f1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00132f5:	85 ff                	test   edi,edi
c00132f7:	7e 1c                	jle    c0013315 <VAS::lockPages(unsigned long, int)+0x33>
c00132f9:	31 f6                	xor    esi,esi
c00132fb:	83 ec 08             	sub    esp,0x8
c00132fe:	83 c6 01             	add    esi,0x1
c0013301:	53                   	push   ebx
c0013302:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013308:	55                   	push   ebp
c0013309:	e8 62 ff ff ff       	call   c0013270 <VAS::lockPage(unsigned long)>
c001330e:	83 c4 10             	add    esp,0x10
c0013311:	39 f7                	cmp    edi,esi
c0013313:	75 e6                	jne    c00132fb <VAS::lockPages(unsigned long, int)+0x19>
c0013315:	83 c4 0c             	add    esp,0xc
c0013318:	5b                   	pop    ebx
c0013319:	5e                   	pop    esi
c001331a:	5f                   	pop    edi
c001331b:	5d                   	pop    ebp
c001331c:	c3                   	ret    
c001331d:	90                   	nop

c001331e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c001331e:	55                   	push   ebp
c001331f:	57                   	push   edi
c0013320:	56                   	push   esi
c0013321:	53                   	push   ebx
c0013322:	83 ec 28             	sub    esp,0x28
c0013325:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013329:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001332d:	50                   	push   eax
c001332e:	e8 5e ee ff ff       	call   c0012191 <Virt::allocateKernelVirtualPages(int)>
c0013333:	83 c4 0c             	add    esp,0xc
c0013336:	6a 07                	push   0x7
c0013338:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001333c:	52                   	push   edx
c001333d:	89 c5                	mov    ebp,eax
c001333f:	53                   	push   ebx
c0013340:	e8 2d f6 ff ff       	call   c0012972 <VAS::allocatePages(int, int)>
c0013345:	83 c4 10             	add    esp,0x10
c0013348:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001334c:	89 c7                	mov    edi,eax
c001334e:	85 c9                	test   ecx,ecx
c0013350:	74 2f                	je     c0013381 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0013352:	31 f6                	xor    esi,esi
c0013354:	e8 73 bc ff ff       	call   c000efcc <Phys::allocatePage()>
c0013359:	83 c6 01             	add    esi,0x1
c001335c:	6a 03                	push   0x3
c001335e:	55                   	push   ebp
c001335f:	50                   	push   eax
c0013360:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013364:	53                   	push   ebx
c0013365:	e8 00 f5 ff ff       	call   c001286a <VAS::mapPage(unsigned long, unsigned long, int)>
c001336a:	6a 07                	push   0x7
c001336c:	57                   	push   edi
c001336d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013371:	50                   	push   eax
c0013372:	53                   	push   ebx
c0013373:	e8 f2 f4 ff ff       	call   c001286a <VAS::mapPage(unsigned long, unsigned long, int)>
c0013378:	83 c4 20             	add    esp,0x20
c001337b:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c001337f:	75 d3                	jne    c0013354 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0013381:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013385:	89 28                	mov    DWORD PTR [eax],ebp
c0013387:	83 c4 1c             	add    esp,0x1c
c001338a:	89 f8                	mov    eax,edi
c001338c:	5b                   	pop    ebx
c001338d:	5e                   	pop    esi
c001338e:	5f                   	pop    edi
c001338f:	5d                   	pop    ebp
c0013390:	c3                   	ret    
c0013391:	90                   	nop

c0013392 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0013392:	53                   	push   ebx
c0013393:	83 ec 14             	sub    esp,0x14
c0013396:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001339a:	68 98 32 02 c0       	push   0xc0023298
c001339f:	e8 aa 3b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00133a4:	c7 04 24 f8 32 02 c0 	mov    DWORD PTR [esp],0xc00232f8
c00133ab:	e8 9e 3b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00133b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00133b4:	83 c4 18             	add    esp,0x18
c00133b7:	5b                   	pop    ebx
c00133b8:	e9 d2 f0 ff ff       	jmp    c001248f <Virt::freeKernelVirtualPages(unsigned long)>
c00133bd:	90                   	nop

c00133be <VAS::scanForEviction()>:
c00133be:	57                   	push   edi
c00133bf:	56                   	push   esi
c00133c0:	31 f6                	xor    esi,esi
c00133c2:	53                   	push   ebx
c00133c3:	83 ec 18             	sub    esp,0x18
c00133c6:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00133cb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00133cf:	50                   	push   eax
c00133d0:	68 74 33 02 c0       	push   0xc0023374
c00133d5:	e8 74 3b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00133da:	c7 04 24 ab 34 02 c0 	mov    DWORD PTR [esp],0xc00234ab
c00133e1:	e8 68 3b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00133e6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00133e9:	83 c4 10             	add    esp,0x10
c00133ec:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00133f2:	75 0e                	jne    c0013402 <VAS::scanForEviction()+0x44>
c00133f4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00133f7:	89 da                	mov    edx,ebx
c00133f9:	c1 ea 16             	shr    edx,0x16
c00133fc:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0013400:	74 5b                	je     c001345d <VAS::scanForEviction()+0x9f>
c0013402:	83 ec 08             	sub    esp,0x8
c0013405:	53                   	push   ebx
c0013406:	57                   	push   edi
c0013407:	e8 64 f0 ff ff       	call   c0012470 <VAS::getPageTableEntry(unsigned long)>
c001340c:	83 c4 10             	add    esp,0x10
c001340f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013411:	89 d1                	mov    ecx,edx
c0013413:	c1 e9 0c             	shr    ecx,0xc
c0013416:	74 10                	je     c0013428 <VAS::scanForEviction()+0x6a>
c0013418:	89 d1                	mov    ecx,edx
c001341a:	81 e1 01 08 00 00    	and    ecx,0x801
c0013420:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0013426:	74 40                	je     c0013468 <VAS::scanForEviction()+0xaa>
c0013428:	81 c3 00 10 00 00    	add    ebx,0x1000
c001342e:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0013434:	76 2d                	jbe    c0013463 <VAS::scanForEviction()+0xa5>
c0013436:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c001343d:	83 c6 01             	add    esi,0x1
c0013440:	83 fe 03             	cmp    esi,0x3
c0013443:	74 32                	je     c0013477 <VAS::scanForEviction()+0xb9>
c0013445:	31 db                	xor    ebx,ebx
c0013447:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001344d:	75 b3                	jne    c0013402 <VAS::scanForEviction()+0x44>
c001344f:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013452:	89 da                	mov    edx,ebx
c0013454:	c1 ea 16             	shr    edx,0x16
c0013457:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001345b:	75 a5                	jne    c0013402 <VAS::scanForEviction()+0x44>
c001345d:	81 c3 00 00 40 00    	add    ebx,0x400000
c0013463:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0013466:	eb 84                	jmp    c00133ec <VAS::scanForEviction()+0x2e>
c0013468:	f6 c2 20             	test   dl,0x20
c001346b:	74 13                	je     c0013480 <VAS::scanForEviction()+0xc2>
c001346d:	83 e2 df             	and    edx,0xffffffdf
c0013470:	89 10                	mov    DWORD PTR [eax],edx
c0013472:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0013475:	eb b1                	jmp    c0013428 <VAS::scanForEviction()+0x6a>
c0013477:	83 c4 10             	add    esp,0x10
c001347a:	31 c0                	xor    eax,eax
c001347c:	5b                   	pop    ebx
c001347d:	5e                   	pop    esi
c001347e:	5f                   	pop    edi
c001347f:	c3                   	ret    
c0013480:	89 d0                	mov    eax,edx
c0013482:	83 ec 08             	sub    esp,0x8
c0013485:	25 00 f0 ff ff       	and    eax,0xfffff000
c001348a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001348e:	53                   	push   ebx
c001348f:	68 c7 34 02 c0       	push   0xc00234c7
c0013494:	e8 b5 3a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013499:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c001349c:	58                   	pop    eax
c001349d:	5a                   	pop    edx
c001349e:	51                   	push   ecx
c001349f:	57                   	push   edi
c00134a0:	e8 f1 f8 ff ff       	call   c0012d96 <VAS::evict(unsigned long)>
c00134a5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00134a8:	5b                   	pop    ebx
c00134a9:	5e                   	pop    esi
c00134aa:	50                   	push   eax
c00134ab:	68 db 34 02 c0       	push   0xc00234db
c00134b0:	e8 99 3a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00134b5:	58                   	pop    eax
c00134b6:	5a                   	pop    edx
c00134b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00134bb:	50                   	push   eax
c00134bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00134c0:	68 ee 34 02 c0       	push   0xc00234ee
c00134c5:	e8 84 3a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00134ca:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00134cd:	81 c1 00 10 00 00    	add    ecx,0x1000
c00134d3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c00134d6:	8b 3d b0 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d6b0
c00134dc:	5b                   	pop    ebx
c00134dd:	5e                   	pop    esi
c00134de:	57                   	push   edi
c00134df:	68 94 33 02 c0       	push   0xc0023394
c00134e4:	e8 65 3a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00134e9:	83 c4 10             	add    esp,0x10
c00134ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00134f0:	83 c4 10             	add    esp,0x10
c00134f3:	5b                   	pop    ebx
c00134f4:	5e                   	pop    esi
c00134f5:	5f                   	pop    edi
c00134f6:	c3                   	ret    

c00134f7 <mapVASFirstTime>:
c00134f7:	55                   	push   ebp
c00134f8:	57                   	push   edi
c00134f9:	56                   	push   esi
c00134fa:	53                   	push   ebx
c00134fb:	83 ec 0c             	sub    esp,0xc
c00134fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013503:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0013506:	83 fa 01             	cmp    edx,0x1
c0013509:	0f 84 cb 00 00 00    	je     c00135da <mapVASFirstTime+0xe3>
c001350f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013512:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0013517:	bf 00 90 e7 01       	mov    edi,0x1e79000
c001351c:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c001351f:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c0013525:	c1 e5 15             	shl    ebp,0x15
c0013528:	29 eb                	sub    ebx,ebp
c001352a:	29 ef                	sub    edi,ebp
c001352c:	e8 9b ba ff ff       	call   c000efcc <Phys::allocatePage()>
c0013531:	83 ec 0c             	sub    esp,0xc
c0013534:	68 03 04 00 00       	push   0x403
c0013539:	6a 01                	push   0x1
c001353b:	53                   	push   ebx
c001353c:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0013542:	50                   	push   eax
c0013543:	56                   	push   esi
c0013544:	e8 1b f5 ff ff       	call   c0012a64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013549:	83 c4 20             	add    esp,0x20
c001354c:	39 fb                	cmp    ebx,edi
c001354e:	75 dc                	jne    c001352c <mapVASFirstTime+0x35>
c0013550:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0013555:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c001355a:	29 eb                	sub    ebx,ebp
c001355c:	29 ef                	sub    edi,ebp
c001355e:	e8 69 ba ff ff       	call   c000efcc <Phys::allocatePage()>
c0013563:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0013567:	83 fa 01             	cmp    edx,0x1
c001356a:	19 d2                	sbb    edx,edx
c001356c:	83 ec 0c             	sub    esp,0xc
c001356f:	83 e2 04             	and    edx,0x4
c0013572:	81 c2 03 04 00 00    	add    edx,0x403
c0013578:	52                   	push   edx
c0013579:	6a 01                	push   0x1
c001357b:	53                   	push   ebx
c001357c:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0013582:	50                   	push   eax
c0013583:	56                   	push   esi
c0013584:	e8 db f4 ff ff       	call   c0012a64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013589:	83 c4 20             	add    esp,0x20
c001358c:	39 df                	cmp    edi,ebx
c001358e:	75 ce                	jne    c001355e <mapVASFirstTime+0x67>
c0013590:	83 ec 0c             	sub    esp,0xc
c0013593:	bb 7c 70 02 c0       	mov    ebx,0xc002707c
c0013598:	6a 04                	push   0x4
c001359a:	81 eb 00 60 02 c0    	sub    ebx,0xc0026000
c00135a0:	6a ff                	push   0xffffffff
c00135a2:	c1 eb 0c             	shr    ebx,0xc
c00135a5:	53                   	push   ebx
c00135a6:	68 00 60 02 c0       	push   0xc0026000
c00135ab:	56                   	push   esi
c00135ac:	e8 59 f0 ff ff       	call   c001260a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00135b1:	83 c4 14             	add    esp,0x14
c00135b4:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c00135b9:	6a 04                	push   0x4
c00135bb:	6a ff                	push   0xffffffff
c00135bd:	53                   	push   ebx
c00135be:	68 00 60 02 c0       	push   0xc0026000
c00135c3:	50                   	push   eax
c00135c4:	e8 41 f0 ff ff       	call   c001260a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00135c9:	0f 20 d8             	mov    eax,cr3
c00135cc:	0f 22 d8             	mov    cr3,eax
c00135cf:	83 c4 20             	add    esp,0x20
c00135d2:	83 c4 0c             	add    esp,0xc
c00135d5:	5b                   	pop    ebx
c00135d6:	5e                   	pop    esi
c00135d7:	5f                   	pop    edi
c00135d8:	5d                   	pop    ebp
c00135d9:	c3                   	ret    
c00135da:	83 ec 0c             	sub    esp,0xc
c00135dd:	68 fb 34 02 c0       	push   0xc00234fb
c00135e2:	e8 67 39 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00135e7:	83 c4 10             	add    esp,0x10
c00135ea:	83 c4 0c             	add    esp,0xc
c00135ed:	5b                   	pop    ebx
c00135ee:	5e                   	pop    esi
c00135ef:	5f                   	pop    edi
c00135f0:	5d                   	pop    ebp
c00135f1:	c3                   	ret    

c00135f2 <SysEject(regs*)>:
c00135f2:	83 ec 0c             	sub    esp,0xc
c00135f5:	83 ca ff             	or     edx,0xffffffff
c00135f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135fc:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00135ff:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013604:	83 e9 41             	sub    ecx,0x41
c0013607:	83 f9 19             	cmp    ecx,0x19
c001360a:	77 18                	ja     c0013624 <SysEject(regs*)+0x32>
c001360c:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0013613:	85 c9                	test   ecx,ecx
c0013615:	74 0d                	je     c0013624 <SysEject(regs*)+0x32>
c0013617:	83 ec 0c             	sub    esp,0xc
c001361a:	51                   	push   ecx
c001361b:	e8 5e 6a ff ff       	call   c000a07e <LogicalDisk::eject()>
c0013620:	83 c4 10             	add    esp,0x10
c0013623:	99                   	cdq    
c0013624:	83 c4 0c             	add    esp,0xc
c0013627:	c3                   	ret    

c0013628 <SysExit(regs*)>:
c0013628:	83 ec 18             	sub    esp,0x18
c001362b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001362f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013632:	e8 61 2b 00 00       	call   c0016198 <terminateTask(int)>
c0013637:	83 c8 ff             	or     eax,0xffffffff
c001363a:	83 c4 1c             	add    esp,0x1c
c001363d:	89 c2                	mov    edx,eax
c001363f:	c3                   	ret    

c0013640 <SysGetCwd(regs*)>:
c0013640:	83 ec 10             	sub    esp,0x10
c0013643:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013647:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001364a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001364d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013652:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013655:	e8 52 47 ff ff       	call   c0007dac <Fs::getcwd(Process*, char*, int)>
c001365a:	83 c4 1c             	add    esp,0x1c
c001365d:	99                   	cdq    
c001365e:	c3                   	ret    

c001365f <SysGetPID(regs*)>:
c001365f:	83 ec 14             	sub    esp,0x14
c0013662:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013667:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001366a:	ff 30                	push   DWORD PTR [eax]
c001366c:	68 14 35 02 c0       	push   0xc0023514
c0013671:	e8 d8 38 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013676:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001367b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001367e:	8b 00                	mov    eax,DWORD PTR [eax]
c0013680:	83 c4 1c             	add    esp,0x1c
c0013683:	99                   	cdq    
c0013684:	c3                   	ret    

c0013685 <SysGetRAMData(regs*)>:
c0013685:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c001368a:	03 05 a8 cd 02 c0    	add    eax,DWORD PTR ds:0xc002cda8
c0013690:	8b 0d ac cd 02 c0    	mov    ecx,DWORD PTR ds:0xc002cdac
c0013696:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c001369c:	99                   	cdq    
c001369d:	f7 f9                	idiv   ecx
c001369f:	c1 e0 18             	shl    eax,0x18
c00136a2:	09 c8                	or     eax,ecx
c00136a4:	99                   	cdq    
c00136a5:	c3                   	ret    

c00136a6 <SysGetVGAPtr(regs*)>:
c00136a6:	55                   	push   ebp
c00136a7:	57                   	push   edi
c00136a8:	56                   	push   esi
c00136a9:	53                   	push   ebx
c00136aa:	83 ec 0c             	sub    esp,0xc
c00136ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00136b1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00136b4:	83 f8 ff             	cmp    eax,0xffffffff
c00136b7:	74 1b                	je     c00136d4 <SysGetVGAPtr(regs*)+0x2e>
c00136b9:	83 ec 0c             	sub    esp,0xc
c00136bc:	50                   	push   eax
c00136bd:	e8 8a 25 00 00       	call   c0015c4c <Thr::processFromPID(int)>
c00136c2:	83 c4 10             	add    esp,0x10
c00136c5:	31 d2                	xor    edx,edx
c00136c7:	89 c1                	mov    ecx,eax
c00136c9:	b8 01 00 00 00       	mov    eax,0x1
c00136ce:	85 c9                	test   ecx,ecx
c00136d0:	75 0a                	jne    c00136dc <SysGetVGAPtr(regs*)+0x36>
c00136d2:	eb 61                	jmp    c0013735 <SysGetVGAPtr(regs*)+0x8f>
c00136d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136d9:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00136dc:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00136e0:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00136e6:	74 0c                	je     c00136f4 <SysGetVGAPtr(regs*)+0x4e>
c00136e8:	83 ec 0c             	sub    esp,0xc
c00136eb:	55                   	push   ebp
c00136ec:	e8 4a db ff ff       	call   c001123b <setActiveTerminal(VgaText*)>
c00136f1:	83 c4 10             	add    esp,0x10
c00136f4:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00136f7:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00136fc:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00136ff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013701:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013704:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013707:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001370d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013710:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013713:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013719:	50                   	push   eax
c001371a:	50                   	push   eax
c001371b:	68 23 35 02 c0       	push   0xc0023523
c0013720:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013723:	05 a8 0f 00 00       	add    eax,0xfa8
c0013728:	50                   	push   eax
c0013729:	e8 22 cf fe ff       	call   c0000650 <strcpy>
c001372e:	83 c4 10             	add    esp,0x10
c0013731:	31 c0                	xor    eax,eax
c0013733:	31 d2                	xor    edx,edx
c0013735:	83 c4 0c             	add    esp,0xc
c0013738:	5b                   	pop    ebx
c0013739:	5e                   	pop    esi
c001373a:	5f                   	pop    edi
c001373b:	5d                   	pop    ebp
c001373c:	c3                   	ret    
c001373d:	66 90                	xchg   ax,ax
c001373f:	90                   	nop

c0013740 <SysKill(regs*)>:
c0013740:	53                   	push   ebx
c0013741:	83 ec 08             	sub    esp,0x8
c0013744:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013748:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c001374c:	75 16                	jne    c0013764 <SysKill(regs*)+0x24>
c001374e:	83 ec 0c             	sub    esp,0xc
c0013751:	68 2d 35 02 c0       	push   0xc002352d
c0013756:	e8 77 b6 ff ff       	call   c000edd2 <KePanic(char const*)>
c001375b:	83 c4 10             	add    esp,0x10
c001375e:	e9 89 00 00 00       	jmp    c00137ec <SysKill(regs*)+0xac>
c0013763:	90                   	nop
c0013764:	83 ec 0c             	sub    esp,0xc
c0013767:	68 cc d6 02 c0       	push   0xc002d6cc
c001376c:	e8 a7 cf 00 00       	call   c0020718 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013771:	8d 76 00             	lea    esi,[esi+0x0]
c0013774:	83 c4 10             	add    esp,0x10
c0013777:	85 c0                	test   eax,eax
c0013779:	74 19                	je     c0013794 <SysKill(regs*)+0x54>
c001377b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001377e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013781:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013783:	74 33                	je     c00137b8 <SysKill(regs*)+0x78>
c0013785:	52                   	push   edx
c0013786:	52                   	push   edx
c0013787:	50                   	push   eax
c0013788:	68 cc d6 02 c0       	push   0xc002d6cc
c001378d:	e8 92 d4 00 00       	call   c0020c24 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013792:	eb e0                	jmp    c0013774 <SysKill(regs*)+0x34>
c0013794:	83 ec 0c             	sub    esp,0xc
c0013797:	68 c0 d6 02 c0       	push   0xc002d6c0
c001379c:	e8 77 cf 00 00       	call   c0020718 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00137a1:	8d 76 00             	lea    esi,[esi+0x0]
c00137a4:	83 c4 10             	add    esp,0x10
c00137a7:	85 c0                	test   eax,eax
c00137a9:	74 41                	je     c00137ec <SysKill(regs*)+0xac>
c00137ab:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00137ae:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00137b1:	39 0a                	cmp    DWORD PTR [edx],ecx
c00137b3:	75 27                	jne    c00137dc <SysKill(regs*)+0x9c>
c00137b5:	8d 76 00             	lea    esi,[esi+0x0]
c00137b8:	51                   	push   ecx
c00137b9:	51                   	push   ecx
c00137ba:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00137bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00137c5:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00137cb:	e8 40 c7 ff ff       	call   c000ff10 <KeRaiseSignal(SigHandlerBlock*, int)>
c00137d0:	83 c4 10             	add    esp,0x10
c00137d3:	31 c0                	xor    eax,eax
c00137d5:	31 d2                	xor    edx,edx
c00137d7:	eb 1b                	jmp    c00137f4 <SysKill(regs*)+0xb4>
c00137d9:	8d 76 00             	lea    esi,[esi+0x0]
c00137dc:	52                   	push   edx
c00137dd:	52                   	push   edx
c00137de:	50                   	push   eax
c00137df:	68 c0 d6 02 c0       	push   0xc002d6c0
c00137e4:	e8 3b d4 00 00       	call   c0020c24 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00137e9:	eb b9                	jmp    c00137a4 <SysKill(regs*)+0x64>
c00137eb:	90                   	nop
c00137ec:	83 c8 ff             	or     eax,0xffffffff
c00137ef:	89 c2                	mov    edx,eax
c00137f1:	8d 76 00             	lea    esi,[esi+0x0]
c00137f4:	83 c4 08             	add    esp,0x8
c00137f7:	5b                   	pop    ebx
c00137f8:	c3                   	ret    

c00137f9 <SysLoadDLL(regs*)>:
c00137f9:	56                   	push   esi
c00137fa:	31 d2                	xor    edx,edx
c00137fc:	53                   	push   ebx
c00137fd:	b8 01 00 00 00       	mov    eax,0x1
c0013802:	51                   	push   ecx
c0013803:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013807:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001380b:	0f 84 8c 00 00 00    	je     c001389d <SysLoadDLL(regs*)+0xa4>
c0013811:	83 ec 0c             	sub    esp,0xc
c0013814:	68 14 01 00 00       	push   0x114
c0013819:	e8 6e b2 ff ff       	call   c000ea8c <malloc>
c001381e:	83 c4 0c             	add    esp,0xc
c0013821:	89 c3                	mov    ebx,eax
c0013823:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013828:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001382b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001382e:	53                   	push   ebx
c001382f:	e8 f8 48 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0013834:	83 c4 10             	add    esp,0x10
c0013837:	31 d2                	xor    edx,edx
c0013839:	85 db                	test   ebx,ebx
c001383b:	b8 02 00 00 00       	mov    eax,0x2
c0013840:	74 5b                	je     c001389d <SysLoadDLL(regs*)+0xa4>
c0013842:	83 ec 0c             	sub    esp,0xc
c0013845:	53                   	push   ebx
c0013846:	e8 c3 4b ff ff       	call   c000840e <File::exists()>
c001384b:	83 c4 10             	add    esp,0x10
c001384e:	84 c0                	test   al,al
c0013850:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013852:	75 11                	jne    c0013865 <SysLoadDLL(regs*)+0x6c>
c0013854:	83 ec 0c             	sub    esp,0xc
c0013857:	53                   	push   ebx
c0013858:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001385b:	83 c4 10             	add    esp,0x10
c001385e:	b8 03 00 00 00       	mov    eax,0x3
c0013863:	eb 36                	jmp    c001389b <SysLoadDLL(regs*)+0xa2>
c0013865:	83 ec 0c             	sub    esp,0xc
c0013868:	53                   	push   ebx
c0013869:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001386c:	58                   	pop    eax
c001386d:	5a                   	pop    edx
c001386e:	6a 00                	push   0x0
c0013870:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013873:	e8 51 16 00 00       	call   c0014ec9 <Thr::loadDLL(char const*, bool)>
c0013878:	83 c4 10             	add    esp,0x10
c001387b:	31 d2                	xor    edx,edx
c001387d:	89 c1                	mov    ecx,eax
c001387f:	b8 04 00 00 00       	mov    eax,0x4
c0013884:	85 c9                	test   ecx,ecx
c0013886:	74 15                	je     c001389d <SysLoadDLL(regs*)+0xa4>
c0013888:	53                   	push   ebx
c0013889:	53                   	push   ebx
c001388a:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c0013890:	51                   	push   ecx
c0013891:	e8 94 18 00 00       	call   c001512a <Thr::executeDLL(unsigned long, void*)>
c0013896:	83 c4 10             	add    esp,0x10
c0013899:	31 c0                	xor    eax,eax
c001389b:	31 d2                	xor    edx,edx
c001389d:	59                   	pop    ecx
c001389e:	5b                   	pop    ebx
c001389f:	5e                   	pop    esi
c00138a0:	c3                   	ret    

c00138a1 <SysRead(regs*)>:
c00138a1:	57                   	push   edi
c00138a2:	56                   	push   esi
c00138a3:	53                   	push   ebx
c00138a4:	83 ec 10             	sub    esp,0x10
c00138a7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00138ab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00138ae:	83 f8 02             	cmp    eax,0x2
c00138b1:	77 10                	ja     c00138c3 <SysRead(regs*)+0x22>
c00138b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138b8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00138bb:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00138c1:	eb 0e                	jmp    c00138d1 <SysRead(regs*)+0x30>
c00138c3:	83 ec 0c             	sub    esp,0xc
c00138c6:	50                   	push   eax
c00138c7:	e8 59 e7 ff ff       	call   c0012025 <KeGetFileFromDescriptor(int)>
c00138cc:	83 c4 10             	add    esp,0x10
c00138cf:	89 c1                	mov    ecx,eax
c00138d1:	83 c8 ff             	or     eax,0xffffffff
c00138d4:	85 c9                	test   ecx,ecx
c00138d6:	89 c2                	mov    edx,eax
c00138d8:	74 28                	je     c0013902 <SysRead(regs*)+0x61>
c00138da:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00138e2:	83 ec 0c             	sub    esp,0xc
c00138e5:	31 ff                	xor    edi,edi
c00138e7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00138eb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00138ed:	52                   	push   edx
c00138ee:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00138f1:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00138f4:	57                   	push   edi
c00138f5:	56                   	push   esi
c00138f6:	51                   	push   ecx
c00138f7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00138fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00138fe:	83 c4 20             	add    esp,0x20
c0013901:	99                   	cdq    
c0013902:	83 c4 10             	add    esp,0x10
c0013905:	5b                   	pop    ebx
c0013906:	5e                   	pop    esi
c0013907:	5f                   	pop    edi
c0013908:	c3                   	ret    

c0013909 <SysRegisterSignal(regs*)>:
c0013909:	83 ec 18             	sub    esp,0x18
c001390c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013910:	6a 00                	push   0x0
c0013912:	6a 00                	push   0x0
c0013914:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013917:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001391a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001391f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013922:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013928:	e8 ad c5 ff ff       	call   c000feda <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c001392d:	83 c4 2c             	add    esp,0x2c
c0013930:	99                   	cdq    
c0013931:	c3                   	ret    

c0013932 <SysRegistryGetTypeFromPath(regs*)>:
c0013932:	53                   	push   ebx
c0013933:	81 ec 40 01 00 00    	sub    esp,0x140
c0013939:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013940:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013943:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013946:	e8 0c 9b ff ff       	call   c000d457 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001394b:	83 c4 10             	add    esp,0x10
c001394e:	85 c0                	test   eax,eax
c0013950:	89 c1                	mov    ecx,eax
c0013952:	74 15                	je     c0013969 <SysRegistryGetTypeFromPath(regs*)+0x37>
c0013954:	50                   	push   eax
c0013955:	8d 44 24 08          	lea    eax,[esp+0x8]
c0013959:	50                   	push   eax
c001395a:	51                   	push   ecx
c001395b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001395e:	e8 d9 96 ff ff       	call   c000d03c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013963:	83 c4 10             	add    esp,0x10
c0013966:	99                   	cdq    
c0013967:	eb 05                	jmp    c001396e <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0013969:	83 c8 ff             	or     eax,0xffffffff
c001396c:	89 c2                	mov    edx,eax
c001396e:	81 c4 38 01 00 00    	add    esp,0x138
c0013974:	5b                   	pop    ebx
c0013975:	c3                   	ret    

c0013976 <SysRegistryReadExtent(regs*)>:
c0013976:	83 ec 1c             	sub    esp,0x1c
c0013979:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001397d:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013980:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013983:	85 c0                	test   eax,eax
c0013985:	79 1f                	jns    c00139a6 <SysRegistryReadExtent(regs*)+0x30>
c0013987:	52                   	push   edx
c0013988:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001398d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013991:	52                   	push   edx
c0013992:	50                   	push   eax
c0013993:	51                   	push   ecx
c0013994:	e8 95 95 ff ff       	call   c000cf2e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013999:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001399d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00139a1:	83 c4 10             	add    esp,0x10
c00139a4:	eb 14                	jmp    c00139ba <SysRegistryReadExtent(regs*)+0x44>
c00139a6:	83 ec 04             	sub    esp,0x4
c00139a9:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00139ac:	50                   	push   eax
c00139ad:	51                   	push   ecx
c00139ae:	e8 19 90 ff ff       	call   c000c9cc <CmGetString(Reghive_Tag*, int, char*)>
c00139b3:	83 c4 10             	add    esp,0x10
c00139b6:	31 c0                	xor    eax,eax
c00139b8:	31 d2                	xor    edx,edx
c00139ba:	83 c4 1c             	add    esp,0x1c
c00139bd:	c3                   	ret    

c00139be <SysRegistryPathToExtentLookup(regs*)>:
c00139be:	83 ec 14             	sub    esp,0x14
c00139c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00139c5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00139c8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00139cb:	e8 87 9a ff ff       	call   c000d457 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00139d0:	83 c4 1c             	add    esp,0x1c
c00139d3:	99                   	cdq    
c00139d4:	c3                   	ret    

c00139d5 <SysRegistryEnterDirectory(regs*)>:
c00139d5:	83 ec 14             	sub    esp,0x14
c00139d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00139dc:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00139df:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00139e2:	e8 5c 90 ff ff       	call   c000ca43 <CmEnterDirectory(Reghive_Tag*, int)>
c00139e7:	83 c4 1c             	add    esp,0x1c
c00139ea:	99                   	cdq    
c00139eb:	c3                   	ret    

c00139ec <SysRegistryGetNext(regs*)>:
c00139ec:	83 ec 14             	sub    esp,0x14
c00139ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00139f3:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00139f6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00139f9:	e8 84 90 ff ff       	call   c000ca82 <CmGetNext(Reghive_Tag*, int)>
c00139fe:	83 c4 1c             	add    esp,0x1c
c0013a01:	99                   	cdq    
c0013a02:	c3                   	ret    

c0013a03 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013a03:	57                   	push   edi
c0013a04:	56                   	push   esi
c0013a05:	53                   	push   ebx
c0013a06:	81 ec 34 01 00 00    	sub    esp,0x134
c0013a0c:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013a13:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013a17:	57                   	push   edi
c0013a18:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013a1b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013a1e:	e8 19 96 ff ff       	call   c000d03c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013a23:	89 c3                	mov    ebx,eax
c0013a25:	58                   	pop    eax
c0013a26:	5a                   	pop    edx
c0013a27:	57                   	push   edi
c0013a28:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013a2b:	e8 20 cc fe ff       	call   c0000650 <strcpy>
c0013a30:	81 c4 40 01 00 00    	add    esp,0x140
c0013a36:	89 d8                	mov    eax,ebx
c0013a38:	5b                   	pop    ebx
c0013a39:	99                   	cdq    
c0013a3a:	5e                   	pop    esi
c0013a3b:	5f                   	pop    edi
c0013a3c:	c3                   	ret    

c0013a3d <SysRegistryOpen(regs*)>:
c0013a3d:	83 ec 18             	sub    esp,0x18
c0013a40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a44:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013a47:	e8 10 8e ff ff       	call   c000c85c <CmOpen(char const*)>
c0013a4c:	83 c4 1c             	add    esp,0x1c
c0013a4f:	99                   	cdq    
c0013a50:	c3                   	ret    

c0013a51 <SysRegistryClose(regs*)>:
c0013a51:	83 ec 18             	sub    esp,0x18
c0013a54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a58:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013a5b:	e8 1a 8f ff ff       	call   c000c97a <CmClose(Reghive_Tag*)>
c0013a60:	31 c0                	xor    eax,eax
c0013a62:	31 d2                	xor    edx,edx
c0013a64:	83 c4 1c             	add    esp,0x1c
c0013a67:	c3                   	ret    

c0013a68 <SysRegistryEasyReadString(regs*)>:
c0013a68:	57                   	push   edi
c0013a69:	56                   	push   esi
c0013a6a:	53                   	push   ebx
c0013a6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013a6f:	83 ec 0c             	sub    esp,0xc
c0013a72:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013a75:	e8 e2 8d ff ff       	call   c000c85c <CmOpen(char const*)>
c0013a7a:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0013a7d:	5a                   	pop    edx
c0013a7e:	59                   	pop    ecx
c0013a7f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013a82:	89 c3                	mov    ebx,eax
c0013a84:	50                   	push   eax
c0013a85:	e8 cd 99 ff ff       	call   c000d457 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013a8a:	83 c4 10             	add    esp,0x10
c0013a8d:	89 c1                	mov    ecx,eax
c0013a8f:	b8 01 00 00 00       	mov    eax,0x1
c0013a94:	85 c9                	test   ecx,ecx
c0013a96:	7e 16                	jle    c0013aae <SysRegistryEasyReadString(regs*)+0x46>
c0013a98:	50                   	push   eax
c0013a99:	57                   	push   edi
c0013a9a:	51                   	push   ecx
c0013a9b:	53                   	push   ebx
c0013a9c:	e8 2b 8f ff ff       	call   c000c9cc <CmGetString(Reghive_Tag*, int, char*)>
c0013aa1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013aa4:	e8 d1 8e ff ff       	call   c000c97a <CmClose(Reghive_Tag*)>
c0013aa9:	83 c4 10             	add    esp,0x10
c0013aac:	31 c0                	xor    eax,eax
c0013aae:	5b                   	pop    ebx
c0013aaf:	31 d2                	xor    edx,edx
c0013ab1:	5e                   	pop    esi
c0013ab2:	5f                   	pop    edi
c0013ab3:	c3                   	ret    

c0013ab4 <SysRegistryEasyReadInteger(regs*)>:
c0013ab4:	56                   	push   esi
c0013ab5:	53                   	push   ebx
c0013ab6:	83 ec 10             	sub    esp,0x10
c0013ab9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013abd:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013ac0:	e8 97 8d ff ff       	call   c000c85c <CmOpen(char const*)>
c0013ac5:	5a                   	pop    edx
c0013ac6:	59                   	pop    ecx
c0013ac7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013aca:	89 c3                	mov    ebx,eax
c0013acc:	50                   	push   eax
c0013acd:	e8 85 99 ff ff       	call   c000d457 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013ad2:	83 c4 10             	add    esp,0x10
c0013ad5:	89 c1                	mov    ecx,eax
c0013ad7:	b8 01 00 00 00       	mov    eax,0x1
c0013adc:	85 c9                	test   ecx,ecx
c0013ade:	7e 18                	jle    c0013af8 <SysRegistryEasyReadInteger(regs*)+0x44>
c0013ae0:	50                   	push   eax
c0013ae1:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013ae4:	51                   	push   ecx
c0013ae5:	53                   	push   ebx
c0013ae6:	e8 43 94 ff ff       	call   c000cf2e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013aeb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013aee:	e8 87 8e ff ff       	call   c000c97a <CmClose(Reghive_Tag*)>
c0013af3:	83 c4 10             	add    esp,0x10
c0013af6:	31 c0                	xor    eax,eax
c0013af8:	59                   	pop    ecx
c0013af9:	31 d2                	xor    edx,edx
c0013afb:	5b                   	pop    ebx
c0013afc:	5e                   	pop    esi
c0013afd:	c3                   	ret    

c0013afe <SysSbrk(regs*)>:
c0013afe:	56                   	push   esi
c0013aff:	53                   	push   ebx
c0013b00:	50                   	push   eax
c0013b01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b06:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b0a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b0d:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013b10:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013b16:	85 db                	test   ebx,ebx
c0013b18:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013b1b:	74 02                	je     c0013b1f <SysSbrk(regs*)+0x21>
c0013b1d:	79 06                	jns    c0013b25 <SysSbrk(regs*)+0x27>
c0013b1f:	89 f0                	mov    eax,esi
c0013b21:	31 d2                	xor    edx,edx
c0013b23:	eb 2a                	jmp    c0013b4f <SysSbrk(regs*)+0x51>
c0013b25:	83 c8 ff             	or     eax,0xffffffff
c0013b28:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013b2e:	89 c2                	mov    edx,eax
c0013b30:	77 1d                	ja     c0013b4f <SysSbrk(regs*)+0x51>
c0013b32:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013b38:	50                   	push   eax
c0013b39:	68 07 0c 00 00       	push   0xc07
c0013b3e:	c1 ea 0c             	shr    edx,0xc
c0013b41:	52                   	push   edx
c0013b42:	51                   	push   ecx
c0013b43:	e8 2a ee ff ff       	call   c0012972 <VAS::allocatePages(int, int)>
c0013b48:	89 f0                	mov    eax,esi
c0013b4a:	31 d2                	xor    edx,edx
c0013b4c:	83 c4 10             	add    esp,0x10
c0013b4f:	59                   	pop    ecx
c0013b50:	5b                   	pop    ebx
c0013b51:	5e                   	pop    esi
c0013b52:	c3                   	ret    

c0013b53 <SysSetCwd(regs*)>:
c0013b53:	83 ec 14             	sub    esp,0x14
c0013b56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b5a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013b5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b62:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013b65:	e8 43 49 ff ff       	call   c00084ad <Fs::setcwd(Process*, char*)>
c0013b6a:	83 c4 1c             	add    esp,0x1c
c0013b6d:	99                   	cdq    
c0013b6e:	c3                   	ret    

c0013b6f <SysSetTime(regs*)>:
c0013b6f:	55                   	push   ebp
c0013b70:	31 d2                	xor    edx,edx
c0013b72:	57                   	push   edi
c0013b73:	56                   	push   esi
c0013b74:	53                   	push   ebx
c0013b75:	bb 3c 00 00 00       	mov    ebx,0x3c
c0013b7a:	83 ec 30             	sub    esp,0x30
c0013b7d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0013b81:	8b 71 20             	mov    esi,DWORD PTR [ecx+0x20]
c0013b84:	89 f0                	mov    eax,esi
c0013b86:	f7 f3                	div    ebx
c0013b88:	89 d7                	mov    edi,edx
c0013b8a:	31 d2                	xor    edx,edx
c0013b8c:	f7 f3                	div    ebx
c0013b8e:	bb 10 0e 00 00       	mov    ebx,0xe10
c0013b93:	89 f0                	mov    eax,esi
c0013b95:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b99:	31 d2                	xor    edx,edx
c0013b9b:	f7 f3                	div    ebx
c0013b9d:	bb 18 00 00 00       	mov    ebx,0x18
c0013ba2:	31 d2                	xor    edx,edx
c0013ba4:	f7 f3                	div    ebx
c0013ba6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013ba9:	bb 0c 00 00 00       	mov    ebx,0xc
c0013bae:	89 c6                	mov    esi,eax
c0013bb0:	c1 e8 05             	shr    eax,0x5
c0013bb3:	83 e6 1f             	and    esi,0x1f
c0013bb6:	46                   	inc    esi
c0013bb7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0013bbb:	31 d2                	xor    edx,edx
c0013bbd:	f7 f3                	div    ebx
c0013bbf:	31 db                	xor    ebx,ebx
c0013bc1:	57                   	push   edi
c0013bc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013bc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bca:	0f b7 69 24          	movzx  ebp,WORD PTR [ecx+0x24]
c0013bce:	55                   	push   ebp
c0013bcf:	52                   	push   edx
c0013bd0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0013bd4:	56                   	push   esi
c0013bd5:	68 4e 35 02 c0       	push   0xc002354e
c0013bda:	e8 6f 33 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013bdf:	83 c4 1c             	add    esp,0x1c
c0013be2:	57                   	push   edi
c0013be3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013be7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013beb:	55                   	push   ebp
c0013bec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013bf0:	52                   	push   edx
c0013bf1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013bf5:	56                   	push   esi
c0013bf6:	68 70 35 02 c0       	push   0xc0023570
c0013bfb:	e8 4e 33 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013c00:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0013c05:	31 c9                	xor    ecx,ecx
c0013c07:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013c0b:	8a 5c 24 30          	mov    bl,BYTE PTR [esp+0x30]
c0013c0f:	8a 7c 24 2c          	mov    bh,BYTE PTR [esp+0x2c]
c0013c13:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013c19:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0013c1d:	89 f0                	mov    eax,esi
c0013c1f:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0013c23:	88 c1                	mov    cl,al
c0013c25:	89 e8                	mov    eax,ebp
c0013c27:	88 d5                	mov    ch,dl
c0013c29:	83 c4 1c             	add    esp,0x1c
c0013c2c:	c1 e0 10             	shl    eax,0x10
c0013c2f:	0f b7 d1             	movzx  edx,cx
c0013c32:	09 c2                	or     edx,eax
c0013c34:	89 f8                	mov    eax,edi
c0013c36:	c1 e0 10             	shl    eax,0x10
c0013c39:	89 d1                	mov    ecx,edx
c0013c3b:	89 da                	mov    edx,ebx
c0013c3d:	81 e2 ff ff 00 ff    	and    edx,0xff00ffff
c0013c43:	09 c2                	or     edx,eax
c0013c45:	52                   	push   edx
c0013c46:	51                   	push   ecx
c0013c47:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013c4b:	e8 2a 51 ff ff       	call   c0008d7a <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013c50:	83 c4 3c             	add    esp,0x3c
c0013c53:	31 d2                	xor    edx,edx
c0013c55:	5b                   	pop    ebx
c0013c56:	5e                   	pop    esi
c0013c57:	83 f0 01             	xor    eax,0x1
c0013c5a:	5f                   	pop    edi
c0013c5b:	0f b6 c0             	movzx  eax,al
c0013c5e:	5d                   	pop    ebp
c0013c5f:	c3                   	ret    

c0013c60 <SysSymlink(regs*)>:
c0013c60:	56                   	push   esi
c0013c61:	83 c8 ff             	or     eax,0xffffffff
c0013c64:	53                   	push   ebx
c0013c65:	89 c2                	mov    edx,eax
c0013c67:	81 ec 34 02 00 00    	sub    esp,0x234
c0013c6d:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0013c74:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013c78:	74 50                	je     c0013cca <SysSymlink(regs*)+0x6a>
c0013c7a:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0013c7d:	85 c9                	test   ecx,ecx
c0013c7f:	74 49                	je     c0013cca <SysSymlink(regs*)+0x6a>
c0013c81:	6a 01                	push   0x1
c0013c83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c88:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c8b:	05 0c 01 00 00       	add    eax,0x10c
c0013c90:	50                   	push   eax
c0013c91:	51                   	push   ecx
c0013c92:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013c96:	56                   	push   esi
c0013c97:	e8 64 41 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0013c9c:	6a 01                	push   0x1
c0013c9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ca3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ca6:	05 0c 01 00 00       	add    eax,0x10c
c0013cab:	50                   	push   eax
c0013cac:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013caf:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0013cb6:	53                   	push   ebx
c0013cb7:	e8 44 41 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0013cbc:	83 c4 18             	add    esp,0x18
c0013cbf:	56                   	push   esi
c0013cc0:	53                   	push   ebx
c0013cc1:	e8 68 3d ff ff       	call   c0007a2e <KeCreateSymlink(char const*, char const*)>
c0013cc6:	83 c4 10             	add    esp,0x10
c0013cc9:	99                   	cdq    
c0013cca:	81 c4 34 02 00 00    	add    esp,0x234
c0013cd0:	5b                   	pop    ebx
c0013cd1:	5e                   	pop    esi
c0013cd2:	c3                   	ret    

c0013cd3 <SysTimezone(regs*)>:
c0013cd3:	83 ec 0c             	sub    esp,0xc
c0013cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cda:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0013cde:	75 17                	jne    c0013cf7 <SysTimezone(regs*)+0x24>
c0013ce0:	83 ec 0c             	sub    esp,0xc
c0013ce3:	68 92 35 02 c0       	push   0xc0023592
c0013ce8:	e8 61 32 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013ced:	83 c8 ff             	or     eax,0xffffffff
c0013cf0:	83 c4 10             	add    esp,0x10
c0013cf3:	89 c2                	mov    edx,eax
c0013cf5:	eb 17                	jmp    c0013d0e <SysTimezone(regs*)+0x3b>
c0013cf7:	83 ec 0c             	sub    esp,0xc
c0013cfa:	68 a7 35 02 c0       	push   0xc00235a7
c0013cff:	e8 4a 32 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013d04:	83 c4 10             	add    esp,0x10
c0013d07:	b8 01 00 00 00       	mov    eax,0x1
c0013d0c:	31 d2                	xor    edx,edx
c0013d0e:	83 c4 0c             	add    esp,0xc
c0013d11:	c3                   	ret    

c0013d12 <SysTruncate(regs*)>:
c0013d12:	55                   	push   ebp
c0013d13:	57                   	push   edi
c0013d14:	31 ff                	xor    edi,edi
c0013d16:	56                   	push   esi
c0013d17:	53                   	push   ebx
c0013d18:	83 ec 0c             	sub    esp,0xc
c0013d1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d1f:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013d22:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0013d26:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0013d29:	89 ce                	mov    esi,ecx
c0013d2b:	0f 84 9a 00 00 00    	je     c0013dcb <SysTruncate(regs*)+0xb9>
c0013d31:	83 ec 0c             	sub    esp,0xc
c0013d34:	68 14 01 00 00       	push   0x114
c0013d39:	e8 4e ad ff ff       	call   c000ea8c <malloc>
c0013d3e:	83 c4 0c             	add    esp,0xc
c0013d41:	89 c3                	mov    ebx,eax
c0013d43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d48:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013d4b:	55                   	push   ebp
c0013d4c:	53                   	push   ebx
c0013d4d:	e8 da 43 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0013d52:	83 c4 10             	add    esp,0x10
c0013d55:	31 d2                	xor    edx,edx
c0013d57:	85 db                	test   ebx,ebx
c0013d59:	b8 03 00 00 00       	mov    eax,0x3
c0013d5e:	0f 84 a2 00 00 00    	je     c0013e06 <SysTruncate(regs*)+0xf4>
c0013d64:	51                   	push   ecx
c0013d65:	51                   	push   ecx
c0013d66:	6a 02                	push   0x2
c0013d68:	53                   	push   ebx
c0013d69:	e8 dc 43 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0013d6e:	83 c4 10             	add    esp,0x10
c0013d71:	85 c0                	test   eax,eax
c0013d73:	74 13                	je     c0013d88 <SysTruncate(regs*)+0x76>
c0013d75:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d77:	83 ec 0c             	sub    esp,0xc
c0013d7a:	53                   	push   ebx
c0013d7b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013d7e:	83 c4 10             	add    esp,0x10
c0013d81:	b8 04 00 00 00       	mov    eax,0x4
c0013d86:	eb 7c                	jmp    c0013e04 <SysTruncate(regs*)+0xf2>
c0013d88:	52                   	push   edx
c0013d89:	57                   	push   edi
c0013d8a:	56                   	push   esi
c0013d8b:	53                   	push   ebx
c0013d8c:	e8 cd 44 ff ff       	call   c000825e <File::truncate(unsigned long long)>
c0013d91:	83 c4 10             	add    esp,0x10
c0013d94:	85 c0                	test   eax,eax
c0013d96:	74 1b                	je     c0013db3 <SysTruncate(regs*)+0xa1>
c0013d98:	83 ec 0c             	sub    esp,0xc
c0013d9b:	53                   	push   ebx
c0013d9c:	e8 07 44 ff ff       	call   c00081a8 <File::close()>
c0013da1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013da3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013da6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013da9:	83 c4 10             	add    esp,0x10
c0013dac:	b8 05 00 00 00       	mov    eax,0x5
c0013db1:	eb 51                	jmp    c0013e04 <SysTruncate(regs*)+0xf2>
c0013db3:	83 ec 0c             	sub    esp,0xc
c0013db6:	53                   	push   ebx
c0013db7:	e8 ec 43 ff ff       	call   c00081a8 <File::close()>
c0013dbc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dbe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013dc1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013dc4:	83 c4 10             	add    esp,0x10
c0013dc7:	31 c0                	xor    eax,eax
c0013dc9:	eb 39                	jmp    c0013e04 <SysTruncate(regs*)+0xf2>
c0013dcb:	31 d2                	xor    edx,edx
c0013dcd:	83 fd 02             	cmp    ebp,0x2
c0013dd0:	b8 01 00 00 00       	mov    eax,0x1
c0013dd5:	7e 2f                	jle    c0013e06 <SysTruncate(regs*)+0xf4>
c0013dd7:	83 ec 0c             	sub    esp,0xc
c0013dda:	51                   	push   ecx
c0013ddb:	e8 45 e2 ff ff       	call   c0012025 <KeGetFileFromDescriptor(int)>
c0013de0:	83 c4 10             	add    esp,0x10
c0013de3:	31 d2                	xor    edx,edx
c0013de5:	89 c1                	mov    ecx,eax
c0013de7:	b8 02 00 00 00       	mov    eax,0x2
c0013dec:	85 c9                	test   ecx,ecx
c0013dee:	74 16                	je     c0013e06 <SysTruncate(regs*)+0xf4>
c0013df0:	50                   	push   eax
c0013df1:	57                   	push   edi
c0013df2:	56                   	push   esi
c0013df3:	51                   	push   ecx
c0013df4:	e8 65 44 ff ff       	call   c000825e <File::truncate(unsigned long long)>
c0013df9:	83 c4 10             	add    esp,0x10
c0013dfc:	85 c0                	test   eax,eax
c0013dfe:	0f 95 c0             	setne  al
c0013e01:	0f b6 c0             	movzx  eax,al
c0013e04:	31 d2                	xor    edx,edx
c0013e06:	83 c4 0c             	add    esp,0xc
c0013e09:	5b                   	pop    ebx
c0013e0a:	5e                   	pop    esi
c0013e0b:	5f                   	pop    edi
c0013e0c:	5d                   	pop    ebp
c0013e0d:	c3                   	ret    

c0013e0e <SysWrite(regs*)>:
c0013e0e:	57                   	push   edi
c0013e0f:	56                   	push   esi
c0013e10:	53                   	push   ebx
c0013e11:	83 ec 10             	sub    esp,0x10
c0013e14:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013e18:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013e1b:	83 f8 02             	cmp    eax,0x2
c0013e1e:	77 10                	ja     c0013e30 <SysWrite(regs*)+0x22>
c0013e20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e25:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013e28:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013e2e:	eb 0e                	jmp    c0013e3e <SysWrite(regs*)+0x30>
c0013e30:	83 ec 0c             	sub    esp,0xc
c0013e33:	50                   	push   eax
c0013e34:	e8 ec e1 ff ff       	call   c0012025 <KeGetFileFromDescriptor(int)>
c0013e39:	83 c4 10             	add    esp,0x10
c0013e3c:	89 c1                	mov    ecx,eax
c0013e3e:	83 c8 ff             	or     eax,0xffffffff
c0013e41:	85 c9                	test   ecx,ecx
c0013e43:	89 c2                	mov    edx,eax
c0013e45:	74 28                	je     c0013e6f <SysWrite(regs*)+0x61>
c0013e47:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013e4f:	83 ec 0c             	sub    esp,0xc
c0013e52:	31 ff                	xor    edi,edi
c0013e54:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013e58:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013e5a:	52                   	push   edx
c0013e5b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013e5e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013e61:	57                   	push   edi
c0013e62:	56                   	push   esi
c0013e63:	51                   	push   ecx
c0013e64:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013e67:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013e6b:	83 c4 20             	add    esp,0x20
c0013e6e:	99                   	cdq    
c0013e6f:	83 c4 10             	add    esp,0x10
c0013e72:	5b                   	pop    ebx
c0013e73:	5e                   	pop    esi
c0013e74:	5f                   	pop    edi
c0013e75:	c3                   	ret    

c0013e76 <SysWsbe(regs*)>:
c0013e76:	55                   	push   ebp
c0013e77:	57                   	push   edi
c0013e78:	56                   	push   esi
c0013e79:	53                   	push   ebx
c0013e7a:	83 ec 3c             	sub    esp,0x3c
c0013e7d:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0013e81:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0013e88:	75 2d                	jne    c0013eb7 <SysWsbe(regs*)+0x41>
c0013e8a:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c0013e91:	75 24                	jne    c0013eb7 <SysWsbe(regs*)+0x41>
c0013e93:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c0013e9a:	75 1b                	jne    c0013eb7 <SysWsbe(regs*)+0x41>
c0013e9c:	6a 01                	push   0x1
c0013e9e:	6a 00                	push   0x0
c0013ea0:	68 b9 95 00 c0       	push   0xc00095b9
c0013ea5:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0013eab:	e8 f0 18 00 00       	call   c00157a0 <Process::createThread(void (*)(void*), void*, int)>
c0013eb0:	83 c4 10             	add    esp,0x10
c0013eb3:	31 c0                	xor    eax,eax
c0013eb5:	eb 52                	jmp    c0013f09 <SysWsbe(regs*)+0x93>
c0013eb7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0013ebb:	be e6 35 02 c0       	mov    esi,0xc00235e6
c0013ec0:	b9 0b 00 00 00       	mov    ecx,0xb
c0013ec5:	fc                   	cld    
c0013ec6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013ec8:	83 ec 0c             	sub    esp,0xc
c0013ecb:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013ecf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ed4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ed7:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0013edd:	8b 06                	mov    eax,DWORD PTR [esi]
c0013edf:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0013ee2:	57                   	push   edi
c0013ee3:	e8 98 c6 fe ff       	call   c0000580 <strlen>
c0013ee8:	5a                   	pop    edx
c0013ee9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013eed:	52                   	push   edx
c0013eee:	31 d2                	xor    edx,edx
c0013ef0:	57                   	push   edi
c0013ef1:	52                   	push   edx
c0013ef2:	50                   	push   eax
c0013ef3:	56                   	push   esi
c0013ef4:	ff d5                	call   ebp
c0013ef6:	83 c4 14             	add    esp,0x14
c0013ef9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013efc:	e8 97 22 00 00       	call   c0016198 <terminateTask(int)>
c0013f01:	83 c4 10             	add    esp,0x10
c0013f04:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013f09:	83 c4 3c             	add    esp,0x3c
c0013f0c:	31 d2                	xor    edx,edx
c0013f0e:	5b                   	pop    ebx
c0013f0f:	5e                   	pop    esi
c0013f10:	5f                   	pop    edi
c0013f11:	5d                   	pop    ebp
c0013f12:	c3                   	ret    

c0013f13 <SysYield(regs*)>:
c0013f13:	83 ec 0c             	sub    esp,0xc
c0013f16:	fa                   	cli    
c0013f17:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0013f1d:	e8 d6 1a 00 00       	call   c00159f8 <schedule()>
c0013f22:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0013f29:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0013f30:	75 01                	jne    c0013f33 <SysYield(regs*)+0x20>
c0013f32:	fb                   	sti    
c0013f33:	31 c0                	xor    eax,eax
c0013f35:	31 d2                	xor    edx,edx
c0013f37:	83 c4 0c             	add    esp,0xc
c0013f3a:	c3                   	ret    

c0013f3b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0013f3b:	55                   	push   ebp
c0013f3c:	57                   	push   edi
c0013f3d:	56                   	push   esi
c0013f3e:	53                   	push   ebx
c0013f3f:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013f45:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013f50:	74 3b                	je     c0013f8d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013f52:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013f5a:	74 31                	je     c0013f8d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013f5c:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0013f64:	75 27                	jne    c0013f8d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013f66:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013f6d:	05 00 10 00 00       	add    eax,0x1000
c0013f72:	89 c2                	mov    edx,eax
c0013f74:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013f79:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013f80:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0013f86:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0013f8d:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0013f94:	83 ec 0c             	sub    esp,0xc
c0013f97:	6a 01                	push   0x1
c0013f99:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013f9f:	e8 ed e1 ff ff       	call   c0012191 <Virt::allocateKernelVirtualPages(int)>
c0013fa4:	83 c4 10             	add    esp,0x10
c0013fa7:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013fad:	89 c3                	mov    ebx,eax
c0013faf:	0f 86 27 01 00 00    	jbe    c00140dc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a1>
c0013fb5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013fbd:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013fc4:	c1 ee 0c             	shr    esi,0xc
c0013fc7:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0013fcb:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0013fd2:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0013fd9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013fdd:	29 ef                	sub    edi,ebp
c0013fdf:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0013fe3:	0f 83 fa 00 00 00    	jae    c00140e3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c0013fe9:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0013fef:	b8 00 10 00 00       	mov    eax,0x1000
c0013ff4:	0f 47 f8             	cmova  edi,eax
c0013ff7:	83 ec 0c             	sub    esp,0xc
c0013ffa:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014001:	31 d2                	xor    edx,edx
c0014003:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014005:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014009:	50                   	push   eax
c001400a:	8d 74 24 30          	lea    esi,[esp+0x30]
c001400e:	56                   	push   esi
c001400f:	52                   	push   edx
c0014010:	57                   	push   edi
c0014011:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014018:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001401b:	83 c4 20             	add    esp,0x20
c001401e:	85 c0                	test   eax,eax
c0014020:	75 06                	jne    c0014028 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0014022:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0014026:	74 13                	je     c001403b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0014028:	83 ec 0c             	sub    esp,0xc
c001402b:	53                   	push   ebx
c001402c:	e8 5e e4 ff ff       	call   c001248f <Virt::freeKernelVirtualPages(unsigned long)>
c0014031:	83 c4 10             	add    esp,0x10
c0014034:	31 c0                	xor    eax,eax
c0014036:	e9 80 01 00 00       	jmp    c00141bb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x280>
c001403b:	fa                   	cli    
c001403c:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0014042:	e8 85 af ff ff       	call   c000efcc <Phys::allocatePage()>
c0014047:	6a 07                	push   0x7
c0014049:	53                   	push   ebx
c001404a:	50                   	push   eax
c001404b:	89 c7                	mov    edi,eax
c001404d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014052:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014055:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001405b:	e8 0a e8 ff ff       	call   c001286a <VAS::mapPage(unsigned long, unsigned long, int)>
c0014060:	83 c4 0c             	add    esp,0xc
c0014063:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001406a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014070:	6a 00                	push   0x0
c0014072:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014077:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001407a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014080:	e8 51 e6 ff ff       	call   c00126d6 <VAS::mapOtherVASIn(bool, VAS*)>
c0014085:	58                   	pop    eax
c0014086:	5a                   	pop    edx
c0014087:	68 07 0c 00 00       	push   0xc07
c001408c:	55                   	push   ebp
c001408d:	57                   	push   edi
c001408e:	89 df                	mov    edi,ebx
c0014090:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014097:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001409d:	6a 00                	push   0x0
c001409f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140a4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00140a7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00140ad:	e8 0c ea ff ff       	call   c0012abe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00140b2:	b9 00 10 00 00       	mov    ecx,0x1000
c00140b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00140b9:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c00140c0:	83 c4 20             	add    esp,0x20
c00140c3:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c00140ca:	75 01                	jne    c00140cd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c00140cc:	fb                   	sti    
c00140cd:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00140d1:	81 c5 00 10 00 00    	add    ebp,0x1000
c00140d7:	e9 ef fe ff ff       	jmp    c0013fcb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c00140dc:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00140e3:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00140ea:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00140f0:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00140f6:	0f 86 b1 00 00 00    	jbe    c00141ad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c00140fc:	fa                   	cli    
c00140fd:	51                   	push   ecx
c00140fe:	31 ff                	xor    edi,edi
c0014100:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014107:	c1 ee 0c             	shr    esi,0xc
c001410a:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0014110:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014116:	6a 00                	push   0x0
c0014118:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001411d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014120:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014126:	e8 ab e5 ff ff       	call   c00126d6 <VAS::mapOtherVASIn(bool, VAS*)>
c001412b:	83 c4 10             	add    esp,0x10
c001412e:	e8 99 ae ff ff       	call   c000efcc <Phys::allocatePage()>
c0014133:	47                   	inc    edi
c0014134:	6a 07                	push   0x7
c0014136:	53                   	push   ebx
c0014137:	50                   	push   eax
c0014138:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001413c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014142:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014145:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c001414b:	e8 1a e7 ff ff       	call   c001286a <VAS::mapPage(unsigned long, unsigned long, int)>
c0014150:	58                   	pop    eax
c0014151:	5a                   	pop    edx
c0014152:	68 07 0c 00 00       	push   0xc07
c0014157:	55                   	push   ebp
c0014158:	81 c5 00 10 00 00    	add    ebp,0x1000
c001415e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014162:	50                   	push   eax
c0014163:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001416a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014170:	6a 00                	push   0x0
c0014172:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014177:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001417a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014180:	e8 39 e9 ff ff       	call   c0012abe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014185:	83 c4 1c             	add    esp,0x1c
c0014188:	68 00 10 00 00       	push   0x1000
c001418d:	6a 00                	push   0x0
c001418f:	53                   	push   ebx
c0014190:	e8 5b c3 fe ff       	call   c00004f0 <memset>
c0014195:	83 c4 10             	add    esp,0x10
c0014198:	39 fe                	cmp    esi,edi
c001419a:	77 92                	ja     c001412e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f3>
c001419c:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c00141a3:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c00141aa:	75 01                	jne    c00141ad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c00141ac:	fb                   	sti    
c00141ad:	83 ec 0c             	sub    esp,0xc
c00141b0:	53                   	push   ebx
c00141b1:	e8 d9 e2 ff ff       	call   c001248f <Virt::freeKernelVirtualPages(unsigned long)>
c00141b6:	83 c4 10             	add    esp,0x10
c00141b9:	b0 01                	mov    al,0x1
c00141bb:	81 c4 2c 10 00 00    	add    esp,0x102c
c00141c1:	5b                   	pop    ebx
c00141c2:	5e                   	pop    esi
c00141c3:	5f                   	pop    edi
c00141c4:	5d                   	pop    ebp
c00141c5:	c3                   	ret    

c00141c6 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00141c6:	55                   	push   ebp
c00141c7:	57                   	push   edi
c00141c8:	56                   	push   esi
c00141c9:	53                   	push   ebx
c00141ca:	83 ec 48             	sub    esp,0x48
c00141cd:	68 14 01 00 00       	push   0x114
c00141d2:	e8 b5 a8 ff ff       	call   c000ea8c <malloc>
c00141d7:	83 c4 0c             	add    esp,0xc
c00141da:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00141de:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00141e2:	89 c7                	mov    edi,eax
c00141e4:	50                   	push   eax
c00141e5:	e8 42 3f ff ff       	call   c000812c <File::File(char const*, Process*)>
c00141ea:	58                   	pop    eax
c00141eb:	5a                   	pop    edx
c00141ec:	6a 01                	push   0x1
c00141ee:	57                   	push   edi
c00141ef:	e8 56 3f ff ff       	call   c000814a <File::open(FileOpenMode)>
c00141f4:	83 c4 10             	add    esp,0x10
c00141f7:	85 c0                	test   eax,eax
c00141f9:	0f 85 4c 01 00 00    	jne    c001434b <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00141ff:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014207:	83 ec 0c             	sub    esp,0xc
c001420a:	6a 34                	push   0x34
c001420c:	e8 7b a8 ff ff       	call   c000ea8c <malloc>
c0014211:	89 c3                	mov    ebx,eax
c0014213:	58                   	pop    eax
c0014214:	8b 07                	mov    eax,DWORD PTR [edi]
c0014216:	8d 74 24 38          	lea    esi,[esp+0x38]
c001421a:	56                   	push   esi
c001421b:	53                   	push   ebx
c001421c:	6a 00                	push   0x0
c001421e:	6a 34                	push   0x34
c0014220:	57                   	push   edi
c0014221:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014224:	83 c4 20             	add    esp,0x20
c0014227:	85 c0                	test   eax,eax
c0014229:	0f 85 1c 01 00 00    	jne    c001434b <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001422f:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014235:	0f 85 10 01 00 00    	jne    c001434b <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001423b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001423e:	85 c0                	test   eax,eax
c0014240:	0f 84 05 01 00 00    	je     c001434b <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014246:	31 d2                	xor    edx,edx
c0014248:	55                   	push   ebp
c0014249:	52                   	push   edx
c001424a:	50                   	push   eax
c001424b:	57                   	push   edi
c001424c:	e8 b7 3f ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014251:	83 c4 10             	add    esp,0x10
c0014254:	85 c0                	test   eax,eax
c0014256:	0f 85 ef 00 00 00    	jne    c001434b <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001425c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001425f:	83 ec 0c             	sub    esp,0xc
c0014262:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014266:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001426a:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001426e:	0f af c2             	imul   eax,edx
c0014271:	50                   	push   eax
c0014272:	e8 15 a8 ff ff       	call   c000ea8c <malloc>
c0014277:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014279:	89 34 24             	mov    DWORD PTR [esp],esi
c001427c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014280:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014284:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014288:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001428c:	0f af c2             	imul   eax,edx
c001428f:	99                   	cdq    
c0014290:	52                   	push   edx
c0014291:	50                   	push   eax
c0014292:	57                   	push   edi
c0014293:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014296:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014299:	83 c4 20             	add    esp,0x20
c001429c:	85 c0                	test   eax,eax
c001429e:	0f 84 a7 00 00 00    	je     c001434b <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00142a4:	31 d2                	xor    edx,edx
c00142a6:	51                   	push   ecx
c00142a7:	52                   	push   edx
c00142a8:	50                   	push   eax
c00142a9:	57                   	push   edi
c00142aa:	e8 59 3f ff ff       	call   c0008208 <File::seek(unsigned long long)>
c00142af:	83 c4 10             	add    esp,0x10
c00142b2:	85 c0                	test   eax,eax
c00142b4:	0f 85 91 00 00 00    	jne    c001434b <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00142ba:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00142be:	83 ec 0c             	sub    esp,0xc
c00142c1:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00142c5:	0f af c2             	imul   eax,edx
c00142c8:	50                   	push   eax
c00142c9:	e8 be a7 ff ff       	call   c000ea8c <malloc>
c00142ce:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00142d0:	89 34 24             	mov    DWORD PTR [esp],esi
c00142d3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00142d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142db:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00142df:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00142e3:	0f af c2             	imul   eax,edx
c00142e6:	99                   	cdq    
c00142e7:	52                   	push   edx
c00142e8:	50                   	push   eax
c00142e9:	57                   	push   edi
c00142ea:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00142ed:	83 c4 20             	add    esp,0x20
c00142f0:	31 c9                	xor    ecx,ecx
c00142f2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00142fa:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c00142fe:	0f b7 e9             	movzx  ebp,cx
c0014301:	0f 83 86 00 00 00    	jae    c001438d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0014307:	c1 e5 05             	shl    ebp,0x5
c001430a:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c001430e:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0014312:	75 73                	jne    c0014387 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0014314:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001431b:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c001431e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014322:	52                   	push   edx
c0014323:	31 d2                	xor    edx,edx
c0014325:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014328:	52                   	push   edx
c0014329:	50                   	push   eax
c001432a:	57                   	push   edi
c001432b:	e8 d8 3e ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014330:	83 c4 10             	add    esp,0x10
c0014333:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014337:	85 c0                	test   eax,eax
c0014339:	74 17                	je     c0014352 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c001433b:	83 ec 0c             	sub    esp,0xc
c001433e:	68 12 36 02 c0       	push   0xc0023612
c0014343:	e8 06 2c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014348:	83 c4 10             	add    esp,0x10
c001434b:	31 c0                	xor    eax,eax
c001434d:	e9 8b 00 00 00       	jmp    c00143dd <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0014352:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014356:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0014359:	83 ec 0c             	sub    esp,0xc
c001435c:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c001435f:	50                   	push   eax
c0014360:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014364:	56                   	push   esi
c0014365:	57                   	push   edi
c0014366:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001436a:	e8 cc fb ff ff       	call   c0013f3b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001436f:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014373:	83 c4 20             	add    esp,0x20
c0014376:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001437a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001437e:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0014383:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014387:	41                   	inc    ecx
c0014388:	e9 6d ff ff ff       	jmp    c00142fa <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001438d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014391:	83 ec 0c             	sub    esp,0xc
c0014394:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014398:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001439c:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c00143a2:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c00143a8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00143ad:	05 00 10 00 00       	add    eax,0x1000
c00143b2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00143b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00143b9:	e8 de a6 ff ff       	call   c000ea9c <free>
c00143be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00143c1:	e8 d6 a6 ff ff       	call   c000ea9c <free>
c00143c6:	58                   	pop    eax
c00143c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00143cb:	e8 cc a6 ff ff       	call   c000ea9c <free>
c00143d0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00143d3:	e8 d0 3d ff ff       	call   c00081a8 <File::close()>
c00143d8:	83 c4 10             	add    esp,0x10
c00143db:	b0 01                	mov    al,0x1
c00143dd:	83 c4 3c             	add    esp,0x3c
c00143e0:	5b                   	pop    ebx
c00143e1:	5e                   	pop    esi
c00143e2:	5f                   	pop    edi
c00143e3:	5d                   	pop    ebp
c00143e4:	c3                   	ret    

c00143e5 <Thr::runtimeReferenceHelper()>:
c00143e5:	83 ec 18             	sub    esp,0x18
c00143e8:	68 1a 36 02 c0       	push   0xc002361a
c00143ed:	e8 5c 2b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00143f2:	fa                   	cli    
c00143f3:	83 c4 10             	add    esp,0x10
c00143f6:	eb fe                	jmp    c00143f6 <Thr::runtimeReferenceHelper()+0x11>

c00143f8 <Thr::getAddressOfKernelSymbol(char const*)>:
c00143f8:	57                   	push   edi
c00143f9:	56                   	push   esi
c00143fa:	53                   	push   ebx
c00143fb:	31 db                	xor    ebx,ebx
c00143fd:	39 1d 80 d6 02 c0    	cmp    DWORD PTR ds:0xc002d680,ebx
c0014403:	7e 3c                	jle    c0014441 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014405:	8b 34 9d 00 d6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd2a00]
c001440c:	31 ff                	xor    edi,edi
c001440e:	39 3c 9d 00 d5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd2b00],edi
c0014415:	7e 27                	jle    c001443e <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014417:	50                   	push   eax
c0014418:	50                   	push   eax
c0014419:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001441d:	8b 06                	mov    eax,DWORD PTR [esi]
c001441f:	03 04 9d 80 d5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd2a80]
c0014426:	50                   	push   eax
c0014427:	e8 54 c3 fe ff       	call   c0000780 <strcmp>
c001442c:	83 c4 10             	add    esp,0x10
c001442f:	85 c0                	test   eax,eax
c0014431:	75 05                	jne    c0014438 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014433:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014436:	eb 0b                	jmp    c0014443 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014438:	83 c6 10             	add    esi,0x10
c001443b:	47                   	inc    edi
c001443c:	eb d0                	jmp    c001440e <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001443e:	43                   	inc    ebx
c001443f:	eb bc                	jmp    c00143fd <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014441:	31 c0                	xor    eax,eax
c0014443:	5b                   	pop    ebx
c0014444:	5e                   	pop    esi
c0014445:	5f                   	pop    edi
c0014446:	c3                   	ret    

c0014447 <Thr::loadKernelSymbolTable(char const*)>:
c0014447:	55                   	push   ebp
c0014448:	57                   	push   edi
c0014449:	56                   	push   esi
c001444a:	53                   	push   ebx
c001444b:	83 ec 68             	sub    esp,0x68
c001444e:	68 14 01 00 00       	push   0x114
c0014453:	8b 35 d8 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d6d8
c0014459:	e8 2e a6 ff ff       	call   c000ea8c <malloc>
c001445e:	83 c4 0c             	add    esp,0xc
c0014461:	56                   	push   esi
c0014462:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014466:	89 c3                	mov    ebx,eax
c0014468:	50                   	push   eax
c0014469:	e8 be 3c ff ff       	call   c000812c <File::File(char const*, Process*)>
c001446e:	5e                   	pop    esi
c001446f:	5f                   	pop    edi
c0014470:	6a 01                	push   0x1
c0014472:	53                   	push   ebx
c0014473:	e8 d2 3c ff ff       	call   c000814a <File::open(FileOpenMode)>
c0014478:	83 c4 10             	add    esp,0x10
c001447b:	85 c0                	test   eax,eax
c001447d:	74 0a                	je     c0014489 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001447f:	83 ec 0c             	sub    esp,0xc
c0014482:	68 3c 36 02 c0       	push   0xc002363c
c0014487:	eb 34                	jmp    c00144bd <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014489:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014491:	83 ec 0c             	sub    esp,0xc
c0014494:	6a 34                	push   0x34
c0014496:	e8 f1 a5 ff ff       	call   c000ea8c <malloc>
c001449b:	59                   	pop    ecx
c001449c:	8d 74 24 34          	lea    esi,[esp+0x34]
c00144a0:	89 c7                	mov    edi,eax
c00144a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144a4:	56                   	push   esi
c00144a5:	57                   	push   edi
c00144a6:	6a 00                	push   0x0
c00144a8:	6a 34                	push   0x34
c00144aa:	53                   	push   ebx
c00144ab:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00144ae:	83 c4 20             	add    esp,0x20
c00144b1:	85 c0                	test   eax,eax
c00144b3:	74 17                	je     c00144cc <Thr::loadKernelSymbolTable(char const*)+0x85>
c00144b5:	83 ec 0c             	sub    esp,0xc
c00144b8:	68 53 36 02 c0       	push   0xc0023653
c00144bd:	e8 10 a9 ff ff       	call   c000edd2 <KePanic(char const*)>
c00144c2:	83 c4 10             	add    esp,0x10
c00144c5:	31 c0                	xor    eax,eax
c00144c7:	e9 31 02 00 00       	jmp    c00146fd <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00144cc:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00144d2:	75 e1                	jne    c00144b5 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00144d4:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00144d7:	85 c0                	test   eax,eax
c00144d9:	74 da                	je     c00144b5 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00144db:	52                   	push   edx
c00144dc:	31 d2                	xor    edx,edx
c00144de:	52                   	push   edx
c00144df:	50                   	push   eax
c00144e0:	53                   	push   ebx
c00144e1:	e8 22 3d ff ff       	call   c0008208 <File::seek(unsigned long long)>
c00144e6:	83 c4 10             	add    esp,0x10
c00144e9:	85 c0                	test   eax,eax
c00144eb:	75 c8                	jne    c00144b5 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00144ed:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00144f1:	83 ec 0c             	sub    esp,0xc
c00144f4:	31 ed                	xor    ebp,ebp
c00144f6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00144fa:	0f af c2             	imul   eax,edx
c00144fd:	50                   	push   eax
c00144fe:	e8 89 a5 ff ff       	call   c000ea8c <malloc>
c0014503:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014505:	89 34 24             	mov    DWORD PTR [esp],esi
c0014508:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001450c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014510:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014514:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014518:	0f af c2             	imul   eax,edx
c001451b:	99                   	cdq    
c001451c:	52                   	push   edx
c001451d:	50                   	push   eax
c001451e:	53                   	push   ebx
c001451f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014522:	83 c4 20             	add    esp,0x20
c0014525:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001452d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014535:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001453d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014545:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014549:	0f b7 f5             	movzx  esi,bp
c001454c:	0f 83 a7 00 00 00    	jae    c00145f9 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014552:	6b f6 28             	imul   esi,esi,0x28
c0014555:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014559:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001455c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014560:	50                   	push   eax
c0014561:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014565:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014569:	8b 16                	mov    edx,DWORD PTR [esi]
c001456b:	6b c0 28             	imul   eax,eax,0x28
c001456e:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014572:	89 d0                	mov    eax,edx
c0014574:	31 d2                	xor    edx,edx
c0014576:	52                   	push   edx
c0014577:	50                   	push   eax
c0014578:	53                   	push   ebx
c0014579:	e8 8a 3c ff ff       	call   c0008208 <File::seek(unsigned long long)>
c001457e:	83 c4 0c             	add    esp,0xc
c0014581:	6a 20                	push   0x20
c0014583:	6a 00                	push   0x0
c0014585:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014589:	52                   	push   edx
c001458a:	e8 61 bf fe ff       	call   c00004f0 <memset>
c001458f:	58                   	pop    eax
c0014590:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014592:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014596:	51                   	push   ecx
c0014597:	8d 54 24 40          	lea    edx,[esp+0x40]
c001459b:	52                   	push   edx
c001459c:	6a 00                	push   0x0
c001459e:	6a 1f                	push   0x1f
c00145a0:	53                   	push   ebx
c00145a1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00145a4:	83 c4 18             	add    esp,0x18
c00145a7:	68 6a 36 02 c0       	push   0xc002366a
c00145ac:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00145b0:	52                   	push   edx
c00145b1:	e8 ca c1 fe ff       	call   c0000780 <strcmp>
c00145b6:	83 c4 10             	add    esp,0x10
c00145b9:	85 c0                	test   eax,eax
c00145bb:	75 0f                	jne    c00145cc <Thr::loadKernelSymbolTable(char const*)+0x185>
c00145bd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00145c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00145c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00145c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00145cc:	50                   	push   eax
c00145cd:	50                   	push   eax
c00145ce:	68 72 36 02 c0       	push   0xc0023672
c00145d3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00145d7:	50                   	push   eax
c00145d8:	e8 a3 c1 fe ff       	call   c0000780 <strcmp>
c00145dd:	83 c4 10             	add    esp,0x10
c00145e0:	85 c0                	test   eax,eax
c00145e2:	75 0f                	jne    c00145f3 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00145e4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00145e7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00145eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00145ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00145f3:	45                   	inc    ebp
c00145f4:	e9 4c ff ff ff       	jmp    c0014545 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00145f9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00145fe:	75 10                	jne    c0014610 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014600:	83 ec 0c             	sub    esp,0xc
c0014603:	68 7a 36 02 c0       	push   0xc002367a
c0014608:	e8 c5 a7 ff ff       	call   c000edd2 <KePanic(char const*)>
c001460d:	83 c4 10             	add    esp,0x10
c0014610:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014615:	75 10                	jne    c0014627 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014617:	83 ec 0c             	sub    esp,0xc
c001461a:	68 7a 36 02 c0       	push   0xc002367a
c001461f:	e8 ae a7 ff ff       	call   c000edd2 <KePanic(char const*)>
c0014624:	83 c4 10             	add    esp,0x10
c0014627:	50                   	push   eax
c0014628:	31 d2                	xor    edx,edx
c001462a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001462e:	52                   	push   edx
c001462f:	50                   	push   eax
c0014630:	53                   	push   ebx
c0014631:	e8 d2 3b ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014636:	5a                   	pop    edx
c0014637:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001463b:	e8 4c a4 ff ff       	call   c000ea8c <malloc>
c0014640:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014644:	31 c9                	xor    ecx,ecx
c0014646:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001464a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001464c:	5e                   	pop    esi
c001464d:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014651:	55                   	push   ebp
c0014652:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014656:	51                   	push   ecx
c0014657:	52                   	push   edx
c0014658:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001465c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014660:	53                   	push   ebx
c0014661:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014664:	83 c4 14             	add    esp,0x14
c0014667:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001466b:	e8 1c a4 ff ff       	call   c000ea8c <malloc>
c0014670:	89 c6                	mov    esi,eax
c0014672:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014674:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014677:	56                   	push   esi
c0014678:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001467c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014680:	51                   	push   ecx
c0014681:	52                   	push   edx
c0014682:	53                   	push   ebx
c0014683:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014686:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001468a:	83 c4 1c             	add    esp,0x1c
c001468d:	8b 15 80 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d680
c0014693:	c1 e8 04             	shr    eax,0x4
c0014696:	89 04 95 00 d5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2b00],eax
c001469d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00146a1:	31 d2                	xor    edx,edx
c00146a3:	52                   	push   edx
c00146a4:	50                   	push   eax
c00146a5:	53                   	push   ebx
c00146a6:	e8 5d 3b ff ff       	call   c0008208 <File::seek(unsigned long long)>
c00146ab:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00146ad:	31 d2                	xor    edx,edx
c00146af:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00146b2:	56                   	push   esi
c00146b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00146b7:	52                   	push   edx
c00146b8:	50                   	push   eax
c00146b9:	53                   	push   ebx
c00146ba:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00146bd:	83 c4 14             	add    esp,0x14
c00146c0:	53                   	push   ebx
c00146c1:	e8 e2 3a ff ff       	call   c00081a8 <File::close()>
c00146c6:	5d                   	pop    ebp
c00146c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00146cb:	e8 cc a3 ff ff       	call   c000ea9c <free>
c00146d0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00146d3:	e8 c4 a3 ff ff       	call   c000ea9c <free>
c00146d8:	a1 80 d6 02 c0       	mov    eax,ds:0xc002d680
c00146dd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00146e1:	83 c4 10             	add    esp,0x10
c00146e4:	89 34 85 80 d5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2a80],esi
c00146eb:	8d 50 01             	lea    edx,[eax+0x1]
c00146ee:	89 0c 85 00 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2a00],ecx
c00146f5:	b0 01                	mov    al,0x1
c00146f7:	89 15 80 d6 02 c0    	mov    DWORD PTR ds:0xc002d680,edx
c00146fd:	83 c4 5c             	add    esp,0x5c
c0014700:	5b                   	pop    ebx
c0014701:	5e                   	pop    esi
c0014702:	5f                   	pop    edi
c0014703:	5d                   	pop    ebp
c0014704:	c3                   	ret    

c0014705 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014705:	55                   	push   ebp
c0014706:	57                   	push   edi
c0014707:	56                   	push   esi
c0014708:	53                   	push   ebx
c0014709:	81 ec 68 03 00 00    	sub    esp,0x368
c001470f:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014716:	8b 35 d8 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d6d8
c001471c:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0014720:	68 14 01 00 00       	push   0x114
c0014725:	e8 62 a3 ff ff       	call   c000ea8c <malloc>
c001472a:	83 c4 0c             	add    esp,0xc
c001472d:	56                   	push   esi
c001472e:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014735:	50                   	push   eax
c0014736:	89 c3                	mov    ebx,eax
c0014738:	e8 ef 39 ff ff       	call   c000812c <File::File(char const*, Process*)>
c001473d:	5f                   	pop    edi
c001473e:	5d                   	pop    ebp
c001473f:	6a 01                	push   0x1
c0014741:	53                   	push   ebx
c0014742:	e8 03 3a ff ff       	call   c000814a <File::open(FileOpenMode)>
c0014747:	83 c4 10             	add    esp,0x10
c001474a:	85 c0                	test   eax,eax
c001474c:	0f 85 b3 06 00 00    	jne    c0014e05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014752:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001475a:	83 ec 0c             	sub    esp,0xc
c001475d:	6a 34                	push   0x34
c001475f:	e8 28 a3 ff ff       	call   c000ea8c <malloc>
c0014764:	5e                   	pop    esi
c0014765:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014769:	89 c5                	mov    ebp,eax
c001476b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001476d:	56                   	push   esi
c001476e:	55                   	push   ebp
c001476f:	6a 00                	push   0x0
c0014771:	6a 34                	push   0x34
c0014773:	53                   	push   ebx
c0014774:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014777:	83 c4 20             	add    esp,0x20
c001477a:	85 c0                	test   eax,eax
c001477c:	0f 85 83 06 00 00    	jne    c0014e05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014782:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0014789:	0f 85 76 06 00 00    	jne    c0014e05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001478f:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0014792:	85 c0                	test   eax,eax
c0014794:	0f 84 6b 06 00 00    	je     c0014e05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001479a:	31 d2                	xor    edx,edx
c001479c:	51                   	push   ecx
c001479d:	52                   	push   edx
c001479e:	50                   	push   eax
c001479f:	53                   	push   ebx
c00147a0:	e8 63 3a ff ff       	call   c0008208 <File::seek(unsigned long long)>
c00147a5:	83 c4 10             	add    esp,0x10
c00147a8:	85 c0                	test   eax,eax
c00147aa:	0f 85 55 06 00 00    	jne    c0014e05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00147b0:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00147b3:	83 ec 0c             	sub    esp,0xc
c00147b6:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00147ba:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00147be:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00147c2:	0f af c2             	imul   eax,edx
c00147c5:	50                   	push   eax
c00147c6:	e8 c1 a2 ff ff       	call   c000ea8c <malloc>
c00147cb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00147cd:	89 34 24             	mov    DWORD PTR [esp],esi
c00147d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00147d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00147d8:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00147dc:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00147e0:	0f af c2             	imul   eax,edx
c00147e3:	99                   	cdq    
c00147e4:	52                   	push   edx
c00147e5:	50                   	push   eax
c00147e6:	53                   	push   ebx
c00147e7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00147ea:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c00147ed:	83 c4 20             	add    esp,0x20
c00147f0:	85 c0                	test   eax,eax
c00147f2:	0f 84 0d 06 00 00    	je     c0014e05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00147f8:	52                   	push   edx
c00147f9:	31 d2                	xor    edx,edx
c00147fb:	52                   	push   edx
c00147fc:	50                   	push   eax
c00147fd:	53                   	push   ebx
c00147fe:	e8 05 3a ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014803:	83 c4 10             	add    esp,0x10
c0014806:	85 c0                	test   eax,eax
c0014808:	0f 85 f7 05 00 00    	jne    c0014e05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001480e:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014812:	83 ec 0c             	sub    esp,0xc
c0014815:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014819:	0f af c2             	imul   eax,edx
c001481c:	50                   	push   eax
c001481d:	e8 6a a2 ff ff       	call   c000ea8c <malloc>
c0014822:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014824:	89 34 24             	mov    DWORD PTR [esp],esi
c0014827:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001482b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001482f:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014833:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014837:	0f af c2             	imul   eax,edx
c001483a:	99                   	cdq    
c001483b:	52                   	push   edx
c001483c:	50                   	push   eax
c001483d:	53                   	push   ebx
c001483e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014841:	83 c4 20             	add    esp,0x20
c0014844:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001484a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001484d:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0014851:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0014855:	73 78                	jae    c00148cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0014857:	c1 e7 05             	shl    edi,0x5
c001485a:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001485e:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014861:	75 63                	jne    c00148c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0014863:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014866:	31 d2                	xor    edx,edx
c0014868:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c001486b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001486f:	50                   	push   eax
c0014870:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014873:	52                   	push   edx
c0014874:	50                   	push   eax
c0014875:	53                   	push   ebx
c0014876:	e8 8d 39 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c001487b:	83 c4 10             	add    esp,0x10
c001487e:	85 c0                	test   eax,eax
c0014880:	0f 85 7f 05 00 00    	jne    c0014e05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014886:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001488d:	83 ec 0c             	sub    esp,0xc
c0014890:	31 d2                	xor    edx,edx
c0014892:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0014896:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014898:	01 c6                	add    esi,eax
c001489a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00148a1:	50                   	push   eax
c00148a2:	56                   	push   esi
c00148a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00148a7:	52                   	push   edx
c00148a8:	50                   	push   eax
c00148a9:	53                   	push   ebx
c00148aa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00148ad:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00148b0:	83 c4 1c             	add    esp,0x1c
c00148b3:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00148b6:	50                   	push   eax
c00148b7:	6a 00                	push   0x0
c00148b9:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00148bd:	56                   	push   esi
c00148be:	e8 2d bc fe ff       	call   c00004f0 <memset>
c00148c3:	83 c4 10             	add    esp,0x10
c00148c6:	66 ff 04 24          	inc    WORD PTR [esp]
c00148ca:	e9 7b ff ff ff       	jmp    c001484a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c00148cf:	50                   	push   eax
c00148d0:	68 00 01 00 00       	push   0x100
c00148d5:	6a 00                	push   0x0
c00148d7:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00148db:	50                   	push   eax
c00148dc:	e8 0f bc fe ff       	call   c00004f0 <memset>
c00148e1:	83 c4 0c             	add    esp,0xc
c00148e4:	68 00 01 00 00       	push   0x100
c00148e9:	6a 00                	push   0x0
c00148eb:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00148f2:	50                   	push   eax
c00148f3:	e8 f8 bb fe ff       	call   c00004f0 <memset>
c00148f8:	83 c4 10             	add    esp,0x10
c00148fb:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0014902:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014909:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014911:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014919:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014921:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014929:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001492d:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0014931:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0014936:	0f 83 16 01 00 00    	jae    c0014a52 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c001493c:	6b ff 28             	imul   edi,edi,0x28
c001493f:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0014943:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0014946:	51                   	push   ecx
c0014947:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c001494b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001494f:	8b 07                	mov    eax,DWORD PTR [edi]
c0014951:	6b d2 28             	imul   edx,edx,0x28
c0014954:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014958:	31 d2                	xor    edx,edx
c001495a:	52                   	push   edx
c001495b:	50                   	push   eax
c001495c:	53                   	push   ebx
c001495d:	e8 a6 38 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014962:	83 c4 0c             	add    esp,0xc
c0014965:	6a 20                	push   0x20
c0014967:	6a 00                	push   0x0
c0014969:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014970:	51                   	push   ecx
c0014971:	e8 7a bb fe ff       	call   c00004f0 <memset>
c0014976:	58                   	pop    eax
c0014977:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014979:	8d 54 24 58          	lea    edx,[esp+0x58]
c001497d:	52                   	push   edx
c001497e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014985:	51                   	push   ecx
c0014986:	6a 00                	push   0x0
c0014988:	6a 1f                	push   0x1f
c001498a:	53                   	push   ebx
c001498b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001498e:	83 c4 1c             	add    esp,0x1c
c0014991:	6a 09                	push   0x9
c0014993:	68 94 36 02 c0       	push   0xc0023694
c0014998:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001499f:	51                   	push   ecx
c00149a0:	e8 db b9 fe ff       	call   c0000380 <memcmp>
c00149a5:	83 c4 10             	add    esp,0x10
c00149a8:	85 c0                	test   eax,eax
c00149aa:	75 1a                	jne    c00149c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c00149ac:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00149af:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00149b2:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00149b6:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00149b9:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00149c0:	89 d0                	mov    eax,edx
c00149c2:	40                   	inc    eax
c00149c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00149c6:	52                   	push   edx
c00149c7:	6a 09                	push   0x9
c00149c9:	68 9e 36 02 c0       	push   0xc002369e
c00149ce:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00149d5:	50                   	push   eax
c00149d6:	e8 a5 b9 fe ff       	call   c0000380 <memcmp>
c00149db:	83 c4 10             	add    esp,0x10
c00149de:	85 c0                	test   eax,eax
c00149e0:	75 1a                	jne    c00149fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c00149e2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00149e5:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00149e8:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00149ec:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00149ef:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c00149f6:	89 c8                	mov    eax,ecx
c00149f8:	40                   	inc    eax
c00149f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00149fc:	50                   	push   eax
c00149fd:	50                   	push   eax
c00149fe:	68 6a 36 02 c0       	push   0xc002366a
c0014a03:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014a0a:	50                   	push   eax
c0014a0b:	e8 70 bd fe ff       	call   c0000780 <strcmp>
c0014a10:	83 c4 10             	add    esp,0x10
c0014a13:	85 c0                	test   eax,eax
c0014a15:	75 0b                	jne    c0014a22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0014a17:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0014a1b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014a1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a22:	50                   	push   eax
c0014a23:	50                   	push   eax
c0014a24:	68 72 36 02 c0       	push   0xc0023672
c0014a29:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014a30:	50                   	push   eax
c0014a31:	e8 4a bd fe ff       	call   c0000780 <strcmp>
c0014a36:	83 c4 10             	add    esp,0x10
c0014a39:	85 c0                	test   eax,eax
c0014a3b:	75 0b                	jne    c0014a48 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0014a3d:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0014a41:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014a44:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a48:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0014a4d:	e9 d7 fe ff ff       	jmp    c0014929 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0014a52:	50                   	push   eax
c0014a53:	31 d2                	xor    edx,edx
c0014a55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a59:	52                   	push   edx
c0014a5a:	50                   	push   eax
c0014a5b:	53                   	push   ebx
c0014a5c:	e8 a7 37 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014a61:	58                   	pop    eax
c0014a62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014a66:	e8 21 a0 ff ff       	call   c000ea8c <malloc>
c0014a6b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014a6d:	31 d2                	xor    edx,edx
c0014a6f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0014a73:	58                   	pop    eax
c0014a74:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014a78:	56                   	push   esi
c0014a79:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014a7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a81:	52                   	push   edx
c0014a82:	50                   	push   eax
c0014a83:	53                   	push   ebx
c0014a84:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a87:	83 c4 14             	add    esp,0x14
c0014a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a8e:	e8 f9 9f ff ff       	call   c000ea8c <malloc>
c0014a93:	31 d2                	xor    edx,edx
c0014a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014a99:	83 c4 0c             	add    esp,0xc
c0014a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014aa0:	52                   	push   edx
c0014aa1:	50                   	push   eax
c0014aa2:	53                   	push   ebx
c0014aa3:	e8 60 37 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014aa8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014aaa:	31 d2                	xor    edx,edx
c0014aac:	89 34 24             	mov    DWORD PTR [esp],esi
c0014aaf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014ab3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014ab7:	52                   	push   edx
c0014ab8:	50                   	push   eax
c0014ab9:	53                   	push   ebx
c0014aba:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014abd:	83 c4 20             	add    esp,0x20
c0014ac0:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0014ac5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014acd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014ad1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014ad5:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0014ad8:	0f 84 2b 03 00 00    	je     c0014e09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0014ade:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0014ae5:	31 d2                	xor    edx,edx
c0014ae7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014aeb:	c1 e8 03             	shr    eax,0x3
c0014aee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014af2:	51                   	push   ecx
c0014af3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014af7:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014afb:	52                   	push   edx
c0014afc:	50                   	push   eax
c0014afd:	53                   	push   ebx
c0014afe:	e8 05 37 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014b03:	5e                   	pop    esi
c0014b04:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b08:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014b0f:	e8 78 9f ff ff       	call   c000ea8c <malloc>
c0014b14:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014b16:	31 d2                	xor    edx,edx
c0014b18:	89 c7                	mov    edi,eax
c0014b1a:	58                   	pop    eax
c0014b1b:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014b1f:	50                   	push   eax
c0014b20:	57                   	push   edi
c0014b21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b25:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014b2c:	52                   	push   edx
c0014b2d:	50                   	push   eax
c0014b2e:	53                   	push   ebx
c0014b2f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b32:	83 c4 20             	add    esp,0x20
c0014b35:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014b3d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0014b41:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0014b45:	0f 8d a5 02 00 00    	jge    c0014df0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014b4b:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0014b50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b54:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0014b57:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014b5b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b5f:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c0014b63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014b67:	c1 e8 08             	shr    eax,0x8
c0014b6a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014b6e:	89 c2                	mov    edx,eax
c0014b70:	c1 e2 04             	shl    edx,0x4
c0014b73:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0014b77:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0014b7a:	85 f6                	test   esi,esi
c0014b7c:	0f 85 cf 00 00 00    	jne    c0014c51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014b82:	83 ec 0c             	sub    esp,0xc
c0014b85:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014b89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b8d:	03 02                	add    eax,DWORD PTR [edx]
c0014b8f:	50                   	push   eax
c0014b90:	e8 63 f8 ff ff       	call   c00143f8 <Thr::getAddressOfKernelSymbol(char const*)>
c0014b95:	83 c4 10             	add    esp,0x10
c0014b98:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014b9c:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0014ba1:	85 c0                	test   eax,eax
c0014ba3:	89 c6                	mov    esi,eax
c0014ba5:	0f 85 a6 00 00 00    	jne    c0014c51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014bab:	83 ec 0c             	sub    esp,0xc
c0014bae:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014bb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bb6:	03 02                	add    eax,DWORD PTR [edx]
c0014bb8:	50                   	push   eax
c0014bb9:	e8 9e ac ff ff       	call   c000f85c <KeResolveCompatibilitySymbol(char*)>
c0014bbe:	83 c4 10             	add    esp,0x10
c0014bc1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014bc5:	85 c0                	test   eax,eax
c0014bc7:	89 c6                	mov    esi,eax
c0014bc9:	0f 85 82 00 00 00    	jne    c0014c51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014bcf:	50                   	push   eax
c0014bd0:	50                   	push   eax
c0014bd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bd5:	03 02                	add    eax,DWORD PTR [edx]
c0014bd7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0014bdb:	50                   	push   eax
c0014bdc:	68 a8 36 02 c0       	push   0xc00236a8
c0014be1:	e8 68 23 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014be6:	58                   	pop    eax
c0014be7:	5a                   	pop    edx
c0014be8:	68 c2 36 02 c0       	push   0xc00236c2
c0014bed:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014bf4:	51                   	push   ecx
c0014bf5:	e8 56 ba fe ff       	call   c0000650 <strcpy>
c0014bfa:	59                   	pop    ecx
c0014bfb:	58                   	pop    eax
c0014bfc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014c00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c04:	03 02                	add    eax,DWORD PTR [edx]
c0014c06:	50                   	push   eax
c0014c07:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014c0e:	51                   	push   ecx
c0014c0f:	e8 5c bc fe ff       	call   c0000870 <strcat>
c0014c14:	58                   	pop    eax
c0014c15:	5a                   	pop    edx
c0014c16:	68 5c 37 02 c0       	push   0xc002375c
c0014c1b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014c22:	51                   	push   ecx
c0014c23:	e8 48 bc fe ff       	call   c0000870 <strcat>
c0014c28:	83 c4 10             	add    esp,0x10
c0014c2b:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014c30:	0f 84 77 01 00 00    	je     c0014dad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014c36:	83 ec 0c             	sub    esp,0xc
c0014c39:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014c40:	51                   	push   ecx
c0014c41:	e8 8c a1 ff ff       	call   c000edd2 <KePanic(char const*)>
c0014c46:	83 c4 10             	add    esp,0x10
c0014c49:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0014c4d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014c51:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0014c56:	83 f8 01             	cmp    eax,0x1
c0014c59:	0f 85 9b 00 00 00    	jne    c0014cfa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0014c5f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014c63:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0014c6a:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0014c6e:	01 d0                	add    eax,edx
c0014c70:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014c78:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014c7c:	0f 94 c0             	sete   al
c0014c7f:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014c87:	0f 94 c1             	sete   cl
c0014c8a:	09 c1                	or     ecx,eax
c0014c8c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014c90:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014c95:	0f b6 c9             	movzx  ecx,cl
c0014c98:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c9a:	74 41                	je     c0014cdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c0014c9c:	8d 14 06             	lea    edx,[esi+eax*1]
c0014c9f:	85 c9                	test   ecx,ecx
c0014ca1:	75 15                	jne    c0014cb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0014ca3:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014ca7:	66 83 f8 0c          	cmp    ax,0xc
c0014cab:	76 05                	jbe    c0014cb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0014cad:	b8 0c 00 00 00       	mov    eax,0xc
c0014cb2:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014cb6:	76 37                	jbe    c0014cef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014cb8:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014cbd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014cc1:	0f 84 e6 00 00 00    	je     c0014dad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014cc7:	83 ec 0c             	sub    esp,0xc
c0014cca:	68 d9 36 02 c0       	push   0xc00236d9
c0014ccf:	e8 fe a0 ff ff       	call   c000edd2 <KePanic(char const*)>
c0014cd4:	83 c4 10             	add    esp,0x10
c0014cd7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014cdb:	eb 12                	jmp    c0014cef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014cdd:	01 c2                	add    edx,eax
c0014cdf:	85 c9                	test   ecx,ecx
c0014ce1:	75 0c                	jne    c0014cef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014ce3:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014ce7:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014ceb:	77 02                	ja     c0014cef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014ced:	01 f2                	add    edx,esi
c0014cef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014cf3:	89 10                	mov    DWORD PTR [eax],edx
c0014cf5:	e9 ed 00 00 00       	jmp    c0014de7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014cfa:	83 f8 02             	cmp    eax,0x2
c0014cfd:	0f 85 81 00 00 00    	jne    c0014d84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0014d03:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014d0a:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0014d0e:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0014d12:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014d1a:	74 21                	je     c0014d3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014d1c:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014d24:	74 17                	je     c0014d3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014d26:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0014d2a:	ba 0a 00 00 00       	mov    edx,0xa
c0014d2f:	83 f9 0e             	cmp    ecx,0xe
c0014d32:	77 03                	ja     c0014d37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0014d34:	8d 51 fc             	lea    edx,[ecx-0x4]
c0014d37:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0014d3b:	76 1f                	jbe    c0014d5c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0014d3d:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014d42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014d46:	74 65                	je     c0014dad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014d48:	83 ec 0c             	sub    esp,0xc
c0014d4b:	68 f5 36 02 c0       	push   0xc00236f5
c0014d50:	e8 7d a0 ff ff       	call   c000edd2 <KePanic(char const*)>
c0014d55:	83 c4 10             	add    esp,0x10
c0014d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d5c:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014d61:	8b 10                	mov    edx,DWORD PTR [eax]
c0014d63:	74 15                	je     c0014d7a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0014d65:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014d69:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0014d70:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014d74:	01 d1                	add    ecx,edx
c0014d76:	01 ce                	add    esi,ecx
c0014d78:	eb 06                	jmp    c0014d80 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0014d7a:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0014d7e:	01 d6                	add    esi,edx
c0014d80:	89 30                	mov    DWORD PTR [eax],esi
c0014d82:	eb 63                	jmp    c0014de7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014d84:	56                   	push   esi
c0014d85:	56                   	push   esi
c0014d86:	50                   	push   eax
c0014d87:	68 11 37 02 c0       	push   0xc0023711
c0014d8c:	e8 bd 21 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014d91:	83 c4 10             	add    esp,0x10
c0014d94:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014d99:	74 12                	je     c0014dad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014d9b:	83 ec 0c             	sub    esp,0xc
c0014d9e:	68 1c 37 02 c0       	push   0xc002371c
c0014da3:	e8 2a a0 ff ff       	call   c000edd2 <KePanic(char const*)>
c0014da8:	83 c4 10             	add    esp,0x10
c0014dab:	eb 3a                	jmp    c0014de7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014dad:	83 ec 0c             	sub    esp,0xc
c0014db0:	53                   	push   ebx
c0014db1:	e8 f2 33 ff ff       	call   c00081a8 <File::close()>
c0014db6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014db8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014dbb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014dbe:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014dc1:	e8 d6 9c ff ff       	call   c000ea9c <free>
c0014dc6:	59                   	pop    ecx
c0014dc7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014dcb:	e8 cc 9c ff ff       	call   c000ea9c <free>
c0014dd0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014dd3:	e8 c4 9c ff ff       	call   c000ea9c <free>
c0014dd8:	5b                   	pop    ebx
c0014dd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ddd:	e8 ba 9c ff ff       	call   c000ea9c <free>
c0014de2:	83 c4 10             	add    esp,0x10
c0014de5:	eb 1e                	jmp    c0014e05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014de7:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0014deb:	e9 4d fd ff ff       	jmp    c0014b3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c0014df0:	83 ec 0c             	sub    esp,0xc
c0014df3:	57                   	push   edi
c0014df4:	e8 a3 9c ff ff       	call   c000ea9c <free>
c0014df9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0014dfd:	83 c4 10             	add    esp,0x10
c0014e00:	e9 cc fc ff ff       	jmp    c0014ad1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0014e05:	31 c0                	xor    eax,eax
c0014e07:	eb 32                	jmp    c0014e3b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0014e09:	83 ec 0c             	sub    esp,0xc
c0014e0c:	53                   	push   ebx
c0014e0d:	e8 96 33 ff ff       	call   c00081a8 <File::close()>
c0014e12:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e17:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014e1a:	58                   	pop    eax
c0014e1b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014e1f:	e8 78 9c ff ff       	call   c000ea9c <free>
c0014e24:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014e27:	e8 70 9c ff ff       	call   c000ea9c <free>
c0014e2c:	5a                   	pop    edx
c0014e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014e31:	e8 66 9c ff ff       	call   c000ea9c <free>
c0014e36:	83 c4 10             	add    esp,0x10
c0014e39:	b0 01                	mov    al,0x1
c0014e3b:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014e41:	5b                   	pop    ebx
c0014e42:	5e                   	pop    esi
c0014e43:	5f                   	pop    edi
c0014e44:	5d                   	pop    ebp
c0014e45:	c3                   	ret    

c0014e46 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014e46:	56                   	push   esi
c0014e47:	31 d2                	xor    edx,edx
c0014e49:	53                   	push   ebx
c0014e4a:	8b 1d e0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cee0
c0014e50:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014e54:	39 d3                	cmp    ebx,edx
c0014e56:	7e 1b                	jle    c0014e73 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014e58:	8b 04 95 00 d1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2f00]
c0014e5f:	39 c8                	cmp    eax,ecx
c0014e61:	77 0d                	ja     c0014e70 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014e63:	8b 34 95 00 cf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd3100]
c0014e6a:	01 c6                	add    esi,eax
c0014e6c:	39 ce                	cmp    esi,ecx
c0014e6e:	77 05                	ja     c0014e75 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014e70:	42                   	inc    edx
c0014e71:	eb e1                	jmp    c0014e54 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014e73:	31 c0                	xor    eax,eax
c0014e75:	5b                   	pop    ebx
c0014e76:	5e                   	pop    esi
c0014e77:	c3                   	ret    

c0014e78 <Thr::getDriverNameFromAddress(unsigned long)>:
c0014e78:	53                   	push   ebx
c0014e79:	8b 1d e0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cee0
c0014e7f:	31 c0                	xor    eax,eax
c0014e81:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014e85:	39 c3                	cmp    ebx,eax
c0014e87:	7e 22                	jle    c0014eab <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0014e89:	8b 14 85 00 d1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2f00]
c0014e90:	39 ca                	cmp    edx,ecx
c0014e92:	77 14                	ja     c0014ea8 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014e94:	03 14 85 00 cf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd3100]
c0014e9b:	39 ca                	cmp    edx,ecx
c0014e9d:	76 09                	jbe    c0014ea8 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014e9f:	8b 04 85 00 d3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2d00]
c0014ea6:	eb 05                	jmp    c0014ead <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0014ea8:	40                   	inc    eax
c0014ea9:	eb da                	jmp    c0014e85 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0014eab:	31 c0                	xor    eax,eax
c0014ead:	5b                   	pop    ebx
c0014eae:	c3                   	ret    

c0014eaf <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0014eaf:	53                   	push   ebx
c0014eb0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0014eb4:	53                   	push   ebx
c0014eb5:	e8 8c ff ff ff       	call   c0014e46 <Thr::getDriverBaseFromAddress(unsigned long)>
c0014eba:	5a                   	pop    edx
c0014ebb:	31 d2                	xor    edx,edx
c0014ebd:	85 c0                	test   eax,eax
c0014ebf:	74 04                	je     c0014ec5 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0014ec1:	89 da                	mov    edx,ebx
c0014ec3:	29 c2                	sub    edx,eax
c0014ec5:	5b                   	pop    ebx
c0014ec6:	89 d0                	mov    eax,edx
c0014ec8:	c3                   	ret    

c0014ec9 <Thr::loadDLL(char const*, bool)>:
c0014ec9:	55                   	push   ebp
c0014eca:	57                   	push   edi
c0014ecb:	56                   	push   esi
c0014ecc:	53                   	push   ebx
c0014ecd:	81 ec 34 01 00 00    	sub    esp,0x134
c0014ed3:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0014eda:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014ee1:	56                   	push   esi
c0014ee2:	68 34 37 02 c0       	push   0xc0023734
c0014ee7:	e8 62 20 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014eec:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014ef3:	e8 94 9b ff ff       	call   c000ea8c <malloc>
c0014ef8:	83 c4 0c             	add    esp,0xc
c0014efb:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0014f01:	56                   	push   esi
c0014f02:	50                   	push   eax
c0014f03:	89 c3                	mov    ebx,eax
c0014f05:	e8 22 32 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0014f0a:	83 c4 10             	add    esp,0x10
c0014f0d:	85 db                	test   ebx,ebx
c0014f0f:	75 3c                	jne    c0014f4d <Thr::loadDLL(char const*, bool)+0x84>
c0014f11:	89 e8                	mov    eax,ebp
c0014f13:	84 c0                	test   al,al
c0014f15:	0f 84 02 02 00 00    	je     c001511d <Thr::loadDLL(char const*, bool)+0x254>
c0014f1b:	50                   	push   eax
c0014f1c:	50                   	push   eax
c0014f1d:	68 45 37 02 c0       	push   0xc0023745
c0014f22:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0014f26:	57                   	push   edi
c0014f27:	e8 24 b7 fe ff       	call   c0000650 <strcpy>
c0014f2c:	58                   	pop    eax
c0014f2d:	5a                   	pop    edx
c0014f2e:	56                   	push   esi
c0014f2f:	57                   	push   edi
c0014f30:	e8 3b b9 fe ff       	call   c0000870 <strcat>
c0014f35:	59                   	pop    ecx
c0014f36:	58                   	pop    eax
c0014f37:	68 5c 37 02 c0       	push   0xc002375c
c0014f3c:	57                   	push   edi
c0014f3d:	e8 2e b9 fe ff       	call   c0000870 <strcat>
c0014f42:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014f45:	e8 88 9e ff ff       	call   c000edd2 <KePanic(char const*)>
c0014f4a:	83 c4 10             	add    esp,0x10
c0014f4d:	50                   	push   eax
c0014f4e:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014f52:	50                   	push   eax
c0014f53:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014f57:	50                   	push   eax
c0014f58:	53                   	push   ebx
c0014f59:	e8 ee 34 ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0014f5e:	83 c4 10             	add    esp,0x10
c0014f61:	85 db                	test   ebx,ebx
c0014f63:	89 c7                	mov    edi,eax
c0014f65:	74 0c                	je     c0014f73 <Thr::loadDLL(char const*, bool)+0xaa>
c0014f67:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f69:	83 ec 0c             	sub    esp,0xc
c0014f6c:	53                   	push   ebx
c0014f6d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f70:	83 c4 10             	add    esp,0x10
c0014f73:	83 ec 0c             	sub    esp,0xc
c0014f76:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0014f7b:	50                   	push   eax
c0014f7c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f84:	57                   	push   edi
c0014f85:	68 5e 37 02 c0       	push   0xc002375e
c0014f8a:	e8 bf 1f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014f8f:	83 c4 20             	add    esp,0x20
c0014f92:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014f97:	75 0a                	jne    c0014fa3 <Thr::loadDLL(char const*, bool)+0xda>
c0014f99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014f9d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014fa1:	75 3e                	jne    c0014fe1 <Thr::loadDLL(char const*, bool)+0x118>
c0014fa3:	89 e8                	mov    eax,ebp
c0014fa5:	31 db                	xor    ebx,ebx
c0014fa7:	84 c0                	test   al,al
c0014fa9:	0f 84 6e 01 00 00    	je     c001511d <Thr::loadDLL(char const*, bool)+0x254>
c0014faf:	50                   	push   eax
c0014fb0:	50                   	push   eax
c0014fb1:	68 7f 37 02 c0       	push   0xc002377f
c0014fb6:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0014fba:	53                   	push   ebx
c0014fbb:	e8 90 b6 fe ff       	call   c0000650 <strcpy>
c0014fc0:	58                   	pop    eax
c0014fc1:	5a                   	pop    edx
c0014fc2:	56                   	push   esi
c0014fc3:	53                   	push   ebx
c0014fc4:	e8 a7 b8 fe ff       	call   c0000870 <strcat>
c0014fc9:	59                   	pop    ecx
c0014fca:	5f                   	pop    edi
c0014fcb:	68 5c 37 02 c0       	push   0xc002375c
c0014fd0:	53                   	push   ebx
c0014fd1:	e8 9a b8 fe ff       	call   c0000870 <strcat>
c0014fd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014fd9:	e8 f4 9d ff ff       	call   c000edd2 <KePanic(char const*)>
c0014fde:	83 c4 10             	add    esp,0x10
c0014fe1:	53                   	push   ebx
c0014fe2:	6a 03                	push   0x3
c0014fe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fe8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014fec:	05 ff 0f 00 00       	add    eax,0xfff
c0014ff1:	83 d2 00             	adc    edx,0x0
c0014ff4:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014ff8:	50                   	push   eax
c0014ff9:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c0014fff:	e8 6e d9 ff ff       	call   c0012972 <VAS::allocatePages(int, int)>
c0015004:	89 c3                	mov    ebx,eax
c0015006:	58                   	pop    eax
c0015007:	5a                   	pop    edx
c0015008:	53                   	push   ebx
c0015009:	68 aa 2a 02 c0       	push   0xc0022aaa
c001500e:	e8 3b 1f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015013:	89 34 24             	mov    DWORD PTR [esp],esi
c0015016:	e8 65 b5 fe ff       	call   c0000580 <strlen>
c001501b:	8b 3d e0 ce 02 c0    	mov    edi,DWORD PTR ds:0xc002cee0
c0015021:	40                   	inc    eax
c0015022:	89 04 24             	mov    DWORD PTR [esp],eax
c0015025:	e8 62 9a ff ff       	call   c000ea8c <malloc>
c001502a:	59                   	pop    ecx
c001502b:	89 04 bd 00 d3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2d00],eax
c0015032:	a1 e0 ce 02 c0       	mov    eax,ds:0xc002cee0
c0015037:	5f                   	pop    edi
c0015038:	56                   	push   esi
c0015039:	ff 34 85 00 d3 02 c0 	push   DWORD PTR [eax*4-0x3ffd2d00]
c0015040:	e8 0b b6 fe ff       	call   c0000650 <strcpy>
c0015045:	a1 e0 ce 02 c0       	mov    eax,ds:0xc002cee0
c001504a:	89 1c 85 00 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f00],ebx
c0015051:	8d 50 01             	lea    edx,[eax+0x1]
c0015054:	89 15 e0 ce 02 c0    	mov    DWORD PTR ds:0xc002cee0,edx
c001505a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001505e:	83 c4 0c             	add    esp,0xc
c0015061:	6a 01                	push   0x1
c0015063:	53                   	push   ebx
c0015064:	56                   	push   esi
c0015065:	89 14 85 00 cf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3100],edx
c001506c:	e8 94 f6 ff ff       	call   c0014705 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0015071:	83 c4 10             	add    esp,0x10
c0015074:	89 c7                	mov    edi,eax
c0015076:	89 f8                	mov    eax,edi
c0015078:	83 f0 01             	xor    eax,0x1
c001507b:	84 c0                	test   al,al
c001507d:	74 18                	je     c0015097 <Thr::loadDLL(char const*, bool)+0x1ce>
c001507f:	89 e8                	mov    eax,ebp
c0015081:	84 c0                	test   al,al
c0015083:	74 12                	je     c0015097 <Thr::loadDLL(char const*, bool)+0x1ce>
c0015085:	83 ec 0c             	sub    esp,0xc
c0015088:	68 98 37 02 c0       	push   0xc0023798
c001508d:	e8 40 9d ff ff       	call   c000edd2 <KePanic(char const*)>
c0015092:	83 c4 10             	add    esp,0x10
c0015095:	eb 06                	jmp    c001509d <Thr::loadDLL(char const*, bool)+0x1d4>
c0015097:	89 f8                	mov    eax,edi
c0015099:	84 c0                	test   al,al
c001509b:	75 10                	jne    c00150ad <Thr::loadDLL(char const*, bool)+0x1e4>
c001509d:	83 ec 0c             	sub    esp,0xc
c00150a0:	68 b7 37 02 c0       	push   0xc00237b7
c00150a5:	e8 28 9d ff ff       	call   c000edd2 <KePanic(char const*)>
c00150aa:	83 c4 10             	add    esp,0x10
c00150ad:	31 f6                	xor    esi,esi
c00150af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150b3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00150b7:	05 ff 0f 00 00       	add    eax,0xfff
c00150bc:	83 d2 00             	adc    edx,0x0
c00150bf:	0f ac d0 0c          	shrd   eax,edx,0xc
c00150c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00150c7:	c1 ea 0c             	shr    edx,0xc
c00150ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00150ce:	ba 00 00 00 00       	mov    edx,0x0
c00150d3:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00150d7:	89 d0                	mov    eax,edx
c00150d9:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00150dd:	73 32                	jae    c0015111 <Thr::loadDLL(char const*, bool)+0x248>
c00150df:	50                   	push   eax
c00150e0:	50                   	push   eax
c00150e1:	89 f0                	mov    eax,esi
c00150e3:	c1 e0 0c             	shl    eax,0xc
c00150e6:	01 d8                	add    eax,ebx
c00150e8:	50                   	push   eax
c00150e9:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c00150ef:	e8 7c d3 ff ff       	call   c0012470 <VAS::getPageTableEntry(unsigned long)>
c00150f4:	83 c4 10             	add    esp,0x10
c00150f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00150f9:	a8 60                	test   al,0x60
c00150fb:	75 11                	jne    c001510e <Thr::loadDLL(char const*, bool)+0x245>
c00150fd:	83 ec 0c             	sub    esp,0xc
c0015100:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015105:	50                   	push   eax
c0015106:	e8 58 9e ff ff       	call   c000ef63 <Phys::freePage(unsigned long)>
c001510b:	83 c4 10             	add    esp,0x10
c001510e:	46                   	inc    esi
c001510f:	eb 9e                	jmp    c00150af <Thr::loadDLL(char const*, bool)+0x1e6>
c0015111:	89 f8                	mov    eax,edi
c0015113:	84 c0                	test   al,al
c0015115:	b8 00 00 00 00       	mov    eax,0x0
c001511a:	0f 44 d8             	cmove  ebx,eax
c001511d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015123:	89 d8                	mov    eax,ebx
c0015125:	5b                   	pop    ebx
c0015126:	5e                   	pop    esi
c0015127:	5f                   	pop    edi
c0015128:	5d                   	pop    ebp
c0015129:	c3                   	ret    

c001512a <Thr::executeDLL(unsigned long, void*)>:
c001512a:	56                   	push   esi
c001512b:	53                   	push   ebx
c001512c:	52                   	push   edx
c001512d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015131:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015135:	85 db                	test   ebx,ebx
c0015137:	75 10                	jne    c0015149 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0015139:	83 ec 0c             	sub    esp,0xc
c001513c:	68 d3 37 02 c0       	push   0xc00237d3
c0015141:	e8 8c 9c ff ff       	call   c000edd2 <KePanic(char const*)>
c0015146:	83 c4 10             	add    esp,0x10
c0015149:	50                   	push   eax
c001514a:	50                   	push   eax
c001514b:	53                   	push   ebx
c001514c:	68 fd 37 02 c0       	push   0xc00237fd
c0015151:	e8 f8 1d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015156:	89 d8                	mov    eax,ebx
c0015158:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001515c:	83 c4 14             	add    esp,0x14
c001515f:	5b                   	pop    ebx
c0015160:	5e                   	pop    esi
c0015161:	ff e0                	jmp    eax

c0015163 <KeProcessExec(Process*, char const*)>:
c0015163:	56                   	push   esi
c0015164:	53                   	push   ebx
c0015165:	83 ec 04             	sub    esp,0x4
c0015168:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001516c:	8b b3 12 05 00 00    	mov    esi,DWORD PTR [ebx+0x512]
c0015172:	85 f6                	test   esi,esi
c0015174:	74 16                	je     c001518c <KeProcessExec(Process*, char const*)+0x29>
c0015176:	83 ec 0c             	sub    esp,0xc
c0015179:	56                   	push   esi
c001517a:	e8 83 d5 ff ff       	call   c0012702 <VAS::~VAS()>
c001517f:	58                   	pop    eax
c0015180:	5a                   	pop    edx
c0015181:	6a 14                	push   0x14
c0015183:	56                   	push   esi
c0015184:	e8 7e 76 ff ff       	call   c000c807 <operator delete(void*, unsigned long)>
c0015189:	83 c4 10             	add    esp,0x10
c001518c:	83 ec 0c             	sub    esp,0xc
c001518f:	6a 14                	push   0x14
c0015191:	e8 f6 98 ff ff       	call   c000ea8c <malloc>
c0015196:	89 c6                	mov    esi,eax
c0015198:	58                   	pop    eax
c0015199:	5a                   	pop    edx
c001519a:	6a 00                	push   0x0
c001519c:	56                   	push   esi
c001519d:	e8 0c da ff ff       	call   c0012bae <VAS::VAS(bool)>
c00151a2:	89 b3 12 05 00 00    	mov    DWORD PTR [ebx+0x512],esi
c00151a8:	59                   	pop    ecx
c00151a9:	5e                   	pop    esi
c00151aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00151ae:	50                   	push   eax
c00151af:	53                   	push   ebx
c00151b0:	e8 11 f0 ff ff       	call   c00141c6 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00151b5:	83 c4 14             	add    esp,0x14
c00151b8:	31 c0                	xor    eax,eax
c00151ba:	5b                   	pop    ebx
c00151bb:	5e                   	pop    esi
c00151bc:	c3                   	ret    
c00151bd:	66 90                	xchg   ax,ax
c00151bf:	90                   	nop

c00151c0 <userModeEntryPoint(void*)>:
c00151c0:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c00151c8:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00151cd:	85 c0                	test   eax,eax
c00151cf:	75 03                	jne    c00151d4 <userModeEntryPoint(void*)+0x14>
c00151d1:	fb                   	sti    
c00151d2:	66 90                	xchg   ax,ax
c00151d4:	fb                   	sti    
c00151d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151dd:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00151e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00151e7:	e9 53 b0 fe ff       	jmp    c000023f <goToUsermode>

c00151ec <changeTSS>:
c00151ec:	83 ec 14             	sub    esp,0x14
c00151ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151f4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00151f7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00151fc:	c1 e2 15             	shl    edx,0x15
c00151ff:	29 d0                	sub    eax,edx
c0015201:	50                   	push   eax
c0015202:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0015207:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001520d:	05 68 11 00 00       	add    eax,0x1168
c0015212:	50                   	push   eax
c0015213:	e8 2c c8 ff ff       	call   c0011a44 <TSS::setESP(unsigned long)>
c0015218:	83 c4 1c             	add    esp,0x1c
c001521b:	c3                   	ret    

c001521c <switchToThread(ThreadControlBlock*)>:
c001521c:	57                   	push   edi
c001521d:	8b 0d ac d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6ac
c0015223:	56                   	push   esi
c0015224:	53                   	push   ebx
c0015225:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015229:	85 c9                	test   ecx,ecx
c001522b:	0f 85 8b 00 00 00    	jne    c00152bc <switchToThread(ThreadControlBlock*)+0xa0>
c0015231:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015235:	81 fa ff 00 00 00    	cmp    edx,0xff
c001523b:	74 7b                	je     c00152b8 <switchToThread(ThreadControlBlock*)+0x9c>
c001523d:	b8 00 04 00 00       	mov    eax,0x400
c0015242:	29 d0                	sub    eax,edx
c0015244:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0015247:	d1 f8                	sar    eax,1
c0015249:	01 d0                	add    eax,edx
c001524b:	90                   	nop
c001524c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001524f:	e8 3f 38 00 00       	call   c0018a93 <HalQueryPerformanceCounter()>
c0015254:	a3 f0 d6 02 c0       	mov    ds:0xc002d6f0,eax
c0015259:	89 c6                	mov    esi,eax
c001525b:	89 d7                	mov    edi,edx
c001525d:	2b 35 e0 d6 02 c0    	sub    esi,DWORD PTR ds:0xc002d6e0
c0015263:	a3 e0 d6 02 c0       	mov    ds:0xc002d6e0,eax
c0015268:	1b 3d e4 d6 02 c0    	sbb    edi,DWORD PTR ds:0xc002d6e4
c001526e:	89 35 e8 d6 02 c0    	mov    DWORD PTR ds:0xc002d6e8,esi
c0015274:	89 15 f4 d6 02 c0    	mov    DWORD PTR ds:0xc002d6f4,edx
c001527a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015280:	89 15 e4 d6 02 c0    	mov    DWORD PTR ds:0xc002d6e4,edx
c0015286:	89 3d ec d6 02 c0    	mov    DWORD PTR ds:0xc002d6ec,edi
c001528c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001528f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015292:	01 c6                	add    esi,eax
c0015294:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015297:	11 d7                	adc    edi,edx
c0015299:	83 ec 0c             	sub    esp,0xc
c001529c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001529f:	53                   	push   ebx
c00152a0:	e8 d2 af fe ff       	call   c0000277 <switchToThreadASM>
c00152a5:	0f 20 c0             	mov    eax,cr0
c00152a8:	83 c8 08             	or     eax,0x8
c00152ab:	0f 22 c0             	mov    cr0,eax
c00152ae:	83 c4 10             	add    esp,0x10
c00152b1:	5b                   	pop    ebx
c00152b2:	5e                   	pop    esi
c00152b3:	5f                   	pop    edi
c00152b4:	c3                   	ret    
c00152b5:	8d 76 00             	lea    esi,[esi+0x0]
c00152b8:	31 c0                	xor    eax,eax
c00152ba:	eb 90                	jmp    c001524c <switchToThread(ThreadControlBlock*)+0x30>
c00152bc:	5b                   	pop    ebx
c00152bd:	c7 05 a8 d6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x1
c00152c7:	5e                   	pop    esi
c00152c8:	5f                   	pop    edi
c00152c9:	c3                   	ret    
c00152ca:	66 90                	xchg   ax,ax

c00152cc <Process::addArgs(char**)>:
c00152cc:	57                   	push   edi
c00152cd:	56                   	push   esi
c00152ce:	53                   	push   ebx
c00152cf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00152d3:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00152d7:	85 f6                	test   esi,esi
c00152d9:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c00152e3:	74 4f                	je     c0015334 <Process::addArgs(char**)+0x68>
c00152e5:	8b 06                	mov    eax,DWORD PTR [esi]
c00152e7:	85 c0                	test   eax,eax
c00152e9:	74 49                	je     c0015334 <Process::addArgs(char**)+0x68>
c00152eb:	31 db                	xor    ebx,ebx
c00152ed:	8d 76 00             	lea    esi,[esi+0x0]
c00152f0:	83 ec 0c             	sub    esp,0xc
c00152f3:	50                   	push   eax
c00152f4:	e8 87 b2 fe ff       	call   c0000580 <strlen>
c00152f9:	83 c0 01             	add    eax,0x1
c00152fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00152ff:	e8 88 97 ff ff       	call   c000ea8c <malloc>
c0015304:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c001530b:	5a                   	pop    edx
c001530c:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001530f:	83 c3 01             	add    ebx,0x1
c0015312:	59                   	pop    ecx
c0015313:	52                   	push   edx
c0015314:	50                   	push   eax
c0015315:	e8 36 b3 fe ff       	call   c0000650 <strcpy>
c001531a:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0015320:	83 c4 10             	add    esp,0x10
c0015323:	83 c1 01             	add    ecx,0x1
c0015326:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c001532c:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c001532f:	85 c0                	test   eax,eax
c0015331:	75 bd                	jne    c00152f0 <Process::addArgs(char**)+0x24>
c0015333:	90                   	nop
c0015334:	5b                   	pop    ebx
c0015335:	5e                   	pop    esi
c0015336:	5f                   	pop    edi
c0015337:	c3                   	ret    

c0015338 <Process::Process(char const*, Process*, char**)>:
c0015338:	56                   	push   esi
c0015339:	53                   	push   ebx
c001533a:	83 ec 14             	sub    esp,0x14
c001533d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015341:	05 0c 02 00 00       	add    eax,0x20c
c0015346:	bb 07 00 00 00       	mov    ebx,0x7
c001534b:	89 c6                	mov    esi,eax
c001534d:	8d 76 00             	lea    esi,[esi+0x0]
c0015350:	85 db                	test   ebx,ebx
c0015352:	78 14                	js     c0015368 <Process::Process(char const*, Process*, char**)+0x30>
c0015354:	83 ec 0c             	sub    esp,0xc
c0015357:	56                   	push   esi
c0015358:	e8 d3 b8 00 00       	call   c0020c30 <ThreadControlBlock::ThreadControlBlock()>
c001535d:	83 c4 10             	add    esp,0x10
c0015360:	83 c6 5f             	add    esi,0x5f
c0015363:	83 eb 01             	sub    ebx,0x1
c0015366:	eb e8                	jmp    c0015350 <Process::Process(char const*, Process*, char**)+0x18>
c0015368:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001536c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015373:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015377:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001537e:	83 ec 0c             	sub    esp,0xc
c0015381:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015385:	e8 7a 89 ff ff       	call   c000dd04 <KeNewProcessEnv(Process*)>
c001538a:	83 c4 10             	add    esp,0x10
c001538d:	89 c2                	mov    edx,eax
c001538f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015393:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015399:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001539d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00153a6:	a1 1c 51 02 c0       	mov    eax,ds:0xc002511c
c00153ab:	8d 50 01             	lea    edx,[eax+0x1]
c00153ae:	89 15 1c 51 02 c0    	mov    DWORD PTR ds:0xc002511c,edx
c00153b4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00153b8:	89 02                	mov    DWORD PTR [edx],eax
c00153ba:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00153c2:	83 ec 0c             	sub    esp,0xc
c00153c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00153c9:	e8 be 96 ff ff       	call   c000ea8c <malloc>
c00153ce:	83 c4 10             	add    esp,0x10
c00153d1:	89 c3                	mov    ebx,eax
c00153d3:	83 ec 08             	sub    esp,0x8
c00153d6:	6a 00                	push   0x0
c00153d8:	53                   	push   ebx
c00153d9:	e8 d0 d7 ff ff       	call   c0012bae <VAS::VAS(bool)>
c00153de:	83 c4 10             	add    esp,0x10
c00153e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00153e5:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00153eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00153ef:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00153f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00153fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015401:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015407:	e8 7f aa ff ff       	call   c000fe8b <KeInitSignals()>
c001540c:	89 c2                	mov    edx,eax
c001540e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015412:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015418:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001541c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015422:	85 c0                	test   eax,eax
c0015424:	74 42                	je     c0015468 <Process::Process(char const*, Process*, char**)+0x130>
c0015426:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001542a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015430:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015436:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001543a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015440:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015444:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001544a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015450:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015454:	05 0c 01 00 00       	add    eax,0x10c
c0015459:	83 ec 08             	sub    esp,0x8
c001545c:	52                   	push   edx
c001545d:	50                   	push   eax
c001545e:	e8 ed b1 fe ff       	call   c0000650 <strcpy>
c0015463:	83 c4 10             	add    esp,0x10
c0015466:	eb 7c                	jmp    c00154e4 <Process::Process(char const*, Process*, char**)+0x1ac>
c0015468:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015470:	83 ec 0c             	sub    esp,0xc
c0015473:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015477:	e8 10 96 ff ff       	call   c000ea8c <malloc>
c001547c:	83 c4 10             	add    esp,0x10
c001547f:	89 c3                	mov    ebx,eax
c0015481:	83 ec 08             	sub    esp,0x8
c0015484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015488:	53                   	push   ebx
c0015489:	e8 d6 c2 ff ff       	call   c0011764 <VgaText::VgaText(char const*)>
c001548e:	83 c4 10             	add    esp,0x10
c0015491:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015495:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001549b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001549f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00154a5:	83 ec 0c             	sub    esp,0xc
c00154a8:	50                   	push   eax
c00154a9:	e8 1c bb ff ff       	call   c0010fca <addToTerminalCycle(VgaText*)>
c00154ae:	83 c4 10             	add    esp,0x10
c00154b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154b5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00154bb:	83 ec 0c             	sub    esp,0xc
c00154be:	50                   	push   eax
c00154bf:	e8 77 bd ff ff       	call   c001123b <setActiveTerminal(VgaText*)>
c00154c4:	83 c4 10             	add    esp,0x10
c00154c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154cb:	05 0c 01 00 00       	add    eax,0x10c
c00154d0:	83 ec 08             	sub    esp,0x8
c00154d3:	68 1c 38 02 c0       	push   0xc002381c
c00154d8:	50                   	push   eax
c00154d9:	e8 72 b1 fe ff       	call   c0000650 <strcpy>
c00154de:	83 c4 10             	add    esp,0x10
c00154e1:	8d 76 00             	lea    esi,[esi+0x0]
c00154e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154e8:	83 c0 0c             	add    eax,0xc
c00154eb:	83 ec 08             	sub    esp,0x8
c00154ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00154f2:	50                   	push   eax
c00154f3:	e8 58 b1 fe ff       	call   c0000650 <strcpy>
c00154f8:	83 c4 10             	add    esp,0x10
c00154fb:	83 ec 08             	sub    esp,0x8
c00154fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015502:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015506:	e8 c1 fd ff ff       	call   c00152cc <Process::addArgs(char**)>
c001550b:	83 c4 10             	add    esp,0x10
c001550e:	83 ec 08             	sub    esp,0x8
c0015511:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015515:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015519:	e8 a8 ec ff ff       	call   c00141c6 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001551e:	83 c4 10             	add    esp,0x10
c0015521:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015525:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015529:	83 f0 01             	xor    eax,0x1
c001552c:	88 c2                	mov    dl,al
c001552e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015532:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015538:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001553c:	8b 10                	mov    edx,DWORD PTR [eax]
c001553e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015543:	52                   	push   edx
c0015544:	50                   	push   eax
c0015545:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015549:	68 74 38 02 c0       	push   0xc0023874
c001554e:	e8 fb 19 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015553:	83 c4 10             	add    esp,0x10
c0015556:	90                   	nop
c0015557:	83 c4 14             	add    esp,0x14
c001555a:	5b                   	pop    ebx
c001555b:	5e                   	pop    esi
c001555c:	c3                   	ret    
c001555d:	90                   	nop
c001555e:	66 90                	xchg   ax,ax

c0015560 <Process::Process(bool, char const*, Process*, char**)>:
c0015560:	56                   	push   esi
c0015561:	53                   	push   ebx
c0015562:	83 ec 24             	sub    esp,0x24
c0015565:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015569:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001556d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015571:	05 0c 02 00 00       	add    eax,0x20c
c0015576:	bb 07 00 00 00       	mov    ebx,0x7
c001557b:	89 c6                	mov    esi,eax
c001557d:	8d 76 00             	lea    esi,[esi+0x0]
c0015580:	85 db                	test   ebx,ebx
c0015582:	78 14                	js     c0015598 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015584:	83 ec 0c             	sub    esp,0xc
c0015587:	56                   	push   esi
c0015588:	e8 a3 b6 00 00       	call   c0020c30 <ThreadControlBlock::ThreadControlBlock()>
c001558d:	83 c4 10             	add    esp,0x10
c0015590:	83 c6 5f             	add    esi,0x5f
c0015593:	83 eb 01             	sub    ebx,0x1
c0015596:	eb e8                	jmp    c0015580 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015598:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001559c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00155a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00155a7:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00155ae:	83 ec 0c             	sub    esp,0xc
c00155b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00155b5:	e8 4a 87 ff ff       	call   c000dd04 <KeNewProcessEnv(Process*)>
c00155ba:	83 c4 10             	add    esp,0x10
c00155bd:	89 c2                	mov    edx,eax
c00155bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00155c3:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00155c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00155cd:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00155d6:	a1 1c 51 02 c0       	mov    eax,ds:0xc002511c
c00155db:	8d 50 01             	lea    edx,[eax+0x1]
c00155de:	89 15 1c 51 02 c0    	mov    DWORD PTR ds:0xc002511c,edx
c00155e4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00155e8:	89 02                	mov    DWORD PTR [edx],eax
c00155ea:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00155f2:	83 ec 0c             	sub    esp,0xc
c00155f5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00155f9:	e8 8e 94 ff ff       	call   c000ea8c <malloc>
c00155fe:	83 c4 10             	add    esp,0x10
c0015601:	89 c3                	mov    ebx,eax
c0015603:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015608:	83 ec 08             	sub    esp,0x8
c001560b:	50                   	push   eax
c001560c:	53                   	push   ebx
c001560d:	e8 9c d5 ff ff       	call   c0012bae <VAS::VAS(bool)>
c0015612:	83 c4 10             	add    esp,0x10
c0015615:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015619:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001561f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015623:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001562d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015631:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015635:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001563b:	e8 4b a8 ff ff       	call   c000fe8b <KeInitSignals()>
c0015640:	89 c2                	mov    edx,eax
c0015642:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015646:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c001564c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015650:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015656:	85 c0                	test   eax,eax
c0015658:	74 42                	je     c001569c <Process::Process(bool, char const*, Process*, char**)+0x13c>
c001565a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001565e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015664:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001566a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001566e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015674:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015678:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001567e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015684:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015688:	05 0c 01 00 00       	add    eax,0x10c
c001568d:	83 ec 08             	sub    esp,0x8
c0015690:	52                   	push   edx
c0015691:	50                   	push   eax
c0015692:	e8 b9 af fe ff       	call   c0000650 <strcpy>
c0015697:	83 c4 10             	add    esp,0x10
c001569a:	eb 7c                	jmp    c0015718 <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c001569c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c00156a4:	83 ec 0c             	sub    esp,0xc
c00156a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00156ab:	e8 dc 93 ff ff       	call   c000ea8c <malloc>
c00156b0:	83 c4 10             	add    esp,0x10
c00156b3:	89 c3                	mov    ebx,eax
c00156b5:	83 ec 08             	sub    esp,0x8
c00156b8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00156bc:	53                   	push   ebx
c00156bd:	e8 a2 c0 ff ff       	call   c0011764 <VgaText::VgaText(char const*)>
c00156c2:	83 c4 10             	add    esp,0x10
c00156c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156c9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00156cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156d3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00156d9:	83 ec 0c             	sub    esp,0xc
c00156dc:	50                   	push   eax
c00156dd:	e8 e8 b8 ff ff       	call   c0010fca <addToTerminalCycle(VgaText*)>
c00156e2:	83 c4 10             	add    esp,0x10
c00156e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156e9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00156ef:	83 ec 0c             	sub    esp,0xc
c00156f2:	50                   	push   eax
c00156f3:	e8 43 bb ff ff       	call   c001123b <setActiveTerminal(VgaText*)>
c00156f8:	83 c4 10             	add    esp,0x10
c00156fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156ff:	05 0c 01 00 00       	add    eax,0x10c
c0015704:	83 ec 08             	sub    esp,0x8
c0015707:	68 1c 38 02 c0       	push   0xc002381c
c001570c:	50                   	push   eax
c001570d:	e8 3e af fe ff       	call   c0000650 <strcpy>
c0015712:	83 c4 10             	add    esp,0x10
c0015715:	8d 76 00             	lea    esi,[esi+0x0]
c0015718:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001571c:	83 c0 0c             	add    eax,0xc
c001571f:	83 ec 08             	sub    esp,0x8
c0015722:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015726:	50                   	push   eax
c0015727:	e8 24 af fe ff       	call   c0000650 <strcpy>
c001572c:	83 c4 10             	add    esp,0x10
c001572f:	83 ec 08             	sub    esp,0x8
c0015732:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015736:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001573a:	e8 8d fb ff ff       	call   c00152cc <Process::addArgs(char**)>
c001573f:	83 c4 10             	add    esp,0x10
c0015742:	90                   	nop
c0015743:	83 c4 24             	add    esp,0x24
c0015746:	5b                   	pop    ebx
c0015747:	5e                   	pop    esi
c0015748:	c3                   	ret    
c0015749:	8d 76 00             	lea    esi,[esi+0x0]

c001574c <taskStartupFunction>:
c001574c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015751:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015754:	c3                   	ret    
c0015755:	8d 76 00             	lea    esi,[esi+0x0]

c0015758 <KeDisablePreemption()>:
c0015758:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c001575d:	85 c0                	test   eax,eax
c001575f:	75 13                	jne    c0015774 <KeDisablePreemption()+0x1c>
c0015761:	8a 15 74 ad 02 c0    	mov    dl,BYTE PTR ds:0xc002ad74
c0015767:	c6 05 74 ad 02 c0 00 	mov    BYTE PTR ds:0xc002ad74,0x0
c001576e:	88 15 88 d6 02 c0    	mov    BYTE PTR ds:0xc002d688,dl
c0015774:	83 c0 01             	add    eax,0x1
c0015777:	a3 8c d6 02 c0       	mov    ds:0xc002d68c,eax
c001577c:	c3                   	ret    
c001577d:	8d 76 00             	lea    esi,[esi+0x0]

c0015780 <KeRestorePreemption()>:
c0015780:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c0015785:	83 e8 01             	sub    eax,0x1
c0015788:	a3 8c d6 02 c0       	mov    ds:0xc002d68c,eax
c001578d:	75 0d                	jne    c001579c <KeRestorePreemption()+0x1c>
c001578f:	a0 88 d6 02 c0       	mov    al,ds:0xc002d688
c0015794:	a2 74 ad 02 c0       	mov    ds:0xc002ad74,al
c0015799:	8d 76 00             	lea    esi,[esi+0x0]
c001579c:	c3                   	ret    
c001579d:	90                   	nop
c001579e:	66 90                	xchg   ax,ax

c00157a0 <Process::createThread(void (*)(void*), void*, int)>:
c00157a0:	57                   	push   edi
c00157a1:	31 c9                	xor    ecx,ecx
c00157a3:	56                   	push   esi
c00157a4:	53                   	push   ebx
c00157a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00157a9:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00157b0:	89 f2                	mov    edx,esi
c00157b2:	66 90                	xchg   ax,ax
c00157b4:	0f b7 c2             	movzx  eax,dx
c00157b7:	80 e2 01             	and    dl,0x1
c00157ba:	74 14                	je     c00157d0 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00157bc:	d1 f8                	sar    eax,1
c00157be:	83 c1 01             	add    ecx,0x1
c00157c1:	83 f9 10             	cmp    ecx,0x10
c00157c4:	89 c2                	mov    edx,eax
c00157c6:	75 ec                	jne    c00157b4 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00157c8:	31 db                	xor    ebx,ebx
c00157ca:	89 d8                	mov    eax,ebx
c00157cc:	5b                   	pop    ebx
c00157cd:	5e                   	pop    esi
c00157ce:	5f                   	pop    edi
c00157cf:	c3                   	ret    
c00157d0:	b8 01 00 00 00       	mov    eax,0x1
c00157d5:	d3 e0                	shl    eax,cl
c00157d7:	09 c6                	or     esi,eax
c00157d9:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00157e0:	8d 04 49             	lea    eax,[ecx+ecx*2]
c00157e3:	c1 e0 05             	shl    eax,0x5
c00157e6:	29 c8                	sub    eax,ecx
c00157e8:	01 d8                	add    eax,ebx
c00157ea:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00157f1:	75 0d                	jne    c0015800 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00157f3:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00157fd:	8d 76 00             	lea    esi,[esi+0x0]
c0015800:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015806:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0015809:	83 ec 0c             	sub    esp,0xc
c001580c:	c1 e6 05             	shl    esi,0x5
c001580f:	29 ce                	sub    esi,ecx
c0015811:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015814:	8d 04 33             	lea    eax,[ebx+esi*1]
c0015817:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001581d:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015823:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015829:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015830:	c7 80 40 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x240],0x0
c001583a:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015840:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015844:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c001584a:	89 ca                	mov    edx,ecx
c001584c:	f7 da                	neg    edx
c001584e:	c1 e2 15             	shl    edx,0x15
c0015851:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015857:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001585d:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0015861:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001586b:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015871:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015875:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001587b:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015885:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001588f:	68 00 01 00 00       	push   0x100
c0015894:	e8 f3 91 ff ff       	call   c000ea8c <malloc>
c0015899:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001589c:	58                   	pop    eax
c001589d:	5a                   	pop    edx
c001589e:	53                   	push   ebx
c001589f:	68 cc d6 02 c0       	push   0xc002d6cc
c00158a4:	e8 33 af 00 00       	call   c00207dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00158a9:	83 c4 10             	add    esp,0x10
c00158ac:	89 d8                	mov    eax,ebx
c00158ae:	5b                   	pop    ebx
c00158af:	5e                   	pop    esi
c00158b0:	5f                   	pop    edi
c00158b1:	c3                   	ret    
c00158b2:	66 90                	xchg   ax,ax

c00158b4 <Process::createUserThread()>:
c00158b4:	83 ec 0c             	sub    esp,0xc
c00158b7:	68 80 00 00 00       	push   0x80
c00158bc:	6a 00                	push   0x0
c00158be:	68 c0 51 01 c0       	push   0xc00151c0
c00158c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00158c7:	50                   	push   eax
c00158c8:	e8 d3 fe ff ff       	call   c00157a0 <Process::createThread(void (*)(void*), void*, int)>
c00158cd:	83 c4 1c             	add    esp,0x1c
c00158d0:	c3                   	ret    
c00158d1:	8d 76 00             	lea    esi,[esi+0x0]

c00158d4 <setupMultitasking(void (*)())>:
c00158d4:	56                   	push   esi
c00158d5:	53                   	push   ebx
c00158d6:	83 ec 04             	sub    esp,0x4
c00158d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00158dd:	eb 11                	jmp    c00158f0 <setupMultitasking(void (*)())+0x1c>
c00158df:	90                   	nop
c00158e0:	83 ec 0c             	sub    esp,0xc
c00158e3:	68 cc d6 02 c0       	push   0xc002d6cc
c00158e8:	e8 33 ae 00 00       	call   c0020720 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00158ed:	83 c4 10             	add    esp,0x10
c00158f0:	83 ec 0c             	sub    esp,0xc
c00158f3:	68 cc d6 02 c0       	push   0xc002d6cc
c00158f8:	e8 ff ad 00 00       	call   c00206fc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00158fd:	83 c4 10             	add    esp,0x10
c0015900:	84 c0                	test   al,al
c0015902:	74 dc                	je     c00158e0 <setupMultitasking(void (*)())+0xc>
c0015904:	83 ec 0c             	sub    esp,0xc
c0015907:	68 24 07 00 00       	push   0x724
c001590c:	e8 7b 91 ff ff       	call   c000ea8c <malloc>
c0015911:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015918:	6a 00                	push   0x0
c001591a:	68 20 38 02 c0       	push   0xc0023820
c001591f:	6a 01                	push   0x1
c0015921:	50                   	push   eax
c0015922:	89 c3                	mov    ebx,eax
c0015924:	e8 37 fc ff ff       	call   c0015560 <Process::Process(bool, char const*, Process*, char**)>
c0015929:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001592f:	83 c4 14             	add    esp,0x14
c0015932:	89 1d d8 d6 02 c0    	mov    DWORD PTR ds:0xc002d6d8,ebx
c0015938:	50                   	push   eax
c0015939:	e8 fd b8 ff ff       	call   c001123b <setActiveTerminal(VgaText*)>
c001593e:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015945:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c001594f:	83 c8 01             	or     eax,0x1
c0015952:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015959:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001595f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015962:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001596c:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015972:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001597c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015982:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001598c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015996:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001599c:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00159a2:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00159ac:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00159b6:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00159bd:	e8 ca 90 ff ff       	call   c000ea8c <malloc>
c00159c2:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00159c8:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00159ce:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00159d4:	5a                   	pop    edx
c00159d5:	59                   	pop    ecx
c00159d6:	68 1c 38 02 c0       	push   0xc002381c
c00159db:	50                   	push   eax
c00159dc:	e8 6f ac fe ff       	call   c0000650 <strcpy>
c00159e1:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00159e8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00159ec:	83 c4 14             	add    esp,0x14
c00159ef:	5b                   	pop    ebx
c00159f0:	5e                   	pop    esi
c00159f1:	e9 73 a8 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00159f6:	66 90                	xchg   ax,ax

c00159f8 <schedule()>:
c00159f8:	8b 15 ac d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6ac
c00159fe:	85 d2                	test   edx,edx
c0015a00:	74 0e                	je     c0015a10 <schedule()+0x18>
c0015a02:	c7 05 a8 d6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x1
c0015a0c:	c3                   	ret    
c0015a0d:	8d 76 00             	lea    esi,[esi+0x0]
c0015a10:	53                   	push   ebx
c0015a11:	83 ec 14             	sub    esp,0x14
c0015a14:	68 cc d6 02 c0       	push   0xc002d6cc
c0015a19:	e8 de ac 00 00       	call   c00206fc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015a1e:	83 c4 10             	add    esp,0x10
c0015a21:	84 c0                	test   al,al
c0015a23:	75 3f                	jne    c0015a64 <schedule()+0x6c>
c0015a25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a2a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015a2d:	83 fa 01             	cmp    edx,0x1
c0015a30:	74 3a                	je     c0015a6c <schedule()+0x74>
c0015a32:	66 90                	xchg   ax,ax
c0015a34:	83 ec 0c             	sub    esp,0xc
c0015a37:	68 cc d6 02 c0       	push   0xc002d6cc
c0015a3c:	e8 d7 ac 00 00       	call   c0020718 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015a41:	c7 04 24 cc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6cc
c0015a48:	89 c3                	mov    ebx,eax
c0015a4a:	e8 d1 ac 00 00       	call   c0020720 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015a4f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015a56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015a59:	e8 be f7 ff ff       	call   c001521c <switchToThread(ThreadControlBlock*)>
c0015a5e:	83 c4 10             	add    esp,0x10
c0015a61:	8d 76 00             	lea    esi,[esi+0x0]
c0015a64:	83 c4 08             	add    esp,0x8
c0015a67:	5b                   	pop    ebx
c0015a68:	c3                   	ret    
c0015a69:	8d 76 00             	lea    esi,[esi+0x0]
c0015a6c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015a73:	83 ec 08             	sub    esp,0x8
c0015a76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a7b:	50                   	push   eax
c0015a7c:	68 cc d6 02 c0       	push   0xc002d6cc
c0015a81:	e8 56 ad 00 00       	call   c00207dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015a86:	83 c4 10             	add    esp,0x10
c0015a89:	eb a9                	jmp    c0015a34 <schedule()+0x3c>
c0015a8b:	90                   	nop

c0015a8c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015a8c:	83 ec 0c             	sub    esp,0xc
c0015a8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a94:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015a98:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015a9b:	e8 58 ff ff ff       	call   c00159f8 <schedule()>
c0015aa0:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015aa8:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015aad:	85 c0                	test   eax,eax
c0015aaf:	75 03                	jne    c0015ab4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c0015ab1:	fb                   	sti    
c0015ab2:	66 90                	xchg   ax,ax
c0015ab4:	83 c4 0c             	add    esp,0xc
c0015ab7:	c3                   	ret    

c0015ab8 <blockTask(TaskState)>:
c0015ab8:	83 ec 0c             	sub    esp,0xc
c0015abb:	fa                   	cli    
c0015abc:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015ac1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ac5:	83 c0 01             	add    eax,0x1
c0015ac8:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0015acd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ad2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015ad5:	e8 1e ff ff ff       	call   c00159f8 <schedule()>
c0015ada:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015ae2:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c0015ae8:	85 d2                	test   edx,edx
c0015aea:	75 04                	jne    c0015af0 <blockTask(TaskState)+0x38>
c0015aec:	fb                   	sti    
c0015aed:	8d 76 00             	lea    esi,[esi+0x0]
c0015af0:	83 c4 0c             	add    esp,0xc
c0015af3:	c3                   	ret    

c0015af4 <waitTask(int, int*, int)>:
c0015af4:	83 ec 18             	sub    esp,0x18
c0015af7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015afc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015b00:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015b03:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015b07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b0c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015b0f:	6a 07                	push   0x7
c0015b11:	e8 a2 ff ff ff       	call   c0015ab8 <blockTask(TaskState)>
c0015b16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b1b:	83 c4 10             	add    esp,0x10
c0015b1e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015b21:	85 d2                	test   edx,edx
c0015b23:	74 0b                	je     c0015b30 <waitTask(int, int*, int)+0x3c>
c0015b25:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015b28:	89 02                	mov    DWORD PTR [edx],eax
c0015b2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b2f:	90                   	nop
c0015b30:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015b33:	83 c4 0c             	add    esp,0xc
c0015b36:	c3                   	ret    
c0015b37:	90                   	nop

c0015b38 <milliTenthSleepUntil(unsigned int)>:
c0015b38:	83 ec 0c             	sub    esp,0xc
c0015b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b3f:	39 05 ec a7 02 c0    	cmp    DWORD PTR ds:0xc002a7ec,eax
c0015b45:	76 05                	jbe    c0015b4c <milliTenthSleepUntil(unsigned int)+0x14>
c0015b47:	90                   	nop
c0015b48:	83 c4 0c             	add    esp,0xc
c0015b4b:	c3                   	ret    
c0015b4c:	fa                   	cli    
c0015b4d:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0015b53:	83 ec 08             	sub    esp,0x8
c0015b56:	8b 15 ac d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6ac
c0015b5c:	83 c1 01             	add    ecx,0x1
c0015b5f:	89 0d b0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6b0,ecx
c0015b65:	83 c2 01             	add    edx,0x1
c0015b68:	89 15 ac d6 02 c0    	mov    DWORD PTR ds:0xc002d6ac,edx
c0015b6e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015b74:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015b77:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015b7d:	51                   	push   ecx
c0015b7e:	68 c0 d6 02 c0       	push   0xc002d6c0
c0015b83:	e8 54 ac 00 00       	call   c00207dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015b88:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015b8f:	e8 24 ff ff ff       	call   c0015ab8 <blockTask(TaskState)>
c0015b94:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0015b99:	83 c4 10             	add    esp,0x10
c0015b9c:	83 e8 01             	sub    eax,0x1
c0015b9f:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c0015ba4:	85 c0                	test   eax,eax
c0015ba6:	75 0c                	jne    c0015bb4 <milliTenthSleepUntil(unsigned int)+0x7c>
c0015ba8:	8b 15 a8 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6a8
c0015bae:	85 d2                	test   edx,edx
c0015bb0:	75 1a                	jne    c0015bcc <milliTenthSleepUntil(unsigned int)+0x94>
c0015bb2:	66 90                	xchg   ax,ax
c0015bb4:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015bbc:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015bc1:	85 c0                	test   eax,eax
c0015bc3:	75 83                	jne    c0015b48 <milliTenthSleepUntil(unsigned int)+0x10>
c0015bc5:	fb                   	sti    
c0015bc6:	83 c4 0c             	add    esp,0xc
c0015bc9:	c3                   	ret    
c0015bca:	66 90                	xchg   ax,ax
c0015bcc:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c0015bd6:	e8 1d fe ff ff       	call   c00159f8 <schedule()>
c0015bdb:	eb d7                	jmp    c0015bb4 <milliTenthSleepUntil(unsigned int)+0x7c>
c0015bdd:	8d 76 00             	lea    esi,[esi+0x0]

c0015be0 <milliTenthSleep(unsigned int)>:
c0015be0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015be4:	a1 ec a7 02 c0       	mov    eax,ds:0xc002a7ec
c0015be9:	01 c2                	add    edx,eax
c0015beb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015bef:	e9 44 ff ff ff       	jmp    c0015b38 <milliTenthSleepUntil(unsigned int)>

c0015bf4 <sleep(unsigned int)>:
c0015bf4:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0015bfc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015c00:	eb de                	jmp    c0015be0 <milliTenthSleep(unsigned int)>
c0015c02:	66 90                	xchg   ax,ax

c0015c04 <taskReturned>:
c0015c04:	83 ec 18             	sub    esp,0x18
c0015c07:	68 a8 38 02 c0       	push   0xc00238a8
c0015c0c:	e8 c1 91 ff ff       	call   c000edd2 <KePanic(char const*)>
c0015c11:	83 c4 10             	add    esp,0x10
c0015c14:	83 ec 0c             	sub    esp,0xc
c0015c17:	6a 02                	push   0x2
c0015c19:	e8 9a fe ff ff       	call   c0015ab8 <blockTask(TaskState)>
c0015c1e:	fa                   	cli    
c0015c1f:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015c24:	83 c0 01             	add    eax,0x1
c0015c27:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0015c2c:	e8 c7 fd ff ff       	call   c00159f8 <schedule()>
c0015c31:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015c39:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c0015c3f:	83 c4 10             	add    esp,0x10
c0015c42:	85 d2                	test   edx,edx
c0015c44:	75 ce                	jne    c0015c14 <taskReturned+0x10>
c0015c46:	fb                   	sti    
c0015c47:	eb cb                	jmp    c0015c14 <taskReturned+0x10>
c0015c49:	8d 76 00             	lea    esi,[esi+0x0]

c0015c4c <Thr::processFromPID(int)>:
c0015c4c:	57                   	push   edi
c0015c4d:	56                   	push   esi
c0015c4e:	53                   	push   ebx
c0015c4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015c53:	fa                   	cli    
c0015c54:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0015c5a:	83 ec 0c             	sub    esp,0xc
c0015c5d:	68 cc d6 02 c0       	push   0xc002d6cc
c0015c62:	83 c1 01             	add    ecx,0x1
c0015c65:	89 0d b0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6b0,ecx
c0015c6b:	e8 a8 aa 00 00       	call   c0020718 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015c70:	83 c4 10             	add    esp,0x10
c0015c73:	89 c7                	mov    edi,eax
c0015c75:	eb 15                	jmp    c0015c8c <Thr::processFromPID(int)+0x40>
c0015c77:	90                   	nop
c0015c78:	83 ec 0c             	sub    esp,0xc
c0015c7b:	68 cc d6 02 c0       	push   0xc002d6cc
c0015c80:	e8 93 aa 00 00       	call   c0020718 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015c85:	83 c4 10             	add    esp,0x10
c0015c88:	39 f8                	cmp    eax,edi
c0015c8a:	74 50                	je     c0015cdc <Thr::processFromPID(int)+0x90>
c0015c8c:	83 ec 0c             	sub    esp,0xc
c0015c8f:	68 cc d6 02 c0       	push   0xc002d6cc
c0015c94:	e8 7f aa 00 00       	call   c0020718 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015c99:	c7 04 24 cc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6cc
c0015ca0:	89 c3                	mov    ebx,eax
c0015ca2:	e8 79 aa 00 00       	call   c0020720 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015ca7:	58                   	pop    eax
c0015ca8:	5a                   	pop    edx
c0015ca9:	53                   	push   ebx
c0015caa:	68 cc d6 02 c0       	push   0xc002d6cc
c0015caf:	e8 28 ab 00 00       	call   c00207dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015cb4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015cb7:	83 c4 10             	add    esp,0x10
c0015cba:	39 30                	cmp    DWORD PTR [eax],esi
c0015cbc:	75 ba                	jne    c0015c78 <Thr::processFromPID(int)+0x2c>
c0015cbe:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015cc6:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0015ccc:	85 c9                	test   ecx,ecx
c0015cce:	74 08                	je     c0015cd8 <Thr::processFromPID(int)+0x8c>
c0015cd0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015cd3:	90                   	nop
c0015cd4:	5b                   	pop    ebx
c0015cd5:	5e                   	pop    esi
c0015cd6:	5f                   	pop    edi
c0015cd7:	c3                   	ret    
c0015cd8:	fb                   	sti    
c0015cd9:	eb f5                	jmp    c0015cd0 <Thr::processFromPID(int)+0x84>
c0015cdb:	90                   	nop
c0015cdc:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015ce4:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c0015cea:	31 c0                	xor    eax,eax
c0015cec:	85 d2                	test   edx,edx
c0015cee:	75 e4                	jne    c0015cd4 <Thr::processFromPID(int)+0x88>
c0015cf0:	fb                   	sti    
c0015cf1:	5b                   	pop    ebx
c0015cf2:	5e                   	pop    esi
c0015cf3:	5f                   	pop    edi
c0015cf4:	c3                   	ret    
c0015cf5:	8d 76 00             	lea    esi,[esi+0x0]

c0015cf8 <unblockTask(ThreadControlBlock*)>:
c0015cf8:	53                   	push   ebx
c0015cf9:	83 ec 08             	sub    esp,0x8
c0015cfc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015d00:	fa                   	cli    
c0015d01:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c0015d07:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015d0a:	83 c2 01             	add    edx,0x1
c0015d0d:	89 15 b0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6b0,edx
c0015d13:	85 c0                	test   eax,eax
c0015d15:	74 6d                	je     c0015d84 <unblockTask(ThreadControlBlock*)+0x8c>
c0015d17:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015d1a:	83 f8 01             	cmp    eax,0x1
c0015d1d:	74 39                	je     c0015d58 <unblockTask(ThreadControlBlock*)+0x60>
c0015d1f:	83 ec 0c             	sub    esp,0xc
c0015d22:	68 cc d6 02 c0       	push   0xc002d6cc
c0015d27:	e8 ec a9 00 00       	call   c0020718 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015d2c:	83 c4 10             	add    esp,0x10
c0015d2f:	85 c0                	test   eax,eax
c0015d31:	75 1d                	jne    c0015d50 <unblockTask(ThreadControlBlock*)+0x58>
c0015d33:	eb 63                	jmp    c0015d98 <unblockTask(ThreadControlBlock*)+0xa0>
c0015d35:	8d 76 00             	lea    esi,[esi+0x0]
c0015d38:	83 ec 08             	sub    esp,0x8
c0015d3b:	50                   	push   eax
c0015d3c:	68 cc d6 02 c0       	push   0xc002d6cc
c0015d41:	e8 de ae 00 00       	call   c0020c24 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0015d46:	83 c4 10             	add    esp,0x10
c0015d49:	85 c0                	test   eax,eax
c0015d4b:	74 4b                	je     c0015d98 <unblockTask(ThreadControlBlock*)+0xa0>
c0015d4d:	8d 76 00             	lea    esi,[esi+0x0]
c0015d50:	39 c3                	cmp    ebx,eax
c0015d52:	75 e4                	jne    c0015d38 <unblockTask(ThreadControlBlock*)+0x40>
c0015d54:	eb 12                	jmp    c0015d68 <unblockTask(ThreadControlBlock*)+0x70>
c0015d56:	66 90                	xchg   ax,ax
c0015d58:	83 ec 0c             	sub    esp,0xc
c0015d5b:	68 3e 38 02 c0       	push   0xc002383e
c0015d60:	e8 e9 11 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015d65:	83 c4 10             	add    esp,0x10
c0015d68:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015d70:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015d75:	85 c0                	test   eax,eax
c0015d77:	75 03                	jne    c0015d7c <unblockTask(ThreadControlBlock*)+0x84>
c0015d79:	fb                   	sti    
c0015d7a:	66 90                	xchg   ax,ax
c0015d7c:	83 c4 08             	add    esp,0x8
c0015d7f:	5b                   	pop    ebx
c0015d80:	c3                   	ret    
c0015d81:	8d 76 00             	lea    esi,[esi+0x0]
c0015d84:	83 ec 0c             	sub    esp,0xc
c0015d87:	68 27 38 02 c0       	push   0xc0023827
c0015d8c:	e8 bd 11 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015d91:	83 c4 10             	add    esp,0x10
c0015d94:	eb d2                	jmp    c0015d68 <unblockTask(ThreadControlBlock*)+0x70>
c0015d96:	66 90                	xchg   ax,ax
c0015d98:	83 ec 08             	sub    esp,0x8
c0015d9b:	53                   	push   ebx
c0015d9c:	68 cc d6 02 c0       	push   0xc002d6cc
c0015da1:	e8 36 aa 00 00       	call   c00207dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015da6:	83 c4 10             	add    esp,0x10
c0015da9:	eb bd                	jmp    c0015d68 <unblockTask(ThreadControlBlock*)+0x70>
c0015dab:	90                   	nop

c0015dac <cleanupTerminatedTask(ThreadControlBlock*)>:
c0015dac:	55                   	push   ebp
c0015dad:	57                   	push   edi
c0015dae:	56                   	push   esi
c0015daf:	53                   	push   ebx
c0015db0:	83 ec 1c             	sub    esp,0x1c
c0015db3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015db7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015dba:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0015dc0:	85 ed                	test   ebp,ebp
c0015dc2:	7e 28                	jle    c0015dec <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0015dc4:	31 f6                	xor    esi,esi
c0015dc6:	66 90                	xchg   ax,ax
c0015dc8:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0015dcf:	83 ec 0c             	sub    esp,0xc
c0015dd2:	83 c6 01             	add    esi,0x1
c0015dd5:	57                   	push   edi
c0015dd6:	e8 c1 8c ff ff       	call   c000ea9c <free>
c0015ddb:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015dde:	83 c4 10             	add    esp,0x10
c0015de1:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0015de7:	7f df                	jg     c0015dc8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0015de9:	8d 76 00             	lea    esi,[esi+0x0]
c0015dec:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015df6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015dfb:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0015dfe:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0015e01:	d3 c0                	rol    eax,cl
c0015e03:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0015e0a:	21 c8                	and    eax,ecx
c0015e0c:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0015e13:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015e16:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0015e1e:	89 f7                	mov    edi,esi
c0015e20:	0f 85 72 01 00 00    	jne    c0015f98 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015e26:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0015e2c:	85 ed                	test   ebp,ebp
c0015e2e:	74 1c                	je     c0015e4c <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0015e30:	83 ec 0c             	sub    esp,0xc
c0015e33:	55                   	push   ebp
c0015e34:	e8 e7 7d ff ff       	call   c000dc20 <EnvVarContainer::~EnvVarContainer()>
c0015e39:	59                   	pop    ecx
c0015e3a:	5e                   	pop    esi
c0015e3b:	6a 0c                	push   0xc
c0015e3d:	55                   	push   ebp
c0015e3e:	e8 c4 69 ff ff       	call   c000c807 <operator delete(void*, unsigned long)>
c0015e43:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015e46:	83 c4 10             	add    esp,0x10
c0015e49:	89 f7                	mov    edi,esi
c0015e4b:	90                   	nop
c0015e4c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015e52:	85 c0                	test   eax,eax
c0015e54:	0f 84 b2 00 00 00    	je     c0015f0c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015e5a:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015e5d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0015e61:	31 c9                	xor    ecx,ecx
c0015e63:	eb 17                	jmp    c0015e7c <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0015e65:	8d 76 00             	lea    esi,[esi+0x0]
c0015e68:	83 c1 01             	add    ecx,0x1
c0015e6b:	83 f9 10             	cmp    ecx,0x10
c0015e6e:	0f 84 98 00 00 00    	je     c0015f0c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015e74:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015e7a:	66 90                	xchg   ax,ax
c0015e7c:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0015e83:	d3 fa                	sar    edx,cl
c0015e85:	80 e2 01             	and    dl,0x1
c0015e88:	74 de                	je     c0015e68 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015e8a:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0015e8d:	c1 e2 05             	shl    edx,0x5
c0015e90:	29 ca                	sub    edx,ecx
c0015e92:	01 d0                	add    eax,edx
c0015e94:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0015e9a:	83 fd 07             	cmp    ebp,0x7
c0015e9d:	75 c9                	jne    c0015e68 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015e9f:	05 40 02 00 00       	add    eax,0x240
c0015ea4:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0015ea7:	83 fd ff             	cmp    ebp,0xffffffff
c0015eaa:	0f 8c f0 00 00 00    	jl     c0015fa0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0015eb0:	0f 84 ae 01 00 00    	je     c0016064 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0015eb6:	85 ed                	test   ebp,ebp
c0015eb8:	0f 84 92 01 00 00    	je     c0016050 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0015ebe:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015ec0:	75 a6                	jne    c0015e68 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015ec2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015ec6:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015ecc:	01 d0                	add    eax,edx
c0015ece:	66 90                	xchg   ax,ax
c0015ed0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015ed4:	83 ec 0c             	sub    esp,0xc
c0015ed7:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015edd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015ee0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015ee6:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0015eed:	50                   	push   eax
c0015eee:	e8 05 fe ff ff       	call   c0015cf8 <unblockTask(ThreadControlBlock*)>
c0015ef3:	83 c4 10             	add    esp,0x10
c0015ef6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015ef9:	89 f7                	mov    edi,esi
c0015efb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015eff:	83 c1 01             	add    ecx,0x1
c0015f02:	83 f9 10             	cmp    ecx,0x10
c0015f05:	0f 85 69 ff ff ff    	jne    c0015e74 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0015f0b:	90                   	nop
c0015f0c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0015f12:	85 c0                	test   eax,eax
c0015f14:	74 62                	je     c0015f78 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015f16:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0015f1c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0015f22:	74 54                	je     c0015f78 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015f24:	83 ec 0c             	sub    esp,0xc
c0015f27:	68 cc d6 02 c0       	push   0xc002d6cc
c0015f2c:	e8 e7 a7 00 00       	call   c0020718 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015f31:	c7 04 24 cc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6cc
c0015f38:	89 c7                	mov    edi,eax
c0015f3a:	e8 bd a7 00 00       	call   c00206fc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015f3f:	83 c4 10             	add    esp,0x10
c0015f42:	84 c0                	test   al,al
c0015f44:	0f 84 ce 00 00 00    	je     c0016018 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0015f4a:	66 90                	xchg   ax,ax
c0015f4c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015f4f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015f55:	85 d2                	test   edx,edx
c0015f57:	74 0f                	je     c0015f68 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0015f59:	8b 02                	mov    eax,DWORD PTR [edx]
c0015f5b:	83 ec 0c             	sub    esp,0xc
c0015f5e:	52                   	push   edx
c0015f5f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f62:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015f65:	83 c4 10             	add    esp,0x10
c0015f68:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0015f72:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015f75:	8d 76 00             	lea    esi,[esi+0x0]
c0015f78:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0015f7e:	85 db                	test   ebx,ebx
c0015f80:	74 16                	je     c0015f98 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015f82:	83 ec 0c             	sub    esp,0xc
c0015f85:	53                   	push   ebx
c0015f86:	e8 77 c7 ff ff       	call   c0012702 <VAS::~VAS()>
c0015f8b:	58                   	pop    eax
c0015f8c:	5a                   	pop    edx
c0015f8d:	6a 14                	push   0x14
c0015f8f:	53                   	push   ebx
c0015f90:	e8 72 68 ff ff       	call   c000c807 <operator delete(void*, unsigned long)>
c0015f95:	83 c4 10             	add    esp,0x10
c0015f98:	83 c4 1c             	add    esp,0x1c
c0015f9b:	5b                   	pop    ebx
c0015f9c:	5e                   	pop    esi
c0015f9d:	5f                   	pop    edi
c0015f9e:	5d                   	pop    ebp
c0015f9f:	c3                   	ret    
c0015fa0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015fa4:	83 ec 0c             	sub    esp,0xc
c0015fa7:	68 dc 38 02 c0       	push   0xc00238dc
c0015fac:	e8 21 8e ff ff       	call   c000edd2 <KePanic(char const*)>
c0015fb1:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015fb4:	83 c4 10             	add    esp,0x10
c0015fb7:	89 f7                	mov    edi,esi
c0015fb9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015fbd:	e9 a6 fe ff ff       	jmp    c0015e68 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015fc2:	66 90                	xchg   ax,ax
c0015fc4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015fca:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015fd0:	75 1e                	jne    c0015ff0 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015fd2:	83 ec 0c             	sub    esp,0xc
c0015fd5:	68 44 39 02 c0       	push   0xc0023944
c0015fda:	e8 6f 0f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015fdf:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015fe6:	e8 cd fa ff ff       	call   c0015ab8 <blockTask(TaskState)>
c0015feb:	83 c4 10             	add    esp,0x10
c0015fee:	66 90                	xchg   ax,ax
c0015ff0:	83 ec 08             	sub    esp,0x8
c0015ff3:	56                   	push   esi
c0015ff4:	68 cc d6 02 c0       	push   0xc002d6cc
c0015ff9:	e8 de a7 00 00       	call   c00207dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015ffe:	c7 04 24 cc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6cc
c0016005:	e8 0e a7 00 00       	call   c0020718 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001600a:	83 c4 10             	add    esp,0x10
c001600d:	39 f8                	cmp    eax,edi
c001600f:	0f 84 37 ff ff ff    	je     c0015f4c <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0016015:	8d 76 00             	lea    esi,[esi+0x0]
c0016018:	83 ec 0c             	sub    esp,0xc
c001601b:	68 cc d6 02 c0       	push   0xc002d6cc
c0016020:	e8 f3 a6 00 00       	call   c0020718 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016025:	c7 04 24 cc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6cc
c001602c:	89 c6                	mov    esi,eax
c001602e:	e8 ed a6 00 00       	call   c0020720 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016033:	83 c4 10             	add    esp,0x10
c0016036:	39 f3                	cmp    ebx,esi
c0016038:	74 b6                	je     c0015ff0 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001603a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c001603d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016040:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0016046:	75 a8                	jne    c0015ff0 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016048:	e9 77 ff ff ff       	jmp    c0015fc4 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c001604d:	8d 76 00             	lea    esi,[esi+0x0]
c0016050:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016054:	83 ec 0c             	sub    esp,0xc
c0016057:	68 10 39 02 c0       	push   0xc0023910
c001605c:	e9 4b ff ff ff       	jmp    c0015fac <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016061:	8d 76 00             	lea    esi,[esi+0x0]
c0016064:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016068:	8b 36                	mov    esi,DWORD PTR [esi]
c001606a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c001606d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016070:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0016076:	01 d7                	add    edi,edx
c0016078:	89 f8                	mov    eax,edi
c001607a:	e9 51 fe ff ff       	jmp    c0015ed0 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c001607f:	90                   	nop

c0016080 <cleanerTaskFunction(void*)>:
c0016080:	53                   	push   ebx
c0016081:	83 ec 08             	sub    esp,0x8
c0016084:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c001608c:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0016091:	85 c0                	test   eax,eax
c0016093:	75 03                	jne    c0016098 <cleanerTaskFunction(void*)+0x18>
c0016095:	fb                   	sti    
c0016096:	66 90                	xchg   ax,ax
c0016098:	fa                   	cli    
c0016099:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c001609e:	83 c0 01             	add    eax,0x1
c00160a1:	80 3d 94 d6 02 c0 00 	cmp    BYTE PTR ds:0xc002d694,0x0
c00160a8:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c00160ad:	0f 85 c9 00 00 00    	jne    c001617c <cleanerTaskFunction(void*)+0xfc>
c00160b3:	83 ec 0c             	sub    esp,0xc
c00160b6:	6a 02                	push   0x2
c00160b8:	e8 cf f9 ff ff       	call   c0015a8c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00160bd:	83 c4 10             	add    esp,0x10
c00160c0:	c6 05 94 d6 02 c0 00 	mov    BYTE PTR ds:0xc002d694,0x0
c00160c7:	fa                   	cli    
c00160c8:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c00160ce:	8b 1d ac d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6ac
c00160d4:	83 c1 01             	add    ecx,0x1
c00160d7:	89 0d b0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6b0,ecx
c00160dd:	83 c3 01             	add    ebx,0x1
c00160e0:	89 1d ac d6 02 c0    	mov    DWORD PTR ds:0xc002d6ac,ebx
c00160e6:	fa                   	cli    
c00160e7:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00160ec:	83 c0 01             	add    eax,0x1
c00160ef:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c00160f4:	eb 2a                	jmp    c0016120 <cleanerTaskFunction(void*)+0xa0>
c00160f6:	66 90                	xchg   ax,ax
c00160f8:	83 ec 0c             	sub    esp,0xc
c00160fb:	68 b4 d6 02 c0       	push   0xc002d6b4
c0016100:	e8 13 a6 00 00       	call   c0020718 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016105:	c7 04 24 b4 d6 02 c0 	mov    DWORD PTR [esp],0xc002d6b4
c001610c:	89 c3                	mov    ebx,eax
c001610e:	e8 0d a6 00 00       	call   c0020720 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016113:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016116:	e8 91 fc ff ff       	call   c0015dac <cleanupTerminatedTask(ThreadControlBlock*)>
c001611b:	83 c4 10             	add    esp,0x10
c001611e:	66 90                	xchg   ax,ax
c0016120:	83 ec 0c             	sub    esp,0xc
c0016123:	68 b4 d6 02 c0       	push   0xc002d6b4
c0016128:	e8 cf a5 00 00       	call   c00206fc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001612d:	83 c4 10             	add    esp,0x10
c0016130:	84 c0                	test   al,al
c0016132:	74 c4                	je     c00160f8 <cleanerTaskFunction(void*)+0x78>
c0016134:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c001613c:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c0016142:	85 d2                	test   edx,edx
c0016144:	75 02                	jne    c0016148 <cleanerTaskFunction(void*)+0xc8>
c0016146:	fb                   	sti    
c0016147:	90                   	nop
c0016148:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c001614d:	83 e8 01             	sub    eax,0x1
c0016150:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c0016155:	0f 85 29 ff ff ff    	jne    c0016084 <cleanerTaskFunction(void*)+0x4>
c001615b:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0016160:	85 c0                	test   eax,eax
c0016162:	0f 84 1c ff ff ff    	je     c0016084 <cleanerTaskFunction(void*)+0x4>
c0016168:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c0016172:	e8 81 f8 ff ff       	call   c00159f8 <schedule()>
c0016177:	e9 08 ff ff ff       	jmp    c0016084 <cleanerTaskFunction(void*)+0x4>
c001617c:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0016184:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0016189:	85 c0                	test   eax,eax
c001618b:	0f 85 2f ff ff ff    	jne    c00160c0 <cleanerTaskFunction(void*)+0x40>
c0016191:	fb                   	sti    
c0016192:	e9 29 ff ff ff       	jmp    c00160c0 <cleanerTaskFunction(void*)+0x40>
c0016197:	90                   	nop

c0016198 <terminateTask(int)>:
c0016198:	83 ec 14             	sub    esp,0x14
c001619b:	fa                   	cli    
c001619c:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00161a1:	83 c0 01             	add    eax,0x1
c00161a4:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c00161a9:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c00161ae:	83 c0 01             	add    eax,0x1
c00161b1:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c00161b6:	fa                   	cli    
c00161b7:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00161bc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00161c0:	83 c0 01             	add    eax,0x1
c00161c3:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c00161c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161cd:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00161d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00161d8:	50                   	push   eax
c00161d9:	68 b4 d6 02 c0       	push   0xc002d6b4
c00161de:	e8 f9 a5 00 00       	call   c00207dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00161e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161e8:	83 c4 10             	add    esp,0x10
c00161eb:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00161f2:	a1 90 d6 02 c0       	mov    eax,ds:0xc002d690
c00161f7:	85 c0                	test   eax,eax
c00161f9:	0f 84 81 00 00 00    	je     c0016280 <terminateTask(int)+0xe8>
c00161ff:	c6 05 94 d6 02 c0 01 	mov    BYTE PTR ds:0xc002d694,0x1
c0016206:	83 ec 0c             	sub    esp,0xc
c0016209:	50                   	push   eax
c001620a:	e8 e9 fa ff ff       	call   c0015cf8 <unblockTask(ThreadControlBlock*)>
c001620f:	83 c4 10             	add    esp,0x10
c0016212:	66 90                	xchg   ax,ax
c0016214:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c001621c:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0016221:	85 c0                	test   eax,eax
c0016223:	75 03                	jne    c0016228 <terminateTask(int)+0x90>
c0016225:	fb                   	sti    
c0016226:	66 90                	xchg   ax,ax
c0016228:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c001622d:	83 e8 01             	sub    eax,0x1
c0016230:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c0016235:	75 09                	jne    c0016240 <terminateTask(int)+0xa8>
c0016237:	83 3d a8 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6a8,0x0
c001623e:	75 54                	jne    c0016294 <terminateTask(int)+0xfc>
c0016240:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0016248:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c001624e:	85 c9                	test   ecx,ecx
c0016250:	75 06                	jne    c0016258 <terminateTask(int)+0xc0>
c0016252:	66 90                	xchg   ax,ax
c0016254:	fb                   	sti    
c0016255:	8d 76 00             	lea    esi,[esi+0x0]
c0016258:	fa                   	cli    
c0016259:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c001625e:	83 c0 01             	add    eax,0x1
c0016261:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0016266:	e8 8d f7 ff ff       	call   c00159f8 <schedule()>
c001626b:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0016273:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c0016279:	85 d2                	test   edx,edx
c001627b:	75 db                	jne    c0016258 <terminateTask(int)+0xc0>
c001627d:	eb d5                	jmp    c0016254 <terminateTask(int)+0xbc>
c001627f:	90                   	nop
c0016280:	83 ec 0c             	sub    esp,0xc
c0016283:	68 55 38 02 c0       	push   0xc0023855
c0016288:	e8 c1 0c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001628d:	83 c4 10             	add    esp,0x10
c0016290:	eb 82                	jmp    c0016214 <terminateTask(int)+0x7c>
c0016292:	66 90                	xchg   ax,ax
c0016294:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c001629e:	e8 55 f7 ff ff       	call   c00159f8 <schedule()>
c00162a3:	eb 9b                	jmp    c0016240 <terminateTask(int)+0xa8>
c00162a5:	8d 76 00             	lea    esi,[esi+0x0]

c00162a8 <Thr::terminateFromIRQ(int)>:
c00162a8:	83 ec 18             	sub    esp,0x18
c00162ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162af:	50                   	push   eax
c00162b0:	e8 e3 fe ff ff       	call   c0016198 <terminateTask(int)>
c00162b5:	8d 76 00             	lea    esi,[esi+0x0]

c00162b8 <__static_initialization_and_destruction_0(int, int)>:
c00162b8:	83 ec 0c             	sub    esp,0xc
c00162bb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00162c0:	0f 85 8e 00 00 00    	jne    c0016354 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00162c6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00162ce:	0f 85 80 00 00 00    	jne    c0016354 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00162d4:	83 ec 0c             	sub    esp,0xc
c00162d7:	68 cc d6 02 c0       	push   0xc002d6cc
c00162dc:	e8 9b a9 00 00       	call   c0020c7c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00162e1:	83 c4 10             	add    esp,0x10
c00162e4:	83 ec 04             	sub    esp,0x4
c00162e7:	68 60 49 02 c0       	push   0xc0024960
c00162ec:	68 cc d6 02 c0       	push   0xc002d6cc
c00162f1:	68 2c 0c 02 c0       	push   0xc0020c2c
c00162f6:	e8 bc 64 ff ff       	call   c000c7b7 <__cxa_atexit>
c00162fb:	83 c4 10             	add    esp,0x10
c00162fe:	83 ec 0c             	sub    esp,0xc
c0016301:	68 c0 d6 02 c0       	push   0xc002d6c0
c0016306:	e8 71 a9 00 00       	call   c0020c7c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001630b:	83 c4 10             	add    esp,0x10
c001630e:	83 ec 04             	sub    esp,0x4
c0016311:	68 60 49 02 c0       	push   0xc0024960
c0016316:	68 c0 d6 02 c0       	push   0xc002d6c0
c001631b:	68 2c 0c 02 c0       	push   0xc0020c2c
c0016320:	e8 92 64 ff ff       	call   c000c7b7 <__cxa_atexit>
c0016325:	83 c4 10             	add    esp,0x10
c0016328:	83 ec 0c             	sub    esp,0xc
c001632b:	68 b4 d6 02 c0       	push   0xc002d6b4
c0016330:	e8 47 a9 00 00       	call   c0020c7c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016335:	83 c4 10             	add    esp,0x10
c0016338:	83 ec 04             	sub    esp,0x4
c001633b:	68 60 49 02 c0       	push   0xc0024960
c0016340:	68 b4 d6 02 c0       	push   0xc002d6b4
c0016345:	68 2c 0c 02 c0       	push   0xc0020c2c
c001634a:	e8 68 64 ff ff       	call   c000c7b7 <__cxa_atexit>
c001634f:	83 c4 10             	add    esp,0x10
c0016352:	66 90                	xchg   ax,ax
c0016354:	90                   	nop
c0016355:	83 c4 0c             	add    esp,0xc
c0016358:	c3                   	ret    
c0016359:	8d 76 00             	lea    esi,[esi+0x0]

c001635c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001635c:	83 ec 0c             	sub    esp,0xc
c001635f:	83 ec 08             	sub    esp,0x8
c0016362:	68 ff ff 00 00       	push   0xffff
c0016367:	6a 01                	push   0x1
c0016369:	e8 4a ff ff ff       	call   c00162b8 <__static_initialization_and_destruction_0(int, int)>
c001636e:	83 c4 10             	add    esp,0x10
c0016371:	83 c4 0c             	add    esp,0xc
c0016374:	c3                   	ret    

c0016375 <Vm::inbv(unsigned short)>:
c0016375:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016379:	66 81 fa fe fe       	cmp    dx,0xfefe
c001637e:	75 06                	jne    c0016386 <Vm::inbv(unsigned short)+0x11>
c0016380:	a0 10 d7 02 c0       	mov    al,ds:0xc002d710
c0016385:	c3                   	ret    
c0016386:	ec                   	in     al,dx
c0016387:	c3                   	ret    

c0016388 <Vm::outbv(unsigned short, unsigned char)>:
c0016388:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001638c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016390:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016395:	75 25                	jne    c00163bc <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016397:	8b 0d 10 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d710
c001639d:	88 81 20 d7 02 c0    	mov    BYTE PTR [ecx-0x3ffd28e0],al
c00163a3:	8d 51 01             	lea    edx,[ecx+0x1]
c00163a6:	89 15 10 d7 02 c0    	mov    DWORD PTR ds:0xc002d710,edx
c00163ac:	83 fa 20             	cmp    edx,0x20
c00163af:	75 0c                	jne    c00163bd <Vm::outbv(unsigned short, unsigned char)+0x35>
c00163b1:	c7 05 10 d7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002d710,0x1f
c00163bb:	c3                   	ret    
c00163bc:	ee                   	out    dx,al
c00163bd:	c3                   	ret    

c00163be <Vm::realToLinear(unsigned short, unsigned short)>:
c00163be:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00163c3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00163c8:	c1 e0 04             	shl    eax,0x4
c00163cb:	01 d0                	add    eax,edx
c00163cd:	c3                   	ret    

c00163ce <Vm::getSegment(unsigned int)>:
c00163ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163d2:	c1 e8 10             	shr    eax,0x10
c00163d5:	c3                   	ret    

c00163d6 <Vm::getOffset(unsigned int)>:
c00163d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163da:	c3                   	ret    

c00163db <Vm::mainloop2()>:
c00163db:	83 ec 18             	sub    esp,0x18
c00163de:	fa                   	cli    
c00163df:	6a 02                	push   0x2
c00163e1:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c00163e7:	c6 05 09 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d709,0x1
c00163ee:	e8 99 f6 ff ff       	call   c0015a8c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00163f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163f8:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00163fc:	52                   	push   edx
c00163fd:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016401:	52                   	push   edx
c0016402:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016406:	52                   	push   edx
c0016407:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001640b:	50                   	push   eax
c001640c:	e8 fe 9d fe ff       	call   c000020f <goToVM86>
c0016411:	83 c4 2c             	add    esp,0x2c
c0016414:	c3                   	ret    

c0016415 <Vm::mainVm8086Loop(void*)>:
c0016415:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001641c:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0016423:	75 01                	jne    c0016426 <Vm::mainVm8086Loop(void*)+0x11>
c0016425:	fb                   	sti    
c0016426:	eb b3                	jmp    c00163db <Vm::mainloop2()>

c0016428 <Vm::mainloop3(unsigned long)>:
c0016428:	83 ec 18             	sub    esp,0x18
c001642b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001642f:	fa                   	cli    
c0016430:	6a 02                	push   0x2
c0016432:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0016438:	c6 05 08 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d708,0x1
c001643f:	a3 04 d7 02 c0       	mov    ds:0xc002d704,eax
c0016444:	e8 43 f6 ff ff       	call   c0015a8c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016449:	83 c4 1c             	add    esp,0x1c
c001644c:	eb 8d                	jmp    c00163db <Vm::mainloop2()>

c001644e <Vm::initialise8086()>:
c001644e:	83 ec 0c             	sub    esp,0xc
c0016451:	68 80 00 00 00       	push   0x80
c0016456:	6a 00                	push   0x0
c0016458:	68 15 64 01 c0       	push   0xc0016415
c001645d:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0016463:	e8 38 f3 ff ff       	call   c00157a0 <Process::createThread(void (*)(void*), void*, int)>
c0016468:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001646f:	68 10 01 00 00       	push   0x110
c0016474:	6a 00                	push   0x0
c0016476:	6a 00                	push   0x0
c0016478:	a3 0c d7 02 c0       	mov    ds:0xc002d70c,eax
c001647d:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0016482:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016488:	e8 d7 c5 ff ff       	call   c0012a64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001648d:	83 c4 2c             	add    esp,0x2c
c0016490:	c3                   	ret    

c0016491 <Vm::resetConventionalMemory8086()>:
c0016491:	c3                   	ret    

c0016492 <Vm::finish8086()>:
c0016492:	53                   	push   ebx
c0016493:	83 ec 08             	sub    esp,0x8
c0016496:	fa                   	cli    
c0016497:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001649d:	80 3d 08 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d708,0x0
c00164a4:	75 18                	jne    c00164be <Vm::finish8086()+0x2c>
c00164a6:	e8 4d f5 ff ff       	call   c00159f8 <schedule()>
c00164ab:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c00164b2:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c00164b9:	75 db                	jne    c0016496 <Vm::finish8086()+0x4>
c00164bb:	fb                   	sti    
c00164bc:	eb d8                	jmp    c0016496 <Vm::finish8086()+0x4>
c00164be:	c6 05 08 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d708,0x0
c00164c5:	83 ec 0c             	sub    esp,0xc
c00164c8:	8b 1d 04 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d704
c00164ce:	ff 35 0c d7 02 c0    	push   DWORD PTR ds:0xc002d70c
c00164d4:	e8 1f f8 ff ff       	call   c0015cf8 <unblockTask(ThreadControlBlock*)>
c00164d9:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c00164e0:	83 c4 10             	add    esp,0x10
c00164e3:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c00164ea:	75 01                	jne    c00164ed <Vm::finish8086()+0x5b>
c00164ec:	fb                   	sti    
c00164ed:	83 c4 08             	add    esp,0x8
c00164f0:	89 d8                	mov    eax,ebx
c00164f2:	5b                   	pop    ebx
c00164f3:	c3                   	ret    

c00164f4 <Vm::getOutput8086(unsigned char*)>:
c00164f4:	57                   	push   edi
c00164f5:	8b 0d 10 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d710
c00164fb:	56                   	push   esi
c00164fc:	be 20 d7 02 c0       	mov    esi,0xc002d720
c0016501:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016505:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016507:	5e                   	pop    esi
c0016508:	a1 10 d7 02 c0       	mov    eax,ds:0xc002d710
c001650d:	c7 05 10 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d710,0x0
c0016517:	5f                   	pop    edi
c0016518:	c3                   	ret    

c0016519 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016519:	55                   	push   ebp
c001651a:	57                   	push   edi
c001651b:	56                   	push   esi
c001651c:	53                   	push   ebx
c001651d:	83 ec 2c             	sub    esp,0x2c
c0016520:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0016524:	80 3d 00 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d700,0x0
c001652b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001652f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016533:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016537:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c001653b:	75 5d                	jne    c001659a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c001653d:	83 ec 0c             	sub    esp,0xc
c0016540:	68 14 01 00 00       	push   0x114
c0016545:	e8 42 85 ff ff       	call   c000ea8c <malloc>
c001654a:	83 c4 0c             	add    esp,0xc
c001654d:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0016553:	68 6c 39 02 c0       	push   0xc002396c
c0016558:	50                   	push   eax
c0016559:	89 c7                	mov    edi,eax
c001655b:	e8 cc 1b ff ff       	call   c000812c <File::File(char const*, Process*)>
c0016560:	58                   	pop    eax
c0016561:	5a                   	pop    edx
c0016562:	6a 12                	push   0x12
c0016564:	57                   	push   edi
c0016565:	e8 e0 1b ff ff       	call   c000814a <File::open(FileOpenMode)>
c001656a:	8b 07                	mov    eax,DWORD PTR [edi]
c001656c:	59                   	pop    ecx
c001656d:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0016571:	51                   	push   ecx
c0016572:	6a 00                	push   0x0
c0016574:	6a 00                	push   0x0
c0016576:	68 00 00 11 00       	push   0x110000
c001657b:	57                   	push   edi
c001657c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001657f:	83 c4 14             	add    esp,0x14
c0016582:	57                   	push   edi
c0016583:	e8 20 1c ff ff       	call   c00081a8 <File::close()>
c0016588:	8b 07                	mov    eax,DWORD PTR [edi]
c001658a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001658d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016590:	83 c4 10             	add    esp,0x10
c0016593:	c6 05 00 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d700,0x1
c001659a:	fa                   	cli    
c001659b:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c00165a1:	80 3d 09 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d709,0x0
c00165a8:	75 18                	jne    c00165c2 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa9>
c00165aa:	e8 49 f4 ff ff       	call   c00159f8 <schedule()>
c00165af:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c00165b6:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c00165bd:	75 db                	jne    c001659a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c00165bf:	fb                   	sti    
c00165c0:	eb d8                	jmp    c001659a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c00165c2:	c7 05 10 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d710,0x0
c00165cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165d0:	a1 0c d7 02 c0       	mov    eax,ds:0xc002d70c
c00165d5:	66 89 70 55          	mov    WORD PTR [eax+0x55],si
c00165d9:	0f b7 f6             	movzx  esi,si
c00165dc:	66 89 58 57          	mov    WORD PTR [eax+0x57],bx
c00165e0:	0f b7 db             	movzx  ebx,bx
c00165e3:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00165e7:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c00165eb:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00165ef:	50                   	push   eax
c00165f0:	6a 20                	push   0x20
c00165f2:	6a 00                	push   0x0
c00165f4:	68 20 d7 02 c0       	push   0xc002d720
c00165f9:	e8 f2 9e fe ff       	call   c00004f0 <memset>
c00165fe:	5a                   	pop    edx
c00165ff:	59                   	pop    ecx
c0016600:	56                   	push   esi
c0016601:	53                   	push   ebx
c0016602:	e8 b7 fd ff ff       	call   c00163be <Vm::realToLinear(unsigned short, unsigned short)>
c0016607:	83 c4 10             	add    esp,0x10
c001660a:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001660e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0016612:	89 c7                	mov    edi,eax
c0016614:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016616:	c6 05 09 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d709,0x0
c001661d:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0016624:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c001662b:	75 01                	jne    c001662e <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x115>
c001662d:	fb                   	sti    
c001662e:	83 ec 0c             	sub    esp,0xc
c0016631:	ff 35 0c d7 02 c0    	push   DWORD PTR ds:0xc002d70c
c0016637:	e8 bc f6 ff ff       	call   c0015cf8 <unblockTask(ThreadControlBlock*)>
c001663c:	83 c4 3c             	add    esp,0x3c
c001663f:	b0 01                	mov    al,0x1
c0016641:	5b                   	pop    ebx
c0016642:	5e                   	pop    esi
c0016643:	5f                   	pop    edi
c0016644:	5d                   	pop    ebp
c0016645:	c3                   	ret    

c0016646 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016646:	55                   	push   ebp
c0016647:	57                   	push   edi
c0016648:	56                   	push   esi
c0016649:	53                   	push   ebx
c001664a:	83 ec 2c             	sub    esp,0x2c
c001664d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016651:	80 3d 00 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d700,0x0
c0016658:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001665c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016660:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016664:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0016668:	75 5d                	jne    c00166c7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c001666a:	83 ec 0c             	sub    esp,0xc
c001666d:	68 14 01 00 00       	push   0x114
c0016672:	e8 15 84 ff ff       	call   c000ea8c <malloc>
c0016677:	83 c4 0c             	add    esp,0xc
c001667a:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0016680:	68 6c 39 02 c0       	push   0xc002396c
c0016685:	50                   	push   eax
c0016686:	89 c3                	mov    ebx,eax
c0016688:	e8 9f 1a ff ff       	call   c000812c <File::File(char const*, Process*)>
c001668d:	58                   	pop    eax
c001668e:	5a                   	pop    edx
c001668f:	6a 12                	push   0x12
c0016691:	53                   	push   ebx
c0016692:	e8 b3 1a ff ff       	call   c000814a <File::open(FileOpenMode)>
c0016697:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016699:	59                   	pop    ecx
c001669a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001669e:	52                   	push   edx
c001669f:	6a 00                	push   0x0
c00166a1:	6a 00                	push   0x0
c00166a3:	68 00 00 11 00       	push   0x110000
c00166a8:	53                   	push   ebx
c00166a9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00166ac:	83 c4 14             	add    esp,0x14
c00166af:	53                   	push   ebx
c00166b0:	e8 f3 1a ff ff       	call   c00081a8 <File::close()>
c00166b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00166b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00166ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00166bd:	83 c4 10             	add    esp,0x10
c00166c0:	c6 05 00 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d700,0x1
c00166c7:	50                   	push   eax
c00166c8:	50                   	push   eax
c00166c9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166cd:	68 87 39 02 c0       	push   0xc0023987
c00166d2:	e8 77 08 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00166d7:	83 c4 10             	add    esp,0x10
c00166da:	fa                   	cli    
c00166db:	8a 1d 09 d7 02 c0    	mov    bl,BYTE PTR ds:0xc002d709
c00166e1:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c00166e7:	84 db                	test   bl,bl
c00166e9:	75 18                	jne    c0016703 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xbd>
c00166eb:	e8 08 f3 ff ff       	call   c00159f8 <schedule()>
c00166f0:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c00166f7:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c00166fe:	75 da                	jne    c00166da <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0016700:	fb                   	sti    
c0016701:	eb d7                	jmp    c00166da <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0016703:	c7 05 10 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d710,0x0
c001670d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016711:	a1 0c d7 02 c0       	mov    eax,ds:0xc002d70c
c0016716:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c001671a:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001671e:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016722:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016726:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001672a:	50                   	push   eax
c001672b:	6a 20                	push   0x20
c001672d:	6a 00                	push   0x0
c001672f:	68 20 d7 02 c0       	push   0xc002d720
c0016734:	e8 b7 9d fe ff       	call   c00004f0 <memset>
c0016739:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016740:	e8 47 83 ff ff       	call   c000ea8c <malloc>
c0016745:	83 c4 0c             	add    esp,0xc
c0016748:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c001674e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016752:	89 c5                	mov    ebp,eax
c0016754:	50                   	push   eax
c0016755:	e8 d2 19 ff ff       	call   c000812c <File::File(char const*, Process*)>
c001675a:	83 c4 10             	add    esp,0x10
c001675d:	85 ed                	test   ebp,ebp
c001675f:	75 0a                	jne    c001676b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0016761:	83 ec 0c             	sub    esp,0xc
c0016764:	68 a9 39 02 c0       	push   0xc00239a9
c0016769:	eb 2b                	jmp    c0016796 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x150>
c001676b:	50                   	push   eax
c001676c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016770:	50                   	push   eax
c0016771:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016775:	50                   	push   eax
c0016776:	55                   	push   ebp
c0016777:	e8 d0 1c ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c001677c:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016780:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016784:	83 c4 10             	add    esp,0x10
c0016787:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001678c:	74 28                	je     c00167b6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x170>
c001678e:	83 ec 0c             	sub    esp,0xc
c0016791:	68 bd 39 02 c0       	push   0xc00239bd
c0016796:	e8 37 86 ff ff       	call   c000edd2 <KePanic(char const*)>
c001679b:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c00167a2:	83 c4 10             	add    esp,0x10
c00167a5:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c00167ac:	75 01                	jne    c00167af <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x169>
c00167ae:	fb                   	sti    
c00167af:	31 db                	xor    ebx,ebx
c00167b1:	e9 92 00 00 00       	jmp    c0016848 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x202>
c00167b6:	51                   	push   ecx
c00167b7:	51                   	push   ecx
c00167b8:	6a 01                	push   0x1
c00167ba:	55                   	push   ebp
c00167bb:	e8 8a 19 ff ff       	call   c000814a <File::open(FileOpenMode)>
c00167c0:	83 c4 10             	add    esp,0x10
c00167c3:	85 c0                	test   eax,eax
c00167c5:	74 27                	je     c00167ee <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1a8>
c00167c7:	83 ec 0c             	sub    esp,0xc
c00167ca:	68 d6 39 02 c0       	push   0xc00239d6
c00167cf:	e8 fe 85 ff ff       	call   c000edd2 <KePanic(char const*)>
c00167d4:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c00167db:	83 c4 10             	add    esp,0x10
c00167de:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c00167e5:	75 c8                	jne    c00167af <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x169>
c00167e7:	fb                   	sti    
c00167e8:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00167ec:	eb 5a                	jmp    c0016848 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x202>
c00167ee:	50                   	push   eax
c00167ef:	0f b7 ff             	movzx  edi,di
c00167f2:	50                   	push   eax
c00167f3:	0f b7 f6             	movzx  esi,si
c00167f6:	57                   	push   edi
c00167f7:	56                   	push   esi
c00167f8:	e8 c1 fb ff ff       	call   c00163be <Vm::realToLinear(unsigned short, unsigned short)>
c00167fd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016800:	5a                   	pop    edx
c0016801:	8d 74 24 20          	lea    esi,[esp+0x20]
c0016805:	56                   	push   esi
c0016806:	50                   	push   eax
c0016807:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001680b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001680f:	55                   	push   ebp
c0016810:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016813:	83 c4 14             	add    esp,0x14
c0016816:	55                   	push   ebp
c0016817:	e8 8c 19 ff ff       	call   c00081a8 <File::close()>
c001681c:	c6 05 09 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d709,0x0
c0016823:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001682a:	83 c4 10             	add    esp,0x10
c001682d:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0016834:	75 01                	jne    c0016837 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1f1>
c0016836:	fb                   	sti    
c0016837:	83 ec 0c             	sub    esp,0xc
c001683a:	ff 35 0c d7 02 c0    	push   DWORD PTR ds:0xc002d70c
c0016840:	e8 b3 f4 ff ff       	call   c0015cf8 <unblockTask(ThreadControlBlock*)>
c0016845:	83 c4 10             	add    esp,0x10
c0016848:	83 c4 2c             	add    esp,0x2c
c001684b:	88 d8                	mov    al,bl
c001684d:	5b                   	pop    ebx
c001684e:	5e                   	pop    esi
c001684f:	5f                   	pop    edi
c0016850:	5d                   	pop    ebp
c0016851:	c3                   	ret    

c0016852 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016852:	57                   	push   edi
c0016853:	56                   	push   esi
c0016854:	53                   	push   ebx
c0016855:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016859:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001685d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016861:	83 e8 06             	sub    eax,0x6
c0016864:	0f b7 c0             	movzx  eax,ax
c0016867:	50                   	push   eax
c0016868:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001686d:	50                   	push   eax
c001686e:	e8 4b fb ff ff       	call   c00163be <Vm::realToLinear(unsigned short, unsigned short)>
c0016873:	5a                   	pop    edx
c0016874:	59                   	pop    ecx
c0016875:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016878:	8d 51 fa             	lea    edx,[ecx-0x6]
c001687b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001687e:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016884:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016887:	8d 51 02             	lea    edx,[ecx+0x2]
c001688a:	66 89 10             	mov    WORD PTR [eax],dx
c001688d:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016891:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016895:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016899:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001689c:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00168a0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00168a6:	89 f1                	mov    ecx,esi
c00168a8:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c00168ac:	89 f2                	mov    edx,esi
c00168ae:	0f b6 d6             	movzx  edx,dh
c00168b1:	0f b6 f1             	movzx  esi,cl
c00168b4:	74 0a                	je     c00168c0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c00168b6:	c1 e2 08             	shl    edx,0x8
c00168b9:	09 f2                	or     edx,esi
c00168bb:	80 ce 02             	or     dh,0x2
c00168be:	eb 08                	jmp    c00168c8 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c00168c0:	c1 e2 08             	shl    edx,0x8
c00168c3:	09 f2                	or     edx,esi
c00168c5:	80 e6 fd             	and    dh,0xfd
c00168c8:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00168cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168d1:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00168d5:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c00168dd:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c00168e0:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c00168e8:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00168eb:	5b                   	pop    ebx
c00168ec:	5e                   	pop    esi
c00168ed:	5f                   	pop    edi
c00168ee:	c3                   	ret    

c00168ef <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00168ef:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00168f4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00168f9:	c1 e0 04             	shl    eax,0x4
c00168fc:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00168ff:	c3                   	ret    

c0016900 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016900:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016905:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001690a:	c1 e0 04             	shl    eax,0x4
c001690d:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016911:	c3                   	ret    

c0016912 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016912:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016917:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001691c:	c1 e0 04             	shl    eax,0x4
c001691f:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016922:	c3                   	ret    

c0016923 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016923:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016928:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001692d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016931:	c1 e0 04             	shl    eax,0x4
c0016934:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016937:	c3                   	ret    

c0016938 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016938:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001693d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016942:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016946:	c1 e0 04             	shl    eax,0x4
c0016949:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001694d:	c3                   	ret    

c001694e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001694e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016953:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016958:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001695c:	c1 e0 04             	shl    eax,0x4
c001695f:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016962:	c3                   	ret    

c0016963 <Vm::faultHandler(regs*)>:
c0016963:	55                   	push   ebp
c0016964:	57                   	push   edi
c0016965:	56                   	push   esi
c0016966:	53                   	push   ebx
c0016967:	83 ec 2c             	sub    esp,0x2c
c001696a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001696e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016971:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016975:	0f b7 f8             	movzx  edi,ax
c0016978:	0f b7 c0             	movzx  eax,ax
c001697b:	52                   	push   edx
c001697c:	50                   	push   eax
c001697d:	e8 3c fa ff ff       	call   c00163be <Vm::realToLinear(unsigned short, unsigned short)>
c0016982:	5a                   	pop    edx
c0016983:	59                   	pop    ecx
c0016984:	89 c1                	mov    ecx,eax
c0016986:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016989:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001698d:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016992:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016996:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016999:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001699d:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00169a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00169a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00169aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00169ae:	e8 0b fa ff ff       	call   c00163be <Vm::realToLinear(unsigned short, unsigned short)>
c00169b3:	5e                   	pop    esi
c00169b4:	be 06 00 00 00       	mov    esi,0x6
c00169b9:	5d                   	pop    ebp
c00169ba:	31 ed                	xor    ebp,ebp
c00169bc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00169c1:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00169c4:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c00169ca:	0f 84 74 02 00 00    	je     c0016c44 <Vm::faultHandler(regs*)+0x2e1>
c00169d0:	0f 87 94 00 00 00    	ja     c0016a6a <Vm::faultHandler(regs*)+0x107>
c00169d6:	83 fa 66             	cmp    edx,0x66
c00169d9:	0f 84 e2 01 00 00    	je     c0016bc1 <Vm::faultHandler(regs*)+0x25e>
c00169df:	77 47                	ja     c0016a28 <Vm::faultHandler(regs*)+0xc5>
c00169e1:	83 fa 36             	cmp    edx,0x36
c00169e4:	0f 84 ca 01 00 00    	je     c0016bb4 <Vm::faultHandler(regs*)+0x251>
c00169ea:	77 1a                	ja     c0016a06 <Vm::faultHandler(regs*)+0xa3>
c00169ec:	83 fa 26             	cmp    edx,0x26
c00169ef:	0f 84 98 01 00 00    	je     c0016b8d <Vm::faultHandler(regs*)+0x22a>
c00169f5:	83 fa 2e             	cmp    edx,0x2e
c00169f8:	0f 85 27 06 00 00    	jne    c0017025 <Vm::faultHandler(regs*)+0x6c2>
c00169fe:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016a01:	31 f6                	xor    esi,esi
c0016a03:	41                   	inc    ecx
c0016a04:	eb bb                	jmp    c00169c1 <Vm::faultHandler(regs*)+0x5e>
c0016a06:	83 fa 64             	cmp    edx,0x64
c0016a09:	0f 84 8b 01 00 00    	je     c0016b9a <Vm::faultHandler(regs*)+0x237>
c0016a0f:	0f 87 92 01 00 00    	ja     c0016ba7 <Vm::faultHandler(regs*)+0x244>
c0016a15:	83 fa 3e             	cmp    edx,0x3e
c0016a18:	0f 85 07 06 00 00    	jne    c0017025 <Vm::faultHandler(regs*)+0x6c2>
c0016a1e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016a21:	be 01 00 00 00       	mov    esi,0x1
c0016a26:	eb db                	jmp    c0016a03 <Vm::faultHandler(regs*)+0xa0>
c0016a28:	83 fa 6d             	cmp    edx,0x6d
c0016a2b:	0f 84 34 03 00 00    	je     c0016d65 <Vm::faultHandler(regs*)+0x402>
c0016a31:	77 17                	ja     c0016a4a <Vm::faultHandler(regs*)+0xe7>
c0016a33:	83 fa 67             	cmp    edx,0x67
c0016a36:	0f 84 92 01 00 00    	je     c0016bce <Vm::faultHandler(regs*)+0x26b>
c0016a3c:	83 fa 6c             	cmp    edx,0x6c
c0016a3f:	0f 84 b1 02 00 00    	je     c0016cf6 <Vm::faultHandler(regs*)+0x393>
c0016a45:	e9 db 05 00 00       	jmp    c0017025 <Vm::faultHandler(regs*)+0x6c2>
c0016a4a:	83 fa 6f             	cmp    edx,0x6f
c0016a4d:	0f 84 40 04 00 00    	je     c0016e93 <Vm::faultHandler(regs*)+0x530>
c0016a53:	0f 82 a2 03 00 00    	jb     c0016dfb <Vm::faultHandler(regs*)+0x498>
c0016a59:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016a5f:	0f 84 76 01 00 00    	je     c0016bdb <Vm::faultHandler(regs*)+0x278>
c0016a65:	e9 bb 05 00 00       	jmp    c0017025 <Vm::faultHandler(regs*)+0x6c2>
c0016a6a:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016a70:	0f 84 57 05 00 00    	je     c0016fcd <Vm::faultHandler(regs*)+0x66a>
c0016a76:	0f 87 a9 00 00 00    	ja     c0016b25 <Vm::faultHandler(regs*)+0x1c2>
c0016a7c:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016a82:	0f 84 d6 04 00 00    	je     c0016f5e <Vm::faultHandler(regs*)+0x5fb>
c0016a88:	77 78                	ja     c0016b02 <Vm::faultHandler(regs*)+0x19f>
c0016a8a:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016a90:	0f 84 0e 02 00 00    	je     c0016ca4 <Vm::faultHandler(regs*)+0x341>
c0016a96:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016a9c:	0f 85 83 05 00 00    	jne    c0017025 <Vm::faultHandler(regs*)+0x6c2>
c0016aa2:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016aa6:	89 d1                	mov    ecx,edx
c0016aa8:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016aab:	c1 e1 08             	shl    ecx,0x8
c0016aae:	09 ca                	or     edx,ecx
c0016ab0:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016ab3:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016ab7:	89 d1                	mov    ecx,edx
c0016ab9:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016abd:	c1 e1 08             	shl    ecx,0x8
c0016ac0:	09 ca                	or     edx,ecx
c0016ac2:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016ac5:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016ac9:	89 d1                	mov    ecx,edx
c0016acb:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016acf:	c1 e1 08             	shl    ecx,0x8
c0016ad2:	09 ca                	or     edx,ecx
c0016ad4:	81 ca 00 02 02 00    	or     edx,0x20200
c0016ada:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016add:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016ae1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016ae7:	d1 e8                	shr    eax,1
c0016ae9:	83 e0 01             	and    eax,0x1
c0016aec:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016aef:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016af2:	83 c0 06             	add    eax,0x6
c0016af5:	25 ff ff 00 00       	and    eax,0xffff
c0016afa:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016afd:	e9 1f 05 00 00       	jmp    c0017021 <Vm::faultHandler(regs*)+0x6be>
c0016b02:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016b08:	0f 84 95 04 00 00    	je     c0016fa3 <Vm::faultHandler(regs*)+0x640>
c0016b0e:	0f 82 66 04 00 00    	jb     c0016f7a <Vm::faultHandler(regs*)+0x617>
c0016b14:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016b1a:	0f 84 9a 04 00 00    	je     c0016fba <Vm::faultHandler(regs*)+0x657>
c0016b20:	e9 00 05 00 00       	jmp    c0017025 <Vm::faultHandler(regs*)+0x6c2>
c0016b25:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016b2b:	0f 84 dd 04 00 00    	je     c001700e <Vm::faultHandler(regs*)+0x6ab>
c0016b31:	77 2e                	ja     c0016b61 <Vm::faultHandler(regs*)+0x1fe>
c0016b33:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016b39:	0f 84 aa 04 00 00    	je     c0016fe9 <Vm::faultHandler(regs*)+0x686>
c0016b3f:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016b45:	0f 85 da 04 00 00    	jne    c0017025 <Vm::faultHandler(regs*)+0x6c2>
c0016b4b:	50                   	push   eax
c0016b4c:	50                   	push   eax
c0016b4d:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016b51:	50                   	push   eax
c0016b52:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016b56:	50                   	push   eax
c0016b57:	e8 2c f8 ff ff       	call   c0016388 <Vm::outbv(unsigned short, unsigned char)>
c0016b5c:	e9 a5 04 00 00       	jmp    c0017006 <Vm::faultHandler(regs*)+0x6a3>
c0016b61:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016b67:	0f 84 6d 01 00 00    	je     c0016cda <Vm::faultHandler(regs*)+0x377>
c0016b6d:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016b73:	0f 84 6f 01 00 00    	je     c0016ce8 <Vm::faultHandler(regs*)+0x385>
c0016b79:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016b7f:	0f 85 a0 04 00 00    	jne    c0017025 <Vm::faultHandler(regs*)+0x6c2>
c0016b85:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016b88:	e9 76 fe ff ff       	jmp    c0016a03 <Vm::faultHandler(regs*)+0xa0>
c0016b8d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016b90:	be 02 00 00 00       	mov    esi,0x2
c0016b95:	e9 69 fe ff ff       	jmp    c0016a03 <Vm::faultHandler(regs*)+0xa0>
c0016b9a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016b9d:	be 03 00 00 00       	mov    esi,0x3
c0016ba2:	e9 5c fe ff ff       	jmp    c0016a03 <Vm::faultHandler(regs*)+0xa0>
c0016ba7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016baa:	be 04 00 00 00       	mov    esi,0x4
c0016baf:	e9 4f fe ff ff       	jmp    c0016a03 <Vm::faultHandler(regs*)+0xa0>
c0016bb4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016bb7:	be 05 00 00 00       	mov    esi,0x5
c0016bbc:	e9 42 fe ff ff       	jmp    c0016a03 <Vm::faultHandler(regs*)+0xa0>
c0016bc1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016bc4:	bd 01 00 00 00       	mov    ebp,0x1
c0016bc9:	e9 35 fe ff ff       	jmp    c0016a03 <Vm::faultHandler(regs*)+0xa0>
c0016bce:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016bd1:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016bd6:	e9 28 fe ff ff       	jmp    c0016a03 <Vm::faultHandler(regs*)+0xa0>
c0016bdb:	83 e5 01             	and    ebp,0x1
c0016bde:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016be1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016be5:	74 30                	je     c0016c17 <Vm::faultHandler(regs*)+0x2b4>
c0016be7:	83 e9 04             	sub    ecx,0x4
c0016bea:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016bf0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016bf6:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016bf9:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016bfc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016c02:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016c06:	0f 84 12 04 00 00    	je     c001701e <Vm::faultHandler(regs*)+0x6bb>
c0016c0c:	80 ce 02             	or     dh,0x2
c0016c0f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016c12:	e9 07 04 00 00       	jmp    c001701e <Vm::faultHandler(regs*)+0x6bb>
c0016c17:	83 e9 02             	sub    ecx,0x2
c0016c1a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016c20:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016c23:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016c27:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016c2d:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016c31:	74 05                	je     c0016c38 <Vm::faultHandler(regs*)+0x2d5>
c0016c33:	80 ce 02             	or     dh,0x2
c0016c36:	eb 03                	jmp    c0016c3b <Vm::faultHandler(regs*)+0x2d8>
c0016c38:	80 e6 fd             	and    dh,0xfd
c0016c3b:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016c3f:	e9 da 03 00 00       	jmp    c001701e <Vm::faultHandler(regs*)+0x6bb>
c0016c44:	83 e5 01             	and    ebp,0x1
c0016c47:	74 2a                	je     c0016c73 <Vm::faultHandler(regs*)+0x310>
c0016c49:	8b 10                	mov    edx,DWORD PTR [eax]
c0016c4b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016c51:	81 ca 00 02 02 00    	or     edx,0x20200
c0016c57:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016c5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c5c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016c62:	c1 e8 09             	shr    eax,0x9
c0016c65:	83 e0 01             	and    eax,0x1
c0016c68:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016c6b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016c6e:	83 c0 04             	add    eax,0x4
c0016c71:	eb 24                	jmp    c0016c97 <Vm::faultHandler(regs*)+0x334>
c0016c73:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016c76:	81 ca 00 02 02 00    	or     edx,0x20200
c0016c7c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016c7f:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016c82:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016c88:	c1 e8 09             	shr    eax,0x9
c0016c8b:	83 e0 01             	and    eax,0x1
c0016c8e:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016c91:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016c94:	83 c0 02             	add    eax,0x2
c0016c97:	25 ff ff 00 00       	and    eax,0xffff
c0016c9c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016c9f:	e9 7a 03 00 00       	jmp    c001701e <Vm::faultHandler(regs*)+0x6bb>
c0016ca4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016ca8:	3d ee 00 00 00       	cmp    eax,0xee
c0016cad:	75 10                	jne    c0016cbf <Vm::faultHandler(regs*)+0x35c>
c0016caf:	83 ec 0c             	sub    esp,0xc
c0016cb2:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016cb5:	e8 6e f7 ff ff       	call   c0016428 <Vm::mainloop3(unsigned long)>
c0016cba:	e9 4a 03 00 00       	jmp    c0017009 <Vm::faultHandler(regs*)+0x6a6>
c0016cbf:	83 ec 0c             	sub    esp,0xc
c0016cc2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016cc6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016cca:	51                   	push   ecx
c0016ccb:	50                   	push   eax
c0016ccc:	53                   	push   ebx
c0016ccd:	e8 80 fb ff ff       	call   c0016852 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016cd2:	83 c4 20             	add    esp,0x20
c0016cd5:	e9 47 03 00 00       	jmp    c0017021 <Vm::faultHandler(regs*)+0x6be>
c0016cda:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cdf:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016ce3:	e9 36 03 00 00       	jmp    c001701e <Vm::faultHandler(regs*)+0x6bb>
c0016ce8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ced:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016cf1:	e9 28 03 00 00       	jmp    c001701e <Vm::faultHandler(regs*)+0x6bb>
c0016cf6:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016cfb:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016cfe:	74 2b                	je     c0016d2b <Vm::faultHandler(regs*)+0x3c8>
c0016d00:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016d07:	76 22                	jbe    c0016d2b <Vm::faultHandler(regs*)+0x3c8>
c0016d09:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016d0d:	50                   	push   eax
c0016d0e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016d12:	50                   	push   eax
c0016d13:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016d17:	50                   	push   eax
c0016d18:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016d1c:	50                   	push   eax
c0016d1d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016d21:	50                   	push   eax
c0016d22:	6a 6c                	push   0x6c
c0016d24:	6a 6c                	push   0x6c
c0016d26:	e9 c0 01 00 00       	jmp    c0016eeb <Vm::faultHandler(regs*)+0x588>
c0016d2b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016d2f:	83 ec 0c             	sub    esp,0xc
c0016d32:	0f b7 f6             	movzx  esi,si
c0016d35:	50                   	push   eax
c0016d36:	e8 3a f6 ff ff       	call   c0016375 <Vm::inbv(unsigned short)>
c0016d3b:	83 c4 0c             	add    esp,0xc
c0016d3e:	0f b6 c0             	movzx  eax,al
c0016d41:	50                   	push   eax
c0016d42:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016d46:	50                   	push   eax
c0016d47:	56                   	push   esi
c0016d48:	e8 d6 fb ff ff       	call   c0016923 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016d4d:	83 c4 10             	add    esp,0x10
c0016d50:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016d53:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016d57:	74 03                	je     c0016d5c <Vm::faultHandler(regs*)+0x3f9>
c0016d59:	48                   	dec    eax
c0016d5a:	eb 01                	jmp    c0016d5d <Vm::faultHandler(regs*)+0x3fa>
c0016d5c:	40                   	inc    eax
c0016d5d:	0f b7 c0             	movzx  eax,ax
c0016d60:	e9 8e 00 00 00       	jmp    c0016df3 <Vm::faultHandler(regs*)+0x490>
c0016d65:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016d6a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016d6d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016d70:	74 29                	je     c0016d9b <Vm::faultHandler(regs*)+0x438>
c0016d72:	3d ff ff 00 00       	cmp    eax,0xffff
c0016d77:	76 22                	jbe    c0016d9b <Vm::faultHandler(regs*)+0x438>
c0016d79:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016d7d:	50                   	push   eax
c0016d7e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016d82:	50                   	push   eax
c0016d83:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016d87:	50                   	push   eax
c0016d88:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016d8c:	50                   	push   eax
c0016d8d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016d91:	50                   	push   eax
c0016d92:	6a 6d                	push   0x6d
c0016d94:	6a 6d                	push   0x6d
c0016d96:	e9 50 01 00 00       	jmp    c0016eeb <Vm::faultHandler(regs*)+0x588>
c0016d9b:	83 e5 01             	and    ebp,0x1
c0016d9e:	0f b7 c8             	movzx  ecx,ax
c0016da1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016da4:	0f b7 f6             	movzx  esi,si
c0016da7:	74 1e                	je     c0016dc7 <Vm::faultHandler(regs*)+0x464>
c0016da9:	ed                   	in     eax,dx
c0016daa:	55                   	push   ebp
c0016dab:	50                   	push   eax
c0016dac:	51                   	push   ecx
c0016dad:	56                   	push   esi
c0016dae:	e8 9b fb ff ff       	call   c001694e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016db3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016db6:	83 c4 10             	add    esp,0x10
c0016db9:	8d 50 04             	lea    edx,[eax+0x4]
c0016dbc:	83 e8 04             	sub    eax,0x4
c0016dbf:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016dc5:	eb 20                	jmp    c0016de7 <Vm::faultHandler(regs*)+0x484>
c0016dc7:	66 ed                	in     ax,dx
c0016dc9:	57                   	push   edi
c0016dca:	0f b7 c0             	movzx  eax,ax
c0016dcd:	50                   	push   eax
c0016dce:	51                   	push   ecx
c0016dcf:	56                   	push   esi
c0016dd0:	e8 63 fb ff ff       	call   c0016938 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0016dd5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016dd8:	83 c4 10             	add    esp,0x10
c0016ddb:	8d 50 02             	lea    edx,[eax+0x2]
c0016dde:	83 e8 02             	sub    eax,0x2
c0016de1:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016de7:	25 ff ff 00 00       	and    eax,0xffff
c0016dec:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016df0:	0f 44 c2             	cmove  eax,edx
c0016df3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016df6:	e9 23 02 00 00       	jmp    c001701e <Vm::faultHandler(regs*)+0x6bb>
c0016dfb:	8d 46 ff             	lea    eax,[esi-0x1]
c0016dfe:	0f b6 f0             	movzx  esi,al
c0016e01:	83 fe 05             	cmp    esi,0x5
c0016e04:	77 23                	ja     c0016e29 <Vm::faultHandler(regs*)+0x4c6>
c0016e06:	ff 24 b5 4c 3a 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdc5b4]
c0016e0d:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0016e12:	eb 15                	jmp    c0016e29 <Vm::faultHandler(regs*)+0x4c6>
c0016e14:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0016e18:	eb 0f                	jmp    c0016e29 <Vm::faultHandler(regs*)+0x4c6>
c0016e1a:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016e1e:	eb 09                	jmp    c0016e29 <Vm::faultHandler(regs*)+0x4c6>
c0016e20:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016e24:	eb 03                	jmp    c0016e29 <Vm::faultHandler(regs*)+0x4c6>
c0016e26:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016e29:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016e2e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016e31:	74 29                	je     c0016e5c <Vm::faultHandler(regs*)+0x4f9>
c0016e33:	3d ff ff 00 00       	cmp    eax,0xffff
c0016e38:	76 22                	jbe    c0016e5c <Vm::faultHandler(regs*)+0x4f9>
c0016e3a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016e3e:	50                   	push   eax
c0016e3f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016e43:	50                   	push   eax
c0016e44:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016e48:	50                   	push   eax
c0016e49:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016e4d:	50                   	push   eax
c0016e4e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016e52:	50                   	push   eax
c0016e53:	6a 6e                	push   0x6e
c0016e55:	6a 6e                	push   0x6e
c0016e57:	e9 8f 00 00 00       	jmp    c0016eeb <Vm::faultHandler(regs*)+0x588>
c0016e5c:	52                   	push   edx
c0016e5d:	0f b7 c0             	movzx  eax,ax
c0016e60:	52                   	push   edx
c0016e61:	50                   	push   eax
c0016e62:	57                   	push   edi
c0016e63:	e8 87 fa ff ff       	call   c00168ef <Vm::readByteFromReal(unsigned short, unsigned short)>
c0016e68:	59                   	pop    ecx
c0016e69:	5e                   	pop    esi
c0016e6a:	0f b6 c0             	movzx  eax,al
c0016e6d:	50                   	push   eax
c0016e6e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016e72:	50                   	push   eax
c0016e73:	e8 10 f5 ff ff       	call   c0016388 <Vm::outbv(unsigned short, unsigned char)>
c0016e78:	83 c4 10             	add    esp,0x10
c0016e7b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016e7e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016e82:	74 03                	je     c0016e87 <Vm::faultHandler(regs*)+0x524>
c0016e84:	48                   	dec    eax
c0016e85:	eb 01                	jmp    c0016e88 <Vm::faultHandler(regs*)+0x525>
c0016e87:	40                   	inc    eax
c0016e88:	0f b7 c0             	movzx  eax,ax
c0016e8b:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016e8e:	e9 8b 01 00 00       	jmp    c001701e <Vm::faultHandler(regs*)+0x6bb>
c0016e93:	8d 46 ff             	lea    eax,[esi-0x1]
c0016e96:	0f b6 f0             	movzx  esi,al
c0016e99:	83 fe 05             	cmp    esi,0x5
c0016e9c:	77 1e                	ja     c0016ebc <Vm::faultHandler(regs*)+0x559>
c0016e9e:	ff 24 b5 64 3a 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdc59c]
c0016ea5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016ea9:	eb 11                	jmp    c0016ebc <Vm::faultHandler(regs*)+0x559>
c0016eab:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0016eae:	eb 0c                	jmp    c0016ebc <Vm::faultHandler(regs*)+0x559>
c0016eb0:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0016eb3:	eb 07                	jmp    c0016ebc <Vm::faultHandler(regs*)+0x559>
c0016eb5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016eb8:	eb 02                	jmp    c0016ebc <Vm::faultHandler(regs*)+0x559>
c0016eba:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0016ebc:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016ec1:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0016ec4:	74 37                	je     c0016efd <Vm::faultHandler(regs*)+0x59a>
c0016ec6:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0016ecc:	76 2f                	jbe    c0016efd <Vm::faultHandler(regs*)+0x59a>
c0016ece:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016ed2:	50                   	push   eax
c0016ed3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016ed7:	50                   	push   eax
c0016ed8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016edc:	50                   	push   eax
c0016edd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016ee1:	50                   	push   eax
c0016ee2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016ee6:	50                   	push   eax
c0016ee7:	6a 6f                	push   0x6f
c0016ee9:	6a 6f                	push   0x6f
c0016eeb:	68 ef 39 02 c0       	push   0xc00239ef
c0016ef0:	e8 59 00 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016ef5:	83 c4 20             	add    esp,0x20
c0016ef8:	e9 86 01 00 00       	jmp    c0017083 <Vm::faultHandler(regs*)+0x720>
c0016efd:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016f00:	0f b7 d7             	movzx  edx,di
c0016f03:	0f b7 c6             	movzx  eax,si
c0016f06:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016f09:	81 e1 00 04 00 00    	and    ecx,0x400
c0016f0f:	83 e5 01             	and    ebp,0x1
c0016f12:	74 1c                	je     c0016f30 <Vm::faultHandler(regs*)+0x5cd>
c0016f14:	55                   	push   ebp
c0016f15:	55                   	push   ebp
c0016f16:	50                   	push   eax
c0016f17:	52                   	push   edx
c0016f18:	e8 f5 f9 ff ff       	call   c0016912 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0016f1d:	83 c4 10             	add    esp,0x10
c0016f20:	89 fa                	mov    edx,edi
c0016f22:	ef                   	out    dx,eax
c0016f23:	8d 46 04             	lea    eax,[esi+0x4]
c0016f26:	83 ee 04             	sub    esi,0x4
c0016f29:	25 ff ff 00 00       	and    eax,0xffff
c0016f2e:	eb 1b                	jmp    c0016f4b <Vm::faultHandler(regs*)+0x5e8>
c0016f30:	55                   	push   ebp
c0016f31:	55                   	push   ebp
c0016f32:	50                   	push   eax
c0016f33:	52                   	push   edx
c0016f34:	e8 c7 f9 ff ff       	call   c0016900 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0016f39:	83 c4 10             	add    esp,0x10
c0016f3c:	89 fa                	mov    edx,edi
c0016f3e:	66 ef                	out    dx,ax
c0016f40:	8d 46 02             	lea    eax,[esi+0x2]
c0016f43:	83 ee 02             	sub    esi,0x2
c0016f46:	25 ff ff 00 00       	and    eax,0xffff
c0016f4b:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016f51:	85 c9                	test   ecx,ecx
c0016f53:	0f 44 f0             	cmove  esi,eax
c0016f56:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0016f59:	e9 c0 00 00 00       	jmp    c001701e <Vm::faultHandler(regs*)+0x6bb>
c0016f5e:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016f65:	83 ec 0c             	sub    esp,0xc
c0016f68:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016f6c:	50                   	push   eax
c0016f6d:	e8 03 f4 ff ff       	call   c0016375 <Vm::inbv(unsigned short)>
c0016f72:	0f b6 c0             	movzx  eax,al
c0016f75:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016f78:	eb 3a                	jmp    c0016fb4 <Vm::faultHandler(regs*)+0x651>
c0016f7a:	83 e5 01             	and    ebp,0x1
c0016f7d:	74 07                	je     c0016f86 <Vm::faultHandler(regs*)+0x623>
c0016f7f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016f83:	ed                   	in     eax,dx
c0016f84:	eb 14                	jmp    c0016f9a <Vm::faultHandler(regs*)+0x637>
c0016f86:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0016f89:	66 31 f6             	xor    si,si
c0016f8c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016f8f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016f93:	66 ed                	in     ax,dx
c0016f95:	0f b7 c0             	movzx  eax,ax
c0016f98:	09 f0                	or     eax,esi
c0016f9a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016f9d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016fa1:	eb 7e                	jmp    c0017021 <Vm::faultHandler(regs*)+0x6be>
c0016fa3:	52                   	push   edx
c0016fa4:	52                   	push   edx
c0016fa5:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016fa9:	50                   	push   eax
c0016faa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016fae:	50                   	push   eax
c0016faf:	e8 d4 f3 ff ff       	call   c0016388 <Vm::outbv(unsigned short, unsigned char)>
c0016fb4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016fb8:	eb 4f                	jmp    c0017009 <Vm::faultHandler(regs*)+0x6a6>
c0016fba:	83 e5 01             	and    ebp,0x1
c0016fbd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016fc0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016fc4:	74 03                	je     c0016fc9 <Vm::faultHandler(regs*)+0x666>
c0016fc6:	ef                   	out    dx,eax
c0016fc7:	eb d4                	jmp    c0016f9d <Vm::faultHandler(regs*)+0x63a>
c0016fc9:	66 ef                	out    dx,ax
c0016fcb:	eb d0                	jmp    c0016f9d <Vm::faultHandler(regs*)+0x63a>
c0016fcd:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016fd1:	83 ec 0c             	sub    esp,0xc
c0016fd4:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016fdb:	50                   	push   eax
c0016fdc:	e8 94 f3 ff ff       	call   c0016375 <Vm::inbv(unsigned short)>
c0016fe1:	0f b6 c0             	movzx  eax,al
c0016fe4:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016fe7:	eb 1d                	jmp    c0017006 <Vm::faultHandler(regs*)+0x6a3>
c0016fe9:	83 e5 01             	and    ebp,0x1
c0016fec:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016fef:	74 03                	je     c0016ff4 <Vm::faultHandler(regs*)+0x691>
c0016ff1:	ed                   	in     eax,dx
c0016ff2:	eb 0d                	jmp    c0017001 <Vm::faultHandler(regs*)+0x69e>
c0016ff4:	66 ed                	in     ax,dx
c0016ff6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0016ff9:	0f b7 c0             	movzx  eax,ax
c0016ffc:	66 31 d2             	xor    dx,dx
c0016fff:	09 d0                	or     eax,edx
c0017001:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017004:	eb 18                	jmp    c001701e <Vm::faultHandler(regs*)+0x6bb>
c0017006:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017009:	83 c4 10             	add    esp,0x10
c001700c:	eb 13                	jmp    c0017021 <Vm::faultHandler(regs*)+0x6be>
c001700e:	83 e5 01             	and    ebp,0x1
c0017011:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017014:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017017:	74 03                	je     c001701c <Vm::faultHandler(regs*)+0x6b9>
c0017019:	ef                   	out    dx,eax
c001701a:	eb 02                	jmp    c001701e <Vm::faultHandler(regs*)+0x6bb>
c001701c:	66 ef                	out    dx,ax
c001701e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017021:	b0 01                	mov    al,0x1
c0017023:	eb 60                	jmp    c0017085 <Vm::faultHandler(regs*)+0x722>
c0017025:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017029:	50                   	push   eax
c001702a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001702e:	50                   	push   eax
c001702f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017033:	50                   	push   eax
c0017034:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017038:	50                   	push   eax
c0017039:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001703d:	50                   	push   eax
c001703e:	52                   	push   edx
c001703f:	52                   	push   edx
c0017040:	68 1c 3a 02 c0       	push   0xc0023a1c
c0017045:	e8 04 ff fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001704a:	83 c4 20             	add    esp,0x20
c001704d:	83 ec 0c             	sub    esp,0xc
c0017050:	6a 60                	push   0x60
c0017052:	e8 1e f3 ff ff       	call   c0016375 <Vm::inbv(unsigned short)>
c0017057:	83 c4 10             	add    esp,0x10
c001705a:	0f b6 d0             	movzx  edx,al
c001705d:	83 fa 1c             	cmp    edx,0x1c
c0017060:	74 05                	je     c0017067 <Vm::faultHandler(regs*)+0x704>
c0017062:	83 fa 5a             	cmp    edx,0x5a
c0017065:	75 e6                	jne    c001704d <Vm::faultHandler(regs*)+0x6ea>
c0017067:	0f b6 c0             	movzx  eax,al
c001706a:	83 f8 1c             	cmp    eax,0x1c
c001706d:	74 05                	je     c0017074 <Vm::faultHandler(regs*)+0x711>
c001706f:	83 f8 5a             	cmp    eax,0x5a
c0017072:	75 0f                	jne    c0017083 <Vm::faultHandler(regs*)+0x720>
c0017074:	83 ec 0c             	sub    esp,0xc
c0017077:	6a 60                	push   0x60
c0017079:	e8 f7 f2 ff ff       	call   c0016375 <Vm::inbv(unsigned short)>
c001707e:	83 c4 10             	add    esp,0x10
c0017081:	eb e4                	jmp    c0017067 <Vm::faultHandler(regs*)+0x704>
c0017083:	31 c0                	xor    eax,eax
c0017085:	83 c4 2c             	add    esp,0x2c
c0017088:	5b                   	pop    ebx
c0017089:	5e                   	pop    esi
c001708a:	5f                   	pop    edi
c001708b:	5d                   	pop    ebp
c001708c:	c3                   	ret    
c001708d:	90                   	nop

c001708e <noCopro(unsigned long)>:
c001708e:	c3                   	ret    
c001708f:	90                   	nop

c0017090 <CPU::close(int, int, void*)>:
c0017090:	31 c0                	xor    eax,eax
c0017092:	c3                   	ret    

c0017093 <x86ReadCMOS(unsigned char)>:
c0017093:	83 ec 14             	sub    esp,0x14
c0017096:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001709a:	88 04 24             	mov    BYTE PTR [esp],al
c001709d:	a0 6c d7 02 c0       	mov    al,ds:0xc002d76c
c00170a2:	0f b6 c0             	movzx  eax,al
c00170a5:	85 c0                	test   eax,eax
c00170a7:	74 04                	je     c00170ad <x86ReadCMOS(unsigned char)+0x1a>
c00170a9:	b2 00                	mov    dl,0x0
c00170ab:	eb 02                	jmp    c00170af <x86ReadCMOS(unsigned char)+0x1c>
c00170ad:	b2 80                	mov    dl,0x80
c00170af:	8a 04 24             	mov    al,BYTE PTR [esp]
c00170b2:	09 d0                	or     eax,edx
c00170b4:	0f b6 c0             	movzx  eax,al
c00170b7:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c00170be:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00170c2:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00170c6:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00170cb:	ee                   	out    dx,al
c00170cc:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c00170d3:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00170d8:	89 c2                	mov    edx,eax
c00170da:	ec                   	in     al,dx
c00170db:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00170df:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00170e3:	83 c4 14             	add    esp,0x14
c00170e6:	c3                   	ret    

c00170e7 <x86WriteCMOS(unsigned char, unsigned char)>:
c00170e7:	83 ec 18             	sub    esp,0x18
c00170ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00170ee:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00170f2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00170f6:	88 d0                	mov    al,dl
c00170f8:	88 04 24             	mov    BYTE PTR [esp],al
c00170fb:	a0 6c d7 02 c0       	mov    al,ds:0xc002d76c
c0017100:	0f b6 c0             	movzx  eax,al
c0017103:	85 c0                	test   eax,eax
c0017105:	74 04                	je     c001710b <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0017107:	b2 00                	mov    dl,0x0
c0017109:	eb 02                	jmp    c001710d <x86WriteCMOS(unsigned char, unsigned char)+0x26>
c001710b:	b2 80                	mov    dl,0x80
c001710d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0017111:	09 d0                	or     eax,edx
c0017113:	0f b6 c0             	movzx  eax,al
c0017116:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c001711d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0017121:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0017125:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c001712a:	ee                   	out    dx,al
c001712b:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001712f:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0017136:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001713a:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c001713e:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0017143:	ee                   	out    dx,al
c0017144:	90                   	nop
c0017145:	83 c4 18             	add    esp,0x18
c0017148:	c3                   	ret    

c0017149 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0017149:	60                   	pusha  
c001714a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001714e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017152:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017156:	9c                   	pushf  
c0017157:	fa                   	cli    
c0017158:	0f 09                	wbinvd 
c001715a:	0f 30                	wrmsr  
c001715c:	9d                   	popf   
c001715d:	89 c2                	mov    edx,eax
c001715f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017163:	89 10                	mov    DWORD PTR [eax],edx
c0017165:	61                   	popa   
c0017166:	90                   	nop
c0017167:	c3                   	ret    

c0017168 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0017168:	60                   	pusha  
c0017169:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001716d:	89 c1                	mov    ecx,eax
c001716f:	9c                   	pushf  
c0017170:	fa                   	cli    
c0017171:	0f 09                	wbinvd 
c0017173:	31 c0                	xor    eax,eax
c0017175:	31 d2                	xor    edx,edx
c0017177:	0f 32                	rdmsr  
c0017179:	9d                   	popf   
c001717a:	89 c2                	mov    edx,eax
c001717c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017180:	89 10                	mov    DWORD PTR [eax],edx
c0017182:	61                   	popa   
c0017183:	90                   	nop
c0017184:	c3                   	ret    

c0017185 <AMD_K6_writeback(int, int, int)>:
c0017185:	83 ec 20             	sub    esp,0x20
c0017188:	a1 a0 cd 02 c0       	mov    eax,ds:0xc002cda0
c001718d:	c1 e8 14             	shr    eax,0x14
c0017190:	c1 e8 02             	shr    eax,0x2
c0017193:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017197:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c001719c:	0f 85 9e 00 00 00    	jne    c0017240 <AMD_K6_writeback(int, int, int)+0xbb>
c00171a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00171a6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00171aa:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c00171af:	75 19                	jne    c00171ca <AMD_K6_writeback(int, int, int)+0x45>
c00171b1:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c00171b6:	7f 0a                	jg     c00171c2 <AMD_K6_writeback(int, int, int)+0x3d>
c00171b8:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c00171c0:	eb 08                	jmp    c00171ca <AMD_K6_writeback(int, int, int)+0x45>
c00171c2:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c00171ca:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c00171cf:	7c 6e                	jl     c001723f <AMD_K6_writeback(int, int, int)+0xba>
c00171d1:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c00171d6:	7e 09                	jle    c00171e1 <AMD_K6_writeback(int, int, int)+0x5c>
c00171d8:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c00171dd:	74 36                	je     c0017215 <AMD_K6_writeback(int, int, int)+0x90>
c00171df:	eb 5e                	jmp    c001723f <AMD_K6_writeback(int, int, int)+0xba>
c00171e1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00171e5:	50                   	push   eax
c00171e6:	68 82 00 00 c0       	push   0xc0000082
c00171eb:	e8 78 ff ff ff       	call   c0017168 <AMD_K6_read_msr(unsigned int, REGS*)>
c00171f0:	83 c4 08             	add    esp,0x8
c00171f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00171f7:	d1 e0                	shl    eax,1
c00171f9:	83 e0 7f             	and    eax,0x7f
c00171fc:	89 c2                	mov    edx,eax
c00171fe:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017202:	50                   	push   eax
c0017203:	6a 00                	push   0x0
c0017205:	52                   	push   edx
c0017206:	68 82 00 00 c0       	push   0xc0000082
c001720b:	e8 39 ff ff ff       	call   c0017149 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0017210:	83 c4 10             	add    esp,0x10
c0017213:	eb 2b                	jmp    c0017240 <AMD_K6_writeback(int, int, int)+0xbb>
c0017215:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017219:	50                   	push   eax
c001721a:	68 82 00 00 c0       	push   0xc0000082
c001721f:	e8 44 ff ff ff       	call   c0017168 <AMD_K6_read_msr(unsigned int, REGS*)>
c0017224:	83 c4 08             	add    esp,0x8
c0017227:	8d 44 24 08          	lea    eax,[esp+0x8]
c001722b:	50                   	push   eax
c001722c:	6a 00                	push   0x0
c001722e:	6a 00                	push   0x0
c0017230:	68 82 00 00 c0       	push   0xc0000082
c0017235:	e8 0f ff ff ff       	call   c0017149 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c001723a:	83 c4 10             	add    esp,0x10
c001723d:	eb 01                	jmp    c0017240 <AMD_K6_writeback(int, int, int)+0xbb>
c001723f:	90                   	nop
c0017240:	90                   	nop
c0017241:	83 c4 20             	add    esp,0x20
c0017244:	c3                   	ret    

c0017245 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0017245:	56                   	push   esi
c0017246:	53                   	push   ebx
c0017247:	a1 c0 53 02 c0       	mov    eax,ds:0xc00253c0
c001724c:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017250:	75 32                	jne    c0017284 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0017252:	8b 15 60 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d760
c0017258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001725c:	89 10                	mov    DWORD PTR [eax],edx
c001725e:	8b 15 5c d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d75c
c0017264:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017268:	89 10                	mov    DWORD PTR [eax],edx
c001726a:	8b 15 58 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d758
c0017270:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017274:	89 10                	mov    DWORD PTR [eax],edx
c0017276:	8b 15 54 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d754
c001727c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017280:	89 10                	mov    DWORD PTR [eax],edx
c0017282:	eb 5c                	jmp    c00172e0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0017284:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017288:	ba 00 00 00 00       	mov    edx,0x0
c001728d:	89 d1                	mov    ecx,edx
c001728f:	0f a2                	cpuid  
c0017291:	89 c6                	mov    esi,eax
c0017293:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017297:	89 30                	mov    DWORD PTR [eax],esi
c0017299:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001729d:	89 18                	mov    DWORD PTR [eax],ebx
c001729f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00172a3:	89 08                	mov    DWORD PTR [eax],ecx
c00172a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00172a9:	89 10                	mov    DWORD PTR [eax],edx
c00172ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00172af:	a3 c0 53 02 c0       	mov    ds:0xc00253c0,eax
c00172b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00172b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00172ba:	a3 60 d7 02 c0       	mov    ds:0xc002d760,eax
c00172bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00172c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00172c5:	a3 5c d7 02 c0       	mov    ds:0xc002d75c,eax
c00172ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00172ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00172d0:	a3 58 d7 02 c0       	mov    ds:0xc002d758,eax
c00172d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00172d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00172db:	a3 54 d7 02 c0       	mov    ds:0xc002d754,eax
c00172e0:	5b                   	pop    ebx
c00172e1:	5e                   	pop    esi
c00172e2:	c3                   	ret    

c00172e3 <cpuidCheckEDX(unsigned int)>:
c00172e3:	83 ec 10             	sub    esp,0x10
c00172e6:	89 e0                	mov    eax,esp
c00172e8:	50                   	push   eax
c00172e9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00172ed:	50                   	push   eax
c00172ee:	8d 44 24 10          	lea    eax,[esp+0x10]
c00172f2:	50                   	push   eax
c00172f3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172f7:	50                   	push   eax
c00172f8:	6a 01                	push   0x1
c00172fa:	e8 46 ff ff ff       	call   c0017245 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00172ff:	83 c4 14             	add    esp,0x14
c0017302:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017305:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0017309:	0f 95 c0             	setne  al
c001730c:	83 c4 10             	add    esp,0x10
c001730f:	c3                   	ret    

c0017310 <cpuidCheckECX(unsigned int)>:
c0017310:	83 ec 10             	sub    esp,0x10
c0017313:	89 e0                	mov    eax,esp
c0017315:	50                   	push   eax
c0017316:	8d 44 24 08          	lea    eax,[esp+0x8]
c001731a:	50                   	push   eax
c001731b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001731f:	50                   	push   eax
c0017320:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017324:	50                   	push   eax
c0017325:	6a 01                	push   0x1
c0017327:	e8 19 ff ff ff       	call   c0017245 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001732c:	83 c4 14             	add    esp,0x14
c001732f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017333:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0017337:	0f 95 c0             	setne  al
c001733a:	83 c4 10             	add    esp,0x10
c001733d:	c3                   	ret    

c001733e <cpuidCheckExtendedEBX(unsigned int)>:
c001733e:	83 ec 10             	sub    esp,0x10
c0017341:	89 e0                	mov    eax,esp
c0017343:	50                   	push   eax
c0017344:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017348:	50                   	push   eax
c0017349:	8d 44 24 10          	lea    eax,[esp+0x10]
c001734d:	50                   	push   eax
c001734e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017352:	50                   	push   eax
c0017353:	6a 07                	push   0x7
c0017355:	e8 eb fe ff ff       	call   c0017245 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001735a:	83 c4 14             	add    esp,0x14
c001735d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017361:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0017365:	0f 95 c0             	setne  al
c0017368:	83 c4 10             	add    esp,0x10
c001736b:	c3                   	ret    

c001736c <cpuidCheckExtendedECX(unsigned int)>:
c001736c:	83 ec 10             	sub    esp,0x10
c001736f:	89 e0                	mov    eax,esp
c0017371:	50                   	push   eax
c0017372:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017376:	50                   	push   eax
c0017377:	8d 44 24 10          	lea    eax,[esp+0x10]
c001737b:	50                   	push   eax
c001737c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017380:	50                   	push   eax
c0017381:	6a 07                	push   0x7
c0017383:	e8 bd fe ff ff       	call   c0017245 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017388:	83 c4 14             	add    esp,0x14
c001738b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001738f:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0017393:	0f 95 c0             	setne  al
c0017396:	83 c4 10             	add    esp,0x10
c0017399:	c3                   	ret    

c001739a <HalDetectFeatures()>:
c001739a:	57                   	push   edi
c001739b:	56                   	push   esi
c001739c:	53                   	push   ebx
c001739d:	81 ec 90 00 00 00    	sub    esp,0x90
c00173a3:	83 ec 04             	sub    esp,0x4
c00173a6:	6a 08                	push   0x8
c00173a8:	6a 00                	push   0x0
c00173aa:	68 8c d7 02 c0       	push   0xc002d78c
c00173af:	e8 3c 91 fe ff       	call   c00004f0 <memset>
c00173b4:	83 c4 10             	add    esp,0x10
c00173b7:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00173bc:	83 c8 04             	or     eax,0x4
c00173bf:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c00173c4:	e8 30 8e fe ff       	call   c00001f9 <detectCPUID>
c00173c9:	85 c0                	test   eax,eax
c00173cb:	0f 95 c0             	setne  al
c00173ce:	83 e0 01             	and    eax,0x1
c00173d1:	83 e0 01             	and    eax,0x1
c00173d4:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00173d7:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00173dc:	83 e0 fd             	and    eax,0xfffffffd
c00173df:	88 c2                	mov    dl,al
c00173e1:	88 c8                	mov    al,cl
c00173e3:	09 d0                	or     eax,edx
c00173e5:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c00173ea:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00173ef:	83 e0 02             	and    eax,0x2
c00173f2:	0f b6 c0             	movzx  eax,al
c00173f5:	85 c0                	test   eax,eax
c00173f7:	0f 84 7f 02 00 00    	je     c001767c <HalDetectFeatures()+0x2e2>
c00173fd:	83 ec 0c             	sub    esp,0xc
c0017400:	6a 20                	push   0x20
c0017402:	e8 dc fe ff ff       	call   c00172e3 <cpuidCheckEDX(unsigned int)>
c0017407:	83 c4 10             	add    esp,0x10
c001740a:	83 e0 01             	and    eax,0x1
c001740d:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017414:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017419:	83 e0 f7             	and    eax,0xfffffff7
c001741c:	88 c2                	mov    dl,al
c001741e:	88 c8                	mov    al,cl
c0017420:	09 d0                	or     eax,edx
c0017422:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017427:	83 ec 0c             	sub    esp,0xc
c001742a:	68 00 00 00 04       	push   0x4000000
c001742f:	e8 af fe ff ff       	call   c00172e3 <cpuidCheckEDX(unsigned int)>
c0017434:	83 c4 10             	add    esp,0x10
c0017437:	89 c1                	mov    ecx,eax
c0017439:	83 e1 01             	and    ecx,0x1
c001743c:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017441:	83 e0 fe             	and    eax,0xfffffffe
c0017444:	88 c2                	mov    dl,al
c0017446:	88 c8                	mov    al,cl
c0017448:	09 d0                	or     eax,edx
c001744a:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c001744f:	83 ec 0c             	sub    esp,0xc
c0017452:	68 80 00 00 00       	push   0x80
c0017457:	e8 87 fe ff ff       	call   c00172e3 <cpuidCheckEDX(unsigned int)>
c001745c:	83 c4 10             	add    esp,0x10
c001745f:	89 c1                	mov    ecx,eax
c0017461:	c1 e1 07             	shl    ecx,0x7
c0017464:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017469:	83 e0 7f             	and    eax,0x7f
c001746c:	88 c2                	mov    dl,al
c001746e:	88 c8                	mov    al,cl
c0017470:	09 d0                	or     eax,edx
c0017472:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c0017477:	83 ec 0c             	sub    esp,0xc
c001747a:	68 00 00 80 00       	push   0x800000
c001747f:	e8 5f fe ff ff       	call   c00172e3 <cpuidCheckEDX(unsigned int)>
c0017484:	83 c4 10             	add    esp,0x10
c0017487:	83 e0 01             	and    eax,0x1
c001748a:	89 c1                	mov    ecx,eax
c001748c:	c1 e1 05             	shl    ecx,0x5
c001748f:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017494:	83 e0 df             	and    eax,0xffffffdf
c0017497:	88 c2                	mov    dl,al
c0017499:	88 c8                	mov    al,cl
c001749b:	09 d0                	or     eax,edx
c001749d:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c00174a2:	a1 90 cd 02 c0       	mov    eax,ds:0xc002cd90
c00174a7:	83 e0 01             	and    eax,0x1
c00174aa:	75 0c                	jne    c00174b8 <HalDetectFeatures()+0x11e>
c00174ac:	a1 90 cd 02 c0       	mov    eax,ds:0xc002cd90
c00174b1:	25 00 04 00 00       	and    eax,0x400
c00174b6:	74 0f                	je     c00174c7 <HalDetectFeatures()+0x12d>
c00174b8:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00174bd:	83 e0 fe             	and    eax,0xfffffffe
c00174c0:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c00174c5:	eb 28                	jmp    c00174ef <HalDetectFeatures()+0x155>
c00174c7:	83 ec 0c             	sub    esp,0xc
c00174ca:	68 00 02 00 00       	push   0x200
c00174cf:	e8 0f fe ff ff       	call   c00172e3 <cpuidCheckEDX(unsigned int)>
c00174d4:	83 c4 10             	add    esp,0x10
c00174d7:	89 c1                	mov    ecx,eax
c00174d9:	83 e1 01             	and    ecx,0x1
c00174dc:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00174e1:	83 e0 fe             	and    eax,0xfffffffe
c00174e4:	88 c2                	mov    dl,al
c00174e6:	88 c8                	mov    al,cl
c00174e8:	09 d0                	or     eax,edx
c00174ea:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c00174ef:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00174f4:	83 e0 01             	and    eax,0x1
c00174f7:	0f b6 c0             	movzx  eax,al
c00174fa:	85 c0                	test   eax,eax
c00174fc:	74 1c                	je     c001751a <HalDetectFeatures()+0x180>
c00174fe:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017503:	83 e0 08             	and    eax,0x8
c0017506:	0f b6 c0             	movzx  eax,al
c0017509:	85 c0                	test   eax,eax
c001750b:	75 0d                	jne    c001751a <HalDetectFeatures()+0x180>
c001750d:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017512:	83 e0 fe             	and    eax,0xfffffffe
c0017515:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c001751a:	83 ec 0c             	sub    esp,0xc
c001751d:	68 7c 3a 02 c0       	push   0xc0023a7c
c0017522:	e8 27 fa fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017527:	83 c4 10             	add    esp,0x10
c001752a:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001752f:	83 e0 fe             	and    eax,0xfffffffe
c0017532:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017537:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c001753f:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0017547:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c001754f:	85 c0                	test   eax,eax
c0017551:	0f 84 ab 00 00 00    	je     c0017602 <HalDetectFeatures()+0x268>
c0017557:	83 ec 0c             	sub    esp,0xc
c001755a:	6a 01                	push   0x1
c001755c:	e8 af fd ff ff       	call   c0017310 <cpuidCheckECX(unsigned int)>
c0017561:	83 c4 10             	add    esp,0x10
c0017564:	83 e0 01             	and    eax,0x1
c0017567:	8d 0c 00             	lea    ecx,[eax+eax*1]
c001756a:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c001756f:	83 e0 fd             	and    eax,0xfffffffd
c0017572:	88 c2                	mov    dl,al
c0017574:	88 c8                	mov    al,cl
c0017576:	09 d0                	or     eax,edx
c0017578:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c001757d:	83 ec 0c             	sub    esp,0xc
c0017580:	68 00 02 00 00       	push   0x200
c0017585:	e8 86 fd ff ff       	call   c0017310 <cpuidCheckECX(unsigned int)>
c001758a:	83 c4 10             	add    esp,0x10
c001758d:	83 e0 01             	and    eax,0x1
c0017590:	89 c1                	mov    ecx,eax
c0017592:	c1 e1 04             	shl    ecx,0x4
c0017595:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c001759a:	83 e0 ef             	and    eax,0xffffffef
c001759d:	88 c2                	mov    dl,al
c001759f:	88 c8                	mov    al,cl
c00175a1:	09 d0                	or     eax,edx
c00175a3:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c00175a8:	83 ec 0c             	sub    esp,0xc
c00175ab:	68 00 00 08 00       	push   0x80000
c00175b0:	e8 5b fd ff ff       	call   c0017310 <cpuidCheckECX(unsigned int)>
c00175b5:	83 c4 10             	add    esp,0x10
c00175b8:	83 e0 01             	and    eax,0x1
c00175bb:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c00175c2:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c00175c7:	83 e0 fb             	and    eax,0xfffffffb
c00175ca:	88 c2                	mov    dl,al
c00175cc:	88 c8                	mov    al,cl
c00175ce:	09 d0                	or     eax,edx
c00175d0:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c00175d5:	83 ec 0c             	sub    esp,0xc
c00175d8:	68 00 00 10 00       	push   0x100000
c00175dd:	e8 2e fd ff ff       	call   c0017310 <cpuidCheckECX(unsigned int)>
c00175e2:	83 c4 10             	add    esp,0x10
c00175e5:	83 e0 01             	and    eax,0x1
c00175e8:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00175ef:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c00175f4:	83 e0 f7             	and    eax,0xfffffff7
c00175f7:	88 c2                	mov    dl,al
c00175f9:	88 c8                	mov    al,cl
c00175fb:	09 d0                	or     eax,edx
c00175fd:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c0017602:	83 ec 0c             	sub    esp,0xc
c0017605:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017609:	50                   	push   eax
c001760a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001760e:	50                   	push   eax
c001760f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0017613:	50                   	push   eax
c0017614:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017618:	50                   	push   eax
c0017619:	68 00 00 00 80       	push   0x80000000
c001761e:	e8 22 fc ff ff       	call   c0017245 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017623:	83 c4 20             	add    esp,0x20
c0017626:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001762a:	3d 00 00 00 80       	cmp    eax,0x80000000
c001762f:	76 4b                	jbe    c001767c <HalDetectFeatures()+0x2e2>
c0017631:	83 ec 0c             	sub    esp,0xc
c0017634:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017638:	50                   	push   eax
c0017639:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001763d:	50                   	push   eax
c001763e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0017642:	50                   	push   eax
c0017643:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017647:	50                   	push   eax
c0017648:	68 01 00 00 80       	push   0x80000001
c001764d:	e8 f3 fb ff ff       	call   c0017245 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017652:	83 c4 20             	add    esp,0x20
c0017655:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001765a:	83 e0 bf             	and    eax,0xffffffbf
c001765d:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017662:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c0017667:	83 e0 fd             	and    eax,0xfffffffd
c001766a:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c001766f:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c0017674:	83 e0 fe             	and    eax,0xfffffffe
c0017677:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c001767c:	a1 90 cd 02 c0       	mov    eax,ds:0xc002cd90
c0017681:	25 00 04 00 00       	and    eax,0x400
c0017686:	74 0d                	je     c0017695 <HalDetectFeatures()+0x2fb>
c0017688:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001768d:	83 e0 fb             	and    eax,0xfffffffb
c0017690:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017695:	c6 05 88 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d788,0x1
c001769c:	83 ec 04             	sub    esp,0x4
c001769f:	6a 0d                	push   0xd
c00176a1:	6a 00                	push   0x0
c00176a3:	68 70 d7 02 c0       	push   0xc002d770
c00176a8:	e8 43 8e fe ff       	call   c00004f0 <memset>
c00176ad:	83 c4 10             	add    esp,0x10
c00176b0:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00176b5:	83 e0 02             	and    eax,0x2
c00176b8:	0f b6 c0             	movzx  eax,al
c00176bb:	85 c0                	test   eax,eax
c00176bd:	0f 84 16 08 00 00    	je     c0017ed9 <HalDetectFeatures()+0xb3f>
c00176c3:	83 ec 0c             	sub    esp,0xc
c00176c6:	6a 10                	push   0x10
c00176c8:	e8 16 fc ff ff       	call   c00172e3 <cpuidCheckEDX(unsigned int)>
c00176cd:	83 c4 10             	add    esp,0x10
c00176d0:	83 e0 01             	and    eax,0x1
c00176d3:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00176da:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c00176df:	83 e0 f7             	and    eax,0xfffffff7
c00176e2:	88 c2                	mov    dl,al
c00176e4:	88 c8                	mov    al,cl
c00176e6:	09 d0                	or     eax,edx
c00176e8:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c00176ed:	83 ec 0c             	sub    esp,0xc
c00176f0:	6a 40                	push   0x40
c00176f2:	e8 ec fb ff ff       	call   c00172e3 <cpuidCheckEDX(unsigned int)>
c00176f7:	83 c4 10             	add    esp,0x10
c00176fa:	83 e0 01             	and    eax,0x1
c00176fd:	89 c1                	mov    ecx,eax
c00176ff:	c1 e1 04             	shl    ecx,0x4
c0017702:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c0017707:	83 e0 ef             	and    eax,0xffffffef
c001770a:	88 c2                	mov    dl,al
c001770c:	88 c8                	mov    al,cl
c001770e:	09 d0                	or     eax,edx
c0017710:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c0017715:	83 ec 0c             	sub    esp,0xc
c0017718:	6a 08                	push   0x8
c001771a:	e8 c4 fb ff ff       	call   c00172e3 <cpuidCheckEDX(unsigned int)>
c001771f:	83 c4 10             	add    esp,0x10
c0017722:	83 e0 01             	and    eax,0x1
c0017725:	89 c1                	mov    ecx,eax
c0017727:	c1 e1 05             	shl    ecx,0x5
c001772a:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c001772f:	83 e0 df             	and    eax,0xffffffdf
c0017732:	88 c2                	mov    dl,al
c0017734:	88 c8                	mov    al,cl
c0017736:	09 d0                	or     eax,edx
c0017738:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c001773d:	83 ec 0c             	sub    esp,0xc
c0017740:	68 00 20 00 00       	push   0x2000
c0017745:	e8 99 fb ff ff       	call   c00172e3 <cpuidCheckEDX(unsigned int)>
c001774a:	83 c4 10             	add    esp,0x10
c001774d:	83 e0 01             	and    eax,0x1
c0017750:	89 c1                	mov    ecx,eax
c0017752:	c1 e1 06             	shl    ecx,0x6
c0017755:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c001775a:	83 e0 bf             	and    eax,0xffffffbf
c001775d:	88 c2                	mov    dl,al
c001775f:	88 c8                	mov    al,cl
c0017761:	09 d0                	or     eax,edx
c0017763:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c0017768:	83 ec 0c             	sub    esp,0xc
c001776b:	68 00 00 01 00       	push   0x10000
c0017770:	e8 6e fb ff ff       	call   c00172e3 <cpuidCheckEDX(unsigned int)>
c0017775:	83 c4 10             	add    esp,0x10
c0017778:	89 c1                	mov    ecx,eax
c001777a:	c1 e1 07             	shl    ecx,0x7
c001777d:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c0017782:	83 e0 7f             	and    eax,0x7f
c0017785:	88 c2                	mov    dl,al
c0017787:	88 c8                	mov    al,cl
c0017789:	09 d0                	or     eax,edx
c001778b:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c0017790:	83 ec 0c             	sub    esp,0xc
c0017793:	6a 01                	push   0x1
c0017795:	e8 49 fb ff ff       	call   c00172e3 <cpuidCheckEDX(unsigned int)>
c001779a:	83 c4 10             	add    esp,0x10
c001779d:	83 e0 01             	and    eax,0x1
c00177a0:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00177a7:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c00177ac:	83 e0 f7             	and    eax,0xfffffff7
c00177af:	88 c2                	mov    dl,al
c00177b1:	88 c8                	mov    al,cl
c00177b3:	09 d0                	or     eax,edx
c00177b5:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c00177ba:	83 ec 0c             	sub    esp,0xc
c00177bd:	68 00 08 00 00       	push   0x800
c00177c2:	e8 1c fb ff ff       	call   c00172e3 <cpuidCheckEDX(unsigned int)>
c00177c7:	83 c4 10             	add    esp,0x10
c00177ca:	89 c1                	mov    ecx,eax
c00177cc:	83 e1 01             	and    ecx,0x1
c00177cf:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c00177d4:	83 e0 fe             	and    eax,0xfffffffe
c00177d7:	88 c2                	mov    dl,al
c00177d9:	88 c8                	mov    al,cl
c00177db:	09 d0                	or     eax,edx
c00177dd:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c00177e2:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c00177e7:	83 e0 40             	and    eax,0x40
c00177ea:	0f b6 c0             	movzx  eax,al
c00177ed:	85 c0                	test   eax,eax
c00177ef:	74 0a                	je     c00177fb <HalDetectFeatures()+0x461>
c00177f1:	c7 05 68 d7 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002d768,0x100
c00177fb:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c0017800:	83 e0 80             	and    eax,0xffffff80
c0017803:	0f b6 c0             	movzx  eax,al
c0017806:	85 c0                	test   eax,eax
c0017808:	74 0a                	je     c0017814 <HalDetectFeatures()+0x47a>
c001780a:	c7 05 64 d7 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002d764,0x80
c0017814:	83 ec 0c             	sub    esp,0xc
c0017817:	8d 44 24 14          	lea    eax,[esp+0x14]
c001781b:	50                   	push   eax
c001781c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017820:	50                   	push   eax
c0017821:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017825:	50                   	push   eax
c0017826:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001782a:	50                   	push   eax
c001782b:	6a 00                	push   0x0
c001782d:	e8 13 fa ff ff       	call   c0017245 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017832:	83 c4 20             	add    esp,0x20
c0017835:	c7 44 24 48 70 d7 02 c0 	mov    DWORD PTR [esp+0x48],0xc002d770
c001783d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017841:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017845:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c001784d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017851:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017855:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017859:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001785d:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0017861:	89 c6                	mov    esi,eax
c0017863:	89 d7                	mov    edi,edx
c0017865:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017867:	89 c8                	mov    eax,ecx
c0017869:	89 fa                	mov    edx,edi
c001786b:	89 f3                	mov    ebx,esi
c001786d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0017871:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017875:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017879:	b8 74 d7 02 c0       	mov    eax,0xc002d774
c001787e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0017882:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017886:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001788a:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c0017892:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0017896:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001789a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001789e:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00178a2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c00178a6:	89 c6                	mov    esi,eax
c00178a8:	89 d7                	mov    edi,edx
c00178aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00178ac:	89 c8                	mov    eax,ecx
c00178ae:	89 fa                	mov    edx,edi
c00178b0:	89 f3                	mov    ebx,esi
c00178b2:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c00178b6:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c00178ba:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00178be:	b8 78 d7 02 c0       	mov    eax,0xc002d778
c00178c3:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00178ca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178ce:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c00178d2:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c00178da:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00178e1:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00178e5:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00178e9:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00178f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c00178f4:	89 c6                	mov    esi,eax
c00178f6:	89 d7                	mov    edi,edx
c00178f8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00178fa:	89 c8                	mov    eax,ecx
c00178fc:	89 fa                	mov    edx,edi
c00178fe:	89 f3                	mov    ebx,esi
c0017900:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c0017904:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c0017908:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c001790c:	83 ec 08             	sub    esp,0x8
c001790f:	68 8e 3a 02 c0       	push   0xc0023a8e
c0017914:	68 70 d7 02 c0       	push   0xc002d770
c0017919:	e8 62 8e fe ff       	call   c0000780 <strcmp>
c001791e:	83 c4 10             	add    esp,0x10
c0017921:	85 c0                	test   eax,eax
c0017923:	74 19                	je     c001793e <HalDetectFeatures()+0x5a4>
c0017925:	83 ec 08             	sub    esp,0x8
c0017928:	68 9b 3a 02 c0       	push   0xc0023a9b
c001792d:	68 70 d7 02 c0       	push   0xc002d770
c0017932:	e8 49 8e fe ff       	call   c0000780 <strcmp>
c0017937:	83 c4 10             	add    esp,0x10
c001793a:	85 c0                	test   eax,eax
c001793c:	75 04                	jne    c0017942 <HalDetectFeatures()+0x5a8>
c001793e:	b0 01                	mov    al,0x1
c0017940:	eb 02                	jmp    c0017944 <HalDetectFeatures()+0x5aa>
c0017942:	b0 00                	mov    al,0x0
c0017944:	0f b6 c0             	movzx  eax,al
c0017947:	85 c0                	test   eax,eax
c0017949:	74 0f                	je     c001795a <HalDetectFeatures()+0x5c0>
c001794b:	c7 05 84 d7 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x2
c0017955:	e9 0d 03 00 00       	jmp    c0017c67 <HalDetectFeatures()+0x8cd>
c001795a:	83 ec 08             	sub    esp,0x8
c001795d:	68 a8 3a 02 c0       	push   0xc0023aa8
c0017962:	68 70 d7 02 c0       	push   0xc002d770
c0017967:	e8 14 8e fe ff       	call   c0000780 <strcmp>
c001796c:	83 c4 10             	add    esp,0x10
c001796f:	85 c0                	test   eax,eax
c0017971:	74 19                	je     c001798c <HalDetectFeatures()+0x5f2>
c0017973:	83 ec 08             	sub    esp,0x8
c0017976:	68 b5 3a 02 c0       	push   0xc0023ab5
c001797b:	68 70 d7 02 c0       	push   0xc002d770
c0017980:	e8 fb 8d fe ff       	call   c0000780 <strcmp>
c0017985:	83 c4 10             	add    esp,0x10
c0017988:	85 c0                	test   eax,eax
c001798a:	75 04                	jne    c0017990 <HalDetectFeatures()+0x5f6>
c001798c:	b0 01                	mov    al,0x1
c001798e:	eb 02                	jmp    c0017992 <HalDetectFeatures()+0x5f8>
c0017990:	b0 00                	mov    al,0x0
c0017992:	0f b6 c0             	movzx  eax,al
c0017995:	85 c0                	test   eax,eax
c0017997:	74 0f                	je     c00179a8 <HalDetectFeatures()+0x60e>
c0017999:	c7 05 84 d7 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x4
c00179a3:	e9 bf 02 00 00       	jmp    c0017c67 <HalDetectFeatures()+0x8cd>
c00179a8:	83 ec 08             	sub    esp,0x8
c00179ab:	68 c2 3a 02 c0       	push   0xc0023ac2
c00179b0:	68 70 d7 02 c0       	push   0xc002d770
c00179b5:	e8 c6 8d fe ff       	call   c0000780 <strcmp>
c00179ba:	83 c4 10             	add    esp,0x10
c00179bd:	85 c0                	test   eax,eax
c00179bf:	74 19                	je     c00179da <HalDetectFeatures()+0x640>
c00179c1:	83 ec 08             	sub    esp,0x8
c00179c4:	68 cf 3a 02 c0       	push   0xc0023acf
c00179c9:	68 70 d7 02 c0       	push   0xc002d770
c00179ce:	e8 ad 8d fe ff       	call   c0000780 <strcmp>
c00179d3:	83 c4 10             	add    esp,0x10
c00179d6:	85 c0                	test   eax,eax
c00179d8:	75 04                	jne    c00179de <HalDetectFeatures()+0x644>
c00179da:	b0 01                	mov    al,0x1
c00179dc:	eb 02                	jmp    c00179e0 <HalDetectFeatures()+0x646>
c00179de:	b0 00                	mov    al,0x0
c00179e0:	0f b6 c0             	movzx  eax,al
c00179e3:	85 c0                	test   eax,eax
c00179e5:	74 0f                	je     c00179f6 <HalDetectFeatures()+0x65c>
c00179e7:	c7 05 84 d7 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x5
c00179f1:	e9 71 02 00 00       	jmp    c0017c67 <HalDetectFeatures()+0x8cd>
c00179f6:	83 ec 08             	sub    esp,0x8
c00179f9:	68 dc 3a 02 c0       	push   0xc0023adc
c00179fe:	68 70 d7 02 c0       	push   0xc002d770
c0017a03:	e8 78 8d fe ff       	call   c0000780 <strcmp>
c0017a08:	83 c4 10             	add    esp,0x10
c0017a0b:	85 c0                	test   eax,eax
c0017a0d:	0f 94 c0             	sete   al
c0017a10:	0f b6 c0             	movzx  eax,al
c0017a13:	85 c0                	test   eax,eax
c0017a15:	74 0f                	je     c0017a26 <HalDetectFeatures()+0x68c>
c0017a17:	c7 05 84 d7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x1
c0017a21:	e9 41 02 00 00       	jmp    c0017c67 <HalDetectFeatures()+0x8cd>
c0017a26:	83 ec 08             	sub    esp,0x8
c0017a29:	68 e9 3a 02 c0       	push   0xc0023ae9
c0017a2e:	68 70 d7 02 c0       	push   0xc002d770
c0017a33:	e8 48 8d fe ff       	call   c0000780 <strcmp>
c0017a38:	83 c4 10             	add    esp,0x10
c0017a3b:	85 c0                	test   eax,eax
c0017a3d:	0f 94 c0             	sete   al
c0017a40:	0f b6 c0             	movzx  eax,al
c0017a43:	85 c0                	test   eax,eax
c0017a45:	74 0f                	je     c0017a56 <HalDetectFeatures()+0x6bc>
c0017a47:	c7 05 84 d7 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x3
c0017a51:	e9 11 02 00 00       	jmp    c0017c67 <HalDetectFeatures()+0x8cd>
c0017a56:	83 ec 08             	sub    esp,0x8
c0017a59:	68 a8 3a 02 c0       	push   0xc0023aa8
c0017a5e:	68 70 d7 02 c0       	push   0xc002d770
c0017a63:	e8 18 8d fe ff       	call   c0000780 <strcmp>
c0017a68:	83 c4 10             	add    esp,0x10
c0017a6b:	85 c0                	test   eax,eax
c0017a6d:	0f 94 c0             	sete   al
c0017a70:	0f b6 c0             	movzx  eax,al
c0017a73:	85 c0                	test   eax,eax
c0017a75:	74 0f                	je     c0017a86 <HalDetectFeatures()+0x6ec>
c0017a77:	c7 05 84 d7 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x6
c0017a81:	e9 e1 01 00 00       	jmp    c0017c67 <HalDetectFeatures()+0x8cd>
c0017a86:	83 ec 08             	sub    esp,0x8
c0017a89:	68 f6 3a 02 c0       	push   0xc0023af6
c0017a8e:	68 70 d7 02 c0       	push   0xc002d770
c0017a93:	e8 e8 8c fe ff       	call   c0000780 <strcmp>
c0017a98:	83 c4 10             	add    esp,0x10
c0017a9b:	85 c0                	test   eax,eax
c0017a9d:	0f 94 c0             	sete   al
c0017aa0:	0f b6 c0             	movzx  eax,al
c0017aa3:	85 c0                	test   eax,eax
c0017aa5:	74 0f                	je     c0017ab6 <HalDetectFeatures()+0x71c>
c0017aa7:	c7 05 84 d7 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x7
c0017ab1:	e9 b1 01 00 00       	jmp    c0017c67 <HalDetectFeatures()+0x8cd>
c0017ab6:	83 ec 08             	sub    esp,0x8
c0017ab9:	68 03 3b 02 c0       	push   0xc0023b03
c0017abe:	68 70 d7 02 c0       	push   0xc002d770
c0017ac3:	e8 b8 8c fe ff       	call   c0000780 <strcmp>
c0017ac8:	83 c4 10             	add    esp,0x10
c0017acb:	85 c0                	test   eax,eax
c0017acd:	0f 94 c0             	sete   al
c0017ad0:	0f b6 c0             	movzx  eax,al
c0017ad3:	85 c0                	test   eax,eax
c0017ad5:	74 0f                	je     c0017ae6 <HalDetectFeatures()+0x74c>
c0017ad7:	c7 05 84 d7 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x8
c0017ae1:	e9 81 01 00 00       	jmp    c0017c67 <HalDetectFeatures()+0x8cd>
c0017ae6:	83 ec 08             	sub    esp,0x8
c0017ae9:	68 10 3b 02 c0       	push   0xc0023b10
c0017aee:	68 70 d7 02 c0       	push   0xc002d770
c0017af3:	e8 88 8c fe ff       	call   c0000780 <strcmp>
c0017af8:	83 c4 10             	add    esp,0x10
c0017afb:	85 c0                	test   eax,eax
c0017afd:	0f 94 c0             	sete   al
c0017b00:	0f b6 c0             	movzx  eax,al
c0017b03:	85 c0                	test   eax,eax
c0017b05:	74 0f                	je     c0017b16 <HalDetectFeatures()+0x77c>
c0017b07:	c7 05 84 d7 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x9
c0017b11:	e9 51 01 00 00       	jmp    c0017c67 <HalDetectFeatures()+0x8cd>
c0017b16:	83 ec 08             	sub    esp,0x8
c0017b19:	68 1d 3b 02 c0       	push   0xc0023b1d
c0017b1e:	68 70 d7 02 c0       	push   0xc002d770
c0017b23:	e8 58 8c fe ff       	call   c0000780 <strcmp>
c0017b28:	83 c4 10             	add    esp,0x10
c0017b2b:	85 c0                	test   eax,eax
c0017b2d:	0f 94 c0             	sete   al
c0017b30:	0f b6 c0             	movzx  eax,al
c0017b33:	85 c0                	test   eax,eax
c0017b35:	74 0f                	je     c0017b46 <HalDetectFeatures()+0x7ac>
c0017b37:	c7 05 84 d7 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xa
c0017b41:	e9 21 01 00 00       	jmp    c0017c67 <HalDetectFeatures()+0x8cd>
c0017b46:	83 ec 08             	sub    esp,0x8
c0017b49:	68 2a 3b 02 c0       	push   0xc0023b2a
c0017b4e:	68 70 d7 02 c0       	push   0xc002d770
c0017b53:	e8 28 8c fe ff       	call   c0000780 <strcmp>
c0017b58:	83 c4 10             	add    esp,0x10
c0017b5b:	85 c0                	test   eax,eax
c0017b5d:	0f 94 c0             	sete   al
c0017b60:	0f b6 c0             	movzx  eax,al
c0017b63:	85 c0                	test   eax,eax
c0017b65:	74 0f                	je     c0017b76 <HalDetectFeatures()+0x7dc>
c0017b67:	c7 05 84 d7 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xb
c0017b71:	e9 f1 00 00 00       	jmp    c0017c67 <HalDetectFeatures()+0x8cd>
c0017b76:	83 ec 08             	sub    esp,0x8
c0017b79:	68 37 3b 02 c0       	push   0xc0023b37
c0017b7e:	68 70 d7 02 c0       	push   0xc002d770
c0017b83:	e8 f8 8b fe ff       	call   c0000780 <strcmp>
c0017b88:	83 c4 10             	add    esp,0x10
c0017b8b:	85 c0                	test   eax,eax
c0017b8d:	0f 94 c0             	sete   al
c0017b90:	0f b6 c0             	movzx  eax,al
c0017b93:	85 c0                	test   eax,eax
c0017b95:	74 0f                	je     c0017ba6 <HalDetectFeatures()+0x80c>
c0017b97:	c7 05 84 d7 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xc
c0017ba1:	e9 c1 00 00 00       	jmp    c0017c67 <HalDetectFeatures()+0x8cd>
c0017ba6:	83 ec 08             	sub    esp,0x8
c0017ba9:	68 44 3b 02 c0       	push   0xc0023b44
c0017bae:	68 70 d7 02 c0       	push   0xc002d770
c0017bb3:	e8 c8 8b fe ff       	call   c0000780 <strcmp>
c0017bb8:	83 c4 10             	add    esp,0x10
c0017bbb:	85 c0                	test   eax,eax
c0017bbd:	0f 94 c0             	sete   al
c0017bc0:	0f b6 c0             	movzx  eax,al
c0017bc3:	85 c0                	test   eax,eax
c0017bc5:	74 0f                	je     c0017bd6 <HalDetectFeatures()+0x83c>
c0017bc7:	c7 05 84 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xd
c0017bd1:	e9 91 00 00 00       	jmp    c0017c67 <HalDetectFeatures()+0x8cd>
c0017bd6:	83 ec 08             	sub    esp,0x8
c0017bd9:	68 51 3b 02 c0       	push   0xc0023b51
c0017bde:	68 70 d7 02 c0       	push   0xc002d770
c0017be3:	e8 98 8b fe ff       	call   c0000780 <strcmp>
c0017be8:	83 c4 10             	add    esp,0x10
c0017beb:	85 c0                	test   eax,eax
c0017bed:	0f 94 c0             	sete   al
c0017bf0:	0f b6 c0             	movzx  eax,al
c0017bf3:	85 c0                	test   eax,eax
c0017bf5:	74 0c                	je     c0017c03 <HalDetectFeatures()+0x869>
c0017bf7:	c7 05 84 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xd
c0017c01:	eb 64                	jmp    c0017c67 <HalDetectFeatures()+0x8cd>
c0017c03:	83 ec 08             	sub    esp,0x8
c0017c06:	68 5e 3b 02 c0       	push   0xc0023b5e
c0017c0b:	68 70 d7 02 c0       	push   0xc002d770
c0017c10:	e8 6b 8b fe ff       	call   c0000780 <strcmp>
c0017c15:	83 c4 10             	add    esp,0x10
c0017c18:	85 c0                	test   eax,eax
c0017c1a:	0f 94 c0             	sete   al
c0017c1d:	0f b6 c0             	movzx  eax,al
c0017c20:	85 c0                	test   eax,eax
c0017c22:	74 0c                	je     c0017c30 <HalDetectFeatures()+0x896>
c0017c24:	c7 05 84 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xd
c0017c2e:	eb 37                	jmp    c0017c67 <HalDetectFeatures()+0x8cd>
c0017c30:	83 ec 08             	sub    esp,0x8
c0017c33:	68 6b 3b 02 c0       	push   0xc0023b6b
c0017c38:	68 70 d7 02 c0       	push   0xc002d770
c0017c3d:	e8 3e 8b fe ff       	call   c0000780 <strcmp>
c0017c42:	83 c4 10             	add    esp,0x10
c0017c45:	85 c0                	test   eax,eax
c0017c47:	0f 94 c0             	sete   al
c0017c4a:	0f b6 c0             	movzx  eax,al
c0017c4d:	85 c0                	test   eax,eax
c0017c4f:	74 0c                	je     c0017c5d <HalDetectFeatures()+0x8c3>
c0017c51:	c7 05 84 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xd
c0017c5b:	eb 0a                	jmp    c0017c67 <HalDetectFeatures()+0x8cd>
c0017c5d:	c7 05 84 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x0
c0017c67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c6b:	83 f8 06             	cmp    eax,0x6
c0017c6e:	0f 86 cc 00 00 00    	jbe    c0017d40 <HalDetectFeatures()+0x9a6>
c0017c74:	83 ec 0c             	sub    esp,0xc
c0017c77:	68 80 00 00 00       	push   0x80
c0017c7c:	e8 bd f6 ff ff       	call   c001733e <cpuidCheckExtendedEBX(unsigned int)>
c0017c81:	83 c4 10             	add    esp,0x10
c0017c84:	89 c1                	mov    ecx,eax
c0017c86:	83 e1 01             	and    ecx,0x1
c0017c89:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017c8e:	83 e0 fe             	and    eax,0xfffffffe
c0017c91:	88 c2                	mov    dl,al
c0017c93:	88 c8                	mov    al,cl
c0017c95:	09 d0                	or     eax,edx
c0017c97:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017c9c:	83 ec 0c             	sub    esp,0xc
c0017c9f:	68 00 00 10 00       	push   0x100000
c0017ca4:	e8 95 f6 ff ff       	call   c001733e <cpuidCheckExtendedEBX(unsigned int)>
c0017ca9:	83 c4 10             	add    esp,0x10
c0017cac:	83 e0 01             	and    eax,0x1
c0017caf:	89 c1                	mov    ecx,eax
c0017cb1:	c1 e1 06             	shl    ecx,0x6
c0017cb4:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017cb9:	83 e0 bf             	and    eax,0xffffffbf
c0017cbc:	88 c2                	mov    dl,al
c0017cbe:	88 c8                	mov    al,cl
c0017cc0:	09 d0                	or     eax,edx
c0017cc2:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017cc7:	83 ec 0c             	sub    esp,0xc
c0017cca:	68 00 00 04 00       	push   0x40000
c0017ccf:	e8 6a f6 ff ff       	call   c001733e <cpuidCheckExtendedEBX(unsigned int)>
c0017cd4:	83 c4 10             	add    esp,0x10
c0017cd7:	83 e0 01             	and    eax,0x1
c0017cda:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0017cdd:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017ce2:	83 e0 fd             	and    eax,0xfffffffd
c0017ce5:	88 c2                	mov    dl,al
c0017ce7:	88 c8                	mov    al,cl
c0017ce9:	09 d0                	or     eax,edx
c0017ceb:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017cf0:	83 ec 0c             	sub    esp,0xc
c0017cf3:	6a 04                	push   0x4
c0017cf5:	e8 72 f6 ff ff       	call   c001736c <cpuidCheckExtendedECX(unsigned int)>
c0017cfa:	83 c4 10             	add    esp,0x10
c0017cfd:	83 e0 01             	and    eax,0x1
c0017d00:	89 c1                	mov    ecx,eax
c0017d02:	c1 e1 05             	shl    ecx,0x5
c0017d05:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017d0a:	83 e0 df             	and    eax,0xffffffdf
c0017d0d:	88 c2                	mov    dl,al
c0017d0f:	88 c8                	mov    al,cl
c0017d11:	09 d0                	or     eax,edx
c0017d13:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017d18:	83 ec 0c             	sub    esp,0xc
c0017d1b:	6a 20                	push   0x20
c0017d1d:	e8 4a f6 ff ff       	call   c001736c <cpuidCheckExtendedECX(unsigned int)>
c0017d22:	83 c4 10             	add    esp,0x10
c0017d25:	83 e0 01             	and    eax,0x1
c0017d28:	89 c1                	mov    ecx,eax
c0017d2a:	c1 e1 04             	shl    ecx,0x4
c0017d2d:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017d32:	83 e0 ef             	and    eax,0xffffffef
c0017d35:	88 c2                	mov    dl,al
c0017d37:	88 c8                	mov    al,cl
c0017d39:	09 d0                	or     eax,edx
c0017d3b:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017d40:	83 ec 0c             	sub    esp,0xc
c0017d43:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017d47:	50                   	push   eax
c0017d48:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017d4c:	50                   	push   eax
c0017d4d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017d51:	50                   	push   eax
c0017d52:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017d56:	50                   	push   eax
c0017d57:	6a 01                	push   0x1
c0017d59:	e8 e7 f4 ff ff       	call   c0017245 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017d5e:	83 c4 20             	add    esp,0x20
c0017d61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d65:	83 e0 0f             	and    eax,0xf
c0017d68:	a2 80 d7 02 c0       	mov    ds:0xc002d780,al
c0017d6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d71:	c1 e8 04             	shr    eax,0x4
c0017d74:	83 e0 0f             	and    eax,0xf
c0017d77:	a2 7e d7 02 c0       	mov    ds:0xc002d77e,al
c0017d7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d80:	c1 e8 08             	shr    eax,0x8
c0017d83:	83 e0 0f             	and    eax,0xf
c0017d86:	a2 7d d7 02 c0       	mov    ds:0xc002d77d,al
c0017d8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d8f:	c1 e8 0c             	shr    eax,0xc
c0017d92:	83 e0 03             	and    eax,0x3
c0017d95:	a2 7f d7 02 c0       	mov    ds:0xc002d77f,al
c0017d9a:	a0 7d d7 02 c0       	mov    al,ds:0xc002d77d
c0017d9f:	0f b6 c0             	movzx  eax,al
c0017da2:	83 f8 06             	cmp    eax,0x6
c0017da5:	74 0d                	je     c0017db4 <HalDetectFeatures()+0xa1a>
c0017da7:	a0 7d d7 02 c0       	mov    al,ds:0xc002d77d
c0017dac:	0f b6 c0             	movzx  eax,al
c0017daf:	83 f8 0f             	cmp    eax,0xf
c0017db2:	75 18                	jne    c0017dcc <HalDetectFeatures()+0xa32>
c0017db4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017db8:	c1 e8 10             	shr    eax,0x10
c0017dbb:	c1 e0 04             	shl    eax,0x4
c0017dbe:	88 c2                	mov    dl,al
c0017dc0:	a0 7e d7 02 c0       	mov    al,ds:0xc002d77e
c0017dc5:	09 d0                	or     eax,edx
c0017dc7:	a2 7e d7 02 c0       	mov    ds:0xc002d77e,al
c0017dcc:	a0 7d d7 02 c0       	mov    al,ds:0xc002d77d
c0017dd1:	0f b6 c0             	movzx  eax,al
c0017dd4:	83 f8 0f             	cmp    eax,0xf
c0017dd7:	75 15                	jne    c0017dee <HalDetectFeatures()+0xa54>
c0017dd9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ddd:	c1 e8 14             	shr    eax,0x14
c0017de0:	88 c2                	mov    dl,al
c0017de2:	a0 7d d7 02 c0       	mov    al,ds:0xc002d77d
c0017de7:	01 d0                	add    eax,edx
c0017de9:	a2 7d d7 02 c0       	mov    ds:0xc002d77d,al
c0017dee:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c0017df6:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c0017dfe:	85 c0                	test   eax,eax
c0017e00:	74 2d                	je     c0017e2f <HalDetectFeatures()+0xa95>
c0017e02:	83 ec 0c             	sub    esp,0xc
c0017e05:	68 00 00 00 40       	push   0x40000000
c0017e0a:	e8 01 f5 ff ff       	call   c0017310 <cpuidCheckECX(unsigned int)>
c0017e0f:	83 c4 10             	add    esp,0x10
c0017e12:	83 e0 01             	and    eax,0x1
c0017e15:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0017e1c:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c0017e21:	83 e0 fb             	and    eax,0xfffffffb
c0017e24:	88 c2                	mov    dl,al
c0017e26:	88 c8                	mov    al,cl
c0017e28:	09 d0                	or     eax,edx
c0017e2a:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c0017e2f:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017e34:	83 c8 04             	or     eax,0x4
c0017e37:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017e3c:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017e41:	83 c8 08             	or     eax,0x8
c0017e44:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017e49:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017e4e:	83 c8 10             	or     eax,0x10
c0017e51:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017e56:	83 ec 0c             	sub    esp,0xc
c0017e59:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017e5d:	50                   	push   eax
c0017e5e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017e62:	50                   	push   eax
c0017e63:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017e67:	50                   	push   eax
c0017e68:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017e6c:	50                   	push   eax
c0017e6d:	68 00 00 00 80       	push   0x80000000
c0017e72:	e8 ce f3 ff ff       	call   c0017245 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017e77:	83 c4 20             	add    esp,0x20
c0017e7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e7e:	3d 00 00 00 80       	cmp    eax,0x80000000
c0017e83:	0f 86 96 01 00 00    	jbe    c001801f <HalDetectFeatures()+0xc85>
c0017e89:	83 ec 0c             	sub    esp,0xc
c0017e8c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017e90:	50                   	push   eax
c0017e91:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017e95:	50                   	push   eax
c0017e96:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017e9a:	50                   	push   eax
c0017e9b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017e9f:	50                   	push   eax
c0017ea0:	68 01 00 00 80       	push   0x80000001
c0017ea5:	e8 9b f3 ff ff       	call   c0017245 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017eaa:	83 c4 20             	add    esp,0x20
c0017ead:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017eb2:	83 e0 7f             	and    eax,0x7f
c0017eb5:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017eba:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017ebf:	83 e0 fb             	and    eax,0xfffffffb
c0017ec2:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017ec7:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017ecc:	83 e0 fd             	and    eax,0xfffffffd
c0017ecf:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017ed4:	e9 46 01 00 00       	jmp    c001801f <HalDetectFeatures()+0xc85>
c0017ed9:	83 ec 08             	sub    esp,0x8
c0017edc:	68 dc 3a 02 c0       	push   0xc0023adc
c0017ee1:	68 70 d7 02 c0       	push   0xc002d770
c0017ee6:	e8 65 87 fe ff       	call   c0000650 <strcpy>
c0017eeb:	83 c4 10             	add    esp,0x10
c0017eee:	c7 05 84 d7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x1
c0017ef8:	e8 c6 82 fe ff       	call   c00001c3 <is486>
c0017efd:	85 c0                	test   eax,eax
c0017eff:	0f 95 c0             	setne  al
c0017f02:	0f b6 c0             	movzx  eax,al
c0017f05:	85 c0                	test   eax,eax
c0017f07:	0f 84 8d 00 00 00    	je     c0017f9a <HalDetectFeatures()+0xc00>
c0017f0d:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017f12:	83 c8 04             	or     eax,0x4
c0017f15:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017f1a:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017f1f:	83 c8 08             	or     eax,0x8
c0017f22:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017f27:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017f2c:	83 c8 10             	or     eax,0x10
c0017f2f:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017f34:	0f 20 c0             	mov    eax,cr0
c0017f37:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017f3b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f3f:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0017f46:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0017f4d:	83 e0 04             	and    eax,0x4
c0017f50:	74 1e                	je     c0017f70 <HalDetectFeatures()+0xbd6>
c0017f52:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0017f59:	83 e0 10             	and    eax,0x10
c0017f5c:	75 12                	jne    c0017f70 <HalDetectFeatures()+0xbd6>
c0017f5e:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017f63:	83 e0 f7             	and    eax,0xfffffff7
c0017f66:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017f6b:	e9 af 00 00 00       	jmp    c001801f <HalDetectFeatures()+0xc85>
c0017f70:	e8 29 82 fe ff       	call   c000019e <hasLegacyFPU>
c0017f75:	83 e0 01             	and    eax,0x1
c0017f78:	83 e0 01             	and    eax,0x1
c0017f7b:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017f82:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017f87:	83 e0 f7             	and    eax,0xfffffff7
c0017f8a:	88 c2                	mov    dl,al
c0017f8c:	88 c8                	mov    al,cl
c0017f8e:	09 d0                	or     eax,edx
c0017f90:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017f95:	e9 85 00 00 00       	jmp    c001801f <HalDetectFeatures()+0xc85>
c0017f9a:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017f9f:	83 e0 fb             	and    eax,0xfffffffb
c0017fa2:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017fa7:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017fac:	83 e0 f7             	and    eax,0xfffffff7
c0017faf:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017fb4:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017fb9:	83 e0 ef             	and    eax,0xffffffef
c0017fbc:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017fc1:	0f 20 c0             	mov    eax,cr0
c0017fc4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017fc8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fcc:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0017fd3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0017fda:	83 e0 04             	and    eax,0x4
c0017fdd:	74 1b                	je     c0017ffa <HalDetectFeatures()+0xc60>
c0017fdf:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0017fe6:	83 e0 10             	and    eax,0x10
c0017fe9:	75 0f                	jne    c0017ffa <HalDetectFeatures()+0xc60>
c0017feb:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017ff0:	83 e0 f7             	and    eax,0xfffffff7
c0017ff3:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017ff8:	eb 25                	jmp    c001801f <HalDetectFeatures()+0xc85>
c0017ffa:	e8 9f 81 fe ff       	call   c000019e <hasLegacyFPU>
c0017fff:	83 e0 01             	and    eax,0x1
c0018002:	83 e0 01             	and    eax,0x1
c0018005:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001800c:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0018011:	83 e0 f7             	and    eax,0xfffffff7
c0018014:	88 c2                	mov    dl,al
c0018016:	88 c8                	mov    al,cl
c0018018:	09 d0                	or     eax,edx
c001801a:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c001801f:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0018024:	83 e0 08             	and    eax,0x8
c0018027:	0f b6 c0             	movzx  eax,al
c001802a:	85 c0                	test   eax,eax
c001802c:	75 25                	jne    c0018053 <HalDetectFeatures()+0xcb9>
c001802e:	e8 6b 81 fe ff       	call   c000019e <hasLegacyFPU>
c0018033:	83 e0 01             	and    eax,0x1
c0018036:	83 e0 01             	and    eax,0x1
c0018039:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018040:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0018045:	83 e0 f7             	and    eax,0xfffffff7
c0018048:	88 c2                	mov    dl,al
c001804a:	88 c8                	mov    al,cl
c001804c:	09 d0                	or     eax,edx
c001804e:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0018053:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0018058:	83 e0 08             	and    eax,0x8
c001805b:	0f b6 c0             	movzx  eax,al
c001805e:	85 c0                	test   eax,eax
c0018060:	74 0d                	je     c001806f <HalDetectFeatures()+0xcd5>
c0018062:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0018067:	83 c8 10             	or     eax,0x10
c001806a:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c001806f:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0018074:	83 e0 10             	and    eax,0x10
c0018077:	0f b6 c0             	movzx  eax,al
c001807a:	85 c0                	test   eax,eax
c001807c:	75 23                	jne    c00180a1 <HalDetectFeatures()+0xd07>
c001807e:	e8 a3 7f 00 00       	call   c0020026 <x87Detect>
c0018083:	83 e0 01             	and    eax,0x1
c0018086:	83 e0 01             	and    eax,0x1
c0018089:	89 c1                	mov    ecx,eax
c001808b:	c1 e1 04             	shl    ecx,0x4
c001808e:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0018093:	83 e0 ef             	and    eax,0xffffffef
c0018096:	88 c2                	mov    dl,al
c0018098:	88 c8                	mov    al,cl
c001809a:	09 d0                	or     eax,edx
c001809c:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c00180a1:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c00180a6:	83 e0 01             	and    eax,0x1
c00180a9:	0f b6 c0             	movzx  eax,al
c00180ac:	85 c0                	test   eax,eax
c00180ae:	75 2d                	jne    c00180dd <HalDetectFeatures()+0xd43>
c00180b0:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c00180b5:	83 e0 02             	and    eax,0x2
c00180b8:	0f b6 c0             	movzx  eax,al
c00180bb:	85 c0                	test   eax,eax
c00180bd:	75 1e                	jne    c00180dd <HalDetectFeatures()+0xd43>
c00180bf:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c00180c4:	83 e0 04             	and    eax,0x4
c00180c7:	0f b6 c0             	movzx  eax,al
c00180ca:	85 c0                	test   eax,eax
c00180cc:	75 0f                	jne    c00180dd <HalDetectFeatures()+0xd43>
c00180ce:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c00180d3:	83 e0 08             	and    eax,0x8
c00180d6:	0f b6 c0             	movzx  eax,al
c00180d9:	85 c0                	test   eax,eax
c00180db:	74 0d                	je     c00180ea <HalDetectFeatures()+0xd50>
c00180dd:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00180e2:	83 c8 80             	or     eax,0xffffff80
c00180e5:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c00180ea:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00180ef:	83 e0 10             	and    eax,0x10
c00180f2:	0f b6 c0             	movzx  eax,al
c00180f5:	85 c0                	test   eax,eax
c00180f7:	74 2f                	je     c0018128 <HalDetectFeatures()+0xd8e>
c00180f9:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00180fe:	83 e0 80             	and    eax,0xffffff80
c0018101:	0f b6 c0             	movzx  eax,al
c0018104:	85 c0                	test   eax,eax
c0018106:	75 20                	jne    c0018128 <HalDetectFeatures()+0xd8e>
c0018108:	e8 d3 7e 00 00       	call   c001ffe0 <sseDetect>
c001810d:	83 e0 01             	and    eax,0x1
c0018110:	89 c1                	mov    ecx,eax
c0018112:	c1 e1 07             	shl    ecx,0x7
c0018115:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001811a:	83 e0 7f             	and    eax,0x7f
c001811d:	88 c2                	mov    dl,al
c001811f:	88 c8                	mov    al,cl
c0018121:	09 d0                	or     eax,edx
c0018123:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0018128:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001812d:	83 e0 80             	and    eax,0xffffff80
c0018130:	0f b6 c0             	movzx  eax,al
c0018133:	85 c0                	test   eax,eax
c0018135:	74 1c                	je     c0018153 <HalDetectFeatures()+0xdb9>
c0018137:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c001813c:	83 e0 20             	and    eax,0x20
c001813f:	0f b6 c0             	movzx  eax,al
c0018142:	85 c0                	test   eax,eax
c0018144:	75 0d                	jne    c0018153 <HalDetectFeatures()+0xdb9>
c0018146:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c001814b:	83 e0 df             	and    eax,0xffffffdf
c001814e:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c0018153:	c6 05 88 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d788,0x0
c001815a:	90                   	nop
c001815b:	81 c4 90 00 00 00    	add    esp,0x90
c0018161:	5b                   	pop    ebx
c0018162:	5e                   	pop    esi
c0018163:	5f                   	pop    edi
c0018164:	c3                   	ret    

c0018165 <HalEnableNMI()>:
c0018165:	c6 05 6c d7 02 c0 01 	mov    BYTE PTR ds:0xc002d76c,0x1
c001816c:	6a 10                	push   0x10
c001816e:	e8 20 ef ff ff       	call   c0017093 <x86ReadCMOS(unsigned char)>
c0018173:	83 c4 04             	add    esp,0x4
c0018176:	90                   	nop
c0018177:	c3                   	ret    

c0018178 <HalDisableNMI()>:
c0018178:	c6 05 6c d7 02 c0 00 	mov    BYTE PTR ds:0xc002d76c,0x0
c001817f:	6a 10                	push   0x10
c0018181:	e8 0d ef ff ff       	call   c0017093 <x86ReadCMOS(unsigned char)>
c0018186:	83 c4 04             	add    esp,0x4
c0018189:	90                   	nop
c001818a:	c3                   	ret    

c001818b <HalGetNMIState()>:
c001818b:	a0 6c d7 02 c0       	mov    al,ds:0xc002d76c
c0018190:	c3                   	ret    

c0018191 <x86rdmsr(unsigned int)>:
c0018191:	83 ec 1c             	sub    esp,0x1c
c0018194:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0018199:	83 e0 08             	and    eax,0x8
c001819c:	0f b6 c0             	movzx  eax,al
c001819f:	85 c0                	test   eax,eax
c00181a1:	75 10                	jne    c00181b3 <x86rdmsr(unsigned int)+0x22>
c00181a3:	83 ec 0c             	sub    esp,0xc
c00181a6:	68 77 3b 02 c0       	push   0xc0023b77
c00181ab:	e8 22 6c ff ff       	call   c000edd2 <KePanic(char const*)>
c00181b0:	83 c4 10             	add    esp,0x10
c00181b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181b7:	89 c1                	mov    ecx,eax
c00181b9:	0f 32                	rdmsr  
c00181bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00181bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00181c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00181c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00181cb:	83 c4 1c             	add    esp,0x1c
c00181ce:	c3                   	ret    

c00181cf <x86wrmsr(unsigned int, unsigned long long)>:
c00181cf:	83 ec 1c             	sub    esp,0x1c
c00181d2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00181d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00181da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00181e2:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00181e7:	83 e0 08             	and    eax,0x8
c00181ea:	0f b6 c0             	movzx  eax,al
c00181ed:	85 c0                	test   eax,eax
c00181ef:	75 10                	jne    c0018201 <x86wrmsr(unsigned int, unsigned long long)+0x32>
c00181f1:	83 ec 0c             	sub    esp,0xc
c00181f4:	68 7d 3b 02 c0       	push   0xc0023b7d
c00181f9:	e8 d4 6b ff ff       	call   c000edd2 <KePanic(char const*)>
c00181fe:	83 c4 10             	add    esp,0x10
c0018201:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0018205:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018209:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001820d:	0f 30                	wrmsr  
c001820f:	90                   	nop
c0018210:	83 c4 1c             	add    esp,0x1c
c0018213:	c3                   	ret    

c0018214 <HalHandleGeneralProtectionFault(void*, void*)>:
c0018214:	83 ec 0c             	sub    esp,0xc
c0018217:	83 ec 0c             	sub    esp,0xc
c001821a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001821e:	e8 40 e7 ff ff       	call   c0016963 <Vm::faultHandler(regs*)>
c0018223:	83 c4 10             	add    esp,0x10
c0018226:	83 c4 0c             	add    esp,0xc
c0018229:	c3                   	ret    

c001822a <HalFindRSDP()>:
c001822a:	83 ec 1c             	sub    esp,0x1c
c001822d:	a1 ac cd 02 c0       	mov    eax,ds:0xc002cdac
c0018232:	3d ff 07 00 00       	cmp    eax,0x7ff
c0018237:	7e 0c                	jle    c0018245 <HalFindRSDP()+0x1b>
c0018239:	a1 90 cd 02 c0       	mov    eax,ds:0xc002cd90
c001823e:	25 00 04 00 00       	and    eax,0x400
c0018243:	74 0d                	je     c0018252 <HalFindRSDP()+0x28>
c0018245:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001824a:	83 e0 fb             	and    eax,0xfffffffb
c001824d:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0018252:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0018257:	83 e0 04             	and    eax,0x4
c001825a:	0f b6 c0             	movzx  eax,al
c001825d:	85 c0                	test   eax,eax
c001825f:	75 07                	jne    c0018268 <HalFindRSDP()+0x3e>
c0018261:	b8 00 00 00 00       	mov    eax,0x0
c0018266:	eb 53                	jmp    c00182bb <HalFindRSDP()+0x91>
c0018268:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0018270:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0018278:	77 2f                	ja     c00182a9 <HalFindRSDP()+0x7f>
c001827a:	83 ec 04             	sub    esp,0x4
c001827d:	6a 08                	push   0x8
c001827f:	68 83 3b 02 c0       	push   0xc0023b83
c0018284:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018288:	e8 f3 80 fe ff       	call   c0000380 <memcmp>
c001828d:	83 c4 10             	add    esp,0x10
c0018290:	85 c0                	test   eax,eax
c0018292:	0f 94 c0             	sete   al
c0018295:	0f b6 c0             	movzx  eax,al
c0018298:	85 c0                	test   eax,eax
c001829a:	74 06                	je     c00182a2 <HalFindRSDP()+0x78>
c001829c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182a0:	eb 19                	jmp    c00182bb <HalFindRSDP()+0x91>
c00182a2:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00182a7:	eb c7                	jmp    c0018270 <HalFindRSDP()+0x46>
c00182a9:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00182ae:	83 e0 fb             	and    eax,0xfffffffb
c00182b1:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c00182b6:	b8 00 00 00 00       	mov    eax,0x0
c00182bb:	83 c4 1c             	add    esp,0x1c
c00182be:	c3                   	ret    

c00182bf <HalHandlePageFault(void*, void*)>:
c00182bf:	83 ec 1c             	sub    esp,0x1c
c00182c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182c6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00182c9:	83 ec 08             	sub    esp,0x8
c00182cc:	50                   	push   eax
c00182cd:	68 c8 3d 02 c0       	push   0xc0023dc8
c00182d2:	e8 77 ec fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00182d7:	83 c4 10             	add    esp,0x10
c00182da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182de:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00182e1:	83 ec 08             	sub    esp,0x8
c00182e4:	50                   	push   eax
c00182e5:	68 8c 3b 02 c0       	push   0xc0023b8c
c00182ea:	e8 5f ec fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00182ef:	83 c4 10             	add    esp,0x10
c00182f2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00182f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00182f9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00182fc:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0018302:	0f 20 d2             	mov    edx,cr2
c0018305:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018309:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001830d:	83 ec 08             	sub    esp,0x8
c0018310:	52                   	push   edx
c0018311:	50                   	push   eax
c0018312:	e8 49 ac ff ff       	call   c0012f60 <VAS::tryLoadBackOffDisk(unsigned long)>
c0018317:	83 c4 10             	add    esp,0x10
c001831a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001831e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018322:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018325:	83 ec 08             	sub    esp,0x8
c0018328:	50                   	push   eax
c0018329:	68 a1 3b 02 c0       	push   0xc0023ba1
c001832e:	e8 1b ec fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018333:	83 c4 10             	add    esp,0x10
c0018336:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001833a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001833d:	83 ec 08             	sub    esp,0x8
c0018340:	50                   	push   eax
c0018341:	68 bb 3b 02 c0       	push   0xc0023bbb
c0018346:	e8 03 ec fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001834b:	83 c4 10             	add    esp,0x10
c001834e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018353:	83 ec 08             	sub    esp,0x8
c0018356:	50                   	push   eax
c0018357:	68 d0 3b 02 c0       	push   0xc0023bd0
c001835c:	e8 ed eb fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018361:	83 c4 10             	add    esp,0x10
c0018364:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018368:	83 c4 1c             	add    esp,0x1c
c001836b:	c3                   	ret    

c001836c <HalHandleOpcodeFault(void*, void*)>:
c001836c:	83 ec 1c             	sub    esp,0x1c
c001836f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018373:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018377:	a0 88 d7 02 c0       	mov    al,ds:0xc002d788
c001837c:	0f b6 c0             	movzx  eax,al
c001837f:	85 c0                	test   eax,eax
c0018381:	74 25                	je     c00183a8 <HalHandleOpcodeFault(void*, void*)+0x3c>
c0018383:	83 ec 0c             	sub    esp,0xc
c0018386:	68 fc 3d 02 c0       	push   0xc0023dfc
c001838b:	e8 be eb fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018390:	83 c4 10             	add    esp,0x10
c0018393:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018397:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001839a:	8d 50 19             	lea    edx,[eax+0x19]
c001839d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00183a1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00183a4:	b0 01                	mov    al,0x1
c00183a6:	eb 02                	jmp    c00183aa <HalHandleOpcodeFault(void*, void*)+0x3e>
c00183a8:	b0 00                	mov    al,0x0
c00183aa:	83 c4 1c             	add    esp,0x1c
c00183ad:	c3                   	ret    

c00183ae <HalDisplayDebugInfo(void*)>:
c00183ae:	83 ec 2c             	sub    esp,0x2c
c00183b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183b5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00183b9:	0f 20 c0             	mov    eax,cr0
c00183bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00183c0:	0f 20 d0             	mov    eax,cr2
c00183c3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00183c7:	0f 20 d8             	mov    eax,cr3
c00183ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00183ce:	0f 20 e0             	mov    eax,cr4
c00183d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00183d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00183d9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00183dc:	83 ec 08             	sub    esp,0x8
c00183df:	50                   	push   eax
c00183e0:	68 eb 3b 02 c0       	push   0xc0023beb
c00183e5:	e8 64 eb fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00183ea:	83 c4 10             	add    esp,0x10
c00183ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00183f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00183f4:	83 ec 08             	sub    esp,0x8
c00183f7:	50                   	push   eax
c00183f8:	68 dc 3b 02 c0       	push   0xc0023bdc
c00183fd:	e8 4c eb fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018402:	83 c4 10             	add    esp,0x10
c0018405:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018409:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001840c:	83 ec 08             	sub    esp,0x8
c001840f:	50                   	push   eax
c0018410:	68 e7 3b 02 c0       	push   0xc0023be7
c0018415:	e8 34 eb fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001841a:	83 c4 10             	add    esp,0x10
c001841d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018421:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018424:	83 ec 08             	sub    esp,0x8
c0018427:	50                   	push   eax
c0018428:	68 f6 3b 02 c0       	push   0xc0023bf6
c001842d:	e8 1c eb fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018432:	83 c4 10             	add    esp,0x10
c0018435:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018439:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001843c:	83 ec 08             	sub    esp,0x8
c001843f:	50                   	push   eax
c0018440:	68 01 3c 02 c0       	push   0xc0023c01
c0018445:	e8 04 eb fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001844a:	83 c4 10             	add    esp,0x10
c001844d:	83 ec 08             	sub    esp,0x8
c0018450:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018454:	68 0c 3c 02 c0       	push   0xc0023c0c
c0018459:	e8 f0 ea fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001845e:	83 c4 10             	add    esp,0x10
c0018461:	83 ec 08             	sub    esp,0x8
c0018464:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018468:	68 17 3c 02 c0       	push   0xc0023c17
c001846d:	e8 dc ea fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018472:	83 c4 10             	add    esp,0x10
c0018475:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018479:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001847c:	c1 e0 05             	shl    eax,0x5
c001847f:	8d 90 20 51 02 c0    	lea    edx,[eax-0x3ffdaee0]
c0018485:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018489:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001848c:	83 ec 04             	sub    esp,0x4
c001848f:	52                   	push   edx
c0018490:	50                   	push   eax
c0018491:	68 22 3c 02 c0       	push   0xc0023c22
c0018496:	e8 b3 ea fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001849b:	83 c4 10             	add    esp,0x10
c001849e:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00184a3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00184a9:	83 ec 0c             	sub    esp,0xc
c00184ac:	50                   	push   eax
c00184ad:	e8 89 8d ff ff       	call   c001123b <setActiveTerminal(VgaText*)>
c00184b2:	83 c4 10             	add    esp,0x10
c00184b5:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00184ba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00184c0:	83 ec 08             	sub    esp,0x8
c00184c3:	68 31 3c 02 c0       	push   0xc0023c31
c00184c8:	50                   	push   eax
c00184c9:	e8 aa 90 ff ff       	call   c0011578 <VgaText::puts(char const*)>
c00184ce:	83 c4 10             	add    esp,0x10
c00184d1:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00184d6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00184dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00184e0:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00184e3:	83 ec 08             	sub    esp,0x8
c00184e6:	52                   	push   edx
c00184e7:	50                   	push   eax
c00184e8:	e8 45 90 ff ff       	call   c0011532 <VgaText::putx(unsigned int)>
c00184ed:	83 c4 10             	add    esp,0x10
c00184f0:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00184f5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00184fb:	83 ec 08             	sub    esp,0x8
c00184fe:	68 3f 3c 02 c0       	push   0xc0023c3f
c0018503:	50                   	push   eax
c0018504:	e8 6f 90 ff ff       	call   c0011578 <VgaText::puts(char const*)>
c0018509:	83 c4 10             	add    esp,0x10
c001850c:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018511:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018517:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001851c:	8b 12                	mov    edx,DWORD PTR [edx]
c001851e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0018521:	83 c2 0c             	add    edx,0xc
c0018524:	83 ec 08             	sub    esp,0x8
c0018527:	52                   	push   edx
c0018528:	50                   	push   eax
c0018529:	e8 4a 90 ff ff       	call   c0011578 <VgaText::puts(char const*)>
c001852e:	83 c4 10             	add    esp,0x10
c0018531:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018536:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001853c:	83 ec 08             	sub    esp,0x8
c001853f:	68 48 3c 02 c0       	push   0xc0023c48
c0018544:	50                   	push   eax
c0018545:	e8 2e 90 ff ff       	call   c0011578 <VgaText::puts(char const*)>
c001854a:	83 c4 10             	add    esp,0x10
c001854d:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018552:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018558:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001855c:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001855f:	83 ec 08             	sub    esp,0x8
c0018562:	52                   	push   edx
c0018563:	50                   	push   eax
c0018564:	e8 c9 8f ff ff       	call   c0011532 <VgaText::putx(unsigned int)>
c0018569:	83 c4 10             	add    esp,0x10
c001856c:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018571:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018577:	83 ec 08             	sub    esp,0x8
c001857a:	68 50 3c 02 c0       	push   0xc0023c50
c001857f:	50                   	push   eax
c0018580:	e8 f3 8f ff ff       	call   c0011578 <VgaText::puts(char const*)>
c0018585:	83 c4 10             	add    esp,0x10
c0018588:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001858d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018593:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018597:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001859a:	83 ec 08             	sub    esp,0x8
c001859d:	52                   	push   edx
c001859e:	50                   	push   eax
c001859f:	e8 8e 8f ff ff       	call   c0011532 <VgaText::putx(unsigned int)>
c00185a4:	83 c4 10             	add    esp,0x10
c00185a7:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00185ac:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00185b2:	83 ec 08             	sub    esp,0x8
c00185b5:	68 58 3c 02 c0       	push   0xc0023c58
c00185ba:	50                   	push   eax
c00185bb:	e8 b8 8f ff ff       	call   c0011578 <VgaText::puts(char const*)>
c00185c0:	83 c4 10             	add    esp,0x10
c00185c3:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00185c8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00185ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00185d2:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00185d5:	83 ec 08             	sub    esp,0x8
c00185d8:	52                   	push   edx
c00185d9:	50                   	push   eax
c00185da:	e8 53 8f ff ff       	call   c0011532 <VgaText::putx(unsigned int)>
c00185df:	83 c4 10             	add    esp,0x10
c00185e2:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00185e7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00185ed:	83 ec 08             	sub    esp,0x8
c00185f0:	68 60 3c 02 c0       	push   0xc0023c60
c00185f5:	50                   	push   eax
c00185f6:	e8 7d 8f ff ff       	call   c0011578 <VgaText::puts(char const*)>
c00185fb:	83 c4 10             	add    esp,0x10
c00185fe:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018603:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018609:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001860d:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0018610:	83 ec 08             	sub    esp,0x8
c0018613:	52                   	push   edx
c0018614:	50                   	push   eax
c0018615:	e8 18 8f ff ff       	call   c0011532 <VgaText::putx(unsigned int)>
c001861a:	83 c4 10             	add    esp,0x10
c001861d:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018622:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018628:	83 ec 08             	sub    esp,0x8
c001862b:	68 68 3c 02 c0       	push   0xc0023c68
c0018630:	50                   	push   eax
c0018631:	e8 42 8f ff ff       	call   c0011578 <VgaText::puts(char const*)>
c0018636:	83 c4 10             	add    esp,0x10
c0018639:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001863e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018644:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018648:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001864b:	83 ec 08             	sub    esp,0x8
c001864e:	52                   	push   edx
c001864f:	50                   	push   eax
c0018650:	e8 dd 8e ff ff       	call   c0011532 <VgaText::putx(unsigned int)>
c0018655:	83 c4 10             	add    esp,0x10
c0018658:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001865d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018663:	83 ec 08             	sub    esp,0x8
c0018666:	68 70 3c 02 c0       	push   0xc0023c70
c001866b:	50                   	push   eax
c001866c:	e8 07 8f ff ff       	call   c0011578 <VgaText::puts(char const*)>
c0018671:	83 c4 10             	add    esp,0x10
c0018674:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018679:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001867f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018683:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0018686:	83 ec 08             	sub    esp,0x8
c0018689:	52                   	push   edx
c001868a:	50                   	push   eax
c001868b:	e8 a2 8e ff ff       	call   c0011532 <VgaText::putx(unsigned int)>
c0018690:	83 c4 10             	add    esp,0x10
c0018693:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018698:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001869e:	83 ec 08             	sub    esp,0x8
c00186a1:	68 78 3c 02 c0       	push   0xc0023c78
c00186a6:	50                   	push   eax
c00186a7:	e8 cc 8e ff ff       	call   c0011578 <VgaText::puts(char const*)>
c00186ac:	83 c4 10             	add    esp,0x10
c00186af:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00186b4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00186ba:	83 ec 08             	sub    esp,0x8
c00186bd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00186c1:	50                   	push   eax
c00186c2:	e8 6b 8e ff ff       	call   c0011532 <VgaText::putx(unsigned int)>
c00186c7:	83 c4 10             	add    esp,0x10
c00186ca:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00186cf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00186d5:	83 ec 08             	sub    esp,0x8
c00186d8:	68 81 3c 02 c0       	push   0xc0023c81
c00186dd:	50                   	push   eax
c00186de:	e8 95 8e ff ff       	call   c0011578 <VgaText::puts(char const*)>
c00186e3:	83 c4 10             	add    esp,0x10
c00186e6:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00186eb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00186f1:	83 ec 08             	sub    esp,0x8
c00186f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00186f8:	50                   	push   eax
c00186f9:	e8 34 8e ff ff       	call   c0011532 <VgaText::putx(unsigned int)>
c00186fe:	83 c4 10             	add    esp,0x10
c0018701:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018706:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001870c:	83 ec 08             	sub    esp,0x8
c001870f:	68 89 3c 02 c0       	push   0xc0023c89
c0018714:	50                   	push   eax
c0018715:	e8 5e 8e ff ff       	call   c0011578 <VgaText::puts(char const*)>
c001871a:	83 c4 10             	add    esp,0x10
c001871d:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018722:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018728:	83 ec 08             	sub    esp,0x8
c001872b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001872f:	50                   	push   eax
c0018730:	e8 fd 8d ff ff       	call   c0011532 <VgaText::putx(unsigned int)>
c0018735:	83 c4 10             	add    esp,0x10
c0018738:	fa                   	cli    
c0018739:	f4                   	hlt    
c001873a:	eb fe                	jmp    c001873a <HalDisplayDebugInfo(void*)+0x38c>

c001873c <HalReceivedNMI()>:
c001873c:	83 ec 1c             	sub    esp,0x1c
c001873f:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c0018746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001874a:	89 c2                	mov    edx,eax
c001874c:	ec                   	in     al,dx
c001874d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0018751:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0018755:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018759:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c0018760:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018764:	89 c2                	mov    edx,eax
c0018766:	ec                   	in     al,dx
c0018767:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001876b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001876f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018773:	83 ec 0c             	sub    esp,0xc
c0018776:	68 91 3c 02 c0       	push   0xc0023c91
c001877b:	e8 ce e7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018780:	83 c4 10             	add    esp,0x10
c0018783:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018788:	83 e0 10             	and    eax,0x10
c001878b:	74 10                	je     c001879d <HalReceivedNMI()+0x61>
c001878d:	83 ec 0c             	sub    esp,0xc
c0018790:	68 a2 3c 02 c0       	push   0xc0023ca2
c0018795:	e8 38 66 ff ff       	call   c000edd2 <KePanic(char const*)>
c001879a:	83 c4 10             	add    esp,0x10
c001879d:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c00187a2:	83 e0 40             	and    eax,0x40
c00187a5:	74 10                	je     c00187b7 <HalReceivedNMI()+0x7b>
c00187a7:	83 ec 0c             	sub    esp,0xc
c00187aa:	68 af 3c 02 c0       	push   0xc0023caf
c00187af:	e8 1e 66 ff ff       	call   c000edd2 <KePanic(char const*)>
c00187b4:	83 c4 10             	add    esp,0x10
c00187b7:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c00187bb:	0f be c0             	movsx  eax,al
c00187be:	85 c0                	test   eax,eax
c00187c0:	79 10                	jns    c00187d2 <HalReceivedNMI()+0x96>
c00187c2:	83 ec 0c             	sub    esp,0xc
c00187c5:	68 b9 3c 02 c0       	push   0xc0023cb9
c00187ca:	e8 03 66 ff ff       	call   c000edd2 <KePanic(char const*)>
c00187cf:	83 c4 10             	add    esp,0x10
c00187d2:	90                   	nop
c00187d3:	83 c4 1c             	add    esp,0x1c
c00187d6:	c3                   	ret    

c00187d7 <HalSystemIdle()>:
c00187d7:	56                   	push   esi
c00187d8:	53                   	push   ebx
c00187d9:	83 ec 14             	sub    esp,0x14
c00187dc:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c00187e1:	83 e0 10             	and    eax,0x10
c00187e4:	0f b6 c0             	movzx  eax,al
c00187e7:	85 c0                	test   eax,eax
c00187e9:	74 43                	je     c001882e <HalSystemIdle()+0x57>
c00187eb:	83 ec 0c             	sub    esp,0xc
c00187ee:	68 e1 00 00 00       	push   0xe1
c00187f3:	e8 99 f9 ff ff       	call   c0018191 <x86rdmsr(unsigned int)>
c00187f8:	83 c4 10             	add    esp,0x10
c00187fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00187ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018807:	83 e0 02             	and    eax,0x2
c001880a:	89 c3                	mov    ebx,eax
c001880c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018810:	83 e0 00             	and    eax,0x0
c0018813:	89 c6                	mov    esi,eax
c0018815:	83 ec 04             	sub    esp,0x4
c0018818:	56                   	push   esi
c0018819:	53                   	push   ebx
c001881a:	68 e1 00 00 00       	push   0xe1
c001881f:	e8 ab f9 ff ff       	call   c00181cf <x86wrmsr(unsigned int, unsigned long long)>
c0018824:	83 c4 10             	add    esp,0x10
c0018827:	e8 68 79 fe ff       	call   c0000194 <doTPAUSE>
c001882c:	eb 01                	jmp    c001882f <HalSystemIdle()+0x58>
c001882e:	f4                   	hlt    
c001882f:	90                   	nop
c0018830:	83 c4 14             	add    esp,0x14
c0018833:	5b                   	pop    ebx
c0018834:	5e                   	pop    esi
c0018835:	c3                   	ret    

c0018836 <i386SaveCoprocessor(void*)>:
c0018836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001883a:	83 c0 3f             	add    eax,0x3f
c001883d:	83 e0 c0             	and    eax,0xffffffc0
c0018840:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018844:	ff 25 50 d7 02 c0    	jmp    DWORD PTR ds:0xc002d750

c001884a <i386LoadCoprocessor(void*)>:
c001884a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001884e:	83 c0 3f             	add    eax,0x3f
c0018851:	83 e0 c0             	and    eax,0xffffffc0
c0018854:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018858:	ff 25 4c d7 02 c0    	jmp    DWORD PTR ds:0xc002d74c

c001885e <x87EmulHandler(regs*, void*)>:
c001885e:	53                   	push   ebx
c001885f:	83 ec 08             	sub    esp,0x8
c0018862:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018867:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c001886b:	74 10                	je     c001887d <x87EmulHandler(regs*, void*)+0x1f>
c001886d:	83 ec 0c             	sub    esp,0xc
c0018870:	68 c6 3c 02 c0       	push   0xc0023cc6
c0018875:	e8 58 65 ff ff       	call   c000edd2 <KePanic(char const*)>
c001887a:	83 c4 10             	add    esp,0x10
c001887d:	0f 20 c0             	mov    eax,cr0
c0018880:	a8 08                	test   al,0x8
c0018882:	74 59                	je     c00188dd <x87EmulHandler(regs*, void*)+0x7f>
c0018884:	0f 06                	clts   
c0018886:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c001888b:	85 c0                	test   eax,eax
c001888d:	74 0e                	je     c001889d <x87EmulHandler(regs*, void*)+0x3f>
c001888f:	83 ec 0c             	sub    esp,0xc
c0018892:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0018895:	e8 9c ff ff ff       	call   c0018836 <i386SaveCoprocessor(void*)>
c001889a:	83 c4 10             	add    esp,0x10
c001889d:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00188a3:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00188a7:	75 12                	jne    c00188bb <x87EmulHandler(regs*, void*)+0x5d>
c00188a9:	83 ec 0c             	sub    esp,0xc
c00188ac:	68 40 02 00 00       	push   0x240
c00188b1:	e8 d6 61 ff ff       	call   c000ea8c <malloc>
c00188b6:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00188b9:	eb 10                	jmp    c00188cb <x87EmulHandler(regs*, void*)+0x6d>
c00188bb:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c00188c0:	83 ec 0c             	sub    esp,0xc
c00188c3:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00188c6:	e8 7f ff ff ff       	call   c001884a <i386LoadCoprocessor(void*)>
c00188cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188d0:	83 c4 10             	add    esp,0x10
c00188d3:	a3 48 d7 02 c0       	mov    ds:0xc002d748,eax
c00188d8:	83 c4 08             	add    esp,0x8
c00188db:	5b                   	pop    ebx
c00188dc:	c3                   	ret    
c00188dd:	83 ec 0c             	sub    esp,0xc
c00188e0:	68 da 3c 02 c0       	push   0xc0023cda
c00188e5:	e8 64 e6 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00188ea:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00188f2:	83 c4 18             	add    esp,0x18
c00188f5:	5b                   	pop    ebx
c00188f6:	e9 ad d9 ff ff       	jmp    c00162a8 <Thr::terminateFromIRQ(int)>

c00188fb <HalInitialiseCoprocessor()>:
c00188fb:	83 ec 10             	sub    esp,0x10
c00188fe:	6a 00                	push   0x0
c0018900:	68 5e 88 01 c0       	push   0xc001885e
c0018905:	6a 07                	push   0x7
c0018907:	c7 05 48 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d748,0x0
c0018911:	e8 9d 06 00 00       	call   c0018fb3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018916:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001891b:	83 c4 10             	add    esp,0x10
c001891e:	a8 80                	test   al,0x80
c0018920:	74 1c                	je     c001893e <HalInitialiseCoprocessor()+0x43>
c0018922:	c7 05 50 d7 02 c0 f8 ff 01 c0 	mov    DWORD PTR ds:0xc002d750,0xc001fff8
c001892c:	c7 05 4c d7 02 c0 00 00 02 c0 	mov    DWORD PTR ds:0xc002d74c,0xc0020000
c0018936:	83 c4 0c             	add    esp,0xc
c0018939:	e9 ca 76 00 00       	jmp    c0020008 <sseInit>
c001893e:	a8 10                	test   al,0x10
c0018940:	74 1c                	je     c001895e <HalInitialiseCoprocessor()+0x63>
c0018942:	c7 05 50 d7 02 c0 47 00 02 c0 	mov    DWORD PTR ds:0xc002d750,0xc0020047
c001894c:	c7 05 4c d7 02 c0 4e 00 02 c0 	mov    DWORD PTR ds:0xc002d74c,0xc002004e
c0018956:	83 c4 0c             	add    esp,0xc
c0018959:	e9 f7 76 00 00       	jmp    c0020055 <x87Init>
c001895e:	c7 05 50 d7 02 c0 8e 70 01 c0 	mov    DWORD PTR ds:0xc002d750,0xc001708e
c0018968:	c7 05 4c d7 02 c0 8e 70 01 c0 	mov    DWORD PTR ds:0xc002d74c,0xc001708e
c0018972:	0f 20 c0             	mov    eax,cr0
c0018975:	83 c8 04             	or     eax,0x4
c0018978:	0f 22 c0             	mov    cr0,eax
c001897b:	83 c4 0c             	add    esp,0xc
c001897e:	c3                   	ret    

c001897f <HalPanic(char const*)>:
c001897f:	53                   	push   ebx
c0018980:	83 ec 10             	sub    esp,0x10
c0018983:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018987:	fa                   	cli    
c0018988:	53                   	push   ebx
c0018989:	68 f0 3c 02 c0       	push   0xc0023cf0
c001898e:	e8 bb e5 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018993:	a1 44 d7 02 c0       	mov    eax,ds:0xc002d744
c0018998:	83 c4 10             	add    esp,0x10
c001899b:	85 c0                	test   eax,eax
c001899d:	74 09                	je     c00189a8 <HalPanic(char const*)+0x29>
c001899f:	83 ec 0c             	sub    esp,0xc
c00189a2:	53                   	push   ebx
c00189a3:	ff d0                	call   eax
c00189a5:	83 c4 10             	add    esp,0x10
c00189a8:	a1 34 ce 02 c0       	mov    eax,ds:0xc002ce34
c00189ad:	85 c0                	test   eax,eax
c00189af:	0f 84 dc 00 00 00    	je     c0018a91 <HalPanic(char const*)+0x112>
c00189b5:	52                   	push   edx
c00189b6:	6a 01                	push   0x1
c00189b8:	6a 0f                	push   0xf
c00189ba:	50                   	push   eax
c00189bb:	e8 ba 86 ff ff       	call   c001107a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00189c0:	59                   	pop    ecx
c00189c1:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c00189c7:	e8 ba 88 ff ff       	call   c0011286 <VgaText::clearScreen()>
c00189cc:	58                   	pop    eax
c00189cd:	5a                   	pop    edx
c00189ce:	68 53 2d 02 c0       	push   0xc0022d53
c00189d3:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c00189d9:	e8 d4 86 ff ff       	call   c00110b2 <VgaText::setTitle(char*)>
c00189de:	83 c4 0c             	add    esp,0xc
c00189e1:	6a 01                	push   0x1
c00189e3:	6a 0f                	push   0xf
c00189e5:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c00189eb:	e8 8a 86 ff ff       	call   c001107a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00189f0:	59                   	pop    ecx
c00189f1:	58                   	pop    eax
c00189f2:	68 09 3d 02 c0       	push   0xc0023d09
c00189f7:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c00189fd:	e8 76 8b ff ff       	call   c0011578 <VgaText::puts(char const*)>
c0018a02:	83 c4 0c             	add    esp,0xc
c0018a05:	6a 0f                	push   0xf
c0018a07:	6a 01                	push   0x1
c0018a09:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018a0f:	e8 66 86 ff ff       	call   c001107a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018a14:	58                   	pop    eax
c0018a15:	5a                   	pop    edx
c0018a16:	68 12 3d 02 c0       	push   0xc0023d12
c0018a1b:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018a21:	e8 52 8b ff ff       	call   c0011578 <VgaText::puts(char const*)>
c0018a26:	83 c4 0c             	add    esp,0xc
c0018a29:	6a 01                	push   0x1
c0018a2b:	6a 0f                	push   0xf
c0018a2d:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018a33:	e8 42 86 ff ff       	call   c001107a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018a38:	59                   	pop    ecx
c0018a39:	58                   	pop    eax
c0018a3a:	68 56 3d 02 c0       	push   0xc0023d56
c0018a3f:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018a45:	e8 2e 8b ff ff       	call   c0011578 <VgaText::puts(char const*)>
c0018a4a:	58                   	pop    eax
c0018a4b:	5a                   	pop    edx
c0018a4c:	68 1f 3d 02 c0       	push   0xc0023d1f
c0018a51:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018a57:	e8 1c 8b ff ff       	call   c0011578 <VgaText::puts(char const*)>
c0018a5c:	59                   	pop    ecx
c0018a5d:	58                   	pop    eax
c0018a5e:	68 59 3d 02 c0       	push   0xc0023d59
c0018a63:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018a69:	e8 0a 8b ff ff       	call   c0011578 <VgaText::puts(char const*)>
c0018a6e:	58                   	pop    eax
c0018a6f:	5a                   	pop    edx
c0018a70:	53                   	push   ebx
c0018a71:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018a77:	e8 fc 8a ff ff       	call   c0011578 <VgaText::puts(char const*)>
c0018a7c:	59                   	pop    ecx
c0018a7d:	5b                   	pop    ebx
c0018a7e:	68 56 3d 02 c0       	push   0xc0023d56
c0018a83:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018a89:	e8 ea 8a ff ff       	call   c0011578 <VgaText::puts(char const*)>
c0018a8e:	83 c4 10             	add    esp,0x10
c0018a91:	eb fe                	jmp    c0018a91 <HalPanic(char const*)+0x112>

c0018a93 <HalQueryPerformanceCounter()>:
c0018a93:	31 c0                	xor    eax,eax
c0018a95:	31 d2                	xor    edx,edx
c0018a97:	f6 05 8e d7 02 c0 08 	test   BYTE PTR ds:0xc002d78e,0x8
c0018a9e:	75 02                	jne    c0018aa2 <HalQueryPerformanceCounter()+0xf>
c0018aa0:	0f 31                	rdtsc  
c0018aa2:	c3                   	ret    

c0018aa3 <HalInitialise()>:
c0018aa3:	53                   	push   ebx
c0018aa4:	83 ec 08             	sub    esp,0x8
c0018aa7:	c6 05 40 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d740,0x0
c0018aae:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0018ab3:	83 e0 fe             	and    eax,0xfffffffe
c0018ab6:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0018abb:	e8 d8 07 00 00       	call   c0019298 <picOpen()>
c0018ac0:	80 3d 40 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d740,0x0
c0018ac7:	74 0a                	je     c0018ad3 <HalInitialise()+0x30>
c0018ac9:	e8 1a 07 00 00       	call   c00191e8 <picDisable()>
c0018ace:	e8 05 6b 00 00       	call   c001f5d8 <apicOpen()>
c0018ad3:	50                   	push   eax
c0018ad4:	bb 0f 00 00 00       	mov    ebx,0xf
c0018ad9:	6a 00                	push   0x0
c0018adb:	68 3c e1 00 c0       	push   0xc000e13c
c0018ae0:	6a 00                	push   0x0
c0018ae2:	e8 cc 04 00 00       	call   c0018fb3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018ae7:	83 c4 0c             	add    esp,0xc
c0018aea:	6a 00                	push   0x0
c0018aec:	68 3c e1 00 c0       	push   0xc000e13c
c0018af1:	6a 01                	push   0x1
c0018af3:	e8 bb 04 00 00       	call   c0018fb3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018af8:	83 c4 0c             	add    esp,0xc
c0018afb:	6a 00                	push   0x0
c0018afd:	68 2c e1 00 c0       	push   0xc000e12c
c0018b02:	6a 02                	push   0x2
c0018b04:	e8 aa 04 00 00       	call   c0018fb3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018b09:	83 c4 0c             	add    esp,0xc
c0018b0c:	6a 00                	push   0x0
c0018b0e:	68 3c e1 00 c0       	push   0xc000e13c
c0018b13:	6a 03                	push   0x3
c0018b15:	e8 99 04 00 00       	call   c0018fb3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018b1a:	83 c4 0c             	add    esp,0xc
c0018b1d:	6a 00                	push   0x0
c0018b1f:	68 3c e1 00 c0       	push   0xc000e13c
c0018b24:	6a 04                	push   0x4
c0018b26:	e8 88 04 00 00       	call   c0018fb3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018b2b:	83 c4 0c             	add    esp,0xc
c0018b2e:	6a 00                	push   0x0
c0018b30:	68 3c e1 00 c0       	push   0xc000e13c
c0018b35:	6a 05                	push   0x5
c0018b37:	e8 77 04 00 00       	call   c0018fb3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018b3c:	83 c4 0c             	add    esp,0xc
c0018b3f:	6a 00                	push   0x0
c0018b41:	68 70 e1 00 c0       	push   0xc000e170
c0018b46:	6a 06                	push   0x6
c0018b48:	e8 66 04 00 00       	call   c0018fb3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018b4d:	83 c4 0c             	add    esp,0xc
c0018b50:	6a 00                	push   0x0
c0018b52:	68 c4 e1 00 c0       	push   0xc000e1c4
c0018b57:	6a 08                	push   0x8
c0018b59:	e8 55 04 00 00       	call   c0018fb3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018b5e:	83 c4 0c             	add    esp,0xc
c0018b61:	6a 00                	push   0x0
c0018b63:	68 3c e1 00 c0       	push   0xc000e13c
c0018b68:	6a 09                	push   0x9
c0018b6a:	e8 44 04 00 00       	call   c0018fb3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018b6f:	83 c4 0c             	add    esp,0xc
c0018b72:	6a 00                	push   0x0
c0018b74:	68 3c e1 00 c0       	push   0xc000e13c
c0018b79:	6a 0a                	push   0xa
c0018b7b:	e8 33 04 00 00       	call   c0018fb3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018b80:	83 c4 0c             	add    esp,0xc
c0018b83:	6a 00                	push   0x0
c0018b85:	68 3c e1 00 c0       	push   0xc000e13c
c0018b8a:	6a 0b                	push   0xb
c0018b8c:	e8 22 04 00 00       	call   c0018fb3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018b91:	83 c4 0c             	add    esp,0xc
c0018b94:	6a 00                	push   0x0
c0018b96:	68 74 e0 00 c0       	push   0xc000e074
c0018b9b:	6a 0d                	push   0xd
c0018b9d:	e8 11 04 00 00       	call   c0018fb3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018ba2:	83 c4 0c             	add    esp,0xc
c0018ba5:	6a 00                	push   0x0
c0018ba7:	68 c8 e0 00 c0       	push   0xc000e0c8
c0018bac:	6a 0e                	push   0xe
c0018bae:	e8 00 04 00 00       	call   c0018fb3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018bb3:	83 c4 10             	add    esp,0x10
c0018bb6:	50                   	push   eax
c0018bb7:	6a 00                	push   0x0
c0018bb9:	68 3c e1 00 c0       	push   0xc000e13c
c0018bbe:	53                   	push   ebx
c0018bbf:	43                   	inc    ebx
c0018bc0:	e8 ee 03 00 00       	call   c0018fb3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018bc5:	83 c4 10             	add    esp,0x10
c0018bc8:	83 fb 1e             	cmp    ebx,0x1e
c0018bcb:	75 e9                	jne    c0018bb6 <HalInitialise()+0x113>
c0018bcd:	50                   	push   eax
c0018bce:	6a 00                	push   0x0
c0018bd0:	68 13 0f 01 c0       	push   0xc0010f13
c0018bd5:	6a 60                	push   0x60
c0018bd7:	e8 d7 03 00 00       	call   c0018fb3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018bdc:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0018be1:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0018beb:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0018bf2:	e8 95 5e ff ff       	call   c000ea8c <malloc>
c0018bf7:	89 04 24             	mov    DWORD PTR [esp],eax
c0018bfa:	89 c3                	mov    ebx,eax
c0018bfc:	e8 ff 0d 00 00       	call   c0019a00 <RTC::RTC()>
c0018c01:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0018c0b:	5a                   	pop    edx
c0018c0c:	59                   	pop    ecx
c0018c0d:	53                   	push   ebx
c0018c0e:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c0018c14:	e8 79 04 ff ff       	call   c0009092 <Device::addChild(Device*)>
c0018c19:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018c1b:	6a 00                	push   0x0
c0018c1d:	6a 00                	push   0x0
c0018c1f:	6a 00                	push   0x0
c0018c21:	53                   	push   ebx
c0018c22:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018c25:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0018c2a:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0018c30:	83 c4 28             	add    esp,0x28
c0018c33:	5b                   	pop    ebx
c0018c34:	c3                   	ret    

c0018c35 <HalMakeBeep(int)>:
c0018c35:	53                   	push   ebx
c0018c36:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018c3a:	85 db                	test   ebx,ebx
c0018c3c:	75 07                	jne    c0018c45 <HalMakeBeep(int)+0x10>
c0018c3e:	e4 61                	in     al,0x61
c0018c40:	83 e0 fc             	and    eax,0xfffffffc
c0018c43:	eb 26                	jmp    c0018c6b <HalMakeBeep(int)+0x36>
c0018c45:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0018c4a:	99                   	cdq    
c0018c4b:	f7 fb                	idiv   ebx
c0018c4d:	89 c1                	mov    ecx,eax
c0018c4f:	b0 b6                	mov    al,0xb6
c0018c51:	e6 43                	out    0x43,al
c0018c53:	88 c8                	mov    al,cl
c0018c55:	e6 42                	out    0x42,al
c0018c57:	89 c8                	mov    eax,ecx
c0018c59:	c1 e8 08             	shr    eax,0x8
c0018c5c:	e6 42                	out    0x42,al
c0018c5e:	e4 61                	in     al,0x61
c0018c60:	89 c2                	mov    edx,eax
c0018c62:	83 ca 03             	or     edx,0x3
c0018c65:	38 d0                	cmp    al,dl
c0018c67:	74 04                	je     c0018c6d <HalMakeBeep(int)+0x38>
c0018c69:	88 d0                	mov    al,dl
c0018c6b:	e6 61                	out    0x61,al
c0018c6d:	5b                   	pop    ebx
c0018c6e:	c3                   	ret    

c0018c6f <HalGetRand()>:
c0018c6f:	31 c0                	xor    eax,eax
c0018c71:	c3                   	ret    

c0018c72 <HalEndOfInterrupt(int)>:
c0018c72:	80 3d 40 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d740,0x0
c0018c79:	74 1d                	je     c0018c98 <HalEndOfInterrupt(int)+0x26>
c0018c7b:	83 ec 18             	sub    esp,0x18
c0018c7e:	6a 1b                	push   0x1b
c0018c80:	e8 0c f5 ff ff       	call   c0018191 <x86rdmsr(unsigned int)>
c0018c85:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018c8a:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0018c94:	83 c4 1c             	add    esp,0x1c
c0018c97:	c3                   	ret    
c0018c98:	e9 7f 07 00 00       	jmp    c001941c <picEOI(int)>

c0018c9d <HalRestart()>:
c0018c9d:	c3                   	ret    

c0018c9e <HalShutdown()>:
c0018c9e:	c3                   	ret    

c0018c9f <HalSleep()>:
c0018c9f:	c3                   	ret    

c0018ca0 <CPU::CPU()>:
c0018ca0:	83 ec 0c             	sub    esp,0xc
c0018ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ca7:	83 ec 08             	sub    esp,0x8
c0018caa:	68 cb 3a 02 c0       	push   0xc0023acb
c0018caf:	50                   	push   eax
c0018cb0:	e8 3f 05 ff ff       	call   c00091f4 <Device::Device(char const*)>
c0018cb5:	83 c4 10             	add    esp,0x10
c0018cb8:	ba 28 3e 02 c0       	mov    edx,0xc0023e28
c0018cbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cc1:	89 10                	mov    DWORD PTR [eax],edx
c0018cc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cc7:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0018cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cd5:	05 64 01 00 00       	add    eax,0x164
c0018cda:	83 ec 0c             	sub    esp,0xc
c0018cdd:	50                   	push   eax
c0018cde:	e8 35 55 ff ff       	call   c000e218 <GDT::GDT()>
c0018ce3:	83 c4 10             	add    esp,0x10
c0018ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cea:	05 68 09 00 00       	add    eax,0x968
c0018cef:	83 ec 0c             	sub    esp,0xc
c0018cf2:	50                   	push   eax
c0018cf3:	e8 74 57 ff ff       	call   c000e46c <IDT::IDT()>
c0018cf8:	83 c4 10             	add    esp,0x10
c0018cfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cff:	05 68 11 00 00       	add    eax,0x1168
c0018d04:	83 ec 0c             	sub    esp,0xc
c0018d07:	50                   	push   eax
c0018d08:	e8 27 8d ff ff       	call   c0011a34 <TSS::TSS()>
c0018d0d:	83 c4 10             	add    esp,0x10
c0018d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d14:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0018d1e:	90                   	nop
c0018d1f:	83 c4 0c             	add    esp,0xc
c0018d22:	c3                   	ret    
c0018d23:	90                   	nop

c0018d24 <CPU::setupSMEP()>:
c0018d24:	0f 20 e0             	mov    eax,cr4
c0018d27:	0d 00 00 10 00       	or     eax,0x100000
c0018d2c:	0f 22 e0             	mov    cr4,eax
c0018d2f:	c3                   	ret    

c0018d30 <CPU::setupUMIP()>:
c0018d30:	0f 20 e0             	mov    eax,cr4
c0018d33:	80 cc 08             	or     ah,0x8
c0018d36:	0f 22 e0             	mov    cr4,eax
c0018d39:	c3                   	ret    

c0018d3a <CPU::setupTSC()>:
c0018d3a:	0f 20 e0             	mov    eax,cr4
c0018d3d:	83 c8 04             	or     eax,0x4
c0018d40:	0f 22 e0             	mov    cr4,eax
c0018d43:	c3                   	ret    

c0018d44 <CPU::setupLargePages()>:
c0018d44:	0f 20 e0             	mov    eax,cr4
c0018d47:	83 c8 10             	or     eax,0x10
c0018d4a:	0f 22 e0             	mov    cr4,eax
c0018d4d:	c3                   	ret    

c0018d4e <CPU::setupPAT()>:
c0018d4e:	f6 05 8c d7 02 c0 08 	test   BYTE PTR ds:0xc002d78c,0x8
c0018d55:	74 28                	je     c0018d7f <CPU::setupPAT()+0x31>
c0018d57:	53                   	push   ebx
c0018d58:	83 ec 14             	sub    esp,0x14
c0018d5b:	68 77 02 00 00       	push   0x277
c0018d60:	e8 2c f4 ff ff       	call   c0018191 <x86rdmsr(unsigned int)>
c0018d65:	83 c4 0c             	add    esp,0xc
c0018d68:	83 e2 f8             	and    edx,0xfffffff8
c0018d6b:	83 ca 01             	or     edx,0x1
c0018d6e:	52                   	push   edx
c0018d6f:	50                   	push   eax
c0018d70:	68 77 02 00 00       	push   0x277
c0018d75:	e8 55 f4 ff ff       	call   c00181cf <x86wrmsr(unsigned int, unsigned long long)>
c0018d7a:	83 c4 18             	add    esp,0x18
c0018d7d:	5b                   	pop    ebx
c0018d7e:	c3                   	ret    
c0018d7f:	c3                   	ret    

c0018d80 <CPU::setupMTRR()>:
c0018d80:	c3                   	ret    
c0018d81:	90                   	nop

c0018d82 <CPU::setupGlobalPages()>:
c0018d82:	0f 20 e0             	mov    eax,cr4
c0018d85:	0c 80                	or     al,0x80
c0018d87:	0f 22 e0             	mov    cr4,eax
c0018d8a:	c3                   	ret    
c0018d8b:	90                   	nop

c0018d8c <CPU::allowUsermodeDataAccess()>:
c0018d8c:	f6 05 8f d7 02 c0 40 	test   BYTE PTR ds:0xc002d78f,0x40
c0018d93:	74 03                	je     c0018d98 <CPU::allowUsermodeDataAccess()+0xc>
c0018d95:	0f 01 cb             	stac   
c0018d98:	c3                   	ret    
c0018d99:	90                   	nop

c0018d9a <CPU::prohibitUsermodeDataAccess()>:
c0018d9a:	f6 05 8f d7 02 c0 40 	test   BYTE PTR ds:0xc002d78f,0x40
c0018da1:	74 03                	je     c0018da6 <CPU::prohibitUsermodeDataAccess()+0xc>
c0018da3:	0f 01 ca             	clac   
c0018da6:	c3                   	ret    
c0018da7:	90                   	nop

c0018da8 <CPU::setupSMAP()>:
c0018da8:	0f 20 e0             	mov    eax,cr4
c0018dab:	0d 00 00 20 00       	or     eax,0x200000
c0018db0:	0f 22 e0             	mov    cr4,eax
c0018db3:	eb e5                	jmp    c0018d9a <CPU::prohibitUsermodeDataAccess()>
c0018db5:	90                   	nop

c0018db6 <CPU::setupFeatures()>:
c0018db6:	53                   	push   ebx
c0018db7:	83 ec 08             	sub    esp,0x8
c0018dba:	f6 05 8f d7 02 c0 20 	test   BYTE PTR ds:0xc002d78f,0x20
c0018dc1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018dc5:	74 18                	je     c0018ddf <CPU::setupFeatures()+0x29>
c0018dc7:	83 ec 0c             	sub    esp,0xc
c0018dca:	68 64 3d 02 c0       	push   0xc0023d64
c0018dcf:	e8 7a e1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018dd4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018dd7:	e8 54 ff ff ff       	call   c0018d30 <CPU::setupUMIP()>
c0018ddc:	83 c4 10             	add    esp,0x10
c0018ddf:	f6 05 8e d7 02 c0 08 	test   BYTE PTR ds:0xc002d78e,0x8
c0018de6:	74 18                	je     c0018e00 <CPU::setupFeatures()+0x4a>
c0018de8:	83 ec 0c             	sub    esp,0xc
c0018deb:	68 6e 3d 02 c0       	push   0xc0023d6e
c0018df0:	e8 59 e1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018df5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018df8:	e8 3d ff ff ff       	call   c0018d3a <CPU::setupTSC()>
c0018dfd:	83 c4 10             	add    esp,0x10
c0018e00:	f6 05 8e d7 02 c0 20 	test   BYTE PTR ds:0xc002d78e,0x20
c0018e07:	74 18                	je     c0018e21 <CPU::setupFeatures()+0x6b>
c0018e09:	83 ec 0c             	sub    esp,0xc
c0018e0c:	68 77 3d 02 c0       	push   0xc0023d77
c0018e11:	e8 38 e1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018e16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018e19:	e8 26 ff ff ff       	call   c0018d44 <CPU::setupLargePages()>
c0018e1e:	83 c4 10             	add    esp,0x10
c0018e21:	f6 05 8e d7 02 c0 40 	test   BYTE PTR ds:0xc002d78e,0x40
c0018e28:	74 18                	je     c0018e42 <CPU::setupFeatures()+0x8c>
c0018e2a:	83 ec 0c             	sub    esp,0xc
c0018e2d:	68 80 3d 02 c0       	push   0xc0023d80
c0018e32:	e8 17 e1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018e37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018e3a:	e8 43 ff ff ff       	call   c0018d82 <CPU::setupGlobalPages()>
c0018e3f:	83 c4 10             	add    esp,0x10
c0018e42:	f6 05 8e d7 02 c0 80 	test   BYTE PTR ds:0xc002d78e,0x80
c0018e49:	74 18                	je     c0018e63 <CPU::setupFeatures()+0xad>
c0018e4b:	83 ec 0c             	sub    esp,0xc
c0018e4e:	68 92 3d 02 c0       	push   0xc0023d92
c0018e53:	e8 f6 e0 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018e58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018e5b:	e8 ee fe ff ff       	call   c0018d4e <CPU::setupPAT()>
c0018e60:	83 c4 10             	add    esp,0x10
c0018e63:	f6 05 90 d7 02 c0 04 	test   BYTE PTR ds:0xc002d790,0x4
c0018e6a:	74 11                	je     c0018e7d <CPU::setupFeatures()+0xc7>
c0018e6c:	c7 44 24 10 9b 3d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023d9b
c0018e74:	83 c4 08             	add    esp,0x8
c0018e77:	5b                   	pop    ebx
c0018e78:	e9 d1 e0 fe ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c0018e7d:	83 c4 08             	add    esp,0x8
c0018e80:	5b                   	pop    ebx
c0018e81:	c3                   	ret    

c0018e82 <CPU::open(int, int, void*)>:
c0018e82:	55                   	push   ebp
c0018e83:	57                   	push   edi
c0018e84:	56                   	push   esi
c0018e85:	53                   	push   ebx
c0018e86:	83 ec 18             	sub    esp,0x18
c0018e89:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018e8d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018e91:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0018e95:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c0018e9b:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c0018ea1:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c0018ea7:	50                   	push   eax
c0018ea8:	e8 cd 53 ff ff       	call   c000e27a <GDT::setup()>
c0018ead:	83 c4 0c             	add    esp,0xc
c0018eb0:	6a 00                	push   0x0
c0018eb2:	68 ef be ad de       	push   0xdeadbeef
c0018eb7:	55                   	push   ebp
c0018eb8:	e8 bb 8b ff ff       	call   c0011a78 <TSS::setup(unsigned long, unsigned long)>
c0018ebd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018ec0:	e8 93 8b ff ff       	call   c0011a58 <TSS::flush()>
c0018ec5:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c0018ecb:	89 04 24             	mov    DWORD PTR [esp],eax
c0018ece:	e8 0f 56 ff ff       	call   c000e4e2 <IDT::setup()>
c0018ed3:	b8 00 04 00 00       	mov    eax,0x400
c0018ed8:	0f 23 f8             	mov    dr7,eax
c0018edb:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c0018ee5:	e8 e2 60 ff ff       	call   c000efcc <Phys::allocatePage()>
c0018eea:	83 c4 10             	add    esp,0x10
c0018eed:	85 f6                	test   esi,esi
c0018eef:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c0018ef5:	89 38                	mov    DWORD PTR [eax],edi
c0018ef7:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018efd:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0018f00:	74 10                	je     c0018f12 <CPU::open(int, int, void*)+0x90>
c0018f02:	50                   	push   eax
c0018f03:	50                   	push   eax
c0018f04:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0018f0a:	56                   	push   esi
c0018f0b:	e8 18 95 ff ff       	call   c0012428 <VAS::setCPUSpecific(unsigned long)>
c0018f10:	eb 0d                	jmp    c0018f1f <CPU::open(int, int, void*)+0x9d>
c0018f12:	83 ec 0c             	sub    esp,0xc
c0018f15:	68 a5 3d 02 c0       	push   0xc0023da5
c0018f1a:	e8 b3 5e ff ff       	call   c000edd2 <KePanic(char const*)>
c0018f1f:	83 c4 10             	add    esp,0x10
c0018f22:	83 ec 0c             	sub    esp,0xc
c0018f25:	68 b3 3d 02 c0       	push   0xc0023db3
c0018f2a:	e8 18 38 ff ff       	call   c000c747 <KeSetBootMessage(char const*)>
c0018f2f:	e8 6f fb ff ff       	call   c0018aa3 <HalInitialise()>
c0018f34:	a1 90 cd 02 c0       	mov    eax,ds:0xc002cd90
c0018f39:	83 e0 10             	and    eax,0x10
c0018f3c:	83 f8 01             	cmp    eax,0x1
c0018f3f:	19 c0                	sbb    eax,eax
c0018f41:	83 e0 46             	and    eax,0x46
c0018f44:	83 c0 1e             	add    eax,0x1e
c0018f47:	89 04 24             	mov    DWORD PTR [esp],eax
c0018f4a:	e8 de 17 ff ff       	call   c000a72d <setupTimer(int)>
c0018f4f:	83 c4 10             	add    esp,0x10
c0018f52:	f6 05 90 cd 02 c0 20 	test   BYTE PTR ds:0xc002cd90,0x20
c0018f59:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c0018f5f:	74 0c                	je     c0018f6d <CPU::open(int, int, void*)+0xeb>
c0018f61:	83 ec 0c             	sub    esp,0xc
c0018f64:	53                   	push   ebx
c0018f65:	e8 4c fe ff ff       	call   c0018db6 <CPU::setupFeatures()>
c0018f6a:	83 c4 10             	add    esp,0x10
c0018f6d:	83 c4 0c             	add    esp,0xc
c0018f70:	31 c0                	xor    eax,eax
c0018f72:	5b                   	pop    ebx
c0018f73:	5e                   	pop    esi
c0018f74:	5f                   	pop    edi
c0018f75:	5d                   	pop    ebp
c0018f76:	c3                   	ret    

c0018f77 <convertLegacyIRQNumber(int)>:
c0018f77:	83 ec 0c             	sub    esp,0xc
c0018f7a:	f6 05 8c d7 02 c0 01 	test   BYTE PTR ds:0xc002d78c,0x1
c0018f81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f85:	74 0c                	je     c0018f93 <convertLegacyIRQNumber(int)+0x1c>
c0018f87:	83 f8 0f             	cmp    eax,0xf
c0018f8a:	7f 0b                	jg     c0018f97 <convertLegacyIRQNumber(int)+0x20>
c0018f8c:	0f b6 80 a8 49 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdb658]
c0018f93:	83 c4 0c             	add    esp,0xc
c0018f96:	c3                   	ret    
c0018f97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018f9b:	83 ec 0c             	sub    esp,0xc
c0018f9e:	68 4c 3e 02 c0       	push   0xc0023e4c
c0018fa3:	e8 2a 5e ff ff       	call   c000edd2 <KePanic(char const*)>
c0018fa8:	83 c4 10             	add    esp,0x10
c0018fab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018faf:	83 c4 0c             	add    esp,0xc
c0018fb2:	c3                   	ret    

c0018fb3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c0018fb3:	56                   	push   esi
c0018fb4:	31 c0                	xor    eax,eax
c0018fb6:	53                   	push   ebx
c0018fb7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018fbb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018fbf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018fc3:	89 ca                	mov    edx,ecx
c0018fc5:	c1 e2 04             	shl    edx,0x4
c0018fc8:	83 bc 82 80 bd 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd4280],0x0
c0018fd0:	74 17                	je     c0018fe9 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c0018fd2:	83 c0 01             	add    eax,0x1
c0018fd5:	83 f8 04             	cmp    eax,0x4
c0018fd8:	75 ee                	jne    c0018fc8 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c0018fda:	c7 44 24 0c ad 3e 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023ead
c0018fe2:	5b                   	pop    ebx
c0018fe3:	5e                   	pop    esi
c0018fe4:	e9 e9 5d ff ff       	jmp    c000edd2 <KePanic(char const*)>
c0018fe9:	8d 04 88             	lea    eax,[eax+ecx*4]
c0018fec:	89 1c 85 80 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4280],ebx
c0018ff3:	5b                   	pop    ebx
c0018ff4:	89 34 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],esi
c0018ffb:	5e                   	pop    esi
c0018ffc:	c3                   	ret    

c0018ffd <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0018ffd:	55                   	push   ebp
c0018ffe:	57                   	push   edi
c0018fff:	56                   	push   esi
c0019000:	53                   	push   ebx
c0019001:	83 ec 0c             	sub    esp,0xc
c0019004:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019008:	f6 05 8c d7 02 c0 01 	test   BYTE PTR ds:0xc002d78c,0x1
c001900f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019013:	8d 6e 20             	lea    ebp,[esi+0x20]
c0019016:	74 57                	je     c001906f <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c0019018:	84 c0                	test   al,al
c001901a:	89 c7                	mov    edi,eax
c001901c:	74 1d                	je     c001903b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001901e:	83 fe 0f             	cmp    esi,0xf
c0019021:	0f 8f d9 00 00 00    	jg     c0019100 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x103>
c0019027:	0f b6 b6 a8 49 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdb658]
c001902e:	0f b7 bc 36 c0 aa 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd5540]
c0019036:	d1 ef                	shr    edi,1
c0019038:	83 e7 01             	and    edi,0x1
c001903b:	a1 e0 e0 02 c0       	mov    eax,ds:0xc002e0e0
c0019040:	83 ec 08             	sub    esp,0x8
c0019043:	31 db                	xor    ebx,ebx
c0019045:	50                   	push   eax
c0019046:	68 ba 3e 02 c0       	push   0xc0023eba
c001904b:	e8 fe de fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019050:	a1 e0 e0 02 c0       	mov    eax,ds:0xc002e0e0
c0019055:	83 c4 10             	add    esp,0x10
c0019058:	85 c0                	test   eax,eax
c001905a:	7f 59                	jg     c00190b5 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb8>
c001905c:	8d 6e 20             	lea    ebp,[esi+0x20]
c001905f:	83 ec 0c             	sub    esp,0xc
c0019062:	68 d1 3e 02 c0       	push   0xc0023ed1
c0019067:	e8 66 5d ff ff       	call   c000edd2 <KePanic(char const*)>
c001906c:	83 c4 10             	add    esp,0x10
c001906f:	89 e8                	mov    eax,ebp
c0019071:	31 d2                	xor    edx,edx
c0019073:	c1 e0 04             	shl    eax,0x4
c0019076:	8b 8c 90 80 bd 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd4280]
c001907d:	85 c9                	test   ecx,ecx
c001907f:	0f 84 92 00 00 00    	je     c0019117 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x11a>
c0019085:	83 c2 01             	add    edx,0x1
c0019088:	83 fa 04             	cmp    edx,0x4
c001908b:	75 e9                	jne    c0019076 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c001908d:	83 ec 0c             	sub    esp,0xc
c0019090:	68 88 3e 02 c0       	push   0xc0023e88
c0019095:	e8 38 5d ff ff       	call   c000edd2 <KePanic(char const*)>
c001909a:	83 c4 10             	add    esp,0x10
c001909d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00190a2:	83 c4 0c             	add    esp,0xc
c00190a5:	5b                   	pop    ebx
c00190a6:	5e                   	pop    esi
c00190a7:	5f                   	pop    edi
c00190a8:	5d                   	pop    ebp
c00190a9:	c3                   	ret    
c00190aa:	83 c3 01             	add    ebx,0x1
c00190ad:	39 1d e0 e0 02 c0    	cmp    DWORD PTR ds:0xc002e0e0,ebx
c00190b3:	7e a7                	jle    c001905c <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c00190b5:	8b 2c 9d 00 e1 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd1f00]
c00190bc:	83 ec 08             	sub    esp,0x8
c00190bf:	56                   	push   esi
c00190c0:	55                   	push   ebp
c00190c1:	e8 9e 66 00 00       	call   c001f764 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00190c6:	83 c4 10             	add    esp,0x10
c00190c9:	84 c0                	test   al,al
c00190cb:	74 dd                	je     c00190aa <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c00190cd:	89 f8                	mov    eax,edi
c00190cf:	83 ec 04             	sub    esp,0x4
c00190d2:	8b 1c 9d 00 e1 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1f00]
c00190d9:	8d 6e 20             	lea    ebp,[esi+0x20]
c00190dc:	0f b6 f8             	movzx  edi,al
c00190df:	57                   	push   edi
c00190e0:	89 e8                	mov    eax,ebp
c00190e2:	6a 00                	push   0x0
c00190e4:	0f b6 c0             	movzx  eax,al
c00190e7:	50                   	push   eax
c00190e8:	89 f0                	mov    eax,esi
c00190ea:	6a 00                	push   0x0
c00190ec:	0f b6 c0             	movzx  eax,al
c00190ef:	6a 00                	push   0x0
c00190f1:	50                   	push   eax
c00190f2:	53                   	push   ebx
c00190f3:	e8 d8 67 00 00       	call   c001f8d0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00190f8:	83 c4 20             	add    esp,0x20
c00190fb:	e9 6f ff ff ff       	jmp    c001906f <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c0019100:	83 ec 0c             	sub    esp,0xc
c0019103:	31 ff                	xor    edi,edi
c0019105:	68 4c 3e 02 c0       	push   0xc0023e4c
c001910a:	e8 c3 5c ff ff       	call   c000edd2 <KePanic(char const*)>
c001910f:	83 c4 10             	add    esp,0x10
c0019112:	e9 24 ff ff ff       	jmp    c001903b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c0019117:	8d 04 aa             	lea    eax,[edx+ebp*4]
c001911a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001911e:	89 14 85 80 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4280],edx
c0019125:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0019129:	89 14 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],edx
c0019130:	83 c4 0c             	add    esp,0xc
c0019133:	89 f0                	mov    eax,esi
c0019135:	5b                   	pop    ebx
c0019136:	5e                   	pop    esi
c0019137:	5f                   	pop    edi
c0019138:	5d                   	pop    ebp
c0019139:	c3                   	ret    

c001913a <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001913a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001913e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019142:	c1 e0 04             	shl    eax,0x4
c0019145:	8d 50 10             	lea    edx,[eax+0x10]
c0019148:	39 88 80 bd 02 c0    	cmp    DWORD PTR [eax-0x3ffd4280],ecx
c001914e:	74 08                	je     c0019158 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c0019150:	83 c0 04             	add    eax,0x4
c0019153:	39 d0                	cmp    eax,edx
c0019155:	75 f1                	jne    c0019148 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c0019157:	c3                   	ret    
c0019158:	c7 80 80 bd 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd4280],0x0
c0019162:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c001916c:	eb e2                	jmp    c0019150 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001916e <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001916e:	56                   	push   esi
c001916f:	53                   	push   ebx
c0019170:	83 ec 04             	sub    esp,0x4
c0019173:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0019178:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001917c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019180:	74 09                	je     c001918b <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0019182:	f6 05 8c d7 02 c0 01 	test   BYTE PTR ds:0xc002d78c,0x1
c0019189:	75 34                	jne    c00191bf <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x51>
c001918b:	8d 43 20             	lea    eax,[ebx+0x20]
c001918e:	c1 e0 04             	shl    eax,0x4
c0019191:	8d 50 10             	lea    edx,[eax+0x10]
c0019194:	39 b0 80 bd 02 c0    	cmp    DWORD PTR [eax-0x3ffd4280],esi
c001919a:	74 0d                	je     c00191a9 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001919c:	83 c0 04             	add    eax,0x4
c001919f:	39 d0                	cmp    eax,edx
c00191a1:	75 f1                	jne    c0019194 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x26>
c00191a3:	83 c4 04             	add    esp,0x4
c00191a6:	5b                   	pop    ebx
c00191a7:	5e                   	pop    esi
c00191a8:	c3                   	ret    
c00191a9:	c7 80 80 bd 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd4280],0x0
c00191b3:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c00191bd:	eb dd                	jmp    c001919c <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2e>
c00191bf:	83 fb 0f             	cmp    ebx,0xf
c00191c2:	7f 09                	jg     c00191cd <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x5f>
c00191c4:	0f b6 9b a8 49 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdb658]
c00191cb:	eb be                	jmp    c001918b <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00191cd:	83 ec 0c             	sub    esp,0xc
c00191d0:	68 de 3e 02 c0       	push   0xc0023ede
c00191d5:	e8 f8 5b ff ff       	call   c000edd2 <KePanic(char const*)>
c00191da:	83 c4 10             	add    esp,0x10
c00191dd:	eb ac                	jmp    c001918b <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00191df:	90                   	nop

c00191e0 <picIoWait()>:
c00191e0:	eb 00                	jmp    c00191e2 <picIoWait()+0x2>
c00191e2:	eb 00                	jmp    c00191e4 <picIoWait()+0x4>
c00191e4:	90                   	nop
c00191e5:	c3                   	ret    
c00191e6:	66 90                	xchg   ax,ax

c00191e8 <picDisable()>:
c00191e8:	83 ec 10             	sub    esp,0x10
c00191eb:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00191f2:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00191f7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00191fb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0019200:	ee                   	out    dx,al
c0019201:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0019208:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001920d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0019211:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0019216:	ee                   	out    dx,al
c0019217:	90                   	nop
c0019218:	83 c4 10             	add    esp,0x10
c001921b:	c3                   	ret    

c001921c <picGetIRQReg(int)>:
c001921c:	83 ec 10             	sub    esp,0x10
c001921f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019223:	0f b6 c0             	movzx  eax,al
c0019226:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001922d:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0019231:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0019235:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001923a:	ee                   	out    dx,al
c001923b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001923f:	0f b6 c0             	movzx  eax,al
c0019242:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0019249:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001924d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0019251:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0019256:	ee                   	out    dx,al
c0019257:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001925e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0019263:	89 c2                	mov    edx,eax
c0019265:	ec                   	in     al,dx
c0019266:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001926a:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001926e:	0f b6 c0             	movzx  eax,al
c0019271:	c1 e0 08             	shl    eax,0x8
c0019274:	89 c1                	mov    ecx,eax
c0019276:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001927d:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0019282:	89 c2                	mov    edx,eax
c0019284:	ec                   	in     al,dx
c0019285:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0019289:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001928d:	0f b6 c0             	movzx  eax,al
c0019290:	09 c8                	or     eax,ecx
c0019292:	83 c4 10             	add    esp,0x10
c0019295:	c3                   	ret    
c0019296:	66 90                	xchg   ax,ax

c0019298 <picOpen()>:
c0019298:	83 ec 50             	sub    esp,0x50
c001929b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00192a2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00192a7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00192ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00192af:	ee                   	out    dx,al
c00192b0:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00192b7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00192bc:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00192c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00192c4:	ee                   	out    dx,al
c00192c5:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00192cd:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00192d5:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00192dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00192e0:	89 c2                	mov    edx,eax
c00192e2:	ec                   	in     al,dx
c00192e3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00192e7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00192eb:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00192ef:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00192f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00192fa:	89 c2                	mov    edx,eax
c00192fc:	ec                   	in     al,dx
c00192fd:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0019301:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0019305:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0019309:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0019310:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0019315:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0019319:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001931d:	ee                   	out    dx,al
c001931e:	e8 bd fe ff ff       	call   c00191e0 <picIoWait()>
c0019323:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001932a:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001932f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0019333:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0019337:	ee                   	out    dx,al
c0019338:	e8 a3 fe ff ff       	call   c00191e0 <picIoWait()>
c001933d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0019341:	0f b6 c0             	movzx  eax,al
c0019344:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001934b:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001934f:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0019353:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019357:	ee                   	out    dx,al
c0019358:	e8 83 fe ff ff       	call   c00191e0 <picIoWait()>
c001935d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0019361:	0f b6 c0             	movzx  eax,al
c0019364:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001936b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001936f:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0019373:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0019377:	ee                   	out    dx,al
c0019378:	e8 63 fe ff ff       	call   c00191e0 <picIoWait()>
c001937d:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0019384:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0019389:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001938d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019391:	ee                   	out    dx,al
c0019392:	e8 49 fe ff ff       	call   c00191e0 <picIoWait()>
c0019397:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001939e:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00193a3:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00193a7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00193ab:	ee                   	out    dx,al
c00193ac:	e8 2f fe ff ff       	call   c00191e0 <picIoWait()>
c00193b1:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00193b8:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00193bd:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00193c1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00193c5:	ee                   	out    dx,al
c00193c6:	e8 15 fe ff ff       	call   c00191e0 <picIoWait()>
c00193cb:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00193d2:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00193d7:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00193db:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00193df:	ee                   	out    dx,al
c00193e0:	e8 fb fd ff ff       	call   c00191e0 <picIoWait()>
c00193e5:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00193ea:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00193f1:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00193f5:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00193f9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00193fd:	ee                   	out    dx,al
c00193fe:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0019403:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001940a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001940e:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0019412:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0019416:	ee                   	out    dx,al
c0019417:	90                   	nop
c0019418:	83 c4 50             	add    esp,0x50
c001941b:	c3                   	ret    

c001941c <picEOI(int)>:
c001941c:	83 ec 10             	sub    esp,0x10
c001941f:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0019424:	75 1e                	jne    c0019444 <picEOI(int)+0x28>
c0019426:	6a 0b                	push   0xb
c0019428:	e8 ef fd ff ff       	call   c001921c <picGetIRQReg(int)>
c001942d:	83 c4 04             	add    esp,0x4
c0019430:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0019435:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001943a:	25 80 00 00 00       	and    eax,0x80
c001943f:	74 73                	je     c00194b4 <picEOI(int)+0x98>
c0019441:	8d 76 00             	lea    esi,[esi+0x0]
c0019444:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0019449:	75 31                	jne    c001947c <picEOI(int)+0x60>
c001944b:	6a 0b                	push   0xb
c001944d:	e8 ca fd ff ff       	call   c001921c <picGetIRQReg(int)>
c0019452:	83 c4 04             	add    esp,0x4
c0019455:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001945a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001945e:	98                   	cwde   
c001945f:	85 c0                	test   eax,eax
c0019461:	78 19                	js     c001947c <picEOI(int)+0x60>
c0019463:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001946a:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001946f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019473:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0019478:	ee                   	out    dx,al
c0019479:	eb 3d                	jmp    c00194b8 <picEOI(int)+0x9c>
c001947b:	90                   	nop
c001947c:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0019481:	7e 19                	jle    c001949c <picEOI(int)+0x80>
c0019483:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001948a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001948f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0019493:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0019498:	ee                   	out    dx,al
c0019499:	8d 76 00             	lea    esi,[esi+0x0]
c001949c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00194a3:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00194a8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00194ac:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00194b1:	ee                   	out    dx,al
c00194b2:	eb 04                	jmp    c00194b8 <picEOI(int)+0x9c>
c00194b4:	90                   	nop
c00194b5:	8d 76 00             	lea    esi,[esi+0x0]
c00194b8:	83 c4 10             	add    esp,0x10
c00194bb:	c3                   	ret    

c00194bc <RTC::open(int, int, void*)>:
c00194bc:	31 c0                	xor    eax,eax
c00194be:	c3                   	ret    
c00194bf:	90                   	nop

c00194c0 <RTC::close(int, int, void*)>:
c00194c0:	31 c0                	xor    eax,eax
c00194c2:	c3                   	ret    
c00194c3:	90                   	nop

c00194c4 <RTC::timeInSecondsUTC()>:
c00194c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00194c8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00194ce:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00194d4:	c3                   	ret    
c00194d5:	90                   	nop

c00194d6 <RTC::timeInDatetimeUTC()>:
c00194d6:	53                   	push   ebx
c00194d7:	83 ec 14             	sub    esp,0x14
c00194da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00194de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00194e2:	8b 10                	mov    edx,DWORD PTR [eax]
c00194e4:	50                   	push   eax
c00194e5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00194e8:	83 c4 0c             	add    esp,0xc
c00194eb:	52                   	push   edx
c00194ec:	50                   	push   eax
c00194ed:	53                   	push   ebx
c00194ee:	e8 10 f9 fe ff       	call   c0008e03 <KeSecondsToDatetime(unsigned long long)>
c00194f3:	89 d8                	mov    eax,ebx
c00194f5:	83 c4 14             	add    esp,0x14
c00194f8:	5b                   	pop    ebx
c00194f9:	c2 04 00             	ret    0x4

c00194fc <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00194fc:	56                   	push   esi
c00194fd:	53                   	push   ebx
c00194fe:	83 ec 14             	sub    esp,0x14
c0019501:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019505:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019507:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001950a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001950e:	52                   	push   edx
c001950f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019513:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019517:	50                   	push   eax
c0019518:	e8 e6 f8 fe ff       	call   c0008e03 <KeSecondsToDatetime(unsigned long long)>
c001951d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0019521:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019525:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019529:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001952d:	89 f0                	mov    eax,esi
c001952f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019533:	83 c4 20             	add    esp,0x20
c0019536:	5b                   	pop    ebx
c0019537:	5e                   	pop    esi
c0019538:	ff e0                	jmp    eax

c001953a <RTC::~RTC()>:
c001953a:	83 ec 0c             	sub    esp,0xc
c001953d:	ba 08 3f 02 c0       	mov    edx,0xc0023f08
c0019542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019546:	89 10                	mov    DWORD PTR [eax],edx
c0019548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001954c:	83 ec 0c             	sub    esp,0xc
c001954f:	50                   	push   eax
c0019550:	e8 11 f6 fe ff       	call   c0008b66 <Clock::~Clock()>
c0019555:	83 c4 10             	add    esp,0x10
c0019558:	90                   	nop
c0019559:	83 c4 0c             	add    esp,0xc
c001955c:	c3                   	ret    
c001955d:	90                   	nop

c001955e <RTC::~RTC()>:
c001955e:	83 ec 0c             	sub    esp,0xc
c0019561:	83 ec 0c             	sub    esp,0xc
c0019564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019568:	e8 cd ff ff ff       	call   c001953a <RTC::~RTC()>
c001956d:	83 c4 10             	add    esp,0x10
c0019570:	83 ec 08             	sub    esp,0x8
c0019573:	68 60 01 00 00       	push   0x160
c0019578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001957c:	e8 86 32 ff ff       	call   c000c807 <operator delete(void*, unsigned long)>
c0019581:	83 c4 10             	add    esp,0x10
c0019584:	83 c4 0c             	add    esp,0xc
c0019587:	c3                   	ret    

c0019588 <RTC::get_update_in_progress_flag()>:
c0019588:	83 ec 18             	sub    esp,0x18
c001958b:	6a 0a                	push   0xa
c001958d:	e8 01 db ff ff       	call   c0017093 <x86ReadCMOS(unsigned char)>
c0019592:	83 c4 1c             	add    esp,0x1c
c0019595:	0f b6 c0             	movzx  eax,al
c0019598:	c1 e8 07             	shr    eax,0x7
c001959b:	c3                   	ret    

c001959c <RTC::completeRTCRefresh()>:
c001959c:	55                   	push   ebp
c001959d:	57                   	push   edi
c001959e:	56                   	push   esi
c001959f:	53                   	push   ebx
c00195a0:	83 ec 3c             	sub    esp,0x3c
c00195a3:	8b 1d ec a7 02 c0    	mov    ebx,DWORD PTR ds:0xc002a7ec
c00195a9:	83 ec 0c             	sub    esp,0xc
c00195ac:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00195b0:	e8 d3 ff ff ff       	call   c0019588 <RTC::get_update_in_progress_flag()>
c00195b5:	83 c4 10             	add    esp,0x10
c00195b8:	84 c0                	test   al,al
c00195ba:	74 0e                	je     c00195ca <RTC::completeRTCRefresh()+0x2e>
c00195bc:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00195c2:	3b 05 ec a7 02 c0    	cmp    eax,DWORD PTR ds:0xc002a7ec
c00195c8:	73 df                	jae    c00195a9 <RTC::completeRTCRefresh()+0xd>
c00195ca:	83 ec 0c             	sub    esp,0xc
c00195cd:	6a 00                	push   0x0
c00195cf:	e8 bf da ff ff       	call   c0017093 <x86ReadCMOS(unsigned char)>
c00195d4:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c00195db:	89 c7                	mov    edi,eax
c00195dd:	e8 b1 da ff ff       	call   c0017093 <x86ReadCMOS(unsigned char)>
c00195e2:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00195e9:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00195ed:	e8 a1 da ff ff       	call   c0017093 <x86ReadCMOS(unsigned char)>
c00195f2:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00195f9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00195fd:	e8 91 da ff ff       	call   c0017093 <x86ReadCMOS(unsigned char)>
c0019602:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019609:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001960d:	e8 81 da ff ff       	call   c0017093 <x86ReadCMOS(unsigned char)>
c0019612:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c0019619:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001961d:	e8 71 da ff ff       	call   c0017093 <x86ReadCMOS(unsigned char)>
c0019622:	0f b6 c0             	movzx  eax,al
c0019625:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0019629:	83 c4 10             	add    esp,0x10
c001962c:	8b 1d ec a7 02 c0    	mov    ebx,DWORD PTR ds:0xc002a7ec
c0019632:	83 ec 0c             	sub    esp,0xc
c0019635:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019639:	e8 4a ff ff ff       	call   c0019588 <RTC::get_update_in_progress_flag()>
c001963e:	83 c4 10             	add    esp,0x10
c0019641:	84 c0                	test   al,al
c0019643:	74 0e                	je     c0019653 <RTC::completeRTCRefresh()+0xb7>
c0019645:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001964b:	3b 05 ec a7 02 c0    	cmp    eax,DWORD PTR ds:0xc002a7ec
c0019651:	73 df                	jae    c0019632 <RTC::completeRTCRefresh()+0x96>
c0019653:	83 ec 0c             	sub    esp,0xc
c0019656:	6a 00                	push   0x0
c0019658:	e8 36 da ff ff       	call   c0017093 <x86ReadCMOS(unsigned char)>
c001965d:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0019664:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0019668:	e8 26 da ff ff       	call   c0017093 <x86ReadCMOS(unsigned char)>
c001966d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019674:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019678:	e8 16 da ff ff       	call   c0017093 <x86ReadCMOS(unsigned char)>
c001967d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019684:	88 c3                	mov    bl,al
c0019686:	e8 08 da ff ff       	call   c0017093 <x86ReadCMOS(unsigned char)>
c001968b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019692:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0019696:	e8 f8 d9 ff ff       	call   c0017093 <x86ReadCMOS(unsigned char)>
c001969b:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c00196a2:	89 c6                	mov    esi,eax
c00196a4:	e8 ea d9 ff ff       	call   c0017093 <x86ReadCMOS(unsigned char)>
c00196a9:	89 f9                	mov    ecx,edi
c00196ab:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00196af:	83 c4 10             	add    esp,0x10
c00196b2:	0f b6 e8             	movzx  ebp,al
c00196b5:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00196ba:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00196be:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00196c2:	74 27                	je     c00196eb <RTC::completeRTCRefresh()+0x14f>
c00196c4:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00196c8:	89 f0                	mov    eax,esi
c00196ca:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00196ce:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00196d2:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00196d6:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00196da:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00196de:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00196e2:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00196e6:	e9 41 ff ff ff       	jmp    c001962c <RTC::completeRTCRefresh()+0x90>
c00196eb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00196f0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00196f4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00196f8:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c00196fc:	75 c6                	jne    c00196c4 <RTC::completeRTCRefresh()+0x128>
c00196fe:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0019703:	89 f1                	mov    ecx,esi
c0019705:	0f b6 fb             	movzx  edi,bl
c0019708:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001970c:	0f b6 c9             	movzx  ecx,cl
c001970f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0019713:	89 f1                	mov    ecx,esi
c0019715:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019719:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001971d:	0f 94 c2             	sete   dl
c0019720:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0019724:	0f 94 c0             	sete   al
c0019727:	21 d0                	and    eax,edx
c0019729:	31 d2                	xor    edx,edx
c001972b:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001972f:	0f 94 c2             	sete   dl
c0019732:	85 c2                	test   edx,eax
c0019734:	74 8e                	je     c00196c4 <RTC::completeRTCRefresh()+0x128>
c0019736:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001973a:	75 88                	jne    c00196c4 <RTC::completeRTCRefresh()+0x128>
c001973c:	83 ec 0c             	sub    esp,0xc
c001973f:	6a 0b                	push   0xb
c0019741:	e8 4d d9 ff ff       	call   c0017093 <x86ReadCMOS(unsigned char)>
c0019746:	83 c4 10             	add    esp,0x10
c0019749:	a8 04                	test   al,0x4
c001974b:	75 7a                	jne    c00197c7 <RTC::completeRTCRefresh()+0x22b>
c001974d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019751:	c1 ef 04             	shr    edi,0x4
c0019754:	83 e6 0f             	and    esi,0xf
c0019757:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001975b:	c1 ed 04             	shr    ebp,0x4
c001975e:	6b ed 0a             	imul   ebp,ebp,0xa
c0019761:	c1 ea 04             	shr    edx,0x4
c0019764:	6b d2 0a             	imul   edx,edx,0xa
c0019767:	83 e1 0f             	and    ecx,0xf
c001976a:	01 d1                	add    ecx,edx
c001976c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0019770:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0019774:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019778:	c1 ea 04             	shr    edx,0x4
c001977b:	6b d2 0a             	imul   edx,edx,0xa
c001977e:	83 e1 0f             	and    ecx,0xf
c0019781:	01 d1                	add    ecx,edx
c0019783:	89 fa                	mov    edx,edi
c0019785:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0019789:	83 e2 07             	and    edx,0x7
c001978c:	89 d9                	mov    ecx,ebx
c001978e:	6b d2 0a             	imul   edx,edx,0xa
c0019791:	83 e1 0f             	and    ecx,0xf
c0019794:	83 e3 80             	and    ebx,0xffffff80
c0019797:	01 d1                	add    ecx,edx
c0019799:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001979d:	09 cb                	or     ebx,ecx
c001979f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00197a3:	c1 ea 04             	shr    edx,0x4
c00197a6:	6b d2 0a             	imul   edx,edx,0xa
c00197a9:	83 e1 0f             	and    ecx,0xf
c00197ac:	01 d1                	add    ecx,edx
c00197ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00197b2:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00197b6:	c1 ea 04             	shr    edx,0x4
c00197b9:	6b d2 0a             	imul   edx,edx,0xa
c00197bc:	01 d6                	add    esi,edx
c00197be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00197c2:	83 e2 0f             	and    edx,0xf
c00197c5:	01 d5                	add    ebp,edx
c00197c7:	a8 02                	test   al,0x2
c00197c9:	75 15                	jne    c00197e0 <RTC::completeRTCRefresh()+0x244>
c00197cb:	f6 c3 80             	test   bl,0x80
c00197ce:	74 10                	je     c00197e0 <RTC::completeRTCRefresh()+0x244>
c00197d0:	83 e3 7f             	and    ebx,0x7f
c00197d3:	b9 18 00 00 00       	mov    ecx,0x18
c00197d8:	8d 43 0c             	lea    eax,[ebx+0xc]
c00197db:	99                   	cdq    
c00197dc:	f7 f9                	idiv   ecx
c00197de:	88 d3                	mov    bl,dl
c00197e0:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00197e6:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00197ec:	77 06                	ja     c00197f4 <RTC::completeRTCRefresh()+0x258>
c00197ee:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00197f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00197f9:	31 c9                	xor    ecx,ecx
c00197fb:	31 d2                	xor    edx,edx
c00197fd:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019801:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0019805:	89 cd                	mov    ebp,ecx
c0019807:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c001980b:	c1 e7 10             	shl    edi,0x10
c001980e:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0019814:	c1 e0 10             	shl    eax,0x10
c0019817:	09 c5                	or     ebp,eax
c0019819:	89 e9                	mov    ecx,ebp
c001981b:	0f b7 c2             	movzx  eax,dx
c001981e:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0019822:	09 f8                	or     eax,edi
c0019824:	89 c2                	mov    edx,eax
c0019826:	50                   	push   eax
c0019827:	50                   	push   eax
c0019828:	88 d9                	mov    cl,bl
c001982a:	51                   	push   ecx
c001982b:	52                   	push   edx
c001982c:	e8 24 f4 fe ff       	call   c0008c55 <KeDatetimeToSeconds(datetime_t)>
c0019831:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0019835:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001983b:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0019841:	83 c4 4c             	add    esp,0x4c
c0019844:	5b                   	pop    ebx
c0019845:	5e                   	pop    esi
c0019846:	5f                   	pop    edi
c0019847:	5d                   	pop    ebp
c0019848:	c3                   	ret    
c0019849:	90                   	nop

c001984a <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001984a:	55                   	push   ebp
c001984b:	57                   	push   edi
c001984c:	56                   	push   esi
c001984d:	53                   	push   ebx
c001984e:	83 ec 34             	sub    esp,0x34
c0019851:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0019855:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0019859:	6a 00                	push   0x0
c001985b:	6a 00                	push   0x0
c001985d:	e8 85 d8 ff ff       	call   c00170e7 <x86WriteCMOS(unsigned char, unsigned char)>
c0019862:	5d                   	pop    ebp
c0019863:	89 fb                	mov    ebx,edi
c0019865:	58                   	pop    eax
c0019866:	6a 00                	push   0x0
c0019868:	6a 02                	push   0x2
c001986a:	e8 78 d8 ff ff       	call   c00170e7 <x86WriteCMOS(unsigned char, unsigned char)>
c001986f:	89 f8                	mov    eax,edi
c0019871:	89 f9                	mov    ecx,edi
c0019873:	0f b6 c4             	movzx  eax,ah
c0019876:	31 d2                	xor    edx,edx
c0019878:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001987c:	c1 e9 10             	shr    ecx,0x10
c001987f:	89 f0                	mov    eax,esi
c0019881:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0019885:	89 f0                	mov    eax,esi
c0019887:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001988b:	0f b6 c4             	movzx  eax,ah
c001988e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019892:	89 f0                	mov    eax,esi
c0019894:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0019898:	c1 e8 10             	shr    eax,0x10
c001989b:	b9 64 00 00 00       	mov    ecx,0x64
c00198a0:	f7 f1                	div    ecx
c00198a2:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c00198a9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00198ad:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00198b1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00198b5:	e8 d9 d7 ff ff       	call   c0017093 <x86ReadCMOS(unsigned char)>
c00198ba:	83 c4 10             	add    esp,0x10
c00198bd:	a8 04                	test   al,0x4
c00198bf:	89 c5                	mov    ebp,eax
c00198c1:	75 6e                	jne    c0019931 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c00198c3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00198c7:	31 d2                	xor    edx,edx
c00198c9:	0f b6 c1             	movzx  eax,cl
c00198cc:	b9 0a 00 00 00       	mov    ecx,0xa
c00198d1:	f7 f1                	div    ecx
c00198d3:	c1 e0 04             	shl    eax,0x4
c00198d6:	09 d0                	or     eax,edx
c00198d8:	31 d2                	xor    edx,edx
c00198da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00198de:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00198e3:	f7 f1                	div    ecx
c00198e5:	c1 e0 04             	shl    eax,0x4
c00198e8:	09 d0                	or     eax,edx
c00198ea:	31 d2                	xor    edx,edx
c00198ec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00198f0:	0f b6 c3             	movzx  eax,bl
c00198f3:	f7 f1                	div    ecx
c00198f5:	c1 e0 04             	shl    eax,0x4
c00198f8:	09 d0                	or     eax,edx
c00198fa:	31 d2                	xor    edx,edx
c00198fc:	89 c3                	mov    ebx,eax
c00198fe:	89 f0                	mov    eax,esi
c0019900:	0f b6 c0             	movzx  eax,al
c0019903:	f7 f1                	div    ecx
c0019905:	c1 e0 04             	shl    eax,0x4
c0019908:	09 d0                	or     eax,edx
c001990a:	31 d2                	xor    edx,edx
c001990c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019910:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019915:	f7 f1                	div    ecx
c0019917:	c1 e0 04             	shl    eax,0x4
c001991a:	09 d0                	or     eax,edx
c001991c:	31 d2                	xor    edx,edx
c001991e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019922:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019926:	f7 f1                	div    ecx
c0019928:	c1 e0 04             	shl    eax,0x4
c001992b:	09 d0                	or     eax,edx
c001992d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019931:	83 e5 02             	and    ebp,0x2
c0019934:	75 1e                	jne    c0019954 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c0019936:	0f b6 c3             	movzx  eax,bl
c0019939:	83 f8 0b             	cmp    eax,0xb
c001993c:	76 10                	jbe    c001994e <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001993e:	8d 53 f4             	lea    edx,[ebx-0xc]
c0019941:	84 d2                	test   dl,dl
c0019943:	88 d3                	mov    bl,dl
c0019945:	75 02                	jne    c0019949 <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c0019947:	b3 0c                	mov    bl,0xc
c0019949:	83 cb 80             	or     ebx,0xffffff80
c001994c:	eb 06                	jmp    c0019954 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001994e:	85 c0                	test   eax,eax
c0019950:	75 02                	jne    c0019954 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c0019952:	b3 0c                	mov    bl,0xc
c0019954:	50                   	push   eax
c0019955:	0f b6 db             	movzx  ebx,bl
c0019958:	50                   	push   eax
c0019959:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001995e:	52                   	push   edx
c001995f:	6a 00                	push   0x0
c0019961:	e8 81 d7 ff ff       	call   c00170e7 <x86WriteCMOS(unsigned char, unsigned char)>
c0019966:	5a                   	pop    edx
c0019967:	59                   	pop    ecx
c0019968:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001996d:	50                   	push   eax
c001996e:	6a 02                	push   0x2
c0019970:	e8 72 d7 ff ff       	call   c00170e7 <x86WriteCMOS(unsigned char, unsigned char)>
c0019975:	5e                   	pop    esi
c0019976:	5f                   	pop    edi
c0019977:	53                   	push   ebx
c0019978:	6a 04                	push   0x4
c001997a:	e8 68 d7 ff ff       	call   c00170e7 <x86WriteCMOS(unsigned char, unsigned char)>
c001997f:	5d                   	pop    ebp
c0019980:	58                   	pop    eax
c0019981:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0019986:	52                   	push   edx
c0019987:	6a 07                	push   0x7
c0019989:	e8 59 d7 ff ff       	call   c00170e7 <x86WriteCMOS(unsigned char, unsigned char)>
c001998e:	58                   	pop    eax
c001998f:	5a                   	pop    edx
c0019990:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0019995:	50                   	push   eax
c0019996:	6a 08                	push   0x8
c0019998:	e8 4a d7 ff ff       	call   c00170e7 <x86WriteCMOS(unsigned char, unsigned char)>
c001999d:	59                   	pop    ecx
c001999e:	5b                   	pop    ebx
c001999f:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00199a4:	55                   	push   ebp
c00199a5:	6a 09                	push   0x9
c00199a7:	e8 3b d7 ff ff       	call   c00170e7 <x86WriteCMOS(unsigned char, unsigned char)>
c00199ac:	5e                   	pop    esi
c00199ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00199b1:	e8 e6 fb ff ff       	call   c001959c <RTC::completeRTCRefresh()>
c00199b6:	83 c4 3c             	add    esp,0x3c
c00199b9:	b0 01                	mov    al,0x1
c00199bb:	5b                   	pop    ebx
c00199bc:	5e                   	pop    esi
c00199bd:	5f                   	pop    edi
c00199be:	5d                   	pop    ebp
c00199bf:	c3                   	ret    

c00199c0 <rtcIRQHandler(regs*, void*)>:
c00199c0:	53                   	push   ebx
c00199c1:	83 ec 14             	sub    esp,0x14
c00199c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00199c8:	6a 0c                	push   0xc
c00199ca:	e8 c4 d6 ff ff       	call   c0017093 <x86ReadCMOS(unsigned char)>
c00199cf:	83 c4 10             	add    esp,0x10
c00199d2:	a8 80                	test   al,0x80
c00199d4:	74 24                	je     c00199fa <rtcIRQHandler(regs*, void*)+0x3a>
c00199d6:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00199dd:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00199e4:	66 ff 05 94 d7 02 c0 	inc    WORD PTR ds:0xc002d794
c00199eb:	75 0d                	jne    c00199fa <rtcIRQHandler(regs*, void*)+0x3a>
c00199ed:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00199f1:	83 c4 08             	add    esp,0x8
c00199f4:	5b                   	pop    ebx
c00199f5:	e9 a2 fb ff ff       	jmp    c001959c <RTC::completeRTCRefresh()>
c00199fa:	83 c4 08             	add    esp,0x8
c00199fd:	5b                   	pop    ebx
c00199fe:	c3                   	ret    
c00199ff:	90                   	nop

c0019a00 <RTC::RTC()>:
c0019a00:	83 ec 1c             	sub    esp,0x1c
c0019a03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a07:	83 ec 08             	sub    esp,0x8
c0019a0a:	68 eb 3e 02 c0       	push   0xc0023eeb
c0019a0f:	50                   	push   eax
c0019a10:	e8 1b f1 fe ff       	call   c0008b30 <Clock::Clock(char const*)>
c0019a15:	83 c4 10             	add    esp,0x10
c0019a18:	ba 08 3f 02 c0       	mov    edx,0xc0023f08
c0019a1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a21:	89 10                	mov    DWORD PTR [eax],edx
c0019a23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a27:	83 ec 0c             	sub    esp,0xc
c0019a2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019a2e:	6a 01                	push   0x1
c0019a30:	68 c0 99 01 c0       	push   0xc00199c0
c0019a35:	6a 08                	push   0x8
c0019a37:	50                   	push   eax
c0019a38:	e8 01 f6 fe ff       	call   c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019a3d:	83 c4 20             	add    esp,0x20
c0019a40:	89 c2                	mov    edx,eax
c0019a42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a46:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0019a4c:	fa                   	cli    
c0019a4d:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0019a52:	83 c0 01             	add    eax,0x1
c0019a55:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0019a5a:	83 ec 0c             	sub    esp,0xc
c0019a5d:	6a 0b                	push   0xb
c0019a5f:	e8 2f d6 ff ff       	call   c0017093 <x86ReadCMOS(unsigned char)>
c0019a64:	83 c4 10             	add    esp,0x10
c0019a67:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019a6b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019a6f:	83 c8 10             	or     eax,0x10
c0019a72:	0f b6 c0             	movzx  eax,al
c0019a75:	83 ec 08             	sub    esp,0x8
c0019a78:	50                   	push   eax
c0019a79:	6a 0b                	push   0xb
c0019a7b:	e8 67 d6 ff ff       	call   c00170e7 <x86WriteCMOS(unsigned char, unsigned char)>
c0019a80:	83 c4 10             	add    esp,0x10
c0019a83:	83 ec 0c             	sub    esp,0xc
c0019a86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019a8a:	e8 0d fb ff ff       	call   c001959c <RTC::completeRTCRefresh()>
c0019a8f:	83 c4 10             	add    esp,0x10
c0019a92:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0019a9a:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0019a9f:	85 c0                	test   eax,eax
c0019aa1:	75 01                	jne    c0019aa4 <RTC::RTC()+0xa4>
c0019aa3:	fb                   	sti    
c0019aa4:	90                   	nop
c0019aa5:	83 c4 1c             	add    esp,0x1c
c0019aa8:	c3                   	ret    
c0019aa9:	66 90                	xchg   ax,ax
c0019aab:	90                   	nop

c0019aac <HalConsoleScroll(int, int)>:
c0019aac:	83 ec 10             	sub    esp,0x10
c0019aaf:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0019ab7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0019abf:	90                   	nop
c0019ac0:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0019ac5:	0f 8f e1 00 00 00    	jg     c0019bac <HalConsoleScroll(int, int)+0x100>
c0019acb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019ad3:	90                   	nop
c0019ad4:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0019adc:	0f 8f be 00 00 00    	jg     c0019ba0 <HalConsoleScroll(int, int)+0xf4>
c0019ae2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019ae6:	89 d0                	mov    eax,edx
c0019ae8:	c1 e0 02             	shl    eax,0x2
c0019aeb:	01 d0                	add    eax,edx
c0019aed:	c1 e0 05             	shl    eax,0x5
c0019af0:	89 c2                	mov    edx,eax
c0019af2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019af6:	01 d0                	add    eax,edx
c0019af8:	89 c2                	mov    edx,eax
c0019afa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019afe:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0019b01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019b05:	89 d0                	mov    eax,edx
c0019b07:	c1 e0 02             	shl    eax,0x2
c0019b0a:	01 d0                	add    eax,edx
c0019b0c:	c1 e0 05             	shl    eax,0x5
c0019b0f:	89 c2                	mov    edx,eax
c0019b11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b15:	01 d0                	add    eax,edx
c0019b17:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0019b1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b21:	01 d0                	add    eax,edx
c0019b23:	8a 11                	mov    dl,BYTE PTR [ecx]
c0019b25:	88 10                	mov    BYTE PTR [eax],dl
c0019b27:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0019b2c:	75 66                	jne    c0019b94 <HalConsoleScroll(int, int)+0xe8>
c0019b2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b32:	83 e0 01             	and    eax,0x1
c0019b35:	74 39                	je     c0019b70 <HalConsoleScroll(int, int)+0xc4>
c0019b37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019b3b:	83 e0 0f             	and    eax,0xf
c0019b3e:	88 c2                	mov    dl,al
c0019b40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019b44:	c1 e0 04             	shl    eax,0x4
c0019b47:	09 d0                	or     eax,edx
c0019b49:	88 c1                	mov    cl,al
c0019b4b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019b4f:	89 d0                	mov    eax,edx
c0019b51:	c1 e0 02             	shl    eax,0x2
c0019b54:	01 d0                	add    eax,edx
c0019b56:	c1 e0 05             	shl    eax,0x5
c0019b59:	89 c2                	mov    edx,eax
c0019b5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b5f:	01 d0                	add    eax,edx
c0019b61:	89 c2                	mov    edx,eax
c0019b63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b67:	01 d0                	add    eax,edx
c0019b69:	88 ca                	mov    dl,cl
c0019b6b:	88 10                	mov    BYTE PTR [eax],dl
c0019b6d:	eb 25                	jmp    c0019b94 <HalConsoleScroll(int, int)+0xe8>
c0019b6f:	90                   	nop
c0019b70:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019b74:	89 d0                	mov    eax,edx
c0019b76:	c1 e0 02             	shl    eax,0x2
c0019b79:	01 d0                	add    eax,edx
c0019b7b:	c1 e0 05             	shl    eax,0x5
c0019b7e:	89 c2                	mov    edx,eax
c0019b80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b84:	01 d0                	add    eax,edx
c0019b86:	89 c2                	mov    edx,eax
c0019b88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b8c:	01 d0                	add    eax,edx
c0019b8e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0019b91:	8d 76 00             	lea    esi,[esi+0x0]
c0019b94:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0019b99:	e9 36 ff ff ff       	jmp    c0019ad4 <HalConsoleScroll(int, int)+0x28>
c0019b9e:	66 90                	xchg   ax,ax
c0019ba0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019ba5:	e9 16 ff ff ff       	jmp    c0019ac0 <HalConsoleScroll(int, int)+0x14>
c0019baa:	66 90                	xchg   ax,ax
c0019bac:	90                   	nop
c0019bad:	83 c4 10             	add    esp,0x10
c0019bb0:	c3                   	ret    
c0019bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0019bb4 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0019bb4:	83 ec 14             	sub    esp,0x14
c0019bb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019bbb:	88 04 24             	mov    BYTE PTR [esp],al
c0019bbe:	8a 04 24             	mov    al,BYTE PTR [esp]
c0019bc1:	0f b6 c0             	movzx  eax,al
c0019bc4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019bc8:	89 d1                	mov    ecx,edx
c0019bca:	83 e1 0f             	and    ecx,0xf
c0019bcd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019bd1:	c1 e2 04             	shl    edx,0x4
c0019bd4:	0f b6 d2             	movzx  edx,dl
c0019bd7:	09 ca                	or     edx,ecx
c0019bd9:	c1 e2 08             	shl    edx,0x8
c0019bdc:	09 d0                	or     eax,edx
c0019bde:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0019be3:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0019beb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019bef:	89 d0                	mov    eax,edx
c0019bf1:	c1 e0 02             	shl    eax,0x2
c0019bf4:	01 d0                	add    eax,edx
c0019bf6:	c1 e0 04             	shl    eax,0x4
c0019bf9:	89 c2                	mov    edx,eax
c0019bfb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019bff:	01 d0                	add    eax,edx
c0019c01:	d1 e0                	shl    eax,1
c0019c03:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0019c07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019c0b:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0019c10:	66 89 10             	mov    WORD PTR [eax],dx
c0019c13:	90                   	nop
c0019c14:	83 c4 14             	add    esp,0x14
c0019c17:	c3                   	ret    

c0019c18 <HalConsoleCursorUpdate(int, int)>:
c0019c18:	83 ec 20             	sub    esp,0x20
c0019c1b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019c1f:	89 c2                	mov    edx,eax
c0019c21:	c1 e2 02             	shl    edx,0x2
c0019c24:	01 d0                	add    eax,edx
c0019c26:	c1 e0 04             	shl    eax,0x4
c0019c29:	89 c2                	mov    edx,eax
c0019c2b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019c2f:	01 d0                	add    eax,edx
c0019c31:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0019c36:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0019c3d:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0019c42:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019c46:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c4a:	ee                   	out    dx,al
c0019c4b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0019c50:	0f b6 c0             	movzx  eax,al
c0019c53:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0019c5a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0019c5e:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0019c62:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019c66:	ee                   	out    dx,al
c0019c67:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0019c6e:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0019c73:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0019c77:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019c7b:	ee                   	out    dx,al
c0019c7c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0019c81:	c1 e8 08             	shr    eax,0x8
c0019c84:	0f b6 c0             	movzx  eax,al
c0019c87:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0019c8e:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0019c92:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0019c96:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019c9a:	ee                   	out    dx,al
c0019c9b:	90                   	nop
c0019c9c:	83 c4 20             	add    esp,0x20
c0019c9f:	c3                   	ret    

c0019ca0 <FAT::getName()>:
c0019ca0:	b8 3c 3f 02 c0       	mov    eax,0xc0023f3c
c0019ca5:	c3                   	ret    
c0019ca6:	66 90                	xchg   ax,ax

c0019ca8 <FAT::tell(void*, unsigned long long*)>:
c0019ca8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019cad:	75 09                	jne    c0019cb8 <FAT::tell(void*, unsigned long long*)+0x10>
c0019caf:	b8 04 00 00 00       	mov    eax,0x4
c0019cb4:	c3                   	ret    
c0019cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0019cb8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019cbd:	75 09                	jne    c0019cc8 <FAT::tell(void*, unsigned long long*)+0x20>
c0019cbf:	b8 04 00 00 00       	mov    eax,0x4
c0019cc4:	c3                   	ret    
c0019cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0019cc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ccc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019ccf:	ba 00 00 00 00       	mov    edx,0x0
c0019cd4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019cd8:	89 01                	mov    DWORD PTR [ecx],eax
c0019cda:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019cdd:	b8 00 00 00 00       	mov    eax,0x0
c0019ce2:	c3                   	ret    
c0019ce3:	90                   	nop

c0019ce4 <FAT::stat(void*, unsigned long long*)>:
c0019ce4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019ce9:	75 09                	jne    c0019cf4 <FAT::stat(void*, unsigned long long*)+0x10>
c0019ceb:	b8 04 00 00 00       	mov    eax,0x4
c0019cf0:	c3                   	ret    
c0019cf1:	8d 76 00             	lea    esi,[esi+0x0]
c0019cf4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019cf9:	75 09                	jne    c0019d04 <FAT::stat(void*, unsigned long long*)+0x20>
c0019cfb:	b8 04 00 00 00       	mov    eax,0x4
c0019d00:	c3                   	ret    
c0019d01:	8d 76 00             	lea    esi,[esi+0x0]
c0019d04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d08:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019d0b:	ba 00 00 00 00       	mov    edx,0x0
c0019d10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019d14:	89 01                	mov    DWORD PTR [ecx],eax
c0019d16:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019d19:	b8 00 00 00 00       	mov    eax,0x0
c0019d1e:	c3                   	ret    
c0019d1f:	90                   	nop

c0019d20 <FAT::~FAT()>:
c0019d20:	83 ec 0c             	sub    esp,0xc
c0019d23:	ba 88 3f 02 c0       	mov    edx,0xc0023f88
c0019d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d2c:	89 10                	mov    DWORD PTR [eax],edx
c0019d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d32:	83 ec 0c             	sub    esp,0xc
c0019d35:	50                   	push   eax
c0019d36:	e8 3f e0 fe ff       	call   c0007d7a <Filesystem::~Filesystem()>
c0019d3b:	83 c4 10             	add    esp,0x10
c0019d3e:	90                   	nop
c0019d3f:	83 c4 0c             	add    esp,0xc
c0019d42:	c3                   	ret    
c0019d43:	90                   	nop

c0019d44 <FAT::~FAT()>:
c0019d44:	83 ec 0c             	sub    esp,0xc
c0019d47:	83 ec 0c             	sub    esp,0xc
c0019d4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d4e:	e8 cd ff ff ff       	call   c0019d20 <FAT::~FAT()>
c0019d53:	83 c4 10             	add    esp,0x10
c0019d56:	83 ec 08             	sub    esp,0x8
c0019d59:	6a 08                	push   0x8
c0019d5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d5f:	e8 a3 2a ff ff       	call   c000c807 <operator delete(void*, unsigned long)>
c0019d64:	83 c4 10             	add    esp,0x10
c0019d67:	83 c4 0c             	add    esp,0xc
c0019d6a:	c3                   	ret    
c0019d6b:	90                   	nop

c0019d6c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019d6c:	83 ec 1c             	sub    esp,0x1c
c0019d6f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019d76:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019d7b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019d7f:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019d86:	83 f8 ff             	cmp    eax,0xffffffff
c0019d89:	75 35                	jne    c0019dc0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0019d8b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019d8f:	88 c2                	mov    dl,al
c0019d91:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019d96:	01 d0                	add    eax,edx
c0019d98:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019d9c:	8b 15 a0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7a0
c0019da2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019da6:	89 14 85 c0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2840],edx
c0019dad:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019db2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019db6:	89 14 85 40 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27c0],edx
c0019dbd:	eb 19                	jmp    c0019dd8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0019dbf:	90                   	nop
c0019dc0:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019dc4:	88 c2                	mov    dl,al
c0019dc6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019dca:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019dd1:	01 d0                	add    eax,edx
c0019dd3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019dd7:	90                   	nop
c0019dd8:	83 ec 04             	sub    esp,0x4
c0019ddb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019ddf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019de3:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019de7:	50                   	push   eax
c0019de8:	e8 e7 b3 fe ff       	call   c00051d4 <f_getlabel>
c0019ded:	83 c4 10             	add    esp,0x10
c0019df0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019df4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019df9:	75 09                	jne    c0019e04 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0019dfb:	b8 00 00 00 00       	mov    eax,0x0
c0019e00:	eb 0a                	jmp    c0019e0c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0019e02:	66 90                	xchg   ax,ax
c0019e04:	b8 01 00 00 00       	mov    eax,0x1
c0019e09:	8d 76 00             	lea    esi,[esi+0x0]
c0019e0c:	83 c4 1c             	add    esp,0x1c
c0019e0f:	c3                   	ret    

c0019e10 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019e10:	53                   	push   ebx
c0019e11:	83 ec 58             	sub    esp,0x58
c0019e14:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019e1c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019e20:	b9 00 00 00 00       	mov    ecx,0x0
c0019e25:	b8 3c 00 00 00       	mov    eax,0x3c
c0019e2a:	83 e0 f8             	and    eax,0xfffffff8
c0019e2d:	89 c3                	mov    ebx,eax
c0019e2f:	b8 00 00 00 00       	mov    eax,0x0
c0019e34:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0019e38:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0019e3c:	83 c0 08             	add    eax,0x8
c0019e3f:	39 d8                	cmp    eax,ebx
c0019e41:	72 f1                	jb     c0019e34 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0019e43:	01 c2                	add    edx,eax
c0019e45:	89 0a                	mov    DWORD PTR [edx],ecx
c0019e47:	83 c2 04             	add    edx,0x4
c0019e4a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019e4e:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019e55:	83 f8 ff             	cmp    eax,0xffffffff
c0019e58:	75 36                	jne    c0019e90 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0019e5a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019e5e:	88 c2                	mov    dl,al
c0019e60:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019e65:	01 d0                	add    eax,edx
c0019e67:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019e6b:	8b 15 a0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7a0
c0019e71:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019e75:	89 14 85 c0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2840],edx
c0019e7c:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019e81:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019e85:	89 14 85 40 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27c0],edx
c0019e8c:	eb 1a                	jmp    c0019ea8 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0019e8e:	66 90                	xchg   ax,ax
c0019e90:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019e94:	88 c2                	mov    dl,al
c0019e96:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019e9a:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019ea1:	01 d0                	add    eax,edx
c0019ea3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019ea7:	90                   	nop
c0019ea8:	83 ec 08             	sub    esp,0x8
c0019eab:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019eaf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019eb3:	50                   	push   eax
c0019eb4:	e8 b7 69 fe ff       	call   c0000870 <strcat>
c0019eb9:	83 c4 10             	add    esp,0x10
c0019ebc:	83 ec 0c             	sub    esp,0xc
c0019ebf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ec3:	50                   	push   eax
c0019ec4:	e8 5f b4 fe ff       	call   c0005328 <f_setlabel>
c0019ec9:	83 c4 10             	add    esp,0x10
c0019ecc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019ed0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019ed5:	75 09                	jne    c0019ee0 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0019ed7:	b8 00 00 00 00       	mov    eax,0x0
c0019edc:	eb 0a                	jmp    c0019ee8 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0019ede:	66 90                	xchg   ax,ax
c0019ee0:	b8 01 00 00 00       	mov    eax,0x1
c0019ee5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ee8:	83 c4 58             	add    esp,0x58
c0019eeb:	5b                   	pop    ebx
c0019eec:	c3                   	ret    
c0019eed:	90                   	nop
c0019eee:	66 90                	xchg   ax,ax

c0019ef0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019ef0:	83 ec 2c             	sub    esp,0x2c
c0019ef3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019efb:	83 ec 08             	sub    esp,0x8
c0019efe:	68 60 3f 02 c0       	push   0xc0023f60
c0019f03:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019f07:	e8 74 68 fe ff       	call   c0000780 <strcmp>
c0019f0c:	83 c4 10             	add    esp,0x10
c0019f0f:	85 c0                	test   eax,eax
c0019f11:	0f 94 c0             	sete   al
c0019f14:	0f b6 c0             	movzx  eax,al
c0019f17:	85 c0                	test   eax,eax
c0019f19:	74 0d                	je     c0019f28 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0019f1b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019f23:	e9 c0 00 00 00       	jmp    c0019fe8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019f28:	83 ec 08             	sub    esp,0x8
c0019f2b:	68 52 3f 02 c0       	push   0xc0023f52
c0019f30:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019f34:	e8 47 68 fe ff       	call   c0000780 <strcmp>
c0019f39:	83 c4 10             	add    esp,0x10
c0019f3c:	85 c0                	test   eax,eax
c0019f3e:	0f 94 c0             	sete   al
c0019f41:	0f b6 c0             	movzx  eax,al
c0019f44:	85 c0                	test   eax,eax
c0019f46:	74 10                	je     c0019f58 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0019f48:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019f50:	e9 93 00 00 00       	jmp    c0019fe8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019f55:	8d 76 00             	lea    esi,[esi+0x0]
c0019f58:	83 ec 08             	sub    esp,0x8
c0019f5b:	68 58 3f 02 c0       	push   0xc0023f58
c0019f60:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019f64:	e8 17 68 fe ff       	call   c0000780 <strcmp>
c0019f69:	83 c4 10             	add    esp,0x10
c0019f6c:	85 c0                	test   eax,eax
c0019f6e:	0f 94 c0             	sete   al
c0019f71:	0f b6 c0             	movzx  eax,al
c0019f74:	85 c0                	test   eax,eax
c0019f76:	74 0c                	je     c0019f84 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0019f78:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019f80:	eb 66                	jmp    c0019fe8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019f82:	66 90                	xchg   ax,ax
c0019f84:	83 ec 08             	sub    esp,0x8
c0019f87:	68 5c 11 02 c0       	push   0xc002115c
c0019f8c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019f90:	e8 eb 67 fe ff       	call   c0000780 <strcmp>
c0019f95:	83 c4 10             	add    esp,0x10
c0019f98:	85 c0                	test   eax,eax
c0019f9a:	0f 94 c0             	sete   al
c0019f9d:	0f b6 c0             	movzx  eax,al
c0019fa0:	85 c0                	test   eax,eax
c0019fa2:	74 0c                	je     c0019fb0 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0019fa4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019fac:	eb 3a                	jmp    c0019fe8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019fae:	66 90                	xchg   ax,ax
c0019fb0:	83 ec 08             	sub    esp,0x8
c0019fb3:	68 5e 3f 02 c0       	push   0xc0023f5e
c0019fb8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019fbc:	e8 bf 67 fe ff       	call   c0000780 <strcmp>
c0019fc1:	83 c4 10             	add    esp,0x10
c0019fc4:	85 c0                	test   eax,eax
c0019fc6:	0f 94 c0             	sete   al
c0019fc9:	0f b6 c0             	movzx  eax,al
c0019fcc:	85 c0                	test   eax,eax
c0019fce:	74 0c                	je     c0019fdc <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0019fd0:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019fd8:	eb 0e                	jmp    c0019fe8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019fda:	66 90                	xchg   ax,ax
c0019fdc:	b8 08 00 00 00       	mov    eax,0x8
c0019fe1:	e9 ea 00 00 00       	jmp    c001a0d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019fe6:	66 90                	xchg   ax,ax
c0019fe8:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019fef:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019ff4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019ff8:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019fff:	83 f8 ff             	cmp    eax,0xffffffff
c001a002:	75 34                	jne    c001a038 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001a004:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a008:	88 c2                	mov    dl,al
c001a00a:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c001a00f:	01 d0                	add    eax,edx
c001a011:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a015:	8b 15 a0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7a0
c001a01b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a01f:	89 14 85 c0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2840],edx
c001a026:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c001a02b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a02f:	89 14 85 40 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27c0],edx
c001a036:	eb 18                	jmp    c001a050 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001a038:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a03c:	88 c2                	mov    dl,al
c001a03e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a042:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c001a049:	01 d0                	add    eax,edx
c001a04b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a04f:	90                   	nop
c001a050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a054:	88 04 24             	mov    BYTE PTR [esp],al
c001a057:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a05b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a05f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a067:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a06c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a074:	83 ec 0c             	sub    esp,0xc
c001a077:	68 00 20 00 00       	push   0x2000
c001a07c:	e8 0b 4a ff ff       	call   c000ea8c <malloc>
c001a081:	83 c4 10             	add    esp,0x10
c001a084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a088:	68 00 20 00 00       	push   0x2000
c001a08d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a091:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a095:	50                   	push   eax
c001a096:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a09a:	50                   	push   eax
c001a09b:	e8 85 b5 fe ff       	call   c0005625 <f_mkfs>
c001a0a0:	83 c4 10             	add    esp,0x10
c001a0a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a0a7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a0ac:	75 0a                	jne    c001a0b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001a0ae:	b8 00 00 00 00       	mov    eax,0x0
c001a0b3:	eb 1b                	jmp    c001a0d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001a0b5:	8d 76 00             	lea    esi,[esi+0x0]
c001a0b8:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a0bd:	75 09                	jne    c001a0c8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001a0bf:	b8 09 00 00 00       	mov    eax,0x9
c001a0c4:	eb 0a                	jmp    c001a0d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001a0c6:	66 90                	xchg   ax,ax
c001a0c8:	b8 01 00 00 00       	mov    eax,0x1
c001a0cd:	8d 76 00             	lea    esi,[esi+0x0]
c001a0d0:	83 c4 2c             	add    esp,0x2c
c001a0d3:	c3                   	ret    

c001a0d4 <FAT::tryMount(LogicalDisk*, int)>:
c001a0d4:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001a0da:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c001a0df:	83 f8 14             	cmp    eax,0x14
c001a0e2:	75 18                	jne    c001a0fc <FAT::tryMount(LogicalDisk*, int)+0x28>
c001a0e4:	83 ec 0c             	sub    esp,0xc
c001a0e7:	68 64 3f 02 c0       	push   0xc0023f64
c001a0ec:	e8 e1 4c ff ff       	call   c000edd2 <KePanic(char const*)>
c001a0f1:	83 c4 10             	add    esp,0x10
c001a0f4:	b0 00                	mov    al,0x0
c001a0f6:	e9 ed 01 00 00       	jmp    c001a2e8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001a0fb:	90                   	nop
c001a0fc:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001a103:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a109:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a10f:	3d 00 02 00 00       	cmp    eax,0x200
c001a114:	74 0a                	je     c001a120 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001a116:	b0 00                	mov    al,0x0
c001a118:	e9 cb 01 00 00       	jmp    c001a2e8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001a11d:	8d 76 00             	lea    esi,[esi+0x0]
c001a120:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001a128:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001a12f:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c001a136:	83 f8 ff             	cmp    eax,0xffffffff
c001a139:	74 09                	je     c001a144 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001a13b:	b0 01                	mov    al,0x1
c001a13d:	e9 a6 01 00 00       	jmp    c001a2e8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001a142:	66 90                	xchg   ax,ax
c001a144:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001a14e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001a156:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001a15d:	88 c2                	mov    dl,al
c001a15f:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c001a164:	01 d0                	add    eax,edx
c001a166:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001a16d:	8b 15 a0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7a0
c001a173:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001a17a:	89 14 85 c0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2840],edx
c001a181:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c001a186:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001a18d:	89 14 85 40 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27c0],edx
c001a194:	83 ec 0c             	sub    esp,0xc
c001a197:	68 34 02 00 00       	push   0x234
c001a19c:	e8 eb 48 ff ff       	call   c000ea8c <malloc>
c001a1a1:	83 c4 10             	add    esp,0x10
c001a1a4:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001a1ab:	83 ec 04             	sub    esp,0x4
c001a1ae:	6a 00                	push   0x0
c001a1b0:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001a1b7:	50                   	push   eax
c001a1b8:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001a1bf:	e8 5b 9c fe ff       	call   c0003e1f <f_mount>
c001a1c4:	83 c4 10             	add    esp,0x10
c001a1c7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001a1ce:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001a1d6:	74 1c                	je     c001a1f4 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001a1d8:	83 ec 0c             	sub    esp,0xc
c001a1db:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001a1e2:	e8 c5 48 ff ff       	call   c000eaac <rfree>
c001a1e7:	83 c4 10             	add    esp,0x10
c001a1ea:	b0 00                	mov    al,0x0
c001a1ec:	e9 f7 00 00 00       	jmp    c001a2e8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001a1f1:	8d 76 00             	lea    esi,[esi+0x0]
c001a1f4:	83 ec 04             	sub    esp,0x4
c001a1f7:	68 00 01 00 00       	push   0x100
c001a1fc:	6a 00                	push   0x0
c001a1fe:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001a205:	50                   	push   eax
c001a206:	e8 e5 62 fe ff       	call   c00004f0 <memset>
c001a20b:	83 c4 10             	add    esp,0x10
c001a20e:	83 ec 08             	sub    esp,0x8
c001a211:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001a218:	50                   	push   eax
c001a219:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001a220:	50                   	push   eax
c001a221:	e8 4a 66 fe ff       	call   c0000870 <strcat>
c001a226:	83 c4 10             	add    esp,0x10
c001a229:	83 ec 08             	sub    esp,0x8
c001a22c:	68 72 3f 02 c0       	push   0xc0023f72
c001a231:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001a238:	50                   	push   eax
c001a239:	e8 32 66 fe ff       	call   c0000870 <strcat>
c001a23e:	83 c4 10             	add    esp,0x10
c001a241:	83 ec 04             	sub    esp,0x4
c001a244:	6a 01                	push   0x1
c001a246:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001a24d:	50                   	push   eax
c001a24e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a252:	50                   	push   eax
c001a253:	e8 29 9c fe ff       	call   c0003e81 <f_open>
c001a258:	83 c4 10             	add    esp,0x10
c001a25b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001a262:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001a269:	85 c0                	test   eax,eax
c001a26b:	74 0b                	je     c001a278 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001a26d:	78 31                	js     c001a2a0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001a26f:	83 e8 04             	sub    eax,0x4
c001a272:	83 f8 01             	cmp    eax,0x1
c001a275:	77 29                	ja     c001a2a0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001a277:	90                   	nop
c001a278:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001a280:	83 ec 0c             	sub    esp,0xc
c001a283:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a287:	50                   	push   eax
c001a288:	e8 a4 a3 fe ff       	call   c0004631 <f_close>
c001a28d:	83 c4 10             	add    esp,0x10
c001a290:	90                   	nop
c001a291:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001a299:	85 c0                	test   eax,eax
c001a29b:	74 43                	je     c001a2e0 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001a29d:	eb 31                	jmp    c001a2d0 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001a29f:	90                   	nop
c001a2a0:	83 ec 0c             	sub    esp,0xc
c001a2a3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001a2aa:	e8 fd 47 ff ff       	call   c000eaac <rfree>
c001a2af:	83 c4 10             	add    esp,0x10
c001a2b2:	83 ec 04             	sub    esp,0x4
c001a2b5:	6a 00                	push   0x0
c001a2b7:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001a2be:	50                   	push   eax
c001a2bf:	6a 00                	push   0x0
c001a2c1:	e8 59 9b fe ff       	call   c0003e1f <f_mount>
c001a2c6:	83 c4 10             	add    esp,0x10
c001a2c9:	b0 00                	mov    al,0x0
c001a2cb:	eb 1b                	jmp    c001a2e8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001a2cd:	8d 76 00             	lea    esi,[esi+0x0]
c001a2d0:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c001a2d5:	83 c0 01             	add    eax,0x1
c001a2d8:	a3 a0 d7 02 c0       	mov    ds:0xc002d7a0,eax
c001a2dd:	8d 76 00             	lea    esi,[esi+0x0]
c001a2e0:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001a2e7:	90                   	nop
c001a2e8:	81 c4 4c 03 00 00    	add    esp,0x34c
c001a2ee:	c3                   	ret    
c001a2ef:	90                   	nop

c001a2f0 <FAT::allocateSwapfile(char const*, int)>:
c001a2f0:	55                   	push   ebp
c001a2f1:	57                   	push   edi
c001a2f2:	56                   	push   esi
c001a2f3:	53                   	push   ebx
c001a2f4:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001a2fa:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001a305:	83 ec 0c             	sub    esp,0xc
c001a308:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001a30f:	e8 78 47 ff ff       	call   c000ea8c <malloc>
c001a314:	83 c4 10             	add    esp,0x10
c001a317:	89 c7                	mov    edi,eax
c001a319:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001a31e:	83 ec 04             	sub    esp,0x4
c001a321:	50                   	push   eax
c001a322:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001a329:	57                   	push   edi
c001a32a:	e8 fd dd fe ff       	call   c000812c <File::File(char const*, Process*)>
c001a32f:	83 c4 10             	add    esp,0x10
c001a332:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001a339:	83 ec 04             	sub    esp,0x4
c001a33c:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a340:	50                   	push   eax
c001a341:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a345:	50                   	push   eax
c001a346:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a34d:	e8 fa e0 fe ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c001a352:	83 c4 10             	add    esp,0x10
c001a355:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001a35c:	c1 e0 14             	shl    eax,0x14
c001a35f:	89 c7                	mov    edi,eax
c001a361:	89 c5                	mov    ebp,eax
c001a363:	c1 fd 1f             	sar    ebp,0x1f
c001a366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a36a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a36e:	89 f9                	mov    ecx,edi
c001a370:	31 c1                	xor    ecx,eax
c001a372:	89 cb                	mov    ebx,ecx
c001a374:	89 e9                	mov    ecx,ebp
c001a376:	31 d1                	xor    ecx,edx
c001a378:	89 ce                	mov    esi,ecx
c001a37a:	89 f0                	mov    eax,esi
c001a37c:	09 d8                	or     eax,ebx
c001a37e:	0f 84 9c 00 00 00    	je     c001a420 <FAT::allocateSwapfile(char const*, int)+0x130>
c001a384:	83 ec 0c             	sub    esp,0xc
c001a387:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a38e:	e8 85 df fe ff       	call   c0008318 <File::unlink()>
c001a393:	83 c4 10             	add    esp,0x10
c001a396:	83 ec 08             	sub    esp,0x8
c001a399:	6a 12                	push   0x12
c001a39b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a3a2:	e8 a3 dd fe ff       	call   c000814a <File::open(FileOpenMode)>
c001a3a7:	83 c4 10             	add    esp,0x10
c001a3aa:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001a3b1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001a3b7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001a3be:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001a3c5:	c1 e0 14             	shl    eax,0x14
c001a3c8:	83 ec 04             	sub    esp,0x4
c001a3cb:	6a 01                	push   0x1
c001a3cd:	50                   	push   eax
c001a3ce:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001a3d5:	e8 de b0 fe ff       	call   c00054b8 <f_expand>
c001a3da:	83 c4 10             	add    esp,0x10
c001a3dd:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001a3e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001a3e6:	83 c0 10             	add    eax,0x10
c001a3e9:	8b 00                	mov    eax,DWORD PTR [eax]
c001a3eb:	83 ec 0c             	sub    esp,0xc
c001a3ee:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a3f2:	52                   	push   edx
c001a3f3:	8d 54 24 30          	lea    edx,[esp+0x30]
c001a3f7:	52                   	push   edx
c001a3f8:	6a 00                	push   0x0
c001a3fa:	68 00 04 00 00       	push   0x400
c001a3ff:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001a406:	ff d0                	call   eax
c001a408:	83 c4 20             	add    esp,0x20
c001a40b:	83 ec 0c             	sub    esp,0xc
c001a40e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a415:	e8 8e dd fe ff       	call   c00081a8 <File::close()>
c001a41a:	83 c4 10             	add    esp,0x10
c001a41d:	8d 76 00             	lea    esi,[esi+0x0]
c001a420:	83 ec 08             	sub    esp,0x8
c001a423:	6a 01                	push   0x1
c001a425:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a42c:	e8 19 dd fe ff       	call   c000814a <File::open(FileOpenMode)>
c001a431:	83 c4 10             	add    esp,0x10
c001a434:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001a43b:	8b 00                	mov    eax,DWORD PTR [eax]
c001a43d:	83 c0 0c             	add    eax,0xc
c001a440:	8b 00                	mov    eax,DWORD PTR [eax]
c001a442:	83 ec 0c             	sub    esp,0xc
c001a445:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a449:	52                   	push   edx
c001a44a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001a44e:	52                   	push   edx
c001a44f:	6a 00                	push   0x0
c001a451:	6a 04                	push   0x4
c001a453:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001a45a:	ff d0                	call   eax
c001a45c:	83 c4 20             	add    esp,0x20
c001a45f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001a466:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001a46c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001a473:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001a47a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001a47d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001a484:	83 ec 0c             	sub    esp,0xc
c001a487:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a48e:	e8 15 dd fe ff       	call   c00081a8 <File::close()>
c001a493:	83 c4 10             	add    esp,0x10
c001a496:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001a49d:	ba 00 00 00 00       	mov    edx,0x0
c001a4a2:	81 c4 3c 04 00 00    	add    esp,0x43c
c001a4a8:	5b                   	pop    ebx
c001a4a9:	5e                   	pop    esi
c001a4aa:	5f                   	pop    edi
c001a4ab:	5d                   	pop    ebp
c001a4ac:	c3                   	ret    
c001a4ad:	90                   	nop
c001a4ae:	66 90                	xchg   ax,ax

c001a4b0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001a4b0:	57                   	push   edi
c001a4b1:	56                   	push   esi
c001a4b2:	53                   	push   ebx
c001a4b3:	81 ec 50 02 00 00    	sub    esp,0x250
c001a4b9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001a4c1:	74 0d                	je     c001a4d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001a4c3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001a4cb:	75 0f                	jne    c001a4dc <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001a4cd:	8d 76 00             	lea    esi,[esi+0x0]
c001a4d0:	b8 04 00 00 00       	mov    eax,0x4
c001a4d5:	e9 3a 01 00 00       	jmp    c001a614 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001a4da:	66 90                	xchg   ax,ax
c001a4dc:	83 ec 08             	sub    esp,0x8
c001a4df:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001a4e6:	50                   	push   eax
c001a4e7:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001a4ee:	e8 0a a4 fe ff       	call   c00048fd <f_readdir>
c001a4f3:	83 c4 10             	add    esp,0x10
c001a4f6:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001a4fd:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001a504:	83 ec 0c             	sub    esp,0xc
c001a507:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a50e:	83 c0 16             	add    eax,0x16
c001a511:	50                   	push   eax
c001a512:	e8 69 60 fe ff       	call   c0000580 <strlen>
c001a517:	83 c4 10             	add    esp,0x10
c001a51a:	ba 00 00 00 00       	mov    edx,0x0
c001a51f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a523:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001a527:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001a52e:	0f b6 c0             	movzx  eax,al
c001a531:	83 e0 10             	and    eax,0x10
c001a534:	74 0a                	je     c001a540 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001a536:	b8 02 00 00 00       	mov    eax,0x2
c001a53b:	eb 0b                	jmp    c001a548 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001a53d:	8d 76 00             	lea    esi,[esi+0x0]
c001a540:	b8 01 00 00 00       	mov    eax,0x1
c001a545:	8d 76 00             	lea    esi,[esi+0x0]
c001a548:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a54c:	83 ec 08             	sub    esp,0x8
c001a54f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001a556:	83 c0 16             	add    eax,0x16
c001a559:	50                   	push   eax
c001a55a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a55e:	83 c0 10             	add    eax,0x10
c001a561:	50                   	push   eax
c001a562:	e8 e9 60 fe ff       	call   c0000650 <strcpy>
c001a567:	83 c4 10             	add    esp,0x10
c001a56a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001a571:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001a578:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a57c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001a583:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001a58a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001a591:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001a598:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001a59f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001a5a6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001a5ad:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001a5b4:	89 c6                	mov    esi,eax
c001a5b6:	89 d7                	mov    edi,edx
c001a5b8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a5ba:	89 c8                	mov    eax,ecx
c001a5bc:	89 fa                	mov    edx,edi
c001a5be:	89 f3                	mov    ebx,esi
c001a5c0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001a5c7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001a5ce:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001a5d5:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001a5dc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a5e2:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001a5e9:	0f be c0             	movsx  eax,al
c001a5ec:	85 c0                	test   eax,eax
c001a5ee:	75 08                	jne    c001a5f8 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001a5f0:	b8 07 00 00 00       	mov    eax,0x7
c001a5f5:	eb 1d                	jmp    c001a614 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001a5f7:	90                   	nop
c001a5f8:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001a5ff:	85 c0                	test   eax,eax
c001a601:	75 09                	jne    c001a60c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001a603:	b8 00 00 00 00       	mov    eax,0x0
c001a608:	eb 0a                	jmp    c001a614 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001a60a:	66 90                	xchg   ax,ax
c001a60c:	b8 01 00 00 00       	mov    eax,0x1
c001a611:	8d 76 00             	lea    esi,[esi+0x0]
c001a614:	81 c4 50 02 00 00    	add    esp,0x250
c001a61a:	5b                   	pop    ebx
c001a61b:	5e                   	pop    esi
c001a61c:	5f                   	pop    edi
c001a61d:	c3                   	ret    
c001a61e:	66 90                	xchg   ax,ax

c001a620 <FAT::read(void*, unsigned long, void*, int*)>:
c001a620:	83 ec 1c             	sub    esp,0x1c
c001a623:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a628:	74 0a                	je     c001a634 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001a62a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a62f:	75 0b                	jne    c001a63c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001a631:	8d 76 00             	lea    esi,[esi+0x0]
c001a634:	b8 04 00 00 00       	mov    eax,0x4
c001a639:	eb 41                	jmp    c001a67c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001a63b:	90                   	nop
c001a63c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a640:	50                   	push   eax
c001a641:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a645:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a649:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a64d:	e8 f2 9a fe ff       	call   c0004144 <f_read>
c001a652:	83 c4 10             	add    esp,0x10
c001a655:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a659:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a65d:	89 c2                	mov    edx,eax
c001a65f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a663:	89 10                	mov    DWORD PTR [eax],edx
c001a665:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a669:	85 c0                	test   eax,eax
c001a66b:	75 07                	jne    c001a674 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001a66d:	b8 00 00 00 00       	mov    eax,0x0
c001a672:	eb 08                	jmp    c001a67c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001a674:	b8 01 00 00 00       	mov    eax,0x1
c001a679:	8d 76 00             	lea    esi,[esi+0x0]
c001a67c:	83 c4 1c             	add    esp,0x1c
c001a67f:	c3                   	ret    

c001a680 <FAT::write(void*, unsigned long, void*, int*)>:
c001a680:	83 ec 1c             	sub    esp,0x1c
c001a683:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a688:	74 0a                	je     c001a694 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001a68a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a68f:	75 0b                	jne    c001a69c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001a691:	8d 76 00             	lea    esi,[esi+0x0]
c001a694:	b8 04 00 00 00       	mov    eax,0x4
c001a699:	eb 41                	jmp    c001a6dc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001a69b:	90                   	nop
c001a69c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a6a0:	50                   	push   eax
c001a6a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a6a5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a6a9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a6ad:	e8 73 9c fe ff       	call   c0004325 <f_write>
c001a6b2:	83 c4 10             	add    esp,0x10
c001a6b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6bd:	89 c2                	mov    edx,eax
c001a6bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a6c3:	89 10                	mov    DWORD PTR [eax],edx
c001a6c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a6c9:	85 c0                	test   eax,eax
c001a6cb:	75 07                	jne    c001a6d4 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001a6cd:	b8 00 00 00 00       	mov    eax,0x0
c001a6d2:	eb 08                	jmp    c001a6dc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001a6d4:	b8 01 00 00 00       	mov    eax,0x1
c001a6d9:	8d 76 00             	lea    esi,[esi+0x0]
c001a6dc:	83 c4 1c             	add    esp,0x1c
c001a6df:	c3                   	ret    

c001a6e0 <FAT::close(void*)>:
c001a6e0:	83 ec 1c             	sub    esp,0x1c
c001a6e3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a6e8:	75 0a                	jne    c001a6f4 <FAT::close(void*)+0x14>
c001a6ea:	b8 04 00 00 00       	mov    eax,0x4
c001a6ef:	eb 3f                	jmp    c001a730 <FAT::close(void*)+0x50>
c001a6f1:	8d 76 00             	lea    esi,[esi+0x0]
c001a6f4:	83 ec 0c             	sub    esp,0xc
c001a6f7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a6fb:	e8 31 9f fe ff       	call   c0004631 <f_close>
c001a700:	83 c4 10             	add    esp,0x10
c001a703:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a707:	83 ec 0c             	sub    esp,0xc
c001a70a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a70e:	e8 89 43 ff ff       	call   c000ea9c <free>
c001a713:	83 c4 10             	add    esp,0x10
c001a716:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a71a:	85 c0                	test   eax,eax
c001a71c:	75 0a                	jne    c001a728 <FAT::close(void*)+0x48>
c001a71e:	b8 00 00 00 00       	mov    eax,0x0
c001a723:	eb 0b                	jmp    c001a730 <FAT::close(void*)+0x50>
c001a725:	8d 76 00             	lea    esi,[esi+0x0]
c001a728:	b8 01 00 00 00       	mov    eax,0x1
c001a72d:	8d 76 00             	lea    esi,[esi+0x0]
c001a730:	83 c4 1c             	add    esp,0x1c
c001a733:	c3                   	ret    

c001a734 <FAT::closeDir(void*)>:
c001a734:	83 ec 1c             	sub    esp,0x1c
c001a737:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a73c:	75 0a                	jne    c001a748 <FAT::closeDir(void*)+0x14>
c001a73e:	b8 04 00 00 00       	mov    eax,0x4
c001a743:	eb 3f                	jmp    c001a784 <FAT::closeDir(void*)+0x50>
c001a745:	8d 76 00             	lea    esi,[esi+0x0]
c001a748:	83 ec 0c             	sub    esp,0xc
c001a74b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a74f:	e8 87 a1 fe ff       	call   c00048db <f_closedir>
c001a754:	83 c4 10             	add    esp,0x10
c001a757:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a75b:	83 ec 0c             	sub    esp,0xc
c001a75e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a762:	e8 35 43 ff ff       	call   c000ea9c <free>
c001a767:	83 c4 10             	add    esp,0x10
c001a76a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a76e:	85 c0                	test   eax,eax
c001a770:	75 0a                	jne    c001a77c <FAT::closeDir(void*)+0x48>
c001a772:	b8 00 00 00 00       	mov    eax,0x0
c001a777:	eb 0b                	jmp    c001a784 <FAT::closeDir(void*)+0x50>
c001a779:	8d 76 00             	lea    esi,[esi+0x0]
c001a77c:	b8 01 00 00 00       	mov    eax,0x1
c001a781:	8d 76 00             	lea    esi,[esi+0x0]
c001a784:	83 c4 1c             	add    esp,0x1c
c001a787:	c3                   	ret    

c001a788 <FAT::truncate(void*, unsigned long long)>:
c001a788:	83 ec 2c             	sub    esp,0x2c
c001a78b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a78f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a793:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a797:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a79b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a7a0:	75 0a                	jne    c001a7ac <FAT::truncate(void*, unsigned long long)+0x24>
c001a7a2:	b8 04 00 00 00       	mov    eax,0x4
c001a7a7:	eb 47                	jmp    c001a7f0 <FAT::truncate(void*, unsigned long long)+0x68>
c001a7a9:	8d 76 00             	lea    esi,[esi+0x0]
c001a7ac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a7b0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a7b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a7b7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a7bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7c3:	83 ec 08             	sub    esp,0x8
c001a7c6:	50                   	push   eax
c001a7c7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a7cb:	e8 90 9e fe ff       	call   c0004660 <f_lseek>
c001a7d0:	83 c4 10             	add    esp,0x10
c001a7d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a7d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7db:	85 c0                	test   eax,eax
c001a7dd:	75 09                	jne    c001a7e8 <FAT::truncate(void*, unsigned long long)+0x60>
c001a7df:	b8 00 00 00 00       	mov    eax,0x0
c001a7e4:	eb 0a                	jmp    c001a7f0 <FAT::truncate(void*, unsigned long long)+0x68>
c001a7e6:	66 90                	xchg   ax,ax
c001a7e8:	b8 01 00 00 00       	mov    eax,0x1
c001a7ed:	8d 76 00             	lea    esi,[esi+0x0]
c001a7f0:	83 c4 2c             	add    esp,0x2c
c001a7f3:	c3                   	ret    

c001a7f4 <FAT::seek(void*, unsigned long long)>:
c001a7f4:	83 ec 2c             	sub    esp,0x2c
c001a7f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a7fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a7ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a803:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a807:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a80c:	75 0a                	jne    c001a818 <FAT::seek(void*, unsigned long long)+0x24>
c001a80e:	b8 04 00 00 00       	mov    eax,0x4
c001a813:	eb 33                	jmp    c001a848 <FAT::seek(void*, unsigned long long)+0x54>
c001a815:	8d 76 00             	lea    esi,[esi+0x0]
c001a818:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a81c:	83 ec 08             	sub    esp,0x8
c001a81f:	50                   	push   eax
c001a820:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a824:	e8 37 9e fe ff       	call   c0004660 <f_lseek>
c001a829:	83 c4 10             	add    esp,0x10
c001a82c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a830:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a834:	85 c0                	test   eax,eax
c001a836:	75 08                	jne    c001a840 <FAT::seek(void*, unsigned long long)+0x4c>
c001a838:	b8 00 00 00 00       	mov    eax,0x0
c001a83d:	eb 09                	jmp    c001a848 <FAT::seek(void*, unsigned long long)+0x54>
c001a83f:	90                   	nop
c001a840:	b8 01 00 00 00       	mov    eax,0x1
c001a845:	8d 76 00             	lea    esi,[esi+0x0]
c001a848:	83 c4 2c             	add    esp,0x2c
c001a84b:	c3                   	ret    

c001a84c <fatWrapperReadDisk>:
c001a84c:	53                   	push   ebx
c001a84d:	83 ec 18             	sub    esp,0x18
c001a850:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a854:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a858:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a85d:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c001a864:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a868:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a86c:	ba 00 00 00 00       	mov    edx,0x0
c001a871:	83 ec 0c             	sub    esp,0xc
c001a874:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a878:	53                   	push   ebx
c001a879:	52                   	push   edx
c001a87a:	50                   	push   eax
c001a87b:	51                   	push   ecx
c001a87c:	e8 67 f8 fe ff       	call   c000a0e8 <LogicalDisk::read(unsigned long long, int, void*)>
c001a881:	83 c4 20             	add    esp,0x20
c001a884:	83 c4 18             	add    esp,0x18
c001a887:	5b                   	pop    ebx
c001a888:	c3                   	ret    
c001a889:	8d 76 00             	lea    esi,[esi+0x0]

c001a88c <fatWrapperWriteDisk>:
c001a88c:	53                   	push   ebx
c001a88d:	83 ec 18             	sub    esp,0x18
c001a890:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a894:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a898:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a89d:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c001a8a4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a8a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a8ac:	ba 00 00 00 00       	mov    edx,0x0
c001a8b1:	83 ec 0c             	sub    esp,0xc
c001a8b4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a8b8:	53                   	push   ebx
c001a8b9:	52                   	push   edx
c001a8ba:	50                   	push   eax
c001a8bb:	51                   	push   ecx
c001a8bc:	e8 93 f8 fe ff       	call   c000a154 <LogicalDisk::write(unsigned long long, int, void*)>
c001a8c1:	83 c4 20             	add    esp,0x20
c001a8c4:	83 c4 18             	add    esp,0x18
c001a8c7:	5b                   	pop    ebx
c001a8c8:	c3                   	ret    
c001a8c9:	8d 76 00             	lea    esi,[esi+0x0]

c001a8cc <fatWrapperIoctl>:
c001a8cc:	53                   	push   ebx
c001a8cd:	83 ec 28             	sub    esp,0x28
c001a8d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a8d4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a8d8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a8dc:	88 d0                	mov    al,dl
c001a8de:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a8e2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a8e7:	83 f8 02             	cmp    eax,0x2
c001a8ea:	75 34                	jne    c001a920 <fatWrapperIoctl+0x54>
c001a8ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a8f0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a8f4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a8f9:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c001a900:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a906:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a90c:	89 c2                	mov    edx,eax
c001a90e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a912:	66 89 10             	mov    WORD PTR [eax],dx
c001a915:	b8 00 00 00 00       	mov    eax,0x0
c001a91a:	e9 c5 00 00 00       	jmp    c001a9e4 <fatWrapperIoctl+0x118>
c001a91f:	90                   	nop
c001a920:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a925:	83 f8 01             	cmp    eax,0x1
c001a928:	75 6a                	jne    c001a994 <fatWrapperIoctl+0xc8>
c001a92a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a92e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a932:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a937:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c001a93e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a944:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a94a:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a950:	89 c8                	mov    eax,ecx
c001a952:	89 da                	mov    edx,ebx
c001a954:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a958:	c1 e0 0a             	shl    eax,0xa
c001a95b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001a960:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c001a967:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a96d:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a973:	89 cb                	mov    ebx,ecx
c001a975:	c1 fb 1f             	sar    ebx,0x1f
c001a978:	53                   	push   ebx
c001a979:	51                   	push   ecx
c001a97a:	52                   	push   edx
c001a97b:	50                   	push   eax
c001a97c:	e8 e3 59 00 00       	call   c0020364 <__udivdi3>
c001a981:	83 c4 10             	add    esp,0x10
c001a984:	89 c2                	mov    edx,eax
c001a986:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a98a:	89 10                	mov    DWORD PTR [eax],edx
c001a98c:	b8 00 00 00 00       	mov    eax,0x0
c001a991:	eb 51                	jmp    c001a9e4 <fatWrapperIoctl+0x118>
c001a993:	90                   	nop
c001a994:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a999:	85 c0                	test   eax,eax
c001a99b:	75 07                	jne    c001a9a4 <fatWrapperIoctl+0xd8>
c001a99d:	b8 00 00 00 00       	mov    eax,0x0
c001a9a2:	eb 40                	jmp    c001a9e4 <fatWrapperIoctl+0x118>
c001a9a4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a9a9:	83 f8 03             	cmp    eax,0x3
c001a9ac:	75 1a                	jne    c001a9c8 <fatWrapperIoctl+0xfc>
c001a9ae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9b2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a9b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a9ba:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a9c0:	b8 00 00 00 00       	mov    eax,0x0
c001a9c5:	eb 1d                	jmp    c001a9e4 <fatWrapperIoctl+0x118>
c001a9c7:	90                   	nop
c001a9c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a9cd:	83 f8 04             	cmp    eax,0x4
c001a9d0:	75 0a                	jne    c001a9dc <fatWrapperIoctl+0x110>
c001a9d2:	b8 00 00 00 00       	mov    eax,0x0
c001a9d7:	eb 0b                	jmp    c001a9e4 <fatWrapperIoctl+0x118>
c001a9d9:	8d 76 00             	lea    esi,[esi+0x0]
c001a9dc:	b8 04 00 00 00       	mov    eax,0x4
c001a9e1:	8d 76 00             	lea    esi,[esi+0x0]
c001a9e4:	83 c4 28             	add    esp,0x28
c001a9e7:	5b                   	pop    ebx
c001a9e8:	c3                   	ret    
c001a9e9:	90                   	nop
c001a9ea:	66 90                	xchg   ax,ax

c001a9ec <FAT::FAT()>:
c001a9ec:	83 ec 1c             	sub    esp,0x1c
c001a9ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9f3:	83 ec 0c             	sub    esp,0xc
c001a9f6:	50                   	push   eax
c001a9f7:	e8 5a d3 fe ff       	call   c0007d56 <Filesystem::Filesystem()>
c001a9fc:	83 c4 10             	add    esp,0x10
c001a9ff:	ba 88 3f 02 c0       	mov    edx,0xc0023f88
c001aa04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa08:	89 10                	mov    DWORD PTR [eax],edx
c001aa0a:	c7 05 a0 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d7a0,0x0
c001aa14:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa1c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001aa21:	7f 19                	jg     c001aa3c <FAT::FAT()+0x50>
c001aa23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aa27:	c7 04 85 c0 d7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd2840],0xffffffff
c001aa32:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001aa37:	eb e3                	jmp    c001aa1c <FAT::FAT()+0x30>
c001aa39:	8d 76 00             	lea    esi,[esi+0x0]
c001aa3c:	90                   	nop
c001aa3d:	83 c4 1c             	add    esp,0x1c
c001aa40:	c3                   	ret    
c001aa41:	90                   	nop
c001aa42:	66 90                	xchg   ax,ax

c001aa44 <FAT::fixFilepath(char*)>:
c001aa44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa48:	8a 00                	mov    al,BYTE PTR [eax]
c001aa4a:	0f be c0             	movsx  eax,al
c001aa4d:	83 f8 40             	cmp    eax,0x40
c001aa50:	7e 2e                	jle    c001aa80 <FAT::fixFilepath(char*)+0x3c>
c001aa52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa56:	8a 00                	mov    al,BYTE PTR [eax]
c001aa58:	83 e8 41             	sub    eax,0x41
c001aa5b:	88 c2                	mov    dl,al
c001aa5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa61:	88 10                	mov    BYTE PTR [eax],dl
c001aa63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa67:	8a 00                	mov    al,BYTE PTR [eax]
c001aa69:	0f be c0             	movsx  eax,al
c001aa6c:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c001aa73:	83 c0 30             	add    eax,0x30
c001aa76:	88 c2                	mov    dl,al
c001aa78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa7c:	88 10                	mov    BYTE PTR [eax],dl
c001aa7e:	66 90                	xchg   ax,ax
c001aa80:	90                   	nop
c001aa81:	c3                   	ret    
c001aa82:	66 90                	xchg   ax,ax

c001aa84 <FAT::open(char const*, void**, FileOpenMode)>:
c001aa84:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aa8a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001aa92:	74 0c                	je     c001aaa0 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001aa94:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001aa9c:	75 0e                	jne    c001aaac <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001aa9e:	66 90                	xchg   ax,ax
c001aaa0:	b8 04 00 00 00       	mov    eax,0x4
c001aaa5:	e9 46 01 00 00       	jmp    c001abf0 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001aaaa:	66 90                	xchg   ax,ax
c001aaac:	83 ec 08             	sub    esp,0x8
c001aaaf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aaba:	50                   	push   eax
c001aabb:	e8 90 5b fe ff       	call   c0000650 <strcpy>
c001aac0:	83 c4 10             	add    esp,0x10
c001aac3:	83 ec 08             	sub    esp,0x8
c001aac6:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aaca:	50                   	push   eax
c001aacb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aad2:	e8 6d ff ff ff       	call   c001aa44 <FAT::fixFilepath(char*)>
c001aad7:	83 c4 10             	add    esp,0x10
c001aada:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001aae2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aae9:	83 e0 01             	and    eax,0x1
c001aaec:	74 12                	je     c001ab00 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001aaee:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001aaf5:	83 c8 01             	or     eax,0x1
c001aaf8:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001aaff:	90                   	nop
c001ab00:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ab07:	83 e0 04             	and    eax,0x4
c001ab0a:	74 24                	je     c001ab30 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001ab0c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001ab13:	83 c8 30             	or     eax,0x30
c001ab16:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001ab1d:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001ab24:	83 c8 02             	or     eax,0x2
c001ab27:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001ab2e:	66 90                	xchg   ax,ax
c001ab30:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ab37:	83 e0 02             	and    eax,0x2
c001ab3a:	74 14                	je     c001ab50 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001ab3c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001ab43:	83 c8 02             	or     eax,0x2
c001ab46:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001ab4d:	8d 76 00             	lea    esi,[esi+0x0]
c001ab50:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ab57:	83 e0 08             	and    eax,0x8
c001ab5a:	74 14                	je     c001ab70 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001ab5c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001ab63:	83 c8 04             	or     eax,0x4
c001ab66:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001ab6d:	8d 76 00             	lea    esi,[esi+0x0]
c001ab70:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ab77:	83 e0 10             	and    eax,0x10
c001ab7a:	74 14                	je     c001ab90 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001ab7c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001ab83:	83 c8 08             	or     eax,0x8
c001ab86:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001ab8d:	8d 76 00             	lea    esi,[esi+0x0]
c001ab90:	83 ec 0c             	sub    esp,0xc
c001ab93:	68 28 02 00 00       	push   0x228
c001ab98:	e8 ef 3e ff ff       	call   c000ea8c <malloc>
c001ab9d:	83 c4 10             	add    esp,0x10
c001aba0:	89 c2                	mov    edx,eax
c001aba2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aba9:	89 10                	mov    DWORD PTR [eax],edx
c001abab:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001abb3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001abba:	8b 00                	mov    eax,DWORD PTR [eax]
c001abbc:	83 ec 04             	sub    esp,0x4
c001abbf:	52                   	push   edx
c001abc0:	8d 54 24 10          	lea    edx,[esp+0x10]
c001abc4:	52                   	push   edx
c001abc5:	50                   	push   eax
c001abc6:	e8 b6 92 fe ff       	call   c0003e81 <f_open>
c001abcb:	83 c4 10             	add    esp,0x10
c001abce:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001abd5:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001abdd:	74 09                	je     c001abe8 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001abdf:	b8 01 00 00 00       	mov    eax,0x1
c001abe4:	eb 0a                	jmp    c001abf0 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001abe6:	66 90                	xchg   ax,ax
c001abe8:	b8 00 00 00 00       	mov    eax,0x0
c001abed:	8d 76 00             	lea    esi,[esi+0x0]
c001abf0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001abf6:	c3                   	ret    
c001abf7:	90                   	nop

c001abf8 <FAT::openDir(char const*, void**)>:
c001abf8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001abfe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ac06:	74 0c                	je     c001ac14 <FAT::openDir(char const*, void**)+0x1c>
c001ac08:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ac10:	75 0e                	jne    c001ac20 <FAT::openDir(char const*, void**)+0x28>
c001ac12:	66 90                	xchg   ax,ax
c001ac14:	b8 04 00 00 00       	mov    eax,0x4
c001ac19:	e9 82 00 00 00       	jmp    c001aca0 <FAT::openDir(char const*, void**)+0xa8>
c001ac1e:	66 90                	xchg   ax,ax
c001ac20:	83 ec 08             	sub    esp,0x8
c001ac23:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ac2a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ac2e:	50                   	push   eax
c001ac2f:	e8 1c 5a fe ff       	call   c0000650 <strcpy>
c001ac34:	83 c4 10             	add    esp,0x10
c001ac37:	83 ec 08             	sub    esp,0x8
c001ac3a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ac3e:	50                   	push   eax
c001ac3f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ac46:	e8 f9 fd ff ff       	call   c001aa44 <FAT::fixFilepath(char*)>
c001ac4b:	83 c4 10             	add    esp,0x10
c001ac4e:	83 ec 0c             	sub    esp,0xc
c001ac51:	6a 30                	push   0x30
c001ac53:	e8 34 3e ff ff       	call   c000ea8c <malloc>
c001ac58:	83 c4 10             	add    esp,0x10
c001ac5b:	89 c2                	mov    edx,eax
c001ac5d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ac64:	89 10                	mov    DWORD PTR [eax],edx
c001ac66:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ac6d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac6f:	83 ec 08             	sub    esp,0x8
c001ac72:	8d 54 24 14          	lea    edx,[esp+0x14]
c001ac76:	52                   	push   edx
c001ac77:	50                   	push   eax
c001ac78:	e8 93 9b fe ff       	call   c0004810 <f_opendir>
c001ac7d:	83 c4 10             	add    esp,0x10
c001ac80:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ac87:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001ac8f:	74 07                	je     c001ac98 <FAT::openDir(char const*, void**)+0xa0>
c001ac91:	b8 01 00 00 00       	mov    eax,0x1
c001ac96:	eb 08                	jmp    c001aca0 <FAT::openDir(char const*, void**)+0xa8>
c001ac98:	b8 00 00 00 00       	mov    eax,0x0
c001ac9d:	8d 76 00             	lea    esi,[esi+0x0]
c001aca0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aca6:	c3                   	ret    
c001aca7:	90                   	nop

c001aca8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001aca8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001acae:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001acb6:	75 0c                	jne    c001acc4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001acb8:	b8 04 00 00 00       	mov    eax,0x4
c001acbd:	e9 d6 00 00 00       	jmp    c001ad98 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001acc2:	66 90                	xchg   ax,ax
c001acc4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001accc:	75 0a                	jne    c001acd8 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001acce:	b8 04 00 00 00       	mov    eax,0x4
c001acd3:	e9 c0 00 00 00       	jmp    c001ad98 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001acd8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001ace0:	75 0a                	jne    c001acec <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001ace2:	b8 04 00 00 00       	mov    eax,0x4
c001ace7:	e9 ac 00 00 00       	jmp    c001ad98 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001acec:	83 ec 08             	sub    esp,0x8
c001acef:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001acf6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001acfd:	50                   	push   eax
c001acfe:	e8 4d 59 fe ff       	call   c0000650 <strcpy>
c001ad03:	83 c4 10             	add    esp,0x10
c001ad06:	83 ec 08             	sub    esp,0x8
c001ad09:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001ad10:	50                   	push   eax
c001ad11:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ad18:	e8 27 fd ff ff       	call   c001aa44 <FAT::fixFilepath(char*)>
c001ad1d:	83 c4 10             	add    esp,0x10
c001ad20:	83 ec 08             	sub    esp,0x8
c001ad23:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ad27:	50                   	push   eax
c001ad28:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ad2f:	50                   	push   eax
c001ad30:	e8 5a 9c fe ff       	call   c000498f <f_stat>
c001ad35:	83 c4 10             	add    esp,0x10
c001ad38:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ad3f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ad46:	85 c0                	test   eax,eax
c001ad48:	74 0a                	je     c001ad54 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001ad4a:	83 f8 04             	cmp    eax,0x4
c001ad4d:	74 39                	je     c001ad88 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001ad4f:	eb 3f                	jmp    c001ad90 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001ad51:	8d 76 00             	lea    esi,[esi+0x0]
c001ad54:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ad58:	0f b6 c0             	movzx  eax,al
c001ad5b:	83 e0 10             	and    eax,0x10
c001ad5e:	0f 95 c2             	setne  dl
c001ad61:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001ad68:	88 10                	mov    BYTE PTR [eax],dl
c001ad6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad6e:	ba 00 00 00 00       	mov    edx,0x0
c001ad73:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001ad7a:	89 01                	mov    DWORD PTR [ecx],eax
c001ad7c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ad7f:	b8 00 00 00 00       	mov    eax,0x0
c001ad84:	eb 12                	jmp    c001ad98 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001ad86:	66 90                	xchg   ax,ax
c001ad88:	b8 02 00 00 00       	mov    eax,0x2
c001ad8d:	eb 09                	jmp    c001ad98 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001ad8f:	90                   	nop
c001ad90:	b8 01 00 00 00       	mov    eax,0x1
c001ad95:	8d 76 00             	lea    esi,[esi+0x0]
c001ad98:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ad9e:	c3                   	ret    
c001ad9f:	90                   	nop

c001ada0 <FAT::unlink(char const*)>:
c001ada0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ada6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001adae:	75 08                	jne    c001adb8 <FAT::unlink(char const*)+0x18>
c001adb0:	b8 04 00 00 00       	mov    eax,0x4
c001adb5:	eb 61                	jmp    c001ae18 <FAT::unlink(char const*)+0x78>
c001adb7:	90                   	nop
c001adb8:	83 ec 08             	sub    esp,0x8
c001adbb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001adc2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001adc6:	50                   	push   eax
c001adc7:	e8 84 58 fe ff       	call   c0000650 <strcpy>
c001adcc:	83 c4 10             	add    esp,0x10
c001adcf:	83 ec 08             	sub    esp,0x8
c001add2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001add6:	50                   	push   eax
c001add7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001adde:	e8 61 fc ff ff       	call   c001aa44 <FAT::fixFilepath(char*)>
c001ade3:	83 c4 10             	add    esp,0x10
c001ade6:	83 ec 0c             	sub    esp,0xc
c001ade9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aded:	50                   	push   eax
c001adee:	e8 0e 9e fe ff       	call   c0004c01 <f_unlink>
c001adf3:	83 c4 10             	add    esp,0x10
c001adf6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001adfd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ae04:	85 c0                	test   eax,eax
c001ae06:	75 08                	jne    c001ae10 <FAT::unlink(char const*)+0x70>
c001ae08:	b8 00 00 00 00       	mov    eax,0x0
c001ae0d:	eb 09                	jmp    c001ae18 <FAT::unlink(char const*)+0x78>
c001ae0f:	90                   	nop
c001ae10:	b8 01 00 00 00       	mov    eax,0x1
c001ae15:	8d 76 00             	lea    esi,[esi+0x0]
c001ae18:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ae1e:	c3                   	ret    
c001ae1f:	90                   	nop

c001ae20 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001ae20:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ae26:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001ae2d:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001ae34:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ae38:	88 d0                	mov    al,dl
c001ae3a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ae3e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001ae46:	75 0c                	jne    c001ae54 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001ae48:	b8 04 00 00 00       	mov    eax,0x4
c001ae4d:	e9 7e 01 00 00       	jmp    c001afd0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001ae52:	66 90                	xchg   ax,ax
c001ae54:	83 ec 08             	sub    esp,0x8
c001ae57:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ae5e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae62:	50                   	push   eax
c001ae63:	e8 e8 57 fe ff       	call   c0000650 <strcpy>
c001ae68:	83 c4 10             	add    esp,0x10
c001ae6b:	83 ec 08             	sub    esp,0x8
c001ae6e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ae72:	50                   	push   eax
c001ae73:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ae7a:	e8 c5 fb ff ff       	call   c001aa44 <FAT::fixFilepath(char*)>
c001ae7f:	83 c4 10             	add    esp,0x10
c001ae82:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001ae8a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001ae92:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ae97:	83 e0 01             	and    eax,0x1
c001ae9a:	74 14                	je     c001aeb0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001ae9c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001aea3:	83 c8 01             	or     eax,0x1
c001aea6:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001aead:	8d 76 00             	lea    esi,[esi+0x0]
c001aeb0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001aeb5:	83 e0 02             	and    eax,0x2
c001aeb8:	74 12                	je     c001aecc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001aeba:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001aec1:	83 c8 20             	or     eax,0x20
c001aec4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001aecb:	90                   	nop
c001aecc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001aed1:	83 e0 04             	and    eax,0x4
c001aed4:	74 12                	je     c001aee8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001aed6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001aedd:	83 c8 04             	or     eax,0x4
c001aee0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001aee7:	90                   	nop
c001aee8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001aeed:	83 e0 08             	and    eax,0x8
c001aef0:	74 12                	je     c001af04 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001aef2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001aef9:	83 c8 02             	or     eax,0x2
c001aefc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001af03:	90                   	nop
c001af04:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001af09:	83 e0 01             	and    eax,0x1
c001af0c:	74 12                	je     c001af20 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001af0e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001af15:	83 c8 01             	or     eax,0x1
c001af18:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001af1f:	90                   	nop
c001af20:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001af25:	83 e0 02             	and    eax,0x2
c001af28:	74 12                	je     c001af3c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001af2a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001af31:	83 c8 20             	or     eax,0x20
c001af34:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001af3b:	90                   	nop
c001af3c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001af41:	83 e0 04             	and    eax,0x4
c001af44:	74 12                	je     c001af58 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001af46:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001af4d:	83 c8 04             	or     eax,0x4
c001af50:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001af57:	90                   	nop
c001af58:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001af5d:	83 e0 08             	and    eax,0x8
c001af60:	74 12                	je     c001af74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001af62:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001af69:	83 c8 02             	or     eax,0x2
c001af6c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001af73:	90                   	nop
c001af74:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001af7b:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001af82:	09 d0                	or     eax,edx
c001af84:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001af8b:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001af93:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001af9b:	83 ec 04             	sub    esp,0x4
c001af9e:	52                   	push   edx
c001af9f:	50                   	push   eax
c001afa0:	8d 44 24 24          	lea    eax,[esp+0x24]
c001afa4:	50                   	push   eax
c001afa5:	e8 ca a0 fe ff       	call   c0005074 <f_chmod>
c001afaa:	83 c4 10             	add    esp,0x10
c001afad:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001afb4:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001afbb:	85 c0                	test   eax,eax
c001afbd:	75 09                	jne    c001afc8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001afbf:	b8 00 00 00 00       	mov    eax,0x0
c001afc4:	eb 0a                	jmp    c001afd0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001afc6:	66 90                	xchg   ax,ax
c001afc8:	b8 01 00 00 00       	mov    eax,0x1
c001afcd:	8d 76 00             	lea    esi,[esi+0x0]
c001afd0:	81 c4 2c 01 00 00    	add    esp,0x12c
c001afd6:	c3                   	ret    
c001afd7:	90                   	nop

c001afd8 <FAT::rename(char const*, char const*)>:
c001afd8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001afde:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001afe6:	74 0c                	je     c001aff4 <FAT::rename(char const*, char const*)+0x1c>
c001afe8:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001aff0:	75 0e                	jne    c001b000 <FAT::rename(char const*, char const*)+0x28>
c001aff2:	66 90                	xchg   ax,ax
c001aff4:	b8 04 00 00 00       	mov    eax,0x4
c001aff9:	e9 9e 00 00 00       	jmp    c001b09c <FAT::rename(char const*, char const*)+0xc4>
c001affe:	66 90                	xchg   ax,ax
c001b000:	83 ec 08             	sub    esp,0x8
c001b003:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b00a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b011:	50                   	push   eax
c001b012:	e8 39 56 fe ff       	call   c0000650 <strcpy>
c001b017:	83 c4 10             	add    esp,0x10
c001b01a:	83 ec 08             	sub    esp,0x8
c001b01d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001b024:	50                   	push   eax
c001b025:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b02c:	e8 13 fa ff ff       	call   c001aa44 <FAT::fixFilepath(char*)>
c001b031:	83 c4 10             	add    esp,0x10
c001b034:	83 ec 08             	sub    esp,0x8
c001b037:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001b03e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b042:	50                   	push   eax
c001b043:	e8 08 56 fe ff       	call   c0000650 <strcpy>
c001b048:	83 c4 10             	add    esp,0x10
c001b04b:	83 ec 08             	sub    esp,0x8
c001b04e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b052:	50                   	push   eax
c001b053:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b05a:	e8 e5 f9 ff ff       	call   c001aa44 <FAT::fixFilepath(char*)>
c001b05f:	83 c4 10             	add    esp,0x10
c001b062:	83 ec 08             	sub    esp,0x8
c001b065:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b069:	50                   	push   eax
c001b06a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b071:	50                   	push   eax
c001b072:	e8 45 9e fe ff       	call   c0004ebc <f_rename>
c001b077:	83 c4 10             	add    esp,0x10
c001b07a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001b081:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001b088:	85 c0                	test   eax,eax
c001b08a:	75 08                	jne    c001b094 <FAT::rename(char const*, char const*)+0xbc>
c001b08c:	b8 00 00 00 00       	mov    eax,0x0
c001b091:	eb 09                	jmp    c001b09c <FAT::rename(char const*, char const*)+0xc4>
c001b093:	90                   	nop
c001b094:	b8 01 00 00 00       	mov    eax,0x1
c001b099:	8d 76 00             	lea    esi,[esi+0x0]
c001b09c:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b0a2:	c3                   	ret    
c001b0a3:	90                   	nop

c001b0a4 <FAT::mkdir(char const*)>:
c001b0a4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b0aa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b0b2:	75 08                	jne    c001b0bc <FAT::mkdir(char const*)+0x18>
c001b0b4:	b8 04 00 00 00       	mov    eax,0x4
c001b0b9:	eb 61                	jmp    c001b11c <FAT::mkdir(char const*)+0x78>
c001b0bb:	90                   	nop
c001b0bc:	83 ec 08             	sub    esp,0x8
c001b0bf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b0c6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b0ca:	50                   	push   eax
c001b0cb:	e8 80 55 fe ff       	call   c0000650 <strcpy>
c001b0d0:	83 c4 10             	add    esp,0x10
c001b0d3:	83 ec 08             	sub    esp,0x8
c001b0d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b0da:	50                   	push   eax
c001b0db:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b0e2:	e8 5d f9 ff ff       	call   c001aa44 <FAT::fixFilepath(char*)>
c001b0e7:	83 c4 10             	add    esp,0x10
c001b0ea:	83 ec 0c             	sub    esp,0xc
c001b0ed:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b0f1:	50                   	push   eax
c001b0f2:	e8 2a 9c fe ff       	call   c0004d21 <f_mkdir>
c001b0f7:	83 c4 10             	add    esp,0x10
c001b0fa:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b101:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b108:	85 c0                	test   eax,eax
c001b10a:	75 08                	jne    c001b114 <FAT::mkdir(char const*)+0x70>
c001b10c:	b8 00 00 00 00       	mov    eax,0x0
c001b111:	eb 09                	jmp    c001b11c <FAT::mkdir(char const*)+0x78>
c001b113:	90                   	nop
c001b114:	b8 01 00 00 00       	mov    eax,0x1
c001b119:	8d 76 00             	lea    esi,[esi+0x0]
c001b11c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b122:	c3                   	ret    
c001b123:	90                   	nop

c001b124 <FAT::exists(char const*)>:
c001b124:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b12a:	83 ec 08             	sub    esp,0x8
c001b12d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b134:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b138:	50                   	push   eax
c001b139:	e8 12 55 fe ff       	call   c0000650 <strcpy>
c001b13e:	83 c4 10             	add    esp,0x10
c001b141:	83 ec 08             	sub    esp,0x8
c001b144:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b148:	50                   	push   eax
c001b149:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b150:	e8 ef f8 ff ff       	call   c001aa44 <FAT::fixFilepath(char*)>
c001b155:	83 c4 10             	add    esp,0x10
c001b158:	83 ec 08             	sub    esp,0x8
c001b15b:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001b162:	50                   	push   eax
c001b163:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b167:	50                   	push   eax
c001b168:	e8 22 98 fe ff       	call   c000498f <f_stat>
c001b16d:	83 c4 10             	add    esp,0x10
c001b170:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b177:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b17e:	85 c0                	test   eax,eax
c001b180:	75 06                	jne    c001b188 <FAT::exists(char const*)+0x64>
c001b182:	b0 01                	mov    al,0x1
c001b184:	eb 06                	jmp    c001b18c <FAT::exists(char const*)+0x68>
c001b186:	66 90                	xchg   ax,ax
c001b188:	b0 00                	mov    al,0x0
c001b18a:	66 90                	xchg   ax,ax
c001b18c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b192:	c3                   	ret    
c001b193:	90                   	nop

c001b194 <isoReadDiscSectorHelper>:
c001b194:	83 ec 2c             	sub    esp,0x2c
c001b197:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b19b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b19f:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001b1a4:	83 e8 41             	sub    eax,0x41
c001b1a7:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c001b1ae:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b1b2:	ba 00 00 00 00       	mov    edx,0x0
c001b1b7:	83 ec 0c             	sub    esp,0xc
c001b1ba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b1be:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b1c2:	52                   	push   edx
c001b1c3:	50                   	push   eax
c001b1c4:	51                   	push   ecx
c001b1c5:	e8 1e ef fe ff       	call   c000a0e8 <LogicalDisk::read(unsigned long long, int, void*)>
c001b1ca:	83 c4 20             	add    esp,0x20
c001b1cd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b1d1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b1d6:	74 0c                	je     c001b1e4 <isoReadDiscSectorHelper+0x50>
c001b1d8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b1dc:	c1 e0 0b             	shl    eax,0xb
c001b1df:	eb 0b                	jmp    c001b1ec <isoReadDiscSectorHelper+0x58>
c001b1e1:	8d 76 00             	lea    esi,[esi+0x0]
c001b1e4:	b8 00 00 00 00       	mov    eax,0x0
c001b1e9:	8d 76 00             	lea    esi,[esi+0x0]
c001b1ec:	83 c4 2c             	add    esp,0x2c
c001b1ef:	c3                   	ret    

c001b1f0 <iso_kprintf>:
c001b1f0:	83 ec 0c             	sub    esp,0xc
c001b1f3:	83 ec 08             	sub    esp,0x8
c001b1f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b1fa:	68 2d 3c 02 c0       	push   0xc0023c2d
c001b1ff:	e8 4a bd fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001b204:	83 c4 10             	add    esp,0x10
c001b207:	90                   	nop
c001b208:	83 c4 0c             	add    esp,0xc
c001b20b:	c3                   	ret    

c001b20c <iso_kprintfd>:
c001b20c:	83 ec 0c             	sub    esp,0xc
c001b20f:	83 ec 08             	sub    esp,0x8
c001b212:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b216:	68 c9 1d 02 c0       	push   0xc0021dc9
c001b21b:	e8 2e bd fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001b220:	83 c4 10             	add    esp,0x10
c001b223:	90                   	nop
c001b224:	83 c4 0c             	add    esp,0xc
c001b227:	c3                   	ret    

c001b228 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b228:	b8 08 00 00 00       	mov    eax,0x8
c001b22d:	c3                   	ret    

c001b22e <ISO9660::truncate(void*, unsigned long long)>:
c001b22e:	b8 01 00 00 00       	mov    eax,0x1
c001b233:	c3                   	ret    

c001b234 <ISO9660::getName()>:
c001b234:	b8 ec 3f 02 c0       	mov    eax,0xc0023fec
c001b239:	c3                   	ret    

c001b23a <ISO9660::closeDir(void*)>:
c001b23a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b23e:	8b 00                	mov    eax,DWORD PTR [eax]
c001b240:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001b243:	90                   	nop

c001b244 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b244:	b8 01 00 00 00       	mov    eax,0x1
c001b249:	c3                   	ret    

c001b24a <ISO9660::unlink(char const*)>:
c001b24a:	b8 01 00 00 00       	mov    eax,0x1
c001b24f:	c3                   	ret    

c001b250 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b250:	b8 03 00 00 00       	mov    eax,0x3
c001b255:	c3                   	ret    

c001b256 <ISO9660::rename(char const*, char const*)>:
c001b256:	b8 01 00 00 00       	mov    eax,0x1
c001b25b:	c3                   	ret    

c001b25c <ISO9660::mkdir(char const*)>:
c001b25c:	b8 01 00 00 00       	mov    eax,0x1
c001b261:	c3                   	ret    

c001b262 <ISO9660::~ISO9660()>:
c001b262:	83 ec 0c             	sub    esp,0xc
c001b265:	ba 2c 41 02 c0       	mov    edx,0xc002412c
c001b26a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b26e:	89 10                	mov    DWORD PTR [eax],edx
c001b270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b274:	83 ec 0c             	sub    esp,0xc
c001b277:	50                   	push   eax
c001b278:	e8 fd ca fe ff       	call   c0007d7a <Filesystem::~Filesystem()>
c001b27d:	83 c4 10             	add    esp,0x10
c001b280:	90                   	nop
c001b281:	83 c4 0c             	add    esp,0xc
c001b284:	c3                   	ret    
c001b285:	90                   	nop

c001b286 <ISO9660::~ISO9660()>:
c001b286:	83 ec 0c             	sub    esp,0xc
c001b289:	83 ec 0c             	sub    esp,0xc
c001b28c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b290:	e8 cd ff ff ff       	call   c001b262 <ISO9660::~ISO9660()>
c001b295:	83 c4 10             	add    esp,0x10
c001b298:	83 ec 08             	sub    esp,0x8
c001b29b:	6a 08                	push   0x8
c001b29d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2a1:	e8 61 15 ff ff       	call   c000c807 <operator delete(void*, unsigned long)>
c001b2a6:	83 c4 10             	add    esp,0x10
c001b2a9:	83 c4 0c             	add    esp,0xc
c001b2ac:	c3                   	ret    
c001b2ad:	90                   	nop

c001b2ae <ISO9660::exists(char const*)>:
c001b2ae:	83 ec 18             	sub    esp,0x18
c001b2b1:	68 07 40 02 c0       	push   0xc0024007
c001b2b6:	e8 17 3b ff ff       	call   c000edd2 <KePanic(char const*)>
c001b2bb:	31 c0                	xor    eax,eax
c001b2bd:	83 c4 1c             	add    esp,0x1c
c001b2c0:	c3                   	ret    
c001b2c1:	90                   	nop

c001b2c2 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001b2c2:	56                   	push   esi
c001b2c3:	53                   	push   ebx
c001b2c4:	53                   	push   ebx
c001b2c5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b2c9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b2cd:	85 db                	test   ebx,ebx
c001b2cf:	0f 84 ca 00 00 00    	je     c001b39f <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001b2d5:	85 f6                	test   esi,esi
c001b2d7:	0f 84 c2 00 00 00    	je     c001b39f <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001b2dd:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001b2e2:	b8 03 00 00 00       	mov    eax,0x3
c001b2e7:	0f 85 b7 00 00 00    	jne    c001b3a4 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001b2ed:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001b2ef:	38 0d a0 d8 02 c0    	cmp    BYTE PTR ds:0xc002d8a0,cl
c001b2f5:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b2fc:	74 1b                	je     c001b319 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001b2fe:	85 c0                	test   eax,eax
c001b300:	74 10                	je     c001b312 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001b302:	83 ec 0c             	sub    esp,0xc
c001b305:	68 25 40 02 c0       	push   0xc0024025
c001b30a:	e8 c3 3a ff ff       	call   c000edd2 <KePanic(char const*)>
c001b30f:	83 c4 10             	add    esp,0x10
c001b312:	8a 03                	mov    al,BYTE PTR [ebx]
c001b314:	a2 a0 d8 02 c0       	mov    ds:0xc002d8a0,al
c001b319:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b31c:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001b323:	85 c0                	test   eax,eax
c001b325:	74 09                	je     c001b330 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001b327:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001b32e:	74 48                	je     c001b378 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001b330:	83 ec 0c             	sub    esp,0xc
c001b333:	68 35 40 02 c0       	push   0xc0024035
c001b338:	e8 11 bc fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001b33d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b340:	83 c4 10             	add    esp,0x10
c001b343:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001b34a:	85 c0                	test   eax,eax
c001b34c:	74 17                	je     c001b365 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001b34e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001b355:	83 ec 0c             	sub    esp,0xc
c001b358:	68 55 40 02 c0       	push   0xc0024055
c001b35d:	e8 ec bb fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001b362:	83 c4 10             	add    esp,0x10
c001b365:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b36c:	83 ec 0c             	sub    esp,0xc
c001b36f:	50                   	push   eax
c001b370:	e8 d2 b8 fe ff       	call   c0006c47 <init_percd>
c001b375:	83 c4 10             	add    esp,0x10
c001b378:	51                   	push   ecx
c001b379:	83 c3 03             	add    ebx,0x3
c001b37c:	51                   	push   ecx
c001b37d:	6a 00                	push   0x0
c001b37f:	53                   	push   ebx
c001b380:	e8 85 b3 fe ff       	call   c000670a <iso_open>
c001b385:	83 c4 10             	add    esp,0x10
c001b388:	89 c2                	mov    edx,eax
c001b38a:	b8 01 00 00 00       	mov    eax,0x1
c001b38f:	83 fa ff             	cmp    edx,0xffffffff
c001b392:	74 10                	je     c001b3a4 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001b394:	83 c2 32             	add    edx,0x32
c001b397:	31 c0                	xor    eax,eax
c001b399:	01 d2                	add    edx,edx
c001b39b:	89 16                	mov    DWORD PTR [esi],edx
c001b39d:	eb 05                	jmp    c001b3a4 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001b39f:	b8 04 00 00 00       	mov    eax,0x4
c001b3a4:	5a                   	pop    edx
c001b3a5:	5b                   	pop    ebx
c001b3a6:	5e                   	pop    esi
c001b3a7:	c3                   	ret    

c001b3a8 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001b3a8:	53                   	push   ebx
c001b3a9:	83 ec 08             	sub    esp,0x8
c001b3ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b3b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b3b4:	85 c0                	test   eax,eax
c001b3b6:	74 2d                	je     c001b3e5 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001b3b8:	85 db                	test   ebx,ebx
c001b3ba:	74 29                	je     c001b3e5 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001b3bc:	52                   	push   edx
c001b3bd:	b9 02 00 00 00       	mov    ecx,0x2
c001b3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b3c6:	99                   	cdq    
c001b3c7:	f7 f9                	idiv   ecx
c001b3c9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b3cd:	83 e8 32             	sub    eax,0x32
c001b3d0:	50                   	push   eax
c001b3d1:	e8 dc b3 fe ff       	call   c00067b2 <iso_read>
c001b3d6:	83 c4 10             	add    esp,0x10
c001b3d9:	89 03                	mov    DWORD PTR [ebx],eax
c001b3db:	09 d0                	or     eax,edx
c001b3dd:	0f 94 c0             	sete   al
c001b3e0:	0f b6 c0             	movzx  eax,al
c001b3e3:	eb 05                	jmp    c001b3ea <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001b3e5:	b8 04 00 00 00       	mov    eax,0x4
c001b3ea:	83 c4 08             	add    esp,0x8
c001b3ed:	5b                   	pop    ebx
c001b3ee:	c3                   	ret    
c001b3ef:	90                   	nop

c001b3f0 <ISO9660::seek(void*, unsigned long long)>:
c001b3f0:	57                   	push   edi
c001b3f1:	b8 04 00 00 00       	mov    eax,0x4
c001b3f6:	56                   	push   esi
c001b3f7:	51                   	push   ecx
c001b3f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b3fc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b400:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b404:	85 d2                	test   edx,edx
c001b406:	74 26                	je     c001b42e <ISO9660::seek(void*, unsigned long long)+0x3e>
c001b408:	89 d0                	mov    eax,edx
c001b40a:	b9 02 00 00 00       	mov    ecx,0x2
c001b40f:	6a 00                	push   0x0
c001b411:	99                   	cdq    
c001b412:	f7 f9                	idiv   ecx
c001b414:	57                   	push   edi
c001b415:	56                   	push   esi
c001b416:	83 e8 32             	sub    eax,0x32
c001b419:	50                   	push   eax
c001b41a:	e8 a9 b4 fe ff       	call   c00068c8 <iso_seek>
c001b41f:	83 c4 10             	add    esp,0x10
c001b422:	31 f0                	xor    eax,esi
c001b424:	31 fa                	xor    edx,edi
c001b426:	09 d0                	or     eax,edx
c001b428:	0f 95 c0             	setne  al
c001b42b:	0f b6 c0             	movzx  eax,al
c001b42e:	5a                   	pop    edx
c001b42f:	5e                   	pop    esi
c001b430:	5f                   	pop    edi
c001b431:	c3                   	ret    

c001b432 <ISO9660::tell(void*, unsigned long long*)>:
c001b432:	53                   	push   ebx
c001b433:	83 ec 08             	sub    esp,0x8
c001b436:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b43a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b43e:	85 c0                	test   eax,eax
c001b440:	74 24                	je     c001b466 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001b442:	85 db                	test   ebx,ebx
c001b444:	74 20                	je     c001b466 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001b446:	b9 02 00 00 00       	mov    ecx,0x2
c001b44b:	99                   	cdq    
c001b44c:	f7 f9                	idiv   ecx
c001b44e:	83 ec 0c             	sub    esp,0xc
c001b451:	83 e8 32             	sub    eax,0x32
c001b454:	50                   	push   eax
c001b455:	e8 f2 b4 fe ff       	call   c000694c <iso_tell>
c001b45a:	83 c4 10             	add    esp,0x10
c001b45d:	89 03                	mov    DWORD PTR [ebx],eax
c001b45f:	31 c0                	xor    eax,eax
c001b461:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001b464:	eb 05                	jmp    c001b46b <ISO9660::tell(void*, unsigned long long*)+0x39>
c001b466:	b8 04 00 00 00       	mov    eax,0x4
c001b46b:	83 c4 08             	add    esp,0x8
c001b46e:	5b                   	pop    ebx
c001b46f:	c3                   	ret    

c001b470 <ISO9660::stat(void*, unsigned long long*)>:
c001b470:	56                   	push   esi
c001b471:	53                   	push   ebx
c001b472:	83 ec 10             	sub    esp,0x10
c001b475:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b479:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b47d:	68 79 40 02 c0       	push   0xc0024079
c001b482:	e8 c7 ba fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001b487:	83 c4 10             	add    esp,0x10
c001b48a:	85 db                	test   ebx,ebx
c001b48c:	74 2a                	je     c001b4b8 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001b48e:	85 f6                	test   esi,esi
c001b490:	74 26                	je     c001b4b8 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001b492:	89 d8                	mov    eax,ebx
c001b494:	b9 02 00 00 00       	mov    ecx,0x2
c001b499:	99                   	cdq    
c001b49a:	83 ec 0c             	sub    esp,0xc
c001b49d:	f7 f9                	idiv   ecx
c001b49f:	83 e8 32             	sub    eax,0x32
c001b4a2:	50                   	push   eax
c001b4a3:	e8 d5 b4 fe ff       	call   c000697d <iso_total>
c001b4a8:	83 c4 10             	add    esp,0x10
c001b4ab:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001b4b2:	89 06                	mov    DWORD PTR [esi],eax
c001b4b4:	31 c0                	xor    eax,eax
c001b4b6:	eb 05                	jmp    c001b4bd <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001b4b8:	b8 04 00 00 00       	mov    eax,0x4
c001b4bd:	5a                   	pop    edx
c001b4be:	5b                   	pop    ebx
c001b4bf:	5e                   	pop    esi
c001b4c0:	c3                   	ret    
c001b4c1:	90                   	nop

c001b4c2 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001b4c2:	55                   	push   ebp
c001b4c3:	57                   	push   edi
c001b4c4:	56                   	push   esi
c001b4c5:	53                   	push   ebx
c001b4c6:	83 ec 18             	sub    esp,0x18
c001b4c9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b4cd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001b4d1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b4d5:	68 81 40 02 c0       	push   0xc0024081
c001b4da:	e8 6f ba fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001b4df:	83 c4 10             	add    esp,0x10
c001b4e2:	85 ff                	test   edi,edi
c001b4e4:	0f 94 c0             	sete   al
c001b4e7:	85 f6                	test   esi,esi
c001b4e9:	0f 94 c2             	sete   dl
c001b4ec:	09 d0                	or     eax,edx
c001b4ee:	a8 01                	test   al,0x1
c001b4f0:	0f 85 dd 00 00 00    	jne    c001b5d3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001b4f6:	85 db                	test   ebx,ebx
c001b4f8:	0f 84 d5 00 00 00    	je     c001b5d3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001b4fe:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b501:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001b507:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001b50e:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b515:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001b517:	38 0d a0 d8 02 c0    	cmp    BYTE PTR ds:0xc002d8a0,cl
c001b51d:	74 1b                	je     c001b53a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001b51f:	85 c0                	test   eax,eax
c001b521:	74 10                	je     c001b533 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001b523:	83 ec 0c             	sub    esp,0xc
c001b526:	68 25 40 02 c0       	push   0xc0024025
c001b52b:	e8 a2 38 ff ff       	call   c000edd2 <KePanic(char const*)>
c001b530:	83 c4 10             	add    esp,0x10
c001b533:	8a 03                	mov    al,BYTE PTR [ebx]
c001b535:	a2 a0 d8 02 c0       	mov    ds:0xc002d8a0,al
c001b53a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b53d:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001b544:	85 c0                	test   eax,eax
c001b546:	74 09                	je     c001b551 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001b548:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001b54f:	74 51                	je     c001b5a2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001b551:	83 ec 0c             	sub    esp,0xc
c001b554:	68 89 40 02 c0       	push   0xc0024089
c001b559:	e8 f0 b9 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001b55e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b561:	83 c4 10             	add    esp,0x10
c001b564:	83 3c 85 7c a6 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd5984],0x0
c001b56c:	74 21                	je     c001b58f <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001b56e:	83 ec 0c             	sub    esp,0xc
c001b571:	68 a9 40 02 c0       	push   0xc00240a9
c001b576:	e8 d3 b9 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001b57b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b57e:	83 c4 10             	add    esp,0x10
c001b581:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001b588:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001b58f:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b596:	83 ec 0c             	sub    esp,0xc
c001b599:	50                   	push   eax
c001b59a:	e8 a8 b6 fe ff       	call   c0006c47 <init_percd>
c001b59f:	83 c4 10             	add    esp,0x10
c001b5a2:	52                   	push   edx
c001b5a3:	83 c3 03             	add    ebx,0x3
c001b5a6:	52                   	push   edx
c001b5a7:	6a 00                	push   0x0
c001b5a9:	53                   	push   ebx
c001b5aa:	e8 5b b1 fe ff       	call   c000670a <iso_open>
c001b5af:	83 c4 10             	add    esp,0x10
c001b5b2:	83 f8 ff             	cmp    eax,0xffffffff
c001b5b5:	89 c5                	mov    ebp,eax
c001b5b7:	75 21                	jne    c001b5da <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001b5b9:	50                   	push   eax
c001b5ba:	50                   	push   eax
c001b5bb:	6a 01                	push   0x1
c001b5bd:	53                   	push   ebx
c001b5be:	e8 47 b1 fe ff       	call   c000670a <iso_open>
c001b5c3:	83 c4 10             	add    esp,0x10
c001b5c6:	ba 02 00 00 00       	mov    edx,0x2
c001b5cb:	40                   	inc    eax
c001b5cc:	74 2b                	je     c001b5f9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001b5ce:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001b5d1:	eb 24                	jmp    c001b5f7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001b5d3:	ba 04 00 00 00       	mov    edx,0x4
c001b5d8:	eb 1f                	jmp    c001b5f9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001b5da:	83 ec 0c             	sub    esp,0xc
c001b5dd:	50                   	push   eax
c001b5de:	e8 9a b3 fe ff       	call   c000697d <iso_total>
c001b5e3:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001b5ea:	89 07                	mov    DWORD PTR [edi],eax
c001b5ec:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b5ef:	e8 a0 b1 fe ff       	call   c0006794 <iso_close>
c001b5f4:	83 c4 10             	add    esp,0x10
c001b5f7:	31 d2                	xor    edx,edx
c001b5f9:	83 c4 0c             	add    esp,0xc
c001b5fc:	89 d0                	mov    eax,edx
c001b5fe:	5b                   	pop    ebx
c001b5ff:	5e                   	pop    esi
c001b600:	5f                   	pop    edi
c001b601:	5d                   	pop    ebp
c001b602:	c3                   	ret    
c001b603:	90                   	nop

c001b604 <ISO9660::close(void*)>:
c001b604:	83 ec 0c             	sub    esp,0xc
c001b607:	b8 04 00 00 00       	mov    eax,0x4
c001b60c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b610:	85 d2                	test   edx,edx
c001b612:	74 1b                	je     c001b62f <ISO9660::close(void*)+0x2b>
c001b614:	89 d0                	mov    eax,edx
c001b616:	b9 02 00 00 00       	mov    ecx,0x2
c001b61b:	99                   	cdq    
c001b61c:	83 ec 0c             	sub    esp,0xc
c001b61f:	f7 f9                	idiv   ecx
c001b621:	83 e8 32             	sub    eax,0x32
c001b624:	50                   	push   eax
c001b625:	e8 6a b1 fe ff       	call   c0006794 <iso_close>
c001b62a:	83 c4 10             	add    esp,0x10
c001b62d:	31 c0                	xor    eax,eax
c001b62f:	83 c4 0c             	add    esp,0xc
c001b632:	c3                   	ret    
c001b633:	90                   	nop

c001b634 <ISO9660::openDir(char const*, void**)>:
c001b634:	56                   	push   esi
c001b635:	53                   	push   ebx
c001b636:	50                   	push   eax
c001b637:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b63b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b63f:	85 db                	test   ebx,ebx
c001b641:	0f 84 bd 00 00 00    	je     c001b704 <ISO9660::openDir(char const*, void**)+0xd0>
c001b647:	85 f6                	test   esi,esi
c001b649:	0f 84 b5 00 00 00    	je     c001b704 <ISO9660::openDir(char const*, void**)+0xd0>
c001b64f:	8a 13                	mov    dl,BYTE PTR [ebx]
c001b651:	38 15 a0 d8 02 c0    	cmp    BYTE PTR ds:0xc002d8a0,dl
c001b657:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b65e:	74 1b                	je     c001b67b <ISO9660::openDir(char const*, void**)+0x47>
c001b660:	85 c0                	test   eax,eax
c001b662:	74 10                	je     c001b674 <ISO9660::openDir(char const*, void**)+0x40>
c001b664:	83 ec 0c             	sub    esp,0xc
c001b667:	68 25 40 02 c0       	push   0xc0024025
c001b66c:	e8 61 37 ff ff       	call   c000edd2 <KePanic(char const*)>
c001b671:	83 c4 10             	add    esp,0x10
c001b674:	8a 03                	mov    al,BYTE PTR [ebx]
c001b676:	a2 a0 d8 02 c0       	mov    ds:0xc002d8a0,al
c001b67b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b67e:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001b685:	85 c0                	test   eax,eax
c001b687:	74 10                	je     c001b699 <ISO9660::openDir(char const*, void**)+0x65>
c001b689:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001b690:	74 1a                	je     c001b6ac <ISO9660::openDir(char const*, void**)+0x78>
c001b692:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001b699:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b6a0:	83 ec 0c             	sub    esp,0xc
c001b6a3:	50                   	push   eax
c001b6a4:	e8 9e b5 fe ff       	call   c0006c47 <init_percd>
c001b6a9:	83 c4 10             	add    esp,0x10
c001b6ac:	50                   	push   eax
c001b6ad:	83 c3 03             	add    ebx,0x3
c001b6b0:	50                   	push   eax
c001b6b1:	6a 01                	push   0x1
c001b6b3:	53                   	push   ebx
c001b6b4:	e8 51 b0 fe ff       	call   c000670a <iso_open>
c001b6b9:	83 c4 10             	add    esp,0x10
c001b6bc:	83 f8 ff             	cmp    eax,0xffffffff
c001b6bf:	89 c3                	mov    ebx,eax
c001b6c1:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001b6c6:	75 1c                	jne    c001b6e4 <ISO9660::openDir(char const*, void**)+0xb0>
c001b6c8:	53                   	push   ebx
c001b6c9:	53                   	push   ebx
c001b6ca:	68 cd 40 02 c0       	push   0xc00240cd
c001b6cf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b6d5:	e8 9e 5e ff ff       	call   c0011578 <VgaText::puts(char const*)>
c001b6da:	83 c4 10             	add    esp,0x10
c001b6dd:	b8 01 00 00 00       	mov    eax,0x1
c001b6e2:	eb 25                	jmp    c001b709 <ISO9660::openDir(char const*, void**)+0xd5>
c001b6e4:	51                   	push   ecx
c001b6e5:	01 db                	add    ebx,ebx
c001b6e7:	51                   	push   ecx
c001b6e8:	83 c3 65             	add    ebx,0x65
c001b6eb:	68 e0 40 02 c0       	push   0xc00240e0
c001b6f0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b6f6:	e8 7d 5e ff ff       	call   c0011578 <VgaText::puts(char const*)>
c001b6fb:	83 c4 10             	add    esp,0x10
c001b6fe:	31 c0                	xor    eax,eax
c001b700:	89 1e                	mov    DWORD PTR [esi],ebx
c001b702:	eb 05                	jmp    c001b709 <ISO9660::openDir(char const*, void**)+0xd5>
c001b704:	b8 04 00 00 00       	mov    eax,0x4
c001b709:	5a                   	pop    edx
c001b70a:	5b                   	pop    ebx
c001b70b:	5e                   	pop    esi
c001b70c:	c3                   	ret    
c001b70d:	90                   	nop

c001b70e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b70e:	55                   	push   ebp
c001b70f:	57                   	push   edi
c001b710:	56                   	push   esi
c001b711:	53                   	push   ebx
c001b712:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b718:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001b71f:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001b726:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001b72d:	85 db                	test   ebx,ebx
c001b72f:	0f 84 e4 00 00 00    	je     c001b819 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001b735:	85 ed                	test   ebp,ebp
c001b737:	0f 84 dc 00 00 00    	je     c001b819 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001b73d:	83 ec 0c             	sub    esp,0xc
c001b740:	68 f3 40 02 c0       	push   0xc00240f3
c001b745:	e8 04 b8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001b74a:	89 d8                	mov    eax,ebx
c001b74c:	b9 02 00 00 00       	mov    ecx,0x2
c001b751:	99                   	cdq    
c001b752:	f7 f9                	idiv   ecx
c001b754:	83 e8 32             	sub    eax,0x32
c001b757:	89 04 24             	mov    DWORD PTR [esp],eax
c001b75a:	e8 70 b2 fe ff       	call   c00069cf <iso_readdir>
c001b75f:	83 c4 10             	add    esp,0x10
c001b762:	85 c0                	test   eax,eax
c001b764:	89 c3                	mov    ebx,eax
c001b766:	75 38                	jne    c001b7a0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001b768:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001b76d:	53                   	push   ebx
c001b76e:	53                   	push   ebx
c001b76f:	68 fe 40 02 c0       	push   0xc00240fe
c001b774:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b77a:	e8 f9 5d ff ff       	call   c0011578 <VgaText::puts(char const*)>
c001b77f:	83 c4 0c             	add    esp,0xc
c001b782:	68 10 01 00 00       	push   0x110
c001b787:	6a 00                	push   0x0
c001b789:	57                   	push   edi
c001b78a:	e8 61 4d fe ff       	call   c00004f0 <memset>
c001b78f:	83 c4 10             	add    esp,0x10
c001b792:	b8 01 00 00 00       	mov    eax,0x1
c001b797:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001b79e:	eb 7e                	jmp    c001b81e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001b7a0:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001b7a6:	8d 70 08             	lea    esi,[eax+0x8]
c001b7a9:	83 ec 0c             	sub    esp,0xc
c001b7ac:	56                   	push   esi
c001b7ad:	e8 ce 4d fe ff       	call   c0000580 <strlen>
c001b7b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001b7ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b7be:	83 c4 10             	add    esp,0x10
c001b7c1:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001b7c5:	75 0a                	jne    c001b7d1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001b7c7:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001b7ca:	b8 02 00 00 00       	mov    eax,0x2
c001b7cf:	74 05                	je     c001b7d6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001b7d1:	b8 01 00 00 00       	mov    eax,0x1
c001b7d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7da:	50                   	push   eax
c001b7db:	50                   	push   eax
c001b7dc:	56                   	push   esi
c001b7dd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b7e1:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b7e5:	50                   	push   eax
c001b7e6:	e8 65 4e fe ff       	call   c0000650 <strcpy>
c001b7eb:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b7f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b7f4:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001b7fb:	5a                   	pop    edx
c001b7fc:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001b801:	59                   	pop    ecx
c001b802:	68 11 41 02 c0       	push   0xc0024111
c001b807:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b80d:	e8 66 5d ff ff       	call   c0011578 <VgaText::puts(char const*)>
c001b812:	83 c4 10             	add    esp,0x10
c001b815:	31 c0                	xor    eax,eax
c001b817:	eb 05                	jmp    c001b81e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001b819:	b8 04 00 00 00       	mov    eax,0x4
c001b81e:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b824:	5b                   	pop    ebx
c001b825:	5e                   	pop    esi
c001b826:	5f                   	pop    edi
c001b827:	5d                   	pop    ebp
c001b828:	c3                   	ret    

c001b829 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b829:	57                   	push   edi
c001b82a:	56                   	push   esi
c001b82b:	53                   	push   ebx
c001b82c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b830:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b834:	39 35 a4 d8 02 c0    	cmp    DWORD PTR ds:0xc002d8a4,esi
c001b83a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b83e:	0f be cb             	movsx  ecx,bl
c001b841:	75 0b                	jne    c001b84e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001b843:	0f be 05 c4 53 02 c0 	movsx  eax,BYTE PTR ds:0xc00253c4
c001b84a:	39 c8                	cmp    eax,ecx
c001b84c:	74 47                	je     c001b895 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001b84e:	83 ec 0c             	sub    esp,0xc
c001b851:	31 d2                	xor    edx,edx
c001b853:	68 c0 d8 02 c0       	push   0xc002d8c0
c001b858:	6a 01                	push   0x1
c001b85a:	52                   	push   edx
c001b85b:	56                   	push   esi
c001b85c:	ff 34 8d 7c a6 02 c0 	push   DWORD PTR [ecx*4-0x3ffd5984]
c001b863:	e8 80 e8 fe ff       	call   c000a0e8 <LogicalDisk::read(unsigned long long, int, void*)>
c001b868:	83 c4 20             	add    esp,0x20
c001b86b:	85 c0                	test   eax,eax
c001b86d:	75 0e                	jne    c001b87d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001b86f:	89 35 a4 d8 02 c0    	mov    DWORD PTR ds:0xc002d8a4,esi
c001b875:	88 1d c4 53 02 c0    	mov    BYTE PTR ds:0xc00253c4,bl
c001b87b:	eb 18                	jmp    c001b895 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001b87d:	50                   	push   eax
c001b87e:	68 00 08 00 00       	push   0x800
c001b883:	6a 00                	push   0x0
c001b885:	57                   	push   edi
c001b886:	e8 65 4c fe ff       	call   c00004f0 <memset>
c001b88b:	83 c4 10             	add    esp,0x10
c001b88e:	b8 01 00 00 00       	mov    eax,0x1
c001b893:	eb 0e                	jmp    c001b8a3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001b895:	be c0 d8 02 c0       	mov    esi,0xc002d8c0
c001b89a:	b9 00 08 00 00       	mov    ecx,0x800
c001b89f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b8a1:	31 c0                	xor    eax,eax
c001b8a3:	5b                   	pop    ebx
c001b8a4:	5e                   	pop    esi
c001b8a5:	5f                   	pop    edi
c001b8a6:	c3                   	ret    
c001b8a7:	90                   	nop

c001b8a8 <ISO9660::tryMount(LogicalDisk*, int)>:
c001b8a8:	53                   	push   ebx
c001b8a9:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001b8af:	c7 05 a4 d8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002d8a4,0xdeadbeef
c001b8b9:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001b8c0:	8d 58 41             	lea    ebx,[eax+0x41]
c001b8c3:	0f be db             	movsx  ebx,bl
c001b8c6:	53                   	push   ebx
c001b8c7:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b8cb:	50                   	push   eax
c001b8cc:	6a 10                	push   0x10
c001b8ce:	e8 56 ff ff ff       	call   c001b829 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b8d3:	83 c4 10             	add    esp,0x10
c001b8d6:	31 d2                	xor    edx,edx
c001b8d8:	85 c0                	test   eax,eax
c001b8da:	75 33                	jne    c001b90f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b8dc:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b8e1:	75 2c                	jne    c001b90f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b8e3:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b8e8:	75 25                	jne    c001b90f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b8ea:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b8ef:	75 1e                	jne    c001b90f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b8f1:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b8f6:	75 17                	jne    c001b90f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b8f8:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b8fd:	75 10                	jne    c001b90f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b8ff:	83 ec 0c             	sub    esp,0xc
c001b902:	53                   	push   ebx
c001b903:	e8 3f b3 fe ff       	call   c0006c47 <init_percd>
c001b908:	83 c4 10             	add    esp,0x10
c001b90b:	40                   	inc    eax
c001b90c:	0f 95 c2             	setne  dl
c001b90f:	81 c4 08 08 00 00    	add    esp,0x808
c001b915:	88 d0                	mov    al,dl
c001b917:	5b                   	pop    ebx
c001b918:	c3                   	ret    
c001b919:	90                   	nop

c001b91a <ISO9660::ISO9660()>:
c001b91a:	83 ec 0c             	sub    esp,0xc
c001b91d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b921:	83 ec 0c             	sub    esp,0xc
c001b924:	50                   	push   eax
c001b925:	e8 2c c4 fe ff       	call   c0007d56 <Filesystem::Filesystem()>
c001b92a:	83 c4 10             	add    esp,0x10
c001b92d:	ba 2c 41 02 c0       	mov    edx,0xc002412c
c001b932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b936:	89 10                	mov    DWORD PTR [eax],edx
c001b938:	e8 1c b4 fe ff       	call   c0006d59 <fs_iso9660_init>
c001b93d:	90                   	nop
c001b93e:	83 c4 0c             	add    esp,0xc
c001b941:	c3                   	ret    

c001b942 <SoundCard::beginPlayback()>:
c001b942:	c7 44 24 04 90 41 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024190
c001b94a:	e9 83 34 ff ff       	jmp    c000edd2 <KePanic(char const*)>
c001b94f:	90                   	nop

c001b950 <SoundCard::stopPlayback()>:
c001b950:	c7 44 24 04 90 41 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024190
c001b958:	e9 75 34 ff ff       	jmp    c000edd2 <KePanic(char const*)>
c001b95d:	90                   	nop

c001b95e <SoundCard::SoundCard(char const*)>:
c001b95e:	83 ec 1c             	sub    esp,0x1c
c001b961:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b965:	83 ec 08             	sub    esp,0x8
c001b968:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b96c:	50                   	push   eax
c001b96d:	e8 82 d8 fe ff       	call   c00091f4 <Device::Device(char const*)>
c001b972:	83 c4 10             	add    esp,0x10
c001b975:	ba dc 41 02 c0       	mov    edx,0xc00241dc
c001b97a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b97e:	89 10                	mov    DWORD PTR [eax],edx
c001b980:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b984:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b98b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b98f:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001b999:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b99d:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001b9a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9ab:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001b9b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9b9:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001b9c3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b9cb:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b9d0:	7f 1a                	jg     c001b9ec <SoundCard::SoundCard(char const*)+0x8e>
c001b9d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b9da:	83 c2 54             	add    edx,0x54
c001b9dd:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001b9e5:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b9ea:	eb df                	jmp    c001b9cb <SoundCard::SoundCard(char const*)+0x6d>
c001b9ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9f0:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b9f7:	90                   	nop
c001b9f8:	83 c4 1c             	add    esp,0x1c
c001b9fb:	c3                   	ret    

c001b9fc <SoundCard::~SoundCard()>:
c001b9fc:	83 ec 0c             	sub    esp,0xc
c001b9ff:	ba dc 41 02 c0       	mov    edx,0xc00241dc
c001ba04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba08:	89 10                	mov    DWORD PTR [eax],edx
c001ba0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba0e:	83 ec 0c             	sub    esp,0xc
c001ba11:	50                   	push   eax
c001ba12:	e8 7d d5 fe ff       	call   c0008f94 <Device::~Device()>
c001ba17:	83 c4 10             	add    esp,0x10
c001ba1a:	90                   	nop
c001ba1b:	83 c4 0c             	add    esp,0xc
c001ba1e:	c3                   	ret    
c001ba1f:	90                   	nop

c001ba20 <SoundCard::~SoundCard()>:
c001ba20:	83 ec 0c             	sub    esp,0xc
c001ba23:	83 ec 0c             	sub    esp,0xc
c001ba26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba2a:	e8 cd ff ff ff       	call   c001b9fc <SoundCard::~SoundCard()>
c001ba2f:	83 c4 10             	add    esp,0x10
c001ba32:	83 ec 08             	sub    esp,0x8
c001ba35:	68 e8 01 00 00       	push   0x1e8
c001ba3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba3e:	e8 c4 0d ff ff       	call   c000c807 <operator delete(void*, unsigned long)>
c001ba43:	83 c4 10             	add    esp,0x10
c001ba46:	83 c4 0c             	add    esp,0xc
c001ba49:	c3                   	ret    

c001ba4a <SoundCard::configureRates(int, int, int)>:
c001ba4a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ba4e:	31 c0                	xor    eax,eax
c001ba50:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001ba57:	75 20                	jne    c001ba79 <SoundCard::configureRates(int, int, int)+0x2f>
c001ba59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba5d:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001ba63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba67:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001ba6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba71:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001ba77:	b0 01                	mov    al,0x1
c001ba79:	c3                   	ret    

c001ba7a <SoundCard::getSamples16(int, short*)>:
c001ba7a:	55                   	push   ebp
c001ba7b:	57                   	push   edi
c001ba7c:	31 ff                	xor    edi,edi
c001ba7e:	56                   	push   esi
c001ba7f:	53                   	push   ebx
c001ba80:	31 db                	xor    ebx,ebx
c001ba82:	83 ec 10             	sub    esp,0x10
c001ba85:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ba89:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ba8d:	8d 04 36             	lea    eax,[esi+esi*1]
c001ba90:	50                   	push   eax
c001ba91:	6a 00                	push   0x0
c001ba93:	55                   	push   ebp
c001ba94:	e8 57 4a fe ff       	call   c00004f0 <memset>
c001ba99:	83 c4 10             	add    esp,0x10
c001ba9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001baa0:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001baa7:	85 c0                	test   eax,eax
c001baa9:	74 1a                	je     c001bac5 <SoundCard::getSamples16(int, short*)+0x4b>
c001baab:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001baaf:	75 14                	jne    c001bac5 <SoundCard::getSamples16(int, short*)+0x4b>
c001bab1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bab5:	55                   	push   ebp
c001bab6:	56                   	push   esi
c001bab7:	50                   	push   eax
c001bab8:	e8 8f 03 00 00       	call   c001be4c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001babd:	83 c4 10             	add    esp,0x10
c001bac0:	39 c3                	cmp    ebx,eax
c001bac2:	0f 4c d8             	cmovl  ebx,eax
c001bac5:	47                   	inc    edi
c001bac6:	83 ff 20             	cmp    edi,0x20
c001bac9:	75 d1                	jne    c001ba9c <SoundCard::getSamples16(int, short*)+0x22>
c001bacb:	83 c4 0c             	add    esp,0xc
c001bace:	89 d8                	mov    eax,ebx
c001bad0:	5b                   	pop    ebx
c001bad1:	5e                   	pop    esi
c001bad2:	5f                   	pop    edi
c001bad3:	5d                   	pop    ebp
c001bad4:	c3                   	ret    
c001bad5:	90                   	nop

c001bad6 <SoundCard::getSamples32(int, int*)>:
c001bad6:	55                   	push   ebp
c001bad7:	57                   	push   edi
c001bad8:	31 ff                	xor    edi,edi
c001bada:	56                   	push   esi
c001badb:	31 f6                	xor    esi,esi
c001badd:	53                   	push   ebx
c001bade:	83 ec 10             	sub    esp,0x10
c001bae1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bae5:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001bae9:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001baed:	c1 e0 02             	shl    eax,0x2
c001baf0:	50                   	push   eax
c001baf1:	6a 00                	push   0x0
c001baf3:	55                   	push   ebp
c001baf4:	e8 f7 49 fe ff       	call   c00004f0 <memset>
c001baf9:	83 c4 10             	add    esp,0x10
c001bafc:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001bb03:	85 c0                	test   eax,eax
c001bb05:	74 1a                	je     c001bb21 <SoundCard::getSamples32(int, int*)+0x4b>
c001bb07:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001bb0b:	75 14                	jne    c001bb21 <SoundCard::getSamples32(int, int*)+0x4b>
c001bb0d:	53                   	push   ebx
c001bb0e:	55                   	push   ebp
c001bb0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bb13:	50                   	push   eax
c001bb14:	e8 03 04 00 00       	call   c001bf1c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001bb19:	83 c4 10             	add    esp,0x10
c001bb1c:	39 c6                	cmp    esi,eax
c001bb1e:	0f 4c f0             	cmovl  esi,eax
c001bb21:	47                   	inc    edi
c001bb22:	83 ff 20             	cmp    edi,0x20
c001bb25:	75 d5                	jne    c001bafc <SoundCard::getSamples32(int, int*)+0x26>
c001bb27:	85 f6                	test   esi,esi
c001bb29:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001bb30:	75 0f                	jne    c001bb41 <SoundCard::getSamples32(int, int*)+0x6b>
c001bb32:	85 c0                	test   eax,eax
c001bb34:	74 1b                	je     c001bb51 <SoundCard::getSamples32(int, int*)+0x7b>
c001bb36:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb38:	83 ec 0c             	sub    esp,0xc
c001bb3b:	53                   	push   ebx
c001bb3c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001bb3f:	eb 0d                	jmp    c001bb4e <SoundCard::getSamples32(int, int*)+0x78>
c001bb41:	85 c0                	test   eax,eax
c001bb43:	75 0c                	jne    c001bb51 <SoundCard::getSamples32(int, int*)+0x7b>
c001bb45:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb47:	83 ec 0c             	sub    esp,0xc
c001bb4a:	53                   	push   ebx
c001bb4b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001bb4e:	83 c4 10             	add    esp,0x10
c001bb51:	83 c4 0c             	add    esp,0xc
c001bb54:	89 f0                	mov    eax,esi
c001bb56:	5b                   	pop    ebx
c001bb57:	5e                   	pop    esi
c001bb58:	5f                   	pop    edi
c001bb59:	5d                   	pop    ebp
c001bb5a:	c3                   	ret    
c001bb5b:	90                   	nop

c001bb5c <SoundCard::addChannel(SoundPort*)>:
c001bb5c:	83 ec 0c             	sub    esp,0xc
c001bb5f:	31 c0                	xor    eax,eax
c001bb61:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bb65:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001bb6d:	74 1b                	je     c001bb8a <SoundCard::addChannel(SoundPort*)+0x2e>
c001bb6f:	40                   	inc    eax
c001bb70:	83 f8 20             	cmp    eax,0x20
c001bb73:	75 f0                	jne    c001bb65 <SoundCard::addChannel(SoundPort*)+0x9>
c001bb75:	83 ec 0c             	sub    esp,0xc
c001bb78:	68 b5 41 02 c0       	push   0xc00241b5
c001bb7d:	e8 50 32 ff ff       	call   c000edd2 <KePanic(char const*)>
c001bb82:	83 c4 10             	add    esp,0x10
c001bb85:	83 c8 ff             	or     eax,0xffffffff
c001bb88:	eb 0b                	jmp    c001bb95 <SoundCard::addChannel(SoundPort*)+0x39>
c001bb8a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001bb8e:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001bb95:	83 c4 0c             	add    esp,0xc
c001bb98:	c3                   	ret    
c001bb99:	90                   	nop

c001bb9a <SoundCard::removeChannel(int)>:
c001bb9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bba2:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001bbad:	c3                   	ret    
c001bbae:	66 90                	xchg   ax,ax

c001bbb0 <SoundPort::SoundPort(int, int, int, int)>:
c001bbb0:	83 ec 0c             	sub    esp,0xc
c001bbb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbb7:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001bbbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbc2:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001bbc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bbce:	89 10                	mov    DWORD PTR [eax],edx
c001bbd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbd4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bbd8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bbdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbdf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bbe3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bbe6:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001bbeb:	75 13                	jne    c001bc00 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001bbed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbf1:	8b 00                	mov    eax,DWORD PTR [eax]
c001bbf3:	05 a0 0f 00 00       	add    eax,0xfa0
c001bbf8:	d1 e0                	shl    eax,1
c001bbfa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bbfe:	66 90                	xchg   ax,ax
c001bc00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc04:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bc08:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001bc0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc0f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001bc16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc1a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001bc1d:	c1 e0 02             	shl    eax,0x2
c001bc20:	83 ec 0c             	sub    esp,0xc
c001bc23:	50                   	push   eax
c001bc24:	e8 63 2e ff ff       	call   c000ea8c <malloc>
c001bc29:	83 c4 10             	add    esp,0x10
c001bc2c:	89 c2                	mov    edx,eax
c001bc2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc32:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bc35:	90                   	nop
c001bc36:	83 c4 0c             	add    esp,0xc
c001bc39:	c3                   	ret    
c001bc3a:	66 90                	xchg   ax,ax

c001bc3c <SoundPort::~SoundPort()>:
c001bc3c:	83 ec 0c             	sub    esp,0xc
c001bc3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001bc46:	85 c0                	test   eax,eax
c001bc48:	74 1e                	je     c001bc68 <SoundPort::~SoundPort()+0x2c>
c001bc4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc4e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001bc51:	83 ec 0c             	sub    esp,0xc
c001bc54:	50                   	push   eax
c001bc55:	e8 42 2e ff ff       	call   c000ea9c <free>
c001bc5a:	83 c4 10             	add    esp,0x10
c001bc5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc61:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001bc68:	90                   	nop
c001bc69:	83 c4 0c             	add    esp,0xc
c001bc6c:	c3                   	ret    
c001bc6d:	90                   	nop
c001bc6e:	66 90                	xchg   ax,ax

c001bc70 <SoundPort::unpause()>:
c001bc70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc74:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001bc78:	c3                   	ret    
c001bc79:	90                   	nop
c001bc7a:	66 90                	xchg   ax,ax

c001bc7c <SoundPort::pause()>:
c001bc7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc80:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001bc84:	c3                   	ret    
c001bc85:	90                   	nop
c001bc86:	66 90                	xchg   ax,ax

c001bc88 <SoundPort::getBufferUsed()>:
c001bc88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc8c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bc8f:	c3                   	ret    

c001bc90 <SoundPort::getBufferSize()>:
c001bc90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc94:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001bc97:	c3                   	ret    

c001bc98 <SoundPort::buffer8(signed char*, int)>:
c001bc98:	55                   	push   ebp
c001bc99:	57                   	push   edi
c001bc9a:	56                   	push   esi
c001bc9b:	53                   	push   ebx
c001bc9c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bca0:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001bca4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001bca7:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001bcaa:	74 70                	je     c001bd1c <SoundPort::buffer8(signed char*, int)+0x84>
c001bcac:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bcb0:	85 c9                	test   ecx,ecx
c001bcb2:	7e 68                	jle    c001bd1c <SoundPort::buffer8(signed char*, int)+0x84>
c001bcb4:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001bcb8:	8d 48 01             	lea    ecx,[eax+0x1]
c001bcbb:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001bcbe:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001bcc1:	89 f1                	mov    ecx,esi
c001bcc3:	c1 e1 18             	shl    ecx,0x18
c001bcc6:	29 f1                	sub    ecx,esi
c001bcc8:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001bccb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bcce:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001bcd1:	74 51                	je     c001bd24 <SoundPort::buffer8(signed char*, int)+0x8c>
c001bcd3:	31 ff                	xor    edi,edi
c001bcd5:	eb 25                	jmp    c001bcfc <SoundPort::buffer8(signed char*, int)+0x64>
c001bcd7:	90                   	nop
c001bcd8:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001bcdd:	8d 59 01             	lea    ebx,[ecx+0x1]
c001bce0:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001bce3:	89 f3                	mov    ebx,esi
c001bce5:	c1 e3 18             	shl    ebx,0x18
c001bce8:	29 f3                	sub    ebx,esi
c001bcea:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001bced:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001bcf0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bcf3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001bcf6:	74 1c                	je     c001bd14 <SoundPort::buffer8(signed char*, int)+0x7c>
c001bcf8:	89 c7                	mov    edi,eax
c001bcfa:	66 90                	xchg   ax,ax
c001bcfc:	8d 47 01             	lea    eax,[edi+0x1]
c001bcff:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001bd03:	75 d3                	jne    c001bcd8 <SoundPort::buffer8(signed char*, int)+0x40>
c001bd05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd09:	8d 76 00             	lea    esi,[esi+0x0]
c001bd0c:	5b                   	pop    ebx
c001bd0d:	5e                   	pop    esi
c001bd0e:	5f                   	pop    edi
c001bd0f:	5d                   	pop    ebp
c001bd10:	c3                   	ret    
c001bd11:	8d 76 00             	lea    esi,[esi+0x0]
c001bd14:	5b                   	pop    ebx
c001bd15:	8d 47 02             	lea    eax,[edi+0x2]
c001bd18:	5e                   	pop    esi
c001bd19:	5f                   	pop    edi
c001bd1a:	5d                   	pop    ebp
c001bd1b:	c3                   	ret    
c001bd1c:	5b                   	pop    ebx
c001bd1d:	31 c0                	xor    eax,eax
c001bd1f:	5e                   	pop    esi
c001bd20:	5f                   	pop    edi
c001bd21:	5d                   	pop    ebp
c001bd22:	c3                   	ret    
c001bd23:	90                   	nop
c001bd24:	b8 01 00 00 00       	mov    eax,0x1
c001bd29:	eb e1                	jmp    c001bd0c <SoundPort::buffer8(signed char*, int)+0x74>
c001bd2b:	90                   	nop

c001bd2c <SoundPort::buffer16(short*, int)>:
c001bd2c:	55                   	push   ebp
c001bd2d:	57                   	push   edi
c001bd2e:	56                   	push   esi
c001bd2f:	53                   	push   ebx
c001bd30:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bd34:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001bd38:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001bd3b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001bd3e:	74 70                	je     c001bdb0 <SoundPort::buffer16(short*, int)+0x84>
c001bd40:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bd44:	85 c9                	test   ecx,ecx
c001bd46:	7e 68                	jle    c001bdb0 <SoundPort::buffer16(short*, int)+0x84>
c001bd48:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001bd4c:	8d 48 01             	lea    ecx,[eax+0x1]
c001bd4f:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001bd52:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001bd55:	89 f1                	mov    ecx,esi
c001bd57:	c1 e1 10             	shl    ecx,0x10
c001bd5a:	29 f1                	sub    ecx,esi
c001bd5c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001bd5f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bd62:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001bd65:	74 51                	je     c001bdb8 <SoundPort::buffer16(short*, int)+0x8c>
c001bd67:	31 ff                	xor    edi,edi
c001bd69:	eb 25                	jmp    c001bd90 <SoundPort::buffer16(short*, int)+0x64>
c001bd6b:	90                   	nop
c001bd6c:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001bd71:	8d 59 01             	lea    ebx,[ecx+0x1]
c001bd74:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001bd77:	89 f3                	mov    ebx,esi
c001bd79:	c1 e3 10             	shl    ebx,0x10
c001bd7c:	29 f3                	sub    ebx,esi
c001bd7e:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001bd81:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001bd84:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bd87:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001bd8a:	74 1c                	je     c001bda8 <SoundPort::buffer16(short*, int)+0x7c>
c001bd8c:	89 c7                	mov    edi,eax
c001bd8e:	66 90                	xchg   ax,ax
c001bd90:	8d 47 01             	lea    eax,[edi+0x1]
c001bd93:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001bd97:	75 d3                	jne    c001bd6c <SoundPort::buffer16(short*, int)+0x40>
c001bd99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd9d:	8d 76 00             	lea    esi,[esi+0x0]
c001bda0:	5b                   	pop    ebx
c001bda1:	5e                   	pop    esi
c001bda2:	5f                   	pop    edi
c001bda3:	5d                   	pop    ebp
c001bda4:	c3                   	ret    
c001bda5:	8d 76 00             	lea    esi,[esi+0x0]
c001bda8:	5b                   	pop    ebx
c001bda9:	8d 47 02             	lea    eax,[edi+0x2]
c001bdac:	5e                   	pop    esi
c001bdad:	5f                   	pop    edi
c001bdae:	5d                   	pop    ebp
c001bdaf:	c3                   	ret    
c001bdb0:	5b                   	pop    ebx
c001bdb1:	31 c0                	xor    eax,eax
c001bdb3:	5e                   	pop    esi
c001bdb4:	5f                   	pop    edi
c001bdb5:	5d                   	pop    ebp
c001bdb6:	c3                   	ret    
c001bdb7:	90                   	nop
c001bdb8:	b8 01 00 00 00       	mov    eax,0x1
c001bdbd:	eb e1                	jmp    c001bda0 <SoundPort::buffer16(short*, int)+0x74>
c001bdbf:	90                   	nop

c001bdc0 <SoundPort::buffer32(int*, int)>:
c001bdc0:	55                   	push   ebp
c001bdc1:	57                   	push   edi
c001bdc2:	56                   	push   esi
c001bdc3:	53                   	push   ebx
c001bdc4:	83 ec 04             	sub    esp,0x4
c001bdc7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bdcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bdcf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001bdd3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bdd6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001bdd9:	89 04 24             	mov    DWORD PTR [esp],eax
c001bddc:	74 5a                	je     c001be38 <SoundPort::buffer32(int*, int)+0x78>
c001bdde:	85 c0                	test   eax,eax
c001bde0:	7e 56                	jle    c001be38 <SoundPort::buffer32(int*, int)+0x78>
c001bde2:	8d 71 01             	lea    esi,[ecx+0x1]
c001bde5:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001bde8:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001bdeb:	8b 37                	mov    esi,DWORD PTR [edi]
c001bded:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001bdf0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bdf3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001bdf6:	74 4c                	je     c001be44 <SoundPort::buffer32(int*, int)+0x84>
c001bdf8:	31 f6                	xor    esi,esi
c001bdfa:	eb 1c                	jmp    c001be18 <SoundPort::buffer32(int*, int)+0x58>
c001bdfc:	8d 69 01             	lea    ebp,[ecx+0x1]
c001bdff:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001be02:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001be05:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001be08:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001be0c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001be0f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001be12:	74 18                	je     c001be2c <SoundPort::buffer32(int*, int)+0x6c>
c001be14:	89 de                	mov    esi,ebx
c001be16:	66 90                	xchg   ax,ax
c001be18:	8d 5e 01             	lea    ebx,[esi+0x1]
c001be1b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001be1e:	75 dc                	jne    c001bdfc <SoundPort::buffer32(int*, int)+0x3c>
c001be20:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001be23:	90                   	nop
c001be24:	83 c4 04             	add    esp,0x4
c001be27:	5b                   	pop    ebx
c001be28:	5e                   	pop    esi
c001be29:	5f                   	pop    edi
c001be2a:	5d                   	pop    ebp
c001be2b:	c3                   	ret    
c001be2c:	8d 46 02             	lea    eax,[esi+0x2]
c001be2f:	83 c4 04             	add    esp,0x4
c001be32:	5b                   	pop    ebx
c001be33:	5e                   	pop    esi
c001be34:	5f                   	pop    edi
c001be35:	5d                   	pop    ebp
c001be36:	c3                   	ret    
c001be37:	90                   	nop
c001be38:	83 c4 04             	add    esp,0x4
c001be3b:	31 c0                	xor    eax,eax
c001be3d:	5b                   	pop    ebx
c001be3e:	5e                   	pop    esi
c001be3f:	5f                   	pop    edi
c001be40:	5d                   	pop    ebp
c001be41:	c3                   	ret    
c001be42:	66 90                	xchg   ax,ax
c001be44:	b8 01 00 00 00       	mov    eax,0x1
c001be49:	eb d9                	jmp    c001be24 <SoundPort::buffer32(int*, int)+0x64>
c001be4b:	90                   	nop

c001be4c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001be4c:	55                   	push   ebp
c001be4d:	57                   	push   edi
c001be4e:	56                   	push   esi
c001be4f:	53                   	push   ebx
c001be50:	83 ec 0c             	sub    esp,0xc
c001be53:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001be57:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001be5b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001be5f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001be63:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001be69:	39 03                	cmp    DWORD PTR [ebx],eax
c001be6b:	74 13                	je     c001be80 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001be6d:	83 ec 0c             	sub    esp,0xc
c001be70:	68 08 42 02 c0       	push   0xc0024208
c001be75:	e8 58 2f ff ff       	call   c000edd2 <KePanic(char const*)>
c001be7a:	83 c4 10             	add    esp,0x10
c001be7d:	8d 76 00             	lea    esi,[esi+0x0]
c001be80:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001be86:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001be89:	74 11                	je     c001be9c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001be8b:	83 ec 0c             	sub    esp,0xc
c001be8e:	68 47 42 02 c0       	push   0xc0024247
c001be93:	e8 3a 2f ff ff       	call   c000edd2 <KePanic(char const*)>
c001be98:	83 c4 10             	add    esp,0x10
c001be9b:	90                   	nop
c001be9c:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001bea2:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001bea5:	74 11                	je     c001beb8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001bea7:	83 ec 0c             	sub    esp,0xc
c001beaa:	68 47 42 02 c0       	push   0xc0024247
c001beaf:	e8 1e 2f ff ff       	call   c000edd2 <KePanic(char const*)>
c001beb4:	83 c4 10             	add    esp,0x10
c001beb7:	90                   	nop
c001beb8:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001bebb:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001bebf:	85 f6                	test   esi,esi
c001bec1:	7e 2d                	jle    c001bef0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001bec3:	31 c0                	xor    eax,eax
c001bec5:	8d 76 00             	lea    esi,[esi+0x0]
c001bec8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001becb:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001bece:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001bed4:	85 c9                	test   ecx,ecx
c001bed6:	0f 49 d1             	cmovns edx,ecx
c001bed9:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001bedd:	c1 fa 0f             	sar    edx,0xf
c001bee0:	01 d1                	add    ecx,edx
c001bee2:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001bee6:	83 c0 01             	add    eax,0x1
c001bee9:	39 f0                	cmp    eax,esi
c001beeb:	75 db                	jne    c001bec8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001beed:	8d 76 00             	lea    esi,[esi+0x0]
c001bef0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bef3:	83 ec 04             	sub    esp,0x4
c001bef6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001bef9:	29 f0                	sub    eax,esi
c001befb:	c1 e0 02             	shl    eax,0x2
c001befe:	50                   	push   eax
c001beff:	8d 04 b2             	lea    eax,[edx+esi*4]
c001bf02:	50                   	push   eax
c001bf03:	52                   	push   edx
c001bf04:	e8 c7 44 fe ff       	call   c00003d0 <memmove>
c001bf09:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001bf0c:	29 f0                	sub    eax,esi
c001bf0e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001bf11:	83 c4 1c             	add    esp,0x1c
c001bf14:	89 f0                	mov    eax,esi
c001bf16:	5b                   	pop    ebx
c001bf17:	5e                   	pop    esi
c001bf18:	5f                   	pop    edi
c001bf19:	5d                   	pop    ebp
c001bf1a:	c3                   	ret    
c001bf1b:	90                   	nop

c001bf1c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001bf1c:	55                   	push   ebp
c001bf1d:	57                   	push   edi
c001bf1e:	56                   	push   esi
c001bf1f:	53                   	push   ebx
c001bf20:	83 ec 0c             	sub    esp,0xc
c001bf23:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001bf27:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bf2b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001bf2f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001bf33:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001bf39:	39 03                	cmp    DWORD PTR [ebx],eax
c001bf3b:	74 13                	je     c001bf50 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001bf3d:	83 ec 0c             	sub    esp,0xc
c001bf40:	68 28 42 02 c0       	push   0xc0024228
c001bf45:	e8 88 2e ff ff       	call   c000edd2 <KePanic(char const*)>
c001bf4a:	83 c4 10             	add    esp,0x10
c001bf4d:	8d 76 00             	lea    esi,[esi+0x0]
c001bf50:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001bf56:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001bf59:	74 11                	je     c001bf6c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001bf5b:	83 ec 0c             	sub    esp,0xc
c001bf5e:	68 63 42 02 c0       	push   0xc0024263
c001bf63:	e8 6a 2e ff ff       	call   c000edd2 <KePanic(char const*)>
c001bf68:	83 c4 10             	add    esp,0x10
c001bf6b:	90                   	nop
c001bf6c:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001bf72:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001bf75:	74 11                	je     c001bf88 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001bf77:	83 ec 0c             	sub    esp,0xc
c001bf7a:	68 63 42 02 c0       	push   0xc0024263
c001bf7f:	e8 4e 2e ff ff       	call   c000edd2 <KePanic(char const*)>
c001bf84:	83 c4 10             	add    esp,0x10
c001bf87:	90                   	nop
c001bf88:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001bf8b:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001bf8f:	85 ff                	test   edi,edi
c001bf91:	7e 21                	jle    c001bfb4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001bf93:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001bf9a:	31 c0                	xor    eax,eax
c001bf9c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001bf9f:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001bfa2:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001bfa5:	01 d5                	add    ebp,edx
c001bfa7:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001bfaa:	83 c0 04             	add    eax,0x4
c001bfad:	39 c1                	cmp    ecx,eax
c001bfaf:	75 eb                	jne    c001bf9c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001bfb1:	8d 76 00             	lea    esi,[esi+0x0]
c001bfb4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bfb7:	83 ec 04             	sub    esp,0x4
c001bfba:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001bfbd:	29 f8                	sub    eax,edi
c001bfbf:	c1 e0 02             	shl    eax,0x2
c001bfc2:	50                   	push   eax
c001bfc3:	8d 04 ba             	lea    eax,[edx+edi*4]
c001bfc6:	50                   	push   eax
c001bfc7:	52                   	push   edx
c001bfc8:	e8 03 44 fe ff       	call   c00003d0 <memmove>
c001bfcd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001bfd0:	29 f8                	sub    eax,edi
c001bfd2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001bfd5:	83 c4 1c             	add    esp,0x1c
c001bfd8:	89 f8                	mov    eax,edi
c001bfda:	5b                   	pop    ebx
c001bfdb:	5e                   	pop    esi
c001bfdc:	5f                   	pop    edi
c001bfdd:	5d                   	pop    ebp
c001bfde:	c3                   	ret    
c001bfdf:	90                   	nop

c001bfe0 <PCI::open(int, int, void*)>:
c001bfe0:	83 ec 18             	sub    esp,0x18
c001bfe3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bfe7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bfeb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001bff1:	8b 10                	mov    edx,DWORD PTR [eax]
c001bff3:	50                   	push   eax
c001bff4:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001bff7:	31 c0                	xor    eax,eax
c001bff9:	83 c4 1c             	add    esp,0x1c
c001bffc:	c3                   	ret    
c001bffd:	90                   	nop

c001bffe <PCI::close(int, int, void*)>:
c001bffe:	31 c0                	xor    eax,eax
c001c000:	c3                   	ret    
c001c001:	90                   	nop

c001c002 <PCI::PCI()>:
c001c002:	83 ec 0c             	sub    esp,0xc
c001c005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c009:	83 ec 08             	sub    esp,0x8
c001c00c:	68 7f 42 02 c0       	push   0xc002427f
c001c011:	50                   	push   eax
c001c012:	e8 f1 c8 fe ff       	call   c0008908 <Bus::Bus(char const*)>
c001c017:	83 c4 10             	add    esp,0x10
c001c01a:	ba 8c 43 02 c0       	mov    edx,0xc002438c
c001c01f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c023:	89 10                	mov    DWORD PTR [eax],edx
c001c025:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c029:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001c033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c037:	a3 c0 e0 02 c0       	mov    ds:0xc002e0c0,eax
c001c03c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c040:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c046:	0f b6 d0             	movzx  edx,al
c001c049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c04d:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001c054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c058:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c05e:	0f b6 d0             	movzx  edx,al
c001c061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c065:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001c06a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c06e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c074:	8d 50 01             	lea    edx,[eax+0x1]
c001c077:	88 d1                	mov    cl,dl
c001c079:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c07d:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001c083:	0f b6 d0             	movzx  edx,al
c001c086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c08a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001c08e:	83 c9 c0             	or     ecx,0xffffffc0
c001c091:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001c095:	90                   	nop
c001c096:	83 c4 0c             	add    esp,0xc
c001c099:	c3                   	ret    

c001c09a <PCI::readBAR8(unsigned int, int)>:
c001c09a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c09e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0a2:	f6 c2 01             	test   dl,0x1
c001c0a5:	74 07                	je     c001c0ae <PCI::readBAR8(unsigned int, int)+0x14>
c001c0a7:	83 e2 fc             	and    edx,0xfffffffc
c001c0aa:	01 c2                	add    edx,eax
c001c0ac:	ec                   	in     al,dx
c001c0ad:	c3                   	ret    
c001c0ae:	83 e2 f0             	and    edx,0xfffffff0
c001c0b1:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001c0b4:	c3                   	ret    
c001c0b5:	90                   	nop

c001c0b6 <PCI::readBAR16(unsigned int, int)>:
c001c0b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c0ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0be:	f6 c2 01             	test   dl,0x1
c001c0c1:	74 08                	je     c001c0cb <PCI::readBAR16(unsigned int, int)+0x15>
c001c0c3:	83 e2 fc             	and    edx,0xfffffffc
c001c0c6:	01 c2                	add    edx,eax
c001c0c8:	66 ed                	in     ax,dx
c001c0ca:	c3                   	ret    
c001c0cb:	83 e2 f0             	and    edx,0xfffffff0
c001c0ce:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001c0d2:	c3                   	ret    
c001c0d3:	90                   	nop

c001c0d4 <PCI::readBAR32(unsigned int, int)>:
c001c0d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c0d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0dc:	f6 c2 01             	test   dl,0x1
c001c0df:	74 07                	je     c001c0e8 <PCI::readBAR32(unsigned int, int)+0x14>
c001c0e1:	83 e2 fc             	and    edx,0xfffffffc
c001c0e4:	01 c2                	add    edx,eax
c001c0e6:	ed                   	in     eax,dx
c001c0e7:	c3                   	ret    
c001c0e8:	83 e2 f0             	and    edx,0xfffffff0
c001c0eb:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001c0ee:	c3                   	ret    
c001c0ef:	90                   	nop

c001c0f0 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001c0f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c0f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0f8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c0fc:	f6 c2 01             	test   dl,0x1
c001c0ff:	74 07                	je     c001c108 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001c101:	83 e2 fc             	and    edx,0xfffffffc
c001c104:	01 ca                	add    edx,ecx
c001c106:	ee                   	out    dx,al
c001c107:	c3                   	ret    
c001c108:	83 e2 f0             	and    edx,0xfffffff0
c001c10b:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001c10e:	c3                   	ret    
c001c10f:	90                   	nop

c001c110 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001c110:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c114:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c118:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c11c:	f6 c2 01             	test   dl,0x1
c001c11f:	74 08                	je     c001c129 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001c121:	83 e2 fc             	and    edx,0xfffffffc
c001c124:	01 ca                	add    edx,ecx
c001c126:	66 ef                	out    dx,ax
c001c128:	c3                   	ret    
c001c129:	83 e2 f0             	and    edx,0xfffffff0
c001c12c:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001c130:	c3                   	ret    
c001c131:	90                   	nop

c001c132 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001c132:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c136:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c13a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c13e:	f6 c2 01             	test   dl,0x1
c001c141:	74 07                	je     c001c14a <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001c143:	83 e2 fc             	and    edx,0xfffffffc
c001c146:	01 ca                	add    edx,ecx
c001c148:	ef                   	out    dx,eax
c001c149:	c3                   	ret    
c001c14a:	83 e2 f0             	and    edx,0xfffffff0
c001c14d:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001c150:	c3                   	ret    
c001c151:	90                   	nop

c001c152 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c152:	55                   	push   ebp
c001c153:	57                   	push   edi
c001c154:	56                   	push   esi
c001c155:	53                   	push   ebx
c001c156:	83 ec 0c             	sub    esp,0xc
c001c159:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001c15e:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001c162:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c166:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c16a:	83 fe 07             	cmp    esi,0x7
c001c16d:	76 10                	jbe    c001c17f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001c16f:	83 ec 0c             	sub    esp,0xc
c001c172:	68 87 42 02 c0       	push   0xc0024287
c001c177:	e8 56 2c ff ff       	call   c000edd2 <KePanic(char const*)>
c001c17c:	83 c4 10             	add    esp,0x10
c001c17f:	0f b6 db             	movzx  ebx,bl
c001c182:	83 fb 0f             	cmp    ebx,0xf
c001c185:	76 10                	jbe    c001c197 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001c187:	83 ec 0c             	sub    esp,0xc
c001c18a:	68 b7 42 02 c0       	push   0xc00242b7
c001c18f:	e8 3e 2c ff ff       	call   c000edd2 <KePanic(char const*)>
c001c194:	83 c4 10             	add    esp,0x10
c001c197:	8d 04 36             	lea    eax,[esi+esi*1]
c001c19a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c19f:	83 c8 f0             	or     eax,0xfffffff0
c001c1a2:	ee                   	out    dx,al
c001c1a3:	ba fa 0c 00 00       	mov    edx,0xcfa
c001c1a8:	89 e8                	mov    eax,ebp
c001c1aa:	ee                   	out    dx,al
c001c1ab:	89 f9                	mov    ecx,edi
c001c1ad:	89 d8                	mov    eax,ebx
c001c1af:	0f b6 d9             	movzx  ebx,cl
c001c1b2:	83 c4 0c             	add    esp,0xc
c001c1b5:	c1 e0 08             	shl    eax,0x8
c001c1b8:	83 e3 fc             	and    ebx,0xfffffffc
c001c1bb:	09 d8                	or     eax,ebx
c001c1bd:	5b                   	pop    ebx
c001c1be:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001c1c3:	5e                   	pop    esi
c001c1c4:	5f                   	pop    edi
c001c1c5:	5d                   	pop    ebp
c001c1c6:	c3                   	ret    
c001c1c7:	90                   	nop

c001c1c8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c1c8:	57                   	push   edi
c001c1c9:	56                   	push   esi
c001c1ca:	53                   	push   ebx
c001c1cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c1cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c1d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c1d7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c1db:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001c1e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c1e5:	83 ff 01             	cmp    edi,0x1
c001c1e8:	75 3f                	jne    c001c229 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001c1ea:	89 de                	mov    esi,ebx
c001c1ec:	0f b6 c0             	movzx  eax,al
c001c1ef:	c1 e0 10             	shl    eax,0x10
c001c1f2:	81 e6 fc 00 00 00    	and    esi,0xfc
c001c1f8:	0f b6 c9             	movzx  ecx,cl
c001c1fb:	09 f0                	or     eax,esi
c001c1fd:	c1 e1 08             	shl    ecx,0x8
c001c200:	0f b6 d2             	movzx  edx,dl
c001c203:	c1 e2 0b             	shl    edx,0xb
c001c206:	09 c8                	or     eax,ecx
c001c208:	09 d0                	or     eax,edx
c001c20a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c20f:	0d 00 00 00 80       	or     eax,0x80000000
c001c214:	ef                   	out    dx,eax
c001c215:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c21a:	ed                   	in     eax,dx
c001c21b:	83 e3 02             	and    ebx,0x2
c001c21e:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001c225:	d3 e8                	shr    eax,cl
c001c227:	eb 44                	jmp    c001c26d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001c229:	83 ff 02             	cmp    edi,0x2
c001c22c:	75 2d                	jne    c001c25b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001c22e:	83 ec 0c             	sub    esp,0xc
c001c231:	0f b6 fb             	movzx  edi,bl
c001c234:	57                   	push   edi
c001c235:	0f b6 c9             	movzx  ecx,cl
c001c238:	51                   	push   ecx
c001c239:	0f b6 d2             	movzx  edx,dl
c001c23c:	52                   	push   edx
c001c23d:	0f b6 c0             	movzx  eax,al
c001c240:	50                   	push   eax
c001c241:	56                   	push   esi
c001c242:	e8 0b ff ff ff       	call   c001c152 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c247:	89 c2                	mov    edx,eax
c001c249:	ed                   	in     eax,dx
c001c24a:	83 e3 02             	and    ebx,0x2
c001c24d:	83 c4 20             	add    esp,0x20
c001c250:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001c257:	d3 e8                	shr    eax,cl
c001c259:	eb 12                	jmp    c001c26d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001c25b:	83 ec 0c             	sub    esp,0xc
c001c25e:	68 e7 42 02 c0       	push   0xc00242e7
c001c263:	e8 6a 2b ff ff       	call   c000edd2 <KePanic(char const*)>
c001c268:	83 c4 10             	add    esp,0x10
c001c26b:	31 c0                	xor    eax,eax
c001c26d:	5b                   	pop    ebx
c001c26e:	5e                   	pop    esi
c001c26f:	5f                   	pop    edi
c001c270:	c3                   	ret    
c001c271:	90                   	nop

c001c272 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001c272:	83 ec 18             	sub    esp,0x18
c001c275:	6a 00                	push   0x0
c001c277:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c27c:	50                   	push   eax
c001c27d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c282:	50                   	push   eax
c001c283:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c288:	50                   	push   eax
c001c289:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c28d:	e8 36 ff ff ff       	call   c001c1c8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c292:	83 c4 2c             	add    esp,0x2c
c001c295:	c3                   	ret    

c001c296 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001c296:	83 ec 18             	sub    esp,0x18
c001c299:	6a 0e                	push   0xe
c001c29b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c2a0:	50                   	push   eax
c001c2a1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c2a6:	50                   	push   eax
c001c2a7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c2ac:	50                   	push   eax
c001c2ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c2b1:	e8 12 ff ff ff       	call   c001c1c8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2b6:	83 c4 2c             	add    esp,0x2c
c001c2b9:	0f b6 c0             	movzx  eax,al
c001c2bc:	c3                   	ret    
c001c2bd:	90                   	nop

c001c2be <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001c2be:	55                   	push   ebp
c001c2bf:	57                   	push   edi
c001c2c0:	56                   	push   esi
c001c2c1:	53                   	push   ebx
c001c2c2:	83 ec 18             	sub    esp,0x18
c001c2c5:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001c2ca:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001c2cf:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001c2d4:	6a 0a                	push   0xa
c001c2d6:	56                   	push   esi
c001c2d7:	55                   	push   ebp
c001c2d8:	57                   	push   edi
c001c2d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c2dd:	e8 e6 fe ff ff       	call   c001c1c8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2e2:	83 c4 14             	add    esp,0x14
c001c2e5:	6a 0a                	push   0xa
c001c2e7:	56                   	push   esi
c001c2e8:	55                   	push   ebp
c001c2e9:	57                   	push   edi
c001c2ea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c2ee:	89 c3                	mov    ebx,eax
c001c2f0:	0f b6 db             	movzx  ebx,bl
c001c2f3:	e8 d0 fe ff ff       	call   c001c1c8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2f8:	83 c4 2c             	add    esp,0x2c
c001c2fb:	25 00 ff 00 00       	and    eax,0xff00
c001c300:	09 d8                	or     eax,ebx
c001c302:	5b                   	pop    ebx
c001c303:	5e                   	pop    esi
c001c304:	5f                   	pop    edi
c001c305:	5d                   	pop    ebp
c001c306:	c3                   	ret    
c001c307:	90                   	nop

c001c308 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001c308:	83 ec 18             	sub    esp,0x18
c001c30b:	6a 08                	push   0x8
c001c30d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c312:	50                   	push   eax
c001c313:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c318:	50                   	push   eax
c001c319:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c31e:	50                   	push   eax
c001c31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c323:	e8 a0 fe ff ff       	call   c001c1c8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c328:	83 c4 2c             	add    esp,0x2c
c001c32b:	0f b6 c4             	movzx  eax,ah
c001c32e:	c3                   	ret    
c001c32f:	90                   	nop

c001c330 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001c330:	83 ec 18             	sub    esp,0x18
c001c333:	6a 08                	push   0x8
c001c335:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c33a:	50                   	push   eax
c001c33b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c340:	50                   	push   eax
c001c341:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c346:	50                   	push   eax
c001c347:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c34b:	e8 78 fe ff ff       	call   c001c1c8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c350:	83 c4 2c             	add    esp,0x2c
c001c353:	c3                   	ret    

c001c354 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001c354:	83 ec 18             	sub    esp,0x18
c001c357:	6a 3c                	push   0x3c
c001c359:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c35e:	50                   	push   eax
c001c35f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c364:	50                   	push   eax
c001c365:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c36a:	50                   	push   eax
c001c36b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c36f:	e8 54 fe ff ff       	call   c001c1c8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c374:	83 c4 2c             	add    esp,0x2c
c001c377:	c3                   	ret    

c001c378 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001c378:	83 ec 18             	sub    esp,0x18
c001c37b:	6a 18                	push   0x18
c001c37d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c382:	50                   	push   eax
c001c383:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c388:	50                   	push   eax
c001c389:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c38e:	50                   	push   eax
c001c38f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c393:	e8 30 fe ff ff       	call   c001c1c8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c398:	83 c4 2c             	add    esp,0x2c
c001c39b:	0f b6 c4             	movzx  eax,ah
c001c39e:	c3                   	ret    
c001c39f:	90                   	nop

c001c3a0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c3a0:	55                   	push   ebp
c001c3a1:	57                   	push   edi
c001c3a2:	56                   	push   esi
c001c3a3:	53                   	push   ebx
c001c3a4:	83 ec 28             	sub    esp,0x28
c001c3a7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001c3ab:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001c3b0:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001c3b5:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001c3ba:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001c3c1:	8d 43 12             	lea    eax,[ebx+0x12]
c001c3c4:	83 c3 10             	add    ebx,0x10
c001c3c7:	0f b6 c0             	movzx  eax,al
c001c3ca:	0f b6 db             	movzx  ebx,bl
c001c3cd:	50                   	push   eax
c001c3ce:	51                   	push   ecx
c001c3cf:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001c3d3:	57                   	push   edi
c001c3d4:	55                   	push   ebp
c001c3d5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c3d9:	e8 ea fd ff ff       	call   c001c1c8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3de:	83 c4 14             	add    esp,0x14
c001c3e1:	53                   	push   ebx
c001c3e2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c3e6:	51                   	push   ecx
c001c3e7:	89 c6                	mov    esi,eax
c001c3e9:	57                   	push   edi
c001c3ea:	55                   	push   ebp
c001c3eb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c3ef:	c1 e6 10             	shl    esi,0x10
c001c3f2:	e8 d1 fd ff ff       	call   c001c1c8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3f7:	83 c4 3c             	add    esp,0x3c
c001c3fa:	5b                   	pop    ebx
c001c3fb:	0f b7 c0             	movzx  eax,ax
c001c3fe:	09 f0                	or     eax,esi
c001c400:	5e                   	pop    esi
c001c401:	5f                   	pop    edi
c001c402:	5d                   	pop    ebp
c001c403:	c3                   	ret    

c001c404 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001c404:	55                   	push   ebp
c001c405:	57                   	push   edi
c001c406:	56                   	push   esi
c001c407:	53                   	push   ebx
c001c408:	83 ec 0c             	sub    esp,0xc
c001c40b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c40f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c413:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c417:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001c41b:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001c421:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c425:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c429:	83 f9 01             	cmp    ecx,0x1
c001c42c:	75 5d                	jne    c001c48b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001c42e:	0f b6 c8             	movzx  ecx,al
c001c431:	89 f0                	mov    eax,esi
c001c433:	25 fc 00 00 00       	and    eax,0xfc
c001c438:	0f b6 d2             	movzx  edx,dl
c001c43b:	c1 e1 10             	shl    ecx,0x10
c001c43e:	c1 e2 0b             	shl    edx,0xb
c001c441:	09 c1                	or     ecx,eax
c001c443:	89 f8                	mov    eax,edi
c001c445:	0f b6 f8             	movzx  edi,al
c001c448:	c1 e7 08             	shl    edi,0x8
c001c44b:	09 f9                	or     ecx,edi
c001c44d:	09 d1                	or     ecx,edx
c001c44f:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c454:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001c45a:	89 c8                	mov    eax,ecx
c001c45c:	ef                   	out    dx,eax
c001c45d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c462:	ed                   	in     eax,dx
c001c463:	83 e6 02             	and    esi,0x2
c001c466:	0f b7 db             	movzx  ebx,bx
c001c469:	74 0a                	je     c001c475 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001c46b:	c1 e3 10             	shl    ebx,0x10
c001c46e:	0f b7 d0             	movzx  edx,ax
c001c471:	09 d3                	or     ebx,edx
c001c473:	eb 05                	jmp    c001c47a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001c475:	66 31 c0             	xor    ax,ax
c001c478:	09 c3                	or     ebx,eax
c001c47a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c47f:	89 c8                	mov    eax,ecx
c001c481:	ef                   	out    dx,eax
c001c482:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c487:	89 d8                	mov    eax,ebx
c001c489:	eb 41                	jmp    c001c4cc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001c48b:	83 f9 02             	cmp    ecx,0x2
c001c48e:	75 45                	jne    c001c4d5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001c490:	89 f1                	mov    ecx,esi
c001c492:	83 ec 0c             	sub    esp,0xc
c001c495:	0f b6 f1             	movzx  esi,cl
c001c498:	89 f9                	mov    ecx,edi
c001c49a:	56                   	push   esi
c001c49b:	0f b6 f9             	movzx  edi,cl
c001c49e:	57                   	push   edi
c001c49f:	0f b6 d2             	movzx  edx,dl
c001c4a2:	52                   	push   edx
c001c4a3:	0f b6 c0             	movzx  eax,al
c001c4a6:	50                   	push   eax
c001c4a7:	55                   	push   ebp
c001c4a8:	e8 a5 fc ff ff       	call   c001c152 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c4ad:	89 c2                	mov    edx,eax
c001c4af:	ed                   	in     eax,dx
c001c4b0:	83 c4 20             	add    esp,0x20
c001c4b3:	f6 c2 02             	test   dl,0x2
c001c4b6:	0f b7 db             	movzx  ebx,bx
c001c4b9:	74 0c                	je     c001c4c7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001c4bb:	0f b7 c8             	movzx  ecx,ax
c001c4be:	89 d8                	mov    eax,ebx
c001c4c0:	c1 e0 10             	shl    eax,0x10
c001c4c3:	09 c8                	or     eax,ecx
c001c4c5:	eb 05                	jmp    c001c4cc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001c4c7:	66 31 c0             	xor    ax,ax
c001c4ca:	09 d8                	or     eax,ebx
c001c4cc:	ef                   	out    dx,eax
c001c4cd:	83 c4 0c             	add    esp,0xc
c001c4d0:	5b                   	pop    ebx
c001c4d1:	5e                   	pop    esi
c001c4d2:	5f                   	pop    edi
c001c4d3:	5d                   	pop    ebp
c001c4d4:	c3                   	ret    
c001c4d5:	c7 44 24 20 e7 42 02 c0 	mov    DWORD PTR [esp+0x20],0xc00242e7
c001c4dd:	83 c4 0c             	add    esp,0xc
c001c4e0:	5b                   	pop    ebx
c001c4e1:	5e                   	pop    esi
c001c4e2:	5f                   	pop    edi
c001c4e3:	5d                   	pop    ebp
c001c4e4:	e9 e9 28 ff ff       	jmp    c000edd2 <KePanic(char const*)>
c001c4e9:	90                   	nop

c001c4ea <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001c4ea:	55                   	push   ebp
c001c4eb:	57                   	push   edi
c001c4ec:	56                   	push   esi
c001c4ed:	53                   	push   ebx
c001c4ee:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001c4f4:	80 3d cc e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e0cc,0x0
c001c4fb:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001c502:	0f 85 bd 00 00 00    	jne    c001c5c5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001c508:	83 ec 0c             	sub    esp,0xc
c001c50b:	68 14 01 00 00       	push   0x114
c001c510:	e8 77 25 ff ff       	call   c000ea8c <malloc>
c001c515:	83 c4 0c             	add    esp,0xc
c001c518:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c001c51e:	68 ed 42 02 c0       	push   0xc00242ed
c001c523:	50                   	push   eax
c001c524:	89 c3                	mov    ebx,eax
c001c526:	e8 01 bc fe ff       	call   c000812c <File::File(char const*, Process*)>
c001c52b:	83 c4 10             	add    esp,0x10
c001c52e:	85 db                	test   ebx,ebx
c001c530:	0f 84 6b 02 00 00    	je     c001c7a1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001c536:	57                   	push   edi
c001c537:	57                   	push   edi
c001c538:	6a 01                	push   0x1
c001c53a:	53                   	push   ebx
c001c53b:	e8 0a bc fe ff       	call   c000814a <File::open(FileOpenMode)>
c001c540:	83 c4 10             	add    esp,0x10
c001c543:	85 c0                	test   eax,eax
c001c545:	0f 85 56 02 00 00    	jne    c001c7a1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001c54b:	52                   	push   edx
c001c54c:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001c550:	50                   	push   eax
c001c551:	8d 44 24 48          	lea    eax,[esp+0x48]
c001c555:	50                   	push   eax
c001c556:	53                   	push   ebx
c001c557:	e8 f0 be fe ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c001c55c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c560:	40                   	inc    eax
c001c561:	89 04 24             	mov    DWORD PTR [esp],eax
c001c564:	e8 23 25 ff ff       	call   c000ea8c <malloc>
c001c569:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001c56d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001c571:	59                   	pop    ecx
c001c572:	a3 c8 e0 02 c0       	mov    ds:0xc002e0c8,eax
c001c577:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c579:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001c57d:	51                   	push   ecx
c001c57e:	50                   	push   eax
c001c57f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001c583:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001c587:	53                   	push   ebx
c001c588:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c58b:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001c58f:	83 c4 20             	add    esp,0x20
c001c592:	89 c8                	mov    eax,ecx
c001c594:	99                   	cdq    
c001c595:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001c599:	0f 85 02 02 00 00    	jne    c001c7a1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001c59f:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001c5a3:	0f 85 f8 01 00 00    	jne    c001c7a1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001c5a9:	83 ec 0c             	sub    esp,0xc
c001c5ac:	53                   	push   ebx
c001c5ad:	e8 f6 bb fe ff       	call   c00081a8 <File::close()>
c001c5b2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c5b6:	83 c4 10             	add    esp,0x10
c001c5b9:	c6 05 cc e0 02 c0 01 	mov    BYTE PTR ds:0xc002e0cc,0x1
c001c5c0:	a3 c4 e0 02 c0       	mov    ds:0xc002e0c4,eax
c001c5c5:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001c5cd:	31 c9                	xor    ecx,ecx
c001c5cf:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001c5d6:	8b 2d c4 e0 02 c0    	mov    ebp,DWORD PTR ds:0xc002e0c4
c001c5dc:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001c5e3:	8b 15 c8 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e0c8
c001c5e9:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001c5ee:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001c5f6:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001c5fb:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001c603:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c607:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001c60f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c613:	39 cd                	cmp    ebp,ecx
c001c615:	0f 8e 86 01 00 00    	jle    c001c7a1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001c61b:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001c61e:	d4 40                	aam    0x40
c001c620:	d5 39                	aad    0x39
c001c622:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001c626:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001c62a:	d4 40                	aam    0x40
c001c62c:	d5 39                	aad    0x39
c001c62e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c632:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001c636:	d4 40                	aam    0x40
c001c638:	d5 39                	aad    0x39
c001c63a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001c63e:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001c642:	d4 40                	aam    0x40
c001c644:	d5 39                	aad    0x39
c001c646:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001c64a:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001c64e:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001c652:	3c 56                	cmp    al,0x56
c001c654:	74 47                	je     c001c69d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001c656:	d4 40                	aam    0x40
c001c658:	d5 39                	aad    0x39
c001c65a:	8d 58 d0             	lea    ebx,[eax-0x30]
c001c65d:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001c661:	0f b6 db             	movzx  ebx,bl
c001c664:	c1 e3 04             	shl    ebx,0x4
c001c667:	d4 40                	aam    0x40
c001c669:	d5 39                	aad    0x39
c001c66b:	83 e8 30             	sub    eax,0x30
c001c66e:	0f b6 c0             	movzx  eax,al
c001c671:	09 c3                	or     ebx,eax
c001c673:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001c677:	c1 e3 04             	shl    ebx,0x4
c001c67a:	d4 40                	aam    0x40
c001c67c:	d5 39                	aad    0x39
c001c67e:	83 e8 30             	sub    eax,0x30
c001c681:	0f b6 c0             	movzx  eax,al
c001c684:	09 c3                	or     ebx,eax
c001c686:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001c68a:	c1 e3 04             	shl    ebx,0x4
c001c68d:	d4 40                	aam    0x40
c001c68f:	d5 39                	aad    0x39
c001c691:	83 e8 30             	sub    eax,0x30
c001c694:	0f b6 c0             	movzx  eax,al
c001c697:	09 c3                	or     ebx,eax
c001c699:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001c69d:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001c6a1:	80 fb 58             	cmp    bl,0x58
c001c6a4:	74 49                	je     c001c6ef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001c6a6:	88 d8                	mov    al,bl
c001c6a8:	d4 40                	aam    0x40
c001c6aa:	d5 39                	aad    0x39
c001c6ac:	83 e8 30             	sub    eax,0x30
c001c6af:	0f b6 f8             	movzx  edi,al
c001c6b2:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001c6b6:	c1 e7 04             	shl    edi,0x4
c001c6b9:	d4 40                	aam    0x40
c001c6bb:	d5 39                	aad    0x39
c001c6bd:	83 e8 30             	sub    eax,0x30
c001c6c0:	0f b6 c0             	movzx  eax,al
c001c6c3:	09 c7                	or     edi,eax
c001c6c5:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001c6c9:	c1 e7 04             	shl    edi,0x4
c001c6cc:	d4 40                	aam    0x40
c001c6ce:	d5 39                	aad    0x39
c001c6d0:	83 e8 30             	sub    eax,0x30
c001c6d3:	0f b6 c0             	movzx  eax,al
c001c6d6:	09 c7                	or     edi,eax
c001c6d8:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001c6dc:	c1 e7 04             	shl    edi,0x4
c001c6df:	d4 40                	aam    0x40
c001c6e1:	d5 39                	aad    0x39
c001c6e3:	83 e8 30             	sub    eax,0x30
c001c6e6:	0f b6 c0             	movzx  eax,al
c001c6e9:	09 c7                	or     edi,eax
c001c6eb:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001c6ef:	8d 41 10             	lea    eax,[ecx+0x10]
c001c6f2:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001c6f6:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001c6fa:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001c6fe:	83 f9 0a             	cmp    ecx,0xa
c001c701:	74 07                	je     c001c70a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001c703:	47                   	inc    edi
c001c704:	39 c5                	cmp    ebp,eax
c001c706:	75 16                	jne    c001c71e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001c708:	89 e8                	mov    eax,ebp
c001c70a:	83 f9 0a             	cmp    ecx,0xa
c001c70d:	0f 94 c1             	sete   cl
c001c710:	0f b6 c9             	movzx  ecx,cl
c001c713:	01 c1                	add    ecx,eax
c001c715:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001c71a:	75 0f                	jne    c001c72b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001c71c:	eb 1c                	jmp    c001c73a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001c71e:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001c721:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001c725:	40                   	inc    eax
c001c726:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001c729:	eb cb                	jmp    c001c6f6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001c72b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c72f:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001c734:	0f 85 d9 fe ff ff    	jne    c001c613 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001c73a:	80 fb 58             	cmp    bl,0x58
c001c73d:	74 10                	je     c001c74f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001c73f:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001c744:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001c749:	0f 85 c4 fe ff ff    	jne    c001c613 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001c74f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c753:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c757:	83 e8 30             	sub    eax,0x30
c001c75a:	c1 e0 04             	shl    eax,0x4
c001c75d:	83 eb 30             	sub    ebx,0x30
c001c760:	09 d8                	or     eax,ebx
c001c762:	0f b6 c0             	movzx  eax,al
c001c765:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001c769:	0f 85 a4 fe ff ff    	jne    c001c613 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001c76f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c773:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c777:	83 e8 30             	sub    eax,0x30
c001c77a:	c1 e0 04             	shl    eax,0x4
c001c77d:	83 eb 30             	sub    ebx,0x30
c001c780:	09 d8                	or     eax,ebx
c001c782:	0f b6 c0             	movzx  eax,al
c001c785:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001c789:	0f 85 84 fe ff ff    	jne    c001c613 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001c78f:	50                   	push   eax
c001c790:	50                   	push   eax
c001c791:	8d 44 24 48          	lea    eax,[esp+0x48]
c001c795:	50                   	push   eax
c001c796:	56                   	push   esi
c001c797:	e8 b4 3e fe ff       	call   c0000650 <strcpy>
c001c79c:	83 c4 10             	add    esp,0x10
c001c79f:	eb 05                	jmp    c001c7a6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001c7a1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c7a4:	31 f6                	xor    esi,esi
c001c7a6:	81 c4 4c 01 00 00    	add    esp,0x14c
c001c7ac:	89 f0                	mov    eax,esi
c001c7ae:	5b                   	pop    ebx
c001c7af:	5e                   	pop    esi
c001c7b0:	5f                   	pop    edi
c001c7b1:	5d                   	pop    ebp
c001c7b2:	c3                   	ret    
c001c7b3:	90                   	nop

c001c7b4 <PCI::checkBus(unsigned char)>:
c001c7b4:	56                   	push   esi
c001c7b5:	53                   	push   ebx
c001c7b6:	31 db                	xor    ebx,ebx
c001c7b8:	51                   	push   ecx
c001c7b9:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c7be:	52                   	push   edx
c001c7bf:	53                   	push   ebx
c001c7c0:	43                   	inc    ebx
c001c7c1:	56                   	push   esi
c001c7c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7c6:	e8 6f 03 00 00       	call   c001cb3a <PCI::checkDevice(unsigned char, unsigned char)>
c001c7cb:	83 c4 10             	add    esp,0x10
c001c7ce:	83 fb 20             	cmp    ebx,0x20
c001c7d1:	75 eb                	jne    c001c7be <PCI::checkBus(unsigned char)+0xa>
c001c7d3:	58                   	pop    eax
c001c7d4:	5b                   	pop    ebx
c001c7d5:	5e                   	pop    esi
c001c7d6:	c3                   	ret    
c001c7d7:	90                   	nop

c001c7d8 <PCI::foundDevice(PCIDeviceInfo)>:
c001c7d8:	55                   	push   ebp
c001c7d9:	57                   	push   edi
c001c7da:	56                   	push   esi
c001c7db:	53                   	push   ebx
c001c7dc:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001c7e2:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001c7ea:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001c7f1:	3d ff ff 00 00       	cmp    eax,0xffff
c001c7f6:	0f 84 b6 01 00 00    	je     c001c9b2 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001c7fc:	0f b7 ac 24 a4 00 00 00 	movzx  ebp,WORD PTR [esp+0xa4]
c001c804:	66 81 fd 06 04       	cmp    bp,0x406
c001c809:	75 32                	jne    c001c83d <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001c80b:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001c813:	50                   	push   eax
c001c814:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001c81c:	50                   	push   eax
c001c81d:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001c825:	50                   	push   eax
c001c826:	53                   	push   ebx
c001c827:	e8 4c fb ff ff       	call   c001c378 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c82c:	59                   	pop    ecx
c001c82d:	5e                   	pop    esi
c001c82e:	0f b6 c0             	movzx  eax,al
c001c831:	50                   	push   eax
c001c832:	53                   	push   ebx
c001c833:	e8 7c ff ff ff       	call   c001c7b4 <PCI::checkBus(unsigned char)>
c001c838:	e9 15 01 00 00       	jmp    c001c952 <PCI::foundDevice(PCIDeviceInfo)+0x17a>
c001c83d:	0f b6 94 24 c4 00 00 00 	movzx  edx,BYTE PTR [esp+0xc4]
c001c845:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001c84b:	8b 8c 24 a4 00 00 00 	mov    ecx,DWORD PTR [esp+0xa4]
c001c852:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001c859:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c85d:	85 c0                	test   eax,eax
c001c85f:	74 34                	je     c001c895 <PCI::foundDevice(PCIDeviceInfo)+0xbd>
c001c861:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c864:	85 d2                	test   edx,edx
c001c866:	74 29                	je     c001c891 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001c868:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001c86e:	31 cf                	xor    edi,ecx
c001c870:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001c876:	75 19                	jne    c001c891 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001c878:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001c87e:	75 11                	jne    c001c891 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001c880:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001c887:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001c88b:	0f 84 21 01 00 00    	je     c001c9b2 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001c891:	8b 00                	mov    eax,DWORD PTR [eax]
c001c893:	eb c8                	jmp    c001c85d <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001c895:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c899:	be 20 43 02 c0       	mov    esi,0xc0024320
c001c89e:	b9 07 00 00 00       	mov    ecx,0x7
c001c8a3:	fc                   	cld    
c001c8a4:	31 d2                	xor    edx,edx
c001c8a6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c8a8:	b9 12 00 00 00       	mov    ecx,0x12
c001c8ad:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001c8b4:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c8b8:	83 ec 0c             	sub    esp,0xc
c001c8bb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c8bd:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001c8c5:	b9 0a 00 00 00       	mov    ecx,0xa
c001c8ca:	f7 f1                	div    ecx
c001c8cc:	83 c0 30             	add    eax,0x30
c001c8cf:	83 c2 30             	add    edx,0x30
c001c8d2:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001c8d6:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001c8de:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001c8e2:	31 d2                	xor    edx,edx
c001c8e4:	f7 f1                	div    ecx
c001c8e6:	83 c0 30             	add    eax,0x30
c001c8e9:	83 c2 30             	add    edx,0x30
c001c8ec:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001c8f0:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001c8f4:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c8f8:	50                   	push   eax
c001c8f9:	e8 49 fe fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001c8fe:	83 c4 10             	add    esp,0x10
c001c901:	81 fd 01 06 00 00    	cmp    ebp,0x601
c001c907:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001c90e:	75 47                	jne    c001c957 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c001c910:	83 ec 0c             	sub    esp,0xc
c001c913:	68 64 01 00 00       	push   0x164
c001c918:	e8 6f 21 ff ff       	call   c000ea8c <malloc>
c001c91d:	89 04 24             	mov    DWORD PTR [esp],eax
c001c920:	89 c5                	mov    ebp,eax
c001c922:	e8 35 11 00 00       	call   c001da5c <SATABus::SATABus()>
c001c927:	58                   	pop    eax
c001c928:	5a                   	pop    edx
c001c929:	55                   	push   ebp
c001c92a:	53                   	push   ebx
c001c92b:	e8 62 c7 fe ff       	call   c0009092 <Device::addChild(Device*)>
c001c930:	83 ec 1c             	sub    esp,0x1c
c001c933:	b9 09 00 00 00       	mov    ecx,0x9
c001c938:	89 e7                	mov    edi,esp
c001c93a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c93c:	55                   	push   ebp
c001c93d:	e8 96 c6 fe ff       	call   c0008fd8 <Device::preOpenPCI(PCIDeviceInfo)>
c001c942:	83 c4 30             	add    esp,0x30
c001c945:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c948:	6a 00                	push   0x0
c001c94a:	6a 00                	push   0x0
c001c94c:	6a 00                	push   0x0
c001c94e:	55                   	push   ebp
c001c94f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c952:	83 c4 10             	add    esp,0x10
c001c955:	eb 5b                	jmp    c001c9b2 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001c957:	81 fd 01 01 00 00    	cmp    ebp,0x101
c001c95d:	75 19                	jne    c001c978 <PCI::foundDevice(PCIDeviceInfo)+0x1a0>
c001c95f:	83 ec 0c             	sub    esp,0xc
c001c962:	68 70 02 00 00       	push   0x270
c001c967:	e8 20 21 ff ff       	call   c000ea8c <malloc>
c001c96c:	89 04 24             	mov    DWORD PTR [esp],eax
c001c96f:	89 c5                	mov    ebp,eax
c001c971:	e8 94 02 00 00       	call   c001cc0a <IDE::IDE()>
c001c976:	eb af                	jmp    c001c927 <PCI::foundDevice(PCIDeviceInfo)+0x14f>
c001c978:	83 ec 0c             	sub    esp,0xc
c001c97b:	68 58 01 00 00       	push   0x158
c001c980:	e8 07 21 ff ff       	call   c000ea8c <malloc>
c001c985:	89 c5                	mov    ebp,eax
c001c987:	58                   	pop    eax
c001c988:	5a                   	pop    edx
c001c989:	68 06 43 02 c0       	push   0xc0024306
c001c98e:	55                   	push   ebp
c001c98f:	e8 b2 c9 fe ff       	call   c0009346 <DriverlessDevice::DriverlessDevice(char const*)>
c001c994:	59                   	pop    ecx
c001c995:	5f                   	pop    edi
c001c996:	55                   	push   ebp
c001c997:	53                   	push   ebx
c001c998:	e8 f5 c6 fe ff       	call   c0009092 <Device::addChild(Device*)>
c001c99d:	83 ec 1c             	sub    esp,0x1c
c001c9a0:	b9 09 00 00 00       	mov    ecx,0x9
c001c9a5:	89 e7                	mov    edi,esp
c001c9a7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c9a9:	55                   	push   ebp
c001c9aa:	e8 29 c6 fe ff       	call   c0008fd8 <Device::preOpenPCI(PCIDeviceInfo)>
c001c9af:	83 c4 30             	add    esp,0x30
c001c9b2:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c9b8:	5b                   	pop    ebx
c001c9b9:	5e                   	pop    esi
c001c9ba:	5f                   	pop    edi
c001c9bb:	5d                   	pop    ebp
c001c9bc:	c3                   	ret    
c001c9bd:	90                   	nop

c001c9be <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c9be:	55                   	push   ebp
c001c9bf:	57                   	push   edi
c001c9c0:	56                   	push   esi
c001c9c1:	53                   	push   ebx
c001c9c2:	83 ec 68             	sub    esp,0x68
c001c9c5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001c9cc:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001c9d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c9d4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001c9db:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c9e0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c9e4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001c9eb:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001c9f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c9f4:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001c9f9:	6a 0c                	push   0xc
c001c9fb:	57                   	push   edi
c001c9fc:	53                   	push   ebx
c001c9fd:	56                   	push   esi
c001c9fe:	55                   	push   ebp
c001c9ff:	e8 c4 f7 ff ff       	call   c001c1c8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ca04:	83 c4 20             	add    esp,0x20
c001ca07:	57                   	push   edi
c001ca08:	53                   	push   ebx
c001ca09:	56                   	push   esi
c001ca0a:	55                   	push   ebp
c001ca0b:	e8 ae f8 ff ff       	call   c001c2be <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001ca10:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001ca15:	57                   	push   edi
c001ca16:	53                   	push   ebx
c001ca17:	56                   	push   esi
c001ca18:	55                   	push   ebp
c001ca19:	e8 36 f9 ff ff       	call   c001c354 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001ca1e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001ca22:	83 c4 14             	add    esp,0x14
c001ca25:	6a 3c                	push   0x3c
c001ca27:	57                   	push   edi
c001ca28:	53                   	push   ebx
c001ca29:	56                   	push   esi
c001ca2a:	55                   	push   ebp
c001ca2b:	e8 98 f7 ff ff       	call   c001c1c8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ca30:	0f b6 c4             	movzx  eax,ah
c001ca33:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ca37:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001ca3b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001ca3f:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c001ca44:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001ca4a:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001ca50:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ca54:	83 c4 20             	add    esp,0x20
c001ca57:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001ca5c:	74 30                	je     c001ca8e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001ca5e:	31 c0                	xor    eax,eax
c001ca60:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ca64:	7e 28                	jle    c001ca8e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001ca66:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001ca6e:	39 cb                	cmp    ebx,ecx
c001ca70:	75 19                	jne    c001ca8b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001ca72:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001ca7a:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001ca7e:	75 0b                	jne    c001ca8b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001ca80:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001ca87:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001ca8b:	40                   	inc    eax
c001ca8c:	eb d2                	jmp    c001ca60 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001ca8e:	31 d2                	xor    edx,edx
c001ca90:	83 ec 0c             	sub    esp,0xc
c001ca93:	57                   	push   edi
c001ca94:	53                   	push   ebx
c001ca95:	56                   	push   esi
c001ca96:	52                   	push   edx
c001ca97:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001ca9b:	55                   	push   ebp
c001ca9c:	e8 ff f8 ff ff       	call   c001c3a0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001caa1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001caa5:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001caa9:	42                   	inc    edx
c001caaa:	83 c4 20             	add    esp,0x20
c001caad:	83 fa 06             	cmp    edx,0x6
c001cab0:	75 de                	jne    c001ca90 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001cab2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cab6:	83 ec 0c             	sub    esp,0xc
c001cab9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cabd:	c1 e2 08             	shl    edx,0x8
c001cac0:	0f b6 c4             	movzx  eax,ah
c001cac3:	09 d0                	or     eax,edx
c001cac5:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001caca:	6a 02                	push   0x2
c001cacc:	57                   	push   edi
c001cacd:	53                   	push   ebx
c001cace:	56                   	push   esi
c001cacf:	55                   	push   ebp
c001cad0:	e8 f3 f6 ff ff       	call   c001c1c8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cad5:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001cada:	83 c4 20             	add    esp,0x20
c001cadd:	57                   	push   edi
c001cade:	53                   	push   ebx
c001cadf:	56                   	push   esi
c001cae0:	55                   	push   ebp
c001cae1:	e8 22 f8 ff ff       	call   c001c308 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001cae6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001caea:	57                   	push   edi
c001caeb:	53                   	push   ebx
c001caec:	56                   	push   esi
c001caed:	55                   	push   ebp
c001caee:	e8 7f f7 ff ff       	call   c001c272 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001caf3:	b9 09 00 00 00       	mov    ecx,0x9
c001caf8:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001cafd:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001cb01:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001cb05:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001cb09:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001cb0d:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001cb11:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001cb15:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001cb19:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001cb1d:	83 ec 0c             	sub    esp,0xc
c001cb20:	fc                   	cld    
c001cb21:	8d 74 24 58          	lea    esi,[esp+0x58]
c001cb25:	89 e7                	mov    edi,esp
c001cb27:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001cb29:	55                   	push   ebp
c001cb2a:	e8 a9 fc ff ff       	call   c001c7d8 <PCI::foundDevice(PCIDeviceInfo)>
c001cb2f:	81 c4 8c 00 00 00    	add    esp,0x8c
c001cb35:	5b                   	pop    ebx
c001cb36:	5e                   	pop    esi
c001cb37:	5f                   	pop    edi
c001cb38:	5d                   	pop    ebp
c001cb39:	c3                   	ret    

c001cb3a <PCI::checkDevice(unsigned char, unsigned char)>:
c001cb3a:	55                   	push   ebp
c001cb3b:	57                   	push   edi
c001cb3c:	56                   	push   esi
c001cb3d:	53                   	push   ebx
c001cb3e:	83 ec 0c             	sub    esp,0xc
c001cb41:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001cb46:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001cb4b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001cb4f:	6a 00                	push   0x0
c001cb51:	56                   	push   esi
c001cb52:	57                   	push   edi
c001cb53:	55                   	push   ebp
c001cb54:	e8 19 f7 ff ff       	call   c001c272 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001cb59:	6a 00                	push   0x0
c001cb5b:	56                   	push   esi
c001cb5c:	57                   	push   edi
c001cb5d:	55                   	push   ebp
c001cb5e:	e8 5b fe ff ff       	call   c001c9be <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001cb63:	83 c4 20             	add    esp,0x20
c001cb66:	6a 00                	push   0x0
c001cb68:	56                   	push   esi
c001cb69:	57                   	push   edi
c001cb6a:	55                   	push   ebp
c001cb6b:	e8 26 f7 ff ff       	call   c001c296 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001cb70:	83 c4 10             	add    esp,0x10
c001cb73:	a8 80                	test   al,0x80
c001cb75:	74 2d                	je     c001cba4 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001cb77:	bb 01 00 00 00       	mov    ebx,0x1
c001cb7c:	53                   	push   ebx
c001cb7d:	56                   	push   esi
c001cb7e:	57                   	push   edi
c001cb7f:	55                   	push   ebp
c001cb80:	e8 ed f6 ff ff       	call   c001c272 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001cb85:	83 c4 10             	add    esp,0x10
c001cb88:	0f b7 c0             	movzx  eax,ax
c001cb8b:	3d ff ff 00 00       	cmp    eax,0xffff
c001cb90:	74 0c                	je     c001cb9e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001cb92:	53                   	push   ebx
c001cb93:	56                   	push   esi
c001cb94:	57                   	push   edi
c001cb95:	55                   	push   ebp
c001cb96:	e8 23 fe ff ff       	call   c001c9be <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001cb9b:	83 c4 10             	add    esp,0x10
c001cb9e:	43                   	inc    ebx
c001cb9f:	83 fb 08             	cmp    ebx,0x8
c001cba2:	75 d8                	jne    c001cb7c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001cba4:	83 c4 0c             	add    esp,0xc
c001cba7:	5b                   	pop    ebx
c001cba8:	5e                   	pop    esi
c001cba9:	5f                   	pop    edi
c001cbaa:	5d                   	pop    ebp
c001cbab:	c3                   	ret    

c001cbac <PCI::detect()>:
c001cbac:	56                   	push   esi
c001cbad:	53                   	push   ebx
c001cbae:	53                   	push   ebx
c001cbaf:	31 db                	xor    ebx,ebx
c001cbb1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cbb5:	6a 00                	push   0x0
c001cbb7:	6a 00                	push   0x0
c001cbb9:	6a 00                	push   0x0
c001cbbb:	56                   	push   esi
c001cbbc:	e8 d5 f6 ff ff       	call   c001c296 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001cbc1:	83 c4 10             	add    esp,0x10
c001cbc4:	a8 80                	test   al,0x80
c001cbc6:	75 21                	jne    c001cbe9 <PCI::detect()+0x3d>
c001cbc8:	51                   	push   ecx
c001cbc9:	51                   	push   ecx
c001cbca:	6a 00                	push   0x0
c001cbcc:	56                   	push   esi
c001cbcd:	e8 e2 fb ff ff       	call   c001c7b4 <PCI::checkBus(unsigned char)>
c001cbd2:	83 c4 10             	add    esp,0x10
c001cbd5:	eb 2a                	jmp    c001cc01 <PCI::detect()+0x55>
c001cbd7:	52                   	push   edx
c001cbd8:	52                   	push   edx
c001cbd9:	53                   	push   ebx
c001cbda:	43                   	inc    ebx
c001cbdb:	56                   	push   esi
c001cbdc:	e8 d3 fb ff ff       	call   c001c7b4 <PCI::checkBus(unsigned char)>
c001cbe1:	83 c4 10             	add    esp,0x10
c001cbe4:	83 fb 08             	cmp    ebx,0x8
c001cbe7:	74 18                	je     c001cc01 <PCI::detect()+0x55>
c001cbe9:	53                   	push   ebx
c001cbea:	6a 00                	push   0x0
c001cbec:	6a 00                	push   0x0
c001cbee:	56                   	push   esi
c001cbef:	e8 7e f6 ff ff       	call   c001c272 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001cbf4:	83 c4 10             	add    esp,0x10
c001cbf7:	0f b7 c0             	movzx  eax,ax
c001cbfa:	3d ff ff 00 00       	cmp    eax,0xffff
c001cbff:	74 d6                	je     c001cbd7 <PCI::detect()+0x2b>
c001cc01:	58                   	pop    eax
c001cc02:	5b                   	pop    ebx
c001cc03:	5e                   	pop    esi
c001cc04:	c3                   	ret    
c001cc05:	90                   	nop

c001cc06 <IDE::close(int, int, void*)>:
c001cc06:	83 c8 ff             	or     eax,0xffffffff
c001cc09:	c3                   	ret    

c001cc0a <IDE::IDE()>:
c001cc0a:	83 ec 0c             	sub    esp,0xc
c001cc0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc11:	83 ec 08             	sub    esp,0x8
c001cc14:	68 b0 43 02 c0       	push   0xc00243b0
c001cc19:	50                   	push   eax
c001cc1a:	e8 cd c7 fe ff       	call   c00093ec <HardDiskController::HardDiskController(char const*)>
c001cc1f:	83 c4 10             	add    esp,0x10
c001cc22:	ba dc 44 02 c0       	mov    edx,0xc00244dc
c001cc27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc2b:	89 10                	mov    DWORD PTR [eax],edx
c001cc2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc31:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001cc38:	90                   	nop
c001cc39:	83 c4 0c             	add    esp,0xc
c001cc3c:	c3                   	ret    
c001cc3d:	90                   	nop

c001cc3e <IDE::prepareInterrupt(unsigned char)>:
c001cc3e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cc43:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cc47:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001cc4f:	c3                   	ret    

c001cc50 <selectDrive(unsigned char, unsigned char)>:
c001cc50:	c3                   	ret    
c001cc51:	90                   	nop

c001cc52 <IDE::getBase(unsigned char)>:
c001cc52:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001cc57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc5b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001cc63:	c3                   	ret    

c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001cc64:	55                   	push   ebp
c001cc65:	57                   	push   edi
c001cc66:	56                   	push   esi
c001cc67:	53                   	push   ebx
c001cc68:	83 ec 1c             	sub    esp,0x1c
c001cc6b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001cc6f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001cc73:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001cc77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001cc7b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001cc7e:	80 f9 03             	cmp    cl,0x3
c001cc81:	77 4f                	ja     c001ccd2 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001cc83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc87:	0f b6 f2             	movzx  esi,dl
c001cc8a:	0f b6 db             	movzx  ebx,bl
c001cc8d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001cc90:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001cc95:	80 ca 80             	or     dl,0x80
c001cc98:	52                   	push   edx
c001cc99:	6a 0c                	push   0xc
c001cc9b:	56                   	push   esi
c001cc9c:	57                   	push   edi
c001cc9d:	e8 c2 ff ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cca2:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001cca7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ccab:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001ccaf:	ee                   	out    dx,al
c001ccb0:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001ccb5:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001ccb9:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001ccbd:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ccc5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ccc9:	83 c4 2c             	add    esp,0x2c
c001cccc:	5b                   	pop    ebx
c001cccd:	5e                   	pop    esi
c001ccce:	5f                   	pop    edi
c001cccf:	5d                   	pop    ebp
c001ccd0:	eb 92                	jmp    c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ccd2:	0f b6 cb             	movzx  ecx,bl
c001ccd5:	83 f9 07             	cmp    ecx,0x7
c001ccd8:	77 12                	ja     c001ccec <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001ccda:	0f b6 d2             	movzx  edx,dl
c001ccdd:	0f b6 db             	movzx  ebx,bl
c001cce0:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001cce8:	01 da                	add    edx,ebx
c001ccea:	eb 2f                	jmp    c001cd1b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ccec:	83 f9 0d             	cmp    ecx,0xd
c001ccef:	77 13                	ja     c001cd04 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001ccf1:	0f b6 d2             	movzx  edx,dl
c001ccf4:	0f b6 db             	movzx  ebx,bl
c001ccf7:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001ccfe:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001cd02:	eb 17                	jmp    c001cd1b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001cd04:	83 f9 15             	cmp    ecx,0x15
c001cd07:	77 13                	ja     c001cd1c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001cd09:	0f b6 d2             	movzx  edx,dl
c001cd0c:	0f b6 db             	movzx  ebx,bl
c001cd0f:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001cd17:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001cd1b:	ee                   	out    dx,al
c001cd1c:	83 c4 1c             	add    esp,0x1c
c001cd1f:	5b                   	pop    ebx
c001cd20:	5e                   	pop    esi
c001cd21:	5f                   	pop    edi
c001cd22:	5d                   	pop    ebp
c001cd23:	c3                   	ret    

c001cd24 <IDE::read(unsigned char, unsigned char)>:
c001cd24:	57                   	push   edi
c001cd25:	56                   	push   esi
c001cd26:	53                   	push   ebx
c001cd27:	83 ec 10             	sub    esp,0x10
c001cd2a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cd2e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cd32:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cd36:	8d 42 f8             	lea    eax,[edx-0x8]
c001cd39:	3c 03                	cmp    al,0x3
c001cd3b:	77 48                	ja     c001cd85 <IDE::read(unsigned char, unsigned char)+0x61>
c001cd3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cd41:	0f b6 f1             	movzx  esi,cl
c001cd44:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001cd47:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001cd4c:	0c 80                	or     al,0x80
c001cd4e:	50                   	push   eax
c001cd4f:	6a 0c                	push   0xc
c001cd51:	56                   	push   esi
c001cd52:	53                   	push   ebx
c001cd53:	e8 0c ff ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd58:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cd5c:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001cd61:	0f b6 d2             	movzx  edx,dl
c001cd64:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001cd68:	ec                   	in     al,dx
c001cd69:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001cd6d:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001cd72:	52                   	push   edx
c001cd73:	6a 0c                	push   0xc
c001cd75:	56                   	push   esi
c001cd76:	53                   	push   ebx
c001cd77:	e8 e8 fe ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd7c:	83 c4 20             	add    esp,0x20
c001cd7f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001cd83:	eb 4c                	jmp    c001cdd1 <IDE::read(unsigned char, unsigned char)+0xad>
c001cd85:	0f b6 f2             	movzx  esi,dl
c001cd88:	83 fe 07             	cmp    esi,0x7
c001cd8b:	77 12                	ja     c001cd9f <IDE::read(unsigned char, unsigned char)+0x7b>
c001cd8d:	0f b6 c9             	movzx  ecx,cl
c001cd90:	0f b6 d2             	movzx  edx,dl
c001cd93:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001cd9b:	01 c2                	add    edx,eax
c001cd9d:	eb 31                	jmp    c001cdd0 <IDE::read(unsigned char, unsigned char)+0xac>
c001cd9f:	83 fe 0d             	cmp    esi,0xd
c001cda2:	77 13                	ja     c001cdb7 <IDE::read(unsigned char, unsigned char)+0x93>
c001cda4:	0f b6 c9             	movzx  ecx,cl
c001cda7:	0f b6 d2             	movzx  edx,dl
c001cdaa:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001cdb1:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001cdb5:	eb 19                	jmp    c001cdd0 <IDE::read(unsigned char, unsigned char)+0xac>
c001cdb7:	31 c0                	xor    eax,eax
c001cdb9:	83 fe 15             	cmp    esi,0x15
c001cdbc:	77 13                	ja     c001cdd1 <IDE::read(unsigned char, unsigned char)+0xad>
c001cdbe:	0f b6 c9             	movzx  ecx,cl
c001cdc1:	0f b6 d2             	movzx  edx,dl
c001cdc4:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001cdcc:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001cdd0:	ec                   	in     al,dx
c001cdd1:	83 c4 10             	add    esp,0x10
c001cdd4:	5b                   	pop    ebx
c001cdd5:	5e                   	pop    esi
c001cdd6:	5f                   	pop    edi
c001cdd7:	c3                   	ret    

c001cdd8 <IDE::waitInterrupt(unsigned char)>:
c001cdd8:	55                   	push   ebp
c001cdd9:	57                   	push   edi
c001cdda:	56                   	push   esi
c001cddb:	53                   	push   ebx
c001cddc:	31 db                	xor    ebx,ebx
c001cdde:	83 ec 0c             	sub    esp,0xc
c001cde1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001cde5:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001cdea:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001cdf2:	89 e8                	mov    eax,ebp
c001cdf4:	84 c0                	test   al,al
c001cdf6:	75 30                	jne    c001ce28 <IDE::waitInterrupt(unsigned char)+0x50>
c001cdf8:	50                   	push   eax
c001cdf9:	6a 0c                	push   0xc
c001cdfb:	56                   	push   esi
c001cdfc:	57                   	push   edi
c001cdfd:	e8 22 ff ff ff       	call   c001cd24 <IDE::read(unsigned char, unsigned char)>
c001ce02:	83 c4 10             	add    esp,0x10
c001ce05:	a8 01                	test   al,0x1
c001ce07:	75 27                	jne    c001ce30 <IDE::waitInterrupt(unsigned char)+0x58>
c001ce09:	f6 c3 04             	test   bl,0x4
c001ce0c:	75 12                	jne    c001ce20 <IDE::waitInterrupt(unsigned char)+0x48>
c001ce0e:	83 fb 32             	cmp    ebx,0x32
c001ce11:	7e 0d                	jle    c001ce20 <IDE::waitInterrupt(unsigned char)+0x48>
c001ce13:	83 ec 0c             	sub    esp,0xc
c001ce16:	6a 64                	push   0x64
c001ce18:	e8 c3 8d ff ff       	call   c0015be0 <milliTenthSleep(unsigned int)>
c001ce1d:	83 c4 10             	add    esp,0x10
c001ce20:	83 fb 3c             	cmp    ebx,0x3c
c001ce23:	74 0b                	je     c001ce30 <IDE::waitInterrupt(unsigned char)+0x58>
c001ce25:	43                   	inc    ebx
c001ce26:	eb c2                	jmp    c001cdea <IDE::waitInterrupt(unsigned char)+0x12>
c001ce28:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ce30:	83 c4 0c             	add    esp,0xc
c001ce33:	89 e8                	mov    eax,ebp
c001ce35:	5b                   	pop    ebx
c001ce36:	5e                   	pop    esi
c001ce37:	5f                   	pop    edi
c001ce38:	5d                   	pop    ebp
c001ce39:	c3                   	ret    

c001ce3a <ideChannel0IRQHandler(regs*, void*)>:
c001ce3a:	83 ec 10             	sub    esp,0x10
c001ce3d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce41:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ce48:	6a 07                	push   0x7
c001ce4a:	6a 00                	push   0x0
c001ce4c:	50                   	push   eax
c001ce4d:	e8 d2 fe ff ff       	call   c001cd24 <IDE::read(unsigned char, unsigned char)>
c001ce52:	83 c4 1c             	add    esp,0x1c
c001ce55:	c3                   	ret    

c001ce56 <ideChannel1IRQHandler(regs*, void*)>:
c001ce56:	83 ec 10             	sub    esp,0x10
c001ce59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce5d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ce64:	6a 07                	push   0x7
c001ce66:	6a 01                	push   0x1
c001ce68:	50                   	push   eax
c001ce69:	e8 b6 fe ff ff       	call   c001cd24 <IDE::read(unsigned char, unsigned char)>
c001ce6e:	83 c4 1c             	add    esp,0x1c
c001ce71:	c3                   	ret    

c001ce72 <IDE::enableIRQs(unsigned char, bool)>:
c001ce72:	57                   	push   edi
c001ce73:	b8 02 00 00 00       	mov    eax,0x2
c001ce78:	56                   	push   esi
c001ce79:	53                   	push   ebx
c001ce7a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ce7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ce83:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ce87:	74 02                	je     c001ce8b <IDE::enableIRQs(unsigned char, bool)+0x19>
c001ce89:	31 c0                	xor    eax,eax
c001ce8b:	0f b6 db             	movzx  ebx,bl
c001ce8e:	bf 04 00 00 00       	mov    edi,0x4
c001ce93:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001ce9a:	50                   	push   eax
c001ce9b:	6a 0c                	push   0xc
c001ce9d:	53                   	push   ebx
c001ce9e:	56                   	push   esi
c001ce9f:	e8 c0 fd ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cea4:	83 c4 10             	add    esp,0x10
c001cea7:	50                   	push   eax
c001cea8:	6a 0c                	push   0xc
c001ceaa:	53                   	push   ebx
c001ceab:	56                   	push   esi
c001ceac:	e8 73 fe ff ff       	call   c001cd24 <IDE::read(unsigned char, unsigned char)>
c001ceb1:	83 c4 10             	add    esp,0x10
c001ceb4:	4f                   	dec    edi
c001ceb5:	75 f0                	jne    c001cea7 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001ceb7:	5b                   	pop    ebx
c001ceb8:	5e                   	pop    esi
c001ceb9:	5f                   	pop    edi
c001ceba:	c3                   	ret    
c001cebb:	90                   	nop

c001cebc <IDE::open(int, int, void*)>:
c001cebc:	55                   	push   ebp
c001cebd:	57                   	push   edi
c001cebe:	56                   	push   esi
c001cebf:	53                   	push   ebx
c001cec0:	83 ec 1c             	sub    esp,0x1c
c001cec3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cec7:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001cece:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ced7:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001cee0:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001cee7:	0f 85 80 02 00 00    	jne    c001d16d <IDE::open(int, int, void*)+0x2b1>
c001ceed:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001cef3:	a8 70                	test   al,0x70
c001cef5:	75 44                	jne    c001cf3b <IDE::open(int, int, void*)+0x7f>
c001cef7:	ba 20 84 00 00       	mov    edx,0x8420
c001cefc:	0f a3 c2             	bt     edx,eax
c001ceff:	73 3a                	jae    c001cf3b <IDE::open(int, int, void*)+0x7f>
c001cf01:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001cf07:	83 ec 0c             	sub    esp,0xc
c001cf0a:	83 e0 fc             	and    eax,0xfffffffc
c001cf0d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001cf14:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001cf1a:	83 e0 fc             	and    eax,0xfffffffc
c001cf1d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001cf24:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001cf2a:	83 e0 fc             	and    eax,0xfffffffc
c001cf2d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cf34:	68 05 1c 02 c0       	push   0xc0021c05
c001cf39:	eb 60                	jmp    c001cf9b <IDE::open(int, int, void*)+0xdf>
c001cf3b:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001cf45:	be 64 00 00 00       	mov    esi,0x64
c001cf4a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001cf54:	57                   	push   edi
c001cf55:	57                   	push   edi
c001cf56:	68 c8 43 02 c0       	push   0xc00243c8
c001cf5b:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001cf5f:	57                   	push   edi
c001cf60:	e8 eb 36 fe ff       	call   c0000650 <strcpy>
c001cf65:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001cf6c:	31 d2                	xor    edx,edx
c001cf6e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf71:	89 c8                	mov    eax,ecx
c001cf73:	f7 f6                	div    esi
c001cf75:	be 0a 00 00 00       	mov    esi,0xa
c001cf7a:	31 d2                	xor    edx,edx
c001cf7c:	83 c0 30             	add    eax,0x30
c001cf7f:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001cf83:	89 c8                	mov    eax,ecx
c001cf85:	f7 f6                	div    esi
c001cf87:	89 d1                	mov    ecx,edx
c001cf89:	31 d2                	xor    edx,edx
c001cf8b:	f7 f6                	div    esi
c001cf8d:	83 c1 30             	add    ecx,0x30
c001cf90:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001cf94:	83 c2 30             	add    edx,0x30
c001cf97:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001cf9b:	e8 a7 f7 fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001cfa0:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001cfa7:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cfac:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001cfb3:	83 c4 10             	add    esp,0x10
c001cfb6:	89 fa                	mov    edx,edi
c001cfb8:	c1 e1 10             	shl    ecx,0x10
c001cfbb:	c1 e0 0b             	shl    eax,0xb
c001cfbe:	09 c1                	or     ecx,eax
c001cfc0:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001cfc7:	c1 e0 08             	shl    eax,0x8
c001cfca:	09 c1                	or     ecx,eax
c001cfcc:	89 c8                	mov    eax,ecx
c001cfce:	0d 08 00 00 80       	or     eax,0x80000008
c001cfd3:	ef                   	out    dx,eax
c001cfd4:	be fc 0c 00 00       	mov    esi,0xcfc
c001cfd9:	89 f2                	mov    edx,esi
c001cfdb:	ed                   	in     eax,dx
c001cfdc:	c1 e8 10             	shr    eax,0x10
c001cfdf:	3d ff ff 00 00       	cmp    eax,0xffff
c001cfe4:	0f 84 e1 00 00 00    	je     c001d0cb <IDE::open(int, int, void*)+0x20f>
c001cfea:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001cff0:	89 fa                	mov    edx,edi
c001cff2:	89 c8                	mov    eax,ecx
c001cff4:	ef                   	out    dx,eax
c001cff5:	b0 fe                	mov    al,0xfe
c001cff7:	89 f2                	mov    edx,esi
c001cff9:	ee                   	out    dx,al
c001cffa:	89 c8                	mov    eax,ecx
c001cffc:	89 fa                	mov    edx,edi
c001cffe:	ef                   	out    dx,eax
c001cfff:	89 f2                	mov    edx,esi
c001d001:	ed                   	in     eax,dx
c001d002:	3c fe                	cmp    al,0xfe
c001d004:	0f 85 83 00 00 00    	jne    c001d08d <IDE::open(int, int, void*)+0x1d1>
c001d00a:	83 ec 0c             	sub    esp,0xc
c001d00d:	68 3b 1c 02 c0       	push   0xc0021c3b
c001d012:	e8 30 f7 fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d017:	c7 04 24 ce 43 02 c0 	mov    DWORD PTR [esp],0xc00243ce
c001d01e:	e8 2b 9f fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001d023:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001d02d:	c7 04 24 8c 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e8c
c001d034:	e8 0e f7 fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d039:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001d040:	89 fa                	mov    edx,edi
c001d042:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001d049:	c1 e1 10             	shl    ecx,0x10
c001d04c:	c1 e0 08             	shl    eax,0x8
c001d04f:	09 c1                	or     ecx,eax
c001d051:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001d058:	c1 e0 0b             	shl    eax,0xb
c001d05b:	09 c1                	or     ecx,eax
c001d05d:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001d063:	89 c8                	mov    eax,ecx
c001d065:	ef                   	out    dx,eax
c001d066:	8b ab 50 01 00 00    	mov    ebp,DWORD PTR [ebx+0x150]
c001d06c:	89 f2                	mov    edx,esi
c001d06e:	89 e8                	mov    eax,ebp
c001d070:	ee                   	out    dx,al
c001d071:	89 c8                	mov    eax,ecx
c001d073:	89 fa                	mov    edx,edi
c001d075:	ef                   	out    dx,eax
c001d076:	89 f2                	mov    edx,esi
c001d078:	ed                   	in     eax,dx
c001d079:	0f b6 c0             	movzx  eax,al
c001d07c:	83 c4 10             	add    esp,0x10
c001d07f:	39 e8                	cmp    eax,ebp
c001d081:	74 58                	je     c001d0db <IDE::open(int, int, void*)+0x21f>
c001d083:	83 ec 0c             	sub    esp,0xc
c001d086:	68 e3 43 02 c0       	push   0xc00243e3
c001d08b:	eb 46                	jmp    c001d0d3 <IDE::open(int, int, void*)+0x217>
c001d08d:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001d096:	75 29                	jne    c001d0c1 <IDE::open(int, int, void*)+0x205>
c001d098:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001d09f:	3d 8a 00 00 00       	cmp    eax,0x8a
c001d0a4:	74 05                	je     c001d0ab <IDE::open(int, int, void*)+0x1ef>
c001d0a6:	83 c0 80             	add    eax,0xffffff80
c001d0a9:	75 16                	jne    c001d0c1 <IDE::open(int, int, void*)+0x205>
c001d0ab:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001d0b2:	83 ec 0c             	sub    esp,0xc
c001d0b5:	68 29 2d 02 c0       	push   0xc0022d29
c001d0ba:	e8 88 f6 fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d0bf:	eb 17                	jmp    c001d0d8 <IDE::open(int, int, void*)+0x21c>
c001d0c1:	83 ec 0c             	sub    esp,0xc
c001d0c4:	68 eb 43 02 c0       	push   0xc00243eb
c001d0c9:	eb 08                	jmp    c001d0d3 <IDE::open(int, int, void*)+0x217>
c001d0cb:	83 ec 0c             	sub    esp,0xc
c001d0ce:	68 1c 44 02 c0       	push   0xc002441c
c001d0d3:	e8 fa 1c ff ff       	call   c000edd2 <KePanic(char const*)>
c001d0d8:	83 c4 10             	add    esp,0x10
c001d0db:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001d0e2:	0f 84 bf 00 00 00    	je     c001d1a7 <IDE::open(int, int, void*)+0x2eb>
c001d0e8:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001d0ee:	83 ec 0c             	sub    esp,0xc
c001d0f1:	83 e0 fc             	and    eax,0xfffffffc
c001d0f4:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001d0fb:	83 c0 08             	add    eax,0x8
c001d0fe:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001d105:	68 46 44 02 c0       	push   0xc0024446
c001d10a:	e8 3f 9e fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001d10f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001d116:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001d11d:	50                   	push   eax
c001d11e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001d125:	50                   	push   eax
c001d126:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001d12d:	50                   	push   eax
c001d12e:	ff 35 c0 e0 02 c0    	push   DWORD PTR ds:0xc002e0c0
c001d134:	e8 8f f0 ff ff       	call   c001c1c8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d139:	83 c4 18             	add    esp,0x18
c001d13c:	83 c8 07             	or     eax,0x7
c001d13f:	0f b7 c0             	movzx  eax,ax
c001d142:	50                   	push   eax
c001d143:	6a 04                	push   0x4
c001d145:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001d14c:	50                   	push   eax
c001d14d:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001d154:	50                   	push   eax
c001d155:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001d15c:	50                   	push   eax
c001d15d:	ff 35 c0 e0 02 c0    	push   DWORD PTR ds:0xc002e0c0
c001d163:	e8 9c f2 ff ff       	call   c001c404 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001d168:	83 c4 20             	add    esp,0x20
c001d16b:	eb 3a                	jmp    c001d1a7 <IDE::open(int, int, void*)+0x2eb>
c001d16d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001d174:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001d17a:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001d181:	05 06 02 00 00       	add    eax,0x206
c001d186:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001d18d:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001d194:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001d19b:	05 06 02 00 00       	add    eax,0x206
c001d1a0:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001d1a7:	83 ec 0c             	sub    esp,0xc
c001d1aa:	68 e3 23 02 c0       	push   0xc00223e3
c001d1af:	e8 93 f5 fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d1b4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001d1ba:	83 c4 10             	add    esp,0x10
c001d1bd:	89 c2                	mov    edx,eax
c001d1bf:	83 e2 0f             	and    edx,0xf
c001d1c2:	83 fa 08             	cmp    edx,0x8
c001d1c5:	75 0a                	jne    c001d1d1 <IDE::open(int, int, void*)+0x315>
c001d1c7:	83 e8 02             	sub    eax,0x2
c001d1ca:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001d1d1:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001d1d7:	89 c2                	mov    edx,eax
c001d1d9:	83 e2 0f             	and    edx,0xf
c001d1dc:	83 fa 08             	cmp    edx,0x8
c001d1df:	75 0a                	jne    c001d1eb <IDE::open(int, int, void*)+0x32f>
c001d1e1:	83 e8 02             	sub    eax,0x2
c001d1e4:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001d1eb:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001d1f2:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001d1f9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001d1fc:	89 d0                	mov    eax,edx
c001d1fe:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001d202:	8d 7a 01             	lea    edi,[edx+0x1]
c001d205:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001d209:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001d20d:	83 e1 3f             	and    ecx,0x3f
c001d210:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001d214:	89 f9                	mov    ecx,edi
c001d216:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001d21d:	8d 78 02             	lea    edi,[eax+0x2]
c001d220:	0f b6 c9             	movzx  ecx,cl
c001d223:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001d226:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001d22a:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001d22e:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001d232:	83 e2 3f             	and    edx,0x3f
c001d235:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001d239:	89 f9                	mov    ecx,edi
c001d23b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001d241:	8d 78 03             	lea    edi,[eax+0x3]
c001d244:	0f b6 d1             	movzx  edx,cl
c001d247:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001d24a:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001d24e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001d252:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001d256:	83 e1 3f             	and    ecx,0x3f
c001d259:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001d25d:	89 fa                	mov    edx,edi
c001d25f:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001d265:	8d 78 04             	lea    edi,[eax+0x4]
c001d268:	0f b6 ca             	movzx  ecx,dl
c001d26b:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001d26e:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001d272:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001d276:	89 fa                	mov    edx,edi
c001d278:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001d27e:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001d282:	83 e2 3f             	and    edx,0x3f
c001d285:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001d289:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001d290:	66 85 f6             	test   si,si
c001d293:	74 24                	je     c001d2b9 <IDE::open(int, int, void*)+0x3fd>
c001d295:	89 f9                	mov    ecx,edi
c001d297:	83 c0 05             	add    eax,0x5
c001d29a:	0f b6 d1             	movzx  edx,cl
c001d29d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001d2a0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001d2a4:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001d2a8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001d2ae:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001d2b2:	83 e0 3f             	and    eax,0x3f
c001d2b5:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001d2b9:	83 ec 0c             	sub    esp,0xc
c001d2bc:	68 5e 44 02 c0       	push   0xc002445e
c001d2c1:	e8 81 f4 fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d2c6:	58                   	pop    eax
c001d2c7:	5a                   	pop    edx
c001d2c8:	6a 00                	push   0x0
c001d2ca:	53                   	push   ebx
c001d2cb:	e8 6e f9 ff ff       	call   c001cc3e <IDE::prepareInterrupt(unsigned char)>
c001d2d0:	59                   	pop    ecx
c001d2d1:	5e                   	pop    esi
c001d2d2:	6a 01                	push   0x1
c001d2d4:	53                   	push   ebx
c001d2d5:	e8 64 f9 ff ff       	call   c001cc3e <IDE::prepareInterrupt(unsigned char)>
c001d2da:	c7 04 24 ad 3c 02 c0 	mov    DWORD PTR [esp],0xc0023cad
c001d2e1:	e8 61 f4 fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d2e6:	83 c4 0c             	add    esp,0xc
c001d2e9:	6a 00                	push   0x0
c001d2eb:	6a 00                	push   0x0
c001d2ed:	53                   	push   ebx
c001d2ee:	e8 7f fb ff ff       	call   c001ce72 <IDE::enableIRQs(unsigned char, bool)>
c001d2f3:	83 c4 0c             	add    esp,0xc
c001d2f6:	6a 00                	push   0x0
c001d2f8:	6a 01                	push   0x1
c001d2fa:	53                   	push   ebx
c001d2fb:	e8 72 fb ff ff       	call   c001ce72 <IDE::enableIRQs(unsigned char, bool)>
c001d300:	c7 04 24 60 44 02 c0 	mov    DWORD PTR [esp],0xc0024460
c001d307:	e8 3b f4 fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d30c:	83 c4 10             	add    esp,0x10
c001d30f:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001d316:	74 3c                	je     c001d354 <IDE::open(int, int, void*)+0x498>
c001d318:	83 ec 0c             	sub    esp,0xc
c001d31b:	53                   	push   ebx
c001d31c:	6a 01                	push   0x1
c001d31e:	68 3a ce 01 c0       	push   0xc001ce3a
c001d323:	6a 0e                	push   0xe
c001d325:	53                   	push   ebx
c001d326:	e8 13 bd fe ff       	call   c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d32b:	83 c4 14             	add    esp,0x14
c001d32e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001d334:	53                   	push   ebx
c001d335:	6a 01                	push   0x1
c001d337:	68 56 ce 01 c0       	push   0xc001ce56
c001d33c:	6a 0f                	push   0xf
c001d33e:	53                   	push   ebx
c001d33f:	e8 fa bc fe ff       	call   c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d344:	83 c4 14             	add    esp,0x14
c001d347:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001d34d:	68 92 20 02 c0       	push   0xc0022092
c001d352:	eb 40                	jmp    c001d394 <IDE::open(int, int, void*)+0x4d8>
c001d354:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001d35e:	83 ec 0c             	sub    esp,0xc
c001d361:	53                   	push   ebx
c001d362:	6a 00                	push   0x0
c001d364:	68 3a ce 01 c0       	push   0xc001ce3a
c001d369:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001d36f:	53                   	push   ebx
c001d370:	e8 c9 bc fe ff       	call   c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d375:	83 c4 14             	add    esp,0x14
c001d378:	53                   	push   ebx
c001d379:	6a 00                	push   0x0
c001d37b:	68 56 ce 01 c0       	push   0xc001ce56
c001d380:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001d386:	53                   	push   ebx
c001d387:	e8 b2 bc fe ff       	call   c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d38c:	83 c4 14             	add    esp,0x14
c001d38f:	68 18 2d 02 c0       	push   0xc0022d18
c001d394:	e8 ae f3 fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d399:	83 c4 10             	add    esp,0x10
c001d39c:	83 ec 0c             	sub    esp,0xc
c001d39f:	68 62 44 02 c0       	push   0xc0024462
c001d3a4:	e8 9e f3 fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d3a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d3ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d3ae:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001d3b1:	c7 04 24 31 34 02 c0 	mov    DWORD PTR [esp],0xc0023431
c001d3b8:	e8 8a f3 fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d3bd:	83 c4 0c             	add    esp,0xc
c001d3c0:	6a 07                	push   0x7
c001d3c2:	6a 00                	push   0x0
c001d3c4:	53                   	push   ebx
c001d3c5:	e8 5a f9 ff ff       	call   c001cd24 <IDE::read(unsigned char, unsigned char)>
c001d3ca:	83 c4 0c             	add    esp,0xc
c001d3cd:	6a 07                	push   0x7
c001d3cf:	6a 01                	push   0x1
c001d3d1:	53                   	push   ebx
c001d3d2:	e8 4d f9 ff ff       	call   c001cd24 <IDE::read(unsigned char, unsigned char)>
c001d3d7:	c7 04 24 18 2b 02 c0 	mov    DWORD PTR [esp],0xc0022b18
c001d3de:	e8 64 f3 fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d3e3:	83 c4 0c             	add    esp,0xc
c001d3e6:	6a 01                	push   0x1
c001d3e8:	6a 00                	push   0x0
c001d3ea:	53                   	push   ebx
c001d3eb:	e8 82 fa ff ff       	call   c001ce72 <IDE::enableIRQs(unsigned char, bool)>
c001d3f0:	83 c4 0c             	add    esp,0xc
c001d3f3:	6a 01                	push   0x1
c001d3f5:	6a 01                	push   0x1
c001d3f7:	53                   	push   ebx
c001d3f8:	e8 75 fa ff ff       	call   c001ce72 <IDE::enableIRQs(unsigned char, bool)>
c001d3fd:	c7 04 24 65 44 02 c0 	mov    DWORD PTR [esp],0xc0024465
c001d404:	e8 3e f3 fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d409:	83 c4 2c             	add    esp,0x2c
c001d40c:	31 c0                	xor    eax,eax
c001d40e:	5b                   	pop    ebx
c001d40f:	5e                   	pop    esi
c001d410:	5f                   	pop    edi
c001d411:	5d                   	pop    ebp
c001d412:	c3                   	ret    
c001d413:	90                   	nop

c001d414 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001d414:	55                   	push   ebp
c001d415:	57                   	push   edi
c001d416:	56                   	push   esi
c001d417:	53                   	push   ebx
c001d418:	83 ec 1c             	sub    esp,0x1c
c001d41b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001d41f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d423:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d427:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001d42b:	8d 42 f8             	lea    eax,[edx-0x8]
c001d42e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d432:	3c 03                	cmp    al,0x3
c001d434:	77 5a                	ja     c001d490 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001d436:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d43a:	0f b6 db             	movzx  ebx,bl
c001d43d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d441:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001d444:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001d449:	0c 80                	or     al,0x80
c001d44b:	50                   	push   eax
c001d44c:	6a 0c                	push   0xc
c001d44e:	53                   	push   ebx
c001d44f:	56                   	push   esi
c001d450:	e8 0f f8 ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d455:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d459:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001d45e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d462:	0f b6 d2             	movzx  edx,dl
c001d465:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001d469:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001d46b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001d470:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001d474:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001d478:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001d480:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001d484:	83 c4 2c             	add    esp,0x2c
c001d487:	5b                   	pop    ebx
c001d488:	5e                   	pop    esi
c001d489:	5f                   	pop    edi
c001d48a:	5d                   	pop    ebp
c001d48b:	e9 d4 f7 ff ff       	jmp    c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d490:	0f b6 c2             	movzx  eax,dl
c001d493:	83 f8 07             	cmp    eax,0x7
c001d496:	77 12                	ja     c001d4aa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001d498:	0f b6 db             	movzx  ebx,bl
c001d49b:	0f b6 c2             	movzx  eax,dl
c001d49e:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001d4a6:	01 c2                	add    edx,eax
c001d4a8:	eb 2f                	jmp    c001d4d9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001d4aa:	83 f8 0d             	cmp    eax,0xd
c001d4ad:	77 13                	ja     c001d4c2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001d4af:	0f b6 db             	movzx  ebx,bl
c001d4b2:	0f b6 d2             	movzx  edx,dl
c001d4b5:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001d4bc:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001d4c0:	eb 17                	jmp    c001d4d9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001d4c2:	83 f8 15             	cmp    eax,0x15
c001d4c5:	77 14                	ja     c001d4db <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001d4c7:	0f b6 db             	movzx  ebx,bl
c001d4ca:	0f b6 d2             	movzx  edx,dl
c001d4cd:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001d4d5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001d4d9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001d4db:	83 c4 1c             	add    esp,0x1c
c001d4de:	5b                   	pop    ebx
c001d4df:	5e                   	pop    esi
c001d4e0:	5f                   	pop    edi
c001d4e1:	5d                   	pop    ebp
c001d4e2:	c3                   	ret    
c001d4e3:	90                   	nop

c001d4e4 <IDE::detect()>:
c001d4e4:	55                   	push   ebp
c001d4e5:	57                   	push   edi
c001d4e6:	56                   	push   esi
c001d4e7:	53                   	push   ebx
c001d4e8:	81 ec 28 02 00 00    	sub    esp,0x228
c001d4ee:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001d4f5:	68 67 44 02 c0       	push   0xc0024467
c001d4fa:	e8 48 f2 fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d4ff:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001d505:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001d509:	83 c4 10             	add    esp,0x10
c001d50c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001d511:	0f 85 26 04 00 00    	jne    c001d93d <IDE::detect()+0x459>
c001d517:	83 ec 0c             	sub    esp,0xc
c001d51a:	31 f6                	xor    esi,esi
c001d51c:	68 6a 44 02 c0       	push   0xc002446a
c001d521:	31 ff                	xor    edi,edi
c001d523:	e8 1f f2 fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d528:	83 c4 10             	add    esp,0x10
c001d52b:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001d532:	83 ec 0c             	sub    esp,0xc
c001d535:	68 6d 44 02 c0       	push   0xc002446d
c001d53a:	e8 08 f2 fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d53f:	83 c4 10             	add    esp,0x10
c001d542:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d549:	83 ec 0c             	sub    esp,0xc
c001d54c:	31 ed                	xor    ebp,ebp
c001d54e:	68 70 44 02 c0       	push   0xc0024470
c001d553:	e8 ef f1 fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d558:	89 f8                	mov    eax,edi
c001d55a:	c1 e0 06             	shl    eax,0x6
c001d55d:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001d565:	c7 04 24 73 44 02 c0 	mov    DWORD PTR [esp],0xc0024473
c001d56c:	e8 d6 f1 fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d571:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d575:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001d579:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d57d:	c1 e0 04             	shl    eax,0x4
c001d580:	83 c8 a0             	or     eax,0xffffffa0
c001d583:	0f b6 c0             	movzx  eax,al
c001d586:	50                   	push   eax
c001d587:	6a 06                	push   0x6
c001d589:	56                   	push   esi
c001d58a:	53                   	push   ebx
c001d58b:	e8 d4 f6 ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d590:	83 c4 1c             	add    esp,0x1c
c001d593:	6a 0c                	push   0xc
c001d595:	56                   	push   esi
c001d596:	53                   	push   ebx
c001d597:	e8 88 f7 ff ff       	call   c001cd24 <IDE::read(unsigned char, unsigned char)>
c001d59c:	83 c4 0c             	add    esp,0xc
c001d59f:	6a 0c                	push   0xc
c001d5a1:	56                   	push   esi
c001d5a2:	53                   	push   ebx
c001d5a3:	e8 7c f7 ff ff       	call   c001cd24 <IDE::read(unsigned char, unsigned char)>
c001d5a8:	83 c4 0c             	add    esp,0xc
c001d5ab:	6a 0c                	push   0xc
c001d5ad:	56                   	push   esi
c001d5ae:	53                   	push   ebx
c001d5af:	e8 70 f7 ff ff       	call   c001cd24 <IDE::read(unsigned char, unsigned char)>
c001d5b4:	83 c4 0c             	add    esp,0xc
c001d5b7:	6a 0c                	push   0xc
c001d5b9:	56                   	push   esi
c001d5ba:	53                   	push   ebx
c001d5bb:	e8 64 f7 ff ff       	call   c001cd24 <IDE::read(unsigned char, unsigned char)>
c001d5c0:	c7 04 24 76 44 02 c0 	mov    DWORD PTR [esp],0xc0024476
c001d5c7:	e8 7b f1 fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d5cc:	68 ec 00 00 00       	push   0xec
c001d5d1:	6a 07                	push   0x7
c001d5d3:	56                   	push   esi
c001d5d4:	53                   	push   ebx
c001d5d5:	e8 8a f6 ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5da:	83 c4 1c             	add    esp,0x1c
c001d5dd:	6a 0c                	push   0xc
c001d5df:	56                   	push   esi
c001d5e0:	53                   	push   ebx
c001d5e1:	e8 3e f7 ff ff       	call   c001cd24 <IDE::read(unsigned char, unsigned char)>
c001d5e6:	83 c4 0c             	add    esp,0xc
c001d5e9:	6a 0c                	push   0xc
c001d5eb:	56                   	push   esi
c001d5ec:	53                   	push   ebx
c001d5ed:	e8 32 f7 ff ff       	call   c001cd24 <IDE::read(unsigned char, unsigned char)>
c001d5f2:	83 c4 0c             	add    esp,0xc
c001d5f5:	6a 0c                	push   0xc
c001d5f7:	56                   	push   esi
c001d5f8:	53                   	push   ebx
c001d5f9:	e8 26 f7 ff ff       	call   c001cd24 <IDE::read(unsigned char, unsigned char)>
c001d5fe:	83 c4 0c             	add    esp,0xc
c001d601:	6a 0c                	push   0xc
c001d603:	56                   	push   esi
c001d604:	53                   	push   ebx
c001d605:	e8 1a f7 ff ff       	call   c001cd24 <IDE::read(unsigned char, unsigned char)>
c001d60a:	c7 04 24 79 44 02 c0 	mov    DWORD PTR [esp],0xc0024479
c001d611:	e8 31 f1 fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d616:	83 c4 0c             	add    esp,0xc
c001d619:	6a 0c                	push   0xc
c001d61b:	56                   	push   esi
c001d61c:	53                   	push   ebx
c001d61d:	e8 02 f7 ff ff       	call   c001cd24 <IDE::read(unsigned char, unsigned char)>
c001d622:	83 c4 10             	add    esp,0x10
c001d625:	84 c0                	test   al,al
c001d627:	75 1f                	jne    c001d648 <IDE::detect()+0x164>
c001d629:	83 ec 0c             	sub    esp,0xc
c001d62c:	68 7c 44 02 c0       	push   0xc002447c
c001d631:	e8 11 f1 fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d636:	e9 e0 02 00 00       	jmp    c001d91b <IDE::detect()+0x437>
c001d63b:	a8 80                	test   al,0x80
c001d63d:	74 21                	je     c001d660 <IDE::detect()+0x17c>
c001d63f:	45                   	inc    ebp
c001d640:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001d646:	7f 1e                	jg     c001d666 <IDE::detect()+0x182>
c001d648:	50                   	push   eax
c001d649:	6a 0c                	push   0xc
c001d64b:	56                   	push   esi
c001d64c:	53                   	push   ebx
c001d64d:	e8 d2 f6 ff ff       	call   c001cd24 <IDE::read(unsigned char, unsigned char)>
c001d652:	83 c4 10             	add    esp,0x10
c001d655:	a8 01                	test   al,0x1
c001d657:	74 e2                	je     c001d63b <IDE::detect()+0x157>
c001d659:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001d65e:	eb 22                	jmp    c001d682 <IDE::detect()+0x19e>
c001d660:	a8 08                	test   al,0x8
c001d662:	74 db                	je     c001d63f <IDE::detect()+0x15b>
c001d664:	eb 17                	jmp    c001d67d <IDE::detect()+0x199>
c001d666:	83 ec 0c             	sub    esp,0xc
c001d669:	6a 32                	push   0x32
c001d66b:	e8 70 85 ff ff       	call   c0015be0 <milliTenthSleep(unsigned int)>
c001d670:	83 c4 10             	add    esp,0x10
c001d673:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001d679:	75 cd                	jne    c001d648 <IDE::detect()+0x164>
c001d67b:	eb dc                	jmp    c001d659 <IDE::detect()+0x175>
c001d67d:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001d682:	83 ec 0c             	sub    esp,0xc
c001d685:	68 7f 44 02 c0       	push   0xc002447f
c001d68a:	e8 b8 f0 fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d68f:	83 c4 10             	add    esp,0x10
c001d692:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001d697:	74 57                	je     c001d6f0 <IDE::detect()+0x20c>
c001d699:	50                   	push   eax
c001d69a:	6a 04                	push   0x4
c001d69c:	56                   	push   esi
c001d69d:	53                   	push   ebx
c001d69e:	e8 81 f6 ff ff       	call   c001cd24 <IDE::read(unsigned char, unsigned char)>
c001d6a3:	83 c4 0c             	add    esp,0xc
c001d6a6:	6a 05                	push   0x5
c001d6a8:	56                   	push   esi
c001d6a9:	53                   	push   ebx
c001d6aa:	89 c5                	mov    ebp,eax
c001d6ac:	e8 73 f6 ff ff       	call   c001cd24 <IDE::read(unsigned char, unsigned char)>
c001d6b1:	89 e9                	mov    ecx,ebp
c001d6b3:	83 c4 10             	add    esp,0x10
c001d6b6:	0f b6 e9             	movzx  ebp,cl
c001d6b9:	83 fd 14             	cmp    ebp,0x14
c001d6bc:	75 04                	jne    c001d6c2 <IDE::detect()+0x1de>
c001d6be:	3c eb                	cmp    al,0xeb
c001d6c0:	74 11                	je     c001d6d3 <IDE::detect()+0x1ef>
c001d6c2:	83 fd 69             	cmp    ebp,0x69
c001d6c5:	0f 85 53 02 00 00    	jne    c001d91e <IDE::detect()+0x43a>
c001d6cb:	3c 96                	cmp    al,0x96
c001d6cd:	0f 85 4b 02 00 00    	jne    c001d91e <IDE::detect()+0x43a>
c001d6d3:	68 a1 00 00 00       	push   0xa1
c001d6d8:	6a 07                	push   0x7
c001d6da:	56                   	push   esi
c001d6db:	53                   	push   ebx
c001d6dc:	e8 83 f5 ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6e1:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001d6e8:	e8 f3 84 ff ff       	call   c0015be0 <milliTenthSleep(unsigned int)>
c001d6ed:	83 c4 10             	add    esp,0x10
c001d6f0:	83 ec 0c             	sub    esp,0xc
c001d6f3:	89 fd                	mov    ebp,edi
c001d6f5:	68 82 44 02 c0       	push   0xc0024482
c001d6fa:	e8 48 f0 fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d6ff:	8d 54 24 20          	lea    edx,[esp+0x20]
c001d703:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001d70a:	c1 e5 06             	shl    ebp,0x6
c001d70d:	52                   	push   edx
c001d70e:	01 dd                	add    ebp,ebx
c001d710:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001d714:	6a 00                	push   0x0
c001d716:	56                   	push   esi
c001d717:	53                   	push   ebx
c001d718:	e8 f7 fc ff ff       	call   c001d414 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001d71d:	83 c4 14             	add    esp,0x14
c001d720:	68 86 44 02 c0       	push   0xc0024486
c001d725:	e8 1d f0 fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d72a:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001d72f:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001d736:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001d73d:	89 f0                	mov    eax,esi
c001d73f:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001d745:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d749:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001d74f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d753:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001d75a:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001d762:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001d769:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001d771:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001d777:	c7 04 24 8a 44 02 c0 	mov    DWORD PTR [esp],0xc002448a
c001d77e:	e8 c4 ef fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d783:	83 c4 10             	add    esp,0x10
c001d786:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001d78d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d791:	74 09                	je     c001d79c <IDE::detect()+0x2b8>
c001d793:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001d79a:	eb 07                	jmp    c001d7a3 <IDE::detect()+0x2bf>
c001d79c:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001d7a3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d7a7:	89 f8                	mov    eax,edi
c001d7a9:	83 ec 0c             	sub    esp,0xc
c001d7ac:	c1 e0 06             	shl    eax,0x6
c001d7af:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001d7b2:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001d7b8:	68 8e 44 02 c0       	push   0xc002448e
c001d7bd:	e8 85 ef fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d7c2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d7c6:	89 e8                	mov    eax,ebp
c001d7c8:	83 c4 10             	add    esp,0x10
c001d7cb:	8d 6a 28             	lea    ebp,[edx+0x28]
c001d7ce:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001d7d1:	83 c2 02             	add    edx,0x2
c001d7d4:	83 c0 02             	add    eax,0x2
c001d7d7:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001d7dd:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001d7e0:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001d7e6:	39 d5                	cmp    ebp,edx
c001d7e8:	75 e4                	jne    c001d7ce <IDE::detect()+0x2ea>
c001d7ea:	89 f8                	mov    eax,edi
c001d7ec:	c1 e0 06             	shl    eax,0x6
c001d7ef:	01 d8                	add    eax,ebx
c001d7f1:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001d7f8:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001d7ff:	c1 ea 09             	shr    edx,0x9
c001d802:	83 e2 01             	and    edx,0x1
c001d805:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001d80c:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001d812:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001d816:	74 0c                	je     c001d824 <IDE::detect()+0x340>
c001d818:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001d821:	0f 95 c2             	setne  dl
c001d824:	89 fd                	mov    ebp,edi
c001d826:	83 ec 0c             	sub    esp,0xc
c001d829:	c1 e5 06             	shl    ebp,0x6
c001d82c:	01 dd                	add    ebp,ebx
c001d82e:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001d834:	68 92 44 02 c0       	push   0xc0024492
c001d839:	e8 09 ef fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d83e:	83 c4 10             	add    esp,0x10
c001d841:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001d846:	75 66                	jne    c001d8ae <IDE::detect()+0x3ca>
c001d848:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001d84f:	0f 84 b8 00 00 00    	je     c001d90d <IDE::detect()+0x429>
c001d855:	83 ec 0c             	sub    esp,0xc
c001d858:	68 96 44 02 c0       	push   0xc0024496
c001d85d:	e8 e5 ee fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d862:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001d869:	e8 1e 12 ff ff       	call   c000ea8c <malloc>
c001d86e:	89 04 24             	mov    DWORD PTR [esp],eax
c001d871:	89 c5                	mov    ebp,eax
c001d873:	e8 44 05 00 00       	call   c001ddbc <ATA::ATA()>
c001d878:	c7 04 24 9a 44 02 c0 	mov    DWORD PTR [esp],0xc002449a
c001d87f:	e8 c3 ee fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d884:	59                   	pop    ecx
c001d885:	58                   	pop    eax
c001d886:	55                   	push   ebp
c001d887:	53                   	push   ebx
c001d888:	e8 05 b8 fe ff       	call   c0009092 <Device::addChild(Device*)>
c001d88d:	c7 04 24 9f 44 02 c0 	mov    DWORD PTR [esp],0xc002449f
c001d894:	e8 ae ee fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d899:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d89c:	53                   	push   ebx
c001d89d:	57                   	push   edi
c001d89e:	6a 00                	push   0x0
c001d8a0:	55                   	push   ebp
c001d8a1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d8a4:	83 c4 14             	add    esp,0x14
c001d8a7:	68 a4 44 02 c0       	push   0xc00244a4
c001d8ac:	eb 57                	jmp    c001d905 <IDE::detect()+0x421>
c001d8ae:	83 ec 0c             	sub    esp,0xc
c001d8b1:	68 a9 44 02 c0       	push   0xc00244a9
c001d8b6:	e8 8c ee fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d8bb:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001d8c2:	e8 c5 11 ff ff       	call   c000ea8c <malloc>
c001d8c7:	89 04 24             	mov    DWORD PTR [esp],eax
c001d8ca:	89 c5                	mov    ebp,eax
c001d8cc:	e8 b1 0c 00 00       	call   c001e582 <ATAPI::ATAPI()>
c001d8d1:	c7 04 24 af 44 02 c0 	mov    DWORD PTR [esp],0xc00244af
c001d8d8:	e8 6a ee fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d8dd:	58                   	pop    eax
c001d8de:	5a                   	pop    edx
c001d8df:	55                   	push   ebp
c001d8e0:	53                   	push   ebx
c001d8e1:	e8 ac b7 fe ff       	call   c0009092 <Device::addChild(Device*)>
c001d8e6:	c7 04 24 b6 44 02 c0 	mov    DWORD PTR [esp],0xc00244b6
c001d8ed:	e8 55 ee fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d8f2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d8f5:	53                   	push   ebx
c001d8f6:	57                   	push   edi
c001d8f7:	6a 00                	push   0x0
c001d8f9:	55                   	push   ebp
c001d8fa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d8fd:	83 c4 14             	add    esp,0x14
c001d900:	68 bd 44 02 c0       	push   0xc00244bd
c001d905:	e8 3d ee fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d90a:	83 c4 10             	add    esp,0x10
c001d90d:	83 ec 0c             	sub    esp,0xc
c001d910:	47                   	inc    edi
c001d911:	68 c4 44 02 c0       	push   0xc00244c4
c001d916:	e8 2c ee fe ff       	call   c000c747 <KeSetBootMessage(char const*)>
c001d91b:	83 c4 10             	add    esp,0x10
c001d91e:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001d922:	74 0c                	je     c001d930 <IDE::detect()+0x44c>
c001d924:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001d92b:	e9 19 fc ff ff       	jmp    c001d549 <IDE::detect()+0x65>
c001d930:	4e                   	dec    esi
c001d931:	74 0a                	je     c001d93d <IDE::detect()+0x459>
c001d933:	be 01 00 00 00       	mov    esi,0x1
c001d938:	e9 f5 fb ff ff       	jmp    c001d532 <IDE::detect()+0x4e>
c001d93d:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d943:	5b                   	pop    ebx
c001d944:	5e                   	pop    esi
c001d945:	5f                   	pop    edi
c001d946:	5d                   	pop    ebp
c001d947:	c3                   	ret    

c001d948 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d948:	55                   	push   ebp
c001d949:	57                   	push   edi
c001d94a:	56                   	push   esi
c001d94b:	53                   	push   ebx
c001d94c:	83 ec 1c             	sub    esp,0x1c
c001d94f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d953:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d957:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d95b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d95f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d963:	88 c3                	mov    bl,al
c001d965:	25 ff 00 00 00       	and    eax,0xff
c001d96a:	0f 84 88 00 00 00    	je     c001d9f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d970:	83 ec 0c             	sub    esp,0xc
c001d973:	89 c7                	mov    edi,eax
c001d975:	68 c8 44 02 c0       	push   0xc00244c8
c001d97a:	e8 cf 95 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001d97f:	83 c4 10             	add    esp,0x10
c001d982:	83 ff 01             	cmp    edi,0x1
c001d985:	74 6b                	je     c001d9f2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001d987:	83 ff 02             	cmp    edi,0x2
c001d98a:	75 58                	jne    c001d9e4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001d98c:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001d991:	50                   	push   eax
c001d992:	6a 01                	push   0x1
c001d994:	01 ff                	add    edi,edi
c001d996:	09 fe                	or     esi,edi
c001d998:	89 f0                	mov    eax,esi
c001d99a:	0f b6 f0             	movzx  esi,al
c001d99d:	c1 e6 06             	shl    esi,0x6
c001d9a0:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001d9a8:	50                   	push   eax
c001d9a9:	55                   	push   ebp
c001d9aa:	e8 75 f3 ff ff       	call   c001cd24 <IDE::read(unsigned char, unsigned char)>
c001d9af:	83 c4 10             	add    esp,0x10
c001d9b2:	a8 01                	test   al,0x1
c001d9b4:	74 02                	je     c001d9b8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001d9b6:	b3 07                	mov    bl,0x7
c001d9b8:	a8 02                	test   al,0x2
c001d9ba:	74 02                	je     c001d9be <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001d9bc:	b3 03                	mov    bl,0x3
c001d9be:	a8 04                	test   al,0x4
c001d9c0:	74 02                	je     c001d9c4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001d9c2:	b3 14                	mov    bl,0x14
c001d9c4:	a8 08                	test   al,0x8
c001d9c6:	74 02                	je     c001d9ca <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001d9c8:	b3 03                	mov    bl,0x3
c001d9ca:	a8 10                	test   al,0x10
c001d9cc:	74 02                	je     c001d9d0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001d9ce:	b3 15                	mov    bl,0x15
c001d9d0:	a8 20                	test   al,0x20
c001d9d2:	74 02                	je     c001d9d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001d9d4:	b3 03                	mov    bl,0x3
c001d9d6:	a8 40                	test   al,0x40
c001d9d8:	74 02                	je     c001d9dc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001d9da:	b3 16                	mov    bl,0x16
c001d9dc:	a8 80                	test   al,0x80
c001d9de:	74 18                	je     c001d9f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d9e0:	b3 0d                	mov    bl,0xd
c001d9e2:	eb 14                	jmp    c001d9f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d9e4:	83 ff 03             	cmp    edi,0x3
c001d9e7:	74 0d                	je     c001d9f6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001d9e9:	83 ff 04             	cmp    edi,0x4
c001d9ec:	75 0a                	jne    c001d9f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d9ee:	b3 08                	mov    bl,0x8
c001d9f0:	eb 06                	jmp    c001d9f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d9f2:	b3 13                	mov    bl,0x13
c001d9f4:	eb 02                	jmp    c001d9f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d9f6:	b3 17                	mov    bl,0x17
c001d9f8:	83 c4 1c             	add    esp,0x1c
c001d9fb:	88 d8                	mov    al,bl
c001d9fd:	5b                   	pop    ebx
c001d9fe:	5e                   	pop    esi
c001d9ff:	5f                   	pop    edi
c001da00:	5d                   	pop    ebp
c001da01:	c3                   	ret    

c001da02 <IDE::polling(unsigned char, unsigned int)>:
c001da02:	57                   	push   edi
c001da03:	56                   	push   esi
c001da04:	53                   	push   ebx
c001da05:	bb 04 00 00 00       	mov    ebx,0x4
c001da0a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001da0e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001da13:	52                   	push   edx
c001da14:	6a 0c                	push   0xc
c001da16:	56                   	push   esi
c001da17:	57                   	push   edi
c001da18:	e8 07 f3 ff ff       	call   c001cd24 <IDE::read(unsigned char, unsigned char)>
c001da1d:	83 c4 10             	add    esp,0x10
c001da20:	4b                   	dec    ebx
c001da21:	75 f0                	jne    c001da13 <IDE::polling(unsigned char, unsigned int)+0x11>
c001da23:	bb a0 86 01 00       	mov    ebx,0x186a0
c001da28:	50                   	push   eax
c001da29:	6a 0c                	push   0xc
c001da2b:	56                   	push   esi
c001da2c:	57                   	push   edi
c001da2d:	e8 f2 f2 ff ff       	call   c001cd24 <IDE::read(unsigned char, unsigned char)>
c001da32:	83 c4 10             	add    esp,0x10
c001da35:	a8 01                	test   al,0x1
c001da37:	75 17                	jne    c001da50 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001da39:	a8 20                	test   al,0x20
c001da3b:	75 0f                	jne    c001da4c <IDE::polling(unsigned char, unsigned int)+0x4a>
c001da3d:	4b                   	dec    ebx
c001da3e:	74 10                	je     c001da50 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001da40:	a8 80                	test   al,0x80
c001da42:	75 e4                	jne    c001da28 <IDE::polling(unsigned char, unsigned int)+0x26>
c001da44:	a8 08                	test   al,0x8
c001da46:	74 e0                	je     c001da28 <IDE::polling(unsigned char, unsigned int)+0x26>
c001da48:	31 c0                	xor    eax,eax
c001da4a:	eb 06                	jmp    c001da52 <IDE::polling(unsigned char, unsigned int)+0x50>
c001da4c:	b0 01                	mov    al,0x1
c001da4e:	eb 02                	jmp    c001da52 <IDE::polling(unsigned char, unsigned int)+0x50>
c001da50:	b0 02                	mov    al,0x2
c001da52:	5b                   	pop    ebx
c001da53:	5e                   	pop    esi
c001da54:	5f                   	pop    edi
c001da55:	c3                   	ret    

c001da56 <SATABus::close(int, int, void*)>:
c001da56:	31 c0                	xor    eax,eax
c001da58:	c3                   	ret    
c001da59:	90                   	nop

c001da5a <SATABus::detect()>:
c001da5a:	c3                   	ret    
c001da5b:	90                   	nop

c001da5c <SATABus::SATABus()>:
c001da5c:	83 ec 0c             	sub    esp,0xc
c001da5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da63:	83 ec 08             	sub    esp,0x8
c001da66:	68 00 45 02 c0       	push   0xc0024500
c001da6b:	50                   	push   eax
c001da6c:	e8 7b b9 fe ff       	call   c00093ec <HardDiskController::HardDiskController(char const*)>
c001da71:	83 c4 10             	add    esp,0x10
c001da74:	ba 2c 45 02 c0       	mov    edx,0xc002452c
c001da79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da7d:	89 10                	mov    DWORD PTR [eax],edx
c001da7f:	83 ec 0c             	sub    esp,0xc
c001da82:	6a 50                	push   0x50
c001da84:	e8 21 16 ff ff       	call   c000f0aa <Phys::allocateContiguousPages(int)>
c001da89:	83 c4 10             	add    esp,0x10
c001da8c:	89 c2                	mov    edx,eax
c001da8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da92:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001da98:	83 ec 0c             	sub    esp,0xc
c001da9b:	6a 50                	push   0x50
c001da9d:	e8 ef 46 ff ff       	call   c0012191 <Virt::allocateKernelVirtualPages(int)>
c001daa2:	83 c4 10             	add    esp,0x10
c001daa5:	89 c2                	mov    edx,eax
c001daa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001daab:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dab1:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c001dab6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001daba:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001dac0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dac4:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001daca:	83 ec 0c             	sub    esp,0xc
c001dacd:	6a 03                	push   0x3
c001dacf:	6a 50                	push   0x50
c001dad1:	51                   	push   ecx
c001dad2:	52                   	push   edx
c001dad3:	50                   	push   eax
c001dad4:	e8 8b 4f ff ff       	call   c0012a64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001dad9:	83 c4 20             	add    esp,0x20
c001dadc:	90                   	nop
c001dadd:	83 c4 0c             	add    esp,0xc
c001dae0:	c3                   	ret    
c001dae1:	90                   	nop

c001dae2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001dae2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dae6:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001dae9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001daec:	09 c2                	or     edx,eax
c001daee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001daf2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001daf8:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dafa:	31 c0                	xor    eax,eax
c001dafc:	c1 e9 08             	shr    ecx,0x8
c001daff:	83 e1 0f             	and    ecx,0xf
c001db02:	39 c8                	cmp    eax,ecx
c001db04:	74 0a                	je     c001db10 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001db06:	f6 c2 01             	test   dl,0x1
c001db09:	74 08                	je     c001db13 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001db0b:	d1 ea                	shr    edx,1
c001db0d:	40                   	inc    eax
c001db0e:	eb f2                	jmp    c001db02 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001db10:	83 c8 ff             	or     eax,0xffffffff
c001db13:	c3                   	ret    

c001db14 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001db14:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001db18:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001db1b:	89 c2                	mov    edx,eax
c001db1d:	c1 ea 08             	shr    edx,0x8
c001db20:	83 e2 0f             	and    edx,0xf
c001db23:	4a                   	dec    edx
c001db24:	75 32                	jne    c001db58 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001db26:	83 e0 0f             	and    eax,0xf
c001db29:	83 f8 03             	cmp    eax,0x3
c001db2c:	75 2a                	jne    c001db58 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001db2e:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001db31:	b8 02 00 00 00       	mov    eax,0x2
c001db36:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001db3c:	74 1c                	je     c001db5a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001db3e:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001db44:	b8 04 00 00 00       	mov    eax,0x4
c001db49:	74 0f                	je     c001db5a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001db4b:	31 c0                	xor    eax,eax
c001db4d:	83 fa 03             	cmp    edx,0x3
c001db50:	0f 94 c0             	sete   al
c001db53:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001db57:	c3                   	ret    
c001db58:	31 c0                	xor    eax,eax
c001db5a:	c3                   	ret    
c001db5b:	90                   	nop

c001db5c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001db5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001db60:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001db63:	0f ba e2 0f          	bt     edx,0xf
c001db67:	72 f7                	jb     c001db60 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001db69:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001db6c:	83 ca 10             	or     edx,0x10
c001db6f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001db72:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001db75:	83 ca 01             	or     edx,0x1
c001db78:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001db7b:	c3                   	ret    

c001db7c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001db7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001db80:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001db83:	83 e2 fe             	and    edx,0xfffffffe
c001db86:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001db89:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001db8c:	83 e2 ef             	and    edx,0xffffffef
c001db8f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001db92:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001db95:	0f ba e2 0e          	bt     edx,0xe
c001db99:	72 f7                	jb     c001db92 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001db9b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001db9e:	0f ba e2 0f          	bt     edx,0xf
c001dba2:	72 ee                	jb     c001db92 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001dba4:	c3                   	ret    
c001dba5:	90                   	nop

c001dba6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001dba6:	55                   	push   ebp
c001dba7:	57                   	push   edi
c001dba8:	56                   	push   esi
c001dba9:	53                   	push   ebx
c001dbaa:	83 ec 1c             	sub    esp,0x1c
c001dbad:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dbb1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dbb5:	53                   	push   ebx
c001dbb6:	57                   	push   edi
c001dbb7:	e8 c0 ff ff ff       	call   c001db7c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001dbbc:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001dbc0:	83 ec 0c             	sub    esp,0xc
c001dbc3:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001dbc9:	c1 e5 0a             	shl    ebp,0xa
c001dbcc:	01 e8                	add    eax,ebp
c001dbce:	89 03                	mov    DWORD PTR [ebx],eax
c001dbd0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dbd2:	68 00 04 00 00       	push   0x400
c001dbd7:	6a 00                	push   0x0
c001dbd9:	50                   	push   eax
c001dbda:	e8 11 29 fe ff       	call   c00004f0 <memset>
c001dbdf:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001dbe5:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001dbe9:	83 c4 1c             	add    esp,0x1c
c001dbec:	01 e8                	add    eax,ebp
c001dbee:	89 03                	mov    DWORD PTR [ebx],eax
c001dbf0:	c1 e6 08             	shl    esi,0x8
c001dbf3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001dbfa:	81 c6 00 80 00 00    	add    esi,0x8000
c001dc00:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001dc06:	01 f0                	add    eax,esi
c001dc08:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001dc0b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001dc0e:	68 00 01 00 00       	push   0x100
c001dc13:	6a 00                	push   0x0
c001dc15:	50                   	push   eax
c001dc16:	e8 d5 28 fe ff       	call   c00004f0 <memset>
c001dc1b:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001dc21:	31 d2                	xor    edx,edx
c001dc23:	01 f0                	add    eax,esi
c001dc25:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001dc28:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001dc2f:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001dc35:	01 ee                	add    esi,ebp
c001dc37:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001dc3b:	83 c4 10             	add    esp,0x10
c001dc3e:	c1 e5 0d             	shl    ebp,0xd
c001dc41:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001dc47:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001dc4d:	83 c6 20             	add    esi,0x20
c001dc50:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dc54:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001dc5a:	01 e8                	add    eax,ebp
c001dc5c:	01 d0                	add    eax,edx
c001dc5e:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001dc61:	52                   	push   edx
c001dc62:	68 00 01 00 00       	push   0x100
c001dc67:	6a 00                	push   0x0
c001dc69:	50                   	push   eax
c001dc6a:	e8 81 28 fe ff       	call   c00004f0 <memset>
c001dc6f:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001dc75:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001dc7c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dc80:	83 c4 10             	add    esp,0x10
c001dc83:	01 e8                	add    eax,ebp
c001dc85:	01 d0                	add    eax,edx
c001dc87:	81 c2 00 01 00 00    	add    edx,0x100
c001dc8d:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001dc90:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001dc96:	75 af                	jne    c001dc47 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001dc98:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001dc9f:	50                   	push   eax
c001dca0:	50                   	push   eax
c001dca1:	53                   	push   ebx
c001dca2:	57                   	push   edi
c001dca3:	e8 b4 fe ff ff       	call   c001db5c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001dca8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001dcaf:	83 c4 2c             	add    esp,0x2c
c001dcb2:	5b                   	pop    ebx
c001dcb3:	5e                   	pop    esi
c001dcb4:	5f                   	pop    edi
c001dcb5:	5d                   	pop    ebp
c001dcb6:	c3                   	ret    
c001dcb7:	90                   	nop

c001dcb8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001dcb8:	55                   	push   ebp
c001dcb9:	57                   	push   edi
c001dcba:	56                   	push   esi
c001dcbb:	53                   	push   ebx
c001dcbc:	31 db                	xor    ebx,ebx
c001dcbe:	83 ec 0c             	sub    esp,0xc
c001dcc1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001dcc5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001dcc9:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001dccc:	f7 c7 01 00 00 00    	test   edi,0x1
c001dcd2:	74 7a                	je     c001dd4e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001dcd4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001dcd8:	89 d8                	mov    eax,ebx
c001dcda:	c1 e0 07             	shl    eax,0x7
c001dcdd:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001dce4:	55                   	push   ebp
c001dce5:	56                   	push   esi
c001dce6:	e8 29 fe ff ff       	call   c001db14 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001dceb:	5a                   	pop    edx
c001dcec:	59                   	pop    ecx
c001dced:	83 f8 01             	cmp    eax,0x1
c001dcf0:	75 21                	jne    c001dd13 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001dcf2:	50                   	push   eax
c001dcf3:	53                   	push   ebx
c001dcf4:	55                   	push   ebp
c001dcf5:	56                   	push   esi
c001dcf6:	e8 ab fe ff ff       	call   c001dba6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001dcfb:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001dd02:	e8 85 0d ff ff       	call   c000ea8c <malloc>
c001dd07:	89 04 24             	mov    DWORD PTR [esp],eax
c001dd0a:	89 c5                	mov    ebp,eax
c001dd0c:	e8 37 0f 00 00       	call   c001ec48 <SATA::SATA()>
c001dd11:	eb 24                	jmp    c001dd37 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001dd13:	83 f8 04             	cmp    eax,0x4
c001dd16:	75 36                	jne    c001dd4e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001dd18:	51                   	push   ecx
c001dd19:	53                   	push   ebx
c001dd1a:	55                   	push   ebp
c001dd1b:	56                   	push   esi
c001dd1c:	e8 85 fe ff ff       	call   c001dba6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001dd21:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001dd28:	e8 5f 0d ff ff       	call   c000ea8c <malloc>
c001dd2d:	89 04 24             	mov    DWORD PTR [esp],eax
c001dd30:	89 c5                	mov    ebp,eax
c001dd32:	e8 a7 12 00 00       	call   c001efde <SATAPI::SATAPI()>
c001dd37:	58                   	pop    eax
c001dd38:	5a                   	pop    edx
c001dd39:	55                   	push   ebp
c001dd3a:	56                   	push   esi
c001dd3b:	e8 52 b3 fe ff       	call   c0009092 <Device::addChild(Device*)>
c001dd40:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001dd43:	56                   	push   esi
c001dd44:	6a 00                	push   0x0
c001dd46:	53                   	push   ebx
c001dd47:	55                   	push   ebp
c001dd48:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001dd4b:	83 c4 20             	add    esp,0x20
c001dd4e:	d1 ef                	shr    edi,1
c001dd50:	43                   	inc    ebx
c001dd51:	83 fb 20             	cmp    ebx,0x20
c001dd54:	0f 85 72 ff ff ff    	jne    c001dccc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001dd5a:	83 c4 0c             	add    esp,0xc
c001dd5d:	5b                   	pop    ebx
c001dd5e:	5e                   	pop    esi
c001dd5f:	5f                   	pop    edi
c001dd60:	5d                   	pop    ebp
c001dd61:	c3                   	ret    

c001dd62 <SATABus::open(int, int, void*)>:
c001dd62:	53                   	push   ebx
c001dd63:	83 ec 08             	sub    esp,0x8
c001dd66:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dd6a:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001dd70:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001dd76:	e8 dd 79 ff ff       	call   c0015758 <KeDisablePreemption()>
c001dd7b:	52                   	push   edx
c001dd7c:	52                   	push   edx
c001dd7d:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001dd83:	53                   	push   ebx
c001dd84:	e8 2f ff ff ff       	call   c001dcb8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001dd89:	e8 f2 79 ff ff       	call   c0015780 <KeRestorePreemption()>
c001dd8e:	83 c4 18             	add    esp,0x18
c001dd91:	31 c0                	xor    eax,eax
c001dd93:	5b                   	pop    ebx
c001dd94:	c3                   	ret    
c001dd95:	90                   	nop

c001dd96 <ATA::close(int, int, void*)>:
c001dd96:	83 ec 0c             	sub    esp,0xc
c001dd99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd9d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dda3:	85 c0                	test   eax,eax
c001dda5:	74 0c                	je     c001ddb3 <ATA::close(int, int, void*)+0x1d>
c001dda7:	8b 10                	mov    edx,DWORD PTR [eax]
c001dda9:	83 ec 0c             	sub    esp,0xc
c001ddac:	50                   	push   eax
c001ddad:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ddb0:	83 c4 10             	add    esp,0x10
c001ddb3:	31 c0                	xor    eax,eax
c001ddb5:	83 c4 0c             	add    esp,0xc
c001ddb8:	c3                   	ret    
c001ddb9:	90                   	nop

c001ddba <ATA::powerSaving(PowerSavingLevel)>:
c001ddba:	c3                   	ret    
c001ddbb:	90                   	nop

c001ddbc <ATA::ATA()>:
c001ddbc:	83 ec 0c             	sub    esp,0xc
c001ddbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddc3:	83 ec 04             	sub    esp,0x4
c001ddc6:	68 00 02 00 00       	push   0x200
c001ddcb:	68 ad 46 02 c0       	push   0xc00246ad
c001ddd0:	50                   	push   eax
c001ddd1:	e8 a0 b6 fe ff       	call   c0009476 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ddd6:	83 c4 10             	add    esp,0x10
c001ddd9:	ba 14 46 02 c0       	mov    edx,0xc0024614
c001ddde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dde2:	89 10                	mov    DWORD PTR [eax],edx
c001dde4:	90                   	nop
c001dde5:	83 c4 0c             	add    esp,0xc
c001dde8:	c3                   	ret    
c001dde9:	90                   	nop

c001ddea <ATA::flush(bool)>:
c001ddea:	53                   	push   ebx
c001ddeb:	83 ec 08             	sub    esp,0x8
c001ddee:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ddf3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ddf7:	83 f8 01             	cmp    eax,0x1
c001ddfa:	19 c0                	sbb    eax,eax
c001ddfc:	83 e0 fd             	and    eax,0xfffffffd
c001ddff:	05 ea 00 00 00       	add    eax,0xea
c001de04:	50                   	push   eax
c001de05:	6a 07                	push   0x7
c001de07:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001de0e:	50                   	push   eax
c001de0f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001de15:	e8 4a ee ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de1a:	83 c4 0c             	add    esp,0xc
c001de1d:	6a 00                	push   0x0
c001de1f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001de26:	50                   	push   eax
c001de27:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001de2d:	e8 d0 fb ff ff       	call   c001da02 <IDE::polling(unsigned char, unsigned int)>
c001de32:	83 c4 18             	add    esp,0x18
c001de35:	5b                   	pop    ebx
c001de36:	c3                   	ret    
c001de37:	90                   	nop

c001de38 <ATA::readyForCommand()>:
c001de38:	56                   	push   esi
c001de39:	53                   	push   ebx
c001de3a:	53                   	push   ebx
c001de3b:	31 db                	xor    ebx,ebx
c001de3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001de41:	51                   	push   ecx
c001de42:	6a 0c                	push   0xc
c001de44:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001de4b:	50                   	push   eax
c001de4c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001de52:	e8 cd ee ff ff       	call   c001cd24 <IDE::read(unsigned char, unsigned char)>
c001de57:	83 c4 10             	add    esp,0x10
c001de5a:	a8 88                	test   al,0x88
c001de5c:	74 1f                	je     c001de7d <ATA::readyForCommand()+0x45>
c001de5e:	43                   	inc    ebx
c001de5f:	83 fb 63             	cmp    ebx,0x63
c001de62:	7e dd                	jle    c001de41 <ATA::readyForCommand()+0x9>
c001de64:	83 ec 0c             	sub    esp,0xc
c001de67:	6a 0a                	push   0xa
c001de69:	e8 72 7d ff ff       	call   c0015be0 <milliTenthSleep(unsigned int)>
c001de6e:	83 c4 10             	add    esp,0x10
c001de71:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001de77:	75 c8                	jne    c001de41 <ATA::readyForCommand()+0x9>
c001de79:	31 c0                	xor    eax,eax
c001de7b:	eb 02                	jmp    c001de7f <ATA::readyForCommand()+0x47>
c001de7d:	b0 01                	mov    al,0x1
c001de7f:	5a                   	pop    edx
c001de80:	5b                   	pop    ebx
c001de81:	5e                   	pop    esi
c001de82:	c3                   	ret    
c001de83:	90                   	nop

c001de84 <ATA::access(unsigned long long, int, void*, bool)>:
c001de84:	55                   	push   ebp
c001de85:	57                   	push   edi
c001de86:	56                   	push   esi
c001de87:	53                   	push   ebx
c001de88:	83 ec 2c             	sub    esp,0x2c
c001de8b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001de8f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001de93:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001de97:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001de9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001de9f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001dea3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001dea7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001dead:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001deb1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001deb7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001debb:	c1 e0 06             	shl    eax,0x6
c001debe:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001dec6:	74 5b                	je     c001df23 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001dec8:	89 fa                	mov    edx,edi
c001deca:	89 f0                	mov    eax,esi
c001decc:	c1 ea 1c             	shr    edx,0x1c
c001decf:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001ded3:	89 d1                	mov    ecx,edx
c001ded5:	09 c1                	or     ecx,eax
c001ded7:	74 25                	je     c001defe <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001ded9:	31 ed                	xor    ebp,ebp
c001dedb:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001dee2:	89 fa                	mov    edx,edi
c001dee4:	89 f0                	mov    eax,esi
c001dee6:	0f ad d0             	shrd   eax,edx,cl
c001dee9:	d3 ea                	shr    edx,cl
c001deeb:	f6 c1 20             	test   cl,0x20
c001deee:	74 02                	je     c001def2 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001def0:	89 d0                	mov    eax,edx
c001def2:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001def6:	45                   	inc    ebp
c001def7:	83 fd 06             	cmp    ebp,0x6
c001defa:	75 df                	jne    c001dedb <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001defc:	eb 71                	jmp    c001df6f <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001defe:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001df03:	89 f0                	mov    eax,esi
c001df05:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001df0c:	0f ac f8 10          	shrd   eax,edi,0x10
c001df10:	bf 01 00 00 00       	mov    edi,0x1
c001df15:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001df19:	c1 ee 18             	shr    esi,0x18
c001df1c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001df21:	eb 53                	jmp    c001df76 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001df23:	6a 00                	push   0x0
c001df25:	6a 3f                	push   0x3f
c001df27:	57                   	push   edi
c001df28:	56                   	push   esi
c001df29:	e8 36 25 00 00       	call   c0020464 <__umoddi3>
c001df2e:	83 c4 10             	add    esp,0x10
c001df31:	40                   	inc    eax
c001df32:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001df36:	6a 00                	push   0x0
c001df38:	68 f0 03 00 00       	push   0x3f0
c001df3d:	57                   	push   edi
c001df3e:	56                   	push   esi
c001df3f:	e8 20 24 00 00       	call   c0020364 <__udivdi3>
c001df44:	83 c4 10             	add    esp,0x10
c001df47:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001df4c:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001df53:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001df58:	6a 00                	push   0x0
c001df5a:	6a 3f                	push   0x3f
c001df5c:	57                   	push   edi
c001df5d:	31 ff                	xor    edi,edi
c001df5f:	56                   	push   esi
c001df60:	e8 ff 23 00 00       	call   c0020364 <__udivdi3>
c001df65:	83 c4 10             	add    esp,0x10
c001df68:	83 e0 0f             	and    eax,0xf
c001df6b:	89 c6                	mov    esi,eax
c001df6d:	eb 07                	jmp    c001df76 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001df6f:	31 f6                	xor    esi,esi
c001df71:	bf 02 00 00 00       	mov    edi,0x2
c001df76:	55                   	push   ebp
c001df77:	6a 00                	push   0x0
c001df79:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001df80:	50                   	push   eax
c001df81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001df85:	e8 e8 ee ff ff       	call   c001ce72 <IDE::enableIRQs(unsigned char, bool)>
c001df8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001df8d:	e8 a6 fe ff ff       	call   c001de38 <ATA::readyForCommand()>
c001df92:	83 c4 10             	add    esp,0x10
c001df95:	84 c0                	test   al,al
c001df97:	75 0a                	jne    c001dfa3 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001df99:	be 01 00 00 00       	mov    esi,0x1
c001df9e:	e9 df 02 00 00       	jmp    c001e282 <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c001dfa3:	fa                   	cli    
c001dfa4:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001dfaa:	f7 c7 03 00 00 00    	test   edi,0x3
c001dfb0:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001dfb6:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001dfbc:	75 0a                	jne    c001dfc8 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001dfbe:	c1 e0 04             	shl    eax,0x4
c001dfc1:	09 c6                	or     esi,eax
c001dfc3:	83 ce a0             	or     esi,0xffffffa0
c001dfc6:	eb 08                	jmp    c001dfd0 <ATA::access(unsigned long long, int, void*, bool)+0x14c>
c001dfc8:	c1 e0 04             	shl    eax,0x4
c001dfcb:	09 c6                	or     esi,eax
c001dfcd:	83 ce e0             	or     esi,0xffffffe0
c001dfd0:	89 f0                	mov    eax,esi
c001dfd2:	0f b6 d2             	movzx  edx,dl
c001dfd5:	0f b6 f0             	movzx  esi,al
c001dfd8:	56                   	push   esi
c001dfd9:	6a 06                	push   0x6
c001dfdb:	52                   	push   edx
c001dfdc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dfe2:	e8 7d ec ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dfe7:	83 c4 10             	add    esp,0x10
c001dfea:	6a 00                	push   0x0
c001dfec:	6a 01                	push   0x1
c001dfee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dff5:	50                   	push   eax
c001dff6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dffc:	e8 63 ec ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e001:	89 f8                	mov    eax,edi
c001e003:	83 c4 10             	add    esp,0x10
c001e006:	0f b6 f0             	movzx  esi,al
c001e009:	83 fe 02             	cmp    esi,0x2
c001e00c:	75 6e                	jne    c001e07c <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001e00e:	6a 00                	push   0x0
c001e010:	6a 08                	push   0x8
c001e012:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e019:	50                   	push   eax
c001e01a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e020:	e8 3f ec ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e025:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001e02a:	50                   	push   eax
c001e02b:	6a 09                	push   0x9
c001e02d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e034:	50                   	push   eax
c001e035:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e03b:	e8 24 ec ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e040:	83 c4 20             	add    esp,0x20
c001e043:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e048:	50                   	push   eax
c001e049:	6a 0a                	push   0xa
c001e04b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e052:	50                   	push   eax
c001e053:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e059:	e8 06 ec ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e05e:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001e063:	50                   	push   eax
c001e064:	6a 0b                	push   0xb
c001e066:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e06d:	50                   	push   eax
c001e06e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e074:	e8 eb eb ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e079:	83 c4 20             	add    esp,0x20
c001e07c:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001e081:	50                   	push   eax
c001e082:	6a 02                	push   0x2
c001e084:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e08b:	50                   	push   eax
c001e08c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e092:	e8 cd eb ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e097:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001e09c:	50                   	push   eax
c001e09d:	6a 03                	push   0x3
c001e09f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e0a6:	50                   	push   eax
c001e0a7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e0ad:	e8 b2 eb ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e0b2:	83 c4 20             	add    esp,0x20
c001e0b5:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001e0ba:	50                   	push   eax
c001e0bb:	6a 04                	push   0x4
c001e0bd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e0c4:	50                   	push   eax
c001e0c5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e0cb:	e8 94 eb ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e0d0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e0d5:	50                   	push   eax
c001e0d6:	6a 05                	push   0x5
c001e0d8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e0df:	50                   	push   eax
c001e0e0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e0e6:	e8 79 eb ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e0eb:	83 c4 20             	add    esp,0x20
c001e0ee:	83 fe 02             	cmp    esi,0x2
c001e0f1:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001e0f6:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001e0fb:	85 c9                	test   ecx,ecx
c001e0fd:	74 07                	je     c001e106 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001e0ff:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e104:	75 45                	jne    c001e14b <ATA::access(unsigned long long, int, void*, bool)+0x2c7>
c001e106:	89 f8                	mov    eax,edi
c001e108:	0f b6 f8             	movzx  edi,al
c001e10b:	31 c0                	xor    eax,eax
c001e10d:	4f                   	dec    edi
c001e10e:	0f 94 c0             	sete   al
c001e111:	89 c6                	mov    esi,eax
c001e113:	75 0c                	jne    c001e121 <ATA::access(unsigned long long, int, void*, bool)+0x29d>
c001e115:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e11a:	b8 30 00 00 00       	mov    eax,0x30
c001e11f:	75 2f                	jne    c001e150 <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001e121:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e125:	83 f2 01             	xor    edx,0x1
c001e128:	85 c9                	test   ecx,ecx
c001e12a:	74 09                	je     c001e135 <ATA::access(unsigned long long, int, void*, bool)+0x2b1>
c001e12c:	84 d2                	test   dl,dl
c001e12e:	b8 24 00 00 00       	mov    eax,0x24
c001e133:	75 1b                	jne    c001e150 <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001e135:	85 f6                	test   esi,esi
c001e137:	0f 84 5c fe ff ff    	je     c001df99 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001e13d:	84 d2                	test   dl,dl
c001e13f:	b8 20 00 00 00       	mov    eax,0x20
c001e144:	75 0a                	jne    c001e150 <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001e146:	e9 4e fe ff ff       	jmp    c001df99 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001e14b:	b8 34 00 00 00       	mov    eax,0x34
c001e150:	50                   	push   eax
c001e151:	6a 07                	push   0x7
c001e153:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e15a:	50                   	push   eax
c001e15b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e161:	e8 fe ea ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e166:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001e16d:	83 c4 10             	add    esp,0x10
c001e170:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c001e177:	75 01                	jne    c001e17a <ATA::access(unsigned long long, int, void*, bool)+0x2f6>
c001e179:	fb                   	sti    
c001e17a:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e17e:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001e183:	85 f6                	test   esi,esi
c001e185:	0f 84 dd 00 00 00    	je     c001e268 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001e18b:	57                   	push   edi
c001e18c:	6a 01                	push   0x1
c001e18e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e195:	50                   	push   eax
c001e196:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e19c:	e8 61 f8 ff ff       	call   c001da02 <IDE::polling(unsigned char, unsigned int)>
c001e1a1:	83 c4 10             	add    esp,0x10
c001e1a4:	0f b6 c0             	movzx  eax,al
c001e1a7:	85 c0                	test   eax,eax
c001e1a9:	74 23                	je     c001e1ce <ATA::access(unsigned long long, int, void*, bool)+0x34a>
c001e1ab:	50                   	push   eax
c001e1ac:	89 c6                	mov    esi,eax
c001e1ae:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001e1b5:	50                   	push   eax
c001e1b6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e1bd:	50                   	push   eax
c001e1be:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e1c4:	e8 7f f7 ff ff       	call   c001d948 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001e1c9:	e9 b1 00 00 00       	jmp    c001e27f <ATA::access(unsigned long long, int, void*, bool)+0x3fb>
c001e1ce:	85 ed                	test   ebp,ebp
c001e1d0:	74 49                	je     c001e21b <ATA::access(unsigned long long, int, void*, bool)+0x397>
c001e1d2:	fa                   	cli    
c001e1d3:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001e1d9:	31 ff                	xor    edi,edi
c001e1db:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e1df:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001e1e3:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001e1e8:	51                   	push   ecx
c001e1e9:	51                   	push   ecx
c001e1ea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e1f1:	50                   	push   eax
c001e1f2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e1f8:	e8 55 ea ff ff       	call   c001cc52 <IDE::getBase(unsigned char)>
c001e1fd:	89 c2                	mov    edx,eax
c001e1ff:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001e204:	66 ef                	out    dx,ax
c001e206:	47                   	inc    edi
c001e207:	83 c4 10             	add    esp,0x10
c001e20a:	81 ff 00 01 00 00    	cmp    edi,0x100
c001e210:	75 c9                	jne    c001e1db <ATA::access(unsigned long long, int, void*, bool)+0x357>
c001e212:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001e219:	eb 35                	jmp    c001e250 <ATA::access(unsigned long long, int, void*, bool)+0x3cc>
c001e21b:	fa                   	cli    
c001e21c:	52                   	push   edx
c001e21d:	52                   	push   edx
c001e21e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e225:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001e22b:	50                   	push   eax
c001e22c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e232:	e8 1b ea ff ff       	call   c001cc52 <IDE::getBase(unsigned char)>
c001e237:	b9 00 01 00 00       	mov    ecx,0x100
c001e23c:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001e240:	89 c2                	mov    edx,eax
c001e242:	fc                   	cld    
c001e243:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001e246:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001e24d:	83 c4 10             	add    esp,0x10
c001e250:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c001e257:	75 01                	jne    c001e25a <ATA::access(unsigned long long, int, void*, bool)+0x3d6>
c001e259:	fb                   	sti    
c001e25a:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001e262:	4e                   	dec    esi
c001e263:	e9 1b ff ff ff       	jmp    c001e183 <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001e268:	31 f6                	xor    esi,esi
c001e26a:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e26f:	74 11                	je     c001e282 <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c001e271:	50                   	push   eax
c001e272:	50                   	push   eax
c001e273:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001e278:	50                   	push   eax
c001e279:	53                   	push   ebx
c001e27a:	e8 6b fb ff ff       	call   c001ddea <ATA::flush(bool)>
c001e27f:	83 c4 10             	add    esp,0x10
c001e282:	83 c4 2c             	add    esp,0x2c
c001e285:	89 f0                	mov    eax,esi
c001e287:	5b                   	pop    ebx
c001e288:	5e                   	pop    esi
c001e289:	5f                   	pop    edi
c001e28a:	5d                   	pop    ebp
c001e28b:	c3                   	ret    

c001e28c <ATA::read(unsigned long long, int, void*)>:
c001e28c:	57                   	push   edi
c001e28d:	b8 04 00 00 00       	mov    eax,0x4
c001e292:	56                   	push   esi
c001e293:	53                   	push   ebx
c001e294:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e298:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e29c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e2a0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e2a4:	8d 7a ff             	lea    edi,[edx-0x1]
c001e2a7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001e2ad:	77 25                	ja     c001e2d4 <ATA::read(unsigned long long, int, void*)+0x48>
c001e2af:	85 f6                	test   esi,esi
c001e2b1:	b8 06 00 00 00       	mov    eax,0x6
c001e2b6:	74 1c                	je     c001e2d4 <ATA::read(unsigned long long, int, void*)+0x48>
c001e2b8:	50                   	push   eax
c001e2b9:	50                   	push   eax
c001e2ba:	6a 00                	push   0x0
c001e2bc:	56                   	push   esi
c001e2bd:	52                   	push   edx
c001e2be:	53                   	push   ebx
c001e2bf:	51                   	push   ecx
c001e2c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e2c4:	e8 bb fb ff ff       	call   c001de84 <ATA::access(unsigned long long, int, void*, bool)>
c001e2c9:	83 c4 20             	add    esp,0x20
c001e2cc:	85 c0                	test   eax,eax
c001e2ce:	0f 95 c0             	setne  al
c001e2d1:	0f b6 c0             	movzx  eax,al
c001e2d4:	5b                   	pop    ebx
c001e2d5:	5e                   	pop    esi
c001e2d6:	5f                   	pop    edi
c001e2d7:	c3                   	ret    

c001e2d8 <ATA::write(unsigned long long, int, void*)>:
c001e2d8:	57                   	push   edi
c001e2d9:	b8 04 00 00 00       	mov    eax,0x4
c001e2de:	56                   	push   esi
c001e2df:	53                   	push   ebx
c001e2e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e2e4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e2e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e2ec:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e2f0:	8d 7a ff             	lea    edi,[edx-0x1]
c001e2f3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001e2f9:	77 25                	ja     c001e320 <ATA::write(unsigned long long, int, void*)+0x48>
c001e2fb:	85 f6                	test   esi,esi
c001e2fd:	b8 06 00 00 00       	mov    eax,0x6
c001e302:	74 1c                	je     c001e320 <ATA::write(unsigned long long, int, void*)+0x48>
c001e304:	50                   	push   eax
c001e305:	50                   	push   eax
c001e306:	6a 01                	push   0x1
c001e308:	56                   	push   esi
c001e309:	52                   	push   edx
c001e30a:	53                   	push   ebx
c001e30b:	51                   	push   ecx
c001e30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e310:	e8 6f fb ff ff       	call   c001de84 <ATA::access(unsigned long long, int, void*, bool)>
c001e315:	83 c4 20             	add    esp,0x20
c001e318:	85 c0                	test   eax,eax
c001e31a:	0f 95 c0             	setne  al
c001e31d:	0f b6 c0             	movzx  eax,al
c001e320:	5b                   	pop    ebx
c001e321:	5e                   	pop    esi
c001e322:	5f                   	pop    edi
c001e323:	c3                   	ret    

c001e324 <ATA::detectCHS()>:
c001e324:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e328:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001e32e:	c1 e0 06             	shl    eax,0x6
c001e331:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001e337:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001e341:	c7 44 24 04 50 45 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024550
c001e349:	e9 84 0a ff ff       	jmp    c000edd2 <KePanic(char const*)>

c001e34e <ATA::open(int, int, void*)>:
c001e34e:	53                   	push   ebx
c001e34f:	83 ec 08             	sub    esp,0x8
c001e352:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e356:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e35a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e35e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e364:	c1 e0 06             	shl    eax,0x6
c001e367:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001e36d:	01 d0                	add    eax,edx
c001e36f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001e376:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001e37c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001e383:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001e38d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001e394:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001e39a:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001e3a1:	75 0c                	jne    c001e3af <ATA::open(int, int, void*)+0x61>
c001e3a3:	83 ec 0c             	sub    esp,0xc
c001e3a6:	53                   	push   ebx
c001e3a7:	e8 78 ff ff ff       	call   c001e324 <ATA::detectCHS()>
c001e3ac:	83 c4 10             	add    esp,0x10
c001e3af:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e3b5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001e3bb:	c1 e0 06             	shl    eax,0x6
c001e3be:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001e3c5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e3cf:	d1 e8                	shr    eax,1
c001e3d1:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001e3d7:	6a 04                	push   0x4
c001e3d9:	6a 0c                	push   0xc
c001e3db:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e3e2:	50                   	push   eax
c001e3e3:	52                   	push   edx
c001e3e4:	e8 7b e8 ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e3e9:	90                   	nop
c001e3ea:	90                   	nop
c001e3eb:	6a 00                	push   0x0
c001e3ed:	6a 0c                	push   0xc
c001e3ef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e3f6:	50                   	push   eax
c001e3f7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e3fd:	e8 62 e8 ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e402:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e408:	83 c4 20             	add    esp,0x20
c001e40b:	c1 e0 06             	shl    eax,0x6
c001e40e:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c001e414:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c001e41b:	0f 84 00 01 00 00    	je     c001e521 <ATA::open(int, int, void*)+0x1d3>
c001e421:	83 ec 0c             	sub    esp,0xc
c001e424:	6a 08                	push   0x8
c001e426:	e8 7f 0c ff ff       	call   c000f0aa <Phys::allocateContiguousPages(int)>
c001e42b:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e431:	c7 04 24 62 45 02 c0 	mov    DWORD PTR [esp],0xc0024562
c001e438:	e8 11 8b fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e43d:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001e444:	e8 48 3d ff ff       	call   c0012191 <Virt::allocateKernelVirtualPages(int)>
c001e449:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e44f:	6a 03                	push   0x3
c001e451:	50                   	push   eax
c001e452:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e458:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c001e45e:	e8 07 44 ff ff       	call   c001286a <VAS::mapPage(unsigned long, unsigned long, int)>
c001e463:	83 c4 20             	add    esp,0x20
c001e466:	e8 61 0b ff ff       	call   c000efcc <Phys::allocatePage()>
c001e46b:	83 ec 0c             	sub    esp,0xc
c001e46e:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c001e474:	6a 01                	push   0x1
c001e476:	e8 16 3d ff ff       	call   c0012191 <Virt::allocateKernelVirtualPages(int)>
c001e47b:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c001e481:	6a 03                	push   0x3
c001e483:	50                   	push   eax
c001e484:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c001e48a:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c001e490:	e8 d5 43 ff ff       	call   c001286a <VAS::mapPage(unsigned long, unsigned long, int)>
c001e495:	83 c4 14             	add    esp,0x14
c001e498:	68 9b 45 02 c0       	push   0xc002459b
c001e49d:	e8 ac 8a fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e4a2:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c001e4a9:	50                   	push   eax
c001e4aa:	6a 12                	push   0x12
c001e4ac:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e4b3:	50                   	push   eax
c001e4b4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e4ba:	e8 a5 e7 ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e4bf:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c001e4c5:	83 c4 20             	add    esp,0x20
c001e4c8:	0f b6 c4             	movzx  eax,ah
c001e4cb:	50                   	push   eax
c001e4cc:	6a 13                	push   0x13
c001e4ce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e4d5:	50                   	push   eax
c001e4d6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e4dc:	e8 83 e7 ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e4e1:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c001e4e8:	50                   	push   eax
c001e4e9:	6a 14                	push   0x14
c001e4eb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e4f2:	50                   	push   eax
c001e4f3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e4f9:	e8 66 e7 ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e4fe:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c001e505:	83 c4 20             	add    esp,0x20
c001e508:	50                   	push   eax
c001e509:	6a 15                	push   0x15
c001e50b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e512:	50                   	push   eax
c001e513:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e519:	e8 46 e7 ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e51e:	83 c4 10             	add    esp,0x10
c001e521:	83 ec 0c             	sub    esp,0xc
c001e524:	53                   	push   ebx
c001e525:	e8 b4 af fe ff       	call   c00094de <PhysicalDisk::startCache()>
c001e52a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e52d:	e8 4c be fe ff       	call   c000a37e <createPartitionsForDisk(PhysicalDisk*)>
c001e532:	83 c4 18             	add    esp,0x18
c001e535:	31 c0                	xor    eax,eax
c001e537:	5b                   	pop    ebx
c001e538:	c3                   	ret    

c001e539 <combineCharAndColour(char, unsigned char)>:
c001e539:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e53e:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001e544:	c1 e0 08             	shl    eax,0x8
c001e547:	09 d0                	or     eax,edx
c001e549:	c3                   	ret    

c001e54a <combineColours(unsigned char, unsigned char)>:
c001e54a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e54f:	c1 e0 04             	shl    eax,0x4
c001e552:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001e556:	c3                   	ret    
c001e557:	90                   	nop

c001e558 <ATAPI::write(unsigned long long, int, void*)>:
c001e558:	b8 03 00 00 00       	mov    eax,0x3
c001e55d:	c3                   	ret    

c001e55e <ATAPI::close(int, int, void*)>:
c001e55e:	83 ec 0c             	sub    esp,0xc
c001e561:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e565:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e56b:	85 c0                	test   eax,eax
c001e56d:	74 0c                	je     c001e57b <ATAPI::close(int, int, void*)+0x1d>
c001e56f:	8b 10                	mov    edx,DWORD PTR [eax]
c001e571:	83 ec 0c             	sub    esp,0xc
c001e574:	50                   	push   eax
c001e575:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e578:	83 c4 10             	add    esp,0x10
c001e57b:	31 c0                	xor    eax,eax
c001e57d:	83 c4 0c             	add    esp,0xc
c001e580:	c3                   	ret    
c001e581:	90                   	nop

c001e582 <ATAPI::ATAPI()>:
c001e582:	83 ec 0c             	sub    esp,0xc
c001e585:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e589:	83 ec 04             	sub    esp,0x4
c001e58c:	68 00 08 00 00       	push   0x800
c001e591:	68 4d 47 02 c0       	push   0xc002474d
c001e596:	50                   	push   eax
c001e597:	e8 da ae fe ff       	call   c0009476 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e59c:	83 c4 10             	add    esp,0x10
c001e59f:	ba 5c 46 02 c0       	mov    edx,0xc002465c
c001e5a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5a8:	89 10                	mov    DWORD PTR [eax],edx
c001e5aa:	90                   	nop
c001e5ab:	83 c4 0c             	add    esp,0xc
c001e5ae:	c3                   	ret    
c001e5af:	90                   	nop

c001e5b0 <ATAPI::readyForCommand()>:
c001e5b0:	56                   	push   esi
c001e5b1:	53                   	push   ebx
c001e5b2:	53                   	push   ebx
c001e5b3:	31 db                	xor    ebx,ebx
c001e5b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e5b9:	51                   	push   ecx
c001e5ba:	6a 0c                	push   0xc
c001e5bc:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001e5c3:	50                   	push   eax
c001e5c4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001e5ca:	e8 55 e7 ff ff       	call   c001cd24 <IDE::read(unsigned char, unsigned char)>
c001e5cf:	83 c4 10             	add    esp,0x10
c001e5d2:	a8 88                	test   al,0x88
c001e5d4:	74 25                	je     c001e5fb <ATAPI::readyForCommand()+0x4b>
c001e5d6:	43                   	inc    ebx
c001e5d7:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001e5dd:	7e da                	jle    c001e5b9 <ATAPI::readyForCommand()+0x9>
c001e5df:	83 ec 0c             	sub    esp,0xc
c001e5e2:	68 5e 01 00 00       	push   0x15e
c001e5e7:	e8 f4 75 ff ff       	call   c0015be0 <milliTenthSleep(unsigned int)>
c001e5ec:	83 c4 10             	add    esp,0x10
c001e5ef:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001e5f5:	75 c2                	jne    c001e5b9 <ATAPI::readyForCommand()+0x9>
c001e5f7:	31 c0                	xor    eax,eax
c001e5f9:	eb 02                	jmp    c001e5fd <ATAPI::readyForCommand()+0x4d>
c001e5fb:	b0 01                	mov    al,0x1
c001e5fd:	5a                   	pop    edx
c001e5fe:	5b                   	pop    ebx
c001e5ff:	5e                   	pop    esi
c001e600:	c3                   	ret    
c001e601:	90                   	nop

c001e602 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001e602:	55                   	push   ebp
c001e603:	57                   	push   edi
c001e604:	56                   	push   esi
c001e605:	53                   	push   ebx
c001e606:	83 ec 20             	sub    esp,0x20
c001e609:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001e60d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001e611:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001e615:	6a 01                	push   0x1
c001e617:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e61e:	50                   	push   eax
c001e61f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e625:	e8 48 e8 ff ff       	call   c001ce72 <IDE::enableIRQs(unsigned char, bool)>
c001e62a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e631:	59                   	pop    ecx
c001e632:	5e                   	pop    esi
c001e633:	50                   	push   eax
c001e634:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e63a:	e8 ff e5 ff ff       	call   c001cc3e <IDE::prepareInterrupt(unsigned char)>
c001e63f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001e642:	e8 69 ff ff ff       	call   c001e5b0 <ATAPI::readyForCommand()>
c001e647:	83 c4 10             	add    esp,0x10
c001e64a:	84 c0                	test   al,al
c001e64c:	75 0a                	jne    c001e658 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001e64e:	bb 01 00 00 00       	mov    ebx,0x1
c001e653:	e9 5f 02 00 00       	jmp    c001e8b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001e658:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001e65e:	c1 e0 04             	shl    eax,0x4
c001e661:	0f b6 c0             	movzx  eax,al
c001e664:	50                   	push   eax
c001e665:	6a 06                	push   0x6
c001e667:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e66e:	50                   	push   eax
c001e66f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e675:	e8 ea e5 ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e67a:	6a 00                	push   0x0
c001e67c:	6a 01                	push   0x1
c001e67e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e685:	50                   	push   eax
c001e686:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e68c:	e8 d3 e5 ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e691:	83 c4 20             	add    esp,0x20
c001e694:	0f b6 c3             	movzx  eax,bl
c001e697:	50                   	push   eax
c001e698:	0f b6 df             	movzx  ebx,bh
c001e69b:	6a 04                	push   0x4
c001e69d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e6a4:	50                   	push   eax
c001e6a5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e6ab:	e8 b4 e5 ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e6b0:	53                   	push   ebx
c001e6b1:	6a 05                	push   0x5
c001e6b3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e6ba:	50                   	push   eax
c001e6bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e6c1:	e8 9e e5 ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e6c6:	83 c4 20             	add    esp,0x20
c001e6c9:	68 a0 00 00 00       	push   0xa0
c001e6ce:	6a 07                	push   0x7
c001e6d0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e6d7:	50                   	push   eax
c001e6d8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e6de:	e8 81 e5 ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e6e3:	83 c4 0c             	add    esp,0xc
c001e6e6:	6a 01                	push   0x1
c001e6e8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e6ef:	50                   	push   eax
c001e6f0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e6f6:	e8 07 f3 ff ff       	call   c001da02 <IDE::polling(unsigned char, unsigned int)>
c001e6fb:	83 c4 10             	add    esp,0x10
c001e6fe:	0f b6 d8             	movzx  ebx,al
c001e701:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001e707:	85 db                	test   ebx,ebx
c001e709:	74 20                	je     c001e72b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001e70b:	53                   	push   ebx
c001e70c:	0f b6 c0             	movzx  eax,al
c001e70f:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001e716:	52                   	push   edx
c001e717:	50                   	push   eax
c001e718:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e71e:	e8 25 f2 ff ff       	call   c001d948 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001e723:	83 c4 10             	add    esp,0x10
c001e726:	e9 8c 01 00 00       	jmp    c001e8b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001e72b:	52                   	push   edx
c001e72c:	0f b6 c0             	movzx  eax,al
c001e72f:	52                   	push   edx
c001e730:	50                   	push   eax
c001e731:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e737:	e8 16 e5 ff ff       	call   c001cc52 <IDE::getBase(unsigned char)>
c001e73c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001e740:	b9 06 00 00 00       	mov    ecx,0x6
c001e745:	89 c2                	mov    edx,eax
c001e747:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001e74a:	89 e8                	mov    eax,ebp
c001e74c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001e750:	83 c4 10             	add    esp,0x10
c001e753:	0f b6 c0             	movzx  eax,al
c001e756:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e75a:	85 db                	test   ebx,ebx
c001e75c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001e762:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001e769:	0f 84 eb 00 00 00    	je     c001e85a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001e76f:	55                   	push   ebp
c001e770:	55                   	push   ebp
c001e771:	52                   	push   edx
c001e772:	50                   	push   eax
c001e773:	e8 60 e6 ff ff       	call   c001cdd8 <IDE::waitInterrupt(unsigned char)>
c001e778:	83 c4 10             	add    esp,0x10
c001e77b:	84 c0                	test   al,al
c001e77d:	0f 84 cb fe ff ff    	je     c001e64e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001e783:	56                   	push   esi
c001e784:	56                   	push   esi
c001e785:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e78c:	50                   	push   eax
c001e78d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e793:	e8 a6 e4 ff ff       	call   c001cc3e <IDE::prepareInterrupt(unsigned char)>
c001e798:	83 c4 0c             	add    esp,0xc
c001e79b:	6a 04                	push   0x4
c001e79d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e7a4:	50                   	push   eax
c001e7a5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e7ab:	e8 74 e5 ff ff       	call   c001cd24 <IDE::read(unsigned char, unsigned char)>
c001e7b0:	83 c4 0c             	add    esp,0xc
c001e7b3:	6a 05                	push   0x5
c001e7b5:	89 c6                	mov    esi,eax
c001e7b7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e7be:	50                   	push   eax
c001e7bf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e7c5:	e8 5a e5 ff ff       	call   c001cd24 <IDE::read(unsigned char, unsigned char)>
c001e7ca:	83 c4 10             	add    esp,0x10
c001e7cd:	0f b6 e8             	movzx  ebp,al
c001e7d0:	89 f0                	mov    eax,esi
c001e7d2:	c1 e5 08             	shl    ebp,0x8
c001e7d5:	0f b6 f0             	movzx  esi,al
c001e7d8:	09 f5                	or     ebp,esi
c001e7da:	31 f6                	xor    esi,esi
c001e7dc:	d1 fd                	sar    ebp,1
c001e7de:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e7e3:	74 5c                	je     c001e841 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001e7e5:	39 ee                	cmp    esi,ebp
c001e7e7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001e7ed:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001e7f4:	75 0d                	jne    c001e803 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001e7f6:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001e7f9:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001e7fd:	4b                   	dec    ebx
c001e7fe:	e9 57 ff ff ff       	jmp    c001e75a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001e803:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e807:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001e80b:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001e810:	51                   	push   ecx
c001e811:	51                   	push   ecx
c001e812:	52                   	push   edx
c001e813:	50                   	push   eax
c001e814:	e8 39 e4 ff ff       	call   c001cc52 <IDE::getBase(unsigned char)>
c001e819:	89 c2                	mov    edx,eax
c001e81b:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001e820:	66 ef                	out    dx,ax
c001e822:	46                   	inc    esi
c001e823:	83 c4 10             	add    esp,0x10
c001e826:	eb bd                	jmp    c001e7e5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001e828:	51                   	push   ecx
c001e829:	51                   	push   ecx
c001e82a:	52                   	push   edx
c001e82b:	50                   	push   eax
c001e82c:	e8 21 e4 ff ff       	call   c001cc52 <IDE::getBase(unsigned char)>
c001e831:	89 c2                	mov    edx,eax
c001e833:	66 ed                	in     ax,dx
c001e835:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001e839:	83 c4 10             	add    esp,0x10
c001e83c:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001e840:	46                   	inc    esi
c001e841:	39 ee                	cmp    esi,ebp
c001e843:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001e849:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001e850:	75 d6                	jne    c001e828 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001e852:	01 f6                	add    esi,esi
c001e854:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001e858:	eb a3                	jmp    c001e7fd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001e85a:	51                   	push   ecx
c001e85b:	51                   	push   ecx
c001e85c:	52                   	push   edx
c001e85d:	50                   	push   eax
c001e85e:	e8 75 e5 ff ff       	call   c001cdd8 <IDE::waitInterrupt(unsigned char)>
c001e863:	83 c4 10             	add    esp,0x10
c001e866:	84 c0                	test   al,al
c001e868:	0f 84 e0 fd ff ff    	je     c001e64e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001e86e:	52                   	push   edx
c001e86f:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e874:	52                   	push   edx
c001e875:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e87c:	50                   	push   eax
c001e87d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e883:	e8 b6 e3 ff ff       	call   c001cc3e <IDE::prepareInterrupt(unsigned char)>
c001e888:	83 c4 10             	add    esp,0x10
c001e88b:	50                   	push   eax
c001e88c:	50                   	push   eax
c001e88d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e894:	50                   	push   eax
c001e895:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e89b:	e8 b2 e3 ff ff       	call   c001cc52 <IDE::getBase(unsigned char)>
c001e8a0:	8d 50 07             	lea    edx,[eax+0x7]
c001e8a3:	ec                   	in     al,dx
c001e8a4:	83 c4 10             	add    esp,0x10
c001e8a7:	a8 88                	test   al,0x88
c001e8a9:	74 0a                	je     c001e8b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001e8ab:	4b                   	dec    ebx
c001e8ac:	75 dd                	jne    c001e88b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001e8ae:	bb 02 00 00 00       	mov    ebx,0x2
c001e8b3:	eb 02                	jmp    c001e8b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001e8b5:	31 db                	xor    ebx,ebx
c001e8b7:	83 c4 1c             	add    esp,0x1c
c001e8ba:	89 d8                	mov    eax,ebx
c001e8bc:	5b                   	pop    ebx
c001e8bd:	5e                   	pop    esi
c001e8be:	5f                   	pop    edi
c001e8bf:	5d                   	pop    ebp
c001e8c0:	c3                   	ret    
c001e8c1:	90                   	nop

c001e8c2 <ATAPI::diskRemoved()>:
c001e8c2:	53                   	push   ebx
c001e8c3:	83 ec 14             	sub    esp,0x14
c001e8c6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e8ca:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e8d1:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001e8d7:	e8 92 b7 fe ff       	call   c000a06e <LogicalDisk::unmount()>
c001e8dc:	58                   	pop    eax
c001e8dd:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e8e3:	e8 38 c1 fe ff       	call   c000aa20 <VCache::writeWriteBuffer()>
c001e8e8:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001e8ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e8f2:	83 c4 18             	add    esp,0x18
c001e8f5:	5b                   	pop    ebx
c001e8f6:	e9 15 c1 fe ff       	jmp    c000aa10 <VCache::invalidateReadBuffer()>
c001e8fb:	90                   	nop

c001e8fc <ATAPI::eject()>:
c001e8fc:	57                   	push   edi
c001e8fd:	b9 03 00 00 00       	mov    ecx,0x3
c001e902:	53                   	push   ebx
c001e903:	83 ec 14             	sub    esp,0x14
c001e906:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e90a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e90e:	fc                   	cld    
c001e90f:	31 c0                	xor    eax,eax
c001e911:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e913:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e918:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e91d:	50                   	push   eax
c001e91e:	50                   	push   eax
c001e91f:	6a 00                	push   0x0
c001e921:	6a 00                	push   0x0
c001e923:	6a 00                	push   0x0
c001e925:	6a 02                	push   0x2
c001e927:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e92b:	50                   	push   eax
c001e92c:	53                   	push   ebx
c001e92d:	e8 d0 fc ff ff       	call   c001e602 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e932:	83 c4 14             	add    esp,0x14
c001e935:	53                   	push   ebx
c001e936:	e8 87 ff ff ff       	call   c001e8c2 <ATAPI::diskRemoved()>
c001e93b:	83 c4 24             	add    esp,0x24
c001e93e:	31 c0                	xor    eax,eax
c001e940:	5b                   	pop    ebx
c001e941:	5f                   	pop    edi
c001e942:	c3                   	ret    
c001e943:	90                   	nop

c001e944 <ATAPI::diskInserted()>:
c001e944:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e948:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001e94f:	c3                   	ret    

c001e950 <ATAPI::detectMedia()>:
c001e950:	56                   	push   esi
c001e951:	53                   	push   ebx
c001e952:	83 ec 28             	sub    esp,0x28
c001e955:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e959:	6a 0c                	push   0xc
c001e95b:	6a 00                	push   0x0
c001e95d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001e961:	56                   	push   esi
c001e962:	e8 89 1b fe ff       	call   c00004f0 <memset>
c001e967:	58                   	pop    eax
c001e968:	5a                   	pop    edx
c001e969:	6a 00                	push   0x0
c001e96b:	6a 00                	push   0x0
c001e96d:	6a 00                	push   0x0
c001e96f:	6a 00                	push   0x0
c001e971:	56                   	push   esi
c001e972:	53                   	push   ebx
c001e973:	e8 8a fc ff ff       	call   c001e602 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e978:	83 c4 1c             	add    esp,0x1c
c001e97b:	6a 0c                	push   0xc
c001e97d:	6a 00                	push   0x0
c001e97f:	56                   	push   esi
c001e980:	e8 6b 1b fe ff       	call   c00004f0 <memset>
c001e985:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001e98a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001e98f:	59                   	pop    ecx
c001e990:	58                   	pop    eax
c001e991:	6a 01                	push   0x1
c001e993:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001e997:	50                   	push   eax
c001e998:	6a 00                	push   0x0
c001e99a:	6a 12                	push   0x12
c001e99c:	56                   	push   esi
c001e99d:	53                   	push   ebx
c001e99e:	e8 5f fc ff ff       	call   c001e602 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e9a3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001e9a7:	83 c4 20             	add    esp,0x20
c001e9aa:	83 e0 7f             	and    eax,0x7f
c001e9ad:	83 f8 70             	cmp    eax,0x70
c001e9b0:	74 15                	je     c001e9c7 <ATAPI::detectMedia()+0x77>
c001e9b2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e9b9:	75 0c                	jne    c001e9c7 <ATAPI::detectMedia()+0x77>
c001e9bb:	83 ec 0c             	sub    esp,0xc
c001e9be:	53                   	push   ebx
c001e9bf:	e8 80 ff ff ff       	call   c001e944 <ATAPI::diskInserted()>
c001e9c4:	83 c4 10             	add    esp,0x10
c001e9c7:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e9cb:	83 e0 0f             	and    eax,0xf
c001e9ce:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001e9d3:	0f b6 c0             	movzx  eax,al
c001e9d6:	75 19                	jne    c001e9f1 <ATAPI::detectMedia()+0xa1>
c001e9d8:	83 f8 02             	cmp    eax,0x2
c001e9db:	75 14                	jne    c001e9f1 <ATAPI::detectMedia()+0xa1>
c001e9dd:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e9e4:	74 24                	je     c001ea0a <ATAPI::detectMedia()+0xba>
c001e9e6:	83 ec 0c             	sub    esp,0xc
c001e9e9:	53                   	push   ebx
c001e9ea:	e8 d3 fe ff ff       	call   c001e8c2 <ATAPI::diskRemoved()>
c001e9ef:	eb 16                	jmp    c001ea07 <ATAPI::detectMedia()+0xb7>
c001e9f1:	85 c0                	test   eax,eax
c001e9f3:	75 15                	jne    c001ea0a <ATAPI::detectMedia()+0xba>
c001e9f5:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e9fc:	75 0c                	jne    c001ea0a <ATAPI::detectMedia()+0xba>
c001e9fe:	83 ec 0c             	sub    esp,0xc
c001ea01:	53                   	push   ebx
c001ea02:	e8 3d ff ff ff       	call   c001e944 <ATAPI::diskInserted()>
c001ea07:	83 c4 10             	add    esp,0x10
c001ea0a:	83 c4 24             	add    esp,0x24
c001ea0d:	5b                   	pop    ebx
c001ea0e:	5e                   	pop    esi
c001ea0f:	c3                   	ret    

c001ea10 <ATAPI::open(int, int, void*)>:
c001ea10:	56                   	push   esi
c001ea11:	53                   	push   ebx
c001ea12:	50                   	push   eax
c001ea13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ea17:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ea1b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ea1f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ea25:	c1 e0 06             	shl    eax,0x6
c001ea28:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ea2e:	01 d0                	add    eax,edx
c001ea30:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001ea37:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001ea3d:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001ea44:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ea4e:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ea55:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ea5b:	6a 04                	push   0x4
c001ea5d:	6a 0c                	push   0xc
c001ea5f:	51                   	push   ecx
c001ea60:	52                   	push   edx
c001ea61:	e8 fe e1 ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ea66:	90                   	nop
c001ea67:	90                   	nop
c001ea68:	6a 00                	push   0x0
c001ea6a:	6a 0c                	push   0xc
c001ea6c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ea73:	50                   	push   eax
c001ea74:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ea7a:	e8 e5 e1 ff ff       	call   c001cc64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ea7f:	83 c4 14             	add    esp,0x14
c001ea82:	68 78 01 00 00       	push   0x178
c001ea87:	e8 00 00 ff ff       	call   c000ea8c <malloc>
c001ea8c:	83 c4 0c             	add    esp,0xc
c001ea8f:	6a 00                	push   0x0
c001ea91:	68 ff ff ff 7f       	push   0x7fffffff
c001ea96:	6a 00                	push   0x0
c001ea98:	6a 00                	push   0x0
c001ea9a:	53                   	push   ebx
c001ea9b:	68 ff 47 02 c0       	push   0xc00247ff
c001eaa0:	89 c6                	mov    esi,eax
c001eaa2:	50                   	push   eax
c001eaa3:	e8 04 b4 fe ff       	call   c0009eac <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001eaa8:	83 c4 14             	add    esp,0x14
c001eaab:	56                   	push   esi
c001eaac:	e8 bb b4 fe ff       	call   c0009f6c <LogicalDisk::assignDriveLetter()>
c001eab1:	5a                   	pop    edx
c001eab2:	59                   	pop    ecx
c001eab3:	0f be c0             	movsx  eax,al
c001eab6:	50                   	push   eax
c001eab7:	68 44 46 02 c0       	push   0xc0024644
c001eabc:	e8 8d 84 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001eac1:	58                   	pop    eax
c001eac2:	5a                   	pop    edx
c001eac3:	56                   	push   esi
c001eac4:	53                   	push   ebx
c001eac5:	e8 c8 a5 fe ff       	call   c0009092 <Device::addChild(Device*)>
c001eaca:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001ead0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ead3:	e8 06 aa fe ff       	call   c00094de <PhysicalDisk::startCache()>
c001ead8:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001eadf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001eae2:	e8 69 fe ff ff       	call   c001e950 <ATAPI::detectMedia()>
c001eae7:	83 c4 14             	add    esp,0x14
c001eaea:	31 c0                	xor    eax,eax
c001eaec:	5b                   	pop    ebx
c001eaed:	5e                   	pop    esi
c001eaee:	c3                   	ret    
c001eaef:	90                   	nop

c001eaf0 <ATAPI::read(unsigned long long, int, void*)>:
c001eaf0:	55                   	push   ebp
c001eaf1:	57                   	push   edi
c001eaf2:	56                   	push   esi
c001eaf3:	53                   	push   ebx
c001eaf4:	83 ec 1c             	sub    esp,0x1c
c001eaf7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001eafb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001eaff:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001eb03:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001eb0a:	74 3c                	je     c001eb48 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001eb0c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001eb10:	b9 03 00 00 00       	mov    ecx,0x3
c001eb15:	fc                   	cld    
c001eb16:	31 c0                	xor    eax,eax
c001eb18:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001eb1a:	89 e8                	mov    eax,ebp
c001eb1c:	0f ce                	bswap  esi
c001eb1e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001eb22:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001eb27:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001eb2b:	50                   	push   eax
c001eb2c:	50                   	push   eax
c001eb2d:	55                   	push   ebp
c001eb2e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001eb32:	c1 e5 0b             	shl    ebp,0xb
c001eb35:	6a 00                	push   0x0
c001eb37:	55                   	push   ebp
c001eb38:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001eb3c:	50                   	push   eax
c001eb3d:	53                   	push   ebx
c001eb3e:	e8 bf fa ff ff       	call   c001e602 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001eb43:	83 c4 20             	add    esp,0x20
c001eb46:	eb 1a                	jmp    c001eb62 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001eb48:	83 ec 0c             	sub    esp,0xc
c001eb4b:	53                   	push   ebx
c001eb4c:	e8 ff fd ff ff       	call   c001e950 <ATAPI::detectMedia()>
c001eb51:	83 c4 10             	add    esp,0x10
c001eb54:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001eb5b:	75 af                	jne    c001eb0c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001eb5d:	b8 02 00 00 00       	mov    eax,0x2
c001eb62:	83 c4 1c             	add    esp,0x1c
c001eb65:	5b                   	pop    ebx
c001eb66:	5e                   	pop    esi
c001eb67:	5f                   	pop    edi
c001eb68:	5d                   	pop    ebp
c001eb69:	c3                   	ret    

c001eb6a <SATA::close(int, int, void*)>:
c001eb6a:	83 ec 0c             	sub    esp,0xc
c001eb6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb71:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eb77:	85 c0                	test   eax,eax
c001eb79:	74 0c                	je     c001eb87 <SATA::close(int, int, void*)+0x1d>
c001eb7b:	8b 10                	mov    edx,DWORD PTR [eax]
c001eb7d:	83 ec 0c             	sub    esp,0xc
c001eb80:	50                   	push   eax
c001eb81:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001eb84:	83 c4 10             	add    esp,0x10
c001eb87:	31 c0                	xor    eax,eax
c001eb89:	83 c4 0c             	add    esp,0xc
c001eb8c:	c3                   	ret    
c001eb8d:	90                   	nop

c001eb8e <SATA::powerSaving(PowerSavingLevel)>:
c001eb8e:	c3                   	ret    
c001eb8f:	90                   	nop

c001eb90 <SATA::open(int, int, void*)>:
c001eb90:	56                   	push   esi
c001eb91:	53                   	push   ebx
c001eb92:	83 ec 10             	sub    esp,0x10
c001eb95:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001eb99:	68 8c 46 02 c0       	push   0xc002468c
c001eb9e:	e8 ab 83 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001eba3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001eba7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ebb1:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ebbb:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ebc1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ebc5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ebcf:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ebd6:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ebdc:	e8 eb 03 ff ff       	call   c000efcc <Phys::allocatePage()>
c001ebe1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ebe7:	89 c6                	mov    esi,eax
c001ebe9:	e8 de 03 ff ff       	call   c000efcc <Phys::allocatePage()>
c001ebee:	81 c6 00 10 00 00    	add    esi,0x1000
c001ebf4:	83 c4 10             	add    esp,0x10
c001ebf7:	39 c6                	cmp    esi,eax
c001ebf9:	74 10                	je     c001ec0b <SATA::open(int, int, void*)+0x7b>
c001ebfb:	83 ec 0c             	sub    esp,0xc
c001ebfe:	68 98 46 02 c0       	push   0xc0024698
c001ec03:	e8 ca 01 ff ff       	call   c000edd2 <KePanic(char const*)>
c001ec08:	83 c4 10             	add    esp,0x10
c001ec0b:	83 ec 0c             	sub    esp,0xc
c001ec0e:	6a 02                	push   0x2
c001ec10:	e8 7c 35 ff ff       	call   c0012191 <Virt::allocateKernelVirtualPages(int)>
c001ec15:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ec1b:	6a 03                	push   0x3
c001ec1d:	50                   	push   eax
c001ec1e:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001ec24:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c001ec2a:	e8 3b 3c ff ff       	call   c001286a <VAS::mapPage(unsigned long, unsigned long, int)>
c001ec2f:	83 c4 14             	add    esp,0x14
c001ec32:	53                   	push   ebx
c001ec33:	e8 a6 a8 fe ff       	call   c00094de <PhysicalDisk::startCache()>
c001ec38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ec3b:	e8 3e b7 fe ff       	call   c000a37e <createPartitionsForDisk(PhysicalDisk*)>
c001ec40:	83 c4 14             	add    esp,0x14
c001ec43:	31 c0                	xor    eax,eax
c001ec45:	5b                   	pop    ebx
c001ec46:	5e                   	pop    esi
c001ec47:	c3                   	ret    

c001ec48 <SATA::SATA()>:
c001ec48:	83 ec 0c             	sub    esp,0xc
c001ec4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec4f:	83 ec 04             	sub    esp,0x4
c001ec52:	68 00 02 00 00       	push   0x200
c001ec57:	68 ac 46 02 c0       	push   0xc00246ac
c001ec5c:	50                   	push   eax
c001ec5d:	e8 14 a8 fe ff       	call   c0009476 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ec62:	83 c4 10             	add    esp,0x10
c001ec65:	ba 1c 47 02 c0       	mov    edx,0xc002471c
c001ec6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec6e:	89 10                	mov    DWORD PTR [eax],edx
c001ec70:	90                   	nop
c001ec71:	83 c4 0c             	add    esp,0xc
c001ec74:	c3                   	ret    
c001ec75:	90                   	nop

c001ec76 <SATA::access(unsigned long long, int, void*, bool)>:
c001ec76:	55                   	push   ebp
c001ec77:	57                   	push   edi
c001ec78:	56                   	push   esi
c001ec79:	53                   	push   ebx
c001ec7a:	83 ec 2c             	sub    esp,0x2c
c001ec7d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001ec81:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ec85:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ec89:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ec8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ec91:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ec95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ec99:	fa                   	cli    
c001ec9a:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001eca0:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001eca5:	7e 10                	jle    c001ecb7 <SATA::access(unsigned long long, int, void*, bool)+0x41>
c001eca7:	83 ec 0c             	sub    esp,0xc
c001ecaa:	68 bc 46 02 c0       	push   0xc00246bc
c001ecaf:	e8 1e 01 ff ff       	call   c000edd2 <KePanic(char const*)>
c001ecb4:	83 c4 10             	add    esp,0x10
c001ecb7:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ecbd:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001ecc3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ecc9:	89 e8                	mov    eax,ebp
c001eccb:	c1 e0 07             	shl    eax,0x7
c001ecce:	01 d0                	add    eax,edx
c001ecd0:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ecda:	8d 45 02             	lea    eax,[ebp+0x2]
c001ecdd:	51                   	push   ecx
c001ecde:	c1 e0 07             	shl    eax,0x7
c001ece1:	51                   	push   ecx
c001ece2:	01 d0                	add    eax,edx
c001ece4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ece8:	50                   	push   eax
c001ece9:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001ecef:	e8 ee ed ff ff       	call   c001dae2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ecf4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ecf8:	83 c4 10             	add    esp,0x10
c001ecfb:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001ed00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ed04:	0f 84 a6 01 00 00    	je     c001eeb0 <SATA::access(unsigned long long, int, void*, bool)+0x23a>
c001ed0a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ed0e:	c1 e0 09             	shl    eax,0x9
c001ed11:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001ed16:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ed1a:	74 0e                	je     c001ed2a <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c001ed1c:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001ed22:	89 c1                	mov    ecx,eax
c001ed24:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001ed28:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ed2a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ed2e:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ed34:	8d 45 02             	lea    eax,[ebp+0x2]
c001ed37:	c1 e0 07             	shl    eax,0x7
c001ed3a:	01 d0                	add    eax,edx
c001ed3c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed3e:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ed44:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ed4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed4e:	c1 e1 05             	shl    ecx,0x5
c001ed51:	01 c8                	add    eax,ecx
c001ed53:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ed57:	83 e1 01             	and    ecx,0x1
c001ed5a:	89 ce                	mov    esi,ecx
c001ed5c:	8a 08                	mov    cl,BYTE PTR [eax]
c001ed5e:	c1 e6 06             	shl    esi,0x6
c001ed61:	83 e1 bf             	and    ecx,0xffffffbf
c001ed64:	09 f1                	or     ecx,esi
c001ed66:	88 08                	mov    BYTE PTR [eax],cl
c001ed68:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ed6a:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001ed70:	81 c9 05 00 01 00    	or     ecx,0x10005
c001ed76:	89 08                	mov    DWORD PTR [eax],ecx
c001ed78:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ed7e:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001ed84:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001ed8a:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001ed8d:	50                   	push   eax
c001ed8e:	68 90 00 00 00       	push   0x90
c001ed93:	6a 00                	push   0x0
c001ed95:	56                   	push   esi
c001ed96:	e8 55 17 fe ff       	call   c00004f0 <memset>
c001ed9b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001eda1:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001eda7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edab:	83 c4 10             	add    esp,0x10
c001edae:	48                   	dec    eax
c001edaf:	25 ff ff 3f 00       	and    eax,0x3fffff
c001edb4:	89 c1                	mov    ecx,eax
c001edb6:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001edbc:	25 00 00 c0 ff       	and    eax,0xffc00000
c001edc1:	09 c8                	or     eax,ecx
c001edc3:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001edc9:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001edcf:	83 c8 80             	or     eax,0xffffff80
c001edd2:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001edd8:	66 8b 06             	mov    ax,WORD PTR [esi]
c001eddb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001eddf:	25 00 7f 00 00       	and    eax,0x7f00
c001ede4:	0d 27 80 ff ff       	or     eax,0xffff8027
c001ede9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001edee:	66 89 06             	mov    WORD PTR [esi],ax
c001edf1:	b0 35                	mov    al,0x35
c001edf3:	75 02                	jne    c001edf7 <SATA::access(unsigned long long, int, void*, bool)+0x181>
c001edf5:	b0 25                	mov    al,0x25
c001edf7:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001edfa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001edfe:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ee02:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001ee06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee0a:	c1 e8 10             	shr    eax,0x10
c001ee0d:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ee10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee14:	c1 e8 18             	shr    eax,0x18
c001ee17:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ee1a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ee1e:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ee21:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ee25:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ee28:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ee2c:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ee30:	89 ee                	mov    esi,ebp
c001ee32:	31 c0                	xor    eax,eax
c001ee34:	c1 e6 07             	shl    esi,0x7
c001ee37:	01 d6                	add    esi,edx
c001ee39:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ee3f:	80 e1 88             	and    cl,0x88
c001ee42:	74 0a                	je     c001ee4e <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ee44:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ee49:	74 0a                	je     c001ee55 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001ee4b:	40                   	inc    eax
c001ee4c:	eb eb                	jmp    c001ee39 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c001ee4e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ee53:	75 0a                	jne    c001ee5f <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c001ee55:	83 ec 0c             	sub    esp,0xc
c001ee58:	68 f5 46 02 c0       	push   0xc00246f5
c001ee5d:	eb 34                	jmp    c001ee93 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c001ee5f:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001ee63:	c1 e5 07             	shl    ebp,0x7
c001ee66:	b8 01 00 00 00       	mov    eax,0x1
c001ee6b:	01 ea                	add    edx,ebp
c001ee6d:	d3 e0                	shl    eax,cl
c001ee6f:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001ee75:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001ee7b:	85 c8                	test   eax,ecx
c001ee7d:	74 25                	je     c001eea4 <SATA::access(unsigned long long, int, void*, bool)+0x22e>
c001ee7f:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ee85:	0f ba e1 1e          	bt     ecx,0x1e
c001ee89:	73 ea                	jae    c001ee75 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001ee8b:	83 ec 0c             	sub    esp,0xc
c001ee8e:	68 03 47 02 c0       	push   0xc0024703
c001ee93:	e8 b6 80 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ee98:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001ee9f:	83 c4 10             	add    esp,0x10
c001eea2:	eb 13                	jmp    c001eeb7 <SATA::access(unsigned long long, int, void*, bool)+0x241>
c001eea4:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001eeaa:	0f ba e0 1e          	bt     eax,0x1e
c001eeae:	73 18                	jae    c001eec8 <SATA::access(unsigned long long, int, void*, bool)+0x252>
c001eeb0:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001eeb7:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c001eebe:	75 01                	jne    c001eec1 <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c001eec0:	fb                   	sti    
c001eec1:	b8 01 00 00 00       	mov    eax,0x1
c001eec6:	eb 2c                	jmp    c001eef4 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001eec8:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001eecd:	75 10                	jne    c001eedf <SATA::access(unsigned long long, int, void*, bool)+0x269>
c001eecf:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001eed5:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001eed9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eedd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001eedf:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001eee6:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c001eeeb:	85 c0                	test   eax,eax
c001eeed:	75 03                	jne    c001eef2 <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c001eeef:	fb                   	sti    
c001eef0:	eb 02                	jmp    c001eef4 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001eef2:	31 c0                	xor    eax,eax
c001eef4:	83 c4 2c             	add    esp,0x2c
c001eef7:	5b                   	pop    ebx
c001eef8:	5e                   	pop    esi
c001eef9:	5f                   	pop    edi
c001eefa:	5d                   	pop    ebp
c001eefb:	c3                   	ret    

c001eefc <SATA::read(unsigned long long, int, void*)>:
c001eefc:	57                   	push   edi
c001eefd:	b8 04 00 00 00       	mov    eax,0x4
c001ef02:	56                   	push   esi
c001ef03:	53                   	push   ebx
c001ef04:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ef08:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ef0c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ef10:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ef14:	8d 7a ff             	lea    edi,[edx-0x1]
c001ef17:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ef1d:	77 25                	ja     c001ef44 <SATA::read(unsigned long long, int, void*)+0x48>
c001ef1f:	85 f6                	test   esi,esi
c001ef21:	b8 06 00 00 00       	mov    eax,0x6
c001ef26:	74 1c                	je     c001ef44 <SATA::read(unsigned long long, int, void*)+0x48>
c001ef28:	50                   	push   eax
c001ef29:	50                   	push   eax
c001ef2a:	6a 00                	push   0x0
c001ef2c:	56                   	push   esi
c001ef2d:	52                   	push   edx
c001ef2e:	53                   	push   ebx
c001ef2f:	51                   	push   ecx
c001ef30:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ef34:	e8 3d fd ff ff       	call   c001ec76 <SATA::access(unsigned long long, int, void*, bool)>
c001ef39:	83 c4 20             	add    esp,0x20
c001ef3c:	85 c0                	test   eax,eax
c001ef3e:	0f 95 c0             	setne  al
c001ef41:	0f b6 c0             	movzx  eax,al
c001ef44:	5b                   	pop    ebx
c001ef45:	5e                   	pop    esi
c001ef46:	5f                   	pop    edi
c001ef47:	c3                   	ret    

c001ef48 <SATA::write(unsigned long long, int, void*)>:
c001ef48:	55                   	push   ebp
c001ef49:	b8 04 00 00 00       	mov    eax,0x4
c001ef4e:	57                   	push   edi
c001ef4f:	56                   	push   esi
c001ef50:	53                   	push   ebx
c001ef51:	83 ec 0c             	sub    esp,0xc
c001ef54:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ef58:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ef5c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ef60:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ef64:	8d 73 ff             	lea    esi,[ebx-0x1]
c001ef67:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001ef6d:	77 3d                	ja     c001efac <SATA::write(unsigned long long, int, void*)+0x64>
c001ef6f:	85 ed                	test   ebp,ebp
c001ef71:	b8 06 00 00 00       	mov    eax,0x6
c001ef76:	74 34                	je     c001efac <SATA::write(unsigned long long, int, void*)+0x64>
c001ef78:	c1 e3 09             	shl    ebx,0x9
c001ef7b:	01 eb                	add    ebx,ebp
c001ef7d:	50                   	push   eax
c001ef7e:	89 d6                	mov    esi,edx
c001ef80:	50                   	push   eax
c001ef81:	83 c6 01             	add    esi,0x1
c001ef84:	6a 01                	push   0x1
c001ef86:	89 cf                	mov    edi,ecx
c001ef88:	55                   	push   ebp
c001ef89:	83 d7 00             	adc    edi,0x0
c001ef8c:	6a 01                	push   0x1
c001ef8e:	81 c5 00 02 00 00    	add    ebp,0x200
c001ef94:	51                   	push   ecx
c001ef95:	52                   	push   edx
c001ef96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ef9a:	e8 d7 fc ff ff       	call   c001ec76 <SATA::access(unsigned long long, int, void*, bool)>
c001ef9f:	83 c4 20             	add    esp,0x20
c001efa2:	39 dd                	cmp    ebp,ebx
c001efa4:	89 f2                	mov    edx,esi
c001efa6:	89 f9                	mov    ecx,edi
c001efa8:	75 d3                	jne    c001ef7d <SATA::write(unsigned long long, int, void*)+0x35>
c001efaa:	31 c0                	xor    eax,eax
c001efac:	83 c4 0c             	add    esp,0xc
c001efaf:	5b                   	pop    ebx
c001efb0:	5e                   	pop    esi
c001efb1:	5f                   	pop    edi
c001efb2:	5d                   	pop    ebp
c001efb3:	c3                   	ret    

c001efb4 <SATAPI::write(unsigned long long, int, void*)>:
c001efb4:	b8 03 00 00 00       	mov    eax,0x3
c001efb9:	c3                   	ret    

c001efba <SATAPI::close(int, int, void*)>:
c001efba:	83 ec 0c             	sub    esp,0xc
c001efbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001efc7:	85 c0                	test   eax,eax
c001efc9:	74 0c                	je     c001efd7 <SATAPI::close(int, int, void*)+0x1d>
c001efcb:	8b 10                	mov    edx,DWORD PTR [eax]
c001efcd:	83 ec 0c             	sub    esp,0xc
c001efd0:	50                   	push   eax
c001efd1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001efd4:	83 c4 10             	add    esp,0x10
c001efd7:	31 c0                	xor    eax,eax
c001efd9:	83 c4 0c             	add    esp,0xc
c001efdc:	c3                   	ret    
c001efdd:	90                   	nop

c001efde <SATAPI::SATAPI()>:
c001efde:	83 ec 0c             	sub    esp,0xc
c001efe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efe5:	83 ec 04             	sub    esp,0x4
c001efe8:	68 00 08 00 00       	push   0x800
c001efed:	68 4c 47 02 c0       	push   0xc002474c
c001eff2:	50                   	push   eax
c001eff3:	e8 7e a4 fe ff       	call   c0009476 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001eff8:	83 c4 10             	add    esp,0x10
c001effb:	ba 40 48 02 c0       	mov    edx,0xc0024840
c001f000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f004:	89 10                	mov    DWORD PTR [eax],edx
c001f006:	90                   	nop
c001f007:	83 c4 0c             	add    esp,0xc
c001f00a:	c3                   	ret    
c001f00b:	90                   	nop

c001f00c <SATAPI::diskRemoved()>:
c001f00c:	c3                   	ret    
c001f00d:	90                   	nop

c001f00e <SATAPI::diskInserted()>:
c001f00e:	83 ec 18             	sub    esp,0x18
c001f011:	68 58 47 02 c0       	push   0xc0024758
c001f016:	e8 33 7f fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001f01b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f01f:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001f026:	83 c4 1c             	add    esp,0x1c
c001f029:	c3                   	ret    

c001f02a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001f02a:	55                   	push   ebp
c001f02b:	57                   	push   edi
c001f02c:	56                   	push   esi
c001f02d:	53                   	push   ebx
c001f02e:	83 ec 34             	sub    esp,0x34
c001f031:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f035:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001f039:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f03d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f041:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f045:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001f04b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f051:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f055:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001f05b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f05f:	83 c0 02             	add    eax,0x2
c001f062:	c1 e0 07             	shl    eax,0x7
c001f065:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f069:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f06d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f071:	c1 e0 07             	shl    eax,0x7
c001f074:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f078:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f07c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f086:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001f08a:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001f090:	e8 4d ea ff ff       	call   c001dae2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f095:	83 c4 10             	add    esp,0x10
c001f098:	89 c2                	mov    edx,eax
c001f09a:	b8 01 00 00 00       	mov    eax,0x1
c001f09f:	83 fa ff             	cmp    edx,0xffffffff
c001f0a2:	0f 84 5f 02 00 00    	je     c001f307 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001f0a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f0ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0b0:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f0b6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f0b8:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f0be:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f0c4:	89 d1                	mov    ecx,edx
c001f0c6:	c1 e1 05             	shl    ecx,0x5
c001f0c9:	01 c8                	add    eax,ecx
c001f0cb:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f0cd:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001f0d3:	81 c9 25 00 01 00    	or     ecx,0x10025
c001f0d9:	89 08                	mov    DWORD PTR [eax],ecx
c001f0db:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f0e1:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001f0e7:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001f0ed:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001f0f0:	50                   	push   eax
c001f0f1:	68 90 00 00 00       	push   0x90
c001f0f6:	6a 00                	push   0x0
c001f0f8:	53                   	push   ebx
c001f0f9:	e8 f2 13 fe ff       	call   c00004f0 <memset>
c001f0fe:	8d 7b 40             	lea    edi,[ebx+0x40]
c001f101:	b9 0c 00 00 00       	mov    ecx,0xc
c001f106:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001f10a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f10c:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001f112:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001f116:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001f11a:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001f120:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f124:	48                   	dec    eax
c001f125:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f12a:	89 c1                	mov    ecx,eax
c001f12c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001f132:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f137:	09 c8                	or     eax,ecx
c001f139:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001f13f:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001f145:	83 c8 80             	or     eax,0xffffff80
c001f148:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001f14e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001f151:	25 00 7f 00 00       	and    eax,0x7f00
c001f156:	0d 27 80 ff ff       	or     eax,0xffff8027
c001f15b:	66 89 03             	mov    WORD PTR [ebx],ax
c001f15e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f162:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001f166:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f16a:	c1 e8 10             	shr    eax,0x10
c001f16d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001f170:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f174:	c1 e8 18             	shr    eax,0x18
c001f177:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001f17a:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001f17e:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001f181:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f185:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001f188:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f18c:	83 c4 10             	add    esp,0x10
c001f18f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f193:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001f197:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f19b:	31 c0                	xor    eax,eax
c001f19d:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001f1a3:	80 e1 88             	and    cl,0x88
c001f1a6:	74 0a                	je     c001f1b2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001f1a8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f1ad:	74 0a                	je     c001f1b9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001f1af:	40                   	inc    eax
c001f1b0:	eb eb                	jmp    c001f19d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001f1b2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f1b7:	75 43                	jne    c001f1fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001f1b9:	83 ec 0c             	sub    esp,0xc
c001f1bc:	68 70 47 02 c0       	push   0xc0024770
c001f1c1:	e8 88 7d fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001f1c6:	58                   	pop    eax
c001f1c7:	5a                   	pop    edx
c001f1c8:	68 85 47 02 c0       	push   0xc0024785
c001f1cd:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c001f1d3:	e8 a0 23 ff ff       	call   c0011578 <VgaText::puts(char const*)>
c001f1d8:	59                   	pop    ecx
c001f1d9:	5b                   	pop    ebx
c001f1da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001f1de:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001f1e4:	e8 93 e9 ff ff       	call   c001db7c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f1e9:	5e                   	pop    esi
c001f1ea:	5f                   	pop    edi
c001f1eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001f1ef:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001f1f5:	e8 62 e9 ff ff       	call   c001db5c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001f1fa:	eb 48                	jmp    c001f244 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001f1fc:	b8 01 00 00 00       	mov    eax,0x1
c001f201:	88 d1                	mov    cl,dl
c001f203:	d3 e0                	shl    eax,cl
c001f205:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001f20a:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001f210:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f214:	89 c7                	mov    edi,eax
c001f216:	c1 e3 07             	shl    ebx,0x7
c001f219:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001f21d:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001f223:	85 c7                	test   edi,eax
c001f225:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001f22b:	0f 84 a3 00 00 00    	je     c001f2d4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001f231:	0f ba e0 1e          	bt     eax,0x1e
c001f235:	73 1a                	jae    c001f251 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001f237:	83 ec 0c             	sub    esp,0xc
c001f23a:	68 97 47 02 c0       	push   0xc0024797
c001f23f:	e8 0a 7d fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001f244:	83 c4 10             	add    esp,0x10
c001f247:	b8 01 00 00 00       	mov    eax,0x1
c001f24c:	e9 b6 00 00 00       	jmp    c001f307 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001f251:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001f257:	83 f8 0d             	cmp    eax,0xd
c001f25a:	77 0a                	ja     c001f266 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001f25c:	83 ec 0c             	sub    esp,0xc
c001f25f:	68 c8 00 00 00       	push   0xc8
c001f264:	eb 28                	jmp    c001f28e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001f266:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001f26c:	83 f8 0d             	cmp    eax,0xd
c001f26f:	77 0a                	ja     c001f27b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001f271:	83 ec 0c             	sub    esp,0xc
c001f274:	68 58 02 00 00       	push   0x258
c001f279:	eb 13                	jmp    c001f28e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001f27b:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001f281:	83 f8 06             	cmp    eax,0x6
c001f284:	77 10                	ja     c001f296 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001f286:	83 ec 0c             	sub    esp,0xc
c001f289:	68 dc 05 00 00       	push   0x5dc
c001f28e:	e8 4d 69 ff ff       	call   c0015be0 <milliTenthSleep(unsigned int)>
c001f293:	83 c4 10             	add    esp,0x10
c001f296:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001f29a:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001f29d:	75 06                	jne    c001f2a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001f29f:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001f2a3:	74 15                	je     c001f2ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001f2a5:	83 fe 06             	cmp    esi,0x6
c001f2a8:	77 10                	ja     c001f2ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001f2aa:	83 ec 0c             	sub    esp,0xc
c001f2ad:	68 c4 09 00 00       	push   0x9c4
c001f2b2:	e8 29 69 ff ff       	call   c0015be0 <milliTenthSleep(unsigned int)>
c001f2b7:	83 c4 10             	add    esp,0x10
c001f2ba:	46                   	inc    esi
c001f2bb:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001f2c1:	0f 85 56 ff ff ff    	jne    c001f21d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001f2c7:	83 ec 0c             	sub    esp,0xc
c001f2ca:	68 aa 47 02 c0       	push   0xc00247aa
c001f2cf:	e9 6b ff ff ff       	jmp    c001f23f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001f2d4:	0f ba e0 1e          	bt     eax,0x1e
c001f2d8:	73 0d                	jae    c001f2e7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001f2da:	83 ec 0c             	sub    esp,0xc
c001f2dd:	68 be 47 02 c0       	push   0xc00247be
c001f2e2:	e9 58 ff ff ff       	jmp    c001f23f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001f2e7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001f2ec:	74 17                	je     c001f305 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001f2ee:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001f2f3:	74 10                	je     c001f305 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001f2f5:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001f2fb:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f2ff:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001f303:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f305:	31 c0                	xor    eax,eax
c001f307:	83 c4 2c             	add    esp,0x2c
c001f30a:	5b                   	pop    ebx
c001f30b:	5e                   	pop    esi
c001f30c:	5f                   	pop    edi
c001f30d:	5d                   	pop    ebp
c001f30e:	c3                   	ret    
c001f30f:	90                   	nop

c001f310 <SATAPI::eject()>:
c001f310:	57                   	push   edi
c001f311:	b9 03 00 00 00       	mov    ecx,0x3
c001f316:	83 ec 18             	sub    esp,0x18
c001f319:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f31d:	fc                   	cld    
c001f31e:	31 c0                	xor    eax,eax
c001f320:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f322:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001f327:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001f32c:	50                   	push   eax
c001f32d:	6a 00                	push   0x0
c001f32f:	6a 00                	push   0x0
c001f331:	6a 00                	push   0x0
c001f333:	6a 00                	push   0x0
c001f335:	6a 02                	push   0x2
c001f337:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f33b:	50                   	push   eax
c001f33c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f340:	e8 e5 fc ff ff       	call   c001f02a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f345:	83 c4 38             	add    esp,0x38
c001f348:	31 c0                	xor    eax,eax
c001f34a:	5f                   	pop    edi
c001f34b:	c3                   	ret    

c001f34c <SATAPI::detectMedia()>:
c001f34c:	53                   	push   ebx
c001f34d:	83 ec 14             	sub    esp,0x14
c001f350:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f354:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001f35a:	e8 c1 b6 fe ff       	call   c000aa20 <VCache::writeWriteBuffer()>
c001f35f:	59                   	pop    ecx
c001f360:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001f366:	e8 a5 b6 fe ff       	call   c000aa10 <VCache::invalidateReadBuffer()>
c001f36b:	c7 04 24 d3 47 02 c0 	mov    DWORD PTR [esp],0xc00247d3
c001f372:	e8 d7 7b fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001f377:	83 c4 10             	add    esp,0x10
c001f37a:	31 c0                	xor    eax,eax
c001f37c:	8b 14 85 80 a7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5880]
c001f383:	85 d2                	test   edx,edx
c001f385:	74 0f                	je     c001f396 <SATAPI::detectMedia()+0x4a>
c001f387:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001f38d:	75 07                	jne    c001f396 <SATAPI::detectMedia()+0x4a>
c001f38f:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001f396:	40                   	inc    eax
c001f397:	83 f8 1a             	cmp    eax,0x1a
c001f39a:	75 e0                	jne    c001f37c <SATAPI::detectMedia()+0x30>
c001f39c:	83 c4 08             	add    esp,0x8
c001f39f:	5b                   	pop    ebx
c001f3a0:	c3                   	ret    
c001f3a1:	90                   	nop

c001f3a2 <SATAPI::open(int, int, void*)>:
c001f3a2:	56                   	push   esi
c001f3a3:	53                   	push   ebx
c001f3a4:	51                   	push   ecx
c001f3a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f3a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f3ad:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f3b7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f3bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f3c1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f3cb:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f3d5:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f3dc:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f3e2:	e8 e5 fb fe ff       	call   c000efcc <Phys::allocatePage()>
c001f3e7:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001f3ed:	89 c6                	mov    esi,eax
c001f3ef:	e8 d8 fb fe ff       	call   c000efcc <Phys::allocatePage()>
c001f3f4:	81 c6 00 10 00 00    	add    esi,0x1000
c001f3fa:	39 c6                	cmp    esi,eax
c001f3fc:	74 10                	je     c001f40e <SATAPI::open(int, int, void*)+0x6c>
c001f3fe:	83 ec 0c             	sub    esp,0xc
c001f401:	68 e8 47 02 c0       	push   0xc00247e8
c001f406:	e8 c7 f9 fe ff       	call   c000edd2 <KePanic(char const*)>
c001f40b:	83 c4 10             	add    esp,0x10
c001f40e:	83 ec 0c             	sub    esp,0xc
c001f411:	6a 02                	push   0x2
c001f413:	e8 79 2d ff ff       	call   c0012191 <Virt::allocateKernelVirtualPages(int)>
c001f418:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001f41e:	6a 03                	push   0x3
c001f420:	50                   	push   eax
c001f421:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001f427:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c001f42d:	e8 38 34 ff ff       	call   c001286a <VAS::mapPage(unsigned long, unsigned long, int)>
c001f432:	83 c4 14             	add    esp,0x14
c001f435:	68 78 01 00 00       	push   0x178
c001f43a:	e8 4d f6 fe ff       	call   c000ea8c <malloc>
c001f43f:	83 c4 0c             	add    esp,0xc
c001f442:	6a 00                	push   0x0
c001f444:	68 ff ff ff 7f       	push   0x7fffffff
c001f449:	6a 00                	push   0x0
c001f44b:	6a 00                	push   0x0
c001f44d:	53                   	push   ebx
c001f44e:	68 fe 47 02 c0       	push   0xc00247fe
c001f453:	89 c6                	mov    esi,eax
c001f455:	50                   	push   eax
c001f456:	e8 51 aa fe ff       	call   c0009eac <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001f45b:	83 c4 14             	add    esp,0x14
c001f45e:	56                   	push   esi
c001f45f:	e8 08 ab fe ff       	call   c0009f6c <LogicalDisk::assignDriveLetter()>
c001f464:	5a                   	pop    edx
c001f465:	59                   	pop    ecx
c001f466:	0f be c0             	movsx  eax,al
c001f469:	50                   	push   eax
c001f46a:	68 44 46 02 c0       	push   0xc0024644
c001f46f:	e8 da 7a fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001f474:	58                   	pop    eax
c001f475:	5a                   	pop    edx
c001f476:	56                   	push   esi
c001f477:	53                   	push   ebx
c001f478:	e8 15 9c fe ff       	call   c0009092 <Device::addChild(Device*)>
c001f47d:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001f483:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f486:	e8 53 a0 fe ff       	call   c00094de <PhysicalDisk::startCache()>
c001f48b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001f492:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f495:	e8 b2 fe ff ff       	call   c001f34c <SATAPI::detectMedia()>
c001f49a:	83 c4 14             	add    esp,0x14
c001f49d:	31 c0                	xor    eax,eax
c001f49f:	5b                   	pop    ebx
c001f4a0:	5e                   	pop    esi
c001f4a1:	c3                   	ret    

c001f4a2 <SATAPI::read(unsigned long long, int, void*)>:
c001f4a2:	55                   	push   ebp
c001f4a3:	57                   	push   edi
c001f4a4:	56                   	push   esi
c001f4a5:	53                   	push   ebx
c001f4a6:	83 ec 3c             	sub    esp,0x3c
c001f4a9:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001f4ad:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f4b1:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001f4b5:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001f4b9:	83 fd 04             	cmp    ebp,0x4
c001f4bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f4c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f4c4:	7e 10                	jle    c001f4d6 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001f4c6:	83 ec 0c             	sub    esp,0xc
c001f4c9:	68 0c 48 02 c0       	push   0xc002480c
c001f4ce:	e8 ff f8 fe ff       	call   c000edd2 <KePanic(char const*)>
c001f4d3:	83 c4 10             	add    esp,0x10
c001f4d6:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f4dc:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001f4e2:	51                   	push   ecx
c001f4e3:	50                   	push   eax
c001f4e4:	83 c0 02             	add    eax,0x2
c001f4e7:	c1 e0 07             	shl    eax,0x7
c001f4ea:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001f4f0:	50                   	push   eax
c001f4f1:	52                   	push   edx
c001f4f2:	e8 af e6 ff ff       	call   c001dba6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f4f7:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001f4fb:	b9 03 00 00 00       	mov    ecx,0x3
c001f500:	fc                   	cld    
c001f501:	31 c0                	xor    eax,eax
c001f503:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f505:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001f50a:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001f50f:	83 c4 0c             	add    esp,0xc
c001f512:	6a 00                	push   0x0
c001f514:	6a 00                	push   0x0
c001f516:	6a 00                	push   0x0
c001f518:	6a 00                	push   0x0
c001f51a:	6a 02                	push   0x2
c001f51c:	8d 44 24 30          	lea    eax,[esp+0x30]
c001f520:	50                   	push   eax
c001f521:	53                   	push   ebx
c001f522:	e8 03 fb ff ff       	call   c001f02a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f527:	83 c4 20             	add    esp,0x20
c001f52a:	85 c0                	test   eax,eax
c001f52c:	89 c6                	mov    esi,eax
c001f52e:	75 46                	jne    c001f576 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001f530:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001f534:	b9 03 00 00 00       	mov    ecx,0x3
c001f539:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f53b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f53f:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001f544:	0f c8                	bswap  eax
c001f546:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001f54a:	89 e8                	mov    eax,ebp
c001f54c:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001f550:	50                   	push   eax
c001f551:	55                   	push   ebp
c001f552:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001f556:	c1 e5 0b             	shl    ebp,0xb
c001f559:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f55d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f561:	55                   	push   ebp
c001f562:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001f566:	50                   	push   eax
c001f567:	53                   	push   ebx
c001f568:	e8 bd fa ff ff       	call   c001f02a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f56d:	83 c4 20             	add    esp,0x20
c001f570:	85 c0                	test   eax,eax
c001f572:	89 c6                	mov    esi,eax
c001f574:	74 0c                	je     c001f582 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001f576:	83 ec 0c             	sub    esp,0xc
c001f579:	53                   	push   ebx
c001f57a:	e8 cd fd ff ff       	call   c001f34c <SATAPI::detectMedia()>
c001f57f:	83 c4 10             	add    esp,0x10
c001f582:	83 c4 3c             	add    esp,0x3c
c001f585:	89 f0                	mov    eax,esi
c001f587:	5b                   	pop    ebx
c001f588:	5e                   	pop    esi
c001f589:	5f                   	pop    edi
c001f58a:	5d                   	pop    ebp
c001f58b:	c3                   	ret    

c001f58c <IOAPIC::close(int, int, void*)>:
c001f58c:	b8 00 00 00 00       	mov    eax,0x0
c001f591:	c3                   	ret    

c001f592 <apicGetBase()>:
c001f592:	55                   	push   ebp
c001f593:	89 e5                	mov    ebp,esp
c001f595:	83 ec 08             	sub    esp,0x8
c001f598:	83 ec 0c             	sub    esp,0xc
c001f59b:	68 70 48 02 c0       	push   0xc0024870
c001f5a0:	e8 2d f8 fe ff       	call   c000edd2 <KePanic(char const*)>
c001f5a5:	83 c4 10             	add    esp,0x10
c001f5a8:	b8 00 00 00 00       	mov    eax,0x0
c001f5ad:	c9                   	leave  
c001f5ae:	c3                   	ret    
c001f5af:	90                   	nop

c001f5b0 <IOAPIC::IOAPIC()>:
c001f5b0:	83 ec 0c             	sub    esp,0xc
c001f5b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5b7:	83 ec 08             	sub    esp,0x8
c001f5ba:	68 7f 48 02 c0       	push   0xc002487f
c001f5bf:	50                   	push   eax
c001f5c0:	e8 2f 9c fe ff       	call   c00091f4 <Device::Device(char const*)>
c001f5c5:	83 c4 10             	add    esp,0x10
c001f5c8:	ba a0 48 02 c0       	mov    edx,0xc00248a0
c001f5cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5d1:	89 10                	mov    DWORD PTR [eax],edx
c001f5d3:	90                   	nop
c001f5d4:	83 c4 0c             	add    esp,0xc
c001f5d7:	c3                   	ret    

c001f5d8 <apicOpen()>:
c001f5d8:	55                   	push   ebp
c001f5d9:	89 e5                	mov    ebp,esp
c001f5db:	53                   	push   ebx
c001f5dc:	83 ec 34             	sub    esp,0x34
c001f5df:	83 ec 0c             	sub    esp,0xc
c001f5e2:	68 87 48 02 c0       	push   0xc0024887
c001f5e7:	e8 62 79 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001f5ec:	83 c4 10             	add    esp,0x10
c001f5ef:	a0 20 e1 02 c0       	mov    al,ds:0xc002e120
c001f5f4:	83 f0 01             	xor    eax,0x1
c001f5f7:	0f b6 c0             	movzx  eax,al
c001f5fa:	85 c0                	test   eax,eax
c001f5fc:	0f 84 a3 00 00 00    	je     c001f6a5 <apicOpen()+0xcd>
c001f602:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001f606:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c001f60b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001f60f:	0f b6 c0             	movzx  eax,al
c001f612:	39 c2                	cmp    edx,eax
c001f614:	0f 83 84 00 00 00    	jae    c001f69e <apicOpen()+0xc6>
c001f61a:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001f621:	83 ec 0c             	sub    esp,0xc
c001f624:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001f627:	e8 60 f4 fe ff       	call   c000ea8c <malloc>
c001f62c:	83 c4 10             	add    esp,0x10
c001f62f:	89 c3                	mov    ebx,eax
c001f631:	83 ec 0c             	sub    esp,0xc
c001f634:	53                   	push   ebx
c001f635:	e8 76 ff ff ff       	call   c001f5b0 <IOAPIC::IOAPIC()>
c001f63a:	83 c4 10             	add    esp,0x10
c001f63d:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001f640:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001f644:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001f647:	89 14 85 00 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f00],edx
c001f64e:	a1 e0 e0 02 c0       	mov    eax,ds:0xc002e0e0
c001f653:	83 c0 01             	add    eax,0x1
c001f656:	a3 e0 e0 02 c0       	mov    ds:0xc002e0e0,eax
c001f65b:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c001f660:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001f666:	83 ec 08             	sub    esp,0x8
c001f669:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001f66c:	50                   	push   eax
c001f66d:	e8 20 9a fe ff       	call   c0009092 <Device::addChild(Device*)>
c001f672:	83 c4 10             	add    esp,0x10
c001f675:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f678:	8b 00                	mov    eax,DWORD PTR [eax]
c001f67a:	83 c0 08             	add    eax,0x8
c001f67d:	8b 00                	mov    eax,DWORD PTR [eax]
c001f67f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001f683:	6a 00                	push   0x0
c001f685:	6a 00                	push   0x0
c001f687:	52                   	push   edx
c001f688:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001f68b:	ff d0                	call   eax
c001f68d:	83 c4 10             	add    esp,0x10
c001f690:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001f693:	83 c0 01             	add    eax,0x1
c001f696:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001f699:	e9 68 ff ff ff       	jmp    c001f606 <apicOpen()+0x2e>
c001f69e:	c6 05 20 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e120,0x1
c001f6a5:	e8 e8 fe ff ff       	call   c001f592 <apicGetBase()>
c001f6aa:	05 f0 00 00 00       	add    eax,0xf0
c001f6af:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f6b2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001f6b5:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6b7:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001f6ba:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001f6c1:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001f6c8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001f6cb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001f6ce:	89 10                	mov    DWORD PTR [eax],edx
c001f6d0:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001f6d7:	a1 2c aa 02 c0       	mov    eax,ds:0xc002aa2c
c001f6dc:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001f6df:	7d 7c                	jge    c001f75d <apicOpen()+0x185>
c001f6e1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f6e4:	8b 04 85 40 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55c0]
c001f6eb:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001f6ee:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f6f1:	8b 04 85 40 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55c0]
c001f6f8:	c1 e8 08             	shr    eax,0x8
c001f6fb:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001f6ff:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f702:	8b 04 85 40 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55c0]
c001f709:	c1 e8 18             	shr    eax,0x18
c001f70c:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001f70f:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001f713:	3d ff 00 00 00       	cmp    eax,0xff
c001f718:	75 3a                	jne    c001f754 <apicOpen()+0x17c>
c001f71a:	e8 73 fe ff ff       	call   c001f592 <apicGetBase()>
c001f71f:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001f723:	83 fa 01             	cmp    edx,0x1
c001f726:	75 07                	jne    c001f72f <apicOpen()+0x157>
c001f728:	ba 60 03 00 00       	mov    edx,0x360
c001f72d:	eb 05                	jmp    c001f734 <apicOpen()+0x15c>
c001f72f:	ba 50 03 00 00       	mov    edx,0x350
c001f734:	01 d0                	add    eax,edx
c001f736:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001f739:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f73c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f73e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001f741:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001f748:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001f74c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f74f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001f752:	89 10                	mov    DWORD PTR [eax],edx
c001f754:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001f758:	e9 7a ff ff ff       	jmp    c001f6d7 <apicOpen()+0xff>
c001f75d:	90                   	nop
c001f75e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001f761:	c9                   	leave  
c001f762:	c3                   	ret    
c001f763:	90                   	nop

c001f764 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001f764:	55                   	push   ebp
c001f765:	89 e5                	mov    ebp,esp
c001f767:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f76a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f770:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001f773:	72 1d                	jb     c001f792 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001f775:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f778:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001f77e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f781:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001f787:	01 d0                	add    eax,edx
c001f789:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001f78c:	73 04                	jae    c001f792 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001f78e:	b0 01                	mov    al,0x1
c001f790:	eb 02                	jmp    c001f794 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001f792:	b0 00                	mov    al,0x0
c001f794:	5d                   	pop    ebp
c001f795:	c3                   	ret    

c001f796 <IOAPIC::read(int)>:
c001f796:	55                   	push   ebp
c001f797:	89 e5                	mov    ebp,esp
c001f799:	83 ec 10             	sub    esp,0x10
c001f79c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f79f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f7a5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001f7a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f7ab:	0f b6 d0             	movzx  edx,al
c001f7ae:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f7b1:	89 10                	mov    DWORD PTR [eax],edx
c001f7b3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f7b6:	83 c0 10             	add    eax,0x10
c001f7b9:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7bb:	c9                   	leave  
c001f7bc:	c3                   	ret    
c001f7bd:	90                   	nop

c001f7be <IOAPIC::open(int, int, void*)>:
c001f7be:	55                   	push   ebp
c001f7bf:	89 e5                	mov    ebp,esp
c001f7c1:	57                   	push   edi
c001f7c2:	56                   	push   esi
c001f7c3:	53                   	push   ebx
c001f7c4:	83 ec 04             	sub    esp,0x4
c001f7c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f7ca:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001f7cd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f7d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f7d6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f7dc:	8b 14 85 20 ab 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd54e0]
c001f7e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f7e6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f7ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f7ef:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f7f5:	8b 14 85 a0 ab 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5460]
c001f7fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f7ff:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001f805:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f808:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001f80e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f811:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001f817:	0f b6 f0             	movzx  esi,al
c001f81a:	89 d0                	mov    eax,edx
c001f81c:	ba 00 00 00 00       	mov    edx,0x0
c001f821:	89 c7                	mov    edi,eax
c001f823:	83 e7 ff             	and    edi,0xffffffff
c001f826:	89 f9                	mov    ecx,edi
c001f828:	0f b6 da             	movzx  ebx,dl
c001f82b:	89 c8                	mov    eax,ecx
c001f82d:	89 da                	mov    edx,ebx
c001f82f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001f832:	8d 5e 08             	lea    ebx,[esi+0x8]
c001f835:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001f839:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001f83d:	83 e0 00             	and    eax,0x0
c001f840:	09 d0                	or     eax,edx
c001f842:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001f846:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f849:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001f84f:	8d 50 01             	lea    edx,[eax+0x1]
c001f852:	88 d1                	mov    cl,dl
c001f854:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001f857:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001f85d:	0f b6 d0             	movzx  edx,al
c001f860:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f863:	83 c2 08             	add    edx,0x8
c001f866:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001f86a:	0f b6 c9             	movzx  ecx,cl
c001f86d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001f873:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001f877:	6a 01                	push   0x1
c001f879:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f87c:	e8 15 ff ff ff       	call   c001f796 <IOAPIC::read(int)>
c001f881:	83 c4 08             	add    esp,0x8
c001f884:	c1 f8 10             	sar    eax,0x10
c001f887:	0f b6 c0             	movzx  eax,al
c001f88a:	8d 50 01             	lea    edx,[eax+0x1]
c001f88d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f890:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001f896:	b8 00 00 00 00       	mov    eax,0x0
c001f89b:	8d 65 f4             	lea    esp,[ebp-0xc]
c001f89e:	5b                   	pop    ebx
c001f89f:	5e                   	pop    esi
c001f8a0:	5f                   	pop    edi
c001f8a1:	5d                   	pop    ebp
c001f8a2:	c3                   	ret    
c001f8a3:	90                   	nop

c001f8a4 <IOAPIC::write(int, int)>:
c001f8a4:	55                   	push   ebp
c001f8a5:	89 e5                	mov    ebp,esp
c001f8a7:	83 ec 10             	sub    esp,0x10
c001f8aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f8ad:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f8b3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001f8b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f8b9:	0f b6 d0             	movzx  edx,al
c001f8bc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f8bf:	89 10                	mov    DWORD PTR [eax],edx
c001f8c1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f8c4:	8d 50 10             	lea    edx,[eax+0x10]
c001f8c7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001f8ca:	89 02                	mov    DWORD PTR [edx],eax
c001f8cc:	90                   	nop
c001f8cd:	c9                   	leave  
c001f8ce:	c3                   	ret    
c001f8cf:	90                   	nop

c001f8d0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001f8d0:	55                   	push   ebp
c001f8d1:	89 e5                	mov    ebp,esp
c001f8d3:	53                   	push   ebx
c001f8d4:	83 ec 2c             	sub    esp,0x2c
c001f8d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f8da:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001f8dd:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001f8e0:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001f8e3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001f8e6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001f8e9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001f8ec:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001f8ef:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001f8f2:	88 d8                	mov    al,bl
c001f8f4:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001f8f7:	88 c8                	mov    al,cl
c001f8f9:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001f8fc:	88 d0                	mov    al,dl
c001f8fe:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001f901:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001f905:	83 c0 08             	add    eax,0x8
c001f908:	d1 e0                	shl    eax,1
c001f90a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001f90d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001f911:	83 c0 08             	add    eax,0x8
c001f914:	d1 e0                	shl    eax,1
c001f916:	83 c0 01             	add    eax,0x1
c001f919:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001f91c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f91f:	50                   	push   eax
c001f920:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f923:	e8 6e fe ff ff       	call   c001f796 <IOAPIC::read(int)>
c001f928:	83 c4 08             	add    esp,0x8
c001f92b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f92e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001f935:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f938:	c1 e0 18             	shl    eax,0x18
c001f93b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001f93e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001f941:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f944:	52                   	push   edx
c001f945:	50                   	push   eax
c001f946:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f949:	e8 56 ff ff ff       	call   c001f8a4 <IOAPIC::write(int, int)>
c001f94e:	83 c4 0c             	add    esp,0xc
c001f951:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f954:	50                   	push   eax
c001f955:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f958:	e8 39 fe ff ff       	call   c001f796 <IOAPIC::read(int)>
c001f95d:	83 c4 08             	add    esp,0x8
c001f960:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001f963:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001f96a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001f971:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001f978:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001f97c:	85 c0                	test   eax,eax
c001f97e:	74 09                	je     c001f989 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001f980:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001f987:	eb 07                	jmp    c001f990 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001f989:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001f990:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001f994:	85 c0                	test   eax,eax
c001f996:	74 09                	je     c001f9a1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001f998:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001f99f:	eb 07                	jmp    c001f9a8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001f9a1:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001f9a8:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001f9af:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001f9b3:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001f9b6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001f9b9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f9bc:	52                   	push   edx
c001f9bd:	50                   	push   eax
c001f9be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f9c1:	e8 de fe ff ff       	call   c001f8a4 <IOAPIC::write(int, int)>
c001f9c6:	83 c4 0c             	add    esp,0xc
c001f9c9:	90                   	nop
c001f9ca:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001f9cd:	c9                   	leave  
c001f9ce:	c3                   	ret    
c001f9cf:	90                   	nop

c001f9d0 <APICTimer::close(int, int, void*)>:
c001f9d0:	b8 00 00 00 00       	mov    eax,0x0
c001f9d5:	c3                   	ret    
c001f9d6:	66 90                	xchg   ax,ax

c001f9d8 <apicTimerHandler(regs*, void*)>:
c001f9d8:	83 ec 0c             	sub    esp,0xc
c001f9db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f9df:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f9e1:	b8 10 27 00 00       	mov    eax,0x2710
c001f9e6:	ba 00 00 00 00       	mov    edx,0x0
c001f9eb:	f7 f1                	div    ecx
c001f9ed:	83 ec 0c             	sub    esp,0xc
c001f9f0:	50                   	push   eax
c001f9f1:	e8 72 ad fe ff       	call   c000a768 <timerHandler(unsigned int)>
c001f9f6:	83 c4 10             	add    esp,0x10
c001f9f9:	90                   	nop
c001f9fa:	83 c4 0c             	add    esp,0xc
c001f9fd:	c3                   	ret    
c001f9fe:	66 90                	xchg   ax,ax

c001fa00 <APICTimer::open(int, int, void*)>:
c001fa00:	83 ec 0c             	sub    esp,0xc
c001fa03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa07:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa09:	83 c0 24             	add    eax,0x24
c001fa0c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa0e:	83 ec 08             	sub    esp,0x8
c001fa11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa19:	ff d0                	call   eax
c001fa1b:	83 c4 10             	add    esp,0x10
c001fa1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa22:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001fa26:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001fa2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa30:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fa34:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001fa3a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fa3e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001fa44:	83 ec 0c             	sub    esp,0xc
c001fa47:	51                   	push   ecx
c001fa48:	6a 01                	push   0x1
c001fa4a:	68 d8 f9 01 c0       	push   0xc001f9d8
c001fa4f:	52                   	push   edx
c001fa50:	50                   	push   eax
c001fa51:	e8 e8 95 fe ff       	call   c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001fa56:	83 c4 20             	add    esp,0x20
c001fa59:	89 c2                	mov    edx,eax
c001fa5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa5f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001fa65:	b8 00 00 00 00       	mov    eax,0x0
c001fa6a:	83 c4 0c             	add    esp,0xc
c001fa6d:	c3                   	ret    
c001fa6e:	66 90                	xchg   ax,ax

c001fa70 <APICTimer::write(int)>:
c001fa70:	83 ec 0c             	sub    esp,0xc
c001fa73:	83 ec 0c             	sub    esp,0xc
c001fa76:	68 c4 48 02 c0       	push   0xc00248c4
c001fa7b:	e8 52 f3 fe ff       	call   c000edd2 <KePanic(char const*)>
c001fa80:	83 c4 10             	add    esp,0x10
c001fa83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa87:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa8b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001fa91:	90                   	nop
c001fa92:	83 c4 0c             	add    esp,0xc
c001fa95:	c3                   	ret    
c001fa96:	66 90                	xchg   ax,ax

c001fa98 <APICTimer::APICTimer()>:
c001fa98:	83 ec 0c             	sub    esp,0xc
c001fa9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa9f:	83 ec 08             	sub    esp,0x8
c001faa2:	68 d4 48 02 c0       	push   0xc00248d4
c001faa7:	50                   	push   eax
c001faa8:	e8 ef ab fe ff       	call   c000a69c <Timer::Timer(char const*)>
c001faad:	83 c4 10             	add    esp,0x10
c001fab0:	ba e8 48 02 c0       	mov    edx,0xc00248e8
c001fab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab9:	89 10                	mov    DWORD PTR [eax],edx
c001fabb:	90                   	nop
c001fabc:	83 c4 0c             	add    esp,0xc
c001fabf:	c3                   	ret    

c001fac0 <PIT::write(int)>:
c001fac0:	83 ec 10             	sub    esp,0x10
c001fac3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fac7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001facb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001fad1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fad5:	a3 24 e1 02 c0       	mov    ds:0xc002e124,eax
c001fada:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001fadf:	89 c2                	mov    edx,eax
c001fae1:	c1 fa 1f             	sar    edx,0x1f
c001fae4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001fae8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001faec:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001faf3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001faf8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001fafc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001fb01:	ee                   	out    dx,al
c001fb02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb06:	0f b6 c0             	movzx  eax,al
c001fb09:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001fb10:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001fb14:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001fb18:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001fb1d:	ee                   	out    dx,al
c001fb1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb22:	c1 f8 08             	sar    eax,0x8
c001fb25:	0f b6 c0             	movzx  eax,al
c001fb28:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001fb2f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fb33:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fb37:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001fb3c:	ee                   	out    dx,al
c001fb3d:	90                   	nop
c001fb3e:	83 c4 10             	add    esp,0x10
c001fb41:	c3                   	ret    
c001fb42:	66 90                	xchg   ax,ax

c001fb44 <pitHandler(regs*, void*)>:
c001fb44:	83 ec 0c             	sub    esp,0xc
c001fb47:	8b 0d 24 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e124
c001fb4d:	b8 10 27 00 00       	mov    eax,0x2710
c001fb52:	89 c2                	mov    edx,eax
c001fb54:	c1 fa 1f             	sar    edx,0x1f
c001fb57:	f7 f9                	idiv   ecx
c001fb59:	83 ec 0c             	sub    esp,0xc
c001fb5c:	50                   	push   eax
c001fb5d:	e8 06 ac fe ff       	call   c000a768 <timerHandler(unsigned int)>
c001fb62:	83 c4 10             	add    esp,0x10
c001fb65:	90                   	nop
c001fb66:	83 c4 0c             	add    esp,0xc
c001fb69:	c3                   	ret    
c001fb6a:	66 90                	xchg   ax,ax

c001fb6c <PIT::open(int, int, void*)>:
c001fb6c:	83 ec 0c             	sub    esp,0xc
c001fb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb73:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb75:	83 c0 24             	add    eax,0x24
c001fb78:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb7a:	83 ec 08             	sub    esp,0x8
c001fb7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb85:	ff d0                	call   eax
c001fb87:	83 c4 10             	add    esp,0x10
c001fb8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb8e:	83 ec 0c             	sub    esp,0xc
c001fb91:	6a 00                	push   0x0
c001fb93:	6a 01                	push   0x1
c001fb95:	68 44 fb 01 c0       	push   0xc001fb44
c001fb9a:	6a 00                	push   0x0
c001fb9c:	50                   	push   eax
c001fb9d:	e8 9c 94 fe ff       	call   c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001fba2:	83 c4 20             	add    esp,0x20
c001fba5:	89 c2                	mov    edx,eax
c001fba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbab:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001fbb1:	b8 00 00 00 00       	mov    eax,0x0
c001fbb6:	83 c4 0c             	add    esp,0xc
c001fbb9:	c3                   	ret    
c001fbba:	66 90                	xchg   ax,ax

c001fbbc <PIT::close(int, int, void*)>:
c001fbbc:	83 ec 0c             	sub    esp,0xc
c001fbbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbc3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001fbcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd1:	6a 01                	push   0x1
c001fbd3:	68 44 fb 01 c0       	push   0xc001fb44
c001fbd8:	6a 00                	push   0x0
c001fbda:	50                   	push   eax
c001fbdb:	e8 94 94 fe ff       	call   c0009074 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001fbe0:	83 c4 10             	add    esp,0x10
c001fbe3:	b8 00 00 00 00       	mov    eax,0x0
c001fbe8:	83 c4 0c             	add    esp,0xc
c001fbeb:	c3                   	ret    

c001fbec <PIT::PIT()>:
c001fbec:	83 ec 0c             	sub    esp,0xc
c001fbef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf3:	83 ec 08             	sub    esp,0x8
c001fbf6:	68 10 49 02 c0       	push   0xc0024910
c001fbfb:	50                   	push   eax
c001fbfc:	e8 9b aa fe ff       	call   c000a69c <Timer::Timer(char const*)>
c001fc01:	83 c4 10             	add    esp,0x10
c001fc04:	ba 38 49 02 c0       	mov    edx,0xc0024938
c001fc09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc0d:	89 10                	mov    DWORD PTR [eax],edx
c001fc0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc13:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001fc19:	0f b6 d0             	movzx  edx,al
c001fc1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc20:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001fc27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc2b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001fc31:	0f b6 d0             	movzx  edx,al
c001fc34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc38:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001fc3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc41:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001fc47:	8d 50 01             	lea    edx,[eax+0x1]
c001fc4a:	88 d1                	mov    cl,dl
c001fc4c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fc50:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001fc56:	0f b6 d0             	movzx  edx,al
c001fc59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc5d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001fc61:	83 e1 3f             	and    ecx,0x3f
c001fc64:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001fc68:	90                   	nop
c001fc69:	83 c4 0c             	add    esp,0xc
c001fc6c:	c3                   	ret    
c001fc6d:	66 90                	xchg   ax,ax
c001fc6f:	90                   	nop

c001fc70 <avxDetect>:
c001fc70:	b8 01 00 00 00       	mov    eax,0x1
c001fc75:	0f a2                	cpuid  
c001fc77:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001fc7d:	74 15                	je     c001fc94 <avxDetect.noAVX>
c001fc7f:	b8 01 00 00 00       	mov    eax,0x1
c001fc84:	0f a2                	cpuid  
c001fc86:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001fc8c:	74 06                	je     c001fc94 <avxDetect.noAVX>
c001fc8e:	b8 01 00 00 00       	mov    eax,0x1
c001fc93:	c3                   	ret    

c001fc94 <avxDetect.noAVX>:
c001fc94:	b8 00 00 00 00       	mov    eax,0x0
c001fc99:	c3                   	ret    

c001fc9a <avxSave>:
c001fc9a:	53                   	push   ebx
c001fc9b:	52                   	push   edx
c001fc9c:	31 c0                	xor    eax,eax
c001fc9e:	48                   	dec    eax
c001fc9f:	89 c2                	mov    edx,eax
c001fca1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fca5:	0f ae 23             	xsave  [ebx]
c001fca8:	5a                   	pop    edx
c001fca9:	5b                   	pop    ebx
c001fcaa:	c3                   	ret    

c001fcab <avxLoad>:
c001fcab:	53                   	push   ebx
c001fcac:	52                   	push   edx
c001fcad:	31 c0                	xor    eax,eax
c001fcaf:	48                   	dec    eax
c001fcb0:	89 c2                	mov    edx,eax
c001fcb2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fcb6:	0f ae 2b             	xrstor [ebx]
c001fcb9:	5a                   	pop    edx
c001fcba:	5b                   	pop    ebx
c001fcbb:	c3                   	ret    

c001fcbc <avxInit>:
c001fcbc:	e8 47 03 00 00       	call   c0020008 <sseInit>
c001fcc1:	50                   	push   eax
c001fcc2:	51                   	push   ecx
c001fcc3:	0f 20 e0             	mov    eax,cr4
c001fcc6:	0d 00 00 04 00       	or     eax,0x40000
c001fccb:	0f 22 e0             	mov    cr4,eax
c001fcce:	31 c9                	xor    ecx,ecx
c001fcd0:	0f 01 d0             	xgetbv 
c001fcd3:	0d 07 00 00 00       	or     eax,0x7
c001fcd8:	0f 01 d1             	xsetbv 
c001fcdb:	59                   	pop    ecx
c001fcdc:	58                   	pop    eax
c001fcdd:	c3                   	ret    

c001fcde <avxClose>:
c001fcde:	c3                   	ret    
c001fcdf:	90                   	nop

c001fce0 <isr0>:
c001fce0:	fa                   	cli    
c001fce1:	68 00 00 00 00       	push   0x0
c001fce6:	68 00 00 00 00       	push   0x0
c001fceb:	e9 56 01 00 00       	jmp    c001fe46 <int_common_stub>

c001fcf0 <isr1>:
c001fcf0:	fa                   	cli    
c001fcf1:	6a 00                	push   0x0
c001fcf3:	6a 01                	push   0x1
c001fcf5:	e9 4c 01 00 00       	jmp    c001fe46 <int_common_stub>

c001fcfa <isr2>:
c001fcfa:	fa                   	cli    
c001fcfb:	6a 00                	push   0x0
c001fcfd:	6a 02                	push   0x2
c001fcff:	e9 42 01 00 00       	jmp    c001fe46 <int_common_stub>

c001fd04 <isr3>:
c001fd04:	fa                   	cli    
c001fd05:	6a 00                	push   0x0
c001fd07:	6a 03                	push   0x3
c001fd09:	e9 38 01 00 00       	jmp    c001fe46 <int_common_stub>

c001fd0e <isr4>:
c001fd0e:	fa                   	cli    
c001fd0f:	6a 00                	push   0x0
c001fd11:	6a 04                	push   0x4
c001fd13:	e9 2e 01 00 00       	jmp    c001fe46 <int_common_stub>

c001fd18 <isr5>:
c001fd18:	fa                   	cli    
c001fd19:	6a 00                	push   0x0
c001fd1b:	6a 05                	push   0x5
c001fd1d:	e9 24 01 00 00       	jmp    c001fe46 <int_common_stub>

c001fd22 <isr6>:
c001fd22:	fa                   	cli    
c001fd23:	6a 00                	push   0x0
c001fd25:	6a 06                	push   0x6
c001fd27:	e9 1a 01 00 00       	jmp    c001fe46 <int_common_stub>

c001fd2c <isr7>:
c001fd2c:	fa                   	cli    
c001fd2d:	6a 00                	push   0x0
c001fd2f:	6a 07                	push   0x7
c001fd31:	e9 10 01 00 00       	jmp    c001fe46 <int_common_stub>

c001fd36 <isr8>:
c001fd36:	fa                   	cli    
c001fd37:	6a 08                	push   0x8
c001fd39:	e9 08 01 00 00       	jmp    c001fe46 <int_common_stub>

c001fd3e <isr9>:
c001fd3e:	fa                   	cli    
c001fd3f:	6a 00                	push   0x0
c001fd41:	6a 09                	push   0x9
c001fd43:	e9 fe 00 00 00       	jmp    c001fe46 <int_common_stub>

c001fd48 <isr10>:
c001fd48:	fa                   	cli    
c001fd49:	6a 0a                	push   0xa
c001fd4b:	e9 f6 00 00 00       	jmp    c001fe46 <int_common_stub>

c001fd50 <isr11>:
c001fd50:	fa                   	cli    
c001fd51:	6a 0b                	push   0xb
c001fd53:	e9 ee 00 00 00       	jmp    c001fe46 <int_common_stub>

c001fd58 <isr12>:
c001fd58:	fa                   	cli    
c001fd59:	6a 0c                	push   0xc
c001fd5b:	e9 e6 00 00 00       	jmp    c001fe46 <int_common_stub>

c001fd60 <isr13>:
c001fd60:	fa                   	cli    
c001fd61:	6a 0d                	push   0xd
c001fd63:	53                   	push   ebx
c001fd64:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fd68:	81 fb 36 ff 01 c0    	cmp    ebx,0xc001ff36
c001fd6e:	5b                   	pop    ebx
c001fd6f:	0f 84 c3 01 00 00    	je     c001ff38 <finishSignal2>
c001fd75:	e9 cc 00 00 00       	jmp    c001fe46 <int_common_stub>

c001fd7a <isr14>:
c001fd7a:	fa                   	cli    
c001fd7b:	6a 0e                	push   0xe
c001fd7d:	e9 c4 00 00 00       	jmp    c001fe46 <int_common_stub>

c001fd82 <isr15>:
c001fd82:	fa                   	cli    
c001fd83:	6a 00                	push   0x0
c001fd85:	6a 0f                	push   0xf
c001fd87:	e9 ba 00 00 00       	jmp    c001fe46 <int_common_stub>

c001fd8c <isr16>:
c001fd8c:	fa                   	cli    
c001fd8d:	6a 00                	push   0x0
c001fd8f:	6a 10                	push   0x10
c001fd91:	e9 b0 00 00 00       	jmp    c001fe46 <int_common_stub>

c001fd96 <isr17>:
c001fd96:	fa                   	cli    
c001fd97:	6a 00                	push   0x0
c001fd99:	6a 11                	push   0x11
c001fd9b:	e9 a6 00 00 00       	jmp    c001fe46 <int_common_stub>

c001fda0 <isr18>:
c001fda0:	fa                   	cli    
c001fda1:	6a 00                	push   0x0
c001fda3:	6a 12                	push   0x12
c001fda5:	e9 9c 00 00 00       	jmp    c001fe46 <int_common_stub>

c001fdaa <irq3>:
c001fdaa:	fa                   	cli    
c001fdab:	6a 00                	push   0x0
c001fdad:	6a 23                	push   0x23
c001fdaf:	e9 92 00 00 00       	jmp    c001fe46 <int_common_stub>

c001fdb4 <irq4>:
c001fdb4:	fa                   	cli    
c001fdb5:	6a 00                	push   0x0
c001fdb7:	6a 24                	push   0x24
c001fdb9:	e9 88 00 00 00       	jmp    c001fe46 <int_common_stub>

c001fdbe <irq5>:
c001fdbe:	fa                   	cli    
c001fdbf:	6a 00                	push   0x0
c001fdc1:	6a 25                	push   0x25
c001fdc3:	e9 7e 00 00 00       	jmp    c001fe46 <int_common_stub>

c001fdc8 <irq6>:
c001fdc8:	fa                   	cli    
c001fdc9:	6a 00                	push   0x0
c001fdcb:	6a 26                	push   0x26
c001fdcd:	e9 74 00 00 00       	jmp    c001fe46 <int_common_stub>

c001fdd2 <irq7>:
c001fdd2:	fa                   	cli    
c001fdd3:	6a 00                	push   0x0
c001fdd5:	6a 27                	push   0x27
c001fdd7:	e9 6a 00 00 00       	jmp    c001fe46 <int_common_stub>

c001fddc <irq8>:
c001fddc:	fa                   	cli    
c001fddd:	6a 00                	push   0x0
c001fddf:	6a 28                	push   0x28
c001fde1:	e9 60 00 00 00       	jmp    c001fe46 <int_common_stub>

c001fde6 <irq9>:
c001fde6:	fa                   	cli    
c001fde7:	6a 00                	push   0x0
c001fde9:	6a 29                	push   0x29
c001fdeb:	e9 56 00 00 00       	jmp    c001fe46 <int_common_stub>

c001fdf0 <irq10>:
c001fdf0:	fa                   	cli    
c001fdf1:	6a 00                	push   0x0
c001fdf3:	6a 2a                	push   0x2a
c001fdf5:	e9 4c 00 00 00       	jmp    c001fe46 <int_common_stub>

c001fdfa <irq11>:
c001fdfa:	fa                   	cli    
c001fdfb:	6a 00                	push   0x0
c001fdfd:	6a 2b                	push   0x2b
c001fdff:	e9 42 00 00 00       	jmp    c001fe46 <int_common_stub>

c001fe04 <irq12>:
c001fe04:	fa                   	cli    
c001fe05:	6a 00                	push   0x0
c001fe07:	6a 2c                	push   0x2c
c001fe09:	e9 38 00 00 00       	jmp    c001fe46 <int_common_stub>

c001fe0e <irq13>:
c001fe0e:	fa                   	cli    
c001fe0f:	6a 00                	push   0x0
c001fe11:	6a 2d                	push   0x2d
c001fe13:	e9 2e 00 00 00       	jmp    c001fe46 <int_common_stub>

c001fe18 <irq14>:
c001fe18:	fa                   	cli    
c001fe19:	6a 00                	push   0x0
c001fe1b:	6a 2e                	push   0x2e
c001fe1d:	e9 24 00 00 00       	jmp    c001fe46 <int_common_stub>

c001fe22 <irq15>:
c001fe22:	fa                   	cli    
c001fe23:	6a 00                	push   0x0
c001fe25:	6a 2f                	push   0x2f
c001fe27:	e9 1a 00 00 00       	jmp    c001fe46 <int_common_stub>

c001fe2c <irq1>:
c001fe2c:	fa                   	cli    
c001fe2d:	6a 00                	push   0x0
c001fe2f:	6a 21                	push   0x21
c001fe31:	eb 13                	jmp    c001fe46 <int_common_stub>

c001fe33 <irq2>:
c001fe33:	fa                   	cli    
c001fe34:	6a 00                	push   0x0
c001fe36:	6a 22                	push   0x22
c001fe38:	eb 0c                	jmp    c001fe46 <int_common_stub>

c001fe3a <isr96>:
c001fe3a:	6a 00                	push   0x0
c001fe3c:	6a 60                	push   0x60
c001fe3e:	fb                   	sti    
c001fe3f:	eb 37                	jmp    c001fe78 <syscall_common_stub>

c001fe41 <irq0>:
c001fe41:	fa                   	cli    
c001fe42:	6a 00                	push   0x0
c001fe44:	6a 20                	push   0x20

c001fe46 <int_common_stub>:
c001fe46:	60                   	pusha  
c001fe47:	1e                   	push   ds
c001fe48:	06                   	push   es
c001fe49:	0f a0                	push   fs
c001fe4b:	0f a8                	push   gs
c001fe4d:	66 b8 10 00          	mov    ax,0x10
c001fe51:	66 8e d8             	mov    ds,ax
c001fe54:	66 8e c0             	mov    es,ax
c001fe57:	66 8e e0             	mov    fs,ax
c001fe5a:	66 8e e8             	mov    gs,ax
c001fe5d:	54                   	push   esp
c001fe5e:	fc                   	cld    
c001fe5f:	e8 90 e0 fe ff       	call   c000def4 <int_handler>
c001fe64:	81 c4 04 00 00 00    	add    esp,0x4
c001fe6a:	0f a9                	pop    gs
c001fe6c:	0f a1                	pop    fs
c001fe6e:	07                   	pop    es
c001fe6f:	1f                   	pop    ds
c001fe70:	61                   	popa   
c001fe71:	81 c4 08 00 00 00    	add    esp,0x8
c001fe77:	cf                   	iret   

c001fe78 <syscall_common_stub>:
c001fe78:	60                   	pusha  
c001fe79:	1e                   	push   ds
c001fe7a:	06                   	push   es
c001fe7b:	0f a0                	push   fs
c001fe7d:	0f a8                	push   gs
c001fe7f:	66 b8 10 00          	mov    ax,0x10
c001fe83:	66 8e d8             	mov    ds,ax
c001fe86:	66 8e c0             	mov    es,ax
c001fe89:	66 8e e0             	mov    fs,ax
c001fe8c:	66 8e e8             	mov    gs,ax
c001fe8f:	54                   	push   esp
c001fe90:	fc                   	cld    
c001fe91:	e8 5e e0 fe ff       	call   c000def4 <int_handler>
c001fe96:	81 c4 04 00 00 00    	add    esp,0x4
c001fe9c:	0f a9                	pop    gs
c001fe9e:	0f a1                	pop    fs
c001fea0:	07                   	pop    es
c001fea1:	1f                   	pop    ds
c001fea2:	e8 dd 01 ff ff       	call   c0010084 <KiCheckSignalZ>
c001fea7:	3d 00 00 00 00       	cmp    eax,0x0
c001feac:	0f 84 c0 00 00 00    	je     c001ff72 <skipSignals>
c001feb2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001feb7:	61                   	popa   
c001feb8:	53                   	push   ebx
c001feb9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001febf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001fec2:	5b                   	pop    ebx
c001fec3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001fec8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001fecb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001fece:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fed1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001fed4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001fed7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001feda:	81 c4 08 00 00 00    	add    esp,0x8
c001fee0:	5e                   	pop    esi
c001fee1:	5b                   	pop    ebx
c001fee2:	59                   	pop    ecx
c001fee3:	5a                   	pop    edx
c001fee4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001fee7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001feea:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001feed:	52                   	push   edx
c001feee:	51                   	push   ecx
c001feef:	53                   	push   ebx
c001fef0:	56                   	push   esi
c001fef1:	81 ec 08 00 00 00    	sub    esp,0x8
c001fef7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001fefa:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001fefd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001ff00:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ff03:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ff06:	60                   	pusha  
c001ff07:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001ff0d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001ff10:	89 e3                	mov    ebx,esp
c001ff12:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001ff15:	52                   	push   edx
c001ff16:	68 36 ff 01 c0       	push   0xc001ff36
c001ff1b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001ff1e:	89 dc                	mov    esp,ebx
c001ff20:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001ff23:	68 23 00 00 00       	push   0x23
c001ff28:	51                   	push   ecx
c001ff29:	68 02 02 00 00       	push   0x202
c001ff2e:	68 1b 00 00 00       	push   0x1b
c001ff33:	ff 36                	push   DWORD PTR [esi]
c001ff35:	cf                   	iret   

c001ff36 <finishSignal>:
c001ff36:	cd 0f                	int    0xf

c001ff38 <finishSignal2>:
c001ff38:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001ff3e:	e8 be 01 ff ff       	call   c0010101 <KiFinishSignalZ>
c001ff43:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001ff49:	68 23 00 00 00       	push   0x23
c001ff4e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ff51:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001ff54:	68 1b 00 00 00       	push   0x1b
c001ff59:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001ff5c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ff5f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001ff62:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001ff65:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001ff68:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001ff6b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ff6e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001ff71:	cf                   	iret   

c001ff72 <skipSignals>:
c001ff72:	61                   	popa   
c001ff73:	81 c4 08 00 00 00    	add    esp,0x8
c001ff79:	cf                   	iret   
c001ff7a:	90                   	nop
c001ff7b:	90                   	nop

c001ff7c <irq16>:
c001ff7c:	fa                   	cli    
c001ff7d:	6a 00                	push   0x0
c001ff7f:	6a 30                	push   0x30
c001ff81:	e9 c0 fe ff ff       	jmp    c001fe46 <int_common_stub>

c001ff86 <irq17>:
c001ff86:	fa                   	cli    
c001ff87:	6a 00                	push   0x0
c001ff89:	6a 31                	push   0x31
c001ff8b:	e9 b6 fe ff ff       	jmp    c001fe46 <int_common_stub>

c001ff90 <irq18>:
c001ff90:	fa                   	cli    
c001ff91:	6a 00                	push   0x0
c001ff93:	6a 32                	push   0x32
c001ff95:	e9 ac fe ff ff       	jmp    c001fe46 <int_common_stub>

c001ff9a <irq19>:
c001ff9a:	fa                   	cli    
c001ff9b:	6a 00                	push   0x0
c001ff9d:	6a 33                	push   0x33
c001ff9f:	e9 a2 fe ff ff       	jmp    c001fe46 <int_common_stub>

c001ffa4 <irq20>:
c001ffa4:	fa                   	cli    
c001ffa5:	6a 00                	push   0x0
c001ffa7:	6a 34                	push   0x34
c001ffa9:	e9 98 fe ff ff       	jmp    c001fe46 <int_common_stub>

c001ffae <irq21>:
c001ffae:	fa                   	cli    
c001ffaf:	6a 00                	push   0x0
c001ffb1:	6a 35                	push   0x35
c001ffb3:	e9 8e fe ff ff       	jmp    c001fe46 <int_common_stub>

c001ffb8 <irq22>:
c001ffb8:	fa                   	cli    
c001ffb9:	6a 00                	push   0x0
c001ffbb:	6a 36                	push   0x36
c001ffbd:	e9 84 fe ff ff       	jmp    c001fe46 <int_common_stub>

c001ffc2 <irq23>:
c001ffc2:	fa                   	cli    
c001ffc3:	6a 00                	push   0x0
c001ffc5:	6a 37                	push   0x37
c001ffc7:	e9 7a fe ff ff       	jmp    c001fe46 <int_common_stub>
c001ffcc:	66 90                	xchg   ax,ax
c001ffce:	66 90                	xchg   ax,ax

c001ffd0 <i386GetRDRAND>:
c001ffd0:	b9 64 00 00 00       	mov    ecx,0x64

c001ffd5 <retry>:
c001ffd5:	0f c7 f0             	rdrand eax
c001ffd8:	72 05                	jb     c001ffdf <retry.done>
c001ffda:	e2 f9                	loop   c001ffd5 <retry>

c001ffdc <retry.fail>:
c001ffdc:	31 c0                	xor    eax,eax
c001ffde:	c3                   	ret    

c001ffdf <retry.done>:
c001ffdf:	c3                   	ret    

c001ffe0 <sseDetect>:
c001ffe0:	b8 01 00 00 00       	mov    eax,0x1
c001ffe5:	0f a2                	cpuid  
c001ffe7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001ffed:	74 06                	je     c001fff5 <sseDetect.noSSE>
c001ffef:	b8 01 00 00 00       	mov    eax,0x1
c001fff4:	c3                   	ret    

c001fff5 <sseDetect.noSSE>:
c001fff5:	31 c0                	xor    eax,eax
c001fff7:	c3                   	ret    

c001fff8 <sseSave>:
c001fff8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fffc:	0f ae 00             	fxsave [eax]
c001ffff:	c3                   	ret    

c0020000 <sseLoad>:
c0020000:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020004:	0f ae 08             	fxrstor [eax]
c0020007:	c3                   	ret    

c0020008 <sseInit>:
c0020008:	e8 48 00 00 00       	call   c0020055 <x87Init>
c002000d:	0f 20 e0             	mov    eax,cr4
c0020010:	66 0d 00 06          	or     ax,0x600
c0020014:	0f 22 e0             	mov    cr4,eax
c0020017:	c3                   	ret    

c0020018 <sseClose>:
c0020018:	c3                   	ret    
c0020019:	66 90                	xchg   ax,ax
c002001b:	66 90                	xchg   ax,ax
c002001d:	66 90                	xchg   ax,ax
c002001f:	90                   	nop

c0020020 <value_37F>:
c0020020:	7f 03                	jg     c0020025 <value_37A+0x1>

c0020022 <value_37E>:
c0020022:	7e 03                	jle    c0020027 <x87Detect+0x1>

c0020024 <value_37A>:
c0020024:	7a 03                	jp     c0020029 <x87Detect+0x3>

c0020026 <x87Detect>:
c0020026:	53                   	push   ebx
c0020027:	51                   	push   ecx
c0020028:	52                   	push   edx
c0020029:	b8 01 00 00 00       	mov    eax,0x1
c002002e:	0f a2                	cpuid  
c0020030:	f7 c2 01 00 00 00    	test   edx,0x1
c0020036:	74 06                	je     c002003e <x87Detect.nox87>
c0020038:	b8 01 00 00 00       	mov    eax,0x1
c002003d:	c3                   	ret    

c002003e <x87Detect.nox87>:
c002003e:	b8 00 00 00 00       	mov    eax,0x0
c0020043:	5a                   	pop    edx
c0020044:	59                   	pop    ecx
c0020045:	5b                   	pop    ebx
c0020046:	c3                   	ret    

c0020047 <x87Save>:
c0020047:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002004b:	dd 30                	fnsave [eax]
c002004d:	c3                   	ret    

c002004e <x87Load>:
c002004e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020052:	dd 20                	frstor [eax]
c0020054:	c3                   	ret    

c0020055 <x87Init>:
c0020055:	0f 20 c0             	mov    eax,cr0
c0020058:	66 25 fb ff          	and    ax,0xfffb
c002005c:	66 0d 22 00          	or     ax,0x22
c0020060:	0f 22 c0             	mov    cr0,eax
c0020063:	db e3                	fninit 
c0020065:	0f 06                	clts   
c0020067:	d9 2d 24 00 02 c0    	fldcw  WORD PTR ds:0xc0020024
c002006d:	c3                   	ret    

c002006e <x87Close>:
c002006e:	c3                   	ret    
c002006f:	90                   	nop

c0020070 <__do_global_ctors_aux>:
c0020070:	a1 24 10 02 c0       	mov    eax,ds:0xc0021024
c0020075:	83 f8 ff             	cmp    eax,0xffffffff
c0020078:	74 1a                	je     c0020094 <__do_global_ctors_aux+0x24>
c002007a:	55                   	push   ebp
c002007b:	89 e5                	mov    ebp,esp
c002007d:	53                   	push   ebx
c002007e:	52                   	push   edx
c002007f:	bb 24 10 02 c0       	mov    ebx,0xc0021024
c0020084:	ff d0                	call   eax
c0020086:	83 eb 04             	sub    ebx,0x4
c0020089:	8b 03                	mov    eax,DWORD PTR [ebx]
c002008b:	83 f8 ff             	cmp    eax,0xffffffff
c002008e:	75 f4                	jne    c0020084 <__do_global_ctors_aux+0x14>
c0020090:	58                   	pop    eax
c0020091:	5b                   	pop    ebx
c0020092:	5d                   	pop    ebp
c0020093:	c3                   	ret    
c0020094:	c3                   	ret    
c0020095:	66 90                	xchg   ax,ax
c0020097:	90                   	nop

c0020098 <__divdi3>:
c0020098:	55                   	push   ebp
c0020099:	57                   	push   edi
c002009a:	56                   	push   esi
c002009b:	53                   	push   ebx
c002009c:	83 ec 1c             	sub    esp,0x1c
c002009f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00200a3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00200a7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00200aa:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00200ae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00200b2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00200b6:	85 db                	test   ebx,ebx
c00200b8:	0f 88 8e 00 00 00    	js     c002014c <__divdi3+0xb4>
c00200be:	89 dd                	mov    ebp,ebx
c00200c0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00200c8:	89 d3                	mov    ebx,edx
c00200ca:	85 d2                	test   edx,edx
c00200cc:	79 0d                	jns    c00200db <__divdi3+0x43>
c00200ce:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00200d2:	f7 d8                	neg    eax
c00200d4:	83 d2 00             	adc    edx,0x0
c00200d7:	f7 da                	neg    edx
c00200d9:	89 d3                	mov    ebx,edx
c00200db:	89 c7                	mov    edi,eax
c00200dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00200e0:	85 db                	test   ebx,ebx
c00200e2:	75 48                	jne    c002012c <__divdi3+0x94>
c00200e4:	39 ef                	cmp    edi,ebp
c00200e6:	76 24                	jbe    c002010c <__divdi3+0x74>
c00200e8:	89 ea                	mov    edx,ebp
c00200ea:	f7 f7                	div    edi
c00200ec:	89 c1                	mov    ecx,eax
c00200ee:	31 f6                	xor    esi,esi
c00200f0:	89 c8                	mov    eax,ecx
c00200f2:	89 f2                	mov    edx,esi
c00200f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00200f8:	85 c9                	test   ecx,ecx
c00200fa:	74 07                	je     c0020103 <__divdi3+0x6b>
c00200fc:	f7 d8                	neg    eax
c00200fe:	83 d2 00             	adc    edx,0x0
c0020101:	f7 da                	neg    edx
c0020103:	83 c4 1c             	add    esp,0x1c
c0020106:	5b                   	pop    ebx
c0020107:	5e                   	pop    esi
c0020108:	5f                   	pop    edi
c0020109:	5d                   	pop    ebp
c002010a:	c3                   	ret    
c002010b:	90                   	nop
c002010c:	85 ff                	test   edi,edi
c002010e:	75 0b                	jne    c002011b <__divdi3+0x83>
c0020110:	b8 01 00 00 00       	mov    eax,0x1
c0020115:	31 d2                	xor    edx,edx
c0020117:	f7 f3                	div    ebx
c0020119:	89 c7                	mov    edi,eax
c002011b:	31 d2                	xor    edx,edx
c002011d:	89 e8                	mov    eax,ebp
c002011f:	f7 f7                	div    edi
c0020121:	89 c6                	mov    esi,eax
c0020123:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020126:	f7 f7                	div    edi
c0020128:	89 c1                	mov    ecx,eax
c002012a:	eb c4                	jmp    c00200f0 <__divdi3+0x58>
c002012c:	39 eb                	cmp    ebx,ebp
c002012e:	77 3c                	ja     c002016c <__divdi3+0xd4>
c0020130:	0f bd f3             	bsr    esi,ebx
c0020133:	83 f6 1f             	xor    esi,0x1f
c0020136:	75 40                	jne    c0020178 <__divdi3+0xe0>
c0020138:	39 eb                	cmp    ebx,ebp
c002013a:	72 09                	jb     c0020145 <__divdi3+0xad>
c002013c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002013f:	0f 87 97 00 00 00    	ja     c00201dc <__divdi3+0x144>
c0020145:	b9 01 00 00 00       	mov    ecx,0x1
c002014a:	eb a4                	jmp    c00200f0 <__divdi3+0x58>
c002014c:	f7 d9                	neg    ecx
c002014e:	83 d3 00             	adc    ebx,0x0
c0020151:	f7 db                	neg    ebx
c0020153:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020156:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002015a:	89 dd                	mov    ebp,ebx
c002015c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0020164:	e9 5f ff ff ff       	jmp    c00200c8 <__divdi3+0x30>
c0020169:	8d 76 00             	lea    esi,[esi+0x0]
c002016c:	31 f6                	xor    esi,esi
c002016e:	31 c9                	xor    ecx,ecx
c0020170:	e9 7b ff ff ff       	jmp    c00200f0 <__divdi3+0x58>
c0020175:	8d 76 00             	lea    esi,[esi+0x0]
c0020178:	b8 20 00 00 00       	mov    eax,0x20
c002017d:	29 f0                	sub    eax,esi
c002017f:	89 f1                	mov    ecx,esi
c0020181:	d3 e3                	shl    ebx,cl
c0020183:	89 fa                	mov    edx,edi
c0020185:	88 c1                	mov    cl,al
c0020187:	d3 ea                	shr    edx,cl
c0020189:	09 da                	or     edx,ebx
c002018b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002018f:	89 f1                	mov    ecx,esi
c0020191:	d3 e7                	shl    edi,cl
c0020193:	89 eb                	mov    ebx,ebp
c0020195:	88 c1                	mov    cl,al
c0020197:	d3 eb                	shr    ebx,cl
c0020199:	89 f1                	mov    ecx,esi
c002019b:	d3 e5                	shl    ebp,cl
c002019d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00201a0:	88 c1                	mov    cl,al
c00201a2:	d3 ea                	shr    edx,cl
c00201a4:	09 d5                	or     ebp,edx
c00201a6:	89 e8                	mov    eax,ebp
c00201a8:	89 da                	mov    edx,ebx
c00201aa:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00201ae:	89 d3                	mov    ebx,edx
c00201b0:	89 c5                	mov    ebp,eax
c00201b2:	f7 e7                	mul    edi
c00201b4:	39 d3                	cmp    ebx,edx
c00201b6:	72 18                	jb     c00201d0 <__divdi3+0x138>
c00201b8:	74 0a                	je     c00201c4 <__divdi3+0x12c>
c00201ba:	89 e9                	mov    ecx,ebp
c00201bc:	31 f6                	xor    esi,esi
c00201be:	e9 2d ff ff ff       	jmp    c00200f0 <__divdi3+0x58>
c00201c3:	90                   	nop
c00201c4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00201c7:	89 f1                	mov    ecx,esi
c00201c9:	d3 e7                	shl    edi,cl
c00201cb:	39 c7                	cmp    edi,eax
c00201cd:	73 eb                	jae    c00201ba <__divdi3+0x122>
c00201cf:	90                   	nop
c00201d0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00201d3:	31 f6                	xor    esi,esi
c00201d5:	e9 16 ff ff ff       	jmp    c00200f0 <__divdi3+0x58>
c00201da:	66 90                	xchg   ax,ax
c00201dc:	31 c9                	xor    ecx,ecx
c00201de:	e9 0d ff ff ff       	jmp    c00200f0 <__divdi3+0x58>
c00201e3:	90                   	nop

c00201e4 <__moddi3>:
c00201e4:	55                   	push   ebp
c00201e5:	57                   	push   edi
c00201e6:	56                   	push   esi
c00201e7:	53                   	push   ebx
c00201e8:	83 ec 2c             	sub    esp,0x2c
c00201eb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00201ef:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00201f3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00201f7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00201fb:	85 db                	test   ebx,ebx
c00201fd:	0f 88 85 00 00 00    	js     c0020288 <__moddi3+0xa4>
c0020203:	89 de                	mov    esi,ebx
c0020205:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002020d:	89 d7                	mov    edi,edx
c002020f:	85 d2                	test   edx,edx
c0020211:	79 09                	jns    c002021c <__moddi3+0x38>
c0020213:	f7 d8                	neg    eax
c0020215:	83 d2 00             	adc    edx,0x0
c0020218:	f7 da                	neg    edx
c002021a:	89 d7                	mov    edi,edx
c002021c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020220:	89 cd                	mov    ebp,ecx
c0020222:	85 ff                	test   edi,edi
c0020224:	75 52                	jne    c0020278 <__moddi3+0x94>
c0020226:	89 c3                	mov    ebx,eax
c0020228:	39 f0                	cmp    eax,esi
c002022a:	76 24                	jbe    c0020250 <__moddi3+0x6c>
c002022c:	89 c8                	mov    eax,ecx
c002022e:	89 f2                	mov    edx,esi
c0020230:	f7 f3                	div    ebx
c0020232:	89 d6                	mov    esi,edx
c0020234:	89 f0                	mov    eax,esi
c0020236:	31 d2                	xor    edx,edx
c0020238:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002023c:	85 c9                	test   ecx,ecx
c002023e:	74 07                	je     c0020247 <__moddi3+0x63>
c0020240:	f7 d8                	neg    eax
c0020242:	83 d2 00             	adc    edx,0x0
c0020245:	f7 da                	neg    edx
c0020247:	83 c4 2c             	add    esp,0x2c
c002024a:	5b                   	pop    ebx
c002024b:	5e                   	pop    esi
c002024c:	5f                   	pop    edi
c002024d:	5d                   	pop    ebp
c002024e:	c3                   	ret    
c002024f:	90                   	nop
c0020250:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020254:	85 db                	test   ebx,ebx
c0020256:	75 0d                	jne    c0020265 <__moddi3+0x81>
c0020258:	b8 01 00 00 00       	mov    eax,0x1
c002025d:	31 d2                	xor    edx,edx
c002025f:	f7 f7                	div    edi
c0020261:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020265:	89 f0                	mov    eax,esi
c0020267:	31 d2                	xor    edx,edx
c0020269:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002026d:	f7 f7                	div    edi
c002026f:	89 e8                	mov    eax,ebp
c0020271:	f7 f7                	div    edi
c0020273:	89 d6                	mov    esi,edx
c0020275:	eb bd                	jmp    c0020234 <__moddi3+0x50>
c0020277:	90                   	nop
c0020278:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002027c:	39 f7                	cmp    edi,esi
c002027e:	76 20                	jbe    c00202a0 <__moddi3+0xbc>
c0020280:	89 c8                	mov    eax,ecx
c0020282:	89 f2                	mov    edx,esi
c0020284:	eb b2                	jmp    c0020238 <__moddi3+0x54>
c0020286:	66 90                	xchg   ax,ax
c0020288:	f7 d9                	neg    ecx
c002028a:	83 d3 00             	adc    ebx,0x0
c002028d:	f7 db                	neg    ebx
c002028f:	89 de                	mov    esi,ebx
c0020291:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0020299:	e9 6f ff ff ff       	jmp    c002020d <__moddi3+0x29>
c002029e:	66 90                	xchg   ax,ax
c00202a0:	0f bd c7             	bsr    eax,edi
c00202a3:	83 f0 1f             	xor    eax,0x1f
c00202a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00202aa:	75 24                	jne    c00202d0 <__moddi3+0xec>
c00202ac:	39 f7                	cmp    edi,esi
c00202ae:	72 06                	jb     c00202b6 <__moddi3+0xd2>
c00202b0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00202b4:	77 0c                	ja     c00202c2 <__moddi3+0xde>
c00202b6:	89 e9                	mov    ecx,ebp
c00202b8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00202bc:	19 fe                	sbb    esi,edi
c00202be:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00202c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00202c6:	89 f2                	mov    edx,esi
c00202c8:	e9 6b ff ff ff       	jmp    c0020238 <__moddi3+0x54>
c00202cd:	8d 76 00             	lea    esi,[esi+0x0]
c00202d0:	b8 20 00 00 00       	mov    eax,0x20
c00202d5:	89 c2                	mov    edx,eax
c00202d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00202db:	29 da                	sub    edx,ebx
c00202dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00202e1:	88 d9                	mov    cl,bl
c00202e3:	d3 e7                	shl    edi,cl
c00202e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00202e9:	88 d1                	mov    cl,dl
c00202eb:	d3 e8                	shr    eax,cl
c00202ed:	09 c7                	or     edi,eax
c00202ef:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00202f3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00202f7:	89 d8                	mov    eax,ebx
c00202f9:	88 d9                	mov    cl,bl
c00202fb:	d3 e7                	shl    edi,cl
c00202fd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020301:	89 f3                	mov    ebx,esi
c0020303:	88 d1                	mov    cl,dl
c0020305:	d3 eb                	shr    ebx,cl
c0020307:	89 c7                	mov    edi,eax
c0020309:	88 c1                	mov    cl,al
c002030b:	d3 e6                	shl    esi,cl
c002030d:	89 e8                	mov    eax,ebp
c002030f:	88 d1                	mov    cl,dl
c0020311:	d3 e8                	shr    eax,cl
c0020313:	09 f0                	or     eax,esi
c0020315:	89 f9                	mov    ecx,edi
c0020317:	d3 e5                	shl    ebp,cl
c0020319:	89 da                	mov    edx,ebx
c002031b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002031f:	89 d3                	mov    ebx,edx
c0020321:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020325:	89 c6                	mov    esi,eax
c0020327:	89 d1                	mov    ecx,edx
c0020329:	39 d3                	cmp    ebx,edx
c002032b:	72 27                	jb     c0020354 <__moddi3+0x170>
c002032d:	74 21                	je     c0020350 <__moddi3+0x16c>
c002032f:	29 f5                	sub    ebp,esi
c0020331:	19 cb                	sbb    ebx,ecx
c0020333:	89 de                	mov    esi,ebx
c0020335:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0020339:	d3 e6                	shl    esi,cl
c002033b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002033f:	89 f9                	mov    ecx,edi
c0020341:	d3 ed                	shr    ebp,cl
c0020343:	09 ee                	or     esi,ebp
c0020345:	89 f0                	mov    eax,esi
c0020347:	d3 eb                	shr    ebx,cl
c0020349:	89 da                	mov    edx,ebx
c002034b:	e9 e8 fe ff ff       	jmp    c0020238 <__moddi3+0x54>
c0020350:	39 c5                	cmp    ebp,eax
c0020352:	73 db                	jae    c002032f <__moddi3+0x14b>
c0020354:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0020358:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002035c:	89 d1                	mov    ecx,edx
c002035e:	89 c6                	mov    esi,eax
c0020360:	eb cd                	jmp    c002032f <__moddi3+0x14b>
c0020362:	66 90                	xchg   ax,ax

c0020364 <__udivdi3>:
c0020364:	55                   	push   ebp
c0020365:	57                   	push   edi
c0020366:	56                   	push   esi
c0020367:	53                   	push   ebx
c0020368:	83 ec 1c             	sub    esp,0x1c
c002036b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002036f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020373:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020377:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002037b:	85 d2                	test   edx,edx
c002037d:	75 41                	jne    c00203c0 <__udivdi3+0x5c>
c002037f:	39 f7                	cmp    edi,esi
c0020381:	76 15                	jbe    c0020398 <__udivdi3+0x34>
c0020383:	89 e8                	mov    eax,ebp
c0020385:	89 f2                	mov    edx,esi
c0020387:	f7 f7                	div    edi
c0020389:	31 db                	xor    ebx,ebx
c002038b:	89 da                	mov    edx,ebx
c002038d:	83 c4 1c             	add    esp,0x1c
c0020390:	5b                   	pop    ebx
c0020391:	5e                   	pop    esi
c0020392:	5f                   	pop    edi
c0020393:	5d                   	pop    ebp
c0020394:	c3                   	ret    
c0020395:	8d 76 00             	lea    esi,[esi+0x0]
c0020398:	89 f9                	mov    ecx,edi
c002039a:	85 ff                	test   edi,edi
c002039c:	75 0b                	jne    c00203a9 <__udivdi3+0x45>
c002039e:	b8 01 00 00 00       	mov    eax,0x1
c00203a3:	31 d2                	xor    edx,edx
c00203a5:	f7 f7                	div    edi
c00203a7:	89 c1                	mov    ecx,eax
c00203a9:	31 d2                	xor    edx,edx
c00203ab:	89 f0                	mov    eax,esi
c00203ad:	f7 f1                	div    ecx
c00203af:	89 c3                	mov    ebx,eax
c00203b1:	89 e8                	mov    eax,ebp
c00203b3:	f7 f1                	div    ecx
c00203b5:	89 da                	mov    edx,ebx
c00203b7:	83 c4 1c             	add    esp,0x1c
c00203ba:	5b                   	pop    ebx
c00203bb:	5e                   	pop    esi
c00203bc:	5f                   	pop    edi
c00203bd:	5d                   	pop    ebp
c00203be:	c3                   	ret    
c00203bf:	90                   	nop
c00203c0:	39 f2                	cmp    edx,esi
c00203c2:	77 1c                	ja     c00203e0 <__udivdi3+0x7c>
c00203c4:	0f bd da             	bsr    ebx,edx
c00203c7:	83 f3 1f             	xor    ebx,0x1f
c00203ca:	75 24                	jne    c00203f0 <__udivdi3+0x8c>
c00203cc:	39 f2                	cmp    edx,esi
c00203ce:	72 08                	jb     c00203d8 <__udivdi3+0x74>
c00203d0:	39 ef                	cmp    edi,ebp
c00203d2:	0f 87 84 00 00 00    	ja     c002045c <__udivdi3+0xf8>
c00203d8:	b8 01 00 00 00       	mov    eax,0x1
c00203dd:	eb ac                	jmp    c002038b <__udivdi3+0x27>
c00203df:	90                   	nop
c00203e0:	31 db                	xor    ebx,ebx
c00203e2:	31 c0                	xor    eax,eax
c00203e4:	89 da                	mov    edx,ebx
c00203e6:	83 c4 1c             	add    esp,0x1c
c00203e9:	5b                   	pop    ebx
c00203ea:	5e                   	pop    esi
c00203eb:	5f                   	pop    edi
c00203ec:	5d                   	pop    ebp
c00203ed:	c3                   	ret    
c00203ee:	66 90                	xchg   ax,ax
c00203f0:	b8 20 00 00 00       	mov    eax,0x20
c00203f5:	29 d8                	sub    eax,ebx
c00203f7:	88 d9                	mov    cl,bl
c00203f9:	d3 e2                	shl    edx,cl
c00203fb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00203ff:	89 fa                	mov    edx,edi
c0020401:	88 c1                	mov    cl,al
c0020403:	d3 ea                	shr    edx,cl
c0020405:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020409:	09 d1                	or     ecx,edx
c002040b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002040f:	88 d9                	mov    cl,bl
c0020411:	d3 e7                	shl    edi,cl
c0020413:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020417:	89 f7                	mov    edi,esi
c0020419:	88 c1                	mov    cl,al
c002041b:	d3 ef                	shr    edi,cl
c002041d:	88 d9                	mov    cl,bl
c002041f:	d3 e6                	shl    esi,cl
c0020421:	89 ea                	mov    edx,ebp
c0020423:	88 c1                	mov    cl,al
c0020425:	d3 ea                	shr    edx,cl
c0020427:	09 d6                	or     esi,edx
c0020429:	89 f0                	mov    eax,esi
c002042b:	89 fa                	mov    edx,edi
c002042d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0020431:	89 d7                	mov    edi,edx
c0020433:	89 c6                	mov    esi,eax
c0020435:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020439:	39 d7                	cmp    edi,edx
c002043b:	72 13                	jb     c0020450 <__udivdi3+0xec>
c002043d:	74 09                	je     c0020448 <__udivdi3+0xe4>
c002043f:	89 f0                	mov    eax,esi
c0020441:	31 db                	xor    ebx,ebx
c0020443:	e9 43 ff ff ff       	jmp    c002038b <__udivdi3+0x27>
c0020448:	88 d9                	mov    cl,bl
c002044a:	d3 e5                	shl    ebp,cl
c002044c:	39 c5                	cmp    ebp,eax
c002044e:	73 ef                	jae    c002043f <__udivdi3+0xdb>
c0020450:	8d 46 ff             	lea    eax,[esi-0x1]
c0020453:	31 db                	xor    ebx,ebx
c0020455:	e9 31 ff ff ff       	jmp    c002038b <__udivdi3+0x27>
c002045a:	66 90                	xchg   ax,ax
c002045c:	31 c0                	xor    eax,eax
c002045e:	e9 28 ff ff ff       	jmp    c002038b <__udivdi3+0x27>
c0020463:	90                   	nop

c0020464 <__umoddi3>:
c0020464:	55                   	push   ebp
c0020465:	57                   	push   edi
c0020466:	56                   	push   esi
c0020467:	53                   	push   ebx
c0020468:	83 ec 1c             	sub    esp,0x1c
c002046b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002046f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020473:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020477:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002047b:	89 da                	mov    edx,ebx
c002047d:	85 c0                	test   eax,eax
c002047f:	75 37                	jne    c00204b8 <__umoddi3+0x54>
c0020481:	39 df                	cmp    edi,ebx
c0020483:	76 13                	jbe    c0020498 <__umoddi3+0x34>
c0020485:	89 f0                	mov    eax,esi
c0020487:	f7 f7                	div    edi
c0020489:	89 d0                	mov    eax,edx
c002048b:	31 d2                	xor    edx,edx
c002048d:	83 c4 1c             	add    esp,0x1c
c0020490:	5b                   	pop    ebx
c0020491:	5e                   	pop    esi
c0020492:	5f                   	pop    edi
c0020493:	5d                   	pop    ebp
c0020494:	c3                   	ret    
c0020495:	8d 76 00             	lea    esi,[esi+0x0]
c0020498:	89 fd                	mov    ebp,edi
c002049a:	85 ff                	test   edi,edi
c002049c:	75 0b                	jne    c00204a9 <__umoddi3+0x45>
c002049e:	b8 01 00 00 00       	mov    eax,0x1
c00204a3:	31 d2                	xor    edx,edx
c00204a5:	f7 f7                	div    edi
c00204a7:	89 c5                	mov    ebp,eax
c00204a9:	89 d8                	mov    eax,ebx
c00204ab:	31 d2                	xor    edx,edx
c00204ad:	f7 f5                	div    ebp
c00204af:	89 f0                	mov    eax,esi
c00204b1:	f7 f5                	div    ebp
c00204b3:	89 d0                	mov    eax,edx
c00204b5:	eb d4                	jmp    c002048b <__umoddi3+0x27>
c00204b7:	90                   	nop
c00204b8:	89 f1                	mov    ecx,esi
c00204ba:	39 d8                	cmp    eax,ebx
c00204bc:	76 0a                	jbe    c00204c8 <__umoddi3+0x64>
c00204be:	89 f0                	mov    eax,esi
c00204c0:	83 c4 1c             	add    esp,0x1c
c00204c3:	5b                   	pop    ebx
c00204c4:	5e                   	pop    esi
c00204c5:	5f                   	pop    edi
c00204c6:	5d                   	pop    ebp
c00204c7:	c3                   	ret    
c00204c8:	0f bd e8             	bsr    ebp,eax
c00204cb:	83 f5 1f             	xor    ebp,0x1f
c00204ce:	75 1c                	jne    c00204ec <__umoddi3+0x88>
c00204d0:	39 d8                	cmp    eax,ebx
c00204d2:	72 04                	jb     c00204d8 <__umoddi3+0x74>
c00204d4:	39 f7                	cmp    edi,esi
c00204d6:	77 08                	ja     c00204e0 <__umoddi3+0x7c>
c00204d8:	89 da                	mov    edx,ebx
c00204da:	29 fe                	sub    esi,edi
c00204dc:	19 c2                	sbb    edx,eax
c00204de:	89 f1                	mov    ecx,esi
c00204e0:	89 c8                	mov    eax,ecx
c00204e2:	83 c4 1c             	add    esp,0x1c
c00204e5:	5b                   	pop    ebx
c00204e6:	5e                   	pop    esi
c00204e7:	5f                   	pop    edi
c00204e8:	5d                   	pop    ebp
c00204e9:	c3                   	ret    
c00204ea:	66 90                	xchg   ax,ax
c00204ec:	ba 20 00 00 00       	mov    edx,0x20
c00204f1:	29 ea                	sub    edx,ebp
c00204f3:	89 e9                	mov    ecx,ebp
c00204f5:	d3 e0                	shl    eax,cl
c00204f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00204fb:	89 f8                	mov    eax,edi
c00204fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020501:	88 d1                	mov    cl,dl
c0020503:	d3 e8                	shr    eax,cl
c0020505:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020509:	09 c1                	or     ecx,eax
c002050b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002050f:	89 e9                	mov    ecx,ebp
c0020511:	d3 e7                	shl    edi,cl
c0020513:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020517:	89 d8                	mov    eax,ebx
c0020519:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002051d:	88 d1                	mov    cl,dl
c002051f:	d3 e8                	shr    eax,cl
c0020521:	89 c7                	mov    edi,eax
c0020523:	89 e9                	mov    ecx,ebp
c0020525:	d3 e3                	shl    ebx,cl
c0020527:	89 f0                	mov    eax,esi
c0020529:	88 d1                	mov    cl,dl
c002052b:	d3 e8                	shr    eax,cl
c002052d:	09 d8                	or     eax,ebx
c002052f:	89 e9                	mov    ecx,ebp
c0020531:	d3 e6                	shl    esi,cl
c0020533:	89 f3                	mov    ebx,esi
c0020535:	89 fa                	mov    edx,edi
c0020537:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002053b:	89 d1                	mov    ecx,edx
c002053d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020541:	89 c6                	mov    esi,eax
c0020543:	89 d7                	mov    edi,edx
c0020545:	39 d1                	cmp    ecx,edx
c0020547:	72 27                	jb     c0020570 <__umoddi3+0x10c>
c0020549:	74 21                	je     c002056c <__umoddi3+0x108>
c002054b:	89 ca                	mov    edx,ecx
c002054d:	29 f3                	sub    ebx,esi
c002054f:	19 fa                	sbb    edx,edi
c0020551:	89 d0                	mov    eax,edx
c0020553:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0020557:	d3 e0                	shl    eax,cl
c0020559:	89 e9                	mov    ecx,ebp
c002055b:	d3 eb                	shr    ebx,cl
c002055d:	09 d8                	or     eax,ebx
c002055f:	d3 ea                	shr    edx,cl
c0020561:	83 c4 1c             	add    esp,0x1c
c0020564:	5b                   	pop    ebx
c0020565:	5e                   	pop    esi
c0020566:	5f                   	pop    edi
c0020567:	5d                   	pop    ebp
c0020568:	c3                   	ret    
c0020569:	8d 76 00             	lea    esi,[esi+0x0]
c002056c:	39 c3                	cmp    ebx,eax
c002056e:	73 db                	jae    c002054b <__umoddi3+0xe7>
c0020570:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0020574:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0020578:	89 d7                	mov    edi,edx
c002057a:	89 c6                	mov    esi,eax
c002057c:	eb cd                	jmp    c002054b <__umoddi3+0xe7>

Disassembly of section .init:

c002057e <_init>:
c002057e:	55                   	push   ebp
c002057f:	89 e5                	mov    ebp,esp
c0020581:	e8 6e fb fd ff       	call   c00000f4 <frame_dummy>
c0020586:	e8 e5 fa ff ff       	call   c0020070 <__do_global_ctors_aux>
c002058b:	5d                   	pop    ebp
c002058c:	c3                   	ret    

Disassembly of section .fini:

c002058d <_fini>:
c002058d:	55                   	push   ebp
c002058e:	89 e5                	mov    ebp,esp
c0020590:	e8 ef fa fd ff       	call   c0000084 <__do_global_dtors_aux>
c0020595:	5d                   	pop    ebp
c0020596:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0020598 <DriverlessDevice::~DriverlessDevice()>:
c0020598:	ba 40 1f 02 c0       	mov    edx,0xc0021f40
c002059d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00205a1:	89 10                	mov    DWORD PTR [eax],edx
c00205a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00205a7:	50                   	push   eax
c00205a8:	e8 e7 89 fe ff       	call   c0008f94 <Device::~Device()>
c00205ad:	83 c4 04             	add    esp,0x4
c00205b0:	90                   	nop
c00205b1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00205b2 <DriverlessDevice::~DriverlessDevice()>:
c00205b2:	83 ec 0c             	sub    esp,0xc
c00205b5:	83 ec 0c             	sub    esp,0xc
c00205b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205bc:	e8 d7 ff ff ff       	call   c0020598 <DriverlessDevice::~DriverlessDevice()>
c00205c1:	83 c4 10             	add    esp,0x10
c00205c4:	83 ec 08             	sub    esp,0x8
c00205c7:	68 58 01 00 00       	push   0x158
c00205cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205d0:	e8 32 c2 fe ff       	call   c000c807 <operator delete(void*, unsigned long)>
c00205d5:	83 c4 10             	add    esp,0x10
c00205d8:	83 c4 0c             	add    esp,0xc
c00205db:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00205dc <LinkedList<Device>::addElement(Device*)>:
c00205dc:	83 ec 0c             	sub    esp,0xc
c00205df:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00205e4:	75 10                	jne    c00205f6 <LinkedList<Device>::addElement(Device*)+0x1a>
c00205e6:	83 ec 0c             	sub    esp,0xc
c00205e9:	68 d4 1e 02 c0       	push   0xc0021ed4
c00205ee:	e8 df e7 fe ff       	call   c000edd2 <KePanic(char const*)>
c00205f3:	83 c4 10             	add    esp,0x10
c00205f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00205fc:	85 c0                	test   eax,eax
c00205fe:	74 3a                	je     c002063a <LinkedList<Device>::addElement(Device*)+0x5e>
c0020600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020604:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020607:	85 c0                	test   eax,eax
c0020609:	74 2f                	je     c002063a <LinkedList<Device>::addElement(Device*)+0x5e>
c002060b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002060f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020612:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020616:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002061c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020620:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020624:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002062b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002062e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0020638:	eb 68                	jmp    c00206a2 <LinkedList<Device>::addElement(Device*)+0xc6>
c002063a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002063e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020640:	85 c0                	test   eax,eax
c0020642:	75 4e                	jne    c0020692 <LinkedList<Device>::addElement(Device*)+0xb6>
c0020644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020648:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002064b:	85 c0                	test   eax,eax
c002064d:	75 43                	jne    c0020692 <LinkedList<Device>::addElement(Device*)+0xb6>
c002064f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020653:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020657:	89 10                	mov    DWORD PTR [eax],edx
c0020659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002065d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020661:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020668:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002066b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0020675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020679:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002067c:	85 c0                	test   eax,eax
c002067e:	74 22                	je     c00206a2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0020680:	83 ec 0c             	sub    esp,0xc
c0020683:	68 f6 1e 02 c0       	push   0xc0021ef6
c0020688:	e8 45 e7 fe ff       	call   c000edd2 <KePanic(char const*)>
c002068d:	83 c4 10             	add    esp,0x10
c0020690:	eb 10                	jmp    c00206a2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0020692:	83 ec 0c             	sub    esp,0xc
c0020695:	68 00 1f 02 c0       	push   0xc0021f00
c002069a:	e8 33 e7 fe ff       	call   c000edd2 <KePanic(char const*)>
c002069f:	83 c4 10             	add    esp,0x10
c00206a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206a6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00206a9:	8d 50 01             	lea    edx,[eax+0x1]
c00206ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206b0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00206b3:	90                   	nop
c00206b4:	83 c4 0c             	add    esp,0xc
c00206b7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00206b8 <LinkedList<Device>::LinkedList()>:
c00206b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00206bc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00206c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00206c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00206cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00206d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00206d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00206dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00206e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00206e6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00206ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00206f1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00206f8:	90                   	nop
c00206f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00206fc <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00206fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020700:	8b 00                	mov    eax,DWORD PTR [eax]
c0020702:	85 c0                	test   eax,eax
c0020704:	75 0e                	jne    c0020714 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0020706:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002070a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002070d:	85 c0                	test   eax,eax
c002070f:	75 03                	jne    c0020714 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0020711:	b0 01                	mov    al,0x1
c0020713:	c3                   	ret    
c0020714:	b0 00                	mov    al,0x0
c0020716:	90                   	nop
c0020717:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0020718 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0020718:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002071c:	8b 00                	mov    eax,DWORD PTR [eax]
c002071e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0020720 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0020720:	83 ec 0c             	sub    esp,0xc
c0020723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020727:	8b 00                	mov    eax,DWORD PTR [eax]
c0020729:	85 c0                	test   eax,eax
c002072b:	75 17                	jne    c0020744 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002072d:	83 ec 0c             	sub    esp,0xc
c0020730:	68 70 21 02 c0       	push   0xc0022170
c0020735:	e8 98 e6 fe ff       	call   c000edd2 <KePanic(char const*)>
c002073a:	83 c4 10             	add    esp,0x10
c002073d:	e9 96 00 00 00       	jmp    c00207d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0020742:	66 90                	xchg   ax,ax
c0020744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020748:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002074b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002074e:	85 c0                	test   eax,eax
c0020750:	0f 95 c0             	setne  al
c0020753:	0f b6 c0             	movzx  eax,al
c0020756:	85 c0                	test   eax,eax
c0020758:	74 12                	je     c002076c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002075a:	83 ec 0c             	sub    esp,0xc
c002075d:	68 bb 21 02 c0       	push   0xc00221bb
c0020762:	e8 6b e6 fe ff       	call   c000edd2 <KePanic(char const*)>
c0020767:	83 c4 10             	add    esp,0x10
c002076a:	66 90                	xchg   ax,ax
c002076c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020770:	8b 00                	mov    eax,DWORD PTR [eax]
c0020772:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020775:	85 c0                	test   eax,eax
c0020777:	0f 94 c0             	sete   al
c002077a:	0f b6 c0             	movzx  eax,al
c002077d:	85 c0                	test   eax,eax
c002077f:	74 33                	je     c00207b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0020781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020785:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002078b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002078f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002079a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002079d:	83 f8 01             	cmp    eax,0x1
c00207a0:	74 22                	je     c00207c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c00207a2:	83 ec 0c             	sub    esp,0xc
c00207a5:	68 94 21 02 c0       	push   0xc0022194
c00207aa:	e8 23 e6 fe ff       	call   c000edd2 <KePanic(char const*)>
c00207af:	83 c4 10             	add    esp,0x10
c00207b2:	eb 10                	jmp    c00207c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c00207b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00207ba:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00207bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207c1:	89 10                	mov    DWORD PTR [eax],edx
c00207c3:	90                   	nop
c00207c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00207cb:	8d 50 ff             	lea    edx,[eax-0x1]
c00207ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207d2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00207d5:	8d 76 00             	lea    esi,[esi+0x0]
c00207d8:	83 c4 0c             	add    esp,0xc
c00207db:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00207dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00207dc:	83 ec 0c             	sub    esp,0xc
c00207df:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00207e4:	75 12                	jne    c00207f8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c00207e6:	83 ec 0c             	sub    esp,0xc
c00207e9:	68 d4 1e 02 c0       	push   0xc0021ed4
c00207ee:	e8 df e5 fe ff       	call   c000edd2 <KePanic(char const*)>
c00207f3:	83 c4 10             	add    esp,0x10
c00207f6:	66 90                	xchg   ax,ax
c00207f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00207fe:	85 c0                	test   eax,eax
c0020800:	74 36                	je     c0020838 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0020802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020806:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020809:	85 c0                	test   eax,eax
c002080b:	74 2b                	je     c0020838 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002080d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020811:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020814:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020818:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002081b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002081f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020823:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002082a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002082d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020834:	eb 6a                	jmp    c00208a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0020836:	66 90                	xchg   ax,ax
c0020838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002083c:	8b 00                	mov    eax,DWORD PTR [eax]
c002083e:	85 c0                	test   eax,eax
c0020840:	75 4e                	jne    c0020890 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0020842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020846:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020849:	85 c0                	test   eax,eax
c002084b:	75 43                	jne    c0020890 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002084d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020851:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020855:	89 10                	mov    DWORD PTR [eax],edx
c0020857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002085b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002085f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020866:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020869:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020874:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020877:	85 c0                	test   eax,eax
c0020879:	74 25                	je     c00208a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002087b:	83 ec 0c             	sub    esp,0xc
c002087e:	68 f6 1e 02 c0       	push   0xc0021ef6
c0020883:	e8 4a e5 fe ff       	call   c000edd2 <KePanic(char const*)>
c0020888:	83 c4 10             	add    esp,0x10
c002088b:	eb 13                	jmp    c00208a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002088d:	8d 76 00             	lea    esi,[esi+0x0]
c0020890:	83 ec 0c             	sub    esp,0xc
c0020893:	68 00 1f 02 c0       	push   0xc0021f00
c0020898:	e8 35 e5 fe ff       	call   c000edd2 <KePanic(char const*)>
c002089d:	83 c4 10             	add    esp,0x10
c00208a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00208a7:	8d 50 01             	lea    edx,[eax+0x1]
c00208aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208ae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00208b1:	90                   	nop
c00208b2:	83 c4 0c             	add    esp,0xc
c00208b5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00208b8 <ACPI::~ACPI()>:
c00208b8:	83 ec 0c             	sub    esp,0xc
c00208bb:	ba 6c 25 02 c0       	mov    edx,0xc002256c
c00208c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208c4:	89 10                	mov    DWORD PTR [eax],edx
c00208c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208ca:	83 ec 0c             	sub    esp,0xc
c00208cd:	50                   	push   eax
c00208ce:	e8 c1 86 fe ff       	call   c0008f94 <Device::~Device()>
c00208d3:	83 c4 10             	add    esp,0x10
c00208d6:	90                   	nop
c00208d7:	83 c4 0c             	add    esp,0xc
c00208da:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00208dc <ACPI::~ACPI()>:
c00208dc:	83 ec 0c             	sub    esp,0xc
c00208df:	83 ec 0c             	sub    esp,0xc
c00208e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208e6:	e8 cd ff ff ff       	call   c00208b8 <ACPI::~ACPI()>
c00208eb:	83 c4 10             	add    esp,0x10
c00208ee:	83 ec 08             	sub    esp,0x8
c00208f1:	68 64 12 00 00       	push   0x1264
c00208f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208fa:	e8 08 bf fe ff       	call   c000c807 <operator delete(void*, unsigned long)>
c00208ff:	83 c4 10             	add    esp,0x10
c0020902:	83 c4 0c             	add    esp,0xc
c0020905:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0020908 <LinkedList<Device>::~LinkedList()>:
c0020908:	90                   	nop
c0020909:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002090c <LinkedList<Device>::isEmpty()>:
c002090c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020910:	8b 00                	mov    eax,DWORD PTR [eax]
c0020912:	85 c0                	test   eax,eax
c0020914:	75 0e                	jne    c0020924 <LinkedList<Device>::isEmpty()+0x18>
c0020916:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002091a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002091d:	85 c0                	test   eax,eax
c002091f:	75 03                	jne    c0020924 <LinkedList<Device>::isEmpty()+0x18>
c0020921:	b0 01                	mov    al,0x1
c0020923:	c3                   	ret    
c0020924:	b0 00                	mov    al,0x0
c0020926:	90                   	nop
c0020927:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0020928 <LinkedList<Device>::getFirstElement()>:
c0020928:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002092c:	8b 00                	mov    eax,DWORD PTR [eax]
c002092e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0020930 <LinkedList<Device>::removeFirst()>:
c0020930:	83 ec 0c             	sub    esp,0xc
c0020933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020937:	8b 00                	mov    eax,DWORD PTR [eax]
c0020939:	85 c0                	test   eax,eax
c002093b:	75 17                	jne    c0020954 <LinkedList<Device>::removeFirst()+0x24>
c002093d:	83 ec 0c             	sub    esp,0xc
c0020940:	68 70 21 02 c0       	push   0xc0022170
c0020945:	e8 88 e4 fe ff       	call   c000edd2 <KePanic(char const*)>
c002094a:	83 c4 10             	add    esp,0x10
c002094d:	e9 92 00 00 00       	jmp    c00209e4 <LinkedList<Device>::removeFirst()+0xb4>
c0020952:	66 90                	xchg   ax,ax
c0020954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020958:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002095b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020961:	85 c0                	test   eax,eax
c0020963:	74 13                	je     c0020978 <LinkedList<Device>::removeFirst()+0x48>
c0020965:	83 ec 0c             	sub    esp,0xc
c0020968:	68 bb 21 02 c0       	push   0xc00221bb
c002096d:	e8 60 e4 fe ff       	call   c000edd2 <KePanic(char const*)>
c0020972:	83 c4 10             	add    esp,0x10
c0020975:	8d 76 00             	lea    esi,[esi+0x0]
c0020978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002097c:	8b 00                	mov    eax,DWORD PTR [eax]
c002097e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020984:	85 c0                	test   eax,eax
c0020986:	75 34                	jne    c00209bc <LinkedList<Device>::removeFirst()+0x8c>
c0020988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002098c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020996:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002099d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209a1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00209a4:	83 f8 01             	cmp    eax,0x1
c00209a7:	74 27                	je     c00209d0 <LinkedList<Device>::removeFirst()+0xa0>
c00209a9:	83 ec 0c             	sub    esp,0xc
c00209ac:	68 94 21 02 c0       	push   0xc0022194
c00209b1:	e8 1c e4 fe ff       	call   c000edd2 <KePanic(char const*)>
c00209b6:	83 c4 10             	add    esp,0x10
c00209b9:	eb 15                	jmp    c00209d0 <LinkedList<Device>::removeFirst()+0xa0>
c00209bb:	90                   	nop
c00209bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00209c2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00209c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209cc:	89 10                	mov    DWORD PTR [eax],edx
c00209ce:	66 90                	xchg   ax,ax
c00209d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00209d7:	8d 50 ff             	lea    edx,[eax-0x1]
c00209da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209de:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00209e1:	8d 76 00             	lea    esi,[esi+0x0]
c00209e4:	83 c4 0c             	add    esp,0xc
c00209e7:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00209e8 <Computer::~Computer()>:
c00209e8:	83 ec 0c             	sub    esp,0xc
c00209eb:	ba 0c 28 02 c0       	mov    edx,0xc002280c
c00209f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209f4:	89 10                	mov    DWORD PTR [eax],edx
c00209f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209fa:	83 ec 0c             	sub    esp,0xc
c00209fd:	50                   	push   eax
c00209fe:	e8 91 85 fe ff       	call   c0008f94 <Device::~Device()>
c0020a03:	83 c4 10             	add    esp,0x10
c0020a06:	90                   	nop
c0020a07:	83 c4 0c             	add    esp,0xc
c0020a0a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0020a0c <Computer::~Computer()>:
c0020a0c:	83 ec 0c             	sub    esp,0xc
c0020a0f:	83 ec 0c             	sub    esp,0xc
c0020a12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a16:	e8 cd ff ff ff       	call   c00209e8 <Computer::~Computer()>
c0020a1b:	83 c4 10             	add    esp,0x10
c0020a1e:	83 ec 08             	sub    esp,0x8
c0020a21:	68 6c 01 00 00       	push   0x16c
c0020a26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a2a:	e8 d8 bd fe ff       	call   c000c807 <operator delete(void*, unsigned long)>
c0020a2f:	83 c4 10             	add    esp,0x10
c0020a32:	83 c4 0c             	add    esp,0xc
c0020a35:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0020a36 <idleCommon()>:
c0020a36:	83 ec 0c             	sub    esp,0xc
c0020a39:	fa                   	cli    
c0020a3a:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0020a40:	e8 b3 4f ff ff       	call   c00159f8 <schedule()>
c0020a45:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0020a4c:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0020a53:	75 01                	jne    c0020a56 <idleCommon()+0x20>
c0020a55:	fb                   	sti    
c0020a56:	83 c4 0c             	add    esp,0xc
c0020a59:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0020a5a <LinkedList<UnixFile>::~LinkedList()>:
c0020a5a:	90                   	nop
c0020a5b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0020a5c <LinkedList<UnixFile>::LinkedList()>:
c0020a5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a60:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020a66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a6a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020a71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a75:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020a7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a80:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020a86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a8a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020a91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a95:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020a9c:	90                   	nop
c0020a9d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0020a9e <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0020a9e:	83 ec 0c             	sub    esp,0xc
c0020aa1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020aa6:	75 10                	jne    c0020ab8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0020aa8:	83 ec 0c             	sub    esp,0xc
c0020aab:	68 d4 1e 02 c0       	push   0xc0021ed4
c0020ab0:	e8 1d e3 fe ff       	call   c000edd2 <KePanic(char const*)>
c0020ab5:	83 c4 10             	add    esp,0x10
c0020ab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020abc:	8b 00                	mov    eax,DWORD PTR [eax]
c0020abe:	85 c0                	test   eax,eax
c0020ac0:	74 34                	je     c0020af6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0020ac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ac6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020ac9:	85 c0                	test   eax,eax
c0020acb:	74 29                	je     c0020af6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0020acd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ad1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020ad4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020ad8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020adb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020adf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020ae3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020ae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020aea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020aed:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020af4:	eb 65                	jmp    c0020b5b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0020af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020afa:	8b 00                	mov    eax,DWORD PTR [eax]
c0020afc:	85 c0                	test   eax,eax
c0020afe:	75 4b                	jne    c0020b4b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0020b00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020b07:	85 c0                	test   eax,eax
c0020b09:	75 40                	jne    c0020b4b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0020b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b0f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020b13:	89 10                	mov    DWORD PTR [eax],edx
c0020b15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b19:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020b1d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020b27:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b32:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020b35:	85 c0                	test   eax,eax
c0020b37:	74 22                	je     c0020b5b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0020b39:	83 ec 0c             	sub    esp,0xc
c0020b3c:	68 f6 1e 02 c0       	push   0xc0021ef6
c0020b41:	e8 8c e2 fe ff       	call   c000edd2 <KePanic(char const*)>
c0020b46:	83 c4 10             	add    esp,0x10
c0020b49:	eb 10                	jmp    c0020b5b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0020b4b:	83 ec 0c             	sub    esp,0xc
c0020b4e:	68 00 1f 02 c0       	push   0xc0021f00
c0020b53:	e8 7a e2 fe ff       	call   c000edd2 <KePanic(char const*)>
c0020b58:	83 c4 10             	add    esp,0x10
c0020b5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b5f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020b62:	8d 50 01             	lea    edx,[eax+0x1]
c0020b65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b69:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020b6c:	90                   	nop
c0020b6d:	83 c4 0c             	add    esp,0xc
c0020b70:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0020b72 <LinkedList<UnixFile>::getFirstElement()>:
c0020b72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020b76:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b78:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0020b7a <LinkedList<UnixFile>::removeFirst()>:
c0020b7a:	83 ec 0c             	sub    esp,0xc
c0020b7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b81:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b83:	85 c0                	test   eax,eax
c0020b85:	75 12                	jne    c0020b99 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0020b87:	83 ec 0c             	sub    esp,0xc
c0020b8a:	68 70 21 02 c0       	push   0xc0022170
c0020b8f:	e8 3e e2 fe ff       	call   c000edd2 <KePanic(char const*)>
c0020b94:	83 c4 10             	add    esp,0x10
c0020b97:	eb 7e                	jmp    c0020c17 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0020b99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b9d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020ba0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020ba3:	85 c0                	test   eax,eax
c0020ba5:	74 10                	je     c0020bb7 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0020ba7:	83 ec 0c             	sub    esp,0xc
c0020baa:	68 bb 21 02 c0       	push   0xc00221bb
c0020baf:	e8 1e e2 fe ff       	call   c000edd2 <KePanic(char const*)>
c0020bb4:	83 c4 10             	add    esp,0x10
c0020bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0020bbd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020bc0:	85 c0                	test   eax,eax
c0020bc2:	75 33                	jne    c0020bf7 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0020bc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bc8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020bce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bd2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020bd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bdd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020be0:	83 f8 01             	cmp    eax,0x1
c0020be3:	74 21                	je     c0020c06 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0020be5:	83 ec 0c             	sub    esp,0xc
c0020be8:	68 94 21 02 c0       	push   0xc0022194
c0020bed:	e8 e0 e1 fe ff       	call   c000edd2 <KePanic(char const*)>
c0020bf2:	83 c4 10             	add    esp,0x10
c0020bf5:	eb 0f                	jmp    c0020c06 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0020bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0020bfd:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0020c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c04:	89 10                	mov    DWORD PTR [eax],edx
c0020c06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c0a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020c0d:	8d 50 ff             	lea    edx,[eax-0x1]
c0020c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c14:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020c17:	83 c4 0c             	add    esp,0xc
c0020c1a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0020c1c <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0020c1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c20:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020c23:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0020c24 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0020c24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c28:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020c2b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0020c2c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0020c2c:	90                   	nop
c0020c2d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0020c30 <ThreadControlBlock::ThreadControlBlock()>:
c0020c30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020c34:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020c3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020c3f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0020c46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020c4a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020c51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020c55:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0020c5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020c60:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0020c67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020c6b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0020c6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020c73:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0020c77:	90                   	nop
c0020c78:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0020c7c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0020c7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020c80:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020c86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020c8a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020c91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020c95:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020c9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020ca0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020ca6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020caa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020cb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020cb5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020cbc:	90                   	nop
c0020cbd:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0020cbe <CPU::~CPU()>:
c0020cbe:	83 ec 0c             	sub    esp,0xc
c0020cc1:	ba 28 3e 02 c0       	mov    edx,0xc0023e28
c0020cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020cca:	89 10                	mov    DWORD PTR [eax],edx
c0020ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020cd0:	83 ec 0c             	sub    esp,0xc
c0020cd3:	50                   	push   eax
c0020cd4:	e8 bb 82 fe ff       	call   c0008f94 <Device::~Device()>
c0020cd9:	83 c4 10             	add    esp,0x10
c0020cdc:	90                   	nop
c0020cdd:	83 c4 0c             	add    esp,0xc
c0020ce0:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0020ce2 <CPU::~CPU()>:
c0020ce2:	83 ec 0c             	sub    esp,0xc
c0020ce5:	83 ec 0c             	sub    esp,0xc
c0020ce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020cec:	e8 cd ff ff ff       	call   c0020cbe <CPU::~CPU()>
c0020cf1:	83 c4 10             	add    esp,0x10
c0020cf4:	83 ec 08             	sub    esp,0x8
c0020cf7:	68 78 11 00 00       	push   0x1178
c0020cfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d00:	e8 02 bb fe ff       	call   c000c807 <operator delete(void*, unsigned long)>
c0020d05:	83 c4 10             	add    esp,0x10
c0020d08:	83 c4 0c             	add    esp,0xc
c0020d0b:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0020d0c <PCI::~PCI()>:
c0020d0c:	83 ec 0c             	sub    esp,0xc
c0020d0f:	ba 8c 43 02 c0       	mov    edx,0xc002438c
c0020d14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d18:	89 10                	mov    DWORD PTR [eax],edx
c0020d1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d1e:	83 ec 0c             	sub    esp,0xc
c0020d21:	50                   	push   eax
c0020d22:	e8 19 7c fe ff       	call   c0008940 <Bus::~Bus()>
c0020d27:	83 c4 10             	add    esp,0x10
c0020d2a:	90                   	nop
c0020d2b:	83 c4 0c             	add    esp,0xc
c0020d2e:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0020d30 <PCI::~PCI()>:
c0020d30:	83 ec 0c             	sub    esp,0xc
c0020d33:	83 ec 0c             	sub    esp,0xc
c0020d36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d3a:	e8 cd ff ff ff       	call   c0020d0c <PCI::~PCI()>
c0020d3f:	83 c4 10             	add    esp,0x10
c0020d42:	83 ec 08             	sub    esp,0x8
c0020d45:	68 5c 01 00 00       	push   0x15c
c0020d4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d4e:	e8 b4 ba fe ff       	call   c000c807 <operator delete(void*, unsigned long)>
c0020d53:	83 c4 10             	add    esp,0x10
c0020d56:	83 c4 0c             	add    esp,0xc
c0020d59:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0020d5a <IDE::~IDE()>:
c0020d5a:	83 ec 0c             	sub    esp,0xc
c0020d5d:	ba dc 44 02 c0       	mov    edx,0xc00244dc
c0020d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d66:	89 10                	mov    DWORD PTR [eax],edx
c0020d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d6c:	83 ec 0c             	sub    esp,0xc
c0020d6f:	50                   	push   eax
c0020d70:	e8 af 86 fe ff       	call   c0009424 <HardDiskController::~HardDiskController()>
c0020d75:	83 c4 10             	add    esp,0x10
c0020d78:	90                   	nop
c0020d79:	83 c4 0c             	add    esp,0xc
c0020d7c:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0020d7e <IDE::~IDE()>:
c0020d7e:	83 ec 0c             	sub    esp,0xc
c0020d81:	83 ec 0c             	sub    esp,0xc
c0020d84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d88:	e8 cd ff ff ff       	call   c0020d5a <IDE::~IDE()>
c0020d8d:	83 c4 10             	add    esp,0x10
c0020d90:	83 ec 08             	sub    esp,0x8
c0020d93:	68 70 02 00 00       	push   0x270
c0020d98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d9c:	e8 66 ba fe ff       	call   c000c807 <operator delete(void*, unsigned long)>
c0020da1:	83 c4 10             	add    esp,0x10
c0020da4:	83 c4 0c             	add    esp,0xc
c0020da7:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020da8 <SATABus::~SATABus()>:
c0020da8:	83 ec 0c             	sub    esp,0xc
c0020dab:	ba 2c 45 02 c0       	mov    edx,0xc002452c
c0020db0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020db4:	89 10                	mov    DWORD PTR [eax],edx
c0020db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020dba:	83 ec 0c             	sub    esp,0xc
c0020dbd:	50                   	push   eax
c0020dbe:	e8 61 86 fe ff       	call   c0009424 <HardDiskController::~HardDiskController()>
c0020dc3:	83 c4 10             	add    esp,0x10
c0020dc6:	90                   	nop
c0020dc7:	83 c4 0c             	add    esp,0xc
c0020dca:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0020dcc <SATABus::~SATABus()>:
c0020dcc:	83 ec 0c             	sub    esp,0xc
c0020dcf:	83 ec 0c             	sub    esp,0xc
c0020dd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020dd6:	e8 cd ff ff ff       	call   c0020da8 <SATABus::~SATABus()>
c0020ddb:	83 c4 10             	add    esp,0x10
c0020dde:	83 ec 08             	sub    esp,0x8
c0020de1:	68 64 01 00 00       	push   0x164
c0020de6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020dea:	e8 18 ba fe ff       	call   c000c807 <operator delete(void*, unsigned long)>
c0020def:	83 c4 10             	add    esp,0x10
c0020df2:	83 c4 0c             	add    esp,0xc
c0020df5:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0020df6 <ATA::~ATA()>:
c0020df6:	83 ec 0c             	sub    esp,0xc
c0020df9:	ba 14 46 02 c0       	mov    edx,0xc0024614
c0020dfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e02:	89 10                	mov    DWORD PTR [eax],edx
c0020e04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e08:	83 ec 0c             	sub    esp,0xc
c0020e0b:	50                   	push   eax
c0020e0c:	e8 f5 86 fe ff       	call   c0009506 <PhysicalDisk::~PhysicalDisk()>
c0020e11:	83 c4 10             	add    esp,0x10
c0020e14:	90                   	nop
c0020e15:	83 c4 0c             	add    esp,0xc
c0020e18:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0020e1a <ATA::~ATA()>:
c0020e1a:	83 ec 0c             	sub    esp,0xc
c0020e1d:	83 ec 0c             	sub    esp,0xc
c0020e20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e24:	e8 cd ff ff ff       	call   c0020df6 <ATA::~ATA()>
c0020e29:	83 c4 10             	add    esp,0x10
c0020e2c:	83 ec 08             	sub    esp,0x8
c0020e2f:	68 8c 01 00 00       	push   0x18c
c0020e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e38:	e8 ca b9 fe ff       	call   c000c807 <operator delete(void*, unsigned long)>
c0020e3d:	83 c4 10             	add    esp,0x10
c0020e40:	83 c4 0c             	add    esp,0xc
c0020e43:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0020e44 <ATAPI::~ATAPI()>:
c0020e44:	83 ec 0c             	sub    esp,0xc
c0020e47:	ba 5c 46 02 c0       	mov    edx,0xc002465c
c0020e4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e50:	89 10                	mov    DWORD PTR [eax],edx
c0020e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e56:	83 ec 0c             	sub    esp,0xc
c0020e59:	50                   	push   eax
c0020e5a:	e8 a7 86 fe ff       	call   c0009506 <PhysicalDisk::~PhysicalDisk()>
c0020e5f:	83 c4 10             	add    esp,0x10
c0020e62:	90                   	nop
c0020e63:	83 c4 0c             	add    esp,0xc
c0020e66:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020e68 <ATAPI::~ATAPI()>:
c0020e68:	83 ec 0c             	sub    esp,0xc
c0020e6b:	83 ec 0c             	sub    esp,0xc
c0020e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e72:	e8 cd ff ff ff       	call   c0020e44 <ATAPI::~ATAPI()>
c0020e77:	83 c4 10             	add    esp,0x10
c0020e7a:	83 ec 08             	sub    esp,0x8
c0020e7d:	68 84 01 00 00       	push   0x184
c0020e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e86:	e8 7c b9 fe ff       	call   c000c807 <operator delete(void*, unsigned long)>
c0020e8b:	83 c4 10             	add    esp,0x10
c0020e8e:	83 c4 0c             	add    esp,0xc
c0020e91:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0020e92 <SATA::~SATA()>:
c0020e92:	83 ec 0c             	sub    esp,0xc
c0020e95:	ba 1c 47 02 c0       	mov    edx,0xc002471c
c0020e9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e9e:	89 10                	mov    DWORD PTR [eax],edx
c0020ea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ea4:	83 ec 0c             	sub    esp,0xc
c0020ea7:	50                   	push   eax
c0020ea8:	e8 59 86 fe ff       	call   c0009506 <PhysicalDisk::~PhysicalDisk()>
c0020ead:	83 c4 10             	add    esp,0x10
c0020eb0:	90                   	nop
c0020eb1:	83 c4 0c             	add    esp,0xc
c0020eb4:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020eb6 <SATA::~SATA()>:
c0020eb6:	83 ec 0c             	sub    esp,0xc
c0020eb9:	83 ec 0c             	sub    esp,0xc
c0020ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020ec0:	e8 cd ff ff ff       	call   c0020e92 <SATA::~SATA()>
c0020ec5:	83 c4 10             	add    esp,0x10
c0020ec8:	83 ec 08             	sub    esp,0x8
c0020ecb:	68 7c 01 00 00       	push   0x17c
c0020ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020ed4:	e8 2e b9 fe ff       	call   c000c807 <operator delete(void*, unsigned long)>
c0020ed9:	83 c4 10             	add    esp,0x10
c0020edc:	83 c4 0c             	add    esp,0xc
c0020edf:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0020ee0 <SATAPI::~SATAPI()>:
c0020ee0:	83 ec 0c             	sub    esp,0xc
c0020ee3:	ba 40 48 02 c0       	mov    edx,0xc0024840
c0020ee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020eec:	89 10                	mov    DWORD PTR [eax],edx
c0020eee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ef2:	83 ec 0c             	sub    esp,0xc
c0020ef5:	50                   	push   eax
c0020ef6:	e8 0b 86 fe ff       	call   c0009506 <PhysicalDisk::~PhysicalDisk()>
c0020efb:	83 c4 10             	add    esp,0x10
c0020efe:	90                   	nop
c0020eff:	83 c4 0c             	add    esp,0xc
c0020f02:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0020f04 <SATAPI::~SATAPI()>:
c0020f04:	83 ec 0c             	sub    esp,0xc
c0020f07:	83 ec 0c             	sub    esp,0xc
c0020f0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f0e:	e8 cd ff ff ff       	call   c0020ee0 <SATAPI::~SATAPI()>
c0020f13:	83 c4 10             	add    esp,0x10
c0020f16:	83 ec 08             	sub    esp,0x8
c0020f19:	68 84 01 00 00       	push   0x184
c0020f1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f22:	e8 e0 b8 fe ff       	call   c000c807 <operator delete(void*, unsigned long)>
c0020f27:	83 c4 10             	add    esp,0x10
c0020f2a:	83 c4 0c             	add    esp,0xc
c0020f2d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020f2e <IOAPIC::~IOAPIC()>:
c0020f2e:	83 ec 0c             	sub    esp,0xc
c0020f31:	ba a0 48 02 c0       	mov    edx,0xc00248a0
c0020f36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f3a:	89 10                	mov    DWORD PTR [eax],edx
c0020f3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f40:	83 ec 0c             	sub    esp,0xc
c0020f43:	50                   	push   eax
c0020f44:	e8 4b 80 fe ff       	call   c0008f94 <Device::~Device()>
c0020f49:	83 c4 10             	add    esp,0x10
c0020f4c:	90                   	nop
c0020f4d:	83 c4 0c             	add    esp,0xc
c0020f50:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0020f52 <IOAPIC::~IOAPIC()>:
c0020f52:	83 ec 0c             	sub    esp,0xc
c0020f55:	83 ec 0c             	sub    esp,0xc
c0020f58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f5c:	e8 cd ff ff ff       	call   c0020f2e <IOAPIC::~IOAPIC()>
c0020f61:	83 c4 10             	add    esp,0x10
c0020f64:	83 ec 08             	sub    esp,0x8
c0020f67:	68 68 01 00 00       	push   0x168
c0020f6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f70:	e8 92 b8 fe ff       	call   c000c807 <operator delete(void*, unsigned long)>
c0020f75:	83 c4 10             	add    esp,0x10
c0020f78:	83 c4 0c             	add    esp,0xc
c0020f7b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020f7c <APICTimer::~APICTimer()>:
c0020f7c:	83 ec 0c             	sub    esp,0xc
c0020f7f:	ba e8 48 02 c0       	mov    edx,0xc00248e8
c0020f84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f88:	89 10                	mov    DWORD PTR [eax],edx
c0020f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f8e:	83 ec 0c             	sub    esp,0xc
c0020f91:	50                   	push   eax
c0020f92:	e8 3d 97 fe ff       	call   c000a6d4 <Timer::~Timer()>
c0020f97:	83 c4 10             	add    esp,0x10
c0020f9a:	90                   	nop
c0020f9b:	83 c4 0c             	add    esp,0xc
c0020f9e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0020fa0 <APICTimer::~APICTimer()>:
c0020fa0:	83 ec 0c             	sub    esp,0xc
c0020fa3:	83 ec 0c             	sub    esp,0xc
c0020fa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020faa:	e8 cd ff ff ff       	call   c0020f7c <APICTimer::~APICTimer()>
c0020faf:	83 c4 10             	add    esp,0x10
c0020fb2:	83 ec 08             	sub    esp,0x8
c0020fb5:	68 60 01 00 00       	push   0x160
c0020fba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020fbe:	e8 44 b8 fe ff       	call   c000c807 <operator delete(void*, unsigned long)>
c0020fc3:	83 c4 10             	add    esp,0x10
c0020fc6:	83 c4 0c             	add    esp,0xc
c0020fc9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020fcc <PIT::~PIT()>:
c0020fcc:	83 ec 0c             	sub    esp,0xc
c0020fcf:	ba 38 49 02 c0       	mov    edx,0xc0024938
c0020fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fd8:	89 10                	mov    DWORD PTR [eax],edx
c0020fda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fde:	83 ec 0c             	sub    esp,0xc
c0020fe1:	50                   	push   eax
c0020fe2:	e8 ed 96 fe ff       	call   c000a6d4 <Timer::~Timer()>
c0020fe7:	83 c4 10             	add    esp,0x10
c0020fea:	90                   	nop
c0020feb:	83 c4 0c             	add    esp,0xc
c0020fee:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0020ff0 <PIT::~PIT()>:
c0020ff0:	83 ec 0c             	sub    esp,0xc
c0020ff3:	83 ec 0c             	sub    esp,0xc
c0020ff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020ffa:	e8 cd ff ff ff       	call   c0020fcc <PIT::~PIT()>
c0020fff:	83 c4 10             	add    esp,0x10
c0021002:	83 ec 08             	sub    esp,0x8
c0021005:	68 5c 01 00 00       	push   0x15c
c002100a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002100e:	e8 f4 b7 fe ff       	call   c000c807 <operator delete(void*, unsigned long)>
c0021013:	83 c4 10             	add    esp,0x10
c0021016:	83 c4 0c             	add    esp,0xc
c0021019:	c3                   	ret    

Disassembly of section userkernel:

c0026000 <KiDefaultSignalHandlerAbort(int)>:
c0026000:	57                   	push   edi
c0026001:	b9 07 00 00 00       	mov    ecx,0x7
c0026006:	56                   	push   esi
c0026007:	be eb 2b 02 c0       	mov    esi,0xc0022beb
c002600c:	83 ec 24             	sub    esp,0x24
c002600f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0026013:	fc                   	cld    
c0026014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0026016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002601a:	50                   	push   eax
c002601b:	6a 00                	push   0x0
c002601d:	6a 38                	push   0x38
c002601f:	6a 01                	push   0x1
c0026021:	e8 2c 00 00 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0026026:	83 c4 34             	add    esp,0x34
c0026029:	5e                   	pop    esi
c002602a:	5f                   	pop    edi
c002602b:	c3                   	ret    

c002602c <KiDefaultSignalHandlerTerminate(int)>:
c002602c:	57                   	push   edi
c002602d:	b9 08 00 00 00       	mov    ecx,0x8
c0026032:	56                   	push   esi
c0026033:	be 07 2c 02 c0       	mov    esi,0xc0022c07
c0026038:	83 ec 24             	sub    esp,0x24
c002603b:	89 e7                	mov    edi,esp
c002603d:	fc                   	cld    
c002603e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0026040:	54                   	push   esp
c0026041:	6a 00                	push   0x0
c0026043:	6a 37                	push   0x37
c0026045:	6a 01                	push   0x1
c0026047:	e8 06 00 00 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002604c:	83 c4 34             	add    esp,0x34
c002604f:	5e                   	pop    esi
c0026050:	5f                   	pop    edi
c0026051:	c3                   	ret    

c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0026052:	53                   	push   ebx
c0026053:	83 ec 10             	sub    esp,0x10
c0026056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002605a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002605e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0026062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0026066:	cd 60                	int    0x60
c0026068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002606c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026078:	83 c4 10             	add    esp,0x10
c002607b:	5b                   	pop    ebx
c002607c:	c3                   	ret    

Disassembly of section align_previous:

c0027000 <DO_NOT_DELETE()>:
c0027000:	c3                   	ret    
