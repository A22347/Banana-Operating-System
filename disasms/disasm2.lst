
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 6b fe 00 00       	call   c000fe8b <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 20 c8 02 c0       	mov    eax,0xc002c820
c0000025:	3d 20 c8 02 c0       	cmp    eax,0xc002c820
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 20 c8 02 c0       	push   0xc002c820
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 20 c8 02 c0       	mov    eax,0xc002c820
c0000051:	2d 20 c8 02 c0       	sub    eax,0xc002c820
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 20 c8 02 c0       	push   0xc002c820
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e0c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 14 73 02 c0       	mov    ebx,0xc0027314
c0000097:	81 eb 10 73 02 c0    	sub    ebx,0xc0027310
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 10 73 02 c0       	mov    esi,0xc0027310
c00000a6:	a1 c4 e0 02 c0       	mov    eax,ds:0xc002e0c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 e0 02 c0       	mov    ds:0xc002e0c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 e0 02 c0       	mov    eax,ds:0xc002e0c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 20 c8 02 c0       	push   0xc002c820
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e0c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 e0 02 c0       	push   0xc002e0c8
c0000108:	68 20 c8 02 c0       	push   0xc002c820
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 ff 5f 01 00       	call   c00162ac <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 3d 44 01 00       	call   c0014702 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 dd 5f 01 00       	call   c00162ac <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 3e 65 01 00       	call   c001682c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 a1 6a 01 00       	call   c0016d98 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 18 21 03 c0 	lgdtd  ds:0xc0032118
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 16 f0 00 00       	jmp    c000f395 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 e0 02 c0       	mov    ds:0xc002e0e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 20 73 02 c0 02 	test   BYTE PTR [edx-0x3ffd8ce0],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 20 73 02 c0 01 	test   BYTE PTR [edx-0x3ffd8ce0],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 20 73 02 c0 08 	test   BYTE PTR [edx-0x3ffd8ce0],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 20 73 02 c0 08 	test   BYTE PTR [edx-0x3ffd8ce0],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 20 73 02 c0 04 	test   BYTE PTR [ecx-0x3ffd8ce0],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 20 73 02 c0 01 	test   BYTE PTR [edx-0x3ffd8ce0],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d8d:	85 c9                	test   ecx,ecx
c0000d8f:	0f 84 01 01 00 00    	je     c0000e96 <dlfree+0x110>
c0000d95:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d98:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d9b:	8b 1d 00 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c3                	cmp    ebx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 cb 03             	or     ebx,0x3
c0000db0:	89 1d 00 e1 02 c0    	mov    DWORD PTR ds:0xc002e100,ebx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 1c 85 04 e1 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd1efc]
c0000dc0:	89 19                	mov    DWORD PTR [ecx],ebx
c0000dc2:	89 14 85 04 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1efc],edx
c0000dc9:	e9 c8 00 00 00       	jmp    c0000e96 <dlfree+0x110>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 cb 01             	or     ebx,0x1
c0000ddd:	89 1d 00 e1 02 c0    	mov    DWORD PTR ds:0xc002e100,ebx
c0000de3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000de6:	83 e3 fc             	and    ebx,0xfffffffc
c0000de9:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000df2:	29 ca                	sub    edx,ecx
c0000df4:	01 c8                	add    eax,ecx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dfc:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dff:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e02:	39 35 2c e1 02 c0    	cmp    DWORD PTR ds:0xc002e12c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000e0e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000e11:	80 e1 01             	and    cl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 d8                	add    eax,ebx
c0000e1b:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000e1e:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000e21:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e24:	8b 0d 3c e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e13c
c0000e2a:	c7 42 0c 34 e1 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c e1 02 c0    	mov    DWORD PTR ds:0xc002e13c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 d8                	add    eax,ebx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c e1 02 c0    	mov    DWORD PTR ds:0xc002e12c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 35                	jbe    c0000e96 <dlfree+0x110>
c0000e61:	f6 05 00 e1 02 c0 02 	test   BYTE PTR ds:0xc002e100,0x2
c0000e68:	74 2c                	je     c0000e96 <dlfree+0x110>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e7a:	53                   	push   ebx
c0000e7b:	53                   	push   ebx
c0000e7c:	ff 0d 50 e4 02 c0    	dec    DWORD PTR ds:0xc002e450
c0000e82:	01 c8                	add    eax,ecx
c0000e84:	29 ca                	sub    edx,ecx
c0000e86:	50                   	push   eax
c0000e87:	52                   	push   edx
c0000e88:	29 05 64 e4 02 c0    	sub    DWORD PTR ds:0xc002e464,eax
c0000e8e:	e8 43 ec 00 00       	call   c000fad6 <munmap>
c0000e93:	83 c4 10             	add    esp,0x10
c0000e96:	5b                   	pop    ebx
c0000e97:	5e                   	pop    esi
c0000e98:	5f                   	pop    edi
c0000e99:	c3                   	ret    

c0000e9a <sYSMALLOc>:
c0000e9a:	55                   	push   ebp
c0000e9b:	57                   	push   edi
c0000e9c:	56                   	push   esi
c0000e9d:	53                   	push   ebx
c0000e9e:	89 d3                	mov    ebx,edx
c0000ea0:	83 ec 2c             	sub    esp,0x2c
c0000ea3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000ea7:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ead:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000eb0:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000eb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000eb7:	74 1f                	je     c0000ed8 <sYSMALLOc+0x3e>
c0000eb9:	89 d0                	mov    eax,edx
c0000ebb:	e8 df fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ec0:	83 ec 0c             	sub    esp,0xc
c0000ec3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ec7:	83 e8 07             	sub    eax,0x7
c0000eca:	50                   	push   eax
c0000ecb:	e8 78 03 00 00       	call   c0001248 <dlmalloc>
c0000ed0:	83 c4 10             	add    esp,0x10
c0000ed3:	e9 68 03 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0000ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000edc:	f7 d9                	neg    ecx
c0000ede:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000ee4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0000ee8:	0f 87 be 00 00 00    	ja     c0000fac <sYSMALLOc+0x112>
c0000eee:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ef4:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000efa:	0f 8d ac 00 00 00    	jge    c0000fac <sYSMALLOc+0x112>
c0000f00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000f08:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000f0c:	21 ce                	and    esi,ecx
c0000f0e:	39 fe                	cmp    esi,edi
c0000f10:	0f 86 96 00 00 00    	jbe    c0000fac <sYSMALLOc+0x112>
c0000f16:	52                   	push   edx
c0000f17:	52                   	push   edx
c0000f18:	6a 00                	push   0x0
c0000f1a:	6a ff                	push   0xffffffff
c0000f1c:	6a 0c                	push   0xc
c0000f1e:	6a 03                	push   0x3
c0000f20:	56                   	push   esi
c0000f21:	6a 00                	push   0x0
c0000f23:	e8 50 eb 00 00       	call   c000fa78 <mmap>
c0000f28:	83 c4 20             	add    esp,0x20
c0000f2b:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2e:	74 7c                	je     c0000fac <sYSMALLOc+0x112>
c0000f30:	89 c1                	mov    ecx,eax
c0000f32:	83 e1 07             	and    ecx,0x7
c0000f35:	74 13                	je     c0000f4a <sYSMALLOc+0xb0>
c0000f37:	ba 08 00 00 00       	mov    edx,0x8
c0000f3c:	89 f7                	mov    edi,esi
c0000f3e:	29 ca                	sub    edx,ecx
c0000f40:	01 d0                	add    eax,edx
c0000f42:	29 d7                	sub    edi,edx
c0000f44:	89 10                	mov    DWORD PTR [eax],edx
c0000f46:	89 fa                	mov    edx,edi
c0000f48:	eb 08                	jmp    c0000f52 <sYSMALLOc+0xb8>
c0000f4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f50:	89 f2                	mov    edx,esi
c0000f52:	83 ca 02             	or     edx,0x2
c0000f55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f58:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f5e:	8d 57 01             	lea    edx,[edi+0x1]
c0000f61:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f67:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f6d:	7e 06                	jle    c0000f75 <sYSMALLOc+0xdb>
c0000f6f:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f75:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f7b:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f81:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f87:	76 06                	jbe    c0000f8f <sYSMALLOc+0xf5>
c0000f89:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f8f:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f95:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f9b:	0f 83 41 01 00 00    	jae    c00010e2 <sYSMALLOc+0x248>
c0000fa1:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000fa7:	e9 36 01 00 00       	jmp    c00010e2 <sYSMALLOc+0x248>
c0000fac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000faf:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000fbc:	83 e0 fc             	and    eax,0xfffffffc
c0000fbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000fc7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fd3:	83 c0 10             	add    eax,0x10
c0000fd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000fda:	01 c5                	add    ebp,eax
c0000fdc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fe3:	74 04                	je     c0000fe9 <sYSMALLOc+0x14f>
c0000fe5:	2b 6c 24 04          	sub    ebp,DWORD PTR [esp+0x4]
c0000fe9:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c0000fed:	23 6c 24 14          	and    ebp,DWORD PTR [esp+0x14]
c0000ff1:	89 ee                	mov    esi,ebp
c0000ff3:	7f 19                	jg     c000100e <sYSMALLOc+0x174>
c0000ff5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ffc:	74 28                	je     c0001026 <sYSMALLOc+0x18c>
c0000ffe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001002:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001006:	01 ee                	add    esi,ebp
c0001008:	23 74 24 14          	and    esi,DWORD PTR [esp+0x14]
c000100c:	eb 18                	jmp    c0001026 <sYSMALLOc+0x18c>
c000100e:	83 ec 0c             	sub    esp,0xc
c0001011:	55                   	push   ebp
c0001012:	e8 2b ea 00 00       	call   c000fa42 <sbrk_thunk>
c0001017:	83 c4 10             	add    esp,0x10
c000101a:	89 c7                	mov    edi,eax
c000101c:	83 c8 ff             	or     eax,0xffffffff
c000101f:	83 ff ff             	cmp    edi,0xffffffff
c0001022:	75 42                	jne    c0001066 <sYSMALLOc+0x1cc>
c0001024:	eb cf                	jmp    c0000ff5 <sYSMALLOc+0x15b>
c0001026:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c000102c:	77 05                	ja     c0001033 <sYSMALLOc+0x199>
c000102e:	be 00 c0 00 00       	mov    esi,0xc000
c0001033:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0001037:	77 07                	ja     c0001040 <sYSMALLOc+0x1a6>
c0001039:	31 c0                	xor    eax,eax
c000103b:	e9 00 02 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0001040:	50                   	push   eax
c0001041:	50                   	push   eax
c0001042:	6a 00                	push   0x0
c0001044:	6a ff                	push   0xffffffff
c0001046:	6a 0c                	push   0xc
c0001048:	6a 03                	push   0x3
c000104a:	56                   	push   esi
c000104b:	6a 00                	push   0x0
c000104d:	e8 26 ea 00 00       	call   c000fa78 <mmap>
c0001052:	83 c4 20             	add    esp,0x20
c0001055:	83 f8 ff             	cmp    eax,0xffffffff
c0001058:	89 c7                	mov    edi,eax
c000105a:	74 dd                	je     c0001039 <sYSMALLOc+0x19f>
c000105c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001063:	8d 04 30             	lea    eax,[eax+esi*1]
c0001066:	8b 8b 68 03 00 00    	mov    ecx,DWORD PTR [ebx+0x368]
c000106c:	01 f1                	add    ecx,esi
c000106e:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001072:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001078:	75 70                	jne    c00010ea <sYSMALLOc+0x250>
c000107a:	83 f8 ff             	cmp    eax,0xffffffff
c000107d:	75 6b                	jne    c00010ea <sYSMALLOc+0x250>
c000107f:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001083:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001087:	83 ce 01             	or     esi,0x1
c000108a:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c000108d:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001093:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001099:	73 06                	jae    c00010a1 <sYSMALLOc+0x207>
c000109b:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a1:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a7:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010ad:	73 06                	jae    c00010b5 <sYSMALLOc+0x21b>
c00010af:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bb:	83 e2 fc             	and    edx,0xfffffffc
c00010be:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
c00010c2:	0f 87 71 ff ff ff    	ja     c0001039 <sYSMALLOc+0x19f>
c00010c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010cc:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010cf:	29 fa                	sub    edx,edi
c00010d1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d4:	89 fb                	mov    ebx,edi
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	83 cb 01             	or     ebx,0x1
c00010dc:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e2:	83 c0 08             	add    eax,0x8
c00010e5:	e9 56 01 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c00010ea:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010f0:	f6 c2 01             	test   dl,0x1
c00010f3:	74 1e                	je     c0001113 <sYSMALLOc+0x279>
c00010f5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010fa:	0f 84 bb 00 00 00    	je     c00011bb <sYSMALLOc+0x321>
c0001100:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001104:	0f 86 b1 00 00 00    	jbe    c00011bb <sYSMALLOc+0x321>
c000110a:	83 e2 fe             	and    edx,0xfffffffe
c000110d:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001113:	83 f8 ff             	cmp    eax,0xffffffff
c0001116:	89 fd                	mov    ebp,edi
c0001118:	75 24                	jne    c000113e <sYSMALLOc+0x2a4>
c000111a:	83 ec 0c             	sub    esp,0xc
c000111d:	89 fd                	mov    ebp,edi
c000111f:	6a 00                	push   0x0
c0001121:	e8 1c e9 00 00       	call   c000fa42 <sbrk_thunk>
c0001126:	83 c4 10             	add    esp,0x10
c0001129:	89 c2                	mov    edx,eax
c000112b:	29 fa                	sub    edx,edi
c000112d:	29 f2                	sub    edx,esi
c000112f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001135:	83 f8 ff             	cmp    eax,0xffffffff
c0001138:	0f 84 4f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000113e:	31 c9                	xor    ecx,ecx
c0001140:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001143:	29 e8                	sub    eax,ebp
c0001145:	01 c8                	add    eax,ecx
c0001147:	83 c8 01             	or     eax,0x1
c000114a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000114d:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0001153:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001158:	0f 84 2f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000115e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0001162:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001166:	83 ee 0c             	sub    esi,0xc
c0001169:	83 e6 f8             	and    esi,0xfffffff8
c000116c:	89 f0                	mov    eax,esi
c000116e:	83 c8 01             	or     eax,0x1
c0001171:	83 fe 0f             	cmp    esi,0xf
c0001174:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001177:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c000117f:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c0001187:	0f 86 00 ff ff ff    	jbe    c000108d <sYSMALLOc+0x1f3>
c000118d:	83 ec 0c             	sub    esp,0xc
c0001190:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001196:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00011a4:	83 c0 08             	add    eax,0x8
c00011a7:	50                   	push   eax
c00011a8:	e8 d9 fb ff ff       	call   c0000d86 <dlfree>
c00011ad:	83 c4 10             	add    esp,0x10
c00011b0:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00011b6:	e9 d2 fe ff ff       	jmp    c000108d <sYSMALLOc+0x1f3>
c00011bb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00011c0:	74 0e                	je     c00011d0 <sYSMALLOc+0x336>
c00011c2:	89 f8                	mov    eax,edi
c00011c4:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00011c8:	01 c1                	add    ecx,eax
c00011ca:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c00011d0:	89 fa                	mov    edx,edi
c00011d2:	83 e2 07             	and    edx,0x7
c00011d5:	74 0c                	je     c00011e3 <sYSMALLOc+0x349>
c00011d7:	b8 08 00 00 00       	mov    eax,0x8
c00011dc:	29 d0                	sub    eax,edx
c00011de:	8d 2c 07             	lea    ebp,[edi+eax*1]
c00011e1:	eb 04                	jmp    c00011e7 <sYSMALLOc+0x34d>
c00011e3:	89 fd                	mov    ebp,edi
c00011e5:	31 c0                	xor    eax,eax
c00011e7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00011eb:	83 ec 0c             	sub    esp,0xc
c00011ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00011f2:	8d 14 06             	lea    edx,[esi+eax*1]
c00011f5:	01 fa                	add    edx,edi
c00011f7:	01 d1                	add    ecx,edx
c00011f9:	29 d0                	sub    eax,edx
c00011fb:	23 4c 24 20          	and    ecx,DWORD PTR [esp+0x20]
c00011ff:	01 c1                	add    ecx,eax
c0001201:	51                   	push   ecx
c0001202:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0001206:	e8 37 e8 00 00       	call   c000fa42 <sbrk_thunk>
c000120b:	83 c4 10             	add    esp,0x10
c000120e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001212:	83 f8 ff             	cmp    eax,0xffffffff
c0001215:	75 12                	jne    c0001229 <sYSMALLOc+0x38f>
c0001217:	83 ec 0c             	sub    esp,0xc
c000121a:	6a 00                	push   0x0
c000121c:	e8 21 e8 00 00       	call   c000fa42 <sbrk_thunk>
c0001221:	83 c4 10             	add    esp,0x10
c0001224:	e9 0c ff ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001229:	39 f8                	cmp    eax,edi
c000122b:	0f 83 0f ff ff ff    	jae    c0001140 <sYSMALLOc+0x2a6>
c0001231:	8d 04 37             	lea    eax,[edi+esi*1]
c0001234:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000123b:	e9 f5 fe ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001240:	83 c4 2c             	add    esp,0x2c
c0001243:	5b                   	pop    ebx
c0001244:	5e                   	pop    esi
c0001245:	5f                   	pop    edi
c0001246:	5d                   	pop    ebp
c0001247:	c3                   	ret    

c0001248 <dlmalloc>:
c0001248:	55                   	push   ebp
c0001249:	57                   	push   edi
c000124a:	56                   	push   esi
c000124b:	53                   	push   ebx
c000124c:	83 ec 1c             	sub    esp,0x1c
c000124f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001253:	83 f8 df             	cmp    eax,0xffffffdf
c0001256:	0f 87 70 03 00 00    	ja     c00015cc <dlmalloc+0x384>
c000125c:	83 c0 0b             	add    eax,0xb
c000125f:	be 10 00 00 00       	mov    esi,0x10
c0001264:	83 f8 0f             	cmp    eax,0xf
c0001267:	76 05                	jbe    c000126e <dlmalloc+0x26>
c0001269:	83 e0 f8             	and    eax,0xfffffff8
c000126c:	89 c6                	mov    esi,eax
c000126e:	8b 3d 00 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e100
c0001274:	f7 c7 01 00 00 00    	test   edi,0x1
c000127a:	75 17                	jne    c0001293 <dlmalloc+0x4b>
c000127c:	85 ff                	test   edi,edi
c000127e:	0f 85 05 03 00 00    	jne    c0001589 <dlmalloc+0x341>
c0001284:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c0001289:	e8 11 fa ff ff       	call   c0000c9f <malloc_consolidate>
c000128e:	e9 f6 02 00 00       	jmp    c0001589 <dlmalloc+0x341>
c0001293:	39 f7                	cmp    edi,esi
c0001295:	72 1f                	jb     c00012b6 <dlmalloc+0x6e>
c0001297:	89 f2                	mov    edx,esi
c0001299:	c1 ea 03             	shr    edx,0x3
c000129c:	83 ea 02             	sub    edx,0x2
c000129f:	8b 04 95 04 e1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1efc]
c00012a6:	85 c0                	test   eax,eax
c00012a8:	74 0c                	je     c00012b6 <dlmalloc+0x6e>
c00012aa:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00012ad:	89 0c 95 04 e1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1efc],ecx
c00012b4:	eb 30                	jmp    c00012e6 <dlmalloc+0x9e>
c00012b6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012bc:	89 f0                	mov    eax,esi
c00012be:	77 2e                	ja     c00012ee <dlmalloc+0xa6>
c00012c0:	c1 e8 03             	shr    eax,0x3
c00012c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012c7:	8d 14 c5 34 e1 02 c0 	lea    edx,[eax*8-0x3ffd1ecc]
c00012ce:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012d1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012d4:	39 c3                	cmp    ebx,eax
c00012d6:	74 2e                	je     c0001306 <dlmalloc+0xbe>
c00012d8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012db:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012e0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012e3:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012e6:	83 c0 08             	add    eax,0x8
c00012e9:	e9 e0 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00012ee:	e8 28 f9 ff ff       	call   c0000c1b <largebin_index>
c00012f3:	83 e7 02             	and    edi,0x2
c00012f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012fa:	74 0a                	je     c0001306 <dlmalloc+0xbe>
c00012fc:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c0001301:	e8 99 f9 ff ff       	call   c0000c9f <malloc_consolidate>
c0001306:	8d 46 10             	lea    eax,[esi+0x10]
c0001309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000130d:	8b 1d 40 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e140
c0001313:	81 fb 34 e1 02 c0    	cmp    ebx,0xc002e134
c0001319:	0f 84 13 01 00 00    	je     c0001432 <dlmalloc+0x1ea>
c000131f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001322:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001325:	83 e7 fc             	and    edi,0xfffffffc
c0001328:	81 fe ff 00 00 00    	cmp    esi,0xff
c000132e:	77 4c                	ja     c000137c <dlmalloc+0x134>
c0001330:	3d 34 e1 02 c0       	cmp    eax,0xc002e134
c0001335:	75 45                	jne    c000137c <dlmalloc+0x134>
c0001337:	39 1d 30 e1 02 c0    	cmp    DWORD PTR ds:0xc002e130,ebx
c000133d:	75 3d                	jne    c000137c <dlmalloc+0x134>
c000133f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001343:	73 37                	jae    c000137c <dlmalloc+0x134>
c0001345:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001348:	89 fa                	mov    edx,edi
c000134a:	a3 3c e1 02 c0       	mov    ds:0xc002e13c,eax
c000134f:	29 f2                	sub    edx,esi
c0001351:	83 ce 01             	or     esi,0x1
c0001354:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c0001359:	89 d1                	mov    ecx,edx
c000135b:	a3 30 e1 02 c0       	mov    ds:0xc002e130,eax
c0001360:	83 c9 01             	or     ecx,0x1
c0001363:	c7 40 08 34 e1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e134
c000136a:	c7 40 0c 34 e1 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e134
c0001371:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001374:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001377:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000137a:	eb 15                	jmp    c0001391 <dlmalloc+0x149>
c000137c:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c0001381:	39 fe                	cmp    esi,edi
c0001383:	c7 40 08 34 e1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e134
c000138a:	75 0d                	jne    c0001399 <dlmalloc+0x151>
c000138c:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001391:	8d 43 08             	lea    eax,[ebx+0x8]
c0001394:	e9 35 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c0001399:	81 ff ff 00 00 00    	cmp    edi,0xff
c000139f:	89 f8                	mov    eax,edi
c00013a1:	77 19                	ja     c00013bc <dlmalloc+0x174>
c00013a3:	c1 e8 03             	shr    eax,0x3
c00013a6:	8d 14 00             	lea    edx,[eax+eax*1]
c00013a9:	83 c2 0d             	add    edx,0xd
c00013ac:	8d 2c 95 f8 e0 02 c0 	lea    ebp,[edx*4-0x3ffd1f08]
c00013b3:	8b 14 95 00 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f00]
c00013ba:	eb 46                	jmp    c0001402 <dlmalloc+0x1ba>
c00013bc:	e8 5a f8 ff ff       	call   c0000c1b <largebin_index>
c00013c1:	8d 14 00             	lea    edx,[eax+eax*1]
c00013c4:	83 c2 0d             	add    edx,0xd
c00013c7:	8d 0c 95 00 e1 02 c0 	lea    ecx,[edx*4-0x3ffd1f00]
c00013ce:	8b 14 95 00 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f00]
c00013d5:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013d8:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013dc:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013e0:	89 d5                	mov    ebp,edx
c00013e2:	74 1e                	je     c0001402 <dlmalloc+0x1ba>
c00013e4:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013e7:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013ea:	77 12                	ja     c00013fe <dlmalloc+0x1b6>
c00013ec:	83 cf 01             	or     edi,0x1
c00013ef:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013f2:	76 05                	jbe    c00013f9 <dlmalloc+0x1b1>
c00013f4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013f7:	eb f6                	jmp    c00013ef <dlmalloc+0x1a7>
c00013f9:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013fc:	eb 04                	jmp    c0001402 <dlmalloc+0x1ba>
c00013fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001402:	89 c7                	mov    edi,eax
c0001404:	88 c1                	mov    cl,al
c0001406:	c1 ff 05             	sar    edi,0x5
c0001409:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000140d:	bf 01 00 00 00       	mov    edi,0x1
c0001412:	d3 e7                	shl    edi,cl
c0001414:	89 f8                	mov    eax,edi
c0001416:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000141a:	09 04 bd 34 e4 02 c0 	or     DWORD PTR [edi*4-0x3ffd1bcc],eax
c0001421:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001424:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001427:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000142a:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000142d:	e9 db fe ff ff       	jmp    c000130d <dlmalloc+0xc5>
c0001432:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001438:	76 78                	jbe    c00014b2 <dlmalloc+0x26a>
c000143a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000143e:	8d 04 c5 34 e1 02 c0 	lea    eax,[eax*8-0x3ffd1ecc]
c0001445:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001448:	8d 48 f8             	lea    ecx,[eax-0x8]
c000144b:	39 ca                	cmp    edx,ecx
c000144d:	74 63                	je     c00014b2 <dlmalloc+0x26a>
c000144f:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001452:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001455:	83 e3 fc             	and    ebx,0xfffffffc
c0001458:	39 de                	cmp    esi,ebx
c000145a:	77 52                	ja     c00014ae <dlmalloc+0x266>
c000145c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000145f:	89 df                	mov    edi,ebx
c0001461:	01 d3                	add    ebx,edx
c0001463:	29 f7                	sub    edi,esi
c0001465:	83 ff 0f             	cmp    edi,0xf
c0001468:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000146b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000146e:	8d 42 08             	lea    eax,[edx+0x8]
c0001471:	77 09                	ja     c000147c <dlmalloc+0x234>
c0001473:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001477:	e9 52 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000147c:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000147f:	83 ce 01             	or     esi,0x1
c0001482:	89 0d 3c e1 02 c0    	mov    DWORD PTR ds:0xc002e13c,ecx
c0001488:	89 0d 40 e1 02 c0    	mov    DWORD PTR ds:0xc002e140,ecx
c000148e:	c7 41 08 34 e1 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e134
c0001495:	c7 41 0c 34 e1 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e134
c000149c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000149f:	89 fa                	mov    edx,edi
c00014a1:	83 ca 01             	or     edx,0x1
c00014a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014a7:	89 3b                	mov    DWORD PTR [ebx],edi
c00014a9:	e9 20 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00014ae:	89 c2                	mov    edx,eax
c00014b0:	eb 99                	jmp    c000144b <dlmalloc+0x203>
c00014b2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00014b6:	b8 01 00 00 00       	mov    eax,0x1
c00014bb:	41                   	inc    ecx
c00014bc:	8d 14 cd 2c e1 02 c0 	lea    edx,[ecx*8-0x3ffd1ed4]
c00014c3:	89 cb                	mov    ebx,ecx
c00014c5:	c1 eb 05             	shr    ebx,0x5
c00014c8:	8b 3c 9d 34 e4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1bcc]
c00014cf:	d3 e0                	shl    eax,cl
c00014d1:	39 f8                	cmp    eax,edi
c00014d3:	77 04                	ja     c00014d9 <dlmalloc+0x291>
c00014d5:	85 c0                	test   eax,eax
c00014d7:	75 26                	jne    c00014ff <dlmalloc+0x2b7>
c00014d9:	43                   	inc    ebx
c00014da:	83 fb 02             	cmp    ebx,0x2
c00014dd:	0f 87 a6 00 00 00    	ja     c0001589 <dlmalloc+0x341>
c00014e3:	8b 3c 9d 34 e4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1bcc]
c00014ea:	85 ff                	test   edi,edi
c00014ec:	74 eb                	je     c00014d9 <dlmalloc+0x291>
c00014ee:	89 d8                	mov    eax,ebx
c00014f0:	c1 e0 06             	shl    eax,0x6
c00014f3:	8d 14 85 2c e1 02 c0 	lea    edx,[eax*4-0x3ffd1ed4]
c00014fa:	b8 01 00 00 00       	mov    eax,0x1
c00014ff:	85 f8                	test   eax,edi
c0001501:	75 07                	jne    c000150a <dlmalloc+0x2c2>
c0001503:	83 c2 08             	add    edx,0x8
c0001506:	01 c0                	add    eax,eax
c0001508:	eb f5                	jmp    c00014ff <dlmalloc+0x2b7>
c000150a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000150d:	39 ca                	cmp    edx,ecx
c000150f:	75 14                	jne    c0001525 <dlmalloc+0x2dd>
c0001511:	89 c1                	mov    ecx,eax
c0001513:	83 c2 08             	add    edx,0x8
c0001516:	f7 d1                	not    ecx
c0001518:	01 c0                	add    eax,eax
c000151a:	21 cf                	and    edi,ecx
c000151c:	89 3c 9d 34 e4 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1bcc],edi
c0001523:	eb ac                	jmp    c00014d1 <dlmalloc+0x289>
c0001525:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001528:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000152b:	83 e0 fc             	and    eax,0xfffffffc
c000152e:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001531:	89 c3                	mov    ebx,eax
c0001533:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001536:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001539:	29 f3                	sub    ebx,esi
c000153b:	8d 41 08             	lea    eax,[ecx+0x8]
c000153e:	83 fb 0f             	cmp    ebx,0xf
c0001541:	77 09                	ja     c000154c <dlmalloc+0x304>
c0001543:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001547:	e9 82 00 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000154c:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000154f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001555:	89 3d 3c e1 02 c0    	mov    DWORD PTR ds:0xc002e13c,edi
c000155b:	89 3d 40 e1 02 c0    	mov    DWORD PTR ds:0xc002e140,edi
c0001561:	c7 47 08 34 e1 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e134
c0001568:	c7 47 0c 34 e1 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e134
c000156f:	77 06                	ja     c0001577 <dlmalloc+0x32f>
c0001571:	89 3d 30 e1 02 c0    	mov    DWORD PTR ds:0xc002e130,edi
c0001577:	83 ce 01             	or     esi,0x1
c000157a:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000157d:	89 d9                	mov    ecx,ebx
c000157f:	83 c9 01             	or     ecx,0x1
c0001582:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001585:	89 1a                	mov    DWORD PTR [edx],ebx
c0001587:	eb 45                	jmp    c00015ce <dlmalloc+0x386>
c0001589:	a1 2c e1 02 c0       	mov    eax,ds:0xc002e12c
c000158e:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001591:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001594:	83 e2 fc             	and    edx,0xfffffffc
c0001597:	39 d1                	cmp    ecx,edx
c0001599:	77 1e                	ja     c00015b9 <dlmalloc+0x371>
c000159b:	89 f3                	mov    ebx,esi
c000159d:	29 f2                	sub    edx,esi
c000159f:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00015a2:	83 cb 01             	or     ebx,0x1
c00015a5:	89 0d 2c e1 02 c0    	mov    DWORD PTR ds:0xc002e12c,ecx
c00015ab:	83 ca 01             	or     edx,0x1
c00015ae:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015b1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00015b4:	e9 2d fd ff ff       	jmp    c00012e6 <dlmalloc+0x9e>
c00015b9:	83 c4 1c             	add    esp,0x1c
c00015bc:	89 f0                	mov    eax,esi
c00015be:	5b                   	pop    ebx
c00015bf:	ba 00 e1 02 c0       	mov    edx,0xc002e100
c00015c4:	5e                   	pop    esi
c00015c5:	5f                   	pop    edi
c00015c6:	5d                   	pop    ebp
c00015c7:	e9 ce f8 ff ff       	jmp    c0000e9a <sYSMALLOc>
c00015cc:	31 c0                	xor    eax,eax
c00015ce:	83 c4 1c             	add    esp,0x1c
c00015d1:	5b                   	pop    ebx
c00015d2:	5e                   	pop    esi
c00015d3:	5f                   	pop    edi
c00015d4:	5d                   	pop    ebp
c00015d5:	c3                   	ret    

c00015d6 <iALLOc>:
c00015d6:	55                   	push   ebp
c00015d7:	89 c5                	mov    ebp,eax
c00015d9:	57                   	push   edi
c00015da:	56                   	push   esi
c00015db:	53                   	push   ebx
c00015dc:	83 ec 2c             	sub    esp,0x2c
c00015df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015e7:	83 3d 00 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e100,0x0
c00015ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015f2:	75 12                	jne    c0001606 <iALLOc+0x30>
c00015f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015f8:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c00015fd:	e8 9d f6 ff ff       	call   c0000c9f <malloc_consolidate>
c0001602:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001606:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000160b:	74 12                	je     c000161f <iALLOc+0x49>
c000160d:	85 ed                	test   ebp,ebp
c000160f:	0f 84 64 01 00 00    	je     c0001779 <iALLOc+0x1a3>
c0001615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000161d:	eb 33                	jmp    c0001652 <iALLOc+0x7c>
c000161f:	85 ed                	test   ebp,ebp
c0001621:	75 14                	jne    c0001637 <iALLOc+0x61>
c0001623:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000162b:	83 c4 2c             	add    esp,0x2c
c000162e:	5b                   	pop    ebx
c000162f:	5e                   	pop    esi
c0001630:	5f                   	pop    edi
c0001631:	5d                   	pop    ebp
c0001632:	e9 11 fc ff ff       	jmp    c0001248 <dlmalloc>
c0001637:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000163f:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001646:	83 f8 0f             	cmp    eax,0xf
c0001649:	76 07                	jbe    c0001652 <iALLOc+0x7c>
c000164b:	83 e0 f8             	and    eax,0xfffffff8
c000164e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001652:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001657:	75 09                	jne    c0001662 <iALLOc+0x8c>
c0001659:	89 d0                	mov    eax,edx
c000165b:	31 f6                	xor    esi,esi
c000165d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001660:	eb 3b                	jmp    c000169d <iALLOc+0xc7>
c0001662:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000166a:	8b 02                	mov    eax,DWORD PTR [edx]
c000166c:	83 c0 0b             	add    eax,0xb
c000166f:	83 f8 0f             	cmp    eax,0xf
c0001672:	76 07                	jbe    c000167b <iALLOc+0xa5>
c0001674:	83 e0 f8             	and    eax,0xfffffff8
c0001677:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000167b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000167f:	0f af f5             	imul   esi,ebp
c0001682:	eb 25                	jmp    c00016a9 <iALLOc+0xd3>
c0001684:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001686:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001689:	bb 10 00 00 00       	mov    ebx,0x10
c000168e:	83 f9 0f             	cmp    ecx,0xf
c0001691:	76 05                	jbe    c0001698 <iALLOc+0xc2>
c0001693:	83 e1 f8             	and    ecx,0xfffffff8
c0001696:	89 cb                	mov    ebx,ecx
c0001698:	01 de                	add    esi,ebx
c000169a:	83 c0 04             	add    eax,0x4
c000169d:	39 c7                	cmp    edi,eax
c000169f:	75 e3                	jne    c0001684 <iALLOc+0xae>
c00016a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00016a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00016ad:	83 ec 0c             	sub    esp,0xc
c00016b0:	8b 1d 54 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e454
c00016b6:	c7 05 54 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e454,0x0
c00016c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016c4:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00016c8:	50                   	push   eax
c00016c9:	e8 7a fb ff ff       	call   c0001248 <dlmalloc>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	89 1d 54 e4 02 c0    	mov    DWORD PTR ds:0xc002e454,ebx
c00016d7:	85 c0                	test   eax,eax
c00016d9:	0f 84 92 00 00 00    	je     c0001771 <iALLOc+0x19b>
c00016df:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016e2:	8d 78 f8             	lea    edi,[eax-0x8]
c00016e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016e9:	83 e3 fc             	and    ebx,0xfffffffc
c00016ec:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016f1:	74 1e                	je     c0001711 <iALLOc+0x13b>
c00016f3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016f7:	89 d9                	mov    ecx,ebx
c00016f9:	52                   	push   edx
c00016fa:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016fe:	83 e9 04             	sub    ecx,0x4
c0001701:	51                   	push   ecx
c0001702:	6a 00                	push   0x0
c0001704:	50                   	push   eax
c0001705:	e8 e6 ed ff ff       	call   c00004f0 <memset>
c000170a:	83 c4 10             	add    esp,0x10
c000170d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001711:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001716:	75 14                	jne    c000172c <iALLOc+0x156>
c0001718:	8d 04 37             	lea    eax,[edi+esi*1]
c000171b:	29 f3                	sub    ebx,esi
c000171d:	8d 48 08             	lea    ecx,[eax+0x8]
c0001720:	83 cb 01             	or     ebx,0x1
c0001723:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001726:	89 f3                	mov    ebx,esi
c0001728:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000172c:	31 c0                	xor    eax,eax
c000172e:	4d                   	dec    ebp
c000172f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001733:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001736:	39 c5                	cmp    ebp,eax
c0001738:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000173b:	74 2c                	je     c0001769 <iALLOc+0x193>
c000173d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001741:	85 c9                	test   ecx,ecx
c0001743:	75 15                	jne    c000175a <iALLOc+0x184>
c0001745:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001748:	8d 71 0b             	lea    esi,[ecx+0xb]
c000174b:	b9 10 00 00 00       	mov    ecx,0x10
c0001750:	83 fe 0f             	cmp    esi,0xf
c0001753:	76 05                	jbe    c000175a <iALLOc+0x184>
c0001755:	83 e6 f8             	and    esi,0xfffffff8
c0001758:	89 f1                	mov    ecx,esi
c000175a:	89 ce                	mov    esi,ecx
c000175c:	29 cb                	sub    ebx,ecx
c000175e:	83 ce 01             	or     esi,0x1
c0001761:	40                   	inc    eax
c0001762:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001765:	01 cf                	add    edi,ecx
c0001767:	eb c6                	jmp    c000172f <iALLOc+0x159>
c0001769:	83 cb 01             	or     ebx,0x1
c000176c:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000176f:	eb 08                	jmp    c0001779 <iALLOc+0x1a3>
c0001771:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001779:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177d:	83 c4 2c             	add    esp,0x2c
c0001780:	5b                   	pop    ebx
c0001781:	5e                   	pop    esi
c0001782:	5f                   	pop    edi
c0001783:	5d                   	pop    ebp
c0001784:	c3                   	ret    

c0001785 <dlrealloc>:
c0001785:	55                   	push   ebp
c0001786:	57                   	push   edi
c0001787:	56                   	push   esi
c0001788:	53                   	push   ebx
c0001789:	83 ec 1c             	sub    esp,0x1c
c000178c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001790:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001794:	85 db                	test   ebx,ebx
c0001796:	75 10                	jne    c00017a8 <dlrealloc+0x23>
c0001798:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000179c:	83 c4 1c             	add    esp,0x1c
c000179f:	5b                   	pop    ebx
c00017a0:	5e                   	pop    esi
c00017a1:	5f                   	pop    edi
c00017a2:	5d                   	pop    ebp
c00017a3:	e9 a0 fa ff ff       	jmp    c0001248 <dlmalloc>
c00017a8:	83 f8 df             	cmp    eax,0xffffffdf
c00017ab:	0f 87 a6 01 00 00    	ja     c0001957 <dlrealloc+0x1d2>
c00017b1:	83 c0 0b             	add    eax,0xb
c00017b4:	bd 10 00 00 00       	mov    ebp,0x10
c00017b9:	83 f8 0f             	cmp    eax,0xf
c00017bc:	76 05                	jbe    c00017c3 <dlrealloc+0x3e>
c00017be:	83 e0 f8             	and    eax,0xfffffff8
c00017c1:	89 c5                	mov    ebp,eax
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	89 ce                	mov    esi,ecx
c00017c8:	83 e6 fc             	and    esi,0xfffffffc
c00017cb:	f6 c1 02             	test   cl,0x2
c00017ce:	0f 85 4e 01 00 00    	jne    c0001922 <dlrealloc+0x19d>
c00017d4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017d7:	39 f5                	cmp    ebp,esi
c00017d9:	0f 86 04 01 00 00    	jbe    c00018e3 <dlrealloc+0x15e>
c00017df:	8d 14 37             	lea    edx,[edi+esi*1]
c00017e2:	39 15 2c e1 02 c0    	cmp    DWORD PTR ds:0xc002e12c,edx
c00017e8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00017eb:	75 33                	jne    c0001820 <dlrealloc+0x9b>
c00017ed:	83 e0 fc             	and    eax,0xfffffffc
c00017f0:	01 f0                	add    eax,esi
c00017f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017f6:	8d 45 10             	lea    eax,[ebp+0x10]
c00017f9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00017fd:	77 49                	ja     c0001848 <dlrealloc+0xc3>
c00017ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001803:	83 e1 01             	and    ecx,0x1
c0001806:	01 ef                	add    edi,ebp
c0001808:	09 e9                	or     ecx,ebp
c000180a:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c000180d:	89 3d 2c e1 02 c0    	mov    DWORD PTR ds:0xc002e12c,edi
c0001813:	29 e8                	sub    eax,ebp
c0001815:	83 c8 01             	or     eax,0x1
c0001818:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000181b:	e9 39 01 00 00       	jmp    c0001959 <dlrealloc+0x1d4>
c0001820:	89 c1                	mov    ecx,eax
c0001822:	83 e1 fe             	and    ecx,0xfffffffe
c0001825:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000182a:	75 1c                	jne    c0001848 <dlrealloc+0xc3>
c000182c:	83 e0 fc             	and    eax,0xfffffffc
c000182f:	01 f0                	add    eax,esi
c0001831:	39 c5                	cmp    ebp,eax
c0001833:	77 13                	ja     c0001848 <dlrealloc+0xc3>
c0001835:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001838:	89 c6                	mov    esi,eax
c000183a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000183d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001840:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001843:	e9 9b 00 00 00       	jmp    c00018e3 <dlrealloc+0x15e>
c0001848:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000184c:	8d 45 f9             	lea    eax,[ebp-0x7]
c000184f:	83 ec 0c             	sub    esp,0xc
c0001852:	50                   	push   eax
c0001853:	e8 f0 f9 ff ff       	call   c0001248 <dlmalloc>
c0001858:	83 c4 10             	add    esp,0x10
c000185b:	85 c0                	test   eax,eax
c000185d:	0f 84 f4 00 00 00    	je     c0001957 <dlrealloc+0x1d2>
c0001863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001867:	8d 48 f8             	lea    ecx,[eax-0x8]
c000186a:	39 ca                	cmp    edx,ecx
c000186c:	75 0a                	jne    c0001878 <dlrealloc+0xf3>
c000186e:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001871:	83 e0 fc             	and    eax,0xfffffffc
c0001874:	01 c6                	add    esi,eax
c0001876:	eb 6b                	jmp    c00018e3 <dlrealloc+0x15e>
c0001878:	8d 4e fc             	lea    ecx,[esi-0x4]
c000187b:	83 f9 27             	cmp    ecx,0x27
c000187e:	76 08                	jbe    c0001888 <dlrealloc+0x103>
c0001880:	89 de                	mov    esi,ebx
c0001882:	89 c7                	mov    edi,eax
c0001884:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001886:	eb 43                	jmp    c00018cb <dlrealloc+0x146>
c0001888:	8b 13                	mov    edx,DWORD PTR [ebx]
c000188a:	83 f9 13             	cmp    ecx,0x13
c000188d:	89 10                	mov    DWORD PTR [eax],edx
c000188f:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001892:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001895:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001898:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000189b:	76 2e                	jbe    c00018cb <dlrealloc+0x146>
c000189d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00018a0:	83 f9 1b             	cmp    ecx,0x1b
c00018a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00018a6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00018a9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00018ac:	76 1d                	jbe    c00018cb <dlrealloc+0x146>
c00018ae:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00018b1:	83 f9 23             	cmp    ecx,0x23
c00018b4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00018b7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00018ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00018bd:	76 0c                	jbe    c00018cb <dlrealloc+0x146>
c00018bf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00018c2:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00018c5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00018c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00018cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018cf:	83 ec 0c             	sub    esp,0xc
c00018d2:	53                   	push   ebx
c00018d3:	e8 ae f4 ff ff       	call   c0000d86 <dlfree>
c00018d8:	83 c4 10             	add    esp,0x10
c00018db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018df:	89 c3                	mov    ebx,eax
c00018e1:	eb 76                	jmp    c0001959 <dlrealloc+0x1d4>
c00018e3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018e6:	8d 04 37             	lea    eax,[edi+esi*1]
c00018e9:	89 f2                	mov    edx,esi
c00018eb:	29 ea                	sub    edx,ebp
c00018ed:	83 e1 01             	and    ecx,0x1
c00018f0:	83 fa 0f             	cmp    edx,0xf
c00018f3:	77 0b                	ja     c0001900 <dlrealloc+0x17b>
c00018f5:	09 f1                	or     ecx,esi
c00018f7:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018fe:	eb 59                	jmp    c0001959 <dlrealloc+0x1d4>
c0001900:	01 ef                	add    edi,ebp
c0001902:	83 ca 01             	or     edx,0x1
c0001905:	09 cd                	or     ebp,ecx
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000190d:	83 c7 08             	add    edi,0x8
c0001910:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001913:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001917:	57                   	push   edi
c0001918:	e8 69 f4 ff ff       	call   c0000d86 <dlfree>
c000191d:	83 c4 10             	add    esp,0x10
c0001920:	eb 37                	jmp    c0001959 <dlrealloc+0x1d4>
c0001922:	8d 45 04             	lea    eax,[ebp+0x4]
c0001925:	39 f0                	cmp    eax,esi
c0001927:	76 30                	jbe    c0001959 <dlrealloc+0x1d4>
c0001929:	83 ec 0c             	sub    esp,0xc
c000192c:	83 ed 07             	sub    ebp,0x7
c000192f:	55                   	push   ebp
c0001930:	e8 13 f9 ff ff       	call   c0001248 <dlmalloc>
c0001935:	83 c4 10             	add    esp,0x10
c0001938:	85 c0                	test   eax,eax
c000193a:	89 c5                	mov    ebp,eax
c000193c:	74 19                	je     c0001957 <dlrealloc+0x1d2>
c000193e:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001941:	89 c7                	mov    edi,eax
c0001943:	89 de                	mov    esi,ebx
c0001945:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001947:	83 ec 0c             	sub    esp,0xc
c000194a:	53                   	push   ebx
c000194b:	89 eb                	mov    ebx,ebp
c000194d:	e8 34 f4 ff ff       	call   c0000d86 <dlfree>
c0001952:	83 c4 10             	add    esp,0x10
c0001955:	eb 02                	jmp    c0001959 <dlrealloc+0x1d4>
c0001957:	31 db                	xor    ebx,ebx
c0001959:	83 c4 1c             	add    esp,0x1c
c000195c:	89 d8                	mov    eax,ebx
c000195e:	5b                   	pop    ebx
c000195f:	5e                   	pop    esi
c0001960:	5f                   	pop    edi
c0001961:	5d                   	pop    ebp
c0001962:	c3                   	ret    

c0001963 <dlmemalign>:
c0001963:	55                   	push   ebp
c0001964:	57                   	push   edi
c0001965:	56                   	push   esi
c0001966:	53                   	push   ebx
c0001967:	83 ec 0c             	sub    esp,0xc
c000196a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000196e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001972:	83 fa 08             	cmp    edx,0x8
c0001975:	77 10                	ja     c0001987 <dlmemalign+0x24>
c0001977:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000197b:	83 c4 0c             	add    esp,0xc
c000197e:	5b                   	pop    ebx
c000197f:	5e                   	pop    esi
c0001980:	5f                   	pop    edi
c0001981:	5d                   	pop    ebp
c0001982:	e9 c1 f8 ff ff       	jmp    c0001248 <dlmalloc>
c0001987:	83 fa 0f             	cmp    edx,0xf
c000198a:	bf 10 00 00 00       	mov    edi,0x10
c000198f:	76 13                	jbe    c00019a4 <dlmemalign+0x41>
c0001991:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001994:	85 d1                	test   ecx,edx
c0001996:	75 04                	jne    c000199c <dlmemalign+0x39>
c0001998:	89 d7                	mov    edi,edx
c000199a:	eb 08                	jmp    c00019a4 <dlmemalign+0x41>
c000199c:	39 d7                	cmp    edi,edx
c000199e:	73 04                	jae    c00019a4 <dlmemalign+0x41>
c00019a0:	01 ff                	add    edi,edi
c00019a2:	eb f8                	jmp    c000199c <dlmemalign+0x39>
c00019a4:	83 f8 df             	cmp    eax,0xffffffdf
c00019a7:	76 07                	jbe    c00019b0 <dlmemalign+0x4d>
c00019a9:	31 c0                	xor    eax,eax
c00019ab:	e9 ce 00 00 00       	jmp    c0001a7e <dlmemalign+0x11b>
c00019b0:	83 c0 0b             	add    eax,0xb
c00019b3:	bd 10 00 00 00       	mov    ebp,0x10
c00019b8:	83 f8 0f             	cmp    eax,0xf
c00019bb:	76 05                	jbe    c00019c2 <dlmemalign+0x5f>
c00019bd:	83 e0 f8             	and    eax,0xfffffff8
c00019c0:	89 c5                	mov    ebp,eax
c00019c2:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00019c6:	83 ec 0c             	sub    esp,0xc
c00019c9:	50                   	push   eax
c00019ca:	e8 79 f8 ff ff       	call   c0001248 <dlmalloc>
c00019cf:	83 c4 10             	add    esp,0x10
c00019d2:	85 c0                	test   eax,eax
c00019d4:	89 c1                	mov    ecx,eax
c00019d6:	74 d1                	je     c00019a9 <dlmemalign+0x46>
c00019d8:	8d 70 f8             	lea    esi,[eax-0x8]
c00019db:	31 d2                	xor    edx,edx
c00019dd:	f7 f7                	div    edi
c00019df:	85 d2                	test   edx,edx
c00019e1:	74 62                	je     c0001a45 <dlmemalign+0xe2>
c00019e3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019e7:	89 f8                	mov    eax,edi
c00019e9:	f7 d8                	neg    eax
c00019eb:	21 c3                	and    ebx,eax
c00019ed:	83 eb 08             	sub    ebx,0x8
c00019f0:	89 d8                	mov    eax,ebx
c00019f2:	29 f0                	sub    eax,esi
c00019f4:	83 f8 0f             	cmp    eax,0xf
c00019f7:	77 02                	ja     c00019fb <dlmemalign+0x98>
c00019f9:	01 fb                	add    ebx,edi
c00019fb:	89 d8                	mov    eax,ebx
c00019fd:	29 f0                	sub    eax,esi
c00019ff:	89 c6                	mov    esi,eax
c0001a01:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a04:	89 c2                	mov    edx,eax
c0001a06:	83 e2 fc             	and    edx,0xfffffffc
c0001a09:	29 f2                	sub    edx,esi
c0001a0b:	a8 02                	test   al,0x2
c0001a0d:	74 10                	je     c0001a1f <dlmemalign+0xbc>
c0001a0f:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001a12:	83 ca 02             	or     edx,0x2
c0001a15:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001a18:	8d 43 08             	lea    eax,[ebx+0x8]
c0001a1b:	89 33                	mov    DWORD PTR [ebx],esi
c0001a1d:	eb 5f                	jmp    c0001a7e <dlmemalign+0x11b>
c0001a1f:	89 d0                	mov    eax,edx
c0001a21:	83 ec 0c             	sub    esp,0xc
c0001a24:	83 c8 01             	or     eax,0x1
c0001a27:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001a2a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a2f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a32:	83 e0 01             	and    eax,0x1
c0001a35:	09 f0                	or     eax,esi
c0001a37:	89 de                	mov    esi,ebx
c0001a39:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a3c:	51                   	push   ecx
c0001a3d:	e8 44 f3 ff ff       	call   c0000d86 <dlfree>
c0001a42:	83 c4 10             	add    esp,0x10
c0001a45:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a48:	a8 02                	test   al,0x2
c0001a4a:	75 2f                	jne    c0001a7b <dlmemalign+0x118>
c0001a4c:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a4f:	83 e0 fc             	and    eax,0xfffffffc
c0001a52:	39 c2                	cmp    edx,eax
c0001a54:	73 25                	jae    c0001a7b <dlmemalign+0x118>
c0001a56:	29 e8                	sub    eax,ebp
c0001a58:	83 ec 0c             	sub    esp,0xc
c0001a5b:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a5e:	83 c8 01             	or     eax,0x1
c0001a61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001a64:	83 c2 08             	add    edx,0x8
c0001a67:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a6a:	83 e0 01             	and    eax,0x1
c0001a6d:	09 c5                	or     ebp,eax
c0001a6f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a72:	52                   	push   edx
c0001a73:	e8 0e f3 ff ff       	call   c0000d86 <dlfree>
c0001a78:	83 c4 10             	add    esp,0x10
c0001a7b:	8d 46 08             	lea    eax,[esi+0x8]
c0001a7e:	83 c4 0c             	add    esp,0xc
c0001a81:	5b                   	pop    ebx
c0001a82:	5e                   	pop    esi
c0001a83:	5f                   	pop    edi
c0001a84:	5d                   	pop    ebp
c0001a85:	c3                   	ret    

c0001a86 <dlcalloc>:
c0001a86:	53                   	push   ebx
c0001a87:	83 ec 14             	sub    esp,0x14
c0001a8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a8e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a93:	50                   	push   eax
c0001a94:	e8 af f7 ff ff       	call   c0001248 <dlmalloc>
c0001a99:	83 c4 10             	add    esp,0x10
c0001a9c:	85 c0                	test   eax,eax
c0001a9e:	89 c3                	mov    ebx,eax
c0001aa0:	74 6e                	je     c0001b10 <dlcalloc+0x8a>
c0001aa2:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001aa5:	a8 02                	test   al,0x2
c0001aa7:	75 67                	jne    c0001b10 <dlcalloc+0x8a>
c0001aa9:	83 e0 fc             	and    eax,0xfffffffc
c0001aac:	83 e8 04             	sub    eax,0x4
c0001aaf:	83 f8 27             	cmp    eax,0x27
c0001ab2:	76 0f                	jbe    c0001ac3 <dlcalloc+0x3d>
c0001ab4:	52                   	push   edx
c0001ab5:	50                   	push   eax
c0001ab6:	6a 00                	push   0x0
c0001ab8:	53                   	push   ebx
c0001ab9:	e8 32 ea ff ff       	call   c00004f0 <memset>
c0001abe:	83 c4 10             	add    esp,0x10
c0001ac1:	eb 4d                	jmp    c0001b10 <dlcalloc+0x8a>
c0001ac3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001ac9:	83 f8 13             	cmp    eax,0x13
c0001acc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001ad3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001ada:	76 34                	jbe    c0001b10 <dlcalloc+0x8a>
c0001adc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ae3:	83 f8 1b             	cmp    eax,0x1b
c0001ae6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001aed:	76 21                	jbe    c0001b10 <dlcalloc+0x8a>
c0001aef:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001af6:	83 f8 23             	cmp    eax,0x23
c0001af9:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001b00:	76 0e                	jbe    c0001b10 <dlcalloc+0x8a>
c0001b02:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001b09:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001b10:	83 c4 08             	add    esp,0x8
c0001b13:	89 d8                	mov    eax,ebx
c0001b15:	5b                   	pop    ebx
c0001b16:	c3                   	ret    

c0001b17 <dlcfree>:
c0001b17:	e9 6a f2 ff ff       	jmp    c0000d86 <dlfree>

c0001b1c <dlindependent_calloc>:
c0001b1c:	83 ec 28             	sub    esp,0x28
c0001b1f:	b9 03 00 00 00       	mov    ecx,0x3
c0001b24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001b2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b34:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b38:	e8 99 fa ff ff       	call   c00015d6 <iALLOc>
c0001b3d:	83 c4 2c             	add    esp,0x2c
c0001b40:	c3                   	ret    

c0001b41 <dlindependent_comalloc>:
c0001b41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b45:	31 c9                	xor    ecx,ecx
c0001b47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b53:	e9 7e fa ff ff       	jmp    c00015d6 <iALLOc>

c0001b58 <dlvalloc>:
c0001b58:	83 ec 0c             	sub    esp,0xc
c0001b5b:	83 3d 00 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e100,0x0
c0001b62:	75 0a                	jne    c0001b6e <dlvalloc+0x16>
c0001b64:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c0001b69:	e8 31 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b6e:	50                   	push   eax
c0001b6f:	50                   	push   eax
c0001b70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b74:	ff 35 5c e4 02 c0    	push   DWORD PTR ds:0xc002e45c
c0001b7a:	e8 e4 fd ff ff       	call   c0001963 <dlmemalign>
c0001b7f:	83 c4 1c             	add    esp,0x1c
c0001b82:	c3                   	ret    

c0001b83 <dlpvalloc>:
c0001b83:	83 ec 0c             	sub    esp,0xc
c0001b86:	83 3d 00 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e100,0x0
c0001b8d:	75 0a                	jne    c0001b99 <dlpvalloc+0x16>
c0001b8f:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c0001b94:	e8 06 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b99:	52                   	push   edx
c0001b9a:	a1 5c e4 02 c0       	mov    eax,ds:0xc002e45c
c0001b9f:	52                   	push   edx
c0001ba0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001ba4:	89 c1                	mov    ecx,eax
c0001ba6:	f7 d9                	neg    ecx
c0001ba8:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001bac:	21 ca                	and    edx,ecx
c0001bae:	52                   	push   edx
c0001baf:	50                   	push   eax
c0001bb0:	e8 ae fd ff ff       	call   c0001963 <dlmemalign>
c0001bb5:	83 c4 1c             	add    esp,0x1c
c0001bb8:	c3                   	ret    

c0001bb9 <dlmalloc_trim>:
c0001bb9:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c0001bbe:	e8 dc f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001bc3:	31 c0                	xor    eax,eax
c0001bc5:	c3                   	ret    

c0001bc6 <dlmalloc_usable_size>:
c0001bc6:	53                   	push   ebx
c0001bc7:	31 c0                	xor    eax,eax
c0001bc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001bcd:	85 c9                	test   ecx,ecx
c0001bcf:	74 24                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bd1:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001bd4:	f6 c2 02             	test   dl,0x2
c0001bd7:	74 08                	je     c0001be1 <dlmalloc_usable_size+0x1b>
c0001bd9:	83 e2 fc             	and    edx,0xfffffffc
c0001bdc:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bdf:	eb 14                	jmp    c0001bf5 <dlmalloc_usable_size+0x2f>
c0001be1:	89 d3                	mov    ebx,edx
c0001be3:	31 c0                	xor    eax,eax
c0001be5:	83 e3 fe             	and    ebx,0xfffffffe
c0001be8:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bed:	74 06                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bef:	83 e2 fc             	and    edx,0xfffffffc
c0001bf2:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bf5:	5b                   	pop    ebx
c0001bf6:	c3                   	ret    

c0001bf7 <dlmallinfo>:
c0001bf7:	55                   	push   ebp
c0001bf8:	57                   	push   edi
c0001bf9:	56                   	push   esi
c0001bfa:	53                   	push   ebx
c0001bfb:	83 ec 08             	sub    esp,0x8
c0001bfe:	83 3d 2c e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e12c,0x0
c0001c05:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001c09:	75 0a                	jne    c0001c15 <dlmallinfo+0x1e>
c0001c0b:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c0001c10:	e8 8a f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001c15:	a1 2c e1 02 c0       	mov    eax,ds:0xc002e12c
c0001c1a:	31 ed                	xor    ebp,ebp
c0001c1c:	31 c9                	xor    ecx,ecx
c0001c1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001c21:	83 e0 fc             	and    eax,0xfffffffc
c0001c24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c28:	31 c0                	xor    eax,eax
c0001c2a:	8b 14 85 04 e1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1efc]
c0001c31:	85 d2                	test   edx,edx
c0001c33:	74 0e                	je     c0001c43 <dlmallinfo+0x4c>
c0001c35:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c38:	45                   	inc    ebp
c0001c39:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c3c:	83 e6 fc             	and    esi,0xfffffffc
c0001c3f:	01 f1                	add    ecx,esi
c0001c41:	eb ee                	jmp    c0001c31 <dlmallinfo+0x3a>
c0001c43:	40                   	inc    eax
c0001c44:	83 f8 0a             	cmp    eax,0xa
c0001c47:	75 e1                	jne    c0001c2a <dlmallinfo+0x33>
c0001c49:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c54:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c57:	b8 34 e1 02 c0       	mov    eax,0xc002e134
c0001c5c:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c5f:	39 f0                	cmp    eax,esi
c0001c61:	74 10                	je     c0001c73 <dlmallinfo+0x7c>
c0001c63:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c66:	ff 04 24             	inc    DWORD PTR [esp]
c0001c69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c6c:	83 e7 fc             	and    edi,0xfffffffc
c0001c6f:	01 fa                	add    edx,edi
c0001c71:	eb ec                	jmp    c0001c5f <dlmallinfo+0x68>
c0001c73:	83 c0 08             	add    eax,0x8
c0001c76:	3d 2c e4 02 c0       	cmp    eax,0xc002e42c
c0001c7b:	75 df                	jne    c0001c5c <dlmallinfo+0x65>
c0001c7d:	8b 35 50 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e450
c0001c83:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c86:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0001c8b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c8e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c91:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c97:	8b 35 64 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e464
c0001c9d:	89 03                	mov    DWORD PTR [ebx],eax
c0001c9f:	29 d0                	sub    eax,edx
c0001ca1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ca8:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001cab:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001cae:	8b 35 74 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e474
c0001cb4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001cb7:	89 d8                	mov    eax,ebx
c0001cb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001cbc:	83 c4 08             	add    esp,0x8
c0001cbf:	5b                   	pop    ebx
c0001cc0:	5e                   	pop    esi
c0001cc1:	5f                   	pop    edi
c0001cc2:	5d                   	pop    ebp
c0001cc3:	c2 04 00             	ret    0x4

c0001cc6 <dlmalloc_stats>:
c0001cc6:	83 ec 30             	sub    esp,0x30
c0001cc9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001ccd:	50                   	push   eax
c0001cce:	e8 24 ff ff ff       	call   c0001bf7 <dlmallinfo>
c0001cd3:	83 c4 30             	add    esp,0x30
c0001cd6:	c3                   	ret    

c0001cd7 <dlmallopt>:
c0001cd7:	56                   	push   esi
c0001cd8:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c0001cdd:	53                   	push   ebx
c0001cde:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001ce2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001ce6:	e8 b4 ef ff ff       	call   c0000c9f <malloc_consolidate>
c0001ceb:	8d 46 04             	lea    eax,[esi+0x4]
c0001cee:	83 f8 05             	cmp    eax,0x5
c0001cf1:	77 5d                	ja     c0001d50 <dlmallopt+0x79>
c0001cf3:	ff 24 85 24 74 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd8bdc]
c0001cfa:	83 fb 50             	cmp    ebx,0x50
c0001cfd:	77 51                	ja     c0001d50 <dlmallopt+0x79>
c0001cff:	85 db                	test   ebx,ebx
c0001d01:	ba 08 00 00 00       	mov    edx,0x8
c0001d06:	74 12                	je     c0001d1a <dlmallopt+0x43>
c0001d08:	83 c3 0b             	add    ebx,0xb
c0001d0b:	ba 10 00 00 00       	mov    edx,0x10
c0001d10:	83 fb 0f             	cmp    ebx,0xf
c0001d13:	76 05                	jbe    c0001d1a <dlmallopt+0x43>
c0001d15:	89 da                	mov    edx,ebx
c0001d17:	83 e2 f8             	and    edx,0xfffffff8
c0001d1a:	a1 00 e1 02 c0       	mov    eax,ds:0xc002e100
c0001d1f:	83 e0 03             	and    eax,0x3
c0001d22:	09 d0                	or     eax,edx
c0001d24:	a3 00 e1 02 c0       	mov    ds:0xc002e100,eax
c0001d29:	eb 27                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d2b:	89 1d 44 e4 02 c0    	mov    DWORD PTR ds:0xc002e444,ebx
c0001d31:	eb 16                	jmp    c0001d49 <dlmallopt+0x72>
c0001d33:	89 1d 48 e4 02 c0    	mov    DWORD PTR ds:0xc002e448,ebx
c0001d39:	eb 0e                	jmp    c0001d49 <dlmallopt+0x72>
c0001d3b:	89 1d 4c e4 02 c0    	mov    DWORD PTR ds:0xc002e44c,ebx
c0001d41:	eb 06                	jmp    c0001d49 <dlmallopt+0x72>
c0001d43:	89 1d 54 e4 02 c0    	mov    DWORD PTR ds:0xc002e454,ebx
c0001d49:	be 01 00 00 00       	mov    esi,0x1
c0001d4e:	eb 02                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d50:	31 f6                	xor    esi,esi
c0001d52:	5b                   	pop    ebx
c0001d53:	89 f0                	mov    eax,esi
c0001d55:	5e                   	pop    esi
c0001d56:	c3                   	ret    
c0001d57:	90                   	nop

c0001d58 <isblank>:
c0001d58:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d5d:	74 09                	je     c0001d68 <isblank+0x10>
c0001d5f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d64:	75 0a                	jne    c0001d70 <isblank+0x18>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	b8 01 00 00 00       	mov    eax,0x1
c0001d6d:	c3                   	ret    
c0001d6e:	66 90                	xchg   ax,ax
c0001d70:	b8 00 00 00 00       	mov    eax,0x0
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax

c0001d78 <iscntrl>:
c0001d78:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d7d:	7e 09                	jle    c0001d88 <iscntrl+0x10>
c0001d7f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d84:	75 0a                	jne    c0001d90 <iscntrl+0x18>
c0001d86:	66 90                	xchg   ax,ax
c0001d88:	b8 01 00 00 00       	mov    eax,0x1
c0001d8d:	c3                   	ret    
c0001d8e:	66 90                	xchg   ax,ax
c0001d90:	b8 00 00 00 00       	mov    eax,0x0
c0001d95:	c3                   	ret    
c0001d96:	66 90                	xchg   ax,ax

c0001d98 <isdigit>:
c0001d98:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d9d:	7e 0d                	jle    c0001dac <isdigit+0x14>
c0001d9f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001da4:	7f 06                	jg     c0001dac <isdigit+0x14>
c0001da6:	b8 01 00 00 00       	mov    eax,0x1
c0001dab:	c3                   	ret    
c0001dac:	b8 00 00 00 00       	mov    eax,0x0
c0001db1:	c3                   	ret    
c0001db2:	66 90                	xchg   ax,ax

c0001db4 <islower>:
c0001db4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001db9:	7e 0d                	jle    c0001dc8 <islower+0x14>
c0001dbb:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001dc0:	7f 06                	jg     c0001dc8 <islower+0x14>
c0001dc2:	b8 01 00 00 00       	mov    eax,0x1
c0001dc7:	c3                   	ret    
c0001dc8:	b8 00 00 00 00       	mov    eax,0x0
c0001dcd:	c3                   	ret    
c0001dce:	66 90                	xchg   ax,ax

c0001dd0 <isspace>:
c0001dd0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001dd5:	7c 19                	jl     c0001df0 <isspace+0x20>
c0001dd7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001ddc:	7e 0a                	jle    c0001de8 <isspace+0x18>
c0001dde:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001de3:	75 0b                	jne    c0001df0 <isspace+0x20>
c0001de5:	8d 76 00             	lea    esi,[esi+0x0]
c0001de8:	b8 01 00 00 00       	mov    eax,0x1
c0001ded:	c3                   	ret    
c0001dee:	66 90                	xchg   ax,ax
c0001df0:	b8 00 00 00 00       	mov    eax,0x0
c0001df5:	c3                   	ret    
c0001df6:	66 90                	xchg   ax,ax

c0001df8 <isupper>:
c0001df8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dfd:	7e 0d                	jle    c0001e0c <isupper+0x14>
c0001dff:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001e04:	7f 06                	jg     c0001e0c <isupper+0x14>
c0001e06:	b8 01 00 00 00       	mov    eax,0x1
c0001e0b:	c3                   	ret    
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalpha>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 db ff ff ff       	call   c0001df8 <isupper>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalpha+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 87 ff ff ff       	call   c0001db4 <islower>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalpha+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <isalnum>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalpha>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 10                	jne    c0001e64 <isalnum+0x20>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 3b ff ff ff       	call   c0001d98 <isdigit>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	74 08                	je     c0001e6c <isalnum+0x28>
c0001e64:	b8 01 00 00 00       	mov    eax,0x1
c0001e69:	c3                   	ret    
c0001e6a:	66 90                	xchg   ax,ax
c0001e6c:	b8 00 00 00 00       	mov    eax,0x0
c0001e71:	c3                   	ret    
c0001e72:	66 90                	xchg   ax,ax

c0001e74 <ispunct>:
c0001e74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e78:	e8 c7 ff ff ff       	call   c0001e44 <isalnum>
c0001e7d:	83 c4 04             	add    esp,0x4
c0001e80:	85 c0                	test   eax,eax
c0001e82:	75 28                	jne    c0001eac <ispunct+0x38>
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 43 ff ff ff       	call   c0001dd0 <isspace>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 18                	jne    c0001eac <ispunct+0x38>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 db fe ff ff       	call   c0001d78 <iscntrl>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	75 08                	jne    c0001eac <ispunct+0x38>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isgraph>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 87 ff ff ff       	call   c0001e44 <isalnum>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 10                	jne    c0001ed4 <isgraph+0x20>
c0001ec4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ec8:	e8 a7 ff ff ff       	call   c0001e74 <ispunct>
c0001ecd:	83 c4 04             	add    esp,0x4
c0001ed0:	85 c0                	test   eax,eax
c0001ed2:	74 08                	je     c0001edc <isgraph+0x28>
c0001ed4:	b8 01 00 00 00       	mov    eax,0x1
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax
c0001edc:	b8 00 00 00 00       	mov    eax,0x0
c0001ee1:	c3                   	ret    
c0001ee2:	66 90                	xchg   ax,ax

c0001ee4 <isprint>:
c0001ee4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee8:	e8 c7 ff ff ff       	call   c0001eb4 <isgraph>
c0001eed:	83 c4 04             	add    esp,0x4
c0001ef0:	85 c0                	test   eax,eax
c0001ef2:	75 08                	jne    c0001efc <isprint+0x18>
c0001ef4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ef9:	75 09                	jne    c0001f04 <isprint+0x20>
c0001efb:	90                   	nop
c0001efc:	b8 01 00 00 00       	mov    eax,0x1
c0001f01:	c3                   	ret    
c0001f02:	66 90                	xchg   ax,ax
c0001f04:	b8 00 00 00 00       	mov    eax,0x0
c0001f09:	c3                   	ret    
c0001f0a:	66 90                	xchg   ax,ax

c0001f0c <isxdigit>:
c0001f0c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f10:	e8 83 fe ff ff       	call   c0001d98 <isdigit>
c0001f15:	83 c4 04             	add    esp,0x4
c0001f18:	85 c0                	test   eax,eax
c0001f1a:	75 20                	jne    c0001f3c <isxdigit+0x30>
c0001f1c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f21:	7e 09                	jle    c0001f2c <isxdigit+0x20>
c0001f23:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001f28:	7e 12                	jle    c0001f3c <isxdigit+0x30>
c0001f2a:	66 90                	xchg   ax,ax
c0001f2c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f31:	7e 11                	jle    c0001f44 <isxdigit+0x38>
c0001f33:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f38:	7f 0a                	jg     c0001f44 <isxdigit+0x38>
c0001f3a:	66 90                	xchg   ax,ax
c0001f3c:	b8 01 00 00 00       	mov    eax,0x1
c0001f41:	c3                   	ret    
c0001f42:	66 90                	xchg   ax,ax
c0001f44:	b8 00 00 00 00       	mov    eax,0x0
c0001f49:	c3                   	ret    
c0001f4a:	66 90                	xchg   ax,ax

c0001f4c <LWIP_PLATFORM_HTONS>:
c0001f4c:	83 ec 04             	sub    esp,0x4
c0001f4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f53:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f57:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f5b:	c1 e8 08             	shr    eax,0x8
c0001f5e:	89 c2                	mov    edx,eax
c0001f60:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f64:	c1 e0 08             	shl    eax,0x8
c0001f67:	09 d0                	or     eax,edx
c0001f69:	83 c4 04             	add    esp,0x4
c0001f6c:	c3                   	ret    
c0001f6d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f70 <LWIP_PLATFORM_HTONL>:
c0001f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f74:	c1 e8 18             	shr    eax,0x18
c0001f77:	89 c2                	mov    edx,eax
c0001f79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f7d:	c1 e8 08             	shr    eax,0x8
c0001f80:	25 00 ff 00 00       	and    eax,0xff00
c0001f85:	09 c2                	or     edx,eax
c0001f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f8b:	c1 e0 08             	shl    eax,0x8
c0001f8e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f93:	09 c2                	or     edx,eax
c0001f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f99:	c1 e0 18             	shl    eax,0x18
c0001f9c:	09 d0                	or     eax,edx
c0001f9e:	c3                   	ret    

c0001f9f <disk_status>:
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <disk_initialize>:
c0001fa2:	31 c0                	xor    eax,eax
c0001fa4:	c3                   	ret    

c0001fa5 <disk_read>:
c0001fa5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faa:	0f b6 04 85 20 45 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcbae0]
c0001fb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fb6:	e9 69 ab 01 00       	jmp    c001cb24 <fatWrapperReadDisk>

c0001fbb <disk_write>:
c0001fbb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fc0:	0f b6 04 85 20 45 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcbae0]
c0001fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fcc:	e9 93 ab 01 00       	jmp    c001cb64 <fatWrapperWriteDisk>

c0001fd1 <disk_ioctl>:
c0001fd1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001fda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fdf:	0f b6 04 85 20 45 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcbae0]
c0001fe7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001feb:	e9 b4 ab 01 00       	jmp    c001cba4 <fatWrapperIoctl>

c0001ff0 <ld_word>:
c0001ff0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ff4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ff7:	c1 e2 08             	shl    edx,0x8
c0001ffa:	09 d0                	or     eax,edx
c0001ffc:	c3                   	ret    

c0001ffd <ld_dword>:
c0001ffd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002001:	89 d1                	mov    ecx,edx
c0002003:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002007:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000200a:	c1 e1 08             	shl    ecx,0x8
c000200d:	09 ca                	or     edx,ecx
c000200f:	c1 e2 08             	shl    edx,0x8
c0002012:	09 d0                	or     eax,edx
c0002014:	c3                   	ret    

c0002015 <st_word>:
c0002015:	66 89 10             	mov    WORD PTR [eax],dx
c0002018:	c3                   	ret    

c0002019 <st_dword>:
c0002019:	89 10                	mov    DWORD PTR [eax],edx
c000201b:	c3                   	ret    

c000201c <mem_cpy>:
c000201c:	85 c9                	test   ecx,ecx
c000201e:	74 10                	je     c0002030 <mem_cpy+0x14>
c0002020:	57                   	push   edi
c0002021:	01 c1                	add    ecx,eax
c0002023:	56                   	push   esi
c0002024:	89 c7                	mov    edi,eax
c0002026:	89 d6                	mov    esi,edx
c0002028:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0002029:	39 f9                	cmp    ecx,edi
c000202b:	75 fb                	jne    c0002028 <mem_cpy+0xc>
c000202d:	5e                   	pop    esi
c000202e:	5f                   	pop    edi
c000202f:	c3                   	ret    
c0002030:	c3                   	ret    

c0002031 <mem_set>:
c0002031:	01 c1                	add    ecx,eax
c0002033:	88 10                	mov    BYTE PTR [eax],dl
c0002035:	40                   	inc    eax
c0002036:	39 c8                	cmp    eax,ecx
c0002038:	75 f9                	jne    c0002033 <mem_set+0x2>
c000203a:	c3                   	ret    

c000203b <mem_cmp>:
c000203b:	57                   	push   edi
c000203c:	56                   	push   esi
c000203d:	89 c6                	mov    esi,eax
c000203f:	53                   	push   ebx
c0002040:	46                   	inc    esi
c0002041:	42                   	inc    edx
c0002042:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0002046:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c000204a:	29 fb                	sub    ebx,edi
c000204c:	89 cf                	mov    edi,ecx
c000204e:	29 f7                	sub    edi,esi
c0002050:	01 c7                	add    edi,eax
c0002052:	74 04                	je     c0002058 <mem_cmp+0x1d>
c0002054:	85 db                	test   ebx,ebx
c0002056:	74 e8                	je     c0002040 <mem_cmp+0x5>
c0002058:	89 d8                	mov    eax,ebx
c000205a:	5b                   	pop    ebx
c000205b:	5e                   	pop    esi
c000205c:	5f                   	pop    edi
c000205d:	c3                   	ret    

c000205e <chk_chr>:
c000205e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002061:	85 c9                	test   ecx,ecx
c0002063:	74 07                	je     c000206c <chk_chr+0xe>
c0002065:	39 d1                	cmp    ecx,edx
c0002067:	74 03                	je     c000206c <chk_chr+0xe>
c0002069:	40                   	inc    eax
c000206a:	eb f2                	jmp    c000205e <chk_chr>
c000206c:	89 c8                	mov    eax,ecx
c000206e:	c3                   	ret    

c000206f <dbc_1st>:
c000206f:	31 c0                	xor    eax,eax
c0002071:	c3                   	ret    

c0002072 <dbc_2nd>:
c0002072:	31 c0                	xor    eax,eax
c0002074:	c3                   	ret    

c0002075 <tchar2uni>:
c0002075:	57                   	push   edi
c0002076:	56                   	push   esi
c0002077:	53                   	push   ebx
c0002078:	8b 18                	mov    ebx,DWORD PTR [eax]
c000207a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000207c:	8d 73 01             	lea    esi,[ebx+0x1]
c000207f:	f6 c1 80             	test   cl,0x80
c0002082:	75 0a                	jne    c000208e <tchar2uni+0x19>
c0002084:	0f b6 d1             	movzx  edx,cl
c0002087:	89 f3                	mov    ebx,esi
c0002089:	e9 b2 00 00 00       	jmp    c0002140 <tchar2uni+0xcb>
c000208e:	89 ca                	mov    edx,ecx
c0002090:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002096:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000209c:	89 ca                	mov    edx,ecx
c000209e:	75 0a                	jne    c00020aa <tchar2uni+0x35>
c00020a0:	83 e2 1f             	and    edx,0x1f
c00020a3:	b9 01 00 00 00       	mov    ecx,0x1
c00020a8:	eb 37                	jmp    c00020e1 <tchar2uni+0x6c>
c00020aa:	81 e2 f0 00 00 00    	and    edx,0xf0
c00020b0:	81 fa e0 00 00 00    	cmp    edx,0xe0
c00020b6:	75 0c                	jne    c00020c4 <tchar2uni+0x4f>
c00020b8:	89 ca                	mov    edx,ecx
c00020ba:	b9 02 00 00 00       	mov    ecx,0x2
c00020bf:	83 e2 0f             	and    edx,0xf
c00020c2:	eb 1d                	jmp    c00020e1 <tchar2uni+0x6c>
c00020c4:	89 cf                	mov    edi,ecx
c00020c6:	83 ca ff             	or     edx,0xffffffff
c00020c9:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020cf:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020d5:	75 70                	jne    c0002147 <tchar2uni+0xd2>
c00020d7:	89 ca                	mov    edx,ecx
c00020d9:	b9 03 00 00 00       	mov    ecx,0x3
c00020de:	83 e2 07             	and    edx,0x7
c00020e1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020e5:	46                   	inc    esi
c00020e6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020e9:	89 cf                	mov    edi,ecx
c00020eb:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020f1:	83 c7 80             	add    edi,0xffffff80
c00020f4:	75 4e                	jne    c0002144 <tchar2uni+0xcf>
c00020f6:	c1 e2 06             	shl    edx,0x6
c00020f9:	83 e1 3f             	and    ecx,0x3f
c00020fc:	09 ca                	or     edx,ecx
c00020fe:	39 de                	cmp    esi,ebx
c0002100:	75 e3                	jne    c00020e5 <tchar2uni+0x70>
c0002102:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0002108:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000210e:	76 34                	jbe    c0002144 <tchar2uni+0xcf>
c0002110:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002113:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0002119:	77 29                	ja     c0002144 <tchar2uni+0xcf>
c000211b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002121:	76 1d                	jbe    c0002140 <tchar2uni+0xcb>
c0002123:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0002129:	81 e2 ff 03 00 00    	and    edx,0x3ff
c000212f:	c1 e1 06             	shl    ecx,0x6
c0002132:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002138:	09 ca                	or     edx,ecx
c000213a:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002140:	89 18                	mov    DWORD PTR [eax],ebx
c0002142:	eb 03                	jmp    c0002147 <tchar2uni+0xd2>
c0002144:	83 ca ff             	or     edx,0xffffffff
c0002147:	5b                   	pop    ebx
c0002148:	89 d0                	mov    eax,edx
c000214a:	5e                   	pop    esi
c000214b:	5f                   	pop    edi
c000214c:	c3                   	ret    

c000214d <put_utf>:
c000214d:	53                   	push   ebx
c000214e:	83 f8 7f             	cmp    eax,0x7f
c0002151:	89 c3                	mov    ebx,eax
c0002153:	b0 00                	mov    al,0x0
c0002155:	77 11                	ja     c0002168 <put_utf+0x1b>
c0002157:	85 c9                	test   ecx,ecx
c0002159:	0f 84 e5 00 00 00    	je     c0002244 <put_utf+0xf7>
c000215f:	88 1a                	mov    BYTE PTR [edx],bl
c0002161:	b0 01                	mov    al,0x1
c0002163:	e9 dc 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002168:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000216e:	77 23                	ja     c0002193 <put_utf+0x46>
c0002170:	83 f9 01             	cmp    ecx,0x1
c0002173:	0f 86 cb 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c0002179:	89 d8                	mov    eax,ebx
c000217b:	83 e3 3f             	and    ebx,0x3f
c000217e:	c1 e8 06             	shr    eax,0x6
c0002181:	83 cb 80             	or     ebx,0xffffff80
c0002184:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0002187:	83 c8 c0             	or     eax,0xffffffc0
c000218a:	88 02                	mov    BYTE PTR [edx],al
c000218c:	b0 02                	mov    al,0x2
c000218e:	e9 b1 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002193:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002199:	77 40                	ja     c00021db <put_utf+0x8e>
c000219b:	83 f9 02             	cmp    ecx,0x2
c000219e:	0f 86 a0 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021a4:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00021aa:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00021b0:	0f 86 8e 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021b6:	89 d8                	mov    eax,ebx
c00021b8:	c1 e8 0c             	shr    eax,0xc
c00021bb:	83 c8 e0             	or     eax,0xffffffe0
c00021be:	88 02                	mov    BYTE PTR [edx],al
c00021c0:	89 d8                	mov    eax,ebx
c00021c2:	83 e3 3f             	and    ebx,0x3f
c00021c5:	c1 e8 06             	shr    eax,0x6
c00021c8:	83 cb 80             	or     ebx,0xffffff80
c00021cb:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021ce:	83 e0 3f             	and    eax,0x3f
c00021d1:	83 c8 80             	or     eax,0xffffff80
c00021d4:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021d7:	b0 03                	mov    al,0x3
c00021d9:	eb 69                	jmp    c0002244 <put_utf+0xf7>
c00021db:	83 f9 03             	cmp    ecx,0x3
c00021de:	76 64                	jbe    c0002244 <put_utf+0xf7>
c00021e0:	89 d9                	mov    ecx,ebx
c00021e2:	0f b7 c3             	movzx  eax,bx
c00021e5:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021eb:	66 31 c9             	xor    cx,cx
c00021ee:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021f4:	c1 e9 06             	shr    ecx,0x6
c00021f7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021fd:	77 43                	ja     c0002242 <put_utf+0xf5>
c00021ff:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002205:	77 3b                	ja     c0002242 <put_utf+0xf5>
c0002207:	09 cb                	or     ebx,ecx
c0002209:	81 c3 00 00 01 00    	add    ebx,0x10000
c000220f:	89 d8                	mov    eax,ebx
c0002211:	c1 e8 12             	shr    eax,0x12
c0002214:	83 c8 f0             	or     eax,0xfffffff0
c0002217:	88 02                	mov    BYTE PTR [edx],al
c0002219:	89 d8                	mov    eax,ebx
c000221b:	c1 e8 0c             	shr    eax,0xc
c000221e:	83 e0 3f             	and    eax,0x3f
c0002221:	83 c8 80             	or     eax,0xffffff80
c0002224:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002227:	89 d8                	mov    eax,ebx
c0002229:	83 e3 3f             	and    ebx,0x3f
c000222c:	c1 e8 06             	shr    eax,0x6
c000222f:	83 cb 80             	or     ebx,0xffffff80
c0002232:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002235:	83 e0 3f             	and    eax,0x3f
c0002238:	83 c8 80             	or     eax,0xffffff80
c000223b:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000223e:	b0 04                	mov    al,0x4
c0002240:	eb 02                	jmp    c0002244 <put_utf+0xf7>
c0002242:	31 c0                	xor    eax,eax
c0002244:	5b                   	pop    ebx
c0002245:	c3                   	ret    

c0002246 <clst2sect>:
c0002246:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002249:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000224c:	83 ea 02             	sub    edx,0x2
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	76 0d                	jbe    c0002260 <clst2sect+0x1a>
c0002253:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002257:	0f af d1             	imul   edx,ecx
c000225a:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000225d:	89 d0                	mov    eax,edx
c000225f:	c3                   	ret    
c0002260:	31 c0                	xor    eax,eax
c0002262:	c3                   	ret    

c0002263 <pick_lfn>:
c0002263:	55                   	push   ebp
c0002264:	57                   	push   edi
c0002265:	89 c7                	mov    edi,eax
c0002267:	56                   	push   esi
c0002268:	53                   	push   ebx
c0002269:	89 d3                	mov    ebx,edx
c000226b:	8d 42 1a             	lea    eax,[edx+0x1a]
c000226e:	e8 7d fd ff ff       	call   c0001ff0 <ld_word>
c0002273:	66 85 c0             	test   ax,ax
c0002276:	74 04                	je     c000227c <pick_lfn+0x19>
c0002278:	31 c0                	xor    eax,eax
c000227a:	eb 62                	jmp    c00022de <pick_lfn+0x7b>
c000227c:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000227f:	bd 01 00 00 00       	mov    ebp,0x1
c0002284:	31 f6                	xor    esi,esi
c0002286:	83 e1 bf             	and    ecx,0xffffffbf
c0002289:	49                   	dec    ecx
c000228a:	6b c9 0d             	imul   ecx,ecx,0xd
c000228d:	0f b6 86 80 75 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd8a80]
c0002294:	01 d8                	add    eax,ebx
c0002296:	e8 55 fd ff ff       	call   c0001ff0 <ld_word>
c000229b:	66 85 ed             	test   bp,bp
c000229e:	74 11                	je     c00022b1 <pick_lfn+0x4e>
c00022a0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a6:	77 d0                	ja     c0002278 <pick_lfn+0x15>
c00022a8:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00022ac:	89 c5                	mov    ebp,eax
c00022ae:	41                   	inc    ecx
c00022af:	eb 0a                	jmp    c00022bb <pick_lfn+0x58>
c00022b1:	0f b7 c0             	movzx  eax,ax
c00022b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00022b9:	75 bd                	jne    c0002278 <pick_lfn+0x15>
c00022bb:	46                   	inc    esi
c00022bc:	83 fe 0d             	cmp    esi,0xd
c00022bf:	75 cc                	jne    c000228d <pick_lfn+0x2a>
c00022c1:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00022c4:	74 13                	je     c00022d9 <pick_lfn+0x76>
c00022c6:	66 85 ed             	test   bp,bp
c00022c9:	74 0e                	je     c00022d9 <pick_lfn+0x76>
c00022cb:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022d1:	77 a5                	ja     c0002278 <pick_lfn+0x15>
c00022d3:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022d9:	b8 01 00 00 00       	mov    eax,0x1
c00022de:	5b                   	pop    ebx
c00022df:	5e                   	pop    esi
c00022e0:	5f                   	pop    edi
c00022e1:	5d                   	pop    ebp
c00022e2:	c3                   	ret    

c00022e3 <put_lfn>:
c00022e3:	55                   	push   ebp
c00022e4:	57                   	push   edi
c00022e5:	89 d7                	mov    edi,edx
c00022e7:	56                   	push   esi
c00022e8:	31 f6                	xor    esi,esi
c00022ea:	53                   	push   ebx
c00022eb:	83 ec 0c             	sub    esp,0xc
c00022ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022f2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00022f6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022fc:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002300:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002303:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002306:	31 d2                	xor    edx,edx
c0002308:	e8 08 fd ff ff       	call   c0002015 <st_word>
c000230d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002314:	0f b6 d9             	movzx  ebx,cl
c0002317:	4b                   	dec    ebx
c0002318:	6b db 0d             	imul   ebx,ebx,0xd
c000231b:	0f b7 c6             	movzx  eax,si
c000231e:	3d ff ff 00 00       	cmp    eax,0xffff
c0002323:	74 09                	je     c000232e <put_lfn+0x4b>
c0002325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002329:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000232d:	43                   	inc    ebx
c000232e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002331:	0f b7 ee             	movzx  ebp,si
c0002334:	89 ea                	mov    edx,ebp
c0002336:	0f b6 80 80 75 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd8a80]
c000233d:	01 f8                	add    eax,edi
c000233f:	e8 d1 fc ff ff       	call   c0002015 <st_word>
c0002344:	85 ed                	test   ebp,ebp
c0002346:	75 05                	jne    c000234d <put_lfn+0x6a>
c0002348:	be ff ff 00 00       	mov    esi,0xffff
c000234d:	ff 04 24             	inc    DWORD PTR [esp]
c0002350:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002354:	75 c5                	jne    c000231b <put_lfn+0x38>
c0002356:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000235c:	74 0b                	je     c0002369 <put_lfn+0x86>
c000235e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002362:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002367:	75 07                	jne    c0002370 <put_lfn+0x8d>
c0002369:	83 c9 40             	or     ecx,0x40
c000236c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002370:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002374:	88 07                	mov    BYTE PTR [edi],al
c0002376:	83 c4 0c             	add    esp,0xc
c0002379:	5b                   	pop    ebx
c000237a:	5e                   	pop    esi
c000237b:	5f                   	pop    edi
c000237c:	5d                   	pop    ebp
c000237d:	c3                   	ret    

c000237e <gen_numname>:
c000237e:	57                   	push   edi
c000237f:	89 cf                	mov    edi,ecx
c0002381:	56                   	push   esi
c0002382:	b9 0b 00 00 00       	mov    ecx,0xb
c0002387:	53                   	push   ebx
c0002388:	89 c6                	mov    esi,eax
c000238a:	83 ec 10             	sub    esp,0x10
c000238d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002391:	e8 86 fc ff ff       	call   c000201c <mem_cpy>
c0002396:	83 fb 05             	cmp    ebx,0x5
c0002399:	76 30                	jbe    c00023cb <gen_numname+0x4d>
c000239b:	66 8b 07             	mov    ax,WORD PTR [edi]
c000239e:	66 85 c0             	test   ax,ax
c00023a1:	74 28                	je     c00023cb <gen_numname+0x4d>
c00023a3:	83 c7 02             	add    edi,0x2
c00023a6:	ba 10 00 00 00       	mov    edx,0x10
c00023ab:	89 c1                	mov    ecx,eax
c00023ad:	01 db                	add    ebx,ebx
c00023af:	c1 e0 10             	shl    eax,0x10
c00023b2:	83 e1 01             	and    ecx,0x1
c00023b5:	c1 e8 11             	shr    eax,0x11
c00023b8:	01 cb                	add    ebx,ecx
c00023ba:	0f ba e3 10          	bt     ebx,0x10
c00023be:	73 06                	jae    c00023c6 <gen_numname+0x48>
c00023c0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00023c6:	4a                   	dec    edx
c00023c7:	75 e2                	jne    c00023ab <gen_numname+0x2d>
c00023c9:	eb d0                	jmp    c000239b <gen_numname+0x1d>
c00023cb:	b8 07 00 00 00       	mov    eax,0x7
c00023d0:	89 d9                	mov    ecx,ebx
c00023d2:	83 e1 0f             	and    ecx,0xf
c00023d5:	8d 79 30             	lea    edi,[ecx+0x30]
c00023d8:	83 ff 39             	cmp    edi,0x39
c00023db:	89 fa                	mov    edx,edi
c00023dd:	76 03                	jbe    c00023e2 <gen_numname+0x64>
c00023df:	8d 51 37             	lea    edx,[ecx+0x37]
c00023e2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023e5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023e9:	89 da                	mov    edx,ebx
c00023eb:	c1 ea 04             	shr    edx,0x4
c00023ee:	83 fb 0f             	cmp    ebx,0xf
c00023f1:	76 06                	jbe    c00023f9 <gen_numname+0x7b>
c00023f3:	89 c8                	mov    eax,ecx
c00023f5:	89 d3                	mov    ebx,edx
c00023f7:	eb d7                	jmp    c00023d0 <gen_numname+0x52>
c00023f9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023fe:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002401:	31 d2                	xor    edx,edx
c0002403:	8d 04 16             	lea    eax,[esi+edx*1]
c0002406:	39 ca                	cmp    edx,ecx
c0002408:	73 19                	jae    c0002423 <gen_numname+0xa5>
c000240a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000240d:	83 f8 20             	cmp    eax,0x20
c0002410:	74 11                	je     c0002423 <gen_numname+0xa5>
c0002412:	e8 58 fc ff ff       	call   c000206f <dbc_1st>
c0002417:	85 c0                	test   eax,eax
c0002419:	74 05                	je     c0002420 <gen_numname+0xa2>
c000241b:	39 d3                	cmp    ebx,edx
c000241d:	74 04                	je     c0002423 <gen_numname+0xa5>
c000241f:	42                   	inc    edx
c0002420:	42                   	inc    edx
c0002421:	eb e0                	jmp    c0002403 <gen_numname+0x85>
c0002423:	83 f9 07             	cmp    ecx,0x7
c0002426:	b0 20                	mov    al,0x20
c0002428:	77 05                	ja     c000242f <gen_numname+0xb1>
c000242a:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000242e:	41                   	inc    ecx
c000242f:	42                   	inc    edx
c0002430:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002434:	83 fa 07             	cmp    edx,0x7
c0002437:	76 ea                	jbe    c0002423 <gen_numname+0xa5>
c0002439:	83 c4 10             	add    esp,0x10
c000243c:	5b                   	pop    ebx
c000243d:	5e                   	pop    esi
c000243e:	5f                   	pop    edi
c000243f:	c3                   	ret    

c0002440 <sum_sfn>:
c0002440:	53                   	push   ebx
c0002441:	31 c9                	xor    ecx,ecx
c0002443:	31 db                	xor    ebx,ebx
c0002445:	0f b6 d1             	movzx  edx,cl
c0002448:	d1 ea                	shr    edx,1
c000244a:	c1 e1 07             	shl    ecx,0x7
c000244d:	09 ca                	or     edx,ecx
c000244f:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002452:	43                   	inc    ebx
c0002453:	01 ca                	add    edx,ecx
c0002455:	83 fb 0b             	cmp    ebx,0xb
c0002458:	88 d1                	mov    cl,dl
c000245a:	75 e9                	jne    c0002445 <sum_sfn+0x5>
c000245c:	5b                   	pop    ebx
c000245d:	88 d0                	mov    al,dl
c000245f:	c3                   	ret    

c0002460 <get_ldnumber>:
c0002460:	55                   	push   ebp
c0002461:	57                   	push   edi
c0002462:	56                   	push   esi
c0002463:	83 ce ff             	or     esi,0xffffffff
c0002466:	53                   	push   ebx
c0002467:	8b 10                	mov    edx,DWORD PTR [eax]
c0002469:	85 d2                	test   edx,edx
c000246b:	74 38                	je     c00024a5 <get_ldnumber+0x45>
c000246d:	89 c5                	mov    ebp,eax
c000246f:	89 d1                	mov    ecx,edx
c0002471:	41                   	inc    ecx
c0002472:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002476:	80 fb 1f             	cmp    bl,0x1f
c0002479:	76 05                	jbe    c0002480 <get_ldnumber+0x20>
c000247b:	83 fb 3a             	cmp    ebx,0x3a
c000247e:	75 f1                	jne    c0002471 <get_ldnumber+0x11>
c0002480:	31 f6                	xor    esi,esi
c0002482:	83 fb 3a             	cmp    ebx,0x3a
c0002485:	75 1e                	jne    c00024a5 <get_ldnumber+0x45>
c0002487:	8a 1a                	mov    bl,BYTE PTR [edx]
c0002489:	83 ce ff             	or     esi,0xffffffff
c000248c:	8d 7b d0             	lea    edi,[ebx-0x30]
c000248f:	89 f8                	mov    eax,edi
c0002491:	3c 09                	cmp    al,0x9
c0002493:	77 10                	ja     c00024a5 <get_ldnumber+0x45>
c0002495:	83 c2 02             	add    edx,0x2
c0002498:	39 d1                	cmp    ecx,edx
c000249a:	75 09                	jne    c00024a5 <get_ldnumber+0x45>
c000249c:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000249f:	0f be f3             	movsx  esi,bl
c00024a2:	83 ee 30             	sub    esi,0x30
c00024a5:	5b                   	pop    ebx
c00024a6:	89 f0                	mov    eax,esi
c00024a8:	5e                   	pop    esi
c00024a9:	5f                   	pop    edi
c00024aa:	5d                   	pop    ebp
c00024ab:	c3                   	ret    

c00024ac <validate>:
c00024ac:	56                   	push   esi
c00024ad:	85 c0                	test   eax,eax
c00024af:	53                   	push   ebx
c00024b0:	89 d6                	mov    esi,edx
c00024b2:	51                   	push   ecx
c00024b3:	75 09                	jne    c00024be <validate+0x12>
c00024b5:	b8 09 00 00 00       	mov    eax,0x9
c00024ba:	31 c9                	xor    ecx,ecx
c00024bc:	eb 2e                	jmp    c00024ec <validate+0x40>
c00024be:	89 c3                	mov    ebx,eax
c00024c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00024c2:	85 c0                	test   eax,eax
c00024c4:	74 ef                	je     c00024b5 <validate+0x9>
c00024c6:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00024c9:	74 ea                	je     c00024b5 <validate+0x9>
c00024cb:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024ce:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024d2:	75 e1                	jne    c00024b5 <validate+0x9>
c00024d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	50                   	push   eax
c00024dc:	e8 be fa ff ff       	call   c0001f9f <disk_status>
c00024e1:	83 c4 10             	add    esp,0x10
c00024e4:	a8 01                	test   al,0x1
c00024e6:	75 cd                	jne    c00024b5 <validate+0x9>
c00024e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024ea:	31 c0                	xor    eax,eax
c00024ec:	89 0e                	mov    DWORD PTR [esi],ecx
c00024ee:	5a                   	pop    edx
c00024ef:	5b                   	pop    ebx
c00024f0:	5e                   	pop    esi
c00024f1:	c3                   	ret    

c00024f2 <sync_window>:
c00024f2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024f6:	74 58                	je     c0002550 <sync_window+0x5e>
c00024f8:	56                   	push   esi
c00024f9:	53                   	push   ebx
c00024fa:	89 c3                	mov    ebx,eax
c00024fc:	51                   	push   ecx
c00024fd:	6a 01                	push   0x1
c00024ff:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002502:	8d 70 34             	lea    esi,[eax+0x34]
c0002505:	56                   	push   esi
c0002506:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000250a:	50                   	push   eax
c000250b:	e8 ab fa ff ff       	call   c0001fbb <disk_write>
c0002510:	83 c4 10             	add    esp,0x10
c0002513:	ba 01 00 00 00       	mov    edx,0x1
c0002518:	85 c0                	test   eax,eax
c000251a:	75 2e                	jne    c000254a <sync_window+0x58>
c000251c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002520:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002523:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002526:	89 c1                	mov    ecx,eax
c0002528:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000252b:	39 d1                	cmp    ecx,edx
c000252d:	73 19                	jae    c0002548 <sync_window+0x56>
c000252f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002533:	75 13                	jne    c0002548 <sync_window+0x56>
c0002535:	6a 01                	push   0x1
c0002537:	01 d0                	add    eax,edx
c0002539:	50                   	push   eax
c000253a:	56                   	push   esi
c000253b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000253f:	50                   	push   eax
c0002540:	e8 76 fa ff ff       	call   c0001fbb <disk_write>
c0002545:	83 c4 10             	add    esp,0x10
c0002548:	31 d2                	xor    edx,edx
c000254a:	89 d0                	mov    eax,edx
c000254c:	5a                   	pop    edx
c000254d:	5b                   	pop    ebx
c000254e:	5e                   	pop    esi
c000254f:	c3                   	ret    
c0002550:	31 d2                	xor    edx,edx
c0002552:	89 d0                	mov    eax,edx
c0002554:	c3                   	ret    

c0002555 <move_window>:
c0002555:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002558:	74 3a                	je     c0002594 <move_window+0x3f>
c000255a:	56                   	push   esi
c000255b:	89 d6                	mov    esi,edx
c000255d:	53                   	push   ebx
c000255e:	89 c3                	mov    ebx,eax
c0002560:	51                   	push   ecx
c0002561:	e8 8c ff ff ff       	call   c00024f2 <sync_window>
c0002566:	85 c0                	test   eax,eax
c0002568:	75 2d                	jne    c0002597 <move_window+0x42>
c000256a:	6a 01                	push   0x1
c000256c:	56                   	push   esi
c000256d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002570:	50                   	push   eax
c0002571:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002575:	50                   	push   eax
c0002576:	e8 2a fa ff ff       	call   c0001fa5 <disk_read>
c000257b:	83 c4 10             	add    esp,0x10
c000257e:	89 c2                	mov    edx,eax
c0002580:	31 c0                	xor    eax,eax
c0002582:	85 d2                	test   edx,edx
c0002584:	ba ff ff ff ff       	mov    edx,0xffffffff
c0002589:	0f 45 f2             	cmovne esi,edx
c000258c:	0f 95 c0             	setne  al
c000258f:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0002592:	eb 03                	jmp    c0002597 <move_window+0x42>
c0002594:	31 c0                	xor    eax,eax
c0002596:	c3                   	ret    
c0002597:	5a                   	pop    edx
c0002598:	5b                   	pop    ebx
c0002599:	5e                   	pop    esi
c000259a:	c3                   	ret    

c000259b <check_fs>:
c000259b:	53                   	push   ebx
c000259c:	89 c3                	mov    ebx,eax
c000259e:	83 ec 08             	sub    esp,0x8
c00025a1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00025a5:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00025ac:	e8 a4 ff ff ff       	call   c0002555 <move_window>
c00025b1:	ba 04 00 00 00       	mov    edx,0x4
c00025b6:	85 c0                	test   eax,eax
c00025b8:	75 68                	jne    c0002622 <check_fs+0x87>
c00025ba:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00025c0:	e8 2b fa ff ff       	call   c0001ff0 <ld_word>
c00025c5:	ba 03 00 00 00       	mov    edx,0x3
c00025ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00025ce:	75 52                	jne    c0002622 <check_fs+0x87>
c00025d0:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025d3:	8d 50 18             	lea    edx,[eax+0x18]
c00025d6:	80 fa 01             	cmp    dl,0x1
c00025d9:	76 09                	jbe    c00025e4 <check_fs+0x49>
c00025db:	3c eb                	cmp    al,0xeb
c00025dd:	ba 02 00 00 00       	mov    edx,0x2
c00025e2:	75 3e                	jne    c0002622 <check_fs+0x87>
c00025e4:	ba 74 a4 02 c0       	mov    edx,0xc002a474
c00025e9:	b9 03 00 00 00       	mov    ecx,0x3
c00025ee:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025f1:	e8 45 fa ff ff       	call   c000203b <mem_cmp>
c00025f6:	31 d2                	xor    edx,edx
c00025f8:	85 c0                	test   eax,eax
c00025fa:	74 26                	je     c0002622 <check_fs+0x87>
c00025fc:	ba 3c 74 02 c0       	mov    edx,0xc002743c
c0002601:	b9 05 00 00 00       	mov    ecx,0x5
c0002606:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000260c:	e8 2a fa ff ff       	call   c000203b <mem_cmp>
c0002611:	31 d2                	xor    edx,edx
c0002613:	85 c0                	test   eax,eax
c0002615:	74 0b                	je     c0002622 <check_fs+0x87>
c0002617:	31 d2                	xor    edx,edx
c0002619:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000261d:	0f 95 c2             	setne  dl
c0002620:	01 d2                	add    edx,edx
c0002622:	83 c4 08             	add    esp,0x8
c0002625:	89 d0                	mov    eax,edx
c0002627:	5b                   	pop    ebx
c0002628:	c3                   	ret    

c0002629 <find_volume>:
c0002629:	55                   	push   ebp
c000262a:	57                   	push   edi
c000262b:	56                   	push   esi
c000262c:	89 c6                	mov    esi,eax
c000262e:	53                   	push   ebx
c000262f:	89 d3                	mov    ebx,edx
c0002631:	83 ec 2c             	sub    esp,0x2c
c0002634:	31 d2                	xor    edx,edx
c0002636:	e8 60 ff ff ff       	call   c000259b <check_fs>
c000263b:	85 db                	test   ebx,ebx
c000263d:	0f 94 c2             	sete   dl
c0002640:	83 f8 02             	cmp    eax,0x2
c0002643:	74 07                	je     c000264c <find_volume+0x23>
c0002645:	77 63                	ja     c00026aa <find_volume+0x81>
c0002647:	f6 c2 01             	test   dl,0x1
c000264a:	75 5e                	jne    c00026aa <find_volume+0x81>
c000264c:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002652:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002656:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000265c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0002660:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002664:	89 f8                	mov    eax,edi
c0002666:	83 c7 10             	add    edi,0x10
c0002669:	e8 8f f9 ff ff       	call   c0001ffd <ld_dword>
c000266e:	83 c5 04             	add    ebp,0x4
c0002671:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002675:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002678:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000267c:	75 e2                	jne    c0002660 <find_volume+0x37>
c000267e:	83 fb 01             	cmp    ebx,0x1
c0002681:	0f b6 fa             	movzx  edi,dl
c0002684:	83 d3 ff             	adc    ebx,0xffffffff
c0002687:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c000268b:	b8 03 00 00 00       	mov    eax,0x3
c0002690:	85 d2                	test   edx,edx
c0002692:	74 07                	je     c000269b <find_volume+0x72>
c0002694:	89 f0                	mov    eax,esi
c0002696:	e8 00 ff ff ff       	call   c000259b <check_fs>
c000269b:	83 f8 01             	cmp    eax,0x1
c000269e:	76 0a                	jbe    c00026aa <find_volume+0x81>
c00026a0:	85 ff                	test   edi,edi
c00026a2:	74 06                	je     c00026aa <find_volume+0x81>
c00026a4:	43                   	inc    ebx
c00026a5:	83 fb 03             	cmp    ebx,0x3
c00026a8:	76 dd                	jbe    c0002687 <find_volume+0x5e>
c00026aa:	83 c4 2c             	add    esp,0x2c
c00026ad:	5b                   	pop    ebx
c00026ae:	5e                   	pop    esi
c00026af:	5f                   	pop    edi
c00026b0:	5d                   	pop    ebp
c00026b1:	c3                   	ret    

c00026b2 <mount_volume>:
c00026b2:	55                   	push   ebp
c00026b3:	89 d5                	mov    ebp,edx
c00026b5:	57                   	push   edi
c00026b6:	89 cf                	mov    edi,ecx
c00026b8:	56                   	push   esi
c00026b9:	53                   	push   ebx
c00026ba:	bb 0b 00 00 00       	mov    ebx,0xb
c00026bf:	83 ec 2c             	sub    esp,0x2c
c00026c2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026c8:	e8 93 fd ff ff       	call   c0002460 <get_ldnumber>
c00026cd:	85 c0                	test   eax,eax
c00026cf:	0f 88 d0 02 00 00    	js     c00029a5 <mount_volume+0x2f3>
c00026d5:	8b 34 85 a0 e4 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd1b60]
c00026dc:	89 c2                	mov    edx,eax
c00026de:	bb 0c 00 00 00       	mov    ebx,0xc
c00026e3:	85 f6                	test   esi,esi
c00026e5:	0f 84 ba 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c00026eb:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026ee:	83 e7 fe             	and    edi,0xfffffffe
c00026f1:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026f4:	74 3c                	je     c0002732 <mount_volume+0x80>
c00026f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026fa:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026fe:	83 ec 0c             	sub    esp,0xc
c0002701:	50                   	push   eax
c0002702:	e8 98 f8 ff ff       	call   c0001f9f <disk_status>
c0002707:	83 c4 10             	add    esp,0x10
c000270a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000270e:	a8 01                	test   al,0x1
c0002710:	75 20                	jne    c0002732 <mount_volume+0x80>
c0002712:	31 db                	xor    ebx,ebx
c0002714:	81 e7 fe 00 00 00    	and    edi,0xfe
c000271a:	0f 84 85 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002720:	a8 04                	test   al,0x4
c0002722:	0f 84 7d 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002728:	bb 0a 00 00 00       	mov    ebx,0xa
c000272d:	e9 73 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002732:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002735:	83 ec 0c             	sub    esp,0xc
c0002738:	0f b6 c2             	movzx  eax,dl
c000273b:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000273e:	bb 03 00 00 00       	mov    ebx,0x3
c0002743:	50                   	push   eax
c0002744:	e8 59 f8 ff ff       	call   c0001fa2 <disk_initialize>
c0002749:	83 c4 10             	add    esp,0x10
c000274c:	a8 01                	test   al,0x1
c000274e:	0f 85 51 02 00 00    	jne    c00029a5 <mount_volume+0x2f3>
c0002754:	81 e7 fe 00 00 00    	and    edi,0xfe
c000275a:	74 04                	je     c0002760 <mount_volume+0xae>
c000275c:	a8 04                	test   al,0x4
c000275e:	75 c8                	jne    c0002728 <mount_volume+0x76>
c0002760:	31 d2                	xor    edx,edx
c0002762:	89 f0                	mov    eax,esi
c0002764:	e8 c0 fe ff ff       	call   c0002629 <find_volume>
c0002769:	bb 01 00 00 00       	mov    ebx,0x1
c000276e:	83 f8 04             	cmp    eax,0x4
c0002771:	0f 84 2e 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002777:	83 f8 01             	cmp    eax,0x1
c000277a:	76 0a                	jbe    c0002786 <mount_volume+0xd4>
c000277c:	bb 0d 00 00 00       	mov    ebx,0xd
c0002781:	e9 1f 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002786:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002789:	e8 62 f8 ff ff       	call   c0001ff0 <ld_word>
c000278e:	66 3d 00 02          	cmp    ax,0x200
c0002792:	75 e8                	jne    c000277c <mount_volume+0xca>
c0002794:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002797:	e8 54 f8 ff ff       	call   c0001ff0 <ld_word>
c000279c:	0f b7 c0             	movzx  eax,ax
c000279f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027a3:	85 c0                	test   eax,eax
c00027a5:	75 0c                	jne    c00027b3 <mount_volume+0x101>
c00027a7:	8d 46 58             	lea    eax,[esi+0x58]
c00027aa:	e8 4e f8 ff ff       	call   c0001ffd <ld_dword>
c00027af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027b3:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00027b6:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00027b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00027c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00027c4:	89 e8                	mov    eax,ebp
c00027c6:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00027c9:	8d 45 ff             	lea    eax,[ebp-0x1]
c00027cc:	3c 01                	cmp    al,0x1
c00027ce:	77 ac                	ja     c000277c <mount_volume+0xca>
c00027d0:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00027d4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027d8:	66 85 c0             	test   ax,ax
c00027db:	89 c3                	mov    ebx,eax
c00027dd:	74 9d                	je     c000277c <mount_volume+0xca>
c00027df:	8d 40 ff             	lea    eax,[eax-0x1]
c00027e2:	85 d8                	test   eax,ebx
c00027e4:	75 96                	jne    c000277c <mount_volume+0xca>
c00027e6:	8d 46 45             	lea    eax,[esi+0x45]
c00027e9:	e8 02 f8 ff ff       	call   c0001ff0 <ld_word>
c00027ee:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027f2:	a8 0f                	test   al,0xf
c00027f4:	89 c7                	mov    edi,eax
c00027f6:	75 84                	jne    c000277c <mount_volume+0xca>
c00027f8:	8d 46 47             	lea    eax,[esi+0x47]
c00027fb:	e8 f0 f7 ff ff       	call   c0001ff0 <ld_word>
c0002800:	0f b7 d0             	movzx  edx,ax
c0002803:	85 d2                	test   edx,edx
c0002805:	75 0a                	jne    c0002811 <mount_volume+0x15f>
c0002807:	8d 46 54             	lea    eax,[esi+0x54]
c000280a:	e8 ee f7 ff ff       	call   c0001ffd <ld_dword>
c000280f:	89 c2                	mov    edx,eax
c0002811:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002815:	8d 46 42             	lea    eax,[esi+0x42]
c0002818:	e8 d3 f7 ff ff       	call   c0001ff0 <ld_word>
c000281d:	0f b7 c8             	movzx  ecx,ax
c0002820:	85 c9                	test   ecx,ecx
c0002822:	0f 84 54 ff ff ff    	je     c000277c <mount_volume+0xca>
c0002828:	89 e8                	mov    eax,ebp
c000282a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000282e:	0f b6 e8             	movzx  ebp,al
c0002831:	0f b7 c7             	movzx  eax,di
c0002834:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002839:	c1 e8 04             	shr    eax,0x4
c000283c:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0002840:	01 e8                	add    eax,ebp
c0002842:	01 c8                	add    eax,ecx
c0002844:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002848:	39 c2                	cmp    edx,eax
c000284a:	0f 82 2c ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002850:	29 c2                	sub    edx,eax
c0002852:	89 d5                	mov    ebp,edx
c0002854:	89 d0                	mov    eax,edx
c0002856:	31 d2                	xor    edx,edx
c0002858:	f7 f3                	div    ebx
c000285a:	39 dd                	cmp    ebp,ebx
c000285c:	0f 82 1a ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002862:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002867:	0f 87 0f ff ff ff    	ja     c000277c <mount_volume+0xca>
c000286d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002872:	0f 86 1e 01 00 00    	jbe    c0002996 <mount_volume+0x2e4>
c0002878:	bb 03 00 00 00       	mov    ebx,0x3
c000287d:	8d 68 02             	lea    ebp,[eax+0x2]
c0002880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002884:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002887:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000288b:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c000288f:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002892:	01 c8                	add    eax,ecx
c0002894:	83 fb 03             	cmp    ebx,0x3
c0002897:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000289a:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000289d:	75 23                	jne    c00028c2 <mount_volume+0x210>
c000289f:	8d 46 5e             	lea    eax,[esi+0x5e]
c00028a2:	e8 49 f7 ff ff       	call   c0001ff0 <ld_word>
c00028a7:	09 c7                	or     edi,eax
c00028a9:	66 85 ff             	test   di,di
c00028ac:	0f 85 ca fe ff ff    	jne    c000277c <mount_volume+0xca>
c00028b2:	8d 46 60             	lea    eax,[esi+0x60]
c00028b5:	e8 43 f7 ff ff       	call   c0001ffd <ld_dword>
c00028ba:	c1 e5 02             	shl    ebp,0x2
c00028bd:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028c0:	eb 25                	jmp    c00028e7 <mount_volume+0x235>
c00028c2:	66 85 ff             	test   di,di
c00028c5:	0f 84 b1 fe ff ff    	je     c000277c <mount_volume+0xca>
c00028cb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00028cf:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00028d3:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00028d7:	83 e5 01             	and    ebp,0x1
c00028da:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028dd:	d1 ea                	shr    edx,1
c00028df:	01 d5                	add    ebp,edx
c00028e1:	83 fb 02             	cmp    ebx,0x2
c00028e4:	0f 44 ef             	cmove  ebp,edi
c00028e7:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028ed:	c1 ed 09             	shr    ebp,0x9
c00028f0:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00028f4:	0f 87 82 fe ff ff    	ja     c000277c <mount_volume+0xca>
c00028fa:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002901:	83 fb 03             	cmp    ebx,0x3
c0002904:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000290b:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000290f:	75 6e                	jne    c000297f <mount_volume+0x2cd>
c0002911:	8d 46 64             	lea    eax,[esi+0x64]
c0002914:	e8 d7 f6 ff ff       	call   c0001ff0 <ld_word>
c0002919:	66 48                	dec    ax
c000291b:	75 62                	jne    c000297f <mount_volume+0x2cd>
c000291d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002921:	89 f0                	mov    eax,esi
c0002923:	42                   	inc    edx
c0002924:	e8 2c fc ff ff       	call   c0002555 <move_window>
c0002929:	85 c0                	test   eax,eax
c000292b:	75 52                	jne    c000297f <mount_volume+0x2cd>
c000292d:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002931:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002937:	e8 b4 f6 ff ff       	call   c0001ff0 <ld_word>
c000293c:	66 3d 55 aa          	cmp    ax,0xaa55
c0002940:	75 3d                	jne    c000297f <mount_volume+0x2cd>
c0002942:	8d 46 34             	lea    eax,[esi+0x34]
c0002945:	e8 b3 f6 ff ff       	call   c0001ffd <ld_dword>
c000294a:	3d 52 52 61 41       	cmp    eax,0x41615252
c000294f:	75 2e                	jne    c000297f <mount_volume+0x2cd>
c0002951:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002957:	e8 a1 f6 ff ff       	call   c0001ffd <ld_dword>
c000295c:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002961:	75 1c                	jne    c000297f <mount_volume+0x2cd>
c0002963:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002969:	e8 8f f6 ff ff       	call   c0001ffd <ld_dword>
c000296e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002971:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002977:	e8 81 f6 ff ff       	call   c0001ffd <ld_dword>
c000297c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000297f:	88 1e                	mov    BYTE PTR [esi],bl
c0002981:	66 a1 80 e4 02 c0    	mov    ax,ds:0xc002e480
c0002987:	31 db                	xor    ebx,ebx
c0002989:	40                   	inc    eax
c000298a:	66 a3 80 e4 02 c0    	mov    ds:0xc002e480,ax
c0002990:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002994:	eb 0f                	jmp    c00029a5 <mount_volume+0x2f3>
c0002996:	3d f6 0f 00 00       	cmp    eax,0xff6
c000299b:	19 db                	sbb    ebx,ebx
c000299d:	83 c3 02             	add    ebx,0x2
c00029a0:	e9 d8 fe ff ff       	jmp    c000287d <mount_volume+0x1cb>
c00029a5:	83 c4 2c             	add    esp,0x2c
c00029a8:	89 d8                	mov    eax,ebx
c00029aa:	5b                   	pop    ebx
c00029ab:	5e                   	pop    esi
c00029ac:	5f                   	pop    edi
c00029ad:	5d                   	pop    ebp
c00029ae:	c3                   	ret    

c00029af <put_fat>:
c00029af:	55                   	push   ebp
c00029b0:	bd 02 00 00 00       	mov    ebp,0x2
c00029b5:	57                   	push   edi
c00029b6:	56                   	push   esi
c00029b7:	53                   	push   ebx
c00029b8:	83 ec 1c             	sub    esp,0x1c
c00029bb:	83 fa 01             	cmp    edx,0x1
c00029be:	0f 86 38 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029c4:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00029c7:	0f 86 2f 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029cd:	89 c6                	mov    esi,eax
c00029cf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00029d2:	89 cf                	mov    edi,ecx
c00029d4:	89 d3                	mov    ebx,edx
c00029d6:	83 f8 02             	cmp    eax,0x2
c00029d9:	0f 84 b1 00 00 00    	je     c0002a90 <put_fat+0xe1>
c00029df:	83 f8 03             	cmp    eax,0x3
c00029e2:	0f 84 d5 00 00 00    	je     c0002abd <put_fat+0x10e>
c00029e8:	48                   	dec    eax
c00029e9:	0f 85 0d 01 00 00    	jne    c0002afc <put_fat+0x14d>
c00029ef:	89 d1                	mov    ecx,edx
c00029f1:	89 f0                	mov    eax,esi
c00029f3:	d1 e9                	shr    ecx,1
c00029f5:	01 d1                	add    ecx,edx
c00029f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029fb:	89 ca                	mov    edx,ecx
c00029fd:	c1 ea 09             	shr    edx,0x9
c0002a00:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a03:	e8 4d fb ff ff       	call   c0002555 <move_window>
c0002a08:	85 c0                	test   eax,eax
c0002a0a:	89 c5                	mov    ebp,eax
c0002a0c:	0f 85 ea 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a16:	8d 46 34             	lea    eax,[esi+0x34]
c0002a19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002a1d:	8d 41 01             	lea    eax,[ecx+0x1]
c0002a20:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002a26:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2a:	83 e3 01             	and    ebx,0x1
c0002a2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a31:	89 f8                	mov    eax,edi
c0002a33:	74 11                	je     c0002a46 <put_fat+0x97>
c0002a35:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002a37:	89 f8                	mov    eax,edi
c0002a39:	c1 e0 04             	shl    eax,0x4
c0002a3c:	25 f0 0f 00 00       	and    eax,0xff0
c0002a41:	83 e2 0f             	and    edx,0xf
c0002a44:	09 d0                	or     eax,edx
c0002a46:	88 01                	mov    BYTE PTR [ecx],al
c0002a48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a4c:	89 f0                	mov    eax,esi
c0002a4e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a52:	c1 ea 09             	shr    edx,0x9
c0002a55:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a58:	e8 f8 fa ff ff       	call   c0002555 <move_window>
c0002a5d:	85 c0                	test   eax,eax
c0002a5f:	89 c5                	mov    ebp,eax
c0002a61:	0f 85 95 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a6b:	25 ff 01 00 00       	and    eax,0x1ff
c0002a70:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a74:	85 db                	test   ebx,ebx
c0002a76:	74 07                	je     c0002a7f <put_fat+0xd0>
c0002a78:	c1 ef 04             	shr    edi,0x4
c0002a7b:	89 f9                	mov    ecx,edi
c0002a7d:	eb 0d                	jmp    c0002a8c <put_fat+0xdd>
c0002a7f:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a81:	c1 ef 08             	shr    edi,0x8
c0002a84:	83 e7 0f             	and    edi,0xf
c0002a87:	83 e1 f0             	and    ecx,0xfffffff0
c0002a8a:	09 f9                	or     ecx,edi
c0002a8c:	88 08                	mov    BYTE PTR [eax],cl
c0002a8e:	eb 27                	jmp    c0002ab7 <put_fat+0x108>
c0002a90:	c1 ea 08             	shr    edx,0x8
c0002a93:	89 f0                	mov    eax,esi
c0002a95:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a98:	e8 b8 fa ff ff       	call   c0002555 <move_window>
c0002a9d:	85 c0                	test   eax,eax
c0002a9f:	89 c5                	mov    ebp,eax
c0002aa1:	75 59                	jne    c0002afc <put_fat+0x14d>
c0002aa3:	01 db                	add    ebx,ebx
c0002aa5:	0f b7 d7             	movzx  edx,di
c0002aa8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002aae:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002ab2:	e8 5e f5 ff ff       	call   c0002015 <st_word>
c0002ab7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002abb:	eb 3f                	jmp    c0002afc <put_fat+0x14d>
c0002abd:	c1 ea 07             	shr    edx,0x7
c0002ac0:	89 f0                	mov    eax,esi
c0002ac2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002ac5:	e8 8b fa ff ff       	call   c0002555 <move_window>
c0002aca:	85 c0                	test   eax,eax
c0002acc:	89 c5                	mov    ebp,eax
c0002ace:	75 2c                	jne    c0002afc <put_fat+0x14d>
c0002ad0:	c1 e3 02             	shl    ebx,0x2
c0002ad3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ad9:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002adf:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002ae3:	89 d8                	mov    eax,ebx
c0002ae5:	e8 13 f5 ff ff       	call   c0001ffd <ld_dword>
c0002aea:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aef:	09 f8                	or     eax,edi
c0002af1:	89 c2                	mov    edx,eax
c0002af3:	89 d8                	mov    eax,ebx
c0002af5:	e8 1f f5 ff ff       	call   c0002019 <st_dword>
c0002afa:	eb bb                	jmp    c0002ab7 <put_fat+0x108>
c0002afc:	83 c4 1c             	add    esp,0x1c
c0002aff:	89 e8                	mov    eax,ebp
c0002b01:	5b                   	pop    ebx
c0002b02:	5e                   	pop    esi
c0002b03:	5f                   	pop    edi
c0002b04:	5d                   	pop    ebp
c0002b05:	c3                   	ret    

c0002b06 <dir_clear>:
c0002b06:	55                   	push   ebp
c0002b07:	57                   	push   edi
c0002b08:	56                   	push   esi
c0002b09:	89 c6                	mov    esi,eax
c0002b0b:	53                   	push   ebx
c0002b0c:	83 ec 1c             	sub    esp,0x1c
c0002b0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002b13:	e8 da f9 ff ff       	call   c00024f2 <sync_window>
c0002b18:	85 c0                	test   eax,eax
c0002b1a:	0f 85 c1 00 00 00    	jne    c0002be1 <dir_clear+0xdb>
c0002b20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b24:	89 f0                	mov    eax,esi
c0002b26:	e8 1b f7 ff ff       	call   c0002246 <clst2sect>
c0002b2b:	31 d2                	xor    edx,edx
c0002b2d:	b9 00 02 00 00       	mov    ecx,0x200
c0002b32:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002b35:	89 c5                	mov    ebp,eax
c0002b37:	8d 46 34             	lea    eax,[esi+0x34]
c0002b3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b3e:	e8 ee f4 ff ff       	call   c0002031 <mem_set>
c0002b43:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b47:	b8 00 80 00 00       	mov    eax,0x8000
c0002b4c:	c1 e3 09             	shl    ebx,0x9
c0002b4f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b55:	0f 47 d8             	cmova  ebx,eax
c0002b58:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b5e:	76 16                	jbe    c0002b76 <dir_clear+0x70>
c0002b60:	83 ec 0c             	sub    esp,0xc
c0002b63:	53                   	push   ebx
c0002b64:	e8 cb 32 00 00       	call   c0005e34 <ff_memalloc>
c0002b69:	83 c4 10             	add    esp,0x10
c0002b6c:	85 c0                	test   eax,eax
c0002b6e:	89 c7                	mov    edi,eax
c0002b70:	75 76                	jne    c0002be8 <dir_clear+0xe2>
c0002b72:	d1 eb                	shr    ebx,1
c0002b74:	eb e2                	jmp    c0002b58 <dir_clear+0x52>
c0002b76:	31 db                	xor    ebx,ebx
c0002b78:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7c:	39 d8                	cmp    eax,ebx
c0002b7e:	76 53                	jbe    c0002bd3 <dir_clear+0xcd>
c0002b80:	6a 01                	push   0x1
c0002b82:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b85:	50                   	push   eax
c0002b86:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b8e:	50                   	push   eax
c0002b8f:	e8 27 f4 ff ff       	call   c0001fbb <disk_write>
c0002b94:	83 c4 10             	add    esp,0x10
c0002b97:	85 c0                	test   eax,eax
c0002b99:	75 38                	jne    c0002bd3 <dir_clear+0xcd>
c0002b9b:	43                   	inc    ebx
c0002b9c:	eb da                	jmp    c0002b78 <dir_clear+0x72>
c0002b9e:	52                   	push   edx
c0002b9f:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ba2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002ba6:	50                   	push   eax
c0002ba7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002bab:	57                   	push   edi
c0002bac:	50                   	push   eax
c0002bad:	e8 09 f4 ff ff       	call   c0001fbb <disk_write>
c0002bb2:	83 c4 10             	add    esp,0x10
c0002bb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bb9:	85 c0                	test   eax,eax
c0002bbb:	75 0a                	jne    c0002bc7 <dir_clear+0xc1>
c0002bbd:	01 d3                	add    ebx,edx
c0002bbf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bc3:	39 d8                	cmp    eax,ebx
c0002bc5:	77 d7                	ja     c0002b9e <dir_clear+0x98>
c0002bc7:	83 ec 0c             	sub    esp,0xc
c0002bca:	57                   	push   edi
c0002bcb:	e8 7c 32 00 00       	call   c0005e4c <ff_memfree>
c0002bd0:	83 c4 10             	add    esp,0x10
c0002bd3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bd7:	39 d8                	cmp    eax,ebx
c0002bd9:	0f 95 c0             	setne  al
c0002bdc:	0f b6 c0             	movzx  eax,al
c0002bdf:	eb 19                	jmp    c0002bfa <dir_clear+0xf4>
c0002be1:	b8 01 00 00 00       	mov    eax,0x1
c0002be6:	eb 12                	jmp    c0002bfa <dir_clear+0xf4>
c0002be8:	89 d9                	mov    ecx,ebx
c0002bea:	31 d2                	xor    edx,edx
c0002bec:	e8 40 f4 ff ff       	call   c0002031 <mem_set>
c0002bf1:	89 da                	mov    edx,ebx
c0002bf3:	31 db                	xor    ebx,ebx
c0002bf5:	c1 ea 09             	shr    edx,0x9
c0002bf8:	eb c5                	jmp    c0002bbf <dir_clear+0xb9>
c0002bfa:	83 c4 1c             	add    esp,0x1c
c0002bfd:	5b                   	pop    ebx
c0002bfe:	5e                   	pop    esi
c0002bff:	5f                   	pop    edi
c0002c00:	5d                   	pop    ebp
c0002c01:	c3                   	ret    

c0002c02 <create_name>:
c0002c02:	55                   	push   ebp
c0002c03:	89 c5                	mov    ebp,eax
c0002c05:	57                   	push   edi
c0002c06:	89 d7                	mov    edi,edx
c0002c08:	56                   	push   esi
c0002c09:	31 f6                	xor    esi,esi
c0002c0b:	53                   	push   ebx
c0002c0c:	83 ec 3c             	sub    esp,0x3c
c0002c0f:	8b 02                	mov    eax,DWORD PTR [edx]
c0002c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002c18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002c1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c1f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002c23:	e8 4d f4 ff ff       	call   c0002075 <tchar2uni>
c0002c28:	83 f8 ff             	cmp    eax,0xffffffff
c0002c2b:	89 c3                	mov    ebx,eax
c0002c2d:	75 0a                	jne    c0002c39 <create_name+0x37>
c0002c2f:	b8 06 00 00 00       	mov    eax,0x6
c0002c34:	e9 7c 02 00 00       	jmp    c0002eb5 <create_name+0x2b3>
c0002c39:	3d ff ff 00 00       	cmp    eax,0xffff
c0002c3e:	76 0c                	jbe    c0002c4c <create_name+0x4a>
c0002c40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002c44:	c1 e8 10             	shr    eax,0x10
c0002c47:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002c4b:	46                   	inc    esi
c0002c4c:	0f b7 d3             	movzx  edx,bx
c0002c4f:	89 d8                	mov    eax,ebx
c0002c51:	83 fa 1f             	cmp    edx,0x1f
c0002c54:	76 30                	jbe    c0002c86 <create_name+0x84>
c0002c56:	83 fa 2f             	cmp    edx,0x2f
c0002c59:	74 2b                	je     c0002c86 <create_name+0x84>
c0002c5b:	83 fa 5c             	cmp    edx,0x5c
c0002c5e:	74 35                	je     c0002c95 <create_name+0x93>
c0002c60:	83 fa 7f             	cmp    edx,0x7f
c0002c63:	77 0e                	ja     c0002c73 <create_name+0x71>
c0002c65:	b8 42 74 02 c0       	mov    eax,0xc0027442
c0002c6a:	e8 ef f3 ff ff       	call   c000205e <chk_chr>
c0002c6f:	85 c0                	test   eax,eax
c0002c71:	75 bc                	jne    c0002c2f <create_name+0x2d>
c0002c73:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c79:	77 b4                	ja     c0002c2f <create_name+0x2d>
c0002c7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c7f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c83:	46                   	inc    esi
c0002c84:	eb 99                	jmp    c0002c1f <create_name+0x1d>
c0002c86:	66 83 f8 1f          	cmp    ax,0x1f
c0002c8a:	b3 04                	mov    bl,0x4
c0002c8c:	76 1a                	jbe    c0002ca8 <create_name+0xa6>
c0002c8e:	eb 05                	jmp    c0002c95 <create_name+0x93>
c0002c90:	40                   	inc    eax
c0002c91:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c99:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c9c:	83 fa 2f             	cmp    edx,0x2f
c0002c9f:	74 ef                	je     c0002c90 <create_name+0x8e>
c0002ca1:	83 fa 5c             	cmp    edx,0x5c
c0002ca4:	74 ea                	je     c0002c90 <create_name+0x8e>
c0002ca6:	31 db                	xor    ebx,ebx
c0002ca8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002cac:	89 07                	mov    DWORD PTR [edi],eax
c0002cae:	85 f6                	test   esi,esi
c0002cb0:	74 16                	je     c0002cc8 <create_name+0xc6>
c0002cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cb6:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002cbb:	83 f8 20             	cmp    eax,0x20
c0002cbe:	74 05                	je     c0002cc5 <create_name+0xc3>
c0002cc0:	83 f8 2e             	cmp    eax,0x2e
c0002cc3:	75 03                	jne    c0002cc8 <create_name+0xc6>
c0002cc5:	4e                   	dec    esi
c0002cc6:	eb e6                	jmp    c0002cae <create_name+0xac>
c0002cc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ccc:	31 ff                	xor    edi,edi
c0002cce:	85 f6                	test   esi,esi
c0002cd0:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002cd6:	0f 84 53 ff ff ff    	je     c0002c2f <create_name+0x2d>
c0002cdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ce0:	8d 57 01             	lea    edx,[edi+0x1]
c0002ce3:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ce7:	83 f8 20             	cmp    eax,0x20
c0002cea:	75 04                	jne    c0002cf0 <create_name+0xee>
c0002cec:	89 d7                	mov    edi,edx
c0002cee:	eb ec                	jmp    c0002cdc <create_name+0xda>
c0002cf0:	85 ff                	test   edi,edi
c0002cf2:	75 05                	jne    c0002cf9 <create_name+0xf7>
c0002cf4:	83 f8 2e             	cmp    eax,0x2e
c0002cf7:	75 08                	jne    c0002d01 <create_name+0xff>
c0002cf9:	83 cb 03             	or     ebx,0x3
c0002cfc:	eb 03                	jmp    c0002d01 <create_name+0xff>
c0002cfe:	4e                   	dec    esi
c0002cff:	74 0c                	je     c0002d0d <create_name+0x10b>
c0002d01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d05:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002d0b:	75 f1                	jne    c0002cfe <create_name+0xfc>
c0002d0d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d12:	ba 20 00 00 00       	mov    edx,0x20
c0002d17:	8d 45 20             	lea    eax,[ebp+0x20]
c0002d1a:	e8 12 f3 ff ff       	call   c0002031 <mem_set>
c0002d1f:	31 c9                	xor    ecx,ecx
c0002d21:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002d29:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002d2e:	8d 47 01             	lea    eax,[edi+0x1]
c0002d31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d39:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002d3d:	85 c0                	test   eax,eax
c0002d3f:	89 c7                	mov    edi,eax
c0002d41:	0f 84 1d 01 00 00    	je     c0002e64 <create_name+0x262>
c0002d47:	83 f8 20             	cmp    eax,0x20
c0002d4a:	74 0b                	je     c0002d57 <create_name+0x155>
c0002d4c:	83 f8 2e             	cmp    eax,0x2e
c0002d4f:	75 0f                	jne    c0002d60 <create_name+0x15e>
c0002d51:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d55:	74 09                	je     c0002d60 <create_name+0x15e>
c0002d57:	83 cb 03             	or     ebx,0x3
c0002d5a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002d5e:	eb ce                	jmp    c0002d2e <create_name+0x12c>
c0002d60:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002d64:	73 06                	jae    c0002d6c <create_name+0x16a>
c0002d66:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d6a:	75 3a                	jne    c0002da6 <create_name+0x1a4>
c0002d6c:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002d71:	75 08                	jne    c0002d7b <create_name+0x179>
c0002d73:	83 cb 03             	or     ebx,0x3
c0002d76:	e9 e9 00 00 00       	jmp    c0002e64 <create_name+0x262>
c0002d7b:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d7f:	74 0d                	je     c0002d8e <create_name+0x18c>
c0002d81:	83 cb 03             	or     ebx,0x3
c0002d84:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d88:	0f 87 d6 00 00 00    	ja     c0002e64 <create_name+0x262>
c0002d8e:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d93:	b9 08 00 00 00       	mov    ecx,0x8
c0002d98:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002d9c:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002da4:	eb b4                	jmp    c0002d5a <create_name+0x158>
c0002da6:	0f b7 c7             	movzx  eax,di
c0002da9:	83 f8 7f             	cmp    eax,0x7f
c0002dac:	76 66                	jbe    c0002e14 <create_name+0x212>
c0002dae:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002db2:	89 d9                	mov    ecx,ebx
c0002db4:	83 c9 02             	or     ecx,0x2
c0002db7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dbb:	52                   	push   edx
c0002dbc:	52                   	push   edx
c0002dbd:	68 b5 01 00 00       	push   0x1b5
c0002dc2:	50                   	push   eax
c0002dc3:	e8 9c 30 00 00       	call   c0005e64 <ff_uni2oem>
c0002dc8:	83 c4 10             	add    esp,0x10
c0002dcb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002dcf:	a8 80                	test   al,0x80
c0002dd1:	89 c7                	mov    edi,eax
c0002dd3:	74 0c                	je     c0002de1 <create_name+0x1df>
c0002dd5:	83 e7 7f             	and    edi,0x7f
c0002dd8:	0f b6 bf 00 75 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffd8b00]
c0002ddf:	eb 2a                	jmp    c0002e0b <create_name+0x209>
c0002de1:	0f b7 c0             	movzx  eax,ax
c0002de4:	3d ff 00 00 00       	cmp    eax,0xff
c0002de9:	76 20                	jbe    c0002e0b <create_name+0x209>
c0002deb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002def:	4a                   	dec    edx
c0002df0:	39 ca                	cmp    edx,ecx
c0002df2:	77 0c                	ja     c0002e00 <create_name+0x1fe>
c0002df4:	83 cb 03             	or     ebx,0x3
c0002df7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002dfb:	e9 5a ff ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e00:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002e04:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e08:	41                   	inc    ecx
c0002e09:	eb 4d                	jmp    c0002e58 <create_name+0x256>
c0002e0b:	66 85 ff             	test   di,di
c0002e0e:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e12:	74 19                	je     c0002e2d <create_name+0x22b>
c0002e14:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002e18:	0f b7 d7             	movzx  edx,di
c0002e1b:	b8 4b 74 02 c0       	mov    eax,0xc002744b
c0002e20:	e8 39 f2 ff ff       	call   c000205e <chk_chr>
c0002e25:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	74 0a                	je     c0002e37 <create_name+0x235>
c0002e2d:	83 cb 03             	or     ebx,0x3
c0002e30:	bf 5f 00 00 00       	mov    edi,0x5f
c0002e35:	eb 21                	jmp    c0002e58 <create_name+0x256>
c0002e37:	8d 47 bf             	lea    eax,[edi-0x41]
c0002e3a:	66 83 f8 19          	cmp    ax,0x19
c0002e3e:	77 07                	ja     c0002e47 <create_name+0x245>
c0002e40:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e45:	eb 11                	jmp    c0002e58 <create_name+0x256>
c0002e47:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e4a:	66 83 f8 19          	cmp    ax,0x19
c0002e4e:	77 08                	ja     c0002e58 <create_name+0x256>
c0002e50:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e55:	83 ef 20             	sub    edi,0x20
c0002e58:	89 f8                	mov    eax,edi
c0002e5a:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002e5e:	41                   	inc    ecx
c0002e5f:	e9 f6 fe ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e64:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002e68:	75 04                	jne    c0002e6e <create_name+0x26c>
c0002e6a:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002e6e:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002e73:	75 05                	jne    c0002e7a <create_name+0x278>
c0002e75:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e7e:	83 e0 0c             	and    eax,0xc
c0002e81:	83 f8 0c             	cmp    eax,0xc
c0002e84:	74 0c                	je     c0002e92 <create_name+0x290>
c0002e86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e8a:	83 e0 03             	and    eax,0x3
c0002e8d:	83 f8 03             	cmp    eax,0x3
c0002e90:	75 05                	jne    c0002e97 <create_name+0x295>
c0002e92:	83 cb 02             	or     ebx,0x2
c0002e95:	eb 19                	jmp    c0002eb0 <create_name+0x2ae>
c0002e97:	f6 c3 02             	test   bl,0x2
c0002e9a:	75 14                	jne    c0002eb0 <create_name+0x2ae>
c0002e9c:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002ea1:	74 03                	je     c0002ea6 <create_name+0x2a4>
c0002ea3:	83 cb 10             	or     ebx,0x10
c0002ea6:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002eab:	74 03                	je     c0002eb0 <create_name+0x2ae>
c0002ead:	83 cb 08             	or     ebx,0x8
c0002eb0:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002eb3:	31 c0                	xor    eax,eax
c0002eb5:	83 c4 3c             	add    esp,0x3c
c0002eb8:	5b                   	pop    ebx
c0002eb9:	5e                   	pop    esi
c0002eba:	5f                   	pop    edi
c0002ebb:	5d                   	pop    ebp
c0002ebc:	c3                   	ret    

c0002ebd <cmp_lfn>:
c0002ebd:	55                   	push   ebp
c0002ebe:	57                   	push   edi
c0002ebf:	89 d7                	mov    edi,edx
c0002ec1:	56                   	push   esi
c0002ec2:	53                   	push   ebx
c0002ec3:	83 ec 1c             	sub    esp,0x1c
c0002ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002eca:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ecd:	e8 1e f1 ff ff       	call   c0001ff0 <ld_word>
c0002ed2:	66 85 c0             	test   ax,ax
c0002ed5:	74 07                	je     c0002ede <cmp_lfn+0x21>
c0002ed7:	31 c0                	xor    eax,eax
c0002ed9:	e9 a4 00 00 00       	jmp    c0002f82 <cmp_lfn+0xc5>
c0002ede:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002ee0:	bd 01 00 00 00       	mov    ebp,0x1
c0002ee5:	31 c9                	xor    ecx,ecx
c0002ee7:	83 e3 3f             	and    ebx,0x3f
c0002eea:	4b                   	dec    ebx
c0002eeb:	6b db 0d             	imul   ebx,ebx,0xd
c0002eee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef2:	0f b6 81 80 75 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffd8a80]
c0002ef9:	01 f8                	add    eax,edi
c0002efb:	e8 f0 f0 ff ff       	call   c0001ff0 <ld_word>
c0002f00:	66 85 ed             	test   bp,bp
c0002f03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f07:	0f b7 f0             	movzx  esi,ax
c0002f0a:	74 44                	je     c0002f50 <cmp_lfn+0x93>
c0002f0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002f10:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002f16:	77 bf                	ja     c0002ed7 <cmp_lfn+0x1a>
c0002f18:	83 ec 0c             	sub    esp,0xc
c0002f1b:	0f b7 c6             	movzx  eax,si
c0002f1e:	50                   	push   eax
c0002f1f:	e8 54 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f24:	89 c5                	mov    ebp,eax
c0002f26:	8d 43 01             	lea    eax,[ebx+0x1]
c0002f29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002f2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f31:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f35:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f38:	e8 3b 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f3d:	83 c4 10             	add    esp,0x10
c0002f40:	39 c5                	cmp    ebp,eax
c0002f42:	75 93                	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f44:	89 f5                	mov    ebp,esi
c0002f46:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002f4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002f4e:	eb 0c                	jmp    c0002f5c <cmp_lfn+0x9f>
c0002f50:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002f56:	0f 85 7b ff ff ff    	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f5c:	41                   	inc    ecx
c0002f5d:	83 f9 0d             	cmp    ecx,0xd
c0002f60:	75 8c                	jne    c0002eee <cmp_lfn+0x31>
c0002f62:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f65:	74 16                	je     c0002f7d <cmp_lfn+0xc0>
c0002f67:	66 85 ed             	test   bp,bp
c0002f6a:	74 11                	je     c0002f7d <cmp_lfn+0xc0>
c0002f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f75:	0f 94 c0             	sete   al
c0002f78:	0f b6 c0             	movzx  eax,al
c0002f7b:	eb 05                	jmp    c0002f82 <cmp_lfn+0xc5>
c0002f7d:	b8 01 00 00 00       	mov    eax,0x1
c0002f82:	83 c4 1c             	add    esp,0x1c
c0002f85:	5b                   	pop    ebx
c0002f86:	5e                   	pop    esi
c0002f87:	5f                   	pop    edi
c0002f88:	5d                   	pop    ebp
c0002f89:	c3                   	ret    

c0002f8a <sync_fs>:
c0002f8a:	56                   	push   esi
c0002f8b:	53                   	push   ebx
c0002f8c:	53                   	push   ebx
c0002f8d:	89 c3                	mov    ebx,eax
c0002f8f:	e8 5e f5 ff ff       	call   c00024f2 <sync_window>
c0002f94:	85 c0                	test   eax,eax
c0002f96:	0f 85 9a 00 00 00    	jne    c0003036 <sync_fs+0xac>
c0002f9c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f9f:	75 7b                	jne    c000301c <sync_fs+0x92>
c0002fa1:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002fa5:	75 75                	jne    c000301c <sync_fs+0x92>
c0002fa7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002faa:	b9 00 02 00 00       	mov    ecx,0x200
c0002faf:	31 d2                	xor    edx,edx
c0002fb1:	89 f0                	mov    eax,esi
c0002fb3:	e8 79 f0 ff ff       	call   c0002031 <mem_set>
c0002fb8:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002fbe:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fc3:	e8 4d f0 ff ff       	call   c0002015 <st_word>
c0002fc8:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fcd:	89 f0                	mov    eax,esi
c0002fcf:	e8 45 f0 ff ff       	call   c0002019 <st_dword>
c0002fd4:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fda:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fdf:	e8 35 f0 ff ff       	call   c0002019 <st_dword>
c0002fe4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fe7:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fed:	e8 27 f0 ff ff       	call   c0002019 <st_dword>
c0002ff2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff5:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ffb:	e8 19 f0 ff ff       	call   c0002019 <st_dword>
c0003000:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0003003:	6a 01                	push   0x1
c0003005:	40                   	inc    eax
c0003006:	50                   	push   eax
c0003007:	56                   	push   esi
c0003008:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000300b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000300f:	50                   	push   eax
c0003010:	e8 a6 ef ff ff       	call   c0001fbb <disk_write>
c0003015:	83 c4 10             	add    esp,0x10
c0003018:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000301c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003020:	51                   	push   ecx
c0003021:	6a 00                	push   0x0
c0003023:	6a 00                	push   0x0
c0003025:	50                   	push   eax
c0003026:	e8 a6 ef ff ff       	call   c0001fd1 <disk_ioctl>
c000302b:	83 c4 10             	add    esp,0x10
c000302e:	85 c0                	test   eax,eax
c0003030:	0f 95 c0             	setne  al
c0003033:	0f b6 c0             	movzx  eax,al
c0003036:	5a                   	pop    edx
c0003037:	5b                   	pop    ebx
c0003038:	5e                   	pop    esi
c0003039:	c3                   	ret    

c000303a <create_partition>:
c000303a:	55                   	push   ebp
c000303b:	0f b6 c0             	movzx  eax,al
c000303e:	57                   	push   edi
c000303f:	56                   	push   esi
c0003040:	53                   	push   ebx
c0003041:	83 ec 40             	sub    esp,0x40
c0003044:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003048:	8d 44 24 30          	lea    eax,[esp+0x30]
c000304c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003050:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003054:	50                   	push   eax
c0003055:	6a 01                	push   0x1
c0003057:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000305b:	e8 71 ef ff ff       	call   c0001fd1 <disk_ioctl>
c0003060:	83 c4 10             	add    esp,0x10
c0003063:	85 c0                	test   eax,eax
c0003065:	0f 85 68 01 00 00    	jne    c00031d3 <create_partition+0x199>
c000306b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000306f:	b9 05 00 00 00       	mov    ecx,0x5
c0003074:	be 08 00 00 00       	mov    esi,0x8
c0003079:	89 f0                	mov    eax,esi
c000307b:	31 d2                	xor    edx,edx
c000307d:	0f b6 d8             	movzx  ebx,al
c0003080:	89 e8                	mov    eax,ebp
c0003082:	f7 f3                	div    ebx
c0003084:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003089:	76 0a                	jbe    c0003095 <create_partition+0x5b>
c000308b:	d1 e6                	shl    esi,1
c000308d:	49                   	dec    ecx
c000308e:	75 e9                	jne    c0003079 <create_partition+0x3f>
c0003090:	be ff ff ff ff       	mov    esi,0xffffffff
c0003095:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003099:	b9 00 02 00 00       	mov    ecx,0x200
c000309e:	31 d2                	xor    edx,edx
c00030a0:	e8 8c ef ff ff       	call   c0002031 <mem_set>
c00030a5:	b9 64 00 00 00       	mov    ecx,0x64
c00030aa:	89 e8                	mov    eax,ebp
c00030ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00030b4:	31 d2                	xor    edx,edx
c00030b6:	f7 f1                	div    ecx
c00030b8:	b9 3f 00 00 00       	mov    ecx,0x3f
c00030bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00030c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030c5:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030cb:	89 f0                	mov    eax,esi
c00030cd:	0f b6 c0             	movzx  eax,al
c00030d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030d4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00030d9:	0f 96 c0             	setbe  al
c00030dc:	31 d2                	xor    edx,edx
c00030de:	85 c9                	test   ecx,ecx
c00030e0:	0f 95 c2             	setne  dl
c00030e3:	85 c2                	test   edx,eax
c00030e5:	0f 84 b7 00 00 00    	je     c00031a2 <create_partition+0x168>
c00030eb:	39 e9                	cmp    ecx,ebp
c00030ed:	0f 83 af 00 00 00    	jae    c00031a2 <create_partition+0x168>
c00030f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030fb:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030fe:	83 fe 64             	cmp    esi,0x64
c0003101:	77 0b                	ja     c000310e <create_partition+0xd4>
c0003103:	74 07                	je     c000310c <create_partition+0xd2>
c0003105:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c000310a:	eb 02                	jmp    c000310e <create_partition+0xd4>
c000310c:	89 ee                	mov    esi,ebp
c000310e:	89 ca                	mov    edx,ecx
c0003110:	31 c0                	xor    eax,eax
c0003112:	01 f2                	add    edx,esi
c0003114:	0f 92 c0             	setb   al
c0003117:	39 ea                	cmp    edx,ebp
c0003119:	77 04                	ja     c000311f <create_partition+0xe5>
c000311b:	85 c0                	test   eax,eax
c000311d:	74 06                	je     c0003125 <create_partition+0xeb>
c000311f:	89 ee                	mov    esi,ebp
c0003121:	29 ce                	sub    esi,ecx
c0003123:	eb 04                	jmp    c0003129 <create_partition+0xef>
c0003125:	85 f6                	test   esi,esi
c0003127:	74 79                	je     c00031a2 <create_partition+0x168>
c0003129:	89 ca                	mov    edx,ecx
c000312b:	89 d8                	mov    eax,ebx
c000312d:	e8 e7 ee ff ff       	call   c0002019 <st_dword>
c0003132:	8d 43 04             	lea    eax,[ebx+0x4]
c0003135:	89 f2                	mov    edx,esi
c0003137:	e8 dd ee ff ff       	call   c0002019 <st_dword>
c000313c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003140:	bf 3f 00 00 00       	mov    edi,0x3f
c0003145:	31 d2                	xor    edx,edx
c0003147:	83 c3 10             	add    ebx,0x10
c000314a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000314e:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003151:	89 c8                	mov    eax,ecx
c0003153:	01 f1                	add    ecx,esi
c0003155:	f7 f7                	div    edi
c0003157:	89 d7                	mov    edi,edx
c0003159:	31 d2                	xor    edx,edx
c000315b:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000315f:	47                   	inc    edi
c0003160:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003163:	89 c2                	mov    edx,eax
c0003165:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003168:	c1 ea 02             	shr    edx,0x2
c000316b:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316e:	83 e2 c0             	and    edx,0xffffffc0
c0003171:	09 fa                	or     edx,edi
c0003173:	bf 3f 00 00 00       	mov    edi,0x3f
c0003178:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c000317b:	31 d2                	xor    edx,edx
c000317d:	f7 f7                	div    edi
c000317f:	89 d6                	mov    esi,edx
c0003181:	31 d2                	xor    edx,edx
c0003183:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003187:	46                   	inc    esi
c0003188:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c000318b:	89 c7                	mov    edi,eax
c000318d:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003190:	c1 ef 02             	shr    edi,0x2
c0003193:	83 e7 c0             	and    edi,0xffffffc0
c0003196:	09 fe                	or     esi,edi
c0003198:	89 f2                	mov    edx,esi
c000319a:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c000319d:	e9 32 ff ff ff       	jmp    c00030d4 <create_partition+0x9a>
c00031a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00031ab:	05 fe 01 00 00       	add    eax,0x1fe
c00031b0:	e8 60 ee ff ff       	call   c0002015 <st_word>
c00031b5:	6a 01                	push   0x1
c00031b7:	6a 00                	push   0x0
c00031b9:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00031bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00031c1:	e8 f5 ed ff ff       	call   c0001fbb <disk_write>
c00031c6:	83 c4 10             	add    esp,0x10
c00031c9:	85 c0                	test   eax,eax
c00031cb:	0f 95 c0             	setne  al
c00031ce:	0f b6 c0             	movzx  eax,al
c00031d1:	eb 05                	jmp    c00031d8 <create_partition+0x19e>
c00031d3:	b8 01 00 00 00       	mov    eax,0x1
c00031d8:	83 c4 3c             	add    esp,0x3c
c00031db:	5b                   	pop    ebx
c00031dc:	5e                   	pop    esi
c00031dd:	5f                   	pop    edi
c00031de:	5d                   	pop    ebp
c00031df:	c3                   	ret    

c00031e0 <get_fileinfo>:
c00031e0:	55                   	push   ebp
c00031e1:	57                   	push   edi
c00031e2:	56                   	push   esi
c00031e3:	53                   	push   ebx
c00031e4:	83 ec 1c             	sub    esp,0x1c
c00031e7:	8b 30                	mov    esi,DWORD PTR [eax]
c00031e9:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031ed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031f1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031f5:	0f 84 de 01 00 00    	je     c00033d9 <get_fileinfo+0x1f9>
c00031fb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031ff:	89 d3                	mov    ebx,edx
c0003201:	89 c6                	mov    esi,eax
c0003203:	74 7d                	je     c0003282 <get_fileinfo+0xa2>
c0003205:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000320d:	31 ff                	xor    edi,edi
c000320f:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003216:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000321a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000321e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003221:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003225:	85 c0                	test   eax,eax
c0003227:	89 c2                	mov    edx,eax
c0003229:	74 44                	je     c000326f <get_fileinfo+0x8f>
c000322b:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003230:	85 ed                	test   ebp,ebp
c0003232:	75 0d                	jne    c0003241 <get_fileinfo+0x61>
c0003234:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000323a:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000323f:	76 20                	jbe    c0003261 <get_fileinfo+0x81>
c0003241:	c1 e5 10             	shl    ebp,0x10
c0003244:	b9 ff 00 00 00       	mov    ecx,0xff
c0003249:	29 f9                	sub    ecx,edi
c000324b:	09 e8                	or     eax,ebp
c000324d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003251:	e8 f7 ee ff ff       	call   c000214d <put_utf>
c0003256:	0f b6 c0             	movzx  eax,al
c0003259:	85 c0                	test   eax,eax
c000325b:	74 10                	je     c000326d <get_fileinfo+0x8d>
c000325d:	01 c7                	add    edi,eax
c000325f:	31 d2                	xor    edx,edx
c0003261:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003266:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000326b:	eb a9                	jmp    c0003216 <get_fileinfo+0x36>
c000326d:	31 ff                	xor    edi,edi
c000326f:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003275:	b8 00 00 00 00       	mov    eax,0x0
c000327a:	0f 45 f8             	cmovne edi,eax
c000327d:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003282:	31 ff                	xor    edi,edi
c0003284:	31 c9                	xor    ecx,ecx
c0003286:	83 f9 0a             	cmp    ecx,0xa
c0003289:	0f 87 ac 00 00 00    	ja     c000333b <get_fileinfo+0x15b>
c000328f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003292:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003295:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003299:	83 f8 20             	cmp    eax,0x20
c000329c:	89 c2                	mov    edx,eax
c000329e:	0f 84 90 00 00 00    	je     c0003334 <get_fileinfo+0x154>
c00032a4:	83 f8 05             	cmp    eax,0x5
c00032a7:	75 05                	jne    c00032ae <get_fileinfo+0xce>
c00032a9:	ba e5 00 00 00       	mov    edx,0xe5
c00032ae:	83 fd 09             	cmp    ebp,0x9
c00032b1:	75 0b                	jne    c00032be <get_fileinfo+0xde>
c00032b3:	83 ff 0b             	cmp    edi,0xb
c00032b6:	77 06                	ja     c00032be <get_fileinfo+0xde>
c00032b8:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00032bd:	47                   	inc    edi
c00032be:	0f b7 c2             	movzx  eax,dx
c00032c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00032c5:	e8 a5 ed ff ff       	call   c000206f <dbc_1st>
c00032ca:	85 c0                	test   eax,eax
c00032cc:	74 2f                	je     c00032fd <get_fileinfo+0x11d>
c00032ce:	83 fd 08             	cmp    ebp,0x8
c00032d1:	74 2a                	je     c00032fd <get_fileinfo+0x11d>
c00032d3:	83 fd 0b             	cmp    ebp,0xb
c00032d6:	74 25                	je     c00032fd <get_fileinfo+0x11d>
c00032d8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032db:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032df:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c00032e3:	e8 8a ed ff ff       	call   c0002072 <dbc_2nd>
c00032e8:	85 c0                	test   eax,eax
c00032ea:	74 11                	je     c00032fd <get_fileinfo+0x11d>
c00032ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032f0:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032f3:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c00032f8:	c1 e0 08             	shl    eax,0x8
c00032fb:	09 c2                	or     edx,eax
c00032fd:	50                   	push   eax
c00032fe:	0f b7 d2             	movzx  edx,dx
c0003301:	50                   	push   eax
c0003302:	68 b5 01 00 00       	push   0x1b5
c0003307:	52                   	push   edx
c0003308:	e8 f3 2b 00 00       	call   c0005f00 <ff_oem2uni>
c000330d:	83 c4 10             	add    esp,0x10
c0003310:	0f b7 c0             	movzx  eax,ax
c0003313:	85 c0                	test   eax,eax
c0003315:	75 04                	jne    c000331b <get_fileinfo+0x13b>
c0003317:	31 ff                	xor    edi,edi
c0003319:	eb 20                	jmp    c000333b <get_fileinfo+0x15b>
c000331b:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000331f:	b9 0c 00 00 00       	mov    ecx,0xc
c0003324:	29 f9                	sub    ecx,edi
c0003326:	e8 22 ee ff ff       	call   c000214d <put_utf>
c000332b:	0f b6 c0             	movzx  eax,al
c000332e:	85 c0                	test   eax,eax
c0003330:	74 e5                	je     c0003317 <get_fileinfo+0x137>
c0003332:	01 c7                	add    edi,eax
c0003334:	89 e9                	mov    ecx,ebp
c0003336:	e9 4b ff ff ff       	jmp    c0003286 <get_fileinfo+0xa6>
c000333b:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003340:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003344:	75 5f                	jne    c00033a5 <get_fileinfo+0x1c5>
c0003346:	85 ff                	test   edi,edi
c0003348:	75 0b                	jne    c0003355 <get_fileinfo+0x175>
c000334a:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000334e:	ba 01 00 00 00       	mov    edx,0x1
c0003353:	eb 3e                	jmp    c0003393 <get_fileinfo+0x1b3>
c0003355:	bf 08 00 00 00       	mov    edi,0x8
c000335a:	31 d2                	xor    edx,edx
c000335c:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003362:	84 c0                	test   al,al
c0003364:	74 2d                	je     c0003393 <get_fileinfo+0x1b3>
c0003366:	66 83 f8 2e          	cmp    ax,0x2e
c000336a:	74 1b                	je     c0003387 <get_fileinfo+0x1a7>
c000336c:	8d 48 bf             	lea    ecx,[eax-0x41]
c000336f:	66 83 f9 19          	cmp    cx,0x19
c0003373:	77 17                	ja     c000338c <get_fileinfo+0x1ac>
c0003375:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003378:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000337b:	21 f9                	and    ecx,edi
c000337d:	80 e1 18             	and    cl,0x18
c0003380:	74 0a                	je     c000338c <get_fileinfo+0x1ac>
c0003382:	83 c0 20             	add    eax,0x20
c0003385:	eb 05                	jmp    c000338c <get_fileinfo+0x1ac>
c0003387:	bf 10 00 00 00       	mov    edi,0x10
c000338c:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003390:	42                   	inc    edx
c0003391:	eb c9                	jmp    c000335c <get_fileinfo+0x17c>
c0003393:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003398:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000339b:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000339f:	75 04                	jne    c00033a5 <get_fileinfo+0x1c5>
c00033a1:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00033a5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033a8:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00033ab:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00033ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033b1:	83 c0 1c             	add    eax,0x1c
c00033b4:	e8 44 ec ff ff       	call   c0001ffd <ld_dword>
c00033b9:	89 03                	mov    DWORD PTR [ebx],eax
c00033bb:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033be:	83 c0 16             	add    eax,0x16
c00033c1:	e8 2a ec ff ff       	call   c0001ff0 <ld_word>
c00033c6:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00033ca:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033cd:	83 c0 18             	add    eax,0x18
c00033d0:	e8 1b ec ff ff       	call   c0001ff0 <ld_word>
c00033d5:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033d9:	83 c4 1c             	add    esp,0x1c
c00033dc:	5b                   	pop    ebx
c00033dd:	5e                   	pop    esi
c00033de:	5f                   	pop    edi
c00033df:	5d                   	pop    ebp
c00033e0:	c3                   	ret    

c00033e1 <ld_clust.isra.0>:
c00033e1:	56                   	push   esi
c00033e2:	89 c6                	mov    esi,eax
c00033e4:	53                   	push   ebx
c00033e5:	89 d3                	mov    ebx,edx
c00033e7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033ea:	e8 01 ec ff ff       	call   c0001ff0 <ld_word>
c00033ef:	0f b7 c8             	movzx  ecx,ax
c00033f2:	89 f0                	mov    eax,esi
c00033f4:	3c 03                	cmp    al,0x3
c00033f6:	75 0d                	jne    c0003405 <ld_clust.isra.0+0x24>
c00033f8:	8d 43 14             	lea    eax,[ebx+0x14]
c00033fb:	e8 f0 eb ff ff       	call   c0001ff0 <ld_word>
c0003400:	c1 e0 10             	shl    eax,0x10
c0003403:	09 c1                	or     ecx,eax
c0003405:	5b                   	pop    ebx
c0003406:	89 c8                	mov    eax,ecx
c0003408:	5e                   	pop    esi
c0003409:	c3                   	ret    

c000340a <st_clust.isra.1>:
c000340a:	56                   	push   esi
c000340b:	89 c6                	mov    esi,eax
c000340d:	53                   	push   ebx
c000340e:	89 d3                	mov    ebx,edx
c0003410:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003413:	0f b7 d1             	movzx  edx,cx
c0003416:	e8 fa eb ff ff       	call   c0002015 <st_word>
c000341b:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000341e:	75 0f                	jne    c000342f <st_clust.isra.1+0x25>
c0003420:	8d 43 14             	lea    eax,[ebx+0x14]
c0003423:	5b                   	pop    ebx
c0003424:	c1 e9 10             	shr    ecx,0x10
c0003427:	89 ca                	mov    edx,ecx
c0003429:	5e                   	pop    esi
c000342a:	e9 e6 eb ff ff       	jmp    c0002015 <st_word>
c000342f:	5b                   	pop    ebx
c0003430:	5e                   	pop    esi
c0003431:	c3                   	ret    

c0003432 <get_fat.isra.2>:
c0003432:	83 fa 01             	cmp    edx,0x1
c0003435:	b9 01 00 00 00       	mov    ecx,0x1
c000343a:	0f 86 f4 00 00 00    	jbe    c0003534 <get_fat.isra.2+0x102>
c0003440:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003443:	0f 83 eb 00 00 00    	jae    c0003534 <get_fat.isra.2+0x102>
c0003449:	55                   	push   ebp
c000344a:	57                   	push   edi
c000344b:	56                   	push   esi
c000344c:	89 c6                	mov    esi,eax
c000344e:	53                   	push   ebx
c000344f:	89 d3                	mov    ebx,edx
c0003451:	83 ec 0c             	sub    esp,0xc
c0003454:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003457:	83 f8 02             	cmp    eax,0x2
c000345a:	74 79                	je     c00034d5 <get_fat.isra.2+0xa3>
c000345c:	83 f8 03             	cmp    eax,0x3
c000345f:	0f 84 97 00 00 00    	je     c00034fc <get_fat.isra.2+0xca>
c0003465:	48                   	dec    eax
c0003466:	0f 85 be 00 00 00    	jne    c000352a <get_fat.isra.2+0xf8>
c000346c:	89 d7                	mov    edi,edx
c000346e:	89 f0                	mov    eax,esi
c0003470:	d1 ef                	shr    edi,1
c0003472:	01 d7                	add    edi,edx
c0003474:	89 fa                	mov    edx,edi
c0003476:	c1 ea 09             	shr    edx,0x9
c0003479:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000347c:	e8 d4 f0 ff ff       	call   c0002555 <move_window>
c0003481:	85 c0                	test   eax,eax
c0003483:	74 08                	je     c000348d <get_fat.isra.2+0x5b>
c0003485:	83 c9 ff             	or     ecx,0xffffffff
c0003488:	e9 9d 00 00 00       	jmp    c000352a <get_fat.isra.2+0xf8>
c000348d:	8d 6f 01             	lea    ebp,[edi+0x1]
c0003490:	89 f0                	mov    eax,esi
c0003492:	89 ea                	mov    edx,ebp
c0003494:	81 e7 ff 01 00 00    	and    edi,0x1ff
c000349a:	c1 ea 09             	shr    edx,0x9
c000349d:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00034a2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034a5:	e8 ab f0 ff ff       	call   c0002555 <move_window>
c00034aa:	85 c0                	test   eax,eax
c00034ac:	75 d7                	jne    c0003485 <get_fat.isra.2+0x53>
c00034ae:	89 f8                	mov    eax,edi
c00034b0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00034b6:	0f b6 f8             	movzx  edi,al
c00034b9:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00034be:	c1 e0 08             	shl    eax,0x8
c00034c1:	09 f8                	or     eax,edi
c00034c3:	89 c1                	mov    ecx,eax
c00034c5:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00034cb:	80 e3 01             	and    bl,0x1
c00034ce:	74 5a                	je     c000352a <get_fat.isra.2+0xf8>
c00034d0:	c1 e8 04             	shr    eax,0x4
c00034d3:	eb 53                	jmp    c0003528 <get_fat.isra.2+0xf6>
c00034d5:	c1 ea 08             	shr    edx,0x8
c00034d8:	89 f0                	mov    eax,esi
c00034da:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034dd:	e8 73 f0 ff ff       	call   c0002555 <move_window>
c00034e2:	85 c0                	test   eax,eax
c00034e4:	75 9f                	jne    c0003485 <get_fat.isra.2+0x53>
c00034e6:	01 db                	add    ebx,ebx
c00034e8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00034ee:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00034f2:	e8 f9 ea ff ff       	call   c0001ff0 <ld_word>
c00034f7:	0f b7 c8             	movzx  ecx,ax
c00034fa:	eb 2e                	jmp    c000352a <get_fat.isra.2+0xf8>
c00034fc:	c1 ea 07             	shr    edx,0x7
c00034ff:	89 f0                	mov    eax,esi
c0003501:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003504:	e8 4c f0 ff ff       	call   c0002555 <move_window>
c0003509:	85 c0                	test   eax,eax
c000350b:	0f 85 74 ff ff ff    	jne    c0003485 <get_fat.isra.2+0x53>
c0003511:	c1 e3 02             	shl    ebx,0x2
c0003514:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c000351a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000351e:	e8 da ea ff ff       	call   c0001ffd <ld_dword>
c0003523:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003528:	89 c1                	mov    ecx,eax
c000352a:	83 c4 0c             	add    esp,0xc
c000352d:	89 c8                	mov    eax,ecx
c000352f:	5b                   	pop    ebx
c0003530:	5e                   	pop    esi
c0003531:	5f                   	pop    edi
c0003532:	5d                   	pop    ebp
c0003533:	c3                   	ret    
c0003534:	89 c8                	mov    eax,ecx
c0003536:	c3                   	ret    

c0003537 <dir_sdi>:
c0003537:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000353d:	0f 87 b6 00 00 00    	ja     c00035f9 <dir_sdi+0xc2>
c0003543:	55                   	push   ebp
c0003544:	57                   	push   edi
c0003545:	56                   	push   esi
c0003546:	53                   	push   ebx
c0003547:	89 d3                	mov    ebx,edx
c0003549:	83 ec 1c             	sub    esp,0x1c
c000354c:	f6 c2 1f             	test   dl,0x1f
c000354f:	74 0a                	je     c000355b <dir_sdi+0x24>
c0003551:	b8 02 00 00 00       	mov    eax,0x2
c0003556:	e9 96 00 00 00       	jmp    c00035f1 <dir_sdi+0xba>
c000355b:	89 c6                	mov    esi,eax
c000355d:	8b 28                	mov    ebp,DWORD PTR [eax]
c000355f:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003562:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003565:	85 ff                	test   edi,edi
c0003567:	75 21                	jne    c000358a <dir_sdi+0x53>
c0003569:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000356d:	76 07                	jbe    c0003576 <dir_sdi+0x3f>
c000356f:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003572:	85 c0                	test   eax,eax
c0003574:	75 12                	jne    c0003588 <dir_sdi+0x51>
c0003576:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000357a:	89 da                	mov    edx,ebx
c000357c:	c1 ea 05             	shr    edx,0x5
c000357f:	39 c2                	cmp    edx,eax
c0003581:	73 ce                	jae    c0003551 <dir_sdi+0x1a>
c0003583:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003586:	eb 3c                	jmp    c00035c4 <dir_sdi+0x8d>
c0003588:	89 c7                	mov    edi,eax
c000358a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000358e:	c1 e1 09             	shl    ecx,0x9
c0003591:	39 cb                	cmp    ebx,ecx
c0003593:	72 26                	jb     c00035bb <dir_sdi+0x84>
c0003595:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003599:	8b 06                	mov    eax,DWORD PTR [esi]
c000359b:	89 fa                	mov    edx,edi
c000359d:	e8 90 fe ff ff       	call   c0003432 <get_fat.isra.2>
c00035a2:	83 f8 ff             	cmp    eax,0xffffffff
c00035a5:	89 c7                	mov    edi,eax
c00035a7:	74 43                	je     c00035ec <dir_sdi+0xb5>
c00035a9:	83 f8 01             	cmp    eax,0x1
c00035ac:	76 a3                	jbe    c0003551 <dir_sdi+0x1a>
c00035ae:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00035b1:	76 9e                	jbe    c0003551 <dir_sdi+0x1a>
c00035b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035b7:	29 cb                	sub    ebx,ecx
c00035b9:	eb d6                	jmp    c0003591 <dir_sdi+0x5a>
c00035bb:	89 fa                	mov    edx,edi
c00035bd:	89 e8                	mov    eax,ebp
c00035bf:	e8 82 ec ff ff       	call   c0002246 <clst2sect>
c00035c4:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035c7:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00035ca:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00035cd:	85 d2                	test   edx,edx
c00035cf:	74 80                	je     c0003551 <dir_sdi+0x1a>
c00035d1:	89 d8                	mov    eax,ebx
c00035d3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035d9:	c1 e8 09             	shr    eax,0x9
c00035dc:	01 d0                	add    eax,edx
c00035de:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035e1:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c00035e5:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035e8:	31 c0                	xor    eax,eax
c00035ea:	eb 05                	jmp    c00035f1 <dir_sdi+0xba>
c00035ec:	b8 01 00 00 00       	mov    eax,0x1
c00035f1:	83 c4 1c             	add    esp,0x1c
c00035f4:	5b                   	pop    ebx
c00035f5:	5e                   	pop    esi
c00035f6:	5f                   	pop    edi
c00035f7:	5d                   	pop    ebp
c00035f8:	c3                   	ret    
c00035f9:	b8 02 00 00 00       	mov    eax,0x2
c00035fe:	c3                   	ret    

c00035ff <create_chain>:
c00035ff:	55                   	push   ebp
c0003600:	89 c5                	mov    ebp,eax
c0003602:	57                   	push   edi
c0003603:	89 d7                	mov    edi,edx
c0003605:	56                   	push   esi
c0003606:	53                   	push   ebx
c0003607:	83 ec 1c             	sub    esp,0x1c
c000360a:	85 d2                	test   edx,edx
c000360c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000360e:	75 0e                	jne    c000361e <create_chain+0x1f>
c0003610:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003613:	85 c9                	test   ecx,ecx
c0003615:	74 32                	je     c0003649 <create_chain+0x4a>
c0003617:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000361a:	77 32                	ja     c000364e <create_chain+0x4f>
c000361c:	eb 2b                	jmp    c0003649 <create_chain+0x4a>
c000361e:	89 d8                	mov    eax,ebx
c0003620:	e8 0d fe ff ff       	call   c0003432 <get_fat.isra.2>
c0003625:	83 f8 01             	cmp    eax,0x1
c0003628:	77 0a                	ja     c0003634 <create_chain+0x35>
c000362a:	b8 01 00 00 00       	mov    eax,0x1
c000362f:	e9 fd 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003634:	83 f8 ff             	cmp    eax,0xffffffff
c0003637:	0f 84 f1 00 00 00    	je     c000372e <create_chain+0x12f>
c000363d:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003640:	89 f9                	mov    ecx,edi
c0003642:	76 0a                	jbe    c000364e <create_chain+0x4f>
c0003644:	e9 e8 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003649:	b9 01 00 00 00       	mov    ecx,0x1
c000364e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003652:	75 07                	jne    c000365b <create_chain+0x5c>
c0003654:	31 c0                	xor    eax,eax
c0003656:	e9 d6 00 00 00       	jmp    c0003731 <create_chain+0x132>
c000365b:	39 f9                	cmp    ecx,edi
c000365d:	75 49                	jne    c00036a8 <create_chain+0xa9>
c000365f:	8d 71 01             	lea    esi,[ecx+0x1]
c0003662:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003665:	77 05                	ja     c000366c <create_chain+0x6d>
c0003667:	be 02 00 00 00       	mov    esi,0x2
c000366c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003670:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003673:	89 f2                	mov    edx,esi
c0003675:	e8 b8 fd ff ff       	call   c0003432 <get_fat.isra.2>
c000367a:	83 f8 01             	cmp    eax,0x1
c000367d:	0f 84 ae 00 00 00    	je     c0003731 <create_chain+0x132>
c0003683:	83 f8 ff             	cmp    eax,0xffffffff
c0003686:	0f 84 a5 00 00 00    	je     c0003731 <create_chain+0x132>
c000368c:	85 c0                	test   eax,eax
c000368e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003692:	74 10                	je     c00036a4 <create_chain+0xa5>
c0003694:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003697:	83 f8 01             	cmp    eax,0x1
c000369a:	76 0c                	jbe    c00036a8 <create_chain+0xa9>
c000369c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000369f:	0f 47 c8             	cmova  ecx,eax
c00036a2:	eb 04                	jmp    c00036a8 <create_chain+0xa9>
c00036a4:	85 f6                	test   esi,esi
c00036a6:	75 3b                	jne    c00036e3 <create_chain+0xe4>
c00036a8:	89 ce                	mov    esi,ecx
c00036aa:	46                   	inc    esi
c00036ab:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00036ae:	77 0a                	ja     c00036ba <create_chain+0xbb>
c00036b0:	83 f9 01             	cmp    ecx,0x1
c00036b3:	76 9f                	jbe    c0003654 <create_chain+0x55>
c00036b5:	be 02 00 00 00       	mov    esi,0x2
c00036ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00036c1:	89 f2                	mov    edx,esi
c00036c3:	e8 6a fd ff ff       	call   c0003432 <get_fat.isra.2>
c00036c8:	85 c0                	test   eax,eax
c00036ca:	74 17                	je     c00036e3 <create_chain+0xe4>
c00036cc:	83 f8 01             	cmp    eax,0x1
c00036cf:	74 60                	je     c0003731 <create_chain+0x132>
c00036d1:	83 f8 ff             	cmp    eax,0xffffffff
c00036d4:	74 5b                	je     c0003731 <create_chain+0x132>
c00036d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036da:	39 ce                	cmp    esi,ecx
c00036dc:	75 cc                	jne    c00036aa <create_chain+0xab>
c00036de:	e9 71 ff ff ff       	jmp    c0003654 <create_chain+0x55>
c00036e3:	83 c9 ff             	or     ecx,0xffffffff
c00036e6:	89 f2                	mov    edx,esi
c00036e8:	89 d8                	mov    eax,ebx
c00036ea:	e8 c0 f2 ff ff       	call   c00029af <put_fat>
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 0f                	jne    c0003702 <create_chain+0x103>
c00036f3:	85 ff                	test   edi,edi
c00036f5:	74 0b                	je     c0003702 <create_chain+0x103>
c00036f7:	89 f1                	mov    ecx,esi
c00036f9:	89 fa                	mov    edx,edi
c00036fb:	89 d8                	mov    eax,ebx
c00036fd:	e8 ad f2 ff ff       	call   c00029af <put_fat>
c0003702:	85 c0                	test   eax,eax
c0003704:	75 21                	jne    c0003727 <create_chain+0x128>
c0003706:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003709:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000370c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000370f:	8d 57 fe             	lea    edx,[edi-0x2]
c0003712:	39 d0                	cmp    eax,edx
c0003714:	77 04                	ja     c000371a <create_chain+0x11b>
c0003716:	48                   	dec    eax
c0003717:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000371a:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000371d:	83 c8 01             	or     eax,0x1
c0003720:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003723:	89 f0                	mov    eax,esi
c0003725:	eb 0a                	jmp    c0003731 <create_chain+0x132>
c0003727:	48                   	dec    eax
c0003728:	0f 85 fc fe ff ff    	jne    c000362a <create_chain+0x2b>
c000372e:	83 c8 ff             	or     eax,0xffffffff
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <remove_chain>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 d6                	mov    esi,edx
c000373e:	53                   	push   ebx
c000373f:	83 ec 0c             	sub    esp,0xc
c0003742:	83 fa 01             	cmp    edx,0x1
c0003745:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003747:	76 6a                	jbe    c00037b3 <remove_chain+0x7a>
c0003749:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000374c:	76 65                	jbe    c00037b3 <remove_chain+0x7a>
c000374e:	85 c9                	test   ecx,ecx
c0003750:	89 c5                	mov    ebp,eax
c0003752:	89 ca                	mov    edx,ecx
c0003754:	74 0e                	je     c0003764 <remove_chain+0x2b>
c0003756:	83 c9 ff             	or     ecx,0xffffffff
c0003759:	89 d8                	mov    eax,ebx
c000375b:	e8 4f f2 ff ff       	call   c00029af <put_fat>
c0003760:	85 c0                	test   eax,eax
c0003762:	75 5b                	jne    c00037bf <remove_chain+0x86>
c0003764:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003767:	89 f2                	mov    edx,esi
c0003769:	e8 c4 fc ff ff       	call   c0003432 <get_fat.isra.2>
c000376e:	85 c0                	test   eax,eax
c0003770:	89 c7                	mov    edi,eax
c0003772:	75 04                	jne    c0003778 <remove_chain+0x3f>
c0003774:	31 c0                	xor    eax,eax
c0003776:	eb 47                	jmp    c00037bf <remove_chain+0x86>
c0003778:	83 f8 01             	cmp    eax,0x1
c000377b:	74 36                	je     c00037b3 <remove_chain+0x7a>
c000377d:	83 f8 ff             	cmp    eax,0xffffffff
c0003780:	74 38                	je     c00037ba <remove_chain+0x81>
c0003782:	31 c9                	xor    ecx,ecx
c0003784:	89 f2                	mov    edx,esi
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 22 f2 ff ff       	call   c00029af <put_fat>
c000378d:	85 c0                	test   eax,eax
c000378f:	75 2e                	jne    c00037bf <remove_chain+0x86>
c0003791:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003797:	8d 4a fe             	lea    ecx,[edx-0x2]
c000379a:	39 c8                	cmp    eax,ecx
c000379c:	73 0d                	jae    c00037ab <remove_chain+0x72>
c000379e:	40                   	inc    eax
c000379f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00037a2:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00037a5:	83 c8 01             	or     eax,0x1
c00037a8:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00037ab:	39 fa                	cmp    edx,edi
c00037ad:	89 fe                	mov    esi,edi
c00037af:	77 b3                	ja     c0003764 <remove_chain+0x2b>
c00037b1:	eb c1                	jmp    c0003774 <remove_chain+0x3b>
c00037b3:	b8 02 00 00 00       	mov    eax,0x2
c00037b8:	eb 05                	jmp    c00037bf <remove_chain+0x86>
c00037ba:	b8 01 00 00 00       	mov    eax,0x1
c00037bf:	83 c4 0c             	add    esp,0xc
c00037c2:	5b                   	pop    ebx
c00037c3:	5e                   	pop    esi
c00037c4:	5f                   	pop    edi
c00037c5:	5d                   	pop    ebp
c00037c6:	c3                   	ret    

c00037c7 <dir_next>:
c00037c7:	55                   	push   ebp
c00037c8:	57                   	push   edi
c00037c9:	56                   	push   esi
c00037ca:	53                   	push   ebx
c00037cb:	83 ec 1c             	sub    esp,0x1c
c00037ce:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037d1:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037d3:	83 c7 20             	add    edi,0x20
c00037d6:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037dc:	76 07                	jbe    c00037e5 <dir_next+0x1e>
c00037de:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037e5:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037e8:	b9 04 00 00 00       	mov    ecx,0x4
c00037ed:	85 f6                	test   esi,esi
c00037ef:	0f 84 cd 00 00 00    	je     c00038c2 <dir_next+0xfb>
c00037f5:	89 c3                	mov    ebx,eax
c00037f7:	89 f8                	mov    eax,edi
c00037f9:	25 ff 01 00 00       	and    eax,0x1ff
c00037fe:	89 d1                	mov    ecx,edx
c0003800:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003804:	0f 85 a8 00 00 00    	jne    c00038b2 <dir_next+0xeb>
c000380a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000380d:	46                   	inc    esi
c000380e:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003811:	85 d2                	test   edx,edx
c0003813:	75 22                	jne    c0003837 <dir_next+0x70>
c0003815:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003819:	89 fa                	mov    edx,edi
c000381b:	c1 ea 05             	shr    edx,0x5
c000381e:	39 c2                	cmp    edx,eax
c0003820:	0f 82 8c 00 00 00    	jb     c00038b2 <dir_next+0xeb>
c0003826:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000382d:	b9 04 00 00 00       	mov    ecx,0x4
c0003832:	e9 8b 00 00 00       	jmp    c00038c2 <dir_next+0xfb>
c0003837:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000383b:	89 fe                	mov    esi,edi
c000383d:	c1 ee 09             	shr    esi,0x9
c0003840:	48                   	dec    eax
c0003841:	85 f0                	test   eax,esi
c0003843:	75 6d                	jne    c00038b2 <dir_next+0xeb>
c0003845:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003849:	89 e8                	mov    eax,ebp
c000384b:	e8 e2 fb ff ff       	call   c0003432 <get_fat.isra.2>
c0003850:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003854:	83 f8 01             	cmp    eax,0x1
c0003857:	89 c6                	mov    esi,eax
c0003859:	77 07                	ja     c0003862 <dir_next+0x9b>
c000385b:	b9 02 00 00 00       	mov    ecx,0x2
c0003860:	eb 60                	jmp    c00038c2 <dir_next+0xfb>
c0003862:	83 f8 ff             	cmp    eax,0xffffffff
c0003865:	75 07                	jne    c000386e <dir_next+0xa7>
c0003867:	b9 01 00 00 00       	mov    ecx,0x1
c000386c:	eb 54                	jmp    c00038c2 <dir_next+0xfb>
c000386e:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003871:	77 30                	ja     c00038a3 <dir_next+0xdc>
c0003873:	85 c9                	test   ecx,ecx
c0003875:	74 af                	je     c0003826 <dir_next+0x5f>
c0003877:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000387a:	89 d8                	mov    eax,ebx
c000387c:	e8 7e fd ff ff       	call   c00035ff <create_chain>
c0003881:	b9 07 00 00 00       	mov    ecx,0x7
c0003886:	85 c0                	test   eax,eax
c0003888:	89 c6                	mov    esi,eax
c000388a:	74 36                	je     c00038c2 <dir_next+0xfb>
c000388c:	83 f8 01             	cmp    eax,0x1
c000388f:	74 ca                	je     c000385b <dir_next+0x94>
c0003891:	83 f8 ff             	cmp    eax,0xffffffff
c0003894:	74 d1                	je     c0003867 <dir_next+0xa0>
c0003896:	89 c2                	mov    edx,eax
c0003898:	89 e8                	mov    eax,ebp
c000389a:	e8 67 f2 ff ff       	call   c0002b06 <dir_clear>
c000389f:	85 c0                	test   eax,eax
c00038a1:	75 c4                	jne    c0003867 <dir_next+0xa0>
c00038a3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00038a6:	89 f2                	mov    edx,esi
c00038a8:	89 e8                	mov    eax,ebp
c00038aa:	e8 97 e9 ff ff       	call   c0002246 <clst2sect>
c00038af:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00038b2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00038b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00038b9:	31 c9                	xor    ecx,ecx
c00038bb:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00038bf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00038c2:	83 c4 1c             	add    esp,0x1c
c00038c5:	89 c8                	mov    eax,ecx
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	5d                   	pop    ebp
c00038cb:	c3                   	ret    

c00038cc <dir_alloc>:
c00038cc:	55                   	push   ebp
c00038cd:	89 c5                	mov    ebp,eax
c00038cf:	57                   	push   edi
c00038d0:	89 d7                	mov    edi,edx
c00038d2:	56                   	push   esi
c00038d3:	31 d2                	xor    edx,edx
c00038d5:	53                   	push   ebx
c00038d6:	83 ec 0c             	sub    esp,0xc
c00038d9:	8b 30                	mov    esi,DWORD PTR [eax]
c00038db:	e8 57 fc ff ff       	call   c0003537 <dir_sdi>
c00038e0:	85 c0                	test   eax,eax
c00038e2:	75 3b                	jne    c000391f <dir_alloc+0x53>
c00038e4:	31 db                	xor    ebx,ebx
c00038e6:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038e9:	89 f0                	mov    eax,esi
c00038eb:	e8 65 ec ff ff       	call   c0002555 <move_window>
c00038f0:	85 c0                	test   eax,eax
c00038f2:	75 2b                	jne    c000391f <dir_alloc+0x53>
c00038f4:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038f7:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038fa:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003900:	74 04                	je     c0003906 <dir_alloc+0x3a>
c0003902:	85 d2                	test   edx,edx
c0003904:	75 07                	jne    c000390d <dir_alloc+0x41>
c0003906:	43                   	inc    ebx
c0003907:	39 fb                	cmp    ebx,edi
c0003909:	75 04                	jne    c000390f <dir_alloc+0x43>
c000390b:	eb 1c                	jmp    c0003929 <dir_alloc+0x5d>
c000390d:	31 db                	xor    ebx,ebx
c000390f:	ba 01 00 00 00       	mov    edx,0x1
c0003914:	89 e8                	mov    eax,ebp
c0003916:	e8 ac fe ff ff       	call   c00037c7 <dir_next>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c7                	je     c00038e6 <dir_alloc+0x1a>
c000391f:	83 f8 04             	cmp    eax,0x4
c0003922:	75 05                	jne    c0003929 <dir_alloc+0x5d>
c0003924:	b8 07 00 00 00       	mov    eax,0x7
c0003929:	83 c4 0c             	add    esp,0xc
c000392c:	5b                   	pop    ebx
c000392d:	5e                   	pop    esi
c000392e:	5f                   	pop    edi
c000392f:	5d                   	pop    ebp
c0003930:	c3                   	ret    

c0003931 <dir_read>:
c0003931:	55                   	push   ebp
c0003932:	57                   	push   edi
c0003933:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003938:	56                   	push   esi
c0003939:	be 04 00 00 00       	mov    esi,0x4
c000393e:	53                   	push   ebx
c000393f:	89 c3                	mov    ebx,eax
c0003941:	83 ec 1c             	sub    esp,0x1c
c0003944:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003948:	8b 28                	mov    ebp,DWORD PTR [eax]
c000394a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000394f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003952:	85 d2                	test   edx,edx
c0003954:	0f 84 e3 00 00 00    	je     c0003a3d <dir_read+0x10c>
c000395a:	89 e8                	mov    eax,ebp
c000395c:	e8 f4 eb ff ff       	call   c0002555 <move_window>
c0003961:	85 c0                	test   eax,eax
c0003963:	89 c6                	mov    esi,eax
c0003965:	0f 85 dd 00 00 00    	jne    c0003a48 <dir_read+0x117>
c000396b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000396e:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003971:	88 04 24             	mov    BYTE PTR [esp],al
c0003974:	85 c0                	test   eax,eax
c0003976:	0f 84 c7 00 00 00    	je     c0003a43 <dir_read+0x112>
c000397c:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000397f:	83 e1 3f             	and    ecx,0x3f
c0003982:	3d e5 00 00 00       	cmp    eax,0xe5
c0003987:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000398a:	0f 84 93 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003990:	83 f8 2e             	cmp    eax,0x2e
c0003993:	0f 84 8a 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003999:	0f b6 c9             	movzx  ecx,cl
c000399c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00039a0:	83 e1 df             	and    ecx,0xffffffdf
c00039a3:	83 f9 08             	cmp    ecx,0x8
c00039a6:	0f 94 c1             	sete   cl
c00039a9:	0f b6 c9             	movzx  ecx,cl
c00039ac:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00039b0:	75 71                	jne    c0003a23 <dir_read+0xf2>
c00039b2:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00039b7:	75 4a                	jne    c0003a03 <dir_read+0xd2>
c00039b9:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00039bd:	74 16                	je     c00039d5 <dir_read+0xa4>
c00039bf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039c2:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00039c9:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00039d0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039d3:	eb 0e                	jmp    c00039e3 <dir_read+0xb2>
c00039d5:	89 f9                	mov    ecx,edi
c00039d7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039dc:	0f b6 c9             	movzx  ecx,cl
c00039df:	39 c1                	cmp    ecx,eax
c00039e1:	75 45                	jne    c0003a28 <dir_read+0xf7>
c00039e3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039e7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ec:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039ef:	75 37                	jne    c0003a28 <dir_read+0xf7>
c00039f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039f4:	e8 6a e8 ff ff       	call   c0002263 <pick_lfn>
c00039f9:	85 c0                	test   eax,eax
c00039fb:	74 2b                	je     c0003a28 <dir_read+0xf7>
c00039fd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003a00:	4f                   	dec    edi
c0003a01:	eb 25                	jmp    c0003a28 <dir_read+0xf7>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	84 c0                	test   al,al
c0003a07:	75 11                	jne    c0003a1a <dir_read+0xe9>
c0003a09:	89 d0                	mov    eax,edx
c0003a0b:	e8 30 ea ff ff       	call   c0002440 <sum_sfn>
c0003a10:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003a14:	75 04                	jne    c0003a1a <dir_read+0xe9>
c0003a16:	31 f6                	xor    esi,esi
c0003a18:	eb 35                	jmp    c0003a4f <dir_read+0x11e>
c0003a1a:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a21:	eb 2c                	jmp    c0003a4f <dir_read+0x11e>
c0003a23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a28:	31 d2                	xor    edx,edx
c0003a2a:	89 d8                	mov    eax,ebx
c0003a2c:	e8 96 fd ff ff       	call   c00037c7 <dir_next>
c0003a31:	85 c0                	test   eax,eax
c0003a33:	89 c6                	mov    esi,eax
c0003a35:	0f 84 14 ff ff ff    	je     c000394f <dir_read+0x1e>
c0003a3b:	eb 0b                	jmp    c0003a48 <dir_read+0x117>
c0003a3d:	85 f6                	test   esi,esi
c0003a3f:	74 d5                	je     c0003a16 <dir_read+0xe5>
c0003a41:	eb 05                	jmp    c0003a48 <dir_read+0x117>
c0003a43:	be 04 00 00 00       	mov    esi,0x4
c0003a48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a4f:	83 c4 1c             	add    esp,0x1c
c0003a52:	89 f0                	mov    eax,esi
c0003a54:	5b                   	pop    ebx
c0003a55:	5e                   	pop    esi
c0003a56:	5f                   	pop    edi
c0003a57:	5d                   	pop    ebp
c0003a58:	c3                   	ret    

c0003a59 <dir_remove>:
c0003a59:	57                   	push   edi
c0003a5a:	56                   	push   esi
c0003a5b:	53                   	push   ebx
c0003a5c:	89 c3                	mov    ebx,eax
c0003a5e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a61:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a63:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a66:	83 fa ff             	cmp    edx,0xffffffff
c0003a69:	74 09                	je     c0003a74 <dir_remove+0x1b>
c0003a6b:	e8 c7 fa ff ff       	call   c0003537 <dir_sdi>
c0003a70:	85 c0                	test   eax,eax
c0003a72:	75 34                	jne    c0003aa8 <dir_remove+0x4f>
c0003a74:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a77:	89 f0                	mov    eax,esi
c0003a79:	e8 d7 ea ff ff       	call   c0002555 <move_window>
c0003a7e:	85 c0                	test   eax,eax
c0003a80:	75 1c                	jne    c0003a9e <dir_remove+0x45>
c0003a82:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a8c:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a8f:	73 17                	jae    c0003aa8 <dir_remove+0x4f>
c0003a91:	31 d2                	xor    edx,edx
c0003a93:	89 d8                	mov    eax,ebx
c0003a95:	e8 2d fd ff ff       	call   c00037c7 <dir_next>
c0003a9a:	85 c0                	test   eax,eax
c0003a9c:	74 d6                	je     c0003a74 <dir_remove+0x1b>
c0003a9e:	83 f8 04             	cmp    eax,0x4
c0003aa1:	75 05                	jne    c0003aa8 <dir_remove+0x4f>
c0003aa3:	b8 02 00 00 00       	mov    eax,0x2
c0003aa8:	5b                   	pop    ebx
c0003aa9:	5e                   	pop    esi
c0003aaa:	5f                   	pop    edi
c0003aab:	c3                   	ret    

c0003aac <dir_find>:
c0003aac:	55                   	push   ebp
c0003aad:	31 d2                	xor    edx,edx
c0003aaf:	57                   	push   edi
c0003ab0:	56                   	push   esi
c0003ab1:	53                   	push   ebx
c0003ab2:	89 c3                	mov    ebx,eax
c0003ab4:	83 ec 1c             	sub    esp,0x1c
c0003ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003abd:	89 d8                	mov    eax,ebx
c0003abf:	e8 73 fa ff ff       	call   c0003537 <dir_sdi>
c0003ac4:	85 c0                	test   eax,eax
c0003ac6:	89 c6                	mov    esi,eax
c0003ac8:	0f 85 22 01 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003ace:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003ad5:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003ada:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003adf:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ae6:	e8 6a ea ff ff       	call   c0002555 <move_window>
c0003aeb:	85 c0                	test   eax,eax
c0003aed:	89 c6                	mov    esi,eax
c0003aef:	0f 85 fb 00 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003af5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003af8:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003afb:	85 d2                	test   edx,edx
c0003afd:	89 d1                	mov    ecx,edx
c0003aff:	0f 84 e6 00 00 00    	je     c0003beb <dir_find+0x13f>
c0003b05:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003b08:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003b0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b10:	83 e0 3f             	and    eax,0x3f
c0003b13:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003b19:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003b1c:	0f 84 a8 00 00 00    	je     c0003bca <dir_find+0x11e>
c0003b22:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003b27:	0f b6 c0             	movzx  eax,al
c0003b2a:	74 0b                	je     c0003b37 <dir_find+0x8b>
c0003b2c:	83 f8 0f             	cmp    eax,0xf
c0003b2f:	0f 85 95 00 00 00    	jne    c0003bca <dir_find+0x11e>
c0003b35:	eb 05                	jmp    c0003b3c <dir_find+0x90>
c0003b37:	83 f8 0f             	cmp    eax,0xf
c0003b3a:	75 62                	jne    c0003b9e <dir_find+0xf2>
c0003b3c:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b40:	0f 85 90 00 00 00    	jne    c0003bd6 <dir_find+0x12a>
c0003b46:	f6 c1 40             	test   cl,0x40
c0003b49:	74 15                	je     c0003b60 <dir_find+0xb4>
c0003b4b:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003b4e:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003b54:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003b58:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b5b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b5e:	eb 11                	jmp    c0003b71 <dir_find+0xc5>
c0003b60:	89 e8                	mov    eax,ebp
c0003b62:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b67:	0f b6 d0             	movzx  edx,al
c0003b6a:	0f b6 c1             	movzx  eax,cl
c0003b6d:	39 c2                	cmp    edx,eax
c0003b6f:	75 65                	jne    c0003bd6 <dir_find+0x12a>
c0003b71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b75:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b7a:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003b7d:	75 57                	jne    c0003bd6 <dir_find+0x12a>
c0003b7f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b87:	89 fa                	mov    edx,edi
c0003b89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b8c:	e8 2c f3 ff ff       	call   c0002ebd <cmp_lfn>
c0003b91:	85 c0                	test   eax,eax
c0003b93:	74 41                	je     c0003bd6 <dir_find+0x12a>
c0003b95:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b99:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003b9c:	eb 38                	jmp    c0003bd6 <dir_find+0x12a>
c0003b9e:	89 e8                	mov    eax,ebp
c0003ba0:	84 c0                	test   al,al
c0003ba2:	75 0d                	jne    c0003bb1 <dir_find+0x105>
c0003ba4:	89 f8                	mov    eax,edi
c0003ba6:	e8 95 e8 ff ff       	call   c0002440 <sum_sfn>
c0003bab:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003baf:	74 3f                	je     c0003bf0 <dir_find+0x144>
c0003bb1:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003bb5:	75 13                	jne    c0003bca <dir_find+0x11e>
c0003bb7:	8d 53 20             	lea    edx,[ebx+0x20]
c0003bba:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bbf:	89 f8                	mov    eax,edi
c0003bc1:	e8 75 e4 ff ff       	call   c000203b <mem_cmp>
c0003bc6:	85 c0                	test   eax,eax
c0003bc8:	74 26                	je     c0003bf0 <dir_find+0x144>
c0003bca:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003bd1:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003bd6:	31 d2                	xor    edx,edx
c0003bd8:	89 d8                	mov    eax,ebx
c0003bda:	e8 e8 fb ff ff       	call   c00037c7 <dir_next>
c0003bdf:	85 c0                	test   eax,eax
c0003be1:	89 c6                	mov    esi,eax
c0003be3:	0f 84 f6 fe ff ff    	je     c0003adf <dir_find+0x33>
c0003be9:	eb 05                	jmp    c0003bf0 <dir_find+0x144>
c0003beb:	be 04 00 00 00       	mov    esi,0x4
c0003bf0:	83 c4 1c             	add    esp,0x1c
c0003bf3:	89 f0                	mov    eax,esi
c0003bf5:	5b                   	pop    ebx
c0003bf6:	5e                   	pop    esi
c0003bf7:	5f                   	pop    edi
c0003bf8:	5d                   	pop    ebp
c0003bf9:	c3                   	ret    

c0003bfa <follow_path>:
c0003bfa:	56                   	push   esi
c0003bfb:	53                   	push   ebx
c0003bfc:	89 c3                	mov    ebx,eax
c0003bfe:	83 ec 14             	sub    esp,0x14
c0003c01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003c05:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c0b:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003c0e:	83 fa 2f             	cmp    edx,0x2f
c0003c11:	75 07                	jne    c0003c1a <follow_path+0x20>
c0003c13:	40                   	inc    eax
c0003c14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c18:	eb ed                	jmp    c0003c07 <follow_path+0xd>
c0003c1a:	83 fa 5c             	cmp    edx,0x5c
c0003c1d:	74 f4                	je     c0003c13 <follow_path+0x19>
c0003c1f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003c26:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003c29:	77 3e                	ja     c0003c69 <follow_path+0x6f>
c0003c2b:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003c2f:	31 d2                	xor    edx,edx
c0003c31:	89 d8                	mov    eax,ebx
c0003c33:	e8 ff f8 ff ff       	call   c0003537 <dir_sdi>
c0003c38:	eb 57                	jmp    c0003c91 <follow_path+0x97>
c0003c3a:	89 d8                	mov    eax,ebx
c0003c3c:	e8 6b fe ff ff       	call   c0003aac <dir_find>
c0003c41:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c44:	85 c0                	test   eax,eax
c0003c46:	75 32                	jne    c0003c7a <follow_path+0x80>
c0003c48:	80 e2 04             	and    dl,0x4
c0003c4b:	75 44                	jne    c0003c91 <follow_path+0x97>
c0003c4d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c51:	74 39                	je     c0003c8c <follow_path+0x92>
c0003c53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c56:	25 ff 01 00 00       	and    eax,0x1ff
c0003c5b:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c5f:	8a 06                	mov    al,BYTE PTR [esi]
c0003c61:	e8 7b f7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003c66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c69:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c6d:	89 d8                	mov    eax,ebx
c0003c6f:	e8 8e ef ff ff       	call   c0002c02 <create_name>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 c2                	je     c0003c3a <follow_path+0x40>
c0003c78:	eb 17                	jmp    c0003c91 <follow_path+0x97>
c0003c7a:	83 f8 04             	cmp    eax,0x4
c0003c7d:	75 12                	jne    c0003c91 <follow_path+0x97>
c0003c7f:	80 e2 04             	and    dl,0x4
c0003c82:	ba 05 00 00 00       	mov    edx,0x5
c0003c87:	0f 44 c2             	cmove  eax,edx
c0003c8a:	eb 05                	jmp    c0003c91 <follow_path+0x97>
c0003c8c:	b8 05 00 00 00       	mov    eax,0x5
c0003c91:	83 c4 14             	add    esp,0x14
c0003c94:	5b                   	pop    ebx
c0003c95:	5e                   	pop    esi
c0003c96:	c3                   	ret    

c0003c97 <dir_register>:
c0003c97:	55                   	push   ebp
c0003c98:	57                   	push   edi
c0003c99:	56                   	push   esi
c0003c9a:	be 06 00 00 00       	mov    esi,0x6
c0003c9f:	53                   	push   ebx
c0003ca0:	83 ec 2c             	sub    esp,0x2c
c0003ca3:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ca6:	80 e2 a0             	and    dl,0xa0
c0003ca9:	0f 85 66 01 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003caf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003cb7:	8b 38                	mov    edi,DWORD PTR [eax]
c0003cb9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003cbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cc0:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003cc5:	74 06                	je     c0003ccd <dir_register+0x36>
c0003cc7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003ccb:	eb ef                	jmp    c0003cbc <dir_register+0x25>
c0003ccd:	89 c3                	mov    ebx,eax
c0003ccf:	b9 0c 00 00 00       	mov    ecx,0xc
c0003cd4:	8d 40 20             	lea    eax,[eax+0x20]
c0003cd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003cdb:	89 c2                	mov    edx,eax
c0003cdd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ce1:	e8 36 e3 ff ff       	call   c000201c <mem_cpy>
c0003ce6:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ceb:	74 48                	je     c0003d35 <dir_register+0x9e>
c0003ced:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cf1:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf6:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cf9:	55                   	push   ebp
c0003cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cfe:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003d02:	e8 77 e6 ff ff       	call   c000237e <gen_numname>
c0003d07:	58                   	pop    eax
c0003d08:	89 d8                	mov    eax,ebx
c0003d0a:	e8 9d fd ff ff       	call   c0003aac <dir_find>
c0003d0f:	85 c0                	test   eax,eax
c0003d11:	89 c6                	mov    esi,eax
c0003d13:	75 10                	jne    c0003d25 <dir_register+0x8e>
c0003d15:	45                   	inc    ebp
c0003d16:	83 fd 64             	cmp    ebp,0x64
c0003d19:	75 db                	jne    c0003cf6 <dir_register+0x5f>
c0003d1b:	be 07 00 00 00       	mov    esi,0x7
c0003d20:	e9 f0 00 00 00       	jmp    c0003e15 <dir_register+0x17e>
c0003d25:	83 f8 04             	cmp    eax,0x4
c0003d28:	0f 85 e7 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d2e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003d32:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003d35:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d3a:	bd 01 00 00 00       	mov    ebp,0x1
c0003d3f:	74 13                	je     c0003d54 <dir_register+0xbd>
c0003d41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d45:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d4a:	31 d2                	xor    edx,edx
c0003d4c:	83 c0 0c             	add    eax,0xc
c0003d4f:	f7 f1                	div    ecx
c0003d51:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d54:	89 ea                	mov    edx,ebp
c0003d56:	89 d8                	mov    eax,ebx
c0003d58:	e8 6f fb ff ff       	call   c00038cc <dir_alloc>
c0003d5d:	85 c0                	test   eax,eax
c0003d5f:	89 c6                	mov    esi,eax
c0003d61:	0f 85 ae 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d67:	4d                   	dec    ebp
c0003d68:	74 6b                	je     c0003dd5 <dir_register+0x13e>
c0003d6a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d6d:	89 e8                	mov    eax,ebp
c0003d6f:	c1 e0 05             	shl    eax,0x5
c0003d72:	29 c2                	sub    edx,eax
c0003d74:	89 d8                	mov    eax,ebx
c0003d76:	e8 bc f7 ff ff       	call   c0003537 <dir_sdi>
c0003d7b:	85 c0                	test   eax,eax
c0003d7d:	89 c6                	mov    esi,eax
c0003d7f:	0f 85 90 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d89:	e8 b2 e6 ff ff       	call   c0002440 <sum_sfn>
c0003d8e:	0f b6 c0             	movzx  eax,al
c0003d91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d95:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d98:	89 f8                	mov    eax,edi
c0003d9a:	e8 b6 e7 ff ff       	call   c0002555 <move_window>
c0003d9f:	85 c0                	test   eax,eax
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	75 70                	jne    c0003e15 <dir_register+0x17e>
c0003da5:	83 ec 0c             	sub    esp,0xc
c0003da8:	89 e8                	mov    eax,ebp
c0003daa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dad:	0f b6 c8             	movzx  ecx,al
c0003db0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003db3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003db7:	e8 27 e5 ff ff       	call   c00022e3 <put_lfn>
c0003dbc:	31 d2                	xor    edx,edx
c0003dbe:	89 d8                	mov    eax,ebx
c0003dc0:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dc4:	e8 fe f9 ff ff       	call   c00037c7 <dir_next>
c0003dc9:	83 c4 10             	add    esp,0x10
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	89 c6                	mov    esi,eax
c0003dd0:	75 43                	jne    c0003e15 <dir_register+0x17e>
c0003dd2:	4d                   	dec    ebp
c0003dd3:	75 c0                	jne    c0003d95 <dir_register+0xfe>
c0003dd5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003dd8:	89 f8                	mov    eax,edi
c0003dda:	e8 76 e7 ff ff       	call   c0002555 <move_window>
c0003ddf:	85 c0                	test   eax,eax
c0003de1:	89 c6                	mov    esi,eax
c0003de3:	75 30                	jne    c0003e15 <dir_register+0x17e>
c0003de5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003de8:	b9 20 00 00 00       	mov    ecx,0x20
c0003ded:	31 d2                	xor    edx,edx
c0003def:	e8 3d e2 ff ff       	call   c0002031 <mem_set>
c0003df4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e00:	e8 17 e2 ff ff       	call   c000201c <mem_cpy>
c0003e05:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003e08:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003e0b:	83 e0 18             	and    eax,0x18
c0003e0e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003e11:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003e15:	83 c4 2c             	add    esp,0x2c
c0003e18:	89 f0                	mov    eax,esi
c0003e1a:	5b                   	pop    ebx
c0003e1b:	5e                   	pop    esi
c0003e1c:	5f                   	pop    edi
c0003e1d:	5d                   	pop    ebp
c0003e1e:	c3                   	ret    

c0003e1f <f_mount>:
c0003e1f:	53                   	push   ebx
c0003e20:	83 ec 18             	sub    esp,0x18
c0003e23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003e27:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003e2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003e2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003e33:	e8 28 e6 ff ff       	call   c0002460 <get_ldnumber>
c0003e38:	89 c2                	mov    edx,eax
c0003e3a:	b8 0b 00 00 00       	mov    eax,0xb
c0003e3f:	85 d2                	test   edx,edx
c0003e41:	78 39                	js     c0003e7c <f_mount+0x5d>
c0003e43:	8b 04 95 a0 e4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1b60]
c0003e4a:	85 c0                	test   eax,eax
c0003e4c:	74 03                	je     c0003e51 <f_mount+0x32>
c0003e4e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e55:	85 c0                	test   eax,eax
c0003e57:	74 03                	je     c0003e5c <f_mount+0x3d>
c0003e59:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e60:	89 04 95 a0 e4 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1b60],eax
c0003e67:	31 c0                	xor    eax,eax
c0003e69:	84 db                	test   bl,bl
c0003e6b:	74 0f                	je     c0003e7c <f_mount+0x5d>
c0003e6d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e71:	31 c9                	xor    ecx,ecx
c0003e73:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e77:	e8 36 e8 ff ff       	call   c00026b2 <mount_volume>
c0003e7c:	83 c4 18             	add    esp,0x18
c0003e7f:	5b                   	pop    ebx
c0003e80:	c3                   	ret    

c0003e81 <f_open>:
c0003e81:	55                   	push   ebp
c0003e82:	b8 09 00 00 00       	mov    eax,0x9
c0003e87:	57                   	push   edi
c0003e88:	56                   	push   esi
c0003e89:	53                   	push   ebx
c0003e8a:	83 ec 5c             	sub    esp,0x5c
c0003e8d:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e95:	85 db                	test   ebx,ebx
c0003e97:	0f 84 9f 02 00 00    	je     c000413c <f_open+0x2bb>
c0003e9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ea1:	89 fd                	mov    ebp,edi
c0003ea3:	83 e5 3f             	and    ebp,0x3f
c0003ea6:	89 e8                	mov    eax,ebp
c0003ea8:	89 ee                	mov    esi,ebp
c0003eaa:	0f b6 c8             	movzx  ecx,al
c0003ead:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003eb1:	e8 fc e7 ff ff       	call   c00026b2 <mount_volume>
c0003eb6:	85 c0                	test   eax,eax
c0003eb8:	0f 85 78 02 00 00    	jne    c0004136 <f_open+0x2b5>
c0003ebe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec2:	83 ec 0c             	sub    esp,0xc
c0003ec5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ec9:	68 00 02 00 00       	push   0x200
c0003ece:	e8 61 1f 00 00       	call   c0005e34 <ff_memalloc>
c0003ed3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003ed7:	83 c4 10             	add    esp,0x10
c0003eda:	b8 11 00 00 00       	mov    eax,0x11
c0003edf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ee4:	0f 84 52 02 00 00    	je     c000413c <f_open+0x2bb>
c0003eea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ef2:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ef6:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ef9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003efd:	e8 f8 fc ff ff       	call   c0003bfa <follow_path>
c0003f02:	85 c0                	test   eax,eax
c0003f04:	75 0d                	jne    c0003f13 <f_open+0x92>
c0003f06:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003f0b:	ba 06 00 00 00       	mov    edx,0x6
c0003f10:	0f 45 c2             	cmovne eax,edx
c0003f13:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003f19:	0f 84 d5 00 00 00    	je     c0003ff4 <f_open+0x173>
c0003f1f:	85 c0                	test   eax,eax
c0003f21:	74 21                	je     c0003f44 <f_open+0xc3>
c0003f23:	83 f8 04             	cmp    eax,0x4
c0003f26:	0f 85 ef 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f30:	e8 62 fd ff ff       	call   c0003c97 <dir_register>
c0003f35:	85 c0                	test   eax,eax
c0003f37:	0f 85 de 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f3d:	83 cd 08             	or     ebp,0x8
c0003f40:	89 ee                	mov    esi,ebp
c0003f42:	eb 2c                	jmp    c0003f70 <f_open+0xef>
c0003f44:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f48:	b8 07 00 00 00       	mov    eax,0x7
c0003f4d:	80 e2 11             	and    dl,0x11
c0003f50:	0f 85 c5 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f56:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f5c:	b8 08 00 00 00       	mov    eax,0x8
c0003f61:	0f 85 b4 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f67:	83 e7 08             	and    edi,0x8
c0003f6a:	0f 84 b1 00 00 00    	je     c0004021 <f_open+0x1a0>
c0003f70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f74:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f78:	8a 00                	mov    al,BYTE PTR [eax]
c0003f7a:	89 ea                	mov    edx,ebp
c0003f7c:	e8 60 f4 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003f81:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f86:	89 c7                	mov    edi,eax
c0003f88:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f8b:	e8 89 e0 ff ff       	call   c0002019 <st_dword>
c0003f90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f94:	31 c9                	xor    ecx,ecx
c0003f96:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003fa2:	e8 63 f4 ff ff       	call   c000340a <st_clust.isra.1>
c0003fa7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003fab:	31 d2                	xor    edx,edx
c0003fad:	83 c0 1c             	add    eax,0x1c
c0003fb0:	e8 64 e0 ff ff       	call   c0002019 <st_dword>
c0003fb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fb9:	85 ff                	test   edi,edi
c0003fbb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003fbf:	74 60                	je     c0004021 <f_open+0x1a0>
c0003fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fc5:	31 c9                	xor    ecx,ecx
c0003fc7:	89 fa                	mov    edx,edi
c0003fc9:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003fcc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003fd0:	e8 64 f7 ff ff       	call   c0003739 <remove_chain>
c0003fd5:	85 c0                	test   eax,eax
c0003fd7:	0f 85 3e 01 00 00    	jne    c000411b <f_open+0x29a>
c0003fdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fe1:	89 ea                	mov    edx,ebp
c0003fe3:	4f                   	dec    edi
c0003fe4:	e8 6c e5 ff ff       	call   c0002555 <move_window>
c0003fe9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fed:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ff0:	85 c0                	test   eax,eax
c0003ff2:	eb 27                	jmp    c000401b <f_open+0x19a>
c0003ff4:	85 c0                	test   eax,eax
c0003ff6:	0f 85 1f 01 00 00    	jne    c000411b <f_open+0x29a>
c0003ffc:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004000:	b8 04 00 00 00       	mov    eax,0x4
c0004005:	f6 c2 10             	test   dl,0x10
c0004008:	0f 85 0d 01 00 00    	jne    c000411b <f_open+0x29a>
c000400e:	83 e7 02             	and    edi,0x2
c0004011:	74 0e                	je     c0004021 <f_open+0x1a0>
c0004013:	b8 07 00 00 00       	mov    eax,0x7
c0004018:	80 e2 01             	and    dl,0x1
c000401b:	0f 85 fa 00 00 00    	jne    c000411b <f_open+0x29a>
c0004021:	f7 c6 08 00 00 00    	test   esi,0x8
c0004027:	74 03                	je     c000402c <f_open+0x1ab>
c0004029:	83 ce 40             	or     esi,0x40
c000402c:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004030:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004034:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0004037:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000403a:	89 fa                	mov    edx,edi
c000403c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000403f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004042:	e8 9a f3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004047:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000404a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000404d:	e8 ab df ff ff       	call   c0001ffd <ld_dword>
c0004052:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004055:	31 d2                	xor    edx,edx
c0004057:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004059:	b9 00 02 00 00       	mov    ecx,0x200
c000405e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004061:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004065:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004069:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004070:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004077:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000407b:	89 f0                	mov    eax,esi
c000407d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004080:	89 f8                	mov    eax,edi
c0004082:	e8 aa df ff ff       	call   c0002031 <mem_set>
c0004087:	83 e6 20             	and    esi,0x20
c000408a:	75 07                	jne    c0004093 <f_open+0x212>
c000408c:	31 c0                	xor    eax,eax
c000408e:	e9 88 00 00 00       	jmp    c000411b <f_open+0x29a>
c0004093:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0004096:	85 f6                	test   esi,esi
c0004098:	74 f2                	je     c000408c <f_open+0x20b>
c000409a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000409d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040a1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00040a4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00040a8:	31 c0                	xor    eax,eax
c00040aa:	c1 e5 09             	shl    ebp,0x9
c00040ad:	85 c0                	test   eax,eax
c00040af:	75 23                	jne    c00040d4 <f_open+0x253>
c00040b1:	39 ee                	cmp    esi,ebp
c00040b3:	76 1f                	jbe    c00040d4 <f_open+0x253>
c00040b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040b7:	e8 76 f3 ff ff       	call   c0003432 <get_fat.isra.2>
c00040bc:	89 c2                	mov    edx,eax
c00040be:	b8 02 00 00 00       	mov    eax,0x2
c00040c3:	83 fa 01             	cmp    edx,0x1
c00040c6:	76 08                	jbe    c00040d0 <f_open+0x24f>
c00040c8:	31 c0                	xor    eax,eax
c00040ca:	83 fa ff             	cmp    edx,0xffffffff
c00040cd:	0f 94 c0             	sete   al
c00040d0:	29 ee                	sub    esi,ebp
c00040d2:	eb d9                	jmp    c00040ad <f_open+0x22c>
c00040d4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00040d7:	85 c0                	test   eax,eax
c00040d9:	75 40                	jne    c000411b <f_open+0x29a>
c00040db:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00040e1:	74 a9                	je     c000408c <f_open+0x20b>
c00040e3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00040e7:	89 e8                	mov    eax,ebp
c00040e9:	e8 58 e1 ff ff       	call   c0002246 <clst2sect>
c00040ee:	89 c2                	mov    edx,eax
c00040f0:	b8 02 00 00 00       	mov    eax,0x2
c00040f5:	85 d2                	test   edx,edx
c00040f7:	74 22                	je     c000411b <f_open+0x29a>
c00040f9:	c1 ee 09             	shr    esi,0x9
c00040fc:	8d 04 16             	lea    eax,[esi+edx*1]
c00040ff:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004102:	6a 01                	push   0x1
c0004104:	50                   	push   eax
c0004105:	57                   	push   edi
c0004106:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000410a:	50                   	push   eax
c000410b:	e8 95 de ff ff       	call   c0001fa5 <disk_read>
c0004110:	83 c4 10             	add    esp,0x10
c0004113:	85 c0                	test   eax,eax
c0004115:	0f 95 c0             	setne  al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000411f:	83 ec 0c             	sub    esp,0xc
c0004122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0004126:	e8 21 1d 00 00       	call   c0005e4c <ff_memfree>
c000412b:	83 c4 10             	add    esp,0x10
c000412e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004132:	85 c0                	test   eax,eax
c0004134:	74 06                	je     c000413c <f_open+0x2bb>
c0004136:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000413c:	83 c4 5c             	add    esp,0x5c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_read>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c000415b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004161:	89 d8                	mov    eax,ebx
c0004163:	e8 44 e3 ff ff       	call   c00024ac <validate>
c0004168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000416c:	85 c0                	test   eax,eax
c000416e:	0f 85 a5 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004174:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0004178:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000417c:	85 c0                	test   eax,eax
c000417e:	0f 85 95 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004184:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004188:	0f 84 83 01 00 00    	je     c0004311 <f_read+0x1cd>
c000418e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004191:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004194:	39 f8                	cmp    eax,edi
c0004196:	0f 46 f8             	cmovbe edi,eax
c0004199:	85 ff                	test   edi,edi
c000419b:	0f 84 78 01 00 00    	je     c0004319 <f_read+0x1d5>
c00041a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a4:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a9:	0f 85 2b 01 00 00    	jne    c00042da <f_read+0x196>
c00041af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b3:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b7:	89 c2                	mov    edx,eax
c00041b9:	c1 ea 09             	shr    edx,0x9
c00041bc:	4d                   	dec    ebp
c00041bd:	21 d5                	and    ebp,edx
c00041bf:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c3:	75 42                	jne    c0004207 <f_read+0xc3>
c00041c5:	85 c0                	test   eax,eax
c00041c7:	75 05                	jne    c00041ce <f_read+0x8a>
c00041c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041cc:	eb 0a                	jmp    c00041d8 <f_read+0x94>
c00041ce:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041d3:	e8 5a f2 ff ff       	call   c0003432 <get_fat.isra.2>
c00041d8:	83 f8 01             	cmp    eax,0x1
c00041db:	77 11                	ja     c00041ee <f_read+0xaa>
c00041dd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041e1:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c00041e9:	e9 2b 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c00041ee:	83 f8 ff             	cmp    eax,0xffffffff
c00041f1:	75 11                	jne    c0004204 <f_read+0xc0>
c00041f3:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041f7:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00041ff:	e9 15 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c0004204:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004207:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000420b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000420e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004212:	89 c8                	mov    eax,ecx
c0004214:	e8 2d e0 ff ff       	call   c0002246 <clst2sect>
c0004219:	85 c0                	test   eax,eax
c000421b:	74 c0                	je     c00041dd <f_read+0x99>
c000421d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004221:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004227:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000422a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000422e:	76 58                	jbe    c0004288 <f_read+0x144>
c0004230:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004234:	89 fe                	mov    esi,edi
c0004236:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000423a:	c1 ee 09             	shr    esi,0x9
c000423d:	01 f2                	add    edx,esi
c000423f:	39 c2                	cmp    edx,eax
c0004241:	76 06                	jbe    c0004249 <f_read+0x105>
c0004243:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004247:	89 c6                	mov    esi,eax
c0004249:	56                   	push   esi
c000424a:	55                   	push   ebp
c000424b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000424f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004253:	50                   	push   eax
c0004254:	e8 4c dd ff ff       	call   c0001fa5 <disk_read>
c0004259:	83 c4 10             	add    esp,0x10
c000425c:	85 c0                	test   eax,eax
c000425e:	75 93                	jne    c00041f3 <f_read+0xaf>
c0004260:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004264:	74 1d                	je     c0004283 <f_read+0x13f>
c0004266:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004269:	29 e8                	sub    eax,ebp
c000426b:	39 f0                	cmp    eax,esi
c000426d:	73 14                	jae    c0004283 <f_read+0x13f>
c000426f:	c1 e0 09             	shl    eax,0x9
c0004272:	b9 00 02 00 00       	mov    ecx,0x200
c0004277:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000427b:	8d 53 28             	lea    edx,[ebx+0x28]
c000427e:	e8 99 dd ff ff       	call   c000201c <mem_cpy>
c0004283:	c1 e6 09             	shl    esi,0x9
c0004286:	eb 75                	jmp    c00042fd <f_read+0x1b9>
c0004288:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000428b:	39 e8                	cmp    eax,ebp
c000428d:	74 48                	je     c00042d7 <f_read+0x193>
c000428f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004293:	8d 73 28             	lea    esi,[ebx+0x28]
c0004296:	74 22                	je     c00042ba <f_read+0x176>
c0004298:	6a 01                	push   0x1
c000429a:	50                   	push   eax
c000429b:	56                   	push   esi
c000429c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00042a0:	50                   	push   eax
c00042a1:	e8 15 dd ff ff       	call   c0001fbb <disk_write>
c00042a6:	83 c4 10             	add    esp,0x10
c00042a9:	85 c0                	test   eax,eax
c00042ab:	0f 85 42 ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042b1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042b4:	83 e0 7f             	and    eax,0x7f
c00042b7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ba:	6a 01                	push   0x1
c00042bc:	55                   	push   ebp
c00042bd:	56                   	push   esi
c00042be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042c6:	50                   	push   eax
c00042c7:	e8 d9 dc ff ff       	call   c0001fa5 <disk_read>
c00042cc:	83 c4 10             	add    esp,0x10
c00042cf:	85 c0                	test   eax,eax
c00042d1:	0f 85 1c ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042d7:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00042da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042dd:	be 00 02 00 00       	mov    esi,0x200
c00042e2:	25 ff 01 00 00       	and    eax,0x1ff
c00042e7:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042eb:	29 c6                	sub    esi,eax
c00042ed:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042f1:	39 f7                	cmp    edi,esi
c00042f3:	0f 46 f7             	cmovbe esi,edi
c00042f6:	89 f1                	mov    ecx,esi
c00042f8:	e8 1f dd ff ff       	call   c000201c <mem_cpy>
c00042fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004301:	29 f7                	sub    edi,esi
c0004303:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004307:	01 30                	add    DWORD PTR [eax],esi
c0004309:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000430c:	e9 88 fe ff ff       	jmp    c0004199 <f_read+0x55>
c0004311:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000431d:	83 c4 2c             	add    esp,0x2c
c0004320:	5b                   	pop    ebx
c0004321:	5e                   	pop    esi
c0004322:	5f                   	pop    edi
c0004323:	5d                   	pop    ebp
c0004324:	c3                   	ret    

c0004325 <f_write>:
c0004325:	55                   	push   ebp
c0004326:	57                   	push   edi
c0004327:	56                   	push   esi
c0004328:	53                   	push   ebx
c0004329:	83 ec 2c             	sub    esp,0x2c
c000432c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004330:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004334:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004338:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000433e:	89 d8                	mov    eax,ebx
c0004340:	e8 67 e1 ff ff       	call   c00024ac <validate>
c0004345:	85 c0                	test   eax,eax
c0004347:	89 c7                	mov    edi,eax
c0004349:	0f 85 13 02 00 00    	jne    c0004562 <f_write+0x23d>
c000434f:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004353:	85 ff                	test   edi,edi
c0004355:	0f 85 07 02 00 00    	jne    c0004562 <f_write+0x23d>
c000435b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435f:	0f 84 f8 01 00 00    	je     c000455d <f_write+0x238>
c0004365:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004368:	89 c1                	mov    ecx,eax
c000436a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000436e:	0f 83 ed 00 00 00    	jae    c0004461 <f_write+0x13c>
c0004374:	f7 d0                	not    eax
c0004376:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000437a:	e9 e2 00 00 00       	jmp    c0004461 <f_write+0x13c>
c000437f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004382:	a9 ff 01 00 00       	test   eax,0x1ff
c0004387:	0f 85 9b 01 00 00    	jne    c0004528 <f_write+0x203>
c000438d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004391:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0004395:	89 c2                	mov    edx,eax
c0004397:	c1 ea 09             	shr    edx,0x9
c000439a:	4d                   	dec    ebp
c000439b:	21 d5                	and    ebp,edx
c000439d:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00043a1:	0f 84 c7 00 00 00    	je     c000446e <f_write+0x149>
c00043a7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043ab:	0f 85 23 01 00 00    	jne    c00044d4 <f_write+0x1af>
c00043b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00043b5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043bc:	89 c8                	mov    eax,ecx
c00043be:	e8 83 de ff ff       	call   c0002246 <clst2sect>
c00043c3:	85 c0                	test   eax,eax
c00043c5:	0f 84 d3 00 00 00    	je     c000449e <f_write+0x179>
c00043cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00043cf:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043d7:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00043da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043de:	0f 86 1c 01 00 00    	jbe    c0004500 <f_write+0x1db>
c00043e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043ec:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043f0:	c1 ee 09             	shr    esi,0x9
c00043f3:	01 f2                	add    edx,esi
c00043f5:	39 c2                	cmp    edx,eax
c00043f7:	76 06                	jbe    c00043ff <f_write+0xda>
c00043f9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043fd:	89 c6                	mov    esi,eax
c00043ff:	56                   	push   esi
c0004400:	55                   	push   ebp
c0004401:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004405:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004409:	50                   	push   eax
c000440a:	e8 ac db ff ff       	call   c0001fbb <disk_write>
c000440f:	83 c4 10             	add    esp,0x10
c0004412:	85 c0                	test   eax,eax
c0004414:	0f 85 97 00 00 00    	jne    c00044b1 <f_write+0x18c>
c000441a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000441d:	29 ea                	sub    edx,ebp
c000441f:	39 f2                	cmp    edx,esi
c0004421:	73 1d                	jae    c0004440 <f_write+0x11b>
c0004423:	c1 e2 09             	shl    edx,0x9
c0004426:	b9 00 02 00 00       	mov    ecx,0x200
c000442b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000442f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004432:	e8 e5 db ff ff       	call   c000201c <mem_cpy>
c0004437:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000443a:	83 e0 7f             	and    eax,0x7f
c000443d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004440:	c1 e6 09             	shl    esi,0x9
c0004443:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004447:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000444b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000444f:	01 30                	add    DWORD PTR [eax],esi
c0004451:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004454:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004457:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000445a:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000445e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004461:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004466:	0f 85 13 ff ff ff    	jne    c000437f <f_write+0x5a>
c000446c:	eb 1d                	jmp    c000448b <f_write+0x166>
c000446e:	85 c0                	test   eax,eax
c0004470:	75 0b                	jne    c000447d <f_write+0x158>
c0004472:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004475:	31 d2                	xor    edx,edx
c0004477:	85 c0                	test   eax,eax
c0004479:	75 1e                	jne    c0004499 <f_write+0x174>
c000447b:	eb 03                	jmp    c0004480 <f_write+0x15b>
c000447d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004480:	89 d8                	mov    eax,ebx
c0004482:	e8 78 f1 ff ff       	call   c00035ff <create_chain>
c0004487:	85 c0                	test   eax,eax
c0004489:	75 0e                	jne    c0004499 <f_write+0x174>
c000448b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000448e:	83 c8 40             	or     eax,0x40
c0004491:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004494:	e9 c9 00 00 00       	jmp    c0004562 <f_write+0x23d>
c0004499:	83 f8 01             	cmp    eax,0x1
c000449c:	75 0e                	jne    c00044ac <f_write+0x187>
c000449e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044a2:	bf 02 00 00 00       	mov    edi,0x2
c00044a7:	e9 b6 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044ac:	83 f8 ff             	cmp    eax,0xffffffff
c00044af:	75 0e                	jne    c00044bf <f_write+0x19a>
c00044b1:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00044b5:	bf 01 00 00 00       	mov    edi,0x1
c00044ba:	e9 a3 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044bf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044c6:	0f 85 db fe ff ff    	jne    c00043a7 <f_write+0x82>
c00044cc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044cf:	e9 d3 fe ff ff       	jmp    c00043a7 <f_write+0x82>
c00044d4:	6a 01                	push   0x1
c00044d6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044d9:	8d 43 28             	lea    eax,[ebx+0x28]
c00044dc:	50                   	push   eax
c00044dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044e5:	50                   	push   eax
c00044e6:	e8 d0 da ff ff       	call   c0001fbb <disk_write>
c00044eb:	83 c4 10             	add    esp,0x10
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 bf                	jne    c00044b1 <f_write+0x18c>
c00044f2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044f5:	83 e0 7f             	and    eax,0x7f
c00044f8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044fb:	e9 b1 fe ff ff       	jmp    c00043b1 <f_write+0x8c>
c0004500:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004503:	74 20                	je     c0004525 <f_write+0x200>
c0004505:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004508:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000450b:	76 18                	jbe    c0004525 <f_write+0x200>
c000450d:	6a 01                	push   0x1
c000450f:	55                   	push   ebp
c0004510:	8d 43 28             	lea    eax,[ebx+0x28]
c0004513:	50                   	push   eax
c0004514:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004518:	50                   	push   eax
c0004519:	e8 87 da ff ff       	call   c0001fa5 <disk_read>
c000451e:	83 c4 10             	add    esp,0x10
c0004521:	85 c0                	test   eax,eax
c0004523:	75 8c                	jne    c00044b1 <f_write+0x18c>
c0004525:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004528:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000452b:	be 00 02 00 00       	mov    esi,0x200
c0004530:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004534:	25 ff 01 00 00       	and    eax,0x1ff
c0004539:	29 c6                	sub    esi,eax
c000453b:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000453f:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004543:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004548:	89 f1                	mov    ecx,esi
c000454a:	e8 cd da ff ff       	call   c000201c <mem_cpy>
c000454f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004552:	83 c8 80             	or     eax,0xffffff80
c0004555:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004558:	e9 e6 fe ff ff       	jmp    c0004443 <f_write+0x11e>
c000455d:	bf 07 00 00 00       	mov    edi,0x7
c0004562:	83 c4 2c             	add    esp,0x2c
c0004565:	89 f8                	mov    eax,edi
c0004567:	5b                   	pop    ebx
c0004568:	5e                   	pop    esi
c0004569:	5f                   	pop    edi
c000456a:	5d                   	pop    ebp
c000456b:	c3                   	ret    

c000456c <f_sync>:
c000456c:	56                   	push   esi
c000456d:	53                   	push   ebx
c000456e:	83 ec 14             	sub    esp,0x14
c0004571:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004575:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004579:	89 d8                	mov    eax,ebx
c000457b:	e8 2c df ff ff       	call   c00024ac <validate>
c0004580:	85 c0                	test   eax,eax
c0004582:	0f 85 a3 00 00 00    	jne    c000462b <f_sync+0xbf>
c0004588:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000458b:	f6 c2 40             	test   dl,0x40
c000458e:	0f 84 97 00 00 00    	je     c000462b <f_sync+0xbf>
c0004594:	80 e2 80             	and    dl,0x80
c0004597:	74 2e                	je     c00045c7 <f_sync+0x5b>
c0004599:	6a 01                	push   0x1
c000459b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000459e:	8d 43 28             	lea    eax,[ebx+0x28]
c00045a1:	50                   	push   eax
c00045a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045aa:	50                   	push   eax
c00045ab:	e8 0b da ff ff       	call   c0001fbb <disk_write>
c00045b0:	83 c4 10             	add    esp,0x10
c00045b3:	89 c2                	mov    edx,eax
c00045b5:	b8 01 00 00 00       	mov    eax,0x1
c00045ba:	85 d2                	test   edx,edx
c00045bc:	75 6d                	jne    c000462b <f_sync+0xbf>
c00045be:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045c1:	83 e0 7f             	and    eax,0x7f
c00045c4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045c7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045ce:	e8 82 df ff ff       	call   c0002555 <move_window>
c00045d3:	85 c0                	test   eax,eax
c00045d5:	75 54                	jne    c000462b <f_sync+0xbf>
c00045d7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045da:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045dd:	89 f2                	mov    edx,esi
c00045df:	83 c8 20             	or     eax,0x20
c00045e2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045e5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045ea:	e8 1b ee ff ff       	call   c000340a <st_clust.isra.1>
c00045ef:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045f2:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045f5:	e8 1f da ff ff       	call   c0002019 <st_dword>
c00045fa:	8d 46 16             	lea    eax,[esi+0x16]
c00045fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004602:	e8 12 da ff ff       	call   c0002019 <st_dword>
c0004607:	8d 46 12             	lea    eax,[esi+0x12]
c000460a:	31 d2                	xor    edx,edx
c000460c:	e8 04 da ff ff       	call   c0002015 <st_word>
c0004611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004615:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461d:	e8 68 e9 ff ff       	call   c0002f8a <sync_fs>
c0004622:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004625:	83 e2 bf             	and    edx,0xffffffbf
c0004628:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000462b:	83 c4 14             	add    esp,0x14
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <f_close>:
c0004631:	53                   	push   ebx
c0004632:	83 ec 24             	sub    esp,0x24
c0004635:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004639:	53                   	push   ebx
c000463a:	e8 2d ff ff ff       	call   c000456c <f_sync>
c000463f:	83 c4 10             	add    esp,0x10
c0004642:	85 c0                	test   eax,eax
c0004644:	75 15                	jne    c000465b <f_close+0x2a>
c0004646:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000464a:	89 d8                	mov    eax,ebx
c000464c:	e8 5b de ff ff       	call   c00024ac <validate>
c0004651:	85 c0                	test   eax,eax
c0004653:	75 06                	jne    c000465b <f_close+0x2a>
c0004655:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000465b:	83 c4 18             	add    esp,0x18
c000465e:	5b                   	pop    ebx
c000465f:	c3                   	ret    

c0004660 <f_lseek>:
c0004660:	55                   	push   ebp
c0004661:	57                   	push   edi
c0004662:	56                   	push   esi
c0004663:	53                   	push   ebx
c0004664:	83 ec 2c             	sub    esp,0x2c
c0004667:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000466b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000466f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004673:	89 d8                	mov    eax,ebx
c0004675:	e8 32 de ff ff       	call   c00024ac <validate>
c000467a:	85 c0                	test   eax,eax
c000467c:	89 c5                	mov    ebp,eax
c000467e:	0f 85 82 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004684:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004688:	85 ed                	test   ebp,ebp
c000468a:	0f 85 76 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004690:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004693:	39 f0                	cmp    eax,esi
c0004695:	73 07                	jae    c000469e <f_lseek+0x3e>
c0004697:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000469b:	0f 44 f0             	cmove  esi,eax
c000469e:	85 f6                	test   esi,esi
c00046a0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00046a3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00046aa:	75 07                	jne    c00046b3 <f_lseek+0x53>
c00046ac:	31 f6                	xor    esi,esi
c00046ae:	e9 e2 00 00 00       	jmp    c0004795 <f_lseek+0x135>
c00046b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b7:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00046bb:	c1 e7 09             	shl    edi,0x9
c00046be:	85 c9                	test   ecx,ecx
c00046c0:	74 28                	je     c00046ea <f_lseek+0x8a>
c00046c2:	31 d2                	xor    edx,edx
c00046c4:	49                   	dec    ecx
c00046c5:	8d 46 ff             	lea    eax,[esi-0x1]
c00046c8:	f7 f7                	div    edi
c00046ca:	31 d2                	xor    edx,edx
c00046cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046d0:	89 c8                	mov    eax,ecx
c00046d2:	f7 f7                	div    edi
c00046d4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046d8:	72 10                	jb     c00046ea <f_lseek+0x8a>
c00046da:	89 f8                	mov    eax,edi
c00046dc:	f7 d8                	neg    eax
c00046de:	21 c1                	and    ecx,eax
c00046e0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046e3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046e6:	29 ce                	sub    esi,ecx
c00046e8:	eb 3c                	jmp    c0004726 <f_lseek+0xc6>
c00046ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046ed:	85 c0                	test   eax,eax
c00046ef:	75 32                	jne    c0004723 <f_lseek+0xc3>
c00046f1:	31 d2                	xor    edx,edx
c00046f3:	89 d8                	mov    eax,ebx
c00046f5:	e8 05 ef ff ff       	call   c00035ff <create_chain>
c00046fa:	83 f8 01             	cmp    eax,0x1
c00046fd:	75 0e                	jne    c000470d <f_lseek+0xad>
c00046ff:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004703:	bd 02 00 00 00       	mov    ebp,0x2
c0004708:	e9 f9 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c000470d:	83 f8 ff             	cmp    eax,0xffffffff
c0004710:	75 0e                	jne    c0004720 <f_lseek+0xc0>
c0004712:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004716:	bd 01 00 00 00       	mov    ebp,0x1
c000471b:	e9 e6 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c0004720:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004723:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004726:	85 c0                	test   eax,eax
c0004728:	74 82                	je     c00046ac <f_lseek+0x4c>
c000472a:	39 fe                	cmp    esi,edi
c000472c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000472f:	76 3d                	jbe    c000476e <f_lseek+0x10e>
c0004731:	01 fa                	add    edx,edi
c0004733:	29 fe                	sub    esi,edi
c0004735:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004739:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000473c:	89 c2                	mov    edx,eax
c000473e:	74 0d                	je     c000474d <f_lseek+0xed>
c0004740:	89 d8                	mov    eax,ebx
c0004742:	e8 b8 ee ff ff       	call   c00035ff <create_chain>
c0004747:	85 c0                	test   eax,eax
c0004749:	75 09                	jne    c0004754 <f_lseek+0xf4>
c000474b:	eb 1f                	jmp    c000476c <f_lseek+0x10c>
c000474d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000474f:	e8 de ec ff ff       	call   c0003432 <get_fat.isra.2>
c0004754:	83 f8 ff             	cmp    eax,0xffffffff
c0004757:	74 b9                	je     c0004712 <f_lseek+0xb2>
c0004759:	83 f8 01             	cmp    eax,0x1
c000475c:	76 a1                	jbe    c00046ff <f_lseek+0x9f>
c000475e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004762:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004765:	76 98                	jbe    c00046ff <f_lseek+0x9f>
c0004767:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000476a:	eb be                	jmp    c000472a <f_lseek+0xca>
c000476c:	31 f6                	xor    esi,esi
c000476e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004771:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004777:	0f 84 2f ff ff ff    	je     c00046ac <f_lseek+0x4c>
c000477d:	89 c2                	mov    edx,eax
c000477f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004783:	e8 be da ff ff       	call   c0002246 <clst2sect>
c0004788:	85 c0                	test   eax,eax
c000478a:	0f 84 6f ff ff ff    	je     c00046ff <f_lseek+0x9f>
c0004790:	c1 ee 09             	shr    esi,0x9
c0004793:	01 c6                	add    esi,eax
c0004795:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004798:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000479b:	76 0c                	jbe    c00047a9 <f_lseek+0x149>
c000479d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00047a0:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00047a3:	83 ca 40             	or     edx,0x40
c00047a6:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00047a9:	a9 ff 01 00 00       	test   eax,0x1ff
c00047ae:	74 56                	je     c0004806 <f_lseek+0x1a6>
c00047b0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00047b3:	39 f0                	cmp    eax,esi
c00047b5:	74 4f                	je     c0004806 <f_lseek+0x1a6>
c00047b7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047bb:	8d 7b 28             	lea    edi,[ebx+0x28]
c00047be:	74 26                	je     c00047e6 <f_lseek+0x186>
c00047c0:	6a 01                	push   0x1
c00047c2:	50                   	push   eax
c00047c3:	57                   	push   edi
c00047c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047c8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047cc:	50                   	push   eax
c00047cd:	e8 e9 d7 ff ff       	call   c0001fbb <disk_write>
c00047d2:	83 c4 10             	add    esp,0x10
c00047d5:	85 c0                	test   eax,eax
c00047d7:	0f 85 35 ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c00047dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047e0:	83 e0 7f             	and    eax,0x7f
c00047e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047e6:	6a 01                	push   0x1
c00047e8:	56                   	push   esi
c00047e9:	57                   	push   edi
c00047ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047ee:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047f2:	50                   	push   eax
c00047f3:	e8 ad d7 ff ff       	call   c0001fa5 <disk_read>
c00047f8:	83 c4 10             	add    esp,0x10
c00047fb:	85 c0                	test   eax,eax
c00047fd:	0f 85 0f ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c0004803:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004806:	83 c4 2c             	add    esp,0x2c
c0004809:	89 e8                	mov    eax,ebp
c000480b:	5b                   	pop    ebx
c000480c:	5e                   	pop    esi
c000480d:	5f                   	pop    edi
c000480e:	5d                   	pop    ebp
c000480f:	c3                   	ret    

c0004810 <f_opendir>:
c0004810:	56                   	push   esi
c0004811:	b8 09 00 00 00       	mov    eax,0x9
c0004816:	53                   	push   ebx
c0004817:	83 ec 24             	sub    esp,0x24
c000481a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000481e:	85 db                	test   ebx,ebx
c0004820:	0f 84 af 00 00 00    	je     c00048d5 <f_opendir+0xc5>
c0004826:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000482a:	31 c9                	xor    ecx,ecx
c000482c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004830:	e8 7d de ff ff       	call   c00026b2 <mount_volume>
c0004835:	85 c0                	test   eax,eax
c0004837:	0f 85 92 00 00 00    	jne    c00048cf <f_opendir+0xbf>
c000483d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004841:	83 ec 0c             	sub    esp,0xc
c0004844:	89 03                	mov    DWORD PTR [ebx],eax
c0004846:	68 00 02 00 00       	push   0x200
c000484b:	e8 e4 15 00 00       	call   c0005e34 <ff_memalloc>
c0004850:	83 c4 10             	add    esp,0x10
c0004853:	89 c6                	mov    esi,eax
c0004855:	b8 11 00 00 00       	mov    eax,0x11
c000485a:	85 f6                	test   esi,esi
c000485c:	74 77                	je     c00048d5 <f_opendir+0xc5>
c000485e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004862:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004866:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004869:	89 d8                	mov    eax,ebx
c000486b:	e8 8a f3 ff ff       	call   c0003bfa <follow_path>
c0004870:	85 c0                	test   eax,eax
c0004872:	75 37                	jne    c00048ab <f_opendir+0x9b>
c0004874:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004878:	75 1c                	jne    c0004896 <f_opendir+0x86>
c000487a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000487e:	b8 05 00 00 00       	mov    eax,0x5
c0004883:	74 26                	je     c00048ab <f_opendir+0x9b>
c0004885:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004889:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000488c:	8a 00                	mov    al,BYTE PTR [eax]
c000488e:	e8 4e eb ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004893:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004896:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000489a:	31 d2                	xor    edx,edx
c000489c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00048a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00048a4:	89 d8                	mov    eax,ebx
c00048a6:	e8 8c ec ff ff       	call   c0003537 <dir_sdi>
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	83 ec 0c             	sub    esp,0xc
c00048b2:	56                   	push   esi
c00048b3:	e8 94 15 00 00       	call   c0005e4c <ff_memfree>
c00048b8:	83 c4 10             	add    esp,0x10
c00048bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048bf:	83 f8 04             	cmp    eax,0x4
c00048c2:	74 06                	je     c00048ca <f_opendir+0xba>
c00048c4:	85 c0                	test   eax,eax
c00048c6:	74 0d                	je     c00048d5 <f_opendir+0xc5>
c00048c8:	eb 05                	jmp    c00048cf <f_opendir+0xbf>
c00048ca:	b8 05 00 00 00       	mov    eax,0x5
c00048cf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048d5:	83 c4 24             	add    esp,0x24
c00048d8:	5b                   	pop    ebx
c00048d9:	5e                   	pop    esi
c00048da:	c3                   	ret    

c00048db <f_closedir>:
c00048db:	53                   	push   ebx
c00048dc:	83 ec 18             	sub    esp,0x18
c00048df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048e3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048e7:	89 d8                	mov    eax,ebx
c00048e9:	e8 be db ff ff       	call   c00024ac <validate>
c00048ee:	85 c0                	test   eax,eax
c00048f0:	75 06                	jne    c00048f8 <f_closedir+0x1d>
c00048f2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048f8:	83 c4 18             	add    esp,0x18
c00048fb:	5b                   	pop    ebx
c00048fc:	c3                   	ret    

c00048fd <f_readdir>:
c00048fd:	57                   	push   edi
c00048fe:	56                   	push   esi
c00048ff:	53                   	push   ebx
c0004900:	83 ec 20             	sub    esp,0x20
c0004903:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004907:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000490b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000490f:	89 d8                	mov    eax,ebx
c0004911:	e8 96 db ff ff       	call   c00024ac <validate>
c0004916:	85 c0                	test   eax,eax
c0004918:	75 6e                	jne    c0004988 <f_readdir+0x8b>
c000491a:	85 ff                	test   edi,edi
c000491c:	75 0b                	jne    c0004929 <f_readdir+0x2c>
c000491e:	31 d2                	xor    edx,edx
c0004920:	89 d8                	mov    eax,ebx
c0004922:	e8 10 ec ff ff       	call   c0003537 <dir_sdi>
c0004927:	eb 5f                	jmp    c0004988 <f_readdir+0x8b>
c0004929:	83 ec 0c             	sub    esp,0xc
c000492c:	68 00 02 00 00       	push   0x200
c0004931:	e8 fe 14 00 00       	call   c0005e34 <ff_memalloc>
c0004936:	83 c4 10             	add    esp,0x10
c0004939:	89 c6                	mov    esi,eax
c000493b:	b8 11 00 00 00       	mov    eax,0x11
c0004940:	85 f6                	test   esi,esi
c0004942:	74 44                	je     c0004988 <f_readdir+0x8b>
c0004944:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004948:	31 d2                	xor    edx,edx
c000494a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000494d:	89 d8                	mov    eax,ebx
c000494f:	e8 dd ef ff ff       	call   c0003931 <dir_read>
c0004954:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004959:	75 19                	jne    c0004974 <f_readdir+0x77>
c000495b:	89 fa                	mov    edx,edi
c000495d:	89 d8                	mov    eax,ebx
c000495f:	e8 7c e8 ff ff       	call   c00031e0 <get_fileinfo>
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 d8                	mov    eax,ebx
c0004968:	e8 5a ee ff ff       	call   c00037c7 <dir_next>
c000496d:	83 f8 04             	cmp    eax,0x4
c0004970:	75 02                	jne    c0004974 <f_readdir+0x77>
c0004972:	31 c0                	xor    eax,eax
c0004974:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004978:	83 ec 0c             	sub    esp,0xc
c000497b:	56                   	push   esi
c000497c:	e8 cb 14 00 00       	call   c0005e4c <ff_memfree>
c0004981:	83 c4 10             	add    esp,0x10
c0004984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004988:	83 c4 20             	add    esp,0x20
c000498b:	5b                   	pop    ebx
c000498c:	5e                   	pop    esi
c000498d:	5f                   	pop    edi
c000498e:	c3                   	ret    

c000498f <f_stat>:
c000498f:	57                   	push   edi
c0004990:	31 c9                	xor    ecx,ecx
c0004992:	56                   	push   esi
c0004993:	53                   	push   ebx
c0004994:	83 ec 30             	sub    esp,0x30
c0004997:	8d 44 24 40          	lea    eax,[esp+0x40]
c000499b:	89 e2                	mov    edx,esp
c000499d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00049a1:	e8 0c dd ff ff       	call   c00026b2 <mount_volume>
c00049a6:	85 c0                	test   eax,eax
c00049a8:	89 c3                	mov    ebx,eax
c00049aa:	75 59                	jne    c0004a05 <f_stat+0x76>
c00049ac:	83 ec 0c             	sub    esp,0xc
c00049af:	bb 11 00 00 00       	mov    ebx,0x11
c00049b4:	68 00 02 00 00       	push   0x200
c00049b9:	e8 76 14 00 00       	call   c0005e34 <ff_memalloc>
c00049be:	83 c4 10             	add    esp,0x10
c00049c1:	85 c0                	test   eax,eax
c00049c3:	89 c6                	mov    esi,eax
c00049c5:	74 3e                	je     c0004a05 <f_stat+0x76>
c00049c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ca:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049ce:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049d1:	89 e0                	mov    eax,esp
c00049d3:	e8 22 f2 ff ff       	call   c0003bfa <follow_path>
c00049d8:	85 c0                	test   eax,eax
c00049da:	89 c3                	mov    ebx,eax
c00049dc:	75 1b                	jne    c00049f9 <f_stat+0x6a>
c00049de:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049e3:	75 0f                	jne    c00049f4 <f_stat+0x65>
c00049e5:	85 ff                	test   edi,edi
c00049e7:	74 10                	je     c00049f9 <f_stat+0x6a>
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	89 e0                	mov    eax,esp
c00049ed:	e8 ee e7 ff ff       	call   c00031e0 <get_fileinfo>
c00049f2:	eb 05                	jmp    c00049f9 <f_stat+0x6a>
c00049f4:	bb 06 00 00 00       	mov    ebx,0x6
c00049f9:	83 ec 0c             	sub    esp,0xc
c00049fc:	56                   	push   esi
c00049fd:	e8 4a 14 00 00       	call   c0005e4c <ff_memfree>
c0004a02:	83 c4 10             	add    esp,0x10
c0004a05:	83 c4 30             	add    esp,0x30
c0004a08:	89 d8                	mov    eax,ebx
c0004a0a:	5b                   	pop    ebx
c0004a0b:	5e                   	pop    esi
c0004a0c:	5f                   	pop    edi
c0004a0d:	c3                   	ret    

c0004a0e <f_getfree>:
c0004a0e:	55                   	push   ebp
c0004a0f:	31 c9                	xor    ecx,ecx
c0004a11:	57                   	push   edi
c0004a12:	56                   	push   esi
c0004a13:	53                   	push   ebx
c0004a14:	83 ec 2c             	sub    esp,0x2c
c0004a17:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a1b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a1f:	e8 8e dc ff ff       	call   c00026b2 <mount_volume>
c0004a24:	85 c0                	test   eax,eax
c0004a26:	89 c6                	mov    esi,eax
c0004a28:	0f 85 df 00 00 00    	jne    c0004b0d <f_getfree+0xff>
c0004a2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004a32:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a36:	89 18                	mov    DWORD PTR [eax],ebx
c0004a38:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004a3b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a3e:	8d 57 fe             	lea    edx,[edi-0x2]
c0004a41:	39 d0                	cmp    eax,edx
c0004a43:	77 0b                	ja     c0004a50 <f_getfree+0x42>
c0004a45:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a49:	89 01                	mov    DWORD PTR [ecx],eax
c0004a4b:	e9 bd 00 00 00       	jmp    c0004b0d <f_getfree+0xff>
c0004a50:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004a53:	75 29                	jne    c0004a7e <f_getfree+0x70>
c0004a55:	bf 02 00 00 00       	mov    edi,0x2
c0004a5a:	31 ed                	xor    ebp,ebp
c0004a5c:	89 fa                	mov    edx,edi
c0004a5e:	89 d8                	mov    eax,ebx
c0004a60:	e8 cd e9 ff ff       	call   c0003432 <get_fat.isra.2>
c0004a65:	83 f8 ff             	cmp    eax,0xffffffff
c0004a68:	74 7d                	je     c0004ae7 <f_getfree+0xd9>
c0004a6a:	83 f8 01             	cmp    eax,0x1
c0004a6d:	74 7f                	je     c0004aee <f_getfree+0xe0>
c0004a6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a73:	83 d5 00             	adc    ebp,0x0
c0004a76:	47                   	inc    edi
c0004a77:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004a7a:	77 e0                	ja     c0004a5c <f_getfree+0x4e>
c0004a7c:	eb 79                	jmp    c0004af7 <f_getfree+0xe9>
c0004a7e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004a81:	31 ed                	xor    ebp,ebp
c0004a83:	31 db                	xor    ebx,ebx
c0004a85:	85 db                	test   ebx,ebx
c0004a87:	75 18                	jne    c0004aa1 <f_getfree+0x93>
c0004a89:	8d 42 01             	lea    eax,[edx+0x1]
c0004a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a94:	e8 bc da ff ff       	call   c0002555 <move_window>
c0004a99:	85 c0                	test   eax,eax
c0004a9b:	75 58                	jne    c0004af5 <f_getfree+0xe7>
c0004a9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004aa5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004aa9:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004aac:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004ab0:	75 13                	jne    c0004ac5 <f_getfree+0xb7>
c0004ab2:	e8 39 d5 ff ff       	call   c0001ff0 <ld_word>
c0004ab7:	0f b7 c0             	movzx  eax,ax
c0004aba:	83 f8 01             	cmp    eax,0x1
c0004abd:	83 d5 00             	adc    ebp,0x0
c0004ac0:	83 c3 02             	add    ebx,0x2
c0004ac3:	eb 13                	jmp    c0004ad8 <f_getfree+0xca>
c0004ac5:	e8 33 d5 ff ff       	call   c0001ffd <ld_dword>
c0004aca:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004acf:	83 f8 01             	cmp    eax,0x1
c0004ad2:	83 d5 00             	adc    ebp,0x0
c0004ad5:	83 c3 04             	add    ebx,0x4
c0004ad8:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004ade:	4f                   	dec    edi
c0004adf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ae3:	75 a0                	jne    c0004a85 <f_getfree+0x77>
c0004ae5:	eb 10                	jmp    c0004af7 <f_getfree+0xe9>
c0004ae7:	be 01 00 00 00       	mov    esi,0x1
c0004aec:	eb 09                	jmp    c0004af7 <f_getfree+0xe9>
c0004aee:	be 02 00 00 00       	mov    esi,0x2
c0004af3:	eb 02                	jmp    c0004af7 <f_getfree+0xe9>
c0004af5:	89 c6                	mov    esi,eax
c0004af7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004afb:	89 28                	mov    DWORD PTR [eax],ebp
c0004afd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b01:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004b04:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004b07:	83 ca 01             	or     edx,0x1
c0004b0a:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004b0d:	83 c4 2c             	add    esp,0x2c
c0004b10:	89 f0                	mov    eax,esi
c0004b12:	5b                   	pop    ebx
c0004b13:	5e                   	pop    esi
c0004b14:	5f                   	pop    edi
c0004b15:	5d                   	pop    ebp
c0004b16:	c3                   	ret    

c0004b17 <f_truncate>:
c0004b17:	56                   	push   esi
c0004b18:	53                   	push   ebx
c0004b19:	83 ec 14             	sub    esp,0x14
c0004b1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b20:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b24:	89 d8                	mov    eax,ebx
c0004b26:	e8 81 d9 ff ff       	call   c00024ac <validate>
c0004b2b:	85 c0                	test   eax,eax
c0004b2d:	89 c6                	mov    esi,eax
c0004b2f:	0f 85 c4 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b35:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b39:	85 f6                	test   esi,esi
c0004b3b:	0f 85 b8 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b41:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b45:	0f 84 a9 00 00 00    	je     c0004bf4 <f_truncate+0xdd>
c0004b4b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b4e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b51:	0f 83 a2 00 00 00    	jae    c0004bf9 <f_truncate+0xe2>
c0004b57:	85 c0                	test   eax,eax
c0004b59:	75 15                	jne    c0004b70 <f_truncate+0x59>
c0004b5b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b5e:	31 c9                	xor    ecx,ecx
c0004b60:	89 d8                	mov    eax,ebx
c0004b62:	e8 d2 eb ff ff       	call   c0003739 <remove_chain>
c0004b67:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b6e:	eb 35                	jmp    c0004ba5 <f_truncate+0x8e>
c0004b70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b75:	e8 b8 e8 ff ff       	call   c0003432 <get_fat.isra.2>
c0004b7a:	89 c2                	mov    edx,eax
c0004b7c:	b8 01 00 00 00       	mov    eax,0x1
c0004b81:	83 fa ff             	cmp    edx,0xffffffff
c0004b84:	74 1f                	je     c0004ba5 <f_truncate+0x8e>
c0004b86:	83 fa 01             	cmp    edx,0x1
c0004b89:	b8 02 00 00 00       	mov    eax,0x2
c0004b8e:	74 15                	je     c0004ba5 <f_truncate+0x8e>
c0004b90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b94:	31 c0                	xor    eax,eax
c0004b96:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b99:	76 0a                	jbe    c0004ba5 <f_truncate+0x8e>
c0004b9b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b9e:	89 d8                	mov    eax,ebx
c0004ba0:	e8 94 eb ff ff       	call   c0003739 <remove_chain>
c0004ba5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004ba8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004bab:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004bae:	83 ca 40             	or     edx,0x40
c0004bb1:	85 c0                	test   eax,eax
c0004bb3:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004bb6:	75 35                	jne    c0004bed <f_truncate+0xd6>
c0004bb8:	80 e2 80             	and    dl,0x80
c0004bbb:	74 3c                	je     c0004bf9 <f_truncate+0xe2>
c0004bbd:	6a 01                	push   0x1
c0004bbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004bc2:	8d 43 28             	lea    eax,[ebx+0x28]
c0004bc5:	50                   	push   eax
c0004bc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bce:	50                   	push   eax
c0004bcf:	e8 e7 d3 ff ff       	call   c0001fbb <disk_write>
c0004bd4:	83 c4 10             	add    esp,0x10
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	75 0d                	jne    c0004be8 <f_truncate+0xd1>
c0004bdb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bde:	31 f6                	xor    esi,esi
c0004be0:	83 e0 7f             	and    eax,0x7f
c0004be3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004be6:	eb 11                	jmp    c0004bf9 <f_truncate+0xe2>
c0004be8:	b8 01 00 00 00       	mov    eax,0x1
c0004bed:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	eb 05                	jmp    c0004bf9 <f_truncate+0xe2>
c0004bf4:	be 07 00 00 00       	mov    esi,0x7
c0004bf9:	83 c4 14             	add    esp,0x14
c0004bfc:	89 f0                	mov    eax,esi
c0004bfe:	5b                   	pop    ebx
c0004bff:	5e                   	pop    esi
c0004c00:	c3                   	ret    

c0004c01 <f_unlink>:
c0004c01:	55                   	push   ebp
c0004c02:	b9 02 00 00 00       	mov    ecx,0x2
c0004c07:	57                   	push   edi
c0004c08:	56                   	push   esi
c0004c09:	53                   	push   ebx
c0004c0a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004c10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c14:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004c1b:	e8 92 da ff ff       	call   c00026b2 <mount_volume>
c0004c20:	85 c0                	test   eax,eax
c0004c22:	0f 85 ee 00 00 00    	jne    c0004d16 <f_unlink+0x115>
c0004c28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c2c:	83 ec 0c             	sub    esp,0xc
c0004c2f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c33:	68 00 02 00 00       	push   0x200
c0004c38:	e8 f7 11 00 00       	call   c0005e34 <ff_memalloc>
c0004c3d:	83 c4 10             	add    esp,0x10
c0004c40:	89 c3                	mov    ebx,eax
c0004c42:	b8 11 00 00 00       	mov    eax,0x11
c0004c47:	85 db                	test   ebx,ebx
c0004c49:	0f 84 c7 00 00 00    	je     c0004d16 <f_unlink+0x115>
c0004c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c53:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c5a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c5d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c61:	e8 94 ef ff ff       	call   c0003bfa <follow_path>
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 94 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c6e:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c73:	b8 06 00 00 00       	mov    eax,0x6
c0004c78:	0f 85 84 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c7e:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c83:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c89:	74 07                	je     c0004c92 <f_unlink+0x91>
c0004c8b:	b8 07 00 00 00       	mov    eax,0x7
c0004c90:	eb 70                	jmp    c0004d02 <f_unlink+0x101>
c0004c92:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c96:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c9a:	8a 07                	mov    al,BYTE PTR [edi]
c0004c9c:	e8 40 e7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004ca1:	83 e5 10             	and    ebp,0x10
c0004ca4:	89 c6                	mov    esi,eax
c0004ca6:	75 20                	jne    c0004cc8 <f_unlink+0xc7>
c0004ca8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cac:	e8 a8 ed ff ff       	call   c0003a59 <dir_remove>
c0004cb1:	85 c0                	test   eax,eax
c0004cb3:	75 40                	jne    c0004cf5 <f_unlink+0xf4>
c0004cb5:	85 f6                	test   esi,esi
c0004cb7:	74 3c                	je     c0004cf5 <f_unlink+0xf4>
c0004cb9:	31 c9                	xor    ecx,ecx
c0004cbb:	89 f2                	mov    edx,esi
c0004cbd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc1:	e8 73 ea ff ff       	call   c0003739 <remove_chain>
c0004cc6:	eb 2d                	jmp    c0004cf5 <f_unlink+0xf4>
c0004cc8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ccc:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cd0:	31 d2                	xor    edx,edx
c0004cd2:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004cd6:	e8 5c e8 ff ff       	call   c0003537 <dir_sdi>
c0004cdb:	85 c0                	test   eax,eax
c0004cdd:	75 23                	jne    c0004d02 <f_unlink+0x101>
c0004cdf:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ce3:	31 d2                	xor    edx,edx
c0004ce5:	e8 47 ec ff ff       	call   c0003931 <dir_read>
c0004cea:	85 c0                	test   eax,eax
c0004cec:	74 9d                	je     c0004c8b <f_unlink+0x8a>
c0004cee:	83 f8 04             	cmp    eax,0x4
c0004cf1:	75 0f                	jne    c0004d02 <f_unlink+0x101>
c0004cf3:	eb b3                	jmp    c0004ca8 <f_unlink+0xa7>
c0004cf5:	85 c0                	test   eax,eax
c0004cf7:	75 09                	jne    c0004d02 <f_unlink+0x101>
c0004cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfd:	e8 88 e2 ff ff       	call   c0002f8a <sync_fs>
c0004d02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d06:	83 ec 0c             	sub    esp,0xc
c0004d09:	53                   	push   ebx
c0004d0a:	e8 3d 11 00 00       	call   c0005e4c <ff_memfree>
c0004d0f:	83 c4 10             	add    esp,0x10
c0004d12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d16:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	5f                   	pop    edi
c0004d1f:	5d                   	pop    ebp
c0004d20:	c3                   	ret    

c0004d21 <f_mkdir>:
c0004d21:	57                   	push   edi
c0004d22:	b9 02 00 00 00       	mov    ecx,0x2
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	83 ec 50             	sub    esp,0x50
c0004d2c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d30:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d34:	e8 79 d9 ff ff       	call   c00026b2 <mount_volume>
c0004d39:	85 c0                	test   eax,eax
c0004d3b:	89 c3                	mov    ebx,eax
c0004d3d:	0f 85 70 01 00 00    	jne    c0004eb3 <f_mkdir+0x192>
c0004d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d47:	83 ec 0c             	sub    esp,0xc
c0004d4a:	bb 11 00 00 00       	mov    ebx,0x11
c0004d4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d53:	68 00 02 00 00       	push   0x200
c0004d58:	e8 d7 10 00 00       	call   c0005e34 <ff_memalloc>
c0004d5d:	83 c4 10             	add    esp,0x10
c0004d60:	85 c0                	test   eax,eax
c0004d62:	89 c7                	mov    edi,eax
c0004d64:	0f 84 49 01 00 00    	je     c0004eb3 <f_mkdir+0x192>
c0004d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d72:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d75:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d79:	e8 7c ee ff ff       	call   c0003bfa <follow_path>
c0004d7e:	85 c0                	test   eax,eax
c0004d80:	89 c3                	mov    ebx,eax
c0004d82:	74 3e                	je     c0004dc2 <f_mkdir+0xa1>
c0004d84:	83 f8 04             	cmp    eax,0x4
c0004d87:	75 3e                	jne    c0004dc7 <f_mkdir+0xa6>
c0004d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8d:	31 d2                	xor    edx,edx
c0004d8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d93:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d97:	e8 63 e8 ff ff       	call   c00035ff <create_chain>
c0004d9c:	85 c0                	test   eax,eax
c0004d9e:	89 c6                	mov    esi,eax
c0004da0:	74 0c                	je     c0004dae <f_mkdir+0x8d>
c0004da2:	83 f8 01             	cmp    eax,0x1
c0004da5:	bb 02 00 00 00       	mov    ebx,0x2
c0004daa:	74 07                	je     c0004db3 <f_mkdir+0x92>
c0004dac:	eb 2a                	jmp    c0004dd8 <f_mkdir+0xb7>
c0004dae:	bb 07 00 00 00       	mov    ebx,0x7
c0004db3:	31 c9                	xor    ecx,ecx
c0004db5:	89 f2                	mov    edx,esi
c0004db7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004dbb:	e8 79 e9 ff ff       	call   c0003739 <remove_chain>
c0004dc0:	eb 05                	jmp    c0004dc7 <f_mkdir+0xa6>
c0004dc2:	bb 08 00 00 00       	mov    ebx,0x8
c0004dc7:	83 ec 0c             	sub    esp,0xc
c0004dca:	57                   	push   edi
c0004dcb:	e8 7c 10 00 00       	call   c0005e4c <ff_memfree>
c0004dd0:	83 c4 10             	add    esp,0x10
c0004dd3:	e9 db 00 00 00       	jmp    c0004eb3 <f_mkdir+0x192>
c0004dd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004ddb:	bb 01 00 00 00       	mov    ebx,0x1
c0004de0:	74 d1                	je     c0004db3 <f_mkdir+0x92>
c0004de2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de6:	89 f2                	mov    edx,esi
c0004de8:	e8 19 dd ff ff       	call   c0002b06 <dir_clear>
c0004ded:	85 c0                	test   eax,eax
c0004def:	89 c3                	mov    ebx,eax
c0004df1:	75 c0                	jne    c0004db3 <f_mkdir+0x92>
c0004df3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004dfc:	ba 20 00 00 00       	mov    edx,0x20
c0004e01:	83 c0 34             	add    eax,0x34
c0004e04:	e8 28 d2 ff ff       	call   c0002031 <mem_set>
c0004e09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e12:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004e16:	83 c0 4a             	add    eax,0x4a
c0004e19:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004e1d:	e8 f7 d1 ff ff       	call   c0002019 <st_dword>
c0004e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e26:	89 f1                	mov    ecx,esi
c0004e28:	8d 50 34             	lea    edx,[eax+0x34]
c0004e2b:	e8 da e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e34:	b9 20 00 00 00       	mov    ecx,0x20
c0004e39:	8d 50 34             	lea    edx,[eax+0x34]
c0004e3c:	83 c0 54             	add    eax,0x54
c0004e3f:	e8 d8 d1 ff ff       	call   c000201c <mem_cpy>
c0004e44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e48:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e4c:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e50:	8d 50 54             	lea    edx,[eax+0x54]
c0004e53:	e8 b2 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e60:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e64:	e8 2e ee ff ff       	call   c0003c97 <dir_register>
c0004e69:	85 c0                	test   eax,eax
c0004e6b:	89 c3                	mov    ebx,eax
c0004e6d:	0f 85 40 ff ff ff    	jne    c0004db3 <f_mkdir+0x92>
c0004e73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e77:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e7c:	83 c0 16             	add    eax,0x16
c0004e7f:	e8 95 d1 ff ff       	call   c0002019 <st_dword>
c0004e84:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e88:	89 f1                	mov    ecx,esi
c0004e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8e:	e8 77 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e97:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e9f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ea3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ea7:	e8 de e0 ff ff       	call   c0002f8a <sync_fs>
c0004eac:	89 c3                	mov    ebx,eax
c0004eae:	e9 14 ff ff ff       	jmp    c0004dc7 <f_mkdir+0xa6>
c0004eb3:	83 c4 50             	add    esp,0x50
c0004eb6:	89 d8                	mov    eax,ebx
c0004eb8:	5b                   	pop    ebx
c0004eb9:	5e                   	pop    esi
c0004eba:	5f                   	pop    edi
c0004ebb:	c3                   	ret    

c0004ebc <f_rename>:
c0004ebc:	57                   	push   edi
c0004ebd:	56                   	push   esi
c0004ebe:	53                   	push   ebx
c0004ebf:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ec5:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ecc:	e8 8f d5 ff ff       	call   c0002460 <get_ldnumber>
c0004ed1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ed5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eda:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ee1:	e8 cc d7 ff ff       	call   c00026b2 <mount_volume>
c0004ee6:	85 c0                	test   eax,eax
c0004ee8:	0f 85 7c 01 00 00    	jne    c000506a <f_rename+0x1ae>
c0004eee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef2:	83 ec 0c             	sub    esp,0xc
c0004ef5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ef9:	68 00 02 00 00       	push   0x200
c0004efe:	e8 31 0f 00 00       	call   c0005e34 <ff_memalloc>
c0004f03:	83 c4 10             	add    esp,0x10
c0004f06:	89 c6                	mov    esi,eax
c0004f08:	b8 11 00 00 00       	mov    eax,0x11
c0004f0d:	85 f6                	test   esi,esi
c0004f0f:	0f 84 55 01 00 00    	je     c000506a <f_rename+0x1ae>
c0004f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f19:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f20:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f23:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f27:	e8 ce ec ff ff       	call   c0003bfa <follow_path>
c0004f2c:	85 c0                	test   eax,eax
c0004f2e:	0f 85 22 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f34:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f38:	b8 06 00 00 00       	mov    eax,0x6
c0004f3d:	80 e2 a0             	and    dl,0xa0
c0004f40:	0f 85 10 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f4e:	b9 20 00 00 00       	mov    ecx,0x20
c0004f53:	e8 c4 d0 ff ff       	call   c000201c <mem_cpy>
c0004f58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f5c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f65:	e8 b2 d0 ff ff       	call   c000201c <mem_cpy>
c0004f6a:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f71:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f75:	e8 80 ec ff ff       	call   c0003bfa <follow_path>
c0004f7a:	85 c0                	test   eax,eax
c0004f7c:	75 20                	jne    c0004f9e <f_rename+0xe2>
c0004f7e:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f82:	b8 08 00 00 00       	mov    eax,0x8
c0004f87:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f8b:	0f 85 c5 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f91:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f95:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f9c:	eb 03                	jmp    c0004fa1 <f_rename+0xe5>
c0004f9e:	83 f8 04             	cmp    eax,0x4
c0004fa1:	0f 85 af 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fa7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fab:	e8 e7 ec ff ff       	call   c0003c97 <dir_register>
c0004fb0:	85 c0                	test   eax,eax
c0004fb2:	0f 85 9e 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fb8:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fbf:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004fc3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fc8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fcb:	e8 4c d0 ff ff       	call   c000201c <mem_cpy>
c0004fd0:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fd4:	a8 10                	test   al,0x10
c0004fd6:	75 03                	jne    c0004fdb <f_rename+0x11f>
c0004fd8:	83 c8 20             	or     eax,0x20
c0004fdb:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fe2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fe6:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fea:	74 54                	je     c0005040 <f_rename+0x184>
c0004fec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004ff0:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004ff4:	74 4a                	je     c0005040 <f_rename+0x184>
c0004ff6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ffa:	89 da                	mov    edx,ebx
c0004ffc:	8a 07                	mov    al,BYTE PTR [edi]
c0004ffe:	e8 de e3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0005003:	89 c2                	mov    edx,eax
c0005005:	89 f8                	mov    eax,edi
c0005007:	e8 3a d2 ff ff       	call   c0002246 <clst2sect>
c000500c:	89 c2                	mov    edx,eax
c000500e:	b8 02 00 00 00       	mov    eax,0x2
c0005013:	85 d2                	test   edx,edx
c0005015:	74 3f                	je     c0005056 <f_rename+0x19a>
c0005017:	89 f8                	mov    eax,edi
c0005019:	e8 37 d5 ff ff       	call   c0002555 <move_window>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 34                	jne    c0005056 <f_rename+0x19a>
c0005022:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005026:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000502a:	75 14                	jne    c0005040 <f_rename+0x184>
c000502c:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005030:	8d 50 54             	lea    edx,[eax+0x54]
c0005033:	e8 d2 e3 ff ff       	call   c000340a <st_clust.isra.1>
c0005038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000503c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005040:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005044:	e8 10 ea ff ff       	call   c0003a59 <dir_remove>
c0005049:	85 c0                	test   eax,eax
c000504b:	75 09                	jne    c0005056 <f_rename+0x19a>
c000504d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005051:	e8 34 df ff ff       	call   c0002f8a <sync_fs>
c0005056:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000505a:	83 ec 0c             	sub    esp,0xc
c000505d:	56                   	push   esi
c000505e:	e8 e9 0d 00 00       	call   c0005e4c <ff_memfree>
c0005063:	83 c4 10             	add    esp,0x10
c0005066:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000506a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005070:	5b                   	pop    ebx
c0005071:	5e                   	pop    esi
c0005072:	5f                   	pop    edi
c0005073:	c3                   	ret    

c0005074 <f_chmod>:
c0005074:	57                   	push   edi
c0005075:	b9 02 00 00 00       	mov    ecx,0x2
c000507a:	56                   	push   esi
c000507b:	53                   	push   ebx
c000507c:	83 ec 50             	sub    esp,0x50
c000507f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005083:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005087:	8d 44 24 60          	lea    eax,[esp+0x60]
c000508b:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000508f:	e8 1e d6 ff ff       	call   c00026b2 <mount_volume>
c0005094:	85 c0                	test   eax,eax
c0005096:	0f 85 81 00 00 00    	jne    c000511d <f_chmod+0xa9>
c000509c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a0:	83 ec 0c             	sub    esp,0xc
c00050a3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00050a7:	68 00 02 00 00       	push   0x200
c00050ac:	e8 83 0d 00 00       	call   c0005e34 <ff_memalloc>
c00050b1:	83 c4 10             	add    esp,0x10
c00050b4:	89 c6                	mov    esi,eax
c00050b6:	b8 11 00 00 00       	mov    eax,0x11
c00050bb:	85 f6                	test   esi,esi
c00050bd:	74 5e                	je     c000511d <f_chmod+0xa9>
c00050bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050c3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ca:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050ce:	e8 27 eb ff ff       	call   c0003bfa <follow_path>
c00050d3:	85 c0                	test   eax,eax
c00050d5:	75 32                	jne    c0005109 <f_chmod+0x95>
c00050d7:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050db:	b8 06 00 00 00       	mov    eax,0x6
c00050e0:	80 e2 a0             	and    dl,0xa0
c00050e3:	75 24                	jne    c0005109 <f_chmod+0x95>
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050ec:	31 d7                	xor    edi,edx
c00050ee:	21 fb                	and    ebx,edi
c00050f0:	83 e3 27             	and    ebx,0x27
c00050f3:	31 d3                	xor    ebx,edx
c00050f5:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050fc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005104:	e8 81 de ff ff       	call   c0002f8a <sync_fs>
c0005109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000510d:	83 ec 0c             	sub    esp,0xc
c0005110:	56                   	push   esi
c0005111:	e8 36 0d 00 00       	call   c0005e4c <ff_memfree>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000511d:	83 c4 50             	add    esp,0x50
c0005120:	5b                   	pop    ebx
c0005121:	5e                   	pop    esi
c0005122:	5f                   	pop    edi
c0005123:	c3                   	ret    

c0005124 <f_utime>:
c0005124:	56                   	push   esi
c0005125:	b9 02 00 00 00       	mov    ecx,0x2
c000512a:	53                   	push   ebx
c000512b:	83 ec 54             	sub    esp,0x54
c000512e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005132:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005136:	8d 44 24 60          	lea    eax,[esp+0x60]
c000513a:	e8 73 d5 ff ff       	call   c00026b2 <mount_volume>
c000513f:	85 c0                	test   eax,eax
c0005141:	0f 85 87 00 00 00    	jne    c00051ce <f_utime+0xaa>
c0005147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000514b:	83 ec 0c             	sub    esp,0xc
c000514e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005152:	68 00 02 00 00       	push   0x200
c0005157:	e8 d8 0c 00 00       	call   c0005e34 <ff_memalloc>
c000515c:	83 c4 10             	add    esp,0x10
c000515f:	89 c3                	mov    ebx,eax
c0005161:	b8 11 00 00 00       	mov    eax,0x11
c0005166:	85 db                	test   ebx,ebx
c0005168:	74 64                	je     c00051ce <f_utime+0xaa>
c000516a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005172:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005175:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005179:	e8 7c ea ff ff       	call   c0003bfa <follow_path>
c000517e:	85 c0                	test   eax,eax
c0005180:	75 38                	jne    c00051ba <f_utime+0x96>
c0005182:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005186:	b8 06 00 00 00       	mov    eax,0x6
c000518b:	80 e2 a0             	and    dl,0xa0
c000518e:	75 2a                	jne    c00051ba <f_utime+0x96>
c0005190:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0005194:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005198:	c1 e2 10             	shl    edx,0x10
c000519b:	09 c2                	or     edx,eax
c000519d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00051a1:	83 c0 16             	add    eax,0x16
c00051a4:	e8 70 ce ff ff       	call   c0002019 <st_dword>
c00051a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ad:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b5:	e8 d0 dd ff ff       	call   c0002f8a <sync_fs>
c00051ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051be:	83 ec 0c             	sub    esp,0xc
c00051c1:	53                   	push   ebx
c00051c2:	e8 85 0c 00 00       	call   c0005e4c <ff_memfree>
c00051c7:	83 c4 10             	add    esp,0x10
c00051ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051ce:	83 c4 54             	add    esp,0x54
c00051d1:	5b                   	pop    ebx
c00051d2:	5e                   	pop    esi
c00051d3:	c3                   	ret    

c00051d4 <f_getlabel>:
c00051d4:	55                   	push   ebp
c00051d5:	31 c9                	xor    ecx,ecx
c00051d7:	57                   	push   edi
c00051d8:	56                   	push   esi
c00051d9:	53                   	push   ebx
c00051da:	83 ec 5c             	sub    esp,0x5c
c00051dd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051e1:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c00051e5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051e9:	e8 c4 d4 ff ff       	call   c00026b2 <mount_volume>
c00051ee:	85 c0                	test   eax,eax
c00051f0:	89 c3                	mov    ebx,eax
c00051f2:	0f 85 d9 00 00 00    	jne    c00052d1 <f_getlabel+0xfd>
c00051f8:	85 ff                	test   edi,edi
c00051fa:	0f 84 d1 00 00 00    	je     c00052d1 <f_getlabel+0xfd>
c0005200:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005208:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000520c:	31 d2                	xor    edx,edx
c000520e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005216:	e8 1c e3 ff ff       	call   c0003537 <dir_sdi>
c000521b:	85 c0                	test   eax,eax
c000521d:	89 c3                	mov    ebx,eax
c000521f:	0f 85 a2 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c0005225:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005229:	ba 01 00 00 00       	mov    edx,0x1
c000522e:	e8 fe e6 ff ff       	call   c0003931 <dir_read>
c0005233:	85 c0                	test   eax,eax
c0005235:	89 c3                	mov    ebx,eax
c0005237:	0f 85 8a 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c000523d:	31 f6                	xor    esi,esi
c000523f:	31 d2                	xor    edx,edx
c0005241:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005245:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000524c:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c0005250:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005255:	89 c8                	mov    eax,ecx
c0005257:	e8 13 ce ff ff       	call   c000206f <dbc_1st>
c000525c:	85 c0                	test   eax,eax
c000525e:	74 19                	je     c0005279 <f_getlabel+0xa5>
c0005260:	83 fd 0b             	cmp    ebp,0xb
c0005263:	74 14                	je     c0005279 <f_getlabel+0xa5>
c0005265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005269:	c1 e1 08             	shl    ecx,0x8
c000526c:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0005270:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005273:	09 c1                	or     ecx,eax
c0005275:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005279:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000527e:	52                   	push   edx
c000527f:	52                   	push   edx
c0005280:	68 b5 01 00 00       	push   0x1b5
c0005285:	50                   	push   eax
c0005286:	e8 75 0c 00 00       	call   c0005f00 <ff_oem2uni>
c000528b:	83 c4 10             	add    esp,0x10
c000528e:	0f b7 c0             	movzx  eax,ax
c0005291:	85 c0                	test   eax,eax
c0005293:	74 1f                	je     c00052b4 <f_getlabel+0xe0>
c0005295:	8d 14 37             	lea    edx,[edi+esi*1]
c0005298:	b9 04 00 00 00       	mov    ecx,0x4
c000529d:	e8 ab ce ff ff       	call   c000214d <put_utf>
c00052a2:	0f b6 c0             	movzx  eax,al
c00052a5:	85 c0                	test   eax,eax
c00052a7:	74 0b                	je     c00052b4 <f_getlabel+0xe0>
c00052a9:	01 c6                	add    esi,eax
c00052ab:	83 fd 0b             	cmp    ebp,0xb
c00052ae:	74 06                	je     c00052b6 <f_getlabel+0xe2>
c00052b0:	89 ea                	mov    edx,ebp
c00052b2:	eb 8d                	jmp    c0005241 <f_getlabel+0x6d>
c00052b4:	31 f6                	xor    esi,esi
c00052b6:	01 fe                	add    esi,edi
c00052b8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00052bb:	39 f7                	cmp    edi,esi
c00052bd:	74 12                	je     c00052d1 <f_getlabel+0xfd>
c00052bf:	4e                   	dec    esi
c00052c0:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00052c3:	74 f3                	je     c00052b8 <f_getlabel+0xe4>
c00052c5:	eb 0a                	jmp    c00052d1 <f_getlabel+0xfd>
c00052c7:	83 fb 04             	cmp    ebx,0x4
c00052ca:	75 05                	jne    c00052d1 <f_getlabel+0xfd>
c00052cc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00052cf:	31 db                	xor    ebx,ebx
c00052d1:	85 db                	test   ebx,ebx
c00052d3:	75 49                	jne    c000531e <f_getlabel+0x14a>
c00052d5:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052da:	74 42                	je     c000531e <f_getlabel+0x14a>
c00052dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052e3:	e8 6d d2 ff ff       	call   c0002555 <move_window>
c00052e8:	85 c0                	test   eax,eax
c00052ea:	89 c3                	mov    ebx,eax
c00052ec:	75 30                	jne    c000531e <f_getlabel+0x14a>
c00052ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052f2:	b8 43 00 00 00       	mov    eax,0x43
c00052f7:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052fa:	83 f9 03             	cmp    ecx,0x3
c00052fd:	74 10                	je     c000530f <f_getlabel+0x13b>
c00052ff:	83 f9 04             	cmp    ecx,0x4
c0005302:	b8 64 00 00 00       	mov    eax,0x64
c0005307:	b9 27 00 00 00       	mov    ecx,0x27
c000530c:	0f 45 c1             	cmovne eax,ecx
c000530f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005313:	e8 e5 cc ff ff       	call   c0001ffd <ld_dword>
c0005318:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000531c:	89 07                	mov    DWORD PTR [edi],eax
c000531e:	83 c4 5c             	add    esp,0x5c
c0005321:	89 d8                	mov    eax,ebx
c0005323:	5b                   	pop    ebx
c0005324:	5e                   	pop    esi
c0005325:	5f                   	pop    edi
c0005326:	5d                   	pop    ebp
c0005327:	c3                   	ret    

c0005328 <f_setlabel>:
c0005328:	57                   	push   edi
c0005329:	b9 02 00 00 00       	mov    ecx,0x2
c000532e:	56                   	push   esi
c000532f:	53                   	push   ebx
c0005330:	83 ec 50             	sub    esp,0x50
c0005333:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005337:	8d 44 24 60          	lea    eax,[esp+0x60]
c000533b:	e8 72 d3 ff ff       	call   c00026b2 <mount_volume>
c0005340:	85 c0                	test   eax,eax
c0005342:	89 c6                	mov    esi,eax
c0005344:	0f 85 65 01 00 00    	jne    c00054af <f_setlabel+0x187>
c000534a:	b9 0b 00 00 00       	mov    ecx,0xb
c000534f:	ba 20 00 00 00       	mov    edx,0x20
c0005354:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005358:	31 db                	xor    ebx,ebx
c000535a:	e8 d2 cc ff ff       	call   c0002031 <mem_set>
c000535f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005363:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005366:	76 5d                	jbe    c00053c5 <f_setlabel+0x9d>
c0005368:	8d 44 24 60          	lea    eax,[esp+0x60]
c000536c:	e8 04 cd ff ff       	call   c0002075 <tchar2uni>
c0005371:	3d ff ff 00 00       	cmp    eax,0xffff
c0005376:	76 0a                	jbe    c0005382 <f_setlabel+0x5a>
c0005378:	be 06 00 00 00       	mov    esi,0x6
c000537d:	e9 2d 01 00 00       	jmp    c00054af <f_setlabel+0x187>
c0005382:	83 ec 0c             	sub    esp,0xc
c0005385:	50                   	push   eax
c0005386:	e8 ed 0b 00 00       	call   c0005f78 <ff_wtoupper>
c000538b:	5a                   	pop    edx
c000538c:	59                   	pop    ecx
c000538d:	68 b5 01 00 00       	push   0x1b5
c0005392:	50                   	push   eax
c0005393:	e8 cc 0a 00 00       	call   c0005e64 <ff_uni2oem>
c0005398:	83 c4 10             	add    esp,0x10
c000539b:	0f b7 f0             	movzx  esi,ax
c000539e:	85 f6                	test   esi,esi
c00053a0:	89 f7                	mov    edi,esi
c00053a2:	74 d4                	je     c0005378 <f_setlabel+0x50>
c00053a4:	89 f2                	mov    edx,esi
c00053a6:	b8 d0 74 02 c0       	mov    eax,0xc00274d0
c00053ab:	e8 ae cc ff ff       	call   c000205e <chk_chr>
c00053b0:	85 c0                	test   eax,eax
c00053b2:	75 c4                	jne    c0005378 <f_setlabel+0x50>
c00053b4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00053ba:	0f 87 c9 00 00 00    	ja     c0005489 <f_setlabel+0x161>
c00053c0:	e9 e0 00 00 00       	jmp    c00054a5 <f_setlabel+0x17d>
c00053c5:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ca:	74 ac                	je     c0005378 <f_setlabel+0x50>
c00053cc:	85 db                	test   ebx,ebx
c00053ce:	74 0e                	je     c00053de <f_setlabel+0xb6>
c00053d0:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053d5:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053d8:	75 04                	jne    c00053de <f_setlabel+0xb6>
c00053da:	89 c3                	mov    ebx,eax
c00053dc:	eb ee                	jmp    c00053cc <f_setlabel+0xa4>
c00053de:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053ea:	31 d2                	xor    edx,edx
c00053ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053f4:	e8 3e e1 ff ff       	call   c0003537 <dir_sdi>
c00053f9:	85 c0                	test   eax,eax
c00053fb:	89 c6                	mov    esi,eax
c00053fd:	0f 85 ac 00 00 00    	jne    c00054af <f_setlabel+0x187>
c0005403:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005407:	ba 01 00 00 00       	mov    edx,0x1
c000540c:	e8 20 e5 ff ff       	call   c0003931 <dir_read>
c0005411:	85 c0                	test   eax,eax
c0005413:	75 18                	jne    c000542d <f_setlabel+0x105>
c0005415:	85 db                	test   ebx,ebx
c0005417:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000541b:	74 0b                	je     c0005428 <f_setlabel+0x100>
c000541d:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005421:	b9 0b 00 00 00       	mov    ecx,0xb
c0005426:	eb 47                	jmp    c000546f <f_setlabel+0x147>
c0005428:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000542b:	eb 47                	jmp    c0005474 <f_setlabel+0x14c>
c000542d:	83 f8 04             	cmp    eax,0x4
c0005430:	75 53                	jne    c0005485 <f_setlabel+0x15d>
c0005432:	85 db                	test   ebx,ebx
c0005434:	74 79                	je     c00054af <f_setlabel+0x187>
c0005436:	8d 44 24 20          	lea    eax,[esp+0x20]
c000543a:	ba 01 00 00 00       	mov    edx,0x1
c000543f:	e8 88 e4 ff ff       	call   c00038cc <dir_alloc>
c0005444:	85 c0                	test   eax,eax
c0005446:	89 c6                	mov    esi,eax
c0005448:	75 65                	jne    c00054af <f_setlabel+0x187>
c000544a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000544e:	b9 20 00 00 00       	mov    ecx,0x20
c0005453:	31 d2                	xor    edx,edx
c0005455:	e8 d7 cb ff ff       	call   c0002031 <mem_set>
c000545a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000545e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005463:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005467:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000546b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000546f:	e8 a8 cb ff ff       	call   c000201c <mem_cpy>
c0005474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005478:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000547c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005480:	e8 05 db ff ff       	call   c0002f8a <sync_fs>
c0005485:	89 c6                	mov    esi,eax
c0005487:	eb 26                	jmp    c00054af <f_setlabel+0x187>
c0005489:	83 fb 09             	cmp    ebx,0x9
c000548c:	0f 87 e6 fe ff ff    	ja     c0005378 <f_setlabel+0x50>
c0005492:	89 f0                	mov    eax,esi
c0005494:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005498:	43                   	inc    ebx
c0005499:	89 f8                	mov    eax,edi
c000549b:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000549f:	43                   	inc    ebx
c00054a0:	e9 ba fe ff ff       	jmp    c000535f <f_setlabel+0x37>
c00054a5:	83 fb 0a             	cmp    ebx,0xa
c00054a8:	76 ef                	jbe    c0005499 <f_setlabel+0x171>
c00054aa:	e9 c9 fe ff ff       	jmp    c0005378 <f_setlabel+0x50>
c00054af:	83 c4 50             	add    esp,0x50
c00054b2:	89 f0                	mov    eax,esi
c00054b4:	5b                   	pop    ebx
c00054b5:	5e                   	pop    esi
c00054b6:	5f                   	pop    edi
c00054b7:	c3                   	ret    

c00054b8 <f_expand>:
c00054b8:	55                   	push   ebp
c00054b9:	57                   	push   edi
c00054ba:	56                   	push   esi
c00054bb:	53                   	push   ebx
c00054bc:	83 ec 2c             	sub    esp,0x2c
c00054bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054c7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054cf:	89 d8                	mov    eax,ebx
c00054d1:	e8 d6 cf ff ff       	call   c00024ac <validate>
c00054d6:	85 c0                	test   eax,eax
c00054d8:	89 c6                	mov    esi,eax
c00054da:	0f 85 3b 01 00 00    	jne    c000561b <f_expand+0x163>
c00054e0:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054e4:	85 f6                	test   esi,esi
c00054e6:	0f 85 2f 01 00 00    	jne    c000561b <f_expand+0x163>
c00054ec:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054f1:	75 0a                	jne    c00054fd <f_expand+0x45>
c00054f3:	be 07 00 00 00       	mov    esi,0x7
c00054f8:	e9 1e 01 00 00       	jmp    c000561b <f_expand+0x163>
c00054fd:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005501:	75 f0                	jne    c00054f3 <f_expand+0x3b>
c0005503:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005507:	74 ea                	je     c00054f3 <f_expand+0x3b>
c0005509:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000550d:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005511:	c1 e7 09             	shl    edi,0x9
c0005514:	8d 47 ff             	lea    eax,[edi-0x1]
c0005517:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000551b:	0f 95 c0             	setne  al
c000551e:	31 d2                	xor    edx,edx
c0005520:	0f b6 c0             	movzx  eax,al
c0005523:	89 c5                	mov    ebp,eax
c0005525:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005529:	f7 f7                	div    edi
c000552b:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000552e:	01 e8                	add    eax,ebp
c0005530:	83 ff 01             	cmp    edi,0x1
c0005533:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005537:	76 05                	jbe    c000553e <f_expand+0x86>
c0005539:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000553c:	77 05                	ja     c0005543 <f_expand+0x8b>
c000553e:	bf 02 00 00 00       	mov    edi,0x2
c0005543:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005546:	89 fd                	mov    ebp,edi
c0005548:	31 c9                	xor    ecx,ecx
c000554a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000554e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005550:	89 ea                	mov    edx,ebp
c0005552:	45                   	inc    ebp
c0005553:	e8 da de ff ff       	call   c0003432 <get_fat.isra.2>
c0005558:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000555c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005560:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005563:	77 05                	ja     c000556a <f_expand+0xb2>
c0005565:	bd 02 00 00 00       	mov    ebp,0x2
c000556a:	83 f8 01             	cmp    eax,0x1
c000556d:	74 20                	je     c000558f <f_expand+0xd7>
c000556f:	83 f8 ff             	cmp    eax,0xffffffff
c0005572:	74 25                	je     c0005599 <f_expand+0xe1>
c0005574:	85 c0                	test   eax,eax
c0005576:	75 09                	jne    c0005581 <f_expand+0xc9>
c0005578:	41                   	inc    ecx
c0005579:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000557d:	75 07                	jne    c0005586 <f_expand+0xce>
c000557f:	eb 1f                	jmp    c00055a0 <f_expand+0xe8>
c0005581:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005584:	31 c9                	xor    ecx,ecx
c0005586:	39 fd                	cmp    ebp,edi
c0005588:	75 c0                	jne    c000554a <f_expand+0x92>
c000558a:	e9 64 ff ff ff       	jmp    c00054f3 <f_expand+0x3b>
c000558f:	be 02 00 00 00       	mov    esi,0x2
c0005594:	e9 82 00 00 00       	jmp    c000561b <f_expand+0x163>
c0005599:	be 01 00 00 00       	mov    esi,0x1
c000559e:	eb 7b                	jmp    c000561b <f_expand+0x163>
c00055a0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055a5:	74 2b                	je     c00055d2 <f_expand+0x11a>
c00055a7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00055aa:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00055ae:	85 ed                	test   ebp,ebp
c00055b0:	74 24                	je     c00055d6 <f_expand+0x11e>
c00055b2:	83 c9 ff             	or     ecx,0xffffffff
c00055b5:	83 fd 01             	cmp    ebp,0x1
c00055b8:	74 03                	je     c00055bd <f_expand+0x105>
c00055ba:	8d 4f 01             	lea    ecx,[edi+0x1]
c00055bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c1:	89 fa                	mov    edx,edi
c00055c3:	e8 e7 d3 ff ff       	call   c00029af <put_fat>
c00055c8:	85 c0                	test   eax,eax
c00055ca:	75 4d                	jne    c0005619 <f_expand+0x161>
c00055cc:	89 f8                	mov    eax,edi
c00055ce:	4d                   	dec    ebp
c00055cf:	47                   	inc    edi
c00055d0:	eb dc                	jmp    c00055ae <f_expand+0xf6>
c00055d2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055d5:	48                   	dec    eax
c00055d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055da:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055df:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055e2:	74 37                	je     c000561b <f_expand+0x163>
c00055e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055ee:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055f1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055f4:	83 c8 40             	or     eax,0x40
c00055f7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055fa:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055fd:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005600:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005603:	39 c8                	cmp    eax,ecx
c0005605:	77 14                	ja     c000561b <f_expand+0x163>
c0005607:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000560b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000560e:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005611:	83 c8 01             	or     eax,0x1
c0005614:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005617:	eb 02                	jmp    c000561b <f_expand+0x163>
c0005619:	89 c6                	mov    esi,eax
c000561b:	83 c4 2c             	add    esp,0x2c
c000561e:	89 f0                	mov    eax,esi
c0005620:	5b                   	pop    ebx
c0005621:	5e                   	pop    esi
c0005622:	5f                   	pop    edi
c0005623:	5d                   	pop    ebp
c0005624:	c3                   	ret    

c0005625 <f_mkfs>:
c0005625:	55                   	push   ebp
c0005626:	57                   	push   edi
c0005627:	56                   	push   esi
c0005628:	be 0b 00 00 00       	mov    esi,0xb
c000562d:	53                   	push   ebx
c000562e:	83 ec 5c             	sub    esp,0x5c
c0005631:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005635:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005639:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000563d:	e8 1e ce ff ff       	call   c0002460 <get_ldnumber>
c0005642:	85 c0                	test   eax,eax
c0005644:	0f 88 e0 07 00 00    	js     c0005e2a <f_mkfs+0x805>
c000564a:	8b 14 85 a0 e4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1b60]
c0005651:	85 d2                	test   edx,edx
c0005653:	74 03                	je     c0005658 <f_mkfs+0x33>
c0005655:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005658:	85 db                	test   ebx,ebx
c000565a:	75 05                	jne    c0005661 <f_mkfs+0x3c>
c000565c:	bb c0 74 02 c0       	mov    ebx,0xc00274c0
c0005661:	0f b6 c0             	movzx  eax,al
c0005664:	83 ec 0c             	sub    esp,0xc
c0005667:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000566b:	be 03 00 00 00       	mov    esi,0x3
c0005670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005674:	e8 29 c9 ff ff       	call   c0001fa2 <disk_initialize>
c0005679:	83 c4 10             	add    esp,0x10
c000567c:	a8 01                	test   al,0x1
c000567e:	0f 85 a6 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005684:	a8 04                	test   al,0x4
c0005686:	be 0a 00 00 00       	mov    esi,0xa
c000568b:	0f 85 99 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005691:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005694:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005698:	85 c0                	test   eax,eax
c000569a:	75 20                	jne    c00056bc <f_mkfs+0x97>
c000569c:	51                   	push   ecx
c000569d:	8d 44 24 44          	lea    eax,[esp+0x44]
c00056a1:	50                   	push   eax
c00056a2:	6a 03                	push   0x3
c00056a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00056a8:	e8 24 c9 ff ff       	call   c0001fd1 <disk_ioctl>
c00056ad:	83 c4 10             	add    esp,0x10
c00056b0:	85 c0                	test   eax,eax
c00056b2:	74 08                	je     c00056bc <f_mkfs+0x97>
c00056b4:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056bc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056c0:	8d 42 ff             	lea    eax,[edx-0x1]
c00056c3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056c8:	77 04                	ja     c00056ce <f_mkfs+0xa9>
c00056ca:	85 c2                	test   edx,eax
c00056cc:	74 08                	je     c00056d6 <f_mkfs+0xb1>
c00056ce:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056d6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056d9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e1:	48                   	dec    eax
c00056e2:	3c 01                	cmp    al,0x1
c00056e4:	76 05                	jbe    c00056eb <f_mkfs+0xc6>
c00056e6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00056f2:	48                   	dec    eax
c00056f3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056f8:	77 15                	ja     c000570f <f_mkfs+0xea>
c00056fa:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c00056ff:	b8 00 02 00 00       	mov    eax,0x200
c0005704:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005709:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000570d:	eb 08                	jmp    c0005717 <f_mkfs+0xf2>
c000570f:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005717:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000571a:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005720:	77 0f                	ja     c0005731 <f_mkfs+0x10c>
c0005722:	8d 47 ff             	lea    eax,[edi-0x1]
c0005725:	85 f8                	test   eax,edi
c0005727:	b8 00 00 00 00       	mov    eax,0x0
c000572c:	0f 45 f8             	cmovne edi,eax
c000572f:	eb 02                	jmp    c0005733 <f_mkfs+0x10e>
c0005731:	31 ff                	xor    edi,edi
c0005733:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000573b:	77 0a                	ja     c0005747 <f_mkfs+0x122>
c000573d:	be 11 00 00 00       	mov    esi,0x11
c0005742:	e9 e3 06 00 00       	jmp    c0005e2a <f_mkfs+0x805>
c0005747:	85 ed                	test   ebp,ebp
c0005749:	8b 33                	mov    esi,DWORD PTR [ebx]
c000574b:	89 eb                	mov    ebx,ebp
c000574d:	75 1e                	jne    c000576d <f_mkfs+0x148>
c000574f:	83 ec 0c             	sub    esp,0xc
c0005752:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005759:	25 00 fe ff ff       	and    eax,0xfffffe00
c000575e:	50                   	push   eax
c000575f:	e8 d0 06 00 00       	call   c0005e34 <ff_memalloc>
c0005764:	83 c4 10             	add    esp,0x10
c0005767:	85 c0                	test   eax,eax
c0005769:	89 c3                	mov    ebx,eax
c000576b:	74 d0                	je     c000573d <f_mkfs+0x118>
c000576d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005775:	52                   	push   edx
c0005776:	8d 44 24 48          	lea    eax,[esp+0x48]
c000577a:	50                   	push   eax
c000577b:	6a 01                	push   0x1
c000577d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005781:	e8 4b c8 ff ff       	call   c0001fd1 <disk_ioctl>
c0005786:	83 c4 10             	add    esp,0x10
c0005789:	85 c0                	test   eax,eax
c000578b:	0f 85 42 06 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005791:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005799:	89 f0                	mov    eax,esi
c000579b:	83 e0 08             	and    eax,0x8
c000579e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00057a2:	75 18                	jne    c00057bc <f_mkfs+0x197>
c00057a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057a8:	83 f8 3f             	cmp    eax,0x3f
c00057ab:	76 0f                	jbe    c00057bc <f_mkfs+0x197>
c00057ad:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00057b5:	83 e8 3f             	sub    eax,0x3f
c00057b8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00057bc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00057c4:	83 f8 7f             	cmp    eax,0x7f
c00057c7:	0f 86 5f 02 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c00057cd:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057d3:	b9 80 00 00 00       	mov    ecx,0x80
c00057d8:	77 05                	ja     c00057df <f_mkfs+0x1ba>
c00057da:	c1 ef 09             	shr    edi,0x9
c00057dd:	89 f9                	mov    ecx,edi
c00057df:	89 f0                	mov    eax,esi
c00057e1:	89 f7                	mov    edi,esi
c00057e3:	83 e0 01             	and    eax,0x1
c00057e6:	83 e7 02             	and    edi,0x2
c00057e9:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057ed:	0f b6 c0             	movzx  eax,al
c00057f0:	74 0a                	je     c00057fc <f_mkfs+0x1d7>
c00057f2:	85 c0                	test   eax,eax
c00057f4:	0f 84 53 01 00 00    	je     c000594d <f_mkfs+0x328>
c00057fa:	eb 37                	jmp    c0005833 <f_mkfs+0x20e>
c00057fc:	85 c0                	test   eax,eax
c00057fe:	be 13 00 00 00       	mov    esi,0x13
c0005803:	75 2e                	jne    c0005833 <f_mkfs+0x20e>
c0005805:	e9 e0 05 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c000580a:	83 f8 02             	cmp    eax,0x2
c000580d:	0f 85 11 02 00 00    	jne    c0005a24 <f_mkfs+0x3ff>
c0005813:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005819:	0f 86 e8 01 00 00    	jbe    c0005a07 <f_mkfs+0x3e2>
c000581f:	85 c9                	test   ecx,ecx
c0005821:	0f 85 d5 05 00 00    	jne    c0005dfc <f_mkfs+0x7d7>
c0005827:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000582a:	83 f9 40             	cmp    ecx,0x40
c000582d:	0f 87 d9 05 00 00    	ja     c0005e0c <f_mkfs+0x7e7>
c0005833:	85 c9                	test   ecx,ecx
c0005835:	89 cf                	mov    edi,ecx
c0005837:	75 1c                	jne    c0005855 <f_mkfs+0x230>
c0005839:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000583d:	b8 a0 74 02 c0       	mov    eax,0xc00274a0
c0005842:	bf 01 00 00 00       	mov    edi,0x1
c0005847:	c1 ee 0c             	shr    esi,0xc
c000584a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000584d:	85 d2                	test   edx,edx
c000584f:	0f 85 67 01 00 00    	jne    c00059bc <f_mkfs+0x397>
c0005855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005859:	31 d2                	xor    edx,edx
c000585b:	f7 f7                	div    edi
c000585d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005862:	0f 86 66 01 00 00    	jbe    c00059ce <f_mkfs+0x3a9>
c0005868:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000586d:	83 c0 02             	add    eax,0x2
c0005870:	01 c0                	add    eax,eax
c0005872:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000587a:	05 ff 01 00 00       	add    eax,0x1ff
c000587f:	c1 e8 09             	shr    eax,0x9
c0005882:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000588a:	c1 e0 05             	shl    eax,0x5
c000588d:	c1 e8 09             	shr    eax,0x9
c0005890:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005894:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005899:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000589d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058a1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00058a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00058a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ad:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00058b2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00058b6:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00058ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00058be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00058c2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00058c6:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00058ca:	f7 d8                	neg    eax
c00058cc:	21 c6                	and    esi,eax
c00058ce:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058d3:	29 d6                	sub    esi,edx
c00058d5:	83 f8 03             	cmp    eax,0x3
c00058d8:	0f 85 03 01 00 00    	jne    c00059e1 <f_mkfs+0x3bc>
c00058de:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058e2:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058e6:	89 f8                	mov    eax,edi
c00058e8:	c1 e0 04             	shl    eax,0x4
c00058eb:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00058ef:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058f3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058f7:	0f 82 2f 01 00 00    	jb     c0005a2c <f_mkfs+0x407>
c00058fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005901:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005905:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005909:	89 c2                	mov    edx,eax
c000590b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000590f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005914:	29 c2                	sub    edx,eax
c0005916:	89 d0                	mov    eax,edx
c0005918:	31 d2                	xor    edx,edx
c000591a:	f7 f7                	div    edi
c000591c:	89 c6                	mov    esi,eax
c000591e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005923:	83 f8 03             	cmp    eax,0x3
c0005926:	0f 85 de fe ff ff    	jne    c000580a <f_mkfs+0x1e5>
c000592c:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005932:	0f 87 03 01 00 00    	ja     c0005a3b <f_mkfs+0x416>
c0005938:	85 c9                	test   ecx,ecx
c000593a:	0f 85 ec 00 00 00    	jne    c0005a2c <f_mkfs+0x407>
c0005940:	83 ff 01             	cmp    edi,0x1
c0005943:	0f 86 e3 00 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c0005949:	d1 ef                	shr    edi,1
c000594b:	89 f9                	mov    ecx,edi
c000594d:	85 c9                	test   ecx,ecx
c000594f:	89 ce                	mov    esi,ecx
c0005951:	75 25                	jne    c0005978 <f_mkfs+0x353>
c0005953:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005957:	b8 b0 74 02 c0       	mov    eax,0xc00274b0
c000595c:	b9 01 00 00 00       	mov    ecx,0x1
c0005961:	c1 ee 11             	shr    esi,0x11
c0005964:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005967:	85 d2                	test   edx,edx
c0005969:	74 0b                	je     c0005976 <f_mkfs+0x351>
c000596b:	83 c0 02             	add    eax,0x2
c000596e:	39 f2                	cmp    edx,esi
c0005970:	77 04                	ja     c0005976 <f_mkfs+0x351>
c0005972:	01 c9                	add    ecx,ecx
c0005974:	eb ee                	jmp    c0005964 <f_mkfs+0x33f>
c0005976:	31 f6                	xor    esi,esi
c0005978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000597c:	31 d2                	xor    edx,edx
c000597e:	f7 f1                	div    ecx
c0005980:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005987:	2d f6 ff 00 00       	sub    eax,0xfff6
c000598c:	c1 ea 09             	shr    edx,0x9
c000598f:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005994:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005998:	0f 87 8e 00 00 00    	ja     c0005a2c <f_mkfs+0x407>
c000599e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00059a6:	89 cf                	mov    edi,ecx
c00059a8:	89 f1                	mov    ecx,esi
c00059aa:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00059b2:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00059b7:	e9 d8 fe ff ff       	jmp    c0005894 <f_mkfs+0x26f>
c00059bc:	83 c0 02             	add    eax,0x2
c00059bf:	39 f2                	cmp    edx,esi
c00059c1:	0f 87 8e fe ff ff    	ja     c0005855 <f_mkfs+0x230>
c00059c7:	01 ff                	add    edi,edi
c00059c9:	e9 7c fe ff ff       	jmp    c000584a <f_mkfs+0x225>
c00059ce:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00059d3:	8d 04 40             	lea    eax,[eax+eax*2]
c00059d6:	40                   	inc    eax
c00059d7:	d1 e8                	shr    eax,1
c00059d9:	83 c0 03             	add    eax,0x3
c00059dc:	e9 91 fe ff ff       	jmp    c0005872 <f_mkfs+0x24d>
c00059e1:	31 d2                	xor    edx,edx
c00059e3:	89 f0                	mov    eax,esi
c00059e5:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059e9:	85 d2                	test   edx,edx
c00059eb:	74 09                	je     c00059f6 <f_mkfs+0x3d1>
c00059ed:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059f1:	4e                   	dec    esi
c00059f2:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059f6:	89 f0                	mov    eax,esi
c00059f8:	31 d2                	xor    edx,edx
c00059fa:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059fe:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005a02:	e9 df fe ff ff       	jmp    c00058e6 <f_mkfs+0x2c1>
c0005a07:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a0d:	77 2c                	ja     c0005a3b <f_mkfs+0x416>
c0005a0f:	85 c9                	test   ecx,ecx
c0005a11:	75 19                	jne    c0005a2c <f_mkfs+0x407>
c0005a13:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005a16:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a1c:	0f 86 11 fe ff ff    	jbe    c0005833 <f_mkfs+0x20e>
c0005a22:	eb 08                	jmp    c0005a2c <f_mkfs+0x407>
c0005a24:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a2a:	76 0a                	jbe    c0005a36 <f_mkfs+0x411>
c0005a2c:	be 0e 00 00 00       	mov    esi,0xe
c0005a31:	e9 b4 03 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c0005a36:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a3b:	31 d2                	xor    edx,edx
c0005a3d:	b9 00 02 00 00       	mov    ecx,0x200
c0005a42:	89 d8                	mov    eax,ebx
c0005a44:	e8 e8 c5 ff ff       	call   c0002031 <mem_set>
c0005a49:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a4e:	ba 52 74 02 c0       	mov    edx,0xc0027452
c0005a53:	89 d8                	mov    eax,ebx
c0005a55:	e8 c2 c5 ff ff       	call   c000201c <mem_cpy>
c0005a5a:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a5d:	ba 00 02 00 00       	mov    edx,0x200
c0005a62:	e8 ae c5 ff ff       	call   c0002015 <st_word>
c0005a67:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a6c:	89 f8                	mov    eax,edi
c0005a6e:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a71:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a74:	e8 9c c5 ff ff       	call   c0002015 <st_word>
c0005a79:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a7d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a80:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a85:	83 f8 03             	cmp    eax,0x3
c0005a88:	b8 00 00 00 00       	mov    eax,0x0
c0005a8d:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005a92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a96:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005a9d:	e8 73 c5 ff ff       	call   c0002015 <st_word>
c0005aa2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005aa6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005aac:	77 0a                	ja     c0005ab8 <f_mkfs+0x493>
c0005aae:	8d 43 13             	lea    eax,[ebx+0x13]
c0005ab1:	e8 5f c5 ff ff       	call   c0002015 <st_word>
c0005ab6:	eb 08                	jmp    c0005ac0 <f_mkfs+0x49b>
c0005ab8:	8d 43 20             	lea    eax,[ebx+0x20]
c0005abb:	e8 59 c5 ff ff       	call   c0002019 <st_dword>
c0005ac0:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005ac4:	8d 43 18             	lea    eax,[ebx+0x18]
c0005ac7:	ba 3f 00 00 00       	mov    edx,0x3f
c0005acc:	e8 44 c5 ff ff       	call   c0002015 <st_word>
c0005ad1:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005ad4:	ba ff 00 00 00       	mov    edx,0xff
c0005ad9:	e8 37 c5 ff ff       	call   c0002015 <st_word>
c0005ade:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ae2:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005ae5:	e8 2f c5 ff ff       	call   c0002019 <st_dword>
c0005aea:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005aef:	83 f8 03             	cmp    eax,0x3
c0005af2:	75 57                	jne    c0005b4b <f_mkfs+0x526>
c0005af4:	8d 43 43             	lea    eax,[ebx+0x43]
c0005af7:	ba 00 00 21 50       	mov    edx,0x50210000
c0005afc:	e8 18 c5 ff ff       	call   c0002019 <st_dword>
c0005b01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005b05:	8d 43 24             	lea    eax,[ebx+0x24]
c0005b08:	e8 0c c5 ff ff       	call   c0002019 <st_dword>
c0005b0d:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005b10:	ba 02 00 00 00       	mov    edx,0x2
c0005b15:	e8 ff c4 ff ff       	call   c0002019 <st_dword>
c0005b1a:	8d 43 30             	lea    eax,[ebx+0x30]
c0005b1d:	ba 01 00 00 00       	mov    edx,0x1
c0005b22:	e8 ee c4 ff ff       	call   c0002015 <st_word>
c0005b27:	8d 43 32             	lea    eax,[ebx+0x32]
c0005b2a:	ba 06 00 00 00       	mov    edx,0x6
c0005b2f:	e8 e1 c4 ff ff       	call   c0002015 <st_word>
c0005b34:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b37:	b9 13 00 00 00       	mov    ecx,0x13
c0005b3c:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005b40:	ba 5e 74 02 c0       	mov    edx,0xc002745e
c0005b45:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005b49:	eb 2f                	jmp    c0005b7a <f_mkfs+0x555>
c0005b4b:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b4e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b53:	e8 c1 c4 ff ff       	call   c0002019 <st_dword>
c0005b58:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b5d:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b60:	e8 b0 c4 ff ff       	call   c0002015 <st_word>
c0005b65:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b68:	b9 13 00 00 00       	mov    ecx,0x13
c0005b6d:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b71:	ba 72 74 02 c0       	mov    edx,0xc0027472
c0005b76:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b7a:	e8 9d c4 ff ff       	call   c000201c <mem_cpy>
c0005b7f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b85:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b8e:	e8 82 c4 ff ff       	call   c0002015 <st_word>
c0005b93:	6a 01                	push   0x1
c0005b95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b99:	53                   	push   ebx
c0005b9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b9e:	e8 18 c4 ff ff       	call   c0001fbb <disk_write>
c0005ba3:	83 c4 10             	add    esp,0x10
c0005ba6:	85 c0                	test   eax,eax
c0005ba8:	0f 85 25 02 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005bae:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005bb3:	83 f8 03             	cmp    eax,0x3
c0005bb6:	0f 85 98 00 00 00    	jne    c0005c54 <f_mkfs+0x62f>
c0005bbc:	6a 01                	push   0x1
c0005bbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005bc2:	83 c0 06             	add    eax,0x6
c0005bc5:	50                   	push   eax
c0005bc6:	53                   	push   ebx
c0005bc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bcb:	e8 eb c3 ff ff       	call   c0001fbb <disk_write>
c0005bd0:	b9 00 02 00 00       	mov    ecx,0x200
c0005bd5:	31 d2                	xor    edx,edx
c0005bd7:	89 d8                	mov    eax,ebx
c0005bd9:	e8 53 c4 ff ff       	call   c0002031 <mem_set>
c0005bde:	ba 52 52 61 41       	mov    edx,0x41615252
c0005be3:	89 d8                	mov    eax,ebx
c0005be5:	e8 2f c4 ff ff       	call   c0002019 <st_dword>
c0005bea:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bf0:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bf5:	e8 1f c4 ff ff       	call   c0002019 <st_dword>
c0005bfa:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bfd:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005c03:	e8 11 c4 ff ff       	call   c0002019 <st_dword>
c0005c08:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005c0e:	ba 02 00 00 00       	mov    edx,0x2
c0005c13:	e8 01 c4 ff ff       	call   c0002019 <st_dword>
c0005c18:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005c1e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005c23:	e8 ed c3 ff ff       	call   c0002015 <st_word>
c0005c28:	6a 01                	push   0x1
c0005c2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005c2e:	83 c0 07             	add    eax,0x7
c0005c31:	50                   	push   eax
c0005c32:	53                   	push   ebx
c0005c33:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005c37:	e8 7f c3 ff ff       	call   c0001fbb <disk_write>
c0005c3c:	83 c4 20             	add    esp,0x20
c0005c3f:	6a 01                	push   0x1
c0005c41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c45:	40                   	inc    eax
c0005c46:	50                   	push   eax
c0005c47:	53                   	push   ebx
c0005c48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c4c:	e8 6a c3 ff ff       	call   c0001fbb <disk_write>
c0005c51:	83 c4 10             	add    esp,0x10
c0005c54:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c58:	31 d2                	xor    edx,edx
c0005c5a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c5e:	c1 e8 09             	shr    eax,0x9
c0005c61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c65:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c6b:	89 d8                	mov    eax,ebx
c0005c6d:	e8 bf c3 ff ff       	call   c0002031 <mem_set>
c0005c72:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c77:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005c7c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005c84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c89:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c8d:	83 f8 01             	cmp    eax,0x1
c0005c90:	0f 44 d1             	cmove  edx,ecx
c0005c93:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005c97:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c9c:	75 21                	jne    c0005cbf <f_mkfs+0x69a>
c0005c9e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ca3:	89 d8                	mov    eax,ebx
c0005ca5:	e8 6f c3 ff ff       	call   c0002019 <st_dword>
c0005caa:	8d 43 04             	lea    eax,[ebx+0x4]
c0005cad:	83 ca ff             	or     edx,0xffffffff
c0005cb0:	e8 64 c3 ff ff       	call   c0002019 <st_dword>
c0005cb5:	8d 43 08             	lea    eax,[ebx+0x8]
c0005cb8:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005cbd:	eb 06                	jmp    c0005cc5 <f_mkfs+0x6a0>
c0005cbf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005cc3:	89 d8                	mov    eax,ebx
c0005cc5:	e8 4f c3 ff ff       	call   c0002019 <st_dword>
c0005cca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cd2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005cd6:	0f 46 c6             	cmovbe eax,esi
c0005cd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cdd:	50                   	push   eax
c0005cde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ce2:	53                   	push   ebx
c0005ce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ce7:	e8 cf c2 ff ff       	call   c0001fbb <disk_write>
c0005cec:	83 c4 10             	add    esp,0x10
c0005cef:	85 c0                	test   eax,eax
c0005cf1:	0f 85 dc 00 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005cf7:	b9 00 02 00 00       	mov    ecx,0x200
c0005cfc:	31 d2                	xor    edx,edx
c0005cfe:	89 d8                	mov    eax,ebx
c0005d00:	e8 2c c3 ff ff       	call   c0002031 <mem_set>
c0005d05:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005d09:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005d0d:	29 ce                	sub    esi,ecx
c0005d0f:	75 bd                	jne    c0005cce <f_mkfs+0x6a9>
c0005d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d15:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005d1d:	40                   	inc    eax
c0005d1e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005d22:	0f 87 6f ff ff ff    	ja     c0005c97 <f_mkfs+0x672>
c0005d28:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d2d:	83 f8 03             	cmp    eax,0x3
c0005d30:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005d35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d39:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d3d:	0f 46 f7             	cmovbe esi,edi
c0005d40:	56                   	push   esi
c0005d41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d45:	53                   	push   ebx
c0005d46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d4a:	e8 6c c2 ff ff       	call   c0001fbb <disk_write>
c0005d4f:	83 c4 10             	add    esp,0x10
c0005d52:	85 c0                	test   eax,eax
c0005d54:	75 7d                	jne    c0005dd3 <f_mkfs+0x7ae>
c0005d56:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d5a:	29 f7                	sub    edi,esi
c0005d5c:	75 d7                	jne    c0005d35 <f_mkfs+0x710>
c0005d5e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d63:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d68:	83 f8 03             	cmp    eax,0x3
c0005d6b:	74 1e                	je     c0005d8b <f_mkfs+0x766>
c0005d6d:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d75:	b9 06 00 00 00       	mov    ecx,0x6
c0005d7a:	77 0f                	ja     c0005d8b <f_mkfs+0x766>
c0005d7c:	83 f8 02             	cmp    eax,0x2
c0005d7f:	b9 04 00 00 00       	mov    ecx,0x4
c0005d84:	74 05                	je     c0005d8b <f_mkfs+0x766>
c0005d86:	b9 01 00 00 00       	mov    ecx,0x1
c0005d8b:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d90:	75 2a                	jne    c0005dbc <f_mkfs+0x797>
c0005d92:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d9a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d9e:	83 ec 0c             	sub    esp,0xc
c0005da1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005da5:	53                   	push   ebx
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005dae:	e8 87 d2 ff ff       	call   c000303a <create_partition>
c0005db3:	83 c4 10             	add    esp,0x10
c0005db6:	85 c0                	test   eax,eax
c0005db8:	89 c6                	mov    esi,eax
c0005dba:	75 2e                	jne    c0005dea <f_mkfs+0x7c5>
c0005dbc:	50                   	push   eax
c0005dbd:	31 f6                	xor    esi,esi
c0005dbf:	6a 00                	push   0x0
c0005dc1:	6a 00                	push   0x0
c0005dc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005dc7:	e8 05 c2 ff ff       	call   c0001fd1 <disk_ioctl>
c0005dcc:	83 c4 10             	add    esp,0x10
c0005dcf:	85 c0                	test   eax,eax
c0005dd1:	74 17                	je     c0005dea <f_mkfs+0x7c5>
c0005dd3:	85 ed                	test   ebp,ebp
c0005dd5:	75 0c                	jne    c0005de3 <f_mkfs+0x7be>
c0005dd7:	83 ec 0c             	sub    esp,0xc
c0005dda:	53                   	push   ebx
c0005ddb:	e8 6c 00 00 00       	call   c0005e4c <ff_memfree>
c0005de0:	83 c4 10             	add    esp,0x10
c0005de3:	be 01 00 00 00       	mov    esi,0x1
c0005de8:	eb 40                	jmp    c0005e2a <f_mkfs+0x805>
c0005dea:	85 ed                	test   ebp,ebp
c0005dec:	75 3c                	jne    c0005e2a <f_mkfs+0x805>
c0005dee:	83 ec 0c             	sub    esp,0xc
c0005df1:	53                   	push   ebx
c0005df2:	e8 55 00 00 00       	call   c0005e4c <ff_memfree>
c0005df7:	83 c4 10             	add    esp,0x10
c0005dfa:	eb 2e                	jmp    c0005e2a <f_mkfs+0x805>
c0005dfc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e01:	0f 85 46 fb ff ff    	jne    c000594d <f_mkfs+0x328>
c0005e07:	e9 20 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e0c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e11:	0f 85 3c fb ff ff    	jne    c0005953 <f_mkfs+0x32e>
c0005e17:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005e1d:	89 cf                	mov    edi,ecx
c0005e1f:	0f 86 30 fa ff ff    	jbe    c0005855 <f_mkfs+0x230>
c0005e25:	e9 02 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e2a:	83 c4 5c             	add    esp,0x5c
c0005e2d:	89 f0                	mov    eax,esi
c0005e2f:	5b                   	pop    ebx
c0005e30:	5e                   	pop    esi
c0005e31:	5f                   	pop    edi
c0005e32:	5d                   	pop    ebp
c0005e33:	c3                   	ret    

c0005e34 <ff_memalloc>:
c0005e34:	83 ec 0c             	sub    esp,0xc
c0005e37:	83 ec 0c             	sub    esp,0xc
c0005e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e3e:	e8 15 9d 00 00       	call   c000fb58 <malloc>
c0005e43:	83 c4 10             	add    esp,0x10
c0005e46:	83 c4 0c             	add    esp,0xc
c0005e49:	c3                   	ret    
c0005e4a:	66 90                	xchg   ax,ax

c0005e4c <ff_memfree>:
c0005e4c:	83 ec 0c             	sub    esp,0xc
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e56:	e8 0d 9d 00 00       	call   c000fb68 <free>
c0005e5b:	83 c4 10             	add    esp,0x10
c0005e5e:	90                   	nop
c0005e5f:	83 c4 0c             	add    esp,0xc
c0005e62:	c3                   	ret    
c0005e63:	90                   	nop

c0005e64 <ff_uni2oem>:
c0005e64:	83 ec 14             	sub    esp,0x14
c0005e67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e6b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e6f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e76:	c7 44 24 0c a0 78 02 c0 	mov    DWORD PTR [esp+0xc],0xc00278a0
c0005e7e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e83:	77 0b                	ja     c0005e90 <ff_uni2oem+0x2c>
c0005e85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e89:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e8e:	eb 64                	jmp    c0005ef4 <ff_uni2oem+0x90>
c0005e90:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e98:	77 5a                	ja     c0005ef4 <ff_uni2oem+0x90>
c0005e9a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e9e:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005ea3:	75 4f                	jne    c0005ef4 <ff_uni2oem+0x90>
c0005ea5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005eac:	eb 12                	jmp    c0005ec0 <ff_uni2oem+0x5c>
c0005eae:	66 90                	xchg   ax,ax
c0005eb0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005eb5:	83 c0 01             	add    eax,0x1
c0005eb8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ec0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ec5:	83 f8 7f             	cmp    eax,0x7f
c0005ec8:	77 1a                	ja     c0005ee4 <ff_uni2oem+0x80>
c0005eca:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ecf:	8d 14 00             	lea    edx,[eax+eax*1]
c0005ed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ed6:	01 d0                	add    eax,edx
c0005ed8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005edb:	0f b7 c0             	movzx  eax,ax
c0005ede:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ee2:	75 cc                	jne    c0005eb0 <ff_uni2oem+0x4c>
c0005ee4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ee9:	83 e8 80             	sub    eax,0xffffff80
c0005eec:	0f b6 c0             	movzx  eax,al
c0005eef:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ef4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ef9:	83 c4 14             	add    esp,0x14
c0005efc:	c3                   	ret    
c0005efd:	8d 76 00             	lea    esi,[esi+0x0]

c0005f00 <ff_oem2uni>:
c0005f00:	83 ec 18             	sub    esp,0x18
c0005f03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005f0b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005f10:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005f14:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005f1b:	c7 44 24 10 a0 78 02 c0 	mov    DWORD PTR [esp+0x10],0xc00278a0
c0005f23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f28:	83 f8 7f             	cmp    eax,0x7f
c0005f2b:	77 0b                	ja     c0005f38 <ff_oem2uni+0x38>
c0005f2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f31:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f36:	eb 34                	jmp    c0005f6c <ff_oem2uni+0x6c>
c0005f38:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f3c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f41:	75 29                	jne    c0005f6c <ff_oem2uni+0x6c>
c0005f43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f48:	3d ff 00 00 00       	cmp    eax,0xff
c0005f4d:	77 1d                	ja     c0005f6c <ff_oem2uni+0x6c>
c0005f4f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f54:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f59:	8d 14 00             	lea    edx,[eax+eax*1]
c0005f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f60:	01 d0                	add    eax,edx
c0005f62:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f65:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f6a:	66 90                	xchg   ax,ax
c0005f6c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f71:	83 c4 18             	add    esp,0x18
c0005f74:	c3                   	ret    
c0005f75:	8d 76 00             	lea    esi,[esi+0x0]

c0005f78 <ff_wtoupper>:
c0005f78:	83 ec 10             	sub    esp,0x10
c0005f7b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f83:	0f 87 a7 01 00 00    	ja     c0006130 <ff_wtoupper+0x1b8>
c0005f89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f8d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f92:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f97:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f9c:	77 0a                	ja     c0005fa8 <ff_wtoupper+0x30>
c0005f9e:	b8 a0 76 02 c0       	mov    eax,0xc00276a0
c0005fa3:	eb 0b                	jmp    c0005fb0 <ff_wtoupper+0x38>
c0005fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0005fa8:	b8 e0 75 02 c0       	mov    eax,0xc00275e0
c0005fad:	8d 76 00             	lea    esi,[esi+0x0]
c0005fb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fb8:	8d 50 02             	lea    edx,[eax+0x2]
c0005fbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fbf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fc2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005fc7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fcc:	85 c0                	test   eax,eax
c0005fce:	0f 84 50 01 00 00    	je     c0006124 <ff_wtoupper+0x1ac>
c0005fd4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fd9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fde:	39 c2                	cmp    edx,eax
c0005fe0:	0f 82 3e 01 00 00    	jb     c0006124 <ff_wtoupper+0x1ac>
c0005fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fea:	8d 50 02             	lea    edx,[eax+0x2]
c0005fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ff1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ff4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005ff9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ffe:	c1 e8 08             	shr    eax,0x8
c0006001:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0006006:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000600b:	0f b6 c0             	movzx  eax,al
c000600e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006013:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006018:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000601d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0006022:	01 ca                	add    edx,ecx
c0006024:	39 d0                	cmp    eax,edx
c0006026:	0f 8d d4 00 00 00    	jge    c0006100 <ff_wtoupper+0x188>
c000602c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006031:	83 f8 08             	cmp    eax,0x8
c0006034:	0f 87 e6 00 00 00    	ja     c0006120 <ff_wtoupper+0x1a8>
c000603a:	8b 04 85 a0 75 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8a60]
c0006041:	ff e0                	jmp    eax
c0006043:	90                   	nop
c0006044:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006049:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000604e:	29 c2                	sub    edx,eax
c0006050:	89 d0                	mov    eax,edx
c0006052:	8d 14 00             	lea    edx,[eax+eax*1]
c0006055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006059:	01 d0                	add    eax,edx
c000605b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000605e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006063:	e9 94 00 00 00       	jmp    c00060fc <ff_wtoupper+0x184>
c0006068:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c000606d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006071:	89 d1                	mov    ecx,edx
c0006073:	29 c1                	sub    ecx,eax
c0006075:	89 c8                	mov    eax,ecx
c0006077:	83 e0 01             	and    eax,0x1
c000607a:	89 c2                	mov    edx,eax
c000607c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006081:	29 d0                	sub    eax,edx
c0006083:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006088:	eb 72                	jmp    c00060fc <ff_wtoupper+0x184>
c000608a:	66 90                	xchg   ax,ax
c000608c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006091:	83 e8 10             	sub    eax,0x10
c0006094:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006099:	eb 61                	jmp    c00060fc <ff_wtoupper+0x184>
c000609b:	90                   	nop
c000609c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060a1:	83 e8 20             	sub    eax,0x20
c00060a4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a9:	eb 51                	jmp    c00060fc <ff_wtoupper+0x184>
c00060ab:	90                   	nop
c00060ac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060b1:	83 e8 30             	sub    eax,0x30
c00060b4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b9:	eb 41                	jmp    c00060fc <ff_wtoupper+0x184>
c00060bb:	90                   	nop
c00060bc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060c1:	83 e8 1a             	sub    eax,0x1a
c00060c4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c9:	eb 31                	jmp    c00060fc <ff_wtoupper+0x184>
c00060cb:	90                   	nop
c00060cc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060d1:	83 c0 08             	add    eax,0x8
c00060d4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d9:	eb 21                	jmp    c00060fc <ff_wtoupper+0x184>
c00060db:	90                   	nop
c00060dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060e1:	83 e8 50             	sub    eax,0x50
c00060e4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060e9:	eb 11                	jmp    c00060fc <ff_wtoupper+0x184>
c00060eb:	90                   	nop
c00060ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060f1:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060f6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060fb:	90                   	nop
c00060fc:	eb 22                	jmp    c0006120 <ff_wtoupper+0x1a8>
c00060fe:	66 90                	xchg   ax,ax
c0006100:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006105:	85 c0                	test   eax,eax
c0006107:	0f 85 a7 fe ff ff    	jne    c0005fb4 <ff_wtoupper+0x3c>
c000610d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006112:	d1 e0                	shl    eax,1
c0006114:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006118:	e9 97 fe ff ff       	jmp    c0005fb4 <ff_wtoupper+0x3c>
c000611d:	8d 76 00             	lea    esi,[esi+0x0]
c0006120:	90                   	nop
c0006121:	8d 76 00             	lea    esi,[esi+0x0]
c0006124:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006129:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000612d:	8d 76 00             	lea    esi,[esi+0x0]
c0006130:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006134:	83 c4 10             	add    esp,0x10
c0006137:	c3                   	ret    

c0006138 <utf2ucs>:
c0006138:	57                   	push   edi
c0006139:	31 c9                	xor    ecx,ecx
c000613b:	56                   	push   esi
c000613c:	89 d7                	mov    edi,edx
c000613e:	53                   	push   ebx
c000613f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0006143:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006147:	89 de                	mov    esi,ebx
c0006149:	c1 fe 08             	sar    esi,0x8
c000614c:	89 f2                	mov    edx,esi
c000614e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006151:	41                   	inc    ecx
c0006152:	85 db                	test   ebx,ebx
c0006154:	75 e9                	jne    c000613f <utf2ucs+0x7>
c0006156:	5b                   	pop    ebx
c0006157:	5e                   	pop    esi
c0006158:	5f                   	pop    edi
c0006159:	c3                   	ret    

c000615a <ucs2utfn>:
c000615a:	83 e1 fe             	and    ecx,0xfffffffe
c000615d:	01 d1                	add    ecx,edx
c000615f:	39 d1                	cmp    ecx,edx
c0006161:	75 04                	jne    c0006167 <ucs2utfn+0xd>
c0006163:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006166:	c3                   	ret    
c0006167:	57                   	push   edi
c0006168:	56                   	push   esi
c0006169:	53                   	push   ebx
c000616a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c000616d:	83 c2 02             	add    edx,0x2
c0006170:	89 de                	mov    esi,ebx
c0006172:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006176:	c1 e6 08             	shl    esi,0x8
c0006179:	09 f3                	or     ebx,esi
c000617b:	83 fb 3b             	cmp    ebx,0x3b
c000617e:	74 50                	je     c00061d0 <ucs2utfn+0x76>
c0006180:	83 fb 7f             	cmp    ebx,0x7f
c0006183:	7f 05                	jg     c000618a <ucs2utfn+0x30>
c0006185:	88 18                	mov    BYTE PTR [eax],bl
c0006187:	40                   	inc    eax
c0006188:	eb 42                	jmp    c00061cc <ucs2utfn+0x72>
c000618a:	89 df                	mov    edi,ebx
c000618c:	89 de                	mov    esi,ebx
c000618e:	c1 fe 06             	sar    esi,0x6
c0006191:	83 e7 3f             	and    edi,0x3f
c0006194:	83 cf 80             	or     edi,0xffffff80
c0006197:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000619d:	7f 12                	jg     c00061b1 <ucs2utfn+0x57>
c000619f:	83 ce c0             	or     esi,0xffffffc0
c00061a2:	83 c0 02             	add    eax,0x2
c00061a5:	89 f3                	mov    ebx,esi
c00061a7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061aa:	89 fb                	mov    ebx,edi
c00061ac:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061af:	eb 1b                	jmp    c00061cc <ucs2utfn+0x72>
c00061b1:	c1 fb 0c             	sar    ebx,0xc
c00061b4:	83 e6 3f             	and    esi,0x3f
c00061b7:	83 cb e0             	or     ebx,0xffffffe0
c00061ba:	83 ce 80             	or     esi,0xffffff80
c00061bd:	88 18                	mov    BYTE PTR [eax],bl
c00061bf:	89 f3                	mov    ebx,esi
c00061c1:	83 c0 03             	add    eax,0x3
c00061c4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061c7:	89 fb                	mov    ebx,edi
c00061c9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061cc:	39 d1                	cmp    ecx,edx
c00061ce:	75 9a                	jne    c000616a <ucs2utfn+0x10>
c00061d0:	5b                   	pop    ebx
c00061d1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061d4:	5e                   	pop    esi
c00061d5:	5f                   	pop    edi
c00061d6:	c3                   	ret    

c00061d7 <isjoliet>:
c00061d7:	31 d2                	xor    edx,edx
c00061d9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061dc:	75 26                	jne    c0006204 <isjoliet+0x2d>
c00061de:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061e2:	75 20                	jne    c0006204 <isjoliet+0x2d>
c00061e4:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061e8:	ba 02 00 00 00       	mov    edx,0x2
c00061ed:	83 f8 43             	cmp    eax,0x43
c00061f0:	74 12                	je     c0006204 <isjoliet+0x2d>
c00061f2:	83 f8 45             	cmp    eax,0x45
c00061f5:	ba 03 00 00 00       	mov    edx,0x3
c00061fa:	74 08                	je     c0006204 <isjoliet+0x2d>
c00061fc:	31 d2                	xor    edx,edx
c00061fe:	83 f8 40             	cmp    eax,0x40
c0006201:	0f 94 c2             	sete   dl
c0006204:	89 d0                	mov    eax,edx
c0006206:	c3                   	ret    

c0006207 <htohl_32>:
c0006207:	8b 00                	mov    eax,DWORD PTR [eax]
c0006209:	c3                   	ret    

c000620a <iso_733>:
c000620a:	eb fb                	jmp    c0006207 <htohl_32>

c000620c <bgrad_cache>:
c000620c:	83 fa 0e             	cmp    edx,0xe
c000620f:	77 16                	ja     c0006227 <bgrad_cache+0x1b>
c0006211:	53                   	push   ebx
c0006212:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006215:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006219:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000621c:	42                   	inc    edx
c000621d:	83 fa 0f             	cmp    edx,0xf
c0006220:	75 f3                	jne    c0006215 <bgrad_cache+0x9>
c0006222:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006225:	5b                   	pop    ebx
c0006226:	c3                   	ret    
c0006227:	c3                   	ret    

c0006228 <ucscompare>:
c0006228:	55                   	push   ebp
c0006229:	57                   	push   edi
c000622a:	89 c7                	mov    edi,eax
c000622c:	56                   	push   esi
c000622d:	89 d6                	mov    esi,edx
c000622f:	53                   	push   ebx
c0006230:	31 d2                	xor    edx,edx
c0006232:	83 ec 1c             	sub    esp,0x1c
c0006235:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006239:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000623e:	c1 e3 08             	shl    ebx,0x8
c0006241:	09 c3                	or     ebx,eax
c0006243:	39 ca                	cmp    edx,ecx
c0006245:	7d 42                	jge    c0006289 <ucscompare+0x61>
c0006247:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000624b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000624f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006253:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006258:	c1 e0 08             	shl    eax,0x8
c000625b:	09 e8                	or     eax,ebp
c000625d:	83 f8 3b             	cmp    eax,0x3b
c0006260:	74 27                	je     c0006289 <ucscompare+0x61>
c0006262:	83 ec 0c             	sub    esp,0xc
c0006265:	50                   	push   eax
c0006266:	e8 15 a7 ff ff       	call   c0000980 <tolower>
c000626b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000626e:	89 c5                	mov    ebp,eax
c0006270:	e8 0b a7 ff ff       	call   c0000980 <tolower>
c0006275:	83 c4 10             	add    esp,0x10
c0006278:	39 c5                	cmp    ebp,eax
c000627a:	75 20                	jne    c000629c <ucscompare+0x74>
c000627c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006280:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006284:	83 c2 02             	add    edx,0x2
c0006287:	eb ac                	jmp    c0006235 <ucscompare+0xd>
c0006289:	83 fb 2f             	cmp    ebx,0x2f
c000628c:	0f 95 c2             	setne  dl
c000628f:	31 c0                	xor    eax,eax
c0006291:	85 db                	test   ebx,ebx
c0006293:	0f 95 c0             	setne  al
c0006296:	21 d0                	and    eax,edx
c0006298:	f7 d8                	neg    eax
c000629a:	eb 03                	jmp    c000629f <ucscompare+0x77>
c000629c:	83 c8 ff             	or     eax,0xffffffff
c000629f:	83 c4 1c             	add    esp,0x1c
c00062a2:	5b                   	pop    ebx
c00062a3:	5e                   	pop    esi
c00062a4:	5f                   	pop    edi
c00062a5:	5d                   	pop    ebp
c00062a6:	c3                   	ret    

c00062a7 <fncompare>:
c00062a7:	55                   	push   ebp
c00062a8:	57                   	push   edi
c00062a9:	89 c7                	mov    edi,eax
c00062ab:	56                   	push   esi
c00062ac:	89 ce                	mov    esi,ecx
c00062ae:	53                   	push   ebx
c00062af:	31 db                	xor    ebx,ebx
c00062b1:	83 ec 1c             	sub    esp,0x1c
c00062b4:	39 d3                	cmp    ebx,edx
c00062b6:	7d 45                	jge    c00062fd <fncompare+0x56>
c00062b8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00062bc:	83 f8 3b             	cmp    eax,0x3b
c00062bf:	74 3c                	je     c00062fd <fncompare+0x56>
c00062c1:	83 f8 2e             	cmp    eax,0x2e
c00062c4:	75 0e                	jne    c00062d4 <fncompare+0x2d>
c00062c6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062c9:	39 d9                	cmp    ecx,ebx
c00062cb:	74 30                	je     c00062fd <fncompare+0x56>
c00062cd:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062d2:	74 29                	je     c00062fd <fncompare+0x56>
c00062d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062d8:	83 ec 0c             	sub    esp,0xc
c00062db:	50                   	push   eax
c00062dc:	e8 9f a6 ff ff       	call   c0000980 <tolower>
c00062e1:	89 c5                	mov    ebp,eax
c00062e3:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00062ea:	e8 91 a6 ff ff       	call   c0000980 <tolower>
c00062ef:	83 c4 10             	add    esp,0x10
c00062f2:	39 c5                	cmp    ebp,eax
c00062f4:	75 1e                	jne    c0006314 <fncompare+0x6d>
c00062f6:	43                   	inc    ebx
c00062f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062fb:	eb b7                	jmp    c00062b4 <fncompare+0xd>
c00062fd:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006301:	83 fa 2f             	cmp    edx,0x2f
c0006304:	0f 95 c1             	setne  cl
c0006307:	31 c0                	xor    eax,eax
c0006309:	85 d2                	test   edx,edx
c000630b:	0f 95 c0             	setne  al
c000630e:	21 c8                	and    eax,ecx
c0006310:	f7 d8                	neg    eax
c0006312:	eb 03                	jmp    c0006317 <fncompare+0x70>
c0006314:	83 c8 ff             	or     eax,0xffffffff
c0006317:	83 c4 1c             	add    esp,0x1c
c000631a:	5b                   	pop    ebx
c000631b:	5e                   	pop    esi
c000631c:	5f                   	pop    edi
c000631d:	5d                   	pop    ebp
c000631e:	c3                   	ret    

c000631f <bclear_cache>:
c000631f:	83 ec 18             	sub    esp,0x18
c0006322:	68 a0 79 02 c0       	push   0xc00279a0
c0006327:	e8 9c 71 01 00       	call   c001d4c8 <iso_kprintf>
c000632c:	83 c4 10             	add    esp,0x10
c000632f:	31 c0                	xor    eax,eax
c0006331:	8b 14 85 20 e0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1fe0]
c0006338:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000633e:	8b 14 85 80 e0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1f80]
c0006345:	40                   	inc    eax
c0006346:	83 f8 10             	cmp    eax,0x10
c0006349:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000634f:	75 e0                	jne    c0006331 <bclear_cache+0x12>
c0006351:	83 c4 0c             	add    esp,0xc
c0006354:	c3                   	ret    

c0006355 <bclear>:
c0006355:	eb c8                	jmp    c000631f <bclear_cache>

c0006357 <iso_break_all>:
c0006357:	83 ec 18             	sub    esp,0x18
c000635a:	68 ae 79 02 c0       	push   0xc00279ae
c000635f:	e8 64 71 01 00       	call   c001d4c8 <iso_kprintf>
c0006364:	83 c4 10             	add    esp,0x10
c0006367:	31 c0                	xor    eax,eax
c0006369:	c7 80 d0 e5 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd1a30],0x1
c0006373:	05 94 00 00 00       	add    eax,0x94
c0006378:	3d 40 09 00 00       	cmp    eax,0x940
c000637d:	75 ea                	jne    c0006369 <iso_break_all+0x12>
c000637f:	83 c4 0c             	add    esp,0xc
c0006382:	c3                   	ret    

c0006383 <isoReadDiscSector>:
c0006383:	83 ec 0c             	sub    esp,0xc
c0006386:	0f be 05 60 e0 02 c0 	movsx  eax,BYTE PTR ds:0xc002e060
c000638d:	50                   	push   eax
c000638e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000639a:	e8 cd 70 01 00       	call   c001d46c <isoReadDiscSectorHelper>
c000639f:	83 c4 1c             	add    esp,0x1c
c00063a2:	c3                   	ret    

c00063a3 <bread_cache>:
c00063a3:	55                   	push   ebp
c00063a4:	57                   	push   edi
c00063a5:	89 d7                	mov    edi,edx
c00063a7:	56                   	push   esi
c00063a8:	ba 0f 00 00 00       	mov    edx,0xf
c00063ad:	53                   	push   ebx
c00063ae:	89 c6                	mov    esi,eax
c00063b0:	83 ec 0c             	sub    esp,0xc
c00063b3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00063b6:	39 38                	cmp    DWORD PTR [eax],edi
c00063b8:	74 3c                	je     c00063f6 <bread_cache+0x53>
c00063ba:	4a                   	dec    edx
c00063bb:	83 fa ff             	cmp    edx,0xffffffff
c00063be:	75 f3                	jne    c00063b3 <bread_cache+0x10>
c00063c0:	31 db                	xor    ebx,ebx
c00063c2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063c5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063c8:	74 08                	je     c00063d2 <bread_cache+0x2f>
c00063ca:	43                   	inc    ebx
c00063cb:	83 fb 10             	cmp    ebx,0x10
c00063ce:	75 f2                	jne    c00063c2 <bread_cache+0x1f>
c00063d0:	31 db                	xor    ebx,ebx
c00063d2:	50                   	push   eax
c00063d3:	6a 01                	push   0x1
c00063d5:	57                   	push   edi
c00063d6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063dc:	83 c0 04             	add    eax,0x4
c00063df:	50                   	push   eax
c00063e0:	e8 9e ff ff ff       	call   c0006383 <isoReadDiscSector>
c00063e5:	83 c4 10             	add    esp,0x10
c00063e8:	83 c9 ff             	or     ecx,0xffffffff
c00063eb:	85 c0                	test   eax,eax
c00063ed:	78 13                	js     c0006402 <bread_cache+0x5f>
c00063ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063f2:	89 da                	mov    edx,ebx
c00063f4:	89 38                	mov    DWORD PTR [eax],edi
c00063f6:	89 f0                	mov    eax,esi
c00063f8:	e8 0f fe ff ff       	call   c000620c <bgrad_cache>
c00063fd:	b9 0f 00 00 00       	mov    ecx,0xf
c0006402:	83 c4 0c             	add    esp,0xc
c0006405:	89 c8                	mov    eax,ecx
c0006407:	5b                   	pop    ebx
c0006408:	5e                   	pop    esi
c0006409:	5f                   	pop    edi
c000640a:	5d                   	pop    ebp
c000640b:	c3                   	ret    

c000640c <biread>:
c000640c:	89 c2                	mov    edx,eax
c000640e:	b8 80 e0 02 c0       	mov    eax,0xc002e080
c0006413:	eb 8e                	jmp    c00063a3 <bread_cache>

c0006415 <bdread>:
c0006415:	89 c2                	mov    edx,eax
c0006417:	b8 20 e0 02 c0       	mov    eax,0xc002e020
c000641c:	eb 85                	jmp    c00063a3 <bread_cache>

c000641e <strnicmp>:
c000641e:	55                   	push   ebp
c000641f:	57                   	push   edi
c0006420:	31 ff                	xor    edi,edi
c0006422:	56                   	push   esi
c0006423:	53                   	push   ebx
c0006424:	83 ec 0c             	sub    esp,0xc
c0006427:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000642b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000642f:	74 43                	je     c0006474 <strnicmp+0x56>
c0006431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006435:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006439:	85 c0                	test   eax,eax
c000643b:	74 37                	je     c0006474 <strnicmp+0x56>
c000643d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006441:	85 d2                	test   edx,edx
c0006443:	74 2f                	je     c0006474 <strnicmp+0x56>
c0006445:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006448:	39 d0                	cmp    eax,edx
c000644a:	75 04                	jne    c0006450 <strnicmp+0x32>
c000644c:	89 ef                	mov    edi,ebp
c000644e:	eb db                	jmp    c000642b <strnicmp+0xd>
c0006450:	83 ec 0c             	sub    esp,0xc
c0006453:	50                   	push   eax
c0006454:	e8 27 a5 ff ff       	call   c0000980 <tolower>
c0006459:	89 c3                	mov    ebx,eax
c000645b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000645f:	89 ef                	mov    edi,ebp
c0006461:	89 04 24             	mov    DWORD PTR [esp],eax
c0006464:	e8 17 a5 ff ff       	call   c0000980 <tolower>
c0006469:	83 c4 10             	add    esp,0x10
c000646c:	29 c3                	sub    ebx,eax
c000646e:	89 d8                	mov    eax,ebx
c0006470:	74 b9                	je     c000642b <strnicmp+0xd>
c0006472:	eb 02                	jmp    c0006476 <strnicmp+0x58>
c0006474:	31 c0                	xor    eax,eax
c0006476:	83 c4 0c             	add    esp,0xc
c0006479:	5b                   	pop    ebx
c000647a:	5e                   	pop    esi
c000647b:	5f                   	pop    edi
c000647c:	5d                   	pop    ebp
c000647d:	c3                   	ret    

c000647e <find_object>:
c000647e:	55                   	push   ebp
c000647f:	57                   	push   edi
c0006480:	89 c7                	mov    edi,eax
c0006482:	56                   	push   esi
c0006483:	53                   	push   ebx
c0006484:	89 d3                	mov    ebx,edx
c0006486:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000648c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0006490:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006497:	83 3d b4 ee 02 c0 00 	cmp    DWORD PTR ds:0xc002eeb4,0x0
c000649e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00064a2:	74 0b                	je     c00064af <find_object+0x31>
c00064a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00064a8:	89 fa                	mov    edx,edi
c00064aa:	e8 89 fc ff ff       	call   c0006138 <utf2ucs>
c00064af:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00064b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064b6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00064bb:	7e 11                	jle    c00064ce <find_object+0x50>
c00064bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064c1:	e8 46 ff ff ff       	call   c000640c <biread>
c00064c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00064ca:	85 c0                	test   eax,eax
c00064cc:	79 07                	jns    c00064d5 <find_object+0x57>
c00064ce:	31 db                	xor    ebx,ebx
c00064d0:	e9 47 01 00 00       	jmp    c000661c <find_object+0x19e>
c00064d5:	31 ed                	xor    ebp,ebp
c00064d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064db:	8b 04 85 80 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f80]
c00064e2:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c00064e6:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064e9:	85 f6                	test   esi,esi
c00064eb:	75 0e                	jne    c00064fb <find_object+0x7d>
c00064ed:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00064f1:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c00064f9:	eb bb                	jmp    c00064b6 <find_object+0x38>
c00064fb:	8b 0d b4 ee 02 c0    	mov    ecx,DWORD PTR ds:0xc002eeb4
c0006501:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006505:	85 c9                	test   ecx,ecx
c0006507:	89 d0                	mov    eax,edx
c0006509:	74 2b                	je     c0006536 <find_object+0xb8>
c000650b:	8d 43 21             	lea    eax,[ebx+0x21]
c000650e:	89 d1                	mov    ecx,edx
c0006510:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006514:	e8 0f fd ff ff       	call   c0006228 <ucscompare>
c0006519:	85 c0                	test   eax,eax
c000651b:	0f 84 cd 00 00 00    	je     c00065ee <find_object+0x170>
c0006521:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006524:	01 c5                	add    ebp,eax
c0006526:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000652c:	7f bf                	jg     c00064ed <find_object+0x6f>
c000652e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006532:	7f a3                	jg     c00064d7 <find_object+0x59>
c0006534:	eb b7                	jmp    c00064ed <find_object+0x6f>
c0006536:	29 d6                	sub    esi,edx
c0006538:	a8 01                	test   al,0x1
c000653a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000653e:	74 05                	je     c0006545 <find_object+0xc7>
c0006540:	83 ee 21             	sub    esi,0x21
c0006543:	eb 6a                	jmp    c00065af <find_object+0x131>
c0006545:	42                   	inc    edx
c0006546:	83 ee 22             	sub    esi,0x22
c0006549:	eb 64                	jmp    c00065af <find_object+0x131>
c000654b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000654e:	48                   	dec    eax
c000654f:	3c 01                	cmp    al,0x1
c0006551:	77 61                	ja     c00065b4 <find_object+0x136>
c0006553:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006557:	50                   	push   eax
c0006558:	6a 02                	push   0x2
c000655a:	68 bd 79 02 c0       	push   0xc00279bd
c000655f:	52                   	push   edx
c0006560:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006564:	e8 a7 a2 ff ff       	call   c0000810 <strncmp>
c0006569:	83 c4 10             	add    esp,0x10
c000656c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006570:	85 c0                	test   eax,eax
c0006572:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006576:	75 2f                	jne    c00065a7 <find_object+0x129>
c0006578:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000657c:	50                   	push   eax
c000657d:	8d 42 05             	lea    eax,[edx+0x5]
c0006580:	83 e9 05             	sub    ecx,0x5
c0006583:	51                   	push   ecx
c0006584:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0006588:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000658c:	50                   	push   eax
c000658d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006591:	50                   	push   eax
c0006592:	e8 f9 a0 ff ff       	call   c0000690 <strncpy>
c0006597:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000659b:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00065a0:	83 c4 10             	add    esp,0x10
c00065a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00065a7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00065ab:	29 c6                	sub    esi,eax
c00065ad:	01 c2                	add    edx,eax
c00065af:	83 fe 03             	cmp    esi,0x3
c00065b2:	7f 97                	jg     c000654b <find_object+0xcd>
c00065b4:	85 c9                	test   ecx,ecx
c00065b6:	7e 40                	jle    c00065f8 <find_object+0x17a>
c00065b8:	51                   	push   ecx
c00065b9:	51                   	push   ecx
c00065ba:	6a 2f                	push   0x2f
c00065bc:	57                   	push   edi
c00065bd:	e8 0e a2 ff ff       	call   c00007d0 <strchr>
c00065c2:	83 c4 10             	add    esp,0x10
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 04                	je     c00065cd <find_object+0x14f>
c00065c9:	29 f8                	sub    eax,edi
c00065cb:	eb 0c                	jmp    c00065d9 <find_object+0x15b>
c00065cd:	83 ec 0c             	sub    esp,0xc
c00065d0:	57                   	push   edi
c00065d1:	e8 aa 9f ff ff       	call   c0000580 <strlen>
c00065d6:	83 c4 10             	add    esp,0x10
c00065d9:	52                   	push   edx
c00065da:	50                   	push   eax
c00065db:	57                   	push   edi
c00065dc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065e0:	50                   	push   eax
c00065e1:	e8 38 fe ff ff       	call   c000641e <strnicmp>
c00065e6:	83 c4 10             	add    esp,0x10
c00065e9:	e9 2b ff ff ff       	jmp    c0006519 <find_object+0x9b>
c00065ee:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065f2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00065f6:	eb 1e                	jmp    c0006616 <find_object+0x198>
c00065f8:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065fc:	8d 43 21             	lea    eax,[ebx+0x21]
c00065ff:	89 f9                	mov    ecx,edi
c0006601:	e8 a1 fc ff ff       	call   c00062a7 <fncompare>
c0006606:	85 c0                	test   eax,eax
c0006608:	0f 85 13 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000660e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006612:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006616:	0f 85 05 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000661c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006622:	89 d8                	mov    eax,ebx
c0006624:	5b                   	pop    ebx
c0006625:	5e                   	pop    esi
c0006626:	5f                   	pop    edi
c0006627:	5d                   	pop    ebp
c0006628:	c3                   	ret    

c0006629 <find_object_path>:
c0006629:	55                   	push   ebp
c000662a:	57                   	push   edi
c000662b:	89 d7                	mov    edi,edx
c000662d:	56                   	push   esi
c000662e:	89 c6                	mov    esi,eax
c0006630:	53                   	push   ebx
c0006631:	89 cb                	mov    ebx,ecx
c0006633:	83 ec 0c             	sub    esp,0xc
c0006636:	50                   	push   eax
c0006637:	50                   	push   eax
c0006638:	6a 2f                	push   0x2f
c000663a:	56                   	push   esi
c000663b:	e8 90 a1 ff ff       	call   c00007d0 <strchr>
c0006640:	83 c4 10             	add    esp,0x10
c0006643:	85 c0                	test   eax,eax
c0006645:	89 c5                	mov    ebp,eax
c0006647:	74 3a                	je     c0006683 <find_object_path+0x5a>
c0006649:	39 ee                	cmp    esi,ebp
c000664b:	74 31                	je     c000667e <find_object_path+0x55>
c000664d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006650:	e8 b5 fb ff ff       	call   c000620a <iso_733>
c0006655:	89 c2                	mov    edx,eax
c0006657:	8d 43 02             	lea    eax,[ebx+0x2]
c000665a:	e8 ab fb ff ff       	call   c000620a <iso_733>
c000665f:	83 ec 0c             	sub    esp,0xc
c0006662:	52                   	push   edx
c0006663:	89 c1                	mov    ecx,eax
c0006665:	ba 01 00 00 00       	mov    edx,0x1
c000666a:	89 f0                	mov    eax,esi
c000666c:	e8 0d fe ff ff       	call   c000647e <find_object>
c0006671:	83 c4 10             	add    esp,0x10
c0006674:	85 c0                	test   eax,eax
c0006676:	89 c3                	mov    ebx,eax
c0006678:	75 04                	jne    c000667e <find_object_path+0x55>
c000667a:	31 db                	xor    ebx,ebx
c000667c:	eb 36                	jmp    c00066b4 <find_object_path+0x8b>
c000667e:	8d 75 01             	lea    esi,[ebp+0x1]
c0006681:	eb b3                	jmp    c0006636 <find_object_path+0xd>
c0006683:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006686:	74 28                	je     c00066b0 <find_object_path+0x87>
c0006688:	8d 43 0a             	lea    eax,[ebx+0xa]
c000668b:	e8 7a fb ff ff       	call   c000620a <iso_733>
c0006690:	89 c2                	mov    edx,eax
c0006692:	8d 43 02             	lea    eax,[ebx+0x2]
c0006695:	e8 70 fb ff ff       	call   c000620a <iso_733>
c000669a:	83 ec 0c             	sub    esp,0xc
c000669d:	52                   	push   edx
c000669e:	89 c1                	mov    ecx,eax
c00066a0:	89 fa                	mov    edx,edi
c00066a2:	89 f0                	mov    eax,esi
c00066a4:	e8 d5 fd ff ff       	call   c000647e <find_object>
c00066a9:	83 c4 10             	add    esp,0x10
c00066ac:	89 c3                	mov    ebx,eax
c00066ae:	eb 04                	jmp    c00066b4 <find_object_path+0x8b>
c00066b0:	85 ff                	test   edi,edi
c00066b2:	74 c6                	je     c000667a <find_object_path+0x51>
c00066b4:	83 c4 0c             	add    esp,0xc
c00066b7:	89 d8                	mov    eax,ebx
c00066b9:	5b                   	pop    ebx
c00066ba:	5e                   	pop    esi
c00066bb:	5f                   	pop    edi
c00066bc:	5d                   	pop    ebp
c00066bd:	c3                   	ret    

c00066be <stricmp>:
c00066be:	57                   	push   edi
c00066bf:	56                   	push   esi
c00066c0:	31 f6                	xor    esi,esi
c00066c2:	53                   	push   ebx
c00066c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c7:	83 ec 0c             	sub    esp,0xc
c00066ca:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066d2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066d6:	46                   	inc    esi
c00066d7:	50                   	push   eax
c00066d8:	e8 83 a2 ff ff       	call   c0000960 <toupper>
c00066dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00066e0:	e8 9b a2 ff ff       	call   c0000980 <tolower>
c00066e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066e8:	89 c3                	mov    ebx,eax
c00066ea:	e8 71 a2 ff ff       	call   c0000960 <toupper>
c00066ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00066f2:	e8 89 a2 ff ff       	call   c0000980 <tolower>
c00066f7:	83 c4 10             	add    esp,0x10
c00066fa:	39 c3                	cmp    ebx,eax
c00066fc:	75 04                	jne    c0006702 <stricmp+0x44>
c00066fe:	85 db                	test   ebx,ebx
c0006700:	75 c1                	jne    c00066c3 <stricmp+0x5>
c0006702:	29 c3                	sub    ebx,eax
c0006704:	89 d8                	mov    eax,ebx
c0006706:	5b                   	pop    ebx
c0006707:	5e                   	pop    esi
c0006708:	5f                   	pop    edi
c0006709:	c3                   	ret    

c000670a <iso_open>:
c000670a:	57                   	push   edi
c000670b:	31 c0                	xor    eax,eax
c000670d:	56                   	push   esi
c000670e:	b9 80 ee 02 c0       	mov    ecx,0xc002ee80
c0006713:	53                   	push   ebx
c0006714:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006719:	0f 95 c0             	setne  al
c000671c:	89 c2                	mov    edx,eax
c000671e:	89 c6                	mov    esi,eax
c0006720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006724:	e8 00 ff ff ff       	call   c0006629 <find_object_path>
c0006729:	83 ca ff             	or     edx,0xffffffff
c000672c:	85 c0                	test   eax,eax
c000672e:	74 5e                	je     c000678e <iso_open+0x84>
c0006730:	89 c1                	mov    ecx,eax
c0006732:	31 d2                	xor    edx,edx
c0006734:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000673a:	83 bf 40 e5 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd1ac0],0x0
c0006741:	75 42                	jne    c0006785 <iso_open+0x7b>
c0006743:	c7 87 40 e5 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd1ac0],0xffffffff
c000674d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006750:	e8 b5 fa ff ff       	call   c000620a <iso_733>
c0006755:	89 b7 44 e5 02 c0    	mov    DWORD PTR [edi-0x3ffd1abc],esi
c000675b:	c7 87 48 e5 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd1ab8],0x0
c0006765:	89 87 40 e5 02 c0    	mov    DWORD PTR [edi-0x3ffd1ac0],eax
c000676b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000676e:	e8 97 fa ff ff       	call   c000620a <iso_733>
c0006773:	c7 87 d0 e5 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd1a30],0x0
c000677d:	89 87 4c e5 02 c0    	mov    DWORD PTR [edi-0x3ffd1ab4],eax
c0006783:	eb 09                	jmp    c000678e <iso_open+0x84>
c0006785:	42                   	inc    edx
c0006786:	83 fa 10             	cmp    edx,0x10
c0006789:	75 a9                	jne    c0006734 <iso_open+0x2a>
c000678b:	83 ca ff             	or     edx,0xffffffff
c000678e:	5b                   	pop    ebx
c000678f:	89 d0                	mov    eax,edx
c0006791:	5e                   	pop    esi
c0006792:	5f                   	pop    edi
c0006793:	c3                   	ret    

c0006794 <iso_close>:
c0006794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006798:	83 f8 0f             	cmp    eax,0xf
c000679b:	7f 10                	jg     c00067ad <iso_close+0x19>
c000679d:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00067a3:	c7 80 40 e5 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd1ac0],0x0
c00067ad:	e9 6d fb ff ff       	jmp    c000631f <bclear_cache>

c00067b2 <iso_read>:
c00067b2:	55                   	push   ebp
c00067b3:	57                   	push   edi
c00067b4:	56                   	push   esi
c00067b5:	53                   	push   ebx
c00067b6:	83 ec 1c             	sub    esp,0x1c
c00067b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067bd:	83 fd 0f             	cmp    ebp,0xf
c00067c0:	7e 0a                	jle    c00067cc <iso_read+0x1a>
c00067c2:	83 c8 ff             	or     eax,0xffffffff
c00067c5:	89 c2                	mov    edx,eax
c00067c7:	e9 f4 00 00 00       	jmp    c00068c0 <iso_read+0x10e>
c00067cc:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067d2:	83 bd 40 e5 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd1ac0],0x0
c00067d9:	74 e7                	je     c00067c2 <iso_read+0x10>
c00067db:	8b 95 d0 e5 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd1a30]
c00067e1:	85 d2                	test   edx,edx
c00067e3:	75 dd                	jne    c00067c2 <iso_read+0x10>
c00067e5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067ea:	0f 84 cd 00 00 00    	je     c00068bd <iso_read+0x10b>
c00067f0:	8b 85 48 e5 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd1ab8]
c00067f6:	8b 9d 4c e5 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd1ab4]
c00067fc:	29 c3                	sub    ebx,eax
c00067fe:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006802:	89 d9                	mov    ecx,ebx
c0006804:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006809:	85 c9                	test   ecx,ecx
c000680b:	0f 84 ac 00 00 00    	je     c00068bd <iso_read+0x10b>
c0006811:	89 c6                	mov    esi,eax
c0006813:	bb 00 08 00 00       	mov    ebx,0x800
c0006818:	c1 e8 0b             	shr    eax,0xb
c000681b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006821:	03 85 40 e5 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd1ac0]
c0006827:	29 f3                	sub    ebx,esi
c0006829:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000682f:	75 3f                	jne    c0006870 <iso_read+0xbe>
c0006831:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006837:	7e 37                	jle    c0006870 <iso_read+0xbe>
c0006839:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000683f:	be 20 00 00 00       	mov    esi,0x20
c0006844:	7f 05                	jg     c000684b <iso_read+0x99>
c0006846:	89 ce                	mov    esi,ecx
c0006848:	c1 fe 0b             	sar    esi,0xb
c000684b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000684f:	89 f3                	mov    ebx,esi
c0006851:	52                   	push   edx
c0006852:	56                   	push   esi
c0006853:	50                   	push   eax
c0006854:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006858:	c1 e3 0b             	shl    ebx,0xb
c000685b:	e8 23 fb ff ff       	call   c0006383 <isoReadDiscSector>
c0006860:	83 c4 10             	add    esp,0x10
c0006863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006867:	85 c0                	test   eax,eax
c0006869:	7f 3d                	jg     c00068a8 <iso_read+0xf6>
c000686b:	e9 52 ff ff ff       	jmp    c00067c2 <iso_read+0x10>
c0006870:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006874:	39 d9                	cmp    ecx,ebx
c0006876:	0f 4e d9             	cmovle ebx,ecx
c0006879:	e8 97 fb ff ff       	call   c0006415 <bdread>
c000687e:	85 c0                	test   eax,eax
c0006880:	0f 88 3c ff ff ff    	js     c00067c2 <iso_read+0x10>
c0006886:	8b 0c 85 20 e0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1fe0]
c000688d:	8b 85 48 e5 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd1ab8]
c0006893:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006897:	25 ff 07 00 00       	and    eax,0x7ff
c000689c:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00068a0:	89 d9                	mov    ecx,ebx
c00068a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00068a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00068a8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00068ac:	01 da                	add    edx,ebx
c00068ae:	01 9d 48 e5 02 c0    	add    DWORD PTR [ebp-0x3ffd1ab8],ebx
c00068b4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068b8:	e9 28 ff ff ff       	jmp    c00067e5 <iso_read+0x33>
c00068bd:	89 d0                	mov    eax,edx
c00068bf:	99                   	cdq    
c00068c0:	83 c4 1c             	add    esp,0x1c
c00068c3:	5b                   	pop    ebx
c00068c4:	5e                   	pop    esi
c00068c5:	5f                   	pop    edi
c00068c6:	5d                   	pop    ebp
c00068c7:	c3                   	ret    

c00068c8 <iso_seek>:
c00068c8:	55                   	push   ebp
c00068c9:	83 c8 ff             	or     eax,0xffffffff
c00068cc:	57                   	push   edi
c00068cd:	89 c2                	mov    edx,eax
c00068cf:	56                   	push   esi
c00068d0:	53                   	push   ebx
c00068d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068dd:	83 fe 0f             	cmp    esi,0xf
c00068e0:	7f 65                	jg     c0006947 <iso_seek+0x7f>
c00068e2:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068e8:	83 bd 40 e5 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd1ac0],0x0
c00068ef:	8d 8d 40 e5 02 c0    	lea    ecx,[ebp-0x3ffd1ac0]
c00068f5:	74 50                	je     c0006947 <iso_seek+0x7f>
c00068f7:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068fe:	75 47                	jne    c0006947 <iso_seek+0x7f>
c0006900:	83 fb 01             	cmp    ebx,0x1
c0006903:	74 0e                	je     c0006913 <iso_seek+0x4b>
c0006905:	83 fb 02             	cmp    ebx,0x2
c0006908:	74 0e                	je     c0006918 <iso_seek+0x50>
c000690a:	85 db                	test   ebx,ebx
c000690c:	75 39                	jne    c0006947 <iso_seek+0x7f>
c000690e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006911:	eb 0d                	jmp    c0006920 <iso_seek+0x58>
c0006913:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006916:	eb 08                	jmp    c0006920 <iso_seek+0x58>
c0006918:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000691b:	01 f8                	add    eax,edi
c000691d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006920:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006926:	8b 88 4c e5 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd1ab4]
c000692c:	05 40 e5 02 c0       	add    eax,0xc002e540
c0006931:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006934:	76 03                	jbe    c0006939 <iso_seek+0x71>
c0006936:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006939:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000693f:	8b 82 48 e5 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd1ab8]
c0006945:	31 d2                	xor    edx,edx
c0006947:	5b                   	pop    ebx
c0006948:	5e                   	pop    esi
c0006949:	5f                   	pop    edi
c000694a:	5d                   	pop    ebp
c000694b:	c3                   	ret    

c000694c <iso_tell>:
c000694c:	53                   	push   ebx
c000694d:	83 c8 ff             	or     eax,0xffffffff
c0006950:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006954:	89 c2                	mov    edx,eax
c0006956:	83 f9 0f             	cmp    ecx,0xf
c0006959:	7f 20                	jg     c000697b <iso_tell+0x2f>
c000695b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006961:	83 bb 40 e5 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd1ac0],0x0
c0006968:	74 11                	je     c000697b <iso_tell+0x2f>
c000696a:	83 bb d0 e5 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd1a30],0x0
c0006971:	75 08                	jne    c000697b <iso_tell+0x2f>
c0006973:	8b 83 48 e5 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd1ab8]
c0006979:	31 d2                	xor    edx,edx
c000697b:	5b                   	pop    ebx
c000697c:	c3                   	ret    

c000697d <iso_total>:
c000697d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006981:	83 c8 ff             	or     eax,0xffffffff
c0006984:	83 fa 0f             	cmp    edx,0xf
c0006987:	7f 1e                	jg     c00069a7 <iso_total+0x2a>
c0006989:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000698f:	83 ba 40 e5 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd1ac0],0x0
c0006996:	74 0f                	je     c00069a7 <iso_total+0x2a>
c0006998:	83 ba d0 e5 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd1a30],0x0
c000699f:	75 06                	jne    c00069a7 <iso_total+0x2a>
c00069a1:	8b 82 4c e5 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd1ab4]
c00069a7:	c3                   	ret    

c00069a8 <fn_postprocess>:
c00069a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00069ac:	89 d0                	mov    eax,edx
c00069ae:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00069b1:	85 c9                	test   ecx,ecx
c00069b3:	74 08                	je     c00069bd <fn_postprocess+0x15>
c00069b5:	83 f9 3b             	cmp    ecx,0x3b
c00069b8:	74 03                	je     c00069bd <fn_postprocess+0x15>
c00069ba:	40                   	inc    eax
c00069bb:	eb f1                	jmp    c00069ae <fn_postprocess+0x6>
c00069bd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069c0:	39 d0                	cmp    eax,edx
c00069c2:	76 0a                	jbe    c00069ce <fn_postprocess+0x26>
c00069c4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069c8:	75 04                	jne    c00069ce <fn_postprocess+0x26>
c00069ca:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069ce:	c3                   	ret    

c00069cf <iso_readdir>:
c00069cf:	55                   	push   ebp
c00069d0:	57                   	push   edi
c00069d1:	56                   	push   esi
c00069d2:	53                   	push   ebx
c00069d3:	83 ec 1c             	sub    esp,0x1c
c00069d6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069da:	83 fb 0f             	cmp    ebx,0xf
c00069dd:	7f 28                	jg     c0006a07 <iso_readdir+0x38>
c00069df:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069e5:	83 b8 40 e5 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd1ac0],0x0
c00069ec:	8d b8 40 e5 02 c0    	lea    edi,[eax-0x3ffd1ac0]
c00069f2:	74 13                	je     c0006a07 <iso_readdir+0x38>
c00069f4:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069f8:	74 0d                	je     c0006a07 <iso_readdir+0x38>
c00069fa:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006a01:	0f 84 b1 00 00 00    	je     c0006ab8 <iso_readdir+0xe9>
c0006a07:	83 ec 0c             	sub    esp,0xc
c0006a0a:	68 c0 79 02 c0       	push   0xc00279c0
c0006a0f:	e8 b4 6a 01 00       	call   c001d4c8 <iso_kprintf>
c0006a14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a17:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a1d:	e8 c2 6a 01 00       	call   c001d4e4 <iso_kprintfd>
c0006a22:	c7 04 24 c5 79 02 c0 	mov    DWORD PTR [esp],0xc00279c5
c0006a29:	e8 9a 6a 01 00       	call   c001d4c8 <iso_kprintf>
c0006a2e:	58                   	pop    eax
c0006a2f:	ff b3 40 e5 02 c0    	push   DWORD PTR [ebx-0x3ffd1ac0]
c0006a35:	e8 aa 6a 01 00       	call   c001d4e4 <iso_kprintfd>
c0006a3a:	c7 04 24 cb 79 02 c0 	mov    DWORD PTR [esp],0xc00279cb
c0006a41:	e8 82 6a 01 00       	call   c001d4c8 <iso_kprintf>
c0006a46:	58                   	pop    eax
c0006a47:	ff b3 44 e5 02 c0    	push   DWORD PTR [ebx-0x3ffd1abc]
c0006a4d:	e8 92 6a 01 00       	call   c001d4e4 <iso_kprintfd>
c0006a52:	c7 04 24 d1 79 02 c0 	mov    DWORD PTR [esp],0xc00279d1
c0006a59:	e8 6a 6a 01 00       	call   c001d4c8 <iso_kprintf>
c0006a5e:	58                   	pop    eax
c0006a5f:	ff b3 d0 e5 02 c0    	push   DWORD PTR [ebx-0x3ffd1a30]
c0006a65:	e8 7a 6a 01 00       	call   c001d4e4 <iso_kprintfd>
c0006a6a:	83 c4 10             	add    esp,0x10
c0006a6d:	eb 42                	jmp    c0006ab1 <iso_readdir+0xe2>
c0006a6f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a72:	8b 34 85 80 e0 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd1f80]
c0006a79:	89 d1                	mov    ecx,edx
c0006a7b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a81:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a85:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a88:	75 35                	jne    c0006abf <iso_readdir+0xf0>
c0006a8a:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a90:	81 c2 00 08 00 00    	add    edx,0x800
c0006a96:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a99:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a9c:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a9f:	73 1e                	jae    c0006abf <iso_readdir+0xf0>
c0006aa1:	8b 07                	mov    eax,DWORD PTR [edi]
c0006aa3:	c1 ea 0b             	shr    edx,0xb
c0006aa6:	01 d0                	add    eax,edx
c0006aa8:	e8 5f f9 ff ff       	call   c000640c <biread>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	79 be                	jns    c0006a6f <iso_readdir+0xa0>
c0006ab1:	31 c0                	xor    eax,eax
c0006ab3:	e9 6a 01 00 00       	jmp    c0006c22 <iso_readdir+0x253>
c0006ab8:	31 f6                	xor    esi,esi
c0006aba:	83 c8 ff             	or     eax,0xffffffff
c0006abd:	eb da                	jmp    c0006a99 <iso_readdir+0xca>
c0006abf:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ac5:	8b ba 48 e5 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd1ab8]
c0006acb:	81 c2 40 e5 02 c0    	add    edx,0xc002e540
c0006ad1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006ad4:	73 db                	jae    c0006ab1 <iso_readdir+0xe2>
c0006ad6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ada:	75 34                	jne    c0006b10 <iso_readdir+0x141>
c0006adc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006ae0:	75 2e                	jne    c0006b10 <iso_readdir+0x141>
c0006ae2:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ae5:	8b 34 85 80 e0 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd1f80]
c0006aec:	01 f9                	add    ecx,edi
c0006aee:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006af1:	89 c8                	mov    eax,ecx
c0006af3:	25 ff 07 00 00       	and    eax,0x7ff
c0006af8:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006afd:	01 c8                	add    eax,ecx
c0006aff:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006b02:	25 ff 07 00 00       	and    eax,0x7ff
c0006b07:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006b0b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006b0e:	74 a1                	je     c0006ab1 <iso_readdir+0xe2>
c0006b10:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006b16:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b1a:	83 3d b4 ee 02 c0 00 	cmp    DWORD PTR ds:0xc002eeb4,0x0
c0006b21:	8d 56 21             	lea    edx,[esi+0x21]
c0006b24:	8d af 58 e5 02 c0    	lea    ebp,[edi-0x3ffd1aa8]
c0006b2a:	74 0c                	je     c0006b38 <iso_readdir+0x169>
c0006b2c:	89 e8                	mov    eax,ebp
c0006b2e:	e8 27 f6 ff ff       	call   c000615a <ucs2utfn>
c0006b33:	e9 b1 00 00 00       	jmp    c0006be9 <iso_readdir+0x21a>
c0006b38:	50                   	push   eax
c0006b39:	51                   	push   ecx
c0006b3a:	52                   	push   edx
c0006b3b:	55                   	push   ebp
c0006b3c:	e8 4f 9b ff ff       	call   c0000690 <strncpy>
c0006b41:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b48:	c6 84 07 58 e5 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd1aa8],0x0
c0006b50:	e8 53 fe ff ff       	call   c00069a8 <fn_postprocess>
c0006b55:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b59:	83 c4 10             	add    esp,0x10
c0006b5c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b5f:	89 d1                	mov    ecx,edx
c0006b61:	29 d0                	sub    eax,edx
c0006b63:	80 e1 01             	and    cl,0x1
c0006b66:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006b6a:	74 05                	je     c0006b71 <iso_readdir+0x1a2>
c0006b6c:	83 e8 21             	sub    eax,0x21
c0006b6f:	eb 04                	jmp    c0006b75 <iso_readdir+0x1a6>
c0006b71:	42                   	inc    edx
c0006b72:	83 e8 22             	sub    eax,0x22
c0006b75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b79:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b83:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b88:	7e 5f                	jle    c0006be9 <iso_readdir+0x21a>
c0006b8a:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006b8d:	48                   	dec    eax
c0006b8e:	3c 01                	cmp    al,0x1
c0006b90:	77 57                	ja     c0006be9 <iso_readdir+0x21a>
c0006b92:	51                   	push   ecx
c0006b93:	6a 02                	push   0x2
c0006b95:	68 bd 79 02 c0       	push   0xc00279bd
c0006b9a:	52                   	push   edx
c0006b9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006b9f:	e8 6c 9c ff ff       	call   c0000810 <strncmp>
c0006ba4:	83 c4 10             	add    esp,0x10
c0006ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006bab:	85 c0                	test   eax,eax
c0006bad:	75 2e                	jne    c0006bdd <iso_readdir+0x20e>
c0006baf:	50                   	push   eax
c0006bb0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bb4:	83 e8 05             	sub    eax,0x5
c0006bb7:	50                   	push   eax
c0006bb8:	8d 42 05             	lea    eax,[edx+0x5]
c0006bbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006bbf:	50                   	push   eax
c0006bc0:	55                   	push   ebp
c0006bc1:	e8 ca 9a ff ff       	call   c0000690 <strncpy>
c0006bc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006bca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006bce:	83 c4 10             	add    esp,0x10
c0006bd1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bd5:	c6 84 08 53 e5 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd1aad],0x0
c0006bdd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006be1:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006be5:	01 c2                	add    edx,eax
c0006be7:	eb 9a                	jmp    c0006b83 <iso_readdir+0x1b4>
c0006be9:	83 c8 ff             	or     eax,0xffffffff
c0006bec:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bf0:	89 c2                	mov    edx,eax
c0006bf2:	75 0a                	jne    c0006bfe <iso_readdir+0x22f>
c0006bf4:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bf7:	e8 0e f6 ff ff       	call   c000620a <iso_733>
c0006bfc:	31 d2                	xor    edx,edx
c0006bfe:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006c04:	89 83 50 e5 02 c0    	mov    DWORD PTR [ebx-0x3ffd1ab0],eax
c0006c0a:	89 93 54 e5 02 c0    	mov    DWORD PTR [ebx-0x3ffd1aac],edx
c0006c10:	81 c3 40 e5 02 c0    	add    ebx,0xc002e540
c0006c16:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006c19:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c1c:	8d 87 50 e5 02 c0    	lea    eax,[edi-0x3ffd1ab0]
c0006c22:	83 c4 1c             	add    esp,0x1c
c0006c25:	5b                   	pop    ebx
c0006c26:	5e                   	pop    esi
c0006c27:	5f                   	pop    edi
c0006c28:	5d                   	pop    ebp
c0006c29:	c3                   	ret    

c0006c2a <iso_reset>:
c0006c2a:	83 ec 18             	sub    esp,0x18
c0006c2d:	68 da 79 02 c0       	push   0xc00279da
c0006c32:	e8 91 68 01 00       	call   c001d4c8 <iso_kprintf>
c0006c37:	e8 1b f7 ff ff       	call   c0006357 <iso_break_all>
c0006c3c:	e8 14 f7 ff ff       	call   c0006355 <bclear>
c0006c41:	31 c0                	xor    eax,eax
c0006c43:	83 c4 1c             	add    esp,0x1c
c0006c46:	c3                   	ret    

c0006c47 <init_percd>:
c0006c47:	57                   	push   edi
c0006c48:	56                   	push   esi
c0006c49:	53                   	push   ebx
c0006c4a:	bb 01 00 00 00       	mov    ebx,0x1
c0006c4f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006c53:	a2 60 e0 02 c0       	mov    ds:0xc002e060,al
c0006c58:	e8 cd ff ff ff       	call   c0006c2a <iso_reset>
c0006c5d:	c7 05 b4 ee 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eeb4,0x0
c0006c67:	a1 ac ee 02 c0       	mov    eax,ds:0xc002eeac
c0006c6c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c70:	e8 97 f7 ff ff       	call   c000640c <biread>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	89 c6                	mov    esi,eax
c0006c79:	0f 88 ba 00 00 00    	js     c0006d39 <init_percd+0xf2>
c0006c7f:	8b 04 85 80 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f80]
c0006c86:	52                   	push   edx
c0006c87:	6a 06                	push   0x6
c0006c89:	68 e5 79 02 c0       	push   0xc00279e5
c0006c8e:	83 c0 04             	add    eax,0x4
c0006c91:	50                   	push   eax
c0006c92:	e8 e9 96 ff ff       	call   c0000380 <memcmp>
c0006c97:	83 c4 10             	add    esp,0x10
c0006c9a:	85 c0                	test   eax,eax
c0006c9c:	74 08                	je     c0006ca6 <init_percd+0x5f>
c0006c9e:	43                   	inc    ebx
c0006c9f:	83 fb 04             	cmp    ebx,0x4
c0006ca2:	75 c3                	jne    c0006c67 <init_percd+0x20>
c0006ca4:	eb 1a                	jmp    c0006cc0 <init_percd+0x79>
c0006ca6:	8b 04 b5 80 e0 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd1f80]
c0006cad:	83 c0 5c             	add    eax,0x5c
c0006cb0:	e8 22 f5 ff ff       	call   c00061d7 <isjoliet>
c0006cb5:	a3 b4 ee 02 c0       	mov    ds:0xc002eeb4,eax
c0006cba:	85 c0                	test   eax,eax
c0006cbc:	74 e0                	je     c0006c9e <init_percd+0x57>
c0006cbe:	eb 3e                	jmp    c0006cfe <init_percd+0xb7>
c0006cc0:	83 3d b4 ee 02 c0 00 	cmp    DWORD PTR ds:0xc002eeb4,0x0
c0006cc7:	75 35                	jne    c0006cfe <init_percd+0xb7>
c0006cc9:	a1 ac ee 02 c0       	mov    eax,ds:0xc002eeac
c0006cce:	83 c0 10             	add    eax,0x10
c0006cd1:	e8 36 f7 ff ff       	call   c000640c <biread>
c0006cd6:	85 c0                	test   eax,eax
c0006cd8:	89 c6                	mov    esi,eax
c0006cda:	78 5f                	js     c0006d3b <init_percd+0xf4>
c0006cdc:	50                   	push   eax
c0006cdd:	8b 04 b5 80 e0 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd1f80]
c0006ce4:	83 cb ff             	or     ebx,0xffffffff
c0006ce7:	6a 06                	push   0x6
c0006ce9:	68 ec 79 02 c0       	push   0xc00279ec
c0006cee:	83 c0 04             	add    eax,0x4
c0006cf1:	50                   	push   eax
c0006cf2:	e8 89 96 ff ff       	call   c0000380 <memcmp>
c0006cf7:	83 c4 10             	add    esp,0x10
c0006cfa:	85 c0                	test   eax,eax
c0006cfc:	75 3d                	jne    c0006d3b <init_percd+0xf4>
c0006cfe:	8b 34 b5 80 e0 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd1f80]
c0006d05:	bf 80 ee 02 c0       	mov    edi,0xc002ee80
c0006d0a:	b9 22 00 00 00       	mov    ecx,0x22
c0006d0f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d17:	b8 82 ee 02 c0       	mov    eax,0xc002ee82
c0006d1c:	31 db                	xor    ebx,ebx
c0006d1e:	e8 e7 f4 ff ff       	call   c000620a <iso_733>
c0006d23:	a3 a8 ee 02 c0       	mov    ds:0xc002eea8,eax
c0006d28:	b8 8a ee 02 c0       	mov    eax,0xc002ee8a
c0006d2d:	e8 d8 f4 ff ff       	call   c000620a <iso_733>
c0006d32:	a3 a4 ee 02 c0       	mov    ds:0xc002eea4,eax
c0006d37:	eb 02                	jmp    c0006d3b <init_percd+0xf4>
c0006d39:	89 c3                	mov    ebx,eax
c0006d3b:	89 d8                	mov    eax,ebx
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	5f                   	pop    edi
c0006d40:	c3                   	ret    

c0006d41 <iso_ioctl>:
c0006d41:	83 ec 18             	sub    esp,0x18
c0006d44:	68 f3 79 02 c0       	push   0xc00279f3
c0006d49:	e8 7a 67 01 00       	call   c001d4c8 <iso_kprintf>
c0006d4e:	e8 d7 fe ff ff       	call   c0006c2a <iso_reset>
c0006d53:	31 c0                	xor    eax,eax
c0006d55:	83 c4 1c             	add    esp,0x1c
c0006d58:	c3                   	ret    

c0006d59 <fs_iso9660_init>:
c0006d59:	53                   	push   ebx
c0006d5a:	31 db                	xor    ebx,ebx
c0006d5c:	83 ec 14             	sub    esp,0x14
c0006d5f:	68 fe 79 02 c0       	push   0xc00279fe
c0006d64:	e8 5f 67 01 00       	call   c001d4c8 <iso_kprintf>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	68 40 09 00 00       	push   0x940
c0006d71:	6a 00                	push   0x0
c0006d73:	68 40 e5 02 c0       	push   0xc002e540
c0006d78:	e8 73 97 ff ff       	call   c00004f0 <memset>
c0006d7d:	c7 05 40 e5 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc002e540,0xffffffff
c0006d87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d8e:	e8 c5 8d 00 00       	call   c000fb58 <malloc>
c0006d93:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d9a:	a3 b0 ee 02 c0       	mov    ds:0xc002eeb0,eax
c0006d9f:	e8 b4 8d 00 00       	call   c000fb58 <malloc>
c0006da4:	83 c4 10             	add    esp,0x10
c0006da7:	a3 20 e5 02 c0       	mov    ds:0xc002e520,eax
c0006dac:	83 ec 0c             	sub    esp,0xc
c0006daf:	68 04 08 00 00       	push   0x804
c0006db4:	e8 9f 8d 00 00       	call   c000fb58 <malloc>
c0006db9:	89 04 9d 80 e0 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1f80],eax
c0006dc0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dc6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006dcd:	e8 86 8d 00 00       	call   c000fb58 <malloc>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	89 04 9d 20 e0 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1fe0],eax
c0006ddc:	43                   	inc    ebx
c0006ddd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006de3:	83 fb 10             	cmp    ebx,0x10
c0006de6:	75 c4                	jne    c0006dac <fs_iso9660_init+0x53>
c0006de8:	83 c4 08             	add    esp,0x8
c0006deb:	31 c0                	xor    eax,eax
c0006ded:	5b                   	pop    ebx
c0006dee:	c3                   	ret    

c0006def <fs_iso9660_shutdown>:
c0006def:	53                   	push   ebx
c0006df0:	31 db                	xor    ebx,ebx
c0006df2:	83 ec 08             	sub    esp,0x8
c0006df5:	83 ec 0c             	sub    esp,0xc
c0006df8:	ff 34 9d 80 e0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd1f80]
c0006dff:	e8 64 8d 00 00       	call   c000fb68 <free>
c0006e04:	58                   	pop    eax
c0006e05:	ff 34 9d 20 e0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd1fe0]
c0006e0c:	43                   	inc    ebx
c0006e0d:	e8 56 8d 00 00       	call   c000fb68 <free>
c0006e12:	83 c4 10             	add    esp,0x10
c0006e15:	83 fb 10             	cmp    ebx,0x10
c0006e18:	75 db                	jne    c0006df5 <fs_iso9660_shutdown+0x6>
c0006e1a:	a1 b0 ee 02 c0       	mov    eax,ds:0xc002eeb0
c0006e1f:	85 c0                	test   eax,eax
c0006e21:	74 0c                	je     c0006e2f <fs_iso9660_shutdown+0x40>
c0006e23:	83 ec 0c             	sub    esp,0xc
c0006e26:	50                   	push   eax
c0006e27:	e8 3c 8d 00 00       	call   c000fb68 <free>
c0006e2c:	83 c4 10             	add    esp,0x10
c0006e2f:	a1 20 e5 02 c0       	mov    eax,ds:0xc002e520
c0006e34:	85 c0                	test   eax,eax
c0006e36:	74 0c                	je     c0006e44 <fs_iso9660_shutdown+0x55>
c0006e38:	83 ec 0c             	sub    esp,0xc
c0006e3b:	50                   	push   eax
c0006e3c:	e8 27 8d 00 00       	call   c000fb68 <free>
c0006e41:	83 c4 10             	add    esp,0x10
c0006e44:	c7 05 20 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e520,0x0
c0006e4e:	31 c0                	xor    eax,eax
c0006e50:	c7 05 b0 ee 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eeb0,0x0
c0006e5a:	83 c4 08             	add    esp,0x8
c0006e5d:	5b                   	pop    ebx
c0006e5e:	c3                   	ret    

c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e5f:	55                   	push   ebp
c0006e60:	57                   	push   edi
c0006e61:	56                   	push   esi
c0006e62:	53                   	push   ebx
c0006e63:	83 ec 20             	sub    esp,0x20
c0006e66:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0006e6a:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c0006e72:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0006e76:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c0006e7e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006e82:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c0006e8a:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c0006e92:	89 f7                	mov    edi,esi
c0006e94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0006e99:	89 eb                	mov    ebx,ebp
c0006e9b:	eb 02                	jmp    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c0006e9d:	89 c7                	mov    edi,eax
c0006e9f:	31 d2                	xor    edx,edx
c0006ea1:	89 f8                	mov    eax,edi
c0006ea3:	f7 f1                	div    ecx
c0006ea5:	83 c3 01             	add    ebx,0x1
c0006ea8:	39 cf                	cmp    edi,ecx
c0006eaa:	73 f1                	jae    c0006e9d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c0006eac:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eaf:	eb 02                	jmp    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c0006eb1:	89 c6                	mov    esi,eax
c0006eb3:	31 d2                	xor    edx,edx
c0006eb5:	89 f0                	mov    eax,esi
c0006eb7:	f7 f1                	div    ecx
c0006eb9:	83 eb 01             	sub    ebx,0x1
c0006ebc:	39 ce                	cmp    esi,ecx
c0006ebe:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec2:	88 13                	mov    BYTE PTR [ebx],dl
c0006ec4:	73 eb                	jae    c0006eb1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c0006ec6:	83 c4 20             	add    esp,0x20
c0006ec9:	89 e8                	mov    eax,ebp
c0006ecb:	5b                   	pop    ebx
c0006ecc:	5e                   	pop    esi
c0006ecd:	5f                   	pop    edi
c0006ece:	5d                   	pop    ebp
c0006ecf:	c3                   	ret    

c0006ed0 <Dbg::logc(char)>:
c0006ed0:	53                   	push   ebx
c0006ed1:	83 ec 14             	sub    esp,0x14
c0006ed4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ed8:	6a 10                	push   0x10
c0006eda:	e8 89 67 00 00       	call   c000d668 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006edf:	83 c4 10             	add    esp,0x10
c0006ee2:	84 c0                	test   al,al
c0006ee4:	75 12                	jne    c0006ef8 <Dbg::logc(char)+0x28>
c0006ee6:	ba fd 03 00 00       	mov    edx,0x3fd
c0006eeb:	ec                   	in     al,dx
c0006eec:	a8 20                	test   al,0x20
c0006eee:	74 fb                	je     c0006eeb <Dbg::logc(char)+0x1b>
c0006ef0:	ba f8 03 00 00       	mov    edx,0x3f8
c0006ef5:	88 d8                	mov    al,bl
c0006ef7:	ee                   	out    dx,al
c0006ef8:	83 c4 08             	add    esp,0x8
c0006efb:	5b                   	pop    ebx
c0006efc:	c3                   	ret    

c0006efd <Dbg::logs(char*)>:
c0006efd:	53                   	push   ebx
c0006efe:	83 ec 08             	sub    esp,0x8
c0006f01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006f05:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	74 16                	je     c0006f22 <Dbg::logs(char*)+0x25>
c0006f0c:	83 ec 0c             	sub    esp,0xc
c0006f0f:	83 c3 01             	add    ebx,0x1
c0006f12:	50                   	push   eax
c0006f13:	e8 b8 ff ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006f18:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1b:	83 c4 10             	add    esp,0x10
c0006f1e:	85 c0                	test   eax,eax
c0006f20:	75 ea                	jne    c0006f0c <Dbg::logs(char*)+0xf>
c0006f22:	83 c4 08             	add    esp,0x8
c0006f25:	5b                   	pop    ebx
c0006f26:	c3                   	ret    

c0006f27 <Dbg::logWriteInt(unsigned int)>:
c0006f27:	83 ec 1c             	sub    esp,0x1c
c0006f2a:	6a 0a                	push   0xa
c0006f2c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f30:	50                   	push   eax
c0006f31:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006f35:	50                   	push   eax
c0006f36:	e8 24 ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f3b:	50                   	push   eax
c0006f3c:	e8 bc ff ff ff       	call   c0006efd <Dbg::logs(char*)>
c0006f41:	83 c4 2c             	add    esp,0x2c
c0006f44:	c3                   	ret    

c0006f45 <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f45:	83 ec 1c             	sub    esp,0x1c
c0006f48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006f4c:	50                   	push   eax
c0006f4d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f51:	50                   	push   eax
c0006f52:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0006f56:	52                   	push   edx
c0006f57:	e8 03 ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f5c:	50                   	push   eax
c0006f5d:	e8 9b ff ff ff       	call   c0006efd <Dbg::logs(char*)>
c0006f62:	83 c4 2c             	add    esp,0x2c
c0006f65:	c3                   	ret    

c0006f66 <Dbg::kprintf(char const*, ...)>:
c0006f66:	55                   	push   ebp
c0006f67:	57                   	push   edi
c0006f68:	56                   	push   esi
c0006f69:	53                   	push   ebx
c0006f6a:	83 ec 1c             	sub    esp,0x1c
c0006f6d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006f71:	85 db                	test   ebx,ebx
c0006f73:	0f 84 4c 01 00 00    	je     c00070c5 <Dbg::kprintf(char const*, ...)+0x15f>
c0006f79:	83 ec 0c             	sub    esp,0xc
c0006f7c:	6a 10                	push   0x10
c0006f7e:	e8 e5 66 00 00       	call   c000d668 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006f83:	83 c4 10             	add    esp,0x10
c0006f86:	84 c0                	test   al,al
c0006f88:	74 08                	je     c0006f92 <Dbg::kprintf(char const*, ...)+0x2c>
c0006f8a:	83 c4 1c             	add    esp,0x1c
c0006f8d:	5b                   	pop    ebx
c0006f8e:	5e                   	pop    esi
c0006f8f:	5f                   	pop    edi
c0006f90:	5d                   	pop    ebp
c0006f91:	c3                   	ret    
c0006f92:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006f96:	31 ff                	xor    edi,edi
c0006f98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006f9c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f9f:	85 c0                	test   eax,eax
c0006fa1:	74 e7                	je     c0006f8a <Dbg::kprintf(char const*, ...)+0x24>
c0006fa3:	8d 77 01             	lea    esi,[edi+0x1]
c0006fa6:	83 f8 25             	cmp    eax,0x25
c0006fa9:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fac:	75 4c                	jne    c0006ffa <Dbg::kprintf(char const*, ...)+0x94>
c0006fae:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fb1:	83 c7 02             	add    edi,0x2
c0006fb4:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fb7:	83 e8 25             	sub    eax,0x25
c0006fba:	0f b6 c0             	movzx  eax,al
c0006fbd:	83 f8 53             	cmp    eax,0x53
c0006fc0:	0f 87 e1 00 00 00    	ja     c00070a7 <Dbg::kprintf(char const*, ...)+0x141>
c0006fc6:	ff 24 85 48 7a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd85b8]
c0006fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006fd1:	83 ec 0c             	sub    esp,0xc
c0006fd4:	89 c8                	mov    eax,ecx
c0006fd6:	83 c1 04             	add    ecx,0x4
c0006fd9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006fdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0006fdf:	50                   	push   eax
c0006fe0:	e8 42 ff ff ff       	call   c0006f27 <Dbg::logWriteInt(unsigned int)>
c0006fe5:	83 c4 10             	add    esp,0x10
c0006fe8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006feb:	85 c0                	test   eax,eax
c0006fed:	74 9b                	je     c0006f8a <Dbg::kprintf(char const*, ...)+0x24>
c0006fef:	8d 77 01             	lea    esi,[edi+0x1]
c0006ff2:	83 f8 25             	cmp    eax,0x25
c0006ff5:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006ff8:	74 b4                	je     c0006fae <Dbg::kprintf(char const*, ...)+0x48>
c0006ffa:	83 ec 0c             	sub    esp,0xc
c0006ffd:	89 f7                	mov    edi,esi
c0006fff:	50                   	push   eax
c0007000:	89 ee                	mov    esi,ebp
c0007002:	e8 c9 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007007:	83 c4 10             	add    esp,0x10
c000700a:	eb dc                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c000700c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007010:	83 ec 0c             	sub    esp,0xc
c0007013:	89 c8                	mov    eax,ecx
c0007015:	83 c1 04             	add    ecx,0x4
c0007018:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000701c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000701e:	55                   	push   ebp
c000701f:	e8 d9 fe ff ff       	call   c0006efd <Dbg::logs(char*)>
c0007024:	83 c4 10             	add    esp,0x10
c0007027:	eb bf                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007029:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000702d:	83 ec 0c             	sub    esp,0xc
c0007030:	89 d0                	mov    eax,edx
c0007032:	83 c2 04             	add    edx,0x4
c0007035:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007039:	8b 08                	mov    ecx,DWORD PTR [eax]
c000703b:	51                   	push   ecx
c000703c:	e8 e6 fe ff ff       	call   c0006f27 <Dbg::logWriteInt(unsigned int)>
c0007041:	83 c4 10             	add    esp,0x10
c0007044:	eb a2                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007046:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000704a:	83 ec 0c             	sub    esp,0xc
c000704d:	89 d0                	mov    eax,edx
c000704f:	83 c2 04             	add    edx,0x4
c0007052:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007056:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0007059:	50                   	push   eax
c000705a:	e8 71 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000705f:	83 c4 10             	add    esp,0x10
c0007062:	eb 84                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007064:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007068:	89 c8                	mov    eax,ecx
c000706a:	83 c1 04             	add    ecx,0x4
c000706d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007071:	83 ec 08             	sub    esp,0x8
c0007074:	6a 10                	push   0x10
c0007076:	8b 10                	mov    edx,DWORD PTR [eax]
c0007078:	52                   	push   edx
c0007079:	e8 c7 fe ff ff       	call   c0006f45 <Dbg::logWriteIntBase(unsigned int, int)>
c000707e:	83 c4 10             	add    esp,0x10
c0007081:	e9 62 ff ff ff       	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007086:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000708a:	89 d0                	mov    eax,edx
c000708c:	83 c2 08             	add    edx,0x8
c000708f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007093:	eb dc                	jmp    c0007071 <Dbg::kprintf(char const*, ...)+0x10b>
c0007095:	83 ec 0c             	sub    esp,0xc
c0007098:	6a 25                	push   0x25
c000709a:	e8 31 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000709f:	83 c4 10             	add    esp,0x10
c00070a2:	e9 41 ff ff ff       	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c00070a7:	83 ec 0c             	sub    esp,0xc
c00070aa:	6a 25                	push   0x25
c00070ac:	e8 1f fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c00070b1:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00070b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00070b8:	e8 13 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c00070bd:	83 c4 10             	add    esp,0x10
c00070c0:	e9 23 ff ff ff       	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c00070c5:	83 ec 0c             	sub    esp,0xc
c00070c8:	68 10 7a 02 c0       	push   0xc0027a10
c00070cd:	e8 94 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00070d2:	83 c4 10             	add    esp,0x10
c00070d5:	83 c4 1c             	add    esp,0x1c
c00070d8:	5b                   	pop    ebx
c00070d9:	5e                   	pop    esi
c00070da:	5f                   	pop    edi
c00070db:	5d                   	pop    ebp
c00070dc:	c3                   	ret    
c00070dd:	66 90                	xchg   ax,ax
c00070df:	90                   	nop

c00070e0 <KiUbsanPrintDetails(char const*, void*)>:
c00070e0:	83 ec 1c             	sub    esp,0x1c
c00070e3:	83 ec 08             	sub    esp,0x8
c00070e6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070ea:	68 98 7b 02 c0       	push   0xc0027b98
c00070ef:	e8 72 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00070f4:	83 c4 10             	add    esp,0x10
c00070f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00070fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007103:	8b 00                	mov    eax,DWORD PTR [eax]
c0007105:	83 ec 08             	sub    esp,0x8
c0007108:	50                   	push   eax
c0007109:	68 ac 7b 02 c0       	push   0xc0027bac
c000710e:	e8 53 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007113:	83 c4 10             	add    esp,0x10
c0007116:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000711a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000711d:	83 ec 08             	sub    esp,0x8
c0007120:	50                   	push   eax
c0007121:	68 b6 7b 02 c0       	push   0xc0027bb6
c0007126:	e8 3b fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000712b:	83 c4 10             	add    esp,0x10
c000712e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007132:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0007135:	83 ec 08             	sub    esp,0x8
c0007138:	50                   	push   eax
c0007139:	68 c0 7b 02 c0       	push   0xc0027bc0
c000713e:	e8 23 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007143:	83 c4 10             	add    esp,0x10
c0007146:	90                   	nop
c0007147:	83 c4 1c             	add    esp,0x1c
c000714a:	c3                   	ret    
c000714b:	90                   	nop

c000714c <__ubsan_handle_type_mismatch_v1>:
c000714c:	83 ec 0c             	sub    esp,0xc
c000714f:	83 ec 08             	sub    esp,0x8
c0007152:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007156:	68 04 7d 02 c0       	push   0xc0027d04
c000715b:	e8 80 ff ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007160:	83 c4 10             	add    esp,0x10
c0007163:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007168:	75 16                	jne    c0007180 <__ubsan_handle_type_mismatch_v1+0x34>
c000716a:	83 ec 0c             	sub    esp,0xc
c000716d:	68 ca 7b 02 c0       	push   0xc0027bca
c0007172:	e8 ef fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007177:	83 c4 10             	add    esp,0x10
c000717a:	e9 91 00 00 00       	jmp    c0007210 <__ubsan_handle_type_mismatch_v1+0xc4>
c000717f:	90                   	nop
c0007180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007184:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007187:	85 c0                	test   eax,eax
c0007189:	74 29                	je     c00071b4 <__ubsan_handle_type_mismatch_v1+0x68>
c000718b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000718f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007192:	83 e8 01             	sub    eax,0x1
c0007195:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0007199:	75 19                	jne    c00071b4 <__ubsan_handle_type_mismatch_v1+0x68>
c000719b:	83 ec 08             	sub    esp,0x8
c000719e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00071a2:	68 24 7d 02 c0       	push   0xc0027d24
c00071a7:	e8 ba fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00071ac:	83 c4 10             	add    esp,0x10
c00071af:	eb 5f                	jmp    c0007210 <__ubsan_handle_type_mismatch_v1+0xc4>
c00071b1:	8d 76 00             	lea    esi,[esi+0x0]
c00071b4:	83 ec 0c             	sub    esp,0xc
c00071b7:	68 df 7b 02 c0       	push   0xc0027bdf
c00071bc:	e8 a5 fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00071c1:	83 c4 10             	add    esp,0x10
c00071c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071c8:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071cb:	0f b6 c0             	movzx  eax,al
c00071ce:	83 ec 08             	sub    esp,0x8
c00071d1:	50                   	push   eax
c00071d2:	68 f9 7b 02 c0       	push   0xc0027bf9
c00071d7:	e8 8a fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00071dc:	83 c4 10             	add    esp,0x10
c00071df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071e3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071e6:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071f1:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071f4:	0f b6 c0             	movzx  eax,al
c00071f7:	8b 04 85 40 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd42c0]
c00071fe:	51                   	push   ecx
c00071ff:	52                   	push   edx
c0007200:	50                   	push   eax
c0007201:	68 4c 7d 02 c0       	push   0xc0027d4c
c0007206:	e8 5b fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000720b:	83 c4 10             	add    esp,0x10
c000720e:	66 90                	xchg   ax,ax
c0007210:	83 ec 0c             	sub    esp,0xc
c0007213:	68 04 7d 02 c0       	push   0xc0027d04
c0007218:	e8 8f 8d 00 00       	call   c000ffac <KePanic(char const*)>
c000721d:	83 c4 10             	add    esp,0x10
c0007220:	90                   	nop
c0007221:	83 c4 0c             	add    esp,0xc
c0007224:	c3                   	ret    
c0007225:	8d 76 00             	lea    esi,[esi+0x0]

c0007228 <__ubsan_handle_pointer_overflow>:
c0007228:	83 ec 0c             	sub    esp,0xc
c000722b:	83 ec 08             	sub    esp,0x8
c000722e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007232:	68 94 7d 02 c0       	push   0xc0027d94
c0007237:	e8 a4 fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c000723c:	83 c4 10             	add    esp,0x10
c000723f:	83 ec 0c             	sub    esp,0xc
c0007242:	68 94 7d 02 c0       	push   0xc0027d94
c0007247:	e8 60 8d 00 00       	call   c000ffac <KePanic(char const*)>
c000724c:	83 c4 10             	add    esp,0x10
c000724f:	90                   	nop
c0007250:	83 c4 0c             	add    esp,0xc
c0007253:	c3                   	ret    

c0007254 <__ubsan_handle_out_of_bounds>:
c0007254:	83 ec 0c             	sub    esp,0xc
c0007257:	83 ec 08             	sub    esp,0x8
c000725a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000725e:	68 04 7c 02 c0       	push   0xc0027c04
c0007263:	e8 78 fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007268:	83 c4 10             	add    esp,0x10
c000726b:	83 ec 0c             	sub    esp,0xc
c000726e:	68 04 7c 02 c0       	push   0xc0027c04
c0007273:	e8 34 8d 00 00       	call   c000ffac <KePanic(char const*)>
c0007278:	83 c4 10             	add    esp,0x10
c000727b:	90                   	nop
c000727c:	83 c4 0c             	add    esp,0xc
c000727f:	c3                   	ret    

c0007280 <__ubsan_handle_add_overflow>:
c0007280:	83 ec 0c             	sub    esp,0xc
c0007283:	83 ec 08             	sub    esp,0x8
c0007286:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000728a:	68 21 7c 02 c0       	push   0xc0027c21
c000728f:	e8 4c fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007294:	83 c4 10             	add    esp,0x10
c0007297:	83 ec 0c             	sub    esp,0xc
c000729a:	68 21 7c 02 c0       	push   0xc0027c21
c000729f:	e8 08 8d 00 00       	call   c000ffac <KePanic(char const*)>
c00072a4:	83 c4 10             	add    esp,0x10
c00072a7:	90                   	nop
c00072a8:	83 c4 0c             	add    esp,0xc
c00072ab:	c3                   	ret    

c00072ac <__ubsan_handle_load_invalid_value>:
c00072ac:	83 ec 0c             	sub    esp,0xc
c00072af:	83 ec 08             	sub    esp,0x8
c00072b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b6:	68 b4 7d 02 c0       	push   0xc0027db4
c00072bb:	e8 20 fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c00072c0:	83 c4 10             	add    esp,0x10
c00072c3:	83 ec 0c             	sub    esp,0xc
c00072c6:	68 b4 7d 02 c0       	push   0xc0027db4
c00072cb:	e8 dc 8c 00 00       	call   c000ffac <KePanic(char const*)>
c00072d0:	83 c4 10             	add    esp,0x10
c00072d3:	90                   	nop
c00072d4:	83 c4 0c             	add    esp,0xc
c00072d7:	c3                   	ret    

c00072d8 <__ubsan_handle_divrem_overflow>:
c00072d8:	83 ec 0c             	sub    esp,0xc
c00072db:	83 ec 08             	sub    esp,0x8
c00072de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072e2:	68 d8 7d 02 c0       	push   0xc0027dd8
c00072e7:	e8 f4 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c00072ec:	83 c4 10             	add    esp,0x10
c00072ef:	83 ec 0c             	sub    esp,0xc
c00072f2:	68 d8 7d 02 c0       	push   0xc0027dd8
c00072f7:	e8 b0 8c 00 00       	call   c000ffac <KePanic(char const*)>
c00072fc:	83 c4 10             	add    esp,0x10
c00072ff:	90                   	nop
c0007300:	83 c4 0c             	add    esp,0xc
c0007303:	c3                   	ret    

c0007304 <__ubsan_handle_mul_overflow>:
c0007304:	83 ec 0c             	sub    esp,0xc
c0007307:	83 ec 08             	sub    esp,0x8
c000730a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000730e:	68 3d 7c 02 c0       	push   0xc0027c3d
c0007313:	e8 c8 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007318:	83 c4 10             	add    esp,0x10
c000731b:	83 ec 0c             	sub    esp,0xc
c000731e:	68 3d 7c 02 c0       	push   0xc0027c3d
c0007323:	e8 84 8c 00 00       	call   c000ffac <KePanic(char const*)>
c0007328:	83 c4 10             	add    esp,0x10
c000732b:	90                   	nop
c000732c:	83 c4 0c             	add    esp,0xc
c000732f:	c3                   	ret    

c0007330 <__ubsan_handle_sub_overflow>:
c0007330:	83 ec 0c             	sub    esp,0xc
c0007333:	83 ec 08             	sub    esp,0x8
c0007336:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000733a:	68 59 7c 02 c0       	push   0xc0027c59
c000733f:	e8 9c fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007344:	83 c4 10             	add    esp,0x10
c0007347:	83 ec 0c             	sub    esp,0xc
c000734a:	68 59 7c 02 c0       	push   0xc0027c59
c000734f:	e8 58 8c 00 00       	call   c000ffac <KePanic(char const*)>
c0007354:	83 c4 10             	add    esp,0x10
c0007357:	90                   	nop
c0007358:	83 c4 0c             	add    esp,0xc
c000735b:	c3                   	ret    

c000735c <__ubsan_handle_shift_out_of_bounds>:
c000735c:	83 ec 0c             	sub    esp,0xc
c000735f:	83 ec 08             	sub    esp,0x8
c0007362:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007366:	68 f8 7d 02 c0       	push   0xc0027df8
c000736b:	e8 70 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007370:	83 c4 10             	add    esp,0x10
c0007373:	83 ec 0c             	sub    esp,0xc
c0007376:	68 f8 7d 02 c0       	push   0xc0027df8
c000737b:	e8 2c 8c 00 00       	call   c000ffac <KePanic(char const*)>
c0007380:	83 c4 10             	add    esp,0x10
c0007383:	90                   	nop
c0007384:	83 c4 0c             	add    esp,0xc
c0007387:	c3                   	ret    

c0007388 <__ubsan_handle_negate_overflow>:
c0007388:	83 ec 0c             	sub    esp,0xc
c000738b:	83 ec 08             	sub    esp,0x8
c000738e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007392:	68 1c 7e 02 c0       	push   0xc0027e1c
c0007397:	e8 44 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c000739c:	83 c4 10             	add    esp,0x10
c000739f:	83 ec 0c             	sub    esp,0xc
c00073a2:	68 1c 7e 02 c0       	push   0xc0027e1c
c00073a7:	e8 00 8c 00 00       	call   c000ffac <KePanic(char const*)>
c00073ac:	83 c4 10             	add    esp,0x10
c00073af:	90                   	nop
c00073b0:	83 c4 0c             	add    esp,0xc
c00073b3:	c3                   	ret    

c00073b4 <Hardware::registerIRQ(int)>:
c00073b4:	53                   	push   ebx
c00073b5:	31 c9                	xor    ecx,ecx
c00073b7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00073bb:	0f b6 42 50          	movzx  eax,BYTE PTR [edx+0x50]
c00073bf:	89 c3                	mov    ebx,eax
c00073c1:	0f a3 c8             	bt     eax,ecx
c00073c4:	72 16                	jb     c00073dc <Hardware::registerIRQ(int)+0x28>
c00073c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00073ca:	89 44 8a 40          	mov    DWORD PTR [edx+ecx*4+0x40],eax
c00073ce:	b8 01 00 00 00       	mov    eax,0x1
c00073d3:	d3 e0                	shl    eax,cl
c00073d5:	09 d8                	or     eax,ebx
c00073d7:	88 42 50             	mov    BYTE PTR [edx+0x50],al
c00073da:	eb 06                	jmp    c00073e2 <Hardware::registerIRQ(int)+0x2e>
c00073dc:	41                   	inc    ecx
c00073dd:	83 f9 04             	cmp    ecx,0x4
c00073e0:	75 df                	jne    c00073c1 <Hardware::registerIRQ(int)+0xd>
c00073e2:	5b                   	pop    ebx
c00073e3:	c3                   	ret    

c00073e4 <Hardware::deregisterIRQ(int)>:
c00073e4:	56                   	push   esi
c00073e5:	31 c9                	xor    ecx,ecx
c00073e7:	53                   	push   ebx
c00073e8:	bb 01 00 00 00       	mov    ebx,0x1
c00073ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00073f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00073f5:	39 44 8a 40          	cmp    DWORD PTR [edx+ecx*4+0x40],eax
c00073f9:	75 0e                	jne    c0007409 <Hardware::deregisterIRQ(int)+0x25>
c00073fb:	8b 72 50             	mov    esi,DWORD PTR [edx+0x50]
c00073fe:	89 d8                	mov    eax,ebx
c0007400:	d3 e0                	shl    eax,cl
c0007402:	f7 d0                	not    eax
c0007404:	21 f0                	and    eax,esi
c0007406:	88 42 50             	mov    BYTE PTR [edx+0x50],al
c0007409:	41                   	inc    ecx
c000740a:	83 f9 04             	cmp    ecx,0x4
c000740d:	75 e2                	jne    c00073f1 <Hardware::deregisterIRQ(int)+0xd>
c000740f:	5b                   	pop    ebx
c0007410:	5e                   	pop    esi
c0007411:	c3                   	ret    

c0007412 <Hardware::setHumanReadableName(char const*)>:
c0007412:	83 44 24 04 51       	add    DWORD PTR [esp+0x4],0x51
c0007417:	e9 34 92 ff ff       	jmp    c0000650 <strcpy>

c000741c <Hardware::~Hardware()>:
c000741c:	83 ec 0c             	sub    esp,0xc
c000741f:	ba 74 7e 02 c0       	mov    edx,0xc0027e74
c0007424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007428:	89 10                	mov    DWORD PTR [eax],edx
c000742a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000742e:	83 c0 2c             	add    eax,0x2c
c0007431:	83 ec 0c             	sub    esp,0xc
c0007434:	50                   	push   eax
c0007435:	e8 0c e9 01 00       	call   c0025d46 <std::vector<DevicePortRange>::~vector()>
c000743a:	83 c4 10             	add    esp,0x10
c000743d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007441:	83 c0 18             	add    eax,0x18
c0007444:	83 ec 0c             	sub    esp,0xc
c0007447:	50                   	push   eax
c0007448:	e8 c7 e8 01 00       	call   c0025d14 <std::vector<DeviceMemoryRange>::~vector()>
c000744d:	83 c4 10             	add    esp,0x10
c0007450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007454:	83 c0 04             	add    eax,0x4
c0007457:	83 ec 0c             	sub    esp,0xc
c000745a:	50                   	push   eax
c000745b:	e8 82 e8 01 00       	call   c0025ce2 <std::vector<Hardware*>::~vector()>
c0007460:	83 c4 10             	add    esp,0x10
c0007463:	90                   	nop
c0007464:	83 c4 0c             	add    esp,0xc
c0007467:	c3                   	ret    

c0007468 <Hardware::~Hardware()>:
c0007468:	83 ec 0c             	sub    esp,0xc
c000746b:	83 ec 0c             	sub    esp,0xc
c000746e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007472:	e8 a5 ff ff ff       	call   c000741c <Hardware::~Hardware()>
c0007477:	83 c4 10             	add    esp,0x10
c000747a:	83 ec 08             	sub    esp,0x8
c000747d:	68 d4 00 00 00       	push   0xd4
c0007482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007486:	e8 d5 62 00 00       	call   c000d760 <operator delete(void*, unsigned long)>
c000748b:	83 c4 10             	add    esp,0x10
c000748e:	83 c4 0c             	add    esp,0xc
c0007491:	c3                   	ret    

c0007492 <Hardware::Hardware()>:
c0007492:	83 ec 0c             	sub    esp,0xc
c0007495:	ba 74 7e 02 c0       	mov    edx,0xc0027e74
c000749a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000749e:	89 10                	mov    DWORD PTR [eax],edx
c00074a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074a4:	83 c0 04             	add    eax,0x4
c00074a7:	83 ec 0c             	sub    esp,0xc
c00074aa:	50                   	push   eax
c00074ab:	e8 d8 e8 01 00       	call   c0025d88 <std::vector<Hardware*>::vector()>
c00074b0:	83 c4 10             	add    esp,0x10
c00074b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074b7:	83 c0 18             	add    eax,0x18
c00074ba:	83 ec 0c             	sub    esp,0xc
c00074bd:	50                   	push   eax
c00074be:	e8 3b e9 01 00       	call   c0025dfe <std::vector<DeviceMemoryRange>::vector()>
c00074c3:	83 c4 10             	add    esp,0x10
c00074c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074ca:	83 c0 2c             	add    eax,0x2c
c00074cd:	83 ec 0c             	sub    esp,0xc
c00074d0:	50                   	push   eax
c00074d1:	e8 9e e9 01 00       	call   c0025e74 <std::vector<DevicePortRange>::vector()>
c00074d6:	83 c4 10             	add    esp,0x10
c00074d9:	90                   	nop
c00074da:	83 c4 0c             	add    esp,0xc
c00074dd:	c3                   	ret    

c00074de <Hardware::Hardware(BuiltinDriver)>:
c00074de:	83 ec 0c             	sub    esp,0xc
c00074e1:	ba 74 7e 02 c0       	mov    edx,0xc0027e74
c00074e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074ea:	89 10                	mov    DWORD PTR [eax],edx
c00074ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074f0:	83 c0 04             	add    eax,0x4
c00074f3:	83 ec 0c             	sub    esp,0xc
c00074f6:	50                   	push   eax
c00074f7:	e8 8c e8 01 00       	call   c0025d88 <std::vector<Hardware*>::vector()>
c00074fc:	83 c4 10             	add    esp,0x10
c00074ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007503:	83 c0 18             	add    eax,0x18
c0007506:	83 ec 0c             	sub    esp,0xc
c0007509:	50                   	push   eax
c000750a:	e8 ef e8 01 00       	call   c0025dfe <std::vector<DeviceMemoryRange>::vector()>
c000750f:	83 c4 10             	add    esp,0x10
c0007512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007516:	83 c0 2c             	add    eax,0x2c
c0007519:	83 ec 0c             	sub    esp,0xc
c000751c:	50                   	push   eax
c000751d:	e8 52 e9 01 00       	call   c0025e74 <std::vector<DevicePortRange>::vector()>
c0007522:	83 c4 10             	add    esp,0x10
c0007525:	90                   	nop
c0007526:	83 c4 0c             	add    esp,0xc
c0007529:	c3                   	ret    

c000752a <Hardware::Hardware(char const*)>:
c000752a:	83 ec 0c             	sub    esp,0xc
c000752d:	ba 74 7e 02 c0       	mov    edx,0xc0027e74
c0007532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007536:	89 10                	mov    DWORD PTR [eax],edx
c0007538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000753c:	83 c0 04             	add    eax,0x4
c000753f:	83 ec 0c             	sub    esp,0xc
c0007542:	50                   	push   eax
c0007543:	e8 40 e8 01 00       	call   c0025d88 <std::vector<Hardware*>::vector()>
c0007548:	83 c4 10             	add    esp,0x10
c000754b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000754f:	83 c0 18             	add    eax,0x18
c0007552:	83 ec 0c             	sub    esp,0xc
c0007555:	50                   	push   eax
c0007556:	e8 a3 e8 01 00       	call   c0025dfe <std::vector<DeviceMemoryRange>::vector()>
c000755b:	83 c4 10             	add    esp,0x10
c000755e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007562:	83 c0 2c             	add    eax,0x2c
c0007565:	83 ec 0c             	sub    esp,0xc
c0007568:	50                   	push   eax
c0007569:	e8 06 e9 01 00       	call   c0025e74 <std::vector<DevicePortRange>::vector()>
c000756e:	83 c4 10             	add    esp,0x10
c0007571:	90                   	nop
c0007572:	83 c4 0c             	add    esp,0xc
c0007575:	c3                   	ret    

c0007576 <Hardware::detectRecursively()>:
c0007576:	57                   	push   edi
c0007577:	56                   	push   esi
c0007578:	53                   	push   ebx
c0007579:	83 ec 1c             	sub    esp,0x1c
c000757c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0007580:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007582:	53                   	push   ebx
c0007583:	ff 10                	call   DWORD PTR [eax]
c0007585:	83 c4 10             	add    esp,0x10
c0007588:	85 c0                	test   eax,eax
c000758a:	74 0c                	je     c0007598 <Hardware::detectRecursively()+0x22>
c000758c:	8b 10                	mov    edx,DWORD PTR [eax]
c000758e:	83 ec 0c             	sub    esp,0xc
c0007591:	50                   	push   eax
c0007592:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0007595:	83 c4 10             	add    esp,0x10
c0007598:	8d 74 24 04          	lea    esi,[esp+0x4]
c000759c:	83 c3 04             	add    ebx,0x4
c000759f:	50                   	push   eax
c00075a0:	50                   	push   eax
c00075a1:	53                   	push   ebx
c00075a2:	56                   	push   esi
c00075a3:	e8 8c e9 01 00       	call   c0025f34 <std::vector<Hardware*>::begin()>
c00075a8:	8d 7c 24 14          	lea    edi,[esp+0x14]
c00075ac:	83 ec 0c             	sub    esp,0xc
c00075af:	53                   	push   ebx
c00075b0:	57                   	push   edi
c00075b1:	e8 5a e9 01 00       	call   c0025f10 <std::vector<Hardware*>::end()>
c00075b6:	83 c4 1c             	add    esp,0x1c
c00075b9:	50                   	push   eax
c00075ba:	50                   	push   eax
c00075bb:	57                   	push   edi
c00075bc:	56                   	push   esi
c00075bd:	e8 28 e9 01 00       	call   c0025eea <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c00075c2:	83 c4 10             	add    esp,0x10
c00075c5:	84 c0                	test   al,al
c00075c7:	74 29                	je     c00075f2 <Hardware::detectRecursively()+0x7c>
c00075c9:	83 ec 0c             	sub    esp,0xc
c00075cc:	56                   	push   esi
c00075cd:	e8 2a e9 01 00       	call   c0025efc <std::vector<Hardware*>::iterator::operator*() const>
c00075d2:	5a                   	pop    edx
c00075d3:	ff 30                	push   DWORD PTR [eax]
c00075d5:	e8 9c ff ff ff       	call   c0007576 <Hardware::detectRecursively()>
c00075da:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00075de:	59                   	pop    ecx
c00075df:	58                   	pop    eax
c00075e0:	56                   	push   esi
c00075e1:	53                   	push   ebx
c00075e2:	e8 71 e9 01 00       	call   c0025f58 <std::vector<Hardware*>::iterator::operator++()>
c00075e7:	53                   	push   ebx
c00075e8:	e8 8b e7 01 00       	call   c0025d78 <std::vector<Hardware*>::iterator::~iterator()>
c00075ed:	83 c4 10             	add    esp,0x10
c00075f0:	eb c7                	jmp    c00075b9 <Hardware::detectRecursively()+0x43>
c00075f2:	83 ec 0c             	sub    esp,0xc
c00075f5:	57                   	push   edi
c00075f6:	e8 7d e7 01 00       	call   c0025d78 <std::vector<Hardware*>::iterator::~iterator()>
c00075fb:	89 34 24             	mov    DWORD PTR [esp],esi
c00075fe:	e8 75 e7 01 00       	call   c0025d78 <std::vector<Hardware*>::iterator::~iterator()>
c0007603:	83 c4 20             	add    esp,0x20
c0007606:	5b                   	pop    ebx
c0007607:	5e                   	pop    esi
c0007608:	5f                   	pop    edi
c0007609:	c3                   	ret    

c000760a <Hardware::deinitialiseRecursively()>:
c000760a:	55                   	push   ebp
c000760b:	57                   	push   edi
c000760c:	56                   	push   esi
c000760d:	53                   	push   ebx
c000760e:	83 ec 1c             	sub    esp,0x1c
c0007611:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0007615:	8d 5c 24 04          	lea    ebx,[esp+0x4]
c0007619:	50                   	push   eax
c000761a:	50                   	push   eax
c000761b:	8d 6e 04             	lea    ebp,[esi+0x4]
c000761e:	55                   	push   ebp
c000761f:	53                   	push   ebx
c0007620:	e8 0f e9 01 00       	call   c0025f34 <std::vector<Hardware*>::begin()>
c0007625:	8d 7c 24 14          	lea    edi,[esp+0x14]
c0007629:	83 ec 0c             	sub    esp,0xc
c000762c:	55                   	push   ebp
c000762d:	57                   	push   edi
c000762e:	e8 dd e8 01 00       	call   c0025f10 <std::vector<Hardware*>::end()>
c0007633:	83 c4 1c             	add    esp,0x1c
c0007636:	50                   	push   eax
c0007637:	50                   	push   eax
c0007638:	57                   	push   edi
c0007639:	53                   	push   ebx
c000763a:	e8 ab e8 01 00       	call   c0025eea <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c000763f:	83 c4 10             	add    esp,0x10
c0007642:	84 c0                	test   al,al
c0007644:	74 29                	je     c000766f <Hardware::deinitialiseRecursively()+0x65>
c0007646:	83 ec 0c             	sub    esp,0xc
c0007649:	53                   	push   ebx
c000764a:	e8 ad e8 01 00       	call   c0025efc <std::vector<Hardware*>::iterator::operator*() const>
c000764f:	5a                   	pop    edx
c0007650:	ff 30                	push   DWORD PTR [eax]
c0007652:	e8 b3 ff ff ff       	call   c000760a <Hardware::deinitialiseRecursively()>
c0007657:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000765b:	59                   	pop    ecx
c000765c:	58                   	pop    eax
c000765d:	53                   	push   ebx
c000765e:	55                   	push   ebp
c000765f:	e8 f4 e8 01 00       	call   c0025f58 <std::vector<Hardware*>::iterator::operator++()>
c0007664:	55                   	push   ebp
c0007665:	e8 0e e7 01 00       	call   c0025d78 <std::vector<Hardware*>::iterator::~iterator()>
c000766a:	83 c4 10             	add    esp,0x10
c000766d:	eb c7                	jmp    c0007636 <Hardware::deinitialiseRecursively()+0x2c>
c000766f:	83 ec 0c             	sub    esp,0xc
c0007672:	57                   	push   edi
c0007673:	e8 00 e7 01 00       	call   c0025d78 <std::vector<Hardware*>::iterator::~iterator()>
c0007678:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000767b:	e8 f8 e6 01 00       	call   c0025d78 <std::vector<Hardware*>::iterator::~iterator()>
c0007680:	8b 06                	mov    eax,DWORD PTR [esi]
c0007682:	89 34 24             	mov    DWORD PTR [esp],esi
c0007685:	ff 10                	call   DWORD PTR [eax]
c0007687:	83 c4 10             	add    esp,0x10
c000768a:	85 c0                	test   eax,eax
c000768c:	74 0c                	je     c000769a <Hardware::deinitialiseRecursively()+0x90>
c000768e:	8b 10                	mov    edx,DWORD PTR [eax]
c0007690:	83 ec 0c             	sub    esp,0xc
c0007693:	50                   	push   eax
c0007694:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007697:	83 c4 10             	add    esp,0x10
c000769a:	83 c4 1c             	add    esp,0x1c
c000769d:	5b                   	pop    ebx
c000769e:	5e                   	pop    esi
c000769f:	5f                   	pop    edi
c00076a0:	5d                   	pop    ebp
c00076a1:	c3                   	ret    

c00076a2 <Hardware::setPowerStateRecursively(DevicePowerState)>:
c00076a2:	55                   	push   ebp
c00076a3:	57                   	push   edi
c00076a4:	56                   	push   esi
c00076a5:	53                   	push   ebx
c00076a6:	83 ec 1c             	sub    esp,0x1c
c00076a9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00076ad:	8d 5c 24 04          	lea    ebx,[esp+0x4]
c00076b1:	55                   	push   ebp
c00076b2:	55                   	push   ebp
c00076b3:	8d 7e 04             	lea    edi,[esi+0x4]
c00076b6:	57                   	push   edi
c00076b7:	53                   	push   ebx
c00076b8:	e8 77 e8 01 00       	call   c0025f34 <std::vector<Hardware*>::begin()>
c00076bd:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00076c1:	83 ec 0c             	sub    esp,0xc
c00076c4:	57                   	push   edi
c00076c5:	55                   	push   ebp
c00076c6:	e8 45 e8 01 00       	call   c0025f10 <std::vector<Hardware*>::end()>
c00076cb:	83 c4 1c             	add    esp,0x1c
c00076ce:	51                   	push   ecx
c00076cf:	51                   	push   ecx
c00076d0:	55                   	push   ebp
c00076d1:	53                   	push   ebx
c00076d2:	e8 13 e8 01 00       	call   c0025eea <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c00076d7:	83 c4 10             	add    esp,0x10
c00076da:	84 c0                	test   al,al
c00076dc:	74 2e                	je     c000770c <Hardware::setPowerStateRecursively(DevicePowerState)+0x6a>
c00076de:	83 ec 0c             	sub    esp,0xc
c00076e1:	53                   	push   ebx
c00076e2:	e8 15 e8 01 00       	call   c0025efc <std::vector<Hardware*>::iterator::operator*() const>
c00076e7:	59                   	pop    ecx
c00076e8:	5f                   	pop    edi
c00076e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076ed:	ff 30                	push   DWORD PTR [eax]
c00076ef:	e8 ae ff ff ff       	call   c00076a2 <Hardware::setPowerStateRecursively(DevicePowerState)>
c00076f4:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00076f8:	58                   	pop    eax
c00076f9:	5a                   	pop    edx
c00076fa:	53                   	push   ebx
c00076fb:	57                   	push   edi
c00076fc:	e8 57 e8 01 00       	call   c0025f58 <std::vector<Hardware*>::iterator::operator++()>
c0007701:	57                   	push   edi
c0007702:	e8 71 e6 01 00       	call   c0025d78 <std::vector<Hardware*>::iterator::~iterator()>
c0007707:	83 c4 10             	add    esp,0x10
c000770a:	eb c2                	jmp    c00076ce <Hardware::setPowerStateRecursively(DevicePowerState)+0x2c>
c000770c:	83 ec 0c             	sub    esp,0xc
c000770f:	55                   	push   ebp
c0007710:	e8 63 e6 01 00       	call   c0025d78 <std::vector<Hardware*>::iterator::~iterator()>
c0007715:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007718:	e8 5b e6 01 00       	call   c0025d78 <std::vector<Hardware*>::iterator::~iterator()>
c000771d:	8b 06                	mov    eax,DWORD PTR [esi]
c000771f:	89 34 24             	mov    DWORD PTR [esp],esi
c0007722:	ff 10                	call   DWORD PTR [eax]
c0007724:	83 c4 10             	add    esp,0x10
c0007727:	85 c0                	test   eax,eax
c0007729:	74 0f                	je     c000773a <Hardware::setPowerStateRecursively(DevicePowerState)+0x98>
c000772b:	52                   	push   edx
c000772c:	52                   	push   edx
c000772d:	8b 10                	mov    edx,DWORD PTR [eax]
c000772f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007733:	50                   	push   eax
c0007734:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007737:	83 c4 10             	add    esp,0x10
c000773a:	83 c4 1c             	add    esp,0x1c
c000773d:	5b                   	pop    ebx
c000773e:	5e                   	pop    esi
c000773f:	5f                   	pop    edi
c0007740:	5d                   	pop    ebp
c0007741:	c3                   	ret    

c0007742 <Hardware::addChild(Hardware*)>:
c0007742:	83 ec 14             	sub    esp,0x14
c0007745:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0007749:	50                   	push   eax
c000774a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000774e:	83 c0 04             	add    eax,0x4
c0007751:	50                   	push   eax
c0007752:	e8 db eb 01 00       	call   c0026332 <std::vector<Hardware*>::push_back(Hardware* const&)>
c0007757:	83 c4 1c             	add    esp,0x1c
c000775a:	c3                   	ret    
c000775b:	90                   	nop

c000775c <Hardware::removeChild(Hardware*)>:
c000775c:	55                   	push   ebp
c000775d:	57                   	push   edi
c000775e:	56                   	push   esi
c000775f:	53                   	push   ebx
c0007760:	83 ec 2c             	sub    esp,0x2c
c0007763:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007767:	8d 74 24 18          	lea    esi,[esp+0x18]
c000776b:	8d 58 04             	lea    ebx,[eax+0x4]
c000776e:	50                   	push   eax
c000776f:	50                   	push   eax
c0007770:	53                   	push   ebx
c0007771:	56                   	push   esi
c0007772:	e8 99 e7 01 00       	call   c0025f10 <std::vector<Hardware*>::end()>
c0007777:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000777b:	83 ec 0c             	sub    esp,0xc
c000777e:	53                   	push   ebx
c000777f:	57                   	push   edi
c0007780:	e8 8b e7 01 00       	call   c0025f10 <std::vector<Hardware*>::end()>
c0007785:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007788:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000778c:	55                   	push   ebp
c000778d:	e8 a2 e7 01 00       	call   c0025f34 <std::vector<Hardware*>::begin()>
c0007792:	8d 44 24 30          	lea    eax,[esp+0x30]
c0007796:	83 c4 1c             	add    esp,0x1c
c0007799:	8d 54 24 44          	lea    edx,[esp+0x44]
c000779d:	52                   	push   edx
c000779e:	57                   	push   edi
c000779f:	55                   	push   ebp
c00077a0:	50                   	push   eax
c00077a1:	e8 bb e8 01 00       	call   c0026061 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>
c00077a6:	8d 54 24 28          	lea    edx,[esp+0x28]
c00077aa:	83 c4 0c             	add    esp,0xc
c00077ad:	56                   	push   esi
c00077ae:	8d 44 24 18          	lea    eax,[esp+0x18]
c00077b2:	50                   	push   eax
c00077b3:	53                   	push   ebx
c00077b4:	52                   	push   edx
c00077b5:	e8 02 ec 01 00       	call   c00263bc <std::vector<Hardware*>::erase(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator)>
c00077ba:	8d 54 24 28          	lea    edx,[esp+0x28]
c00077be:	52                   	push   edx
c00077bf:	e8 b4 e5 01 00       	call   c0025d78 <std::vector<Hardware*>::iterator::~iterator()>
c00077c4:	5a                   	pop    edx
c00077c5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00077c9:	50                   	push   eax
c00077ca:	e8 a9 e5 01 00       	call   c0025d78 <std::vector<Hardware*>::iterator::~iterator()>
c00077cf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00077d2:	e8 a1 e5 01 00       	call   c0025d78 <std::vector<Hardware*>::iterator::~iterator()>
c00077d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00077da:	e8 99 e5 01 00       	call   c0025d78 <std::vector<Hardware*>::iterator::~iterator()>
c00077df:	89 34 24             	mov    DWORD PTR [esp],esi
c00077e2:	e8 91 e5 01 00       	call   c0025d78 <std::vector<Hardware*>::iterator::~iterator()>
c00077e7:	83 c4 3c             	add    esp,0x3c
c00077ea:	5b                   	pop    ebx
c00077eb:	5e                   	pop    esi
c00077ec:	5f                   	pop    edi
c00077ed:	5d                   	pop    ebp
c00077ee:	c3                   	ret    
c00077ef:	90                   	nop

c00077f0 <Hardware::registerMemoryRange(unsigned long, unsigned long)>:
c00077f0:	83 ec 24             	sub    esp,0x24
c00077f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00077f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00077fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00077ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007803:	8d 44 24 10          	lea    eax,[esp+0x10]
c0007807:	50                   	push   eax
c0007808:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000780c:	83 c0 18             	add    eax,0x18
c000780f:	50                   	push   eax
c0007810:	e8 41 ee 01 00       	call   c0026656 <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)>
c0007815:	83 c4 2c             	add    esp,0x2c
c0007818:	c3                   	ret    
c0007819:	90                   	nop

c000781a <Hardware::registerPortRange(unsigned short, unsigned char, int)>:
c000781a:	53                   	push   ebx
c000781b:	83 ec 18             	sub    esp,0x18
c000781e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007822:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0007826:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000782a:	83 fa 02             	cmp    edx,0x2
c000782d:	74 25                	je     c0007854 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x3a>
c000782f:	7f 05                	jg     c0007836 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x1c>
c0007831:	31 c0                	xor    eax,eax
c0007833:	4a                   	dec    edx
c0007834:	eb 0d                	jmp    c0007843 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x29>
c0007836:	83 fa 04             	cmp    edx,0x4
c0007839:	74 20                	je     c000785b <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x41>
c000783b:	b8 03 00 00 00       	mov    eax,0x3
c0007840:	83 fa 08             	cmp    edx,0x8
c0007843:	74 1b                	je     c0007860 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x46>
c0007845:	83 ec 0c             	sub    esp,0xc
c0007848:	68 3b 7e 02 c0       	push   0xc0027e3b
c000784d:	e8 5a 87 00 00       	call   c000ffac <KePanic(char const*)>
c0007852:	eb 30                	jmp    c0007884 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x6a>
c0007854:	b8 01 00 00 00       	mov    eax,0x1
c0007859:	eb 05                	jmp    c0007860 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x46>
c000785b:	b8 02 00 00 00       	mov    eax,0x2
c0007860:	66 89 5c 24 0c       	mov    WORD PTR [esp+0xc],bx
c0007865:	c1 e0 06             	shl    eax,0x6
c0007868:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000786c:	88 4c 24 0e          	mov    BYTE PTR [esp+0xe],cl
c0007870:	50                   	push   eax
c0007871:	50                   	push   eax
c0007872:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007876:	50                   	push   eax
c0007877:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000787b:	83 c0 2c             	add    eax,0x2c
c000787e:	50                   	push   eax
c000787f:	e8 70 ef 01 00       	call   c00267f4 <std::vector<DevicePortRange>::push_back(DevicePortRange const&)>
c0007884:	83 c4 10             	add    esp,0x10
c0007887:	83 c4 18             	add    esp,0x18
c000788a:	5b                   	pop    ebx
c000788b:	c3                   	ret    

c000788c <KiIsHashInTable(unsigned short)>:
c000788c:	0f b7 d0             	movzx  edx,ax
c000788f:	83 e0 07             	and    eax,0x7
c0007892:	c1 fa 03             	sar    edx,0x3
c0007895:	88 c1                	mov    cl,al
c0007897:	0f b6 92 00 f3 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd0d00]
c000789e:	d3 fa                	sar    edx,cl
c00078a0:	89 d0                	mov    eax,edx
c00078a2:	83 e0 01             	and    eax,0x1
c00078a5:	c3                   	ret    

c00078a6 <KiSetHashInTable(unsigned short, bool)>:
c00078a6:	56                   	push   esi
c00078a7:	53                   	push   ebx
c00078a8:	0f b7 d8             	movzx  ebx,ax
c00078ab:	c1 fb 03             	sar    ebx,0x3
c00078ae:	83 e0 07             	and    eax,0x7
c00078b1:	89 c1                	mov    ecx,eax
c00078b3:	b8 01 00 00 00       	mov    eax,0x1
c00078b8:	0f b6 b3 00 f3 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd0d00]
c00078bf:	d3 e0                	shl    eax,cl
c00078c1:	84 d2                	test   dl,dl
c00078c3:	74 04                	je     c00078c9 <KiSetHashInTable(unsigned short, bool)+0x23>
c00078c5:	09 f0                	or     eax,esi
c00078c7:	eb 04                	jmp    c00078cd <KiSetHashInTable(unsigned short, bool)+0x27>
c00078c9:	f7 d0                	not    eax
c00078cb:	21 f0                	and    eax,esi
c00078cd:	88 83 00 f3 02 c0    	mov    BYTE PTR [ebx-0x3ffd0d00],al
c00078d3:	5b                   	pop    ebx
c00078d4:	5e                   	pop    esi
c00078d5:	c3                   	ret    

c00078d6 <KiFlushSymlinkChanges()>:
c00078d6:	57                   	push   edi
c00078d7:	56                   	push   esi
c00078d8:	53                   	push   ebx
c00078d9:	83 ec 1c             	sub    esp,0x1c
c00078dc:	68 14 01 00 00       	push   0x114
c00078e1:	e8 72 82 00 00       	call   c000fb58 <malloc>
c00078e6:	83 c4 0c             	add    esp,0xc
c00078e9:	ff 35 58 23 03 c0    	push   DWORD PTR ds:0xc0032358
c00078ef:	68 84 7e 02 c0       	push   0xc0027e84
c00078f4:	50                   	push   eax
c00078f5:	89 c3                	mov    ebx,eax
c00078f7:	e8 64 0d 00 00       	call   c0008660 <File::File(char const*, Process*)>
c00078fc:	83 c4 10             	add    esp,0x10
c00078ff:	85 db                	test   ebx,ebx
c0007901:	75 10                	jne    c0007913 <KiFlushSymlinkChanges()+0x3d>
c0007903:	83 ec 0c             	sub    esp,0xc
c0007906:	68 a2 7e 02 c0       	push   0xc0027ea2
c000790b:	e8 9c 86 00 00       	call   c000ffac <KePanic(char const*)>
c0007910:	83 c4 10             	add    esp,0x10
c0007913:	50                   	push   eax
c0007914:	50                   	push   eax
c0007915:	6a 06                	push   0x6
c0007917:	53                   	push   ebx
c0007918:	e8 61 0d 00 00       	call   c000867e <File::open(FileOpenMode)>
c000791d:	83 c4 10             	add    esp,0x10
c0007920:	85 c0                	test   eax,eax
c0007922:	74 10                	je     c0007934 <KiFlushSymlinkChanges()+0x5e>
c0007924:	83 ec 0c             	sub    esp,0xc
c0007927:	68 bc 7e 02 c0       	push   0xc0027ebc
c000792c:	e8 7b 86 00 00       	call   c000ffac <KePanic(char const*)>
c0007931:	83 c4 10             	add    esp,0x10
c0007934:	31 f6                	xor    esi,esi
c0007936:	39 35 c0 ee 02 c0    	cmp    DWORD PTR ds:0xc002eec0,esi
c000793c:	7e 70                	jle    c00079ae <KiFlushSymlinkChanges()+0xd8>
c000793e:	83 ec 0c             	sub    esp,0xc
c0007941:	89 f0                	mov    eax,esi
c0007943:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007945:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007949:	c1 e0 08             	shl    eax,0x8
c000794c:	57                   	push   edi
c000794d:	05 00 ef 02 c0       	add    eax,0xc002ef00
c0007952:	50                   	push   eax
c0007953:	6a 00                	push   0x0
c0007955:	68 00 01 00 00       	push   0x100
c000795a:	53                   	push   ebx
c000795b:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000795e:	83 c4 20             	add    esp,0x20
c0007961:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0007969:	74 10                	je     c000797b <KiFlushSymlinkChanges()+0xa5>
c000796b:	83 ec 0c             	sub    esp,0xc
c000796e:	68 d6 7e 02 c0       	push   0xc0027ed6
c0007973:	e8 34 86 00 00       	call   c000ffac <KePanic(char const*)>
c0007978:	83 c4 10             	add    esp,0x10
c000797b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000797d:	8d 14 f5 e0 ee 02 c0 	lea    edx,[esi*8-0x3ffd1120]
c0007984:	83 ec 0c             	sub    esp,0xc
c0007987:	57                   	push   edi
c0007988:	52                   	push   edx
c0007989:	6a 00                	push   0x0
c000798b:	6a 08                	push   0x8
c000798d:	53                   	push   ebx
c000798e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007991:	83 c4 20             	add    esp,0x20
c0007994:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007999:	74 10                	je     c00079ab <KiFlushSymlinkChanges()+0xd5>
c000799b:	83 ec 0c             	sub    esp,0xc
c000799e:	68 f0 7e 02 c0       	push   0xc0027ef0
c00079a3:	e8 04 86 00 00       	call   c000ffac <KePanic(char const*)>
c00079a8:	83 c4 10             	add    esp,0x10
c00079ab:	46                   	inc    esi
c00079ac:	eb 88                	jmp    c0007936 <KiFlushSymlinkChanges()+0x60>
c00079ae:	83 ec 0c             	sub    esp,0xc
c00079b1:	53                   	push   ebx
c00079b2:	e8 25 0d 00 00       	call   c00086dc <File::close()>
c00079b7:	83 c4 10             	add    esp,0x10
c00079ba:	85 db                	test   ebx,ebx
c00079bc:	74 0c                	je     c00079ca <KiFlushSymlinkChanges()+0xf4>
c00079be:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079c0:	83 ec 0c             	sub    esp,0xc
c00079c3:	53                   	push   ebx
c00079c4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00079c7:	83 c4 10             	add    esp,0x10
c00079ca:	c7 05 c0 ee 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eec0,0x0
c00079d4:	83 c4 10             	add    esp,0x10
c00079d7:	5b                   	pop    ebx
c00079d8:	5e                   	pop    esi
c00079d9:	5f                   	pop    edi
c00079da:	c3                   	ret    

c00079db <KiDeinitialiseSymlinks(void*)>:
c00079db:	e9 f6 fe ff ff       	jmp    c00078d6 <KiFlushSymlinkChanges()>

c00079e0 <KiGetSymlinkHash(char const*)>:
c00079e0:	53                   	push   ebx
c00079e1:	89 c3                	mov    ebx,eax
c00079e3:	83 ec 14             	sub    esp,0x14
c00079e6:	50                   	push   eax
c00079e7:	e8 94 8b ff ff       	call   c0000580 <strlen>
c00079ec:	5a                   	pop    edx
c00079ed:	59                   	pop    ecx
c00079ee:	50                   	push   eax
c00079ef:	53                   	push   ebx
c00079f0:	e8 1e 6b 00 00       	call   c000e513 <KeCalculateCRC32(unsigned char*, int)>
c00079f5:	83 c4 18             	add    esp,0x18
c00079f8:	5b                   	pop    ebx
c00079f9:	89 c2                	mov    edx,eax
c00079fb:	c1 ea 10             	shr    edx,0x10
c00079fe:	31 d0                	xor    eax,edx
c0007a00:	c3                   	ret    

c0007a01 <KiCreateSymlinkID()>:
c0007a01:	55                   	push   ebp
c0007a02:	57                   	push   edi
c0007a03:	56                   	push   esi
c0007a04:	53                   	push   ebx
c0007a05:	31 db                	xor    ebx,ebx
c0007a07:	83 ec 1c             	sub    esp,0x1c
c0007a0a:	e8 75 8f 00 00       	call   c0010984 <KeRand()>
c0007a0f:	8b 2d 00 13 03 c0    	mov    ebp,DWORD PTR ds:0xc0031300
c0007a15:	31 d2                	xor    edx,edx
c0007a17:	43                   	inc    ebx
c0007a18:	31 ff                	xor    edi,edi
c0007a1a:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0007a1d:	89 ee                	mov    esi,ebp
c0007a1f:	89 0d 00 13 03 c0    	mov    DWORD PTR ds:0xc0031300,ecx
c0007a25:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0007a29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007a2d:	c1 e0 1f             	shl    eax,0x1f
c0007a30:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007a36:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007a3a:	75 10                	jne    c0007a4c <KiCreateSymlinkID()+0x4b>
c0007a3c:	83 ec 0c             	sub    esp,0xc
c0007a3f:	68 0a 7f 02 c0       	push   0xc0027f0a
c0007a44:	e8 63 85 00 00       	call   c000ffac <KePanic(char const*)>
c0007a49:	83 c4 10             	add    esp,0x10
c0007a4c:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0007a50:	75 06                	jne    c0007a58 <KiCreateSymlinkID()+0x57>
c0007a52:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0007a56:	74 b2                	je     c0007a0a <KiCreateSymlinkID()+0x9>
c0007a58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a5c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007a60:	83 c4 1c             	add    esp,0x1c
c0007a63:	5b                   	pop    ebx
c0007a64:	31 f0                	xor    eax,esi
c0007a66:	5e                   	pop    esi
c0007a67:	31 fa                	xor    edx,edi
c0007a69:	5f                   	pop    edi
c0007a6a:	5d                   	pop    ebp
c0007a6b:	c3                   	ret    

c0007a6c <KeRegisterSymlink(char const*, unsigned long long)>:
c0007a6c:	53                   	push   ebx
c0007a6d:	83 ec 0c             	sub    esp,0xc
c0007a70:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007a74:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007a78:	a1 c0 ee 02 c0       	mov    eax,ds:0xc002eec0
c0007a7d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0007a81:	68 00 01 00 00       	push   0x100
c0007a86:	6a 00                	push   0x0
c0007a88:	89 0c c5 e4 ee 02 c0 	mov    DWORD PTR [eax*8-0x3ffd111c],ecx
c0007a8f:	89 14 c5 e0 ee 02 c0 	mov    DWORD PTR [eax*8-0x3ffd1120],edx
c0007a96:	c1 e0 08             	shl    eax,0x8
c0007a99:	05 00 ef 02 c0       	add    eax,0xc002ef00
c0007a9e:	50                   	push   eax
c0007a9f:	e8 4c 8a ff ff       	call   c00004f0 <memset>
c0007aa4:	58                   	pop    eax
c0007aa5:	a1 c0 ee 02 c0       	mov    eax,ds:0xc002eec0
c0007aaa:	5a                   	pop    edx
c0007aab:	c1 e0 08             	shl    eax,0x8
c0007aae:	53                   	push   ebx
c0007aaf:	05 00 ef 02 c0       	add    eax,0xc002ef00
c0007ab4:	50                   	push   eax
c0007ab5:	e8 96 8b ff ff       	call   c0000650 <strcpy>
c0007aba:	89 d8                	mov    eax,ebx
c0007abc:	e8 1f ff ff ff       	call   c00079e0 <KiGetSymlinkHash(char const*)>
c0007ac1:	ba 01 00 00 00       	mov    edx,0x1
c0007ac6:	0f b7 c0             	movzx  eax,ax
c0007ac9:	e8 d8 fd ff ff       	call   c00078a6 <KiSetHashInTable(unsigned short, bool)>
c0007ace:	a1 c0 ee 02 c0       	mov    eax,ds:0xc002eec0
c0007ad3:	83 c4 10             	add    esp,0x10
c0007ad6:	40                   	inc    eax
c0007ad7:	a3 c0 ee 02 c0       	mov    ds:0xc002eec0,eax
c0007adc:	83 f8 03             	cmp    eax,0x3
c0007adf:	7e 09                	jle    c0007aea <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c0007ae1:	83 c4 08             	add    esp,0x8
c0007ae4:	5b                   	pop    ebx
c0007ae5:	e9 ec fd ff ff       	jmp    c00078d6 <KiFlushSymlinkChanges()>
c0007aea:	83 c4 08             	add    esp,0x8
c0007aed:	5b                   	pop    ebx
c0007aee:	c3                   	ret    

c0007aef <KeInitialiseSymlinks()>:
c0007aef:	57                   	push   edi
c0007af0:	56                   	push   esi
c0007af1:	53                   	push   ebx
c0007af2:	81 ec 14 01 00 00    	sub    esp,0x114
c0007af8:	68 00 20 00 00       	push   0x2000
c0007afd:	6a 00                	push   0x0
c0007aff:	68 00 f3 02 c0       	push   0xc002f300
c0007b04:	c7 05 00 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031300,0x0
c0007b0e:	c7 05 c0 ee 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eec0,0x0
c0007b18:	e8 d3 89 ff ff       	call   c00004f0 <memset>
c0007b1d:	59                   	pop    ecx
c0007b1e:	5b                   	pop    ebx
c0007b1f:	6a 00                	push   0x0
c0007b21:	68 db 79 00 c0       	push   0xc00079db
c0007b26:	e8 cd 5a 00 00       	call   c000d5f8 <KeRegisterAtexit(void (*)(void*), void*)>
c0007b2b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0007b32:	e8 21 80 00 00       	call   c000fb58 <malloc>
c0007b37:	83 c4 0c             	add    esp,0xc
c0007b3a:	ff 35 58 23 03 c0    	push   DWORD PTR ds:0xc0032358
c0007b40:	68 84 7e 02 c0       	push   0xc0027e84
c0007b45:	50                   	push   eax
c0007b46:	89 c3                	mov    ebx,eax
c0007b48:	e8 13 0b 00 00       	call   c0008660 <File::File(char const*, Process*)>
c0007b4d:	83 c4 10             	add    esp,0x10
c0007b50:	85 db                	test   ebx,ebx
c0007b52:	75 10                	jne    c0007b64 <KeInitialiseSymlinks()+0x75>
c0007b54:	83 ec 0c             	sub    esp,0xc
c0007b57:	68 13 7f 02 c0       	push   0xc0027f13
c0007b5c:	e8 4b 84 00 00       	call   c000ffac <KePanic(char const*)>
c0007b61:	83 c4 10             	add    esp,0x10
c0007b64:	83 ec 0c             	sub    esp,0xc
c0007b67:	53                   	push   ebx
c0007b68:	e8 d5 0d 00 00       	call   c0008942 <File::exists()>
c0007b6d:	83 c4 10             	add    esp,0x10
c0007b70:	84 c0                	test   al,al
c0007b72:	75 3a                	jne    c0007bae <KeInitialiseSymlinks()+0xbf>
c0007b74:	52                   	push   edx
c0007b75:	52                   	push   edx
c0007b76:	6a 12                	push   0x12
c0007b78:	53                   	push   ebx
c0007b79:	e8 00 0b 00 00       	call   c000867e <File::open(FileOpenMode)>
c0007b7e:	83 c4 10             	add    esp,0x10
c0007b81:	85 c0                	test   eax,eax
c0007b83:	74 10                	je     c0007b95 <KeInitialiseSymlinks()+0xa6>
c0007b85:	83 ec 0c             	sub    esp,0xc
c0007b88:	68 30 7f 02 c0       	push   0xc0027f30
c0007b8d:	e8 1a 84 00 00       	call   c000ffac <KePanic(char const*)>
c0007b92:	83 c4 10             	add    esp,0x10
c0007b95:	83 ec 0c             	sub    esp,0xc
c0007b98:	53                   	push   ebx
c0007b99:	e8 3e 0b 00 00       	call   c00086dc <File::close()>
c0007b9e:	83 c4 10             	add    esp,0x10
c0007ba1:	85 db                	test   ebx,ebx
c0007ba3:	0f 84 9e 00 00 00    	je     c0007c47 <KeInitialiseSymlinks()+0x158>
c0007ba9:	e9 8d 00 00 00       	jmp    c0007c3b <KeInitialiseSymlinks()+0x14c>
c0007bae:	50                   	push   eax
c0007baf:	50                   	push   eax
c0007bb0:	6a 01                	push   0x1
c0007bb2:	53                   	push   ebx
c0007bb3:	e8 c6 0a 00 00       	call   c000867e <File::open(FileOpenMode)>
c0007bb8:	83 c4 10             	add    esp,0x10
c0007bbb:	85 c0                	test   eax,eax
c0007bbd:	74 10                	je     c0007bcf <KeInitialiseSymlinks()+0xe0>
c0007bbf:	83 ec 0c             	sub    esp,0xc
c0007bc2:	68 4d 7f 02 c0       	push   0xc0027f4d
c0007bc7:	e8 e0 83 00 00       	call   c000ffac <KePanic(char const*)>
c0007bcc:	83 c4 10             	add    esp,0x10
c0007bcf:	ff 05 00 13 03 c0    	inc    DWORD PTR ds:0xc0031300
c0007bd5:	83 ec 0c             	sub    esp,0xc
c0007bd8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0007bdc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007bde:	57                   	push   edi
c0007bdf:	8d 74 24 20          	lea    esi,[esp+0x20]
c0007be3:	56                   	push   esi
c0007be4:	6a 00                	push   0x0
c0007be6:	68 00 01 00 00       	push   0x100
c0007beb:	53                   	push   ebx
c0007bec:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007bef:	83 c4 20             	add    esp,0x20
c0007bf2:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007bfa:	75 33                	jne    c0007c2f <KeInitialiseSymlinks()+0x140>
c0007bfc:	83 ec 0c             	sub    esp,0xc
c0007bff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007c01:	57                   	push   edi
c0007c02:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007c06:	52                   	push   edx
c0007c07:	6a 00                	push   0x0
c0007c09:	6a 08                	push   0x8
c0007c0b:	53                   	push   ebx
c0007c0c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007c17:	75 16                	jne    c0007c2f <KeInitialiseSymlinks()+0x140>
c0007c19:	89 f0                	mov    eax,esi
c0007c1b:	e8 c0 fd ff ff       	call   c00079e0 <KiGetSymlinkHash(char const*)>
c0007c20:	ba 01 00 00 00       	mov    edx,0x1
c0007c25:	0f b7 c0             	movzx  eax,ax
c0007c28:	e8 79 fc ff ff       	call   c00078a6 <KiSetHashInTable(unsigned short, bool)>
c0007c2d:	eb a0                	jmp    c0007bcf <KeInitialiseSymlinks()+0xe0>
c0007c2f:	83 ec 0c             	sub    esp,0xc
c0007c32:	53                   	push   ebx
c0007c33:	e8 a4 0a 00 00       	call   c00086dc <File::close()>
c0007c38:	83 c4 10             	add    esp,0x10
c0007c3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007c3d:	83 ec 0c             	sub    esp,0xc
c0007c40:	53                   	push   ebx
c0007c41:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007c44:	83 c4 10             	add    esp,0x10
c0007c47:	81 c4 10 01 00 00    	add    esp,0x110
c0007c4d:	5b                   	pop    ebx
c0007c4e:	5e                   	pop    esi
c0007c4f:	5f                   	pop    edi
c0007c50:	c3                   	ret    

c0007c51 <KiIsSymlinkRegistered(char const*)>:
c0007c51:	55                   	push   ebp
c0007c52:	57                   	push   edi
c0007c53:	56                   	push   esi
c0007c54:	53                   	push   ebx
c0007c55:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007c5b:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0007c62:	89 f0                	mov    eax,esi
c0007c64:	e8 77 fd ff ff       	call   c00079e0 <KiGetSymlinkHash(char const*)>
c0007c69:	0f b7 c0             	movzx  eax,ax
c0007c6c:	e8 1b fc ff ff       	call   c000788c <KiIsHashInTable(unsigned short)>
c0007c71:	31 d2                	xor    edx,edx
c0007c73:	88 c1                	mov    cl,al
c0007c75:	31 c0                	xor    eax,eax
c0007c77:	84 c9                	test   cl,cl
c0007c79:	0f 84 31 01 00 00    	je     c0007db0 <KiIsSymlinkRegistered(char const*)+0x15f>
c0007c7f:	31 db                	xor    ebx,ebx
c0007c81:	39 1d c0 ee 02 c0    	cmp    DWORD PTR ds:0xc002eec0,ebx
c0007c87:	7e 30                	jle    c0007cb9 <KiIsSymlinkRegistered(char const*)+0x68>
c0007c89:	89 d8                	mov    eax,ebx
c0007c8b:	c1 e0 08             	shl    eax,0x8
c0007c8e:	51                   	push   ecx
c0007c8f:	05 00 ef 02 c0       	add    eax,0xc002ef00
c0007c94:	51                   	push   ecx
c0007c95:	50                   	push   eax
c0007c96:	56                   	push   esi
c0007c97:	e8 e4 8a ff ff       	call   c0000780 <strcmp>
c0007c9c:	83 c4 10             	add    esp,0x10
c0007c9f:	85 c0                	test   eax,eax
c0007ca1:	75 13                	jne    c0007cb6 <KiIsSymlinkRegistered(char const*)+0x65>
c0007ca3:	8b 04 dd e0 ee 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd1120]
c0007caa:	8b 14 dd e4 ee 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd111c]
c0007cb1:	e9 fa 00 00 00       	jmp    c0007db0 <KiIsSymlinkRegistered(char const*)+0x15f>
c0007cb6:	43                   	inc    ebx
c0007cb7:	eb c8                	jmp    c0007c81 <KiIsSymlinkRegistered(char const*)+0x30>
c0007cb9:	83 ec 0c             	sub    esp,0xc
c0007cbc:	68 14 01 00 00       	push   0x114
c0007cc1:	e8 92 7e 00 00       	call   c000fb58 <malloc>
c0007cc6:	83 c4 0c             	add    esp,0xc
c0007cc9:	ff 35 58 23 03 c0    	push   DWORD PTR ds:0xc0032358
c0007ccf:	68 84 7e 02 c0       	push   0xc0027e84
c0007cd4:	50                   	push   eax
c0007cd5:	89 c3                	mov    ebx,eax
c0007cd7:	e8 84 09 00 00       	call   c0008660 <File::File(char const*, Process*)>
c0007cdc:	83 c4 10             	add    esp,0x10
c0007cdf:	85 db                	test   ebx,ebx
c0007ce1:	75 12                	jne    c0007cf5 <KiIsSymlinkRegistered(char const*)+0xa4>
c0007ce3:	83 ec 0c             	sub    esp,0xc
c0007ce6:	68 68 7f 02 c0       	push   0xc0027f68
c0007ceb:	e8 bc 82 00 00       	call   c000ffac <KePanic(char const*)>
c0007cf0:	83 c4 10             	add    esp,0x10
c0007cf3:	eb 10                	jmp    c0007d05 <KiIsSymlinkRegistered(char const*)+0xb4>
c0007cf5:	83 ec 0c             	sub    esp,0xc
c0007cf8:	53                   	push   ebx
c0007cf9:	e8 44 0c 00 00       	call   c0008942 <File::exists()>
c0007cfe:	83 c4 10             	add    esp,0x10
c0007d01:	84 c0                	test   al,al
c0007d03:	74 de                	je     c0007ce3 <KiIsSymlinkRegistered(char const*)+0x92>
c0007d05:	52                   	push   edx
c0007d06:	52                   	push   edx
c0007d07:	6a 01                	push   0x1
c0007d09:	53                   	push   ebx
c0007d0a:	e8 6f 09 00 00       	call   c000867e <File::open(FileOpenMode)>
c0007d0f:	83 c4 10             	add    esp,0x10
c0007d12:	85 c0                	test   eax,eax
c0007d14:	74 10                	je     c0007d26 <KiIsSymlinkRegistered(char const*)+0xd5>
c0007d16:	83 ec 0c             	sub    esp,0xc
c0007d19:	68 83 7f 02 c0       	push   0xc0027f83
c0007d1e:	e8 89 82 00 00       	call   c000ffac <KePanic(char const*)>
c0007d23:	83 c4 10             	add    esp,0x10
c0007d26:	83 ec 0c             	sub    esp,0xc
c0007d29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007d2b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0007d2f:	55                   	push   ebp
c0007d30:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0007d34:	57                   	push   edi
c0007d35:	6a 00                	push   0x0
c0007d37:	68 00 01 00 00       	push   0x100
c0007d3c:	53                   	push   ebx
c0007d3d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007d40:	83 c4 20             	add    esp,0x20
c0007d43:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007d4b:	75 4b                	jne    c0007d98 <KiIsSymlinkRegistered(char const*)+0x147>
c0007d4d:	83 ec 0c             	sub    esp,0xc
c0007d50:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007d52:	55                   	push   ebp
c0007d53:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007d57:	52                   	push   edx
c0007d58:	6a 00                	push   0x0
c0007d5a:	6a 08                	push   0x8
c0007d5c:	53                   	push   ebx
c0007d5d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007d60:	83 c4 20             	add    esp,0x20
c0007d63:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007d68:	75 2e                	jne    c0007d98 <KiIsSymlinkRegistered(char const*)+0x147>
c0007d6a:	50                   	push   eax
c0007d6b:	50                   	push   eax
c0007d6c:	57                   	push   edi
c0007d6d:	56                   	push   esi
c0007d6e:	e8 0d 8a ff ff       	call   c0000780 <strcmp>
c0007d73:	83 c4 10             	add    esp,0x10
c0007d76:	85 c0                	test   eax,eax
c0007d78:	75 ac                	jne    c0007d26 <KiIsSymlinkRegistered(char const*)+0xd5>
c0007d7a:	83 ec 0c             	sub    esp,0xc
c0007d7d:	53                   	push   ebx
c0007d7e:	e8 59 09 00 00       	call   c00086dc <File::close()>
c0007d83:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007d85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007d88:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007d8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d8f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007d93:	83 c4 10             	add    esp,0x10
c0007d96:	eb 18                	jmp    c0007db0 <KiIsSymlinkRegistered(char const*)+0x15f>
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	53                   	push   ebx
c0007d9c:	e8 3b 09 00 00       	call   c00086dc <File::close()>
c0007da1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007da3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007da6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007da9:	83 c4 10             	add    esp,0x10
c0007dac:	31 c0                	xor    eax,eax
c0007dae:	31 d2                	xor    edx,edx
c0007db0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0007db6:	5b                   	pop    ebx
c0007db7:	5e                   	pop    esi
c0007db8:	5f                   	pop    edi
c0007db9:	5d                   	pop    ebp
c0007dba:	c3                   	ret    

c0007dbb <KeDereferenceSymlink(char const*, char*)>:
c0007dbb:	55                   	push   ebp
c0007dbc:	57                   	push   edi
c0007dbd:	56                   	push   esi
c0007dbe:	53                   	push   ebx
c0007dbf:	83 ec 48             	sub    esp,0x48
c0007dc2:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0007dc6:	56                   	push   esi
c0007dc7:	e8 85 fe ff ff       	call   c0007c51 <KiIsSymlinkRegistered(char const*)>
c0007dcc:	83 c4 10             	add    esp,0x10
c0007dcf:	89 c7                	mov    edi,eax
c0007dd1:	89 d0                	mov    eax,edx
c0007dd3:	09 f8                	or     eax,edi
c0007dd5:	75 07                	jne    c0007dde <KeDereferenceSymlink(char const*, char*)+0x23>
c0007dd7:	31 c0                	xor    eax,eax
c0007dd9:	e9 7c 01 00 00       	jmp    c0007f5a <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007dde:	83 ec 0c             	sub    esp,0xc
c0007de1:	89 d5                	mov    ebp,edx
c0007de3:	68 14 01 00 00       	push   0x114
c0007de8:	e8 6b 7d 00 00       	call   c000fb58 <malloc>
c0007ded:	83 c4 0c             	add    esp,0xc
c0007df0:	ff 35 58 23 03 c0    	push   DWORD PTR ds:0xc0032358
c0007df6:	56                   	push   esi
c0007df7:	50                   	push   eax
c0007df8:	89 c3                	mov    ebx,eax
c0007dfa:	e8 61 08 00 00       	call   c0008660 <File::File(char const*, Process*)>
c0007dff:	83 c4 10             	add    esp,0x10
c0007e02:	85 db                	test   ebx,ebx
c0007e04:	0f 84 32 01 00 00    	je     c0007f3c <KeDereferenceSymlink(char const*, char*)+0x181>
c0007e0a:	56                   	push   esi
c0007e0b:	56                   	push   esi
c0007e0c:	6a 01                	push   0x1
c0007e0e:	53                   	push   ebx
c0007e0f:	e8 6a 08 00 00       	call   c000867e <File::open(FileOpenMode)>
c0007e14:	83 c4 10             	add    esp,0x10
c0007e17:	85 c0                	test   eax,eax
c0007e19:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007e1b:	74 09                	je     c0007e26 <KeDereferenceSymlink(char const*, char*)+0x6b>
c0007e1d:	83 ec 0c             	sub    esp,0xc
c0007e20:	53                   	push   ebx
c0007e21:	e9 10 01 00 00       	jmp    c0007f36 <KeDereferenceSymlink(char const*, char*)+0x17b>
c0007e26:	83 ec 0c             	sub    esp,0xc
c0007e29:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007e2d:	56                   	push   esi
c0007e2e:	8d 54 24 37          	lea    edx,[esp+0x37]
c0007e32:	52                   	push   edx
c0007e33:	6a 00                	push   0x0
c0007e35:	6a 08                	push   0x8
c0007e37:	53                   	push   ebx
c0007e38:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007e3b:	83 c4 20             	add    esp,0x20
c0007e3e:	85 c0                	test   eax,eax
c0007e40:	0f 85 e2 00 00 00    	jne    c0007f28 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007e46:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007e4b:	0f 85 d7 00 00 00    	jne    c0007f28 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007e51:	83 ec 0c             	sub    esp,0xc
c0007e54:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007e56:	56                   	push   esi
c0007e57:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007e5b:	52                   	push   edx
c0007e5c:	6a 00                	push   0x0
c0007e5e:	6a 08                	push   0x8
c0007e60:	53                   	push   ebx
c0007e61:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007e64:	83 c4 20             	add    esp,0x20
c0007e67:	85 c0                	test   eax,eax
c0007e69:	0f 85 b9 00 00 00    	jne    c0007f28 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007e6f:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007e74:	0f 85 ae 00 00 00    	jne    c0007f28 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007e7a:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0007e7e:	0f 85 53 ff ff ff    	jne    c0007dd7 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007e84:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0007e88:	0f 85 49 ff ff ff    	jne    c0007dd7 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007e8e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0007e96:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0007e9e:	51                   	push   ecx
c0007e9f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0007ea3:	50                   	push   eax
c0007ea4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0007ea8:	50                   	push   eax
c0007ea9:	53                   	push   ebx
c0007eaa:	e8 d1 0a 00 00       	call   c0008980 <File::stat(unsigned long long*, bool*)>
c0007eaf:	83 c4 10             	add    esp,0x10
c0007eb2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0007eb7:	75 6f                	jne    c0007f28 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007eb9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ebd:	31 c9                	xor    ecx,ecx
c0007ebf:	bf 0f 00 00 00       	mov    edi,0xf
c0007ec4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007ec8:	39 c7                	cmp    edi,eax
c0007eca:	89 cf                	mov    edi,ecx
c0007ecc:	19 d7                	sbb    edi,edx
c0007ece:	73 58                	jae    c0007f28 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007ed0:	83 c0 f0             	add    eax,0xfffffff0
c0007ed3:	bf ff 00 00 00       	mov    edi,0xff
c0007ed8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007edc:	83 d2 ff             	adc    edx,0xffffffff
c0007edf:	39 c7                	cmp    edi,eax
c0007ee1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007ee5:	19 d1                	sbb    ecx,edx
c0007ee7:	72 53                	jb     c0007f3c <KeDereferenceSymlink(char const*, char*)+0x181>
c0007ee9:	40                   	inc    eax
c0007eea:	52                   	push   edx
c0007eeb:	50                   	push   eax
c0007eec:	6a 00                	push   0x0
c0007eee:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0007ef2:	e8 f9 85 ff ff       	call   c00004f0 <memset>
c0007ef7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ef9:	89 34 24             	mov    DWORD PTR [esp],esi
c0007efc:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0007f00:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007f04:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007f08:	53                   	push   ebx
c0007f09:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007f0c:	83 c4 20             	add    esp,0x20
c0007f0f:	85 c0                	test   eax,eax
c0007f11:	75 15                	jne    c0007f28 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007f13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f17:	89 c7                	mov    edi,eax
c0007f19:	c1 ff 1f             	sar    edi,0x1f
c0007f1c:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007f20:	75 06                	jne    c0007f28 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007f22:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007f26:	74 19                	je     c0007f41 <KeDereferenceSymlink(char const*, char*)+0x186>
c0007f28:	83 ec 0c             	sub    esp,0xc
c0007f2b:	53                   	push   ebx
c0007f2c:	e8 ab 07 00 00       	call   c00086dc <File::close()>
c0007f31:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007f33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007f36:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007f39:	83 c4 10             	add    esp,0x10
c0007f3c:	83 c8 ff             	or     eax,0xffffffff
c0007f3f:	eb 19                	jmp    c0007f5a <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007f41:	83 ec 0c             	sub    esp,0xc
c0007f44:	53                   	push   ebx
c0007f45:	e8 92 07 00 00       	call   c00086dc <File::close()>
c0007f4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007f4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007f4f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007f52:	83 c4 10             	add    esp,0x10
c0007f55:	b8 01 00 00 00       	mov    eax,0x1
c0007f5a:	83 c4 3c             	add    esp,0x3c
c0007f5d:	5b                   	pop    ebx
c0007f5e:	5e                   	pop    esi
c0007f5f:	5f                   	pop    edi
c0007f60:	5d                   	pop    ebp
c0007f61:	c3                   	ret    

c0007f62 <KeCreateSymlink(char const*, char const*)>:
c0007f62:	55                   	push   ebp
c0007f63:	57                   	push   edi
c0007f64:	56                   	push   esi
c0007f65:	53                   	push   ebx
c0007f66:	83 ec 38             	sub    esp,0x38
c0007f69:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007f6d:	68 14 01 00 00       	push   0x114
c0007f72:	e8 e1 7b 00 00       	call   c000fb58 <malloc>
c0007f77:	6a 00                	push   0x0
c0007f79:	ff 35 58 23 03 c0    	push   DWORD PTR ds:0xc0032358
c0007f7f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007f83:	89 c3                	mov    ebx,eax
c0007f85:	50                   	push   eax
c0007f86:	e8 d7 05 00 00       	call   c0008562 <File::File(char const*, Process*, bool)>
c0007f8b:	83 c4 20             	add    esp,0x20
c0007f8e:	85 db                	test   ebx,ebx
c0007f90:	b8 01 00 00 00       	mov    eax,0x1
c0007f95:	0f 84 fb 00 00 00    	je     c0008096 <KeCreateSymlink(char const*, char const*)+0x134>
c0007f9b:	52                   	push   edx
c0007f9c:	52                   	push   edx
c0007f9d:	6a 12                	push   0x12
c0007f9f:	53                   	push   ebx
c0007fa0:	e8 d9 06 00 00       	call   c000867e <File::open(FileOpenMode)>
c0007fa5:	83 c4 10             	add    esp,0x10
c0007fa8:	85 c0                	test   eax,eax
c0007faa:	74 0b                	je     c0007fb7 <KeCreateSymlink(char const*, char const*)+0x55>
c0007fac:	83 ec 0c             	sub    esp,0xc
c0007faf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007fb1:	53                   	push   ebx
c0007fb2:	e9 d4 00 00 00       	jmp    c000808b <KeCreateSymlink(char const*, char const*)+0x129>
c0007fb7:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007fbb:	be 9e 7f 02 c0       	mov    esi,0xc0027f9e
c0007fc0:	b9 09 00 00 00       	mov    ecx,0x9
c0007fc5:	fc                   	cld    
c0007fc6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007fc8:	83 ec 0c             	sub    esp,0xc
c0007fcb:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007fcf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007fd1:	56                   	push   esi
c0007fd2:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007fd6:	52                   	push   edx
c0007fd7:	6a 00                	push   0x0
c0007fd9:	6a 08                	push   0x8
c0007fdb:	53                   	push   ebx
c0007fdc:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007fdf:	83 c4 20             	add    esp,0x20
c0007fe2:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007fe7:	0f 85 90 00 00 00    	jne    c000807d <KeCreateSymlink(char const*, char const*)+0x11b>
c0007fed:	85 c0                	test   eax,eax
c0007fef:	0f 85 88 00 00 00    	jne    c000807d <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ff5:	e8 07 fa ff ff       	call   c0007a01 <KiCreateSymlinkID()>
c0007ffa:	83 ec 0c             	sub    esp,0xc
c0007ffd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008001:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008005:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008007:	56                   	push   esi
c0008008:	8d 54 24 18          	lea    edx,[esp+0x18]
c000800c:	52                   	push   edx
c000800d:	6a 00                	push   0x0
c000800f:	6a 08                	push   0x8
c0008011:	53                   	push   ebx
c0008012:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0008015:	83 c4 20             	add    esp,0x20
c0008018:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000801d:	75 5e                	jne    c000807d <KeCreateSymlink(char const*, char const*)+0x11b>
c000801f:	85 c0                	test   eax,eax
c0008021:	75 5a                	jne    c000807d <KeCreateSymlink(char const*, char const*)+0x11b>
c0008023:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008025:	83 ec 0c             	sub    esp,0xc
c0008028:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000802b:	55                   	push   ebp
c000802c:	e8 4f 85 ff ff       	call   c0000580 <strlen>
c0008031:	31 d2                	xor    edx,edx
c0008033:	89 34 24             	mov    DWORD PTR [esp],esi
c0008036:	55                   	push   ebp
c0008037:	52                   	push   edx
c0008038:	50                   	push   eax
c0008039:	53                   	push   ebx
c000803a:	ff d7                	call   edi
c000803c:	83 c4 14             	add    esp,0x14
c000803f:	55                   	push   ebp
c0008040:	89 c6                	mov    esi,eax
c0008042:	e8 39 85 ff ff       	call   c0000580 <strlen>
c0008047:	83 c4 10             	add    esp,0x10
c000804a:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000804e:	75 2d                	jne    c000807d <KeCreateSymlink(char const*, char const*)+0x11b>
c0008050:	85 f6                	test   esi,esi
c0008052:	75 29                	jne    c000807d <KeCreateSymlink(char const*, char const*)+0x11b>
c0008054:	50                   	push   eax
c0008055:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008059:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000805d:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0008061:	e8 06 fa ff ff       	call   c0007a6c <KeRegisterSymlink(char const*, unsigned long long)>
c0008066:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008069:	e8 6e 06 00 00       	call   c00086dc <File::close()>
c000806e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008070:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008073:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008076:	83 c4 10             	add    esp,0x10
c0008079:	31 c0                	xor    eax,eax
c000807b:	eb 19                	jmp    c0008096 <KeCreateSymlink(char const*, char const*)+0x134>
c000807d:	83 ec 0c             	sub    esp,0xc
c0008080:	53                   	push   ebx
c0008081:	e8 56 06 00 00       	call   c00086dc <File::close()>
c0008086:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008088:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000808b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000808e:	83 c4 10             	add    esp,0x10
c0008091:	b8 01 00 00 00       	mov    eax,0x1
c0008096:	83 c4 2c             	add    esp,0x2c
c0008099:	5b                   	pop    ebx
c000809a:	5e                   	pop    esi
c000809b:	5f                   	pop    edi
c000809c:	5d                   	pop    ebp
c000809d:	c3                   	ret    

c000809e <File::read(unsigned long long, void*, int*)>:
c000809e:	53                   	push   ebx
c000809f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080a3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00080a7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00080ae:	83 f8 19             	cmp    eax,0x19
c00080b1:	77 35                	ja     c00080e8 <File::read(unsigned long long, void*, int*)+0x4a>
c00080b3:	8b 04 85 e0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce520]
c00080ba:	85 c0                	test   eax,eax
c00080bc:	74 2a                	je     c00080e8 <File::read(unsigned long long, void*, int*)+0x4a>
c00080be:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00080c4:	85 c0                	test   eax,eax
c00080c6:	74 20                	je     c00080e8 <File::read(unsigned long long, void*, int*)+0x4a>
c00080c8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00080cc:	74 21                	je     c00080ef <File::read(unsigned long long, void*, int*)+0x51>
c00080ce:	8b 08                	mov    ecx,DWORD PTR [eax]
c00080d0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00080d4:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00080da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00080de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00080e2:	5b                   	pop    ebx
c00080e3:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00080e6:	ff e0                	jmp    eax
c00080e8:	b8 0b 00 00 00       	mov    eax,0xb
c00080ed:	eb 05                	jmp    c00080f4 <File::read(unsigned long long, void*, int*)+0x56>
c00080ef:	b8 05 00 00 00       	mov    eax,0x5
c00080f4:	5b                   	pop    ebx
c00080f5:	c3                   	ret    

c00080f6 <File::write(unsigned long long, void*, int*)>:
c00080f6:	53                   	push   ebx
c00080f7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080fb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00080ff:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0008106:	83 f8 19             	cmp    eax,0x19
c0008109:	77 35                	ja     c0008140 <File::write(unsigned long long, void*, int*)+0x4a>
c000810b:	8b 04 85 e0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce520]
c0008112:	85 c0                	test   eax,eax
c0008114:	74 2a                	je     c0008140 <File::write(unsigned long long, void*, int*)+0x4a>
c0008116:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000811c:	85 c0                	test   eax,eax
c000811e:	74 20                	je     c0008140 <File::write(unsigned long long, void*, int*)+0x4a>
c0008120:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008124:	74 21                	je     c0008147 <File::write(unsigned long long, void*, int*)+0x51>
c0008126:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008128:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000812c:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0008132:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008136:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000813a:	5b                   	pop    ebx
c000813b:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000813e:	ff e0                	jmp    eax
c0008140:	b8 0b 00 00 00       	mov    eax,0xb
c0008145:	eb 05                	jmp    c000814c <File::write(unsigned long long, void*, int*)+0x56>
c0008147:	b8 05 00 00 00       	mov    eax,0x5
c000814c:	5b                   	pop    ebx
c000814d:	c3                   	ret    

c000814e <Directory::read(unsigned long long, void*, int*)>:
c000814e:	53                   	push   ebx
c000814f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008153:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008157:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000815e:	83 f8 19             	cmp    eax,0x19
c0008161:	77 35                	ja     c0008198 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0008163:	8b 04 85 e0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce520]
c000816a:	85 c0                	test   eax,eax
c000816c:	74 2a                	je     c0008198 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000816e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008174:	85 c0                	test   eax,eax
c0008176:	74 20                	je     c0008198 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0008178:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000817c:	74 21                	je     c000819f <Directory::read(unsigned long long, void*, int*)+0x51>
c000817e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008180:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008184:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000818a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000818e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008192:	5b                   	pop    ebx
c0008193:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0008196:	ff e0                	jmp    eax
c0008198:	b8 0b 00 00 00       	mov    eax,0xb
c000819d:	eb 05                	jmp    c00081a4 <Directory::read(unsigned long long, void*, int*)+0x56>
c000819f:	b8 05 00 00 00       	mov    eax,0x5
c00081a4:	5b                   	pop    ebx
c00081a5:	c3                   	ret    

c00081a6 <Directory::write(unsigned long long, void*, int*)>:
c00081a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081aa:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00081b1:	b8 0b 00 00 00       	mov    eax,0xb
c00081b6:	83 fa 19             	cmp    edx,0x19
c00081b9:	77 18                	ja     c00081d3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00081bb:	8b 14 95 e0 1a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffce520]
c00081c2:	85 d2                	test   edx,edx
c00081c4:	74 0d                	je     c00081d3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00081c6:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c00081cd:	19 c0                	sbb    eax,eax
c00081cf:	83 e0 0a             	and    eax,0xa
c00081d2:	40                   	inc    eax
c00081d3:	c3                   	ret    

c00081d4 <File::isAtty()>:
c00081d4:	31 c0                	xor    eax,eax
c00081d6:	c3                   	ret    
c00081d7:	90                   	nop

c00081d8 <Directory::isAtty()>:
c00081d8:	31 c0                	xor    eax,eax
c00081da:	c3                   	ret    
c00081db:	90                   	nop

c00081dc <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00081dc:	b8 0a 00 00 00       	mov    eax,0xa
c00081e1:	c3                   	ret    

c00081e2 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00081e2:	b8 0a 00 00 00       	mov    eax,0xa
c00081e7:	c3                   	ret    

c00081e8 <Filesystem::allocateSwapfile(char const*, int)>:
c00081e8:	31 c0                	xor    eax,eax
c00081ea:	31 d2                	xor    edx,edx
c00081ec:	c3                   	ret    
c00081ed:	90                   	nop

c00081ee <File::~File()>:
c00081ee:	83 ec 0c             	sub    esp,0xc
c00081f1:	ba 74 80 02 c0       	mov    edx,0xc0028074
c00081f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081fa:	89 10                	mov    DWORD PTR [eax],edx
c00081fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008200:	83 ec 0c             	sub    esp,0xc
c0008203:	50                   	push   eax
c0008204:	e8 7d b0 00 00       	call   c0013286 <UnixFile::~UnixFile()>
c0008209:	83 c4 10             	add    esp,0x10
c000820c:	90                   	nop
c000820d:	83 c4 0c             	add    esp,0xc
c0008210:	c3                   	ret    
c0008211:	90                   	nop

c0008212 <File::~File()>:
c0008212:	83 ec 0c             	sub    esp,0xc
c0008215:	83 ec 0c             	sub    esp,0xc
c0008218:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000821c:	e8 cd ff ff ff       	call   c00081ee <File::~File()>
c0008221:	83 c4 10             	add    esp,0x10
c0008224:	83 ec 08             	sub    esp,0x8
c0008227:	68 14 01 00 00       	push   0x114
c000822c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008230:	e8 2b 55 00 00       	call   c000d760 <operator delete(void*, unsigned long)>
c0008235:	83 c4 10             	add    esp,0x10
c0008238:	83 c4 0c             	add    esp,0xc
c000823b:	c3                   	ret    

c000823c <Directory::~Directory()>:
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	ba 90 80 02 c0       	mov    edx,0xc0028090
c0008244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008248:	89 10                	mov    DWORD PTR [eax],edx
c000824a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000824e:	83 ec 0c             	sub    esp,0xc
c0008251:	50                   	push   eax
c0008252:	e8 2f b0 00 00       	call   c0013286 <UnixFile::~UnixFile()>
c0008257:	83 c4 10             	add    esp,0x10
c000825a:	90                   	nop
c000825b:	83 c4 0c             	add    esp,0xc
c000825e:	c3                   	ret    
c000825f:	90                   	nop

c0008260 <Directory::~Directory()>:
c0008260:	83 ec 0c             	sub    esp,0xc
c0008263:	83 ec 0c             	sub    esp,0xc
c0008266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000826a:	e8 cd ff ff ff       	call   c000823c <Directory::~Directory()>
c000826f:	83 c4 10             	add    esp,0x10
c0008272:	83 ec 08             	sub    esp,0x8
c0008275:	68 14 01 00 00       	push   0x114
c000827a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827e:	e8 dd 54 00 00       	call   c000d760 <operator delete(void*, unsigned long)>
c0008283:	83 c4 10             	add    esp,0x10
c0008286:	83 c4 0c             	add    esp,0xc
c0008289:	c3                   	ret    

c000828a <Filesystem::Filesystem()>:
c000828a:	ba 08 80 02 c0       	mov    edx,0xc0028008
c000828f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008293:	89 10                	mov    DWORD PTR [eax],edx
c0008295:	8b 15 04 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031304
c000829b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000829f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00082a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082a6:	a3 04 13 03 c0       	mov    ds:0xc0031304,eax
c00082ab:	90                   	nop
c00082ac:	c3                   	ret    
c00082ad:	90                   	nop

c00082ae <Filesystem::~Filesystem()>:
c00082ae:	ba 08 80 02 c0       	mov    edx,0xc0028008
c00082b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082b7:	89 10                	mov    DWORD PTR [eax],edx
c00082b9:	90                   	nop
c00082ba:	c3                   	ret    
c00082bb:	90                   	nop

c00082bc <Filesystem::~Filesystem()>:
c00082bc:	83 ec 0c             	sub    esp,0xc
c00082bf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00082c3:	e8 e6 ff ff ff       	call   c00082ae <Filesystem::~Filesystem()>
c00082c8:	83 c4 04             	add    esp,0x4
c00082cb:	83 ec 08             	sub    esp,0x8
c00082ce:	6a 08                	push   0x8
c00082d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082d4:	e8 87 54 00 00       	call   c000d760 <operator delete(void*, unsigned long)>
c00082d9:	83 c4 10             	add    esp,0x10
c00082dc:	83 c4 0c             	add    esp,0xc
c00082df:	c3                   	ret    

c00082e0 <Fs::getcwd(Process*, char*, int)>:
c00082e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00082e4:	31 c0                	xor    eax,eax
c00082e6:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00082ea:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00082ed:	7d 15                	jge    c0008304 <Fs::getcwd(Process*, char*, int)+0x24>
c00082ef:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00082f3:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00082fa:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00082fd:	84 c9                	test   cl,cl
c00082ff:	74 06                	je     c0008307 <Fs::getcwd(Process*, char*, int)+0x27>
c0008301:	40                   	inc    eax
c0008302:	eb e2                	jmp    c00082e6 <Fs::getcwd(Process*, char*, int)+0x6>
c0008304:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0008307:	31 c0                	xor    eax,eax
c0008309:	c3                   	ret    

c000830a <Fs::initVFS()>:
c000830a:	83 ec 18             	sub    esp,0x18
c000830d:	6a 08                	push   0x8
c000830f:	e8 44 78 00 00       	call   c000fb58 <malloc>
c0008314:	89 04 24             	mov    DWORD PTR [esp],eax
c0008317:	e8 a8 49 01 00       	call   c001ccc4 <FAT::FAT()>
c000831c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0008323:	e8 30 78 00 00       	call   c000fb58 <malloc>
c0008328:	89 04 24             	mov    DWORD PTR [esp],eax
c000832b:	e8 c2 58 01 00       	call   c001dbf2 <ISO9660::ISO9660()>
c0008330:	83 c4 1c             	add    esp,0x1c
c0008333:	c3                   	ret    

c0008334 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0008334:	55                   	push   ebp
c0008335:	57                   	push   edi
c0008336:	56                   	push   esi
c0008337:	53                   	push   ebx
c0008338:	81 ec 20 04 00 00    	sub    esp,0x420
c000833e:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c0008345:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c000834c:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c0008353:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000835a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000835e:	68 00 04 00 00       	push   0x400
c0008363:	6a 00                	push   0x0
c0008365:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0008369:	57                   	push   edi
c000836a:	e8 81 81 ff ff       	call   c00004f0 <memset>
c000836f:	83 c4 10             	add    esp,0x10
c0008372:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c0008376:	75 0b                	jne    c0008383 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c0008378:	50                   	push   eax
c0008379:	50                   	push   eax
c000837a:	56                   	push   esi
c000837b:	57                   	push   edi
c000837c:	e8 cf 82 ff ff       	call   c0000650 <strcpy>
c0008381:	eb 45                	jmp    c00083c8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c0008383:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008386:	83 f8 2f             	cmp    eax,0x2f
c0008389:	74 05                	je     c0008390 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c000838b:	83 f8 5c             	cmp    eax,0x5c
c000838e:	75 19                	jne    c00083a9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c0008390:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0008393:	3c 60                	cmp    al,0x60
c0008395:	7e 03                	jle    c000839a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c0008397:	83 e8 20             	sub    eax,0x20
c000839a:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000839e:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c00083a5:	50                   	push   eax
c00083a6:	50                   	push   eax
c00083a7:	eb 18                	jmp    c00083c1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c00083a9:	50                   	push   eax
c00083aa:	50                   	push   eax
c00083ab:	55                   	push   ebp
c00083ac:	57                   	push   edi
c00083ad:	e8 9e 82 ff ff       	call   c0000650 <strcpy>
c00083b2:	58                   	pop    eax
c00083b3:	5a                   	pop    edx
c00083b4:	68 ba 99 02 c0       	push   0xc00299ba
c00083b9:	57                   	push   edi
c00083ba:	e8 b1 84 ff ff       	call   c0000870 <strcat>
c00083bf:	59                   	pop    ecx
c00083c0:	5d                   	pop    ebp
c00083c1:	56                   	push   esi
c00083c2:	57                   	push   edi
c00083c3:	e8 a8 84 ff ff       	call   c0000870 <strcat>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00083cf:	3c 60                	cmp    al,0x60
c00083d1:	7e 03                	jle    c00083d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c00083d3:	83 e8 20             	sub    eax,0x20
c00083d6:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00083da:	be 03 00 00 00       	mov    esi,0x3
c00083df:	88 03                	mov    BYTE PTR [ebx],al
c00083e1:	b8 03 00 00 00       	mov    eax,0x3
c00083e6:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c00083ed:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00083f3:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00083f7:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c00083fc:	89 fa                	mov    edx,edi
c00083fe:	0f be ea             	movsx  ebp,dl
c0008401:	85 ed                	test   ebp,ebp
c0008403:	0f 84 a1 00 00 00    	je     c00084aa <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c0008409:	8d 56 01             	lea    edx,[esi+0x1]
c000840c:	83 fd 2f             	cmp    ebp,0x2f
c000840f:	74 05                	je     c0008416 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c0008411:	83 fd 5c             	cmp    ebp,0x5c
c0008414:	75 12                	jne    c0008428 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0008416:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000841b:	89 c5                	mov    ebp,eax
c000841d:	74 09                	je     c0008428 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000841f:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0008423:	40                   	inc    eax
c0008424:	89 d6                	mov    esi,edx
c0008426:	eb cf                	jmp    c00083f7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0008428:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c000842d:	89 f9                	mov    ecx,edi
c000842f:	0f be e9             	movsx  ebp,cl
c0008432:	75 61                	jne    c0008495 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0008434:	83 fd 2e             	cmp    ebp,0x2e
c0008437:	75 5c                	jne    c0008495 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0008439:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000843e:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c0008443:	74 19                	je     c000845e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c0008445:	83 fd 2e             	cmp    ebp,0x2e
c0008448:	74 55                	je     c000849f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000844a:	89 f2                	mov    edx,esi
c000844c:	42                   	inc    edx
c000844d:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0008452:	83 f9 2f             	cmp    ecx,0x2f
c0008455:	74 f5                	je     c000844c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0008457:	83 f9 5c             	cmp    ecx,0x5c
c000845a:	74 f0                	je     c000844c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000845c:	eb c6                	jmp    c0008424 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000845e:	83 fd 2e             	cmp    ebp,0x2e
c0008461:	74 3c                	je     c000849f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0008463:	83 f8 03             	cmp    eax,0x3
c0008466:	74 bc                	je     c0008424 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0008468:	42                   	inc    edx
c0008469:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000846e:	83 f9 2f             	cmp    ecx,0x2f
c0008471:	74 f5                	je     c0008468 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0008473:	83 f9 5c             	cmp    ecx,0x5c
c0008476:	74 f0                	je     c0008468 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0008478:	48                   	dec    eax
c0008479:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000847d:	75 06                	jne    c0008485 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000847f:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0008483:	eb f3                	jmp    c0008478 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c0008485:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0008489:	74 07                	je     c0008492 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c000848b:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000848f:	48                   	dec    eax
c0008490:	eb f3                	jmp    c0008485 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0008492:	40                   	inc    eax
c0008493:	eb 8f                	jmp    c0008424 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0008495:	83 fd 2f             	cmp    ebp,0x2f
c0008498:	74 8a                	je     c0008424 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000849a:	83 fd 5c             	cmp    ebp,0x5c
c000849d:	74 85                	je     c0008424 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000849f:	89 f9                	mov    ecx,edi
c00084a1:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00084a4:	40                   	inc    eax
c00084a5:	e9 7a ff ff ff       	jmp    c0008424 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c00084aa:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00084ae:	83 ec 0c             	sub    esp,0xc
c00084b1:	53                   	push   ebx
c00084b2:	e8 c9 80 ff ff       	call   c0000580 <strlen>
c00084b7:	83 c4 10             	add    esp,0x10
c00084ba:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00084bf:	74 1c                	je     c00084dd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c00084c1:	83 ec 0c             	sub    esp,0xc
c00084c4:	53                   	push   ebx
c00084c5:	e8 b6 80 ff ff       	call   c0000580 <strlen>
c00084ca:	83 c4 10             	add    esp,0x10
c00084cd:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00084d2:	74 09                	je     c00084dd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c00084d4:	31 ff                	xor    edi,edi
c00084d6:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c00084db:	eb 5c                	jmp    c0008539 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c00084dd:	83 ec 0c             	sub    esp,0xc
c00084e0:	53                   	push   ebx
c00084e1:	e8 9a 80 ff ff       	call   c0000580 <strlen>
c00084e6:	83 c4 10             	add    esp,0x10
c00084e9:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00084ee:	74 e4                	je     c00084d4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c00084f0:	83 ec 0c             	sub    esp,0xc
c00084f3:	53                   	push   ebx
c00084f4:	e8 87 80 ff ff       	call   c0000580 <strlen>
c00084f9:	83 c4 10             	add    esp,0x10
c00084fc:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0008501:	eb ab                	jmp    c00084ae <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c0008503:	52                   	push   edx
c0008504:	52                   	push   edx
c0008505:	53                   	push   ebx
c0008506:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000850a:	55                   	push   ebp
c000850b:	e8 40 81 ff ff       	call   c0000650 <strcpy>
c0008510:	59                   	pop    ecx
c0008511:	58                   	pop    eax
c0008512:	53                   	push   ebx
c0008513:	55                   	push   ebp
c0008514:	e8 a2 f8 ff ff       	call   c0007dbb <KeDereferenceSymlink(char const*, char*)>
c0008519:	83 c4 10             	add    esp,0x10
c000851c:	48                   	dec    eax
c000851d:	75 37                	jne    c0008556 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000851f:	50                   	push   eax
c0008520:	53                   	push   ebx
c0008521:	55                   	push   ebp
c0008522:	68 a7 7f 02 c0       	push   0xc0027fa7
c0008527:	e8 3a ea ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000852c:	8d 47 01             	lea    eax,[edi+0x1]
c000852f:	83 c4 10             	add    esp,0x10
c0008532:	83 ff 14             	cmp    edi,0x14
c0008535:	74 08                	je     c000853f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c0008537:	89 c7                	mov    edi,eax
c0008539:	85 f6                	test   esi,esi
c000853b:	75 c6                	jne    c0008503 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c000853d:	eb 17                	jmp    c0008556 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000853f:	83 ec 0c             	sub    esp,0xc
c0008542:	bf 15 00 00 00       	mov    edi,0x15
c0008547:	68 c2 7f 02 c0       	push   0xc0027fc2
c000854c:	e8 5b 7a 00 00       	call   c000ffac <KePanic(char const*)>
c0008551:	83 c4 10             	add    esp,0x10
c0008554:	eb e3                	jmp    c0008539 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0008556:	81 c4 1c 04 00 00    	add    esp,0x41c
c000855c:	5b                   	pop    ebx
c000855d:	5e                   	pop    esi
c000855e:	5f                   	pop    edi
c000855f:	5d                   	pop    ebp
c0008560:	c3                   	ret    
c0008561:	90                   	nop

c0008562 <File::File(char const*, Process*, bool)>:
c0008562:	83 ec 1c             	sub    esp,0x1c
c0008565:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008569:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000856d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008571:	83 ec 08             	sub    esp,0x8
c0008574:	6a 00                	push   0x0
c0008576:	50                   	push   eax
c0008577:	e8 24 ab 00 00       	call   c00130a0 <UnixFile::UnixFile(int)>
c000857c:	83 c4 10             	add    esp,0x10
c000857f:	ba 74 80 02 c0       	mov    edx,0xc0028074
c0008584:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008588:	89 10                	mov    DWORD PTR [eax],edx
c000858a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000858f:	85 c0                	test   eax,eax
c0008591:	74 0f                	je     c00085a2 <File::File(char const*, Process*, bool)+0x40>
c0008593:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c0008598:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000859c:	74 04                	je     c00085a2 <File::File(char const*, Process*, bool)+0x40>
c000859e:	b0 01                	mov    al,0x1
c00085a0:	eb 02                	jmp    c00085a4 <File::File(char const*, Process*, bool)+0x42>
c00085a2:	b0 00                	mov    al,0x0
c00085a4:	0f b6 c0             	movzx  eax,al
c00085a7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00085ab:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00085b1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00085b5:	83 c2 0d             	add    edx,0xd
c00085b8:	50                   	push   eax
c00085b9:	51                   	push   ecx
c00085ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00085be:	52                   	push   edx
c00085bf:	e8 70 fd ff ff       	call   c0008334 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00085c4:	83 c4 10             	add    esp,0x10
c00085c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085cb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00085ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00085d2:	83 c2 0d             	add    edx,0xd
c00085d5:	83 ec 04             	sub    esp,0x4
c00085d8:	50                   	push   eax
c00085d9:	52                   	push   edx
c00085da:	68 e8 7f 02 c0       	push   0xc0027fe8
c00085df:	e8 82 e9 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00085e4:	83 c4 10             	add    esp,0x10
c00085e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085eb:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00085ee:	83 e8 41             	sub    eax,0x41
c00085f1:	88 c2                	mov    dl,al
c00085f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085f7:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00085fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008601:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0008605:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008609:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000860f:	0f b6 c0             	movzx  eax,al
c0008612:	8b 04 85 e0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce520]
c0008619:	85 c0                	test   eax,eax
c000861b:	74 3e                	je     c000865b <File::File(char const*, Process*, bool)+0xf9>
c000861d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008621:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008627:	0f b6 c0             	movzx  eax,al
c000862a:	8b 04 85 e0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce520]
c0008631:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008637:	85 c0                	test   eax,eax
c0008639:	75 20                	jne    c000865b <File::File(char const*, Process*, bool)+0xf9>
c000863b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000863f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008645:	0f b6 c0             	movzx  eax,al
c0008648:	8b 04 85 e0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce520]
c000864f:	83 ec 0c             	sub    esp,0xc
c0008652:	50                   	push   eax
c0008653:	e8 d4 27 00 00       	call   c000ae2c <LogicalDisk::mount()>
c0008658:	83 c4 10             	add    esp,0x10
c000865b:	90                   	nop
c000865c:	83 c4 1c             	add    esp,0x1c
c000865f:	c3                   	ret    

c0008660 <File::File(char const*, Process*)>:
c0008660:	83 ec 0c             	sub    esp,0xc
c0008663:	6a 01                	push   0x1
c0008665:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008669:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000866d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008671:	e8 ec fe ff ff       	call   c0008562 <File::File(char const*, Process*, bool)>
c0008676:	83 c4 10             	add    esp,0x10
c0008679:	90                   	nop
c000867a:	83 c4 0c             	add    esp,0xc
c000867d:	c3                   	ret    

c000867e <File::open(FileOpenMode)>:
c000867e:	53                   	push   ebx
c000867f:	b8 0b 00 00 00       	mov    eax,0xb
c0008684:	83 ec 08             	sub    esp,0x8
c0008687:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000868b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008692:	83 fa 19             	cmp    edx,0x19
c0008695:	77 40                	ja     c00086d7 <File::open(FileOpenMode)+0x59>
c0008697:	8b 14 95 e0 1a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffce520]
c000869e:	85 d2                	test   edx,edx
c00086a0:	74 35                	je     c00086d7 <File::open(FileOpenMode)+0x59>
c00086a2:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00086a8:	85 d2                	test   edx,edx
c00086aa:	74 2b                	je     c00086d7 <File::open(FileOpenMode)+0x59>
c00086ac:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00086b0:	b8 06 00 00 00       	mov    eax,0x6
c00086b5:	75 20                	jne    c00086d7 <File::open(FileOpenMode)+0x59>
c00086b7:	8b 02                	mov    eax,DWORD PTR [edx]
c00086b9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00086bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086c3:	51                   	push   ecx
c00086c4:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00086c7:	51                   	push   ecx
c00086c8:	52                   	push   edx
c00086c9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00086cc:	83 c4 10             	add    esp,0x10
c00086cf:	85 c0                	test   eax,eax
c00086d1:	75 04                	jne    c00086d7 <File::open(FileOpenMode)+0x59>
c00086d3:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00086d7:	83 c4 08             	add    esp,0x8
c00086da:	5b                   	pop    ebx
c00086db:	c3                   	ret    

c00086dc <File::close()>:
c00086dc:	53                   	push   ebx
c00086dd:	b8 0b 00 00 00       	mov    eax,0xb
c00086e2:	83 ec 08             	sub    esp,0x8
c00086e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00086e9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00086f0:	83 f9 19             	cmp    ecx,0x19
c00086f3:	77 41                	ja     c0008736 <File::close()+0x5a>
c00086f5:	8b 1c 8d e0 1a 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffce520]
c00086fc:	85 db                	test   ebx,ebx
c00086fe:	74 36                	je     c0008736 <File::close()+0x5a>
c0008700:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008707:	74 2d                	je     c0008736 <File::close()+0x5a>
c0008709:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000870d:	b8 05 00 00 00       	mov    eax,0x5
c0008712:	74 22                	je     c0008736 <File::close()+0x5a>
c0008714:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008718:	8b 04 8d e0 1a 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffce520]
c000871f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008725:	53                   	push   ebx
c0008726:	53                   	push   ebx
c0008727:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008729:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000872f:	50                   	push   eax
c0008730:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c0008733:	83 c4 10             	add    esp,0x10
c0008736:	83 c4 08             	add    esp,0x8
c0008739:	5b                   	pop    ebx
c000873a:	c3                   	ret    
c000873b:	90                   	nop

c000873c <File::seek(unsigned long long)>:
c000873c:	56                   	push   esi
c000873d:	b8 0b 00 00 00       	mov    eax,0xb
c0008742:	53                   	push   ebx
c0008743:	51                   	push   ecx
c0008744:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008748:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000874c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008750:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008757:	83 fa 19             	cmp    edx,0x19
c000875a:	77 31                	ja     c000878d <File::seek(unsigned long long)+0x51>
c000875c:	8b 14 95 e0 1a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffce520]
c0008763:	85 d2                	test   edx,edx
c0008765:	74 26                	je     c000878d <File::seek(unsigned long long)+0x51>
c0008767:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000876d:	85 d2                	test   edx,edx
c000876f:	74 1c                	je     c000878d <File::seek(unsigned long long)+0x51>
c0008771:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008775:	b8 05 00 00 00       	mov    eax,0x5
c000877a:	74 11                	je     c000878d <File::seek(unsigned long long)+0x51>
c000877c:	8b 02                	mov    eax,DWORD PTR [edx]
c000877e:	53                   	push   ebx
c000877f:	51                   	push   ecx
c0008780:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008786:	52                   	push   edx
c0008787:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	5a                   	pop    edx
c000878e:	5b                   	pop    ebx
c000878f:	5e                   	pop    esi
c0008790:	c3                   	ret    
c0008791:	90                   	nop

c0008792 <File::truncate(unsigned long long)>:
c0008792:	56                   	push   esi
c0008793:	b8 0b 00 00 00       	mov    eax,0xb
c0008798:	53                   	push   ebx
c0008799:	51                   	push   ecx
c000879a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000879e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00087a2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00087a6:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00087ad:	83 fa 19             	cmp    edx,0x19
c00087b0:	77 31                	ja     c00087e3 <File::truncate(unsigned long long)+0x51>
c00087b2:	8b 14 95 e0 1a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffce520]
c00087b9:	85 d2                	test   edx,edx
c00087bb:	74 26                	je     c00087e3 <File::truncate(unsigned long long)+0x51>
c00087bd:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00087c3:	85 d2                	test   edx,edx
c00087c5:	74 1c                	je     c00087e3 <File::truncate(unsigned long long)+0x51>
c00087c7:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00087cb:	b8 05 00 00 00       	mov    eax,0x5
c00087d0:	74 11                	je     c00087e3 <File::truncate(unsigned long long)+0x51>
c00087d2:	8b 02                	mov    eax,DWORD PTR [edx]
c00087d4:	53                   	push   ebx
c00087d5:	51                   	push   ecx
c00087d6:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00087dc:	52                   	push   edx
c00087dd:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00087e0:	83 c4 10             	add    esp,0x10
c00087e3:	5a                   	pop    edx
c00087e4:	5b                   	pop    ebx
c00087e5:	5e                   	pop    esi
c00087e6:	c3                   	ret    
c00087e7:	90                   	nop

c00087e8 <File::tell(unsigned long long*)>:
c00087e8:	83 ec 0c             	sub    esp,0xc
c00087eb:	b8 0b 00 00 00       	mov    eax,0xb
c00087f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00087f4:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00087fb:	83 fa 19             	cmp    edx,0x19
c00087fe:	77 34                	ja     c0008834 <File::tell(unsigned long long*)+0x4c>
c0008800:	8b 14 95 e0 1a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffce520]
c0008807:	85 d2                	test   edx,edx
c0008809:	74 29                	je     c0008834 <File::tell(unsigned long long*)+0x4c>
c000880b:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008811:	85 d2                	test   edx,edx
c0008813:	74 1f                	je     c0008834 <File::tell(unsigned long long*)+0x4c>
c0008815:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0008819:	b8 05 00 00 00       	mov    eax,0x5
c000881e:	74 14                	je     c0008834 <File::tell(unsigned long long*)+0x4c>
c0008820:	50                   	push   eax
c0008821:	8b 02                	mov    eax,DWORD PTR [edx]
c0008823:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008827:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000882d:	52                   	push   edx
c000882e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0008831:	83 c4 10             	add    esp,0x10
c0008834:	83 c4 0c             	add    esp,0xc
c0008837:	c3                   	ret    

c0008838 <File::rewind()>:
c0008838:	83 ec 10             	sub    esp,0x10
c000883b:	6a 00                	push   0x0
c000883d:	6a 00                	push   0x0
c000883f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008843:	e8 f4 fe ff ff       	call   c000873c <File::seek(unsigned long long)>
c0008848:	83 c4 1c             	add    esp,0x1c
c000884b:	c3                   	ret    

c000884c <File::unlink()>:
c000884c:	83 ec 0c             	sub    esp,0xc
c000884f:	b8 0b 00 00 00       	mov    eax,0xb
c0008854:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008858:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000885f:	83 f9 19             	cmp    ecx,0x19
c0008862:	77 2f                	ja     c0008893 <File::unlink()+0x47>
c0008864:	8b 0c 8d e0 1a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffce520]
c000886b:	85 c9                	test   ecx,ecx
c000886d:	74 24                	je     c0008893 <File::unlink()+0x47>
c000886f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008875:	85 c9                	test   ecx,ecx
c0008877:	74 1a                	je     c0008893 <File::unlink()+0x47>
c0008879:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000887d:	b8 06 00 00 00       	mov    eax,0x6
c0008882:	75 0f                	jne    c0008893 <File::unlink()+0x47>
c0008884:	50                   	push   eax
c0008885:	83 c2 0d             	add    edx,0xd
c0008888:	50                   	push   eax
c0008889:	8b 01                	mov    eax,DWORD PTR [ecx]
c000888b:	52                   	push   edx
c000888c:	51                   	push   ecx
c000888d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008890:	83 c4 10             	add    esp,0x10
c0008893:	83 c4 0c             	add    esp,0xc
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <File::rename(char const*)>:
c0008898:	83 ec 0c             	sub    esp,0xc
c000889b:	b8 0b 00 00 00       	mov    eax,0xb
c00088a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088a4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088ab:	83 f9 19             	cmp    ecx,0x19
c00088ae:	77 32                	ja     c00088e2 <File::rename(char const*)+0x4a>
c00088b0:	8b 0c 8d e0 1a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffce520]
c00088b7:	85 c9                	test   ecx,ecx
c00088b9:	74 27                	je     c00088e2 <File::rename(char const*)+0x4a>
c00088bb:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088c1:	85 c9                	test   ecx,ecx
c00088c3:	74 1d                	je     c00088e2 <File::rename(char const*)+0x4a>
c00088c5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00088c9:	b8 06 00 00 00       	mov    eax,0x6
c00088ce:	75 12                	jne    c00088e2 <File::rename(char const*)+0x4a>
c00088d0:	50                   	push   eax
c00088d1:	83 c2 0d             	add    edx,0xd
c00088d4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00088da:	52                   	push   edx
c00088db:	51                   	push   ecx
c00088dc:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00088df:	83 c4 10             	add    esp,0x10
c00088e2:	83 c4 0c             	add    esp,0xc
c00088e5:	c3                   	ret    

c00088e6 <File::chfatattr(unsigned char, unsigned char)>:
c00088e6:	57                   	push   edi
c00088e7:	b8 0b 00 00 00       	mov    eax,0xb
c00088ec:	56                   	push   esi
c00088ed:	53                   	push   ebx
c00088ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088f2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00088f6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00088fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008901:	83 f9 19             	cmp    ecx,0x19
c0008904:	77 37                	ja     c000893d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008906:	8b 0c 8d e0 1a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffce520]
c000890d:	85 c9                	test   ecx,ecx
c000890f:	74 2c                	je     c000893d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008911:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008917:	85 c9                	test   ecx,ecx
c0008919:	74 22                	je     c000893d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000891b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000891f:	b8 06 00 00 00       	mov    eax,0x6
c0008924:	75 17                	jne    c000893d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008926:	89 f0                	mov    eax,esi
c0008928:	8b 39                	mov    edi,DWORD PTR [ecx]
c000892a:	0f b6 db             	movzx  ebx,bl
c000892d:	0f b6 f0             	movzx  esi,al
c0008930:	83 c2 0d             	add    edx,0xd
c0008933:	56                   	push   esi
c0008934:	53                   	push   ebx
c0008935:	52                   	push   edx
c0008936:	51                   	push   ecx
c0008937:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000893a:	83 c4 10             	add    esp,0x10
c000893d:	5b                   	pop    ebx
c000893e:	5e                   	pop    esi
c000893f:	5f                   	pop    edi
c0008940:	c3                   	ret    
c0008941:	90                   	nop

c0008942 <File::exists()>:
c0008942:	83 ec 0c             	sub    esp,0xc
c0008945:	31 c0                	xor    eax,eax
c0008947:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000894b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008952:	83 f9 19             	cmp    ecx,0x19
c0008955:	77 24                	ja     c000897b <File::exists()+0x39>
c0008957:	8b 0c 8d e0 1a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffce520]
c000895e:	85 c9                	test   ecx,ecx
c0008960:	74 19                	je     c000897b <File::exists()+0x39>
c0008962:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008968:	85 c9                	test   ecx,ecx
c000896a:	74 0f                	je     c000897b <File::exists()+0x39>
c000896c:	50                   	push   eax
c000896d:	83 c2 0d             	add    edx,0xd
c0008970:	50                   	push   eax
c0008971:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008973:	52                   	push   edx
c0008974:	51                   	push   ecx
c0008975:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008978:	83 c4 10             	add    esp,0x10
c000897b:	83 c4 0c             	add    esp,0xc
c000897e:	c3                   	ret    
c000897f:	90                   	nop

c0008980 <File::stat(unsigned long long*, bool*)>:
c0008980:	56                   	push   esi
c0008981:	53                   	push   ebx
c0008982:	50                   	push   eax
c0008983:	b8 0b 00 00 00       	mov    eax,0xb
c0008988:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000898c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008990:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008994:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000899b:	83 f9 19             	cmp    ecx,0x19
c000899e:	77 3d                	ja     c00089dd <File::stat(unsigned long long*, bool*)+0x5d>
c00089a0:	8b 0c 8d e0 1a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffce520]
c00089a7:	85 c9                	test   ecx,ecx
c00089a9:	74 32                	je     c00089dd <File::stat(unsigned long long*, bool*)+0x5d>
c00089ab:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00089b1:	85 c9                	test   ecx,ecx
c00089b3:	74 28                	je     c00089dd <File::stat(unsigned long long*, bool*)+0x5d>
c00089b5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00089b9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00089bb:	74 13                	je     c00089d0 <File::stat(unsigned long long*, bool*)+0x50>
c00089bd:	83 ec 04             	sub    esp,0x4
c00089c0:	56                   	push   esi
c00089c1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00089c7:	51                   	push   ecx
c00089c8:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00089cb:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00089ce:	eb 0a                	jmp    c00089da <File::stat(unsigned long long*, bool*)+0x5a>
c00089d0:	53                   	push   ebx
c00089d1:	83 c2 0d             	add    edx,0xd
c00089d4:	56                   	push   esi
c00089d5:	52                   	push   edx
c00089d6:	51                   	push   ecx
c00089d7:	ff 50 34             	call   DWORD PTR [eax+0x34]
c00089da:	83 c4 10             	add    esp,0x10
c00089dd:	5a                   	pop    edx
c00089de:	5b                   	pop    ebx
c00089df:	5e                   	pop    esi
c00089e0:	c3                   	ret    

c00089e1 <Fs::setcwd(Process*, char*)>:
c00089e1:	55                   	push   ebp
c00089e2:	57                   	push   edi
c00089e3:	56                   	push   esi
c00089e4:	53                   	push   ebx
c00089e5:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00089eb:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c00089f2:	6a 00                	push   0x0
c00089f4:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00089fa:	57                   	push   edi
c00089fb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0008a02:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0008a06:	56                   	push   esi
c0008a07:	e8 28 f9 ff ff       	call   c0008334 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008a0c:	89 34 24             	mov    DWORD PTR [esp],esi
c0008a0f:	e8 6c 7b ff ff       	call   c0000580 <strlen>
c0008a14:	83 c4 10             	add    esp,0x10
c0008a17:	83 f8 02             	cmp    eax,0x2
c0008a1a:	77 15                	ja     c0008a31 <Fs::setcwd(Process*, char*)+0x50>
c0008a1c:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c0008a21:	83 eb 41             	sub    ebx,0x41
c0008a24:	8b 04 9d e0 1a 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffce520]
c0008a2b:	85 c0                	test   eax,eax
c0008a2d:	75 1c                	jne    c0008a4b <Fs::setcwd(Process*, char*)+0x6a>
c0008a2f:	eb 2f                	jmp    c0008a60 <Fs::setcwd(Process*, char*)+0x7f>
c0008a31:	83 ec 0c             	sub    esp,0xc
c0008a34:	56                   	push   esi
c0008a35:	e8 46 7b ff ff       	call   c0000580 <strlen>
c0008a3a:	83 c4 10             	add    esp,0x10
c0008a3d:	83 f8 03             	cmp    eax,0x3
c0008a40:	75 57                	jne    c0008a99 <Fs::setcwd(Process*, char*)+0xb8>
c0008a42:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008a47:	75 50                	jne    c0008a99 <Fs::setcwd(Process*, char*)+0xb8>
c0008a49:	eb d1                	jmp    c0008a1c <Fs::setcwd(Process*, char*)+0x3b>
c0008a4b:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c0008a52:	75 0c                	jne    c0008a60 <Fs::setcwd(Process*, char*)+0x7f>
c0008a54:	83 ec 0c             	sub    esp,0xc
c0008a57:	50                   	push   eax
c0008a58:	e8 cf 23 00 00       	call   c000ae2c <LogicalDisk::mount()>
c0008a5d:	83 c4 10             	add    esp,0x10
c0008a60:	83 fb 19             	cmp    ebx,0x19
c0008a63:	b8 03 00 00 00       	mov    eax,0x3
c0008a68:	0f 87 c6 00 00 00    	ja     c0008b34 <Fs::setcwd(Process*, char*)+0x153>
c0008a6e:	8b 14 9d e0 1a 03 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffce520]
c0008a75:	b8 05 00 00 00       	mov    eax,0x5
c0008a7a:	85 d2                	test   edx,edx
c0008a7c:	0f 84 b2 00 00 00    	je     c0008b34 <Fs::setcwd(Process*, char*)+0x153>
c0008a82:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008a89:	b8 06 00 00 00       	mov    eax,0x6
c0008a8e:	0f 85 92 00 00 00    	jne    c0008b26 <Fs::setcwd(Process*, char*)+0x145>
c0008a94:	e9 9b 00 00 00       	jmp    c0008b34 <Fs::setcwd(Process*, char*)+0x153>
c0008a99:	83 ec 0c             	sub    esp,0xc
c0008a9c:	68 14 01 00 00       	push   0x114
c0008aa1:	e8 b2 70 00 00       	call   c000fb58 <malloc>
c0008aa6:	83 c4 0c             	add    esp,0xc
c0008aa9:	55                   	push   ebp
c0008aaa:	56                   	push   esi
c0008aab:	50                   	push   eax
c0008aac:	89 c3                	mov    ebx,eax
c0008aae:	e8 ad fb ff ff       	call   c0008660 <File::File(char const*, Process*)>
c0008ab3:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0008ab8:	83 c4 0c             	add    esp,0xc
c0008abb:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0008abf:	50                   	push   eax
c0008ac0:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008ac4:	50                   	push   eax
c0008ac5:	53                   	push   ebx
c0008ac6:	e8 b5 fe ff ff       	call   c0008980 <File::stat(unsigned long long*, bool*)>
c0008acb:	83 c4 10             	add    esp,0x10
c0008ace:	83 f8 02             	cmp    eax,0x2
c0008ad1:	74 27                	je     c0008afa <Fs::setcwd(Process*, char*)+0x119>
c0008ad3:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0008ad8:	75 1c                	jne    c0008af6 <Fs::setcwd(Process*, char*)+0x115>
c0008ada:	85 db                	test   ebx,ebx
c0008adc:	b8 02 00 00 00       	mov    eax,0x2
c0008ae1:	74 51                	je     c0008b34 <Fs::setcwd(Process*, char*)+0x153>
c0008ae3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008ae5:	83 ec 0c             	sub    esp,0xc
c0008ae8:	53                   	push   ebx
c0008ae9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008aec:	83 c4 10             	add    esp,0x10
c0008aef:	b8 02 00 00 00       	mov    eax,0x2
c0008af4:	eb 3e                	jmp    c0008b34 <Fs::setcwd(Process*, char*)+0x153>
c0008af6:	85 c0                	test   eax,eax
c0008af8:	74 1c                	je     c0008b16 <Fs::setcwd(Process*, char*)+0x135>
c0008afa:	85 db                	test   ebx,ebx
c0008afc:	b8 01 00 00 00       	mov    eax,0x1
c0008b01:	74 31                	je     c0008b34 <Fs::setcwd(Process*, char*)+0x153>
c0008b03:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008b05:	83 ec 0c             	sub    esp,0xc
c0008b08:	53                   	push   ebx
c0008b09:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008b0c:	83 c4 10             	add    esp,0x10
c0008b0f:	b8 01 00 00 00       	mov    eax,0x1
c0008b14:	eb 1e                	jmp    c0008b34 <Fs::setcwd(Process*, char*)+0x153>
c0008b16:	85 db                	test   ebx,ebx
c0008b18:	74 0c                	je     c0008b26 <Fs::setcwd(Process*, char*)+0x145>
c0008b1a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008b1c:	83 ec 0c             	sub    esp,0xc
c0008b1f:	53                   	push   ebx
c0008b20:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008b23:	83 c4 10             	add    esp,0x10
c0008b26:	50                   	push   eax
c0008b27:	50                   	push   eax
c0008b28:	56                   	push   esi
c0008b29:	57                   	push   edi
c0008b2a:	e8 21 7b ff ff       	call   c0000650 <strcpy>
c0008b2f:	83 c4 10             	add    esp,0x10
c0008b32:	31 c0                	xor    eax,eax
c0008b34:	81 c4 1c 02 00 00    	add    esp,0x21c
c0008b3a:	5b                   	pop    ebx
c0008b3b:	5e                   	pop    esi
c0008b3c:	5f                   	pop    edi
c0008b3d:	5d                   	pop    ebp
c0008b3e:	c3                   	ret    
c0008b3f:	90                   	nop

c0008b40 <Directory::Directory(char const*, Process*)>:
c0008b40:	83 ec 0c             	sub    esp,0xc
c0008b43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b47:	83 ec 08             	sub    esp,0x8
c0008b4a:	6a 00                	push   0x0
c0008b4c:	50                   	push   eax
c0008b4d:	e8 4e a5 00 00       	call   c00130a0 <UnixFile::UnixFile(int)>
c0008b52:	83 c4 10             	add    esp,0x10
c0008b55:	ba 90 80 02 c0       	mov    edx,0xc0028090
c0008b5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b5e:	89 10                	mov    DWORD PTR [eax],edx
c0008b60:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c0008b65:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008b69:	0f 95 c0             	setne  al
c0008b6c:	0f b6 c0             	movzx  eax,al
c0008b6f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008b73:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008b79:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008b7d:	83 c2 0d             	add    edx,0xd
c0008b80:	50                   	push   eax
c0008b81:	51                   	push   ecx
c0008b82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b86:	52                   	push   edx
c0008b87:	e8 a8 f7 ff ff       	call   c0008334 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008b8c:	83 c4 10             	add    esp,0x10
c0008b8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b93:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008b96:	83 e8 41             	sub    eax,0x41
c0008b99:	88 c2                	mov    dl,al
c0008b9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b9f:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008ba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ba9:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0008bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bb1:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008bb7:	0f b6 c0             	movzx  eax,al
c0008bba:	8b 04 85 e0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce520]
c0008bc1:	85 c0                	test   eax,eax
c0008bc3:	74 3e                	je     c0008c03 <Directory::Directory(char const*, Process*)+0xc3>
c0008bc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bc9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008bcf:	0f b6 c0             	movzx  eax,al
c0008bd2:	8b 04 85 e0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce520]
c0008bd9:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008bdf:	85 c0                	test   eax,eax
c0008be1:	75 20                	jne    c0008c03 <Directory::Directory(char const*, Process*)+0xc3>
c0008be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be7:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008bed:	0f b6 c0             	movzx  eax,al
c0008bf0:	8b 04 85 e0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce520]
c0008bf7:	83 ec 0c             	sub    esp,0xc
c0008bfa:	50                   	push   eax
c0008bfb:	e8 2c 22 00 00       	call   c000ae2c <LogicalDisk::mount()>
c0008c00:	83 c4 10             	add    esp,0x10
c0008c03:	90                   	nop
c0008c04:	83 c4 0c             	add    esp,0xc
c0008c07:	c3                   	ret    

c0008c08 <Directory::open()>:
c0008c08:	53                   	push   ebx
c0008c09:	b8 0b 00 00 00       	mov    eax,0xb
c0008c0e:	83 ec 08             	sub    esp,0x8
c0008c11:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008c15:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008c1c:	83 fa 19             	cmp    edx,0x19
c0008c1f:	77 3d                	ja     c0008c5e <Directory::open()+0x56>
c0008c21:	8b 14 95 e0 1a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffce520]
c0008c28:	85 d2                	test   edx,edx
c0008c2a:	74 32                	je     c0008c5e <Directory::open()+0x56>
c0008c2c:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008c32:	85 d2                	test   edx,edx
c0008c34:	74 28                	je     c0008c5e <Directory::open()+0x56>
c0008c36:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008c3a:	b8 06 00 00 00       	mov    eax,0x6
c0008c3f:	75 1d                	jne    c0008c5e <Directory::open()+0x56>
c0008c41:	50                   	push   eax
c0008c42:	8b 02                	mov    eax,DWORD PTR [edx]
c0008c44:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008c4a:	51                   	push   ecx
c0008c4b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008c4e:	51                   	push   ecx
c0008c4f:	52                   	push   edx
c0008c50:	ff 50 50             	call   DWORD PTR [eax+0x50]
c0008c53:	83 c4 10             	add    esp,0x10
c0008c56:	85 c0                	test   eax,eax
c0008c58:	75 04                	jne    c0008c5e <Directory::open()+0x56>
c0008c5a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008c5e:	83 c4 08             	add    esp,0x8
c0008c61:	5b                   	pop    ebx
c0008c62:	c3                   	ret    
c0008c63:	90                   	nop

c0008c64 <Directory::close()>:
c0008c64:	53                   	push   ebx
c0008c65:	b8 0b 00 00 00       	mov    eax,0xb
c0008c6a:	83 ec 08             	sub    esp,0x8
c0008c6d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008c71:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008c78:	83 f9 19             	cmp    ecx,0x19
c0008c7b:	77 41                	ja     c0008cbe <Directory::close()+0x5a>
c0008c7d:	8b 1c 8d e0 1a 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffce520]
c0008c84:	85 db                	test   ebx,ebx
c0008c86:	74 36                	je     c0008cbe <Directory::close()+0x5a>
c0008c88:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008c8f:	74 2d                	je     c0008cbe <Directory::close()+0x5a>
c0008c91:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008c95:	b8 05 00 00 00       	mov    eax,0x5
c0008c9a:	74 22                	je     c0008cbe <Directory::close()+0x5a>
c0008c9c:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008ca0:	8b 04 8d e0 1a 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffce520]
c0008ca7:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008cad:	53                   	push   ebx
c0008cae:	53                   	push   ebx
c0008caf:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008cb1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008cb7:	50                   	push   eax
c0008cb8:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c0008cbb:	83 c4 10             	add    esp,0x10
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    
c0008cc3:	90                   	nop

c0008cc4 <Directory::unlink()>:
c0008cc4:	83 ec 0c             	sub    esp,0xc
c0008cc7:	b8 0b 00 00 00       	mov    eax,0xb
c0008ccc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008cd0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008cd7:	83 f9 19             	cmp    ecx,0x19
c0008cda:	77 2f                	ja     c0008d0b <Directory::unlink()+0x47>
c0008cdc:	8b 0c 8d e0 1a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffce520]
c0008ce3:	85 c9                	test   ecx,ecx
c0008ce5:	74 24                	je     c0008d0b <Directory::unlink()+0x47>
c0008ce7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008ced:	85 c9                	test   ecx,ecx
c0008cef:	74 1a                	je     c0008d0b <Directory::unlink()+0x47>
c0008cf1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008cf5:	b8 06 00 00 00       	mov    eax,0x6
c0008cfa:	75 0f                	jne    c0008d0b <Directory::unlink()+0x47>
c0008cfc:	50                   	push   eax
c0008cfd:	83 c2 0d             	add    edx,0xd
c0008d00:	50                   	push   eax
c0008d01:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008d03:	52                   	push   edx
c0008d04:	51                   	push   ecx
c0008d05:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008d08:	83 c4 10             	add    esp,0x10
c0008d0b:	83 c4 0c             	add    esp,0xc
c0008d0e:	c3                   	ret    
c0008d0f:	90                   	nop

c0008d10 <Directory::rename(char const*)>:
c0008d10:	83 ec 0c             	sub    esp,0xc
c0008d13:	b8 0b 00 00 00       	mov    eax,0xb
c0008d18:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008d1c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008d23:	83 f9 19             	cmp    ecx,0x19
c0008d26:	77 32                	ja     c0008d5a <Directory::rename(char const*)+0x4a>
c0008d28:	8b 0c 8d e0 1a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffce520]
c0008d2f:	85 c9                	test   ecx,ecx
c0008d31:	74 27                	je     c0008d5a <Directory::rename(char const*)+0x4a>
c0008d33:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008d39:	85 c9                	test   ecx,ecx
c0008d3b:	74 1d                	je     c0008d5a <Directory::rename(char const*)+0x4a>
c0008d3d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008d41:	b8 06 00 00 00       	mov    eax,0x6
c0008d46:	75 12                	jne    c0008d5a <Directory::rename(char const*)+0x4a>
c0008d48:	50                   	push   eax
c0008d49:	83 c2 0d             	add    edx,0xd
c0008d4c:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008d4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008d52:	52                   	push   edx
c0008d53:	51                   	push   ecx
c0008d54:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008d57:	83 c4 10             	add    esp,0x10
c0008d5a:	83 c4 0c             	add    esp,0xc
c0008d5d:	c3                   	ret    

c0008d5e <Directory::exists()>:
c0008d5e:	83 ec 0c             	sub    esp,0xc
c0008d61:	31 c0                	xor    eax,eax
c0008d63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008d67:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008d6e:	83 f9 19             	cmp    ecx,0x19
c0008d71:	77 24                	ja     c0008d97 <Directory::exists()+0x39>
c0008d73:	8b 0c 8d e0 1a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffce520]
c0008d7a:	85 c9                	test   ecx,ecx
c0008d7c:	74 19                	je     c0008d97 <Directory::exists()+0x39>
c0008d7e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008d84:	85 c9                	test   ecx,ecx
c0008d86:	74 0f                	je     c0008d97 <Directory::exists()+0x39>
c0008d88:	50                   	push   eax
c0008d89:	83 c2 0d             	add    edx,0xd
c0008d8c:	50                   	push   eax
c0008d8d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008d8f:	52                   	push   edx
c0008d90:	51                   	push   ecx
c0008d91:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008d94:	83 c4 10             	add    esp,0x10
c0008d97:	83 c4 0c             	add    esp,0xc
c0008d9a:	c3                   	ret    
c0008d9b:	90                   	nop

c0008d9c <Directory::read(dirent*)>:
c0008d9c:	83 ec 1c             	sub    esp,0x1c
c0008d9f:	b8 0b 00 00 00       	mov    eax,0xb
c0008da4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008da8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008daf:	83 f9 19             	cmp    ecx,0x19
c0008db2:	77 30                	ja     c0008de4 <Directory::read(dirent*)+0x48>
c0008db4:	8b 0c 8d e0 1a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffce520]
c0008dbb:	85 c9                	test   ecx,ecx
c0008dbd:	74 25                	je     c0008de4 <Directory::read(dirent*)+0x48>
c0008dbf:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0008dc6:	74 1c                	je     c0008de4 <Directory::read(dirent*)+0x48>
c0008dc8:	83 ec 0c             	sub    esp,0xc
c0008dcb:	8b 02                	mov    eax,DWORD PTR [edx]
c0008dcd:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0008dd1:	51                   	push   ecx
c0008dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0008dd6:	6a 00                	push   0x0
c0008dd8:	68 10 01 00 00       	push   0x110
c0008ddd:	52                   	push   edx
c0008dde:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0008de1:	83 c4 20             	add    esp,0x20
c0008de4:	83 c4 1c             	add    esp,0x1c
c0008de7:	c3                   	ret    

c0008de8 <Directory::create()>:
c0008de8:	83 ec 0c             	sub    esp,0xc
c0008deb:	b8 0b 00 00 00       	mov    eax,0xb
c0008df0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008df4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008dfb:	83 f9 19             	cmp    ecx,0x19
c0008dfe:	77 2f                	ja     c0008e2f <Directory::create()+0x47>
c0008e00:	8b 0c 8d e0 1a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffce520]
c0008e07:	85 c9                	test   ecx,ecx
c0008e09:	74 24                	je     c0008e2f <Directory::create()+0x47>
c0008e0b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008e11:	85 c9                	test   ecx,ecx
c0008e13:	74 1a                	je     c0008e2f <Directory::create()+0x47>
c0008e15:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008e19:	b8 06 00 00 00       	mov    eax,0x6
c0008e1e:	75 0f                	jne    c0008e2f <Directory::create()+0x47>
c0008e20:	50                   	push   eax
c0008e21:	83 c2 0d             	add    edx,0xd
c0008e24:	50                   	push   eax
c0008e25:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008e27:	52                   	push   edx
c0008e28:	51                   	push   ecx
c0008e29:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0008e2c:	83 c4 10             	add    esp,0x10
c0008e2f:	83 c4 0c             	add    esp,0xc
c0008e32:	c3                   	ret    
c0008e33:	90                   	nop

c0008e34 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0008e34:	b8 0a 00 00 00       	mov    eax,0xa
c0008e39:	c3                   	ret    
c0008e3a:	66 90                	xchg   ax,ax

c0008e3c <Bus::Bus(char const*)>:
c0008e3c:	83 ec 0c             	sub    esp,0xc
c0008e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e43:	83 ec 08             	sub    esp,0x8
c0008e46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e4a:	50                   	push   eax
c0008e4b:	e8 e0 11 00 00       	call   c000a030 <Device::Device(char const*)>
c0008e50:	83 c4 10             	add    esp,0x10
c0008e53:	ba ac 80 02 c0       	mov    edx,0xc00280ac
c0008e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e5c:	89 10                	mov    DWORD PTR [eax],edx
c0008e5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e62:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008e6c:	90                   	nop
c0008e6d:	83 c4 0c             	add    esp,0xc
c0008e70:	c3                   	ret    
c0008e71:	90                   	nop
c0008e72:	66 90                	xchg   ax,ax

c0008e74 <Bus::~Bus()>:
c0008e74:	83 ec 0c             	sub    esp,0xc
c0008e77:	ba ac 80 02 c0       	mov    edx,0xc00280ac
c0008e7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e80:	89 10                	mov    DWORD PTR [eax],edx
c0008e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e86:	83 ec 0c             	sub    esp,0xc
c0008e89:	50                   	push   eax
c0008e8a:	e8 41 0f 00 00       	call   c0009dd0 <Device::~Device()>
c0008e8f:	83 c4 10             	add    esp,0x10
c0008e92:	90                   	nop
c0008e93:	83 c4 0c             	add    esp,0xc
c0008e96:	c3                   	ret    
c0008e97:	90                   	nop

c0008e98 <Bus::~Bus()>:
c0008e98:	83 ec 0c             	sub    esp,0xc
c0008e9b:	83 ec 0c             	sub    esp,0xc
c0008e9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ea2:	e8 cd ff ff ff       	call   c0008e74 <Bus::~Bus()>
c0008ea7:	83 c4 10             	add    esp,0x10
c0008eaa:	83 ec 08             	sub    esp,0x8
c0008ead:	68 58 01 00 00       	push   0x158
c0008eb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008eb6:	e8 a5 48 00 00       	call   c000d760 <operator delete(void*, unsigned long)>
c0008ebb:	83 c4 10             	add    esp,0x10
c0008ebe:	83 c4 0c             	add    esp,0xc
c0008ec1:	c3                   	ret    

c0008ec2 <KeBeepThread(void*)>:
c0008ec2:	83 ec 0c             	sub    esp,0xc
c0008ec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ec9:	f0 ff 0d 30 23 03 c0 	lock dec DWORD PTR ds:0xc0032330
c0008ed0:	83 3d 30 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032330,0x0
c0008ed7:	75 01                	jne    c0008eda <KeBeepThread(void*)+0x18>
c0008ed9:	fb                   	sti    
c0008eda:	6b c0 0a             	imul   eax,eax,0xa
c0008edd:	52                   	push   edx
c0008ede:	52                   	push   edx
c0008edf:	99                   	cdq    
c0008ee0:	52                   	push   edx
c0008ee1:	50                   	push   eax
c0008ee2:	e8 41 de 00 00       	call   c0016d28 <milliTenthSleep(unsigned long long)>
c0008ee7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008eee:	e8 2a 1f 01 00       	call   c001ae1d <HalMakeBeep(int)>
c0008ef3:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0008efb:	83 c4 1c             	add    esp,0x1c
c0008efe:	e9 f1 dc 00 00       	jmp    c0016bf4 <blockTask(TaskState)>

c0008f03 <KeBeep(int, int, bool)>:
c0008f03:	56                   	push   esi
c0008f04:	53                   	push   ebx
c0008f05:	83 ec 10             	sub    esp,0x10
c0008f08:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f0c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008f10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f14:	e8 04 1f 01 00       	call   c001ae1d <HalMakeBeep(int)>
c0008f19:	89 f0                	mov    eax,esi
c0008f1b:	83 c4 10             	add    esp,0x10
c0008f1e:	84 c0                	test   al,al
c0008f20:	74 1f                	je     c0008f41 <KeBeep(int, int, bool)+0x3e>
c0008f22:	50                   	push   eax
c0008f23:	50                   	push   eax
c0008f24:	6b c3 0a             	imul   eax,ebx,0xa
c0008f27:	99                   	cdq    
c0008f28:	52                   	push   edx
c0008f29:	50                   	push   eax
c0008f2a:	e8 f9 dd 00 00       	call   c0016d28 <milliTenthSleep(unsigned long long)>
c0008f2f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008f37:	83 c4 14             	add    esp,0x14
c0008f3a:	5b                   	pop    ebx
c0008f3b:	5e                   	pop    esi
c0008f3c:	e9 dc 1e 01 00       	jmp    c001ae1d <HalMakeBeep(int)>
c0008f41:	68 e6 00 00 00       	push   0xe6
c0008f46:	53                   	push   ebx
c0008f47:	68 c2 8e 00 c0       	push   0xc0008ec2
c0008f4c:	ff 35 58 23 03 c0    	push   DWORD PTR ds:0xc0032358
c0008f52:	e8 29 d9 00 00       	call   c0016880 <Process::createThread(void (*)(void*), void*, int)>
c0008f57:	83 c4 14             	add    esp,0x14
c0008f5a:	5b                   	pop    ebx
c0008f5b:	5e                   	pop    esi
c0008f5c:	c3                   	ret    
c0008f5d:	90                   	nop

c0008f5e <KeLoadTimezoneStrings()>:
c0008f5e:	55                   	push   ebp
c0008f5f:	89 e5                	mov    ebp,esp
c0008f61:	53                   	push   ebx
c0008f62:	83 ec 44             	sub    esp,0x44
c0008f65:	c6 05 20 13 03 c0 01 	mov    BYTE PTR ds:0xc0031320,0x1
c0008f6c:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c0008f73:	83 ec 0c             	sub    esp,0xc
c0008f76:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0008f79:	e8 da 6b 00 00       	call   c000fb58 <malloc>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	89 c3                	mov    ebx,eax
c0008f83:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c0008f88:	83 ec 04             	sub    esp,0x4
c0008f8b:	50                   	push   eax
c0008f8c:	68 e0 80 02 c0       	push   0xc00280e0
c0008f91:	53                   	push   ebx
c0008f92:	e8 c9 f6 ff ff       	call   c0008660 <File::File(char const*, Process*)>
c0008f97:	83 c4 10             	add    esp,0x10
c0008f9a:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0008f9d:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008fa1:	75 10                	jne    c0008fb3 <KeLoadTimezoneStrings()+0x55>
c0008fa3:	83 ec 0c             	sub    esp,0xc
c0008fa6:	68 ff 80 02 c0       	push   0xc00280ff
c0008fab:	e8 fc 6f 00 00       	call   c000ffac <KePanic(char const*)>
c0008fb0:	83 c4 10             	add    esp,0x10
c0008fb3:	83 ec 08             	sub    esp,0x8
c0008fb6:	6a 01                	push   0x1
c0008fb8:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008fbb:	e8 be f6 ff ff       	call   c000867e <File::open(FileOpenMode)>
c0008fc0:	83 c4 10             	add    esp,0x10
c0008fc3:	83 ec 04             	sub    esp,0x4
c0008fc6:	8d 45 cf             	lea    eax,[ebp-0x31]
c0008fc9:	50                   	push   eax
c0008fca:	8d 45 d0             	lea    eax,[ebp-0x30]
c0008fcd:	50                   	push   eax
c0008fce:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008fd1:	e8 aa f9 ff ff       	call   c0008980 <File::stat(unsigned long long*, bool*)>
c0008fd6:	83 c4 10             	add    esp,0x10
c0008fd9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008fdc:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008fdf:	83 ec 08             	sub    esp,0x8
c0008fe2:	50                   	push   eax
c0008fe3:	68 15 81 02 c0       	push   0xc0028115
c0008fe8:	e8 79 df ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008fed:	83 c4 10             	add    esp,0x10
c0008ff0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008ff3:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008ff6:	83 c0 01             	add    eax,0x1
c0008ff9:	83 ec 0c             	sub    esp,0xc
c0008ffc:	50                   	push   eax
c0008ffd:	e8 56 6b 00 00       	call   c000fb58 <malloc>
c0009002:	83 c4 10             	add    esp,0x10
c0009005:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009008:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c000900b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000900e:	83 ec 04             	sub    esp,0x4
c0009011:	50                   	push   eax
c0009012:	6a 00                	push   0x0
c0009014:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0009017:	e8 d4 74 ff ff       	call   c00004f0 <memset>
c000901c:	83 c4 10             	add    esp,0x10
c000901f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009022:	8b 00                	mov    eax,DWORD PTR [eax]
c0009024:	83 c0 0c             	add    eax,0xc
c0009027:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009029:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c000902c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000902f:	83 ec 0c             	sub    esp,0xc
c0009032:	8d 5d c8             	lea    ebx,[ebp-0x38]
c0009035:	53                   	push   ebx
c0009036:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0009039:	52                   	push   edx
c000903a:	50                   	push   eax
c000903b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000903e:	ff d1                	call   ecx
c0009040:	83 c4 20             	add    esp,0x20
c0009043:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0009046:	83 ec 08             	sub    esp,0x8
c0009049:	50                   	push   eax
c000904a:	68 25 81 02 c0       	push   0xc0028125
c000904f:	e8 12 df ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009054:	83 c4 10             	add    esp,0x10
c0009057:	83 ec 0c             	sub    esp,0xc
c000905a:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000905d:	e8 7a f6 ff ff       	call   c00086dc <File::close()>
c0009062:	83 c4 10             	add    esp,0x10
c0009065:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0009069:	74 15                	je     c0009080 <KeLoadTimezoneStrings()+0x122>
c000906b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000906e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009070:	83 c0 08             	add    eax,0x8
c0009073:	8b 00                	mov    eax,DWORD PTR [eax]
c0009075:	83 ec 0c             	sub    esp,0xc
c0009078:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000907b:	ff d0                	call   eax
c000907d:	83 c4 10             	add    esp,0x10
c0009080:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009087:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c000908e:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c0009095:	7f 3a                	jg     c00090d1 <KeLoadTimezoneStrings()+0x173>
c0009097:	83 ec 0c             	sub    esp,0xc
c000909a:	6a 78                	push   0x78
c000909c:	e8 b7 6a 00 00       	call   c000fb58 <malloc>
c00090a1:	83 c4 10             	add    esp,0x10
c00090a4:	89 c2                	mov    edx,eax
c00090a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00090a9:	89 14 85 40 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcecc0],edx
c00090b0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00090b3:	8b 04 85 40 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcecc0]
c00090ba:	83 ec 08             	sub    esp,0x8
c00090bd:	68 2e 81 02 c0       	push   0xc002812e
c00090c2:	50                   	push   eax
c00090c3:	e8 88 75 ff ff       	call   c0000650 <strcpy>
c00090c8:	83 c4 10             	add    esp,0x10
c00090cb:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c00090cf:	eb bd                	jmp    c000908e <KeLoadTimezoneStrings()+0x130>
c00090d1:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00090d8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00090db:	8d 50 01             	lea    edx,[eax+0x1]
c00090de:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00090e1:	89 c2                	mov    edx,eax
c00090e3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00090e6:	01 d0                	add    eax,edx
c00090e8:	8a 00                	mov    al,BYTE PTR [eax]
c00090ea:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c00090ed:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c00090f1:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c00090f4:	0f be c0             	movsx  eax,al
c00090f7:	83 f8 0d             	cmp    eax,0xd
c00090fa:	0f 84 82 01 00 00    	je     c0009282 <KeLoadTimezoneStrings()+0x324>
c0009100:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0009103:	0f be c0             	movsx  eax,al
c0009106:	83 f8 09             	cmp    eax,0x9
c0009109:	75 44                	jne    c000914f <KeLoadTimezoneStrings()+0x1f1>
c000910b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000910e:	8b 04 85 40 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcecc0]
c0009115:	83 ec 0c             	sub    esp,0xc
c0009118:	50                   	push   eax
c0009119:	e8 62 74 ff ff       	call   c0000580 <strlen>
c000911e:	83 c4 10             	add    esp,0x10
c0009121:	83 f8 08             	cmp    eax,0x8
c0009124:	0f 96 c0             	setbe  al
c0009127:	0f b6 c0             	movzx  eax,al
c000912a:	85 c0                	test   eax,eax
c000912c:	0f 84 56 01 00 00    	je     c0009288 <KeLoadTimezoneStrings()+0x32a>
c0009132:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009135:	8b 04 85 40 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcecc0]
c000913c:	83 ec 08             	sub    esp,0x8
c000913f:	68 2e 81 02 c0       	push   0xc002812e
c0009144:	50                   	push   eax
c0009145:	e8 26 77 ff ff       	call   c0000870 <strcat>
c000914a:	83 c4 10             	add    esp,0x10
c000914d:	eb bc                	jmp    c000910b <KeLoadTimezoneStrings()+0x1ad>
c000914f:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0009152:	0f be c0             	movsx  eax,al
c0009155:	83 f8 0a             	cmp    eax,0xa
c0009158:	0f 85 9b 00 00 00    	jne    c00091f9 <KeLoadTimezoneStrings()+0x29b>
c000915e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009161:	8b 04 85 40 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcecc0]
c0009168:	83 ec 0c             	sub    esp,0xc
c000916b:	50                   	push   eax
c000916c:	e8 0f 74 ff ff       	call   c0000580 <strlen>
c0009171:	83 c4 10             	add    esp,0x10
c0009174:	83 f8 35             	cmp    eax,0x35
c0009177:	0f 96 c0             	setbe  al
c000917a:	0f b6 c0             	movzx  eax,al
c000917d:	85 c0                	test   eax,eax
c000917f:	74 1d                	je     c000919e <KeLoadTimezoneStrings()+0x240>
c0009181:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009184:	8b 04 85 40 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcecc0]
c000918b:	83 ec 08             	sub    esp,0x8
c000918e:	68 2e 81 02 c0       	push   0xc002812e
c0009193:	50                   	push   eax
c0009194:	e8 d7 76 ff ff       	call   c0000870 <strcat>
c0009199:	83 c4 10             	add    esp,0x10
c000919c:	eb c0                	jmp    c000915e <KeLoadTimezoneStrings()+0x200>
c000919e:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c00091a2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00091a5:	89 c2                	mov    edx,eax
c00091a7:	c1 fa 1f             	sar    edx,0x1f
c00091aa:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00091ad:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00091b0:	39 c8                	cmp    eax,ecx
c00091b2:	89 d0                	mov    eax,edx
c00091b4:	19 d8                	sbb    eax,ebx
c00091b6:	0f 82 d2 00 00 00    	jb     c000928e <KeLoadTimezoneStrings()+0x330>
c00091bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00091bf:	a3 24 13 03 c0       	mov    ds:0xc0031324,eax
c00091c4:	83 ec 08             	sub    esp,0x8
c00091c7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00091ca:	68 30 81 02 c0       	push   0xc0028130
c00091cf:	e8 92 dd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00091d4:	83 c4 10             	add    esp,0x10
c00091d7:	a1 24 13 03 c0       	mov    eax,ds:0xc0031324
c00091dc:	83 ec 08             	sub    esp,0x8
c00091df:	50                   	push   eax
c00091e0:	68 45 81 02 c0       	push   0xc0028145
c00091e5:	e8 7c dd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00091ea:	83 c4 10             	add    esp,0x10
c00091ed:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c00091f4:	e9 9b 00 00 00       	jmp    c0009294 <KeLoadTimezoneStrings()+0x336>
c00091f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00091fc:	8b 04 85 40 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcecc0]
c0009203:	83 ec 0c             	sub    esp,0xc
c0009206:	50                   	push   eax
c0009207:	e8 74 73 ff ff       	call   c0000580 <strlen>
c000920c:	83 c4 10             	add    esp,0x10
c000920f:	83 f8 31             	cmp    eax,0x31
c0009212:	0f 96 c0             	setbe  al
c0009215:	0f b6 c0             	movzx  eax,al
c0009218:	85 c0                	test   eax,eax
c000921a:	74 1f                	je     c000923b <KeLoadTimezoneStrings()+0x2dd>
c000921c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000921f:	8b 04 85 40 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcecc0]
c0009226:	83 ec 08             	sub    esp,0x8
c0009229:	8d 55 c6             	lea    edx,[ebp-0x3a]
c000922c:	52                   	push   edx
c000922d:	50                   	push   eax
c000922e:	e8 3d 76 ff ff       	call   c0000870 <strcat>
c0009233:	83 c4 10             	add    esp,0x10
c0009236:	e9 9d fe ff ff       	jmp    c00090d8 <KeLoadTimezoneStrings()+0x17a>
c000923b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000923e:	8b 04 85 40 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcecc0]
c0009245:	83 ec 0c             	sub    esp,0xc
c0009248:	50                   	push   eax
c0009249:	e8 32 73 ff ff       	call   c0000580 <strlen>
c000924e:	83 c4 10             	add    esp,0x10
c0009251:	83 f8 32             	cmp    eax,0x32
c0009254:	0f 94 c0             	sete   al
c0009257:	0f b6 c0             	movzx  eax,al
c000925a:	85 c0                	test   eax,eax
c000925c:	0f 84 76 fe ff ff    	je     c00090d8 <KeLoadTimezoneStrings()+0x17a>
c0009262:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009265:	8b 04 85 40 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcecc0]
c000926c:	83 ec 08             	sub    esp,0x8
c000926f:	68 49 81 02 c0       	push   0xc0028149
c0009274:	50                   	push   eax
c0009275:	e8 f6 75 ff ff       	call   c0000870 <strcat>
c000927a:	83 c4 10             	add    esp,0x10
c000927d:	e9 56 fe ff ff       	jmp    c00090d8 <KeLoadTimezoneStrings()+0x17a>
c0009282:	90                   	nop
c0009283:	e9 50 fe ff ff       	jmp    c00090d8 <KeLoadTimezoneStrings()+0x17a>
c0009288:	90                   	nop
c0009289:	e9 4a fe ff ff       	jmp    c00090d8 <KeLoadTimezoneStrings()+0x17a>
c000928e:	90                   	nop
c000928f:	e9 44 fe ff ff       	jmp    c00090d8 <KeLoadTimezoneStrings()+0x17a>
c0009294:	a1 24 13 03 c0       	mov    eax,ds:0xc0031324
c0009299:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c000929c:	7d 49                	jge    c00092e7 <KeLoadTimezoneStrings()+0x389>
c000929e:	a1 24 13 03 c0       	mov    eax,ds:0xc0031324
c00092a3:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c00092a6:	0f 9c c0             	setl   al
c00092a9:	0f b6 d0             	movzx  edx,al
c00092ac:	a1 24 13 03 c0       	mov    eax,ds:0xc0031324
c00092b1:	52                   	push   edx
c00092b2:	50                   	push   eax
c00092b3:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00092b6:	68 4e 81 02 c0       	push   0xc002814e
c00092bb:	e8 a6 dc ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00092c0:	83 c4 10             	add    esp,0x10
c00092c3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00092c6:	8b 04 85 40 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcecc0]
c00092cd:	83 ec 04             	sub    esp,0x4
c00092d0:	50                   	push   eax
c00092d1:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00092d4:	68 5c 81 02 c0       	push   0xc002815c
c00092d9:	e8 88 dc ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00092de:	83 c4 10             	add    esp,0x10
c00092e1:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c00092e5:	eb ad                	jmp    c0009294 <KeLoadTimezoneStrings()+0x336>
c00092e7:	90                   	nop
c00092e8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00092eb:	c9                   	leave  
c00092ec:	c3                   	ret    

c00092ed <KeGetTimezoneStringFromID(int)>:
c00092ed:	55                   	push   ebp
c00092ee:	89 e5                	mov    ebp,esp
c00092f0:	83 ec 08             	sub    esp,0x8
c00092f3:	83 ec 08             	sub    esp,0x8
c00092f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00092f9:	68 65 81 02 c0       	push   0xc0028165
c00092fe:	e8 63 dc ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009303:	83 c4 10             	add    esp,0x10
c0009306:	a0 20 13 03 c0       	mov    al,ds:0xc0031320
c000930b:	83 f0 01             	xor    eax,0x1
c000930e:	0f b6 c0             	movzx  eax,al
c0009311:	85 c0                	test   eax,eax
c0009313:	74 15                	je     c000932a <KeGetTimezoneStringFromID(int)+0x3d>
c0009315:	e8 44 fc ff ff       	call   c0008f5e <KeLoadTimezoneStrings()>
c000931a:	83 ec 0c             	sub    esp,0xc
c000931d:	68 83 81 02 c0       	push   0xc0028183
c0009322:	e8 3f dc ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009327:	83 c4 10             	add    esp,0x10
c000932a:	a1 24 13 03 c0       	mov    eax,ds:0xc0031324
c000932f:	83 ec 04             	sub    esp,0x4
c0009332:	50                   	push   eax
c0009333:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009336:	68 94 81 02 c0       	push   0xc0028194
c000933b:	e8 26 dc ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009340:	83 c4 10             	add    esp,0x10
c0009343:	a1 24 13 03 c0       	mov    eax,ds:0xc0031324
c0009348:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c000934b:	7d 06                	jge    c0009353 <KeGetTimezoneStringFromID(int)+0x66>
c000934d:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0009351:	79 07                	jns    c000935a <KeGetTimezoneStringFromID(int)+0x6d>
c0009353:	b8 00 00 00 00       	mov    eax,0x0
c0009358:	eb 2e                	jmp    c0009388 <KeGetTimezoneStringFromID(int)+0x9b>
c000935a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000935d:	8b 04 85 40 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcecc0]
c0009364:	83 c0 01             	add    eax,0x1
c0009367:	83 ec 04             	sub    esp,0x4
c000936a:	50                   	push   eax
c000936b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000936e:	68 a7 81 02 c0       	push   0xc00281a7
c0009373:	e8 ee db ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009378:	83 c4 10             	add    esp,0x10
c000937b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000937e:	8b 04 85 40 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcecc0]
c0009385:	83 c0 01             	add    eax,0x1
c0009388:	c9                   	leave  
c0009389:	c3                   	ret    

c000938a <KeUpdateTimezone(char const*)>:
c000938a:	55                   	push   ebp
c000938b:	89 e5                	mov    ebp,esp
c000938d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009390:	8a 00                	mov    al,BYTE PTR [eax]
c0009392:	0f be c0             	movsx  eax,al
c0009395:	83 f8 2b             	cmp    eax,0x2b
c0009398:	74 11                	je     c00093ab <KeUpdateTimezone(char const*)+0x21>
c000939a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000939d:	8a 00                	mov    al,BYTE PTR [eax]
c000939f:	0f be c0             	movsx  eax,al
c00093a2:	83 f8 2d             	cmp    eax,0x2d
c00093a5:	0f 85 be 00 00 00    	jne    c0009469 <KeUpdateTimezone(char const*)+0xdf>
c00093ab:	c6 05 60 16 03 c0 00 	mov    BYTE PTR ds:0xc0031660,0x0
c00093b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093b5:	83 c0 02             	add    eax,0x2
c00093b8:	8a 00                	mov    al,BYTE PTR [eax]
c00093ba:	0f be c0             	movsx  eax,al
c00093bd:	83 f8 2e             	cmp    eax,0x2e
c00093c0:	75 10                	jne    c00093d2 <KeUpdateTimezone(char const*)+0x48>
c00093c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093c5:	83 c0 03             	add    eax,0x3
c00093c8:	8a 00                	mov    al,BYTE PTR [eax]
c00093ca:	0f be c0             	movsx  eax,al
c00093cd:	83 f8 35             	cmp    eax,0x35
c00093d0:	74 20                	je     c00093f2 <KeUpdateTimezone(char const*)+0x68>
c00093d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093d5:	83 c0 03             	add    eax,0x3
c00093d8:	8a 00                	mov    al,BYTE PTR [eax]
c00093da:	0f be c0             	movsx  eax,al
c00093dd:	83 f8 2e             	cmp    eax,0x2e
c00093e0:	75 14                	jne    c00093f6 <KeUpdateTimezone(char const*)+0x6c>
c00093e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093e5:	83 c0 04             	add    eax,0x4
c00093e8:	8a 00                	mov    al,BYTE PTR [eax]
c00093ea:	0f be c0             	movsx  eax,al
c00093ed:	83 f8 35             	cmp    eax,0x35
c00093f0:	75 04                	jne    c00093f6 <KeUpdateTimezone(char const*)+0x6c>
c00093f2:	b0 01                	mov    al,0x1
c00093f4:	eb 02                	jmp    c00093f8 <KeUpdateTimezone(char const*)+0x6e>
c00093f6:	b0 00                	mov    al,0x0
c00093f8:	a2 61 16 03 c0       	mov    ds:0xc0031661,al
c00093fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009400:	83 c0 01             	add    eax,0x1
c0009403:	8a 00                	mov    al,BYTE PTR [eax]
c0009405:	0f be c0             	movsx  eax,al
c0009408:	83 e8 30             	sub    eax,0x30
c000940b:	a3 64 16 03 c0       	mov    ds:0xc0031664,eax
c0009410:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009413:	83 c0 03             	add    eax,0x3
c0009416:	8a 00                	mov    al,BYTE PTR [eax]
c0009418:	0f be c0             	movsx  eax,al
c000941b:	83 f8 2e             	cmp    eax,0x2e
c000941e:	75 2e                	jne    c000944e <KeUpdateTimezone(char const*)+0xc4>
c0009420:	8b 15 64 16 03 c0    	mov    edx,DWORD PTR ds:0xc0031664
c0009426:	89 d0                	mov    eax,edx
c0009428:	c1 e0 02             	shl    eax,0x2
c000942b:	01 d0                	add    eax,edx
c000942d:	d1 e0                	shl    eax,1
c000942f:	a3 64 16 03 c0       	mov    ds:0xc0031664,eax
c0009434:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009437:	83 c0 02             	add    eax,0x2
c000943a:	8a 00                	mov    al,BYTE PTR [eax]
c000943c:	0f be c0             	movsx  eax,al
c000943f:	8d 50 d0             	lea    edx,[eax-0x30]
c0009442:	a1 64 16 03 c0       	mov    eax,ds:0xc0031664
c0009447:	01 d0                	add    eax,edx
c0009449:	a3 64 16 03 c0       	mov    ds:0xc0031664,eax
c000944e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009451:	8a 00                	mov    al,BYTE PTR [eax]
c0009453:	0f be c0             	movsx  eax,al
c0009456:	83 f8 2d             	cmp    eax,0x2d
c0009459:	75 26                	jne    c0009481 <KeUpdateTimezone(char const*)+0xf7>
c000945b:	a1 64 16 03 c0       	mov    eax,ds:0xc0031664
c0009460:	f7 d8                	neg    eax
c0009462:	a3 64 16 03 c0       	mov    ds:0xc0031664,eax
c0009467:	eb 18                	jmp    c0009481 <KeUpdateTimezone(char const*)+0xf7>
c0009469:	c6 05 60 16 03 c0 00 	mov    BYTE PTR ds:0xc0031660,0x0
c0009470:	c6 05 61 16 03 c0 00 	mov    BYTE PTR ds:0xc0031661,0x0
c0009477:	c7 05 64 16 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031664,0x0
c0009481:	90                   	nop
c0009482:	5d                   	pop    ebp
c0009483:	c3                   	ret    

c0009484 <KeSetTimezone(char const*)>:
c0009484:	55                   	push   ebp
c0009485:	89 e5                	mov    ebp,esp
c0009487:	83 ec 18             	sub    esp,0x18
c000948a:	83 ec 0c             	sub    esp,0xc
c000948d:	68 b4 81 02 c0       	push   0xc00281b4
c0009492:	e8 1d 43 00 00       	call   c000d7b4 <CmOpen(char const*)>
c0009497:	83 c4 10             	add    esp,0x10
c000949a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000949d:	83 ec 08             	sub    esp,0x8
c00094a0:	68 d9 81 02 c0       	push   0xc00281d9
c00094a5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00094a8:	e8 02 4f 00 00       	call   c000e3af <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00094ad:	83 c4 10             	add    esp,0x10
c00094b0:	83 ec 04             	sub    esp,0x4
c00094b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00094b6:	50                   	push   eax
c00094b7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00094ba:	e8 c7 47 00 00       	call   c000dc86 <CmSetString(Reghive_Tag*, int, char const*)>
c00094bf:	83 c4 10             	add    esp,0x10
c00094c2:	83 ec 0c             	sub    esp,0xc
c00094c5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00094c8:	e8 05 44 00 00       	call   c000d8d2 <CmClose(Reghive_Tag*)>
c00094cd:	83 c4 10             	add    esp,0x10
c00094d0:	83 ec 0c             	sub    esp,0xc
c00094d3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00094d6:	e8 af fe ff ff       	call   c000938a <KeUpdateTimezone(char const*)>
c00094db:	83 c4 10             	add    esp,0x10
c00094de:	90                   	nop
c00094df:	c9                   	leave  
c00094e0:	c3                   	ret    

c00094e1 <KeSetTimezone(int)>:
c00094e1:	55                   	push   ebp
c00094e2:	89 e5                	mov    ebp,esp
c00094e4:	83 ec 18             	sub    esp,0x18
c00094e7:	83 ec 0c             	sub    esp,0xc
c00094ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00094ed:	e8 fb fd ff ff       	call   c00092ed <KeGetTimezoneStringFromID(int)>
c00094f2:	83 c4 10             	add    esp,0x10
c00094f5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00094f8:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00094fc:	74 12                	je     c0009510 <KeSetTimezone(int)+0x2f>
c00094fe:	83 ec 0c             	sub    esp,0xc
c0009501:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009504:	e8 7b ff ff ff       	call   c0009484 <KeSetTimezone(char const*)>
c0009509:	83 c4 10             	add    esp,0x10
c000950c:	b0 01                	mov    al,0x1
c000950e:	eb 02                	jmp    c0009512 <KeSetTimezone(int)+0x31>
c0009510:	b0 00                	mov    al,0x0
c0009512:	c9                   	leave  
c0009513:	c3                   	ret    

c0009514 <KeLoadTimezone()>:
c0009514:	55                   	push   ebp
c0009515:	89 e5                	mov    ebp,esp
c0009517:	81 ec 68 02 00 00    	sub    esp,0x268
c000951d:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c0009524:	83 ec 0c             	sub    esp,0xc
c0009527:	68 b4 81 02 c0       	push   0xc00281b4
c000952c:	e8 83 42 00 00       	call   c000d7b4 <CmOpen(char const*)>
c0009531:	83 c4 10             	add    esp,0x10
c0009534:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009537:	83 ec 08             	sub    esp,0x8
c000953a:	68 d9 81 02 c0       	push   0xc00281d9
c000953f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009542:	e8 68 4e 00 00       	call   c000e3af <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0009547:	83 c4 10             	add    esp,0x10
c000954a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000954d:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009551:	7e 18                	jle    c000956b <KeLoadTimezone()+0x57>
c0009553:	83 ec 04             	sub    esp,0x4
c0009556:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c000955c:	50                   	push   eax
c000955d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009560:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009563:	e8 bc 43 00 00       	call   c000d924 <CmGetString(Reghive_Tag*, int, char*)>
c0009568:	83 c4 10             	add    esp,0x10
c000956b:	83 ec 0c             	sub    esp,0xc
c000956e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009571:	e8 5c 43 00 00       	call   c000d8d2 <CmClose(Reghive_Tag*)>
c0009576:	83 c4 10             	add    esp,0x10
c0009579:	83 ec 0c             	sub    esp,0xc
c000957c:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009582:	50                   	push   eax
c0009583:	e8 02 fe ff ff       	call   c000938a <KeUpdateTimezone(char const*)>
c0009588:	83 c4 10             	add    esp,0x10
c000958b:	90                   	nop
c000958c:	c9                   	leave  
c000958d:	c3                   	ret    

c000958e <Clock::Clock(char const*)>:
c000958e:	83 ec 0c             	sub    esp,0xc
c0009591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009595:	83 ec 08             	sub    esp,0x8
c0009598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000959c:	50                   	push   eax
c000959d:	e8 8e 0a 00 00       	call   c000a030 <Device::Device(char const*)>
c00095a2:	83 c4 10             	add    esp,0x10
c00095a5:	ba 38 82 02 c0       	mov    edx,0xc0028238
c00095aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095ae:	89 10                	mov    DWORD PTR [eax],edx
c00095b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095b4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00095be:	90                   	nop
c00095bf:	83 c4 0c             	add    esp,0xc
c00095c2:	c3                   	ret    
c00095c3:	90                   	nop

c00095c4 <Clock::~Clock()>:
c00095c4:	83 ec 0c             	sub    esp,0xc
c00095c7:	ba 38 82 02 c0       	mov    edx,0xc0028238
c00095cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095d0:	89 10                	mov    DWORD PTR [eax],edx
c00095d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095d6:	83 ec 0c             	sub    esp,0xc
c00095d9:	50                   	push   eax
c00095da:	e8 f1 07 00 00       	call   c0009dd0 <Device::~Device()>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	90                   	nop
c00095e3:	83 c4 0c             	add    esp,0xc
c00095e6:	c3                   	ret    
c00095e7:	90                   	nop

c00095e8 <Clock::~Clock()>:
c00095e8:	83 ec 0c             	sub    esp,0xc
c00095eb:	83 ec 0c             	sub    esp,0xc
c00095ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095f2:	e8 cd ff ff ff       	call   c00095c4 <Clock::~Clock()>
c00095f7:	83 c4 10             	add    esp,0x10
c00095fa:	83 ec 08             	sub    esp,0x8
c00095fd:	68 58 01 00 00       	push   0x158
c0009602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009606:	e8 55 41 00 00       	call   c000d760 <operator delete(void*, unsigned long)>
c000960b:	83 c4 10             	add    esp,0x10
c000960e:	83 c4 0c             	add    esp,0xc
c0009611:	c3                   	ret    

c0009612 <Clock::timeInSecondsLocal()>:
c0009612:	55                   	push   ebp
c0009613:	89 e5                	mov    ebp,esp
c0009615:	53                   	push   ebx
c0009616:	83 ec 04             	sub    esp,0x4
c0009619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000961c:	8b 00                	mov    eax,DWORD PTR [eax]
c000961e:	83 c0 24             	add    eax,0x24
c0009621:	8b 00                	mov    eax,DWORD PTR [eax]
c0009623:	83 ec 0c             	sub    esp,0xc
c0009626:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009629:	ff d0                	call   eax
c000962b:	83 c4 10             	add    esp,0x10
c000962e:	89 c1                	mov    ecx,eax
c0009630:	89 d3                	mov    ebx,edx
c0009632:	a0 60 16 03 c0       	mov    al,ds:0xc0031660
c0009637:	0f b6 d0             	movzx  edx,al
c000963a:	a1 64 16 03 c0       	mov    eax,ds:0xc0031664
c000963f:	01 d0                	add    eax,edx
c0009641:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009647:	89 c2                	mov    edx,eax
c0009649:	c1 fa 1f             	sar    edx,0x1f
c000964c:	01 c1                	add    ecx,eax
c000964e:	11 d3                	adc    ebx,edx
c0009650:	a0 61 16 03 c0       	mov    al,ds:0xc0031661
c0009655:	0f b6 c0             	movzx  eax,al
c0009658:	85 c0                	test   eax,eax
c000965a:	74 0c                	je     c0009668 <Clock::timeInSecondsLocal()+0x56>
c000965c:	b8 08 07 00 00       	mov    eax,0x708
c0009661:	ba 00 00 00 00       	mov    edx,0x0
c0009666:	eb 0a                	jmp    c0009672 <Clock::timeInSecondsLocal()+0x60>
c0009668:	b8 00 00 00 00       	mov    eax,0x0
c000966d:	ba 00 00 00 00       	mov    edx,0x0
c0009672:	01 c8                	add    eax,ecx
c0009674:	11 da                	adc    edx,ebx
c0009676:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0009679:	c9                   	leave  
c000967a:	c3                   	ret    
c000967b:	90                   	nop

c000967c <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000967c:	55                   	push   ebp
c000967d:	89 e5                	mov    ebp,esp
c000967f:	56                   	push   esi
c0009680:	53                   	push   ebx
c0009681:	83 ec 10             	sub    esp,0x10
c0009684:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009687:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000968a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000968d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009690:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009693:	8b 00                	mov    eax,DWORD PTR [eax]
c0009695:	83 c0 2c             	add    eax,0x2c
c0009698:	8b 30                	mov    esi,DWORD PTR [eax]
c000969a:	a0 60 16 03 c0       	mov    al,ds:0xc0031660
c000969f:	0f b6 d0             	movzx  edx,al
c00096a2:	a1 64 16 03 c0       	mov    eax,ds:0xc0031664
c00096a7:	01 d0                	add    eax,edx
c00096a9:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00096af:	89 c2                	mov    edx,eax
c00096b1:	c1 fa 1f             	sar    edx,0x1f
c00096b4:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096b7:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c00096ba:	29 c1                	sub    ecx,eax
c00096bc:	19 d3                	sbb    ebx,edx
c00096be:	a0 61 16 03 c0       	mov    al,ds:0xc0031661
c00096c3:	0f b6 c0             	movzx  eax,al
c00096c6:	85 c0                	test   eax,eax
c00096c8:	74 0c                	je     c00096d6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x5a>
c00096ca:	b8 08 07 00 00       	mov    eax,0x708
c00096cf:	ba 00 00 00 00       	mov    edx,0x0
c00096d4:	eb 0a                	jmp    c00096e0 <Clock::setTimeInSecondsLocal(unsigned long long)+0x64>
c00096d6:	b8 00 00 00 00       	mov    eax,0x0
c00096db:	ba 00 00 00 00       	mov    edx,0x0
c00096e0:	29 c1                	sub    ecx,eax
c00096e2:	19 d3                	sbb    ebx,edx
c00096e4:	89 c8                	mov    eax,ecx
c00096e6:	89 da                	mov    edx,ebx
c00096e8:	83 ec 04             	sub    esp,0x4
c00096eb:	52                   	push   edx
c00096ec:	50                   	push   eax
c00096ed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00096f0:	ff d6                	call   esi
c00096f2:	83 c4 10             	add    esp,0x10
c00096f5:	8d 65 f8             	lea    esp,[ebp-0x8]
c00096f8:	5b                   	pop    ebx
c00096f9:	5e                   	pop    esi
c00096fa:	5d                   	pop    ebp
c00096fb:	c3                   	ret    

c00096fc <KeDatetimeToSeconds(datetime_t)>:
c00096fc:	55                   	push   ebp
c00096fd:	89 e5                	mov    ebp,esp
c00096ff:	53                   	push   ebx
c0009700:	83 ec 24             	sub    esp,0x24
c0009703:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009707:	2d 6c 07 00 00       	sub    eax,0x76c
c000970c:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0009710:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009713:	83 e8 01             	sub    eax,0x1
c0009716:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c0009719:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009720:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0009727:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000972e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0009735:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c0009738:	0f b6 c8             	movzx  ecx,al
c000973b:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000973e:	0f b6 d0             	movzx  edx,al
c0009741:	89 d0                	mov    eax,edx
c0009743:	c1 e0 04             	shl    eax,0x4
c0009746:	29 d0                	sub    eax,edx
c0009748:	c1 e0 02             	shl    eax,0x2
c000974b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000974e:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0009751:	0f b6 c0             	movzx  eax,al
c0009754:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000975a:	01 d0                	add    eax,edx
c000975c:	89 c2                	mov    edx,eax
c000975e:	c1 fa 1f             	sar    edx,0x1f
c0009761:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0009764:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009767:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c000976a:	0f b6 c0             	movzx  eax,al
c000976d:	83 e8 01             	sub    eax,0x1
c0009770:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c0009773:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009776:	0f b6 c0             	movzx  eax,al
c0009779:	8b 04 85 00 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7e00]
c0009780:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c0009783:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009786:	0f b6 c0             	movzx  eax,al
c0009789:	83 f8 01             	cmp    eax,0x1
c000978c:	76 7c                	jbe    c000980a <KeDatetimeToSeconds(datetime_t)+0x10e>
c000978e:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009792:	0f b7 c0             	movzx  eax,ax
c0009795:	83 e0 03             	and    eax,0x3
c0009798:	85 c0                	test   eax,eax
c000979a:	75 6e                	jne    c000980a <KeDatetimeToSeconds(datetime_t)+0x10e>
c000979c:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00097a0:	0f b7 c8             	movzx  ecx,ax
c00097a3:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00097a8:	89 c8                	mov    eax,ecx
c00097aa:	f7 e2                	mul    edx
c00097ac:	c1 ea 05             	shr    edx,0x5
c00097af:	89 d0                	mov    eax,edx
c00097b1:	c1 e0 02             	shl    eax,0x2
c00097b4:	01 d0                	add    eax,edx
c00097b6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00097bd:	01 d0                	add    eax,edx
c00097bf:	c1 e0 02             	shl    eax,0x2
c00097c2:	29 c1                	sub    ecx,eax
c00097c4:	89 c8                	mov    eax,ecx
c00097c6:	0f b7 c0             	movzx  eax,ax
c00097c9:	85 c0                	test   eax,eax
c00097cb:	75 39                	jne    c0009806 <KeDatetimeToSeconds(datetime_t)+0x10a>
c00097cd:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00097d1:	0f b7 c0             	movzx  eax,ax
c00097d4:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00097da:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00097df:	f7 e9                	imul   ecx
c00097e1:	c1 fa 07             	sar    edx,0x7
c00097e4:	89 c8                	mov    eax,ecx
c00097e6:	c1 f8 1f             	sar    eax,0x1f
c00097e9:	29 c2                	sub    edx,eax
c00097eb:	89 d0                	mov    eax,edx
c00097ed:	c1 e0 02             	shl    eax,0x2
c00097f0:	01 d0                	add    eax,edx
c00097f2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00097f9:	01 d0                	add    eax,edx
c00097fb:	c1 e0 04             	shl    eax,0x4
c00097fe:	29 c1                	sub    ecx,eax
c0009800:	89 ca                	mov    edx,ecx
c0009802:	85 d2                	test   edx,edx
c0009804:	75 04                	jne    c000980a <KeDatetimeToSeconds(datetime_t)+0x10e>
c0009806:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000980a:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000980e:	0f b7 c0             	movzx  eax,ax
c0009811:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009814:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009817:	83 f8 46             	cmp    eax,0x46
c000981a:	0f 9f c0             	setg   al
c000981d:	0f b6 c0             	movzx  eax,al
c0009820:	85 c0                	test   eax,eax
c0009822:	0f 84 a4 00 00 00    	je     c00098cc <KeDatetimeToSeconds(datetime_t)+0x1d0>
c0009828:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c000982f:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009833:	0f b7 d0             	movzx  edx,ax
c0009836:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009839:	39 c2                	cmp    edx,eax
c000983b:	0f 8e b8 01 00 00    	jle    c00099f9 <KeDatetimeToSeconds(datetime_t)+0x2fd>
c0009841:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009844:	83 e0 03             	and    eax,0x3
c0009847:	85 c0                	test   eax,eax
c0009849:	75 6b                	jne    c00098b6 <KeDatetimeToSeconds(datetime_t)+0x1ba>
c000984b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000984e:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009853:	f7 e9                	imul   ecx
c0009855:	c1 fa 05             	sar    edx,0x5
c0009858:	89 c8                	mov    eax,ecx
c000985a:	c1 f8 1f             	sar    eax,0x1f
c000985d:	29 c2                	sub    edx,eax
c000985f:	89 d0                	mov    eax,edx
c0009861:	c1 e0 02             	shl    eax,0x2
c0009864:	01 d0                	add    eax,edx
c0009866:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000986d:	01 d0                	add    eax,edx
c000986f:	c1 e0 02             	shl    eax,0x2
c0009872:	29 c1                	sub    ecx,eax
c0009874:	89 ca                	mov    edx,ecx
c0009876:	85 d2                	test   edx,edx
c0009878:	75 35                	jne    c00098af <KeDatetimeToSeconds(datetime_t)+0x1b3>
c000987a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000987d:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009883:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009888:	f7 e9                	imul   ecx
c000988a:	c1 fa 07             	sar    edx,0x7
c000988d:	89 c8                	mov    eax,ecx
c000988f:	c1 f8 1f             	sar    eax,0x1f
c0009892:	29 c2                	sub    edx,eax
c0009894:	89 d0                	mov    eax,edx
c0009896:	c1 e0 02             	shl    eax,0x2
c0009899:	01 d0                	add    eax,edx
c000989b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00098a2:	01 d0                	add    eax,edx
c00098a4:	c1 e0 04             	shl    eax,0x4
c00098a7:	29 c1                	sub    ecx,eax
c00098a9:	89 ca                	mov    edx,ecx
c00098ab:	85 d2                	test   edx,edx
c00098ad:	75 07                	jne    c00098b6 <KeDatetimeToSeconds(datetime_t)+0x1ba>
c00098af:	b8 6e 01 00 00       	mov    eax,0x16e
c00098b4:	eb 05                	jmp    c00098bb <KeDatetimeToSeconds(datetime_t)+0x1bf>
c00098b6:	b8 6d 01 00 00       	mov    eax,0x16d
c00098bb:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00098be:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00098c1:	83 c0 01             	add    eax,0x1
c00098c4:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00098c7:	e9 63 ff ff ff       	jmp    c000982f <KeDatetimeToSeconds(datetime_t)+0x133>
c00098cc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00098cf:	83 f8 45             	cmp    eax,0x45
c00098d2:	0f 8f 21 01 00 00    	jg     c00099f9 <KeDatetimeToSeconds(datetime_t)+0x2fd>
c00098d8:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c00098df:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00098e3:	0f b7 d0             	movzx  edx,ax
c00098e6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00098e9:	39 c2                	cmp    edx,eax
c00098eb:	0f 8d 8b 00 00 00    	jge    c000997c <KeDatetimeToSeconds(datetime_t)+0x280>
c00098f1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00098f4:	83 e0 03             	and    eax,0x3
c00098f7:	85 c0                	test   eax,eax
c00098f9:	75 6b                	jne    c0009966 <KeDatetimeToSeconds(datetime_t)+0x26a>
c00098fb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00098fe:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009903:	f7 e9                	imul   ecx
c0009905:	c1 fa 05             	sar    edx,0x5
c0009908:	89 c8                	mov    eax,ecx
c000990a:	c1 f8 1f             	sar    eax,0x1f
c000990d:	29 c2                	sub    edx,eax
c000990f:	89 d0                	mov    eax,edx
c0009911:	c1 e0 02             	shl    eax,0x2
c0009914:	01 d0                	add    eax,edx
c0009916:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000991d:	01 d0                	add    eax,edx
c000991f:	c1 e0 02             	shl    eax,0x2
c0009922:	29 c1                	sub    ecx,eax
c0009924:	89 ca                	mov    edx,ecx
c0009926:	85 d2                	test   edx,edx
c0009928:	75 35                	jne    c000995f <KeDatetimeToSeconds(datetime_t)+0x263>
c000992a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000992d:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009933:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009938:	f7 e9                	imul   ecx
c000993a:	c1 fa 07             	sar    edx,0x7
c000993d:	89 c8                	mov    eax,ecx
c000993f:	c1 f8 1f             	sar    eax,0x1f
c0009942:	29 c2                	sub    edx,eax
c0009944:	89 d0                	mov    eax,edx
c0009946:	c1 e0 02             	shl    eax,0x2
c0009949:	01 d0                	add    eax,edx
c000994b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009952:	01 d0                	add    eax,edx
c0009954:	c1 e0 04             	shl    eax,0x4
c0009957:	29 c1                	sub    ecx,eax
c0009959:	89 ca                	mov    edx,ecx
c000995b:	85 d2                	test   edx,edx
c000995d:	75 07                	jne    c0009966 <KeDatetimeToSeconds(datetime_t)+0x26a>
c000995f:	b8 6e 01 00 00       	mov    eax,0x16e
c0009964:	eb 05                	jmp    c000996b <KeDatetimeToSeconds(datetime_t)+0x26f>
c0009966:	b8 6d 01 00 00       	mov    eax,0x16d
c000996b:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c000996e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009971:	83 e8 01             	sub    eax,0x1
c0009974:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009977:	e9 63 ff ff ff       	jmp    c00098df <KeDatetimeToSeconds(datetime_t)+0x1e3>
c000997c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000997f:	83 e0 03             	and    eax,0x3
c0009982:	85 c0                	test   eax,eax
c0009984:	75 6b                	jne    c00099f1 <KeDatetimeToSeconds(datetime_t)+0x2f5>
c0009986:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009989:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000998e:	f7 e9                	imul   ecx
c0009990:	c1 fa 05             	sar    edx,0x5
c0009993:	89 c8                	mov    eax,ecx
c0009995:	c1 f8 1f             	sar    eax,0x1f
c0009998:	29 c2                	sub    edx,eax
c000999a:	89 d0                	mov    eax,edx
c000999c:	c1 e0 02             	shl    eax,0x2
c000999f:	01 d0                	add    eax,edx
c00099a1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00099a8:	01 d0                	add    eax,edx
c00099aa:	c1 e0 02             	shl    eax,0x2
c00099ad:	29 c1                	sub    ecx,eax
c00099af:	89 ca                	mov    edx,ecx
c00099b1:	85 d2                	test   edx,edx
c00099b3:	75 35                	jne    c00099ea <KeDatetimeToSeconds(datetime_t)+0x2ee>
c00099b5:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00099b8:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00099be:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00099c3:	f7 e9                	imul   ecx
c00099c5:	c1 fa 07             	sar    edx,0x7
c00099c8:	89 c8                	mov    eax,ecx
c00099ca:	c1 f8 1f             	sar    eax,0x1f
c00099cd:	29 c2                	sub    edx,eax
c00099cf:	89 d0                	mov    eax,edx
c00099d1:	c1 e0 02             	shl    eax,0x2
c00099d4:	01 d0                	add    eax,edx
c00099d6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00099dd:	01 d0                	add    eax,edx
c00099df:	c1 e0 04             	shl    eax,0x4
c00099e2:	29 c1                	sub    ecx,eax
c00099e4:	89 ca                	mov    edx,ecx
c00099e6:	85 d2                	test   edx,edx
c00099e8:	75 07                	jne    c00099f1 <KeDatetimeToSeconds(datetime_t)+0x2f5>
c00099ea:	b8 6e 01 00 00       	mov    eax,0x16e
c00099ef:	eb 05                	jmp    c00099f6 <KeDatetimeToSeconds(datetime_t)+0x2fa>
c00099f1:	b8 6d 01 00 00       	mov    eax,0x16d
c00099f6:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c00099f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00099fc:	89 c2                	mov    edx,eax
c00099fe:	c1 fa 1f             	sar    edx,0x1f
c0009a01:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c0009a07:	6b c8 00             	imul   ecx,eax,0x0
c0009a0a:	01 d9                	add    ecx,ebx
c0009a0c:	bb 80 51 01 00       	mov    ebx,0x15180
c0009a11:	f7 e3                	mul    ebx
c0009a13:	01 d1                	add    ecx,edx
c0009a15:	89 ca                	mov    edx,ecx
c0009a17:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0009a1a:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009a1d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009a20:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009a23:	83 c4 24             	add    esp,0x24
c0009a26:	5b                   	pop    ebx
c0009a27:	5d                   	pop    ebp
c0009a28:	c3                   	ret    
c0009a29:	90                   	nop

c0009a2a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0009a2a:	55                   	push   ebp
c0009a2b:	89 e5                	mov    ebp,esp
c0009a2d:	56                   	push   esi
c0009a2e:	53                   	push   ebx
c0009a2f:	83 ec 20             	sub    esp,0x20
c0009a32:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0009a35:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009a38:	e8 bf fc ff ff       	call   c00096fc <KeDatetimeToSeconds(datetime_t)>
c0009a3d:	83 c4 08             	add    esp,0x8
c0009a40:	89 c3                	mov    ebx,eax
c0009a42:	89 d6                	mov    esi,edx
c0009a44:	a0 60 16 03 c0       	mov    al,ds:0xc0031660
c0009a49:	0f b6 d0             	movzx  edx,al
c0009a4c:	a1 64 16 03 c0       	mov    eax,ds:0xc0031664
c0009a51:	01 d0                	add    eax,edx
c0009a53:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009a59:	89 c2                	mov    edx,eax
c0009a5b:	c1 fa 1f             	sar    edx,0x1f
c0009a5e:	29 c3                	sub    ebx,eax
c0009a60:	19 d6                	sbb    esi,edx
c0009a62:	a0 61 16 03 c0       	mov    al,ds:0xc0031661
c0009a67:	0f b6 c0             	movzx  eax,al
c0009a6a:	85 c0                	test   eax,eax
c0009a6c:	74 0c                	je     c0009a7a <Clock::setTimeInDatetimeLocal(datetime_t)+0x50>
c0009a6e:	b8 08 07 00 00       	mov    eax,0x708
c0009a73:	ba 00 00 00 00       	mov    edx,0x0
c0009a78:	eb 0a                	jmp    c0009a84 <Clock::setTimeInDatetimeLocal(datetime_t)+0x5a>
c0009a7a:	b8 00 00 00 00       	mov    eax,0x0
c0009a7f:	ba 00 00 00 00       	mov    edx,0x0
c0009a84:	29 c3                	sub    ebx,eax
c0009a86:	19 d6                	sbb    esi,edx
c0009a88:	89 d8                	mov    eax,ebx
c0009a8a:	89 f2                	mov    edx,esi
c0009a8c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009a8f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009a92:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009a95:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009a98:	89 d0                	mov    eax,edx
c0009a9a:	31 d2                	xor    edx,edx
c0009a9c:	89 c3                	mov    ebx,eax
c0009a9e:	89 d6                	mov    esi,edx
c0009aa0:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009aa3:	80 e5 ff             	and    ch,0xff
c0009aa6:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0009aa9:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c0009aac:	83 e1 00             	and    ecx,0x0
c0009aaf:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0009ab2:	83 ec 0c             	sub    esp,0xc
c0009ab5:	56                   	push   esi
c0009ab6:	53                   	push   ebx
c0009ab7:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0009aba:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0009abd:	68 ee 81 02 c0       	push   0xc00281ee
c0009ac2:	e8 9f d4 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009ac7:	83 c4 20             	add    esp,0x20
c0009aca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009acd:	8b 00                	mov    eax,DWORD PTR [eax]
c0009acf:	83 c0 2c             	add    eax,0x2c
c0009ad2:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ad4:	83 ec 04             	sub    esp,0x4
c0009ad7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009ada:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009add:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009ae0:	ff d0                	call   eax
c0009ae2:	83 c4 10             	add    esp,0x10
c0009ae5:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009ae8:	5b                   	pop    ebx
c0009ae9:	5e                   	pop    esi
c0009aea:	5d                   	pop    ebp
c0009aeb:	c3                   	ret    

c0009aec <KeSecondsToDatetime(unsigned long long)>:
c0009aec:	55                   	push   ebp
c0009aed:	89 e5                	mov    ebp,esp
c0009aef:	83 ec 48             	sub    esp,0x48
c0009af2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009af5:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0009af8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009afb:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0009afe:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0009b01:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009b04:	6a 00                	push   0x0
c0009b06:	68 80 51 01 00       	push   0x15180
c0009b0b:	52                   	push   edx
c0009b0c:	50                   	push   eax
c0009b0d:	e8 c2 86 01 00       	call   c00221d4 <__udivdi3>
c0009b12:	83 c4 10             	add    esp,0x10
c0009b15:	05 6c fa 0a 00       	add    eax,0xafa6c
c0009b1a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009b1d:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0009b20:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009b23:	6a 00                	push   0x0
c0009b25:	68 80 51 01 00       	push   0x15180
c0009b2a:	52                   	push   edx
c0009b2b:	50                   	push   eax
c0009b2c:	e8 a3 87 01 00       	call   c00222d4 <__umoddi3>
c0009b31:	83 c4 10             	add    esp,0x10
c0009b34:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009b37:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009b3b:	79 0b                	jns    c0009b48 <KeSecondsToDatetime(unsigned long long)+0x5c>
c0009b3d:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c0009b44:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c0009b48:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009b4b:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c0009b50:	89 c8                	mov    eax,ecx
c0009b52:	f7 ea                	imul   edx
c0009b54:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009b57:	c1 f8 0b             	sar    eax,0xb
c0009b5a:	89 c2                	mov    edx,eax
c0009b5c:	89 c8                	mov    eax,ecx
c0009b5e:	c1 f8 1f             	sar    eax,0x1f
c0009b61:	29 c2                	sub    edx,eax
c0009b63:	89 d0                	mov    eax,edx
c0009b65:	88 c2                	mov    dl,al
c0009b67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b6a:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0009b6d:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009b70:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c0009b75:	89 c8                	mov    eax,ecx
c0009b77:	f7 ea                	imul   edx
c0009b79:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009b7c:	c1 f8 0b             	sar    eax,0xb
c0009b7f:	89 c2                	mov    edx,eax
c0009b81:	89 c8                	mov    eax,ecx
c0009b83:	c1 f8 1f             	sar    eax,0x1f
c0009b86:	29 c2                	sub    edx,eax
c0009b88:	89 d0                	mov    eax,edx
c0009b8a:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009b90:	29 c1                	sub    ecx,eax
c0009b92:	89 c8                	mov    eax,ecx
c0009b94:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009b97:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009b9a:	ba 89 88 88 88       	mov    edx,0x88888889
c0009b9f:	89 c8                	mov    eax,ecx
c0009ba1:	f7 ea                	imul   edx
c0009ba3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009ba6:	c1 f8 05             	sar    eax,0x5
c0009ba9:	89 c2                	mov    edx,eax
c0009bab:	89 c8                	mov    eax,ecx
c0009bad:	c1 f8 1f             	sar    eax,0x1f
c0009bb0:	29 c2                	sub    edx,eax
c0009bb2:	89 d0                	mov    eax,edx
c0009bb4:	88 c2                	mov    dl,al
c0009bb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009bb9:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009bbc:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009bbf:	ba 89 88 88 88       	mov    edx,0x88888889
c0009bc4:	89 c8                	mov    eax,ecx
c0009bc6:	f7 ea                	imul   edx
c0009bc8:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009bcb:	c1 f8 05             	sar    eax,0x5
c0009bce:	89 c2                	mov    edx,eax
c0009bd0:	89 c8                	mov    eax,ecx
c0009bd2:	c1 f8 1f             	sar    eax,0x1f
c0009bd5:	29 c2                	sub    edx,eax
c0009bd7:	89 d0                	mov    eax,edx
c0009bd9:	c1 e0 04             	shl    eax,0x4
c0009bdc:	29 d0                	sub    eax,edx
c0009bde:	c1 e0 02             	shl    eax,0x2
c0009be1:	29 c1                	sub    ecx,eax
c0009be3:	89 ca                	mov    edx,ecx
c0009be5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009be8:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c0009beb:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009bef:	79 20                	jns    c0009c11 <KeSecondsToDatetime(unsigned long long)+0x125>
c0009bf1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009bf4:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c0009bfa:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009bff:	89 c8                	mov    eax,ecx
c0009c01:	f7 ea                	imul   edx
c0009c03:	c1 fa 0f             	sar    edx,0xf
c0009c06:	89 c8                	mov    eax,ecx
c0009c08:	c1 f8 1f             	sar    eax,0x1f
c0009c0b:	29 c2                	sub    edx,eax
c0009c0d:	89 d0                	mov    eax,edx
c0009c0f:	eb 18                	jmp    c0009c29 <KeSecondsToDatetime(unsigned long long)+0x13d>
c0009c11:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c0009c14:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009c19:	89 c8                	mov    eax,ecx
c0009c1b:	f7 ea                	imul   edx
c0009c1d:	c1 fa 0f             	sar    edx,0xf
c0009c20:	89 c8                	mov    eax,ecx
c0009c22:	c1 f8 1f             	sar    eax,0x1f
c0009c25:	29 c2                	sub    edx,eax
c0009c27:	89 d0                	mov    eax,edx
c0009c29:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0009c2c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0009c2f:	69 d0 4f c5 fd ff    	imul   edx,eax,0xfffdc54f
c0009c35:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009c38:	01 d0                	add    eax,edx
c0009c3a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0009c3d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009c40:	c1 e8 02             	shr    eax,0x2
c0009c43:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c0009c48:	f7 e2                	mul    edx
c0009c4a:	c1 ea 07             	shr    edx,0x7
c0009c4d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009c50:	29 d0                	sub    eax,edx
c0009c52:	89 c1                	mov    ecx,eax
c0009c54:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009c57:	c1 e8 02             	shr    eax,0x2
c0009c5a:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c0009c5f:	f7 e2                	mul    edx
c0009c61:	89 d0                	mov    eax,edx
c0009c63:	c1 e8 0b             	shr    eax,0xb
c0009c66:	01 c1                	add    ecx,eax
c0009c68:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009c6b:	c1 e8 04             	shr    eax,0x4
c0009c6e:	ba 41 d6 72 00       	mov    edx,0x72d641
c0009c73:	f7 e2                	mul    edx
c0009c75:	89 d0                	mov    eax,edx
c0009c77:	c1 e8 04             	shr    eax,0x4
c0009c7a:	29 c1                	sub    ecx,eax
c0009c7c:	ba 61 f3 19 67       	mov    edx,0x6719f361
c0009c81:	89 c8                	mov    eax,ecx
c0009c83:	f7 e2                	mul    edx
c0009c85:	89 c8                	mov    eax,ecx
c0009c87:	29 d0                	sub    eax,edx
c0009c89:	d1 e8                	shr    eax,1
c0009c8b:	01 d0                	add    eax,edx
c0009c8d:	c1 e8 08             	shr    eax,0x8
c0009c90:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0009c93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009c96:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c0009c9b:	f7 e2                	mul    edx
c0009c9d:	89 d1                	mov    ecx,edx
c0009c9f:	c1 e9 05             	shr    ecx,0x5
c0009ca2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0009ca5:	89 d0                	mov    eax,edx
c0009ca7:	c1 e0 03             	shl    eax,0x3
c0009caa:	01 d0                	add    eax,edx
c0009cac:	c1 e0 03             	shl    eax,0x3
c0009caf:	01 d0                	add    eax,edx
c0009cb1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009cb8:	01 c2                	add    edx,eax
c0009cba:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009cbd:	c1 e8 02             	shr    eax,0x2
c0009cc0:	01 d0                	add    eax,edx
c0009cc2:	29 c1                	sub    ecx,eax
c0009cc4:	89 ca                	mov    edx,ecx
c0009cc6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009cc9:	01 d0                	add    eax,edx
c0009ccb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009cce:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0009cd1:	89 d0                	mov    eax,edx
c0009cd3:	c1 e0 02             	shl    eax,0x2
c0009cd6:	01 d0                	add    eax,edx
c0009cd8:	83 c0 02             	add    eax,0x2
c0009cdb:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c0009ce0:	f7 e2                	mul    edx
c0009ce2:	89 d0                	mov    eax,edx
c0009ce4:	c1 e8 07             	shr    eax,0x7
c0009ce7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0009cea:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0009ced:	89 d0                	mov    eax,edx
c0009cef:	c1 e0 03             	shl    eax,0x3
c0009cf2:	01 d0                	add    eax,edx
c0009cf4:	89 c2                	mov    edx,eax
c0009cf6:	c1 e2 04             	shl    edx,0x4
c0009cf9:	01 d0                	add    eax,edx
c0009cfb:	83 c0 02             	add    eax,0x2
c0009cfe:	ba cd cc cc cc       	mov    edx,0xcccccccd
c0009d03:	f7 e2                	mul    edx
c0009d05:	c1 ea 02             	shr    edx,0x2
c0009d08:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009d0b:	29 d0                	sub    eax,edx
c0009d0d:	83 c0 01             	add    eax,0x1
c0009d10:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0009d13:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c0009d17:	77 07                	ja     c0009d20 <KeSecondsToDatetime(unsigned long long)+0x234>
c0009d19:	b8 02 00 00 00       	mov    eax,0x2
c0009d1e:	eb 05                	jmp    c0009d25 <KeSecondsToDatetime(unsigned long long)+0x239>
c0009d20:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c0009d25:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c0009d28:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009d2b:	89 d0                	mov    eax,edx
c0009d2d:	c1 e0 02             	shl    eax,0x2
c0009d30:	01 d0                	add    eax,edx
c0009d32:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009d39:	01 d0                	add    eax,edx
c0009d3b:	c1 e0 04             	shl    eax,0x4
c0009d3e:	89 c2                	mov    edx,eax
c0009d40:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009d43:	01 c2                	add    edx,eax
c0009d45:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c0009d49:	0f 96 c0             	setbe  al
c0009d4c:	0f b6 c0             	movzx  eax,al
c0009d4f:	01 d0                	add    eax,edx
c0009d51:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0009d54:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0009d57:	89 c2                	mov    edx,eax
c0009d59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009d5c:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0009d60:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0009d63:	83 c0 01             	add    eax,0x1
c0009d66:	88 c2                	mov    dl,al
c0009d68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009d6b:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009d6e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0009d71:	88 c2                	mov    dl,al
c0009d73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009d76:	88 10                	mov    BYTE PTR [eax],dl
c0009d78:	90                   	nop
c0009d79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009d7c:	c9                   	leave  
c0009d7d:	c2 04 00             	ret    0x4

c0009d80 <Clock::timeInDatetimeLocal()>:
c0009d80:	55                   	push   ebp
c0009d81:	89 e5                	mov    ebp,esp
c0009d83:	83 ec 08             	sub    esp,0x8
c0009d86:	83 ec 0c             	sub    esp,0xc
c0009d89:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009d8c:	e8 81 f8 ff ff       	call   c0009612 <Clock::timeInSecondsLocal()>
c0009d91:	83 c4 10             	add    esp,0x10
c0009d94:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0009d97:	83 ec 04             	sub    esp,0x4
c0009d9a:	52                   	push   edx
c0009d9b:	50                   	push   eax
c0009d9c:	51                   	push   ecx
c0009d9d:	e8 4a fd ff ff       	call   c0009aec <KeSecondsToDatetime(unsigned long long)>
c0009da2:	83 c4 0c             	add    esp,0xc
c0009da5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009da8:	c9                   	leave  
c0009da9:	c2 04 00             	ret    0x4

c0009dac <Device::hibernate()>:
c0009dac:	c3                   	ret    
c0009dad:	90                   	nop

c0009dae <Device::wake()>:
c0009dae:	c3                   	ret    
c0009daf:	90                   	nop

c0009db0 <Device::detect()>:
c0009db0:	c3                   	ret    
c0009db1:	90                   	nop

c0009db2 <Device::disableLegacy()>:
c0009db2:	c3                   	ret    
c0009db3:	90                   	nop

c0009db4 <Device::powerSaving(PowerSavingLevel)>:
c0009db4:	c3                   	ret    
c0009db5:	90                   	nop

c0009db6 <DriverlessDevice::close(int, int, void*)>:
c0009db6:	31 c0                	xor    eax,eax
c0009db8:	c3                   	ret    
c0009db9:	90                   	nop

c0009dba <DriverlessDevice::detect()>:
c0009dba:	c3                   	ret    
c0009dbb:	90                   	nop

c0009dbc <DriverlessDevice::open(int, int, void*)>:
c0009dbc:	83 ec 18             	sub    esp,0x18
c0009dbf:	68 6c 82 02 c0       	push   0xc002826c
c0009dc4:	e8 e3 61 00 00       	call   c000ffac <KePanic(char const*)>
c0009dc9:	83 c8 ff             	or     eax,0xffffffff
c0009dcc:	83 c4 1c             	add    esp,0x1c
c0009dcf:	c3                   	ret    

c0009dd0 <Device::~Device()>:
c0009dd0:	ba 10 83 02 c0       	mov    edx,0xc0028310
c0009dd5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009dd9:	89 10                	mov    DWORD PTR [eax],edx
c0009ddb:	90                   	nop
c0009ddc:	c3                   	ret    
c0009ddd:	90                   	nop

c0009dde <Device::~Device()>:
c0009dde:	83 ec 0c             	sub    esp,0xc
c0009de1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009de5:	e8 e6 ff ff ff       	call   c0009dd0 <Device::~Device()>
c0009dea:	83 c4 04             	add    esp,0x4
c0009ded:	83 ec 08             	sub    esp,0x8
c0009df0:	68 58 01 00 00       	push   0x158
c0009df5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009df9:	e8 62 39 00 00       	call   c000d760 <operator delete(void*, unsigned long)>
c0009dfe:	83 c4 10             	add    esp,0x10
c0009e01:	83 c4 0c             	add    esp,0xc
c0009e04:	c3                   	ret    
c0009e05:	90                   	nop

c0009e06 <Device::findAndLoadDriver()>:
c0009e06:	c7 44 24 04 8a 82 02 c0 	mov    DWORD PTR [esp+0x4],0xc002828a
c0009e0e:	e9 53 d1 ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>
c0009e13:	90                   	nop

c0009e14 <Device::preOpenPCI(PCIDeviceInfo)>:
c0009e14:	57                   	push   edi
c0009e15:	b9 09 00 00 00       	mov    ecx,0x9
c0009e1a:	56                   	push   esi
c0009e1b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0009e1f:	8d 74 24 10          	lea    esi,[esp+0x10]
c0009e23:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0009e2d:	81 c7 18 01 00 00    	add    edi,0x118
c0009e33:	fc                   	cld    
c0009e34:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0009e36:	5e                   	pop    esi
c0009e37:	5f                   	pop    edi
c0009e38:	c3                   	ret    
c0009e39:	90                   	nop

c0009e3a <Device::preOpenACPI(void*, char*, char*)>:
c0009e3a:	57                   	push   edi
c0009e3b:	b9 1e 00 00 00       	mov    ecx,0x1e
c0009e40:	56                   	push   esi
c0009e41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e45:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009e49:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009e4d:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0009e57:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0009e5d:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0009e63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009e65:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0009e6b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009e6f:	b9 0e 00 00 00       	mov    ecx,0xe
c0009e74:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009e76:	5e                   	pop    esi
c0009e77:	5f                   	pop    edi
c0009e78:	c3                   	ret    
c0009e79:	90                   	nop

c0009e7a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0009e7a:	53                   	push   ebx
c0009e7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009e7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009e83:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009e87:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009e8b:	0f b6 c0             	movzx  eax,al
c0009e8e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009e92:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009e96:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0009e9a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009e9e:	5b                   	pop    ebx
c0009e9f:	e9 2f 14 01 00       	jmp    c001b2d3 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c0009ea4 <Device::getParent()>:
c0009ea4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ea8:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0009eae:	c3                   	ret    
c0009eaf:	90                   	nop

c0009eb0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0009eb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009eb4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009eb8:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0009ebd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009ec1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009ec5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009ec9:	e9 76 15 01 00       	jmp    c001b444 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c0009ece <Device::addChild(Device*)>:
c0009ece:	53                   	push   ebx
c0009ecf:	83 ec 08             	sub    esp,0x8
c0009ed2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009ed6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009eda:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009ee0:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0009ee6:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009ee8:	85 d2                	test   edx,edx
c0009eea:	74 04                	je     c0009ef0 <Device::addChild(Device*)+0x22>
c0009eec:	89 d3                	mov    ebx,edx
c0009eee:	eb f6                	jmp    c0009ee6 <Device::addChild(Device*)+0x18>
c0009ef0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009ef3:	83 ec 0c             	sub    esp,0xc
c0009ef6:	6a 08                	push   0x8
c0009ef8:	e8 5b 5c 00 00       	call   c000fb58 <malloc>
c0009efd:	89 03                	mov    DWORD PTR [ebx],eax
c0009eff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009f05:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009f0c:	83 c4 18             	add    esp,0x18
c0009f0f:	5b                   	pop    ebx
c0009f10:	c3                   	ret    
c0009f11:	90                   	nop

c0009f12 <Device::removeAllChildren()>:
c0009f12:	56                   	push   esi
c0009f13:	53                   	push   ebx
c0009f14:	52                   	push   edx
c0009f15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009f19:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0009f1f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009f22:	74 17                	je     c0009f3b <Device::removeAllChildren()+0x29>
c0009f24:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009f27:	85 c0                	test   eax,eax
c0009f29:	74 0c                	je     c0009f37 <Device::removeAllChildren()+0x25>
c0009f2b:	8b 10                	mov    edx,DWORD PTR [eax]
c0009f2d:	83 ec 0c             	sub    esp,0xc
c0009f30:	50                   	push   eax
c0009f31:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0009f34:	83 c4 10             	add    esp,0x10
c0009f37:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009f39:	eb e4                	jmp    c0009f1f <Device::removeAllChildren()+0xd>
c0009f3b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009f41:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009f47:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009f4d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009f54:	58                   	pop    eax
c0009f55:	5b                   	pop    ebx
c0009f56:	5e                   	pop    esi
c0009f57:	c3                   	ret    

c0009f58 <Device::hibernateAll()>:
c0009f58:	53                   	push   ebx
c0009f59:	83 ec 14             	sub    esp,0x14
c0009f5c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009f60:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009f62:	53                   	push   ebx
c0009f63:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009f66:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009f6c:	83 c4 10             	add    esp,0x10
c0009f6f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009f72:	74 0f                	je     c0009f83 <Device::hibernateAll()+0x2b>
c0009f74:	83 ec 0c             	sub    esp,0xc
c0009f77:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009f7a:	e8 d9 ff ff ff       	call   c0009f58 <Device::hibernateAll()>
c0009f7f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009f81:	eb e9                	jmp    c0009f6c <Device::hibernateAll()+0x14>
c0009f83:	83 c4 08             	add    esp,0x8
c0009f86:	5b                   	pop    ebx
c0009f87:	c3                   	ret    

c0009f88 <Device::wakeAll()>:
c0009f88:	53                   	push   ebx
c0009f89:	83 ec 14             	sub    esp,0x14
c0009f8c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009f90:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009f92:	53                   	push   ebx
c0009f93:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0009f96:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009f9c:	83 c4 10             	add    esp,0x10
c0009f9f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009fa2:	74 0f                	je     c0009fb3 <Device::wakeAll()+0x2b>
c0009fa4:	83 ec 0c             	sub    esp,0xc
c0009fa7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009faa:	e8 d9 ff ff ff       	call   c0009f88 <Device::wakeAll()>
c0009faf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009fb1:	eb e9                	jmp    c0009f9c <Device::wakeAll()+0x14>
c0009fb3:	83 c4 08             	add    esp,0x8
c0009fb6:	5b                   	pop    ebx
c0009fb7:	c3                   	ret    

c0009fb8 <Device::detectAll()>:
c0009fb8:	53                   	push   ebx
c0009fb9:	83 ec 14             	sub    esp,0x14
c0009fbc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009fc0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009fc2:	53                   	push   ebx
c0009fc3:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0009fc6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009fcc:	83 c4 10             	add    esp,0x10
c0009fcf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009fd2:	74 0f                	je     c0009fe3 <Device::detectAll()+0x2b>
c0009fd4:	83 ec 0c             	sub    esp,0xc
c0009fd7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009fda:	e8 d9 ff ff ff       	call   c0009fb8 <Device::detectAll()>
c0009fdf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009fe1:	eb e9                	jmp    c0009fcc <Device::detectAll()+0x14>
c0009fe3:	83 c4 08             	add    esp,0x8
c0009fe6:	5b                   	pop    ebx
c0009fe7:	c3                   	ret    

c0009fe8 <Device::disableLegacyAll()>:
c0009fe8:	c3                   	ret    
c0009fe9:	90                   	nop

c0009fea <Device::loadDriversForAll()>:
c0009fea:	c3                   	ret    
c0009feb:	90                   	nop

c0009fec <Device::powerSavingAll(PowerSavingLevel)>:
c0009fec:	56                   	push   esi
c0009fed:	53                   	push   ebx
c0009fee:	83 ec 0c             	sub    esp,0xc
c0009ff1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009ff5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009ff9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009ffb:	56                   	push   esi
c0009ffc:	53                   	push   ebx
c0009ffd:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000a000:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a006:	83 c4 10             	add    esp,0x10
c000a009:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a00c:	74 0f                	je     c000a01d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000a00e:	52                   	push   edx
c000a00f:	52                   	push   edx
c000a010:	56                   	push   esi
c000a011:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a014:	e8 d3 ff ff ff       	call   c0009fec <Device::powerSavingAll(PowerSavingLevel)>
c000a019:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a01b:	eb e9                	jmp    c000a006 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000a01d:	58                   	pop    eax
c000a01e:	5b                   	pop    ebx
c000a01f:	5e                   	pop    esi
c000a020:	c3                   	ret    
c000a021:	90                   	nop

c000a022 <Device::setName(char const*)>:
c000a022:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000a02a:	e9 21 66 ff ff       	jmp    c0000650 <strcpy>
c000a02f:	90                   	nop

c000a030 <Device::Device(char const*)>:
c000a030:	83 ec 1c             	sub    esp,0x1c
c000a033:	ba 10 83 02 c0       	mov    edx,0xc0028310
c000a038:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a03c:	89 10                	mov    DWORD PTR [eax],edx
c000a03e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a042:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000a04c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a050:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000a05a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a05e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000a068:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a06c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000a076:	83 ec 08             	sub    esp,0x8
c000a079:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a07d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a081:	e8 9c ff ff ff       	call   c000a022 <Device::setName(char const*)>
c000a086:	83 c4 10             	add    esp,0x10
c000a089:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000a091:	83 ec 0c             	sub    esp,0xc
c000a094:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a098:	e8 bb 5a 00 00       	call   c000fb58 <malloc>
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000a0a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a0ad:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000a0b1:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000a0b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a0bb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000a0c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000a0c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a0cb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000a0d1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a0d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a0dc:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000a0e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a0e7:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000a0ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a0f2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000a0fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a100:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000a10a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a10e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000a118:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a11c:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000a126:	90                   	nop
c000a127:	83 c4 1c             	add    esp,0x1c
c000a12a:	c3                   	ret    
c000a12b:	90                   	nop

c000a12c <Device::getName()>:
c000a12c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a130:	05 d0 00 00 00       	add    eax,0xd0
c000a135:	c3                   	ret    

c000a136 <Device::closeAll()>:
c000a136:	53                   	push   ebx
c000a137:	83 ec 08             	sub    esp,0x8
c000a13a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a13e:	53                   	push   ebx
c000a13f:	e8 e8 ff ff ff       	call   c000a12c <Device::getName()>
c000a144:	52                   	push   edx
c000a145:	50                   	push   eax
c000a146:	68 c4 82 02 c0       	push   0xc00282c4
c000a14b:	e8 16 ce ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000a150:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a152:	6a 00                	push   0x0
c000a154:	6a 00                	push   0x0
c000a156:	6a 00                	push   0x0
c000a158:	53                   	push   ebx
c000a159:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000a15c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a162:	83 c4 20             	add    esp,0x20
c000a165:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a168:	74 12                	je     c000a17c <Device::closeAll()+0x46>
c000a16a:	83 ec 0c             	sub    esp,0xc
c000a16d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a170:	e8 c1 ff ff ff       	call   c000a136 <Device::closeAll()>
c000a175:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a177:	83 c4 10             	add    esp,0x10
c000a17a:	eb e9                	jmp    c000a165 <Device::closeAll()+0x2f>
c000a17c:	83 c4 08             	add    esp,0x8
c000a17f:	5b                   	pop    ebx
c000a180:	c3                   	ret    
c000a181:	90                   	nop

c000a182 <DriverlessDevice::DriverlessDevice(char const*)>:
c000a182:	83 ec 0c             	sub    esp,0xc
c000a185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a189:	83 ec 08             	sub    esp,0x8
c000a18c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a190:	50                   	push   eax
c000a191:	e8 9a fe ff ff       	call   c000a030 <Device::Device(char const*)>
c000a196:	83 c4 10             	add    esp,0x10
c000a199:	ba 3c 83 02 c0       	mov    edx,0xc002833c
c000a19e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1a2:	89 10                	mov    DWORD PTR [eax],edx
c000a1a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1a8:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000a1b2:	90                   	nop
c000a1b3:	83 c4 0c             	add    esp,0xc
c000a1b6:	c3                   	ret    
c000a1b7:	90                   	nop

c000a1b8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000a1b8:	57                   	push   edi
c000a1b9:	56                   	push   esi
c000a1ba:	53                   	push   ebx
c000a1bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a1bf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000a1c3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a1c7:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000a1cd:	75 0c                	jne    c000a1db <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000a1cf:	52                   	push   edx
c000a1d0:	52                   	push   edx
c000a1d1:	53                   	push   ebx
c000a1d2:	56                   	push   esi
c000a1d3:	e8 ea c6 01 00       	call   c00268c2 <LinkedList<Device>::addElement(Device*)>
c000a1d8:	83 c4 10             	add    esp,0x10
c000a1db:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a1e1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a1e4:	74 12                	je     c000a1f8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000a1e6:	50                   	push   eax
c000a1e7:	57                   	push   edi
c000a1e8:	56                   	push   esi
c000a1e9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a1ec:	e8 c7 ff ff ff       	call   c000a1b8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000a1f1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a1f3:	83 c4 10             	add    esp,0x10
c000a1f6:	eb e9                	jmp    c000a1e1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000a1f8:	5b                   	pop    ebx
c000a1f9:	5e                   	pop    esi
c000a1fa:	5f                   	pop    edi
c000a1fb:	c3                   	ret    

c000a1fc <getDevicesOfType(DeviceType)>:
c000a1fc:	53                   	push   ebx
c000a1fd:	83 ec 14             	sub    esp,0x14
c000a200:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a204:	53                   	push   ebx
c000a205:	e8 94 c7 01 00       	call   c002699e <LinkedList<Device>::LinkedList()>
c000a20a:	83 c4 0c             	add    esp,0xc
c000a20d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a211:	53                   	push   ebx
c000a212:	ff 35 08 21 03 c0    	push   DWORD PTR ds:0xc0032108
c000a218:	e8 9b ff ff ff       	call   c000a1b8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000a21d:	83 c4 18             	add    esp,0x18
c000a220:	89 d8                	mov    eax,ebx
c000a222:	5b                   	pop    ebx
c000a223:	c2 04 00             	ret    0x4
c000a226:	66 90                	xchg   ax,ax

c000a228 <HardDiskController::HardDiskController(char const*)>:
c000a228:	83 ec 0c             	sub    esp,0xc
c000a22b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a22f:	83 ec 08             	sub    esp,0x8
c000a232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a236:	50                   	push   eax
c000a237:	e8 f4 fd ff ff       	call   c000a030 <Device::Device(char const*)>
c000a23c:	83 c4 10             	add    esp,0x10
c000a23f:	ba 68 83 02 c0       	mov    edx,0xc0028368
c000a244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a248:	89 10                	mov    DWORD PTR [eax],edx
c000a24a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a24e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000a258:	90                   	nop
c000a259:	83 c4 0c             	add    esp,0xc
c000a25c:	c3                   	ret    
c000a25d:	90                   	nop
c000a25e:	66 90                	xchg   ax,ax

c000a260 <HardDiskController::~HardDiskController()>:
c000a260:	83 ec 0c             	sub    esp,0xc
c000a263:	ba 68 83 02 c0       	mov    edx,0xc0028368
c000a268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a26c:	89 10                	mov    DWORD PTR [eax],edx
c000a26e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a272:	83 ec 0c             	sub    esp,0xc
c000a275:	50                   	push   eax
c000a276:	e8 55 fb ff ff       	call   c0009dd0 <Device::~Device()>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	90                   	nop
c000a27f:	83 c4 0c             	add    esp,0xc
c000a282:	c3                   	ret    
c000a283:	90                   	nop

c000a284 <HardDiskController::~HardDiskController()>:
c000a284:	83 ec 0c             	sub    esp,0xc
c000a287:	83 ec 0c             	sub    esp,0xc
c000a28a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a28e:	e8 cd ff ff ff       	call   c000a260 <HardDiskController::~HardDiskController()>
c000a293:	83 c4 10             	add    esp,0x10
c000a296:	83 ec 08             	sub    esp,0x8
c000a299:	68 58 01 00 00       	push   0x158
c000a29e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a2:	e8 b9 34 00 00       	call   c000d760 <operator delete(void*, unsigned long)>
c000a2a7:	83 c4 10             	add    esp,0x10
c000a2aa:	83 c4 0c             	add    esp,0xc
c000a2ad:	c3                   	ret    

c000a2ae <PhysicalDisk::eject()>:
c000a2ae:	83 c8 ff             	or     eax,0xffffffff
c000a2b1:	c3                   	ret    

c000a2b2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000a2b2:	83 ec 0c             	sub    esp,0xc
c000a2b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2b9:	83 ec 08             	sub    esp,0x8
c000a2bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2c0:	50                   	push   eax
c000a2c1:	e8 6a fd ff ff       	call   c000a030 <Device::Device(char const*)>
c000a2c6:	83 c4 10             	add    esp,0x10
c000a2c9:	ba 94 83 02 c0       	mov    edx,0xc0028394
c000a2ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2d2:	89 10                	mov    DWORD PTR [eax],edx
c000a2d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2d8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a2df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2e3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000a2ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2ee:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000a2f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a300:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000a306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a30a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000a314:	90                   	nop
c000a315:	83 c4 0c             	add    esp,0xc
c000a318:	c3                   	ret    
c000a319:	90                   	nop

c000a31a <PhysicalDisk::startCache()>:
c000a31a:	56                   	push   esi
c000a31b:	53                   	push   ebx
c000a31c:	83 ec 10             	sub    esp,0x10
c000a31f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a323:	6a 44                	push   0x44
c000a325:	e8 2e 58 00 00       	call   c000fb58 <malloc>
c000a32a:	89 c6                	mov    esi,eax
c000a32c:	58                   	pop    eax
c000a32d:	5a                   	pop    edx
c000a32e:	53                   	push   ebx
c000a32f:	56                   	push   esi
c000a330:	e8 b7 13 00 00       	call   c000b6ec <VCache::VCache(PhysicalDisk*)>
c000a335:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000a33b:	83 c4 14             	add    esp,0x14
c000a33e:	5b                   	pop    ebx
c000a33f:	5e                   	pop    esi
c000a340:	c3                   	ret    
c000a341:	90                   	nop

c000a342 <PhysicalDisk::~PhysicalDisk()>:
c000a342:	83 ec 0c             	sub    esp,0xc
c000a345:	ba 94 83 02 c0       	mov    edx,0xc0028394
c000a34a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a34e:	89 10                	mov    DWORD PTR [eax],edx
c000a350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a354:	83 ec 0c             	sub    esp,0xc
c000a357:	50                   	push   eax
c000a358:	e8 73 fa ff ff       	call   c0009dd0 <Device::~Device()>
c000a35d:	83 c4 10             	add    esp,0x10
c000a360:	90                   	nop
c000a361:	83 c4 0c             	add    esp,0xc
c000a364:	c3                   	ret    
c000a365:	90                   	nop

c000a366 <PhysicalDisk::~PhysicalDisk()>:
c000a366:	83 ec 0c             	sub    esp,0xc
c000a369:	83 ec 0c             	sub    esp,0xc
c000a36c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a370:	e8 cd ff ff ff       	call   c000a342 <PhysicalDisk::~PhysicalDisk()>
c000a375:	83 c4 10             	add    esp,0x10
c000a378:	83 ec 08             	sub    esp,0x8
c000a37b:	68 6c 01 00 00       	push   0x16c
c000a380:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a384:	e8 d7 33 00 00       	call   c000d760 <operator delete(void*, unsigned long)>
c000a389:	83 c4 10             	add    esp,0x10
c000a38c:	83 c4 0c             	add    esp,0xc
c000a38f:	c3                   	ret    

c000a390 <startGUI(void*)>:
c000a390:	55                   	push   ebp
c000a391:	89 e5                	mov    ebp,esp
c000a393:	83 ec 08             	sub    esp,0x8
c000a396:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c000a39e:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c000a3a3:	85 c0                	test   eax,eax
c000a3a5:	75 01                	jne    c000a3a8 <startGUI(void*)+0x18>
c000a3a7:	fb                   	sti    
c000a3a8:	a1 08 21 03 c0       	mov    eax,ds:0xc0032108
c000a3ad:	83 ec 04             	sub    esp,0x4
c000a3b0:	6a 00                	push   0x0
c000a3b2:	50                   	push   eax
c000a3b3:	68 c4 83 02 c0       	push   0xc00283c4
c000a3b8:	e8 f5 bd 00 00       	call   c00161b2 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000a3bd:	83 c4 10             	add    esp,0x10
c000a3c0:	a1 08 21 03 c0       	mov    eax,ds:0xc0032108
c000a3c5:	83 ec 04             	sub    esp,0x4
c000a3c8:	6a 00                	push   0x0
c000a3ca:	50                   	push   eax
c000a3cb:	68 de 83 02 c0       	push   0xc00283de
c000a3d0:	e8 dd bd 00 00       	call   c00161b2 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000a3d5:	83 c4 10             	add    esp,0x10
c000a3d8:	eb fe                	jmp    c000a3d8 <startGUI(void*)+0x48>

c000a3da <startGUIVESA(void*)>:
c000a3da:	55                   	push   ebp
c000a3db:	89 e5                	mov    ebp,esp
c000a3dd:	83 ec 08             	sub    esp,0x8
c000a3e0:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c000a3e8:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c000a3ed:	85 c0                	test   eax,eax
c000a3ef:	75 01                	jne    c000a3f2 <startGUIVESA(void*)+0x18>
c000a3f1:	fb                   	sti    
c000a3f2:	a1 08 21 03 c0       	mov    eax,ds:0xc0032108
c000a3f7:	83 ec 04             	sub    esp,0x4
c000a3fa:	6a 00                	push   0x0
c000a3fc:	50                   	push   eax
c000a3fd:	68 fc 83 02 c0       	push   0xc00283fc
c000a402:	e8 ab bd 00 00       	call   c00161b2 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000a407:	83 c4 10             	add    esp,0x10
c000a40a:	a1 08 21 03 c0       	mov    eax,ds:0xc0032108
c000a40f:	83 ec 04             	sub    esp,0x4
c000a412:	6a 00                	push   0x0
c000a414:	50                   	push   eax
c000a415:	68 de 83 02 c0       	push   0xc00283de
c000a41a:	e8 93 bd 00 00       	call   c00161b2 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000a41f:	83 c4 10             	add    esp,0x10
c000a422:	eb fe                	jmp    c000a422 <startGUIVESA(void*)+0x48>

c000a424 <sendKeyToTerminal(unsigned char)>:
c000a424:	55                   	push   ebp
c000a425:	89 e5                	mov    ebp,esp
c000a427:	83 ec 28             	sub    esp,0x28
c000a42a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a42d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000a430:	a1 f4 21 03 c0       	mov    eax,ds:0xc00321f4
c000a435:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000a439:	83 ec 08             	sub    esp,0x8
c000a43c:	52                   	push   edx
c000a43d:	50                   	push   eax
c000a43e:	e8 f1 87 00 00       	call   c0012c34 <VgaText::receiveKey(unsigned char)>
c000a443:	83 c4 10             	add    esp,0x10
c000a446:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a44a:	83 f8 0a             	cmp    eax,0xa
c000a44d:	74 16                	je     c000a465 <sendKeyToTerminal(unsigned char)+0x41>
c000a44f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a453:	83 f8 03             	cmp    eax,0x3
c000a456:	74 0d                	je     c000a465 <sendKeyToTerminal(unsigned char)+0x41>
c000a458:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a45c:	83 f8 1c             	cmp    eax,0x1c
c000a45f:	0f 85 92 00 00 00    	jne    c000a4f7 <sendKeyToTerminal(unsigned char)+0xd3>
c000a465:	fa                   	cli    
c000a466:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c000a46b:	83 c0 01             	add    eax,0x1
c000a46e:	a3 30 23 03 c0       	mov    ds:0xc0032330,eax
c000a473:	a1 2c 23 03 c0       	mov    eax,ds:0xc003232c
c000a478:	83 c0 01             	add    eax,0x1
c000a47b:	a3 2c 23 03 c0       	mov    ds:0xc003232c,eax
c000a480:	a1 80 16 03 c0       	mov    eax,ds:0xc0031680
c000a485:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a488:	c7 05 80 16 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031680,0x0
c000a492:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000a496:	74 1f                	je     c000a4b7 <sendKeyToTerminal(unsigned char)+0x93>
c000a498:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a49b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000a49e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a4a1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a4a4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a4a7:	83 ec 0c             	sub    esp,0xc
c000a4aa:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000a4ad:	e8 da c9 00 00       	call   c0016e8c <unblockTask(ThreadControlBlock*)>
c000a4b2:	83 c4 10             	add    esp,0x10
c000a4b5:	eb db                	jmp    c000a492 <sendKeyToTerminal(unsigned char)+0x6e>
c000a4b7:	a1 2c 23 03 c0       	mov    eax,ds:0xc003232c
c000a4bc:	83 e8 01             	sub    eax,0x1
c000a4bf:	a3 2c 23 03 c0       	mov    ds:0xc003232c,eax
c000a4c4:	a1 2c 23 03 c0       	mov    eax,ds:0xc003232c
c000a4c9:	85 c0                	test   eax,eax
c000a4cb:	75 18                	jne    c000a4e5 <sendKeyToTerminal(unsigned char)+0xc1>
c000a4cd:	a1 28 23 03 c0       	mov    eax,ds:0xc0032328
c000a4d2:	85 c0                	test   eax,eax
c000a4d4:	74 0f                	je     c000a4e5 <sendKeyToTerminal(unsigned char)+0xc1>
c000a4d6:	c7 05 28 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032328,0x0
c000a4e0:	e8 4f c6 00 00       	call   c0016b34 <schedule()>
c000a4e5:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c000a4ed:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c000a4f2:	85 c0                	test   eax,eax
c000a4f4:	75 01                	jne    c000a4f7 <sendKeyToTerminal(unsigned char)+0xd3>
c000a4f6:	fb                   	sti    
c000a4f7:	90                   	nop
c000a4f8:	c9                   	leave  
c000a4f9:	c3                   	ret    

c000a4fa <sendKeyboardToken(KeyboardToken)>:
c000a4fa:	55                   	push   ebp
c000a4fb:	89 e5                	mov    ebp,esp
c000a4fd:	83 ec 18             	sub    esp,0x18
c000a500:	e8 24 63 00 00       	call   c0010829 <KeUserIOReceived()>
c000a505:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000a508:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a50b:	0f b7 c0             	movzx  eax,ax
c000a50e:	83 f2 01             	xor    edx,0x1
c000a511:	88 90 a0 16 03 c0    	mov    BYTE PTR [eax-0x3ffce960],dl
c000a517:	a1 88 16 03 c0       	mov    eax,ds:0xc0031688
c000a51c:	85 c0                	test   eax,eax
c000a51e:	74 24                	je     c000a544 <sendKeyboardToken(KeyboardToken)+0x4a>
c000a520:	8b 15 88 16 03 c0    	mov    edx,DWORD PTR ds:0xc0031688
c000a526:	83 ec 04             	sub    esp,0x4
c000a529:	68 a0 16 03 c0       	push   0xc00316a0
c000a52e:	83 ec 08             	sub    esp,0x8
c000a531:	89 e0                	mov    eax,esp
c000a533:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000a536:	89 08                	mov    DWORD PTR [eax],ecx
c000a538:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000a53b:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000a53f:	ff d2                	call   edx
c000a541:	83 c4 10             	add    esp,0x10
c000a544:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000a548:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000a54b:	0f b6 c0             	movzx  eax,al
c000a54e:	85 c0                	test   eax,eax
c000a550:	0f 84 da 00 00 00    	je     c000a630 <sendKeyboardToken(KeyboardToken)+0x136>
c000a556:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a559:	0f b7 c0             	movzx  eax,ax
c000a55c:	3d 18 03 00 00       	cmp    eax,0x318
c000a561:	75 06                	jne    c000a569 <sendKeyboardToken(KeyboardToken)+0x6f>
c000a563:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000a569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a56c:	0f b7 c0             	movzx  eax,ax
c000a56f:	3d 19 03 00 00       	cmp    eax,0x319
c000a574:	75 06                	jne    c000a57c <sendKeyboardToken(KeyboardToken)+0x82>
c000a576:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000a57c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a57f:	0f b7 c0             	movzx  eax,ax
c000a582:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a587:	75 06                	jne    c000a58f <sendKeyboardToken(KeyboardToken)+0x95>
c000a589:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000a58f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a592:	0f b7 c0             	movzx  eax,ax
c000a595:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a59a:	75 06                	jne    c000a5a2 <sendKeyboardToken(KeyboardToken)+0xa8>
c000a59c:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000a5a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5a5:	0f b7 c0             	movzx  eax,ax
c000a5a8:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a5ad:	75 06                	jne    c000a5b5 <sendKeyboardToken(KeyboardToken)+0xbb>
c000a5af:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000a5b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5b8:	0f b7 c0             	movzx  eax,ax
c000a5bb:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a5c0:	75 06                	jne    c000a5c8 <sendKeyboardToken(KeyboardToken)+0xce>
c000a5c2:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a5c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5cb:	0f b7 c0             	movzx  eax,ax
c000a5ce:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a5d3:	75 06                	jne    c000a5db <sendKeyboardToken(KeyboardToken)+0xe1>
c000a5d5:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000a5db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5de:	0f b7 c0             	movzx  eax,ax
c000a5e1:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a5e6:	75 06                	jne    c000a5ee <sendKeyboardToken(KeyboardToken)+0xf4>
c000a5e8:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000a5ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5f1:	0f b7 c0             	movzx  eax,ax
c000a5f4:	3d 20 03 00 00       	cmp    eax,0x320
c000a5f9:	75 06                	jne    c000a601 <sendKeyboardToken(KeyboardToken)+0x107>
c000a5fb:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000a601:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a604:	0f b7 c0             	movzx  eax,ax
c000a607:	3d 21 03 00 00       	cmp    eax,0x321
c000a60c:	75 06                	jne    c000a614 <sendKeyboardToken(KeyboardToken)+0x11a>
c000a60e:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000a614:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a617:	0f b7 c0             	movzx  eax,ax
c000a61a:	3d 22 03 00 00       	cmp    eax,0x322
c000a61f:	0f 85 f1 00 00 00    	jne    c000a716 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a625:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000a62b:	e9 e6 00 00 00       	jmp    c000a716 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a630:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a633:	0f b7 c0             	movzx  eax,ax
c000a636:	3d 18 03 00 00       	cmp    eax,0x318
c000a63b:	75 0a                	jne    c000a647 <sendKeyboardToken(KeyboardToken)+0x14d>
c000a63d:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000a643:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a647:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a64a:	0f b7 c0             	movzx  eax,ax
c000a64d:	3d 19 03 00 00       	cmp    eax,0x319
c000a652:	75 0a                	jne    c000a65e <sendKeyboardToken(KeyboardToken)+0x164>
c000a654:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000a65a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a65e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a661:	0f b7 c0             	movzx  eax,ax
c000a664:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a669:	75 0a                	jne    c000a675 <sendKeyboardToken(KeyboardToken)+0x17b>
c000a66b:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000a671:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a675:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a678:	0f b7 c0             	movzx  eax,ax
c000a67b:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a680:	75 0a                	jne    c000a68c <sendKeyboardToken(KeyboardToken)+0x192>
c000a682:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000a688:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a68c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a68f:	0f b7 c0             	movzx  eax,ax
c000a692:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a697:	75 0a                	jne    c000a6a3 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000a699:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000a69f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a6a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a6a6:	0f b7 c0             	movzx  eax,ax
c000a6a9:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a6ae:	75 0a                	jne    c000a6ba <sendKeyboardToken(KeyboardToken)+0x1c0>
c000a6b0:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a6b6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a6ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a6bd:	0f b7 c0             	movzx  eax,ax
c000a6c0:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a6c5:	75 0a                	jne    c000a6d1 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000a6c7:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000a6cd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a6d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a6d4:	0f b7 c0             	movzx  eax,ax
c000a6d7:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a6dc:	75 0a                	jne    c000a6e8 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000a6de:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000a6e4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a6e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a6eb:	0f b7 c0             	movzx  eax,ax
c000a6ee:	3d 20 03 00 00       	cmp    eax,0x320
c000a6f3:	75 0a                	jne    c000a6ff <sendKeyboardToken(KeyboardToken)+0x205>
c000a6f5:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000a6fb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a6ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a702:	0f b7 c0             	movzx  eax,ax
c000a705:	3d 21 03 00 00       	cmp    eax,0x321
c000a70a:	75 0a                	jne    c000a716 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a70c:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000a712:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a716:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a719:	0f b7 c0             	movzx  eax,ax
c000a71c:	3d 00 02 00 00       	cmp    eax,0x200
c000a721:	75 2f                	jne    c000a752 <sendKeyboardToken(KeyboardToken)+0x258>
c000a723:	a0 a0 1a 03 c0       	mov    al,ds:0xc0031aa0
c000a728:	83 f0 01             	xor    eax,0x1
c000a72b:	0f b6 c0             	movzx  eax,al
c000a72e:	85 c0                	test   eax,eax
c000a730:	74 20                	je     c000a752 <sendKeyboardToken(KeyboardToken)+0x258>
c000a732:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c000a737:	6a 01                	push   0x1
c000a739:	6a 00                	push   0x0
c000a73b:	68 90 a3 00 c0       	push   0xc000a390
c000a740:	50                   	push   eax
c000a741:	e8 3a c1 00 00       	call   c0016880 <Process::createThread(void (*)(void*), void*, int)>
c000a746:	83 c4 10             	add    esp,0x10
c000a749:	c6 05 a0 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031aa0,0x1
c000a750:	eb 3a                	jmp    c000a78c <sendKeyboardToken(KeyboardToken)+0x292>
c000a752:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a755:	0f b7 c0             	movzx  eax,ax
c000a758:	3d 01 02 00 00       	cmp    eax,0x201
c000a75d:	75 2d                	jne    c000a78c <sendKeyboardToken(KeyboardToken)+0x292>
c000a75f:	a0 a0 1a 03 c0       	mov    al,ds:0xc0031aa0
c000a764:	83 f0 01             	xor    eax,0x1
c000a767:	0f b6 c0             	movzx  eax,al
c000a76a:	85 c0                	test   eax,eax
c000a76c:	74 1e                	je     c000a78c <sendKeyboardToken(KeyboardToken)+0x292>
c000a76e:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c000a773:	6a 01                	push   0x1
c000a775:	6a 00                	push   0x0
c000a777:	68 da a3 00 c0       	push   0xc000a3da
c000a77c:	50                   	push   eax
c000a77d:	e8 fe c0 00 00       	call   c0016880 <Process::createThread(void (*)(void*), void*, int)>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	c6 05 a0 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031aa0,0x1
c000a78c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a78f:	0f b7 c0             	movzx  eax,ax
c000a792:	3d 25 03 00 00       	cmp    eax,0x325
c000a797:	75 06                	jne    c000a79f <sendKeyboardToken(KeyboardToken)+0x2a5>
c000a799:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000a79f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a7a2:	0f b7 c0             	movzx  eax,ax
c000a7a5:	3d 24 03 00 00       	cmp    eax,0x324
c000a7aa:	75 06                	jne    c000a7b2 <sendKeyboardToken(KeyboardToken)+0x2b8>
c000a7ac:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000a7b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a7b5:	0f b7 c0             	movzx  eax,ax
c000a7b8:	3d 23 03 00 00       	cmp    eax,0x323
c000a7bd:	75 06                	jne    c000a7c5 <sendKeyboardToken(KeyboardToken)+0x2cb>
c000a7bf:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000a7c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a7c8:	0f b7 c0             	movzx  eax,ax
c000a7cb:	3d 26 03 00 00       	cmp    eax,0x326
c000a7d0:	75 06                	jne    c000a7d8 <sendKeyboardToken(KeyboardToken)+0x2de>
c000a7d2:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000a7d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a7db:	0f b7 c0             	movzx  eax,ax
c000a7de:	3d 27 03 00 00       	cmp    eax,0x327
c000a7e3:	75 06                	jne    c000a7eb <sendKeyboardToken(KeyboardToken)+0x2f1>
c000a7e5:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000a7eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a7ee:	0f b7 c0             	movzx  eax,ax
c000a7f1:	3d 22 03 00 00       	cmp    eax,0x322
c000a7f6:	75 06                	jne    c000a7fe <sendKeyboardToken(KeyboardToken)+0x304>
c000a7f8:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000a7fe:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000a802:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a805:	83 f0 01             	xor    eax,0x1
c000a808:	0f b6 c0             	movzx  eax,al
c000a80b:	85 c0                	test   eax,eax
c000a80d:	74 7c                	je     c000a88b <sendKeyboardToken(KeyboardToken)+0x391>
c000a80f:	a0 a1 17 03 c0       	mov    al,ds:0xc00317a1
c000a814:	0f b6 c0             	movzx  eax,al
c000a817:	85 c0                	test   eax,eax
c000a819:	74 43                	je     c000a85e <sendKeyboardToken(KeyboardToken)+0x364>
c000a81b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a81f:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000a823:	85 c0                	test   eax,eax
c000a825:	74 2b                	je     c000a852 <sendKeyboardToken(KeyboardToken)+0x358>
c000a827:	8b 15 a4 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031aa4
c000a82d:	89 d0                	mov    eax,edx
c000a82f:	c1 e0 02             	shl    eax,0x2
c000a832:	01 d0                	add    eax,edx
c000a834:	d1 e0                	shl    eax,1
c000a836:	a3 a4 1a 03 c0       	mov    ds:0xc0031aa4,eax
c000a83b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a83e:	0f b7 c0             	movzx  eax,ax
c000a841:	8d 50 d0             	lea    edx,[eax-0x30]
c000a844:	a1 a4 1a 03 c0       	mov    eax,ds:0xc0031aa4
c000a849:	01 d0                	add    eax,edx
c000a84b:	a3 a4 1a 03 c0       	mov    ds:0xc0031aa4,eax
c000a850:	eb 71                	jmp    c000a8c3 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a852:	c7 05 a4 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031aa4,0x0
c000a85c:	eb 65                	jmp    c000a8c3 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a85e:	a1 a4 1a 03 c0       	mov    eax,ds:0xc0031aa4
c000a863:	85 c0                	test   eax,eax
c000a865:	74 18                	je     c000a87f <sendKeyboardToken(KeyboardToken)+0x385>
c000a867:	a1 a4 1a 03 c0       	mov    eax,ds:0xc0031aa4
c000a86c:	0f b6 c0             	movzx  eax,al
c000a86f:	83 ec 0c             	sub    esp,0xc
c000a872:	50                   	push   eax
c000a873:	e8 ac fb ff ff       	call   c000a424 <sendKeyToTerminal(unsigned char)>
c000a878:	83 c4 10             	add    esp,0x10
c000a87b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a87f:	c7 05 a4 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031aa4,0x0
c000a889:	eb 38                	jmp    c000a8c3 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a88b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a88e:	0f b7 c0             	movzx  eax,ax
c000a891:	3d 01 01 00 00       	cmp    eax,0x101
c000a896:	75 2b                	jne    c000a8c3 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a898:	a1 a4 1a 03 c0       	mov    eax,ds:0xc0031aa4
c000a89d:	85 c0                	test   eax,eax
c000a89f:	74 18                	je     c000a8b9 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000a8a1:	a1 a4 1a 03 c0       	mov    eax,ds:0xc0031aa4
c000a8a6:	0f b6 c0             	movzx  eax,al
c000a8a9:	83 ec 0c             	sub    esp,0xc
c000a8ac:	50                   	push   eax
c000a8ad:	e8 72 fb ff ff       	call   c000a424 <sendKeyToTerminal(unsigned char)>
c000a8b2:	83 c4 10             	add    esp,0x10
c000a8b5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a8b9:	c7 05 a4 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031aa4,0x0
c000a8c3:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a8c6:	83 f0 01             	xor    eax,0x1
c000a8c9:	0f b6 c0             	movzx  eax,al
c000a8cc:	85 c0                	test   eax,eax
c000a8ce:	74 5a                	je     c000a92a <sendKeyboardToken(KeyboardToken)+0x430>
c000a8d0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a8d3:	83 f0 01             	xor    eax,0x1
c000a8d6:	0f b6 c0             	movzx  eax,al
c000a8d9:	85 c0                	test   eax,eax
c000a8db:	74 4d                	je     c000a92a <sendKeyboardToken(KeyboardToken)+0x430>
c000a8dd:	a0 a0 17 03 c0       	mov    al,ds:0xc00317a0
c000a8e2:	83 f0 01             	xor    eax,0x1
c000a8e5:	0f b6 c0             	movzx  eax,al
c000a8e8:	85 c0                	test   eax,eax
c000a8ea:	74 3e                	je     c000a92a <sendKeyboardToken(KeyboardToken)+0x430>
c000a8ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a8ef:	0f b7 c0             	movzx  eax,ax
c000a8f2:	83 f8 1f             	cmp    eax,0x1f
c000a8f5:	76 0b                	jbe    c000a902 <sendKeyboardToken(KeyboardToken)+0x408>
c000a8f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a8fa:	0f b7 c0             	movzx  eax,ax
c000a8fd:	83 f8 7e             	cmp    eax,0x7e
c000a900:	76 16                	jbe    c000a918 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a902:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a905:	0f b7 c0             	movzx  eax,ax
c000a908:	83 f8 0a             	cmp    eax,0xa
c000a90b:	74 0b                	je     c000a918 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a90d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a910:	0f b7 c0             	movzx  eax,ax
c000a913:	83 f8 08             	cmp    eax,0x8
c000a916:	75 12                	jne    c000a92a <sendKeyboardToken(KeyboardToken)+0x430>
c000a918:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a91b:	0f b6 c0             	movzx  eax,al
c000a91e:	83 ec 0c             	sub    esp,0xc
c000a921:	50                   	push   eax
c000a922:	e8 fd fa ff ff       	call   c000a424 <sendKeyToTerminal(unsigned char)>
c000a927:	83 c4 10             	add    esp,0x10
c000a92a:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a92d:	83 f0 01             	xor    eax,0x1
c000a930:	0f b6 c0             	movzx  eax,al
c000a933:	85 c0                	test   eax,eax
c000a935:	74 5d                	je     c000a994 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a937:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a93a:	83 f0 01             	xor    eax,0x1
c000a93d:	0f b6 c0             	movzx  eax,al
c000a940:	85 c0                	test   eax,eax
c000a942:	74 50                	je     c000a994 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a944:	a0 a0 17 03 c0       	mov    al,ds:0xc00317a0
c000a949:	0f b6 c0             	movzx  eax,al
c000a94c:	85 c0                	test   eax,eax
c000a94e:	74 44                	je     c000a994 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a950:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a953:	0f b7 c0             	movzx  eax,ax
c000a956:	83 f8 3f             	cmp    eax,0x3f
c000a959:	76 39                	jbe    c000a994 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a95b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a95e:	0f b7 c0             	movzx  eax,ax
c000a961:	83 f8 7f             	cmp    eax,0x7f
c000a964:	77 2e                	ja     c000a994 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a966:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a969:	88 c2                	mov    dl,al
c000a96b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a96e:	0f b7 c0             	movzx  eax,ax
c000a971:	83 f8 5f             	cmp    eax,0x5f
c000a974:	76 04                	jbe    c000a97a <sendKeyboardToken(KeyboardToken)+0x480>
c000a976:	b0 20                	mov    al,0x20
c000a978:	eb 02                	jmp    c000a97c <sendKeyboardToken(KeyboardToken)+0x482>
c000a97a:	b0 00                	mov    al,0x0
c000a97c:	89 d1                	mov    ecx,edx
c000a97e:	29 c1                	sub    ecx,eax
c000a980:	89 c8                	mov    eax,ecx
c000a982:	83 e8 40             	sub    eax,0x40
c000a985:	0f b6 c0             	movzx  eax,al
c000a988:	83 ec 0c             	sub    esp,0xc
c000a98b:	50                   	push   eax
c000a98c:	e8 93 fa ff ff       	call   c000a424 <sendKeyToTerminal(unsigned char)>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a997:	0f b7 c0             	movzx  eax,ax
c000a99a:	3d 00 03 00 00       	cmp    eax,0x300
c000a99f:	75 12                	jne    c000a9b3 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a9a1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a9a4:	83 f0 01             	xor    eax,0x1
c000a9a7:	0f b6 c0             	movzx  eax,al
c000a9aa:	85 c0                	test   eax,eax
c000a9ac:	74 05                	je     c000a9b3 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a9ae:	e8 86 79 00 00       	call   c0012339 <doTerminalCycle()>
c000a9b3:	90                   	nop
c000a9b4:	c9                   	leave  
c000a9b5:	c3                   	ret    

c000a9b6 <clearInternalKeybuffer(VgaText*)>:
c000a9b6:	55                   	push   ebp
c000a9b7:	89 e5                	mov    ebp,esp
c000a9b9:	83 ec 08             	sub    esp,0x8
c000a9bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a9bf:	05 02 01 00 00       	add    eax,0x102
c000a9c4:	83 ec 0c             	sub    esp,0xc
c000a9c7:	50                   	push   eax
c000a9c8:	e8 b3 5b ff ff       	call   c0000580 <strlen>
c000a9cd:	83 c4 10             	add    esp,0x10
c000a9d0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a9d3:	81 c2 02 01 00 00    	add    edx,0x102
c000a9d9:	83 ec 04             	sub    esp,0x4
c000a9dc:	50                   	push   eax
c000a9dd:	6a 00                	push   0x0
c000a9df:	52                   	push   edx
c000a9e0:	e8 0b 5b ff ff       	call   c00004f0 <memset>
c000a9e5:	83 c4 10             	add    esp,0x10
c000a9e8:	90                   	nop
c000a9e9:	c9                   	leave  
c000a9ea:	c3                   	ret    

c000a9eb <readKeyboard(VgaText*, char*, unsigned long)>:
c000a9eb:	55                   	push   ebp
c000a9ec:	89 e5                	mov    ebp,esp
c000a9ee:	83 ec 18             	sub    esp,0x18
c000a9f1:	a1 88 16 03 c0       	mov    eax,ds:0xc0031688
c000a9f6:	85 c0                	test   eax,eax
c000a9f8:	74 2a                	je     c000aa24 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000a9fa:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000aa00:	8b 15 88 16 03 c0    	mov    edx,DWORD PTR ds:0xc0031688
c000aa06:	83 ec 04             	sub    esp,0x4
c000aa09:	68 a0 16 03 c0       	push   0xc00316a0
c000aa0e:	83 ec 08             	sub    esp,0x8
c000aa11:	89 e0                	mov    eax,esp
c000aa13:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000aa16:	89 08                	mov    DWORD PTR [eax],ecx
c000aa18:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000aa1b:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000aa1f:	ff d2                	call   edx
c000aa21:	83 c4 10             	add    esp,0x10
c000aa24:	fb                   	sti    
c000aa25:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000aa2c:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000aa30:	0f 84 08 01 00 00    	je     c000ab3e <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000aa36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aa39:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000aa3f:	0f be c0             	movsx  eax,al
c000aa42:	85 c0                	test   eax,eax
c000aa44:	75 27                	jne    c000aa6d <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000aa46:	fa                   	cli    
c000aa47:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c000aa4c:	83 c0 01             	add    eax,0x1
c000aa4f:	a3 30 23 03 c0       	mov    ds:0xc0032330,eax
c000aa54:	e8 db c0 00 00       	call   c0016b34 <schedule()>
c000aa59:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c000aa61:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c000aa66:	85 c0                	test   eax,eax
c000aa68:	75 cc                	jne    c000aa36 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000aa6a:	fb                   	sti    
c000aa6b:	eb c9                	jmp    c000aa36 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000aa6d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000aa70:	8d 50 01             	lea    edx,[eax+0x1]
c000aa73:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000aa76:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000aa79:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000aa7f:	88 10                	mov    BYTE PTR [eax],dl
c000aa81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aa84:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000aa8a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000aa8d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000aa91:	83 f8 03             	cmp    eax,0x3
c000aa94:	75 1e                	jne    c000aab4 <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000aa96:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000aa9b:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa9d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000aaa0:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000aaa6:	83 ec 08             	sub    esp,0x8
c000aaa9:	6a 02                	push   0x2
c000aaab:	50                   	push   eax
c000aaac:	e8 0a 67 00 00       	call   c00111bb <KeRaiseSignal(SigHandlerBlock*, int)>
c000aab1:	83 c4 10             	add    esp,0x10
c000aab4:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000aab8:	83 f8 1c             	cmp    eax,0x1c
c000aabb:	75 1e                	jne    c000aadb <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000aabd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000aac2:	8b 00                	mov    eax,DWORD PTR [eax]
c000aac4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000aac7:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000aacd:	83 ec 08             	sub    esp,0x8
c000aad0:	6a 09                	push   0x9
c000aad2:	50                   	push   eax
c000aad3:	e8 e3 66 00 00       	call   c00111bb <KeRaiseSignal(SigHandlerBlock*, int)>
c000aad8:	83 c4 10             	add    esp,0x10
c000aadb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aade:	05 02 01 00 00       	add    eax,0x102
c000aae3:	83 ec 0c             	sub    esp,0xc
c000aae6:	50                   	push   eax
c000aae7:	e8 94 5a ff ff       	call   c0000580 <strlen>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000aaf2:	81 c2 02 01 00 00    	add    edx,0x102
c000aaf8:	8d 4a 01             	lea    ecx,[edx+0x1]
c000aafb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000aafe:	81 c2 02 01 00 00    	add    edx,0x102
c000ab04:	83 ec 04             	sub    esp,0x4
c000ab07:	50                   	push   eax
c000ab08:	51                   	push   ecx
c000ab09:	52                   	push   edx
c000ab0a:	e8 c1 58 ff ff       	call   c00003d0 <memmove>
c000ab0f:	83 c4 10             	add    esp,0x10
c000ab12:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000ab16:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000ab1a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ab1e:	83 f8 0a             	cmp    eax,0xa
c000ab21:	74 16                	je     c000ab39 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000ab23:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ab27:	83 f8 03             	cmp    eax,0x3
c000ab2a:	74 0d                	je     c000ab39 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000ab2c:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ab30:	83 f8 1c             	cmp    eax,0x1c
c000ab33:	0f 85 f3 fe ff ff    	jne    c000aa2c <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000ab39:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ab3c:	eb 03                	jmp    c000ab41 <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000ab3e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ab41:	c9                   	leave  
c000ab42:	c3                   	ret    
c000ab43:	90                   	nop

c000ab44 <Keyboard::Keyboard(char const*)>:
c000ab44:	83 ec 0c             	sub    esp,0xc
c000ab47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab4b:	83 ec 08             	sub    esp,0x8
c000ab4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab52:	50                   	push   eax
c000ab53:	e8 d8 f4 ff ff       	call   c000a030 <Device::Device(char const*)>
c000ab58:	83 c4 10             	add    esp,0x10
c000ab5b:	ba 20 84 02 c0       	mov    edx,0xc0028420
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	89 10                	mov    DWORD PTR [eax],edx
c000ab66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab6a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000ab74:	c6 05 84 16 03 c0 01 	mov    BYTE PTR ds:0xc0031684,0x1
c000ab7b:	90                   	nop
c000ab7c:	83 c4 0c             	add    esp,0xc
c000ab7f:	c3                   	ret    

c000ab80 <Keyboard::~Keyboard()>:
c000ab80:	83 ec 0c             	sub    esp,0xc
c000ab83:	ba 20 84 02 c0       	mov    edx,0xc0028420
c000ab88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8c:	89 10                	mov    DWORD PTR [eax],edx
c000ab8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab92:	83 ec 0c             	sub    esp,0xc
c000ab95:	50                   	push   eax
c000ab96:	e8 35 f2 ff ff       	call   c0009dd0 <Device::~Device()>
c000ab9b:	83 c4 10             	add    esp,0x10
c000ab9e:	90                   	nop
c000ab9f:	83 c4 0c             	add    esp,0xc
c000aba2:	c3                   	ret    
c000aba3:	90                   	nop

c000aba4 <Keyboard::~Keyboard()>:
c000aba4:	83 ec 0c             	sub    esp,0xc
c000aba7:	83 ec 0c             	sub    esp,0xc
c000abaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abae:	e8 cd ff ff ff       	call   c000ab80 <Keyboard::~Keyboard()>
c000abb3:	83 c4 10             	add    esp,0x10
c000abb6:	83 ec 08             	sub    esp,0x8
c000abb9:	68 5c 01 00 00       	push   0x15c
c000abbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abc2:	e8 99 2b 00 00       	call   c000d760 <operator delete(void*, unsigned long)>
c000abc7:	83 c4 10             	add    esp,0x10
c000abca:	83 c4 0c             	add    esp,0xc
c000abcd:	c3                   	ret    

c000abce <LogicalDisk::close(int, int, void*)>:
c000abce:	83 c8 ff             	or     eax,0xffffffff
c000abd1:	c3                   	ret    

c000abd2 <LogicalDisk::~LogicalDisk()>:
c000abd2:	83 ec 0c             	sub    esp,0xc
c000abd5:	ba 98 84 02 c0       	mov    edx,0xc0028498
c000abda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abde:	89 10                	mov    DWORD PTR [eax],edx
c000abe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abe4:	83 ec 0c             	sub    esp,0xc
c000abe7:	50                   	push   eax
c000abe8:	e8 e3 f1 ff ff       	call   c0009dd0 <Device::~Device()>
c000abed:	83 c4 10             	add    esp,0x10
c000abf0:	90                   	nop
c000abf1:	83 c4 0c             	add    esp,0xc
c000abf4:	c3                   	ret    
c000abf5:	90                   	nop

c000abf6 <LogicalDisk::~LogicalDisk()>:
c000abf6:	83 ec 0c             	sub    esp,0xc
c000abf9:	83 ec 0c             	sub    esp,0xc
c000abfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac00:	e8 cd ff ff ff       	call   c000abd2 <LogicalDisk::~LogicalDisk()>
c000ac05:	83 c4 10             	add    esp,0x10
c000ac08:	83 ec 08             	sub    esp,0x8
c000ac0b:	68 78 01 00 00       	push   0x178
c000ac10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac14:	e8 47 2b 00 00       	call   c000d760 <operator delete(void*, unsigned long)>
c000ac19:	83 c4 10             	add    esp,0x10
c000ac1c:	83 c4 0c             	add    esp,0xc
c000ac1f:	c3                   	ret    

c000ac20 <LogicalDisk::open(int, int, void*)>:
c000ac20:	83 ec 18             	sub    esp,0x18
c000ac23:	68 4c 84 02 c0       	push   0xc002844c
c000ac28:	e8 7f 53 00 00       	call   c000ffac <KePanic(char const*)>
c000ac2d:	83 c8 ff             	or     eax,0xffffffff
c000ac30:	83 c4 1c             	add    esp,0x1c
c000ac33:	c3                   	ret    

c000ac34 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000ac34:	53                   	push   ebx
c000ac35:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ac39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ac3d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac41:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000ac47:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000ac4d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000ac53:	77 10                	ja     c000ac65 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000ac55:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000ac5b:	89 d3                	mov    ebx,edx
c000ac5d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000ac63:	72 05                	jb     c000ac6a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000ac65:	83 c8 ff             	or     eax,0xffffffff
c000ac68:	89 c2                	mov    edx,eax
c000ac6a:	5b                   	pop    ebx
c000ac6b:	c3                   	ret    

c000ac6c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000ac6c:	56                   	push   esi
c000ac6d:	83 c8 ff             	or     eax,0xffffffff
c000ac70:	53                   	push   ebx
c000ac71:	89 c2                	mov    edx,eax
c000ac73:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ac77:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ac7b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ac7f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ac85:	77 27                	ja     c000acae <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ac87:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000ac8d:	89 d8                	mov    eax,ebx
c000ac8f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000ac95:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ac9a:	89 c2                	mov    edx,eax
c000ac9c:	73 10                	jae    c000acae <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ac9e:	89 c8                	mov    eax,ecx
c000aca0:	89 da                	mov    edx,ebx
c000aca2:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000aca8:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000acae:	5b                   	pop    ebx
c000acaf:	5e                   	pop    esi
c000acb0:	c3                   	ret    
c000acb1:	90                   	nop

c000acb2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000acb2:	83 ec 1c             	sub    esp,0x1c
c000acb5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000acb9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000acc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000acc5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000acc9:	89 04 24             	mov    DWORD PTR [esp],eax
c000accc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000acd0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000acd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000acd8:	83 ec 08             	sub    esp,0x8
c000acdb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000acdf:	50                   	push   eax
c000ace0:	e8 4b f3 ff ff       	call   c000a030 <Device::Device(char const*)>
c000ace5:	83 c4 10             	add    esp,0x10
c000ace8:	ba 98 84 02 c0       	mov    edx,0xc0028498
c000aced:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000acf1:	89 10                	mov    DWORD PTR [eax],edx
c000acf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000acf7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000acfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad02:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000ad09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad0d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ad14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad18:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000ad22:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ad26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ad2a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ad2e:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000ad34:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000ad3a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ad3e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad41:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ad45:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000ad4b:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000ad51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad55:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ad59:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000ad5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad63:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000ad6d:	90                   	nop
c000ad6e:	83 c4 1c             	add    esp,0x1c
c000ad71:	c3                   	ret    

c000ad72 <LogicalDisk::assignDriveLetter()>:
c000ad72:	55                   	push   ebp
c000ad73:	57                   	push   edi
c000ad74:	56                   	push   esi
c000ad75:	53                   	push   ebx
c000ad76:	83 ec 14             	sub    esp,0x14
c000ad79:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ad7d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000ad83:	b0 41                	mov    al,0x41
c000ad85:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000ad8b:	84 d2                	test   dl,dl
c000ad8d:	75 02                	jne    c000ad91 <LogicalDisk::assignDriveLetter()+0x1f>
c000ad8f:	b0 43                	mov    al,0x43
c000ad91:	8b 3d c0 1a 03 c0    	mov    edi,DWORD PTR ds:0xc0031ac0
c000ad97:	0f b6 ca             	movzx  ecx,dl
c000ad9a:	0f be e8             	movsx  ebp,al
c000ad9d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ada1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000ada5:	8b 3d c4 1a 03 c0    	mov    edi,DWORD PTR ds:0xc0031ac4
c000adab:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000adaf:	3c 43                	cmp    al,0x43
c000adb1:	75 10                	jne    c000adc3 <LogicalDisk::assignDriveLetter()+0x51>
c000adb3:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000adba:	75 5a                	jne    c000ae16 <LogicalDisk::assignDriveLetter()+0xa4>
c000adbc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000adc1:	75 53                	jne    c000ae16 <LogicalDisk::assignDriveLetter()+0xa4>
c000adc3:	8d 75 bf             	lea    esi,[ebp-0x41]
c000adc6:	ba 01 00 00 00       	mov    edx,0x1
c000adcb:	89 34 24             	mov    DWORD PTR [esp],esi
c000adce:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000add1:	d3 e2                	shl    edx,cl
c000add3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000add7:	89 d7                	mov    edi,edx
c000add9:	89 d6                	mov    esi,edx
c000addb:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000addf:	c1 ff 1f             	sar    edi,0x1f
c000ade2:	21 f9                	and    ecx,edi
c000ade4:	09 d1                	or     ecx,edx
c000ade6:	75 2e                	jne    c000ae16 <LogicalDisk::assignDriveLetter()+0xa4>
c000ade8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000adec:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000adf0:	09 f2                	or     edx,esi
c000adf2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000adf5:	89 15 c0 1a 03 c0    	mov    DWORD PTR ds:0xc0031ac0,edx
c000adfb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000adff:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000ae05:	89 1c b5 e0 1a 03 c0 	mov    DWORD PTR [esi*4-0x3ffce520],ebx
c000ae0c:	09 fa                	or     edx,edi
c000ae0e:	89 15 c4 1a 03 c0    	mov    DWORD PTR ds:0xc0031ac4,edx
c000ae14:	eb 0d                	jmp    c000ae23 <LogicalDisk::assignDriveLetter()+0xb1>
c000ae16:	8d 50 01             	lea    edx,[eax+0x1]
c000ae19:	45                   	inc    ebp
c000ae1a:	80 fa 5b             	cmp    dl,0x5b
c000ae1d:	88 d0                	mov    al,dl
c000ae1f:	75 8e                	jne    c000adaf <LogicalDisk::assignDriveLetter()+0x3d>
c000ae21:	31 c0                	xor    eax,eax
c000ae23:	83 c4 14             	add    esp,0x14
c000ae26:	5b                   	pop    ebx
c000ae27:	5e                   	pop    esi
c000ae28:	5f                   	pop    edi
c000ae29:	5d                   	pop    ebp
c000ae2a:	c3                   	ret    
c000ae2b:	90                   	nop

c000ae2c <LogicalDisk::mount()>:
c000ae2c:	56                   	push   esi
c000ae2d:	53                   	push   ebx
c000ae2e:	53                   	push   ebx
c000ae2f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ae33:	8b 1d 04 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031304
c000ae39:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000ae43:	85 db                	test   ebx,ebx
c000ae45:	74 27                	je     c000ae6e <LogicalDisk::mount()+0x42>
c000ae47:	51                   	push   ecx
c000ae48:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000ae4f:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae51:	83 e8 41             	sub    eax,0x41
c000ae54:	50                   	push   eax
c000ae55:	56                   	push   esi
c000ae56:	53                   	push   ebx
c000ae57:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000ae5a:	83 c4 10             	add    esp,0x10
c000ae5d:	84 c0                	test   al,al
c000ae5f:	74 08                	je     c000ae69 <LogicalDisk::mount()+0x3d>
c000ae61:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000ae67:	eb 07                	jmp    c000ae70 <LogicalDisk::mount()+0x44>
c000ae69:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000ae6c:	eb d5                	jmp    c000ae43 <LogicalDisk::mount()+0x17>
c000ae6e:	31 c0                	xor    eax,eax
c000ae70:	5a                   	pop    edx
c000ae71:	5b                   	pop    ebx
c000ae72:	5e                   	pop    esi
c000ae73:	c3                   	ret    

c000ae74 <LogicalDisk::unmount()>:
c000ae74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae78:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000ae82:	c3                   	ret    
c000ae83:	90                   	nop

c000ae84 <LogicalDisk::eject()>:
c000ae84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae88:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ae8e:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ae94:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000ae97:	90                   	nop

c000ae98 <LogicalDisk::unassignDriveLetter()>:
c000ae98:	57                   	push   edi
c000ae99:	56                   	push   esi
c000ae9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae9e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000aea5:	85 c9                	test   ecx,ecx
c000aea7:	75 0f                	jne    c000aeb8 <LogicalDisk::unassignDriveLetter()+0x20>
c000aea9:	c7 44 24 0c 70 84 02 c0 	mov    DWORD PTR [esp+0xc],0xc0028470
c000aeb1:	5e                   	pop    esi
c000aeb2:	5f                   	pop    edi
c000aeb3:	e9 f4 50 00 00       	jmp    c000ffac <KePanic(char const*)>
c000aeb8:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000aebf:	83 e9 41             	sub    ecx,0x41
c000aec2:	b8 01 00 00 00       	mov    eax,0x1
c000aec7:	c7 04 8d e0 1a 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffce520],0x0
c000aed2:	d3 e0                	shl    eax,cl
c000aed4:	89 c7                	mov    edi,eax
c000aed6:	f7 d0                	not    eax
c000aed8:	c1 ff 1f             	sar    edi,0x1f
c000aedb:	21 05 c0 1a 03 c0    	and    DWORD PTR ds:0xc0031ac0,eax
c000aee1:	89 fe                	mov    esi,edi
c000aee3:	f7 d6                	not    esi
c000aee5:	21 35 c4 1a 03 c0    	and    DWORD PTR ds:0xc0031ac4,esi
c000aeeb:	5e                   	pop    esi
c000aeec:	5f                   	pop    edi
c000aeed:	c3                   	ret    

c000aeee <LogicalDisk::read(unsigned long long, int, void*)>:
c000aeee:	57                   	push   edi
c000aeef:	56                   	push   esi
c000aef0:	53                   	push   ebx
c000aef1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aef5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aef9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aefd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000af01:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000af07:	77 41                	ja     c000af4a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000af09:	99                   	cdq    
c000af0a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000af10:	01 c8                	add    eax,ecx
c000af12:	11 da                	adc    edx,ebx
c000af14:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000af1a:	19 d7                	sbb    edi,edx
c000af1c:	72 33                	jb     c000af51 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000af1e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000af24:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000af2a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000af2e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000af32:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000af38:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000af3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000af42:	5b                   	pop    ebx
c000af43:	5e                   	pop    esi
c000af44:	5f                   	pop    edi
c000af45:	e9 bc 0b 00 00       	jmp    c000bb06 <VCache::read(unsigned long long, int, void*)>
c000af4a:	b8 05 00 00 00       	mov    eax,0x5
c000af4f:	eb 05                	jmp    c000af56 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000af51:	b8 07 00 00 00       	mov    eax,0x7
c000af56:	5b                   	pop    ebx
c000af57:	5e                   	pop    esi
c000af58:	5f                   	pop    edi
c000af59:	c3                   	ret    

c000af5a <LogicalDisk::write(unsigned long long, int, void*)>:
c000af5a:	57                   	push   edi
c000af5b:	56                   	push   esi
c000af5c:	53                   	push   ebx
c000af5d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000af61:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000af65:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000af69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000af6d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000af73:	77 41                	ja     c000afb6 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000af75:	99                   	cdq    
c000af76:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000af7c:	01 c8                	add    eax,ecx
c000af7e:	11 da                	adc    edx,ebx
c000af80:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000af86:	19 d7                	sbb    edi,edx
c000af88:	72 33                	jb     c000afbd <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000af8a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000af90:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000af96:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000af9a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000af9e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000afa4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000afaa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afae:	5b                   	pop    ebx
c000afaf:	5e                   	pop    esi
c000afb0:	5f                   	pop    edi
c000afb1:	e9 82 09 00 00       	jmp    c000b938 <VCache::write(unsigned long long, int, void*)>
c000afb6:	b8 05 00 00 00       	mov    eax,0x5
c000afbb:	eb 05                	jmp    c000afc2 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000afbd:	b8 07 00 00 00       	mov    eax,0x7
c000afc2:	5b                   	pop    ebx
c000afc3:	5e                   	pop    esi
c000afc4:	5f                   	pop    edi
c000afc5:	c3                   	ret    
c000afc6:	66 90                	xchg   ax,ax

c000afc8 <Mouse::Mouse(char const*)>:
c000afc8:	83 ec 0c             	sub    esp,0xc
c000afcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afcf:	83 ec 08             	sub    esp,0x8
c000afd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afd6:	50                   	push   eax
c000afd7:	e8 54 f0 ff ff       	call   c000a030 <Device::Device(char const*)>
c000afdc:	83 c4 10             	add    esp,0x10
c000afdf:	ba c4 84 02 c0       	mov    edx,0xc00284c4
c000afe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afe8:	89 10                	mov    DWORD PTR [eax],edx
c000afea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afee:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000aff8:	90                   	nop
c000aff9:	83 c4 0c             	add    esp,0xc
c000affc:	c3                   	ret    
c000affd:	90                   	nop
c000affe:	66 90                	xchg   ax,ax

c000b000 <Mouse::~Mouse()>:
c000b000:	83 ec 0c             	sub    esp,0xc
c000b003:	ba c4 84 02 c0       	mov    edx,0xc00284c4
c000b008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b00c:	89 10                	mov    DWORD PTR [eax],edx
c000b00e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b012:	83 ec 0c             	sub    esp,0xc
c000b015:	50                   	push   eax
c000b016:	e8 b5 ed ff ff       	call   c0009dd0 <Device::~Device()>
c000b01b:	83 c4 10             	add    esp,0x10
c000b01e:	90                   	nop
c000b01f:	83 c4 0c             	add    esp,0xc
c000b022:	c3                   	ret    
c000b023:	90                   	nop

c000b024 <Mouse::~Mouse()>:
c000b024:	83 ec 0c             	sub    esp,0xc
c000b027:	83 ec 0c             	sub    esp,0xc
c000b02a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b02e:	e8 cd ff ff ff       	call   c000b000 <Mouse::~Mouse()>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	83 ec 08             	sub    esp,0x8
c000b039:	68 58 01 00 00       	push   0x158
c000b03e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b042:	e8 19 27 00 00       	call   c000d760 <operator delete(void*, unsigned long)>
c000b047:	83 c4 10             	add    esp,0x10
c000b04a:	83 c4 0c             	add    esp,0xc
c000b04d:	c3                   	ret    

c000b04e <NIC::getMAC()>:
c000b04e:	31 c0                	xor    eax,eax
c000b050:	31 d2                	xor    edx,edx
c000b052:	c3                   	ret    
c000b053:	90                   	nop

c000b054 <NIC::write(int, unsigned char*, int*)>:
c000b054:	b8 01 00 00 00       	mov    eax,0x1
c000b059:	c3                   	ret    

c000b05a <NIC::NIC(char const*)>:
c000b05a:	83 ec 0c             	sub    esp,0xc
c000b05d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b061:	83 ec 08             	sub    esp,0x8
c000b064:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b068:	50                   	push   eax
c000b069:	e8 c2 ef ff ff       	call   c000a030 <Device::Device(char const*)>
c000b06e:	83 c4 10             	add    esp,0x10
c000b071:	ba f0 84 02 c0       	mov    edx,0xc00284f0
c000b076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b07a:	89 10                	mov    DWORD PTR [eax],edx
c000b07c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b080:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000b08a:	90                   	nop
c000b08b:	83 c4 0c             	add    esp,0xc
c000b08e:	c3                   	ret    
c000b08f:	90                   	nop

c000b090 <NIC::~NIC()>:
c000b090:	83 ec 0c             	sub    esp,0xc
c000b093:	ba f0 84 02 c0       	mov    edx,0xc00284f0
c000b098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b09c:	89 10                	mov    DWORD PTR [eax],edx
c000b09e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a2:	83 ec 0c             	sub    esp,0xc
c000b0a5:	50                   	push   eax
c000b0a6:	e8 25 ed ff ff       	call   c0009dd0 <Device::~Device()>
c000b0ab:	83 c4 10             	add    esp,0x10
c000b0ae:	90                   	nop
c000b0af:	83 c4 0c             	add    esp,0xc
c000b0b2:	c3                   	ret    
c000b0b3:	90                   	nop

c000b0b4 <NIC::~NIC()>:
c000b0b4:	83 ec 0c             	sub    esp,0xc
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0be:	e8 cd ff ff ff       	call   c000b090 <NIC::~NIC()>
c000b0c3:	83 c4 10             	add    esp,0x10
c000b0c6:	83 ec 08             	sub    esp,0x8
c000b0c9:	68 58 01 00 00       	push   0x158
c000b0ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0d2:	e8 89 26 00 00       	call   c000d760 <operator delete(void*, unsigned long)>
c000b0d7:	83 c4 10             	add    esp,0x10
c000b0da:	83 c4 0c             	add    esp,0xc
c000b0dd:	c3                   	ret    

c000b0de <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000b0de:	55                   	push   ebp
c000b0df:	57                   	push   edi
c000b0e0:	56                   	push   esi
c000b0e1:	53                   	push   ebx
c000b0e2:	81 ec 28 01 00 00    	sub    esp,0x128
c000b0e8:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000b0ef:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000b0f6:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000b0fd:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000b104:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b108:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b10c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000b113:	e8 14 f0 ff ff       	call   c000a12c <Device::getName()>
c000b118:	5a                   	pop    edx
c000b119:	59                   	pop    ecx
c000b11a:	50                   	push   eax
c000b11b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000b11f:	55                   	push   ebp
c000b120:	e8 2b 55 ff ff       	call   c0000650 <strcpy>
c000b125:	5b                   	pop    ebx
c000b126:	58                   	pop    eax
c000b127:	68 1c 85 02 c0       	push   0xc002851c
c000b12c:	55                   	push   ebp
c000b12d:	e8 3e 57 ff ff       	call   c0000870 <strcat>
c000b132:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000b139:	e8 1a 4a 00 00       	call   c000fb58 <malloc>
c000b13e:	83 c4 0c             	add    esp,0xc
c000b141:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b145:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b149:	89 c3                	mov    ebx,eax
c000b14b:	57                   	push   edi
c000b14c:	56                   	push   esi
c000b14d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000b154:	55                   	push   ebp
c000b155:	50                   	push   eax
c000b156:	e8 57 fb ff ff       	call   c000acb2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000b15b:	83 c4 14             	add    esp,0x14
c000b15e:	53                   	push   ebx
c000b15f:	e8 0e fc ff ff       	call   c000ad72 <LogicalDisk::assignDriveLetter()>
c000b164:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b167:	e8 c0 fc ff ff       	call   c000ae2c <LogicalDisk::mount()>
c000b16c:	58                   	pop    eax
c000b16d:	5a                   	pop    edx
c000b16e:	53                   	push   ebx
c000b16f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000b176:	e8 53 ed ff ff       	call   c0009ece <Device::addChild(Device*)>
c000b17b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000b181:	5b                   	pop    ebx
c000b182:	5e                   	pop    esi
c000b183:	5f                   	pop    edi
c000b184:	5d                   	pop    ebp
c000b185:	c3                   	ret    

c000b186 <createPartitionsForDisk(PhysicalDisk*)>:
c000b186:	55                   	push   ebp
c000b187:	57                   	push   edi
c000b188:	56                   	push   esi
c000b189:	53                   	push   ebx
c000b18a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000b190:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000b197:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000b19d:	3d 00 02 00 00       	cmp    eax,0x200
c000b1a2:	74 27                	je     c000b1cb <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000b1a4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000b1aa:	83 ec 10             	sub    esp,0x10
c000b1ad:	99                   	cdq    
c000b1ae:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000b1b4:	52                   	push   edx
c000b1b5:	50                   	push   eax
c000b1b6:	0f a4 f7 0a          	shld   edi,esi,0xa
c000b1ba:	c1 e6 0a             	shl    esi,0xa
c000b1bd:	89 fd                	mov    ebp,edi
c000b1bf:	55                   	push   ebp
c000b1c0:	56                   	push   esi
c000b1c1:	e8 0e 70 01 00       	call   c00221d4 <__udivdi3>
c000b1c6:	e9 b9 00 00 00       	jmp    c000b284 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000b1cb:	83 ec 0c             	sub    esp,0xc
c000b1ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1d0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000b1d4:	56                   	push   esi
c000b1d5:	6a 01                	push   0x1
c000b1d7:	6a 00                	push   0x0
c000b1d9:	6a 00                	push   0x0
c000b1db:	53                   	push   ebx
c000b1dc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b1df:	83 c4 20             	add    esp,0x20
c000b1e2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000b1ea:	75 0a                	jne    c000b1f6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000b1ec:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000b1f4:	74 2c                	je     c000b222 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000b1f6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000b1fc:	83 ec 10             	sub    esp,0x10
c000b1ff:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b205:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000b20b:	89 f7                	mov    edi,esi
c000b20d:	c1 ff 1f             	sar    edi,0x1f
c000b210:	57                   	push   edi
c000b211:	0f a4 c2 0a          	shld   edx,eax,0xa
c000b215:	56                   	push   esi
c000b216:	c1 e0 0a             	shl    eax,0xa
c000b219:	52                   	push   edx
c000b21a:	50                   	push   eax
c000b21b:	e8 b4 6f 01 00       	call   c00221d4 <__udivdi3>
c000b220:	eb 62                	jmp    c000b284 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000b222:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000b229:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000b230:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000b237:	89 cf                	mov    edi,ecx
c000b239:	83 e2 7f             	and    edx,0x7f
c000b23c:	83 e7 7f             	and    edi,0x7f
c000b23f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000b242:	83 e0 7f             	and    eax,0x7f
c000b245:	8d 14 01             	lea    edx,[ecx+eax*1]
c000b248:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000b24f:	83 e0 7f             	and    eax,0x7f
c000b252:	01 d0                	add    eax,edx
c000b254:	84 c0                	test   al,al
c000b256:	89 c5                	mov    ebp,eax
c000b258:	74 41                	je     c000b29b <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000b25a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000b260:	83 ec 10             	sub    esp,0x10
c000b263:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b269:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000b26f:	89 f7                	mov    edi,esi
c000b271:	c1 ff 1f             	sar    edi,0x1f
c000b274:	57                   	push   edi
c000b275:	0f a4 c2 0a          	shld   edx,eax,0xa
c000b279:	56                   	push   esi
c000b27a:	c1 e0 0a             	shl    eax,0xa
c000b27d:	52                   	push   edx
c000b27e:	50                   	push   eax
c000b27f:	e8 50 6f 01 00       	call   c00221d4 <__udivdi3>
c000b284:	83 c4 14             	add    esp,0x14
c000b287:	52                   	push   edx
c000b288:	50                   	push   eax
c000b289:	6a 00                	push   0x0
c000b28b:	6a 00                	push   0x0
c000b28d:	53                   	push   ebx
c000b28e:	e8 4b fe ff ff       	call   c000b0de <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000b293:	83 c4 20             	add    esp,0x20
c000b296:	e9 73 01 00 00       	jmp    c000b40e <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000b29b:	89 f0                	mov    eax,esi
c000b29d:	31 c9                	xor    ecx,ecx
c000b29f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000b2a6:	75 02                	jne    c000b2aa <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000b2a8:	89 cd                	mov    ebp,ecx
c000b2aa:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000b2b2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000b2b9:	83 c0 10             	add    eax,0x10
c000b2bc:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000b2c4:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000b2cb:	c1 e2 08             	shl    edx,0x8
c000b2ce:	c1 e6 10             	shl    esi,0x10
c000b2d1:	09 f2                	or     edx,esi
c000b2d3:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000b2da:	09 f2                	or     edx,esi
c000b2dc:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000b2e3:	c1 e6 18             	shl    esi,0x18
c000b2e6:	09 f2                	or     edx,esi
c000b2e8:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000b2ef:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000b2f3:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000b2fa:	c1 e6 10             	shl    esi,0x10
c000b2fd:	c1 e2 08             	shl    edx,0x8
c000b300:	09 f2                	or     edx,esi
c000b302:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000b309:	09 f2                	or     edx,esi
c000b30b:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000b312:	c1 e6 18             	shl    esi,0x18
c000b315:	09 f2                	or     edx,esi
c000b317:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000b31b:	41                   	inc    ecx
c000b31c:	83 f9 04             	cmp    ecx,0x4
c000b31f:	0f 85 7a ff ff ff    	jne    c000b29f <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000b325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b329:	83 f0 01             	xor    eax,0x1
c000b32c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000b330:	75 4f                	jne    c000b381 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000b332:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b336:	83 f0 01             	xor    eax,0x1
c000b339:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000b33d:	75 42                	jne    c000b381 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000b33f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000b345:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000b34d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b353:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b35b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000b361:	89 f7                	mov    edi,esi
c000b363:	c1 ff 1f             	sar    edi,0x1f
c000b366:	57                   	push   edi
c000b367:	56                   	push   esi
c000b368:	0f a4 c2 0a          	shld   edx,eax,0xa
c000b36c:	52                   	push   edx
c000b36d:	c1 e0 0a             	shl    eax,0xa
c000b370:	50                   	push   eax
c000b371:	e8 5e 6e 01 00       	call   c00221d4 <__udivdi3>
c000b376:	83 c4 10             	add    esp,0x10
c000b379:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b37d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000b381:	89 e8                	mov    eax,ebp
c000b383:	0f b6 e8             	movzx  ebp,al
c000b386:	85 ed                	test   ebp,ebp
c000b388:	74 50                	je     c000b3da <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000b38a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b38e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b392:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b396:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000b39a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b39e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000b3a2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3a6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000b3aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b3b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b3ba:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000b3be:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000b3c2:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000b3c6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000b3ca:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000b3ce:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000b3d2:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000b3d6:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000b3da:	31 ed                	xor    ebp,ebp
c000b3dc:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000b3e0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000b3e4:	89 f8                	mov    eax,edi
c000b3e6:	09 f0                	or     eax,esi
c000b3e8:	74 1e                	je     c000b408 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000b3ea:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000b3ee:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000b3f2:	89 d1                	mov    ecx,edx
c000b3f4:	09 c1                	or     ecx,eax
c000b3f6:	74 10                	je     c000b408 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000b3f8:	83 ec 0c             	sub    esp,0xc
c000b3fb:	57                   	push   edi
c000b3fc:	56                   	push   esi
c000b3fd:	52                   	push   edx
c000b3fe:	50                   	push   eax
c000b3ff:	53                   	push   ebx
c000b400:	e8 d9 fc ff ff       	call   c000b0de <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000b405:	83 c4 20             	add    esp,0x20
c000b408:	45                   	inc    ebp
c000b409:	83 fd 04             	cmp    ebp,0x4
c000b40c:	75 ce                	jne    c000b3dc <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000b40e:	81 c4 5c 02 00 00    	add    esp,0x25c
c000b414:	5b                   	pop    ebx
c000b415:	5e                   	pop    esi
c000b416:	5f                   	pop    edi
c000b417:	5d                   	pop    ebp
c000b418:	c3                   	ret    
c000b419:	66 90                	xchg   ax,ax
c000b41b:	90                   	nop

c000b41c <Serial::Serial(char const*)>:
c000b41c:	83 ec 0c             	sub    esp,0xc
c000b41f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b423:	83 ec 08             	sub    esp,0x8
c000b426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b42a:	50                   	push   eax
c000b42b:	e8 00 ec ff ff       	call   c000a030 <Device::Device(char const*)>
c000b430:	83 c4 10             	add    esp,0x10
c000b433:	ba 30 85 02 c0       	mov    edx,0xc0028530
c000b438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b43c:	89 10                	mov    DWORD PTR [eax],edx
c000b43e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b442:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000b44c:	90                   	nop
c000b44d:	83 c4 0c             	add    esp,0xc
c000b450:	c3                   	ret    
c000b451:	90                   	nop
c000b452:	66 90                	xchg   ax,ax

c000b454 <Serial::~Serial()>:
c000b454:	83 ec 0c             	sub    esp,0xc
c000b457:	ba 30 85 02 c0       	mov    edx,0xc0028530
c000b45c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b460:	89 10                	mov    DWORD PTR [eax],edx
c000b462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b466:	83 ec 0c             	sub    esp,0xc
c000b469:	50                   	push   eax
c000b46a:	e8 61 e9 ff ff       	call   c0009dd0 <Device::~Device()>
c000b46f:	83 c4 10             	add    esp,0x10
c000b472:	90                   	nop
c000b473:	83 c4 0c             	add    esp,0xc
c000b476:	c3                   	ret    
c000b477:	90                   	nop

c000b478 <Serial::~Serial()>:
c000b478:	83 ec 0c             	sub    esp,0xc
c000b47b:	83 ec 0c             	sub    esp,0xc
c000b47e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b482:	e8 cd ff ff ff       	call   c000b454 <Serial::~Serial()>
c000b487:	83 c4 10             	add    esp,0x10
c000b48a:	83 ec 08             	sub    esp,0x8
c000b48d:	68 58 01 00 00       	push   0x158
c000b492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b496:	e8 c5 22 00 00       	call   c000d760 <operator delete(void*, unsigned long)>
c000b49b:	83 c4 10             	add    esp,0x10
c000b49e:	83 c4 0c             	add    esp,0xc
c000b4a1:	c3                   	ret    
c000b4a2:	66 90                	xchg   ax,ax

c000b4a4 <Timer::Timer(char const*)>:
c000b4a4:	83 ec 0c             	sub    esp,0xc
c000b4a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4ab:	83 ec 08             	sub    esp,0x8
c000b4ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4b2:	50                   	push   eax
c000b4b3:	e8 78 eb ff ff       	call   c000a030 <Device::Device(char const*)>
c000b4b8:	83 c4 10             	add    esp,0x10
c000b4bb:	ba 10 86 02 c0       	mov    edx,0xc0028610
c000b4c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c4:	89 10                	mov    DWORD PTR [eax],edx
c000b4c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4ca:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000b4d4:	90                   	nop
c000b4d5:	83 c4 0c             	add    esp,0xc
c000b4d8:	c3                   	ret    
c000b4d9:	90                   	nop
c000b4da:	66 90                	xchg   ax,ax

c000b4dc <Timer::~Timer()>:
c000b4dc:	83 ec 0c             	sub    esp,0xc
c000b4df:	ba 10 86 02 c0       	mov    edx,0xc0028610
c000b4e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4e8:	89 10                	mov    DWORD PTR [eax],edx
c000b4ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4ee:	83 ec 0c             	sub    esp,0xc
c000b4f1:	50                   	push   eax
c000b4f2:	e8 d9 e8 ff ff       	call   c0009dd0 <Device::~Device()>
c000b4f7:	83 c4 10             	add    esp,0x10
c000b4fa:	90                   	nop
c000b4fb:	83 c4 0c             	add    esp,0xc
c000b4fe:	c3                   	ret    
c000b4ff:	90                   	nop

c000b500 <Timer::~Timer()>:
c000b500:	83 ec 0c             	sub    esp,0xc
c000b503:	83 ec 0c             	sub    esp,0xc
c000b506:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b50a:	e8 cd ff ff ff       	call   c000b4dc <Timer::~Timer()>
c000b50f:	83 c4 10             	add    esp,0x10
c000b512:	83 ec 08             	sub    esp,0x8
c000b515:	68 5c 01 00 00       	push   0x15c
c000b51a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b51e:	e8 3d 22 00 00       	call   c000d760 <operator delete(void*, unsigned long)>
c000b523:	83 c4 10             	add    esp,0x10
c000b526:	83 c4 0c             	add    esp,0xc
c000b529:	c3                   	ret    

c000b52a <Timer::read()>:
c000b52a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b52e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b534:	c3                   	ret    

c000b535 <setupTimer(int)>:
c000b535:	53                   	push   ebx
c000b536:	83 ec 14             	sub    esp,0x14
c000b539:	68 5c 01 00 00       	push   0x15c
c000b53e:	e8 15 46 00 00       	call   c000fb58 <malloc>
c000b543:	89 04 24             	mov    DWORD PTR [esp],eax
c000b546:	89 c3                	mov    ebx,eax
c000b548:	e8 3b 65 01 00       	call   c0021a88 <PIT::PIT()>
c000b54d:	58                   	pop    eax
c000b54e:	5a                   	pop    edx
c000b54f:	53                   	push   ebx
c000b550:	ff 35 08 21 03 c0    	push   DWORD PTR ds:0xc0032108
c000b556:	e8 73 e9 ff ff       	call   c0009ece <Device::addChild(Device*)>
c000b55b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b55d:	6a 00                	push   0x0
c000b55f:	6a 00                	push   0x0
c000b561:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b565:	53                   	push   ebx
c000b566:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b569:	83 c4 28             	add    esp,0x28
c000b56c:	89 d8                	mov    eax,ebx
c000b56e:	5b                   	pop    ebx
c000b56f:	c3                   	ret    

c000b570 <timerHandler(unsigned int)>:
c000b570:	57                   	push   edi
c000b571:	31 d2                	xor    edx,edx
c000b573:	56                   	push   esi
c000b574:	53                   	push   ebx
c000b575:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b579:	01 1d 50 1b 03 c0    	add    DWORD PTR ds:0xc0031b50,ebx
c000b57f:	11 15 54 1b 03 c0    	adc    DWORD PTR ds:0xc0031b54,edx
c000b585:	80 3d 0d 21 03 c0 00 	cmp    BYTE PTR ds:0xc003210d,0x0
c000b58c:	75 12                	jne    c000b5a0 <timerHandler(unsigned int)+0x30>
c000b58e:	c7 44 24 10 bf 85 02 c0 	mov    DWORD PTR [esp+0x10],0xc00285bf
c000b596:	5b                   	pop    ebx
c000b597:	5e                   	pop    esi
c000b598:	5f                   	pop    edi
c000b599:	e9 c8 b9 ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>
c000b59e:	66 90                	xchg   ax,ax
c000b5a0:	fa                   	cli    
c000b5a1:	ff 05 30 23 03 c0    	inc    DWORD PTR ds:0xc0032330
c000b5a7:	83 ec 0c             	sub    esp,0xc
c000b5aa:	68 40 23 03 c0       	push   0xc0032340
c000b5af:	e8 2c b4 01 00       	call   c00269e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b5b4:	83 c4 10             	add    esp,0x10
c000b5b7:	84 c0                	test   al,al
c000b5b9:	0f 85 a9 00 00 00    	jne    c000b668 <timerHandler(unsigned int)+0xf8>
c000b5bf:	83 ec 0c             	sub    esp,0xc
c000b5c2:	68 40 23 03 c0       	push   0xc0032340
c000b5c7:	e8 30 b4 01 00       	call   c00269fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b5cc:	83 c4 10             	add    esp,0x10
c000b5cf:	89 c6                	mov    esi,eax
c000b5d1:	8d 76 00             	lea    esi,[esi+0x0]
c000b5d4:	83 ec 0c             	sub    esp,0xc
c000b5d7:	68 40 23 03 c0       	push   0xc0032340
c000b5dc:	e8 1b b4 01 00       	call   c00269fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b5e1:	c7 04 24 40 23 03 c0 	mov    DWORD PTR [esp],0xc0032340
c000b5e8:	89 c7                	mov    edi,eax
c000b5ea:	e8 15 b4 01 00       	call   c0026a04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000b5ef:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c000b5f2:	83 c4 10             	add    esp,0x10
c000b5f5:	8b 4f 30             	mov    ecx,DWORD PTR [edi+0x30]
c000b5f8:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c000b5fd:	39 15 50 1b 03 c0    	cmp    DWORD PTR ds:0xc0031b50,edx
c000b603:	19 c8                	sbb    eax,ecx
c000b605:	72 21                	jb     c000b628 <timerHandler(unsigned int)+0xb8>
c000b607:	83 ec 0c             	sub    esp,0xc
c000b60a:	57                   	push   edi
c000b60b:	e8 7c b8 00 00       	call   c0016e8c <unblockTask(ThreadControlBlock*)>
c000b610:	83 c4 10             	add    esp,0x10
c000b613:	39 fe                	cmp    esi,edi
c000b615:	75 25                	jne    c000b63c <timerHandler(unsigned int)+0xcc>
c000b617:	83 ec 0c             	sub    esp,0xc
c000b61a:	68 40 23 03 c0       	push   0xc0032340
c000b61f:	e8 d8 b3 01 00       	call   c00269fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b624:	89 c6                	mov    esi,eax
c000b626:	eb 10                	jmp    c000b638 <timerHandler(unsigned int)+0xc8>
c000b628:	51                   	push   ecx
c000b629:	51                   	push   ecx
c000b62a:	57                   	push   edi
c000b62b:	68 40 23 03 c0       	push   0xc0032340
c000b630:	e8 8b b4 01 00       	call   c0026ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000b635:	8d 76 00             	lea    esi,[esi+0x0]
c000b638:	83 c4 10             	add    esp,0x10
c000b63b:	90                   	nop
c000b63c:	83 ec 0c             	sub    esp,0xc
c000b63f:	68 40 23 03 c0       	push   0xc0032340
c000b644:	e8 97 b3 01 00       	call   c00269e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b649:	83 c4 10             	add    esp,0x10
c000b64c:	84 c0                	test   al,al
c000b64e:	75 18                	jne    c000b668 <timerHandler(unsigned int)+0xf8>
c000b650:	83 ec 0c             	sub    esp,0xc
c000b653:	68 40 23 03 c0       	push   0xc0032340
c000b658:	e8 9f b3 01 00       	call   c00269fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b65d:	83 c4 10             	add    esp,0x10
c000b660:	39 f0                	cmp    eax,esi
c000b662:	0f 85 6c ff ff ff    	jne    c000b5d4 <timerHandler(unsigned int)+0x64>
c000b668:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b66e:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000b671:	85 c0                	test   eax,eax
c000b673:	74 5f                	je     c000b6d4 <timerHandler(unsigned int)+0x164>
c000b675:	80 3d 0c 21 03 c0 00 	cmp    BYTE PTR ds:0xc003210c,0x0
c000b67c:	74 56                	je     c000b6d4 <timerHandler(unsigned int)+0x164>
c000b67e:	3d e8 03 00 00       	cmp    eax,0x3e8
c000b683:	76 23                	jbe    c000b6a8 <timerHandler(unsigned int)+0x138>
c000b685:	80 7a 62 00          	cmp    BYTE PTR [edx+0x62],0x0
c000b689:	75 11                	jne    c000b69c <timerHandler(unsigned int)+0x12c>
c000b68b:	52                   	push   edx
c000b68c:	52                   	push   edx
c000b68d:	50                   	push   eax
c000b68e:	68 d5 85 02 c0       	push   0xc00285d5
c000b693:	e8 ce b8 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000b698:	83 c4 10             	add    esp,0x10
c000b69b:	90                   	nop
c000b69c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b6a1:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b6a8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b6ae:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000b6b1:	39 d8                	cmp    eax,ebx
c000b6b3:	73 0b                	jae    c000b6c0 <timerHandler(unsigned int)+0x150>
c000b6b5:	c7 42 38 00 00 00 00 	mov    DWORD PTR [edx+0x38],0x0
c000b6bc:	eb 0e                	jmp    c000b6cc <timerHandler(unsigned int)+0x15c>
c000b6be:	66 90                	xchg   ax,ax
c000b6c0:	89 c1                	mov    ecx,eax
c000b6c2:	29 d9                	sub    ecx,ebx
c000b6c4:	39 d8                	cmp    eax,ebx
c000b6c6:	89 4a 38             	mov    DWORD PTR [edx+0x38],ecx
c000b6c9:	75 09                	jne    c000b6d4 <timerHandler(unsigned int)+0x164>
c000b6cb:	90                   	nop
c000b6cc:	e8 63 b4 00 00       	call   c0016b34 <schedule()>
c000b6d1:	8d 76 00             	lea    esi,[esi+0x0]
c000b6d4:	f0 ff 0d 30 23 03 c0 	lock dec DWORD PTR ds:0xc0032330
c000b6db:	83 3d 30 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032330,0x0
c000b6e2:	75 04                	jne    c000b6e8 <timerHandler(unsigned int)+0x178>
c000b6e4:	fb                   	sti    
c000b6e5:	8d 76 00             	lea    esi,[esi+0x0]
c000b6e8:	5b                   	pop    ebx
c000b6e9:	5e                   	pop    esi
c000b6ea:	5f                   	pop    edi
c000b6eb:	c3                   	ret    

c000b6ec <VCache::VCache(PhysicalDisk*)>:
c000b6ec:	53                   	push   ebx
c000b6ed:	83 ec 18             	sub    esp,0x18
c000b6f0:	ba 80 86 02 c0       	mov    edx,0xc0028680
c000b6f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b6f9:	89 10                	mov    DWORD PTR [eax],edx
c000b6fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b6ff:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000b706:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b70a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000b711:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b715:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000b71c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000b723:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b727:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000b72e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000b735:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b739:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000b740:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b744:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b748:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b74c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000b753:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000b75a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b75e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b762:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b766:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000b76a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b76e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b772:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b776:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000b77d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000b785:	83 ec 0c             	sub    esp,0xc
c000b788:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b78c:	e8 c7 43 00 00       	call   c000fb58 <malloc>
c000b791:	83 c4 10             	add    esp,0x10
c000b794:	89 c3                	mov    ebx,eax
c000b796:	83 ec 0c             	sub    esp,0xc
c000b799:	53                   	push   ebx
c000b79a:	e8 ed 47 00 00       	call   c000ff8c <Mutex::Mutex()>
c000b79f:	83 c4 10             	add    esp,0x10
c000b7a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b7a6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000b7a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b7ad:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b7b1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000b7b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b7b8:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b7bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b7c3:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b7c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b7cd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b7d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b7d4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000b7da:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b7e0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b7e4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000b7e7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000b7ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b7ee:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b7f2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b7f6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b7fc:	05 00 01 00 00       	add    eax,0x100
c000b801:	c1 e0 04             	shl    eax,0x4
c000b804:	83 ec 0c             	sub    esp,0xc
c000b807:	50                   	push   eax
c000b808:	e8 4b 43 00 00       	call   c000fb58 <malloc>
c000b80d:	83 c4 10             	add    esp,0x10
c000b810:	89 c2                	mov    edx,eax
c000b812:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b816:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b819:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b81d:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000b824:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b828:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b82c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b830:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b836:	89 d0                	mov    eax,edx
c000b838:	c1 e0 02             	shl    eax,0x2
c000b83b:	01 d0                	add    eax,edx
c000b83d:	c1 e0 04             	shl    eax,0x4
c000b840:	83 ec 0c             	sub    esp,0xc
c000b843:	50                   	push   eax
c000b844:	e8 0f 43 00 00       	call   c000fb58 <malloc>
c000b849:	83 c4 10             	add    esp,0x10
c000b84c:	89 c2                	mov    edx,eax
c000b84e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b852:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000b855:	90                   	nop
c000b856:	83 c4 18             	add    esp,0x18
c000b859:	5b                   	pop    ebx
c000b85a:	c3                   	ret    
c000b85b:	90                   	nop

c000b85c <VCache::invalidateReadBuffer()>:
c000b85c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b860:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000b866:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b86a:	c3                   	ret    
c000b86b:	90                   	nop

c000b86c <VCache::writeWriteBuffer()>:
c000b86c:	53                   	push   ebx
c000b86d:	83 ec 08             	sub    esp,0x8
c000b870:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b874:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b878:	74 1e                	je     c000b898 <VCache::writeWriteBuffer()+0x2c>
c000b87a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b87d:	83 ec 0c             	sub    esp,0xc
c000b880:	8b 10                	mov    edx,DWORD PTR [eax]
c000b882:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000b885:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000b888:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000b88b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b88e:	50                   	push   eax
c000b88f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b892:	83 c4 20             	add    esp,0x20
c000b895:	8d 76 00             	lea    esi,[esi+0x0]
c000b898:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b89f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000b8a6:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000b8aa:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000b8b1:	83 c4 08             	add    esp,0x8
c000b8b4:	5b                   	pop    ebx
c000b8b5:	c3                   	ret    
c000b8b6:	66 90                	xchg   ax,ax

c000b8b8 <VCache::~VCache()>:
c000b8b8:	83 ec 0c             	sub    esp,0xc
c000b8bb:	ba 80 86 02 c0       	mov    edx,0xc0028680
c000b8c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8c4:	89 10                	mov    DWORD PTR [eax],edx
c000b8c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8ca:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000b8cd:	0f b6 c0             	movzx  eax,al
c000b8d0:	85 c0                	test   eax,eax
c000b8d2:	74 10                	je     c000b8e4 <VCache::~VCache()+0x2c>
c000b8d4:	83 ec 0c             	sub    esp,0xc
c000b8d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8db:	e8 8c ff ff ff       	call   c000b86c <VCache::writeWriteBuffer()>
c000b8e0:	83 c4 10             	add    esp,0x10
c000b8e3:	90                   	nop
c000b8e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8e8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b8eb:	83 ec 0c             	sub    esp,0xc
c000b8ee:	50                   	push   eax
c000b8ef:	e8 74 42 00 00       	call   c000fb68 <free>
c000b8f4:	83 c4 10             	add    esp,0x10
c000b8f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8fb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b8fe:	83 ec 0c             	sub    esp,0xc
c000b901:	50                   	push   eax
c000b902:	e8 61 42 00 00       	call   c000fb68 <free>
c000b907:	83 c4 10             	add    esp,0x10
c000b90a:	90                   	nop
c000b90b:	83 c4 0c             	add    esp,0xc
c000b90e:	c3                   	ret    
c000b90f:	90                   	nop

c000b910 <VCache::~VCache()>:
c000b910:	83 ec 0c             	sub    esp,0xc
c000b913:	83 ec 0c             	sub    esp,0xc
c000b916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b91a:	e8 99 ff ff ff       	call   c000b8b8 <VCache::~VCache()>
c000b91f:	83 c4 10             	add    esp,0x10
c000b922:	83 ec 08             	sub    esp,0x8
c000b925:	6a 44                	push   0x44
c000b927:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b92b:	e8 30 1e 00 00       	call   c000d760 <operator delete(void*, unsigned long)>
c000b930:	83 c4 10             	add    esp,0x10
c000b933:	83 c4 0c             	add    esp,0xc
c000b936:	c3                   	ret    
c000b937:	90                   	nop

c000b938 <VCache::write(unsigned long long, int, void*)>:
c000b938:	55                   	push   ebp
c000b939:	57                   	push   edi
c000b93a:	56                   	push   esi
c000b93b:	53                   	push   ebx
c000b93c:	83 ec 1c             	sub    esp,0x1c
c000b93f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b943:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b947:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000b94b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b94f:	e8 e4 ae 00 00       	call   c0016838 <KeDisablePreemption()>
c000b954:	b9 00 10 00 00       	mov    ecx,0x1000
c000b959:	50                   	push   eax
c000b95a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b95d:	0f af c3             	imul   eax,ebx
c000b960:	05 ff 0f 00 00       	add    eax,0xfff
c000b965:	99                   	cdq    
c000b966:	f7 f9                	idiv   ecx
c000b968:	50                   	push   eax
c000b969:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b96d:	ff 35 90 22 03 c0    	push   DWORD PTR ds:0xc0032290
c000b973:	e8 d2 88 00 00       	call   c001424a <VAS::canLockPages(unsigned long, int)>
c000b978:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000b97c:	83 c4 10             	add    esp,0x10
c000b97f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b984:	74 2a                	je     c000b9b0 <VCache::write(unsigned long long, int, void*)+0x78>
c000b986:	50                   	push   eax
c000b987:	b9 00 10 00 00       	mov    ecx,0x1000
c000b98c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b98f:	0f af c3             	imul   eax,ebx
c000b992:	05 ff 0f 00 00       	add    eax,0xfff
c000b997:	99                   	cdq    
c000b998:	f7 f9                	idiv   ecx
c000b99a:	50                   	push   eax
c000b99b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b99f:	ff 35 90 22 03 c0    	push   DWORD PTR ds:0xc0032290
c000b9a5:	e8 3e 8b 00 00       	call   c00144e8 <VAS::lockPages(unsigned long, int)>
c000b9aa:	83 c4 10             	add    esp,0x10
c000b9ad:	8d 76 00             	lea    esi,[esi+0x0]
c000b9b0:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000b9b4:	74 0e                	je     c000b9c4 <VCache::write(unsigned long long, int, void*)+0x8c>
c000b9b6:	83 ec 0c             	sub    esp,0xc
c000b9b9:	55                   	push   ebp
c000b9ba:	e8 9d fe ff ff       	call   c000b85c <VCache::invalidateReadBuffer()>
c000b9bf:	83 c4 10             	add    esp,0x10
c000b9c2:	66 90                	xchg   ax,ax
c000b9c4:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000b9c8:	74 72                	je     c000ba3c <VCache::write(unsigned long long, int, void*)+0x104>
c000b9ca:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000b9cd:	89 c8                	mov    eax,ecx
c000b9cf:	99                   	cdq    
c000b9d0:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000b9d3:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000b9d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b9da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b9e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9e6:	31 f0                	xor    eax,esi
c000b9e8:	31 fa                	xor    edx,edi
c000b9ea:	09 d0                	or     eax,edx
c000b9ec:	75 42                	jne    c000ba30 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b9ee:	83 fb 01             	cmp    ebx,0x1
c000b9f1:	75 3d                	jne    c000ba30 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b9f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b9f6:	89 cf                	mov    edi,ecx
c000b9f8:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b9fc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ba02:	0f af f8             	imul   edi,eax
c000ba05:	89 c1                	mov    ecx,eax
c000ba07:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000ba0a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ba0c:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000ba0f:	40                   	inc    eax
c000ba10:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000ba13:	83 f8 50             	cmp    eax,0x50
c000ba16:	0f 85 a8 00 00 00    	jne    c000bac4 <VCache::write(unsigned long long, int, void*)+0x18c>
c000ba1c:	83 ec 0c             	sub    esp,0xc
c000ba1f:	55                   	push   ebp
c000ba20:	e8 47 fe ff ff       	call   c000b86c <VCache::writeWriteBuffer()>
c000ba25:	83 c4 10             	add    esp,0x10
c000ba28:	e9 97 00 00 00       	jmp    c000bac4 <VCache::write(unsigned long long, int, void*)+0x18c>
c000ba2d:	8d 76 00             	lea    esi,[esi+0x0]
c000ba30:	83 ec 0c             	sub    esp,0xc
c000ba33:	55                   	push   ebp
c000ba34:	e8 33 fe ff ff       	call   c000b86c <VCache::writeWriteBuffer()>
c000ba39:	83 c4 10             	add    esp,0x10
c000ba3c:	83 fb 4f             	cmp    ebx,0x4f
c000ba3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba42:	7f 20                	jg     c000ba64 <VCache::write(unsigned long long, int, void*)+0x12c>
c000ba44:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000ba47:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ba4b:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000ba4e:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000ba51:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000ba54:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000ba58:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ba5e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ba60:	eb 62                	jmp    c000bac4 <VCache::write(unsigned long long, int, void*)+0x18c>
c000ba62:	66 90                	xchg   ax,ax
c000ba64:	83 ec 0c             	sub    esp,0xc
c000ba67:	8b 10                	mov    edx,DWORD PTR [eax]
c000ba69:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ba6d:	53                   	push   ebx
c000ba6e:	57                   	push   edi
c000ba6f:	56                   	push   esi
c000ba70:	50                   	push   eax
c000ba71:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000ba74:	83 c4 20             	add    esp,0x20
c000ba77:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000ba7c:	89 c6                	mov    esi,eax
c000ba7e:	74 28                	je     c000baa8 <VCache::write(unsigned long long, int, void*)+0x170>
c000ba80:	52                   	push   edx
c000ba81:	b9 00 10 00 00       	mov    ecx,0x1000
c000ba86:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000ba8a:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000ba90:	99                   	cdq    
c000ba91:	f7 f9                	idiv   ecx
c000ba93:	50                   	push   eax
c000ba94:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ba98:	ff 35 90 22 03 c0    	push   DWORD PTR ds:0xc0032290
c000ba9e:	e8 e3 87 00 00       	call   c0014286 <VAS::unlockPages(unsigned long, int)>
c000baa3:	83 c4 10             	add    esp,0x10
c000baa6:	66 90                	xchg   ax,ax
c000baa8:	e8 b3 ad 00 00       	call   c0016860 <KeRestorePreemption()>
c000baad:	85 f6                	test   esi,esi
c000baaf:	74 4b                	je     c000bafc <VCache::write(unsigned long long, int, void*)+0x1c4>
c000bab1:	83 ec 0c             	sub    esp,0xc
c000bab4:	68 38 86 02 c0       	push   0xc0028638
c000bab9:	e8 a8 b4 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000babe:	83 c4 10             	add    esp,0x10
c000bac1:	eb 39                	jmp    c000bafc <VCache::write(unsigned long long, int, void*)+0x1c4>
c000bac3:	90                   	nop
c000bac4:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bac9:	74 29                	je     c000baf4 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000bacb:	50                   	push   eax
c000bacc:	b9 00 10 00 00       	mov    ecx,0x1000
c000bad1:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000bad5:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000badb:	99                   	cdq    
c000badc:	f7 f9                	idiv   ecx
c000bade:	50                   	push   eax
c000badf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000bae3:	ff 35 90 22 03 c0    	push   DWORD PTR ds:0xc0032290
c000bae9:	e8 98 87 00 00       	call   c0014286 <VAS::unlockPages(unsigned long, int)>
c000baee:	83 c4 10             	add    esp,0x10
c000baf1:	8d 76 00             	lea    esi,[esi+0x0]
c000baf4:	e8 67 ad 00 00       	call   c0016860 <KeRestorePreemption()>
c000baf9:	31 f6                	xor    esi,esi
c000bafb:	90                   	nop
c000bafc:	83 c4 1c             	add    esp,0x1c
c000baff:	89 f0                	mov    eax,esi
c000bb01:	5b                   	pop    ebx
c000bb02:	5e                   	pop    esi
c000bb03:	5f                   	pop    edi
c000bb04:	5d                   	pop    ebp
c000bb05:	c3                   	ret    

c000bb06 <VCache::read(unsigned long long, int, void*)>:
c000bb06:	55                   	push   ebp
c000bb07:	bd 00 10 00 00       	mov    ebp,0x1000
c000bb0c:	57                   	push   edi
c000bb0d:	56                   	push   esi
c000bb0e:	53                   	push   ebx
c000bb0f:	83 ec 2c             	sub    esp,0x2c
c000bb12:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000bb16:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000bb1a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000bb1e:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000bb22:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb26:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb2a:	e8 09 ad 00 00       	call   c0016838 <KeDisablePreemption()>
c000bb2f:	50                   	push   eax
c000bb30:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb33:	0f af c6             	imul   eax,esi
c000bb36:	05 ff 0f 00 00       	add    eax,0xfff
c000bb3b:	99                   	cdq    
c000bb3c:	f7 fd                	idiv   ebp
c000bb3e:	50                   	push   eax
c000bb3f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000bb43:	ff 35 90 22 03 c0    	push   DWORD PTR ds:0xc0032290
c000bb49:	e8 fc 86 00 00       	call   c001424a <VAS::canLockPages(unsigned long, int)>
c000bb4e:	83 c4 10             	add    esp,0x10
c000bb51:	84 c0                	test   al,al
c000bb53:	89 c7                	mov    edi,eax
c000bb55:	74 25                	je     c000bb7c <VCache::read(unsigned long long, int, void*)+0x76>
c000bb57:	50                   	push   eax
c000bb58:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb5b:	0f af c6             	imul   eax,esi
c000bb5e:	05 ff 0f 00 00       	add    eax,0xfff
c000bb63:	99                   	cdq    
c000bb64:	f7 fd                	idiv   ebp
c000bb66:	50                   	push   eax
c000bb67:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000bb6b:	ff 35 90 22 03 c0    	push   DWORD PTR ds:0xc0032290
c000bb71:	e8 72 89 00 00       	call   c00144e8 <VAS::lockPages(unsigned long, int)>
c000bb76:	83 c4 10             	add    esp,0x10
c000bb79:	8d 76 00             	lea    esi,[esi+0x0]
c000bb7c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000bb80:	74 0e                	je     c000bb90 <VCache::read(unsigned long long, int, void*)+0x8a>
c000bb82:	83 ec 0c             	sub    esp,0xc
c000bb85:	53                   	push   ebx
c000bb86:	e8 e1 fc ff ff       	call   c000b86c <VCache::writeWriteBuffer()>
c000bb8b:	83 c4 10             	add    esp,0x10
c000bb8e:	66 90                	xchg   ax,ax
c000bb90:	83 fe 01             	cmp    esi,0x1
c000bb93:	0f 85 fb 00 00 00    	jne    c000bc94 <VCache::read(unsigned long long, int, void*)+0x18e>
c000bb99:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000bb9c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000bba3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bba7:	0f 85 e7 00 00 00    	jne    c000bc94 <VCache::read(unsigned long long, int, void*)+0x18e>
c000bbad:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000bbb0:	89 ee                	mov    esi,ebp
c000bbb2:	f7 de                	neg    esi
c000bbb4:	89 f0                	mov    eax,esi
c000bbb6:	c1 f8 1f             	sar    eax,0x1f
c000bbb9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bbbd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000bbc1:	23 4c 24 0c          	and    ecx,DWORD PTR [esp+0xc]
c000bbc5:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000bbc9:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000bbcd:	89 ca                	mov    edx,ecx
c000bbcf:	89 f9                	mov    ecx,edi
c000bbd1:	0f b6 f9             	movzx  edi,cl
c000bbd4:	89 f0                	mov    eax,esi
c000bbd6:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000bbda:	74 0c                	je     c000bbe8 <VCache::read(unsigned long long, int, void*)+0xe2>
c000bbdc:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000bbdf:	75 07                	jne    c000bbe8 <VCache::read(unsigned long long, int, void*)+0xe2>
c000bbe1:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c000bbe4:	74 56                	je     c000bc3c <VCache::read(unsigned long long, int, void*)+0x136>
c000bbe6:	66 90                	xchg   ax,ax
c000bbe8:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000bbec:	83 ec 0c             	sub    esp,0xc
c000bbef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000bbf2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bbf6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bbf9:	8b 37                	mov    esi,DWORD PTR [edi]
c000bbfb:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000bbfe:	55                   	push   ebp
c000bbff:	52                   	push   edx
c000bc00:	50                   	push   eax
c000bc01:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bc05:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000bc08:	83 c4 20             	add    esp,0x20
c000bc0b:	85 c0                	test   eax,eax
c000bc0d:	89 c5                	mov    ebp,eax
c000bc0f:	74 2b                	je     c000bc3c <VCache::read(unsigned long long, int, void*)+0x136>
c000bc11:	83 ec 0c             	sub    esp,0xc
c000bc14:	68 50 86 02 c0       	push   0xc0028650
c000bc19:	e8 48 b3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000bc1e:	83 c4 10             	add    esp,0x10
c000bc21:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bc26:	0f 84 bc 00 00 00    	je     c000bce8 <VCache::read(unsigned long long, int, void*)+0x1e2>
c000bc2c:	56                   	push   esi
c000bc2d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bc30:	05 ff 0f 00 00       	add    eax,0xfff
c000bc35:	e9 92 00 00 00       	jmp    c000bccc <VCache::read(unsigned long long, int, void*)+0x1c6>
c000bc3a:	66 90                	xchg   ax,ax
c000bc3c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000bc3f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000bc43:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000bc49:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000bc4c:	8d 70 ff             	lea    esi,[eax-0x1]
c000bc4f:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000bc53:	0f af f1             	imul   esi,ecx
c000bc56:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000bc59:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bc5b:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bc60:	74 26                	je     c000bc88 <VCache::read(unsigned long long, int, void*)+0x182>
c000bc62:	51                   	push   ecx
c000bc63:	b9 00 10 00 00       	mov    ecx,0x1000
c000bc68:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bc6b:	05 ff 0f 00 00       	add    eax,0xfff
c000bc70:	99                   	cdq    
c000bc71:	f7 f9                	idiv   ecx
c000bc73:	50                   	push   eax
c000bc74:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000bc78:	ff 35 90 22 03 c0    	push   DWORD PTR ds:0xc0032290
c000bc7e:	e8 03 86 00 00       	call   c0014286 <VAS::unlockPages(unsigned long, int)>
c000bc83:	83 c4 10             	add    esp,0x10
c000bc86:	66 90                	xchg   ax,ax
c000bc88:	e8 d3 ab 00 00       	call   c0016860 <KeRestorePreemption()>
c000bc8d:	31 ed                	xor    ebp,ebp
c000bc8f:	eb 5f                	jmp    c000bcf0 <VCache::read(unsigned long long, int, void*)+0x1ea>
c000bc91:	8d 76 00             	lea    esi,[esi+0x0]
c000bc94:	83 ec 0c             	sub    esp,0xc
c000bc97:	53                   	push   ebx
c000bc98:	e8 bf fb ff ff       	call   c000b85c <VCache::invalidateReadBuffer()>
c000bc9d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000bca0:	5a                   	pop    edx
c000bca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000bca3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000bca7:	56                   	push   esi
c000bca8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bcac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bcb0:	50                   	push   eax
c000bcb1:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000bcb4:	83 c4 20             	add    esp,0x20
c000bcb7:	89 c5                	mov    ebp,eax
c000bcb9:	89 f8                	mov    eax,edi
c000bcbb:	84 c0                	test   al,al
c000bcbd:	74 29                	je     c000bce8 <VCache::read(unsigned long long, int, void*)+0x1e2>
c000bcbf:	50                   	push   eax
c000bcc0:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000bcc4:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000bcca:	66 90                	xchg   ax,ax
c000bccc:	b9 00 10 00 00       	mov    ecx,0x1000
c000bcd1:	99                   	cdq    
c000bcd2:	f7 f9                	idiv   ecx
c000bcd4:	50                   	push   eax
c000bcd5:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000bcd9:	ff 35 90 22 03 c0    	push   DWORD PTR ds:0xc0032290
c000bcdf:	e8 a2 85 00 00       	call   c0014286 <VAS::unlockPages(unsigned long, int)>
c000bce4:	83 c4 10             	add    esp,0x10
c000bce7:	90                   	nop
c000bce8:	e8 73 ab 00 00       	call   c0016860 <KeRestorePreemption()>
c000bced:	8d 76 00             	lea    esi,[esi+0x0]
c000bcf0:	83 c4 2c             	add    esp,0x2c
c000bcf3:	89 e8                	mov    eax,ebp
c000bcf5:	5b                   	pop    ebx
c000bcf6:	5e                   	pop    esi
c000bcf7:	5f                   	pop    edi
c000bcf8:	5d                   	pop    ebp
c000bcf9:	c3                   	ret    

c000bcfa <Video::putrect(int, int, int, int, unsigned int)>:
c000bcfa:	55                   	push   ebp
c000bcfb:	57                   	push   edi
c000bcfc:	56                   	push   esi
c000bcfd:	53                   	push   ebx
c000bcfe:	83 ec 1c             	sub    esp,0x1c
c000bd01:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bd05:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd09:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000bd0d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000bd11:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bd15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bd19:	01 df                	add    edi,ebx
c000bd1b:	39 fb                	cmp    ebx,edi
c000bd1d:	7d 1f                	jge    c000bd3e <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000bd1f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bd23:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000bd27:	7d 12                	jge    c000bd3b <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000bd29:	8b 16                	mov    edx,DWORD PTR [esi]
c000bd2b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bd2f:	53                   	push   ebx
c000bd30:	55                   	push   ebp
c000bd31:	45                   	inc    ebp
c000bd32:	56                   	push   esi
c000bd33:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bd36:	83 c4 10             	add    esp,0x10
c000bd39:	eb e8                	jmp    c000bd23 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000bd3b:	43                   	inc    ebx
c000bd3c:	eb dd                	jmp    c000bd1b <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000bd3e:	83 c4 1c             	add    esp,0x1c
c000bd41:	5b                   	pop    ebx
c000bd42:	5e                   	pop    esi
c000bd43:	5f                   	pop    edi
c000bd44:	5d                   	pop    ebp
c000bd45:	c3                   	ret    

c000bd46 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000bd46:	55                   	push   ebp
c000bd47:	57                   	push   edi
c000bd48:	31 ff                	xor    edi,edi
c000bd4a:	56                   	push   esi
c000bd4b:	53                   	push   ebx
c000bd4c:	83 ec 1c             	sub    esp,0x1c
c000bd4f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000bd53:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000bd57:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000bd5e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000bd63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd67:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bd6b:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000bd6f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000bd72:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000bd76:	01 f9                	add    ecx,edi
c000bd78:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000bd7c:	7d 2f                	jge    c000bdad <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000bd7e:	31 f6                	xor    esi,esi
c000bd80:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000bd84:	01 f2                	add    edx,esi
c000bd86:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000bd8a:	7d 1a                	jge    c000bda6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000bd8c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bd8f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000bd92:	46                   	inc    esi
c000bd93:	51                   	push   ecx
c000bd94:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000bd98:	52                   	push   edx
c000bd99:	55                   	push   ebp
c000bd9a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bd9d:	83 c4 10             	add    esp,0x10
c000bda0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bda4:	eb da                	jmp    c000bd80 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000bda6:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000bdaa:	47                   	inc    edi
c000bdab:	eb c5                	jmp    c000bd72 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000bdad:	83 c4 1c             	add    esp,0x1c
c000bdb0:	5b                   	pop    ebx
c000bdb1:	5e                   	pop    esi
c000bdb2:	5f                   	pop    edi
c000bdb3:	5d                   	pop    ebp
c000bdb4:	c3                   	ret    
c000bdb5:	90                   	nop

c000bdb6 <Video::blit(unsigned int*, int, int, int, int)>:
c000bdb6:	55                   	push   ebp
c000bdb7:	ba 00 00 00 00       	mov    edx,0x0
c000bdbc:	57                   	push   edi
c000bdbd:	56                   	push   esi
c000bdbe:	53                   	push   ebx
c000bdbf:	83 ec 1c             	sub    esp,0x1c
c000bdc2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdc6:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000bdca:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bdce:	85 c0                	test   eax,eax
c000bdd0:	0f 49 d0             	cmovns edx,eax
c000bdd3:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000bdda:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000bdde:	89 eb                	mov    ebx,ebp
c000bde0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000bde4:	01 ea                	add    edx,ebp
c000bde6:	39 da                	cmp    edx,ebx
c000bde8:	7e 54                	jle    c000be3e <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000bdea:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000bdf0:	7c 4c                	jl     c000be3e <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000bdf2:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000bdf6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000bdfa:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000bdfe:	01 c1                	add    ecx,eax
c000be00:	39 f9                	cmp    ecx,edi
c000be02:	7e 2f                	jle    c000be33 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000be04:	83 c2 04             	add    edx,0x4
c000be07:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000be0d:	7c 21                	jl     c000be30 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000be0f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000be13:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000be15:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000be18:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000be1c:	55                   	push   ebp
c000be1d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000be21:	56                   	push   esi
c000be22:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000be25:	83 c4 10             	add    esp,0x10
c000be28:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be2c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000be30:	47                   	inc    edi
c000be31:	eb c7                	jmp    c000bdfa <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000be33:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000be37:	43                   	inc    ebx
c000be38:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000be3c:	eb a2                	jmp    c000bde0 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000be3e:	83 c4 1c             	add    esp,0x1c
c000be41:	5b                   	pop    ebx
c000be42:	5e                   	pop    esi
c000be43:	5f                   	pop    edi
c000be44:	5d                   	pop    ebp
c000be45:	c3                   	ret    

c000be46 <Video::clearScreen(unsigned int)>:
c000be46:	83 ec 14             	sub    esp,0x14
c000be49:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be4d:	8b 10                	mov    edx,DWORD PTR [eax]
c000be4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be53:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000be59:	ff b0 58 01 00 00    	push   DWORD PTR [eax+0x158]
c000be5f:	6a 00                	push   0x0
c000be61:	6a 00                	push   0x0
c000be63:	50                   	push   eax
c000be64:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000be67:	83 c4 2c             	add    esp,0x2c
c000be6a:	c3                   	ret    
c000be6b:	90                   	nop

c000be6c <Video::putpixel(int, int, unsigned int)>:
c000be6c:	c7 44 24 04 88 86 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028688
c000be74:	e9 33 41 00 00       	jmp    c000ffac <KePanic(char const*)>
c000be79:	90                   	nop

c000be7a <Video::readPixelApprox(int, int)>:
c000be7a:	83 ec 18             	sub    esp,0x18
c000be7d:	68 a9 86 02 c0       	push   0xc00286a9
c000be82:	e8 25 41 00 00       	call   c000ffac <KePanic(char const*)>
c000be87:	31 c0                	xor    eax,eax
c000be89:	83 c4 1c             	add    esp,0x1c
c000be8c:	c3                   	ret    
c000be8d:	90                   	nop

c000be8e <Video::Video(char const*)>:
c000be8e:	83 ec 0c             	sub    esp,0xc
c000be91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be95:	83 ec 08             	sub    esp,0x8
c000be98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be9c:	50                   	push   eax
c000be9d:	e8 8e e1 ff ff       	call   c000a030 <Device::Device(char const*)>
c000bea2:	83 c4 10             	add    esp,0x10
c000bea5:	ba 4c 87 02 c0       	mov    edx,0xc002874c
c000beaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beae:	89 10                	mov    DWORD PTR [eax],edx
c000beb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beb4:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000bebe:	90                   	nop
c000bebf:	83 c4 0c             	add    esp,0xc
c000bec2:	c3                   	ret    
c000bec3:	90                   	nop

c000bec4 <Video::~Video()>:
c000bec4:	83 ec 0c             	sub    esp,0xc
c000bec7:	ba 4c 87 02 c0       	mov    edx,0xc002874c
c000becc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bed0:	89 10                	mov    DWORD PTR [eax],edx
c000bed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bed6:	83 ec 0c             	sub    esp,0xc
c000bed9:	50                   	push   eax
c000beda:	e8 f1 de ff ff       	call   c0009dd0 <Device::~Device()>
c000bedf:	83 c4 10             	add    esp,0x10
c000bee2:	90                   	nop
c000bee3:	83 c4 0c             	add    esp,0xc
c000bee6:	c3                   	ret    
c000bee7:	90                   	nop

c000bee8 <Video::~Video()>:
c000bee8:	83 ec 0c             	sub    esp,0xc
c000beeb:	83 ec 0c             	sub    esp,0xc
c000beee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bef2:	e8 cd ff ff ff       	call   c000bec4 <Video::~Video()>
c000bef7:	83 c4 10             	add    esp,0x10
c000befa:	83 ec 08             	sub    esp,0x8
c000befd:	68 64 01 00 00       	push   0x164
c000bf02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf06:	e8 55 18 00 00       	call   c000d760 <operator delete(void*, unsigned long)>
c000bf0b:	83 c4 10             	add    esp,0x10
c000bf0e:	83 c4 0c             	add    esp,0xc
c000bf11:	c3                   	ret    

c000bf12 <Video::isMonochrome()>:
c000bf12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf16:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000bf1c:	c3                   	ret    
c000bf1d:	90                   	nop

c000bf1e <Video::getWidth()>:
c000bf1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf22:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000bf28:	c3                   	ret    
c000bf29:	90                   	nop

c000bf2a <Video::getHeight()>:
c000bf2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf2e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000bf34:	c3                   	ret    
c000bf35:	90                   	nop

c000bf36 <Video::drawCursor(int, int, unsigned int*, int)>:
c000bf36:	55                   	push   ebp
c000bf37:	57                   	push   edi
c000bf38:	56                   	push   esi
c000bf39:	53                   	push   ebx
c000bf3a:	83 ec 2c             	sub    esp,0x2c
c000bf3d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bf41:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000bf45:	83 f8 01             	cmp    eax,0x1
c000bf48:	19 c9                	sbb    ecx,ecx
c000bf4a:	31 db                	xor    ebx,ebx
c000bf4c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000bf50:	f7 54 24 14          	not    DWORD PTR [esp+0x14]
c000bf54:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000bf58:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000bf60:	81 64 24 14 ff ff ff 00 	and    DWORD PTR [esp+0x14],0xffffff
c000bf68:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bf6c:	01 d8                	add    eax,ebx
c000bf6e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf72:	56                   	push   esi
c000bf73:	e8 b2 ff ff ff       	call   c000bf2a <Video::getHeight()>
c000bf78:	59                   	pop    ecx
c000bf79:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000bf7d:	0f 8e 80 00 00 00    	jle    c000c003 <Video::drawCursor(int, int, unsigned int*, int)+0xcd>
c000bf83:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bf87:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000bf8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bf8e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bf92:	8b ac 98 80 00 00 00 	mov    ebp,DWORD PTR [eax+ebx*4+0x80]
c000bf99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf9d:	09 e8                	or     eax,ebp
c000bf9f:	74 47                	je     c000bfe8 <Video::drawCursor(int, int, unsigned int*, int)+0xb2>
c000bfa1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000bfa5:	89 f8                	mov    eax,edi
c000bfa7:	83 c0 1f             	add    eax,0x1f
c000bfaa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bfae:	56                   	push   esi
c000bfaf:	e8 6a ff ff ff       	call   c000bf1e <Video::getWidth()>
c000bfb4:	5a                   	pop    edx
c000bfb5:	39 c7                	cmp    edi,eax
c000bfb7:	7d 2f                	jge    c000bfe8 <Video::drawCursor(int, int, unsigned int*, int)+0xb2>
c000bfb9:	f7 c5 01 00 00 00    	test   ebp,0x1
c000bfbf:	74 33                	je     c000bff4 <Video::drawCursor(int, int, unsigned int*, int)+0xbe>
c000bfc1:	8b 06                	mov    eax,DWORD PTR [esi]
c000bfc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfc7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfcb:	57                   	push   edi
c000bfcc:	56                   	push   esi
c000bfcd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bfd0:	83 c4 10             	add    esp,0x10
c000bfd3:	d1 ed                	shr    ebp,1
c000bfd5:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c000bfd9:	39 7c 24 1c          	cmp    DWORD PTR [esp+0x1c],edi
c000bfdd:	74 09                	je     c000bfe8 <Video::drawCursor(int, int, unsigned int*, int)+0xb2>
c000bfdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bfe3:	47                   	inc    edi
c000bfe4:	09 e8                	or     eax,ebp
c000bfe6:	75 c6                	jne    c000bfae <Video::drawCursor(int, int, unsigned int*, int)+0x78>
c000bfe8:	43                   	inc    ebx
c000bfe9:	83 fb 20             	cmp    ebx,0x20
c000bfec:	0f 85 76 ff ff ff    	jne    c000bf68 <Video::drawCursor(int, int, unsigned int*, int)+0x32>
c000bff2:	eb 0f                	jmp    c000c003 <Video::drawCursor(int, int, unsigned int*, int)+0xcd>
c000bff4:	f6 44 24 0c 01       	test   BYTE PTR [esp+0xc],0x1
c000bff9:	74 d8                	je     c000bfd3 <Video::drawCursor(int, int, unsigned int*, int)+0x9d>
c000bffb:	8b 06                	mov    eax,DWORD PTR [esi]
c000bffd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c001:	eb c4                	jmp    c000bfc7 <Video::drawCursor(int, int, unsigned int*, int)+0x91>
c000c003:	83 c4 2c             	add    esp,0x2c
c000c006:	5b                   	pop    ebx
c000c007:	5e                   	pop    esi
c000c008:	5f                   	pop    edi
c000c009:	5d                   	pop    ebp
c000c00a:	c3                   	ret    
c000c00b:	90                   	nop

c000c00c <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000c00c:	55                   	push   ebp
c000c00d:	57                   	push   edi
c000c00e:	56                   	push   esi
c000c00f:	53                   	push   ebx
c000c010:	83 ec 48             	sub    esp,0x48
c000c013:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000c017:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000c01b:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000c01f:	c1 e0 08             	shl    eax,0x8
c000c022:	01 d0                	add    eax,edx
c000c024:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000c028:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c02c:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000c030:	c1 e0 08             	shl    eax,0x8
c000c033:	01 d0                	add    eax,edx
c000c035:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c039:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c03d:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c000c042:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c046:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c04a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000c051:	50                   	push   eax
c000c052:	e8 01 3b 00 00       	call   c000fb58 <malloc>
c000c057:	83 c4 10             	add    esp,0x10
c000c05a:	85 c0                	test   eax,eax
c000c05c:	89 c5                	mov    ebp,eax
c000c05e:	75 10                	jne    c000c070 <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c000c060:	83 ec 0c             	sub    esp,0xc
c000c063:	68 d4 86 02 c0       	push   0xc00286d4
c000c068:	e8 3f 3f 00 00       	call   c000ffac <KePanic(char const*)>
c000c06d:	83 c4 10             	add    esp,0x10
c000c070:	52                   	push   edx
c000c071:	bf 12 00 00 00       	mov    edi,0x12
c000c076:	52                   	push   edx
c000c077:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000c07b:	50                   	push   eax
c000c07c:	68 e4 86 02 c0       	push   0xc00286e4
c000c081:	e8 e0 ae ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c086:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000c089:	83 e0 20             	and    eax,0x20
c000c08c:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000c090:	85 c0                	test   eax,eax
c000c092:	59                   	pop    ecx
c000c093:	0f 94 c0             	sete   al
c000c096:	0f b6 c0             	movzx  eax,al
c000c099:	5e                   	pop    esi
c000c09a:	50                   	push   eax
c000c09b:	68 ee 86 02 c0       	push   0xc00286ee
c000c0a0:	e8 c1 ae ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c0a5:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000c0a9:	83 c4 10             	add    esp,0x10
c000c0ac:	85 c0                	test   eax,eax
c000c0ae:	89 c2                	mov    edx,eax
c000c0b0:	74 11                	je     c000c0c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c000c0b2:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c000c0b6:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000c0ba:	c1 ff 03             	sar    edi,0x3
c000c0bd:	0f af f9             	imul   edi,ecx
c000c0c0:	83 c7 12             	add    edi,0x12
c000c0c3:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000c0c8:	74 07                	je     c000c0d1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c000c0ca:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000c0cf:	75 12                	jne    c000c0e3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c000c0d1:	83 ec 0c             	sub    esp,0xc
c000c0d4:	68 fc 86 02 c0       	push   0xc00286fc
c000c0d9:	e8 88 ae ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c0de:	e9 aa 02 00 00       	jmp    c000c38d <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c000c0e3:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000c0e7:	83 f9 02             	cmp    ecx,0x2
c000c0ea:	74 0e                	je     c000c0fa <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c000c0ec:	83 f9 0a             	cmp    ecx,0xa
c000c0ef:	0f 84 d1 00 00 00    	je     c000c1c6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c000c0f5:	e9 7e 02 00 00       	jmp    c000c378 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c000c0fa:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000c0ff:	75 0e                	jne    c000c10f <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000c101:	84 d2                	test   dl,dl
c000c103:	75 0a                	jne    c000c10f <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000c105:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000c108:	83 e8 18             	sub    eax,0x18
c000c10b:	a8 f7                	test   al,0xf7
c000c10d:	74 0d                	je     c000c11c <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c000c10f:	83 ec 0c             	sub    esp,0xc
c000c112:	68 11 87 02 c0       	push   0xc0028711
c000c117:	e9 64 02 00 00       	jmp    c000c380 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000c11c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c124:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000c129:	31 c0                	xor    eax,eax
c000c12b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000c12f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000c137:	89 c6                	mov    esi,eax
c000c139:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000c13e:	75 15                	jne    c000c155 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000c140:	99                   	cdq    
c000c141:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000c145:	85 d2                	test   edx,edx
c000c147:	75 0c                	jne    c000c155 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000c149:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c14d:	29 c6                	sub    esi,eax
c000c14f:	4e                   	dec    esi
c000c150:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c000c155:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000c159:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c161:	75 0c                	jne    c000c16f <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c000c163:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c000c168:	c1 e2 18             	shl    edx,0x18
c000c16b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c16f:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c000c174:	8d 46 01             	lea    eax,[esi+0x1]
c000c177:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000c17b:	c1 e1 10             	shl    ecx,0x10
c000c17e:	89 ca                	mov    edx,ecx
c000c180:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c000c185:	c1 e1 08             	shl    ecx,0x8
c000c188:	09 d1                	or     ecx,edx
c000c18a:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000c18e:	09 d1                	or     ecx,edx
c000c190:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000c194:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c000c198:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000c19c:	c1 fa 03             	sar    edx,0x3
c000c19f:	01 d7                	add    edi,edx
c000c1a1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1a5:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c000c1a9:	7e 04                	jle    c000c1af <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c000c1ab:	89 c6                	mov    esi,eax
c000c1ad:	eb 8a                	jmp    c000c139 <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c000c1af:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c1b3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c1b7:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000c1bb:	0f 8f 6e ff ff ff    	jg     c000c12f <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c000c1c1:	e9 ce 01 00 00       	jmp    c000c394 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000c1c6:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000c1cb:	75 0e                	jne    c000c1db <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000c1cd:	85 c0                	test   eax,eax
c000c1cf:	75 0a                	jne    c000c1db <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000c1d1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000c1d4:	83 e8 18             	sub    eax,0x18
c000c1d7:	a8 f7                	test   al,0xf7
c000c1d9:	74 0d                	je     c000c1e8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c000c1db:	83 ec 0c             	sub    esp,0xc
c000c1de:	68 1f 87 02 c0       	push   0xc002871f
c000c1e3:	e9 98 01 00 00       	jmp    c000c380 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000c1e8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000c1f0:	31 c9                	xor    ecx,ecx
c000c1f2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c1fa:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c000c1fe:	0f 8d 90 01 00 00    	jge    c000c394 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000c204:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c208:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c000c20c:	0f 8e 82 01 00 00    	jle    c000c394 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000c212:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000c216:	8d 77 01             	lea    esi,[edi+0x1]
c000c219:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c21d:	83 fa 7f             	cmp    edx,0x7f
c000c220:	89 d0                	mov    eax,edx
c000c222:	0f 8e a3 00 00 00    	jle    c000c2cb <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c000c228:	83 e0 7f             	and    eax,0x7f
c000c22b:	31 d2                	xor    edx,edx
c000c22d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c231:	40                   	inc    eax
c000c232:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000c236:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c23a:	75 08                	jne    c000c244 <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c000c23c:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c000c241:	c1 e2 18             	shl    edx,0x18
c000c244:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c000c249:	c1 e0 10             	shl    eax,0x10
c000c24c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c250:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c000c255:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000c259:	c1 e0 08             	shl    eax,0x8
c000c25c:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000c260:	09 f8                	or     eax,edi
c000c262:	31 ff                	xor    edi,edi
c000c264:	09 d0                	or     eax,edx
c000c266:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c26a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000c26f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c273:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000c278:	75 1d                	jne    c000c297 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000c27a:	89 c8                	mov    eax,ecx
c000c27c:	99                   	cdq    
c000c27d:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000c281:	85 d2                	test   edx,edx
c000c283:	75 12                	jne    c000c297 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000c285:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c289:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000c28d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000c291:	49                   	dec    ecx
c000c292:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000c297:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c29b:	8d 51 01             	lea    edx,[ecx+0x1]
c000c29e:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c000c2a2:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000c2a6:	8d 47 01             	lea    eax,[edi+0x1]
c000c2a9:	7e 06                	jle    c000c2b1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c000c2ab:	89 c7                	mov    edi,eax
c000c2ad:	89 d1                	mov    ecx,edx
c000c2af:	eb c2                	jmp    c000c273 <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c000c2b1:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000c2b5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000c2b9:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000c2bd:	c1 f8 03             	sar    eax,0x3
c000c2c0:	01 c6                	add    esi,eax
c000c2c2:	89 d1                	mov    ecx,edx
c000c2c4:	89 f7                	mov    edi,esi
c000c2c6:	e9 2f ff ff ff       	jmp    c000c1fa <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c000c2cb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c2d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c2d7:	40                   	inc    eax
c000c2d8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2dc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000c2e1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c2e5:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c2ea:	75 1d                	jne    c000c309 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000c2ec:	89 c8                	mov    eax,ecx
c000c2ee:	99                   	cdq    
c000c2ef:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000c2f3:	85 d2                	test   edx,edx
c000c2f5:	75 12                	jne    c000c309 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000c2f7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c2fb:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000c2ff:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000c303:	49                   	dec    ecx
c000c304:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000c309:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000c30d:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000c315:	75 0c                	jne    c000c323 <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c000c317:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c000c31c:	c1 e7 18             	shl    edi,0x18
c000c31f:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000c323:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000c328:	8d 51 01             	lea    edx,[ecx+0x1]
c000c32b:	c1 e0 10             	shl    eax,0x10
c000c32e:	89 c7                	mov    edi,eax
c000c330:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c000c335:	c1 e0 08             	shl    eax,0x8
c000c338:	09 f8                	or     eax,edi
c000c33a:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000c33e:	09 f8                	or     eax,edi
c000c340:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000c344:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000c348:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000c34c:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000c350:	c1 f8 03             	sar    eax,0x3
c000c353:	01 c6                	add    esi,eax
c000c355:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c359:	40                   	inc    eax
c000c35a:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c000c35e:	7e 0b                	jle    c000c36b <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c000c360:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c364:	89 d1                	mov    ecx,edx
c000c366:	e9 7a ff ff ff       	jmp    c000c2e5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c000c36b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000c36f:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000c373:	e9 4a ff ff ff       	jmp    c000c2c2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c000c378:	50                   	push   eax
c000c379:	50                   	push   eax
c000c37a:	51                   	push   ecx
c000c37b:	68 2e 87 02 c0       	push   0xc002872e
c000c380:	e8 e1 ab ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c385:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c388:	e8 db 37 00 00       	call   c000fb68 <free>
c000c38d:	83 c4 10             	add    esp,0x10
c000c390:	31 ed                	xor    ebp,ebp
c000c392:	eb 14                	jmp    c000c3a8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c000c394:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000c398:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c39c:	89 18                	mov    DWORD PTR [eax],ebx
c000c39e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c3a2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000c3a6:	89 18                	mov    DWORD PTR [eax],ebx
c000c3a8:	83 c4 3c             	add    esp,0x3c
c000c3ab:	89 e8                	mov    eax,ebp
c000c3ad:	5b                   	pop    ebx
c000c3ae:	5e                   	pop    esi
c000c3af:	5f                   	pop    edi
c000c3b0:	5d                   	pop    ebp
c000c3b1:	c3                   	ret    

c000c3b2 <Video::putTGA(int, int, unsigned char*, int)>:
c000c3b2:	55                   	push   ebp
c000c3b3:	57                   	push   edi
c000c3b4:	56                   	push   esi
c000c3b5:	53                   	push   ebx
c000c3b6:	83 ec 28             	sub    esp,0x28
c000c3b9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000c3bd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000c3c1:	50                   	push   eax
c000c3c2:	8d 44 24 18          	lea    eax,[esp+0x18]
c000c3c6:	50                   	push   eax
c000c3c7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000c3cb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000c3cf:	55                   	push   ebp
c000c3d0:	e8 37 fc ff ff       	call   c000c00c <Video::tgaParse(unsigned char*, int, int*, int*)>
c000c3d5:	83 c4 20             	add    esp,0x20
c000c3d8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c3dc:	85 c0                	test   eax,eax
c000c3de:	74 3b                	je     c000c41b <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000c3e0:	89 c6                	mov    esi,eax
c000c3e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c3e6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c3ea:	39 d8                	cmp    eax,ebx
c000c3ec:	7e 2d                	jle    c000c41b <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000c3ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c3f2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c3f6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c3fa:	39 f8                	cmp    eax,edi
c000c3fc:	7e 1a                	jle    c000c418 <Video::putTGA(int, int, unsigned char*, int)+0x66>
c000c3fe:	83 c6 04             	add    esi,0x4
c000c401:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000c404:	85 c0                	test   eax,eax
c000c406:	79 0d                	jns    c000c415 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000c408:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c40b:	50                   	push   eax
c000c40c:	53                   	push   ebx
c000c40d:	57                   	push   edi
c000c40e:	55                   	push   ebp
c000c40f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000c412:	83 c4 10             	add    esp,0x10
c000c415:	47                   	inc    edi
c000c416:	eb da                	jmp    c000c3f2 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000c418:	43                   	inc    ebx
c000c419:	eb c7                	jmp    c000c3e2 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000c41b:	83 c4 1c             	add    esp,0x1c
c000c41e:	5b                   	pop    ebx
c000c41f:	5e                   	pop    esi
c000c420:	5f                   	pop    edi
c000c421:	5d                   	pop    ebp
c000c422:	c3                   	ret    
c000c423:	90                   	nop

c000c424 <ACPI::close(int, int, void*)>:
c000c424:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c429:	c3                   	ret    
c000c42a:	66 90                	xchg   ax,ax

c000c42c <loadACPITables(unsigned char*)>:
c000c42c:	57                   	push   edi
c000c42d:	56                   	push   esi
c000c42e:	53                   	push   ebx
c000c42f:	83 ec 60             	sub    esp,0x60
c000c432:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000c437:	0f 84 43 02 00 00    	je     c000c680 <loadACPITables(unsigned char*)+0x254>
c000c43d:	a0 80 1d 03 c0       	mov    al,ds:0xc0031d80
c000c442:	0f b6 c0             	movzx  eax,al
c000c445:	85 c0                	test   eax,eax
c000c447:	74 7b                	je     c000c4c4 <loadACPITables(unsigned char*)+0x98>
c000c449:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c44d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c451:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000c455:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c458:	83 e8 24             	sub    eax,0x24
c000c45b:	c1 e8 03             	shr    eax,0x3
c000c45e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c462:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000c46a:	66 90                	xchg   ax,ax
c000c46c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000c470:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000c474:	0f 8d ba 00 00 00    	jge    c000c534 <loadACPITables(unsigned char*)+0x108>
c000c47a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c47e:	83 c0 24             	add    eax,0x24
c000c481:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c485:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000c489:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c48d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000c491:	c1 e0 03             	shl    eax,0x3
c000c494:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000c498:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c49c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000c49f:	8b 00                	mov    eax,DWORD PTR [eax]
c000c4a1:	89 c1                	mov    ecx,eax
c000c4a3:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c000c4a8:	8d 50 01             	lea    edx,[eax+0x1]
c000c4ab:	89 15 60 1b 03 c0    	mov    DWORD PTR ds:0xc0031b60,edx
c000c4b1:	89 ca                	mov    edx,ecx
c000c4b3:	89 14 c5 84 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce47c],edx
c000c4ba:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000c4bf:	eb ab                	jmp    c000c46c <loadACPITables(unsigned char*)+0x40>
c000c4c1:	8d 76 00             	lea    esi,[esi+0x0]
c000c4c4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c4c8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c4cc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c4d3:	83 e8 24             	sub    eax,0x24
c000c4d6:	c1 e8 02             	shr    eax,0x2
c000c4d9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c4dd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000c4e5:	8d 76 00             	lea    esi,[esi+0x0]
c000c4e8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c4ec:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000c4f0:	7d 42                	jge    c000c534 <loadACPITables(unsigned char*)+0x108>
c000c4f2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c4f6:	83 c0 24             	add    eax,0x24
c000c4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c4fd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c501:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c505:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c509:	c1 e0 02             	shl    eax,0x2
c000c50c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000c510:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c514:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c516:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c000c51b:	8d 50 01             	lea    edx,[eax+0x1]
c000c51e:	89 15 60 1b 03 c0    	mov    DWORD PTR ds:0xc0031b60,edx
c000c524:	89 ca                	mov    edx,ecx
c000c526:	89 14 c5 84 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce47c],edx
c000c52d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000c532:	eb b4                	jmp    c000c4e8 <loadACPITables(unsigned char*)+0xbc>
c000c534:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000c53c:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c000c541:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000c545:	0f 8d 39 01 00 00    	jge    c000c684 <loadACPITables(unsigned char*)+0x258>
c000c54b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c54f:	8b 04 c5 84 1b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce47c]
c000c556:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c55a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c55e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c562:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c566:	25 ff 0f 00 00       	and    eax,0xfff
c000c56b:	89 c6                	mov    esi,eax
c000c56d:	8b 1d 90 22 03 c0    	mov    ebx,DWORD PTR ds:0xc0032290
c000c573:	83 ec 0c             	sub    esp,0xc
c000c576:	6a 01                	push   0x1
c000c578:	e8 76 6f 00 00       	call   c00134f3 <Virt::allocateKernelVirtualPages(int)>
c000c57d:	83 c4 10             	add    esp,0x10
c000c580:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c584:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c58a:	83 ec 0c             	sub    esp,0xc
c000c58d:	6a 01                	push   0x1
c000c58f:	6a 01                	push   0x1
c000c591:	50                   	push   eax
c000c592:	52                   	push   edx
c000c593:	53                   	push   ebx
c000c594:	e8 2d 78 00 00       	call   c0013dc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c599:	83 c4 20             	add    esp,0x20
c000c59c:	09 f0                	or     eax,esi
c000c59e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c5a2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c5a6:	c1 e0 03             	shl    eax,0x3
c000c5a9:	05 80 1b 03 c0       	add    eax,0xc0031b80
c000c5ae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c5b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c5b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c5ba:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000c5c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c5c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c5ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c5d2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5d6:	89 c6                	mov    esi,eax
c000c5d8:	89 d7                	mov    edi,edx
c000c5da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c5dc:	89 c8                	mov    eax,ecx
c000c5de:	89 fa                	mov    edx,edi
c000c5e0:	89 f3                	mov    ebx,esi
c000c5e2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c5e6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c5ea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c5ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c5f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c5f5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5fd:	05 00 10 00 00       	add    eax,0x1000
c000c602:	c1 e8 0c             	shr    eax,0xc
c000c605:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c609:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c60d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c611:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c615:	25 ff 0f 00 00       	and    eax,0xfff
c000c61a:	89 c6                	mov    esi,eax
c000c61c:	8b 1d 90 22 03 c0    	mov    ebx,DWORD PTR ds:0xc0032290
c000c622:	83 ec 0c             	sub    esp,0xc
c000c625:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c629:	e8 c5 6e 00 00       	call   c00134f3 <Virt::allocateKernelVirtualPages(int)>
c000c62e:	83 c4 10             	add    esp,0x10
c000c631:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c635:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c63b:	83 ec 0c             	sub    esp,0xc
c000c63e:	6a 01                	push   0x1
c000c640:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c644:	50                   	push   eax
c000c645:	52                   	push   edx
c000c646:	53                   	push   ebx
c000c647:	e8 7a 77 00 00       	call   c0013dc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c64c:	83 c4 20             	add    esp,0x20
c000c64f:	09 f0                	or     eax,esi
c000c651:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c655:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c659:	83 ec 0c             	sub    esp,0xc
c000c65c:	50                   	push   eax
c000c65d:	e8 8f 71 00 00       	call   c00137f1 <Virt::freeKernelVirtualPages(unsigned long)>
c000c662:	83 c4 10             	add    esp,0x10
c000c665:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c669:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c66d:	89 14 c5 84 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce47c],edx
c000c674:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000c679:	e9 be fe ff ff       	jmp    c000c53c <loadACPITables(unsigned char*)+0x110>
c000c67e:	66 90                	xchg   ax,ax
c000c680:	90                   	nop
c000c681:	8d 76 00             	lea    esi,[esi+0x0]
c000c684:	83 c4 60             	add    esp,0x60
c000c687:	5b                   	pop    ebx
c000c688:	5e                   	pop    esi
c000c689:	5f                   	pop    edi
c000c68a:	c3                   	ret    
c000c68b:	90                   	nop

c000c68c <findRSDT(unsigned char*)>:
c000c68c:	57                   	push   edi
c000c68d:	56                   	push   esi
c000c68e:	53                   	push   ebx
c000c68f:	83 ec 50             	sub    esp,0x50
c000c692:	a1 88 1d 03 c0       	mov    eax,ds:0xc0031d88
c000c697:	85 c0                	test   eax,eax
c000c699:	75 0d                	jne    c000c6a8 <findRSDT(unsigned char*)+0x1c>
c000c69b:	b8 00 00 00 00       	mov    eax,0x0
c000c6a0:	e9 2b 01 00 00       	jmp    c000c7d0 <findRSDT(unsigned char*)+0x144>
c000c6a5:	8d 76 00             	lea    esi,[esi+0x0]
c000c6a8:	89 e0                	mov    eax,esp
c000c6aa:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c6ae:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c6b2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000c6be:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c6c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c6ca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000c6ce:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000c6d2:	89 c6                	mov    esi,eax
c000c6d4:	89 d7                	mov    edi,edx
c000c6d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c6d8:	89 c8                	mov    eax,ecx
c000c6da:	89 fa                	mov    edx,edi
c000c6dc:	89 f3                	mov    ebx,esi
c000c6de:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000c6e2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c6e6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c6ea:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000c6ee:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000c6f2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000c6fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c6fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c702:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c70a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c70e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c712:	25 ff 0f 00 00       	and    eax,0xfff
c000c717:	89 c6                	mov    esi,eax
c000c719:	8b 1d 90 22 03 c0    	mov    ebx,DWORD PTR ds:0xc0032290
c000c71f:	83 ec 0c             	sub    esp,0xc
c000c722:	6a 02                	push   0x2
c000c724:	e8 ca 6d 00 00       	call   c00134f3 <Virt::allocateKernelVirtualPages(int)>
c000c729:	83 c4 10             	add    esp,0x10
c000c72c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c730:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c736:	83 ec 0c             	sub    esp,0xc
c000c739:	6a 01                	push   0x1
c000c73b:	6a 02                	push   0x2
c000c73d:	50                   	push   eax
c000c73e:	52                   	push   edx
c000c73f:	53                   	push   ebx
c000c740:	e8 81 76 00 00       	call   c0013dc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c745:	83 c4 20             	add    esp,0x20
c000c748:	09 f0                	or     eax,esi
c000c74a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c74e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c752:	25 ff 0f 00 00       	and    eax,0xfff
c000c757:	89 c6                	mov    esi,eax
c000c759:	8b 1d 90 22 03 c0    	mov    ebx,DWORD PTR ds:0xc0032290
c000c75f:	83 ec 0c             	sub    esp,0xc
c000c762:	6a 02                	push   0x2
c000c764:	e8 8a 6d 00 00       	call   c00134f3 <Virt::allocateKernelVirtualPages(int)>
c000c769:	83 c4 10             	add    esp,0x10
c000c76c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c770:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c776:	83 ec 0c             	sub    esp,0xc
c000c779:	6a 01                	push   0x1
c000c77b:	6a 02                	push   0x2
c000c77d:	50                   	push   eax
c000c77e:	52                   	push   edx
c000c77f:	53                   	push   ebx
c000c780:	e8 41 76 00 00       	call   c0013dc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c785:	83 c4 20             	add    esp,0x20
c000c788:	09 f0                	or     eax,esi
c000c78a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c78e:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c793:	85 c0                	test   eax,eax
c000c795:	75 11                	jne    c000c7a8 <findRSDT(unsigned char*)+0x11c>
c000c797:	c6 05 80 1d 03 c0 00 	mov    BYTE PTR ds:0xc0031d80,0x0
c000c79e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c7a2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c7a6:	eb 24                	jmp    c000c7cc <findRSDT(unsigned char*)+0x140>
c000c7a8:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c7ad:	83 f8 02             	cmp    eax,0x2
c000c7b0:	75 12                	jne    c000c7c4 <findRSDT(unsigned char*)+0x138>
c000c7b2:	c6 05 80 1d 03 c0 01 	mov    BYTE PTR ds:0xc0031d80,0x1
c000c7b9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c7bd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c7c1:	eb 09                	jmp    c000c7cc <findRSDT(unsigned char*)+0x140>
c000c7c3:	90                   	nop
c000c7c4:	b8 00 00 00 00       	mov    eax,0x0
c000c7c9:	eb 05                	jmp    c000c7d0 <findRSDT(unsigned char*)+0x144>
c000c7cb:	90                   	nop
c000c7cc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c7d0:	83 c4 50             	add    esp,0x50
c000c7d3:	5b                   	pop    ebx
c000c7d4:	5e                   	pop    esi
c000c7d5:	5f                   	pop    edi
c000c7d6:	c3                   	ret    
c000c7d7:	90                   	nop

c000c7d8 <findDataTable(unsigned char*, char*)>:
c000c7d8:	83 ec 1c             	sub    esp,0x1c
c000c7db:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000c7e0:	75 0a                	jne    c000c7ec <findDataTable(unsigned char*, char*)+0x14>
c000c7e2:	b8 00 00 00 00       	mov    eax,0x0
c000c7e7:	eb 5f                	jmp    c000c848 <findDataTable(unsigned char*, char*)+0x70>
c000c7e9:	8d 76 00             	lea    esi,[esi+0x0]
c000c7ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c7f4:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c000c7f9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000c7fd:	7d 41                	jge    c000c840 <findDataTable(unsigned char*, char*)+0x68>
c000c7ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c803:	c1 e0 03             	shl    eax,0x3
c000c806:	05 80 1b 03 c0       	add    eax,0xc0031b80
c000c80b:	83 ec 04             	sub    esp,0x4
c000c80e:	6a 04                	push   0x4
c000c810:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c814:	50                   	push   eax
c000c815:	e8 66 3b ff ff       	call   c0000380 <memcmp>
c000c81a:	83 c4 10             	add    esp,0x10
c000c81d:	85 c0                	test   eax,eax
c000c81f:	0f 94 c0             	sete   al
c000c822:	0f b6 c0             	movzx  eax,al
c000c825:	85 c0                	test   eax,eax
c000c827:	74 0f                	je     c000c838 <findDataTable(unsigned char*, char*)+0x60>
c000c829:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c82d:	8b 04 c5 84 1b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce47c]
c000c834:	eb 12                	jmp    c000c848 <findDataTable(unsigned char*, char*)+0x70>
c000c836:	66 90                	xchg   ax,ax
c000c838:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000c83d:	eb b5                	jmp    c000c7f4 <findDataTable(unsigned char*, char*)+0x1c>
c000c83f:	90                   	nop
c000c840:	b8 00 00 00 00       	mov    eax,0x0
c000c845:	8d 76 00             	lea    esi,[esi+0x0]
c000c848:	83 c4 1c             	add    esp,0x1c
c000c84b:	c3                   	ret    

c000c84c <scanMADT()>:
c000c84c:	53                   	push   ebx
c000c84d:	83 ec 38             	sub    esp,0x38
c000c850:	c7 05 88 1d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031d88,0x0
c000c85a:	c7 05 84 1d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031d84,0x0
c000c864:	83 ec 0c             	sub    esp,0xc
c000c867:	68 90 87 02 c0       	push   0xc0028790
c000c86c:	e8 f5 a6 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c871:	83 c4 10             	add    esp,0x10
c000c874:	e8 5f db 00 00       	call   c001a3d8 <HalFindRSDP()>
c000c879:	a3 88 1d 03 c0       	mov    ds:0xc0031d88,eax
c000c87e:	a1 88 1d 03 c0       	mov    eax,ds:0xc0031d88
c000c883:	85 c0                	test   eax,eax
c000c885:	0f 84 59 04 00 00    	je     c000cce4 <scanMADT()+0x498>
c000c88b:	83 ec 0c             	sub    esp,0xc
c000c88e:	68 9e 87 02 c0       	push   0xc002879e
c000c893:	e8 ce a6 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c898:	83 c4 10             	add    esp,0x10
c000c89b:	a1 88 1d 03 c0       	mov    eax,ds:0xc0031d88
c000c8a0:	83 ec 0c             	sub    esp,0xc
c000c8a3:	50                   	push   eax
c000c8a4:	e8 e3 fd ff ff       	call   c000c68c <findRSDT(unsigned char*)>
c000c8a9:	83 c4 10             	add    esp,0x10
c000c8ac:	a3 84 1d 03 c0       	mov    ds:0xc0031d84,eax
c000c8b1:	a1 84 1d 03 c0       	mov    eax,ds:0xc0031d84
c000c8b6:	85 c0                	test   eax,eax
c000c8b8:	0f 84 2a 04 00 00    	je     c000cce8 <scanMADT()+0x49c>
c000c8be:	8b 15 84 1d 03 c0    	mov    edx,DWORD PTR ds:0xc0031d84
c000c8c4:	a1 88 1d 03 c0       	mov    eax,ds:0xc0031d88
c000c8c9:	83 ec 04             	sub    esp,0x4
c000c8cc:	52                   	push   edx
c000c8cd:	50                   	push   eax
c000c8ce:	68 48 89 02 c0       	push   0xc0028948
c000c8d3:	e8 8e a6 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c8d8:	83 c4 10             	add    esp,0x10
c000c8db:	a1 84 1d 03 c0       	mov    eax,ds:0xc0031d84
c000c8e0:	83 ec 0c             	sub    esp,0xc
c000c8e3:	50                   	push   eax
c000c8e4:	e8 43 fb ff ff       	call   c000c42c <loadACPITables(unsigned char*)>
c000c8e9:	83 c4 10             	add    esp,0x10
c000c8ec:	a1 84 1d 03 c0       	mov    eax,ds:0xc0031d84
c000c8f1:	83 ec 08             	sub    esp,0x8
c000c8f4:	68 ad 87 02 c0       	push   0xc00287ad
c000c8f9:	50                   	push   eax
c000c8fa:	e8 d9 fe ff ff       	call   c000c7d8 <findDataTable(unsigned char*, char*)>
c000c8ff:	83 c4 10             	add    esp,0x10
c000c902:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c906:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000c90b:	0f 84 db 03 00 00    	je     c000ccec <scanMADT()+0x4a0>
c000c911:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c919:	8d 76 00             	lea    esi,[esi+0x0]
c000c91c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c920:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c923:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000c927:	0f 87 c7 03 00 00    	ja     c000ccf4 <scanMADT()+0x4a8>
c000c92d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000c935:	0f 87 b9 03 00 00    	ja     c000ccf4 <scanMADT()+0x4a8>
c000c93b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c93f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c943:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c947:	8d 50 01             	lea    edx,[eax+0x1]
c000c94a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c94e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c952:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c956:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000c95a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c95e:	8d 50 01             	lea    edx,[eax+0x1]
c000c961:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c965:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c969:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c96d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000c971:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000c976:	83 f8 02             	cmp    eax,0x2
c000c979:	0f 86 71 03 00 00    	jbe    c000ccf0 <scanMADT()+0x4a4>
c000c97f:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c984:	85 c0                	test   eax,eax
c000c986:	75 58                	jne    c000c9e0 <scanMADT()+0x194>
c000c988:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c98c:	8d 50 01             	lea    edx,[eax+0x1]
c000c98f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c993:	8a 15 80 1f 03 c0    	mov    dl,BYTE PTR ds:0xc0031f80
c000c999:	0f b6 d2             	movzx  edx,dl
c000c99c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c9a0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c9a4:	88 82 c0 1f 03 c0    	mov    BYTE PTR [edx-0x3ffce040],al
c000c9aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c9ae:	8d 50 01             	lea    edx,[eax+0x1]
c000c9b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9b5:	8a 15 80 1f 03 c0    	mov    dl,BYTE PTR ds:0xc0031f80
c000c9bb:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c9be:	88 0d 80 1f 03 c0    	mov    BYTE PTR ds:0xc0031f80,cl
c000c9c4:	0f b6 d2             	movzx  edx,dl
c000c9c7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c9cb:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c9cf:	88 82 a0 1f 03 c0    	mov    BYTE PTR [edx-0x3ffce060],al
c000c9d5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c9da:	e9 f1 02 00 00       	jmp    c000ccd0 <scanMADT()+0x484>
c000c9df:	90                   	nop
c000c9e0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c9e5:	83 f8 01             	cmp    eax,0x1
c000c9e8:	0f 85 32 01 00 00    	jne    c000cb20 <scanMADT()+0x2d4>
c000c9ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c9f2:	8d 50 01             	lea    edx,[eax+0x1]
c000c9f5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9f9:	8a 15 40 1e 03 c0    	mov    dl,BYTE PTR ds:0xc0031e40
c000c9ff:	0f b6 d2             	movzx  edx,dl
c000ca02:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ca06:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ca0a:	88 82 60 1e 03 c0    	mov    BYTE PTR [edx-0x3ffce1a0],al
c000ca10:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000ca15:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ca19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca1d:	01 d0                	add    eax,edx
c000ca1f:	83 c0 2c             	add    eax,0x2c
c000ca22:	8a 00                	mov    al,BYTE PTR [eax]
c000ca24:	0f b6 d0             	movzx  edx,al
c000ca27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca2b:	8d 48 01             	lea    ecx,[eax+0x1]
c000ca2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ca32:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ca36:	0f b6 c0             	movzx  eax,al
c000ca39:	c1 e0 08             	shl    eax,0x8
c000ca3c:	89 d1                	mov    ecx,edx
c000ca3e:	09 c1                	or     ecx,eax
c000ca40:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca44:	8d 50 02             	lea    edx,[eax+0x2]
c000ca47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ca4b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ca4f:	0f b6 c0             	movzx  eax,al
c000ca52:	c1 e0 10             	shl    eax,0x10
c000ca55:	09 c1                	or     ecx,eax
c000ca57:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca5b:	8d 50 03             	lea    edx,[eax+0x3]
c000ca5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ca62:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ca66:	0f b6 c0             	movzx  eax,al
c000ca69:	c1 e0 18             	shl    eax,0x18
c000ca6c:	09 c1                	or     ecx,eax
c000ca6e:	89 ca                	mov    edx,ecx
c000ca70:	a0 40 1e 03 c0       	mov    al,ds:0xc0031e40
c000ca75:	0f b6 c0             	movzx  eax,al
c000ca78:	89 14 85 80 1e 03 c0 	mov    DWORD PTR [eax*4-0x3ffce180],edx
c000ca7f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ca84:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ca88:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca8c:	01 d0                	add    eax,edx
c000ca8e:	83 c0 2c             	add    eax,0x2c
c000ca91:	8a 00                	mov    al,BYTE PTR [eax]
c000ca93:	0f b6 d0             	movzx  edx,al
c000ca96:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca9a:	8d 48 01             	lea    ecx,[eax+0x1]
c000ca9d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000caa1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000caa5:	0f b6 c0             	movzx  eax,al
c000caa8:	c1 e0 08             	shl    eax,0x8
c000caab:	89 d1                	mov    ecx,edx
c000caad:	09 c1                	or     ecx,eax
c000caaf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cab3:	8d 50 02             	lea    edx,[eax+0x2]
c000cab6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000caba:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000cabe:	0f b6 c0             	movzx  eax,al
c000cac1:	c1 e0 10             	shl    eax,0x10
c000cac4:	09 c1                	or     ecx,eax
c000cac6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000caca:	8d 50 03             	lea    edx,[eax+0x3]
c000cacd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cad1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000cad5:	0f b6 c0             	movzx  eax,al
c000cad8:	c1 e0 18             	shl    eax,0x18
c000cadb:	09 c1                	or     ecx,eax
c000cadd:	89 ca                	mov    edx,ecx
c000cadf:	a0 40 1e 03 c0       	mov    al,ds:0xc0031e40
c000cae4:	0f b6 c0             	movzx  eax,al
c000cae7:	89 14 85 00 1f 03 c0 	mov    DWORD PTR [eax*4-0x3ffce100],edx
c000caee:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000caf3:	a0 40 1e 03 c0       	mov    al,ds:0xc0031e40
c000caf8:	83 c0 01             	add    eax,0x1
c000cafb:	a2 40 1e 03 c0       	mov    ds:0xc0031e40,al
c000cb00:	a0 40 1e 03 c0       	mov    al,ds:0xc0031e40
c000cb05:	0f b6 c0             	movzx  eax,al
c000cb08:	83 ec 08             	sub    esp,0x8
c000cb0b:	50                   	push   eax
c000cb0c:	68 b2 87 02 c0       	push   0xc00287b2
c000cb11:	e8 50 a4 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000cb16:	83 c4 10             	add    esp,0x10
c000cb19:	e9 b2 01 00 00       	jmp    c000ccd0 <scanMADT()+0x484>
c000cb1e:	66 90                	xchg   ax,ax
c000cb20:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000cb25:	83 f8 02             	cmp    eax,0x2
c000cb28:	0f 85 ea 00 00 00    	jne    c000cc18 <scanMADT()+0x3cc>
c000cb2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cb32:	8d 50 01             	lea    edx,[eax+0x1]
c000cb35:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb39:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cb3d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000cb41:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000cb45:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cb49:	8d 50 01             	lea    edx,[eax+0x1]
c000cb4c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb50:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cb54:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000cb58:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000cb5c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cb60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cb64:	01 d0                	add    eax,edx
c000cb66:	83 c0 2c             	add    eax,0x2c
c000cb69:	8a 00                	mov    al,BYTE PTR [eax]
c000cb6b:	0f b6 d0             	movzx  edx,al
c000cb6e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cb72:	8d 48 01             	lea    ecx,[eax+0x1]
c000cb75:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cb79:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000cb7d:	0f b6 c0             	movzx  eax,al
c000cb80:	c1 e0 08             	shl    eax,0x8
c000cb83:	89 d1                	mov    ecx,edx
c000cb85:	09 c1                	or     ecx,eax
c000cb87:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cb8b:	8d 50 02             	lea    edx,[eax+0x2]
c000cb8e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cb92:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000cb96:	0f b6 c0             	movzx  eax,al
c000cb99:	c1 e0 10             	shl    eax,0x10
c000cb9c:	09 c1                	or     ecx,eax
c000cb9e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cba2:	8d 50 03             	lea    edx,[eax+0x3]
c000cba5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cba9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000cbad:	0f b6 c0             	movzx  eax,al
c000cbb0:	c1 e0 18             	shl    eax,0x18
c000cbb3:	09 c8                	or     eax,ecx
c000cbb5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cbb9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000cbbe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cbc2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cbc6:	01 d0                	add    eax,edx
c000cbc8:	83 c0 2c             	add    eax,0x2c
c000cbcb:	8a 00                	mov    al,BYTE PTR [eax]
c000cbcd:	0f b6 d0             	movzx  edx,al
c000cbd0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cbd4:	8d 48 01             	lea    ecx,[eax+0x1]
c000cbd7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cbdb:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000cbdf:	0f b6 c0             	movzx  eax,al
c000cbe2:	c1 e0 08             	shl    eax,0x8
c000cbe5:	09 d0                	or     eax,edx
c000cbe7:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000cbec:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000cbf1:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000cbf6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cbfa:	88 90 68 bd 02 c0    	mov    BYTE PTR [eax-0x3ffd4298],dl
c000cc00:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000cc05:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000cc0a:	66 89 94 00 20 1e 03 c0 	mov    WORD PTR [eax+eax*1-0x3ffce1e0],dx
c000cc12:	e9 b9 00 00 00       	jmp    c000ccd0 <scanMADT()+0x484>
c000cc17:	90                   	nop
c000cc18:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000cc1d:	83 f8 04             	cmp    eax,0x4
c000cc20:	0f 85 9a 00 00 00    	jne    c000ccc0 <scanMADT()+0x474>
c000cc26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cc2a:	8d 50 01             	lea    edx,[eax+0x1]
c000cc2d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc31:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cc35:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000cc39:	0f b6 c0             	movzx  eax,al
c000cc3c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cc40:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cc44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cc48:	01 d0                	add    eax,edx
c000cc4a:	83 c0 2c             	add    eax,0x2c
c000cc4d:	8a 00                	mov    al,BYTE PTR [eax]
c000cc4f:	0f b6 d0             	movzx  edx,al
c000cc52:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cc56:	8d 48 01             	lea    ecx,[eax+0x1]
c000cc59:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cc5d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000cc61:	0f b6 c0             	movzx  eax,al
c000cc64:	c1 e0 08             	shl    eax,0x8
c000cc67:	09 d0                	or     eax,edx
c000cc69:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc6d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000cc72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cc76:	8d 50 01             	lea    edx,[eax+0x1]
c000cc79:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cc81:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000cc85:	0f b6 c0             	movzx  eax,al
c000cc88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cc8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc90:	c1 e0 08             	shl    eax,0x8
c000cc93:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000cc97:	89 c1                	mov    ecx,eax
c000cc99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cc9d:	c1 e0 18             	shl    eax,0x18
c000cca0:	89 c3                	mov    ebx,eax
c000cca2:	a1 8c 1d 03 c0       	mov    eax,ds:0xc0031d8c
c000cca7:	8d 50 01             	lea    edx,[eax+0x1]
c000ccaa:	89 15 8c 1d 03 c0    	mov    DWORD PTR ds:0xc0031d8c,edx
c000ccb0:	09 d9                	or     ecx,ebx
c000ccb2:	89 ca                	mov    edx,ecx
c000ccb4:	89 14 85 a0 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce260],edx
c000ccbb:	eb 13                	jmp    c000ccd0 <scanMADT()+0x484>
c000ccbd:	8d 76 00             	lea    esi,[esi+0x0]
c000ccc0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ccc5:	83 f8 05             	cmp    eax,0x5
c000ccc8:	75 06                	jne    c000ccd0 <scanMADT()+0x484>
c000ccca:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000cccf:	90                   	nop
c000ccd0:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000ccd5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ccd9:	01 d0                	add    eax,edx
c000ccdb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ccdf:	e9 38 fc ff ff       	jmp    c000c91c <scanMADT()+0xd0>
c000cce4:	90                   	nop
c000cce5:	eb 0d                	jmp    c000ccf4 <scanMADT()+0x4a8>
c000cce7:	90                   	nop
c000cce8:	90                   	nop
c000cce9:	eb 09                	jmp    c000ccf4 <scanMADT()+0x4a8>
c000cceb:	90                   	nop
c000ccec:	90                   	nop
c000cced:	eb 05                	jmp    c000ccf4 <scanMADT()+0x4a8>
c000ccef:	90                   	nop
c000ccf0:	90                   	nop
c000ccf1:	8d 76 00             	lea    esi,[esi+0x0]
c000ccf4:	83 c4 38             	add    esp,0x38
c000ccf7:	5b                   	pop    ebx
c000ccf8:	c3                   	ret    
c000ccf9:	90                   	nop
c000ccfa:	66 90                	xchg   ax,ax

c000ccfc <ACPI::ACPI()>:
c000ccfc:	83 ec 0c             	sub    esp,0xc
c000ccff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd03:	83 ec 08             	sub    esp,0x8
c000cd06:	68 ce 87 02 c0       	push   0xc00287ce
c000cd0b:	50                   	push   eax
c000cd0c:	e8 1f d3 ff ff       	call   c000a030 <Device::Device(char const*)>
c000cd11:	83 c4 10             	add    esp,0x10
c000cd14:	ba ec 89 02 c0       	mov    edx,0xc00289ec
c000cd19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd1d:	89 10                	mov    DWORD PTR [eax],edx
c000cd1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd23:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000cd2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd2e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000cd38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd3c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000cd46:	90                   	nop
c000cd47:	83 c4 0c             	add    esp,0xc
c000cd4a:	c3                   	ret    
c000cd4b:	90                   	nop

c000cd4c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000cd4c:	83 ec 2c             	sub    esp,0x2c
c000cd4f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000cd53:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000cd57:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000cd5b:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000cd5f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000cd64:	88 c8                	mov    al,cl
c000cd66:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000cd6a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000cd6f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cd77:	90                   	nop
c000cd78:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cd7c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000cd82:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000cd86:	0f 8d b0 00 00 00    	jge    c000ce3c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000cd8c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cd90:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cd94:	83 c2 2a             	add    edx,0x2a
c000cd97:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000cd9b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000cda0:	0f b7 c0             	movzx  eax,ax
c000cda3:	39 c2                	cmp    edx,eax
c000cda5:	0f 85 85 00 00 00    	jne    c000ce30 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000cdab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cdaf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cdb3:	83 c2 2a             	add    edx,0x2a
c000cdb6:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000cdba:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000cdbf:	0f b6 c0             	movzx  eax,al
c000cdc2:	39 c2                	cmp    edx,eax
c000cdc4:	75 6a                	jne    c000ce30 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000cdc6:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000cdcb:	85 c0                	test   eax,eax
c000cdcd:	74 3d                	je     c000ce0c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000cdcf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cdd3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cdd7:	83 c2 2a             	add    edx,0x2a
c000cdda:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000cdde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cde2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cde5:	39 c2                	cmp    edx,eax
c000cde7:	74 13                	je     c000cdfc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000cde9:	83 ec 0c             	sub    esp,0xc
c000cdec:	68 6c 89 02 c0       	push   0xc002896c
c000cdf1:	e8 b6 31 00 00       	call   c000ffac <KePanic(char const*)>
c000cdf6:	83 c4 10             	add    esp,0x10
c000cdf9:	8d 76 00             	lea    esi,[esi+0x0]
c000cdfc:	83 ec 0c             	sub    esp,0xc
c000cdff:	68 d3 87 02 c0       	push   0xc00287d3
c000ce04:	e8 a3 31 00 00       	call   c000ffac <KePanic(char const*)>
c000ce09:	83 c4 10             	add    esp,0x10
c000ce0c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ce10:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ce14:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ce18:	83 c2 2a             	add    edx,0x2a
c000ce1b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000ce1f:	8b 02                	mov    eax,DWORD PTR [edx]
c000ce21:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ce24:	89 01                	mov    DWORD PTR [ecx],eax
c000ce26:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ce29:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ce2e:	66 90                	xchg   ax,ax
c000ce30:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000ce35:	e9 3e ff ff ff       	jmp    c000cd78 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ce3a:	66 90                	xchg   ax,ax
c000ce3c:	90                   	nop
c000ce3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ce41:	83 c4 2c             	add    esp,0x2c
c000ce44:	c2 04 00             	ret    0x4
c000ce47:	90                   	nop

c000ce48 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ce48:	83 ec 1c             	sub    esp,0x1c
c000ce4b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce4f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ce53:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ce57:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ce5c:	88 c8                	mov    al,cl
c000ce5e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ce62:	88 d0                	mov    al,dl
c000ce64:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ce68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce6c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ce72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce76:	83 c2 2a             	add    edx,0x2a
c000ce79:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000ce7d:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000ce81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce85:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ce8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce8f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ce92:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ce96:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000ce9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce9f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000cea5:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000cea9:	83 c0 01             	add    eax,0x1
c000ceac:	88 c1                	mov    cl,al
c000ceae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ceb2:	83 c2 2a             	add    edx,0x2a
c000ceb5:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ceb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cebd:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000cec3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cec7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ceca:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000cece:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ced2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ced6:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000cedc:	8d 50 01             	lea    edx,[eax+0x1]
c000cedf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cee3:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000cee9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ceed:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000cef3:	3d 00 02 00 00       	cmp    eax,0x200
c000cef8:	75 12                	jne    c000cf0c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000cefa:	83 ec 0c             	sub    esp,0xc
c000cefd:	68 e2 87 02 c0       	push   0xc00287e2
c000cf02:	e8 a5 30 00 00       	call   c000ffac <KePanic(char const*)>
c000cf07:	83 c4 10             	add    esp,0x10
c000cf0a:	66 90                	xchg   ax,ax
c000cf0c:	90                   	nop
c000cf0d:	83 c4 1c             	add    esp,0x1c
c000cf10:	c3                   	ret    
c000cf11:	90                   	nop
c000cf12:	66 90                	xchg   ax,ax

c000cf14 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000cf14:	b8 00 00 00 00       	mov    eax,0x0
c000cf19:	c3                   	ret    
c000cf1a:	66 90                	xchg   ax,ax

c000cf1c <ACPI::detectPCI()>:
c000cf1c:	53                   	push   ebx
c000cf1d:	83 ec 28             	sub    esp,0x28
c000cf20:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000cf25:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000cf2a:	a1 84 1d 03 c0       	mov    eax,ds:0xc0031d84
c000cf2f:	83 ec 08             	sub    esp,0x8
c000cf32:	68 ff 87 02 c0       	push   0xc00287ff
c000cf37:	50                   	push   eax
c000cf38:	e8 9b f8 ff ff       	call   c000c7d8 <findDataTable(unsigned char*, char*)>
c000cf3d:	83 c4 10             	add    esp,0x10
c000cf40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf44:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000cf49:	74 0d                	je     c000cf58 <ACPI::detectPCI()+0x3c>
c000cf4b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cf50:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cf55:	8d 76 00             	lea    esi,[esi+0x0]
c000cf58:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000cf60:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cf64:	8a 00                	mov    al,BYTE PTR [eax]
c000cf66:	0f b6 c0             	movzx  eax,al
c000cf69:	83 f8 01             	cmp    eax,0x1
c000cf6c:	75 0e                	jne    c000cf7c <ACPI::detectPCI()+0x60>
c000cf6e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cf73:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cf78:	eb 2e                	jmp    c000cfa8 <ACPI::detectPCI()+0x8c>
c000cf7a:	66 90                	xchg   ax,ax
c000cf7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cf80:	8a 00                	mov    al,BYTE PTR [eax]
c000cf82:	0f b6 c0             	movzx  eax,al
c000cf85:	83 f8 02             	cmp    eax,0x2
c000cf88:	75 1e                	jne    c000cfa8 <ACPI::detectPCI()+0x8c>
c000cf8a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cf8f:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cf94:	85 c0                	test   eax,eax
c000cf96:	74 10                	je     c000cfa8 <ACPI::detectPCI()+0x8c>
c000cf98:	83 ec 0c             	sub    esp,0xc
c000cf9b:	68 9c 89 02 c0       	push   0xc002899c
c000cfa0:	e8 07 30 00 00       	call   c000ffac <KePanic(char const*)>
c000cfa5:	83 c4 10             	add    esp,0x10
c000cfa8:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000cfac:	83 f0 01             	xor    eax,0x1
c000cfaf:	0f b6 c0             	movzx  eax,al
c000cfb2:	85 c0                	test   eax,eax
c000cfb4:	74 46                	je     c000cffc <ACPI::detectPCI()+0xe0>
c000cfb6:	e8 75 31 ff ff       	call   c0000130 <manualPCIProbe>
c000cfbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cfbf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000cfc4:	75 0e                	jne    c000cfd4 <ACPI::detectPCI()+0xb8>
c000cfc6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cfcb:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cfd0:	eb 2a                	jmp    c000cffc <ACPI::detectPCI()+0xe0>
c000cfd2:	66 90                	xchg   ax,ax
c000cfd4:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000cfd9:	75 21                	jne    c000cffc <ACPI::detectPCI()+0xe0>
c000cfdb:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cfe0:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cfe5:	85 c0                	test   eax,eax
c000cfe7:	74 13                	je     c000cffc <ACPI::detectPCI()+0xe0>
c000cfe9:	83 ec 0c             	sub    esp,0xc
c000cfec:	68 9c 89 02 c0       	push   0xc002899c
c000cff1:	e8 b6 2f 00 00       	call   c000ffac <KePanic(char const*)>
c000cff6:	83 c4 10             	add    esp,0x10
c000cff9:	8d 76 00             	lea    esi,[esi+0x0]
c000cffc:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000d001:	85 c0                	test   eax,eax
c000d003:	0f 84 87 00 00 00    	je     c000d090 <ACPI::detectPCI()+0x174>
c000d009:	83 ec 0c             	sub    esp,0xc
c000d00c:	68 04 88 02 c0       	push   0xc0028804
c000d011:	e8 9f 06 00 00       	call   c000d6b5 <KeSetBootMessage(char const*)>
c000d016:	83 c4 10             	add    esp,0x10
c000d019:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000d021:	83 ec 0c             	sub    esp,0xc
c000d024:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d028:	e8 2b 2b 00 00       	call   c000fb58 <malloc>
c000d02d:	83 c4 10             	add    esp,0x10
c000d030:	89 c3                	mov    ebx,eax
c000d032:	83 ec 0c             	sub    esp,0xc
c000d035:	53                   	push   ebx
c000d036:	e8 9f 12 01 00       	call   c001e2da <PCI::PCI()>
c000d03b:	83 c4 10             	add    esp,0x10
c000d03e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000d042:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d046:	83 ec 08             	sub    esp,0x8
c000d049:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d04d:	50                   	push   eax
c000d04e:	e8 7b ce ff ff       	call   c0009ece <Device::addChild(Device*)>
c000d053:	83 c4 10             	add    esp,0x10
c000d056:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d05a:	8b 00                	mov    eax,DWORD PTR [eax]
c000d05c:	83 c0 08             	add    eax,0x8
c000d05f:	8b 00                	mov    eax,DWORD PTR [eax]
c000d061:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000d066:	85 d2                	test   edx,edx
c000d068:	74 0a                	je     c000d074 <ACPI::detectPCI()+0x158>
c000d06a:	ba 01 00 00 00       	mov    edx,0x1
c000d06f:	eb 0b                	jmp    c000d07c <ACPI::detectPCI()+0x160>
c000d071:	8d 76 00             	lea    esi,[esi+0x0]
c000d074:	ba 02 00 00 00       	mov    edx,0x2
c000d079:	8d 76 00             	lea    esi,[esi+0x0]
c000d07c:	6a 00                	push   0x0
c000d07e:	6a 00                	push   0x0
c000d080:	52                   	push   edx
c000d081:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d085:	ff d0                	call   eax
c000d087:	83 c4 10             	add    esp,0x10
c000d08a:	e9 91 00 00 00       	jmp    c000d120 <ACPI::detectPCI()+0x204>
c000d08f:	90                   	nop
c000d090:	83 ec 0c             	sub    esp,0xc
c000d093:	68 1c 88 02 c0       	push   0xc002881c
c000d098:	e8 18 06 00 00       	call   c000d6b5 <KeSetBootMessage(char const*)>
c000d09d:	83 c4 10             	add    esp,0x10
c000d0a0:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000d0a7:	83 ec 0c             	sub    esp,0xc
c000d0aa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d0ae:	e8 a5 2a 00 00       	call   c000fb58 <malloc>
c000d0b3:	83 c4 10             	add    esp,0x10
c000d0b6:	89 c3                	mov    ebx,eax
c000d0b8:	83 ec 0c             	sub    esp,0xc
c000d0bb:	53                   	push   ebx
c000d0bc:	e8 21 1e 01 00       	call   c001eee2 <IDE::IDE()>
c000d0c1:	83 c4 10             	add    esp,0x10
c000d0c4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000d0c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0cc:	83 ec 08             	sub    esp,0x8
c000d0cf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d0d3:	50                   	push   eax
c000d0d4:	e8 f5 cd ff ff       	call   c0009ece <Device::addChild(Device*)>
c000d0d9:	83 c4 10             	add    esp,0x10
c000d0dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d0e0:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000d0ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d0ee:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000d0f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d0fb:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000d104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d108:	8b 00                	mov    eax,DWORD PTR [eax]
c000d10a:	83 c0 08             	add    eax,0x8
c000d10d:	8b 00                	mov    eax,DWORD PTR [eax]
c000d10f:	6a 00                	push   0x0
c000d111:	6a 00                	push   0x0
c000d113:	6a 00                	push   0x0
c000d115:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d119:	ff d0                	call   eax
c000d11b:	83 c4 10             	add    esp,0x10
c000d11e:	66 90                	xchg   ax,ax
c000d120:	90                   	nop
c000d121:	83 c4 28             	add    esp,0x28
c000d124:	5b                   	pop    ebx
c000d125:	c3                   	ret    
c000d126:	66 90                	xchg   ax,ax

c000d128 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000d128:	83 ec 0c             	sub    esp,0xc
c000d12b:	83 ec 0c             	sub    esp,0xc
c000d12e:	68 31 88 02 c0       	push   0xc0028831
c000d133:	e8 74 2e 00 00       	call   c000ffac <KePanic(char const*)>
c000d138:	83 c4 10             	add    esp,0x10
c000d13b:	90                   	nop
c000d13c:	83 c4 0c             	add    esp,0xc
c000d13f:	c3                   	ret    

c000d140 <ACPI::open(int, int, void*)>:
c000d140:	55                   	push   ebp
c000d141:	89 e5                	mov    ebp,esp
c000d143:	53                   	push   ebx
c000d144:	81 ec 74 01 00 00    	sub    esp,0x174
c000d14a:	83 ec 0c             	sub    esp,0xc
c000d14d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000d150:	e8 c7 fd ff ff       	call   c000cf1c <ACPI::detectPCI()>
c000d155:	83 c4 10             	add    esp,0x10
c000d158:	83 ec 0c             	sub    esp,0xc
c000d15b:	68 c4 89 02 c0       	push   0xc00289c4
c000d160:	e8 50 05 00 00       	call   c000d6b5 <KeSetBootMessage(char const*)>
c000d165:	83 c4 10             	add    esp,0x10
c000d168:	b8 4c 05 00 00       	mov    eax,0x54c
c000d16d:	8a 00                	mov    al,BYTE PTR [eax]
c000d16f:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000d172:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000d176:	83 f8 01             	cmp    eax,0x1
c000d179:	75 15                	jne    c000d190 <ACPI::open(int, int, void*)+0x50>
c000d17b:	83 ec 0c             	sub    esp,0xc
c000d17e:	68 42 88 02 c0       	push   0xc0028842
c000d183:	e8 7f 88 00 00       	call   c0015a07 <Thr::loadKernelSymbolTable(char const*)>
c000d188:	83 c4 10             	add    esp,0x10
c000d18b:	eb 33                	jmp    c000d1c0 <ACPI::open(int, int, void*)+0x80>
c000d18d:	8d 76 00             	lea    esi,[esi+0x0]
c000d190:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000d194:	3d bb 00 00 00       	cmp    eax,0xbb
c000d199:	75 15                	jne    c000d1b0 <ACPI::open(int, int, void*)+0x70>
c000d19b:	83 ec 0c             	sub    esp,0xc
c000d19e:	68 60 88 02 c0       	push   0xc0028860
c000d1a3:	e8 5f 88 00 00       	call   c0015a07 <Thr::loadKernelSymbolTable(char const*)>
c000d1a8:	83 c4 10             	add    esp,0x10
c000d1ab:	eb 13                	jmp    c000d1c0 <ACPI::open(int, int, void*)+0x80>
c000d1ad:	8d 76 00             	lea    esi,[esi+0x0]
c000d1b0:	83 ec 0c             	sub    esp,0xc
c000d1b3:	68 7e 88 02 c0       	push   0xc002887e
c000d1b8:	e8 ef 2d 00 00       	call   c000ffac <KePanic(char const*)>
c000d1bd:	83 c4 10             	add    esp,0x10
c000d1c0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d1c4:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000d1d1:	e8 82 29 00 00       	call   c000fb58 <malloc>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 c3                	mov    ebx,eax
c000d1db:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c000d1e0:	83 ec 04             	sub    esp,0x4
c000d1e3:	50                   	push   eax
c000d1e4:	68 98 88 02 c0       	push   0xc0028898
c000d1e9:	53                   	push   ebx
c000d1ea:	e8 71 b4 ff ff       	call   c0008660 <File::File(char const*, Process*)>
c000d1ef:	83 c4 10             	add    esp,0x10
c000d1f2:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000d1f5:	83 ec 08             	sub    esp,0x8
c000d1f8:	6a 01                	push   0x1
c000d1fa:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d1fd:	e8 7c b4 ff ff       	call   c000867e <File::open(FileOpenMode)>
c000d202:	83 c4 10             	add    esp,0x10
c000d205:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000d208:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000d20c:	75 12                	jne    c000d220 <ACPI::open(int, int, void*)+0xe0>
c000d20e:	83 ec 0c             	sub    esp,0xc
c000d211:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d214:	e8 c3 b4 ff ff       	call   c00086dc <File::close()>
c000d219:	83 c4 10             	add    esp,0x10
c000d21c:	eb 06                	jmp    c000d224 <ACPI::open(int, int, void*)+0xe4>
c000d21e:	66 90                	xchg   ax,ax
c000d220:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d224:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000d228:	74 16                	je     c000d240 <ACPI::open(int, int, void*)+0x100>
c000d22a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d22d:	8b 00                	mov    eax,DWORD PTR [eax]
c000d22f:	83 c0 08             	add    eax,0x8
c000d232:	8b 00                	mov    eax,DWORD PTR [eax]
c000d234:	83 ec 0c             	sub    esp,0xc
c000d237:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d23a:	ff d0                	call   eax
c000d23c:	83 c4 10             	add    esp,0x10
c000d23f:	90                   	nop
c000d240:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000d243:	83 f0 01             	xor    eax,0x1
c000d246:	0f b6 c0             	movzx  eax,al
c000d249:	85 c0                	test   eax,eax
c000d24b:	74 27                	je     c000d274 <ACPI::open(int, int, void*)+0x134>
c000d24d:	83 ec 0c             	sub    esp,0xc
c000d250:	68 b6 88 02 c0       	push   0xc00288b6
c000d255:	e8 5b 04 00 00       	call   c000d6b5 <KeSetBootMessage(char const*)>
c000d25a:	83 c4 10             	add    esp,0x10
c000d25d:	c7 45 e8 0c 00 00 00 	mov    DWORD PTR [ebp-0x18],0xc
c000d264:	83 ec 0c             	sub    esp,0xc
c000d267:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000d26a:	e8 a9 64 00 00       	call   c0013718 <Virt::setupPageSwapping(int)>
c000d26f:	83 c4 10             	add    esp,0x10
c000d272:	66 90                	xchg   ax,ax
c000d274:	83 ec 0c             	sub    esp,0xc
c000d277:	68 d1 88 02 c0       	push   0xc00288d1
c000d27c:	e8 34 04 00 00       	call   c000d6b5 <KeSetBootMessage(char const*)>
c000d281:	83 c4 10             	add    esp,0x10
c000d284:	8d 45 b8             	lea    eax,[ebp-0x48]
c000d287:	83 ec 08             	sub    esp,0x8
c000d28a:	6a 13                	push   0x13
c000d28c:	50                   	push   eax
c000d28d:	e8 6a cf ff ff       	call   c000a1fc <getDevicesOfType(DeviceType)>
c000d292:	83 c4 0c             	add    esp,0xc
c000d295:	8d 76 00             	lea    esi,[esi+0x0]
c000d298:	83 ec 0c             	sub    esp,0xc
c000d29b:	8d 45 b8             	lea    eax,[ebp-0x48]
c000d29e:	50                   	push   eax
c000d29f:	e8 4c 99 01 00       	call   c0026bf0 <LinkedList<Device>::isEmpty()>
c000d2a4:	83 c4 10             	add    esp,0x10
c000d2a7:	83 f0 01             	xor    eax,0x1
c000d2aa:	0f b6 c0             	movzx  eax,al
c000d2ad:	85 c0                	test   eax,eax
c000d2af:	0f 84 13 01 00 00    	je     c000d3c8 <ACPI::open(int, int, void*)+0x288>
c000d2b5:	83 ec 0c             	sub    esp,0xc
c000d2b8:	8d 45 b8             	lea    eax,[ebp-0x48]
c000d2bb:	50                   	push   eax
c000d2bc:	e8 4b 99 01 00       	call   c0026c0c <LinkedList<Device>::getFirstElement()>
c000d2c1:	83 c4 10             	add    esp,0x10
c000d2c4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000d2c7:	83 ec 0c             	sub    esp,0xc
c000d2ca:	8d 45 b8             	lea    eax,[ebp-0x48]
c000d2cd:	50                   	push   eax
c000d2ce:	e8 41 99 01 00       	call   c0026c14 <LinkedList<Device>::removeFirst()>
c000d2d3:	83 c4 10             	add    esp,0x10
c000d2d6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000d2d9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000d2dc:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000d2df:	b8 24 00 00 00       	mov    eax,0x24
c000d2e4:	83 e0 fc             	and    eax,0xfffffffc
c000d2e7:	89 c3                	mov    ebx,eax
c000d2e9:	b8 00 00 00 00       	mov    eax,0x0
c000d2ee:	66 90                	xchg   ax,ax
c000d2f0:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000d2f7:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000d2fe:	83 c0 04             	add    eax,0x4
c000d301:	39 d8                	cmp    eax,ebx
c000d303:	72 eb                	jb     c000d2f0 <ACPI::open(int, int, void*)+0x1b0>
c000d305:	83 ec 08             	sub    esp,0x8
c000d308:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000d30e:	50                   	push   eax
c000d30f:	83 ec 24             	sub    esp,0x24
c000d312:	89 e1                	mov    ecx,esp
c000d314:	b8 24 00 00 00       	mov    eax,0x24
c000d319:	83 e0 fc             	and    eax,0xfffffffc
c000d31c:	89 c3                	mov    ebx,eax
c000d31e:	b8 00 00 00 00       	mov    eax,0x0
c000d323:	90                   	nop
c000d324:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000d32b:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000d32e:	83 c0 04             	add    eax,0x4
c000d331:	39 d8                	cmp    eax,ebx
c000d333:	72 ef                	jb     c000d324 <ACPI::open(int, int, void*)+0x1e4>
c000d335:	e8 88 14 01 00       	call   c001e7c2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000d33a:	83 c4 30             	add    esp,0x30
c000d33d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000d340:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000d344:	0f 84 4e ff ff ff    	je     c000d298 <ACPI::open(int, int, void*)+0x158>
c000d34a:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000d351:	83 ec 0c             	sub    esp,0xc
c000d354:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000d357:	e8 fc 27 00 00       	call   c000fb58 <malloc>
c000d35c:	83 c4 10             	add    esp,0x10
c000d35f:	89 c3                	mov    ebx,eax
c000d361:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c000d366:	83 ec 04             	sub    esp,0x4
c000d369:	50                   	push   eax
c000d36a:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000d36d:	53                   	push   ebx
c000d36e:	e8 ed b2 ff ff       	call   c0008660 <File::File(char const*, Process*)>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000d379:	83 ec 0c             	sub    esp,0xc
c000d37c:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000d37f:	e8 be b5 ff ff       	call   c0008942 <File::exists()>
c000d384:	83 c4 10             	add    esp,0x10
c000d387:	0f b6 c0             	movzx  eax,al
c000d38a:	85 c0                	test   eax,eax
c000d38c:	74 16                	je     c000d3a4 <ACPI::open(int, int, void*)+0x264>
c000d38e:	83 ec 04             	sub    esp,0x4
c000d391:	6a 00                	push   0x0
c000d393:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000d396:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000d399:	e8 14 8e 00 00       	call   c00161b2 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000d39e:	83 c4 10             	add    esp,0x10
c000d3a1:	8d 76 00             	lea    esi,[esi+0x0]
c000d3a4:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000d3a8:	0f 84 ea fe ff ff    	je     c000d298 <ACPI::open(int, int, void*)+0x158>
c000d3ae:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000d3b1:	8b 00                	mov    eax,DWORD PTR [eax]
c000d3b3:	83 c0 08             	add    eax,0x8
c000d3b6:	8b 00                	mov    eax,DWORD PTR [eax]
c000d3b8:	83 ec 0c             	sub    esp,0xc
c000d3bb:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000d3be:	ff d0                	call   eax
c000d3c0:	83 c4 10             	add    esp,0x10
c000d3c3:	e9 d0 fe ff ff       	jmp    c000d298 <ACPI::open(int, int, void*)+0x158>
c000d3c8:	83 ec 0c             	sub    esp,0xc
c000d3cb:	8d 45 b8             	lea    eax,[ebp-0x48]
c000d3ce:	50                   	push   eax
c000d3cf:	e8 18 98 01 00       	call   c0026bec <LinkedList<Device>::~LinkedList()>
c000d3d4:	83 c4 10             	add    esp,0x10
c000d3d7:	a1 08 21 03 c0       	mov    eax,ds:0xc0032108
c000d3dc:	83 ec 04             	sub    esp,0x4
c000d3df:	6a 00                	push   0x0
c000d3e1:	50                   	push   eax
c000d3e2:	68 eb 88 02 c0       	push   0xc00288eb
c000d3e7:	e8 c6 8d 00 00       	call   c00161b2 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000d3ec:	83 c4 10             	add    esp,0x10
c000d3ef:	a1 84 1d 03 c0       	mov    eax,ds:0xc0031d84
c000d3f4:	85 c0                	test   eax,eax
c000d3f6:	0f 84 e4 00 00 00    	je     c000d4e0 <ACPI::open(int, int, void*)+0x3a0>
c000d3fc:	a1 88 1d 03 c0       	mov    eax,ds:0xc0031d88
c000d401:	85 c0                	test   eax,eax
c000d403:	0f 84 d7 00 00 00    	je     c000d4e0 <ACPI::open(int, int, void*)+0x3a0>
c000d409:	83 ec 0c             	sub    esp,0xc
c000d40c:	68 08 89 02 c0       	push   0xc0028908
c000d411:	e8 9f 02 00 00       	call   c000d6b5 <KeSetBootMessage(char const*)>
c000d416:	83 c4 10             	add    esp,0x10
c000d419:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000d420:	83 ec 0c             	sub    esp,0xc
c000d423:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000d426:	e8 2d 27 00 00       	call   c000fb58 <malloc>
c000d42b:	83 c4 10             	add    esp,0x10
c000d42e:	89 c3                	mov    ebx,eax
c000d430:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c000d435:	83 ec 04             	sub    esp,0x4
c000d438:	50                   	push   eax
c000d439:	68 25 89 02 c0       	push   0xc0028925
c000d43e:	53                   	push   ebx
c000d43f:	e8 1c b2 ff ff       	call   c0008660 <File::File(char const*, Process*)>
c000d444:	83 c4 10             	add    esp,0x10
c000d447:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000d44a:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000d44e:	74 1c                	je     c000d46c <ACPI::open(int, int, void*)+0x32c>
c000d450:	83 ec 0c             	sub    esp,0xc
c000d453:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000d456:	e8 e7 b4 ff ff       	call   c0008942 <File::exists()>
c000d45b:	83 c4 10             	add    esp,0x10
c000d45e:	0f b6 c0             	movzx  eax,al
c000d461:	85 c0                	test   eax,eax
c000d463:	74 07                	je     c000d46c <ACPI::open(int, int, void*)+0x32c>
c000d465:	b0 01                	mov    al,0x1
c000d467:	eb 07                	jmp    c000d470 <ACPI::open(int, int, void*)+0x330>
c000d469:	8d 76 00             	lea    esi,[esi+0x0]
c000d46c:	b0 00                	mov    al,0x0
c000d46e:	66 90                	xchg   ax,ax
c000d470:	0f b6 c0             	movzx  eax,al
c000d473:	85 c0                	test   eax,eax
c000d475:	74 15                	je     c000d48c <ACPI::open(int, int, void*)+0x34c>
c000d477:	83 ec 04             	sub    esp,0x4
c000d47a:	6a 00                	push   0x0
c000d47c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000d47f:	68 25 89 02 c0       	push   0xc0028925
c000d484:	e8 29 8d 00 00       	call   c00161b2 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000d489:	83 c4 10             	add    esp,0x10
c000d48c:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000d490:	74 1e                	je     c000d4b0 <ACPI::open(int, int, void*)+0x370>
c000d492:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000d496:	74 18                	je     c000d4b0 <ACPI::open(int, int, void*)+0x370>
c000d498:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000d49b:	8b 00                	mov    eax,DWORD PTR [eax]
c000d49d:	83 c0 08             	add    eax,0x8
c000d4a0:	8b 00                	mov    eax,DWORD PTR [eax]
c000d4a2:	83 ec 0c             	sub    esp,0xc
c000d4a5:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000d4a8:	ff d0                	call   eax
c000d4aa:	83 c4 10             	add    esp,0x10
c000d4ad:	8d 76 00             	lea    esi,[esi+0x0]
c000d4b0:	a1 84 1d 03 c0       	mov    eax,ds:0xc0031d84
c000d4b5:	83 ec 08             	sub    esp,0x8
c000d4b8:	68 42 89 02 c0       	push   0xc0028942
c000d4bd:	50                   	push   eax
c000d4be:	e8 15 f3 ff ff       	call   c000c7d8 <findDataTable(unsigned char*, char*)>
c000d4c3:	83 c4 10             	add    esp,0x10
c000d4c6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000d4c9:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000d4cd:	74 11                	je     c000d4e0 <ACPI::open(int, int, void*)+0x3a0>
c000d4cf:	83 ec 08             	sub    esp,0x8
c000d4d2:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000d4d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000d4d8:	e8 4b fc ff ff       	call   c000d128 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000d4dd:	83 c4 10             	add    esp,0x10
c000d4e0:	b8 00 00 00 00       	mov    eax,0x0
c000d4e5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d4e8:	c9                   	leave  
c000d4e9:	c3                   	ret    
c000d4ea:	66 90                	xchg   ax,ax

c000d4ec <KeAssertionFailed(char*, char const*, char const*, int)>:
c000d4ec:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000d4f2:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000d4f9:	89 c2                	mov    edx,eax
c000d4fb:	c1 fa 1f             	sar    edx,0x1f
c000d4fe:	83 ec 04             	sub    esp,0x4
c000d501:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000d505:	51                   	push   ecx
c000d506:	52                   	push   edx
c000d507:	50                   	push   eax
c000d508:	e8 43 24 00 00       	call   c000f950 <KeItoa(long long, char*)>
c000d50d:	83 c4 10             	add    esp,0x10
c000d510:	83 ec 08             	sub    esp,0x8
c000d513:	68 10 8a 02 c0       	push   0xc0028a10
c000d518:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d51c:	50                   	push   eax
c000d51d:	e8 2e 31 ff ff       	call   c0000650 <strcpy>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	83 ec 08             	sub    esp,0x8
c000d528:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000d52f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d533:	50                   	push   eax
c000d534:	e8 37 33 ff ff       	call   c0000870 <strcat>
c000d539:	83 c4 10             	add    esp,0x10
c000d53c:	83 ec 08             	sub    esp,0x8
c000d53f:	68 1e 8a 02 c0       	push   0xc0028a1e
c000d544:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d548:	50                   	push   eax
c000d549:	e8 22 33 ff ff       	call   c0000870 <strcat>
c000d54e:	83 c4 10             	add    esp,0x10
c000d551:	83 ec 08             	sub    esp,0x8
c000d554:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d55b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d55f:	50                   	push   eax
c000d560:	e8 0b 33 ff ff       	call   c0000870 <strcat>
c000d565:	83 c4 10             	add    esp,0x10
c000d568:	83 ec 08             	sub    esp,0x8
c000d56b:	68 21 8a 02 c0       	push   0xc0028a21
c000d570:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d574:	50                   	push   eax
c000d575:	e8 f6 32 ff ff       	call   c0000870 <strcat>
c000d57a:	83 c4 10             	add    esp,0x10
c000d57d:	83 ec 08             	sub    esp,0x8
c000d580:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000d587:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d58b:	50                   	push   eax
c000d58c:	e8 df 32 ff ff       	call   c0000870 <strcat>
c000d591:	83 c4 10             	add    esp,0x10
c000d594:	83 ec 08             	sub    esp,0x8
c000d597:	68 21 8a 02 c0       	push   0xc0028a21
c000d59c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d5a0:	50                   	push   eax
c000d5a1:	e8 ca 32 ff ff       	call   c0000870 <strcat>
c000d5a6:	83 c4 10             	add    esp,0x10
c000d5a9:	83 ec 08             	sub    esp,0x8
c000d5ac:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d5b0:	50                   	push   eax
c000d5b1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d5b5:	50                   	push   eax
c000d5b6:	e8 b5 32 ff ff       	call   c0000870 <strcat>
c000d5bb:	83 c4 10             	add    esp,0x10
c000d5be:	83 ec 0c             	sub    esp,0xc
c000d5c1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d5c5:	50                   	push   eax
c000d5c6:	e8 e1 29 00 00       	call   c000ffac <KePanic(char const*)>
c000d5cb:	83 c4 10             	add    esp,0x10
c000d5ce:	90                   	nop
c000d5cf:	81 c4 2c 02 00 00    	add    esp,0x22c
c000d5d5:	c3                   	ret    

c000d5d6 <KeInitialiseAtexit()>:
c000d5d6:	83 ec 10             	sub    esp,0x10
c000d5d9:	68 80 00 00 00       	push   0x80
c000d5de:	6a 00                	push   0x0
c000d5e0:	68 80 20 03 c0       	push   0xc0032080
c000d5e5:	c7 05 e0 1f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031fe0,0x0
c000d5ef:	e8 fc 2e ff ff       	call   c00004f0 <memset>
c000d5f4:	83 c4 1c             	add    esp,0x1c
c000d5f7:	c3                   	ret    

c000d5f8 <KeRegisterAtexit(void (*)(void*), void*)>:
c000d5f8:	a1 e0 1f 03 c0       	mov    eax,ds:0xc0031fe0
c000d5fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d601:	89 14 85 80 20 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdf80],edx
c000d608:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d60c:	89 14 85 00 20 03 c0 	mov    DWORD PTR [eax*4-0x3ffce000],edx
c000d613:	40                   	inc    eax
c000d614:	a3 e0 1f 03 c0       	mov    ds:0xc0031fe0,eax
c000d619:	83 f8 1f             	cmp    eax,0x1f
c000d61c:	7e 0d                	jle    c000d62b <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000d61e:	c7 44 24 04 23 8a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028a23
c000d626:	e9 81 29 00 00       	jmp    c000ffac <KePanic(char const*)>
c000d62b:	c3                   	ret    

c000d62c <KeExecuteAtexit()>:
c000d62c:	53                   	push   ebx
c000d62d:	31 db                	xor    ebx,ebx
c000d62f:	83 ec 08             	sub    esp,0x8
c000d632:	39 1d e0 1f 03 c0    	cmp    DWORD PTR ds:0xc0031fe0,ebx
c000d638:	7e 28                	jle    c000d662 <KeExecuteAtexit()+0x36>
c000d63a:	8b 04 9d 80 20 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffcdf80]
c000d641:	85 c0                	test   eax,eax
c000d643:	74 1a                	je     c000d65f <KeExecuteAtexit()+0x33>
c000d645:	83 ec 0c             	sub    esp,0xc
c000d648:	ff 34 9d 00 20 03 c0 	push   DWORD PTR [ebx*4-0x3ffce000]
c000d64f:	ff d0                	call   eax
c000d651:	c7 04 9d 80 20 03 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffcdf80],0x0
c000d65c:	83 c4 10             	add    esp,0x10
c000d65f:	43                   	inc    ebx
c000d660:	eb d0                	jmp    c000d632 <KeExecuteAtexit()+0x6>
c000d662:	83 c4 08             	add    esp,0x8
c000d665:	5b                   	pop    ebx
c000d666:	c3                   	ret    
c000d667:	90                   	nop

c000d668 <KeGetBootConfigurationFlag(BootConfigurationFlag)>:
c000d668:	8b 15 00 21 03 c0    	mov    edx,DWORD PTR ds:0xc0032100
c000d66e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d672:	21 d0                	and    eax,edx
c000d674:	0f 95 c0             	setne  al
c000d677:	c3                   	ret    

c000d678 <KeInitialiseBootConfigurationFlags()>:
c000d678:	b8 00 05 00 00       	mov    eax,0x500
c000d67d:	8b 00                	mov    eax,DWORD PTR [eax]
c000d67f:	a3 00 21 03 c0       	mov    ds:0xc0032100,eax
c000d684:	90                   	nop
c000d685:	c3                   	ret    

c000d686 <KeDisplaySplashScreen()>:
c000d686:	53                   	push   ebx
c000d687:	bb 01 00 00 00       	mov    ebx,0x1
c000d68c:	83 ec 08             	sub    esp,0x8
c000d68f:	43                   	inc    ebx
c000d690:	0f be 83 3a 8a 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffd75c6]
c000d697:	85 c0                	test   eax,eax
c000d699:	74 15                	je     c000d6b0 <KeDisplaySplashScreen()+0x2a>
c000d69b:	83 ec 0c             	sub    esp,0xc
c000d69e:	6a 01                	push   0x1
c000d6a0:	53                   	push   ebx
c000d6a1:	6a 00                	push   0x0
c000d6a3:	6a 0f                	push   0xf
c000d6a5:	50                   	push   eax
c000d6a6:	e8 e1 e7 00 00       	call   c001be8c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d6ab:	83 c4 20             	add    esp,0x20
c000d6ae:	eb df                	jmp    c000d68f <KeDisplaySplashScreen()+0x9>
c000d6b0:	83 c4 08             	add    esp,0x8
c000d6b3:	5b                   	pop    ebx
c000d6b4:	c3                   	ret    

c000d6b5 <KeSetBootMessage(char const*)>:
c000d6b5:	57                   	push   edi
c000d6b6:	56                   	push   esi
c000d6b7:	53                   	push   ebx
c000d6b8:	31 db                	xor    ebx,ebx
c000d6ba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d6be:	83 ec 0c             	sub    esp,0xc
c000d6c1:	6a 14                	push   0x14
c000d6c3:	53                   	push   ebx
c000d6c4:	43                   	inc    ebx
c000d6c5:	6a 00                	push   0x0
c000d6c7:	6a 00                	push   0x0
c000d6c9:	6a 20                	push   0x20
c000d6cb:	e8 bc e7 00 00       	call   c001be8c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d6d0:	83 c4 20             	add    esp,0x20
c000d6d3:	83 fb 50             	cmp    ebx,0x50
c000d6d6:	75 e6                	jne    c000d6be <KeSetBootMessage(char const*)+0x9>
c000d6d8:	83 ec 0c             	sub    esp,0xc
c000d6db:	56                   	push   esi
c000d6dc:	e8 9f 2e ff ff       	call   c0000580 <strlen>
c000d6e1:	83 c4 10             	add    esp,0x10
c000d6e4:	29 c3                	sub    ebx,eax
c000d6e6:	d1 eb                	shr    ebx,1
c000d6e8:	89 df                	mov    edi,ebx
c000d6ea:	89 f0                	mov    eax,esi
c000d6ec:	29 d8                	sub    eax,ebx
c000d6ee:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000d6f2:	85 c0                	test   eax,eax
c000d6f4:	74 16                	je     c000d70c <KeSetBootMessage(char const*)+0x57>
c000d6f6:	83 ec 0c             	sub    esp,0xc
c000d6f9:	6a 14                	push   0x14
c000d6fb:	57                   	push   edi
c000d6fc:	47                   	inc    edi
c000d6fd:	6a 00                	push   0x0
c000d6ff:	6a 07                	push   0x7
c000d701:	50                   	push   eax
c000d702:	e8 85 e7 00 00       	call   c001be8c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d707:	83 c4 20             	add    esp,0x20
c000d70a:	eb de                	jmp    c000d6ea <KeSetBootMessage(char const*)+0x35>
c000d70c:	5b                   	pop    ebx
c000d70d:	5e                   	pop    esi
c000d70e:	5f                   	pop    edi
c000d70f:	c3                   	ret    

c000d710 <__cxa_atexit>:
c000d710:	31 c0                	xor    eax,eax
c000d712:	c3                   	ret    

c000d713 <__cxa_finalize>:
c000d713:	c3                   	ret    

c000d714 <__stack_chk_fail>:
c000d714:	55                   	push   ebp
c000d715:	89 e5                	mov    ebp,esp
c000d717:	83 ec 10             	sub    esp,0x10
c000d71a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d71d:	68 4f 8a 02 c0       	push   0xc0028a4f
c000d722:	e8 3f 98 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d727:	58                   	pop    eax
c000d728:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d72b:	5a                   	pop    edx
c000d72c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d72f:	68 4f 8a 02 c0       	push   0xc0028a4f
c000d734:	e8 2d 98 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d739:	c7 04 24 57 8a 02 c0 	mov    DWORD PTR [esp],0xc0028a57
c000d740:	e8 67 28 00 00       	call   c000ffac <KePanic(char const*)>
c000d745:	83 c4 10             	add    esp,0x10
c000d748:	c9                   	leave  
c000d749:	c3                   	ret    

c000d74a <__cxa_pure_virtual>:
c000d74a:	83 ec 18             	sub    esp,0x18
c000d74d:	68 6f 8a 02 c0       	push   0xc0028a6f
c000d752:	e8 55 28 00 00       	call   c000ffac <KePanic(char const*)>
c000d757:	83 c4 1c             	add    esp,0x1c
c000d75a:	c3                   	ret    

c000d75b <operator new[](unsigned long)>:
c000d75b:	e9 f8 23 00 00       	jmp    c000fb58 <malloc>

c000d760 <operator delete(void*, unsigned long)>:
c000d760:	e9 13 24 00 00       	jmp    c000fb78 <rfree>

c000d765 <operator delete[](void*)>:
c000d765:	e9 0e 24 00 00       	jmp    c000fb78 <rfree>

c000d76a <operator delete[](void*, unsigned long)>:
c000d76a:	e9 09 24 00 00       	jmp    c000fb78 <rfree>
c000d76f:	90                   	nop

c000d770 <CUnlockScheduler>:
c000d770:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c000d778:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c000d77d:	85 c0                	test   eax,eax
c000d77f:	75 03                	jne    c000d784 <CUnlockScheduler+0x14>
c000d781:	fb                   	sti    
c000d782:	66 90                	xchg   ax,ax
c000d784:	90                   	nop
c000d785:	c3                   	ret    
c000d786:	66 90                	xchg   ax,ax

c000d788 <CLockScheduler>:
c000d788:	fa                   	cli    
c000d789:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c000d78e:	83 c0 01             	add    eax,0x1
c000d791:	a3 30 23 03 c0       	mov    ds:0xc0032330,eax
c000d796:	90                   	nop
c000d797:	c3                   	ret    

c000d798 <CPrintf>:
c000d798:	83 ec 0c             	sub    esp,0xc
c000d79b:	83 ec 08             	sub    esp,0x8
c000d79e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d7a2:	68 82 8a 02 c0       	push   0xc0028a82
c000d7a7:	e8 ba 97 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d7ac:	83 c4 10             	add    esp,0x10
c000d7af:	90                   	nop
c000d7b0:	83 c4 0c             	add    esp,0xc
c000d7b3:	c3                   	ret    

c000d7b4 <CmOpen(char const*)>:
c000d7b4:	57                   	push   edi
c000d7b5:	56                   	push   esi
c000d7b6:	53                   	push   ebx
c000d7b7:	83 ec 1c             	sub    esp,0x1c
c000d7ba:	6a 30                	push   0x30
c000d7bc:	e8 97 23 00 00       	call   c000fb58 <malloc>
c000d7c1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000d7c8:	89 c3                	mov    ebx,eax
c000d7ca:	e8 89 23 00 00       	call   c000fb58 <malloc>
c000d7cf:	83 c4 0c             	add    esp,0xc
c000d7d2:	ff 35 58 23 03 c0    	push   DWORD PTR ds:0xc0032358
c000d7d8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d7dc:	89 c6                	mov    esi,eax
c000d7de:	50                   	push   eax
c000d7df:	e8 7c ae ff ff       	call   c0008660 <File::File(char const*, Process*)>
c000d7e4:	83 c4 0c             	add    esp,0xc
c000d7e7:	89 33                	mov    DWORD PTR [ebx],esi
c000d7e9:	8d 44 24 07          	lea    eax,[esp+0x7]
c000d7ed:	50                   	push   eax
c000d7ee:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d7f2:	50                   	push   eax
c000d7f3:	56                   	push   esi
c000d7f4:	e8 87 b1 ff ff       	call   c0008980 <File::stat(unsigned long long*, bool*)>
c000d7f9:	5a                   	pop    edx
c000d7fa:	59                   	pop    ecx
c000d7fb:	6a 01                	push   0x1
c000d7fd:	ff 33                	push   DWORD PTR [ebx]
c000d7ff:	e8 7a ae ff ff       	call   c000867e <File::open(FileOpenMode)>
c000d804:	5e                   	pop    esi
c000d805:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d809:	e8 4a 23 00 00       	call   c000fb58 <malloc>
c000d80e:	5a                   	pop    edx
c000d80f:	8d 74 24 10          	lea    esi,[esp+0x10]
c000d813:	89 c7                	mov    edi,eax
c000d815:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d817:	8b 10                	mov    edx,DWORD PTR [eax]
c000d819:	56                   	push   esi
c000d81a:	57                   	push   edi
c000d81b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d81f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d823:	50                   	push   eax
c000d824:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d827:	83 c4 14             	add    esp,0x14
c000d82a:	ff 33                	push   DWORD PTR [ebx]
c000d82c:	e8 ab ae ff ff       	call   c00086dc <File::close()>
c000d831:	59                   	pop    ecx
c000d832:	58                   	pop    eax
c000d833:	6a 13                	push   0x13
c000d835:	ff 33                	push   DWORD PTR [ebx]
c000d837:	e8 42 ae ff ff       	call   c000867e <File::open(FileOpenMode)>
c000d83c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d83e:	8b 10                	mov    edx,DWORD PTR [eax]
c000d840:	89 34 24             	mov    DWORD PTR [esp],esi
c000d843:	57                   	push   edi
c000d844:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d848:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d84c:	50                   	push   eax
c000d84d:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d850:	83 c4 14             	add    esp,0x14
c000d853:	57                   	push   edi
c000d854:	e8 0f 23 00 00       	call   c000fb68 <free>
c000d859:	83 c4 10             	add    esp,0x10
c000d85c:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000d85f:	75 10                	jne    c000d871 <CmOpen(char const*)+0xbd>
c000d861:	83 ec 0c             	sub    esp,0xc
c000d864:	68 85 8a 02 c0       	push   0xc0028a85
c000d869:	e8 3e 27 00 00       	call   c000ffac <KePanic(char const*)>
c000d86e:	83 c4 10             	add    esp,0x10
c000d871:	50                   	push   eax
c000d872:	6a 00                	push   0x0
c000d874:	6a 00                	push   0x0
c000d876:	ff 33                	push   DWORD PTR [ebx]
c000d878:	8d 7b 05             	lea    edi,[ebx+0x5]
c000d87b:	e8 bc ae ff ff       	call   c000873c <File::seek(unsigned long long)>
c000d880:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d882:	8b 10                	mov    edx,DWORD PTR [eax]
c000d884:	89 34 24             	mov    DWORD PTR [esp],esi
c000d887:	57                   	push   edi
c000d888:	6a 00                	push   0x0
c000d88a:	6a 2b                	push   0x2b
c000d88c:	50                   	push   eax
c000d88d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d890:	83 c4 1c             	add    esp,0x1c
c000d893:	6a 00                	push   0x0
c000d895:	6a 00                	push   0x0
c000d897:	ff 33                	push   DWORD PTR [ebx]
c000d899:	e8 9e ae ff ff       	call   c000873c <File::seek(unsigned long long)>
c000d89e:	83 c4 0c             	add    esp,0xc
c000d8a1:	6a 08                	push   0x8
c000d8a3:	68 a7 8a 02 c0       	push   0xc0028aa7
c000d8a8:	57                   	push   edi
c000d8a9:	e8 d2 2a ff ff       	call   c0000380 <memcmp>
c000d8ae:	83 c4 10             	add    esp,0x10
c000d8b1:	85 c0                	test   eax,eax
c000d8b3:	74 10                	je     c000d8c5 <CmOpen(char const*)+0x111>
c000d8b5:	83 ec 0c             	sub    esp,0xc
c000d8b8:	68 b0 8a 02 c0       	push   0xc0028ab0
c000d8bd:	e8 ea 26 00 00       	call   c000ffac <KePanic(char const*)>
c000d8c2:	83 c4 10             	add    esp,0x10
c000d8c5:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000d8c9:	83 c4 10             	add    esp,0x10
c000d8cc:	89 d8                	mov    eax,ebx
c000d8ce:	5b                   	pop    ebx
c000d8cf:	5e                   	pop    esi
c000d8d0:	5f                   	pop    edi
c000d8d1:	c3                   	ret    

c000d8d2 <CmClose(Reghive_Tag*)>:
c000d8d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d8d6:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d8da:	74 0b                	je     c000d8e7 <CmClose(Reghive_Tag*)+0x15>
c000d8dc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d8de:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d8e2:	e9 f5 ad ff ff       	jmp    c00086dc <File::close()>
c000d8e7:	c3                   	ret    

c000d8e8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000d8e8:	53                   	push   ebx
c000d8e9:	83 ec 18             	sub    esp,0x18
c000d8ec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d8f0:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d8f4:	74 29                	je     c000d91f <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d8f6:	50                   	push   eax
c000d8f7:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d8fc:	99                   	cdq    
c000d8fd:	52                   	push   edx
c000d8fe:	50                   	push   eax
c000d8ff:	ff 33                	push   DWORD PTR [ebx]
c000d901:	e8 36 ae ff ff       	call   c000873c <File::seek(unsigned long long)>
c000d906:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d908:	5a                   	pop    edx
c000d909:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d90d:	8b 10                	mov    edx,DWORD PTR [eax]
c000d90f:	51                   	push   ecx
c000d910:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d914:	6a 00                	push   0x0
c000d916:	6a 2b                	push   0x2b
c000d918:	50                   	push   eax
c000d919:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d91c:	83 c4 20             	add    esp,0x20
c000d91f:	83 c4 18             	add    esp,0x18
c000d922:	5b                   	pop    ebx
c000d923:	c3                   	ret    

c000d924 <CmGetString(Reghive_Tag*, int, char*)>:
c000d924:	55                   	push   ebp
c000d925:	57                   	push   edi
c000d926:	56                   	push   esi
c000d927:	53                   	push   ebx
c000d928:	31 db                	xor    ebx,ebx
c000d92a:	83 ec 70             	sub    esp,0x70
c000d92d:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000d931:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000d938:	50                   	push   eax
c000d939:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000d940:	55                   	push   ebp
c000d941:	e8 a2 ff ff ff       	call   c000d8e8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d946:	83 c4 10             	add    esp,0x10
c000d949:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000d94e:	c1 e0 08             	shl    eax,0x8
c000d951:	89 c2                	mov    edx,eax
c000d953:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000d958:	09 d0                	or     eax,edx
c000d95a:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000d95f:	c1 e0 08             	shl    eax,0x8
c000d962:	09 d0                	or     eax,edx
c000d964:	74 25                	je     c000d98b <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000d966:	52                   	push   edx
c000d967:	8d 54 24 39          	lea    edx,[esp+0x39]
c000d96b:	52                   	push   edx
c000d96c:	6b fb 0d             	imul   edi,ebx,0xd
c000d96f:	50                   	push   eax
c000d970:	55                   	push   ebp
c000d971:	e8 72 ff ff ff       	call   c000d8e8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d976:	8d 74 24 49          	lea    esi,[esp+0x49]
c000d97a:	b9 27 00 00 00       	mov    ecx,0x27
c000d97f:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000d986:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d988:	83 c4 10             	add    esp,0x10
c000d98b:	83 c3 03             	add    ebx,0x3
c000d98e:	83 fb 15             	cmp    ebx,0x15
c000d991:	75 b6                	jne    c000d949 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000d993:	83 c4 6c             	add    esp,0x6c
c000d996:	5b                   	pop    ebx
c000d997:	5e                   	pop    esi
c000d998:	5f                   	pop    edi
c000d999:	5d                   	pop    ebp
c000d99a:	c3                   	ret    

c000d99b <CmEnterDirectory(Reghive_Tag*, int)>:
c000d99b:	83 ec 40             	sub    esp,0x40
c000d99e:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d9a2:	50                   	push   eax
c000d9a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d9a7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d9ab:	e8 38 ff ff ff       	call   c000d8e8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d9b0:	83 c4 10             	add    esp,0x10
c000d9b3:	83 c8 ff             	or     eax,0xffffffff
c000d9b6:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000d9bb:	75 19                	jne    c000d9d6 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000d9bd:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000d9c2:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000d9c7:	c1 e0 08             	shl    eax,0x8
c000d9ca:	09 c2                	or     edx,eax
c000d9cc:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000d9d1:	c1 e0 10             	shl    eax,0x10
c000d9d4:	09 d0                	or     eax,edx
c000d9d6:	83 c4 3c             	add    esp,0x3c
c000d9d9:	c3                   	ret    

c000d9da <CmGetNext(Reghive_Tag*, int)>:
c000d9da:	83 ec 40             	sub    esp,0x40
c000d9dd:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d9e1:	50                   	push   eax
c000d9e2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d9e6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d9ea:	e8 f9 fe ff ff       	call   c000d8e8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d9ef:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000d9f4:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000d9f9:	c1 e0 08             	shl    eax,0x8
c000d9fc:	09 c2                	or     edx,eax
c000d9fe:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000da03:	83 c4 4c             	add    esp,0x4c
c000da06:	c1 e0 10             	shl    eax,0x10
c000da09:	09 d0                	or     eax,edx
c000da0b:	c3                   	ret    

c000da0c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000da0c:	53                   	push   ebx
c000da0d:	83 ec 18             	sub    esp,0x18
c000da10:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000da14:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000da18:	74 29                	je     c000da43 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000da1a:	50                   	push   eax
c000da1b:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000da20:	99                   	cdq    
c000da21:	52                   	push   edx
c000da22:	50                   	push   eax
c000da23:	ff 33                	push   DWORD PTR [ebx]
c000da25:	e8 12 ad ff ff       	call   c000873c <File::seek(unsigned long long)>
c000da2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da2c:	5a                   	pop    edx
c000da2d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000da31:	8b 10                	mov    edx,DWORD PTR [eax]
c000da33:	51                   	push   ecx
c000da34:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000da38:	6a 00                	push   0x0
c000da3a:	6a 2b                	push   0x2b
c000da3c:	50                   	push   eax
c000da3d:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000da40:	83 c4 20             	add    esp,0x20
c000da43:	83 c4 18             	add    esp,0x18
c000da46:	5b                   	pop    ebx
c000da47:	c3                   	ret    

c000da48 <CmFreeExtent(Reghive_Tag*, int)>:
c000da48:	53                   	push   ebx
c000da49:	83 ec 3c             	sub    esp,0x3c
c000da4c:	6a 2b                	push   0x2b
c000da4e:	6a 00                	push   0x0
c000da50:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000da54:	53                   	push   ebx
c000da55:	e8 96 2a ff ff       	call   c00004f0 <memset>
c000da5a:	83 c4 0c             	add    esp,0xc
c000da5d:	53                   	push   ebx
c000da5e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000da62:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000da66:	e8 a1 ff ff ff       	call   c000da0c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000da6b:	83 c4 48             	add    esp,0x48
c000da6e:	5b                   	pop    ebx
c000da6f:	c3                   	ret    

c000da70 <CmUpdateHeader(Reghive_Tag*)>:
c000da70:	83 ec 0c             	sub    esp,0xc
c000da73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da77:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000da7b:	74 10                	je     c000da8d <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000da7d:	52                   	push   edx
c000da7e:	8d 50 05             	lea    edx,[eax+0x5]
c000da81:	52                   	push   edx
c000da82:	6a 00                	push   0x0
c000da84:	50                   	push   eax
c000da85:	e8 82 ff ff ff       	call   c000da0c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000da8a:	83 c4 10             	add    esp,0x10
c000da8d:	83 c4 0c             	add    esp,0xc
c000da90:	c3                   	ret    

c000da91 <CmExpand(Reghive_Tag*, int)>:
c000da91:	55                   	push   ebp
c000da92:	57                   	push   edi
c000da93:	83 cf ff             	or     edi,0xffffffff
c000da96:	56                   	push   esi
c000da97:	53                   	push   ebx
c000da98:	83 ec 3c             	sub    esp,0x3c
c000da9b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000da9f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000daa3:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000daa7:	74 59                	je     c000db02 <CmExpand(Reghive_Tag*, int)+0x71>
c000daa9:	50                   	push   eax
c000daaa:	31 d2                	xor    edx,edx
c000daac:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000dab0:	31 ff                	xor    edi,edi
c000dab2:	52                   	push   edx
c000dab3:	50                   	push   eax
c000dab4:	ff 33                	push   DWORD PTR [ebx]
c000dab6:	e8 81 ac ff ff       	call   c000873c <File::seek(unsigned long long)>
c000dabb:	83 c4 0c             	add    esp,0xc
c000dabe:	6a 2b                	push   0x2b
c000dac0:	6a 00                	push   0x0
c000dac2:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c000dac6:	55                   	push   ebp
c000dac7:	e8 24 2a ff ff       	call   c00004f0 <memset>
c000dacc:	83 c4 10             	add    esp,0x10
c000dacf:	39 f7                	cmp    edi,esi
c000dad1:	7d 1b                	jge    c000daee <CmExpand(Reghive_Tag*, int)+0x5d>
c000dad3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dad5:	83 ec 0c             	sub    esp,0xc
c000dad8:	47                   	inc    edi
c000dad9:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000dadd:	8b 10                	mov    edx,DWORD PTR [eax]
c000dadf:	51                   	push   ecx
c000dae0:	55                   	push   ebp
c000dae1:	6a 00                	push   0x0
c000dae3:	6a 2b                	push   0x2b
c000dae5:	50                   	push   eax
c000dae6:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000dae9:	83 c4 20             	add    esp,0x20
c000daec:	eb e1                	jmp    c000dacf <CmExpand(Reghive_Tag*, int)+0x3e>
c000daee:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	01 fe                	add    esi,edi
c000daf6:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c000daf9:	53                   	push   ebx
c000dafa:	e8 71 ff ff ff       	call   c000da70 <CmUpdateHeader(Reghive_Tag*)>
c000daff:	83 c4 10             	add    esp,0x10
c000db02:	83 c4 3c             	add    esp,0x3c
c000db05:	89 f8                	mov    eax,edi
c000db07:	5b                   	pop    ebx
c000db08:	5e                   	pop    esi
c000db09:	5f                   	pop    edi
c000db0a:	5d                   	pop    ebp
c000db0b:	c3                   	ret    

c000db0c <CmFindUnusedExtent(Reghive_Tag*)>:
c000db0c:	55                   	push   ebp
c000db0d:	57                   	push   edi
c000db0e:	56                   	push   esi
c000db0f:	53                   	push   ebx
c000db10:	83 cb ff             	or     ebx,0xffffffff
c000db13:	83 ec 1c             	sub    esp,0x1c
c000db16:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000db1a:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000db1e:	74 68                	je     c000db88 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000db20:	51                   	push   ecx
c000db21:	be 2b 00 00 00       	mov    esi,0x2b
c000db26:	6a 00                	push   0x0
c000db28:	31 ff                	xor    edi,edi
c000db2a:	6a 00                	push   0x0
c000db2c:	31 db                	xor    ebx,ebx
c000db2e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000db31:	e8 06 ac ff ff       	call   c000873c <File::seek(unsigned long long)>
c000db36:	83 c4 10             	add    esp,0x10
c000db39:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000db3c:	76 3b                	jbe    c000db79 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000db3e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000db41:	83 ec 0c             	sub    esp,0xc
c000db44:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000db48:	8b 10                	mov    edx,DWORD PTR [eax]
c000db4a:	51                   	push   ecx
c000db4b:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000db4f:	51                   	push   ecx
c000db50:	6a 00                	push   0x0
c000db52:	6a 01                	push   0x1
c000db54:	50                   	push   eax
c000db55:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000db58:	83 c4 20             	add    esp,0x20
c000db5b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000db60:	74 26                	je     c000db88 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000db62:	52                   	push   edx
c000db63:	43                   	inc    ebx
c000db64:	57                   	push   edi
c000db65:	56                   	push   esi
c000db66:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000db69:	e8 ce ab ff ff       	call   c000873c <File::seek(unsigned long long)>
c000db6e:	83 c6 2b             	add    esi,0x2b
c000db71:	83 d7 00             	adc    edi,0x0
c000db74:	83 c4 10             	add    esp,0x10
c000db77:	eb c0                	jmp    c000db39 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000db79:	50                   	push   eax
c000db7a:	50                   	push   eax
c000db7b:	6a 40                	push   0x40
c000db7d:	55                   	push   ebp
c000db7e:	e8 0e ff ff ff       	call   c000da91 <CmExpand(Reghive_Tag*, int)>
c000db83:	83 c4 10             	add    esp,0x10
c000db86:	89 c3                	mov    ebx,eax
c000db88:	83 c4 1c             	add    esp,0x1c
c000db8b:	89 d8                	mov    eax,ebx
c000db8d:	5b                   	pop    ebx
c000db8e:	5e                   	pop    esi
c000db8f:	5f                   	pop    edi
c000db90:	5d                   	pop    ebp
c000db91:	c3                   	ret    

c000db92 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000db92:	55                   	push   ebp
c000db93:	57                   	push   edi
c000db94:	56                   	push   esi
c000db95:	53                   	push   ebx
c000db96:	81 ec 88 00 00 00    	sub    esp,0x88
c000db9c:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000dba3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000dbaa:	e8 5d ff ff ff       	call   c000db0c <CmFindUnusedExtent(Reghive_Tag*)>
c000dbaf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dbb3:	83 c4 0c             	add    esp,0xc
c000dbb6:	6a 2b                	push   0x2b
c000dbb8:	6a 00                	push   0x0
c000dbba:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000dbbe:	55                   	push   ebp
c000dbbf:	e8 2c 29 ff ff       	call   c00004f0 <memset>
c000dbc4:	83 c4 10             	add    esp,0x10
c000dbc7:	85 db                	test   ebx,ebx
c000dbc9:	74 12                	je     c000dbdd <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000dbcb:	51                   	push   ecx
c000dbcc:	55                   	push   ebp
c000dbcd:	53                   	push   ebx
c000dbce:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000dbd5:	e8 0e fd ff ff       	call   c000d8e8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dbda:	83 c4 10             	add    esp,0x10
c000dbdd:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000dbe1:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000dbe8:	b9 2b 00 00 00       	mov    ecx,0x2b
c000dbed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dbef:	85 db                	test   ebx,ebx
c000dbf1:	74 49                	je     c000dc3c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000dbf3:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000dbf8:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000dbfd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dc01:	c1 e0 08             	shl    eax,0x8
c000dc04:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000dc0a:	09 c8                	or     eax,ecx
c000dc0c:	74 11                	je     c000dc1f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000dc0e:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000dc12:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000dc16:	c1 e8 10             	shr    eax,0x10
c000dc19:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000dc1d:	eb 0f                	jmp    c000dc2e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000dc1f:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000dc24:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000dc29:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000dc2e:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000dc32:	c1 ea 08             	shr    edx,0x8
c000dc35:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000dc3a:	eb 0f                	jmp    c000dc4b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000dc3c:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000dc41:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000dc46:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000dc4b:	52                   	push   edx
c000dc4c:	8d 44 24 49          	lea    eax,[esp+0x49]
c000dc50:	50                   	push   eax
c000dc51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc55:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000dc5c:	e8 ab fd ff ff       	call   c000da0c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000dc61:	83 c4 10             	add    esp,0x10
c000dc64:	85 db                	test   ebx,ebx
c000dc66:	74 12                	je     c000dc7a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000dc68:	50                   	push   eax
c000dc69:	55                   	push   ebp
c000dc6a:	53                   	push   ebx
c000dc6b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000dc72:	e8 95 fd ff ff       	call   c000da0c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000dc77:	83 c4 10             	add    esp,0x10
c000dc7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dc7e:	83 c4 7c             	add    esp,0x7c
c000dc81:	5b                   	pop    ebx
c000dc82:	5e                   	pop    esi
c000dc83:	5f                   	pop    edi
c000dc84:	5d                   	pop    ebp
c000dc85:	c3                   	ret    

c000dc86 <CmSetString(Reghive_Tag*, int, char const*)>:
c000dc86:	55                   	push   ebp
c000dc87:	57                   	push   edi
c000dc88:	56                   	push   esi
c000dc89:	53                   	push   ebx
c000dc8a:	bb 27 00 00 00       	mov    ebx,0x27
c000dc8f:	81 ec 88 00 00 00    	sub    esp,0x88
c000dc95:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c000dc9c:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000dca3:	e8 d8 28 ff ff       	call   c0000580 <strlen>
c000dca8:	8d 48 26             	lea    ecx,[eax+0x26]
c000dcab:	89 c8                	mov    eax,ecx
c000dcad:	99                   	cdq    
c000dcae:	f7 fb                	idiv   ebx
c000dcb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dcb4:	83 c4 10             	add    esp,0x10
c000dcb7:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000dcbd:	7e 10                	jle    c000dccf <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000dcbf:	83 ec 0c             	sub    esp,0xc
c000dcc2:	68 cb 8a 02 c0       	push   0xc0028acb
c000dcc7:	e8 e0 22 00 00       	call   c000ffac <KePanic(char const*)>
c000dccc:	83 c4 10             	add    esp,0x10
c000dccf:	53                   	push   ebx
c000dcd0:	31 ed                	xor    ebp,ebp
c000dcd2:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000dcd6:	53                   	push   ebx
c000dcd7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000dcde:	57                   	push   edi
c000dcdf:	e8 04 fc ff ff       	call   c000d8e8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dce4:	83 c4 10             	add    esp,0x10
c000dce7:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c000dceb:	89 f0                	mov    eax,esi
c000dced:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c000dcf1:	c1 e0 08             	shl    eax,0x8
c000dcf4:	09 c6                	or     esi,eax
c000dcf6:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000dcfa:	c1 e6 08             	shl    esi,0x8
c000dcfd:	09 c6                	or     esi,eax
c000dcff:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000dd03:	7e 72                	jle    c000dd77 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c000dd05:	85 f6                	test   esi,esi
c000dd07:	75 25                	jne    c000dd2e <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000dd09:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000dd0e:	8d 44 24 45          	lea    eax,[esp+0x45]
c000dd12:	50                   	push   eax
c000dd13:	6a 00                	push   0x0
c000dd15:	6a 00                	push   0x0
c000dd17:	57                   	push   edi
c000dd18:	e8 75 fe ff ff       	call   c000db92 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dd1d:	83 c4 10             	add    esp,0x10
c000dd20:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000dd23:	89 c6                	mov    esi,eax
c000dd25:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000dd28:	c1 f8 10             	sar    eax,0x10
c000dd2b:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000dd2e:	51                   	push   ecx
c000dd2f:	8d 54 24 49          	lea    edx,[esp+0x49]
c000dd33:	52                   	push   edx
c000dd34:	56                   	push   esi
c000dd35:	57                   	push   edi
c000dd36:	e8 ad fb ff ff       	call   c000d8e8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dd3b:	83 c4 0c             	add    esp,0xc
c000dd3e:	6a 27                	push   0x27
c000dd40:	6a 00                	push   0x0
c000dd42:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000dd46:	51                   	push   ecx
c000dd47:	e8 a4 27 ff ff       	call   c00004f0 <memset>
c000dd4c:	6b c5 27             	imul   eax,ebp,0x27
c000dd4f:	83 c4 0c             	add    esp,0xc
c000dd52:	6a 27                	push   0x27
c000dd54:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000dd5b:	50                   	push   eax
c000dd5c:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000dd60:	51                   	push   ecx
c000dd61:	e8 2a 29 ff ff       	call   c0000690 <strncpy>
c000dd66:	83 c4 0c             	add    esp,0xc
c000dd69:	8d 54 24 49          	lea    edx,[esp+0x49]
c000dd6d:	52                   	push   edx
c000dd6e:	56                   	push   esi
c000dd6f:	57                   	push   edi
c000dd70:	e8 97 fc ff ff       	call   c000da0c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000dd75:	eb 19                	jmp    c000dd90 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c000dd77:	85 f6                	test   esi,esi
c000dd79:	74 18                	je     c000dd93 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c000dd7b:	52                   	push   edx
c000dd7c:	52                   	push   edx
c000dd7d:	56                   	push   esi
c000dd7e:	57                   	push   edi
c000dd7f:	e8 c4 fc ff ff       	call   c000da48 <CmFreeExtent(Reghive_Tag*, int)>
c000dd84:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000dd88:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000dd8c:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000dd90:	83 c4 10             	add    esp,0x10
c000dd93:	45                   	inc    ebp
c000dd94:	83 c3 03             	add    ebx,0x3
c000dd97:	83 fd 07             	cmp    ebp,0x7
c000dd9a:	0f 85 47 ff ff ff    	jne    c000dce7 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000dda0:	50                   	push   eax
c000dda1:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000dda5:	50                   	push   eax
c000dda6:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000ddad:	57                   	push   edi
c000ddae:	e8 59 fc ff ff       	call   c000da0c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ddb3:	81 c4 8c 00 00 00    	add    esp,0x8c
c000ddb9:	5b                   	pop    ebx
c000ddba:	5e                   	pop    esi
c000ddbb:	5f                   	pop    edi
c000ddbc:	5d                   	pop    ebp
c000ddbd:	c3                   	ret    

c000ddbe <CmGetMatch(char*, char*, bool, bool*)>:
c000ddbe:	56                   	push   esi
c000ddbf:	53                   	push   ebx
c000ddc0:	50                   	push   eax
c000ddc1:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ddc6:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ddca:	74 25                	je     c000ddf1 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000ddcc:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000ddcf:	31 db                	xor    ebx,ebx
c000ddd1:	50                   	push   eax
c000ddd2:	50                   	push   eax
c000ddd3:	8d 04 9d 80 bd 02 c0 	lea    eax,[ebx*4-0x3ffd4280]
c000ddda:	50                   	push   eax
c000dddb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dddf:	e8 9c 29 ff ff       	call   c0000780 <strcmp>
c000dde4:	83 c4 10             	add    esp,0x10
c000dde7:	85 c0                	test   eax,eax
c000dde9:	74 2e                	je     c000de19 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000ddeb:	43                   	inc    ebx
c000ddec:	83 fb 3f             	cmp    ebx,0x3f
c000ddef:	75 e0                	jne    c000ddd1 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000ddf1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000ddf4:	31 db                	xor    ebx,ebx
c000ddf6:	51                   	push   ecx
c000ddf7:	51                   	push   ecx
c000ddf8:	8d 04 9d 80 bd 02 c0 	lea    eax,[ebx*4-0x3ffd4280]
c000ddff:	50                   	push   eax
c000de00:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000de04:	e8 77 29 ff ff       	call   c0000780 <strcmp>
c000de09:	83 c4 10             	add    esp,0x10
c000de0c:	85 c0                	test   eax,eax
c000de0e:	74 09                	je     c000de19 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000de10:	43                   	inc    ebx
c000de11:	83 fb 3f             	cmp    ebx,0x3f
c000de14:	75 e0                	jne    c000ddf6 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000de16:	83 cb ff             	or     ebx,0xffffffff
c000de19:	5a                   	pop    edx
c000de1a:	89 d8                	mov    eax,ebx
c000de1c:	5b                   	pop    ebx
c000de1d:	5e                   	pop    esi
c000de1e:	c3                   	ret    

c000de1f <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000de1f:	55                   	push   ebp
c000de20:	31 c0                	xor    eax,eax
c000de22:	57                   	push   edi
c000de23:	56                   	push   esi
c000de24:	53                   	push   ebx
c000de25:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de29:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000de2d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000de31:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000de35:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000de37:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000de3a:	83 fd 1f             	cmp    ebp,0x1f
c000de3d:	7f 0b                	jg     c000de4a <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000de3f:	0f b6 c2             	movzx  eax,dl
c000de42:	d3 e0                	shl    eax,cl
c000de44:	09 07                	or     DWORD PTR [edi],eax
c000de46:	b0 01                	mov    al,0x1
c000de48:	01 33                	add    DWORD PTR [ebx],esi
c000de4a:	5b                   	pop    ebx
c000de4b:	5e                   	pop    esi
c000de4c:	5f                   	pop    edi
c000de4d:	5d                   	pop    ebp
c000de4e:	c3                   	ret    

c000de4f <CmGetShift(unsigned int*, int*, int, bool*)>:
c000de4f:	57                   	push   edi
c000de50:	56                   	push   esi
c000de51:	53                   	push   ebx
c000de52:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000de56:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000de5a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000de5e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000de62:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000de64:	7c 17                	jl     c000de7d <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000de66:	8b 17                	mov    edx,DWORD PTR [edi]
c000de68:	b8 01 00 00 00       	mov    eax,0x1
c000de6d:	d3 e0                	shl    eax,cl
c000de6f:	48                   	dec    eax
c000de70:	21 d0                	and    eax,edx
c000de72:	d3 ea                	shr    edx,cl
c000de74:	89 17                	mov    DWORD PTR [edi],edx
c000de76:	29 0b                	sub    DWORD PTR [ebx],ecx
c000de78:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000de7b:	eb 05                	jmp    c000de82 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000de7d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000de80:	31 c0                	xor    eax,eax
c000de82:	5b                   	pop    ebx
c000de83:	5e                   	pop    esi
c000de84:	5f                   	pop    edi
c000de85:	c3                   	ret    

c000de86 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000de86:	83 ec 40             	sub    esp,0x40
c000de89:	8d 44 24 09          	lea    eax,[esp+0x9]
c000de8d:	50                   	push   eax
c000de8e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000de92:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000de96:	e8 4d fa ff ff       	call   c000d8e8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000de9b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000de9f:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000dea3:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000dea7:	89 10                	mov    DWORD PTR [eax],edx
c000dea9:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000deac:	83 c4 4c             	add    esp,0x4c
c000deaf:	c3                   	ret    

c000deb0 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000deb0:	55                   	push   ebp
c000deb1:	57                   	push   edi
c000deb2:	56                   	push   esi
c000deb3:	53                   	push   ebx
c000deb4:	83 ec 40             	sub    esp,0x40
c000deb7:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000debb:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000debf:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000dec3:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000dec7:	53                   	push   ebx
c000dec8:	56                   	push   esi
c000dec9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000decd:	e8 16 fa ff ff       	call   c000d8e8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ded2:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000ded6:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000deda:	83 c4 0c             	add    esp,0xc
c000dedd:	53                   	push   ebx
c000dede:	56                   	push   esi
c000dedf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dee3:	e8 24 fb ff ff       	call   c000da0c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000dee8:	83 c4 4c             	add    esp,0x4c
c000deeb:	5b                   	pop    ebx
c000deec:	5e                   	pop    esi
c000deed:	5f                   	pop    edi
c000deee:	5d                   	pop    ebp
c000deef:	c3                   	ret    

c000def0 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000def0:	55                   	push   ebp
c000def1:	57                   	push   edi
c000def2:	56                   	push   esi
c000def3:	31 f6                	xor    esi,esi
c000def5:	53                   	push   ebx
c000def6:	31 db                	xor    ebx,ebx
c000def8:	83 ec 40             	sub    esp,0x40
c000defb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000df03:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000df0b:	6a 12                	push   0x12
c000df0d:	68 ee 00 00 00       	push   0xee
c000df12:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000df16:	e8 d5 25 ff ff       	call   c00004f0 <memset>
c000df1b:	83 c4 10             	add    esp,0x10
c000df1e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000df22:	6a 08                	push   0x8
c000df24:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000df28:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000df2c:	50                   	push   eax
c000df2d:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000df31:	55                   	push   ebp
c000df32:	57                   	push   edi
c000df33:	e8 e7 fe ff ff       	call   c000de1f <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000df38:	83 c4 10             	add    esp,0x10
c000df3b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000df3f:	50                   	push   eax
c000df40:	6a 06                	push   0x6
c000df42:	55                   	push   ebp
c000df43:	57                   	push   edi
c000df44:	e8 06 ff ff ff       	call   c000de4f <CmGetShift(unsigned int*, int*, int, bool*)>
c000df49:	83 c4 10             	add    esp,0x10
c000df4c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000df51:	74 07                	je     c000df5a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000df53:	46                   	inc    esi
c000df54:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000df58:	eb e1                	jmp    c000df3b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000df5a:	43                   	inc    ebx
c000df5b:	83 fb 12             	cmp    ebx,0x12
c000df5e:	75 c2                	jne    c000df22 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000df60:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000df64:	31 f6                	xor    esi,esi
c000df66:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000df69:	50                   	push   eax
c000df6a:	50                   	push   eax
c000df6b:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c000df70:	46                   	inc    esi
c000df71:	8d 04 85 80 bd 02 c0 	lea    eax,[eax*4-0x3ffd4280]
c000df78:	50                   	push   eax
c000df79:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000df7d:	e8 ee 28 ff ff       	call   c0000870 <strcat>
c000df82:	83 c4 10             	add    esp,0x10
c000df85:	83 fe 18             	cmp    esi,0x18
c000df88:	75 df                	jne    c000df69 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000df8a:	83 c4 3c             	add    esp,0x3c
c000df8d:	31 c0                	xor    eax,eax
c000df8f:	5b                   	pop    ebx
c000df90:	5e                   	pop    esi
c000df91:	5f                   	pop    edi
c000df92:	5d                   	pop    ebp
c000df93:	c3                   	ret    

c000df94 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000df94:	83 ec 40             	sub    esp,0x40
c000df97:	8d 44 24 09          	lea    eax,[esp+0x9]
c000df9b:	50                   	push   eax
c000df9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dfa0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dfa4:	e8 3f f9 ff ff       	call   c000d8e8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dfa9:	58                   	pop    eax
c000dfaa:	5a                   	pop    edx
c000dfab:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000dfaf:	8d 44 24 15          	lea    eax,[esp+0x15]
c000dfb3:	50                   	push   eax
c000dfb4:	e8 37 ff ff ff       	call   c000def0 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000dfb9:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000dfbe:	83 c4 4c             	add    esp,0x4c
c000dfc1:	c3                   	ret    

c000dfc2 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000dfc2:	55                   	push   ebp
c000dfc3:	57                   	push   edi
c000dfc4:	56                   	push   esi
c000dfc5:	53                   	push   ebx
c000dfc6:	31 db                	xor    ebx,ebx
c000dfc8:	83 ec 70             	sub    esp,0x70
c000dfcb:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000dfd2:	6a 30                	push   0x30
c000dfd4:	6a 00                	push   0x0
c000dfd6:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000dfda:	56                   	push   esi
c000dfdb:	e8 10 25 ff ff       	call   c00004f0 <memset>
c000dfe0:	83 c4 10             	add    esp,0x10
c000dfe3:	83 ec 0c             	sub    esp,0xc
c000dfe6:	57                   	push   edi
c000dfe7:	e8 94 25 ff ff       	call   c0000580 <strlen>
c000dfec:	83 c4 10             	add    esp,0x10
c000dfef:	39 d8                	cmp    eax,ebx
c000dff1:	76 16                	jbe    c000e009 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000dff3:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000dff7:	83 ec 0c             	sub    esp,0xc
c000dffa:	50                   	push   eax
c000dffb:	e8 60 29 ff ff       	call   c0000960 <toupper>
c000e000:	83 c4 10             	add    esp,0x10
c000e003:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000e006:	43                   	inc    ebx
c000e007:	eb da                	jmp    c000dfe3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000e009:	52                   	push   edx
c000e00a:	31 db                	xor    ebx,ebx
c000e00c:	6a 18                	push   0x18
c000e00e:	31 ff                	xor    edi,edi
c000e010:	6a 3f                	push   0x3f
c000e012:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e016:	50                   	push   eax
c000e017:	e8 d4 24 ff ff       	call   c00004f0 <memset>
c000e01c:	83 c4 10             	add    esp,0x10
c000e01f:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c000e023:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e027:	84 c0                	test   al,al
c000e029:	0f 84 af 00 00 00    	je     c000e0de <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000e02f:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000e033:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000e036:	83 ec 0c             	sub    esp,0xc
c000e039:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c000e03e:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000e042:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000e046:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000e04b:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000e04f:	56                   	push   esi
c000e050:	e8 2b 25 ff ff       	call   c0000580 <strlen>
c000e055:	83 c4 10             	add    esp,0x10
c000e058:	85 c0                	test   eax,eax
c000e05a:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000e05e:	74 0b                	je     c000e06b <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000e060:	50                   	push   eax
c000e061:	6a 01                	push   0x1
c000e063:	56                   	push   esi
c000e064:	8d 44 24 20          	lea    eax,[esp+0x20]
c000e068:	50                   	push   eax
c000e069:	eb 0a                	jmp    c000e075 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000e06b:	50                   	push   eax
c000e06c:	6a 00                	push   0x0
c000e06e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000e072:	50                   	push   eax
c000e073:	6a 00                	push   0x0
c000e075:	e8 44 fd ff ff       	call   c000ddbe <CmGetMatch(char*, char*, bool, bool*)>
c000e07a:	83 c4 10             	add    esp,0x10
c000e07d:	83 f8 ff             	cmp    eax,0xffffffff
c000e080:	75 1a                	jne    c000e09c <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000e082:	83 ec 0c             	sub    esp,0xc
c000e085:	68 e0 8a 02 c0       	push   0xc0028ae0
c000e08a:	e8 1d 1f 00 00       	call   c000ffac <KePanic(char const*)>
c000e08f:	83 c4 10             	add    esp,0x10
c000e092:	b8 02 00 00 00       	mov    eax,0x2
c000e097:	e9 bb 00 00 00       	jmp    c000e157 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000e09c:	83 ff 18             	cmp    edi,0x18
c000e09f:	75 1a                	jne    c000e0bb <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000e0a1:	83 ec 0c             	sub    esp,0xc
c000e0a4:	68 f5 8a 02 c0       	push   0xc0028af5
c000e0a9:	e8 fe 1e 00 00       	call   c000ffac <KePanic(char const*)>
c000e0ae:	83 c4 10             	add    esp,0x10
c000e0b1:	b8 01 00 00 00       	mov    eax,0x1
c000e0b6:	e9 9c 00 00 00       	jmp    c000e157 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000e0bb:	47                   	inc    edi
c000e0bc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e0c1:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000e0c5:	0f 45 dd             	cmovne ebx,ebp
c000e0c8:	83 ec 0c             	sub    esp,0xc
c000e0cb:	56                   	push   esi
c000e0cc:	e8 af 24 ff ff       	call   c0000580 <strlen>
c000e0d1:	83 c4 10             	add    esp,0x10
c000e0d4:	85 c0                	test   eax,eax
c000e0d6:	74 06                	je     c000e0de <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000e0d8:	43                   	inc    ebx
c000e0d9:	e9 41 ff ff ff       	jmp    c000e01f <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000e0de:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e0e6:	31 db                	xor    ebx,ebx
c000e0e8:	31 ff                	xor    edi,edi
c000e0ea:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e0f2:	50                   	push   eax
c000e0f3:	6a 12                	push   0x12
c000e0f5:	68 ee 00 00 00       	push   0xee
c000e0fa:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000e101:	e8 ea 23 ff ff       	call   c00004f0 <memset>
c000e106:	83 c4 10             	add    esp,0x10
c000e109:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000e10d:	83 fb 17             	cmp    ebx,0x17
c000e110:	7e 26                	jle    c000e138 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c000e112:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000e116:	50                   	push   eax
c000e117:	6a 08                	push   0x8
c000e119:	55                   	push   ebp
c000e11a:	56                   	push   esi
c000e11b:	e8 2f fd ff ff       	call   c000de4f <CmGetShift(unsigned int*, int*, int, bool*)>
c000e120:	83 c4 10             	add    esp,0x10
c000e123:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e128:	74 26                	je     c000e150 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c000e12a:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000e131:	4b                   	dec    ebx
c000e132:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000e135:	47                   	inc    edi
c000e136:	eb 1c                	jmp    c000e154 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000e138:	6a 06                	push   0x6
c000e13a:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c000e13f:	50                   	push   eax
c000e140:	55                   	push   ebp
c000e141:	56                   	push   esi
c000e142:	e8 d8 fc ff ff       	call   c000de1f <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	84 c0                	test   al,al
c000e14c:	75 06                	jne    c000e154 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000e14e:	eb c2                	jmp    c000e112 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c000e150:	31 c0                	xor    eax,eax
c000e152:	eb 03                	jmp    c000e157 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000e154:	43                   	inc    ebx
c000e155:	eb b2                	jmp    c000e109 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c000e157:	83 c4 6c             	add    esp,0x6c
c000e15a:	5b                   	pop    ebx
c000e15b:	5e                   	pop    esi
c000e15c:	5f                   	pop    edi
c000e15d:	5d                   	pop    ebp
c000e15e:	c3                   	ret    

c000e15f <CmCreateString(Reghive_Tag*, int, char const*)>:
c000e15f:	53                   	push   ebx
c000e160:	83 ec 3c             	sub    esp,0x3c
c000e163:	6a 2b                	push   0x2b
c000e165:	6a 00                	push   0x0
c000e167:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000e16b:	53                   	push   ebx
c000e16c:	e8 7f 23 ff ff       	call   c00004f0 <memset>
c000e171:	58                   	pop    eax
c000e172:	5a                   	pop    edx
c000e173:	8d 44 24 11          	lea    eax,[esp+0x11]
c000e177:	50                   	push   eax
c000e178:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e17c:	e8 41 fe ff ff       	call   c000dfc2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000e181:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000e186:	83 c4 0c             	add    esp,0xc
c000e189:	6a 15                	push   0x15
c000e18b:	6a 00                	push   0x0
c000e18d:	8d 44 24 27          	lea    eax,[esp+0x27]
c000e191:	50                   	push   eax
c000e192:	e8 59 23 ff ff       	call   c00004f0 <memset>
c000e197:	53                   	push   ebx
c000e198:	6a 00                	push   0x0
c000e19a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e19e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e1a2:	e8 eb f9 ff ff       	call   c000db92 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000e1a7:	83 c4 58             	add    esp,0x58
c000e1aa:	5b                   	pop    ebx
c000e1ab:	c3                   	ret    

c000e1ac <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000e1ac:	56                   	push   esi
c000e1ad:	53                   	push   ebx
c000e1ae:	83 ec 48             	sub    esp,0x48
c000e1b1:	6a 12                	push   0x12
c000e1b3:	68 ff 00 00 00       	push   0xff
c000e1b8:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000e1bc:	56                   	push   esi
c000e1bd:	e8 2e 23 ff ff       	call   c00004f0 <memset>
c000e1c2:	5a                   	pop    edx
c000e1c3:	59                   	pop    ecx
c000e1c4:	56                   	push   esi
c000e1c5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000e1c9:	e8 f4 fd ff ff       	call   c000dfc2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000e1ce:	83 c4 10             	add    esp,0x10
c000e1d1:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000e1d5:	85 db                	test   ebx,ebx
c000e1d7:	74 42                	je     c000e21b <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000e1d9:	50                   	push   eax
c000e1da:	8d 44 24 19          	lea    eax,[esp+0x19]
c000e1de:	50                   	push   eax
c000e1df:	53                   	push   ebx
c000e1e0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e1e4:	e8 ff f6 ff ff       	call   c000d8e8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e1e9:	83 c4 0c             	add    esp,0xc
c000e1ec:	6a 12                	push   0x12
c000e1ee:	8d 44 24 21          	lea    eax,[esp+0x21]
c000e1f2:	50                   	push   eax
c000e1f3:	56                   	push   esi
c000e1f4:	e8 87 21 ff ff       	call   c0000380 <memcmp>
c000e1f9:	83 c4 10             	add    esp,0x10
c000e1fc:	85 c0                	test   eax,eax
c000e1fe:	74 1e                	je     c000e21e <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000e200:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000e205:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000e20a:	c1 e3 08             	shl    ebx,0x8
c000e20d:	09 d8                	or     eax,ebx
c000e20f:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000e214:	c1 e3 10             	shl    ebx,0x10
c000e217:	09 c3                	or     ebx,eax
c000e219:	eb ba                	jmp    c000e1d5 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000e21b:	83 cb ff             	or     ebx,0xffffffff
c000e21e:	83 c4 44             	add    esp,0x44
c000e221:	89 d8                	mov    eax,ebx
c000e223:	5b                   	pop    ebx
c000e224:	5e                   	pop    esi
c000e225:	c3                   	ret    

c000e226 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000e226:	57                   	push   edi
c000e227:	56                   	push   esi
c000e228:	53                   	push   ebx
c000e229:	83 ec 34             	sub    esp,0x34
c000e22c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000e230:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000e234:	6a 2b                	push   0x2b
c000e236:	6a 00                	push   0x0
c000e238:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000e23c:	53                   	push   ebx
c000e23d:	e8 ae 22 ff ff       	call   c00004f0 <memset>
c000e242:	58                   	pop    eax
c000e243:	5a                   	pop    edx
c000e244:	8d 44 24 11          	lea    eax,[esp+0x11]
c000e248:	50                   	push   eax
c000e249:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e24d:	e8 70 fd ff ff       	call   c000dfc2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000e252:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c000e256:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000e25a:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000e25e:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000e262:	53                   	push   ebx
c000e263:	6a 00                	push   0x0
c000e265:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e269:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e26d:	e8 20 f9 ff ff       	call   c000db92 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000e272:	83 c4 50             	add    esp,0x50
c000e275:	5b                   	pop    ebx
c000e276:	5e                   	pop    esi
c000e277:	5f                   	pop    edi
c000e278:	c3                   	ret    

c000e279 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000e279:	55                   	push   ebp
c000e27a:	57                   	push   edi
c000e27b:	56                   	push   esi
c000e27c:	53                   	push   ebx
c000e27d:	83 ec 40             	sub    esp,0x40
c000e280:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000e284:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000e288:	6a 2b                	push   0x2b
c000e28a:	6a 00                	push   0x0
c000e28c:	8d 74 24 11          	lea    esi,[esp+0x11]
c000e290:	56                   	push   esi
c000e291:	e8 5a 22 ff ff       	call   c00004f0 <memset>
c000e296:	5f                   	pop    edi
c000e297:	89 ef                	mov    edi,ebp
c000e299:	58                   	pop    eax
c000e29a:	8d 44 24 11          	lea    eax,[esp+0x11]
c000e29e:	50                   	push   eax
c000e29f:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000e2a3:	e8 1a fd ff ff       	call   c000dfc2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000e2a8:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000e2ad:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000e2b2:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000e2b7:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000e2bc:	83 c4 10             	add    esp,0x10
c000e2bf:	85 ed                	test   ebp,ebp
c000e2c1:	74 14                	je     c000e2d7 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000e2c3:	51                   	push   ecx
c000e2c4:	51                   	push   ecx
c000e2c5:	57                   	push   edi
c000e2c6:	53                   	push   ebx
c000e2c7:	e8 0e f7 ff ff       	call   c000d9da <CmGetNext(Reghive_Tag*, int)>
c000e2cc:	83 c4 10             	add    esp,0x10
c000e2cf:	85 c0                	test   eax,eax
c000e2d1:	74 04                	je     c000e2d7 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000e2d3:	89 c7                	mov    edi,eax
c000e2d5:	eb e8                	jmp    c000e2bf <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000e2d7:	56                   	push   esi
c000e2d8:	6a 00                	push   0x0
c000e2da:	57                   	push   edi
c000e2db:	53                   	push   ebx
c000e2dc:	e8 b1 f8 ff ff       	call   c000db92 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000e2e1:	83 c4 0c             	add    esp,0xc
c000e2e4:	56                   	push   esi
c000e2e5:	50                   	push   eax
c000e2e6:	89 c7                	mov    edi,eax
c000e2e8:	53                   	push   ebx
c000e2e9:	e8 fa f5 ff ff       	call   c000d8e8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e2ee:	58                   	pop    eax
c000e2ef:	5a                   	pop    edx
c000e2f0:	6a 6c                	push   0x6c
c000e2f2:	6a 00                	push   0x0
c000e2f4:	6a 00                	push   0x0
c000e2f6:	68 06 8b 02 c0       	push   0xc0028b06
c000e2fb:	57                   	push   edi
c000e2fc:	53                   	push   ebx
c000e2fd:	e8 24 ff ff ff       	call   c000e226 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000e302:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000e306:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000e30a:	c1 e8 10             	shr    eax,0x10
c000e30d:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000e311:	83 c4 1c             	add    esp,0x1c
c000e314:	56                   	push   esi
c000e315:	57                   	push   edi
c000e316:	53                   	push   ebx
c000e317:	e8 f0 f6 ff ff       	call   c000da0c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e31c:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000e321:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000e326:	c1 e0 08             	shl    eax,0x8
c000e329:	09 c2                	or     edx,eax
c000e32b:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000e330:	83 c4 4c             	add    esp,0x4c
c000e333:	5b                   	pop    ebx
c000e334:	5e                   	pop    esi
c000e335:	c1 e0 10             	shl    eax,0x10
c000e338:	09 d0                	or     eax,edx
c000e33a:	5f                   	pop    edi
c000e33b:	5d                   	pop    ebp
c000e33c:	c3                   	ret    

c000e33d <zStrtok(char*, char const*)>:
c000e33d:	55                   	push   ebp
c000e33e:	57                   	push   edi
c000e33f:	56                   	push   esi
c000e340:	53                   	push   ebx
c000e341:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e345:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e349:	85 db                	test   ebx,ebx
c000e34b:	74 2f                	je     c000e37c <zStrtok(char*, char const*)+0x3f>
c000e34d:	85 c0                	test   eax,eax
c000e34f:	75 09                	jne    c000e35a <zStrtok(char*, char const*)+0x1d>
c000e351:	a1 04 21 03 c0       	mov    eax,ds:0xc0032104
c000e356:	85 c0                	test   eax,eax
c000e358:	74 50                	je     c000e3aa <zStrtok(char*, char const*)+0x6d>
c000e35a:	31 c9                	xor    ecx,ecx
c000e35c:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000e360:	74 03                	je     c000e365 <zStrtok(char*, char const*)+0x28>
c000e362:	41                   	inc    ecx
c000e363:	eb f7                	jmp    c000e35c <zStrtok(char*, char const*)+0x1f>
c000e365:	31 d2                	xor    edx,edx
c000e367:	39 ca                	cmp    edx,ecx
c000e369:	74 15                	je     c000e380 <zStrtok(char*, char const*)+0x43>
c000e36b:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000e36f:	8d 3c 10             	lea    edi,[eax+edx*1]
c000e372:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000e375:	39 ee                	cmp    esi,ebp
c000e377:	74 13                	je     c000e38c <zStrtok(char*, char const*)+0x4f>
c000e379:	42                   	inc    edx
c000e37a:	eb eb                	jmp    c000e367 <zStrtok(char*, char const*)+0x2a>
c000e37c:	31 c0                	xor    eax,eax
c000e37e:	eb 2a                	jmp    c000e3aa <zStrtok(char*, char const*)+0x6d>
c000e380:	c7 05 04 21 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032104,0x0
c000e38a:	eb 1e                	jmp    c000e3aa <zStrtok(char*, char const*)+0x6d>
c000e38c:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000e38f:	39 ce                	cmp    esi,ecx
c000e391:	75 0a                	jne    c000e39d <zStrtok(char*, char const*)+0x60>
c000e393:	40                   	inc    eax
c000e394:	a3 04 21 03 c0       	mov    ds:0xc0032104,eax
c000e399:	89 d8                	mov    eax,ebx
c000e39b:	eb 0d                	jmp    c000e3aa <zStrtok(char*, char const*)+0x6d>
c000e39d:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000e3a0:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000e3a4:	89 15 04 21 03 c0    	mov    DWORD PTR ds:0xc0032104,edx
c000e3aa:	5b                   	pop    ebx
c000e3ab:	5e                   	pop    esi
c000e3ac:	5f                   	pop    edi
c000e3ad:	5d                   	pop    ebp
c000e3ae:	c3                   	ret    

c000e3af <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000e3af:	57                   	push   edi
c000e3b0:	56                   	push   esi
c000e3b1:	53                   	push   ebx
c000e3b2:	81 ec 08 01 00 00    	sub    esp,0x108
c000e3b8:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000e3bf:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000e3c6:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000e3ca:	53                   	push   ebx
c000e3cb:	e8 80 22 ff ff       	call   c0000650 <strcpy>
c000e3d0:	59                   	pop    ecx
c000e3d1:	5e                   	pop    esi
c000e3d2:	68 ba 99 02 c0       	push   0xc00299ba
c000e3d7:	53                   	push   ebx
c000e3d8:	bb 01 00 00 00       	mov    ebx,0x1
c000e3dd:	e8 5b ff ff ff       	call   c000e33d <zStrtok(char*, char const*)>
c000e3e2:	83 c4 10             	add    esp,0x10
c000e3e5:	85 c0                	test   eax,eax
c000e3e7:	74 3b                	je     c000e424 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e3e9:	52                   	push   edx
c000e3ea:	50                   	push   eax
c000e3eb:	6a 01                	push   0x1
c000e3ed:	57                   	push   edi
c000e3ee:	e8 b9 fd ff ff       	call   c000e1ac <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000e3f3:	59                   	pop    ecx
c000e3f4:	5e                   	pop    esi
c000e3f5:	89 c3                	mov    ebx,eax
c000e3f7:	68 ba 99 02 c0       	push   0xc00299ba
c000e3fc:	6a 00                	push   0x0
c000e3fe:	e8 3a ff ff ff       	call   c000e33d <zStrtok(char*, char const*)>
c000e403:	83 c4 10             	add    esp,0x10
c000e406:	85 c0                	test   eax,eax
c000e408:	89 c6                	mov    esi,eax
c000e40a:	74 18                	je     c000e424 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e40c:	52                   	push   edx
c000e40d:	52                   	push   edx
c000e40e:	53                   	push   ebx
c000e40f:	57                   	push   edi
c000e410:	e8 86 f5 ff ff       	call   c000d99b <CmEnterDirectory(Reghive_Tag*, int)>
c000e415:	83 c4 10             	add    esp,0x10
c000e418:	83 f8 ff             	cmp    eax,0xffffffff
c000e41b:	89 c3                	mov    ebx,eax
c000e41d:	74 05                	je     c000e424 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e41f:	50                   	push   eax
c000e420:	56                   	push   esi
c000e421:	53                   	push   ebx
c000e422:	eb c9                	jmp    c000e3ed <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000e424:	81 c4 00 01 00 00    	add    esp,0x100
c000e42a:	89 d8                	mov    eax,ebx
c000e42c:	5b                   	pop    ebx
c000e42d:	5e                   	pop    esi
c000e42e:	5f                   	pop    edi
c000e42f:	c3                   	ret    

c000e430 <Computer::close(int, int, void*)>:
c000e430:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e435:	c3                   	ret    

c000e436 <Computer::Computer()>:
c000e436:	83 ec 0c             	sub    esp,0xc
c000e439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e43d:	83 ec 08             	sub    esp,0x8
c000e440:	68 0c 8b 02 c0       	push   0xc0028b0c
c000e445:	50                   	push   eax
c000e446:	e8 e5 bb ff ff       	call   c000a030 <Device::Device(char const*)>
c000e44b:	83 c4 10             	add    esp,0x10
c000e44e:	ba 64 8b 02 c0       	mov    edx,0xc0028b64
c000e453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e457:	89 10                	mov    DWORD PTR [eax],edx
c000e459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e45d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e46b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e475:	90                   	nop
c000e476:	83 c4 0c             	add    esp,0xc
c000e479:	c3                   	ret    

c000e47a <Computer::open(int, int, void*)>:
c000e47a:	56                   	push   esi
c000e47b:	53                   	push   ebx
c000e47c:	83 ec 04             	sub    esp,0x4
c000e47f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e483:	39 1d 08 21 03 c0    	cmp    DWORD PTR ds:0xc0032108,ebx
c000e489:	74 10                	je     c000e49b <Computer::open(int, int, void*)+0x21>
c000e48b:	83 ec 0c             	sub    esp,0xc
c000e48e:	68 30 8b 02 c0       	push   0xc0028b30
c000e493:	e8 14 1b 00 00       	call   c000ffac <KePanic(char const*)>
c000e498:	83 c4 10             	add    esp,0x10
c000e49b:	83 ec 0c             	sub    esp,0xc
c000e49e:	68 78 11 00 00       	push   0x1178
c000e4a3:	e8 b0 16 00 00       	call   c000fb58 <malloc>
c000e4a8:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4ab:	89 c6                	mov    esi,eax
c000e4ad:	e8 d4 c9 00 00       	call   c001ae86 <CPU::CPU()>
c000e4b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4b6:	89 b3 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],esi
c000e4bc:	50                   	push   eax
c000e4bd:	6a 00                	push   0x0
c000e4bf:	6a 00                	push   0x0
c000e4c1:	56                   	push   esi
c000e4c2:	e8 a1 cb 00 00       	call   c001b068 <CPU::open(int, int, void*)>
c000e4c7:	83 c4 14             	add    esp,0x14
c000e4ca:	68 15 8b 02 c0       	push   0xc0028b15
c000e4cf:	e8 e1 f1 ff ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c000e4d4:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000e4db:	e8 78 16 00 00       	call   c000fb58 <malloc>
c000e4e0:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4e3:	89 c6                	mov    esi,eax
c000e4e5:	e8 12 e8 ff ff       	call   c000ccfc <ACPI::ACPI()>
c000e4ea:	89 b3 64 01 00 00    	mov    DWORD PTR [ebx+0x164],esi
c000e4f0:	5a                   	pop    edx
c000e4f1:	59                   	pop    ecx
c000e4f2:	56                   	push   esi
c000e4f3:	53                   	push   ebx
c000e4f4:	e8 d5 b9 ff ff       	call   c0009ece <Device::addChild(Device*)>
c000e4f9:	5e                   	pop    esi
c000e4fa:	58                   	pop    eax
c000e4fb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e501:	50                   	push   eax
c000e502:	53                   	push   ebx
c000e503:	e8 c6 b9 ff ff       	call   c0009ece <Device::addChild(Device*)>
c000e508:	83 c4 14             	add    esp,0x14
c000e50b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e510:	5b                   	pop    ebx
c000e511:	5e                   	pop    esi
c000e512:	c3                   	ret    

c000e513 <KeCalculateCRC32(unsigned char*, int)>:
c000e513:	53                   	push   ebx
c000e514:	83 c8 ff             	or     eax,0xffffffff
c000e517:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e51b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e51f:	01 cb                	add    ebx,ecx
c000e521:	39 d9                	cmp    ecx,ebx
c000e523:	74 15                	je     c000e53a <KeCalculateCRC32(unsigned char*, int)+0x27>
c000e525:	41                   	inc    ecx
c000e526:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000e529:	31 c2                	xor    edx,eax
c000e52b:	c1 e8 08             	shr    eax,0x8
c000e52e:	0f b6 d2             	movzx  edx,dl
c000e531:	33 04 95 80 be 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffd4180]
c000e538:	eb e7                	jmp    c000e521 <KeCalculateCRC32(unsigned char*, int)+0xe>
c000e53a:	5b                   	pop    ebx
c000e53b:	f7 d0                	not    eax
c000e53d:	c3                   	ret    

c000e53e <EnvVarContainer::getEnv(char const*)>:
c000e53e:	57                   	push   edi
c000e53f:	56                   	push   esi
c000e540:	53                   	push   ebx
c000e541:	31 db                	xor    ebx,ebx
c000e543:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e547:	39 1e                	cmp    DWORD PTR [esi],ebx
c000e549:	7e 2b                	jle    c000e576 <EnvVarContainer::getEnv(char const*)+0x38>
c000e54b:	50                   	push   eax
c000e54c:	50                   	push   eax
c000e54d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e550:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000e557:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000e55a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e55e:	e8 1d 22 ff ff       	call   c0000780 <strcmp>
c000e563:	83 c4 10             	add    esp,0x10
c000e566:	85 c0                	test   eax,eax
c000e568:	75 09                	jne    c000e573 <EnvVarContainer::getEnv(char const*)+0x35>
c000e56a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e56d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000e571:	eb 05                	jmp    c000e578 <EnvVarContainer::getEnv(char const*)+0x3a>
c000e573:	43                   	inc    ebx
c000e574:	eb d1                	jmp    c000e547 <EnvVarContainer::getEnv(char const*)+0x9>
c000e576:	31 c0                	xor    eax,eax
c000e578:	5b                   	pop    ebx
c000e579:	5e                   	pop    esi
c000e57a:	5f                   	pop    edi
c000e57b:	c3                   	ret    

c000e57c <EnvVarContainer::setEnv(char const*, char const*)>:
c000e57c:	55                   	push   ebp
c000e57d:	57                   	push   edi
c000e57e:	56                   	push   esi
c000e57f:	53                   	push   ebx
c000e580:	83 ec 28             	sub    esp,0x28
c000e583:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e587:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e58b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e58f:	56                   	push   esi
c000e590:	e8 eb 1f ff ff       	call   c0000580 <strlen>
c000e595:	40                   	inc    eax
c000e596:	89 04 24             	mov    DWORD PTR [esp],eax
c000e599:	e8 ba 15 00 00       	call   c000fb58 <malloc>
c000e59e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e5a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e5a5:	e8 d6 1f ff ff       	call   c0000580 <strlen>
c000e5aa:	40                   	inc    eax
c000e5ab:	89 04 24             	mov    DWORD PTR [esp],eax
c000e5ae:	e8 a5 15 00 00       	call   c000fb58 <malloc>
c000e5b3:	89 34 24             	mov    DWORD PTR [esp],esi
c000e5b6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5ba:	e8 c1 1f ff ff       	call   c0000580 <strlen>
c000e5bf:	83 c4 0c             	add    esp,0xc
c000e5c2:	40                   	inc    eax
c000e5c3:	50                   	push   eax
c000e5c4:	6a 00                	push   0x0
c000e5c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e5ca:	e8 21 1f ff ff       	call   c00004f0 <memset>
c000e5cf:	89 34 24             	mov    DWORD PTR [esp],esi
c000e5d2:	e8 a9 1f ff ff       	call   c0000580 <strlen>
c000e5d7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e5db:	8d 48 01             	lea    ecx,[eax+0x1]
c000e5de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e5e3:	89 de                	mov    esi,ebx
c000e5e5:	e8 96 1f ff ff       	call   c0000580 <strlen>
c000e5ea:	83 c4 0c             	add    esp,0xc
c000e5ed:	40                   	inc    eax
c000e5ee:	50                   	push   eax
c000e5ef:	6a 00                	push   0x0
c000e5f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e5f5:	e8 f6 1e ff ff       	call   c00004f0 <memset>
c000e5fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e5fd:	e8 7e 1f ff ff       	call   c0000580 <strlen>
c000e602:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e606:	8d 48 01             	lea    ecx,[eax+0x1]
c000e609:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e60b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e60e:	40                   	inc    eax
c000e60f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e612:	c1 e0 03             	shl    eax,0x3
c000e615:	5a                   	pop    edx
c000e616:	59                   	pop    ecx
c000e617:	50                   	push   eax
c000e618:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000e61b:	e8 24 15 00 00       	call   c000fb44 <realloc>
c000e620:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e623:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e627:	b9 08 00 00 00       	mov    ecx,0x8
c000e62c:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e62f:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e633:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e635:	83 c4 2c             	add    esp,0x2c
c000e638:	5b                   	pop    ebx
c000e639:	5e                   	pop    esi
c000e63a:	5f                   	pop    edi
c000e63b:	5d                   	pop    ebp
c000e63c:	c3                   	ret    
c000e63d:	90                   	nop

c000e63e <EnvVarContainer::deleteEnv(char const*)>:
c000e63e:	c3                   	ret    
c000e63f:	90                   	nop

c000e640 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000e640:	55                   	push   ebp
c000e641:	57                   	push   edi
c000e642:	56                   	push   esi
c000e643:	53                   	push   ebx
c000e644:	81 ec 38 01 00 00    	sub    esp,0x138
c000e64a:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000e651:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000e658:	68 14 01 00 00       	push   0x114
c000e65d:	e8 f6 14 00 00       	call   c000fb58 <malloc>
c000e662:	83 c4 0c             	add    esp,0xc
c000e665:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e668:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e66f:	89 c3                	mov    ebx,eax
c000e671:	50                   	push   eax
c000e672:	e8 e9 9f ff ff       	call   c0008660 <File::File(char const*, Process*)>
c000e677:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e67a:	e8 c3 a2 ff ff       	call   c0008942 <File::exists()>
c000e67f:	83 c4 10             	add    esp,0x10
c000e682:	84 c0                	test   al,al
c000e684:	75 31                	jne    c000e6b7 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000e686:	50                   	push   eax
c000e687:	50                   	push   eax
c000e688:	6a 12                	push   0x12
c000e68a:	53                   	push   ebx
c000e68b:	e8 ee 9f ff ff       	call   c000867e <File::open(FileOpenMode)>
c000e690:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e692:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000e695:	89 34 24             	mov    DWORD PTR [esp],esi
c000e698:	e8 e3 1e ff ff       	call   c0000580 <strlen>
c000e69d:	5a                   	pop    edx
c000e69e:	8d 54 24 20          	lea    edx,[esp+0x20]
c000e6a2:	52                   	push   edx
c000e6a3:	31 d2                	xor    edx,edx
c000e6a5:	56                   	push   esi
c000e6a6:	52                   	push   edx
c000e6a7:	50                   	push   eax
c000e6a8:	53                   	push   ebx
c000e6a9:	ff d7                	call   edi
c000e6ab:	83 c4 14             	add    esp,0x14
c000e6ae:	53                   	push   ebx
c000e6af:	e8 28 a0 ff ff       	call   c00086dc <File::close()>
c000e6b4:	83 c4 10             	add    esp,0x10
c000e6b7:	56                   	push   esi
c000e6b8:	31 f6                	xor    esi,esi
c000e6ba:	68 00 01 00 00       	push   0x100
c000e6bf:	6a 00                	push   0x0
c000e6c1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e6c5:	50                   	push   eax
c000e6c6:	e8 25 1e ff ff       	call   c00004f0 <memset>
c000e6cb:	5f                   	pop    edi
c000e6cc:	58                   	pop    eax
c000e6cd:	6a 01                	push   0x1
c000e6cf:	53                   	push   ebx
c000e6d0:	e8 a9 9f ff ff       	call   c000867e <File::open(FileOpenMode)>
c000e6d5:	83 c4 10             	add    esp,0x10
c000e6d8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e6e0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e6e8:	83 ec 0c             	sub    esp,0xc
c000e6eb:	8d 54 24 20          	lea    edx,[esp+0x20]
c000e6ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e6f1:	52                   	push   edx
c000e6f2:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c000e6f6:	51                   	push   ecx
c000e6f7:	6a 00                	push   0x0
c000e6f9:	6a 01                	push   0x1
c000e6fb:	53                   	push   ebx
c000e6fc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e6ff:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000e704:	83 c4 20             	add    esp,0x20
c000e707:	85 c0                	test   eax,eax
c000e709:	89 c1                	mov    ecx,eax
c000e70b:	0f 84 36 01 00 00    	je     c000e847 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000e711:	83 f8 0d             	cmp    eax,0xd
c000e714:	0f 84 22 01 00 00    	je     c000e83c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e71a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e71f:	0f 84 f0 00 00 00    	je     c000e815 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000e725:	83 f8 0a             	cmp    eax,0xa
c000e728:	74 13                	je     c000e73d <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e72a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e72f:	74 0c                	je     c000e73d <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e731:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e737:	0f 8e f6 00 00 00    	jle    c000e833 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000e73d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e741:	83 ec 0c             	sub    esp,0xc
c000e744:	8d 78 01             	lea    edi,[eax+0x1]
c000e747:	57                   	push   edi
c000e748:	e8 0b 14 00 00       	call   c000fb58 <malloc>
c000e74d:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000e751:	8d 56 04             	lea    edx,[esi+0x4]
c000e754:	89 14 24             	mov    DWORD PTR [esp],edx
c000e757:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e75b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e75f:	e8 f4 13 00 00       	call   c000fb58 <malloc>
c000e764:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e768:	83 c4 0c             	add    esp,0xc
c000e76b:	57                   	push   edi
c000e76c:	6a 00                	push   0x0
c000e76e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e772:	e8 79 1d ff ff       	call   c00004f0 <memset>
c000e777:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e77b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000e77f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e783:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e785:	83 c4 0c             	add    esp,0xc
c000e788:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e78c:	52                   	push   edx
c000e78d:	6a 00                	push   0x0
c000e78f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e793:	e8 58 1d ff ff       	call   c00004f0 <memset>
c000e798:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e79c:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000e7a0:	89 34 24             	mov    DWORD PTR [esp],esi
c000e7a3:	e8 d8 1d ff ff       	call   c0000580 <strlen>
c000e7a8:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000e7ac:	89 c1                	mov    ecx,eax
c000e7ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e7b0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e7b3:	83 c4 10             	add    esp,0x10
c000e7b6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000e7b9:	40                   	inc    eax
c000e7ba:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e7bd:	85 d2                	test   edx,edx
c000e7bf:	75 0c                	jne    c000e7cd <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000e7c1:	83 ec 0c             	sub    esp,0xc
c000e7c4:	6a 08                	push   0x8
c000e7c6:	e8 8d 13 00 00       	call   c000fb58 <malloc>
c000e7cb:	eb 0c                	jmp    c000e7d9 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000e7cd:	51                   	push   ecx
c000e7ce:	51                   	push   ecx
c000e7cf:	c1 e0 03             	shl    eax,0x3
c000e7d2:	50                   	push   eax
c000e7d3:	52                   	push   edx
c000e7d4:	e8 6b 13 00 00       	call   c000fb44 <realloc>
c000e7d9:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e7dc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e7df:	83 c4 10             	add    esp,0x10
c000e7e2:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000e7e5:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e7e9:	b9 08 00 00 00       	mov    ecx,0x8
c000e7ee:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e7f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e7f4:	50                   	push   eax
c000e7f5:	31 f6                	xor    esi,esi
c000e7f7:	68 00 01 00 00       	push   0x100
c000e7fc:	6a 00                	push   0x0
c000e7fe:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e802:	50                   	push   eax
c000e803:	e8 e8 1c ff ff       	call   c00004f0 <memset>
c000e808:	83 c4 10             	add    esp,0x10
c000e80b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e813:	eb 27                	jmp    c000e83c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e815:	83 f8 3d             	cmp    eax,0x3d
c000e818:	74 1e                	je     c000e838 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000e81a:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e820:	7f 07                	jg     c000e829 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000e822:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c000e826:	46                   	inc    esi
c000e827:	eb 13                	jmp    c000e83c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e829:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000e831:	eb 09                	jmp    c000e83c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e833:	83 f8 3d             	cmp    eax,0x3d
c000e836:	75 ea                	jne    c000e822 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000e838:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000e83c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e841:	0f 85 99 fe ff ff    	jne    c000e6e0 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000e847:	83 ec 0c             	sub    esp,0xc
c000e84a:	53                   	push   ebx
c000e84b:	e8 8c 9e ff ff       	call   c00086dc <File::close()>
c000e850:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e852:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e855:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e858:	81 c4 3c 01 00 00    	add    esp,0x13c
c000e85e:	5b                   	pop    ebx
c000e85f:	5e                   	pop    esi
c000e860:	5f                   	pop    edi
c000e861:	5d                   	pop    ebp
c000e862:	c3                   	ret    
c000e863:	90                   	nop

c000e864 <EnvVarContainer::__loadSystem()>:
c000e864:	83 ec 10             	sub    esp,0x10
c000e867:	68 80 c2 02 c0       	push   0xc002c280
c000e86c:	68 88 8b 02 c0       	push   0xc0028b88
c000e871:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e875:	e8 c6 fd ff ff       	call   c000e640 <EnvVarContainer::loadFrom(char const*, char const*)>
c000e87a:	83 c4 1c             	add    esp,0x1c
c000e87d:	c3                   	ret    

c000e87e <EnvVarContainer::__loadUser()>:
c000e87e:	c3                   	ret    
c000e87f:	90                   	nop

c000e880 <EnvVarContainer::EnvVarContainer(Process*)>:
c000e880:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e884:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e88a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e88e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e892:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e895:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e899:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e8a0:	90                   	nop
c000e8a1:	c3                   	ret    

c000e8a2 <EnvVarContainer::~EnvVarContainer()>:
c000e8a2:	83 ec 0c             	sub    esp,0xc
c000e8a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e8ac:	85 c0                	test   eax,eax
c000e8ae:	74 1d                	je     c000e8cd <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e8b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b4:	8b 00                	mov    eax,DWORD PTR [eax]
c000e8b6:	85 c0                	test   eax,eax
c000e8b8:	74 13                	je     c000e8cd <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e8ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e8c1:	83 ec 0c             	sub    esp,0xc
c000e8c4:	50                   	push   eax
c000e8c5:	e8 9e 12 00 00       	call   c000fb68 <free>
c000e8ca:	83 c4 10             	add    esp,0x10
c000e8cd:	90                   	nop
c000e8ce:	83 c4 0c             	add    esp,0xc
c000e8d1:	c3                   	ret    

c000e8d2 <KeGetEnv(Process*, char const*)>:
c000e8d2:	53                   	push   ebx
c000e8d3:	83 ec 08             	sub    esp,0x8
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	39 05 58 23 03 c0    	cmp    DWORD PTR ds:0xc0032358,eax
c000e8e0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e8e4:	74 04                	je     c000e8ea <KeGetEnv(Process*, char const*)+0x18>
c000e8e6:	85 c0                	test   eax,eax
c000e8e8:	75 0b                	jne    c000e8f5 <KeGetEnv(Process*, char const*)+0x23>
c000e8ea:	a1 10 21 03 c0       	mov    eax,ds:0xc0032110
c000e8ef:	85 c0                	test   eax,eax
c000e8f1:	75 19                	jne    c000e90c <KeGetEnv(Process*, char const*)+0x3a>
c000e8f3:	eb 27                	jmp    c000e91c <KeGetEnv(Process*, char const*)+0x4a>
c000e8f5:	52                   	push   edx
c000e8f6:	52                   	push   edx
c000e8f7:	53                   	push   ebx
c000e8f8:	ff b0 ba 07 00 00    	push   DWORD PTR [eax+0x7ba]
c000e8fe:	e8 3b fc ff ff       	call   c000e53e <EnvVarContainer::getEnv(char const*)>
c000e903:	83 c4 10             	add    esp,0x10
c000e906:	85 c0                	test   eax,eax
c000e908:	75 28                	jne    c000e932 <KeGetEnv(Process*, char const*)+0x60>
c000e90a:	eb de                	jmp    c000e8ea <KeGetEnv(Process*, char const*)+0x18>
c000e90c:	52                   	push   edx
c000e90d:	52                   	push   edx
c000e90e:	53                   	push   ebx
c000e90f:	50                   	push   eax
c000e910:	e8 29 fc ff ff       	call   c000e53e <EnvVarContainer::getEnv(char const*)>
c000e915:	83 c4 10             	add    esp,0x10
c000e918:	85 c0                	test   eax,eax
c000e91a:	75 16                	jne    c000e932 <KeGetEnv(Process*, char const*)+0x60>
c000e91c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000e920:	a1 14 21 03 c0       	mov    eax,ds:0xc0032114
c000e925:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e929:	83 c4 08             	add    esp,0x8
c000e92c:	5b                   	pop    ebx
c000e92d:	e9 0c fc ff ff       	jmp    c000e53e <EnvVarContainer::getEnv(char const*)>
c000e932:	83 c4 08             	add    esp,0x8
c000e935:	5b                   	pop    ebx
c000e936:	c3                   	ret    

c000e937 <KeSetEnvSystem(char const*, char const*)>:
c000e937:	83 ec 10             	sub    esp,0x10
c000e93a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e93e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e942:	ff 35 14 21 03 c0    	push   DWORD PTR ds:0xc0032114
c000e948:	e8 2f fc ff ff       	call   c000e57c <EnvVarContainer::setEnv(char const*, char const*)>
c000e94d:	83 c4 1c             	add    esp,0x1c
c000e950:	c3                   	ret    

c000e951 <KeSetEnvUser(char const*, char const*)>:
c000e951:	a1 10 21 03 c0       	mov    eax,ds:0xc0032110
c000e956:	85 c0                	test   eax,eax
c000e958:	74 15                	je     c000e96f <KeSetEnvUser(char const*, char const*)+0x1e>
c000e95a:	83 ec 10             	sub    esp,0x10
c000e95d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e961:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e965:	50                   	push   eax
c000e966:	e8 11 fc ff ff       	call   c000e57c <EnvVarContainer::setEnv(char const*, char const*)>
c000e96b:	83 c4 1c             	add    esp,0x1c
c000e96e:	c3                   	ret    
c000e96f:	c3                   	ret    

c000e970 <KeSetEnvProcess(Process*, char const*, char const*)>:
c000e970:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e974:	8b 80 ba 07 00 00    	mov    eax,DWORD PTR [eax+0x7ba]
c000e97a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e97e:	e9 f9 fb ff ff       	jmp    c000e57c <EnvVarContainer::setEnv(char const*, char const*)>

c000e983 <KeDeleteEnvSystem(char const*)>:
c000e983:	c3                   	ret    

c000e984 <KeDeleteEnvUser(char const*)>:
c000e984:	c3                   	ret    

c000e985 <KeDeleteEnvProcess(Process*, char const*)>:
c000e985:	c3                   	ret    

c000e986 <KeNewProcessEnv(Process*)>:
c000e986:	83 ec 28             	sub    esp,0x28
c000e989:	6a 0c                	push   0xc
c000e98b:	e8 c8 11 00 00       	call   c000fb58 <malloc>
c000e990:	5a                   	pop    edx
c000e991:	59                   	pop    ecx
c000e992:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e996:	50                   	push   eax
c000e997:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e99b:	e8 e0 fe ff ff       	call   c000e880 <EnvVarContainer::EnvVarContainer(Process*)>
c000e9a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e9a4:	83 c4 2c             	add    esp,0x2c
c000e9a7:	c3                   	ret    

c000e9a8 <KeCopyProcessEnv(Process*, Process*)>:
c000e9a8:	57                   	push   edi
c000e9a9:	56                   	push   esi
c000e9aa:	53                   	push   ebx
c000e9ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9af:	83 ec 0c             	sub    esp,0xc
c000e9b2:	8b b8 ba 07 00 00    	mov    edi,DWORD PTR [eax+0x7ba]
c000e9b8:	6a 0c                	push   0xc
c000e9ba:	e8 99 11 00 00       	call   c000fb58 <malloc>
c000e9bf:	89 c3                	mov    ebx,eax
c000e9c1:	58                   	pop    eax
c000e9c2:	5a                   	pop    edx
c000e9c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9c7:	53                   	push   ebx
c000e9c8:	e8 b3 fe ff ff       	call   c000e880 <EnvVarContainer::EnvVarContainer(Process*)>
c000e9cd:	8b 07                	mov    eax,DWORD PTR [edi]
c000e9cf:	89 03                	mov    DWORD PTR [ebx],eax
c000e9d1:	c1 e0 03             	shl    eax,0x3
c000e9d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000e9d7:	e8 7c 11 00 00       	call   c000fb58 <malloc>
c000e9dc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e9df:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e9e1:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000e9e4:	89 c7                	mov    edi,eax
c000e9e6:	c1 e1 03             	shl    ecx,0x3
c000e9e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e9eb:	83 c4 10             	add    esp,0x10
c000e9ee:	89 d8                	mov    eax,ebx
c000e9f0:	5b                   	pop    ebx
c000e9f1:	5e                   	pop    esi
c000e9f2:	5f                   	pop    edi
c000e9f3:	c3                   	ret    

c000e9f4 <KeLoadSystemEnv()>:
c000e9f4:	53                   	push   ebx
c000e9f5:	83 ec 14             	sub    esp,0x14
c000e9f8:	6a 0c                	push   0xc
c000e9fa:	e8 59 11 00 00       	call   c000fb58 <malloc>
c000e9ff:	89 c3                	mov    ebx,eax
c000ea01:	58                   	pop    eax
c000ea02:	5a                   	pop    edx
c000ea03:	ff 35 58 23 03 c0    	push   DWORD PTR ds:0xc0032358
c000ea09:	53                   	push   ebx
c000ea0a:	e8 71 fe ff ff       	call   c000e880 <EnvVarContainer::EnvVarContainer(Process*)>
c000ea0f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ea12:	89 1d 14 21 03 c0    	mov    DWORD PTR ds:0xc0032114,ebx
c000ea18:	e8 47 fe ff ff       	call   c000e864 <EnvVarContainer::__loadSystem()>
c000ea1d:	83 c4 18             	add    esp,0x18
c000ea20:	5b                   	pop    ebx
c000ea21:	c3                   	ret    

c000ea22 <KeLoadUserEnv()>:
c000ea22:	53                   	push   ebx
c000ea23:	83 ec 14             	sub    esp,0x14
c000ea26:	6a 0c                	push   0xc
c000ea28:	e8 2b 11 00 00       	call   c000fb58 <malloc>
c000ea2d:	89 c3                	mov    ebx,eax
c000ea2f:	58                   	pop    eax
c000ea30:	5a                   	pop    edx
c000ea31:	ff 35 58 23 03 c0    	push   DWORD PTR ds:0xc0032358
c000ea37:	53                   	push   ebx
c000ea38:	e8 43 fe ff ff       	call   c000e880 <EnvVarContainer::EnvVarContainer(Process*)>
c000ea3d:	89 1d 10 21 03 c0    	mov    DWORD PTR ds:0xc0032110,ebx
c000ea43:	83 c4 18             	add    esp,0x18
c000ea46:	5b                   	pop    ebx
c000ea47:	c3                   	ret    

c000ea48 <KeFlushEnv()>:
c000ea48:	c3                   	ret    

c000ea49 <KeGetProcessTotalEnvCount(Process*)>:
c000ea49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ea4d:	8b 15 10 21 03 c0    	mov    edx,DWORD PTR ds:0xc0032110
c000ea53:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000ea59:	a1 14 21 03 c0       	mov    eax,ds:0xc0032114
c000ea5e:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea60:	03 01                	add    eax,DWORD PTR [ecx]
c000ea62:	85 d2                	test   edx,edx
c000ea64:	74 02                	je     c000ea68 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000ea66:	03 02                	add    eax,DWORD PTR [edx]
c000ea68:	c3                   	ret    

c000ea69 <KeGetProcessEnvPair(Process*, int)>:
c000ea69:	57                   	push   edi
c000ea6a:	56                   	push   esi
c000ea6b:	8b 35 10 21 03 c0    	mov    esi,DWORD PTR ds:0xc0032110
c000ea71:	53                   	push   ebx
c000ea72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ea7a:	85 f6                	test   esi,esi
c000ea7c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ea80:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000ea86:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ea88:	75 16                	jne    c000eaa0 <KeGetProcessEnvPair(Process*, int)+0x37>
c000ea8a:	39 c2                	cmp    edx,eax
c000ea8c:	7c 16                	jl     c000eaa4 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000ea8e:	8b 0d 14 21 03 c0    	mov    ecx,DWORD PTR ds:0xc0032114
c000ea94:	8b 31                	mov    esi,DWORD PTR [ecx]
c000ea96:	01 c6                	add    esi,eax
c000ea98:	39 d6                	cmp    esi,edx
c000ea9a:	7e 3c                	jle    c000ead8 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000ea9c:	29 c2                	sub    edx,eax
c000ea9e:	eb 04                	jmp    c000eaa4 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000eaa0:	39 c2                	cmp    edx,eax
c000eaa2:	7d 05                	jge    c000eaa9 <KeGetProcessEnvPair(Process*, int)+0x40>
c000eaa4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000eaa7:	eb 20                	jmp    c000eac9 <KeGetProcessEnvPair(Process*, int)+0x60>
c000eaa9:	8b 3e                	mov    edi,DWORD PTR [esi]
c000eaab:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000eaae:	39 d1                	cmp    ecx,edx
c000eab0:	7e 04                	jle    c000eab6 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000eab2:	29 c2                	sub    edx,eax
c000eab4:	eb 10                	jmp    c000eac6 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000eab6:	8b 35 14 21 03 c0    	mov    esi,DWORD PTR ds:0xc0032114
c000eabc:	03 0e                	add    ecx,DWORD PTR [esi]
c000eabe:	39 d1                	cmp    ecx,edx
c000eac0:	7e 16                	jle    c000ead8 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000eac2:	29 c2                	sub    edx,eax
c000eac4:	29 fa                	sub    edx,edi
c000eac6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000eac9:	8d 14 d0             	lea    edx,[eax+edx*8]
c000eacc:	8b 02                	mov    eax,DWORD PTR [edx]
c000eace:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ead1:	89 03                	mov    DWORD PTR [ebx],eax
c000ead3:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000ead6:	eb 1d                	jmp    c000eaf5 <KeGetProcessEnvPair(Process*, int)+0x8c>
c000ead8:	83 ec 0c             	sub    esp,0xc
c000eadb:	68 aa 8b 02 c0       	push   0xc0028baa
c000eae0:	e8 c7 14 00 00       	call   c000ffac <KePanic(char const*)>
c000eae5:	83 c4 10             	add    esp,0x10
c000eae8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000eaee:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000eaf5:	89 d8                	mov    eax,ebx
c000eaf7:	5b                   	pop    ebx
c000eaf8:	5e                   	pop    esi
c000eaf9:	5f                   	pop    edi
c000eafa:	c2 04 00             	ret    0x4
c000eafd:	66 90                	xchg   ax,ax
c000eaff:	90                   	nop

c000eb00 <KeDisplayProgramFault(char const*)>:
c000eb00:	83 ec 0c             	sub    esp,0xc
c000eb03:	83 ec 0c             	sub    esp,0xc
c000eb06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb0a:	e8 57 84 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000eb0f:	83 c4 10             	add    esp,0x10
c000eb12:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000eb17:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb19:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eb1c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000eb22:	85 c0                	test   eax,eax
c000eb24:	74 22                	je     c000eb48 <KeDisplayProgramFault(char const*)+0x48>
c000eb26:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000eb2b:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb2d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eb30:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000eb36:	6a 04                	push   0x4
c000eb38:	6a 0f                	push   0xf
c000eb3a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eb3e:	50                   	push   eax
c000eb3f:	e8 16 3e 00 00       	call   c001295a <VgaText::puts(char const*, VgaColour, VgaColour)>
c000eb44:	83 c4 10             	add    esp,0x10
c000eb47:	90                   	nop
c000eb48:	90                   	nop
c000eb49:	83 c4 0c             	add    esp,0xc
c000eb4c:	c3                   	ret    
c000eb4d:	8d 76 00             	lea    esi,[esi+0x0]

c000eb50 <KeGeneralProtectionFault(void*, void*)>:
c000eb50:	83 ec 0c             	sub    esp,0xc
c000eb53:	83 ec 08             	sub    esp,0x8
c000eb56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb5e:	e8 4a b8 00 00       	call   c001a3ad <HalHandleGeneralProtectionFault(void*, void*)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	0f b6 c0             	movzx  eax,al
c000eb69:	85 c0                	test   eax,eax
c000eb6b:	75 2f                	jne    c000eb9c <KeGeneralProtectionFault(void*, void*)+0x4c>
c000eb6d:	83 ec 0c             	sub    esp,0xc
c000eb70:	68 c4 8b 02 c0       	push   0xc0028bc4
c000eb75:	e8 86 ff ff ff       	call   c000eb00 <KeDisplayProgramFault(char const*)>
c000eb7a:	83 c4 10             	add    esp,0x10
c000eb7d:	83 ec 0c             	sub    esp,0xc
c000eb80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb84:	e8 9d b9 00 00       	call   c001a526 <HalDisplayDebugInfo(void*)>
c000eb89:	83 c4 10             	add    esp,0x10
c000eb8c:	83 ec 0c             	sub    esp,0xc
c000eb8f:	6a 7e                	push   0x7e
c000eb91:	e8 92 87 00 00       	call   c0017328 <KeTerminateCurrentThread(int)>
c000eb96:	83 c4 10             	add    esp,0x10
c000eb99:	eb 05                	jmp    c000eba0 <KeGeneralProtectionFault(void*, void*)+0x50>
c000eb9b:	90                   	nop
c000eb9c:	90                   	nop
c000eb9d:	8d 76 00             	lea    esi,[esi+0x0]
c000eba0:	83 c4 0c             	add    esp,0xc
c000eba3:	c3                   	ret    

c000eba4 <KePageFault(void*, void*)>:
c000eba4:	83 ec 0c             	sub    esp,0xc
c000eba7:	83 ec 08             	sub    esp,0x8
c000ebaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebb2:	e8 fe b8 00 00       	call   c001a4b5 <HalHandlePageFault(void*, void*)>
c000ebb7:	83 c4 10             	add    esp,0x10
c000ebba:	0f b6 c0             	movzx  eax,al
c000ebbd:	85 c0                	test   eax,eax
c000ebbf:	75 2f                	jne    c000ebf0 <KePageFault(void*, void*)+0x4c>
c000ebc1:	83 ec 0c             	sub    esp,0xc
c000ebc4:	68 dd 8b 02 c0       	push   0xc0028bdd
c000ebc9:	e8 32 ff ff ff       	call   c000eb00 <KeDisplayProgramFault(char const*)>
c000ebce:	83 c4 10             	add    esp,0x10
c000ebd1:	83 ec 0c             	sub    esp,0xc
c000ebd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebd8:	e8 49 b9 00 00       	call   c001a526 <HalDisplayDebugInfo(void*)>
c000ebdd:	83 c4 10             	add    esp,0x10
c000ebe0:	83 ec 0c             	sub    esp,0xc
c000ebe3:	6a 7f                	push   0x7f
c000ebe5:	e8 3e 87 00 00       	call   c0017328 <KeTerminateCurrentThread(int)>
c000ebea:	83 c4 10             	add    esp,0x10
c000ebed:	eb 05                	jmp    c000ebf4 <KePageFault(void*, void*)+0x50>
c000ebef:	90                   	nop
c000ebf0:	90                   	nop
c000ebf1:	8d 76 00             	lea    esi,[esi+0x0]
c000ebf4:	83 c4 0c             	add    esp,0xc
c000ebf7:	c3                   	ret    

c000ebf8 <KeOpcodeFault(void*, void*)>:
c000ebf8:	83 ec 0c             	sub    esp,0xc
c000ebfb:	83 ec 08             	sub    esp,0x8
c000ebfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec06:	e8 d9 b8 00 00       	call   c001a4e4 <HalHandleOpcodeFault(void*, void*)>
c000ec0b:	83 c4 10             	add    esp,0x10
c000ec0e:	0f b6 c0             	movzx  eax,al
c000ec11:	85 c0                	test   eax,eax
c000ec13:	75 2f                	jne    c000ec44 <KeOpcodeFault(void*, void*)+0x4c>
c000ec15:	83 ec 0c             	sub    esp,0xc
c000ec18:	68 e8 8b 02 c0       	push   0xc0028be8
c000ec1d:	e8 de fe ff ff       	call   c000eb00 <KeDisplayProgramFault(char const*)>
c000ec22:	83 c4 10             	add    esp,0x10
c000ec25:	83 ec 0c             	sub    esp,0xc
c000ec28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec2c:	e8 f5 b8 00 00       	call   c001a526 <HalDisplayDebugInfo(void*)>
c000ec31:	83 c4 10             	add    esp,0x10
c000ec34:	83 ec 0c             	sub    esp,0xc
c000ec37:	6a 7c                	push   0x7c
c000ec39:	e8 ea 86 00 00       	call   c0017328 <KeTerminateCurrentThread(int)>
c000ec3e:	83 c4 10             	add    esp,0x10
c000ec41:	eb 05                	jmp    c000ec48 <KeOpcodeFault(void*, void*)+0x50>
c000ec43:	90                   	nop
c000ec44:	90                   	nop
c000ec45:	8d 76 00             	lea    esi,[esi+0x0]
c000ec48:	83 c4 0c             	add    esp,0xc
c000ec4b:	c3                   	ret    

c000ec4c <KeOtherFault(void*, void*)>:
c000ec4c:	83 ec 0c             	sub    esp,0xc
c000ec4f:	83 ec 0c             	sub    esp,0xc
c000ec52:	68 04 8c 02 c0       	push   0xc0028c04
c000ec57:	e8 a4 fe ff ff       	call   c000eb00 <KeDisplayProgramFault(char const*)>
c000ec5c:	83 c4 10             	add    esp,0x10
c000ec5f:	83 ec 0c             	sub    esp,0xc
c000ec62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec66:	e8 bb b8 00 00       	call   c001a526 <HalDisplayDebugInfo(void*)>
c000ec6b:	83 c4 10             	add    esp,0x10
c000ec6e:	83 ec 0c             	sub    esp,0xc
c000ec71:	6a 7d                	push   0x7d
c000ec73:	e8 b0 86 00 00       	call   c0017328 <KeTerminateCurrentThread(int)>
c000ec78:	83 c4 10             	add    esp,0x10
c000ec7b:	90                   	nop
c000ec7c:	83 c4 0c             	add    esp,0xc
c000ec7f:	c3                   	ret    

c000ec80 <KeNonMaskableInterrupt(void*, void*)>:
c000ec80:	83 ec 0c             	sub    esp,0xc
c000ec83:	e8 2c bc 00 00       	call   c001a8b4 <HalReceivedNMI()>
c000ec88:	90                   	nop
c000ec89:	83 c4 0c             	add    esp,0xc
c000ec8c:	c3                   	ret    
c000ec8d:	8d 76 00             	lea    esi,[esi+0x0]

c000ec90 <KeDoubleFault(void*, void*)>:
c000ec90:	83 ec 0c             	sub    esp,0xc
c000ec93:	83 ec 0c             	sub    esp,0xc
c000ec96:	68 f5 8b 02 c0       	push   0xc0028bf5
c000ec9b:	e8 0c 13 00 00       	call   c000ffac <KePanic(char const*)>
c000eca0:	83 c4 10             	add    esp,0x10
c000eca3:	90                   	nop
c000eca4:	83 c4 0c             	add    esp,0xc
c000eca7:	c3                   	ret    

c000eca8 <GDTEntry::setBase(unsigned int)>:
c000eca8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ecb0:	89 c1                	mov    ecx,eax
c000ecb2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ecb6:	c1 e9 10             	shr    ecx,0x10
c000ecb9:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ecbc:	c1 e8 18             	shr    eax,0x18
c000ecbf:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ecc2:	c3                   	ret    
c000ecc3:	90                   	nop

c000ecc4 <GDTEntry::setLimit(unsigned int)>:
c000ecc4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ecc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eccc:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000eccf:	66 89 01             	mov    WORD PTR [ecx],ax
c000ecd2:	c1 e8 10             	shr    eax,0x10
c000ecd5:	83 e0 0f             	and    eax,0xf
c000ecd8:	83 e2 f0             	and    edx,0xfffffff0
c000ecdb:	09 d0                	or     eax,edx
c000ecdd:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ece0:	c3                   	ret    
c000ece1:	90                   	nop

c000ece2 <GDT::GDT()>:
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ecec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecf0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ecf6:	90                   	nop
c000ecf7:	c3                   	ret    

c000ecf8 <GDT::addEntry(GDTEntry)>:
c000ecf8:	53                   	push   ebx
c000ecf9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ecfd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ed01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ed05:	8b 02                	mov    eax,DWORD PTR [edx]
c000ed07:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000ed0b:	8d 48 01             	lea    ecx,[eax+0x1]
c000ed0e:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000ed12:	c1 e0 03             	shl    eax,0x3
c000ed15:	89 0a                	mov    DWORD PTR [edx],ecx
c000ed17:	5b                   	pop    ebx
c000ed18:	c3                   	ret    
c000ed19:	90                   	nop

c000ed1a <GDT::getNumberOfEntries()>:
c000ed1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed1e:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed20:	c3                   	ret    
c000ed21:	90                   	nop

c000ed22 <GDT::flush()>:
c000ed22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed26:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed28:	83 c0 04             	add    eax,0x4
c000ed2b:	a3 1a 21 03 c0       	mov    ds:0xc003211a,eax
c000ed30:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ed37:	66 89 15 18 21 03 c0 	mov    WORD PTR ds:0xc0032118,dx
c000ed3e:	e9 17 16 ff ff       	jmp    c000035a <loadGDT>
c000ed43:	90                   	nop

c000ed44 <GDT::setup()>:
c000ed44:	57                   	push   edi
c000ed45:	56                   	push   esi
c000ed46:	53                   	push   ebx
c000ed47:	83 ec 30             	sub    esp,0x30
c000ed4a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ed4e:	6a 00                	push   0x0
c000ed50:	8d 74 24 14          	lea    esi,[esp+0x14]
c000ed54:	56                   	push   esi
c000ed55:	e8 4e ff ff ff       	call   c000eca8 <GDTEntry::setBase(unsigned int)>
c000ed5a:	6a 00                	push   0x0
c000ed5c:	56                   	push   esi
c000ed5d:	e8 62 ff ff ff       	call   c000ecc4 <GDTEntry::setLimit(unsigned int)>
c000ed62:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000ed6a:	6a 00                	push   0x0
c000ed6c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000ed70:	56                   	push   esi
c000ed71:	e8 32 ff ff ff       	call   c000eca8 <GDTEntry::setBase(unsigned int)>
c000ed76:	68 ff ff ff 00       	push   0xffffff
c000ed7b:	56                   	push   esi
c000ed7c:	e8 43 ff ff ff       	call   c000ecc4 <GDTEntry::setLimit(unsigned int)>
c000ed81:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ed85:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ed89:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ed8e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000ed92:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ed97:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ed9b:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000ed9f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eda3:	89 f8                	mov    eax,edi
c000eda5:	89 fa                	mov    edx,edi
c000eda7:	80 e4 f7             	and    ah,0xf7
c000edaa:	80 ce 60             	or     dh,0x60
c000edad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000edb1:	89 c7                	mov    edi,eax
c000edb3:	80 cc 60             	or     ah,0x60
c000edb6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000edba:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000edbe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000edc2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000edc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000edca:	83 c4 20             	add    esp,0x20
c000edcd:	6a 00                	push   0x0
c000edcf:	8d 44 24 24          	lea    eax,[esp+0x24]
c000edd3:	50                   	push   eax
c000edd4:	e8 cf fe ff ff       	call   c000eca8 <GDTEntry::setBase(unsigned int)>
c000edd9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000eddd:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000ede1:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000ede5:	83 e0 3f             	and    eax,0x3f
c000ede8:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000edec:	6a 00                	push   0x0
c000edee:	8d 44 24 34          	lea    eax,[esp+0x34]
c000edf2:	50                   	push   eax
c000edf3:	e8 b0 fe ff ff       	call   c000eca8 <GDTEntry::setBase(unsigned int)>
c000edf8:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000edfc:	83 e0 3f             	and    eax,0x3f
c000edff:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000ee03:	83 c4 0c             	add    esp,0xc
c000ee06:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ee0a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ee0e:	53                   	push   ebx
c000ee0f:	e8 e4 fe ff ff       	call   c000ecf8 <GDT::addEntry(GDTEntry)>
c000ee14:	83 c4 0c             	add    esp,0xc
c000ee17:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee1b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee1f:	53                   	push   ebx
c000ee20:	e8 d3 fe ff ff       	call   c000ecf8 <GDT::addEntry(GDTEntry)>
c000ee25:	83 c4 0c             	add    esp,0xc
c000ee28:	57                   	push   edi
c000ee29:	56                   	push   esi
c000ee2a:	53                   	push   ebx
c000ee2b:	e8 c8 fe ff ff       	call   c000ecf8 <GDT::addEntry(GDTEntry)>
c000ee30:	83 c4 0c             	add    esp,0xc
c000ee33:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ee37:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ee3b:	53                   	push   ebx
c000ee3c:	e8 b7 fe ff ff       	call   c000ecf8 <GDT::addEntry(GDTEntry)>
c000ee41:	83 c4 0c             	add    esp,0xc
c000ee44:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ee48:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ee4c:	53                   	push   ebx
c000ee4d:	e8 a6 fe ff ff       	call   c000ecf8 <GDT::addEntry(GDTEntry)>
c000ee52:	83 c4 0c             	add    esp,0xc
c000ee55:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee59:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee5d:	53                   	push   ebx
c000ee5e:	e8 95 fe ff ff       	call   c000ecf8 <GDT::addEntry(GDTEntry)>
c000ee63:	83 c4 0c             	add    esp,0xc
c000ee66:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee6a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee6e:	53                   	push   ebx
c000ee6f:	e8 84 fe ff ff       	call   c000ecf8 <GDT::addEntry(GDTEntry)>
c000ee74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee77:	e8 a6 fe ff ff       	call   c000ed22 <GDT::flush()>
c000ee7c:	83 c4 40             	add    esp,0x40
c000ee7f:	5b                   	pop    ebx
c000ee80:	5e                   	pop    esi
c000ee81:	5f                   	pop    edi
c000ee82:	c3                   	ret    

c000ee83 <idleFunction(void*)>:
c000ee83:	83 ec 0c             	sub    esp,0xc
c000ee86:	f0 ff 0d 30 23 03 c0 	lock dec DWORD PTR ds:0xc0032330
c000ee8d:	83 3d 30 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032330,0x0
c000ee94:	75 01                	jne    c000ee97 <idleFunction(void*)+0x14>
c000ee96:	fb                   	sti    
c000ee97:	e8 b3 ba 00 00       	call   c001a94f <HalSystemIdle()>
c000ee9c:	e8 79 7e 01 00       	call   c0026d1a <idleCommon()>
c000eea1:	eb f4                	jmp    c000ee97 <idleFunction(void*)+0x14>
c000eea3:	90                   	nop

c000eea4 <IDTEntry::IDTEntry(bool)>:
c000eea4:	53                   	push   ebx
c000eea5:	83 ec 04             	sub    esp,0x4
c000eea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eeac:	88 04 24             	mov    BYTE PTR [esp],al
c000eeaf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eeb3:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eeb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eebd:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eec1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eec5:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eec8:	83 e2 f0             	and    edx,0xfffffff0
c000eecb:	83 ca 0e             	or     edx,0xe
c000eece:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eed5:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eed8:	83 e2 ef             	and    edx,0xffffffef
c000eedb:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eede:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000eee2:	85 c0                	test   eax,eax
c000eee4:	74 06                	je     c000eeec <IDTEntry::IDTEntry(bool)+0x48>
c000eee6:	b2 03                	mov    dl,0x3
c000eee8:	eb 06                	jmp    c000eef0 <IDTEntry::IDTEntry(bool)+0x4c>
c000eeea:	66 90                	xchg   ax,ax
c000eeec:	b2 00                	mov    dl,0x0
c000eeee:	66 90                	xchg   ax,ax
c000eef0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eef4:	83 e2 03             	and    edx,0x3
c000eef7:	89 d3                	mov    ebx,edx
c000eef9:	c1 e3 05             	shl    ebx,0x5
c000eefc:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeff:	83 e2 9f             	and    edx,0xffffff9f
c000ef02:	88 d1                	mov    cl,dl
c000ef04:	88 da                	mov    dl,bl
c000ef06:	09 ca                	or     edx,ecx
c000ef08:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef0f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef12:	83 ca 80             	or     edx,0xffffff80
c000ef15:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef18:	90                   	nop
c000ef19:	83 c4 04             	add    esp,0x4
c000ef1c:	5b                   	pop    ebx
c000ef1d:	c3                   	ret    

c000ef1e <IDTEntry::setOffset(unsigned int)>:
c000ef1e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ef22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef26:	66 89 02             	mov    WORD PTR [edx],ax
c000ef29:	c1 e8 10             	shr    eax,0x10
c000ef2c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ef30:	c3                   	ret    
c000ef31:	90                   	nop
c000ef32:	66 90                	xchg   ax,ax

c000ef34 <IDT::IDT()>:
c000ef34:	90                   	nop
c000ef35:	c3                   	ret    

c000ef36 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ef36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef3a:	83 c0 30             	add    eax,0x30
c000ef3d:	c3                   	ret    

c000ef3e <IDT::addEntry(IDTEntry, int)>:
c000ef3e:	53                   	push   ebx
c000ef3f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef43:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ef47:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef4b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef4f:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ef52:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ef56:	5b                   	pop    ebx
c000ef57:	c3                   	ret    

c000ef58 <IDT::addEntry(int, void (*)(), bool)>:
c000ef58:	53                   	push   ebx
c000ef59:	83 ec 10             	sub    esp,0x10
c000ef5c:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ef61:	50                   	push   eax
c000ef62:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ef66:	53                   	push   ebx
c000ef67:	e8 38 ff ff ff       	call   c000eea4 <IDTEntry::IDTEntry(bool)>
c000ef6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef70:	53                   	push   ebx
c000ef71:	e8 a8 ff ff ff       	call   c000ef1e <IDTEntry::setOffset(unsigned int)>
c000ef76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef7a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef7e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef82:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ef86:	e8 b3 ff ff ff       	call   c000ef3e <IDT::addEntry(IDTEntry, int)>
c000ef8b:	83 c4 30             	add    esp,0x30
c000ef8e:	5b                   	pop    ebx
c000ef8f:	c3                   	ret    

c000ef90 <IDT::flush()>:
c000ef90:	66 c7 05 20 21 03 c0 ff 07 	mov    WORD PTR ds:0xc0032120,0x7ff
c000ef99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef9d:	a3 22 21 03 c0       	mov    ds:0xc0032122,eax
c000efa2:	0f 01 1d 20 21 03 c0 	lidtd  ds:0xc0032120
c000efa9:	c3                   	ret    

c000efaa <IDT::setup()>:
c000efaa:	57                   	push   edi
c000efab:	56                   	push   esi
c000efac:	53                   	push   ebx
c000efad:	83 ec 10             	sub    esp,0x10
c000efb0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000efb4:	6a 00                	push   0x0
c000efb6:	68 80 1b 02 c0       	push   0xc0021b80
c000efbb:	6a 00                	push   0x0
c000efbd:	53                   	push   ebx
c000efbe:	e8 95 ff ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000efc3:	6a 00                	push   0x0
c000efc5:	68 90 1b 02 c0       	push   0xc0021b90
c000efca:	6a 01                	push   0x1
c000efcc:	53                   	push   ebx
c000efcd:	e8 86 ff ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000efd2:	83 c4 20             	add    esp,0x20
c000efd5:	6a 00                	push   0x0
c000efd7:	68 9a 1b 02 c0       	push   0xc0021b9a
c000efdc:	6a 02                	push   0x2
c000efde:	53                   	push   ebx
c000efdf:	e8 74 ff ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000efe4:	6a 00                	push   0x0
c000efe6:	68 a4 1b 02 c0       	push   0xc0021ba4
c000efeb:	6a 03                	push   0x3
c000efed:	53                   	push   ebx
c000efee:	e8 65 ff ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000eff3:	83 c4 20             	add    esp,0x20
c000eff6:	6a 00                	push   0x0
c000eff8:	68 ae 1b 02 c0       	push   0xc0021bae
c000effd:	6a 04                	push   0x4
c000efff:	53                   	push   ebx
c000f000:	e8 53 ff ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f005:	6a 00                	push   0x0
c000f007:	68 b8 1b 02 c0       	push   0xc0021bb8
c000f00c:	6a 05                	push   0x5
c000f00e:	53                   	push   ebx
c000f00f:	e8 44 ff ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f014:	83 c4 20             	add    esp,0x20
c000f017:	6a 00                	push   0x0
c000f019:	68 c2 1b 02 c0       	push   0xc0021bc2
c000f01e:	6a 06                	push   0x6
c000f020:	53                   	push   ebx
c000f021:	e8 32 ff ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f026:	6a 00                	push   0x0
c000f028:	68 cc 1b 02 c0       	push   0xc0021bcc
c000f02d:	6a 07                	push   0x7
c000f02f:	53                   	push   ebx
c000f030:	e8 23 ff ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f035:	83 c4 20             	add    esp,0x20
c000f038:	6a 00                	push   0x0
c000f03a:	68 d6 1b 02 c0       	push   0xc0021bd6
c000f03f:	6a 08                	push   0x8
c000f041:	53                   	push   ebx
c000f042:	e8 11 ff ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f047:	6a 00                	push   0x0
c000f049:	68 de 1b 02 c0       	push   0xc0021bde
c000f04e:	6a 09                	push   0x9
c000f050:	53                   	push   ebx
c000f051:	e8 02 ff ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f056:	83 c4 20             	add    esp,0x20
c000f059:	6a 00                	push   0x0
c000f05b:	68 e8 1b 02 c0       	push   0xc0021be8
c000f060:	6a 0a                	push   0xa
c000f062:	53                   	push   ebx
c000f063:	e8 f0 fe ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f068:	6a 00                	push   0x0
c000f06a:	68 f0 1b 02 c0       	push   0xc0021bf0
c000f06f:	6a 0b                	push   0xb
c000f071:	53                   	push   ebx
c000f072:	e8 e1 fe ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f077:	83 c4 20             	add    esp,0x20
c000f07a:	6a 00                	push   0x0
c000f07c:	68 f8 1b 02 c0       	push   0xc0021bf8
c000f081:	6a 0c                	push   0xc
c000f083:	53                   	push   ebx
c000f084:	e8 cf fe ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f089:	6a 00                	push   0x0
c000f08b:	68 00 1c 02 c0       	push   0xc0021c00
c000f090:	6a 0d                	push   0xd
c000f092:	53                   	push   ebx
c000f093:	e8 c0 fe ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f098:	83 c4 20             	add    esp,0x20
c000f09b:	6a 00                	push   0x0
c000f09d:	68 1a 1c 02 c0       	push   0xc0021c1a
c000f0a2:	6a 0e                	push   0xe
c000f0a4:	53                   	push   ebx
c000f0a5:	e8 ae fe ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f0aa:	6a 00                	push   0x0
c000f0ac:	68 22 1c 02 c0       	push   0xc0021c22
c000f0b1:	6a 0f                	push   0xf
c000f0b3:	53                   	push   ebx
c000f0b4:	e8 9f fe ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f0b9:	83 c4 20             	add    esp,0x20
c000f0bc:	6a 00                	push   0x0
c000f0be:	68 2c 1c 02 c0       	push   0xc0021c2c
c000f0c3:	6a 10                	push   0x10
c000f0c5:	53                   	push   ebx
c000f0c6:	e8 8d fe ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f0cb:	6a 00                	push   0x0
c000f0cd:	68 36 1c 02 c0       	push   0xc0021c36
c000f0d2:	6a 11                	push   0x11
c000f0d4:	53                   	push   ebx
c000f0d5:	e8 7e fe ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f0da:	83 c4 20             	add    esp,0x20
c000f0dd:	6a 00                	push   0x0
c000f0df:	68 40 1c 02 c0       	push   0xc0021c40
c000f0e4:	6a 12                	push   0x12
c000f0e6:	53                   	push   ebx
c000f0e7:	e8 6c fe ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f0ec:	6a 01                	push   0x1
c000f0ee:	68 da 1c 02 c0       	push   0xc0021cda
c000f0f3:	6a 60                	push   0x60
c000f0f5:	53                   	push   ebx
c000f0f6:	e8 5d fe ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f0fb:	83 c4 20             	add    esp,0x20
c000f0fe:	6a 00                	push   0x0
c000f100:	68 e1 1c 02 c0       	push   0xc0021ce1
c000f105:	6a 20                	push   0x20
c000f107:	53                   	push   ebx
c000f108:	e8 4b fe ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f10d:	6a 00                	push   0x0
c000f10f:	68 cc 1c 02 c0       	push   0xc0021ccc
c000f114:	6a 21                	push   0x21
c000f116:	53                   	push   ebx
c000f117:	e8 3c fe ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f11c:	83 c4 20             	add    esp,0x20
c000f11f:	6a 00                	push   0x0
c000f121:	68 d3 1c 02 c0       	push   0xc0021cd3
c000f126:	6a 22                	push   0x22
c000f128:	53                   	push   ebx
c000f129:	e8 2a fe ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f12e:	6a 00                	push   0x0
c000f130:	68 4a 1c 02 c0       	push   0xc0021c4a
c000f135:	6a 23                	push   0x23
c000f137:	53                   	push   ebx
c000f138:	e8 1b fe ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f13d:	83 c4 20             	add    esp,0x20
c000f140:	6a 00                	push   0x0
c000f142:	68 54 1c 02 c0       	push   0xc0021c54
c000f147:	6a 24                	push   0x24
c000f149:	53                   	push   ebx
c000f14a:	e8 09 fe ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f14f:	6a 00                	push   0x0
c000f151:	68 5e 1c 02 c0       	push   0xc0021c5e
c000f156:	6a 25                	push   0x25
c000f158:	53                   	push   ebx
c000f159:	e8 fa fd ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f15e:	83 c4 20             	add    esp,0x20
c000f161:	6a 00                	push   0x0
c000f163:	68 68 1c 02 c0       	push   0xc0021c68
c000f168:	6a 26                	push   0x26
c000f16a:	53                   	push   ebx
c000f16b:	e8 e8 fd ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f170:	6a 00                	push   0x0
c000f172:	68 72 1c 02 c0       	push   0xc0021c72
c000f177:	6a 27                	push   0x27
c000f179:	53                   	push   ebx
c000f17a:	e8 d9 fd ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f17f:	83 c4 20             	add    esp,0x20
c000f182:	6a 00                	push   0x0
c000f184:	68 7c 1c 02 c0       	push   0xc0021c7c
c000f189:	6a 28                	push   0x28
c000f18b:	53                   	push   ebx
c000f18c:	e8 c7 fd ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f191:	6a 00                	push   0x0
c000f193:	68 86 1c 02 c0       	push   0xc0021c86
c000f198:	6a 29                	push   0x29
c000f19a:	53                   	push   ebx
c000f19b:	e8 b8 fd ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f1a0:	83 c4 20             	add    esp,0x20
c000f1a3:	6a 00                	push   0x0
c000f1a5:	68 90 1c 02 c0       	push   0xc0021c90
c000f1aa:	6a 2a                	push   0x2a
c000f1ac:	53                   	push   ebx
c000f1ad:	e8 a6 fd ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f1b2:	6a 00                	push   0x0
c000f1b4:	68 9a 1c 02 c0       	push   0xc0021c9a
c000f1b9:	6a 2b                	push   0x2b
c000f1bb:	53                   	push   ebx
c000f1bc:	e8 97 fd ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f1c1:	83 c4 20             	add    esp,0x20
c000f1c4:	6a 00                	push   0x0
c000f1c6:	68 a4 1c 02 c0       	push   0xc0021ca4
c000f1cb:	6a 2c                	push   0x2c
c000f1cd:	53                   	push   ebx
c000f1ce:	e8 85 fd ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f1d3:	6a 00                	push   0x0
c000f1d5:	68 ae 1c 02 c0       	push   0xc0021cae
c000f1da:	6a 2d                	push   0x2d
c000f1dc:	53                   	push   ebx
c000f1dd:	e8 76 fd ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f1e2:	83 c4 20             	add    esp,0x20
c000f1e5:	6a 00                	push   0x0
c000f1e7:	68 b8 1c 02 c0       	push   0xc0021cb8
c000f1ec:	6a 2e                	push   0x2e
c000f1ee:	53                   	push   ebx
c000f1ef:	e8 64 fd ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f1f4:	6a 00                	push   0x0
c000f1f6:	68 c2 1c 02 c0       	push   0xc0021cc2
c000f1fb:	6a 2f                	push   0x2f
c000f1fd:	53                   	push   ebx
c000f1fe:	e8 55 fd ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f203:	83 c4 20             	add    esp,0x20
c000f206:	6a 00                	push   0x0
c000f208:	68 e8 1d 02 c0       	push   0xc0021de8
c000f20d:	6a 30                	push   0x30
c000f20f:	53                   	push   ebx
c000f210:	e8 43 fd ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f215:	6a 00                	push   0x0
c000f217:	68 f2 1d 02 c0       	push   0xc0021df2
c000f21c:	6a 31                	push   0x31
c000f21e:	53                   	push   ebx
c000f21f:	e8 34 fd ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f224:	83 c4 20             	add    esp,0x20
c000f227:	6a 00                	push   0x0
c000f229:	68 fc 1d 02 c0       	push   0xc0021dfc
c000f22e:	6a 32                	push   0x32
c000f230:	53                   	push   ebx
c000f231:	e8 22 fd ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f236:	6a 00                	push   0x0
c000f238:	68 06 1e 02 c0       	push   0xc0021e06
c000f23d:	6a 33                	push   0x33
c000f23f:	53                   	push   ebx
c000f240:	e8 13 fd ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f245:	83 c4 20             	add    esp,0x20
c000f248:	6a 00                	push   0x0
c000f24a:	68 10 1e 02 c0       	push   0xc0021e10
c000f24f:	6a 34                	push   0x34
c000f251:	53                   	push   ebx
c000f252:	e8 01 fd ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f257:	6a 00                	push   0x0
c000f259:	68 1a 1e 02 c0       	push   0xc0021e1a
c000f25e:	6a 35                	push   0x35
c000f260:	53                   	push   ebx
c000f261:	e8 f2 fc ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f266:	83 c4 20             	add    esp,0x20
c000f269:	6a 00                	push   0x0
c000f26b:	68 24 1e 02 c0       	push   0xc0021e24
c000f270:	6a 36                	push   0x36
c000f272:	53                   	push   ebx
c000f273:	e8 e0 fc ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f278:	6a 00                	push   0x0
c000f27a:	68 2e 1e 02 c0       	push   0xc0021e2e
c000f27f:	6a 37                	push   0x37
c000f281:	53                   	push   ebx
c000f282:	e8 d1 fc ff ff       	call   c000ef58 <IDT::addEntry(int, void (*)(), bool)>
c000f287:	83 c4 1c             	add    esp,0x1c
c000f28a:	6a 03                	push   0x3
c000f28c:	6a 02                	push   0x2
c000f28e:	ff 35 90 22 03 c0    	push   DWORD PTR ds:0xc0032290
c000f294:	e8 3b 4a 00 00       	call   c0013cd4 <VAS::allocatePages(int, int)>
c000f299:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f2a0:	89 c6                	mov    esi,eax
c000f2a2:	e8 b1 08 00 00       	call   c000fb58 <malloc>
c000f2a7:	81 c6 00 20 00 00    	add    esi,0x2000
c000f2ad:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2b0:	89 c7                	mov    edi,eax
c000f2b2:	e8 ed 3a 00 00       	call   c0012da4 <TSS::TSS()>
c000f2b7:	83 c4 0c             	add    esp,0xc
c000f2ba:	68 d6 1b 02 c0       	push   0xc0021bd6
c000f2bf:	56                   	push   esi
c000f2c0:	57                   	push   edi
c000f2c1:	e8 22 3b 00 00       	call   c0012de8 <TSS::setup(unsigned long, unsigned long)>
c000f2c6:	89 c6                	mov    esi,eax
c000f2c8:	58                   	pop    eax
c000f2c9:	5a                   	pop    edx
c000f2ca:	6a 00                	push   0x0
c000f2cc:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f2d0:	50                   	push   eax
c000f2d1:	e8 ce fb ff ff       	call   c000eea4 <IDTEntry::IDTEntry(bool)>
c000f2d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f2da:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f2df:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f2e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f2ea:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f2f0:	80 ce 05             	or     dh,0x5
c000f2f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f2f7:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f2fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f2fe:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f301:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f304:	e8 87 fc ff ff       	call   c000ef90 <IDT::flush()>
c000f309:	83 c4 20             	add    esp,0x20
c000f30c:	5b                   	pop    ebx
c000f30d:	5e                   	pop    esi
c000f30e:	5f                   	pop    edi
c000f30f:	c3                   	ret    

c000f310 <CPU::current()>:
c000f310:	a1 08 21 03 c0       	mov    eax,ds:0xc0032108
c000f315:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000f31b:	c3                   	ret    

c000f31c <operator new(unsigned long)>:
c000f31c:	e9 37 08 00 00       	jmp    c000fb58 <malloc>

c000f321 <operator delete(void*)>:
c000f321:	e9 52 08 00 00       	jmp    c000fb78 <rfree>

c000f326 <disableIRQs()>:
c000f326:	fa                   	cli    
c000f327:	c3                   	ret    

c000f328 <enableIRQs()>:
c000f328:	fb                   	sti    
c000f329:	c3                   	ret    

c000f32a <lockScheduler()>:
c000f32a:	fa                   	cli    
c000f32b:	ff 05 30 23 03 c0    	inc    DWORD PTR ds:0xc0032330
c000f331:	c3                   	ret    

c000f332 <unlockScheduler()>:
c000f332:	f0 ff 0d 30 23 03 c0 	lock dec DWORD PTR ds:0xc0032330
c000f339:	83 3d 30 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032330,0x0
c000f340:	75 01                	jne    c000f343 <unlockScheduler()+0x11>
c000f342:	fb                   	sti    
c000f343:	c3                   	ret    

c000f344 <lockStuff()>:
c000f344:	fa                   	cli    
c000f345:	ff 05 30 23 03 c0    	inc    DWORD PTR ds:0xc0032330
c000f34b:	ff 05 2c 23 03 c0    	inc    DWORD PTR ds:0xc003232c
c000f351:	c3                   	ret    

c000f352 <unlockStuff()>:
c000f352:	83 ec 0c             	sub    esp,0xc
c000f355:	a1 2c 23 03 c0       	mov    eax,ds:0xc003232c
c000f35a:	48                   	dec    eax
c000f35b:	a3 2c 23 03 c0       	mov    ds:0xc003232c,eax
c000f360:	75 18                	jne    c000f37a <unlockStuff()+0x28>
c000f362:	83 3d 28 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032328,0x0
c000f369:	74 0f                	je     c000f37a <unlockStuff()+0x28>
c000f36b:	c7 05 28 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032328,0x0
c000f375:	e8 ba 77 00 00       	call   c0016b34 <schedule()>
c000f37a:	f0 ff 0d 30 23 03 c0 	lock dec DWORD PTR ds:0xc0032330
c000f381:	83 3d 30 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032330,0x0
c000f388:	75 01                	jne    c000f38b <unlockStuff()+0x39>
c000f38a:	fb                   	sti    
c000f38b:	83 c4 0c             	add    esp,0xc
c000f38e:	c3                   	ret    

c000f38f <Virt::getAKernelVAS()>:
c000f38f:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c000f394:	c3                   	ret    

c000f395 <__not_memcpy>:
c000f395:	57                   	push   edi
c000f396:	56                   	push   esi
c000f397:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f39b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f39f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f3a3:	89 c7                	mov    edi,eax
c000f3a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f3a7:	5e                   	pop    esi
c000f3a8:	5f                   	pop    edi
c000f3a9:	c3                   	ret    

c000f3aa <KeFormatDate(char*, int, int, int, int, bool)>:
c000f3aa:	55                   	push   ebp
c000f3ab:	57                   	push   edi
c000f3ac:	56                   	push   esi
c000f3ad:	be e8 03 00 00       	mov    esi,0x3e8
c000f3b2:	53                   	push   ebx
c000f3b3:	bb 0a 00 00 00       	mov    ebx,0xa
c000f3b8:	81 ec ac 00 00 00    	sub    esp,0xac
c000f3be:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000f3c3:	8b 8c 24 d0 00 00 00 	mov    ecx,DWORD PTR [esp+0xd0]
c000f3ca:	89 c8                	mov    eax,ecx
c000f3cc:	99                   	cdq    
c000f3cd:	f7 fb                	idiv   ebx
c000f3cf:	89 d5                	mov    ebp,edx
c000f3d1:	99                   	cdq    
c000f3d2:	f7 fb                	idiv   ebx
c000f3d4:	8d 42 30             	lea    eax,[edx+0x30]
c000f3d7:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f3db:	8d 45 30             	lea    eax,[ebp+0x30]
c000f3de:	0f b6 ac 24 d4 00 00 00 	movzx  ebp,BYTE PTR [esp+0xd4]
c000f3e6:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000f3ea:	89 c8                	mov    eax,ecx
c000f3ec:	99                   	cdq    
c000f3ed:	f7 fe                	idiv   esi
c000f3ef:	be 64 00 00 00       	mov    esi,0x64
c000f3f4:	99                   	cdq    
c000f3f5:	f7 fb                	idiv   ebx
c000f3f7:	8d 42 30             	lea    eax,[edx+0x30]
c000f3fa:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000f3fe:	89 c8                	mov    eax,ecx
c000f400:	99                   	cdq    
c000f401:	f7 fe                	idiv   esi
c000f403:	99                   	cdq    
c000f404:	f7 fb                	idiv   ebx
c000f406:	31 db                	xor    ebx,ebx
c000f408:	8d 42 30             	lea    eax,[edx+0x30]
c000f40b:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000f40f:	0f be 8b 44 21 03 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffcdebc]
c000f416:	83 f9 59             	cmp    ecx,0x59
c000f419:	0f 84 1f 01 00 00    	je     c000f53e <KeFormatDate(char*, int, int, int, int, bool)+0x194>
c000f41f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000f423:	8b 94 24 c8 00 00 00 	mov    edx,DWORD PTR [esp+0xc8]
c000f42a:	83 f9 4d             	cmp    ecx,0x4d
c000f42d:	0f 44 94 24 cc 00 00 00 	cmove  edx,DWORD PTR [esp+0xcc]
c000f435:	57                   	push   edi
c000f436:	57                   	push   edi
c000f437:	89 d7                	mov    edi,edx
c000f439:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f43d:	c1 ff 1f             	sar    edi,0x1f
c000f440:	57                   	push   edi
c000f441:	52                   	push   edx
c000f442:	e8 6d 04 00 00       	call   c000f8b4 <KeGetDigitsInNumber(long long)>
c000f447:	83 c4 10             	add    esp,0x10
c000f44a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f44e:	48                   	dec    eax
c000f44f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f453:	75 1c                	jne    c000f471 <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000f455:	83 f9 44             	cmp    ecx,0x44
c000f458:	75 09                	jne    c000f463 <KeFormatDate(char*, int, int, int, int, bool)+0xb9>
c000f45a:	80 3d 60 21 03 c0 00 	cmp    BYTE PTR ds:0xc0032160,0x0
c000f461:	eb 0c                	jmp    c000f46f <KeFormatDate(char*, int, int, int, int, bool)+0xc5>
c000f463:	83 f9 4d             	cmp    ecx,0x4d
c000f466:	75 60                	jne    c000f4c8 <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000f468:	80 3d 61 21 03 c0 00 	cmp    BYTE PTR ds:0xc0032161,0x0
c000f46f:	74 57                	je     c000f4c8 <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000f471:	89 d0                	mov    eax,edx
c000f473:	b9 0a 00 00 00       	mov    ecx,0xa
c000f478:	99                   	cdq    
c000f479:	f7 f9                	idiv   ecx
c000f47b:	89 d6                	mov    esi,edx
c000f47d:	99                   	cdq    
c000f47e:	f7 f9                	idiv   ecx
c000f480:	83 c2 30             	add    edx,0x30
c000f483:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f487:	8d 56 30             	lea    edx,[esi+0x30]
c000f48a:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000f48e:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000f493:	56                   	push   esi
c000f494:	56                   	push   esi
c000f495:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000f499:	57                   	push   edi
c000f49a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f49e:	56                   	push   esi
c000f49f:	e8 cc 13 ff ff       	call   c0000870 <strcat>
c000f4a4:	83 c4 10             	add    esp,0x10
c000f4a7:	83 fb 02             	cmp    ebx,0x2
c000f4aa:	74 34                	je     c000f4e0 <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000f4ac:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f4b1:	a0 48 21 03 c0       	mov    al,ds:0xc0032148
c000f4b6:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f4ba:	51                   	push   ecx
c000f4bb:	51                   	push   ecx
c000f4bc:	57                   	push   edi
c000f4bd:	56                   	push   esi
c000f4be:	e8 ad 13 ff ff       	call   c0000870 <strcat>
c000f4c3:	83 c4 10             	add    esp,0x10
c000f4c6:	eb 18                	jmp    c000f4e0 <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000f4c8:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f4cd:	89 d0                	mov    eax,edx
c000f4cf:	b9 0a 00 00 00       	mov    ecx,0xa
c000f4d4:	99                   	cdq    
c000f4d5:	f7 f9                	idiv   ecx
c000f4d7:	83 c2 30             	add    edx,0x30
c000f4da:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f4de:	eb b3                	jmp    c000f493 <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000f4e0:	43                   	inc    ebx
c000f4e1:	83 fb 03             	cmp    ebx,0x3
c000f4e4:	0f 85 25 ff ff ff    	jne    c000f40f <KeFormatDate(char*, int, int, int, int, bool)+0x65>
c000f4ea:	52                   	push   edx
c000f4eb:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000f4f2:	6a 00                	push   0x0
c000f4f4:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f4fb:	e8 f0 0f ff ff       	call   c00004f0 <memset>
c000f500:	89 34 24             	mov    DWORD PTR [esp],esi
c000f503:	e8 78 10 ff ff       	call   c0000580 <strlen>
c000f508:	83 c4 10             	add    esp,0x10
c000f50b:	40                   	inc    eax
c000f50c:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000f513:	72 14                	jb     c000f529 <KeFormatDate(char*, int, int, int, int, bool)+0x17f>
c000f515:	50                   	push   eax
c000f516:	50                   	push   eax
c000f517:	56                   	push   esi
c000f518:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f51f:	e8 2c 11 ff ff       	call   c0000650 <strcpy>
c000f524:	83 c4 10             	add    esp,0x10
c000f527:	eb 58                	jmp    c000f581 <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000f529:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000f530:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000f537:	8d 48 ff             	lea    ecx,[eax-0x1]
c000f53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f53c:	eb 43                	jmp    c000f581 <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000f53e:	85 ed                	test   ebp,ebp
c000f540:	74 2a                	je     c000f56c <KeFormatDate(char*, int, int, int, int, bool)+0x1c2>
c000f542:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f547:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000f54b:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f54f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f553:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f557:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f55b:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000f55f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f563:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f567:	e9 27 ff ff ff       	jmp    c000f493 <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000f56c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f570:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f574:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f578:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f57c:	e9 0d ff ff ff       	jmp    c000f48e <KeFormatDate(char*, int, int, int, int, bool)+0xe4>
c000f581:	81 c4 ac 00 00 00    	add    esp,0xac
c000f587:	5b                   	pop    ebx
c000f588:	5e                   	pop    esi
c000f589:	5f                   	pop    edi
c000f58a:	5d                   	pop    ebp
c000f58b:	c3                   	ret    

c000f58c <KeFormatShortDate(char*, int, int, int, int)>:
c000f58c:	83 ec 14             	sub    esp,0x14
c000f58f:	6a 00                	push   0x0
c000f591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f599:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f59d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5a5:	e8 00 fe ff ff       	call   c000f3aa <KeFormatDate(char*, int, int, int, int, bool)>
c000f5aa:	83 c4 2c             	add    esp,0x2c
c000f5ad:	c3                   	ret    

c000f5ae <KeFormatLongDate(char*, int, int, int, int)>:
c000f5ae:	83 ec 14             	sub    esp,0x14
c000f5b1:	6a 01                	push   0x1
c000f5b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5c7:	e8 de fd ff ff       	call   c000f3aa <KeFormatDate(char*, int, int, int, int, bool)>
c000f5cc:	83 c4 2c             	add    esp,0x2c
c000f5cf:	c3                   	ret    

c000f5d0 <KeSetLocale(klocale_t)>:
c000f5d0:	57                   	push   edi
c000f5d1:	b9 09 00 00 00       	mov    ecx,0x9
c000f5d6:	56                   	push   esi
c000f5d7:	bf 40 21 03 c0       	mov    edi,0xc0032140
c000f5dc:	fc                   	cld    
c000f5dd:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f5e1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f5e3:	5e                   	pop    esi
c000f5e4:	5f                   	pop    edi
c000f5e5:	c3                   	ret    

c000f5e6 <KeInitialiseLocale()>:
c000f5e6:	57                   	push   edi
c000f5e7:	56                   	push   esi
c000f5e8:	83 ec 3c             	sub    esp,0x3c
c000f5eb:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000f5f3:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000f5fb:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000f603:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000f60b:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000f612:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000f61a:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000f622:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000f629:	68 2c 8c 02 c0       	push   0xc0028c2c
c000f62e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000f632:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f636:	50                   	push   eax
c000f637:	e8 14 10 ff ff       	call   c0000650 <strcpy>
c000f63c:	83 ec 20             	sub    esp,0x20
c000f63f:	b9 09 00 00 00       	mov    ecx,0x9
c000f644:	fc                   	cld    
c000f645:	89 e7                	mov    edi,esp
c000f647:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f649:	e8 82 ff ff ff       	call   c000f5d0 <KeSetLocale(klocale_t)>
c000f64e:	83 c4 64             	add    esp,0x64
c000f651:	5e                   	pop    esi
c000f652:	5f                   	pop    edi
c000f653:	c3                   	ret    

c000f654 <KeFormatCurrency(char*, int, long long, long long)>:
c000f654:	c3                   	ret    

c000f655 <KeFormatCurrency(char*, int, double)>:
c000f655:	c3                   	ret    

c000f656 <KeFormatNumber(char*, long long, long long)>:
c000f656:	c3                   	ret    

c000f657 <KeFormatNumber(char*, double)>:
c000f657:	c3                   	ret    

c000f658 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000f658:	55                   	push   ebp
c000f659:	57                   	push   edi
c000f65a:	56                   	push   esi
c000f65b:	53                   	push   ebx
c000f65c:	83 ec 4c             	sub    esp,0x4c
c000f65f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f663:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f667:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f66b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f66f:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000f677:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000f67f:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000f687:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000f68f:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f694:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000f698:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f69c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f6a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f6a4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f6a8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f6ac:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000f6b1:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f6b5:	89 c2                	mov    edx,eax
c000f6b7:	c1 fa 1f             	sar    edx,0x1f
c000f6ba:	52                   	push   edx
c000f6bb:	50                   	push   eax
c000f6bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f6c0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f6c4:	e8 0b 2b 01 00       	call   c00221d4 <__udivdi3>
c000f6c9:	83 c4 10             	add    esp,0x10
c000f6cc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f6d0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f6d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6d8:	80 f4 00             	xor    ah,0x0
c000f6db:	89 c7                	mov    edi,eax
c000f6dd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f6e1:	80 f4 00             	xor    ah,0x0
c000f6e4:	89 c5                	mov    ebp,eax
c000f6e6:	89 e8                	mov    eax,ebp
c000f6e8:	09 f8                	or     eax,edi
c000f6ea:	74 04                	je     c000f6f0 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x98>
c000f6ec:	eb be                	jmp    c000f6ac <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000f6ee:	66 90                	xchg   ax,ax
c000f6f0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f6f4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f6f7:	90                   	nop
c000f6f8:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f6fc:	89 c7                	mov    edi,eax
c000f6fe:	89 c5                	mov    ebp,eax
c000f700:	c1 fd 1f             	sar    ebp,0x1f
c000f703:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f707:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f70b:	55                   	push   ebp
c000f70c:	57                   	push   edi
c000f70d:	52                   	push   edx
c000f70e:	50                   	push   eax
c000f70f:	e8 c0 2b 01 00       	call   c00222d4 <__umoddi3>
c000f714:	83 c4 10             	add    esp,0x10
c000f717:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c000f71c:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c000f720:	01 c8                	add    eax,ecx
c000f722:	8a 10                	mov    dl,BYTE PTR [eax]
c000f724:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f728:	88 10                	mov    BYTE PTR [eax],dl
c000f72a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f72e:	89 c2                	mov    edx,eax
c000f730:	c1 fa 1f             	sar    edx,0x1f
c000f733:	52                   	push   edx
c000f734:	50                   	push   eax
c000f735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f73d:	e8 92 2a 01 00       	call   c00221d4 <__udivdi3>
c000f742:	83 c4 10             	add    esp,0x10
c000f745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f749:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f74d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f751:	80 f4 00             	xor    ah,0x0
c000f754:	89 c3                	mov    ebx,eax
c000f756:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f75a:	80 f4 00             	xor    ah,0x0
c000f75d:	89 c6                	mov    esi,eax
c000f75f:	89 f0                	mov    eax,esi
c000f761:	09 d8                	or     eax,ebx
c000f763:	74 03                	je     c000f768 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x110>
c000f765:	eb 91                	jmp    c000f6f8 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa0>
c000f767:	90                   	nop
c000f768:	90                   	nop
c000f769:	83 c4 4c             	add    esp,0x4c
c000f76c:	5b                   	pop    ebx
c000f76d:	5e                   	pop    esi
c000f76e:	5f                   	pop    edi
c000f76f:	5d                   	pop    ebp
c000f770:	c3                   	ret    
c000f771:	8d 76 00             	lea    esi,[esi+0x0]

c000f774 <KeBasedSignedIntegerToString(long long, char*, int)>:
c000f774:	55                   	push   ebp
c000f775:	57                   	push   edi
c000f776:	56                   	push   esi
c000f777:	53                   	push   ebx
c000f778:	83 ec 4c             	sub    esp,0x4c
c000f77b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f77f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f783:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f787:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f78b:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000f793:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000f79b:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000f7a3:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000f7ab:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f7b0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000f7b4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f7b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000f7bd:	79 1d                	jns    c000f7dc <KeBasedSignedIntegerToString(long long, char*, int)+0x68>
c000f7bf:	f7 5c 24 08          	neg    DWORD PTR [esp+0x8]
c000f7c3:	83 54 24 0c 00       	adc    DWORD PTR [esp+0xc],0x0
c000f7c8:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c000f7cc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f7d0:	8d 50 01             	lea    edx,[eax+0x1]
c000f7d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000f7d7:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000f7da:	66 90                	xchg   ax,ax
c000f7dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f7e4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f7e8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f7ec:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000f7f1:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f7f5:	89 c2                	mov    edx,eax
c000f7f7:	c1 fa 1f             	sar    edx,0x1f
c000f7fa:	52                   	push   edx
c000f7fb:	50                   	push   eax
c000f7fc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f800:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f804:	e8 cb 29 01 00       	call   c00221d4 <__udivdi3>
c000f809:	83 c4 10             	add    esp,0x10
c000f80c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f810:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f814:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f818:	80 f4 00             	xor    ah,0x0
c000f81b:	89 c7                	mov    edi,eax
c000f81d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f821:	80 f4 00             	xor    ah,0x0
c000f824:	89 c5                	mov    ebp,eax
c000f826:	89 e8                	mov    eax,ebp
c000f828:	09 f8                	or     eax,edi
c000f82a:	74 04                	je     c000f830 <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000f82c:	eb be                	jmp    c000f7ec <KeBasedSignedIntegerToString(long long, char*, int)+0x78>
c000f82e:	66 90                	xchg   ax,ax
c000f830:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f834:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f837:	90                   	nop
c000f838:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f83c:	89 c7                	mov    edi,eax
c000f83e:	89 c5                	mov    ebp,eax
c000f840:	c1 fd 1f             	sar    ebp,0x1f
c000f843:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f847:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f84b:	55                   	push   ebp
c000f84c:	57                   	push   edi
c000f84d:	52                   	push   edx
c000f84e:	50                   	push   eax
c000f84f:	e8 00 28 01 00       	call   c0022054 <__moddi3>
c000f854:	83 c4 10             	add    esp,0x10
c000f857:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c000f85c:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c000f860:	01 c8                	add    eax,ecx
c000f862:	8a 10                	mov    dl,BYTE PTR [eax]
c000f864:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f868:	88 10                	mov    BYTE PTR [eax],dl
c000f86a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f86e:	89 c2                	mov    edx,eax
c000f870:	c1 fa 1f             	sar    edx,0x1f
c000f873:	52                   	push   edx
c000f874:	50                   	push   eax
c000f875:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f879:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f87d:	e8 86 26 01 00       	call   c0021f08 <__divdi3>
c000f882:	83 c4 10             	add    esp,0x10
c000f885:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f889:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f88d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f891:	80 f4 00             	xor    ah,0x0
c000f894:	89 c3                	mov    ebx,eax
c000f896:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f89a:	80 f4 00             	xor    ah,0x0
c000f89d:	89 c6                	mov    esi,eax
c000f89f:	89 f0                	mov    eax,esi
c000f8a1:	09 d8                	or     eax,ebx
c000f8a3:	74 03                	je     c000f8a8 <KeBasedSignedIntegerToString(long long, char*, int)+0x134>
c000f8a5:	eb 91                	jmp    c000f838 <KeBasedSignedIntegerToString(long long, char*, int)+0xc4>
c000f8a7:	90                   	nop
c000f8a8:	90                   	nop
c000f8a9:	83 c4 4c             	add    esp,0x4c
c000f8ac:	5b                   	pop    ebx
c000f8ad:	5e                   	pop    esi
c000f8ae:	5f                   	pop    edi
c000f8af:	5d                   	pop    ebp
c000f8b0:	c3                   	ret    
c000f8b1:	8d 76 00             	lea    esi,[esi+0x0]

c000f8b4 <KeGetDigitsInNumber(long long)>:
c000f8b4:	56                   	push   esi
c000f8b5:	53                   	push   ebx
c000f8b6:	83 ec 24             	sub    esp,0x24
c000f8b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f8c1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f8c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f8c9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000f8d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f8d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f8d8:	80 f4 00             	xor    ah,0x0
c000f8db:	89 c3                	mov    ebx,eax
c000f8dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f8e1:	80 f4 00             	xor    ah,0x0
c000f8e4:	89 c6                	mov    esi,eax
c000f8e6:	89 f0                	mov    eax,esi
c000f8e8:	09 d8                	or     eax,ebx
c000f8ea:	74 28                	je     c000f914 <KeGetDigitsInNumber(long long)+0x60>
c000f8ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f8f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f8f4:	6a 00                	push   0x0
c000f8f6:	6a 0a                	push   0xa
c000f8f8:	52                   	push   edx
c000f8f9:	50                   	push   eax
c000f8fa:	e8 09 26 01 00       	call   c0021f08 <__divdi3>
c000f8ff:	83 c4 10             	add    esp,0x10
c000f902:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f906:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f90a:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000f90f:	eb c3                	jmp    c000f8d4 <KeGetDigitsInNumber(long long)+0x20>
c000f911:	8d 76 00             	lea    esi,[esi+0x0]
c000f914:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f918:	83 c4 24             	add    esp,0x24
c000f91b:	5b                   	pop    ebx
c000f91c:	5e                   	pop    esi
c000f91d:	c3                   	ret    
c000f91e:	66 90                	xchg   ax,ax

c000f920 <KeItoa(unsigned long long, char*)>:
c000f920:	83 ec 1c             	sub    esp,0x1c
c000f923:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f927:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f92b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f92f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f933:	6a 0a                	push   0xa
c000f935:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f939:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f93d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f941:	e8 12 fd ff ff       	call   c000f658 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f946:	83 c4 10             	add    esp,0x10
c000f949:	90                   	nop
c000f94a:	83 c4 1c             	add    esp,0x1c
c000f94d:	c3                   	ret    
c000f94e:	66 90                	xchg   ax,ax

c000f950 <KeItoa(long long, char*)>:
c000f950:	83 ec 1c             	sub    esp,0x1c
c000f953:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f957:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f95b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f95f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f963:	6a 0a                	push   0xa
c000f965:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f969:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f96d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f971:	e8 fe fd ff ff       	call   c000f774 <KeBasedSignedIntegerToString(long long, char*, int)>
c000f976:	83 c4 10             	add    esp,0x10
c000f979:	90                   	nop
c000f97a:	83 c4 1c             	add    esp,0x1c
c000f97d:	c3                   	ret    
c000f97e:	66 90                	xchg   ax,ax

c000f980 <KeXtoa(unsigned long long, char*)>:
c000f980:	83 ec 1c             	sub    esp,0x1c
c000f983:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f987:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f98b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f98f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f993:	6a 10                	push   0x10
c000f995:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f999:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f99d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f9a1:	e8 b2 fc ff ff       	call   c000f658 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f9a6:	83 c4 10             	add    esp,0x10
c000f9a9:	90                   	nop
c000f9aa:	83 c4 1c             	add    esp,0x1c
c000f9ad:	c3                   	ret    

c000f9ae <sbrk>:
c000f9ae:	55                   	push   ebp
c000f9af:	57                   	push   edi
c000f9b0:	56                   	push   esi
c000f9b1:	53                   	push   ebx
c000f9b2:	83 ec 1c             	sub    esp,0x1c
c000f9b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9b9:	85 c0                	test   eax,eax
c000f9bb:	74 66                	je     c000fa23 <sbrk+0x75>
c000f9bd:	78 6b                	js     c000fa2a <sbrk+0x7c>
c000f9bf:	8b 15 d0 c2 02 c0    	mov    edx,DWORD PTR ds:0xc002c2d0
c000f9c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f9c9:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c000f9cf:	05 ff 0f 00 00       	add    eax,0xfff
c000f9d4:	0f 49 e8             	cmovns ebp,eax
c000f9d7:	c1 fd 0c             	sar    ebp,0xc
c000f9da:	bb 00 00 00 00       	mov    ebx,0x0
c000f9df:	8b 35 90 22 03 c0    	mov    esi,DWORD PTR ds:0xc0032290
c000f9e5:	8b 3d d0 c2 02 c0    	mov    edi,DWORD PTR ds:0xc002c2d0
c000f9eb:	e8 b6 07 00 00       	call   c00101a6 <Phys::allocatePage()>
c000f9f0:	68 01 04 00 00       	push   0x401
c000f9f5:	57                   	push   edi
c000f9f6:	50                   	push   eax
c000f9f7:	56                   	push   esi
c000f9f8:	e8 cf 41 00 00       	call   c0013bcc <VAS::mapPage(unsigned long, unsigned long, int)>
c000f9fd:	81 05 d0 c2 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c2d0,0x1000
c000fa07:	83 c3 01             	add    ebx,0x1
c000fa0a:	83 c4 10             	add    esp,0x10
c000fa0d:	39 dd                	cmp    ebp,ebx
c000fa0f:	75 ce                	jne    c000f9df <sbrk+0x31>
c000fa11:	0f 20 d8             	mov    eax,cr3
c000fa14:	0f 22 d8             	mov    cr3,eax
c000fa17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa1b:	83 c4 1c             	add    esp,0x1c
c000fa1e:	5b                   	pop    ebx
c000fa1f:	5e                   	pop    esi
c000fa20:	5f                   	pop    edi
c000fa21:	5d                   	pop    ebp
c000fa22:	c3                   	ret    
c000fa23:	a1 d0 c2 02 c0       	mov    eax,ds:0xc002c2d0
c000fa28:	eb f1                	jmp    c000fa1b <sbrk+0x6d>
c000fa2a:	83 ec 08             	sub    esp,0x8
c000fa2d:	50                   	push   eax
c000fa2e:	68 30 8c 02 c0       	push   0xc0028c30
c000fa33:	e8 2e 75 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000fa38:	83 c4 10             	add    esp,0x10
c000fa3b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000fa40:	eb d9                	jmp    c000fa1b <sbrk+0x6d>

c000fa42 <sbrk_thunk>:
c000fa42:	83 ec 0c             	sub    esp,0xc
c000fa45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa49:	3d ff bf 00 00       	cmp    eax,0xbfff
c000fa4e:	7f 10                	jg     c000fa60 <sbrk_thunk+0x1e>
c000fa50:	83 ec 0c             	sub    esp,0xc
c000fa53:	50                   	push   eax
c000fa54:	e8 55 ff ff ff       	call   c000f9ae <sbrk>
c000fa59:	83 c4 10             	add    esp,0x10
c000fa5c:	83 c4 0c             	add    esp,0xc
c000fa5f:	c3                   	ret    
c000fa60:	83 ec 08             	sub    esp,0x8
c000fa63:	50                   	push   eax
c000fa64:	68 60 8c 02 c0       	push   0xc0028c60
c000fa69:	e8 f8 74 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000fa6e:	83 c4 10             	add    esp,0x10
c000fa71:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000fa76:	eb e4                	jmp    c000fa5c <sbrk_thunk+0x1a>

c000fa78 <mmap>:
c000fa78:	55                   	push   ebp
c000fa79:	57                   	push   edi
c000fa7a:	56                   	push   esi
c000fa7b:	53                   	push   ebx
c000fa7c:	83 ec 18             	sub    esp,0x18
c000fa7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa83:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000fa89:	89 fb                	mov    ebx,edi
c000fa8b:	c1 eb 0c             	shr    ebx,0xc
c000fa8e:	53                   	push   ebx
c000fa8f:	e8 5f 3a 00 00       	call   c00134f3 <Virt::allocateKernelVirtualPages(int)>
c000fa94:	89 c5                	mov    ebp,eax
c000fa96:	83 c4 10             	add    esp,0x10
c000fa99:	85 db                	test   ebx,ebx
c000fa9b:	7e 2f                	jle    c000facc <mmap+0x54>
c000fa9d:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000faa3:	01 c7                	add    edi,eax
c000faa5:	89 c3                	mov    ebx,eax
c000faa7:	8b 35 90 22 03 c0    	mov    esi,DWORD PTR ds:0xc0032290
c000faad:	e8 f4 06 00 00       	call   c00101a6 <Phys::allocatePage()>
c000fab2:	68 01 04 00 00       	push   0x401
c000fab7:	53                   	push   ebx
c000fab8:	50                   	push   eax
c000fab9:	56                   	push   esi
c000faba:	e8 0d 41 00 00       	call   c0013bcc <VAS::mapPage(unsigned long, unsigned long, int)>
c000fabf:	81 c3 00 10 00 00    	add    ebx,0x1000
c000fac5:	83 c4 10             	add    esp,0x10
c000fac8:	39 fb                	cmp    ebx,edi
c000faca:	75 db                	jne    c000faa7 <mmap+0x2f>
c000facc:	89 e8                	mov    eax,ebp
c000face:	83 c4 0c             	add    esp,0xc
c000fad1:	5b                   	pop    ebx
c000fad2:	5e                   	pop    esi
c000fad3:	5f                   	pop    edi
c000fad4:	5d                   	pop    ebp
c000fad5:	c3                   	ret    

c000fad6 <munmap>:
c000fad6:	83 ec 18             	sub    esp,0x18
c000fad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fadd:	e8 0f 3d 00 00       	call   c00137f1 <Virt::freeKernelVirtualPages(unsigned long)>
c000fae2:	b8 00 00 00 00       	mov    eax,0x0
c000fae7:	83 c4 1c             	add    esp,0x1c
c000faea:	c3                   	ret    

c000faeb <liballoc_lock()>:
c000faeb:	fa                   	cli    
c000faec:	83 05 30 23 03 c0 01 	add    DWORD PTR ds:0xc0032330,0x1
c000faf3:	b8 00 00 00 00       	mov    eax,0x0
c000faf8:	c3                   	ret    

c000faf9 <liballoc_unlock()>:
c000faf9:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c000fb01:	83 3d 30 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032330,0x0
c000fb08:	75 01                	jne    c000fb0b <liballoc_unlock()+0x12>
c000fb0a:	fb                   	sti    
c000fb0b:	b8 00 00 00 00       	mov    eax,0x0
c000fb10:	c3                   	ret    

c000fb11 <liballoc_alloc(int)>:
c000fb11:	83 ec 10             	sub    esp,0x10
c000fb14:	6a 01                	push   0x1
c000fb16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fb1a:	ff 35 90 22 03 c0    	push   DWORD PTR ds:0xc0032290
c000fb20:	e8 af 41 00 00       	call   c0013cd4 <VAS::allocatePages(int, int)>
c000fb25:	83 c4 1c             	add    esp,0x1c
c000fb28:	c3                   	ret    

c000fb29 <liballoc_free(void*, int)>:
c000fb29:	83 ec 14             	sub    esp,0x14
c000fb2c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fb30:	ff 35 90 22 03 c0    	push   DWORD PTR ds:0xc0032290
c000fb36:	e8 f3 3d 00 00       	call   c001392e <VAS::freeAllocatedPages(unsigned long)>
c000fb3b:	b8 00 00 00 00       	mov    eax,0x0
c000fb40:	83 c4 1c             	add    esp,0x1c
c000fb43:	c3                   	ret    

c000fb44 <realloc>:
c000fb44:	83 ec 14             	sub    esp,0x14
c000fb47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb4f:	e8 31 1c ff ff       	call   c0001785 <dlrealloc>
c000fb54:	83 c4 1c             	add    esp,0x1c
c000fb57:	c3                   	ret    

c000fb58 <malloc>:
c000fb58:	83 ec 18             	sub    esp,0x18
c000fb5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb5f:	e8 e4 16 ff ff       	call   c0001248 <dlmalloc>
c000fb64:	83 c4 1c             	add    esp,0x1c
c000fb67:	c3                   	ret    

c000fb68 <free>:
c000fb68:	83 ec 18             	sub    esp,0x18
c000fb6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb6f:	e8 12 12 ff ff       	call   c0000d86 <dlfree>
c000fb74:	83 c4 1c             	add    esp,0x1c
c000fb77:	c3                   	ret    

c000fb78 <rfree>:
c000fb78:	83 ec 18             	sub    esp,0x18
c000fb7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb7f:	e8 02 12 ff ff       	call   c0000d86 <dlfree>
c000fb84:	83 c4 1c             	add    esp,0x1c
c000fb87:	c3                   	ret    

c000fb88 <calloc>:
c000fb88:	56                   	push   esi
c000fb89:	53                   	push   ebx
c000fb8a:	83 ec 10             	sub    esp,0x10
c000fb8d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fb91:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000fb96:	53                   	push   ebx
c000fb97:	e8 bc ff ff ff       	call   c000fb58 <malloc>
c000fb9c:	89 c6                	mov    esi,eax
c000fb9e:	83 c4 0c             	add    esp,0xc
c000fba1:	53                   	push   ebx
c000fba2:	6a 00                	push   0x0
c000fba4:	50                   	push   eax
c000fba5:	e8 46 09 ff ff       	call   c00004f0 <memset>
c000fbaa:	89 f0                	mov    eax,esi
c000fbac:	83 c4 14             	add    esp,0x14
c000fbaf:	5b                   	pop    ebx
c000fbb0:	5e                   	pop    esi
c000fbb1:	c3                   	ret    
c000fbb2:	66 90                	xchg   ax,ax

c000fbb4 <KeMailboxTryPost(Mailbox*, void*)>:
c000fbb4:	83 ec 10             	sub    esp,0x10
c000fbb7:	fa                   	cli    
c000fbb8:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c000fbbd:	83 c0 01             	add    eax,0x1
c000fbc0:	a3 30 23 03 c0       	mov    ds:0xc0032330,eax
c000fbc5:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fbca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fbd1:	85 c0                	test   eax,eax
c000fbd3:	75 23                	jne    c000fbf8 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000fbd5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbd9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fbdd:	89 10                	mov    DWORD PTR [eax],edx
c000fbdf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbe3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fbe6:	8d 50 01             	lea    edx,[eax+0x1]
c000fbe9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fbf0:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fbf5:	8d 76 00             	lea    esi,[esi+0x0]
c000fbf8:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c000fc00:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c000fc05:	85 c0                	test   eax,eax
c000fc07:	75 03                	jne    c000fc0c <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000fc09:	fb                   	sti    
c000fc0a:	66 90                	xchg   ax,ax
c000fc0c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fc10:	83 c4 10             	add    esp,0x10
c000fc13:	c3                   	ret    

c000fc14 <KeMailboxTryGet(Mailbox*, void**)>:
c000fc14:	83 ec 10             	sub    esp,0x10
c000fc17:	fa                   	cli    
c000fc18:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c000fc1d:	83 c0 01             	add    eax,0x1
c000fc20:	a3 30 23 03 c0       	mov    ds:0xc0032330,eax
c000fc25:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fc2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc31:	83 f8 01             	cmp    eax,0x1
c000fc34:	75 22                	jne    c000fc58 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000fc36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc3a:	8b 10                	mov    edx,DWORD PTR [eax]
c000fc3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fc40:	89 10                	mov    DWORD PTR [eax],edx
c000fc42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc49:	8d 50 ff             	lea    edx,[eax-0x1]
c000fc4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc50:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fc53:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fc58:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c000fc60:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c000fc65:	85 c0                	test   eax,eax
c000fc67:	75 03                	jne    c000fc6c <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000fc69:	fb                   	sti    
c000fc6a:	66 90                	xchg   ax,ax
c000fc6c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fc70:	83 c4 10             	add    esp,0x10
c000fc73:	c3                   	ret    

c000fc74 <KeMailboxCreate()>:
c000fc74:	83 ec 1c             	sub    esp,0x1c
c000fc77:	83 ec 0c             	sub    esp,0xc
c000fc7a:	6a 08                	push   0x8
c000fc7c:	e8 d7 fe ff ff       	call   c000fb58 <malloc>
c000fc81:	83 c4 10             	add    esp,0x10
c000fc84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc8c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fc92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc96:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fc9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fca1:	83 c4 1c             	add    esp,0x1c
c000fca4:	c3                   	ret    
c000fca5:	8d 76 00             	lea    esi,[esi+0x0]

c000fca8 <KeMailboxPost(Mailbox*, void*)>:
c000fca8:	83 ec 1c             	sub    esp,0x1c
c000fcab:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fcb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fcb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fcb8:	e8 f7 fe ff ff       	call   c000fbb4 <KeMailboxTryPost(Mailbox*, void*)>
c000fcbd:	83 c4 08             	add    esp,0x8
c000fcc0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fcc4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fcc8:	83 f0 01             	xor    eax,0x1
c000fccb:	0f b6 c0             	movzx  eax,al
c000fcce:	85 c0                	test   eax,eax
c000fcd0:	74 26                	je     c000fcf8 <KeMailboxPost(Mailbox*, void*)+0x50>
c000fcd2:	fa                   	cli    
c000fcd3:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c000fcd8:	83 c0 01             	add    eax,0x1
c000fcdb:	a3 30 23 03 c0       	mov    ds:0xc0032330,eax
c000fce0:	e8 4f 6e 00 00       	call   c0016b34 <schedule()>
c000fce5:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c000fced:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c000fcf2:	85 c0                	test   eax,eax
c000fcf4:	75 02                	jne    c000fcf8 <KeMailboxPost(Mailbox*, void*)+0x50>
c000fcf6:	fb                   	sti    
c000fcf7:	90                   	nop
c000fcf8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fcfd:	85 c0                	test   eax,eax
c000fcff:	75 03                	jne    c000fd04 <KeMailboxPost(Mailbox*, void*)+0x5c>
c000fd01:	eb ad                	jmp    c000fcb0 <KeMailboxPost(Mailbox*, void*)+0x8>
c000fd03:	90                   	nop
c000fd04:	90                   	nop
c000fd05:	83 c4 1c             	add    esp,0x1c
c000fd08:	c3                   	ret    
c000fd09:	8d 76 00             	lea    esi,[esi+0x0]

c000fd0c <KeMailboxGet(Mailbox*, void**)>:
c000fd0c:	83 ec 1c             	sub    esp,0x1c
c000fd0f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fd14:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd18:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd1c:	e8 f3 fe ff ff       	call   c000fc14 <KeMailboxTryGet(Mailbox*, void**)>
c000fd21:	83 c4 08             	add    esp,0x8
c000fd24:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fd28:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fd2c:	83 f0 01             	xor    eax,0x1
c000fd2f:	0f b6 c0             	movzx  eax,al
c000fd32:	85 c0                	test   eax,eax
c000fd34:	74 26                	je     c000fd5c <KeMailboxGet(Mailbox*, void**)+0x50>
c000fd36:	fa                   	cli    
c000fd37:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c000fd3c:	83 c0 01             	add    eax,0x1
c000fd3f:	a3 30 23 03 c0       	mov    ds:0xc0032330,eax
c000fd44:	e8 eb 6d 00 00       	call   c0016b34 <schedule()>
c000fd49:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c000fd51:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c000fd56:	85 c0                	test   eax,eax
c000fd58:	75 02                	jne    c000fd5c <KeMailboxGet(Mailbox*, void**)+0x50>
c000fd5a:	fb                   	sti    
c000fd5b:	90                   	nop
c000fd5c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fd61:	85 c0                	test   eax,eax
c000fd63:	75 03                	jne    c000fd68 <KeMailboxGet(Mailbox*, void**)+0x5c>
c000fd65:	eb ad                	jmp    c000fd14 <KeMailboxGet(Mailbox*, void**)+0x8>
c000fd67:	90                   	nop
c000fd68:	90                   	nop
c000fd69:	83 c4 1c             	add    esp,0x1c
c000fd6c:	c3                   	ret    
c000fd6d:	8d 76 00             	lea    esi,[esi+0x0]

c000fd70 <KeMailboxDestroy(Mailbox*)>:
c000fd70:	83 ec 0c             	sub    esp,0xc
c000fd73:	83 ec 0c             	sub    esp,0xc
c000fd76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd7a:	e8 e9 fd ff ff       	call   c000fb68 <free>
c000fd7f:	83 c4 10             	add    esp,0x10
c000fd82:	90                   	nop
c000fd83:	83 c4 0c             	add    esp,0xc
c000fd86:	c3                   	ret    

c000fd87 <KeFirstTask()>:
c000fd87:	53                   	push   ebx
c000fd88:	83 ec 08             	sub    esp,0x8
c000fd8b:	fb                   	sti    
c000fd8c:	e8 5c a5 00 00       	call   c001a2ed <HalEnableNMI()>
c000fd91:	83 ec 0c             	sub    esp,0xc
c000fd94:	68 6f 8c 02 c0       	push   0xc0028c6f
c000fd99:	e8 17 d9 ff ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c000fd9e:	c7 04 24 c4 07 00 00 	mov    DWORD PTR [esp],0x7c4
c000fda5:	e8 ae fd ff ff       	call   c000fb58 <malloc>
c000fdaa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000fdb1:	89 c3                	mov    ebx,eax
c000fdb3:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c000fdb8:	50                   	push   eax
c000fdb9:	68 88 8c 02 c0       	push   0xc0028c88
c000fdbe:	6a 01                	push   0x1
c000fdc0:	53                   	push   ebx
c000fdc1:	e8 7a 68 00 00       	call   c0016640 <Process::Process(bool, char const*, Process*, char**)>
c000fdc6:	83 c4 20             	add    esp,0x20
c000fdc9:	68 ff 00 00 00       	push   0xff
c000fdce:	6a 00                	push   0x0
c000fdd0:	68 83 ee 00 c0       	push   0xc000ee83
c000fdd5:	53                   	push   ebx
c000fdd6:	e8 a5 6a 00 00       	call   c0016880 <Process::createThread(void (*)(void*), void*, int)>
c000fddb:	8b 15 58 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032358
c000fde1:	6a 7a                	push   0x7a
c000fde3:	6a 00                	push   0x0
c000fde5:	68 10 72 01 c0       	push   0xc0017210
c000fdea:	52                   	push   edx
c000fdeb:	e8 90 6a 00 00       	call   c0016880 <Process::createThread(void (*)(void*), void*, int)>
c000fdf0:	83 c4 14             	add    esp,0x14
c000fdf3:	68 10 8d 02 c0       	push   0xc0028d10
c000fdf8:	a3 10 23 03 c0       	mov    ds:0xc0032310,eax
c000fdfd:	e8 b3 d8 ff ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c000fe02:	c6 05 0d 21 03 c0 01 	mov    BYTE PTR ds:0xc003210d,0x1
c000fe09:	e8 df 0b 00 00       	call   c00109ed <KeInitRand()>
c000fe0e:	e8 83 78 00 00       	call   c0017696 <Vm::initialise8086()>
c000fe13:	e8 f2 84 ff ff       	call   c000830a <Fs::initVFS()>
c000fe18:	c7 04 24 d1 88 02 c0 	mov    DWORD PTR [esp],0xc00288d1
c000fe1f:	e8 91 d8 ff ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c000fe24:	a1 08 21 03 c0       	mov    eax,ds:0xc0032108
c000fe29:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c000fe2f:	8b 10                	mov    edx,DWORD PTR [eax]
c000fe31:	6a 00                	push   0x0
c000fe33:	6a 00                	push   0x0
c000fe35:	6a 00                	push   0x0
c000fe37:	50                   	push   eax
c000fe38:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fe3b:	83 c4 14             	add    esp,0x14
c000fe3e:	68 10 8d 02 c0       	push   0xc0028d10
c000fe43:	e8 6d d8 ff ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c000fe48:	e8 a2 7c ff ff       	call   c0007aef <KeInitialiseSymlinks()>
c000fe4d:	e8 a2 eb ff ff       	call   c000e9f4 <KeLoadSystemEnv()>
c000fe52:	e8 dd 09 00 00       	call   c0010834 <KeSetupPowerManager()>
c000fe57:	c7 04 24 95 8c 02 c0 	mov    DWORD PTR [esp],0xc0028c95
c000fe5e:	e8 52 d8 ff ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c000fe63:	8b 0d 08 21 03 c0    	mov    ecx,DWORD PTR ds:0xc0032108
c000fe69:	83 c4 0c             	add    esp,0xc
c000fe6c:	6a 00                	push   0x0
c000fe6e:	51                   	push   ecx
c000fe6f:	68 a6 8c 02 c0       	push   0xc0028ca6
c000fe74:	e8 39 63 00 00       	call   c00161b2 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000fe79:	83 c4 10             	add    esp,0x10
c000fe7c:	83 ec 0c             	sub    esp,0xc
c000fe7f:	6a 02                	push   0x2
c000fe81:	e8 6e 6d 00 00       	call   c0016bf4 <blockTask(TaskState)>
c000fe86:	83 c4 10             	add    esp,0x10
c000fe89:	eb f1                	jmp    c000fe7c <KeFirstTask()+0xf5>

c000fe8b <KeEntryPoint>:
c000fe8b:	57                   	push   edi
c000fe8c:	bf f9 03 00 00       	mov    edi,0x3f9
c000fe91:	56                   	push   esi
c000fe92:	31 f6                	xor    esi,esi
c000fe94:	53                   	push   ebx
c000fe95:	83 ec 20             	sub    esp,0x20
c000fe98:	e8 db d7 ff ff       	call   c000d678 <KeInitialiseBootConfigurationFlags()>
c000fe9d:	89 f0                	mov    eax,esi
c000fe9f:	89 fa                	mov    edx,edi
c000fea1:	ee                   	out    dx,al
c000fea2:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fea7:	b0 80                	mov    al,0x80
c000fea9:	89 da                	mov    edx,ebx
c000feab:	ee                   	out    dx,al
c000feac:	b1 03                	mov    cl,0x3
c000feae:	ba f8 03 00 00       	mov    edx,0x3f8
c000feb3:	88 c8                	mov    al,cl
c000feb5:	ee                   	out    dx,al
c000feb6:	89 f0                	mov    eax,esi
c000feb8:	89 fa                	mov    edx,edi
c000feba:	ee                   	out    dx,al
c000febb:	88 c8                	mov    al,cl
c000febd:	89 da                	mov    edx,ebx
c000febf:	ee                   	out    dx,al
c000fec0:	b0 c7                	mov    al,0xc7
c000fec2:	ba fa 03 00 00       	mov    edx,0x3fa
c000fec7:	ee                   	out    dx,al
c000fec8:	b0 0b                	mov    al,0xb
c000feca:	ba fc 03 00 00       	mov    edx,0x3fc
c000fecf:	ee                   	out    dx,al
c000fed0:	83 ec 0c             	sub    esp,0xc
c000fed3:	68 c2 8c 02 c0       	push   0xc0028cc2
c000fed8:	e8 89 70 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000fedd:	e8 a4 d7 ff ff       	call   c000d686 <KeDisplaySplashScreen()>
c000fee2:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fee7:	05 ff 0f 00 00       	add    eax,0xfff
c000feec:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fef1:	89 04 24             	mov    DWORD PTR [esp],eax
c000fef4:	e8 47 04 00 00       	call   c0010340 <Phys::physicalMemorySetup(unsigned int)>
c000fef9:	e8 c9 37 00 00       	call   c00136c7 <Virt::virtualMemorySetup()>
c000fefe:	e8 d3 d6 ff ff       	call   c000d5d6 <KeInitialiseAtexit()>
c000ff03:	58                   	pop    eax
c000ff04:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000ff08:	53                   	push   ebx
c000ff09:	e8 a0 3a 00 00       	call   c00139ae <VAS::VAS()>
c000ff0e:	89 1d 90 22 03 c0    	mov    DWORD PTR ds:0xc0032290,ebx
c000ff14:	e8 af 5d 01 00       	call   c0025cc8 <_init>
c000ff19:	c7 04 24 d9 8c 02 c0 	mov    DWORD PTR [esp],0xc0028cd9
c000ff20:	e8 90 d7 ff ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c000ff25:	c7 04 24 68 01 00 00 	mov    DWORD PTR [esp],0x168
c000ff2c:	e8 27 fc ff ff       	call   c000fb58 <malloc>
c000ff31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff34:	89 c6                	mov    esi,eax
c000ff36:	e8 fb e4 ff ff       	call   c000e436 <Computer::Computer()>
c000ff3b:	8b 15 90 22 03 c0    	mov    edx,DWORD PTR ds:0xc0032290
c000ff41:	89 35 08 21 03 c0    	mov    DWORD PTR ds:0xc0032108,esi
c000ff47:	52                   	push   edx
c000ff48:	6a 00                	push   0x0
c000ff4a:	6a 00                	push   0x0
c000ff4c:	56                   	push   esi
c000ff4d:	e8 28 e5 ff ff       	call   c000e47a <Computer::open(int, int, void*)>
c000ff52:	83 c4 14             	add    esp,0x14
c000ff55:	68 34 8d 02 c0       	push   0xc0028d34
c000ff5a:	e8 56 d7 ff ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c000ff5f:	e8 0f ab 00 00       	call   c001aa73 <HalInitialiseCoprocessor()>
c000ff64:	c7 04 24 f3 8c 02 c0 	mov    DWORD PTR [esp],0xc0028cf3
c000ff6b:	e8 45 d7 ff ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c000ff70:	c7 04 24 87 fd 00 c0 	mov    DWORD PTR [esp],0xc000fd87
c000ff77:	e8 70 6a 00 00       	call   c00169ec <setupMultitasking(void (*)())>
c000ff7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff7f:	e8 e0 3a 00 00       	call   c0013a64 <VAS::~VAS()>
c000ff84:	83 c4 30             	add    esp,0x30
c000ff87:	5b                   	pop    ebx
c000ff88:	5e                   	pop    esi
c000ff89:	5f                   	pop    edi
c000ff8a:	c3                   	ret    
c000ff8b:	90                   	nop

c000ff8c <Mutex::Mutex()>:
c000ff8c:	83 ec 0c             	sub    esp,0xc
c000ff8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff93:	83 ec 08             	sub    esp,0x8
c000ff96:	6a 01                	push   0x1
c000ff98:	50                   	push   eax
c000ff99:	e8 ee 0c 00 00       	call   c0010c8c <Semaphore::Semaphore(int)>
c000ff9e:	83 c4 10             	add    esp,0x10
c000ffa1:	90                   	nop
c000ffa2:	83 c4 0c             	add    esp,0xc
c000ffa5:	c3                   	ret    

c000ffa6 <KeIsKernelInPanic()>:
c000ffa6:	a0 64 21 03 c0       	mov    al,ds:0xc0032164
c000ffab:	c3                   	ret    

c000ffac <KePanic(char const*)>:
c000ffac:	c6 05 64 21 03 c0 01 	mov    BYTE PTR ds:0xc0032164,0x1
c000ffb3:	e9 59 ab 00 00       	jmp    c001ab11 <HalPanic(char const*)>

c000ffb8 <Phys::allocateDMA(unsigned long)>:
c000ffb8:	55                   	push   ebp
c000ffb9:	31 ed                	xor    ebp,ebp
c000ffbb:	57                   	push   edi
c000ffbc:	56                   	push   esi
c000ffbd:	31 f6                	xor    esi,esi
c000ffbf:	53                   	push   ebx
c000ffc0:	31 db                	xor    ebx,ebx
c000ffc2:	83 ec 1c             	sub    esp,0x1c
c000ffc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffc9:	05 ff 0f 00 00       	add    eax,0xfff
c000ffce:	c1 e8 0c             	shr    eax,0xc
c000ffd1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ffd5:	31 c0                	xor    eax,eax
c000ffd7:	eb 1b                	jmp    c000fff4 <Phys::allocateDMA(unsigned long)+0x3c>
c000ffd9:	8d 78 01             	lea    edi,[eax+0x1]
c000ffdc:	85 c0                	test   eax,eax
c000ffde:	0f 44 eb             	cmove  ebp,ebx
c000ffe1:	0f 44 f3             	cmove  esi,ebx
c000ffe4:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000ffe8:	74 37                	je     c0010021 <Phys::allocateDMA(unsigned long)+0x69>
c000ffea:	89 f8                	mov    eax,edi
c000ffec:	83 c3 01             	add    ebx,0x1
c000ffef:	83 fb 0f             	cmp    ebx,0xf
c000fff2:	7f 13                	jg     c0010007 <Phys::allocateDMA(unsigned long)+0x4f>
c000fff4:	80 bb 80 21 03 c0 00 	cmp    BYTE PTR [ebx-0x3ffcde80],0x0
c000fffb:	74 dc                	je     c000ffd9 <Phys::allocateDMA(unsigned long)+0x21>
c000fffd:	31 c0                	xor    eax,eax
c000ffff:	83 c3 01             	add    ebx,0x1
c0010002:	83 fb 0f             	cmp    ebx,0xf
c0010005:	7e ed                	jle    c000fff4 <Phys::allocateDMA(unsigned long)+0x3c>
c0010007:	83 ec 0c             	sub    esp,0xc
c001000a:	68 58 8d 02 c0       	push   0xc0028d58
c001000f:	e8 98 ff ff ff       	call   c000ffac <KePanic(char const*)>
c0010014:	83 c4 10             	add    esp,0x10
c0010017:	31 c0                	xor    eax,eax
c0010019:	83 c4 1c             	add    esp,0x1c
c001001c:	5b                   	pop    ebx
c001001d:	5e                   	pop    esi
c001001e:	5f                   	pop    edi
c001001f:	5d                   	pop    ebp
c0010020:	c3                   	ret    
c0010021:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010025:	89 f2                	mov    edx,esi
c0010027:	c1 fa 04             	sar    edx,0x4
c001002a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001002e:	01 f1                	add    ecx,esi
c0010030:	8d 51 0e             	lea    edx,[ecx+0xe]
c0010033:	83 e9 01             	sub    ecx,0x1
c0010036:	0f 48 ca             	cmovs  ecx,edx
c0010039:	c1 f9 04             	sar    ecx,0x4
c001003c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0010040:	74 06                	je     c0010048 <Phys::allocateDMA(unsigned long)+0x90>
c0010042:	89 eb                	mov    ebx,ebp
c0010044:	31 c0                	xor    eax,eax
c0010046:	eb b7                	jmp    c000ffff <Phys::allocateDMA(unsigned long)+0x47>
c0010048:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001004c:	85 d2                	test   edx,edx
c001004e:	74 17                	je     c0010067 <Phys::allocateDMA(unsigned long)+0xaf>
c0010050:	8d 96 80 21 03 c0    	lea    edx,[esi-0x3ffcde80]
c0010056:	8d 84 06 81 21 03 c0 	lea    eax,[esi+eax*1-0x3ffcde7f]
c001005d:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0010060:	83 c2 01             	add    edx,0x1
c0010063:	39 d0                	cmp    eax,edx
c0010065:	75 f6                	jne    c001005d <Phys::allocateDMA(unsigned long)+0xa5>
c0010067:	8b 15 78 21 03 c0    	mov    edx,DWORD PTR ds:0xc0032178
c001006d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010071:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010075:	01 c2                	add    edx,eax
c0010077:	89 15 78 21 03 c0    	mov    DWORD PTR ds:0xc0032178,edx
c001007d:	85 c9                	test   ecx,ecx
c001007f:	74 17                	je     c0010098 <Phys::allocateDMA(unsigned long)+0xe0>
c0010081:	83 ec 0c             	sub    esp,0xc
c0010084:	68 58 8d 02 c0       	push   0xc0028d58
c0010089:	e8 1e ff ff ff       	call   c000ffac <KePanic(char const*)>
c001008e:	83 c4 10             	add    esp,0x10
c0010091:	89 f8                	mov    eax,edi
c0010093:	e9 54 ff ff ff       	jmp    c000ffec <Phys::allocateDMA(unsigned long)+0x34>
c0010098:	c1 e6 0c             	shl    esi,0xc
c001009b:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c00100a1:	e9 73 ff ff ff       	jmp    c0010019 <Phys::allocateDMA(unsigned long)+0x61>

c00100a6 <Phys::freeDMA(unsigned long, unsigned long)>:
c00100a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00100aa:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00100b0:	a1 78 21 03 c0       	mov    eax,ds:0xc0032178
c00100b5:	c1 ea 0c             	shr    edx,0xc
c00100b8:	29 d0                	sub    eax,edx
c00100ba:	a3 78 21 03 c0       	mov    ds:0xc0032178,eax
c00100bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100c3:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00100c8:	c1 e8 0c             	shr    eax,0xc
c00100cb:	85 d2                	test   edx,edx
c00100cd:	74 11                	je     c00100e0 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c00100cf:	05 80 21 03 c0       	add    eax,0xc0032180
c00100d4:	01 c2                	add    edx,eax
c00100d6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00100d9:	83 c0 01             	add    eax,0x1
c00100dc:	39 d0                	cmp    eax,edx
c00100de:	75 f6                	jne    c00100d6 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c00100e0:	c3                   	ret    

c00100e1 <Phys::setPageState(unsigned long, bool)>:
c00100e1:	57                   	push   edi
c00100e2:	56                   	push   esi
c00100e3:	8b 35 38 c3 02 c0    	mov    esi,DWORD PTR ds:0xc002c338
c00100e9:	53                   	push   ebx
c00100ea:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c00100ef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00100f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100f7:	89 ca                	mov    edx,ecx
c00100f9:	83 e1 07             	and    ecx,0x7
c00100fc:	c1 ea 03             	shr    edx,0x3
c00100ff:	0f b6 c0             	movzx  eax,al
c0010102:	d3 c3                	rol    ebx,cl
c0010104:	01 d6                	add    esi,edx
c0010106:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0010109:	d3 e0                	shl    eax,cl
c001010b:	21 fb                	and    ebx,edi
c001010d:	88 1e                	mov    BYTE PTR [esi],bl
c001010f:	8b 1d 38 c3 02 c0    	mov    ebx,DWORD PTR ds:0xc002c338
c0010115:	01 da                	add    edx,ebx
c0010117:	8a 0a                	mov    cl,BYTE PTR [edx]
c0010119:	09 c8                	or     eax,ecx
c001011b:	88 02                	mov    BYTE PTR [edx],al
c001011d:	5b                   	pop    ebx
c001011e:	5e                   	pop    esi
c001011f:	5f                   	pop    edi
c0010120:	c3                   	ret    

c0010121 <Phys::getPageState(unsigned long)>:
c0010121:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010125:	8b 15 38 c3 02 c0    	mov    edx,DWORD PTR ds:0xc002c338
c001012b:	89 c8                	mov    eax,ecx
c001012d:	83 e1 07             	and    ecx,0x7
c0010130:	c1 e8 03             	shr    eax,0x3
c0010133:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0010137:	d3 f8                	sar    eax,cl
c0010139:	83 e0 01             	and    eax,0x1
c001013c:	c3                   	ret    

c001013d <Phys::freePage(unsigned long)>:
c001013d:	53                   	push   ebx
c001013e:	83 ec 08             	sub    esp,0x8
c0010141:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010145:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c001014b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0010151:	76 41                	jbe    c0010194 <Phys::freePage(unsigned long)+0x57>
c0010153:	c1 e8 0c             	shr    eax,0xc
c0010156:	50                   	push   eax
c0010157:	89 c3                	mov    ebx,eax
c0010159:	e8 c3 ff ff ff       	call   c0010121 <Phys::getPageState(unsigned long)>
c001015e:	5a                   	pop    edx
c001015f:	84 c0                	test   al,al
c0010161:	74 20                	je     c0010183 <Phys::freePage(unsigned long)+0x46>
c0010163:	a1 78 21 03 c0       	mov    eax,ds:0xc0032178
c0010168:	83 ec 08             	sub    esp,0x8
c001016b:	6a 00                	push   0x0
c001016d:	53                   	push   ebx
c001016e:	83 e8 01             	sub    eax,0x1
c0010171:	a3 78 21 03 c0       	mov    ds:0xc0032178,eax
c0010176:	e8 66 ff ff ff       	call   c00100e1 <Phys::setPageState(unsigned long, bool)>
c001017b:	83 c4 10             	add    esp,0x10
c001017e:	83 c4 08             	add    esp,0x8
c0010181:	5b                   	pop    ebx
c0010182:	c3                   	ret    
c0010183:	c7 44 24 10 6a 8d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028d6a
c001018b:	83 c4 08             	add    esp,0x8
c001018e:	5b                   	pop    ebx
c001018f:	e9 18 fe ff ff       	jmp    c000ffac <KePanic(char const*)>
c0010194:	68 00 10 00 00       	push   0x1000
c0010199:	50                   	push   eax
c001019a:	e8 07 ff ff ff       	call   c00100a6 <Phys::freeDMA(unsigned long, unsigned long)>
c001019f:	59                   	pop    ecx
c00101a0:	5b                   	pop    ebx
c00101a1:	83 c4 08             	add    esp,0x8
c00101a4:	5b                   	pop    ebx
c00101a5:	c3                   	ret    

c00101a6 <Phys::allocatePage()>:
c00101a6:	56                   	push   esi
c00101a7:	53                   	push   ebx
c00101a8:	83 ec 14             	sub    esp,0x14
c00101ab:	8b 35 6c 21 03 c0    	mov    esi,DWORD PTR ds:0xc003216c
c00101b1:	89 f3                	mov    ebx,esi
c00101b3:	eb 18                	jmp    c00101cd <Phys::allocatePage()+0x27>
c00101b5:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00101bb:	75 0c                	jne    c00101c9 <Phys::allocatePage()+0x23>
c00101bd:	c7 05 6c 21 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003216c,0x0
c00101c7:	31 db                	xor    ebx,ebx
c00101c9:	39 de                	cmp    esi,ebx
c00101cb:	74 5b                	je     c0010228 <Phys::allocatePage()+0x82>
c00101cd:	53                   	push   ebx
c00101ce:	e8 4e ff ff ff       	call   c0010121 <Phys::getPageState(unsigned long)>
c00101d3:	59                   	pop    ecx
c00101d4:	84 c0                	test   al,al
c00101d6:	74 29                	je     c0010201 <Phys::allocatePage()+0x5b>
c00101d8:	83 c3 01             	add    ebx,0x1
c00101db:	89 1d 6c 21 03 c0    	mov    DWORD PTR ds:0xc003216c,ebx
c00101e1:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00101e7:	76 cc                	jbe    c00101b5 <Phys::allocatePage()+0xf>
c00101e9:	83 ec 0c             	sub    esp,0xc
c00101ec:	68 80 8d 02 c0       	push   0xc0028d80
c00101f1:	e8 b6 fd ff ff       	call   c000ffac <KePanic(char const*)>
c00101f6:	8b 1d 6c 21 03 c0    	mov    ebx,DWORD PTR ds:0xc003216c
c00101fc:	83 c4 10             	add    esp,0x10
c00101ff:	eb b4                	jmp    c00101b5 <Phys::allocatePage()+0xf>
c0010201:	6a 01                	push   0x1
c0010203:	53                   	push   ebx
c0010204:	e8 d8 fe ff ff       	call   c00100e1 <Phys::setPageState(unsigned long, bool)>
c0010209:	8b 1d 78 21 03 c0    	mov    ebx,DWORD PTR ds:0xc0032178
c001020f:	5e                   	pop    esi
c0010210:	a1 6c 21 03 c0       	mov    eax,ds:0xc003216c
c0010215:	5a                   	pop    edx
c0010216:	83 c3 01             	add    ebx,0x1
c0010219:	89 1d 78 21 03 c0    	mov    DWORD PTR ds:0xc0032178,ebx
c001021f:	c1 e0 0c             	shl    eax,0xc
c0010222:	83 c4 14             	add    esp,0x14
c0010225:	5b                   	pop    ebx
c0010226:	5e                   	pop    esi
c0010227:	c3                   	ret    
c0010228:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001022d:	83 ec 0c             	sub    esp,0xc
c0010230:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010233:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c0010239:	51                   	push   ecx
c001023a:	e8 85 43 00 00       	call   c00145c4 <VAS::scanForEviction()>
c001023f:	83 c4 10             	add    esp,0x10
c0010242:	85 c0                	test   eax,eax
c0010244:	75 1b                	jne    c0010261 <Phys::allocatePage()+0xbb>
c0010246:	83 ec 0c             	sub    esp,0xc
c0010249:	68 c8 8d 02 c0       	push   0xc0028dc8
c001024e:	e8 59 fd ff ff       	call   c000ffac <KePanic(char const*)>
c0010253:	8b 1d 6c 21 03 c0    	mov    ebx,DWORD PTR ds:0xc003216c
c0010259:	83 c4 10             	add    esp,0x10
c001025c:	e9 6c ff ff ff       	jmp    c00101cd <Phys::allocatePage()+0x27>
c0010261:	8b 15 78 21 03 c0    	mov    edx,DWORD PTR ds:0xc0032178
c0010267:	83 ec 08             	sub    esp,0x8
c001026a:	6a 01                	push   0x1
c001026c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010270:	83 c2 01             	add    edx,0x1
c0010273:	89 15 78 21 03 c0    	mov    DWORD PTR ds:0xc0032178,edx
c0010279:	89 c2                	mov    edx,eax
c001027b:	c1 ea 0c             	shr    edx,0xc
c001027e:	52                   	push   edx
c001027f:	e8 5d fe ff ff       	call   c00100e1 <Phys::setPageState(unsigned long, bool)>
c0010284:	83 c4 10             	add    esp,0x10
c0010287:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001028b:	eb 95                	jmp    c0010222 <Phys::allocatePage()+0x7c>

c001028d <Phys::allocateContiguousPages(int)>:
c001028d:	57                   	push   edi
c001028e:	56                   	push   esi
c001028f:	53                   	push   ebx
c0010290:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0010294:	fa                   	cli    
c0010295:	8b 15 30 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032330
c001029b:	83 ec 0c             	sub    esp,0xc
c001029e:	31 db                	xor    ebx,ebx
c00102a0:	68 f8 8d 02 c0       	push   0xc0028df8
c00102a5:	83 c2 01             	add    edx,0x1
c00102a8:	89 15 30 23 03 c0    	mov    DWORD PTR ds:0xc0032330,edx
c00102ae:	e8 b3 6c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00102b3:	83 c4 10             	add    esp,0x10
c00102b6:	85 db                	test   ebx,ebx
c00102b8:	75 11                	jne    c00102cb <Phys::allocateContiguousPages(int)+0x3e>
c00102ba:	e8 e7 fe ff ff       	call   c00101a6 <Phys::allocatePage()>
c00102bf:	83 ff 01             	cmp    edi,0x1
c00102c2:	89 c6                	mov    esi,eax
c00102c4:	74 21                	je     c00102e7 <Phys::allocateContiguousPages(int)+0x5a>
c00102c6:	bb 01 00 00 00       	mov    ebx,0x1
c00102cb:	e8 d6 fe ff ff       	call   c00101a6 <Phys::allocatePage()>
c00102d0:	89 da                	mov    edx,ebx
c00102d2:	c1 e2 0c             	shl    edx,0xc
c00102d5:	01 f2                	add    edx,esi
c00102d7:	39 c2                	cmp    edx,eax
c00102d9:	74 24                	je     c00102ff <Phys::allocateContiguousPages(int)+0x72>
c00102db:	83 ff 01             	cmp    edi,0x1
c00102de:	bb 01 00 00 00       	mov    ebx,0x1
c00102e3:	89 c6                	mov    esi,eax
c00102e5:	75 e4                	jne    c00102cb <Phys::allocateContiguousPages(int)+0x3e>
c00102e7:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c00102ef:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c00102f4:	85 c0                	test   eax,eax
c00102f6:	75 01                	jne    c00102f9 <Phys::allocateContiguousPages(int)+0x6c>
c00102f8:	fb                   	sti    
c00102f9:	5b                   	pop    ebx
c00102fa:	89 f0                	mov    eax,esi
c00102fc:	5e                   	pop    esi
c00102fd:	5f                   	pop    edi
c00102fe:	c3                   	ret    
c00102ff:	83 c3 01             	add    ebx,0x1
c0010302:	39 fb                	cmp    ebx,edi
c0010304:	75 b0                	jne    c00102b6 <Phys::allocateContiguousPages(int)+0x29>
c0010306:	eb df                	jmp    c00102e7 <Phys::allocateContiguousPages(int)+0x5a>

c0010308 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010308:	56                   	push   esi
c0010309:	53                   	push   ebx
c001030a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001030e:	39 1d 70 21 03 c0    	cmp    DWORD PTR ds:0xc0032170,ebx
c0010314:	73 06                	jae    c001031c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010316:	89 1d 70 21 03 c0    	mov    DWORD PTR ds:0xc0032170,ebx
c001031c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010320:	c1 eb 0c             	shr    ebx,0xc
c0010323:	c1 e8 0c             	shr    eax,0xc
c0010326:	39 d8                	cmp    eax,ebx
c0010328:	73 13                	jae    c001033d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001032a:	6a 00                	push   0x0
c001032c:	50                   	push   eax
c001032d:	8d 70 01             	lea    esi,[eax+0x1]
c0010330:	e8 ac fd ff ff       	call   c00100e1 <Phys::setPageState(unsigned long, bool)>
c0010335:	39 f3                	cmp    ebx,esi
c0010337:	89 f0                	mov    eax,esi
c0010339:	5a                   	pop    edx
c001033a:	59                   	pop    ecx
c001033b:	75 ed                	jne    c001032a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c001033d:	5b                   	pop    ebx
c001033e:	5e                   	pop    esi
c001033f:	c3                   	ret    

c0010340 <Phys::physicalMemorySetup(unsigned int)>:
c0010340:	55                   	push   ebp
c0010341:	57                   	push   edi
c0010342:	56                   	push   esi
c0010343:	53                   	push   ebx
c0010344:	83 ec 40             	sub    esp,0x40
c0010347:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001034b:	6a 10                	push   0x10
c001034d:	6a 00                	push   0x0
c001034f:	68 80 21 03 c0       	push   0xc0032180
c0010354:	e8 97 01 ff ff       	call   c00004f0 <memset>
c0010359:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001035f:	8d 83 00 10 00 00    	lea    eax,[ebx+0x1000]
c0010365:	31 db                	xor    ebx,ebx
c0010367:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001036b:	5a                   	pop    edx
c001036c:	59                   	pop    ecx
c001036d:	50                   	push   eax
c001036e:	68 85 8d 02 c0       	push   0xc0028d85
c0010373:	e8 ee 6b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010378:	83 c4 10             	add    esp,0x10
c001037b:	83 ec 08             	sub    esp,0x8
c001037e:	6a 01                	push   0x1
c0010380:	53                   	push   ebx
c0010381:	83 c3 01             	add    ebx,0x1
c0010384:	e8 58 fd ff ff       	call   c00100e1 <Phys::setPageState(unsigned long, bool)>
c0010389:	83 c4 10             	add    esp,0x10
c001038c:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010392:	75 e7                	jne    c001037b <Phys::physicalMemorySetup(unsigned int)+0x3b>
c0010394:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c001039b:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c00103a2:	c1 e0 08             	shl    eax,0x8
c00103a5:	09 c2                	or     edx,eax
c00103a7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00103ab:	0f 84 ab 01 00 00    	je     c001055c <Phys::physicalMemorySetup(unsigned int)+0x21c>
c00103b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00103b9:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00103be:	e9 82 00 00 00       	jmp    c0010445 <Phys::physicalMemorySetup(unsigned int)+0x105>
c00103c3:	ba 00 00 08 00       	mov    edx,0x80000
c00103c8:	89 c1                	mov    ecx,eax
c00103ca:	39 f2                	cmp    edx,esi
c00103cc:	19 f9                	sbb    ecx,edi
c00103ce:	0f 82 c4 00 00 00    	jb     c0010498 <Phys::physicalMemorySetup(unsigned int)+0x158>
c00103d4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00103d8:	89 c5                	mov    ebp,eax
c00103da:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00103de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103e2:	19 cd                	sbb    ebp,ecx
c00103e4:	0f 83 b3 00 00 00    	jae    c001049d <Phys::physicalMemorySetup(unsigned int)+0x15d>
c00103ea:	89 d6                	mov    esi,edx
c00103ec:	ba 00 00 0a 00       	mov    edx,0xa0000
c00103f1:	39 f2                	cmp    edx,esi
c00103f3:	89 cf                	mov    edi,ecx
c00103f5:	19 c8                	sbb    eax,ecx
c00103f7:	73 07                	jae    c0010400 <Phys::physicalMemorySetup(unsigned int)+0xc0>
c00103f9:	be 00 00 0a 00       	mov    esi,0xa0000
c00103fe:	31 ff                	xor    edi,edi
c0010400:	89 f2                	mov    edx,esi
c0010402:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0010407:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c001040d:	89 f9                	mov    ecx,edi
c001040f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010413:	83 d1 ff             	adc    ecx,0xffffffff
c0010416:	39 d0                	cmp    eax,edx
c0010418:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001041c:	b8 00 00 00 00       	mov    eax,0x0
c0010421:	19 c8                	sbb    eax,ecx
c0010423:	0f 82 c8 00 00 00    	jb     c00104f1 <Phys::physicalMemorySetup(unsigned int)+0x1b1>
c0010429:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001042d:	83 c3 18             	add    ebx,0x18
c0010430:	83 c0 01             	add    eax,0x1
c0010433:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010437:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001043b:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c001043f:	0f 84 0f 01 00 00    	je     c0010554 <Phys::physicalMemorySetup(unsigned int)+0x214>
c0010445:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010447:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001044a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001044d:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010450:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0010454:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010457:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001045b:	01 f0                	add    eax,esi
c001045d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010461:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0010465:	55                   	push   ebp
c0010466:	11 fa                	adc    edx,edi
c0010468:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001046c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010470:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010474:	50                   	push   eax
c0010475:	56                   	push   esi
c0010476:	68 58 8e 02 c0       	push   0xc0028e58
c001047b:	e8 e6 6a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010480:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010484:	83 c4 10             	add    esp,0x10
c0010487:	09 f8                	or     eax,edi
c0010489:	0f 85 c5 00 00 00    	jne    c0010554 <Phys::physicalMemorySetup(unsigned int)+0x214>
c001048f:	83 fd 01             	cmp    ebp,0x1
c0010492:	0f 84 2b ff ff ff    	je     c00103c3 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0010498:	83 fd 01             	cmp    ebp,0x1
c001049b:	75 8c                	jne    c0010429 <Phys::physicalMemorySetup(unsigned int)+0xe9>
c001049d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00104a1:	31 d2                	xor    edx,edx
c00104a3:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00104a7:	89 c8                	mov    eax,ecx
c00104a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00104ad:	19 d1                	sbb    ecx,edx
c00104af:	0f 82 74 ff ff ff    	jb     c0010429 <Phys::physicalMemorySetup(unsigned int)+0xe9>
c00104b5:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00104ba:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00104be:	b9 00 00 00 00       	mov    ecx,0x0
c00104c3:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00104c7:	0f 83 5c ff ff ff    	jae    c0010429 <Phys::physicalMemorySetup(unsigned int)+0xe9>
c00104cd:	39 c6                	cmp    esi,eax
c00104cf:	19 d7                	sbb    edi,edx
c00104d1:	73 2a                	jae    c00104fd <Phys::physicalMemorySetup(unsigned int)+0x1bd>
c00104d3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00104d7:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00104db:	29 c7                	sub    edi,eax
c00104dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00104e1:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00104e5:	19 d5                	sbb    ebp,edx
c00104e7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00104eb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00104ef:	eb 0c                	jmp    c00104fd <Phys::physicalMemorySetup(unsigned int)+0x1bd>
c00104f1:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00104f5:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00104fd:	83 ec 04             	sub    esp,0x4
c0010500:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0010504:	56                   	push   esi
c0010505:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010509:	57                   	push   edi
c001050a:	68 7c 8e 02 c0       	push   0xc0028e7c
c001050f:	e8 52 6a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010514:	5a                   	pop    edx
c0010515:	59                   	pop    ecx
c0010516:	56                   	push   esi
c0010517:	57                   	push   edi
c0010518:	e8 eb fd ff ff       	call   c0010308 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c001051d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010521:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010525:	83 c4 0c             	add    esp,0xc
c0010528:	8b 3d 7c 21 03 c0    	mov    edi,DWORD PTR ds:0xc003217c
c001052e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010532:	01 f8                	add    eax,edi
c0010534:	a3 7c 21 03 c0       	mov    ds:0xc003217c,eax
c0010539:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010540:	52                   	push   edx
c0010541:	50                   	push   eax
c0010542:	68 ab 8d 02 c0       	push   0xc0028dab
c0010547:	e8 1a 6a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001054c:	83 c4 10             	add    esp,0x10
c001054f:	e9 d5 fe ff ff       	jmp    c0010429 <Phys::physicalMemorySetup(unsigned int)+0xe9>
c0010554:	83 c4 3c             	add    esp,0x3c
c0010557:	5b                   	pop    ebx
c0010558:	5e                   	pop    esi
c0010559:	5f                   	pop    edi
c001055a:	5d                   	pop    ebp
c001055b:	c3                   	ret    
c001055c:	c7 44 24 50 9d 8d 02 c0 	mov    DWORD PTR [esp+0x50],0xc0028d9d
c0010564:	83 c4 3c             	add    esp,0x3c
c0010567:	5b                   	pop    ebx
c0010568:	5e                   	pop    esi
c0010569:	5f                   	pop    edi
c001056a:	5d                   	pop    ebp
c001056b:	e9 3c fa ff ff       	jmp    c000ffac <KePanic(char const*)>

c0010570 <Pipe::isAtty()>:
c0010570:	31 c0                	xor    eax,eax
c0010572:	c3                   	ret    
c0010573:	90                   	nop

c0010574 <Pipe::~Pipe()>:
c0010574:	83 ec 0c             	sub    esp,0xc
c0010577:	ba e8 8e 02 c0       	mov    edx,0xc0028ee8
c001057c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010580:	89 10                	mov    DWORD PTR [eax],edx
c0010582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010586:	83 ec 0c             	sub    esp,0xc
c0010589:	50                   	push   eax
c001058a:	e8 f7 2c 00 00       	call   c0013286 <UnixFile::~UnixFile()>
c001058f:	83 c4 10             	add    esp,0x10
c0010592:	90                   	nop
c0010593:	83 c4 0c             	add    esp,0xc
c0010596:	c3                   	ret    
c0010597:	90                   	nop

c0010598 <Pipe::~Pipe()>:
c0010598:	83 ec 0c             	sub    esp,0xc
c001059b:	83 ec 0c             	sub    esp,0xc
c001059e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105a2:	e8 cd ff ff ff       	call   c0010574 <Pipe::~Pipe()>
c00105a7:	83 c4 10             	add    esp,0x10
c00105aa:	83 ec 08             	sub    esp,0x8
c00105ad:	6a 20                	push   0x20
c00105af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105b3:	e8 a8 d1 ff ff       	call   c000d760 <operator delete(void*, unsigned long)>
c00105b8:	83 c4 10             	add    esp,0x10
c00105bb:	83 c4 0c             	add    esp,0xc
c00105be:	c3                   	ret    
c00105bf:	90                   	nop

c00105c0 <Pipe::write(unsigned long long, void*, int*)>:
c00105c0:	55                   	push   ebp
c00105c1:	57                   	push   edi
c00105c2:	56                   	push   esi
c00105c3:	53                   	push   ebx
c00105c4:	83 ec 1c             	sub    esp,0x1c
c00105c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00105cb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00105cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00105d3:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00105d6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00105da:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00105dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00105e0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00105e4:	89 d8                	mov    eax,ebx
c00105e6:	89 d6                	mov    esi,edx
c00105e8:	89 d7                	mov    edi,edx
c00105ea:	c1 ff 1f             	sar    edi,0x1f
c00105ed:	03 34 24             	add    esi,DWORD PTR [esp]
c00105f0:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00105f4:	c1 f8 1f             	sar    eax,0x1f
c00105f7:	39 f3                	cmp    ebx,esi
c00105f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00105fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010601:	19 f8                	sbb    eax,edi
c0010603:	b8 01 00 00 00       	mov    eax,0x1
c0010608:	72 72                	jb     c001067c <Pipe::write(unsigned long long, void*, int*)+0xbc>
c001060a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001060d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0010611:	01 d0                	add    eax,edx
c0010613:	99                   	cdq    
c0010614:	f7 fb                	idiv   ebx
c0010616:	89 d8                	mov    eax,ebx
c0010618:	29 d0                	sub    eax,edx
c001061a:	89 d6                	mov    esi,edx
c001061c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001061f:	89 c3                	mov    ebx,eax
c0010621:	c1 fb 1f             	sar    ebx,0x1f
c0010624:	39 c2                	cmp    edx,eax
c0010626:	19 df                	sbb    edi,ebx
c0010628:	bb 00 00 00 00       	mov    ebx,0x0
c001062d:	72 04                	jb     c0010633 <Pipe::write(unsigned long long, void*, int*)+0x73>
c001062f:	89 d3                	mov    ebx,edx
c0010631:	29 c3                	sub    ebx,eax
c0010633:	89 d0                	mov    eax,edx
c0010635:	29 d8                	sub    eax,ebx
c0010637:	74 0d                	je     c0010646 <Pipe::write(unsigned long long, void*, int*)+0x86>
c0010639:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001063c:	89 c1                	mov    ecx,eax
c001063e:	01 f7                	add    edi,esi
c0010640:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010644:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010646:	85 db                	test   ebx,ebx
c0010648:	74 0d                	je     c0010657 <Pipe::write(unsigned long long, void*, int*)+0x97>
c001064a:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001064e:	89 d9                	mov    ecx,ebx
c0010650:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010653:	89 c6                	mov    esi,eax
c0010655:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010657:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c001065a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001065f:	75 10                	jne    c0010671 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0010661:	83 ec 0c             	sub    esp,0xc
c0010664:	68 a5 8e 02 c0       	push   0xc0028ea5
c0010669:	e8 3e f9 ff ff       	call   c000ffac <KePanic(char const*)>
c001066e:	83 c4 10             	add    esp,0x10
c0010671:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010675:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0010678:	89 08                	mov    DWORD PTR [eax],ecx
c001067a:	31 c0                	xor    eax,eax
c001067c:	83 c4 1c             	add    esp,0x1c
c001067f:	5b                   	pop    ebx
c0010680:	5e                   	pop    esi
c0010681:	5f                   	pop    edi
c0010682:	5d                   	pop    ebp
c0010683:	c3                   	ret    

c0010684 <Pipe::read(unsigned long long, void*, int*)>:
c0010684:	55                   	push   ebp
c0010685:	57                   	push   edi
c0010686:	56                   	push   esi
c0010687:	53                   	push   ebx
c0010688:	83 ec 1c             	sub    esp,0x1c
c001068b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001068f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010693:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010697:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001069a:	89 c8                	mov    eax,ecx
c001069c:	99                   	cdq    
c001069d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00106a1:	74 27                	je     c00106ca <Pipe::read(unsigned long long, void*, int*)+0x46>
c00106a3:	39 f9                	cmp    ecx,edi
c00106a5:	89 d1                	mov    ecx,edx
c00106a7:	19 f1                	sbb    ecx,esi
c00106a9:	73 1f                	jae    c00106ca <Pipe::read(unsigned long long, void*, int*)+0x46>
c00106ab:	fa                   	cli    
c00106ac:	ff 05 30 23 03 c0    	inc    DWORD PTR ds:0xc0032330
c00106b2:	e8 7d 64 00 00       	call   c0016b34 <schedule()>
c00106b7:	f0 ff 0d 30 23 03 c0 	lock dec DWORD PTR ds:0xc0032330
c00106be:	83 3d 30 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032330,0x0
c00106c5:	75 d0                	jne    c0010697 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00106c7:	fb                   	sti    
c00106c8:	eb cd                	jmp    c0010697 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00106ca:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00106ce:	39 f8                	cmp    eax,edi
c00106d0:	89 d1                	mov    ecx,edx
c00106d2:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00106d6:	19 f1                	sbb    ecx,esi
c00106d8:	73 08                	jae    c00106e2 <Pipe::read(unsigned long long, void*, int*)+0x5e>
c00106da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00106de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00106e2:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00106e5:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00106e8:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00106ec:	29 f7                	sub    edi,esi
c00106ee:	89 f8                	mov    eax,edi
c00106f0:	99                   	cdq    
c00106f1:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00106f5:	89 d0                	mov    eax,edx
c00106f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00106fb:	19 c2                	sbb    edx,eax
c00106fd:	89 f8                	mov    eax,edi
c00106ff:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c0010704:	89 ea                	mov    edx,ebp
c0010706:	29 c2                	sub    edx,eax
c0010708:	85 c0                	test   eax,eax
c001070a:	74 0b                	je     c0010717 <Pipe::read(unsigned long long, void*, int*)+0x93>
c001070c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001070f:	89 c1                	mov    ecx,eax
c0010711:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0010715:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010717:	85 d2                	test   edx,edx
c0010719:	74 0d                	je     c0010728 <Pipe::read(unsigned long long, void*, int*)+0xa4>
c001071b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001071f:	89 d1                	mov    ecx,edx
c0010721:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0010724:	89 c7                	mov    edi,eax
c0010726:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010728:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001072b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001072e:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0010731:	99                   	cdq    
c0010732:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010736:	89 f7                	mov    edi,esi
c0010738:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001073c:	c1 ff 1f             	sar    edi,0x1f
c001073f:	57                   	push   edi
c0010740:	56                   	push   esi
c0010741:	52                   	push   edx
c0010742:	50                   	push   eax
c0010743:	e8 8c 1b 01 00       	call   c00222d4 <__umoddi3>
c0010748:	83 c4 10             	add    esp,0x10
c001074b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010750:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010753:	75 10                	jne    c0010765 <Pipe::read(unsigned long long, void*, int*)+0xe1>
c0010755:	83 ec 0c             	sub    esp,0xc
c0010758:	68 c2 8e 02 c0       	push   0xc0028ec2
c001075d:	e8 4a f8 ff ff       	call   c000ffac <KePanic(char const*)>
c0010762:	83 c4 10             	add    esp,0x10
c0010765:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010769:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001076d:	89 10                	mov    DWORD PTR [eax],edx
c001076f:	83 c4 1c             	add    esp,0x1c
c0010772:	31 c0                	xor    eax,eax
c0010774:	5b                   	pop    ebx
c0010775:	5e                   	pop    esi
c0010776:	5f                   	pop    edi
c0010777:	5d                   	pop    ebp
c0010778:	c3                   	ret    
c0010779:	90                   	nop

c001077a <Pipe::Pipe(int)>:
c001077a:	83 ec 0c             	sub    esp,0xc
c001077d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010781:	83 ec 08             	sub    esp,0x8
c0010784:	6a 00                	push   0x0
c0010786:	50                   	push   eax
c0010787:	e8 14 29 00 00       	call   c00130a0 <UnixFile::UnixFile(int)>
c001078c:	83 c4 10             	add    esp,0x10
c001078f:	ba e8 8e 02 c0       	mov    edx,0xc0028ee8
c0010794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010798:	89 10                	mov    DWORD PTR [eax],edx
c001079a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001079e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00107a2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00107a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107a9:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00107b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107b4:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00107bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00107bf:	83 ec 0c             	sub    esp,0xc
c00107c2:	50                   	push   eax
c00107c3:	e8 90 f3 ff ff       	call   c000fb58 <malloc>
c00107c8:	83 c4 10             	add    esp,0x10
c00107cb:	89 c2                	mov    edx,eax
c00107cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107d1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00107d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107d8:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00107dc:	90                   	nop
c00107dd:	83 c4 0c             	add    esp,0xc
c00107e0:	c3                   	ret    

c00107e1 <KePowerThread(void*)>:
c00107e1:	83 ec 0c             	sub    esp,0xc
c00107e4:	f0 ff 0d 30 23 03 c0 	lock dec DWORD PTR ds:0xc0032330
c00107eb:	83 3d 30 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032330,0x0
c00107f2:	75 01                	jne    c00107f5 <KePowerThread(void*)+0x14>
c00107f4:	fb                   	sti    
c00107f5:	50                   	push   eax
c00107f6:	50                   	push   eax
c00107f7:	6a 00                	push   0x0
c00107f9:	6a 0a                	push   0xa
c00107fb:	c6 05 ac 21 03 c0 00 	mov    BYTE PTR ds:0xc00321ac,0x0
c0010802:	e8 39 65 00 00       	call   c0016d40 <sleep(unsigned long long)>
c0010807:	83 c4 10             	add    esp,0x10
c001080a:	83 05 e4 21 03 c0 0a 	add    DWORD PTR ds:0xc00321e4,0xa
c0010811:	eb e2                	jmp    c00107f5 <KePowerThread(void*)+0x14>

c0010813 <KeChangePowerSettings(PowerSettings)>:
c0010813:	57                   	push   edi
c0010814:	b9 09 00 00 00       	mov    ecx,0x9
c0010819:	56                   	push   esi
c001081a:	bf c0 21 03 c0       	mov    edi,0xc00321c0
c001081f:	fc                   	cld    
c0010820:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010824:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010826:	5e                   	pop    esi
c0010827:	5f                   	pop    edi
c0010828:	c3                   	ret    

c0010829 <KeUserIOReceived()>:
c0010829:	c7 05 e4 21 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00321e4,0x0
c0010833:	c3                   	ret    

c0010834 <KeSetupPowerManager()>:
c0010834:	83 ec 0c             	sub    esp,0xc
c0010837:	68 f0 00 00 00       	push   0xf0
c001083c:	6a 00                	push   0x0
c001083e:	68 e1 07 01 c0       	push   0xc00107e1
c0010843:	ff 35 58 23 03 c0    	push   DWORD PTR ds:0xc0032358
c0010849:	c7 05 e4 21 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00321e4,0x0
c0010853:	c6 05 ac 21 03 c0 00 	mov    BYTE PTR ds:0xc00321ac,0x0
c001085a:	e8 21 60 00 00       	call   c0016880 <Process::createThread(void (*)(void*), void*, int)>
c001085f:	c7 05 c0 21 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc00321c0,0x2
c0010869:	c7 05 c4 21 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00321c4,0x1
c0010873:	c7 05 c8 21 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc00321c8,0x3
c001087d:	c7 05 cc 21 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00321cc,0x0
c0010887:	c7 05 d8 21 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00321d8,0x0
c0010891:	c7 05 d0 21 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00321d0,0x0
c001089b:	c7 05 dc 21 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00321dc,0x0
c00108a5:	c7 05 d4 21 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00321d4,0x3c
c00108af:	c7 05 e0 21 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00321e0,0x3c
c00108b9:	83 c4 1c             	add    esp,0x1c
c00108bc:	c3                   	ret    

c00108bd <KePrepareShutdown()>:
c00108bd:	83 ec 0c             	sub    esp,0xc
c00108c0:	e8 67 cd ff ff       	call   c000d62c <KeExecuteAtexit()>
c00108c5:	a1 08 21 03 c0       	mov    eax,ds:0xc0032108
c00108ca:	83 ec 0c             	sub    esp,0xc
c00108cd:	ff b0 64 01 00 00    	push   DWORD PTR [eax+0x164]
c00108d3:	e8 5e 98 ff ff       	call   c000a136 <Device::closeAll()>
c00108d8:	83 c4 1c             	add    esp,0x1c
c00108db:	c3                   	ret    

c00108dc <KeRegisterShutdownHandler(void (*)())>:
c00108dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108e0:	a3 a8 21 03 c0       	mov    ds:0xc00321a8,eax
c00108e5:	c3                   	ret    

c00108e6 <KeRegisterRestartHandler(void (*)())>:
c00108e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108ea:	a3 a4 21 03 c0       	mov    ds:0xc00321a4,eax
c00108ef:	c3                   	ret    

c00108f0 <KeRegisterSleepHandler(void (*)())>:
c00108f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108f4:	a3 a0 21 03 c0       	mov    ds:0xc00321a0,eax
c00108f9:	c3                   	ret    

c00108fa <KeShutdown()>:
c00108fa:	83 ec 0c             	sub    esp,0xc
c00108fd:	e8 bb ff ff ff       	call   c00108bd <KePrepareShutdown()>
c0010902:	a1 a8 21 03 c0       	mov    eax,ds:0xc00321a8
c0010907:	85 c0                	test   eax,eax
c0010909:	74 04                	je     c001090f <KeShutdown()+0x15>
c001090b:	ff d0                	call   eax
c001090d:	eb 10                	jmp    c001091f <KeShutdown()+0x25>
c001090f:	83 ec 0c             	sub    esp,0xc
c0010912:	68 fc 8e 02 c0       	push   0xc0028efc
c0010917:	e8 90 f6 ff ff       	call   c000ffac <KePanic(char const*)>
c001091c:	83 c4 10             	add    esp,0x10
c001091f:	83 ec 0c             	sub    esp,0xc
c0010922:	68 1d 8f 02 c0       	push   0xc0028f1d
c0010927:	e8 80 f6 ff ff       	call   c000ffac <KePanic(char const*)>
c001092c:	83 c4 1c             	add    esp,0x1c
c001092f:	c3                   	ret    

c0010930 <KeSleep()>:
c0010930:	a1 a0 21 03 c0       	mov    eax,ds:0xc00321a0
c0010935:	85 c0                	test   eax,eax
c0010937:	74 02                	je     c001093b <KeSleep()+0xb>
c0010939:	ff e0                	jmp    eax
c001093b:	c3                   	ret    

c001093c <KeHandlePowerButton()>:
c001093c:	a1 c0 21 03 c0       	mov    eax,ds:0xc00321c0
c0010941:	83 f8 02             	cmp    eax,0x2
c0010944:	75 02                	jne    c0010948 <KeHandlePowerButton()+0xc>
c0010946:	eb b2                	jmp    c00108fa <KeShutdown()>
c0010948:	48                   	dec    eax
c0010949:	75 02                	jne    c001094d <KeHandlePowerButton()+0x11>
c001094b:	eb e3                	jmp    c0010930 <KeSleep()>
c001094d:	c3                   	ret    

c001094e <KeHandleSleepButton()>:
c001094e:	a1 c4 21 03 c0       	mov    eax,ds:0xc00321c4
c0010953:	83 f8 02             	cmp    eax,0x2
c0010956:	75 02                	jne    c001095a <KeHandleSleepButton()+0xc>
c0010958:	eb a0                	jmp    c00108fa <KeShutdown()>
c001095a:	48                   	dec    eax
c001095b:	75 02                	jne    c001095f <KeHandleSleepButton()+0x11>
c001095d:	eb d1                	jmp    c0010930 <KeSleep()>
c001095f:	c3                   	ret    

c0010960 <KeRestart()>:
c0010960:	83 ec 0c             	sub    esp,0xc
c0010963:	e8 55 ff ff ff       	call   c00108bd <KePrepareShutdown()>
c0010968:	a1 a4 21 03 c0       	mov    eax,ds:0xc00321a4
c001096d:	85 c0                	test   eax,eax
c001096f:	74 02                	je     c0010973 <KeRestart()+0x13>
c0010971:	ff d0                	call   eax
c0010973:	83 ec 0c             	sub    esp,0xc
c0010976:	68 41 8f 02 c0       	push   0xc0028f41
c001097b:	e8 2c f6 ff ff       	call   c000ffac <KePanic(char const*)>
c0010980:	83 c4 1c             	add    esp,0x1c
c0010983:	c3                   	ret    

c0010984 <KeRand()>:
c0010984:	69 05 e8 21 03 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc00321e8,0x2875
c001098e:	69 0d ec 21 03 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc00321ec,0xa2e7b175
c0010998:	53                   	push   ebx
c0010999:	01 c1                	add    ecx,eax
c001099b:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00109a0:	f7 25 e8 21 03 c0    	mul    DWORD PTR ds:0xc00321e8
c00109a6:	01 ca                	add    edx,ecx
c00109a8:	05 ef 04 b5 00       	add    eax,0xb504ef
c00109ad:	a3 e8 21 03 c0       	mov    ds:0xc00321e8,eax
c00109b2:	83 d2 00             	adc    edx,0x0
c00109b5:	0f b7 da             	movzx  ebx,dx
c00109b8:	89 1d ec 21 03 c0    	mov    DWORD PTR ds:0xc00321ec,ebx
c00109be:	0f ac d8 0e          	shrd   eax,ebx,0xe
c00109c2:	5b                   	pop    ebx
c00109c3:	c3                   	ret    

c00109c4 <KeSeedRand(unsigned int)>:
c00109c4:	53                   	push   ebx
c00109c5:	83 ec 08             	sub    esp,0x8
c00109c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00109cc:	e8 86 a4 00 00       	call   c001ae57 <HalGetRand()>
c00109d1:	c7 05 ec 21 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00321ec,0x0
c00109db:	31 d8                	xor    eax,ebx
c00109dd:	a3 e8 21 03 c0       	mov    ds:0xc00321e8,eax
c00109e2:	e8 9d ff ff ff       	call   c0010984 <KeRand()>
c00109e7:	83 c4 08             	add    esp,0x8
c00109ea:	5b                   	pop    ebx
c00109eb:	eb 97                	jmp    c0010984 <KeRand()>

c00109ed <KeInitRand()>:
c00109ed:	83 ec 0c             	sub    esp,0xc
c00109f0:	e8 30 a2 00 00       	call   c001ac25 <HalQueryPerformanceCounter()>
c00109f5:	0f 20 da             	mov    edx,cr3
c00109f8:	0f 22 da             	mov    cr3,edx
c00109fb:	0f 20 da             	mov    edx,cr3
c00109fe:	0f 22 da             	mov    cr3,edx
c0010a01:	0f 20 da             	mov    edx,cr3
c0010a04:	0f 22 da             	mov    cr3,edx
c0010a07:	0f 20 da             	mov    edx,cr3
c0010a0a:	0f 22 da             	mov    cr3,edx
c0010a0d:	83 ec 0c             	sub    esp,0xc
c0010a10:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010a15:	50                   	push   eax
c0010a16:	e8 a9 ff ff ff       	call   c00109c4 <KeSeedRand(unsigned int)>
c0010a1b:	83 c4 1c             	add    esp,0x1c
c0010a1e:	c3                   	ret    
c0010a1f:	90                   	nop

c0010a20 <KeResolveCompatibilitySymbol(char*)>:
c0010a20:	83 ec 0c             	sub    esp,0xc
c0010a23:	83 ec 08             	sub    esp,0x8
c0010a26:	68 50 8f 02 c0       	push   0xc0028f50
c0010a2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a2f:	e8 4c fd fe ff       	call   c0000780 <strcmp>
c0010a34:	83 c4 10             	add    esp,0x10
c0010a37:	85 c0                	test   eax,eax
c0010a39:	0f 94 c0             	sete   al
c0010a3c:	0f b6 c0             	movzx  eax,al
c0010a3f:	85 c0                	test   eax,eax
c0010a41:	74 0d                	je     c0010a50 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010a43:	b8 08 21 03 c0       	mov    eax,0xc0032108
c0010a48:	e9 3b 02 00 00       	jmp    c0010c88 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0010a50:	83 ec 08             	sub    esp,0x8
c0010a53:	68 59 8f 02 c0       	push   0xc0028f59
c0010a58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a5c:	e8 1f fd fe ff       	call   c0000780 <strcmp>
c0010a61:	83 c4 10             	add    esp,0x10
c0010a64:	85 c0                	test   eax,eax
c0010a66:	0f 94 c0             	sete   al
c0010a69:	0f b6 c0             	movzx  eax,al
c0010a6c:	85 c0                	test   eax,eax
c0010a6e:	74 0c                	je     c0010a7c <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010a70:	b8 d4 21 02 c0       	mov    eax,0xc00221d4
c0010a75:	e9 0e 02 00 00       	jmp    c0010c88 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010a7a:	66 90                	xchg   ax,ax
c0010a7c:	83 ec 08             	sub    esp,0x8
c0010a7f:	68 63 8f 02 c0       	push   0xc0028f63
c0010a84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a88:	e8 f3 fc fe ff       	call   c0000780 <strcmp>
c0010a8d:	83 c4 10             	add    esp,0x10
c0010a90:	85 c0                	test   eax,eax
c0010a92:	0f 94 c0             	sete   al
c0010a95:	0f b6 c0             	movzx  eax,al
c0010a98:	85 c0                	test   eax,eax
c0010a9a:	74 0c                	je     c0010aa8 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010a9c:	b8 08 21 03 c0       	mov    eax,0xc0032108
c0010aa1:	e9 e2 01 00 00       	jmp    c0010c88 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010aa6:	66 90                	xchg   ax,ax
c0010aa8:	83 ec 08             	sub    esp,0x8
c0010aab:	68 76 8f 02 c0       	push   0xc0028f76
c0010ab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ab4:	e8 c7 fc fe ff       	call   c0000780 <strcmp>
c0010ab9:	83 c4 10             	add    esp,0x10
c0010abc:	85 c0                	test   eax,eax
c0010abe:	0f 94 c0             	sete   al
c0010ac1:	0f b6 c0             	movzx  eax,al
c0010ac4:	85 c0                	test   eax,eax
c0010ac6:	74 0c                	je     c0010ad4 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010ac8:	b8 08 1f 02 c0       	mov    eax,0xc0021f08
c0010acd:	e9 b6 01 00 00       	jmp    c0010c88 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010ad2:	66 90                	xchg   ax,ax
c0010ad4:	83 ec 08             	sub    esp,0x8
c0010ad7:	68 7f 8f 02 c0       	push   0xc0028f7f
c0010adc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ae0:	e8 9b fc fe ff       	call   c0000780 <strcmp>
c0010ae5:	83 c4 10             	add    esp,0x10
c0010ae8:	85 c0                	test   eax,eax
c0010aea:	0f 94 c0             	sete   al
c0010aed:	0f b6 c0             	movzx  eax,al
c0010af0:	85 c0                	test   eax,eax
c0010af2:	74 0c                	je     c0010b00 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010af4:	b8 ac ff 00 c0       	mov    eax,0xc000ffac
c0010af9:	e9 8a 01 00 00       	jmp    c0010c88 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010afe:	66 90                	xchg   ax,ax
c0010b00:	83 ec 08             	sub    esp,0x8
c0010b03:	68 92 8f 02 c0       	push   0xc0028f92
c0010b08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b0c:	e8 6f fc fe ff       	call   c0000780 <strcmp>
c0010b11:	83 c4 10             	add    esp,0x10
c0010b14:	85 c0                	test   eax,eax
c0010b16:	0f 94 c0             	sete   al
c0010b19:	0f b6 c0             	movzx  eax,al
c0010b1c:	85 c0                	test   eax,eax
c0010b1e:	74 0c                	je     c0010b2c <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010b20:	b8 b5 d6 00 c0       	mov    eax,0xc000d6b5
c0010b25:	e9 5e 01 00 00       	jmp    c0010c88 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010b2a:	66 90                	xchg   ax,ax
c0010b2c:	83 ec 08             	sub    esp,0x8
c0010b2f:	68 af 8f 02 c0       	push   0xc0028faf
c0010b34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b38:	e8 43 fc fe ff       	call   c0000780 <strcmp>
c0010b3d:	83 c4 10             	add    esp,0x10
c0010b40:	85 c0                	test   eax,eax
c0010b42:	0f 94 c0             	sete   al
c0010b45:	0f b6 c0             	movzx  eax,al
c0010b48:	85 c0                	test   eax,eax
c0010b4a:	74 0c                	je     c0010b58 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010b4c:	b8 d4 22 02 c0       	mov    eax,0xc00222d4
c0010b51:	e9 32 01 00 00       	jmp    c0010c88 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010b56:	66 90                	xchg   ax,ax
c0010b58:	83 ec 08             	sub    esp,0x8
c0010b5b:	68 b9 8f 02 c0       	push   0xc0028fb9
c0010b60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b64:	e8 17 fc fe ff       	call   c0000780 <strcmp>
c0010b69:	83 c4 10             	add    esp,0x10
c0010b6c:	85 c0                	test   eax,eax
c0010b6e:	0f 94 c0             	sete   al
c0010b71:	0f b6 c0             	movzx  eax,al
c0010b74:	85 c0                	test   eax,eax
c0010b76:	74 0c                	je     c0010b84 <KeResolveCompatibilitySymbol(char*)+0x164>
c0010b78:	b8 54 20 02 c0       	mov    eax,0xc0022054
c0010b7d:	e9 06 01 00 00       	jmp    c0010c88 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010b82:	66 90                	xchg   ax,ax
c0010b84:	83 ec 08             	sub    esp,0x8
c0010b87:	68 c2 8f 02 c0       	push   0xc0028fc2
c0010b8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b90:	e8 eb fb fe ff       	call   c0000780 <strcmp>
c0010b95:	83 c4 10             	add    esp,0x10
c0010b98:	85 c0                	test   eax,eax
c0010b9a:	0f 94 c0             	sete   al
c0010b9d:	0f b6 c0             	movzx  eax,al
c0010ba0:	85 c0                	test   eax,eax
c0010ba2:	74 0c                	je     c0010bb0 <KeResolveCompatibilitySymbol(char*)+0x190>
c0010ba4:	b8 0c 21 03 c0       	mov    eax,0xc003210c
c0010ba9:	e9 da 00 00 00       	jmp    c0010c88 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010bae:	66 90                	xchg   ax,ax
c0010bb0:	83 ec 08             	sub    esp,0x8
c0010bb3:	68 da 8f 02 c0       	push   0xc0028fda
c0010bb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bbc:	e8 bf fb fe ff       	call   c0000780 <strcmp>
c0010bc1:	83 c4 10             	add    esp,0x10
c0010bc4:	85 c0                	test   eax,eax
c0010bc6:	0f 94 c0             	sete   al
c0010bc9:	0f b6 c0             	movzx  eax,al
c0010bcc:	85 c0                	test   eax,eax
c0010bce:	74 0c                	je     c0010bdc <KeResolveCompatibilitySymbol(char*)+0x1bc>
c0010bd0:	b8 0c 21 03 c0       	mov    eax,0xc003210c
c0010bd5:	e9 ae 00 00 00       	jmp    c0010c88 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010bda:	66 90                	xchg   ax,ax
c0010bdc:	83 ec 08             	sub    esp,0x8
c0010bdf:	68 e7 8f 02 c0       	push   0xc0028fe7
c0010be4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010be8:	e8 93 fb fe ff       	call   c0000780 <strcmp>
c0010bed:	83 c4 10             	add    esp,0x10
c0010bf0:	85 c0                	test   eax,eax
c0010bf2:	0f 94 c0             	sete   al
c0010bf5:	0f b6 c0             	movzx  eax,al
c0010bf8:	85 c0                	test   eax,eax
c0010bfa:	74 0c                	je     c0010c08 <KeResolveCompatibilitySymbol(char*)+0x1e8>
c0010bfc:	b8 0d 21 03 c0       	mov    eax,0xc003210d
c0010c01:	e9 82 00 00 00       	jmp    c0010c88 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010c06:	66 90                	xchg   ax,ax
c0010c08:	83 ec 08             	sub    esp,0x8
c0010c0b:	68 f4 8f 02 c0       	push   0xc0028ff4
c0010c10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c14:	e8 67 fb fe ff       	call   c0000780 <strcmp>
c0010c19:	83 c4 10             	add    esp,0x10
c0010c1c:	85 c0                	test   eax,eax
c0010c1e:	0f 94 c0             	sete   al
c0010c21:	0f b6 c0             	movzx  eax,al
c0010c24:	85 c0                	test   eax,eax
c0010c26:	74 08                	je     c0010c30 <KeResolveCompatibilitySymbol(char*)+0x210>
c0010c28:	b8 0c 21 03 c0       	mov    eax,0xc003210c
c0010c2d:	eb 59                	jmp    c0010c88 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010c2f:	90                   	nop
c0010c30:	83 ec 08             	sub    esp,0x8
c0010c33:	68 05 90 02 c0       	push   0xc0029005
c0010c38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c3c:	e8 3f fb fe ff       	call   c0000780 <strcmp>
c0010c41:	83 c4 10             	add    esp,0x10
c0010c44:	85 c0                	test   eax,eax
c0010c46:	0f 94 c0             	sete   al
c0010c49:	0f b6 c0             	movzx  eax,al
c0010c4c:	85 c0                	test   eax,eax
c0010c4e:	74 08                	je     c0010c58 <KeResolveCompatibilitySymbol(char*)+0x238>
c0010c50:	b8 0d 21 03 c0       	mov    eax,0xc003210d
c0010c55:	eb 31                	jmp    c0010c88 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010c57:	90                   	nop
c0010c58:	83 ec 08             	sub    esp,0x8
c0010c5b:	68 16 90 02 c0       	push   0xc0029016
c0010c60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c64:	e8 17 fb fe ff       	call   c0000780 <strcmp>
c0010c69:	83 c4 10             	add    esp,0x10
c0010c6c:	85 c0                	test   eax,eax
c0010c6e:	0f 94 c0             	sete   al
c0010c71:	0f b6 c0             	movzx  eax,al
c0010c74:	85 c0                	test   eax,eax
c0010c76:	74 08                	je     c0010c80 <KeResolveCompatibilitySymbol(char*)+0x260>
c0010c78:	b8 28 73 01 c0       	mov    eax,0xc0017328
c0010c7d:	eb 09                	jmp    c0010c88 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010c7f:	90                   	nop
c0010c80:	b8 00 00 00 00       	mov    eax,0x0
c0010c85:	8d 76 00             	lea    esi,[esi+0x0]
c0010c88:	83 c4 0c             	add    esp,0xc
c0010c8b:	c3                   	ret    

c0010c8c <Semaphore::Semaphore(int)>:
c0010c8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c94:	89 10                	mov    DWORD PTR [eax],edx
c0010c96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c9a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0010ca1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ca5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010cac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cb0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0010cb7:	90                   	nop
c0010cb8:	c3                   	ret    
c0010cb9:	90                   	nop
c0010cba:	66 90                	xchg   ax,ax

c0010cbc <Semaphore::tryAcquire()>:
c0010cbc:	83 ec 0c             	sub    esp,0xc
c0010cbf:	fa                   	cli    
c0010cc0:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0010cc5:	83 c0 01             	add    eax,0x1
c0010cc8:	a3 30 23 03 c0       	mov    ds:0xc0032330,eax
c0010ccd:	a1 2c 23 03 c0       	mov    eax,ds:0xc003232c
c0010cd2:	83 c0 01             	add    eax,0x1
c0010cd5:	a3 2c 23 03 c0       	mov    ds:0xc003232c,eax
c0010cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cde:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010ce1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ce5:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ce7:	39 c2                	cmp    edx,eax
c0010ce9:	7d 59                	jge    c0010d44 <Semaphore::tryAcquire()+0x88>
c0010ceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010cf2:	8d 50 01             	lea    edx,[eax+0x1]
c0010cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cf9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010cfc:	a1 2c 23 03 c0       	mov    eax,ds:0xc003232c
c0010d01:	83 e8 01             	sub    eax,0x1
c0010d04:	a3 2c 23 03 c0       	mov    ds:0xc003232c,eax
c0010d09:	a1 2c 23 03 c0       	mov    eax,ds:0xc003232c
c0010d0e:	85 c0                	test   eax,eax
c0010d10:	75 1a                	jne    c0010d2c <Semaphore::tryAcquire()+0x70>
c0010d12:	a1 28 23 03 c0       	mov    eax,ds:0xc0032328
c0010d17:	85 c0                	test   eax,eax
c0010d19:	74 11                	je     c0010d2c <Semaphore::tryAcquire()+0x70>
c0010d1b:	c7 05 28 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032328,0x0
c0010d25:	e8 0a 5e 00 00       	call   c0016b34 <schedule()>
c0010d2a:	66 90                	xchg   ax,ax
c0010d2c:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c0010d34:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0010d39:	85 c0                	test   eax,eax
c0010d3b:	75 03                	jne    c0010d40 <Semaphore::tryAcquire()+0x84>
c0010d3d:	fb                   	sti    
c0010d3e:	66 90                	xchg   ax,ax
c0010d40:	b0 01                	mov    al,0x1
c0010d42:	eb 48                	jmp    c0010d8c <Semaphore::tryAcquire()+0xd0>
c0010d44:	a1 2c 23 03 c0       	mov    eax,ds:0xc003232c
c0010d49:	83 e8 01             	sub    eax,0x1
c0010d4c:	a3 2c 23 03 c0       	mov    ds:0xc003232c,eax
c0010d51:	a1 2c 23 03 c0       	mov    eax,ds:0xc003232c
c0010d56:	85 c0                	test   eax,eax
c0010d58:	75 1a                	jne    c0010d74 <Semaphore::tryAcquire()+0xb8>
c0010d5a:	a1 28 23 03 c0       	mov    eax,ds:0xc0032328
c0010d5f:	85 c0                	test   eax,eax
c0010d61:	74 11                	je     c0010d74 <Semaphore::tryAcquire()+0xb8>
c0010d63:	c7 05 28 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032328,0x0
c0010d6d:	e8 c2 5d 00 00       	call   c0016b34 <schedule()>
c0010d72:	66 90                	xchg   ax,ax
c0010d74:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c0010d7c:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0010d81:	85 c0                	test   eax,eax
c0010d83:	75 03                	jne    c0010d88 <Semaphore::tryAcquire()+0xcc>
c0010d85:	fb                   	sti    
c0010d86:	66 90                	xchg   ax,ax
c0010d88:	b0 00                	mov    al,0x0
c0010d8a:	66 90                	xchg   ax,ax
c0010d8c:	83 c4 0c             	add    esp,0xc
c0010d8f:	c3                   	ret    

c0010d90 <Semaphore::assertLocked(char const*)>:
c0010d90:	83 ec 0c             	sub    esp,0xc
c0010d93:	fa                   	cli    
c0010d94:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0010d99:	83 c0 01             	add    eax,0x1
c0010d9c:	a3 30 23 03 c0       	mov    ds:0xc0032330,eax
c0010da1:	a1 2c 23 03 c0       	mov    eax,ds:0xc003232c
c0010da6:	83 c0 01             	add    eax,0x1
c0010da9:	a3 2c 23 03 c0       	mov    ds:0xc003232c,eax
c0010dae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010db2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010db5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010db9:	8b 00                	mov    eax,DWORD PTR [eax]
c0010dbb:	39 c2                	cmp    edx,eax
c0010dbd:	7d 11                	jge    c0010dd0 <Semaphore::assertLocked(char const*)+0x40>
c0010dbf:	83 ec 0c             	sub    esp,0xc
c0010dc2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010dc6:	e8 e1 f1 ff ff       	call   c000ffac <KePanic(char const*)>
c0010dcb:	83 c4 10             	add    esp,0x10
c0010dce:	66 90                	xchg   ax,ax
c0010dd0:	a1 2c 23 03 c0       	mov    eax,ds:0xc003232c
c0010dd5:	83 e8 01             	sub    eax,0x1
c0010dd8:	a3 2c 23 03 c0       	mov    ds:0xc003232c,eax
c0010ddd:	a1 2c 23 03 c0       	mov    eax,ds:0xc003232c
c0010de2:	85 c0                	test   eax,eax
c0010de4:	75 1a                	jne    c0010e00 <Semaphore::assertLocked(char const*)+0x70>
c0010de6:	a1 28 23 03 c0       	mov    eax,ds:0xc0032328
c0010deb:	85 c0                	test   eax,eax
c0010ded:	74 11                	je     c0010e00 <Semaphore::assertLocked(char const*)+0x70>
c0010def:	c7 05 28 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032328,0x0
c0010df9:	e8 36 5d 00 00       	call   c0016b34 <schedule()>
c0010dfe:	66 90                	xchg   ax,ax
c0010e00:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c0010e08:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0010e0d:	85 c0                	test   eax,eax
c0010e0f:	75 03                	jne    c0010e14 <Semaphore::assertLocked(char const*)+0x84>
c0010e11:	fb                   	sti    
c0010e12:	66 90                	xchg   ax,ax
c0010e14:	90                   	nop
c0010e15:	83 c4 0c             	add    esp,0xc
c0010e18:	c3                   	ret    
c0010e19:	90                   	nop
c0010e1a:	66 90                	xchg   ax,ax

c0010e1c <Semaphore::acquire(int)>:
c0010e1c:	83 ec 1c             	sub    esp,0x1c
c0010e1f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0010e24:	0f 84 ae 00 00 00    	je     c0010ed8 <Semaphore::acquire(int)+0xbc>
c0010e2a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010e32:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0010e37:	90                   	nop
c0010e38:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0010e3d:	85 c0                	test   eax,eax
c0010e3f:	0f 84 87 00 00 00    	je     c0010ecc <Semaphore::acquire(int)+0xb0>
c0010e45:	83 ec 0c             	sub    esp,0xc
c0010e48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e4c:	e8 6b fe ff ff       	call   c0010cbc <Semaphore::tryAcquire()>
c0010e51:	83 c4 10             	add    esp,0x10
c0010e54:	83 f0 01             	xor    eax,0x1
c0010e57:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0010e5b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0010e5f:	83 f0 01             	xor    eax,0x1
c0010e62:	0f b6 c0             	movzx  eax,al
c0010e65:	85 c0                	test   eax,eax
c0010e67:	75 5f                	jne    c0010ec8 <Semaphore::acquire(int)+0xac>
c0010e69:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0010e6e:	7f 34                	jg     c0010ea4 <Semaphore::acquire(int)+0x88>
c0010e70:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010e74:	89 d0                	mov    eax,edx
c0010e76:	c1 e0 02             	shl    eax,0x2
c0010e79:	01 d0                	add    eax,edx
c0010e7b:	d1 e0                	shl    eax,1
c0010e7d:	89 c2                	mov    edx,eax
c0010e7f:	c1 fa 1f             	sar    edx,0x1f
c0010e82:	83 ec 08             	sub    esp,0x8
c0010e85:	52                   	push   edx
c0010e86:	50                   	push   eax
c0010e87:	e8 9c 5e 00 00       	call   c0016d28 <milliTenthSleep(unsigned long long)>
c0010e8c:	83 c4 10             	add    esp,0x10
c0010e8f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010e93:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0010e97:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0010e9f:	eb 97                	jmp    c0010e38 <Semaphore::acquire(int)+0x1c>
c0010ea1:	8d 76 00             	lea    esi,[esi+0x0]
c0010ea4:	83 ec 08             	sub    esp,0x8
c0010ea7:	6a 00                	push   0x0
c0010ea9:	68 90 01 00 00       	push   0x190
c0010eae:	e8 75 5e 00 00       	call   c0016d28 <milliTenthSleep(unsigned long long)>
c0010eb3:	83 c4 10             	add    esp,0x10
c0010eb6:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0010ebb:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0010ec0:	e9 73 ff ff ff       	jmp    c0010e38 <Semaphore::acquire(int)+0x1c>
c0010ec5:	8d 76 00             	lea    esi,[esi+0x0]
c0010ec8:	90                   	nop
c0010ec9:	8d 76 00             	lea    esi,[esi+0x0]
c0010ecc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ed0:	e9 fb 00 00 00       	jmp    c0010fd0 <Semaphore::acquire(int)+0x1b4>
c0010ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0010ed8:	fa                   	cli    
c0010ed9:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0010ede:	83 c0 01             	add    eax,0x1
c0010ee1:	a3 30 23 03 c0       	mov    ds:0xc0032330,eax
c0010ee6:	a1 2c 23 03 c0       	mov    eax,ds:0xc003232c
c0010eeb:	83 c0 01             	add    eax,0x1
c0010eee:	a3 2c 23 03 c0       	mov    ds:0xc003232c,eax
c0010ef3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ef7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010efa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010efe:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f00:	39 c2                	cmp    edx,eax
c0010f02:	7d 14                	jge    c0010f18 <Semaphore::acquire(int)+0xfc>
c0010f04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f08:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010f0b:	8d 50 01             	lea    edx,[eax+0x1]
c0010f0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f12:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010f15:	eb 6d                	jmp    c0010f84 <Semaphore::acquire(int)+0x168>
c0010f17:	90                   	nop
c0010f18:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010f1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f1f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010f26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f2d:	85 c0                	test   eax,eax
c0010f2f:	75 13                	jne    c0010f44 <Semaphore::acquire(int)+0x128>
c0010f31:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010f36:	8b 10                	mov    edx,DWORD PTR [eax]
c0010f38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f3c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f3f:	eb 17                	jmp    c0010f58 <Semaphore::acquire(int)+0x13c>
c0010f41:	8d 76 00             	lea    esi,[esi+0x0]
c0010f44:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0010f49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f4d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010f50:	8b 12                	mov    edx,DWORD PTR [edx]
c0010f52:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010f55:	8d 76 00             	lea    esi,[esi+0x0]
c0010f58:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010f5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0010f5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f63:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010f66:	83 ec 0c             	sub    esp,0xc
c0010f69:	68 2c 90 02 c0       	push   0xc002902c
c0010f6e:	e8 f3 5f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010f73:	83 c4 10             	add    esp,0x10
c0010f76:	83 ec 0c             	sub    esp,0xc
c0010f79:	6a 05                	push   0x5
c0010f7b:	e8 74 5c 00 00       	call   c0016bf4 <blockTask(TaskState)>
c0010f80:	83 c4 10             	add    esp,0x10
c0010f83:	90                   	nop
c0010f84:	a1 2c 23 03 c0       	mov    eax,ds:0xc003232c
c0010f89:	83 e8 01             	sub    eax,0x1
c0010f8c:	a3 2c 23 03 c0       	mov    ds:0xc003232c,eax
c0010f91:	a1 2c 23 03 c0       	mov    eax,ds:0xc003232c
c0010f96:	85 c0                	test   eax,eax
c0010f98:	75 1a                	jne    c0010fb4 <Semaphore::acquire(int)+0x198>
c0010f9a:	a1 28 23 03 c0       	mov    eax,ds:0xc0032328
c0010f9f:	85 c0                	test   eax,eax
c0010fa1:	74 11                	je     c0010fb4 <Semaphore::acquire(int)+0x198>
c0010fa3:	c7 05 28 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032328,0x0
c0010fad:	e8 82 5b 00 00       	call   c0016b34 <schedule()>
c0010fb2:	66 90                	xchg   ax,ax
c0010fb4:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c0010fbc:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0010fc1:	85 c0                	test   eax,eax
c0010fc3:	75 03                	jne    c0010fc8 <Semaphore::acquire(int)+0x1ac>
c0010fc5:	fb                   	sti    
c0010fc6:	66 90                	xchg   ax,ax
c0010fc8:	b8 00 00 00 00       	mov    eax,0x0
c0010fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0010fd0:	83 c4 1c             	add    esp,0x1c
c0010fd3:	c3                   	ret    

c0010fd4 <Semaphore::acquire()>:
c0010fd4:	83 ec 0c             	sub    esp,0xc
c0010fd7:	83 ec 08             	sub    esp,0x8
c0010fda:	6a 00                	push   0x0
c0010fdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fe0:	e8 37 fe ff ff       	call   c0010e1c <Semaphore::acquire(int)>
c0010fe5:	83 c4 10             	add    esp,0x10
c0010fe8:	90                   	nop
c0010fe9:	83 c4 0c             	add    esp,0xc
c0010fec:	c3                   	ret    
c0010fed:	90                   	nop
c0010fee:	66 90                	xchg   ax,ax

c0010ff0 <Semaphore::release()>:
c0010ff0:	83 ec 1c             	sub    esp,0x1c
c0010ff3:	fa                   	cli    
c0010ff4:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0010ff9:	83 c0 01             	add    eax,0x1
c0010ffc:	a3 30 23 03 c0       	mov    ds:0xc0032330,eax
c0011001:	a1 2c 23 03 c0       	mov    eax,ds:0xc003232c
c0011006:	83 c0 01             	add    eax,0x1
c0011009:	a3 2c 23 03 c0       	mov    ds:0xc003232c,eax
c001100e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011012:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011015:	85 c0                	test   eax,eax
c0011017:	74 2b                	je     c0011044 <Semaphore::release()+0x54>
c0011019:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001101d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011020:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011024:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011028:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001102b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001102f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011032:	83 ec 0c             	sub    esp,0xc
c0011035:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011039:	e8 4e 5e 00 00       	call   c0016e8c <unblockTask(ThreadControlBlock*)>
c001103e:	83 c4 10             	add    esp,0x10
c0011041:	eb 15                	jmp    c0011058 <Semaphore::release()+0x68>
c0011043:	90                   	nop
c0011044:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011048:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001104b:	8d 50 ff             	lea    edx,[eax-0x1]
c001104e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011052:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011055:	8d 76 00             	lea    esi,[esi+0x0]
c0011058:	a1 2c 23 03 c0       	mov    eax,ds:0xc003232c
c001105d:	83 e8 01             	sub    eax,0x1
c0011060:	a3 2c 23 03 c0       	mov    ds:0xc003232c,eax
c0011065:	a1 2c 23 03 c0       	mov    eax,ds:0xc003232c
c001106a:	85 c0                	test   eax,eax
c001106c:	75 1a                	jne    c0011088 <Semaphore::release()+0x98>
c001106e:	a1 28 23 03 c0       	mov    eax,ds:0xc0032328
c0011073:	85 c0                	test   eax,eax
c0011075:	74 11                	je     c0011088 <Semaphore::release()+0x98>
c0011077:	c7 05 28 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032328,0x0
c0011081:	e8 ae 5a 00 00       	call   c0016b34 <schedule()>
c0011086:	66 90                	xchg   ax,ax
c0011088:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c0011090:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0011095:	85 c0                	test   eax,eax
c0011097:	75 03                	jne    c001109c <Semaphore::release()+0xac>
c0011099:	fb                   	sti    
c001109a:	66 90                	xchg   ax,ax
c001109c:	90                   	nop
c001109d:	83 c4 1c             	add    esp,0x1c
c00110a0:	c3                   	ret    

c00110a1 <KiSigKill(int)>:
c00110a1:	83 ec 0c             	sub    esp,0xc
c00110a4:	6a 00                	push   0x0
c00110a6:	6a 00                	push   0x0
c00110a8:	6a ff                	push   0xffffffff
c00110aa:	6a 01                	push   0x1
c00110ac:	e8 a1 bf 01 00       	call   c002d052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00110b1:	83 c4 1c             	add    esp,0x1c
c00110b4:	c3                   	ret    

c00110b5 <KiDefaultSignalHandlerIgnore(int)>:
c00110b5:	c3                   	ret    

c00110b6 <KiDefaultSignalHandlerPause(int)>:
c00110b6:	57                   	push   edi
c00110b7:	b9 07 00 00 00       	mov    ecx,0x7
c00110bc:	56                   	push   esi
c00110bd:	be 87 90 02 c0       	mov    esi,0xc0029087
c00110c2:	83 ec 24             	sub    esp,0x24
c00110c5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00110c9:	fc                   	cld    
c00110ca:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00110cc:	8d 44 24 04          	lea    eax,[esp+0x4]
c00110d0:	50                   	push   eax
c00110d1:	6a 00                	push   0x0
c00110d3:	6a 00                	push   0x0
c00110d5:	6a 27                	push   0x27
c00110d7:	e8 76 bf 01 00       	call   c002d052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00110dc:	83 c4 34             	add    esp,0x34
c00110df:	5e                   	pop    esi
c00110e0:	5f                   	pop    edi
c00110e1:	c3                   	ret    

c00110e2 <KiDefaultSignalHandlerResume(int)>:
c00110e2:	57                   	push   edi
c00110e3:	b9 1d 00 00 00       	mov    ecx,0x1d
c00110e8:	56                   	push   esi
c00110e9:	be a3 90 02 c0       	mov    esi,0xc00290a3
c00110ee:	83 ec 24             	sub    esp,0x24
c00110f1:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00110f5:	fc                   	cld    
c00110f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110f8:	8d 44 24 03          	lea    eax,[esp+0x3]
c00110fc:	50                   	push   eax
c00110fd:	6a 00                	push   0x0
c00110ff:	6a 00                	push   0x0
c0011101:	6a 27                	push   0x27
c0011103:	e8 4a bf 01 00       	call   c002d052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011108:	83 c4 34             	add    esp,0x34
c001110b:	5e                   	pop    esi
c001110c:	5f                   	pop    edi
c001110d:	c3                   	ret    

c001110e <KeDeinitSignals(SigHandlerBlock*)>:
c001110e:	e9 55 ea ff ff       	jmp    c000fb68 <free>

c0011113 <KeInitSignals()>:
c0011113:	53                   	push   ebx
c0011114:	83 ec 14             	sub    esp,0x14
c0011117:	68 c8 00 00 00       	push   0xc8
c001111c:	e8 37 ea ff ff       	call   c000fb58 <malloc>
c0011121:	83 c4 0c             	add    esp,0xc
c0011124:	6a 04                	push   0x4
c0011126:	6a 00                	push   0x0
c0011128:	50                   	push   eax
c0011129:	89 c3                	mov    ebx,eax
c001112b:	e8 c0 f3 fe ff       	call   c00004f0 <memset>
c0011130:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0011136:	83 c4 0c             	add    esp,0xc
c0011139:	c7 83 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xbc],0x0
c0011143:	c7 83 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xc0],0x0
c001114d:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011154:	6a 20                	push   0x20
c0011156:	6a 00                	push   0x0
c0011158:	50                   	push   eax
c0011159:	e8 92 f3 fe ff       	call   c00004f0 <memset>
c001115e:	83 c4 0c             	add    esp,0xc
c0011161:	6a 44                	push   0x44
c0011163:	6a 00                	push   0x0
c0011165:	53                   	push   ebx
c0011166:	e8 85 f3 fe ff       	call   c00004f0 <memset>
c001116b:	8d 83 88 00 00 00    	lea    eax,[ebx+0x88]
c0011171:	83 c4 0c             	add    esp,0xc
c0011174:	6a 11                	push   0x11
c0011176:	6a 00                	push   0x0
c0011178:	50                   	push   eax
c0011179:	e8 72 f3 fe ff       	call   c00004f0 <memset>
c001117e:	83 c4 18             	add    esp,0x18
c0011181:	89 d8                	mov    eax,ebx
c0011183:	5b                   	pop    ebx
c0011184:	c3                   	ret    

c0011185 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011185:	53                   	push   ebx
c0011186:	b8 01 00 00 00       	mov    eax,0x1
c001118b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001118f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011193:	83 f9 10             	cmp    ecx,0x10
c0011196:	7f 21                	jg     c00111b9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001119c:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001119f:	89 03                	mov    DWORD PTR [ebx],eax
c00111a1:	b8 01 00 00 00       	mov    eax,0x1
c00111a6:	d3 e0                	shl    eax,cl
c00111a8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00111ac:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00111af:	31 c0                	xor    eax,eax
c00111b1:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00111b9:	5b                   	pop    ebx
c00111ba:	c3                   	ret    

c00111bb <KeRaiseSignal(SigHandlerBlock*, int)>:
c00111bb:	55                   	push   ebp
c00111bc:	57                   	push   edi
c00111bd:	bf 08 00 00 00       	mov    edi,0x8
c00111c2:	56                   	push   esi
c00111c3:	53                   	push   ebx
c00111c4:	83 ec 14             	sub    esp,0x14
c00111c7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00111cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00111cf:	68 c0 90 02 c0       	push   0xc00290c0
c00111d4:	e8 8d 5d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00111d9:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00111df:	83 c4 10             	add    esp,0x10
c00111e2:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00111e9:	31 c9                	xor    ecx,ecx
c00111eb:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00111ef:	99                   	cdq    
c00111f0:	f7 ff                	idiv   edi
c00111f2:	8d 42 24             	lea    eax,[edx+0x24]
c00111f5:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00111f9:	85 f6                	test   esi,esi
c00111fb:	75 1a                	jne    c0011217 <KeRaiseSignal(SigHandlerBlock*, int)+0x5c>
c00111fd:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011201:	89 7c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],edi
c0011205:	50                   	push   eax
c0011206:	50                   	push   eax
c0011207:	52                   	push   edx
c0011208:	68 d6 90 02 c0       	push   0xc00290d6
c001120d:	e8 54 5d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011212:	83 c4 10             	add    esp,0x10
c0011215:	eb 1b                	jmp    c0011232 <KeRaiseSignal(SigHandlerBlock*, int)+0x77>
c0011217:	41                   	inc    ecx
c0011218:	83 f9 08             	cmp    ecx,0x8
c001121b:	75 ce                	jne    c00111eb <KeRaiseSignal(SigHandlerBlock*, int)+0x30>
c001121d:	83 ec 0c             	sub    esp,0xc
c0011220:	be 01 00 00 00       	mov    esi,0x1
c0011225:	68 f7 90 02 c0       	push   0xc00290f7
c001122a:	e8 37 5d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001122f:	83 c4 10             	add    esp,0x10
c0011232:	83 c4 0c             	add    esp,0xc
c0011235:	89 f0                	mov    eax,esi
c0011237:	5b                   	pop    ebx
c0011238:	5e                   	pop    esi
c0011239:	5f                   	pop    edi
c001123a:	5d                   	pop    ebp
c001123b:	c3                   	ret    

c001123c <KeCheckSignal(SigHandlerBlock*, int*)>:
c001123c:	55                   	push   ebp
c001123d:	57                   	push   edi
c001123e:	56                   	push   esi
c001123f:	53                   	push   ebx
c0011240:	83 ec 1c             	sub    esp,0x1c
c0011243:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0011247:	85 db                	test   ebx,ebx
c0011249:	0f 84 e0 00 00 00    	je     c001132f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c001124f:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011256:	0f 84 d3 00 00 00    	je     c001132f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c001125c:	31 c9                	xor    ecx,ecx
c001125e:	bf 08 00 00 00       	mov    edi,0x8
c0011263:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011269:	8d 04 0e             	lea    eax,[esi+ecx*1]
c001126c:	99                   	cdq    
c001126d:	f7 ff                	idiv   edi
c001126f:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011276:	85 ed                	test   ebp,ebp
c0011278:	0f 84 d2 00 00 00    	je     c0011350 <KeCheckSignal(SigHandlerBlock*, int*)+0x114>
c001127e:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011284:	89 e9                	mov    ecx,ebp
c0011286:	bf 01 00 00 00       	mov    edi,0x1
c001128b:	d3 e7                	shl    edi,cl
c001128d:	31 c9                	xor    ecx,ecx
c001128f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011293:	b8 01 00 00 00       	mov    eax,0x1
c0011298:	d3 e0                	shl    eax,cl
c001129a:	85 44 24 0c          	test   DWORD PTR [esp+0xc],eax
c001129e:	74 0a                	je     c00112aa <KeCheckSignal(SigHandlerBlock*, int*)+0x6e>
c00112a0:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00112a4:	0f 85 85 00 00 00    	jne    c001132f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c00112aa:	41                   	inc    ecx
c00112ab:	83 f9 11             	cmp    ecx,0x11
c00112ae:	75 e3                	jne    c0011293 <KeCheckSignal(SigHandlerBlock*, int*)+0x57>
c00112b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112b4:	46                   	inc    esi
c00112b5:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00112bb:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c00112c6:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00112cd:	09 f8                	or     eax,edi
c00112cf:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00112d5:	31 c0                	xor    eax,eax
c00112d7:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00112df:	74 09                	je     c00112ea <KeCheckSignal(SigHandlerBlock*, int*)+0xae>
c00112e1:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00112e8:	eb 06                	jmp    c00112f0 <KeCheckSignal(SigHandlerBlock*, int*)+0xb4>
c00112ea:	40                   	inc    eax
c00112eb:	83 f8 08             	cmp    eax,0x8
c00112ee:	75 e7                	jne    c00112d7 <KeCheckSignal(SigHandlerBlock*, int*)+0x9b>
c00112f0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00112f4:	83 fd 09             	cmp    ebp,0x9
c00112f7:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c00112fa:	89 2a                	mov    DWORD PTR [edx],ebp
c00112fc:	75 14                	jne    c0011312 <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c00112fe:	83 ec 0c             	sub    esp,0xc
c0011301:	68 08 91 02 c0       	push   0xc0029108
c0011306:	e8 5b 5c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001130b:	b8 a1 10 01 c0       	mov    eax,0xc00110a1
c0011310:	eb 39                	jmp    c001134b <KeCheckSignal(SigHandlerBlock*, int*)+0x10f>
c0011312:	83 f8 01             	cmp    eax,0x1
c0011315:	75 1c                	jne    c0011333 <KeCheckSignal(SigHandlerBlock*, int*)+0xf7>
c0011317:	83 ec 0c             	sub    esp,0xc
c001131a:	f7 d7                	not    edi
c001131c:	68 12 91 02 c0       	push   0xc0029112
c0011321:	e8 40 5c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011326:	83 c4 10             	add    esp,0x10
c0011329:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c001132f:	31 c0                	xor    eax,eax
c0011331:	eb 30                	jmp    c0011363 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011333:	85 c0                	test   eax,eax
c0011335:	75 2c                	jne    c0011363 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011337:	83 ec 0c             	sub    esp,0xc
c001133a:	68 1f 91 02 c0       	push   0xc002911f
c001133f:	e8 22 5c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011344:	8b 04 ad 40 c3 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffd3cc0]
c001134b:	83 c4 10             	add    esp,0x10
c001134e:	eb 13                	jmp    c0011363 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011350:	41                   	inc    ecx
c0011351:	46                   	inc    esi
c0011352:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011358:	83 f9 08             	cmp    ecx,0x8
c001135b:	0f 85 02 ff ff ff    	jne    c0011263 <KeCheckSignal(SigHandlerBlock*, int*)+0x27>
c0011361:	eb cc                	jmp    c001132f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011363:	83 c4 1c             	add    esp,0x1c
c0011366:	5b                   	pop    ebx
c0011367:	5e                   	pop    esi
c0011368:	5f                   	pop    edi
c0011369:	5d                   	pop    ebp
c001136a:	c3                   	ret    

c001136b <KiCheckSignalZ>:
c001136b:	80 3d 0c 21 03 c0 00 	cmp    BYTE PTR ds:0xc003210c,0x0
c0011372:	74 43                	je     c00113b7 <KiCheckSignalZ+0x4c>
c0011374:	83 ec 24             	sub    esp,0x24
c0011377:	8d 44 24 14          	lea    eax,[esp+0x14]
c001137b:	50                   	push   eax
c001137c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011381:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011384:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c001138a:	e8 ad fe ff ff       	call   c001123c <KeCheckSignal(SigHandlerBlock*, int*)>
c001138f:	83 c4 10             	add    esp,0x10
c0011392:	31 d2                	xor    edx,edx
c0011394:	85 c0                	test   eax,eax
c0011396:	74 19                	je     c00113b1 <KiCheckSignalZ+0x46>
c0011398:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001139e:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00113a1:	89 02                	mov    DWORD PTR [edx],eax
c00113a3:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c00113aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00113ae:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00113b1:	89 d0                	mov    eax,edx
c00113b3:	83 c4 1c             	add    esp,0x1c
c00113b6:	c3                   	ret    
c00113b7:	31 d2                	xor    edx,edx
c00113b9:	89 d0                	mov    eax,edx
c00113bb:	c3                   	ret    

c00113bc <KeCompleteSignal(SigHandlerBlock*, int)>:
c00113bc:	56                   	push   esi
c00113bd:	53                   	push   ebx
c00113be:	bb 01 00 00 00       	mov    ebx,0x1
c00113c3:	52                   	push   edx
c00113c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00113c8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00113cc:	d3 e3                	shl    ebx,cl
c00113ce:	83 f9 10             	cmp    ecx,0x10
c00113d1:	7f 08                	jg     c00113db <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00113d3:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00113d9:	75 10                	jne    c00113eb <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00113db:	83 ec 0c             	sub    esp,0xc
c00113de:	68 42 91 02 c0       	push   0xc0029142
c00113e3:	e8 c4 eb ff ff       	call   c000ffac <KePanic(char const*)>
c00113e8:	83 c4 10             	add    esp,0x10
c00113eb:	f7 d3                	not    ebx
c00113ed:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00113f3:	58                   	pop    eax
c00113f4:	5b                   	pop    ebx
c00113f5:	5e                   	pop    esi
c00113f6:	c3                   	ret    

c00113f7 <KiFinishSignalZ>:
c00113f7:	53                   	push   ebx
c00113f8:	83 ec 08             	sub    esp,0x8
c00113fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011400:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011404:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0011407:	83 fa 08             	cmp    edx,0x8
c001140a:	75 0c                	jne    c0011418 <KiFinishSignalZ+0x21>
c001140c:	83 ec 0c             	sub    esp,0xc
c001140f:	50                   	push   eax
c0011410:	e8 77 5a 00 00       	call   c0016e8c <unblockTask(ThreadControlBlock*)>
c0011415:	83 c4 10             	add    esp,0x10
c0011418:	50                   	push   eax
c0011419:	50                   	push   eax
c001141a:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001141d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011422:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011425:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c001142b:	e8 8c ff ff ff       	call   c00113bc <KeCompleteSignal(SigHandlerBlock*, int)>
c0011430:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011436:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001143d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011444:	83 c4 18             	add    esp,0x18
c0011447:	5b                   	pop    ebx
c0011448:	c3                   	ret    

c0011449 <SysSeekDir(regs*)>:
c0011449:	31 c0                	xor    eax,eax
c001144b:	31 d2                	xor    edx,edx
c001144d:	c3                   	ret    

c001144e <SysTellDir(regs*)>:
c001144e:	31 c0                	xor    eax,eax
c0011450:	31 d2                	xor    edx,edx
c0011452:	c3                   	ret    

c0011453 <SysVerify(regs*)>:
c0011453:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011457:	31 d2                	xor    edx,edx
c0011459:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001145c:	c3                   	ret    

c001145d <SysGetArgc(regs*)>:
c001145d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011462:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011465:	8b 80 b6 05 00 00    	mov    eax,DWORD PTR [eax+0x5b6]
c001146b:	89 c2                	mov    edx,eax
c001146d:	c1 fa 1f             	sar    edx,0x1f
c0011470:	c3                   	ret    

c0011471 <SysTTYName(regs*)>:
c0011471:	b8 01 00 00 00       	mov    eax,0x1
c0011476:	31 d2                	xor    edx,edx
c0011478:	c3                   	ret    

c0011479 <SysFormatDisk(regs*)>:
c0011479:	56                   	push   esi
c001147a:	53                   	push   ebx
c001147b:	83 ec 04             	sub    esp,0x4
c001147e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011482:	8b 1d 04 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031304
c0011488:	eb 2a                	jmp    c00114b4 <SysFormatDisk(regs*)+0x3b>
c001148a:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001148d:	83 ec 0c             	sub    esp,0xc
c0011490:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011493:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011495:	51                   	push   ecx
c0011496:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011499:	51                   	push   ecx
c001149a:	50                   	push   eax
c001149b:	8b 04 85 e0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce520]
c00114a2:	50                   	push   eax
c00114a3:	53                   	push   ebx
c00114a4:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c00114a7:	83 c4 20             	add    esp,0x20
c00114aa:	83 f8 08             	cmp    eax,0x8
c00114ad:	89 c1                	mov    ecx,eax
c00114af:	75 14                	jne    c00114c5 <SysFormatDisk(regs*)+0x4c>
c00114b1:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00114b4:	85 db                	test   ebx,ebx
c00114b6:	75 d2                	jne    c001148a <SysFormatDisk(regs*)+0x11>
c00114b8:	b8 03 00 00 00       	mov    eax,0x3
c00114bd:	31 d2                	xor    edx,edx
c00114bf:	83 c4 04             	add    esp,0x4
c00114c2:	5b                   	pop    ebx
c00114c3:	5e                   	pop    esi
c00114c4:	c3                   	ret    
c00114c5:	85 c0                	test   eax,eax
c00114c7:	74 13                	je     c00114dc <SysFormatDisk(regs*)+0x63>
c00114c9:	31 d2                	xor    edx,edx
c00114cb:	83 f9 09             	cmp    ecx,0x9
c00114ce:	b8 01 00 00 00       	mov    eax,0x1
c00114d3:	74 ea                	je     c00114bf <SysFormatDisk(regs*)+0x46>
c00114d5:	b8 02 00 00 00       	mov    eax,0x2
c00114da:	eb e1                	jmp    c00114bd <SysFormatDisk(regs*)+0x44>
c00114dc:	31 c0                	xor    eax,eax
c00114de:	eb dd                	jmp    c00114bd <SysFormatDisk(regs*)+0x44>

c00114e0 <SysSetDiskVolumeLabel(regs*)>:
c00114e0:	56                   	push   esi
c00114e1:	53                   	push   ebx
c00114e2:	83 ec 04             	sub    esp,0x4
c00114e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00114e9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00114ec:	83 f8 19             	cmp    eax,0x19
c00114ef:	77 33                	ja     c0011524 <SysSetDiskVolumeLabel(regs*)+0x44>
c00114f1:	8b 0c 85 e0 1a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffce520]
c00114f8:	85 c9                	test   ecx,ecx
c00114fa:	74 28                	je     c0011524 <SysSetDiskVolumeLabel(regs*)+0x44>
c00114fc:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00114ff:	85 db                	test   ebx,ebx
c0011501:	74 21                	je     c0011524 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011503:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011509:	85 d2                	test   edx,edx
c001150b:	74 17                	je     c0011524 <SysSetDiskVolumeLabel(regs*)+0x44>
c001150d:	8b 32                	mov    esi,DWORD PTR [edx]
c001150f:	53                   	push   ebx
c0011510:	50                   	push   eax
c0011511:	51                   	push   ecx
c0011512:	52                   	push   edx
c0011513:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011516:	83 c4 10             	add    esp,0x10
c0011519:	83 c4 04             	add    esp,0x4
c001151c:	5b                   	pop    ebx
c001151d:	5e                   	pop    esi
c001151e:	89 c2                	mov    edx,eax
c0011520:	c1 fa 1f             	sar    edx,0x1f
c0011523:	c3                   	ret    
c0011524:	83 c4 04             	add    esp,0x4
c0011527:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001152c:	5b                   	pop    ebx
c001152d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011532:	5e                   	pop    esi
c0011533:	c3                   	ret    

c0011534 <SysGetDiskVolumeLabel(regs*)>:
c0011534:	57                   	push   edi
c0011535:	56                   	push   esi
c0011536:	53                   	push   ebx
c0011537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001153b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001153e:	83 fa 19             	cmp    edx,0x19
c0011541:	77 3c                	ja     c001157f <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011543:	8b 0c 95 e0 1a 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffce520]
c001154a:	85 c9                	test   ecx,ecx
c001154c:	74 31                	je     c001157f <SysGetDiskVolumeLabel(regs*)+0x4b>
c001154e:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011551:	85 db                	test   ebx,ebx
c0011553:	74 2a                	je     c001157f <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011555:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011558:	85 f6                	test   esi,esi
c001155a:	74 23                	je     c001157f <SysGetDiskVolumeLabel(regs*)+0x4b>
c001155c:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011562:	85 c0                	test   eax,eax
c0011564:	74 19                	je     c001157f <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011566:	83 ec 0c             	sub    esp,0xc
c0011569:	8b 38                	mov    edi,DWORD PTR [eax]
c001156b:	56                   	push   esi
c001156c:	53                   	push   ebx
c001156d:	52                   	push   edx
c001156e:	51                   	push   ecx
c001156f:	50                   	push   eax
c0011570:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011573:	83 c4 20             	add    esp,0x20
c0011576:	5b                   	pop    ebx
c0011577:	5e                   	pop    esi
c0011578:	89 c2                	mov    edx,eax
c001157a:	c1 fa 1f             	sar    edx,0x1f
c001157d:	5f                   	pop    edi
c001157e:	c3                   	ret    
c001157f:	5b                   	pop    ebx
c0011580:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011585:	ba ff ff ff ff       	mov    edx,0xffffffff
c001158a:	5e                   	pop    esi
c001158b:	5f                   	pop    edi
c001158c:	c3                   	ret    

c001158d <SysRealpath(regs*)>:
c001158d:	53                   	push   ebx
c001158e:	83 ec 08             	sub    esp,0x8
c0011591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011595:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011598:	85 c9                	test   ecx,ecx
c001159a:	74 36                	je     c00115d2 <SysRealpath(regs*)+0x45>
c001159c:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001159f:	31 d2                	xor    edx,edx
c00115a1:	b8 01 00 00 00       	mov    eax,0x1
c00115a6:	85 db                	test   ebx,ebx
c00115a8:	75 05                	jne    c00115af <SysRealpath(regs*)+0x22>
c00115aa:	83 c4 08             	add    esp,0x8
c00115ad:	5b                   	pop    ebx
c00115ae:	c3                   	ret    
c00115af:	6a 00                	push   0x0
c00115b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00115b9:	05 0c 01 00 00       	add    eax,0x10c
c00115be:	50                   	push   eax
c00115bf:	51                   	push   ecx
c00115c0:	53                   	push   ebx
c00115c1:	e8 6e 6d ff ff       	call   c0008334 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00115c6:	83 c4 10             	add    esp,0x10
c00115c9:	31 c0                	xor    eax,eax
c00115cb:	31 d2                	xor    edx,edx
c00115cd:	83 c4 08             	add    esp,0x8
c00115d0:	5b                   	pop    ebx
c00115d1:	c3                   	ret    
c00115d2:	b8 01 00 00 00       	mov    eax,0x1
c00115d7:	31 d2                	xor    edx,edx
c00115d9:	eb f2                	jmp    c00115cd <SysRealpath(regs*)+0x40>

c00115db <SysReadDir(regs*)>:
c00115db:	53                   	push   ebx
c00115dc:	83 ec 18             	sub    esp,0x18
c00115df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00115e3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00115e6:	83 f8 02             	cmp    eax,0x2
c00115e9:	76 4f                	jbe    c001163a <SysReadDir(regs*)+0x5f>
c00115eb:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00115f2:	77 52                	ja     c0011646 <SysReadDir(regs*)+0x6b>
c00115f4:	83 ec 0c             	sub    esp,0xc
c00115f7:	50                   	push   eax
c00115f8:	e8 98 1d 00 00       	call   c0013395 <KeGetFileFromDescriptor(int)>
c00115fd:	83 c4 10             	add    esp,0x10
c0011600:	85 c0                	test   eax,eax
c0011602:	74 42                	je     c0011646 <SysReadDir(regs*)+0x6b>
c0011604:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001160c:	83 ec 0c             	sub    esp,0xc
c001160f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011613:	8b 10                	mov    edx,DWORD PTR [eax]
c0011615:	51                   	push   ecx
c0011616:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011619:	51                   	push   ecx
c001161a:	6a 00                	push   0x0
c001161c:	68 10 01 00 00       	push   0x110
c0011621:	50                   	push   eax
c0011622:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011625:	83 c4 20             	add    esp,0x20
c0011628:	85 c0                	test   eax,eax
c001162a:	89 c1                	mov    ecx,eax
c001162c:	74 27                	je     c0011655 <SysReadDir(regs*)+0x7a>
c001162e:	31 d2                	xor    edx,edx
c0011630:	83 f9 07             	cmp    ecx,0x7
c0011633:	b8 02 00 00 00       	mov    eax,0x2
c0011638:	75 16                	jne    c0011650 <SysReadDir(regs*)+0x75>
c001163a:	b8 01 00 00 00       	mov    eax,0x1
c001163f:	31 d2                	xor    edx,edx
c0011641:	83 c4 18             	add    esp,0x18
c0011644:	5b                   	pop    ebx
c0011645:	c3                   	ret    
c0011646:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001164b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011650:	83 c4 18             	add    esp,0x18
c0011653:	5b                   	pop    ebx
c0011654:	c3                   	ret    
c0011655:	31 c0                	xor    eax,eax
c0011657:	31 d2                	xor    edx,edx
c0011659:	eb e6                	jmp    c0011641 <SysReadDir(regs*)+0x66>

c001165b <SysIsATTY(regs*)>:
c001165b:	83 ec 0c             	sub    esp,0xc
c001165e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011662:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011665:	83 f8 02             	cmp    eax,0x2
c0011668:	76 07                	jbe    c0011671 <SysIsATTY(regs*)+0x16>
c001166a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001166f:	75 26                	jne    c0011697 <SysIsATTY(regs*)+0x3c>
c0011671:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011676:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011679:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001167f:	85 c0                	test   eax,eax
c0011681:	74 24                	je     c00116a7 <SysIsATTY(regs*)+0x4c>
c0011683:	8b 10                	mov    edx,DWORD PTR [eax]
c0011685:	83 ec 0c             	sub    esp,0xc
c0011688:	50                   	push   eax
c0011689:	ff 12                	call   DWORD PTR [edx]
c001168b:	83 c4 10             	add    esp,0x10
c001168e:	31 d2                	xor    edx,edx
c0011690:	83 c4 0c             	add    esp,0xc
c0011693:	0f b6 c0             	movzx  eax,al
c0011696:	c3                   	ret    
c0011697:	83 ec 0c             	sub    esp,0xc
c001169a:	50                   	push   eax
c001169b:	e8 f5 1c 00 00       	call   c0013395 <KeGetFileFromDescriptor(int)>
c00116a0:	83 c4 10             	add    esp,0x10
c00116a3:	85 c0                	test   eax,eax
c00116a5:	75 dc                	jne    c0011683 <SysIsATTY(regs*)+0x28>
c00116a7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116ac:	ba ff ff ff ff       	mov    edx,0xffffffff
c00116b1:	83 c4 0c             	add    esp,0xc
c00116b4:	c3                   	ret    

c00116b5 <SysSeek(regs*)>:
c00116b5:	53                   	push   ebx
c00116b6:	83 ec 08             	sub    esp,0x8
c00116b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00116bd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00116c0:	8d 50 fd             	lea    edx,[eax-0x3]
c00116c3:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00116c9:	77 39                	ja     c0011704 <SysSeek(regs*)+0x4f>
c00116cb:	83 ec 0c             	sub    esp,0xc
c00116ce:	50                   	push   eax
c00116cf:	e8 c1 1c 00 00       	call   c0013395 <KeGetFileFromDescriptor(int)>
c00116d4:	83 c4 10             	add    esp,0x10
c00116d7:	85 c0                	test   eax,eax
c00116d9:	74 29                	je     c0011704 <SysSeek(regs*)+0x4f>
c00116db:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00116de:	83 ec 04             	sub    esp,0x4
c00116e1:	31 db                	xor    ebx,ebx
c00116e3:	53                   	push   ebx
c00116e4:	51                   	push   ecx
c00116e5:	50                   	push   eax
c00116e6:	e8 51 70 ff ff       	call   c000873c <File::seek(unsigned long long)>
c00116eb:	83 c4 10             	add    esp,0x10
c00116ee:	85 c0                	test   eax,eax
c00116f0:	0f 95 c0             	setne  al
c00116f3:	31 d2                	xor    edx,edx
c00116f5:	0f b6 c0             	movzx  eax,al
c00116f8:	f7 d8                	neg    eax
c00116fa:	83 d2 00             	adc    edx,0x0
c00116fd:	83 c4 08             	add    esp,0x8
c0011700:	5b                   	pop    ebx
c0011701:	f7 da                	neg    edx
c0011703:	c3                   	ret    
c0011704:	83 c4 08             	add    esp,0x8
c0011707:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001170c:	5b                   	pop    ebx
c001170d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011712:	c3                   	ret    

c0011713 <SysTell(regs*)>:
c0011713:	53                   	push   ebx
c0011714:	83 ec 08             	sub    esp,0x8
c0011717:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001171b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001171e:	83 f8 02             	cmp    eax,0x2
c0011721:	76 56                	jbe    c0011779 <SysTell(regs*)+0x66>
c0011723:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011728:	76 19                	jbe    c0011743 <SysTell(regs*)+0x30>
c001172a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001172d:	31 d2                	xor    edx,edx
c001172f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011735:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001173c:	83 c4 08             	add    esp,0x8
c001173f:	31 c0                	xor    eax,eax
c0011741:	5b                   	pop    ebx
c0011742:	c3                   	ret    
c0011743:	83 ec 0c             	sub    esp,0xc
c0011746:	50                   	push   eax
c0011747:	e8 49 1c 00 00       	call   c0013395 <KeGetFileFromDescriptor(int)>
c001174c:	83 c4 10             	add    esp,0x10
c001174f:	85 c0                	test   eax,eax
c0011751:	74 26                	je     c0011779 <SysTell(regs*)+0x66>
c0011753:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011756:	83 ec 08             	sub    esp,0x8
c0011759:	52                   	push   edx
c001175a:	50                   	push   eax
c001175b:	e8 88 70 ff ff       	call   c00087e8 <File::tell(unsigned long long*)>
c0011760:	83 c4 10             	add    esp,0x10
c0011763:	85 c0                	test   eax,eax
c0011765:	0f 95 c0             	setne  al
c0011768:	31 d2                	xor    edx,edx
c001176a:	0f b6 c0             	movzx  eax,al
c001176d:	f7 d8                	neg    eax
c001176f:	83 d2 00             	adc    edx,0x0
c0011772:	83 c4 08             	add    esp,0x8
c0011775:	5b                   	pop    ebx
c0011776:	f7 da                	neg    edx
c0011778:	c3                   	ret    
c0011779:	83 c4 08             	add    esp,0x8
c001177c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011781:	5b                   	pop    ebx
c0011782:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011787:	c3                   	ret    

c0011788 <SysSize(regs*)>:
c0011788:	53                   	push   ebx
c0011789:	83 ec 18             	sub    esp,0x18
c001178c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011790:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011793:	83 f8 02             	cmp    eax,0x2
c0011796:	76 5b                	jbe    c00117f3 <SysSize(regs*)+0x6b>
c0011798:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001179d:	76 19                	jbe    c00117b8 <SysSize(regs*)+0x30>
c001179f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00117a2:	31 d2                	xor    edx,edx
c00117a4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00117aa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00117b1:	83 c4 18             	add    esp,0x18
c00117b4:	31 c0                	xor    eax,eax
c00117b6:	5b                   	pop    ebx
c00117b7:	c3                   	ret    
c00117b8:	83 ec 0c             	sub    esp,0xc
c00117bb:	50                   	push   eax
c00117bc:	e8 d4 1b 00 00       	call   c0013395 <KeGetFileFromDescriptor(int)>
c00117c1:	83 c4 10             	add    esp,0x10
c00117c4:	85 c0                	test   eax,eax
c00117c6:	74 2b                	je     c00117f3 <SysSize(regs*)+0x6b>
c00117c8:	83 ec 04             	sub    esp,0x4
c00117cb:	8d 54 24 13          	lea    edx,[esp+0x13]
c00117cf:	52                   	push   edx
c00117d0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00117d3:	52                   	push   edx
c00117d4:	50                   	push   eax
c00117d5:	e8 a6 71 ff ff       	call   c0008980 <File::stat(unsigned long long*, bool*)>
c00117da:	83 c4 10             	add    esp,0x10
c00117dd:	85 c0                	test   eax,eax
c00117df:	0f 95 c0             	setne  al
c00117e2:	31 d2                	xor    edx,edx
c00117e4:	0f b6 c0             	movzx  eax,al
c00117e7:	f7 d8                	neg    eax
c00117e9:	83 d2 00             	adc    edx,0x0
c00117ec:	83 c4 18             	add    esp,0x18
c00117ef:	5b                   	pop    ebx
c00117f0:	f7 da                	neg    edx
c00117f2:	c3                   	ret    
c00117f3:	83 c4 18             	add    esp,0x18
c00117f6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00117fb:	5b                   	pop    ebx
c00117fc:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011801:	c3                   	ret    

c0011802 <SysSizeFromFilename(regs*)>:
c0011802:	55                   	push   ebp
c0011803:	57                   	push   edi
c0011804:	56                   	push   esi
c0011805:	53                   	push   ebx
c0011806:	81 ec 4c 02 00 00    	sub    esp,0x24c
c001180c:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011813:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011816:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011819:	85 f6                	test   esi,esi
c001181b:	89 f8                	mov    eax,edi
c001181d:	74 09                	je     c0011828 <SysSizeFromFilename(regs*)+0x26>
c001181f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011825:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011828:	83 f8 02             	cmp    eax,0x2
c001182b:	0f 86 c9 00 00 00    	jbe    c00118fa <SysSizeFromFilename(regs*)+0xf8>
c0011831:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011836:	76 1f                	jbe    c0011857 <SysSizeFromFilename(regs*)+0x55>
c0011838:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001183b:	31 d2                	xor    edx,edx
c001183d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011843:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001184a:	31 c0                	xor    eax,eax
c001184c:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011852:	5b                   	pop    ebx
c0011853:	5e                   	pop    esi
c0011854:	5f                   	pop    edi
c0011855:	5d                   	pop    ebp
c0011856:	c3                   	ret    
c0011857:	83 ec 0c             	sub    esp,0xc
c001185a:	68 14 01 00 00       	push   0x114
c001185f:	e8 f4 e2 ff ff       	call   c000fb58 <malloc>
c0011864:	6a 01                	push   0x1
c0011866:	89 c5                	mov    ebp,eax
c0011868:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001186d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011870:	50                   	push   eax
c0011871:	57                   	push   edi
c0011872:	55                   	push   ebp
c0011873:	e8 ea 6c ff ff       	call   c0008562 <File::File(char const*, Process*, bool)>
c0011878:	83 c4 20             	add    esp,0x20
c001187b:	85 ed                	test   ebp,ebp
c001187d:	74 7b                	je     c00118fa <SysSizeFromFilename(regs*)+0xf8>
c001187f:	83 ec 04             	sub    esp,0x4
c0011882:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011886:	50                   	push   eax
c0011887:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001188a:	51                   	push   ecx
c001188b:	55                   	push   ebp
c001188c:	e8 ef 70 ff ff       	call   c0008980 <File::stat(unsigned long long*, bool*)>
c0011891:	89 c3                	mov    ebx,eax
c0011893:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011896:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011899:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001189c:	83 c4 10             	add    esp,0x10
c001189f:	85 db                	test   ebx,ebx
c00118a1:	75 57                	jne    c00118fa <SysSizeFromFilename(regs*)+0xf8>
c00118a3:	6a 00                	push   0x0
c00118a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118aa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118ad:	05 0c 01 00 00       	add    eax,0x10c
c00118b2:	50                   	push   eax
c00118b3:	57                   	push   edi
c00118b4:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00118bb:	53                   	push   ebx
c00118bc:	e8 73 6a ff ff       	call   c0008334 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00118c1:	58                   	pop    eax
c00118c2:	5a                   	pop    edx
c00118c3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00118c7:	50                   	push   eax
c00118c8:	53                   	push   ebx
c00118c9:	e8 ed 64 ff ff       	call   c0007dbb <KeDereferenceSymlink(char const*, char*)>
c00118ce:	83 c4 10             	add    esp,0x10
c00118d1:	ba 00 00 00 00       	mov    edx,0x0
c00118d6:	83 f8 01             	cmp    eax,0x1
c00118d9:	b8 00 00 00 00       	mov    eax,0x0
c00118de:	74 2f                	je     c001190f <SysSizeFromFilename(regs*)+0x10d>
c00118e0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00118e5:	74 3b                	je     c0011922 <SysSizeFromFilename(regs*)+0x120>
c00118e7:	85 f6                	test   esi,esi
c00118e9:	0f 84 5d ff ff ff    	je     c001184c <SysSizeFromFilename(regs*)+0x4a>
c00118ef:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00118f5:	e9 52 ff ff ff       	jmp    c001184c <SysSizeFromFilename(regs*)+0x4a>
c00118fa:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011900:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011905:	5b                   	pop    ebx
c0011906:	ba ff ff ff ff       	mov    edx,0xffffffff
c001190b:	5e                   	pop    esi
c001190c:	5f                   	pop    edi
c001190d:	5d                   	pop    ebp
c001190e:	c3                   	ret    
c001190f:	85 f6                	test   esi,esi
c0011911:	0f 84 35 ff ff ff    	je     c001184c <SysSizeFromFilename(regs*)+0x4a>
c0011917:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001191d:	e9 2a ff ff ff       	jmp    c001184c <SysSizeFromFilename(regs*)+0x4a>
c0011922:	85 f6                	test   esi,esi
c0011924:	0f 84 22 ff ff ff    	je     c001184c <SysSizeFromFilename(regs*)+0x4a>
c001192a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011930:	e9 17 ff ff ff       	jmp    c001184c <SysSizeFromFilename(regs*)+0x4a>

c0011935 <SysSizeFromFilenameNoSymlink(regs*)>:
c0011935:	55                   	push   ebp
c0011936:	57                   	push   edi
c0011937:	56                   	push   esi
c0011938:	53                   	push   ebx
c0011939:	81 ec 4c 02 00 00    	sub    esp,0x24c
c001193f:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011946:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011949:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001194c:	85 f6                	test   esi,esi
c001194e:	89 f8                	mov    eax,edi
c0011950:	74 09                	je     c001195b <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c0011952:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011958:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001195b:	83 f8 02             	cmp    eax,0x2
c001195e:	0f 86 c9 00 00 00    	jbe    c0011a2d <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c0011964:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011969:	76 1f                	jbe    c001198a <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c001196b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001196e:	31 d2                	xor    edx,edx
c0011970:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011976:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001197d:	31 c0                	xor    eax,eax
c001197f:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011985:	5b                   	pop    ebx
c0011986:	5e                   	pop    esi
c0011987:	5f                   	pop    edi
c0011988:	5d                   	pop    ebp
c0011989:	c3                   	ret    
c001198a:	83 ec 0c             	sub    esp,0xc
c001198d:	68 14 01 00 00       	push   0x114
c0011992:	e8 c1 e1 ff ff       	call   c000fb58 <malloc>
c0011997:	6a 00                	push   0x0
c0011999:	89 c5                	mov    ebp,eax
c001199b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119a0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119a3:	50                   	push   eax
c00119a4:	57                   	push   edi
c00119a5:	55                   	push   ebp
c00119a6:	e8 b7 6b ff ff       	call   c0008562 <File::File(char const*, Process*, bool)>
c00119ab:	83 c4 20             	add    esp,0x20
c00119ae:	85 ed                	test   ebp,ebp
c00119b0:	74 7b                	je     c0011a2d <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c00119b2:	83 ec 04             	sub    esp,0x4
c00119b5:	8d 44 24 13          	lea    eax,[esp+0x13]
c00119b9:	50                   	push   eax
c00119ba:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00119bd:	51                   	push   ecx
c00119be:	55                   	push   ebp
c00119bf:	e8 bc 6f ff ff       	call   c0008980 <File::stat(unsigned long long*, bool*)>
c00119c4:	89 c3                	mov    ebx,eax
c00119c6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00119c9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00119cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00119cf:	83 c4 10             	add    esp,0x10
c00119d2:	85 db                	test   ebx,ebx
c00119d4:	75 57                	jne    c0011a2d <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c00119d6:	6a 00                	push   0x0
c00119d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119dd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119e0:	05 0c 01 00 00       	add    eax,0x10c
c00119e5:	50                   	push   eax
c00119e6:	57                   	push   edi
c00119e7:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00119ee:	53                   	push   ebx
c00119ef:	e8 40 69 ff ff       	call   c0008334 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00119f4:	58                   	pop    eax
c00119f5:	5a                   	pop    edx
c00119f6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00119fa:	50                   	push   eax
c00119fb:	53                   	push   ebx
c00119fc:	e8 ba 63 ff ff       	call   c0007dbb <KeDereferenceSymlink(char const*, char*)>
c0011a01:	83 c4 10             	add    esp,0x10
c0011a04:	ba 00 00 00 00       	mov    edx,0x0
c0011a09:	83 f8 01             	cmp    eax,0x1
c0011a0c:	b8 00 00 00 00       	mov    eax,0x0
c0011a11:	74 2f                	je     c0011a42 <SysSizeFromFilenameNoSymlink(regs*)+0x10d>
c0011a13:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011a18:	74 3b                	je     c0011a55 <SysSizeFromFilenameNoSymlink(regs*)+0x120>
c0011a1a:	85 f6                	test   esi,esi
c0011a1c:	0f 84 5d ff ff ff    	je     c001197f <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011a22:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011a28:	e9 52 ff ff ff       	jmp    c001197f <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011a2d:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011a33:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a38:	5b                   	pop    ebx
c0011a39:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a3e:	5e                   	pop    esi
c0011a3f:	5f                   	pop    edi
c0011a40:	5d                   	pop    ebp
c0011a41:	c3                   	ret    
c0011a42:	85 f6                	test   esi,esi
c0011a44:	0f 84 35 ff ff ff    	je     c001197f <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011a4a:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011a50:	e9 2a ff ff ff       	jmp    c001197f <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011a55:	85 f6                	test   esi,esi
c0011a57:	0f 84 22 ff ff ff    	je     c001197f <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011a5d:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011a63:	e9 17 ff ff ff       	jmp    c001197f <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c0011a68 <SysClose(regs*)>:
c0011a68:	57                   	push   edi
c0011a69:	56                   	push   esi
c0011a6a:	53                   	push   ebx
c0011a6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a6f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011a72:	83 f8 02             	cmp    eax,0x2
c0011a75:	76 44                	jbe    c0011abb <SysClose(regs*)+0x53>
c0011a77:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011a7d:	31 f6                	xor    esi,esi
c0011a7f:	31 ff                	xor    edi,edi
c0011a81:	83 fa 01             	cmp    edx,0x1
c0011a84:	76 2d                	jbe    c0011ab3 <SysClose(regs*)+0x4b>
c0011a86:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011a8b:	77 2e                	ja     c0011abb <SysClose(regs*)+0x53>
c0011a8d:	83 ec 0c             	sub    esp,0xc
c0011a90:	50                   	push   eax
c0011a91:	e8 ff 18 00 00       	call   c0013395 <KeGetFileFromDescriptor(int)>
c0011a96:	83 c4 10             	add    esp,0x10
c0011a99:	85 c0                	test   eax,eax
c0011a9b:	89 c3                	mov    ebx,eax
c0011a9d:	74 1c                	je     c0011abb <SysClose(regs*)+0x53>
c0011a9f:	83 ec 0c             	sub    esp,0xc
c0011aa2:	50                   	push   eax
c0011aa3:	e8 34 6c ff ff       	call   c00086dc <File::close()>
c0011aa8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011aaa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011aad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ab0:	83 c4 10             	add    esp,0x10
c0011ab3:	5b                   	pop    ebx
c0011ab4:	89 f0                	mov    eax,esi
c0011ab6:	89 fa                	mov    edx,edi
c0011ab8:	5e                   	pop    esi
c0011ab9:	5f                   	pop    edi
c0011aba:	c3                   	ret    
c0011abb:	5b                   	pop    ebx
c0011abc:	be ff ff ff ff       	mov    esi,0xffffffff
c0011ac1:	89 f0                	mov    eax,esi
c0011ac3:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011ac8:	89 fa                	mov    edx,edi
c0011aca:	5e                   	pop    esi
c0011acb:	5f                   	pop    edi
c0011acc:	c3                   	ret    

c0011acd <SysOpenDir(regs*)>:
c0011acd:	56                   	push   esi
c0011ace:	53                   	push   ebx
c0011acf:	83 ec 04             	sub    esp,0x4
c0011ad2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ad6:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011ad9:	85 c9                	test   ecx,ecx
c0011adb:	74 5d                	je     c0011b3a <SysOpenDir(regs*)+0x6d>
c0011add:	83 ec 0c             	sub    esp,0xc
c0011ae0:	68 14 01 00 00       	push   0x114
c0011ae5:	e8 6e e0 ff ff       	call   c000fb58 <malloc>
c0011aea:	83 c4 0c             	add    esp,0xc
c0011aed:	89 c6                	mov    esi,eax
c0011aef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011af4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011af7:	50                   	push   eax
c0011af8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011afb:	52                   	push   edx
c0011afc:	56                   	push   esi
c0011afd:	e8 3e 70 ff ff       	call   c0008b40 <Directory::Directory(char const*, Process*)>
c0011b02:	83 c4 10             	add    esp,0x10
c0011b05:	85 f6                	test   esi,esi
c0011b07:	74 31                	je     c0011b3a <SysOpenDir(regs*)+0x6d>
c0011b09:	83 ec 0c             	sub    esp,0xc
c0011b0c:	56                   	push   esi
c0011b0d:	e8 f6 70 ff ff       	call   c0008c08 <Directory::open()>
c0011b12:	83 c4 10             	add    esp,0x10
c0011b15:	85 c0                	test   eax,eax
c0011b17:	75 21                	jne    c0011b3a <SysOpenDir(regs*)+0x6d>
c0011b19:	83 ec 0c             	sub    esp,0xc
c0011b1c:	56                   	push   esi
c0011b1d:	e8 76 15 00 00       	call   c0013098 <UnixFile::getFileDescriptor()>
c0011b22:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011b25:	83 c4 10             	add    esp,0x10
c0011b28:	89 02                	mov    DWORD PTR [edx],eax
c0011b2a:	c1 f8 1f             	sar    eax,0x1f
c0011b2d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011b30:	83 c4 04             	add    esp,0x4
c0011b33:	31 c0                	xor    eax,eax
c0011b35:	5b                   	pop    ebx
c0011b36:	31 d2                	xor    edx,edx
c0011b38:	5e                   	pop    esi
c0011b39:	c3                   	ret    
c0011b3a:	83 c4 04             	add    esp,0x4
c0011b3d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b42:	5b                   	pop    ebx
c0011b43:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b48:	5e                   	pop    esi
c0011b49:	c3                   	ret    

c0011b4a <SysMakeDir(regs*)>:
c0011b4a:	56                   	push   esi
c0011b4b:	53                   	push   ebx
c0011b4c:	83 ec 10             	sub    esp,0x10
c0011b4f:	68 14 01 00 00       	push   0x114
c0011b54:	e8 ff df ff ff       	call   c000fb58 <malloc>
c0011b59:	83 c4 0c             	add    esp,0xc
c0011b5c:	89 c3                	mov    ebx,eax
c0011b5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b63:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011b66:	50                   	push   eax
c0011b67:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011b6b:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011b6e:	52                   	push   edx
c0011b6f:	53                   	push   ebx
c0011b70:	e8 cb 6f ff ff       	call   c0008b40 <Directory::Directory(char const*, Process*)>
c0011b75:	83 c4 10             	add    esp,0x10
c0011b78:	85 db                	test   ebx,ebx
c0011b7a:	74 2c                	je     c0011ba8 <SysMakeDir(regs*)+0x5e>
c0011b7c:	83 ec 0c             	sub    esp,0xc
c0011b7f:	53                   	push   ebx
c0011b80:	e8 63 72 ff ff       	call   c0008de8 <Directory::create()>
c0011b85:	89 c6                	mov    esi,eax
c0011b87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011b89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011b8c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b8f:	83 c4 10             	add    esp,0x10
c0011b92:	31 c0                	xor    eax,eax
c0011b94:	85 f6                	test   esi,esi
c0011b96:	0f 95 c0             	setne  al
c0011b99:	31 d2                	xor    edx,edx
c0011b9b:	f7 d8                	neg    eax
c0011b9d:	83 d2 00             	adc    edx,0x0
c0011ba0:	83 c4 04             	add    esp,0x4
c0011ba3:	5b                   	pop    ebx
c0011ba4:	f7 da                	neg    edx
c0011ba6:	5e                   	pop    esi
c0011ba7:	c3                   	ret    
c0011ba8:	83 c4 04             	add    esp,0x4
c0011bab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011bb0:	5b                   	pop    ebx
c0011bb1:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011bb6:	5e                   	pop    esi
c0011bb7:	c3                   	ret    

c0011bb8 <SysCloseDir(regs*)>:
c0011bb8:	53                   	push   ebx
c0011bb9:	83 ec 08             	sub    esp,0x8
c0011bbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bc0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011bc3:	8d 50 fd             	lea    edx,[eax-0x3]
c0011bc6:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011bcc:	77 2f                	ja     c0011bfd <SysCloseDir(regs*)+0x45>
c0011bce:	83 ec 0c             	sub    esp,0xc
c0011bd1:	50                   	push   eax
c0011bd2:	e8 be 17 00 00       	call   c0013395 <KeGetFileFromDescriptor(int)>
c0011bd7:	83 c4 10             	add    esp,0x10
c0011bda:	85 c0                	test   eax,eax
c0011bdc:	89 c3                	mov    ebx,eax
c0011bde:	74 1d                	je     c0011bfd <SysCloseDir(regs*)+0x45>
c0011be0:	83 ec 0c             	sub    esp,0xc
c0011be3:	50                   	push   eax
c0011be4:	e8 7b 70 ff ff       	call   c0008c64 <Directory::close()>
c0011be9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011beb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011bee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011bf1:	83 c4 10             	add    esp,0x10
c0011bf4:	31 c0                	xor    eax,eax
c0011bf6:	83 c4 08             	add    esp,0x8
c0011bf9:	31 d2                	xor    edx,edx
c0011bfb:	5b                   	pop    ebx
c0011bfc:	c3                   	ret    
c0011bfd:	83 c4 08             	add    esp,0x8
c0011c00:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c05:	5b                   	pop    ebx
c0011c06:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c0b:	c3                   	ret    

c0011c0c <SysWait(regs*)>:
c0011c0c:	83 ec 10             	sub    esp,0x10
c0011c0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c13:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011c16:	52                   	push   edx
c0011c17:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011c1a:	51                   	push   ecx
c0011c1b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011c1e:	50                   	push   eax
c0011c1f:	e8 0c 50 00 00       	call   c0016c30 <waitTask(int, int*, int)>
c0011c24:	83 c4 1c             	add    esp,0x1c
c0011c27:	89 c2                	mov    edx,eax
c0011c29:	c1 fa 1f             	sar    edx,0x1f
c0011c2c:	c3                   	ret    

c0011c2d <SysNotImpl(regs*)>:
c0011c2d:	83 ec 18             	sub    esp,0x18
c0011c30:	68 53 91 02 c0       	push   0xc0029153
c0011c35:	e8 72 e3 ff ff       	call   c000ffac <KePanic(char const*)>
c0011c3a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c3f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c44:	83 c4 1c             	add    esp,0x1c
c0011c47:	c3                   	ret    

c0011c48 <SysPanic(regs*)>:
c0011c48:	83 ec 18             	sub    esp,0x18
c0011c4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c4f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011c52:	50                   	push   eax
c0011c53:	e8 54 e3 ff ff       	call   c000ffac <KePanic(char const*)>
c0011c58:	b8 01 00 00 00       	mov    eax,0x1
c0011c5d:	31 d2                	xor    edx,edx
c0011c5f:	83 c4 1c             	add    esp,0x1c
c0011c62:	c3                   	ret    

c0011c63 <SysRmdir(regs*)>:
c0011c63:	56                   	push   esi
c0011c64:	53                   	push   ebx
c0011c65:	83 ec 10             	sub    esp,0x10
c0011c68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c6c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011c6f:	68 14 01 00 00       	push   0x114
c0011c74:	e8 df de ff ff       	call   c000fb58 <malloc>
c0011c79:	6a 00                	push   0x0
c0011c7b:	89 c3                	mov    ebx,eax
c0011c7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c82:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c85:	50                   	push   eax
c0011c86:	56                   	push   esi
c0011c87:	53                   	push   ebx
c0011c88:	e8 d5 68 ff ff       	call   c0008562 <File::File(char const*, Process*, bool)>
c0011c8d:	83 c4 14             	add    esp,0x14
c0011c90:	53                   	push   ebx
c0011c91:	e8 b6 6b ff ff       	call   c000884c <File::unlink()>
c0011c96:	83 c4 10             	add    esp,0x10
c0011c99:	85 db                	test   ebx,ebx
c0011c9b:	89 c6                	mov    esi,eax
c0011c9d:	74 0c                	je     c0011cab <SysRmdir(regs*)+0x48>
c0011c9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ca1:	83 ec 0c             	sub    esp,0xc
c0011ca4:	53                   	push   ebx
c0011ca5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ca8:	83 c4 10             	add    esp,0x10
c0011cab:	31 c0                	xor    eax,eax
c0011cad:	85 f6                	test   esi,esi
c0011caf:	0f 95 c0             	setne  al
c0011cb2:	31 d2                	xor    edx,edx
c0011cb4:	f7 d8                	neg    eax
c0011cb6:	83 d2 00             	adc    edx,0x0
c0011cb9:	83 c4 04             	add    esp,0x4
c0011cbc:	5b                   	pop    ebx
c0011cbd:	f7 da                	neg    edx
c0011cbf:	5e                   	pop    esi
c0011cc0:	c3                   	ret    

c0011cc1 <SysUnlink(regs*)>:
c0011cc1:	56                   	push   esi
c0011cc2:	53                   	push   ebx
c0011cc3:	83 ec 10             	sub    esp,0x10
c0011cc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cca:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011ccd:	68 14 01 00 00       	push   0x114
c0011cd2:	e8 81 de ff ff       	call   c000fb58 <malloc>
c0011cd7:	6a 00                	push   0x0
c0011cd9:	89 c3                	mov    ebx,eax
c0011cdb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ce0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ce3:	50                   	push   eax
c0011ce4:	56                   	push   esi
c0011ce5:	53                   	push   ebx
c0011ce6:	e8 77 68 ff ff       	call   c0008562 <File::File(char const*, Process*, bool)>
c0011ceb:	83 c4 14             	add    esp,0x14
c0011cee:	53                   	push   ebx
c0011cef:	e8 58 6b ff ff       	call   c000884c <File::unlink()>
c0011cf4:	83 c4 10             	add    esp,0x10
c0011cf7:	85 db                	test   ebx,ebx
c0011cf9:	89 c6                	mov    esi,eax
c0011cfb:	74 0c                	je     c0011d09 <SysUnlink(regs*)+0x48>
c0011cfd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011cff:	83 ec 0c             	sub    esp,0xc
c0011d02:	53                   	push   ebx
c0011d03:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d06:	83 c4 10             	add    esp,0x10
c0011d09:	31 c0                	xor    eax,eax
c0011d0b:	85 f6                	test   esi,esi
c0011d0d:	0f 95 c0             	setne  al
c0011d10:	31 d2                	xor    edx,edx
c0011d12:	f7 d8                	neg    eax
c0011d14:	83 d2 00             	adc    edx,0x0
c0011d17:	83 c4 04             	add    esp,0x4
c0011d1a:	5b                   	pop    ebx
c0011d1b:	f7 da                	neg    edx
c0011d1d:	5e                   	pop    esi
c0011d1e:	c3                   	ret    

c0011d1f <SysGetArgv(regs*)>:
c0011d1f:	83 ec 0c             	sub    esp,0xc
c0011d22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011d26:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011d29:	85 c0                	test   eax,eax
c0011d2b:	78 2c                	js     c0011d59 <SysGetArgv(regs*)+0x3a>
c0011d2d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011d33:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0011d36:	3b 81 b6 05 00 00    	cmp    eax,DWORD PTR [ecx+0x5b6]
c0011d3c:	7d 1b                	jge    c0011d59 <SysGetArgv(regs*)+0x3a>
c0011d3e:	8b 84 81 ba 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x5ba]
c0011d45:	85 c0                	test   eax,eax
c0011d47:	74 18                	je     c0011d61 <SysGetArgv(regs*)+0x42>
c0011d49:	83 ec 08             	sub    esp,0x8
c0011d4c:	50                   	push   eax
c0011d4d:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011d50:	50                   	push   eax
c0011d51:	e8 fa e8 fe ff       	call   c0000650 <strcpy>
c0011d56:	83 c4 10             	add    esp,0x10
c0011d59:	31 c0                	xor    eax,eax
c0011d5b:	31 d2                	xor    edx,edx
c0011d5d:	83 c4 0c             	add    esp,0xc
c0011d60:	c3                   	ret    
c0011d61:	b8 01 00 00 00       	mov    eax,0x1
c0011d66:	31 d2                	xor    edx,edx
c0011d68:	83 c4 0c             	add    esp,0xc
c0011d6b:	c3                   	ret    

c0011d6c <SysUSleep(regs*)>:
c0011d6c:	83 ec 1c             	sub    esp,0x1c
c0011d6f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011d73:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011d76:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011d79:	6a 00                	push   0x0
c0011d7b:	6a 64                	push   0x64
c0011d7d:	52                   	push   edx
c0011d7e:	50                   	push   eax
c0011d7f:	e8 50 04 01 00       	call   c00221d4 <__udivdi3>
c0011d84:	83 c4 18             	add    esp,0x18
c0011d87:	52                   	push   edx
c0011d88:	50                   	push   eax
c0011d89:	e8 9a 4f 00 00       	call   c0016d28 <milliTenthSleep(unsigned long long)>
c0011d8e:	31 c0                	xor    eax,eax
c0011d90:	31 d2                	xor    edx,edx
c0011d92:	83 c4 1c             	add    esp,0x1c
c0011d95:	c3                   	ret    

c0011d96 <SysSpawn(regs*)>:
c0011d96:	56                   	push   esi
c0011d97:	53                   	push   ebx
c0011d98:	83 ec 04             	sub    esp,0x4
c0011d9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d9f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011da2:	85 f6                	test   esi,esi
c0011da4:	75 0a                	jne    c0011db0 <SysSpawn(regs*)+0x1a>
c0011da6:	83 c4 04             	add    esp,0x4
c0011da9:	31 c0                	xor    eax,eax
c0011dab:	5b                   	pop    ebx
c0011dac:	31 d2                	xor    edx,edx
c0011dae:	5e                   	pop    esi
c0011daf:	c3                   	ret    
c0011db0:	83 ec 0c             	sub    esp,0xc
c0011db3:	68 c4 07 00 00       	push   0x7c4
c0011db8:	e8 9b dd ff ff       	call   c000fb58 <malloc>
c0011dbd:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011dc0:	83 c4 10             	add    esp,0x10
c0011dc3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011dc6:	89 c6                	mov    esi,eax
c0011dc8:	31 c0                	xor    eax,eax
c0011dca:	85 c9                	test   ecx,ecx
c0011dcc:	74 08                	je     c0011dd6 <SysSpawn(regs*)+0x40>
c0011dce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dd3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011dd6:	52                   	push   edx
c0011dd7:	50                   	push   eax
c0011dd8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ddb:	50                   	push   eax
c0011ddc:	56                   	push   esi
c0011ddd:	e8 26 46 00 00       	call   c0016408 <Process::Process(char const*, Process*, char**)>
c0011de2:	83 c4 10             	add    esp,0x10
c0011de5:	80 be be 07 00 00 00 	cmp    BYTE PTR [esi+0x7be],0x0
c0011dec:	75 b8                	jne    c0011da6 <SysSpawn(regs*)+0x10>
c0011dee:	83 ec 0c             	sub    esp,0xc
c0011df1:	56                   	push   esi
c0011df2:	e8 d5 4b 00 00       	call   c00169cc <Process::createUserThread()>
c0011df7:	8b 06                	mov    eax,DWORD PTR [esi]
c0011df9:	83 c4 10             	add    esp,0x10
c0011dfc:	83 c4 04             	add    esp,0x4
c0011dff:	5b                   	pop    ebx
c0011e00:	89 c2                	mov    edx,eax
c0011e02:	c1 fa 1f             	sar    edx,0x1f
c0011e05:	5e                   	pop    esi
c0011e06:	c3                   	ret    

c0011e07 <SysGetEnv(regs*)>:
c0011e07:	57                   	push   edi
c0011e08:	56                   	push   esi
c0011e09:	53                   	push   ebx
c0011e0a:	83 ec 1c             	sub    esp,0x1c
c0011e0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e12:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011e16:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0011e19:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011e1c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011e1f:	51                   	push   ecx
c0011e20:	e8 24 cc ff ff       	call   c000ea49 <KeGetProcessTotalEnvCount(Process*)>
c0011e25:	83 c4 10             	add    esp,0x10
c0011e28:	39 c7                	cmp    edi,eax
c0011e2a:	7c 12                	jl     c0011e3e <SysGetEnv(regs*)+0x37>
c0011e2c:	31 c0                	xor    eax,eax
c0011e2e:	31 d2                	xor    edx,edx
c0011e30:	85 f6                	test   esi,esi
c0011e32:	74 03                	je     c0011e37 <SysGetEnv(regs*)+0x30>
c0011e34:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011e37:	83 c4 10             	add    esp,0x10
c0011e3a:	5b                   	pop    ebx
c0011e3b:	5e                   	pop    esi
c0011e3c:	5f                   	pop    edi
c0011e3d:	c3                   	ret    
c0011e3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011e42:	83 ec 04             	sub    esp,0x4
c0011e45:	57                   	push   edi
c0011e46:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011e4c:	8b 7a 40             	mov    edi,DWORD PTR [edx+0x40]
c0011e4f:	57                   	push   edi
c0011e50:	50                   	push   eax
c0011e51:	e8 13 cc ff ff       	call   c000ea69 <KeGetProcessEnvPair(Process*, int)>
c0011e56:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011e59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011e5d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011e61:	83 c4 0c             	add    esp,0xc
c0011e64:	85 d2                	test   edx,edx
c0011e66:	75 23                	jne    c0011e8b <SysGetEnv(regs*)+0x84>
c0011e68:	83 ec 0c             	sub    esp,0xc
c0011e6b:	50                   	push   eax
c0011e6c:	e8 0f e7 fe ff       	call   c0000580 <strlen>
c0011e71:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011e74:	89 c3                	mov    ebx,eax
c0011e76:	e8 05 e7 fe ff       	call   c0000580 <strlen>
c0011e7b:	83 c4 10             	add    esp,0x10
c0011e7e:	31 d2                	xor    edx,edx
c0011e80:	83 c4 10             	add    esp,0x10
c0011e83:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011e87:	5b                   	pop    ebx
c0011e88:	5e                   	pop    esi
c0011e89:	5f                   	pop    edi
c0011e8a:	c3                   	ret    
c0011e8b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011e8e:	83 ec 08             	sub    esp,0x8
c0011e91:	50                   	push   eax
c0011e92:	56                   	push   esi
c0011e93:	e8 b8 e7 fe ff       	call   c0000650 <strcpy>
c0011e98:	58                   	pop    eax
c0011e99:	5a                   	pop    edx
c0011e9a:	68 6d 91 02 c0       	push   0xc002916d
c0011e9f:	56                   	push   esi
c0011ea0:	e8 cb e9 fe ff       	call   c0000870 <strcat>
c0011ea5:	59                   	pop    ecx
c0011ea6:	5b                   	pop    ebx
c0011ea7:	57                   	push   edi
c0011ea8:	56                   	push   esi
c0011ea9:	e8 c2 e9 fe ff       	call   c0000870 <strcat>
c0011eae:	83 c4 10             	add    esp,0x10
c0011eb1:	31 c0                	xor    eax,eax
c0011eb3:	83 c4 10             	add    esp,0x10
c0011eb6:	31 d2                	xor    edx,edx
c0011eb8:	5b                   	pop    ebx
c0011eb9:	5e                   	pop    esi
c0011eba:	5f                   	pop    edi
c0011ebb:	c3                   	ret    

c0011ebc <SysSetFatAttrib(regs*)>:
c0011ebc:	57                   	push   edi
c0011ebd:	56                   	push   esi
c0011ebe:	53                   	push   ebx
c0011ebf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011ec3:	83 ec 0c             	sub    esp,0xc
c0011ec6:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011ec9:	68 14 01 00 00       	push   0x114
c0011ece:	e8 85 dc ff ff       	call   c000fb58 <malloc>
c0011ed3:	83 c4 0c             	add    esp,0xc
c0011ed6:	89 c3                	mov    ebx,eax
c0011ed8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011edd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ee0:	50                   	push   eax
c0011ee1:	57                   	push   edi
c0011ee2:	53                   	push   ebx
c0011ee3:	e8 78 67 ff ff       	call   c0008660 <File::File(char const*, Process*)>
c0011ee8:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011eeb:	83 c4 0c             	add    esp,0xc
c0011eee:	0f b6 d4             	movzx  edx,ah
c0011ef1:	0f b6 c0             	movzx  eax,al
c0011ef4:	52                   	push   edx
c0011ef5:	50                   	push   eax
c0011ef6:	53                   	push   ebx
c0011ef7:	e8 ea 69 ff ff       	call   c00088e6 <File::chfatattr(unsigned char, unsigned char)>
c0011efc:	83 c4 10             	add    esp,0x10
c0011eff:	85 db                	test   ebx,ebx
c0011f01:	89 c6                	mov    esi,eax
c0011f03:	74 0c                	je     c0011f11 <SysSetFatAttrib(regs*)+0x55>
c0011f05:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f07:	83 ec 0c             	sub    esp,0xc
c0011f0a:	53                   	push   ebx
c0011f0b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f0e:	83 c4 10             	add    esp,0x10
c0011f11:	5b                   	pop    ebx
c0011f12:	31 c0                	xor    eax,eax
c0011f14:	85 f6                	test   esi,esi
c0011f16:	0f 95 c0             	setne  al
c0011f19:	31 d2                	xor    edx,edx
c0011f1b:	5e                   	pop    esi
c0011f1c:	f7 d8                	neg    eax
c0011f1e:	83 d2 00             	adc    edx,0x0
c0011f21:	f7 da                	neg    edx
c0011f23:	5f                   	pop    edi
c0011f24:	c3                   	ret    

c0011f25 <SysShutdown(regs*)>:
c0011f25:	83 ec 1c             	sub    esp,0x1c
c0011f28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f2c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011f2f:	85 c9                	test   ecx,ecx
c0011f31:	74 18                	je     c0011f4b <SysShutdown(regs*)+0x26>
c0011f33:	83 f9 01             	cmp    ecx,0x1
c0011f36:	74 26                	je     c0011f5e <SysShutdown(regs*)+0x39>
c0011f38:	83 f9 02             	cmp    ecx,0x2
c0011f3b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f40:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f45:	74 24                	je     c0011f6b <SysShutdown(regs*)+0x46>
c0011f47:	83 c4 1c             	add    esp,0x1c
c0011f4a:	c3                   	ret    
c0011f4b:	e8 aa e9 ff ff       	call   c00108fa <KeShutdown()>
c0011f50:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f55:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f5a:	83 c4 1c             	add    esp,0x1c
c0011f5d:	c3                   	ret    
c0011f5e:	e8 cd e9 ff ff       	call   c0010930 <KeSleep()>
c0011f63:	31 c0                	xor    eax,eax
c0011f65:	31 d2                	xor    edx,edx
c0011f67:	83 c4 1c             	add    esp,0x1c
c0011f6a:	c3                   	ret    
c0011f6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011f6f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011f73:	e8 e8 e9 ff ff       	call   c0010960 <KeRestart()>
c0011f78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011f7c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f80:	eb c5                	jmp    c0011f47 <SysShutdown(regs*)+0x22>

c0011f82 <SysPipe(regs*)>:
c0011f82:	57                   	push   edi
c0011f83:	56                   	push   esi
c0011f84:	53                   	push   ebx
c0011f85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f89:	83 ec 0c             	sub    esp,0xc
c0011f8c:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011f8f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011f92:	6a 20                	push   0x20
c0011f94:	e8 bf db ff ff       	call   c000fb58 <malloc>
c0011f99:	89 c3                	mov    ebx,eax
c0011f9b:	58                   	pop    eax
c0011f9c:	5a                   	pop    edx
c0011f9d:	68 00 50 00 00       	push   0x5000
c0011fa2:	53                   	push   ebx
c0011fa3:	e8 d2 e7 ff ff       	call   c001077a <Pipe::Pipe(int)>
c0011fa8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011fab:	e8 e8 10 00 00       	call   c0013098 <UnixFile::getFileDescriptor()>
c0011fb0:	89 07                	mov    DWORD PTR [edi],eax
c0011fb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011fb5:	e8 de 10 00 00       	call   c0013098 <UnixFile::getFileDescriptor()>
c0011fba:	83 c4 10             	add    esp,0x10
c0011fbd:	31 d2                	xor    edx,edx
c0011fbf:	89 06                	mov    DWORD PTR [esi],eax
c0011fc1:	31 c0                	xor    eax,eax
c0011fc3:	5b                   	pop    ebx
c0011fc4:	5e                   	pop    esi
c0011fc5:	5f                   	pop    edi
c0011fc6:	c3                   	ret    

c0011fc7 <SysGetUnixTime(regs*)>:
c0011fc7:	53                   	push   ebx
c0011fc8:	83 ec 10             	sub    esp,0x10
c0011fcb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011fcf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011fd2:	52                   	push   edx
c0011fd3:	68 6f 91 02 c0       	push   0xc002916f
c0011fd8:	e8 89 4f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011fdd:	83 c4 10             	add    esp,0x10
c0011fe0:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c0011fe4:	74 3b                	je     c0012021 <SysGetUnixTime(regs*)+0x5a>
c0011fe6:	a1 08 21 03 c0       	mov    eax,ds:0xc0032108
c0011feb:	83 ec 0c             	sub    esp,0xc
c0011fee:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011ff4:	50                   	push   eax
c0011ff5:	e8 18 76 ff ff       	call   c0009612 <Clock::timeInSecondsLocal()>
c0011ffa:	83 c4 0c             	add    esp,0xc
c0011ffd:	52                   	push   edx
c0011ffe:	50                   	push   eax
c0011fff:	68 83 91 02 c0       	push   0xc0029183
c0012004:	e8 5d 4f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012009:	a1 08 21 03 c0       	mov    eax,ds:0xc0032108
c001200e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012014:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012018:	83 c4 18             	add    esp,0x18
c001201b:	5b                   	pop    ebx
c001201c:	e9 f1 75 ff ff       	jmp    c0009612 <Clock::timeInSecondsLocal()>
c0012021:	6b 0d 54 1b 03 c0 64 	imul   ecx,DWORD PTR ds:0xc0031b54,0x64
c0012028:	b8 64 00 00 00       	mov    eax,0x64
c001202d:	f7 25 50 1b 03 c0    	mul    DWORD PTR ds:0xc0031b50
c0012033:	83 c4 08             	add    esp,0x8
c0012036:	5b                   	pop    ebx
c0012037:	01 ca                	add    edx,ecx
c0012039:	c3                   	ret    

c001203a <string_ends_with(char const*, char const*)>:
c001203a:	57                   	push   edi
c001203b:	56                   	push   esi
c001203c:	53                   	push   ebx
c001203d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012041:	83 ec 0c             	sub    esp,0xc
c0012044:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012048:	53                   	push   ebx
c0012049:	e8 32 e5 fe ff       	call   c0000580 <strlen>
c001204e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012051:	89 c6                	mov    esi,eax
c0012053:	e8 28 e5 fe ff       	call   c0000580 <strlen>
c0012058:	83 c4 10             	add    esp,0x10
c001205b:	31 d2                	xor    edx,edx
c001205d:	39 c6                	cmp    esi,eax
c001205f:	7d 06                	jge    c0012067 <string_ends_with(char const*, char const*)+0x2d>
c0012061:	5b                   	pop    ebx
c0012062:	89 d0                	mov    eax,edx
c0012064:	5e                   	pop    esi
c0012065:	5f                   	pop    edi
c0012066:	c3                   	ret    
c0012067:	83 ec 08             	sub    esp,0x8
c001206a:	29 c6                	sub    esi,eax
c001206c:	57                   	push   edi
c001206d:	01 f3                	add    ebx,esi
c001206f:	53                   	push   ebx
c0012070:	e8 0b e7 fe ff       	call   c0000780 <strcmp>
c0012075:	83 c4 10             	add    esp,0x10
c0012078:	31 d2                	xor    edx,edx
c001207a:	5b                   	pop    ebx
c001207b:	5e                   	pop    esi
c001207c:	85 c0                	test   eax,eax
c001207e:	5f                   	pop    edi
c001207f:	0f 94 c2             	sete   dl
c0012082:	89 d0                	mov    eax,edx
c0012084:	c3                   	ret    

c0012085 <SysOpen(regs*)>:
c0012085:	56                   	push   esi
c0012086:	53                   	push   ebx
c0012087:	81 ec 04 01 00 00    	sub    esp,0x104
c001208d:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012094:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012097:	85 c0                	test   eax,eax
c0012099:	0f 84 c4 01 00 00    	je     c0012263 <SysOpen(regs*)+0x1de>
c001209f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00120a2:	85 c0                	test   eax,eax
c00120a4:	0f 84 b9 01 00 00    	je     c0012263 <SysOpen(regs*)+0x1de>
c00120aa:	6a 00                	push   0x0
c00120ac:	68 8a 91 02 c0       	push   0xc002918a
c00120b1:	50                   	push   eax
c00120b2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00120b6:	56                   	push   esi
c00120b7:	e8 78 62 ff ff       	call   c0008334 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00120bc:	89 34 24             	mov    DWORD PTR [esp],esi
c00120bf:	e8 bc e4 fe ff       	call   c0000580 <strlen>
c00120c4:	83 c4 10             	add    esp,0x10
c00120c7:	83 e8 01             	sub    eax,0x1
c00120ca:	74 29                	je     c00120f5 <SysOpen(regs*)+0x70>
c00120cc:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00120d0:	83 fa 2e             	cmp    edx,0x2e
c00120d3:	74 1c                	je     c00120f1 <SysOpen(regs*)+0x6c>
c00120d5:	83 fa 3a             	cmp    edx,0x3a
c00120d8:	74 17                	je     c00120f1 <SysOpen(regs*)+0x6c>
c00120da:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00120de:	83 e8 01             	sub    eax,0x1
c00120e1:	74 12                	je     c00120f5 <SysOpen(regs*)+0x70>
c00120e3:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00120e7:	83 fa 3a             	cmp    edx,0x3a
c00120ea:	74 05                	je     c00120f1 <SysOpen(regs*)+0x6c>
c00120ec:	83 fa 2e             	cmp    edx,0x2e
c00120ef:	75 e9                	jne    c00120da <SysOpen(regs*)+0x55>
c00120f1:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00120f5:	83 ec 08             	sub    esp,0x8
c00120f8:	68 8e 91 02 c0       	push   0xc002918e
c00120fd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012100:	50                   	push   eax
c0012101:	e8 34 ff ff ff       	call   c001203a <string_ends_with(char const*, char const*)>
c0012106:	83 c4 10             	add    esp,0x10
c0012109:	85 c0                	test   eax,eax
c001210b:	74 1d                	je     c001212a <SysOpen(regs*)+0xa5>
c001210d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012110:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0012116:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001211d:	81 c4 04 01 00 00    	add    esp,0x104
c0012123:	31 c0                	xor    eax,eax
c0012125:	5b                   	pop    ebx
c0012126:	31 d2                	xor    edx,edx
c0012128:	5e                   	pop    esi
c0012129:	c3                   	ret    
c001212a:	83 ec 08             	sub    esp,0x8
c001212d:	68 93 91 02 c0       	push   0xc0029193
c0012132:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012135:	50                   	push   eax
c0012136:	e8 ff fe ff ff       	call   c001203a <string_ends_with(char const*, char const*)>
c001213b:	83 c4 10             	add    esp,0x10
c001213e:	85 c0                	test   eax,eax
c0012140:	75 cb                	jne    c001210d <SysOpen(regs*)+0x88>
c0012142:	83 ec 08             	sub    esp,0x8
c0012145:	68 8f 91 02 c0       	push   0xc002918f
c001214a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001214d:	50                   	push   eax
c001214e:	e8 2d e6 fe ff       	call   c0000780 <strcmp>
c0012153:	83 c4 10             	add    esp,0x10
c0012156:	85 c0                	test   eax,eax
c0012158:	74 b3                	je     c001210d <SysOpen(regs*)+0x88>
c001215a:	83 ec 08             	sub    esp,0x8
c001215d:	68 8e 91 02 c0       	push   0xc002918e
c0012162:	56                   	push   esi
c0012163:	e8 d2 fe ff ff       	call   c001203a <string_ends_with(char const*, char const*)>
c0012168:	83 c4 10             	add    esp,0x10
c001216b:	85 c0                	test   eax,eax
c001216d:	75 9e                	jne    c001210d <SysOpen(regs*)+0x88>
c001216f:	83 ec 08             	sub    esp,0x8
c0012172:	68 98 91 02 c0       	push   0xc0029198
c0012177:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001217a:	50                   	push   eax
c001217b:	e8 ba fe ff ff       	call   c001203a <string_ends_with(char const*, char const*)>
c0012180:	83 c4 10             	add    esp,0x10
c0012183:	85 c0                	test   eax,eax
c0012185:	0f 85 eb 00 00 00    	jne    c0012276 <SysOpen(regs*)+0x1f1>
c001218b:	83 ec 08             	sub    esp,0x8
c001218e:	68 9d 91 02 c0       	push   0xc002919d
c0012193:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012196:	50                   	push   eax
c0012197:	e8 9e fe ff ff       	call   c001203a <string_ends_with(char const*, char const*)>
c001219c:	83 c4 10             	add    esp,0x10
c001219f:	85 c0                	test   eax,eax
c00121a1:	0f 85 cf 00 00 00    	jne    c0012276 <SysOpen(regs*)+0x1f1>
c00121a7:	83 ec 08             	sub    esp,0x8
c00121aa:	68 99 91 02 c0       	push   0xc0029199
c00121af:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00121b2:	51                   	push   ecx
c00121b3:	e8 c8 e5 fe ff       	call   c0000780 <strcmp>
c00121b8:	83 c4 10             	add    esp,0x10
c00121bb:	85 c0                	test   eax,eax
c00121bd:	0f 84 b3 00 00 00    	je     c0012276 <SysOpen(regs*)+0x1f1>
c00121c3:	83 ec 08             	sub    esp,0x8
c00121c6:	68 98 91 02 c0       	push   0xc0029198
c00121cb:	56                   	push   esi
c00121cc:	e8 69 fe ff ff       	call   c001203a <string_ends_with(char const*, char const*)>
c00121d1:	83 c4 10             	add    esp,0x10
c00121d4:	85 c0                	test   eax,eax
c00121d6:	0f 85 9a 00 00 00    	jne    c0012276 <SysOpen(regs*)+0x1f1>
c00121dc:	83 ec 0c             	sub    esp,0xc
c00121df:	68 14 01 00 00       	push   0x114
c00121e4:	e8 6f d9 ff ff       	call   c000fb58 <malloc>
c00121e9:	83 c4 0c             	add    esp,0xc
c00121ec:	89 c6                	mov    esi,eax
c00121ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121f3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00121f6:	50                   	push   eax
c00121f7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00121fa:	52                   	push   edx
c00121fb:	56                   	push   esi
c00121fc:	e8 5f 64 ff ff       	call   c0008660 <File::File(char const*, Process*)>
c0012201:	83 c4 10             	add    esp,0x10
c0012204:	85 f6                	test   esi,esi
c0012206:	74 5b                	je     c0012263 <SysOpen(regs*)+0x1de>
c0012208:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001220b:	0f b6 c2             	movzx  eax,dl
c001220e:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012211:	89 d0                	mov    eax,edx
c0012213:	83 e0 01             	and    eax,0x1
c0012216:	f6 c2 02             	test   dl,0x2
c0012219:	74 03                	je     c001221e <SysOpen(regs*)+0x199>
c001221b:	83 c8 02             	or     eax,0x2
c001221e:	f6 c2 04             	test   dl,0x4
c0012221:	74 03                	je     c0012226 <SysOpen(regs*)+0x1a1>
c0012223:	83 c8 04             	or     eax,0x4
c0012226:	f6 c2 08             	test   dl,0x8
c0012229:	74 03                	je     c001222e <SysOpen(regs*)+0x1a9>
c001222b:	83 c8 0a             	or     eax,0xa
c001222e:	80 e2 10             	and    dl,0x10
c0012231:	74 03                	je     c0012236 <SysOpen(regs*)+0x1b1>
c0012233:	83 c8 12             	or     eax,0x12
c0012236:	83 ec 08             	sub    esp,0x8
c0012239:	50                   	push   eax
c001223a:	56                   	push   esi
c001223b:	e8 3e 64 ff ff       	call   c000867e <File::open(FileOpenMode)>
c0012240:	83 c4 10             	add    esp,0x10
c0012243:	85 c0                	test   eax,eax
c0012245:	75 1c                	jne    c0012263 <SysOpen(regs*)+0x1de>
c0012247:	83 ec 0c             	sub    esp,0xc
c001224a:	56                   	push   esi
c001224b:	e8 48 0e 00 00       	call   c0013098 <UnixFile::getFileDescriptor()>
c0012250:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012253:	83 c4 10             	add    esp,0x10
c0012256:	89 02                	mov    DWORD PTR [edx],eax
c0012258:	c1 f8 1f             	sar    eax,0x1f
c001225b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001225e:	e9 ba fe ff ff       	jmp    c001211d <SysOpen(regs*)+0x98>
c0012263:	81 c4 04 01 00 00    	add    esp,0x104
c0012269:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001226e:	5b                   	pop    ebx
c001226f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012274:	5e                   	pop    esi
c0012275:	c3                   	ret    
c0012276:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012279:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001227f:	e9 92 fe ff ff       	jmp    c0012116 <SysOpen(regs*)+0x91>

c0012284 <KeSystemCall(regs*, void*)>:
c0012284:	53                   	push   ebx
c0012285:	83 ec 08             	sub    esp,0x8
c0012288:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001228c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001228f:	83 f8 48             	cmp    eax,0x48
c0012292:	77 16                	ja     c00122aa <KeSystemCall(regs*, void*)+0x26>
c0012294:	8b 14 85 a0 c3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3c60]
c001229b:	85 d2                	test   edx,edx
c001229d:	74 0b                	je     c00122aa <KeSystemCall(regs*, void*)+0x26>
c001229f:	83 ec 0c             	sub    esp,0xc
c00122a2:	53                   	push   ebx
c00122a3:	ff d2                	call   edx
c00122a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00122a8:	eb 0d                	jmp    c00122b7 <KeSystemCall(regs*, void*)+0x33>
c00122aa:	52                   	push   edx
c00122ab:	52                   	push   edx
c00122ac:	50                   	push   eax
c00122ad:	68 a2 91 02 c0       	push   0xc00291a2
c00122b2:	e8 af 4c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00122b7:	83 c4 10             	add    esp,0x10
c00122ba:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00122bf:	83 c4 08             	add    esp,0x8
c00122c2:	31 d2                	xor    edx,edx
c00122c4:	5b                   	pop    ebx
c00122c5:	c3                   	ret    

c00122c6 <VgaText::isAtty()>:
c00122c6:	b0 01                	mov    al,0x1
c00122c8:	c3                   	ret    
c00122c9:	90                   	nop

c00122ca <VgaText::~VgaText()>:
c00122ca:	83 ec 0c             	sub    esp,0xc
c00122cd:	ba 1c 92 02 c0       	mov    edx,0xc002921c
c00122d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122d6:	89 10                	mov    DWORD PTR [eax],edx
c00122d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122dc:	83 ec 0c             	sub    esp,0xc
c00122df:	50                   	push   eax
c00122e0:	e8 a1 0f 00 00       	call   c0013286 <UnixFile::~UnixFile()>
c00122e5:	83 c4 10             	add    esp,0x10
c00122e8:	90                   	nop
c00122e9:	83 c4 0c             	add    esp,0xc
c00122ec:	c3                   	ret    
c00122ed:	90                   	nop

c00122ee <VgaText::~VgaText()>:
c00122ee:	83 ec 0c             	sub    esp,0xc
c00122f1:	83 ec 0c             	sub    esp,0xc
c00122f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122f8:	e8 cd ff ff ff       	call   c00122ca <VgaText::~VgaText()>
c00122fd:	83 c4 10             	add    esp,0x10
c0012300:	83 ec 08             	sub    esp,0x8
c0012303:	68 84 01 00 00       	push   0x184
c0012308:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001230c:	e8 4f b4 ff ff       	call   c000d760 <operator delete(void*, unsigned long)>
c0012311:	83 c4 10             	add    esp,0x10
c0012314:	83 c4 0c             	add    esp,0xc
c0012317:	c3                   	ret    

c0012318 <VgaText::read(unsigned long long, void*, int*)>:
c0012318:	83 ec 10             	sub    esp,0x10
c001231b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001231f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012323:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012327:	e8 bf 86 ff ff       	call   c000a9eb <readKeyboard(VgaText*, char*, unsigned long)>
c001232c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012330:	89 02                	mov    DWORD PTR [edx],eax
c0012332:	31 c0                	xor    eax,eax
c0012334:	83 c4 1c             	add    esp,0x1c
c0012337:	c3                   	ret    

c0012338 <setTerminalScrollLock(bool)>:
c0012338:	c3                   	ret    

c0012339 <doTerminalCycle()>:
c0012339:	c3                   	ret    

c001233a <addToTerminalCycle(VgaText*)>:
c001233a:	c3                   	ret    

c001233b <scrollTerminalScrollLock(int)>:
c001233b:	c3                   	ret    

c001233c <VgaText::updateTitle()>:
c001233c:	c3                   	ret    
c001233d:	90                   	nop

c001233e <VgaText::load()>:
c001233e:	c3                   	ret    
c001233f:	90                   	nop

c0012340 <VgaText::updateCursor()>:
c0012340:	83 ec 14             	sub    esp,0x14
c0012343:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012347:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001234a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001234d:	e8 9e 9b 00 00       	call   c001bef0 <HalConsoleCursorUpdate(int, int)>
c0012352:	83 c4 1c             	add    esp,0x1c
c0012355:	c3                   	ret    

c0012356 <VgaText::doANSI_SGR(int)>:
c0012356:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001235a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001235e:	85 d2                	test   edx,edx
c0012360:	75 0b                	jne    c001236d <VgaText::doANSI_SGR(int)+0x17>
c0012362:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0012365:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012368:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001236b:	eb 59                	jmp    c00123c6 <VgaText::doANSI_SGR(int)+0x70>
c001236d:	83 fa 07             	cmp    edx,0x7
c0012370:	75 0b                	jne    c001237d <VgaText::doANSI_SGR(int)+0x27>
c0012372:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0012375:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0012378:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c001237b:	eb 49                	jmp    c00123c6 <VgaText::doANSI_SGR(int)+0x70>
c001237d:	83 fa 1b             	cmp    edx,0x1b
c0012380:	74 e0                	je     c0012362 <VgaText::doANSI_SGR(int)+0xc>
c0012382:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0012385:	83 f9 07             	cmp    ecx,0x7
c0012388:	77 09                	ja     c0012393 <VgaText::doANSI_SGR(int)+0x3d>
c001238a:	8b 14 8d 00 c5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3b00]
c0012391:	eb 20                	jmp    c00123b3 <VgaText::doANSI_SGR(int)+0x5d>
c0012393:	8d 4a d8             	lea    ecx,[edx-0x28]
c0012396:	83 f9 07             	cmp    ecx,0x7
c0012399:	77 09                	ja     c00123a4 <VgaText::doANSI_SGR(int)+0x4e>
c001239b:	8b 14 8d 00 c5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3b00]
c00123a2:	eb 22                	jmp    c00123c6 <VgaText::doANSI_SGR(int)+0x70>
c00123a4:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00123a7:	83 f9 07             	cmp    ecx,0x7
c00123aa:	77 0b                	ja     c00123b7 <VgaText::doANSI_SGR(int)+0x61>
c00123ac:	8b 14 95 b8 c3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3c48]
c00123b3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00123b6:	c3                   	ret    
c00123b7:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00123ba:	83 f9 07             	cmp    ecx,0x7
c00123bd:	77 0a                	ja     c00123c9 <VgaText::doANSI_SGR(int)+0x73>
c00123bf:	8b 14 95 90 c3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3c70]
c00123c6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00123c9:	c3                   	ret    

c00123ca <VgaText::setDefaultBgColour(VgaColour)>:
c00123ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123d2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00123d5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00123d8:	c3                   	ret    
c00123d9:	90                   	nop

c00123da <VgaText::setDefaultFgColour(VgaColour)>:
c00123da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123e2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00123e5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00123e8:	c3                   	ret    
c00123e9:	90                   	nop

c00123ea <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00123ea:	53                   	push   ebx
c00123eb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00123ef:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00123f7:	51                   	push   ecx
c00123f8:	e8 cd ff ff ff       	call   c00123ca <VgaText::setDefaultBgColour(VgaColour)>
c00123fd:	58                   	pop    eax
c00123fe:	5a                   	pop    edx
c00123ff:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0012403:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0012407:	5b                   	pop    ebx
c0012408:	eb d0                	jmp    c00123da <VgaText::setDefaultFgColour(VgaColour)>

c001240a <VgaText::setTitleTextColour(VgaColour)>:
c001240a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001240e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012412:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0012415:	c3                   	ret    

c0012416 <VgaText::setTitleColour(VgaColour)>:
c0012416:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001241a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001241e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012421:	c3                   	ret    

c0012422 <VgaText::setTitle(char*)>:
c0012422:	c3                   	ret    
c0012423:	90                   	nop

c0012424 <VgaText::combineColours(unsigned char, unsigned char)>:
c0012424:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012428:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001242d:	83 e0 0f             	and    eax,0xf
c0012430:	c1 e2 04             	shl    edx,0x4
c0012433:	09 d0                	or     eax,edx
c0012435:	c3                   	ret    

c0012436 <VgaText::scrollScreen()>:
c0012436:	55                   	push   ebp
c0012437:	57                   	push   edi
c0012438:	56                   	push   esi
c0012439:	be 01 00 00 00       	mov    esi,0x1
c001243e:	53                   	push   ebx
c001243f:	83 ec 0c             	sub    esp,0xc
c0012442:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012446:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0012449:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001244f:	31 ff                	xor    edi,edi
c0012451:	01 e9                	add    ecx,ebp
c0012453:	8a 01                	mov    al,BYTE PTR [ecx]
c0012455:	83 fe 18             	cmp    esi,0x18
c0012458:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c001245e:	75 20                	jne    c0012480 <VgaText::scrollScreen()+0x4a>
c0012460:	f7 c7 01 00 00 00    	test   edi,0x1
c0012466:	74 15                	je     c001247d <VgaText::scrollScreen()+0x47>
c0012468:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001246c:	50                   	push   eax
c001246d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0012471:	50                   	push   eax
c0012472:	e8 ad ff ff ff       	call   c0012424 <VgaText::combineColours(unsigned char, unsigned char)>
c0012477:	5a                   	pop    edx
c0012478:	5a                   	pop    edx
c0012479:	88 01                	mov    BYTE PTR [ecx],al
c001247b:	eb 03                	jmp    c0012480 <VgaText::scrollScreen()+0x4a>
c001247d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0012480:	47                   	inc    edi
c0012481:	41                   	inc    ecx
c0012482:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0012488:	75 c9                	jne    c0012453 <VgaText::scrollScreen()+0x1d>
c001248a:	46                   	inc    esi
c001248b:	83 fe 19             	cmp    esi,0x19
c001248e:	75 b9                	jne    c0012449 <VgaText::scrollScreen()+0x13>
c0012490:	39 1d f4 21 03 c0    	cmp    DWORD PTR ds:0xc00321f4,ebx
c0012496:	75 1f                	jne    c00124b7 <VgaText::scrollScreen()+0x81>
c0012498:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001249c:	74 05                	je     c00124a3 <VgaText::scrollScreen()+0x6d>
c001249e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00124a1:	eb 14                	jmp    c00124b7 <VgaText::scrollScreen()+0x81>
c00124a3:	50                   	push   eax
c00124a4:	50                   	push   eax
c00124a5:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00124a9:	50                   	push   eax
c00124aa:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00124ae:	50                   	push   eax
c00124af:	e8 d0 98 00 00       	call   c001bd84 <HalConsoleScroll(int, int)>
c00124b4:	83 c4 10             	add    esp,0x10
c00124b7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00124bb:	83 c4 0c             	add    esp,0xc
c00124be:	5b                   	pop    ebx
c00124bf:	5e                   	pop    esi
c00124c0:	5f                   	pop    edi
c00124c1:	5d                   	pop    ebp
c00124c2:	e9 79 fe ff ff       	jmp    c0012340 <VgaText::updateCursor()>
c00124c7:	90                   	nop

c00124c8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00124c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00124cd:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00124d2:	c1 e0 08             	shl    eax,0x8
c00124d5:	09 d0                	or     eax,edx
c00124d7:	c3                   	ret    

c00124d8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00124d8:	55                   	push   ebp
c00124d9:	57                   	push   edi
c00124da:	56                   	push   esi
c00124db:	53                   	push   ebx
c00124dc:	83 ec 1c             	sub    esp,0x1c
c00124df:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00124e3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00124e7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00124eb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00124ef:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c00124f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00124f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00124fa:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00124fe:	85 ed                	test   ebp,ebp
c0012500:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012504:	75 14                	jne    c001251a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c0012506:	c7 44 24 30 b6 91 02 c0 	mov    DWORD PTR [esp+0x30],0xc00291b6
c001250e:	83 c4 1c             	add    esp,0x1c
c0012511:	5b                   	pop    ebx
c0012512:	5e                   	pop    esi
c0012513:	5f                   	pop    edi
c0012514:	5d                   	pop    ebp
c0012515:	e9 92 da ff ff       	jmp    c000ffac <KePanic(char const*)>
c001251a:	50                   	push   eax
c001251b:	50                   	push   eax
c001251c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012521:	50                   	push   eax
c0012522:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012527:	50                   	push   eax
c0012528:	e8 f7 fe ff ff       	call   c0012424 <VgaText::combineColours(unsigned char, unsigned char)>
c001252d:	5a                   	pop    edx
c001252e:	5a                   	pop    edx
c001252f:	0f b6 c0             	movzx  eax,al
c0012532:	0f be c9             	movsx  ecx,cl
c0012535:	50                   	push   eax
c0012536:	51                   	push   ecx
c0012537:	e8 8c ff ff ff       	call   c00124c8 <VgaText::combineCharAndColour(char, unsigned char)>
c001253c:	6b d6 50             	imul   edx,esi,0x50
c001253f:	83 c4 10             	add    esp,0x10
c0012542:	01 da                	add    edx,ebx
c0012544:	0f b7 d2             	movzx  edx,dx
c0012547:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c001254c:	39 3d f4 21 03 c0    	cmp    DWORD PTR ds:0xc00321f4,edi
c0012552:	75 28                	jne    c001257c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c0012554:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0012558:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001255c:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012560:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0012564:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012568:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001256c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012570:	83 c4 1c             	add    esp,0x1c
c0012573:	5b                   	pop    ebx
c0012574:	5e                   	pop    esi
c0012575:	5f                   	pop    edi
c0012576:	5d                   	pop    ebp
c0012577:	e9 10 99 00 00       	jmp    c001be8c <HalConsoleWriteCharacter(char, int, int, int, int)>
c001257c:	83 c4 1c             	add    esp,0x1c
c001257f:	5b                   	pop    ebx
c0012580:	5e                   	pop    esi
c0012581:	5f                   	pop    edi
c0012582:	5d                   	pop    ebp
c0012583:	c3                   	ret    

c0012584 <VgaText::getCursorX()>:
c0012584:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012588:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001258b:	c3                   	ret    

c001258c <VgaText::getCursorY()>:
c001258c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012590:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0012593:	c3                   	ret    

c0012594 <VgaText::setCursor(int, int)>:
c0012594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001259c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001259f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125a3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00125a6:	e9 95 fd ff ff       	jmp    c0012340 <VgaText::updateCursor()>

c00125ab <setActiveTerminal(VgaText*)>:
c00125ab:	53                   	push   ebx
c00125ac:	83 ec 08             	sub    esp,0x8
c00125af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00125b3:	85 db                	test   ebx,ebx
c00125b5:	75 11                	jne    c00125c8 <setActiveTerminal(VgaText*)+0x1d>
c00125b7:	c7 44 24 10 c6 91 02 c0 	mov    DWORD PTR [esp+0x10],0xc00291c6
c00125bf:	83 c4 08             	add    esp,0x8
c00125c2:	5b                   	pop    ebx
c00125c3:	e9 e4 d9 ff ff       	jmp    c000ffac <KePanic(char const*)>
c00125c8:	a1 f4 21 03 c0       	mov    eax,ds:0xc00321f4
c00125cd:	85 c0                	test   eax,eax
c00125cf:	74 0c                	je     c00125dd <setActiveTerminal(VgaText*)+0x32>
c00125d1:	83 ec 0c             	sub    esp,0xc
c00125d4:	50                   	push   eax
c00125d5:	e8 66 fd ff ff       	call   c0012340 <VgaText::updateCursor()>
c00125da:	83 c4 10             	add    esp,0x10
c00125dd:	50                   	push   eax
c00125de:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00125e1:	89 1d f4 21 03 c0    	mov    DWORD PTR ds:0xc00321f4,ebx
c00125e7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00125ea:	53                   	push   ebx
c00125eb:	e8 a4 ff ff ff       	call   c0012594 <VgaText::setCursor(int, int)>
c00125f0:	83 c4 18             	add    esp,0x18
c00125f3:	5b                   	pop    ebx
c00125f4:	c3                   	ret    
c00125f5:	90                   	nop

c00125f6 <VgaText::clearScreen()>:
c00125f6:	57                   	push   edi
c00125f7:	56                   	push   esi
c00125f8:	31 f6                	xor    esi,esi
c00125fa:	53                   	push   ebx
c00125fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00125ff:	52                   	push   edx
c0012600:	6a 00                	push   0x0
c0012602:	6a 00                	push   0x0
c0012604:	53                   	push   ebx
c0012605:	e8 8a ff ff ff       	call   c0012594 <VgaText::setCursor(int, int)>
c001260a:	83 c4 10             	add    esp,0x10
c001260d:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0012614:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0012617:	7e 20                	jle    c0012639 <VgaText::clearScreen()+0x43>
c0012619:	31 ff                	xor    edi,edi
c001261b:	50                   	push   eax
c001261c:	50                   	push   eax
c001261d:	56                   	push   esi
c001261e:	57                   	push   edi
c001261f:	47                   	inc    edi
c0012620:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012623:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012626:	6a 20                	push   0x20
c0012628:	53                   	push   ebx
c0012629:	e8 aa fe ff ff       	call   c00124d8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001262e:	83 c4 20             	add    esp,0x20
c0012631:	83 ff 50             	cmp    edi,0x50
c0012634:	75 e5                	jne    c001261b <VgaText::clearScreen()+0x25>
c0012636:	46                   	inc    esi
c0012637:	eb db                	jmp    c0012614 <VgaText::clearScreen()+0x1e>
c0012639:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0012640:	5b                   	pop    ebx
c0012641:	5e                   	pop    esi
c0012642:	5f                   	pop    edi
c0012643:	c3                   	ret    

c0012644 <VgaText::setCursorX(int)>:
c0012644:	83 ec 10             	sub    esp,0x10
c0012647:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001264b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001264e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012652:	50                   	push   eax
c0012653:	e8 3c ff ff ff       	call   c0012594 <VgaText::setCursor(int, int)>
c0012658:	83 c4 1c             	add    esp,0x1c
c001265b:	c3                   	ret    

c001265c <VgaText::setCursorY(int)>:
c001265c:	83 ec 10             	sub    esp,0x10
c001265f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012663:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012667:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001266a:	50                   	push   eax
c001266b:	e8 24 ff ff ff       	call   c0012594 <VgaText::setCursor(int, int)>
c0012670:	83 c4 1c             	add    esp,0x1c
c0012673:	c3                   	ret    

c0012674 <VgaText::incrementCursor(bool)>:
c0012674:	56                   	push   esi
c0012675:	53                   	push   ebx
c0012676:	51                   	push   ecx
c0012677:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001267b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001267f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012682:	40                   	inc    eax
c0012683:	83 f8 50             	cmp    eax,0x50
c0012686:	74 05                	je     c001268d <VgaText::incrementCursor(bool)+0x19>
c0012688:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001268b:	eb 24                	jmp    c00126b1 <VgaText::incrementCursor(bool)+0x3d>
c001268d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012694:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012697:	8d 50 01             	lea    edx,[eax+0x1]
c001269a:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001269d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00126a0:	75 0f                	jne    c00126b1 <VgaText::incrementCursor(bool)+0x3d>
c00126a2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00126a5:	83 ec 0c             	sub    esp,0xc
c00126a8:	53                   	push   ebx
c00126a9:	e8 88 fd ff ff       	call   c0012436 <VgaText::scrollScreen()>
c00126ae:	83 c4 10             	add    esp,0x10
c00126b1:	89 f0                	mov    eax,esi
c00126b3:	84 c0                	test   al,al
c00126b5:	74 0c                	je     c00126c3 <VgaText::incrementCursor(bool)+0x4f>
c00126b7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00126bb:	5a                   	pop    edx
c00126bc:	5b                   	pop    ebx
c00126bd:	5e                   	pop    esi
c00126be:	e9 7d fc ff ff       	jmp    c0012340 <VgaText::updateCursor()>
c00126c3:	58                   	pop    eax
c00126c4:	5b                   	pop    ebx
c00126c5:	5e                   	pop    esi
c00126c6:	c3                   	ret    
c00126c7:	90                   	nop

c00126c8 <VgaText::decrementCursor(bool)>:
c00126c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00126cc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00126d0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00126d3:	85 c0                	test   eax,eax
c00126d5:	74 04                	je     c00126db <VgaText::decrementCursor(bool)+0x13>
c00126d7:	48                   	dec    eax
c00126d8:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00126db:	84 c9                	test   cl,cl
c00126dd:	74 09                	je     c00126e8 <VgaText::decrementCursor(bool)+0x20>
c00126df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00126e3:	e9 58 fc ff ff       	jmp    c0012340 <VgaText::updateCursor()>
c00126e8:	c3                   	ret    
c00126e9:	90                   	nop

c00126ea <VgaText::putchar(char, VgaColour, VgaColour)>:
c00126ea:	53                   	push   ebx
c00126eb:	83 ec 08             	sub    esp,0x8
c00126ee:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00126f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00126f7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00126fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00126ff:	83 f8 07             	cmp    eax,0x7
c0012702:	75 21                	jne    c0012725 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0012704:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001270c:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0012714:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c001271c:	83 c4 08             	add    esp,0x8
c001271f:	5b                   	pop    ebx
c0012720:	e9 de 67 ff ff       	jmp    c0008f03 <KeBeep(int, int, bool)>
c0012725:	83 f8 0d             	cmp    eax,0xd
c0012728:	75 09                	jne    c0012733 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c001272a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012731:	eb 2d                	jmp    c0012760 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0012733:	83 f8 0a             	cmp    eax,0xa
c0012736:	75 31                	jne    c0012769 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0012738:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001273f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012742:	8d 50 01             	lea    edx,[eax+0x1]
c0012745:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0012748:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001274b:	75 0f                	jne    c001275c <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c001274d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012750:	83 ec 0c             	sub    esp,0xc
c0012753:	53                   	push   ebx
c0012754:	e8 dd fc ff ff       	call   c0012436 <VgaText::scrollScreen()>
c0012759:	83 c4 10             	add    esp,0x10
c001275c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012760:	83 c4 08             	add    esp,0x8
c0012763:	5b                   	pop    ebx
c0012764:	e9 d7 fb ff ff       	jmp    c0012340 <VgaText::updateCursor()>
c0012769:	83 f8 08             	cmp    eax,0x8
c001276c:	75 25                	jne    c0012793 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c001276e:	50                   	push   eax
c001276f:	50                   	push   eax
c0012770:	6a 01                	push   0x1
c0012772:	53                   	push   ebx
c0012773:	e8 50 ff ff ff       	call   c00126c8 <VgaText::decrementCursor(bool)>
c0012778:	5a                   	pop    edx
c0012779:	59                   	pop    ecx
c001277a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001277d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012780:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012783:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012786:	6a 20                	push   0x20
c0012788:	53                   	push   ebx
c0012789:	e8 4a fd ff ff       	call   c00124d8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001278e:	83 c4 28             	add    esp,0x28
c0012791:	5b                   	pop    ebx
c0012792:	c3                   	ret    
c0012793:	83 ec 08             	sub    esp,0x8
c0012796:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012799:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001279c:	51                   	push   ecx
c001279d:	52                   	push   edx
c001279e:	50                   	push   eax
c001279f:	53                   	push   ebx
c00127a0:	e8 33 fd ff ff       	call   c00124d8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00127a5:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00127a9:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00127b1:	83 c4 28             	add    esp,0x28
c00127b4:	5b                   	pop    ebx
c00127b5:	e9 ba fe ff ff       	jmp    c0012674 <VgaText::incrementCursor(bool)>

c00127ba <VgaText::putchar(char)>:
c00127ba:	57                   	push   edi
c00127bb:	56                   	push   esi
c00127bc:	53                   	push   ebx
c00127bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00127c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00127c5:	0f be c2             	movsx  eax,dl
c00127c8:	83 f8 5b             	cmp    eax,0x5b
c00127cb:	75 18                	jne    c00127e5 <VgaText::putchar(char)+0x2b>
c00127cd:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00127d1:	74 20                	je     c00127f3 <VgaText::putchar(char)+0x39>
c00127d3:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00127d9:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00127e0:	e9 b8 00 00 00       	jmp    c001289d <VgaText::putchar(char)+0xe3>
c00127e5:	83 f8 1b             	cmp    eax,0x1b
c00127e8:	75 09                	jne    c00127f3 <VgaText::putchar(char)+0x39>
c00127ea:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00127ee:	e9 aa 00 00 00       	jmp    c001289d <VgaText::putchar(char)+0xe3>
c00127f3:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00127f7:	89 f9                	mov    ecx,edi
c00127f9:	84 c9                	test   cl,cl
c00127fb:	0f 84 8c 00 00 00    	je     c001288d <VgaText::putchar(char)+0xd3>
c0012801:	8d 4a c0             	lea    ecx,[edx-0x40]
c0012804:	80 f9 3e             	cmp    cl,0x3e
c0012807:	77 70                	ja     c0012879 <VgaText::putchar(char)+0xbf>
c0012809:	83 f8 6d             	cmp    eax,0x6d
c001280c:	75 3f                	jne    c001284d <VgaText::putchar(char)+0x93>
c001280e:	31 f6                	xor    esi,esi
c0012810:	31 d2                	xor    edx,edx
c0012812:	31 c0                	xor    eax,eax
c0012814:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0012817:	7e 25                	jle    c001283e <VgaText::putchar(char)+0x84>
c0012819:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001281e:	83 fa 3b             	cmp    edx,0x3b
c0012821:	75 0f                	jne    c0012832 <VgaText::putchar(char)+0x78>
c0012823:	50                   	push   eax
c0012824:	53                   	push   ebx
c0012825:	e8 2c fb ff ff       	call   c0012356 <VgaText::doANSI_SGR(int)>
c001282a:	31 d2                	xor    edx,edx
c001282c:	59                   	pop    ecx
c001282d:	58                   	pop    eax
c001282e:	31 c0                	xor    eax,eax
c0012830:	eb 09                	jmp    c001283b <VgaText::putchar(char)+0x81>
c0012832:	6b c0 0a             	imul   eax,eax,0xa
c0012835:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0012839:	89 fa                	mov    edx,edi
c001283b:	46                   	inc    esi
c001283c:	eb d6                	jmp    c0012814 <VgaText::putchar(char)+0x5a>
c001283e:	84 d2                	test   dl,dl
c0012840:	74 2f                	je     c0012871 <VgaText::putchar(char)+0xb7>
c0012842:	50                   	push   eax
c0012843:	53                   	push   ebx
c0012844:	e8 0d fb ff ff       	call   c0012356 <VgaText::doANSI_SGR(int)>
c0012849:	58                   	pop    eax
c001284a:	5a                   	pop    edx
c001284b:	eb 24                	jmp    c0012871 <VgaText::putchar(char)+0xb7>
c001284d:	83 f8 4a             	cmp    eax,0x4a
c0012850:	75 1f                	jne    c0012871 <VgaText::putchar(char)+0xb7>
c0012852:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0012856:	75 19                	jne    c0012871 <VgaText::putchar(char)+0xb7>
c0012858:	83 ec 0c             	sub    esp,0xc
c001285b:	53                   	push   ebx
c001285c:	e8 95 fd ff ff       	call   c00125f6 <VgaText::clearScreen()>
c0012861:	83 c4 0c             	add    esp,0xc
c0012864:	6a 00                	push   0x0
c0012866:	6a 00                	push   0x0
c0012868:	53                   	push   ebx
c0012869:	e8 26 fd ff ff       	call   c0012594 <VgaText::setCursor(int, int)>
c001286e:	83 c4 10             	add    esp,0x10
c0012871:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0012877:	eb 24                	jmp    c001289d <VgaText::putchar(char)+0xe3>
c0012879:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c001287c:	83 f8 0e             	cmp    eax,0xe
c001287f:	7f 1c                	jg     c001289d <VgaText::putchar(char)+0xe3>
c0012881:	8d 48 01             	lea    ecx,[eax+0x1]
c0012884:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0012887:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c001288b:	eb 10                	jmp    c001289d <VgaText::putchar(char)+0xe3>
c001288d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012890:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012893:	50                   	push   eax
c0012894:	53                   	push   ebx
c0012895:	e8 50 fe ff ff       	call   c00126ea <VgaText::putchar(char, VgaColour, VgaColour)>
c001289a:	83 c4 10             	add    esp,0x10
c001289d:	5b                   	pop    ebx
c001289e:	5e                   	pop    esi
c001289f:	5f                   	pop    edi
c00128a0:	c3                   	ret    
c00128a1:	90                   	nop

c00128a2 <VgaText::putx(unsigned int)>:
c00128a2:	57                   	push   edi
c00128a3:	b9 11 00 00 00       	mov    ecx,0x11
c00128a8:	56                   	push   esi
c00128a9:	be d4 91 02 c0       	mov    esi,0xc00291d4
c00128ae:	53                   	push   ebx
c00128af:	83 ec 20             	sub    esp,0x20
c00128b2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00128b6:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00128ba:	fc                   	cld    
c00128bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00128bd:	be 08 00 00 00       	mov    esi,0x8
c00128c2:	50                   	push   eax
c00128c3:	50                   	push   eax
c00128c4:	89 d8                	mov    eax,ebx
c00128c6:	c1 e8 1c             	shr    eax,0x1c
c00128c9:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00128ce:	c1 e3 04             	shl    ebx,0x4
c00128d1:	50                   	push   eax
c00128d2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128d6:	e8 df fe ff ff       	call   c00127ba <VgaText::putchar(char)>
c00128db:	83 c4 10             	add    esp,0x10
c00128de:	4e                   	dec    esi
c00128df:	75 e1                	jne    c00128c2 <VgaText::putx(unsigned int)+0x20>
c00128e1:	83 c4 20             	add    esp,0x20
c00128e4:	5b                   	pop    ebx
c00128e5:	5e                   	pop    esi
c00128e6:	5f                   	pop    edi
c00128e7:	c3                   	ret    

c00128e8 <VgaText::puts(char const*)>:
c00128e8:	53                   	push   ebx
c00128e9:	83 ec 08             	sub    esp,0x8
c00128ec:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00128f0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00128f3:	85 c0                	test   eax,eax
c00128f5:	74 12                	je     c0012909 <VgaText::puts(char const*)+0x21>
c00128f7:	51                   	push   ecx
c00128f8:	43                   	inc    ebx
c00128f9:	51                   	push   ecx
c00128fa:	50                   	push   eax
c00128fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128ff:	e8 b6 fe ff ff       	call   c00127ba <VgaText::putchar(char)>
c0012904:	83 c4 10             	add    esp,0x10
c0012907:	eb e7                	jmp    c00128f0 <VgaText::puts(char const*)+0x8>
c0012909:	83 c4 08             	add    esp,0x8
c001290c:	5b                   	pop    ebx
c001290d:	c3                   	ret    

c001290e <VgaText::write(unsigned long long, void*, int*)>:
c001290e:	55                   	push   ebp
c001290f:	57                   	push   edi
c0012910:	56                   	push   esi
c0012911:	53                   	push   ebx
c0012912:	83 ec 0c             	sub    esp,0xc
c0012915:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012919:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001291d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012921:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0012928:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001292b:	39 eb                	cmp    ebx,ebp
c001292d:	74 13                	je     c0012942 <VgaText::write(unsigned long long, void*, int*)+0x34>
c001292f:	50                   	push   eax
c0012930:	43                   	inc    ebx
c0012931:	50                   	push   eax
c0012932:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0012936:	50                   	push   eax
c0012937:	56                   	push   esi
c0012938:	e8 7d fe ff ff       	call   c00127ba <VgaText::putchar(char)>
c001293d:	83 c4 10             	add    esp,0x10
c0012940:	eb e9                	jmp    c001292b <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0012942:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0012949:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001294d:	89 38                	mov    DWORD PTR [eax],edi
c001294f:	83 c4 0c             	add    esp,0xc
c0012952:	31 c0                	xor    eax,eax
c0012954:	5b                   	pop    ebx
c0012955:	5e                   	pop    esi
c0012956:	5f                   	pop    edi
c0012957:	5d                   	pop    ebp
c0012958:	c3                   	ret    
c0012959:	90                   	nop

c001295a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001295a:	55                   	push   ebp
c001295b:	57                   	push   edi
c001295c:	56                   	push   esi
c001295d:	53                   	push   ebx
c001295e:	83 ec 1c             	sub    esp,0x1c
c0012961:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012965:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012969:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001296d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0012971:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c0012974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012978:	85 db                	test   ebx,ebx
c001297a:	75 14                	jne    c0012990 <VgaText::puts(char const*, VgaColour, VgaColour)+0x36>
c001297c:	c7 44 24 30 e5 91 02 c0 	mov    DWORD PTR [esp+0x30],0xc00291e5
c0012984:	83 c4 1c             	add    esp,0x1c
c0012987:	5b                   	pop    ebx
c0012988:	5e                   	pop    esi
c0012989:	5f                   	pop    edi
c001298a:	5d                   	pop    ebp
c001298b:	e9 1c d6 ff ff       	jmp    c000ffac <KePanic(char const*)>
c0012990:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c0012997:	50                   	push   eax
c0012998:	50                   	push   eax
c0012999:	89 e8                	mov    eax,ebp
c001299b:	0f b6 c0             	movzx  eax,al
c001299e:	50                   	push   eax
c001299f:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00129a4:	50                   	push   eax
c00129a5:	e8 7a fa ff ff       	call   c0012424 <VgaText::combineColours(unsigned char, unsigned char)>
c00129aa:	83 c4 10             	add    esp,0x10
c00129ad:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c00129b1:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c00129b4:	0f b6 c0             	movzx  eax,al
c00129b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129bb:	0f b7 c9             	movzx  ecx,cx
c00129be:	01 c9                	add    ecx,ecx
c00129c0:	01 cb                	add    ebx,ecx
c00129c2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00129c5:	85 c0                	test   eax,eax
c00129c7:	0f 84 ef 00 00 00    	je     c0012abc <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c00129cd:	83 f8 0d             	cmp    eax,0xd
c00129d0:	75 0c                	jne    c00129de <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c00129d2:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c00129d9:	e9 d8 00 00 00       	jmp    c0012ab6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00129de:	83 f8 0a             	cmp    eax,0xa
c00129e1:	75 44                	jne    c0012a27 <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c00129e3:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c00129ea:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00129ed:	8d 48 01             	lea    ecx,[eax+0x1]
c00129f0:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c00129f3:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c00129f6:	75 0f                	jne    c0012a07 <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c00129f8:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c00129fb:	83 ec 0c             	sub    esp,0xc
c00129fe:	57                   	push   edi
c00129ff:	e8 32 fa ff ff       	call   c0012436 <VgaText::scrollScreen()>
c0012a04:	83 c4 10             	add    esp,0x10
c0012a07:	83 ec 0c             	sub    esp,0xc
c0012a0a:	57                   	push   edi
c0012a0b:	e8 30 f9 ff ff       	call   c0012340 <VgaText::updateCursor()>
c0012a10:	83 c4 10             	add    esp,0x10
c0012a13:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012a17:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012a1a:	0f b7 db             	movzx  ebx,bx
c0012a1d:	01 db                	add    ebx,ebx
c0012a1f:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012a22:	e9 8f 00 00 00       	jmp    c0012ab6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012a27:	83 f8 08             	cmp    eax,0x8
c0012a2a:	75 34                	jne    c0012a60 <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c0012a2c:	51                   	push   ecx
c0012a2d:	51                   	push   ecx
c0012a2e:	6a 01                	push   0x1
c0012a30:	57                   	push   edi
c0012a31:	e8 92 fc ff ff       	call   c00126c8 <VgaText::decrementCursor(bool)>
c0012a36:	5b                   	pop    ebx
c0012a37:	58                   	pop    eax
c0012a38:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012a3b:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012a3e:	ff 77 30             	push   DWORD PTR [edi+0x30]
c0012a41:	ff 77 34             	push   DWORD PTR [edi+0x34]
c0012a44:	6a 20                	push   0x20
c0012a46:	57                   	push   edi
c0012a47:	e8 8c fa ff ff       	call   c00124d8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012a4c:	83 c4 20             	add    esp,0x20
c0012a4f:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012a53:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012a56:	0f b7 db             	movzx  ebx,bx
c0012a59:	01 db                	add    ebx,ebx
c0012a5b:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012a5e:	eb 56                	jmp    c0012ab6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012a60:	52                   	push   edx
c0012a61:	52                   	push   edx
c0012a62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012a66:	50                   	push   eax
c0012a67:	e8 5c fa ff ff       	call   c00124c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0012a6c:	83 c4 10             	add    esp,0x10
c0012a6f:	66 89 03             	mov    WORD PTR [ebx],ax
c0012a72:	39 3d f4 21 03 c0    	cmp    DWORD PTR ds:0xc00321f4,edi
c0012a78:	75 1a                	jne    c0012a94 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0012a7a:	83 ec 0c             	sub    esp,0xc
c0012a7d:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012a80:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012a83:	55                   	push   ebp
c0012a84:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012a88:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012a8b:	50                   	push   eax
c0012a8c:	e8 fb 93 00 00       	call   c001be8c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0012a91:	83 c4 20             	add    esp,0x20
c0012a94:	50                   	push   eax
c0012a95:	83 c3 02             	add    ebx,0x2
c0012a98:	50                   	push   eax
c0012a99:	6a 00                	push   0x0
c0012a9b:	57                   	push   edi
c0012a9c:	e8 d3 fb ff ff       	call   c0012674 <VgaText::incrementCursor(bool)>
c0012aa1:	83 c4 10             	add    esp,0x10
c0012aa4:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c0012aa8:	75 0c                	jne    c0012ab6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012aaa:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012aae:	0f b7 db             	movzx  ebx,bx
c0012ab1:	01 db                	add    ebx,ebx
c0012ab3:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012ab6:	46                   	inc    esi
c0012ab7:	e9 06 ff ff ff       	jmp    c00129c2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0012abc:	83 ec 0c             	sub    esp,0xc
c0012abf:	57                   	push   edi
c0012ac0:	e8 7b f8 ff ff       	call   c0012340 <VgaText::updateCursor()>
c0012ac5:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c0012acc:	83 c4 2c             	add    esp,0x2c
c0012acf:	5b                   	pop    ebx
c0012ad0:	5e                   	pop    esi
c0012ad1:	5f                   	pop    edi
c0012ad2:	5d                   	pop    ebp
c0012ad3:	c3                   	ret    

c0012ad4 <VgaText::VgaText(char const*)>:
c0012ad4:	56                   	push   esi
c0012ad5:	53                   	push   ebx
c0012ad6:	83 ec 04             	sub    esp,0x4
c0012ad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012add:	83 ec 08             	sub    esp,0x8
c0012ae0:	6a 00                	push   0x0
c0012ae2:	50                   	push   eax
c0012ae3:	e8 b8 05 00 00       	call   c00130a0 <UnixFile::UnixFile(int)>
c0012ae8:	83 c4 10             	add    esp,0x10
c0012aeb:	ba 1c 92 02 c0       	mov    edx,0xc002921c
c0012af0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012af4:	89 10                	mov    DWORD PTR [eax],edx
c0012af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012afa:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0012b01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b05:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0012b0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b10:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0012b14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b18:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0012b1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b20:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0012b27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b2b:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0012b32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b36:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0012b3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b41:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0012b48:	83 ec 0c             	sub    esp,0xc
c0012b4b:	68 f5 91 02 c0       	push   0xc00291f5
c0012b50:	e8 11 44 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012b55:	83 c4 10             	add    esp,0x10
c0012b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b5c:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0012b63:	83 ec 0c             	sub    esp,0xc
c0012b66:	6a 01                	push   0x1
c0012b68:	e8 86 09 00 00       	call   c00134f3 <Virt::allocateKernelVirtualPages(int)>
c0012b6d:	83 c4 10             	add    esp,0x10
c0012b70:	89 c2                	mov    edx,eax
c0012b72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b76:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012b79:	8b 1d 90 22 03 c0    	mov    ebx,DWORD PTR ds:0xc0032290
c0012b7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b83:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b86:	89 c6                	mov    esi,eax
c0012b88:	e8 19 d6 ff ff       	call   c00101a6 <Phys::allocatePage()>
c0012b8d:	68 05 0c 00 00       	push   0xc05
c0012b92:	56                   	push   esi
c0012b93:	50                   	push   eax
c0012b94:	53                   	push   ebx
c0012b95:	e8 32 10 00 00       	call   c0013bcc <VAS::mapPage(unsigned long, unsigned long, int)>
c0012b9a:	83 c4 10             	add    esp,0x10
c0012b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ba1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012ba4:	83 ec 04             	sub    esp,0x4
c0012ba7:	68 a0 0f 00 00       	push   0xfa0
c0012bac:	6a 00                	push   0x0
c0012bae:	50                   	push   eax
c0012baf:	e8 3c d9 fe ff       	call   c00004f0 <memset>
c0012bb4:	83 c4 10             	add    esp,0x10
c0012bb7:	83 ec 04             	sub    esp,0x4
c0012bba:	6a 00                	push   0x0
c0012bbc:	6a 07                	push   0x7
c0012bbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bc2:	e8 23 f8 ff ff       	call   c00123ea <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0012bc7:	83 c4 10             	add    esp,0x10
c0012bca:	83 ec 04             	sub    esp,0x4
c0012bcd:	6a 00                	push   0x0
c0012bcf:	6a 00                	push   0x0
c0012bd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bd5:	e8 ba f9 ff ff       	call   c0012594 <VgaText::setCursor(int, int)>
c0012bda:	83 c4 10             	add    esp,0x10
c0012bdd:	83 ec 0c             	sub    esp,0xc
c0012be0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012be4:	e8 0d fa ff ff       	call   c00125f6 <VgaText::clearScreen()>
c0012be9:	83 c4 10             	add    esp,0x10
c0012bec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bf0:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0012bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bf8:	05 82 00 00 00       	add    eax,0x82
c0012bfd:	83 ec 04             	sub    esp,0x4
c0012c00:	68 80 00 00 00       	push   0x80
c0012c05:	6a 00                	push   0x0
c0012c07:	50                   	push   eax
c0012c08:	e8 e3 d8 fe ff       	call   c00004f0 <memset>
c0012c0d:	83 c4 10             	add    esp,0x10
c0012c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c14:	05 02 01 00 00       	add    eax,0x102
c0012c19:	83 ec 04             	sub    esp,0x4
c0012c1c:	68 80 00 00 00       	push   0x80
c0012c21:	6a 00                	push   0x0
c0012c23:	50                   	push   eax
c0012c24:	e8 c7 d8 fe ff       	call   c00004f0 <memset>
c0012c29:	83 c4 10             	add    esp,0x10
c0012c2c:	90                   	nop
c0012c2d:	83 c4 04             	add    esp,0x4
c0012c30:	5b                   	pop    ebx
c0012c31:	5e                   	pop    esi
c0012c32:	c3                   	ret    
c0012c33:	90                   	nop

c0012c34 <VgaText::receiveKey(unsigned char)>:
c0012c34:	55                   	push   ebp
c0012c35:	57                   	push   edi
c0012c36:	56                   	push   esi
c0012c37:	53                   	push   ebx
c0012c38:	83 ec 2c             	sub    esp,0x2c
c0012c3b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012c3f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012c43:	89 fd                	mov    ebp,edi
c0012c45:	81 e5 ff 00 00 00    	and    ebp,0xff
c0012c4b:	0f 84 48 01 00 00    	je     c0012d99 <VgaText::receiveKey(unsigned char)+0x165>
c0012c51:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0012c57:	83 fd 08             	cmp    ebp,0x8
c0012c5a:	75 6a                	jne    c0012cc6 <VgaText::receiveKey(unsigned char)+0x92>
c0012c5c:	83 ec 0c             	sub    esp,0xc
c0012c5f:	56                   	push   esi
c0012c60:	e8 1b d9 fe ff       	call   c0000580 <strlen>
c0012c65:	83 c4 10             	add    esp,0x10
c0012c68:	85 c0                	test   eax,eax
c0012c6a:	0f 84 ef 00 00 00    	je     c0012d5f <VgaText::receiveKey(unsigned char)+0x12b>
c0012c70:	50                   	push   eax
c0012c71:	50                   	push   eax
c0012c72:	6a 08                	push   0x8
c0012c74:	53                   	push   ebx
c0012c75:	e8 40 fb ff ff       	call   c00127ba <VgaText::putchar(char)>
c0012c7a:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c7d:	e8 fe d8 fe ff       	call   c0000580 <strlen>
c0012c82:	83 c4 10             	add    esp,0x10
c0012c85:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0012c8d:	83 fa 1f             	cmp    edx,0x1f
c0012c90:	89 d0                	mov    eax,edx
c0012c92:	7f 1c                	jg     c0012cb0 <VgaText::receiveKey(unsigned char)+0x7c>
c0012c94:	83 e8 08             	sub    eax,0x8
c0012c97:	3c 02                	cmp    al,0x2
c0012c99:	76 15                	jbe    c0012cb0 <VgaText::receiveKey(unsigned char)+0x7c>
c0012c9b:	83 fa 0d             	cmp    edx,0xd
c0012c9e:	74 10                	je     c0012cb0 <VgaText::receiveKey(unsigned char)+0x7c>
c0012ca0:	57                   	push   edi
c0012ca1:	57                   	push   edi
c0012ca2:	68 08 92 02 c0       	push   0xc0029208
c0012ca7:	53                   	push   ebx
c0012ca8:	e8 3b fc ff ff       	call   c00128e8 <VgaText::puts(char const*)>
c0012cad:	83 c4 10             	add    esp,0x10
c0012cb0:	83 ec 0c             	sub    esp,0xc
c0012cb3:	56                   	push   esi
c0012cb4:	e8 c7 d8 fe ff       	call   c0000580 <strlen>
c0012cb9:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0012cc1:	e9 96 00 00 00       	jmp    c0012d5c <VgaText::receiveKey(unsigned char)+0x128>
c0012cc6:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0012ccc:	83 ec 0c             	sub    esp,0xc
c0012ccf:	50                   	push   eax
c0012cd0:	e8 ab d8 fe ff       	call   c0000580 <strlen>
c0012cd5:	89 34 24             	mov    DWORD PTR [esp],esi
c0012cd8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012cdc:	e8 9f d8 fe ff       	call   c0000580 <strlen>
c0012ce1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012ce5:	83 c4 10             	add    esp,0x10
c0012ce8:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0012cec:	3d 80 00 00 00       	cmp    eax,0x80
c0012cf1:	0f 87 a2 00 00 00    	ja     c0012d99 <VgaText::receiveKey(unsigned char)+0x165>
c0012cf7:	8d 47 ff             	lea    eax,[edi-0x1]
c0012cfa:	3c 1e                	cmp    al,0x1e
c0012cfc:	77 35                	ja     c0012d33 <VgaText::receiveKey(unsigned char)+0xff>
c0012cfe:	8d 47 f7             	lea    eax,[edi-0x9]
c0012d01:	3c 01                	cmp    al,0x1
c0012d03:	76 2e                	jbe    c0012d33 <VgaText::receiveKey(unsigned char)+0xff>
c0012d05:	83 fd 0d             	cmp    ebp,0xd
c0012d08:	74 29                	je     c0012d33 <VgaText::receiveKey(unsigned char)+0xff>
c0012d0a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012d0d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012d10:	68 0e 92 02 c0       	push   0xc002920e
c0012d15:	53                   	push   ebx
c0012d16:	e8 3f fc ff ff       	call   c001295a <VgaText::puts(char const*, VgaColour, VgaColour)>
c0012d1b:	8d 47 40             	lea    eax,[edi+0x40]
c0012d1e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012d21:	0f b6 c0             	movzx  eax,al
c0012d24:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012d27:	50                   	push   eax
c0012d28:	53                   	push   ebx
c0012d29:	e8 bc f9 ff ff       	call   c00126ea <VgaText::putchar(char, VgaColour, VgaColour)>
c0012d2e:	83 c4 20             	add    esp,0x20
c0012d31:	eb 11                	jmp    c0012d44 <VgaText::receiveKey(unsigned char)+0x110>
c0012d33:	51                   	push   ecx
c0012d34:	89 f8                	mov    eax,edi
c0012d36:	51                   	push   ecx
c0012d37:	0f be c0             	movsx  eax,al
c0012d3a:	50                   	push   eax
c0012d3b:	53                   	push   ebx
c0012d3c:	e8 79 fa ff ff       	call   c00127ba <VgaText::putchar(char)>
c0012d41:	83 c4 10             	add    esp,0x10
c0012d44:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012d49:	89 f8                	mov    eax,edi
c0012d4b:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0012d4f:	52                   	push   edx
c0012d50:	52                   	push   edx
c0012d51:	8d 44 24 26          	lea    eax,[esp+0x26]
c0012d55:	50                   	push   eax
c0012d56:	56                   	push   esi
c0012d57:	e8 14 db fe ff       	call   c0000870 <strcat>
c0012d5c:	83 c4 10             	add    esp,0x10
c0012d5f:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0012d66:	75 0f                	jne    c0012d77 <VgaText::receiveKey(unsigned char)+0x143>
c0012d68:	83 fd 1c             	cmp    ebp,0x1c
c0012d6b:	77 2c                	ja     c0012d99 <VgaText::receiveKey(unsigned char)+0x165>
c0012d6d:	b8 08 04 00 10       	mov    eax,0x10000408
c0012d72:	0f a3 e8             	bt     eax,ebp
c0012d75:	73 22                	jae    c0012d99 <VgaText::receiveKey(unsigned char)+0x165>
c0012d77:	50                   	push   eax
c0012d78:	81 c3 02 01 00 00    	add    ebx,0x102
c0012d7e:	50                   	push   eax
c0012d7f:	56                   	push   esi
c0012d80:	53                   	push   ebx
c0012d81:	e8 ea da fe ff       	call   c0000870 <strcat>
c0012d86:	83 c4 0c             	add    esp,0xc
c0012d89:	68 80 00 00 00       	push   0x80
c0012d8e:	6a 00                	push   0x0
c0012d90:	56                   	push   esi
c0012d91:	e8 5a d7 fe ff       	call   c00004f0 <memset>
c0012d96:	83 c4 10             	add    esp,0x10
c0012d99:	83 c4 2c             	add    esp,0x2c
c0012d9c:	5b                   	pop    ebx
c0012d9d:	5e                   	pop    esi
c0012d9e:	5f                   	pop    edi
c0012d9f:	5d                   	pop    ebp
c0012da0:	c3                   	ret    
c0012da1:	90                   	nop

c0012da2 <VgaText::doUpdate()>:
c0012da2:	c3                   	ret    
c0012da3:	90                   	nop

c0012da4 <TSS::TSS()>:
c0012da4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012da8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012daf:	90                   	nop
c0012db0:	c3                   	ret    
c0012db1:	90                   	nop
c0012db2:	66 90                	xchg   ax,ax

c0012db4 <TSS::setESP(unsigned long)>:
c0012db4:	55                   	push   ebp
c0012db5:	89 e5                	mov    ebp,esp
c0012db7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012dba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012dbd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012dc0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012dc3:	90                   	nop
c0012dc4:	5d                   	pop    ebp
c0012dc5:	c3                   	ret    
c0012dc6:	66 90                	xchg   ax,ax

c0012dc8 <TSS::flush()>:
c0012dc8:	55                   	push   ebp
c0012dc9:	89 e5                	mov    ebp,esp
c0012dcb:	83 ec 10             	sub    esp,0x10
c0012dce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012dd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0012dd3:	83 c8 03             	or     eax,0x3
c0012dd6:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0012dda:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0012dde:	66 89 d0             	mov    ax,dx
c0012de1:	0f 00 d8             	ltr    ax
c0012de4:	90                   	nop
c0012de5:	c9                   	leave  
c0012de6:	c3                   	ret    
c0012de7:	90                   	nop

c0012de8 <TSS::setup(unsigned long, unsigned long)>:
c0012de8:	55                   	push   ebp
c0012de9:	89 e5                	mov    ebp,esp
c0012deb:	83 ec 18             	sub    esp,0x18
c0012dee:	83 ec 0c             	sub    esp,0xc
c0012df1:	6a 68                	push   0x68
c0012df3:	e8 60 cd ff ff       	call   c000fb58 <malloc>
c0012df8:	83 c4 10             	add    esp,0x10
c0012dfb:	89 c2                	mov    edx,eax
c0012dfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e00:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012e03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e09:	83 ec 08             	sub    esp,0x8
c0012e0c:	50                   	push   eax
c0012e0d:	68 30 92 02 c0       	push   0xc0029230
c0012e12:	e8 4f 41 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012e17:	83 c4 10             	add    esp,0x10
c0012e1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e1d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e20:	83 ec 04             	sub    esp,0x4
c0012e23:	6a 68                	push   0x68
c0012e25:	6a 00                	push   0x0
c0012e27:	50                   	push   eax
c0012e28:	e8 c3 d6 fe ff       	call   c00004f0 <memset>
c0012e2d:	83 c4 10             	add    esp,0x10
c0012e30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e33:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e36:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0012e3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e3f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e42:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0012e48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e4b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e4e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012e51:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012e54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e57:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e5a:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0012e60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e63:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e66:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0012e6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e6f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e72:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0012e78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e7e:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0012e84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e8a:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0012e90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e93:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e96:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0012e9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e9f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ea2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0012ea5:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0012ea8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012eab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012eae:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012eb1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012eb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012eb7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012eba:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0012ec1:	83 ec 0c             	sub    esp,0xc
c0012ec4:	68 47 92 02 c0       	push   0xc0029247
c0012ec9:	e8 98 40 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012ece:	83 c4 10             	add    esp,0x10
c0012ed1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ed4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ed7:	0f 20 da             	mov    edx,cr3
c0012eda:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0012edd:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0012ee0:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0012ee3:	83 ec 0c             	sub    esp,0xc
c0012ee6:	68 4a 92 02 c0       	push   0xc002924a
c0012eeb:	e8 76 40 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012ef0:	83 c4 10             	add    esp,0x10
c0012ef3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ef6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ef9:	83 ec 08             	sub    esp,0x8
c0012efc:	50                   	push   eax
c0012efd:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012f00:	50                   	push   eax
c0012f01:	e8 a2 bd ff ff       	call   c000eca8 <GDTEntry::setBase(unsigned int)>
c0012f06:	83 c4 10             	add    esp,0x10
c0012f09:	83 ec 08             	sub    esp,0x8
c0012f0c:	6a 68                	push   0x68
c0012f0e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012f11:	50                   	push   eax
c0012f12:	e8 ad bd ff ff       	call   c000ecc4 <GDTEntry::setLimit(unsigned int)>
c0012f17:	83 c4 10             	add    esp,0x10
c0012f1a:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0012f1e:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012f21:	83 e0 0f             	and    eax,0xf
c0012f24:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012f27:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012f2a:	83 c8 40             	or     eax,0x40
c0012f2d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012f30:	83 ec 0c             	sub    esp,0xc
c0012f33:	68 4d 92 02 c0       	push   0xc002924d
c0012f38:	e8 29 40 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012f3d:	83 c4 10             	add    esp,0x10
c0012f40:	a1 08 21 03 c0       	mov    eax,ds:0xc0032108
c0012f45:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012f4b:	83 ec 08             	sub    esp,0x8
c0012f4e:	50                   	push   eax
c0012f4f:	68 50 92 02 c0       	push   0xc0029250
c0012f54:	e8 0d 40 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012f59:	83 c4 10             	add    esp,0x10
c0012f5c:	a1 08 21 03 c0       	mov    eax,ds:0xc0032108
c0012f61:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012f67:	05 64 01 00 00       	add    eax,0x164
c0012f6c:	83 ec 04             	sub    esp,0x4
c0012f6f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0012f72:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0012f75:	50                   	push   eax
c0012f76:	e8 7d bd ff ff       	call   c000ecf8 <GDT::addEntry(GDTEntry)>
c0012f7b:	83 c4 10             	add    esp,0x10
c0012f7e:	89 c2                	mov    edx,eax
c0012f80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f83:	89 10                	mov    DWORD PTR [eax],edx
c0012f85:	83 ec 0c             	sub    esp,0xc
c0012f88:	68 65 92 02 c0       	push   0xc0029265
c0012f8d:	e8 d4 3f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012f92:	83 c4 10             	add    esp,0x10
c0012f95:	a1 08 21 03 c0       	mov    eax,ds:0xc0032108
c0012f9a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012fa0:	05 64 01 00 00       	add    eax,0x164
c0012fa5:	83 ec 0c             	sub    esp,0xc
c0012fa8:	50                   	push   eax
c0012fa9:	e8 74 bd ff ff       	call   c000ed22 <GDT::flush()>
c0012fae:	83 c4 10             	add    esp,0x10
c0012fb1:	83 ec 0c             	sub    esp,0xc
c0012fb4:	68 68 92 02 c0       	push   0xc0029268
c0012fb9:	e8 a8 3f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012fbe:	83 c4 10             	add    esp,0x10
c0012fc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012fc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0012fc6:	c9                   	leave  
c0012fc7:	c3                   	ret    

c0012fc8 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0012fc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012fcc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012fd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012fd3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012fd8:	75 08                	jne    c0012fe2 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0012fda:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012fe0:	eb 38                	jmp    c001301a <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0012fe2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012fe7:	75 17                	jne    c0013000 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0012fe9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012fee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012ff1:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012ff7:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ff9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ffd:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0013000:	89 c1                	mov    ecx,eax
c0013002:	83 e1 fd             	and    ecx,0xfffffffd
c0013005:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001300b:	74 cd                	je     c0012fda <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001300d:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0013012:	83 e0 ef             	and    eax,0xffffffef
c0013015:	83 f8 08             	cmp    eax,0x8
c0013018:	76 c0                	jbe    c0012fda <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001301a:	31 c0                	xor    eax,eax
c001301c:	c3                   	ret    
c001301d:	90                   	nop

c001301e <ReservedFilename::isAtty()>:
c001301e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013022:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013025:	31 c0                	xor    eax,eax
c0013027:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001302d:	74 09                	je     c0013038 <ReservedFilename::isAtty()+0x1a>
c001302f:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0013035:	0f 94 c0             	sete   al
c0013038:	c3                   	ret    
c0013039:	90                   	nop

c001303a <ReservedFilename::write(unsigned long long, void*, int*)>:
c001303a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001303e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013042:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013046:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013049:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001304e:	75 08                	jne    c0013058 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0013050:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0013056:	eb 3d                	jmp    c0013095 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0013058:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001305d:	75 17                	jne    c0013076 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001305f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013064:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013067:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001306d:	8b 10                	mov    edx,DWORD PTR [eax]
c001306f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013073:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0013076:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001307b:	75 04                	jne    c0013081 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001307d:	89 0a                	mov    DWORD PTR [edx],ecx
c001307f:	eb 14                	jmp    c0013095 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0013081:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0013086:	74 c8                	je     c0013050 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0013088:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001308d:	83 e0 ef             	and    eax,0xffffffef
c0013090:	83 f8 08             	cmp    eax,0x8
c0013093:	76 bb                	jbe    c0013050 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0013095:	31 c0                	xor    eax,eax
c0013097:	c3                   	ret    

c0013098 <UnixFile::getFileDescriptor()>:
c0013098:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001309c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001309f:	c3                   	ret    

c00130a0 <UnixFile::UnixFile(int)>:
c00130a0:	53                   	push   ebx
c00130a1:	83 ec 28             	sub    esp,0x28
c00130a4:	ba 94 92 02 c0       	mov    edx,0xc0029294
c00130a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00130ad:	89 10                	mov    DWORD PTR [eax],edx
c00130af:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00130b7:	0f 8f 90 01 00 00    	jg     c001324d <UnixFile::UnixFile(int)+0x1ad>
c00130bd:	a1 40 c5 02 c0       	mov    eax,ds:0xc002c540
c00130c2:	8d 50 01             	lea    edx,[eax+0x1]
c00130c5:	89 15 40 c5 02 c0    	mov    DWORD PTR ds:0xc002c540,edx
c00130cb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00130cf:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00130d2:	83 ec 08             	sub    esp,0x8
c00130d5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00130d9:	68 78 22 03 c0       	push   0xc0032278
c00130de:	e8 9f 3c 01 00       	call   c0026d82 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00130e3:	83 c4 10             	add    esp,0x10
c00130e6:	a0 74 22 03 c0       	mov    al,ds:0xc0032274
c00130eb:	83 f0 01             	xor    eax,0x1
c00130ee:	0f b6 c0             	movzx  eax,al
c00130f1:	85 c0                	test   eax,eax
c00130f3:	0f 84 55 01 00 00    	je     c001324e <UnixFile::UnixFile(int)+0x1ae>
c00130f9:	c6 05 74 22 03 c0 01 	mov    BYTE PTR ds:0xc0032274,0x1
c0013100:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0013108:	83 ec 0c             	sub    esp,0xc
c001310b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001310f:	e8 44 ca ff ff       	call   c000fb58 <malloc>
c0013114:	83 c4 10             	add    esp,0x10
c0013117:	89 c3                	mov    ebx,eax
c0013119:	83 ec 08             	sub    esp,0x8
c001311c:	68 03 ff ff 0f       	push   0xfffff03
c0013121:	53                   	push   ebx
c0013122:	e8 2d 01 00 00       	call   c0013254 <ReservedFilename::ReservedFilename(int)>
c0013127:	83 c4 10             	add    esp,0x10
c001312a:	89 1d 6c 22 03 c0    	mov    DWORD PTR ds:0xc003226c,ebx
c0013130:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0013138:	83 ec 0c             	sub    esp,0xc
c001313b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001313f:	e8 14 ca ff ff       	call   c000fb58 <malloc>
c0013144:	83 c4 10             	add    esp,0x10
c0013147:	89 c3                	mov    ebx,eax
c0013149:	83 ec 08             	sub    esp,0x8
c001314c:	68 01 ff ff 0f       	push   0xfffff01
c0013151:	53                   	push   ebx
c0013152:	e8 fd 00 00 00       	call   c0013254 <ReservedFilename::ReservedFilename(int)>
c0013157:	83 c4 10             	add    esp,0x10
c001315a:	89 1d 70 22 03 c0    	mov    DWORD PTR ds:0xc0032270,ebx
c0013160:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0013168:	83 ec 0c             	sub    esp,0xc
c001316b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001316f:	e8 e4 c9 ff ff       	call   c000fb58 <malloc>
c0013174:	83 c4 10             	add    esp,0x10
c0013177:	89 c3                	mov    ebx,eax
c0013179:	83 ec 08             	sub    esp,0x8
c001317c:	68 00 ff ff 0f       	push   0xfffff00
c0013181:	53                   	push   ebx
c0013182:	e8 cd 00 00 00       	call   c0013254 <ReservedFilename::ReservedFilename(int)>
c0013187:	83 c4 10             	add    esp,0x10
c001318a:	89 1d 64 22 03 c0    	mov    DWORD PTR ds:0xc0032264,ebx
c0013190:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0013198:	83 ec 0c             	sub    esp,0xc
c001319b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001319f:	e8 b4 c9 ff ff       	call   c000fb58 <malloc>
c00131a4:	83 c4 10             	add    esp,0x10
c00131a7:	89 c3                	mov    ebx,eax
c00131a9:	83 ec 08             	sub    esp,0x8
c00131ac:	68 02 ff ff 0f       	push   0xfffff02
c00131b1:	53                   	push   ebx
c00131b2:	e8 9d 00 00 00       	call   c0013254 <ReservedFilename::ReservedFilename(int)>
c00131b7:	83 c4 10             	add    esp,0x10
c00131ba:	89 1d 68 22 03 c0    	mov    DWORD PTR ds:0xc0032268,ebx
c00131c0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00131c8:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00131cd:	7f 7f                	jg     c001324e <UnixFile::UnixFile(int)+0x1ae>
c00131cf:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00131d7:	83 ec 0c             	sub    esp,0xc
c00131da:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00131de:	e8 75 c9 ff ff       	call   c000fb58 <malloc>
c00131e3:	83 c4 10             	add    esp,0x10
c00131e6:	89 c3                	mov    ebx,eax
c00131e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131ec:	05 10 ff ff 0f       	add    eax,0xfffff10
c00131f1:	83 ec 08             	sub    esp,0x8
c00131f4:	50                   	push   eax
c00131f5:	53                   	push   ebx
c00131f6:	e8 59 00 00 00       	call   c0013254 <ReservedFilename::ReservedFilename(int)>
c00131fb:	83 c4 10             	add    esp,0x10
c00131fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013202:	89 1c 85 40 22 03 c0 	mov    DWORD PTR [eax*4-0x3ffcddc0],ebx
c0013209:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0013211:	83 ec 0c             	sub    esp,0xc
c0013214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013218:	e8 3b c9 ff ff       	call   c000fb58 <malloc>
c001321d:	83 c4 10             	add    esp,0x10
c0013220:	89 c3                	mov    ebx,eax
c0013222:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013226:	05 20 ff ff 0f       	add    eax,0xfffff20
c001322b:	83 ec 08             	sub    esp,0x8
c001322e:	50                   	push   eax
c001322f:	53                   	push   ebx
c0013230:	e8 1f 00 00 00       	call   c0013254 <ReservedFilename::ReservedFilename(int)>
c0013235:	83 c4 10             	add    esp,0x10
c0013238:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001323c:	89 1c 85 00 22 03 c0 	mov    DWORD PTR [eax*4-0x3ffcde00],ebx
c0013243:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013248:	e9 7b ff ff ff       	jmp    c00131c8 <UnixFile::UnixFile(int)+0x128>
c001324d:	90                   	nop
c001324e:	83 c4 28             	add    esp,0x28
c0013251:	5b                   	pop    ebx
c0013252:	c3                   	ret    
c0013253:	90                   	nop

c0013254 <ReservedFilename::ReservedFilename(int)>:
c0013254:	83 ec 0c             	sub    esp,0xc
c0013257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001325b:	83 ec 08             	sub    esp,0x8
c001325e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013262:	50                   	push   eax
c0013263:	e8 38 fe ff ff       	call   c00130a0 <UnixFile::UnixFile(int)>
c0013268:	83 c4 10             	add    esp,0x10
c001326b:	ba b0 92 02 c0       	mov    edx,0xc00292b0
c0013270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013274:	89 10                	mov    DWORD PTR [eax],edx
c0013276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001327a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001327e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013281:	90                   	nop
c0013282:	83 c4 0c             	add    esp,0xc
c0013285:	c3                   	ret    

c0013286 <UnixFile::~UnixFile()>:
c0013286:	83 ec 1c             	sub    esp,0x1c
c0013289:	ba 94 92 02 c0       	mov    edx,0xc0029294
c001328e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013292:	89 10                	mov    DWORD PTR [eax],edx
c0013294:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013298:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001329b:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00132a0:	7f 76                	jg     c0013318 <UnixFile::~UnixFile()+0x92>
c00132a2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00132aa:	83 ec 0c             	sub    esp,0xc
c00132ad:	68 78 22 03 c0       	push   0xc0032278
c00132b2:	e8 9f 3b 01 00       	call   c0026e56 <LinkedList<UnixFile>::getFirstElement()>
c00132b7:	83 c4 10             	add    esp,0x10
c00132ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00132be:	83 ec 0c             	sub    esp,0xc
c00132c1:	68 78 22 03 c0       	push   0xc0032278
c00132c6:	e8 93 3b 01 00       	call   c0026e5e <LinkedList<UnixFile>::removeFirst()>
c00132cb:	83 c4 10             	add    esp,0x10
c00132ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00132d2:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00132d6:	74 43                	je     c001331b <UnixFile::~UnixFile()+0x95>
c00132d8:	83 ec 08             	sub    esp,0x8
c00132db:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00132df:	68 78 22 03 c0       	push   0xc0032278
c00132e4:	e8 99 3a 01 00       	call   c0026d82 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00132e9:	83 c4 10             	add    esp,0x10
c00132ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00132f0:	8d 50 01             	lea    edx,[eax+0x1]
c00132f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00132f7:	3d 20 a1 07 00       	cmp    eax,0x7a120
c00132fc:	0f 94 c0             	sete   al
c00132ff:	0f b6 c0             	movzx  eax,al
c0013302:	85 c0                	test   eax,eax
c0013304:	74 a4                	je     c00132aa <UnixFile::~UnixFile()+0x24>
c0013306:	83 ec 0c             	sub    esp,0xc
c0013309:	68 6c 92 02 c0       	push   0xc002926c
c001330e:	e8 99 cc ff ff       	call   c000ffac <KePanic(char const*)>
c0013313:	83 c4 10             	add    esp,0x10
c0013316:	eb 92                	jmp    c00132aa <UnixFile::~UnixFile()+0x24>
c0013318:	90                   	nop
c0013319:	eb 01                	jmp    c001331c <UnixFile::~UnixFile()+0x96>
c001331b:	90                   	nop
c001331c:	90                   	nop
c001331d:	83 c4 1c             	add    esp,0x1c
c0013320:	c3                   	ret    
c0013321:	90                   	nop

c0013322 <UnixFile::~UnixFile()>:
c0013322:	83 ec 0c             	sub    esp,0xc
c0013325:	83 ec 0c             	sub    esp,0xc
c0013328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001332c:	e8 55 ff ff ff       	call   c0013286 <UnixFile::~UnixFile()>
c0013331:	83 c4 10             	add    esp,0x10
c0013334:	83 ec 08             	sub    esp,0x8
c0013337:	6a 0c                	push   0xc
c0013339:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001333d:	e8 1e a4 ff ff       	call   c000d760 <operator delete(void*, unsigned long)>
c0013342:	83 c4 10             	add    esp,0x10
c0013345:	83 c4 0c             	add    esp,0xc
c0013348:	c3                   	ret    
c0013349:	90                   	nop

c001334a <ReservedFilename::~ReservedFilename()>:
c001334a:	83 ec 0c             	sub    esp,0xc
c001334d:	ba b0 92 02 c0       	mov    edx,0xc00292b0
c0013352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013356:	89 10                	mov    DWORD PTR [eax],edx
c0013358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001335c:	83 ec 0c             	sub    esp,0xc
c001335f:	50                   	push   eax
c0013360:	e8 21 ff ff ff       	call   c0013286 <UnixFile::~UnixFile()>
c0013365:	83 c4 10             	add    esp,0x10
c0013368:	90                   	nop
c0013369:	83 c4 0c             	add    esp,0xc
c001336c:	c3                   	ret    
c001336d:	90                   	nop

c001336e <ReservedFilename::~ReservedFilename()>:
c001336e:	83 ec 0c             	sub    esp,0xc
c0013371:	83 ec 0c             	sub    esp,0xc
c0013374:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013378:	e8 cd ff ff ff       	call   c001334a <ReservedFilename::~ReservedFilename()>
c001337d:	83 c4 10             	add    esp,0x10
c0013380:	83 ec 08             	sub    esp,0x8
c0013383:	6a 0c                	push   0xc
c0013385:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013389:	e8 d2 a3 ff ff       	call   c000d760 <operator delete(void*, unsigned long)>
c001338e:	83 c4 10             	add    esp,0x10
c0013391:	83 c4 0c             	add    esp,0xc
c0013394:	c3                   	ret    

c0013395 <KeGetFileFromDescriptor(int)>:
c0013395:	53                   	push   ebx
c0013396:	83 ec 08             	sub    esp,0x8
c0013399:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001339d:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00133a3:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00133a9:	7f 30                	jg     c00133db <KeGetFileFromDescriptor(int)+0x46>
c00133ab:	83 ec 0c             	sub    esp,0xc
c00133ae:	68 78 22 03 c0       	push   0xc0032278
c00133b3:	e8 9e 3a 01 00       	call   c0026e56 <LinkedList<UnixFile>::getFirstElement()>
c00133b8:	8d 50 ff             	lea    edx,[eax-0x1]
c00133bb:	83 c4 10             	add    esp,0x10
c00133be:	83 fa fd             	cmp    edx,0xfffffffd
c00133c1:	76 04                	jbe    c00133c7 <KeGetFileFromDescriptor(int)+0x32>
c00133c3:	31 c0                	xor    eax,eax
c00133c5:	eb 6e                	jmp    c0013435 <KeGetFileFromDescriptor(int)+0xa0>
c00133c7:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00133ca:	74 69                	je     c0013435 <KeGetFileFromDescriptor(int)+0xa0>
c00133cc:	52                   	push   edx
c00133cd:	52                   	push   edx
c00133ce:	50                   	push   eax
c00133cf:	68 78 22 03 c0       	push   0xc0032278
c00133d4:	e8 27 3b 01 00       	call   c0026f00 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00133d9:	eb dd                	jmp    c00133b8 <KeGetFileFromDescriptor(int)+0x23>
c00133db:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00133e1:	a1 6c 22 03 c0       	mov    eax,ds:0xc003226c
c00133e6:	74 4d                	je     c0013435 <KeGetFileFromDescriptor(int)+0xa0>
c00133e8:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00133ee:	a1 70 22 03 c0       	mov    eax,ds:0xc0032270
c00133f3:	74 40                	je     c0013435 <KeGetFileFromDescriptor(int)+0xa0>
c00133f5:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00133fb:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c0013400:	74 33                	je     c0013435 <KeGetFileFromDescriptor(int)+0xa0>
c0013402:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0013408:	a1 64 22 03 c0       	mov    eax,ds:0xc0032264
c001340d:	74 26                	je     c0013435 <KeGetFileFromDescriptor(int)+0xa0>
c001340f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0013415:	83 f8 08             	cmp    eax,0x8
c0013418:	77 09                	ja     c0013423 <KeGetFileFromDescriptor(int)+0x8e>
c001341a:	8b 04 85 40 22 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcddc0]
c0013421:	eb 12                	jmp    c0013435 <KeGetFileFromDescriptor(int)+0xa0>
c0013423:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0013429:	83 fb 08             	cmp    ebx,0x8
c001342c:	77 95                	ja     c00133c3 <KeGetFileFromDescriptor(int)+0x2e>
c001342e:	8b 04 9d 00 22 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffcde00]
c0013435:	83 c4 08             	add    esp,0x8
c0013438:	5b                   	pop    ebx
c0013439:	c3                   	ret    

c001343a <__static_initialization_and_destruction_0(int, int)>:
c001343a:	83 ec 0c             	sub    esp,0xc
c001343d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0013442:	75 34                	jne    c0013478 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013444:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001344c:	75 2a                	jne    c0013478 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001344e:	83 ec 0c             	sub    esp,0xc
c0013451:	68 78 22 03 c0       	push   0xc0032278
c0013456:	e8 e5 38 01 00       	call   c0026d40 <LinkedList<UnixFile>::LinkedList()>
c001345b:	83 c4 10             	add    esp,0x10
c001345e:	83 ec 04             	sub    esp,0x4
c0013461:	68 20 bd 02 c0       	push   0xc002bd20
c0013466:	68 78 22 03 c0       	push   0xc0032278
c001346b:	68 3e 6d 02 c0       	push   0xc0026d3e
c0013470:	e8 9b a2 ff ff       	call   c000d710 <__cxa_atexit>
c0013475:	83 c4 10             	add    esp,0x10
c0013478:	90                   	nop
c0013479:	83 c4 0c             	add    esp,0xc
c001347c:	c3                   	ret    

c001347d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001347d:	83 ec 0c             	sub    esp,0xc
c0013480:	83 ec 08             	sub    esp,0x8
c0013483:	68 ff ff 00 00       	push   0xffff
c0013488:	6a 01                	push   0x1
c001348a:	e8 ab ff ff ff       	call   c001343a <__static_initialization_and_destruction_0(int, int)>
c001348f:	83 c4 10             	add    esp,0x10
c0013492:	83 c4 0c             	add    esp,0xc
c0013495:	c3                   	ret    

c0013496 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0013496:	53                   	push   ebx
c0013497:	8b 15 48 c5 02 c0    	mov    edx,DWORD PTR ds:0xc002c548
c001349d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00134a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00134a5:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00134ab:	89 d8                	mov    eax,ebx
c00134ad:	d1 e8                	shr    eax,1
c00134af:	01 d0                	add    eax,edx
c00134b1:	80 e3 01             	and    bl,0x1
c00134b4:	8a 10                	mov    dl,BYTE PTR [eax]
c00134b6:	75 09                	jne    c00134c1 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00134b8:	83 e2 f0             	and    edx,0xfffffff0
c00134bb:	09 ca                	or     edx,ecx
c00134bd:	88 10                	mov    BYTE PTR [eax],dl
c00134bf:	5b                   	pop    ebx
c00134c0:	c3                   	ret    
c00134c1:	0f b6 c9             	movzx  ecx,cl
c00134c4:	83 e2 0f             	and    edx,0xf
c00134c7:	c1 e1 04             	shl    ecx,0x4
c00134ca:	09 ca                	or     edx,ecx
c00134cc:	88 10                	mov    BYTE PTR [eax],dl
c00134ce:	5b                   	pop    ebx
c00134cf:	c3                   	ret    

c00134d0 <Virt::getPageState(unsigned long)>:
c00134d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134d4:	8b 0d 48 c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c548
c00134da:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00134e0:	89 d0                	mov    eax,edx
c00134e2:	d1 e8                	shr    eax,1
c00134e4:	80 e2 01             	and    dl,0x1
c00134e7:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00134ea:	74 03                	je     c00134ef <Virt::getPageState(unsigned long)+0x1f>
c00134ec:	c1 e8 04             	shr    eax,0x4
c00134ef:	83 e0 0f             	and    eax,0xf
c00134f2:	c3                   	ret    

c00134f3 <Virt::allocateKernelVirtualPages(int)>:
c00134f3:	55                   	push   ebp
c00134f4:	57                   	push   edi
c00134f5:	56                   	push   esi
c00134f6:	31 f6                	xor    esi,esi
c00134f8:	53                   	push   ebx
c00134f9:	31 db                	xor    ebx,ebx
c00134fb:	83 ec 1c             	sub    esp,0x1c
c00134fe:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0013503:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013507:	8b 2d 44 c5 02 c0    	mov    ebp,DWORD PTR ds:0xc002c544
c001350d:	55                   	push   ebp
c001350e:	e8 bd ff ff ff       	call   c00134d0 <Virt::getPageState(unsigned long)>
c0013513:	5a                   	pop    edx
c0013514:	84 c0                	test   al,al
c0013516:	75 3d                	jne    c0013555 <Virt::allocateKernelVirtualPages(int)+0x62>
c0013518:	85 db                	test   ebx,ebx
c001351a:	0f 44 f5             	cmove  esi,ebp
c001351d:	83 c3 01             	add    ebx,0x1
c0013520:	39 fb                	cmp    ebx,edi
c0013522:	74 5e                	je     c0013582 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0013524:	83 c5 01             	add    ebp,0x1
c0013527:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c001352d:	76 33                	jbe    c0013562 <Virt::allocateKernelVirtualPages(int)+0x6f>
c001352f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0013534:	c7 05 44 c5 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002c544,0xc8000
c001353e:	75 2a                	jne    c001356a <Virt::allocateKernelVirtualPages(int)+0x77>
c0013540:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0013545:	bd 00 80 0c 00       	mov    ebp,0xc8000
c001354a:	55                   	push   ebp
c001354b:	e8 80 ff ff ff       	call   c00134d0 <Virt::getPageState(unsigned long)>
c0013550:	5a                   	pop    edx
c0013551:	84 c0                	test   al,al
c0013553:	74 c3                	je     c0013518 <Virt::allocateKernelVirtualPages(int)+0x25>
c0013555:	83 c5 01             	add    ebp,0x1
c0013558:	31 db                	xor    ebx,ebx
c001355a:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0013560:	77 cd                	ja     c001352f <Virt::allocateKernelVirtualPages(int)+0x3c>
c0013562:	89 2d 44 c5 02 c0    	mov    DWORD PTR ds:0xc002c544,ebp
c0013568:	eb a3                	jmp    c001350d <Virt::allocateKernelVirtualPages(int)+0x1a>
c001356a:	83 ec 0c             	sub    esp,0xc
c001356d:	68 c4 92 02 c0       	push   0xc00292c4
c0013572:	e8 35 ca ff ff       	call   c000ffac <KePanic(char const*)>
c0013577:	8b 2d 44 c5 02 c0    	mov    ebp,DWORD PTR ds:0xc002c544
c001357d:	83 c4 10             	add    esp,0x10
c0013580:	eb 8b                	jmp    c001350d <Virt::allocateKernelVirtualPages(int)+0x1a>
c0013582:	89 35 44 c5 02 c0    	mov    DWORD PTR ds:0xc002c544,esi
c0013588:	83 fb 01             	cmp    ebx,0x1
c001358b:	74 63                	je     c00135f0 <Virt::allocateKernelVirtualPages(int)+0xfd>
c001358d:	85 ff                	test   edi,edi
c001358f:	74 41                	je     c00135d2 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0013591:	89 f0                	mov    eax,esi
c0013593:	31 db                	xor    ebx,ebx
c0013595:	8d 6f ff             	lea    ebp,[edi-0x1]
c0013598:	eb 16                	jmp    c00135b0 <Virt::allocateKernelVirtualPages(int)+0xbd>
c001359a:	6a 01                	push   0x1
c001359c:	83 c3 01             	add    ebx,0x1
c001359f:	50                   	push   eax
c00135a0:	e8 f1 fe ff ff       	call   c0013496 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00135a5:	39 fb                	cmp    ebx,edi
c00135a7:	58                   	pop    eax
c00135a8:	5a                   	pop    edx
c00135a9:	74 27                	je     c00135d2 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00135ab:	a1 44 c5 02 c0       	mov    eax,ds:0xc002c544
c00135b0:	8d 50 01             	lea    edx,[eax+0x1]
c00135b3:	85 db                	test   ebx,ebx
c00135b5:	89 15 44 c5 02 c0    	mov    DWORD PTR ds:0xc002c544,edx
c00135bb:	74 22                	je     c00135df <Virt::allocateKernelVirtualPages(int)+0xec>
c00135bd:	39 dd                	cmp    ebp,ebx
c00135bf:	75 d9                	jne    c001359a <Virt::allocateKernelVirtualPages(int)+0xa7>
c00135c1:	6a 03                	push   0x3
c00135c3:	83 c3 01             	add    ebx,0x1
c00135c6:	50                   	push   eax
c00135c7:	e8 ca fe ff ff       	call   c0013496 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00135cc:	39 fb                	cmp    ebx,edi
c00135ce:	59                   	pop    ecx
c00135cf:	58                   	pop    eax
c00135d0:	75 d9                	jne    c00135ab <Virt::allocateKernelVirtualPages(int)+0xb8>
c00135d2:	83 c4 1c             	add    esp,0x1c
c00135d5:	89 f0                	mov    eax,esi
c00135d7:	5b                   	pop    ebx
c00135d8:	c1 e0 0c             	shl    eax,0xc
c00135db:	5e                   	pop    esi
c00135dc:	5f                   	pop    edi
c00135dd:	5d                   	pop    ebp
c00135de:	c3                   	ret    
c00135df:	6a 02                	push   0x2
c00135e1:	bb 01 00 00 00       	mov    ebx,0x1
c00135e6:	50                   	push   eax
c00135e7:	e8 aa fe ff ff       	call   c0013496 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00135ec:	58                   	pop    eax
c00135ed:	5a                   	pop    edx
c00135ee:	eb bb                	jmp    c00135ab <Virt::allocateKernelVirtualPages(int)+0xb8>
c00135f0:	6a 04                	push   0x4
c00135f2:	56                   	push   esi
c00135f3:	8d 46 01             	lea    eax,[esi+0x1]
c00135f6:	a3 44 c5 02 c0       	mov    ds:0xc002c544,eax
c00135fb:	e8 96 fe ff ff       	call   c0013496 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013600:	89 f0                	mov    eax,esi
c0013602:	59                   	pop    ecx
c0013603:	c1 e0 0c             	shl    eax,0xc
c0013606:	5b                   	pop    ebx
c0013607:	83 c4 1c             	add    esp,0x1c
c001360a:	5b                   	pop    ebx
c001360b:	5e                   	pop    esi
c001360c:	5f                   	pop    edi
c001360d:	5d                   	pop    ebp
c001360e:	c3                   	ret    

c001360f <Virt::freeSwapfilePage(unsigned long)>:
c001360f:	53                   	push   ebx
c0013610:	8b 15 8c 22 03 c0    	mov    edx,DWORD PTR ds:0xc003228c
c0013616:	b8 01 00 00 00       	mov    eax,0x1
c001361b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001361f:	d3 e0                	shl    eax,cl
c0013621:	89 cb                	mov    ebx,ecx
c0013623:	c1 eb 05             	shr    ebx,0x5
c0013626:	f7 d0                	not    eax
c0013628:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c001362b:	21 c1                	and    ecx,eax
c001362d:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0013630:	5b                   	pop    ebx
c0013631:	c3                   	ret    

c0013632 <Virt::swapIDToSector(unsigned long)>:
c0013632:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013636:	8b 15 4c c5 02 c0    	mov    edx,DWORD PTR ds:0xc002c54c
c001363c:	8b 0d 54 c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c554
c0013642:	0f af c2             	imul   eax,edx
c0013645:	01 c8                	add    eax,ecx
c0013647:	c3                   	ret    

c0013648 <Virt::allocateSwapfilePage()>:
c0013648:	55                   	push   ebp
c0013649:	31 d2                	xor    edx,edx
c001364b:	57                   	push   edi
c001364c:	56                   	push   esi
c001364d:	53                   	push   ebx
c001364e:	83 ec 0c             	sub    esp,0xc
c0013651:	8b 1d 50 c5 02 c0    	mov    ebx,DWORD PTR ds:0xc002c550
c0013657:	8b 0d 4c c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c54c
c001365d:	89 d8                	mov    eax,ebx
c001365f:	f7 f1                	div    ecx
c0013661:	39 cb                	cmp    ebx,ecx
c0013663:	72 2f                	jb     c0013694 <Virt::allocateSwapfilePage()+0x4c>
c0013665:	8b 35 8c 22 03 c0    	mov    esi,DWORD PTR ds:0xc003228c
c001366b:	8b 16                	mov    edx,DWORD PTR [esi]
c001366d:	f6 c2 01             	test   dl,0x1
c0013670:	74 3e                	je     c00136b0 <Virt::allocateSwapfilePage()+0x68>
c0013672:	31 c9                	xor    ecx,ecx
c0013674:	bf 01 00 00 00       	mov    edi,0x1
c0013679:	eb 12                	jmp    c001368d <Virt::allocateSwapfilePage()+0x45>
c001367b:	89 ca                	mov    edx,ecx
c001367d:	89 fd                	mov    ebp,edi
c001367f:	c1 ea 05             	shr    edx,0x5
c0013682:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0013685:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013687:	d3 e5                	shl    ebp,cl
c0013689:	85 ea                	test   edx,ebp
c001368b:	74 2c                	je     c00136b9 <Virt::allocateSwapfilePage()+0x71>
c001368d:	83 c1 01             	add    ecx,0x1
c0013690:	39 c8                	cmp    eax,ecx
c0013692:	77 e7                	ja     c001367b <Virt::allocateSwapfilePage()+0x33>
c0013694:	83 ec 0c             	sub    esp,0xc
c0013697:	68 d7 95 02 c0       	push   0xc00295d7
c001369c:	e8 0b c9 ff ff       	call   c000ffac <KePanic(char const*)>
c00136a1:	83 c4 10             	add    esp,0x10
c00136a4:	31 c9                	xor    ecx,ecx
c00136a6:	83 c4 0c             	add    esp,0xc
c00136a9:	89 c8                	mov    eax,ecx
c00136ab:	5b                   	pop    ebx
c00136ac:	5e                   	pop    esi
c00136ad:	5f                   	pop    edi
c00136ae:	5d                   	pop    ebp
c00136af:	c3                   	ret    
c00136b0:	89 f3                	mov    ebx,esi
c00136b2:	bd 01 00 00 00       	mov    ebp,0x1
c00136b7:	31 c9                	xor    ecx,ecx
c00136b9:	09 ea                	or     edx,ebp
c00136bb:	89 c8                	mov    eax,ecx
c00136bd:	89 13                	mov    DWORD PTR [ebx],edx
c00136bf:	83 c4 0c             	add    esp,0xc
c00136c2:	5b                   	pop    ebx
c00136c3:	5e                   	pop    esi
c00136c4:	5f                   	pop    edi
c00136c5:	5d                   	pop    ebp
c00136c6:	c3                   	ret    

c00136c7 <Virt::virtualMemorySetup()>:
c00136c7:	53                   	push   ebx
c00136c8:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00136cd:	6a 0f                	push   0xf
c00136cf:	53                   	push   ebx
c00136d0:	83 c3 01             	add    ebx,0x1
c00136d3:	e8 be fd ff ff       	call   c0013496 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00136d8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00136de:	58                   	pop    eax
c00136df:	5a                   	pop    edx
c00136e0:	75 eb                	jne    c00136cd <Virt::virtualMemorySetup()+0x6>
c00136e2:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00136e7:	6a 00                	push   0x0
c00136e9:	53                   	push   ebx
c00136ea:	83 c3 01             	add    ebx,0x1
c00136ed:	e8 a4 fd ff ff       	call   c0013496 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00136f2:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00136f8:	59                   	pop    ecx
c00136f9:	58                   	pop    eax
c00136fa:	75 eb                	jne    c00136e7 <Virt::virtualMemorySetup()+0x20>
c00136fc:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0013701:	6a 0f                	push   0xf
c0013703:	53                   	push   ebx
c0013704:	83 c3 01             	add    ebx,0x1
c0013707:	e8 8a fd ff ff       	call   c0013496 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001370c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0013712:	58                   	pop    eax
c0013713:	5a                   	pop    edx
c0013714:	75 eb                	jne    c0013701 <Virt::virtualMemorySetup()+0x3a>
c0013716:	5b                   	pop    ebx
c0013717:	c3                   	ret    

c0013718 <Virt::setupPageSwapping(int)>:
c0013718:	53                   	push   ebx
c0013719:	83 ec 0c             	sub    esp,0xc
c001371c:	a1 e8 1a 03 c0       	mov    eax,ds:0xc0031ae8
c0013721:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013725:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001372b:	8b 10                	mov    edx,DWORD PTR [eax]
c001372d:	53                   	push   ebx
c001372e:	68 ee 95 02 c0       	push   0xc00295ee
c0013733:	50                   	push   eax
c0013734:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0013737:	c1 e3 0b             	shl    ebx,0xb
c001373a:	89 1d 50 c5 02 c0    	mov    DWORD PTR ds:0xc002c550,ebx
c0013740:	c1 eb 08             	shr    ebx,0x8
c0013743:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013746:	c6 05 58 c5 02 c0 43 	mov    BYTE PTR ds:0xc002c558,0x43
c001374d:	c7 05 4c c5 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c54c,0x8
c0013757:	a3 54 c5 02 c0       	mov    ds:0xc002c554,eax
c001375c:	e8 f7 c3 ff ff       	call   c000fb58 <malloc>
c0013761:	31 d2                	xor    edx,edx
c0013763:	83 c4 0c             	add    esp,0xc
c0013766:	a3 8c 22 03 c0       	mov    ds:0xc003228c,eax
c001376b:	89 c1                	mov    ecx,eax
c001376d:	a1 50 c5 02 c0       	mov    eax,ds:0xc002c550
c0013772:	f7 35 4c c5 02 c0    	div    DWORD PTR ds:0xc002c54c
c0013778:	c1 e8 05             	shr    eax,0x5
c001377b:	50                   	push   eax
c001377c:	6a 00                	push   0x0
c001377e:	51                   	push   ecx
c001377f:	e8 6c cd fe ff       	call   c00004f0 <memset>
c0013784:	83 c4 18             	add    esp,0x18
c0013787:	5b                   	pop    ebx
c0013788:	c3                   	ret    
c0013789:	90                   	nop

c001378a <VAS::setCPUSpecific(unsigned long)>:
c001378a:	c3                   	ret    
c001378b:	90                   	nop

c001378c <VAS::VAS(VAS*)>:
c001378c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013790:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013797:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001379b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00137a2:	90                   	nop
c00137a3:	c3                   	ret    

c00137a4 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00137a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137a8:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00137ad:	89 c2                	mov    edx,eax
c00137af:	c1 ea 16             	shr    edx,0x16
c00137b2:	c1 e8 0a             	shr    eax,0xa
c00137b5:	83 f9 01             	cmp    ecx,0x1
c00137b8:	19 c9                	sbb    ecx,ecx
c00137ba:	25 fc 0f 00 00       	and    eax,0xffc
c00137bf:	c1 e2 0c             	shl    edx,0xc
c00137c2:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00137c8:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00137cf:	01 d0                	add    eax,edx
c00137d1:	c3                   	ret    

c00137d2 <VAS::getPageTableEntry(unsigned long)>:
c00137d2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00137d6:	89 ca                	mov    edx,ecx
c00137d8:	c1 ea 16             	shr    edx,0x16
c00137db:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00137e1:	c1 e9 0a             	shr    ecx,0xa
c00137e4:	c1 e0 0c             	shl    eax,0xc
c00137e7:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00137ed:	8d 04 08             	lea    eax,[eax+ecx*1]
c00137f0:	c3                   	ret    

c00137f1 <Virt::freeKernelVirtualPages(unsigned long)>:
c00137f1:	55                   	push   ebp
c00137f2:	57                   	push   edi
c00137f3:	bf 01 00 00 00       	mov    edi,0x1
c00137f8:	56                   	push   esi
c00137f9:	53                   	push   ebx
c00137fa:	83 ec 1c             	sub    esp,0x1c
c00137fd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013801:	c1 ee 0c             	shr    esi,0xc
c0013804:	eb 48                	jmp    c001384e <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0013806:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001380b:	83 ec 08             	sub    esp,0x8
c001380e:	55                   	push   ebp
c001380f:	50                   	push   eax
c0013810:	e8 bd ff ff ff       	call   c00137d2 <VAS::getPageTableEntry(unsigned long)>
c0013815:	83 c4 10             	add    esp,0x10
c0013818:	8b 10                	mov    edx,DWORD PTR [eax]
c001381a:	f6 c6 04             	test   dh,0x4
c001381d:	75 70                	jne    c001388f <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001381f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013825:	83 fb 04             	cmp    ebx,0x4
c0013828:	0f 84 8a 00 00 00    	je     c00138b8 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001382e:	83 fb 02             	cmp    ebx,0x2
c0013831:	0f 84 9a 00 00 00    	je     c00138d1 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0013837:	83 fb 03             	cmp    ebx,0x3
c001383a:	0f 84 be 00 00 00    	je     c00138fe <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0013840:	83 fb 01             	cmp    ebx,0x1
c0013843:	0f 84 a2 00 00 00    	je     c00138eb <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013849:	83 c6 01             	add    esi,0x1
c001384c:	31 ff                	xor    edi,edi
c001384e:	56                   	push   esi
c001384f:	89 f5                	mov    ebp,esi
c0013851:	e8 7a fc ff ff       	call   c00134d0 <Virt::getPageState(unsigned long)>
c0013856:	c1 e5 0c             	shl    ebp,0xc
c0013859:	5a                   	pop    edx
c001385a:	0f b6 d8             	movzx  ebx,al
c001385d:	85 db                	test   ebx,ebx
c001385f:	75 a5                	jne    c0013806 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0013861:	83 ec 0c             	sub    esp,0xc
c0013864:	68 05 96 02 c0       	push   0xc0029605
c0013869:	e8 3e c7 ff ff       	call   c000ffac <KePanic(char const*)>
c001386e:	5a                   	pop    edx
c001386f:	59                   	pop    ecx
c0013870:	55                   	push   ebp
c0013871:	8b 2d 90 22 03 c0    	mov    ebp,DWORD PTR ds:0xc0032290
c0013877:	55                   	push   ebp
c0013878:	e8 55 ff ff ff       	call   c00137d2 <VAS::getPageTableEntry(unsigned long)>
c001387d:	83 c4 10             	add    esp,0x10
c0013880:	8b 10                	mov    edx,DWORD PTR [eax]
c0013882:	f6 c6 04             	test   dh,0x4
c0013885:	75 08                	jne    c001388f <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0013887:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001388d:	eb ba                	jmp    c0013849 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001388f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013893:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013899:	83 ec 0c             	sub    esp,0xc
c001389c:	52                   	push   edx
c001389d:	e8 9b c8 ff ff       	call   c001013d <Phys::freePage(unsigned long)>
c00138a2:	83 c4 10             	add    esp,0x10
c00138a5:	83 fb 04             	cmp    ebx,0x4
c00138a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00138b2:	0f 85 76 ff ff ff    	jne    c001382e <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00138b8:	83 e7 01             	and    edi,0x1
c00138bb:	75 46                	jne    c0013903 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00138bd:	c7 44 24 30 e4 92 02 c0 	mov    DWORD PTR [esp+0x30],0xc00292e4
c00138c5:	83 c4 1c             	add    esp,0x1c
c00138c8:	5b                   	pop    ebx
c00138c9:	5e                   	pop    esi
c00138ca:	5f                   	pop    edi
c00138cb:	5d                   	pop    ebp
c00138cc:	e9 db c6 ff ff       	jmp    c000ffac <KePanic(char const*)>
c00138d1:	83 e7 01             	and    edi,0x1
c00138d4:	75 15                	jne    c00138eb <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00138d6:	83 ec 0c             	sub    esp,0xc
c00138d9:	68 21 96 02 c0       	push   0xc0029621
c00138de:	e8 c9 c6 ff ff       	call   c000ffac <KePanic(char const*)>
c00138e3:	83 c4 10             	add    esp,0x10
c00138e6:	e9 5e ff ff ff       	jmp    c0013849 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00138eb:	83 ec 08             	sub    esp,0x8
c00138ee:	6a 00                	push   0x0
c00138f0:	56                   	push   esi
c00138f1:	e8 a0 fb ff ff       	call   c0013496 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00138f6:	83 c4 10             	add    esp,0x10
c00138f9:	e9 4b ff ff ff       	jmp    c0013849 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00138fe:	83 e7 01             	and    edi,0x1
c0013901:	75 16                	jne    c0013919 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0013903:	83 ec 08             	sub    esp,0x8
c0013906:	6a 00                	push   0x0
c0013908:	56                   	push   esi
c0013909:	e8 88 fb ff ff       	call   c0013496 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001390e:	83 c4 10             	add    esp,0x10
c0013911:	83 c4 1c             	add    esp,0x1c
c0013914:	5b                   	pop    ebx
c0013915:	5e                   	pop    esi
c0013916:	5f                   	pop    edi
c0013917:	5d                   	pop    ebp
c0013918:	c3                   	ret    
c0013919:	c7 44 24 30 3d 96 02 c0 	mov    DWORD PTR [esp+0x30],0xc002963d
c0013921:	83 c4 1c             	add    esp,0x1c
c0013924:	5b                   	pop    ebx
c0013925:	5e                   	pop    esi
c0013926:	5f                   	pop    edi
c0013927:	5d                   	pop    ebp
c0013928:	e9 7f c6 ff ff       	jmp    c000ffac <KePanic(char const*)>
c001392d:	90                   	nop

c001392e <VAS::freeAllocatedPages(unsigned long)>:
c001392e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013932:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013936:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001393a:	74 09                	je     c0013945 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001393c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013940:	e9 ac fe ff ff       	jmp    c00137f1 <Virt::freeKernelVirtualPages(unsigned long)>
c0013945:	c7 44 24 04 08 93 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029308
c001394d:	e9 14 36 ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>

c0013952 <VAS::virtualToPhysical(unsigned long)>:
c0013952:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013956:	50                   	push   eax
c0013957:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001395b:	52                   	push   edx
c001395c:	e8 71 fe ff ff       	call   c00137d2 <VAS::getPageTableEntry(unsigned long)>
c0013961:	59                   	pop    ecx
c0013962:	5a                   	pop    edx
c0013963:	8b 00                	mov    eax,DWORD PTR [eax]
c0013965:	25 00 f0 ff ff       	and    eax,0xfffff000
c001396a:	c3                   	ret    
c001396b:	90                   	nop

c001396c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c001396c:	55                   	push   ebp
c001396d:	57                   	push   edi
c001396e:	56                   	push   esi
c001396f:	53                   	push   ebx
c0013970:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013974:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0013978:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001397c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013980:	85 db                	test   ebx,ebx
c0013982:	7e 24                	jle    c00139a8 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0013984:	c1 e3 0c             	shl    ebx,0xc
c0013987:	01 f3                	add    ebx,esi
c0013989:	56                   	push   esi
c001398a:	81 c6 00 10 00 00    	add    esi,0x1000
c0013990:	55                   	push   ebp
c0013991:	e8 3c fe ff ff       	call   c00137d2 <VAS::getPageTableEntry(unsigned long)>
c0013996:	5a                   	pop    edx
c0013997:	59                   	pop    ecx
c0013998:	8b 08                	mov    ecx,DWORD PTR [eax]
c001399a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001399e:	21 f9                	and    ecx,edi
c00139a0:	09 d1                	or     ecx,edx
c00139a2:	39 f3                	cmp    ebx,esi
c00139a4:	89 08                	mov    DWORD PTR [eax],ecx
c00139a6:	75 e1                	jne    c0013989 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c00139a8:	5b                   	pop    ebx
c00139a9:	5e                   	pop    esi
c00139aa:	5f                   	pop    edi
c00139ab:	5d                   	pop    ebp
c00139ac:	c3                   	ret    
c00139ad:	90                   	nop

c00139ae <VAS::VAS()>:
c00139ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139b2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00139b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139bd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00139c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139c8:	a3 90 22 03 c0       	mov    ds:0xc0032290,eax
c00139cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139d1:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00139d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139d9:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00139dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139e0:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00139e7:	ba 7d d0 02 c0       	mov    edx,0xc002d07d
c00139ec:	b8 00 d0 02 c0       	mov    eax,0xc002d000
c00139f1:	29 c2                	sub    edx,eax
c00139f3:	89 d0                	mov    eax,edx
c00139f5:	05 ff 0f 00 00       	add    eax,0xfff
c00139fa:	c1 e8 0c             	shr    eax,0xc
c00139fd:	89 c2                	mov    edx,eax
c00139ff:	b8 00 d0 02 c0       	mov    eax,0xc002d000
c0013a04:	6a 04                	push   0x4
c0013a06:	6a ff                	push   0xffffffff
c0013a08:	52                   	push   edx
c0013a09:	50                   	push   eax
c0013a0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013a0e:	e8 59 ff ff ff       	call   c001396c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013a13:	83 c4 14             	add    esp,0x14
c0013a16:	90                   	nop
c0013a17:	c3                   	ret    

c0013a18 <VAS::setToWriteCombining(unsigned long, int)>:
c0013a18:	a1 24 24 03 c0       	mov    eax,ds:0xc0032424
c0013a1d:	50                   	push   eax
c0013a1e:	6a ff                	push   0xffffffff
c0013a20:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013a24:	52                   	push   edx
c0013a25:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013a29:	51                   	push   ecx
c0013a2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a2e:	50                   	push   eax
c0013a2f:	e8 38 ff ff ff       	call   c001396c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013a34:	83 c4 14             	add    esp,0x14
c0013a37:	c3                   	ret    

c0013a38 <VAS::mapOtherVASIn(bool, VAS*)>:
c0013a38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a3c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013a3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a43:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0013a46:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013a4b:	83 f8 01             	cmp    eax,0x1
c0013a4e:	19 c0                	sbb    eax,eax
c0013a50:	83 ca 03             	or     edx,0x3
c0013a53:	83 e0 fc             	and    eax,0xfffffffc
c0013a56:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0013a5d:	0f 20 d8             	mov    eax,cr3
c0013a60:	0f 22 d8             	mov    cr3,eax
c0013a63:	c3                   	ret    

c0013a64 <VAS::~VAS()>:
c0013a64:	83 ec 2c             	sub    esp,0x2c
c0013a67:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013a6f:	fa                   	cli    
c0013a70:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0013a75:	83 c0 01             	add    eax,0x1
c0013a78:	a3 30 23 03 c0       	mov    ds:0xc0032330,eax
c0013a7d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013a82:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a84:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013a87:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0013a8d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013a91:	6a 01                	push   0x1
c0013a93:	50                   	push   eax
c0013a94:	e8 9f ff ff ff       	call   c0013a38 <VAS::mapOtherVASIn(bool, VAS*)>
c0013a99:	83 c4 0c             	add    esp,0xc
c0013a9c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013aa4:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0013aac:	0f 8f d8 00 00 00    	jg     c0013b8a <VAS::~VAS()+0x126>
c0013ab2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ab6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013ab9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013abd:	c1 e2 02             	shl    edx,0x2
c0013ac0:	01 d0                	add    eax,edx
c0013ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ac4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013acc:	83 e0 01             	and    eax,0x1
c0013acf:	0f 84 ab 00 00 00    	je     c0013b80 <VAS::~VAS()+0x11c>
c0013ad5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013add:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0013ae5:	7f 74                	jg     c0013b5b <VAS::~VAS()+0xf7>
c0013ae7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013aeb:	c1 e0 0a             	shl    eax,0xa
c0013aee:	89 c2                	mov    edx,eax
c0013af0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013af4:	01 d0                	add    eax,edx
c0013af6:	c1 e0 0c             	shl    eax,0xc
c0013af9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013afd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013b02:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b04:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013b07:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0013b0d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013b11:	6a 01                	push   0x1
c0013b13:	50                   	push   eax
c0013b14:	e8 8b fc ff ff       	call   c00137a4 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0013b19:	83 c4 0c             	add    esp,0xc
c0013b1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013b20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013b24:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b26:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b2e:	25 01 04 00 00       	and    eax,0x401
c0013b33:	3d 01 04 00 00       	cmp    eax,0x401
c0013b38:	75 1a                	jne    c0013b54 <VAS::~VAS()+0xf0>
c0013b3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b3e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013b43:	83 ec 0c             	sub    esp,0xc
c0013b46:	50                   	push   eax
c0013b47:	e8 f1 c5 ff ff       	call   c001013d <Phys::freePage(unsigned long)>
c0013b4c:	83 c4 10             	add    esp,0x10
c0013b4f:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013b54:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0013b59:	eb 82                	jmp    c0013add <VAS::~VAS()+0x79>
c0013b5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b5f:	25 00 04 00 00       	and    eax,0x400
c0013b64:	74 1a                	je     c0013b80 <VAS::~VAS()+0x11c>
c0013b66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013b6f:	83 ec 0c             	sub    esp,0xc
c0013b72:	50                   	push   eax
c0013b73:	e8 c5 c5 ff ff       	call   c001013d <Phys::freePage(unsigned long)>
c0013b78:	83 c4 10             	add    esp,0x10
c0013b7b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013b80:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013b85:	e9 1a ff ff ff       	jmp    c0013aa4 <VAS::~VAS()+0x40>
c0013b8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b8e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013b91:	83 ec 0c             	sub    esp,0xc
c0013b94:	50                   	push   eax
c0013b95:	e8 57 fc ff ff       	call   c00137f1 <Virt::freeKernelVirtualPages(unsigned long)>
c0013b9a:	83 c4 10             	add    esp,0x10
c0013b9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ba1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013ba4:	83 ec 0c             	sub    esp,0xc
c0013ba7:	50                   	push   eax
c0013ba8:	e8 90 c5 ff ff       	call   c001013d <Phys::freePage(unsigned long)>
c0013bad:	83 c4 10             	add    esp,0x10
c0013bb0:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013bb5:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c0013bbd:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0013bc2:	85 c0                	test   eax,eax
c0013bc4:	75 01                	jne    c0013bc7 <VAS::~VAS()+0x163>
c0013bc6:	fb                   	sti    
c0013bc7:	90                   	nop
c0013bc8:	83 c4 2c             	add    esp,0x2c
c0013bcb:	c3                   	ret    

c0013bcc <VAS::mapPage(unsigned long, unsigned long, int)>:
c0013bcc:	55                   	push   ebp
c0013bcd:	57                   	push   edi
c0013bce:	56                   	push   esi
c0013bcf:	53                   	push   ebx
c0013bd0:	83 ec 1c             	sub    esp,0x1c
c0013bd3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0013bd7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013bdb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013bdf:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0013be5:	77 08                	ja     c0013bef <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0013be7:	0f 20 d8             	mov    eax,cr3
c0013bea:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0013bed:	75 43                	jne    c0013c32 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0013bef:	89 d8                	mov    eax,ebx
c0013bf1:	09 f8                	or     eax,edi
c0013bf3:	a9 ff 0f 00 00       	test   eax,0xfff
c0013bf8:	75 53                	jne    c0013c4d <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0013bfa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0013bfd:	89 de                	mov    esi,ebx
c0013bff:	c1 ee 16             	shr    esi,0x16
c0013c02:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0013c09:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0013c0d:	74 50                	je     c0013c5f <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0013c0f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013c13:	c1 eb 0a             	shr    ebx,0xa
c0013c16:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0013c1c:	c1 e6 0c             	shl    esi,0xc
c0013c1f:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013c25:	09 c7                	or     edi,eax
c0013c27:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0013c2a:	83 c4 1c             	add    esp,0x1c
c0013c2d:	5b                   	pop    ebx
c0013c2e:	5e                   	pop    esi
c0013c2f:	5f                   	pop    edi
c0013c30:	5d                   	pop    ebp
c0013c31:	c3                   	ret    
c0013c32:	83 ec 0c             	sub    esp,0xc
c0013c35:	68 2c 93 02 c0       	push   0xc002932c
c0013c3a:	e8 27 33 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013c3f:	89 d8                	mov    eax,ebx
c0013c41:	83 c4 10             	add    esp,0x10
c0013c44:	09 f8                	or     eax,edi
c0013c46:	a9 ff 0f 00 00       	test   eax,0xfff
c0013c4b:	74 ad                	je     c0013bfa <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0013c4d:	83 ec 0c             	sub    esp,0xc
c0013c50:	68 94 93 02 c0       	push   0xc0029394
c0013c55:	e8 52 c3 ff ff       	call   c000ffac <KePanic(char const*)>
c0013c5a:	83 c4 10             	add    esp,0x10
c0013c5d:	eb 9b                	jmp    c0013bfa <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0013c5f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013c63:	e8 3e c5 ff ff       	call   c00101a6 <Phys::allocatePage()>
c0013c68:	8b 0d 90 22 03 c0    	mov    ecx,DWORD PTR ds:0xc0032290
c0013c6e:	83 ec 0c             	sub    esp,0xc
c0013c71:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013c75:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013c79:	6a 01                	push   0x1
c0013c7b:	e8 73 f8 ff ff       	call   c00134f3 <Virt::allocateKernelVirtualPages(int)>
c0013c80:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013c87:	6a 01                	push   0x1
c0013c89:	50                   	push   eax
c0013c8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013c8e:	52                   	push   edx
c0013c8f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013c93:	51                   	push   ecx
c0013c94:	e8 2d 01 00 00       	call   c0013dc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013c99:	83 c4 1c             	add    esp,0x1c
c0013c9c:	68 00 10 00 00       	push   0x1000
c0013ca1:	6a 00                	push   0x0
c0013ca3:	50                   	push   eax
c0013ca4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013ca8:	e8 43 c8 fe ff       	call   c00004f0 <memset>
c0013cad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013cb1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013cb4:	e8 38 fb ff ff       	call   c00137f1 <Virt::freeKernelVirtualPages(unsigned long)>
c0013cb9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cbd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013cc1:	83 c4 10             	add    esp,0x10
c0013cc4:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0013cc7:	0d 07 04 00 00       	or     eax,0x407
c0013ccc:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0013ccf:	e9 3b ff ff ff       	jmp    c0013c0f <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0013cd4 <VAS::allocatePages(int, int)>:
c0013cd4:	55                   	push   ebp
c0013cd5:	57                   	push   edi
c0013cd6:	56                   	push   esi
c0013cd7:	53                   	push   ebx
c0013cd8:	83 ec 1c             	sub    esp,0x1c
c0013cdb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013cdf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013ce3:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0013ce7:	75 75                	jne    c0013d5e <VAS::allocatePages(int, int)+0x8a>
c0013ce9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013cec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013cf0:	85 c0                	test   eax,eax
c0013cf2:	74 49                	je     c0013d3d <VAS::allocatePages(int, int)+0x69>
c0013cf4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013cf8:	89 d5                	mov    ebp,edx
c0013cfa:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013cfe:	c1 e5 0c             	shl    ebp,0xc
c0013d01:	01 dd                	add    ebp,ebx
c0013d03:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0013d06:	81 cf 00 04 00 00    	or     edi,0x400
c0013d0c:	85 d2                	test   edx,edx
c0013d0e:	7e 1b                	jle    c0013d2b <VAS::allocatePages(int, int)+0x57>
c0013d10:	e8 91 c4 ff ff       	call   c00101a6 <Phys::allocatePage()>
c0013d15:	57                   	push   edi
c0013d16:	53                   	push   ebx
c0013d17:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013d1d:	50                   	push   eax
c0013d1e:	56                   	push   esi
c0013d1f:	e8 a8 fe ff ff       	call   c0013bcc <VAS::mapPage(unsigned long, unsigned long, int)>
c0013d24:	83 c4 10             	add    esp,0x10
c0013d27:	39 dd                	cmp    ebp,ebx
c0013d29:	75 e5                	jne    c0013d10 <VAS::allocatePages(int, int)+0x3c>
c0013d2b:	0f 20 d8             	mov    eax,cr3
c0013d2e:	0f 22 d8             	mov    cr3,eax
c0013d31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013d35:	83 c4 1c             	add    esp,0x1c
c0013d38:	5b                   	pop    ebx
c0013d39:	5e                   	pop    esi
c0013d3a:	5f                   	pop    edi
c0013d3b:	5d                   	pop    ebp
c0013d3c:	c3                   	ret    
c0013d3d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013d41:	83 ec 0c             	sub    esp,0xc
c0013d44:	68 b8 93 02 c0       	push   0xc00293b8
c0013d49:	e8 5e c2 ff ff       	call   c000ffac <KePanic(char const*)>
c0013d4e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013d51:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d55:	83 c4 10             	add    esp,0x10
c0013d58:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013d5c:	eb 96                	jmp    c0013cf4 <VAS::allocatePages(int, int)+0x20>
c0013d5e:	83 ec 0c             	sub    esp,0xc
c0013d61:	52                   	push   edx
c0013d62:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0013d66:	e8 88 f7 ff ff       	call   c00134f3 <Virt::allocateKernelVirtualPages(int)>
c0013d6b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d6f:	83 c4 10             	add    esp,0x10
c0013d72:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0013d77:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013d7b:	77 38                	ja     c0013db5 <VAS::allocatePages(int, int)+0xe1>
c0013d7d:	85 d2                	test   edx,edx
c0013d7f:	7e aa                	jle    c0013d2b <VAS::allocatePages(int, int)+0x57>
c0013d81:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013d85:	c1 e2 0c             	shl    edx,0xc
c0013d88:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013d8c:	81 cf 00 04 00 00    	or     edi,0x400
c0013d92:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0013d95:	e8 0c c4 ff ff       	call   c00101a6 <Phys::allocatePage()>
c0013d9a:	57                   	push   edi
c0013d9b:	53                   	push   ebx
c0013d9c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013da2:	50                   	push   eax
c0013da3:	56                   	push   esi
c0013da4:	e8 23 fe ff ff       	call   c0013bcc <VAS::mapPage(unsigned long, unsigned long, int)>
c0013da9:	83 c4 10             	add    esp,0x10
c0013dac:	39 dd                	cmp    ebp,ebx
c0013dae:	75 e5                	jne    c0013d95 <VAS::allocatePages(int, int)+0xc1>
c0013db0:	e9 76 ff ff ff       	jmp    c0013d2b <VAS::allocatePages(int, int)+0x57>
c0013db5:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013db9:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c0013dbe:	09 c1                	or     ecx,eax
c0013dc0:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013dc4:	eb b7                	jmp    c0013d7d <VAS::allocatePages(int, int)+0xa9>

c0013dc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0013dc6:	55                   	push   ebp
c0013dc7:	57                   	push   edi
c0013dc8:	56                   	push   esi
c0013dc9:	53                   	push   ebx
c0013dca:	83 ec 1c             	sub    esp,0x1c
c0013dcd:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013dd1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013dd5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0013dd9:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0013ddd:	85 db                	test   ebx,ebx
c0013ddf:	7e 2c                	jle    c0013e0d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0013de1:	c1 e3 0c             	shl    ebx,0xc
c0013de4:	8d 04 33             	lea    eax,[ebx+esi*1]
c0013de7:	89 f3                	mov    ebx,esi
c0013de9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ded:	55                   	push   ebp
c0013dee:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013df2:	29 f2                	sub    edx,esi
c0013df4:	01 da                	add    edx,ebx
c0013df6:	52                   	push   edx
c0013df7:	53                   	push   ebx
c0013df8:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013dfe:	57                   	push   edi
c0013dff:	e8 c8 fd ff ff       	call   c0013bcc <VAS::mapPage(unsigned long, unsigned long, int)>
c0013e04:	83 c4 10             	add    esp,0x10
c0013e07:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0013e0b:	75 e0                	jne    c0013ded <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0013e0d:	0f 20 d8             	mov    eax,cr3
c0013e10:	0f 22 d8             	mov    cr3,eax
c0013e13:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013e17:	83 c4 1c             	add    esp,0x1c
c0013e1a:	5b                   	pop    ebx
c0013e1b:	5e                   	pop    esi
c0013e1c:	5f                   	pop    edi
c0013e1d:	5d                   	pop    ebp
c0013e1e:	c3                   	ret    
c0013e1f:	90                   	nop

c0013e20 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0013e20:	55                   	push   ebp
c0013e21:	57                   	push   edi
c0013e22:	56                   	push   esi
c0013e23:	53                   	push   ebx
c0013e24:	83 ec 1c             	sub    esp,0x1c
c0013e27:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e2b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0013e2f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013e33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013e37:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013e3b:	09 d8                	or     eax,ebx
c0013e3d:	a9 ff 0f 00 00       	test   eax,0xfff
c0013e42:	75 4b                	jne    c0013e8f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0013e44:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013e47:	89 de                	mov    esi,ebx
c0013e49:	c1 ee 16             	shr    esi,0x16
c0013e4c:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0013e53:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0013e57:	74 48                	je     c0013ea1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0013e59:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0013e5e:	c1 eb 0a             	shr    ebx,0xa
c0013e61:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0013e65:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013e69:	83 ff 01             	cmp    edi,0x1
c0013e6c:	19 c0                	sbb    eax,eax
c0013e6e:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013e74:	c1 e6 0c             	shl    esi,0xc
c0013e77:	25 00 00 c0 ff       	and    eax,0xffc00000
c0013e7c:	01 f3                	add    ebx,esi
c0013e7e:	09 ca                	or     edx,ecx
c0013e80:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0013e87:	83 c4 1c             	add    esp,0x1c
c0013e8a:	5b                   	pop    ebx
c0013e8b:	5e                   	pop    esi
c0013e8c:	5f                   	pop    edi
c0013e8d:	5d                   	pop    ebp
c0013e8e:	c3                   	ret    
c0013e8f:	83 ec 0c             	sub    esp,0xc
c0013e92:	68 e4 93 02 c0       	push   0xc00293e4
c0013e97:	e8 10 c1 ff ff       	call   c000ffac <KePanic(char const*)>
c0013e9c:	83 c4 10             	add    esp,0x10
c0013e9f:	eb a3                	jmp    c0013e44 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0013ea1:	e8 00 c3 ff ff       	call   c00101a6 <Phys::allocatePage()>
c0013ea6:	8b 0d 90 22 03 c0    	mov    ecx,DWORD PTR ds:0xc0032290
c0013eac:	83 ec 0c             	sub    esp,0xc
c0013eaf:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0013eb3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013eb7:	6a 01                	push   0x1
c0013eb9:	e8 35 f6 ff ff       	call   c00134f3 <Virt::allocateKernelVirtualPages(int)>
c0013ebe:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013ec5:	6a 01                	push   0x1
c0013ec7:	50                   	push   eax
c0013ec8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ecc:	50                   	push   eax
c0013ecd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0013ed1:	51                   	push   ecx
c0013ed2:	e8 ef fe ff ff       	call   c0013dc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013ed7:	83 c4 1c             	add    esp,0x1c
c0013eda:	68 00 10 00 00       	push   0x1000
c0013edf:	6a 00                	push   0x0
c0013ee1:	50                   	push   eax
c0013ee2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013ee6:	e8 05 c6 fe ff       	call   c00004f0 <memset>
c0013eeb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013eef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013ef2:	e8 fa f8 ff ff       	call   c00137f1 <Virt::freeKernelVirtualPages(unsigned long)>
c0013ef7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013efb:	83 c4 10             	add    esp,0x10
c0013efe:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013f01:	81 ca 07 04 00 00    	or     edx,0x407
c0013f07:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c0013f0a:	e9 4a ff ff ff       	jmp    c0013e59 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c0013f0f:	90                   	nop

c0013f10 <VAS::VAS(bool)>:
c0013f10:	53                   	push   ebx
c0013f11:	83 ec 28             	sub    esp,0x28
c0013f14:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013f18:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013f1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f20:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f2b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013f32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f36:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013f3a:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0013f3d:	e8 64 c2 ff ff       	call   c00101a6 <Phys::allocatePage()>
c0013f42:	89 c2                	mov    edx,eax
c0013f44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f48:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013f4b:	8b 1d 90 22 03 c0    	mov    ebx,DWORD PTR ds:0xc0032290
c0013f51:	83 ec 0c             	sub    esp,0xc
c0013f54:	6a 01                	push   0x1
c0013f56:	e8 98 f5 ff ff       	call   c00134f3 <Virt::allocateKernelVirtualPages(int)>
c0013f5b:	83 c4 10             	add    esp,0x10
c0013f5e:	89 c2                	mov    edx,eax
c0013f60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f64:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013f67:	83 ec 0c             	sub    esp,0xc
c0013f6a:	6a 03                	push   0x3
c0013f6c:	6a 01                	push   0x1
c0013f6e:	52                   	push   edx
c0013f6f:	50                   	push   eax
c0013f70:	53                   	push   ebx
c0013f71:	e8 50 fe ff ff       	call   c0013dc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013f76:	83 c4 20             	add    esp,0x20
c0013f79:	89 c2                	mov    edx,eax
c0013f7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f7f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013f82:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013f8a:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0013f92:	7f 1d                	jg     c0013fb1 <VAS::VAS(bool)+0xa1>
c0013f94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f98:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013f9b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013f9f:	c1 e2 02             	shl    edx,0x2
c0013fa2:	01 d0                	add    eax,edx
c0013fa4:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013faa:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013faf:	eb d9                	jmp    c0013f8a <VAS::VAS(bool)+0x7a>
c0013fb1:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0013fb9:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0013fc1:	7f 59                	jg     c001401c <VAS::VAS(bool)+0x10c>
c0013fc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013fc7:	2d 00 02 00 00       	sub    eax,0x200
c0013fcc:	c1 e0 0c             	shl    eax,0xc
c0013fcf:	89 c2                	mov    edx,eax
c0013fd1:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c0013fd6:	89 d1                	mov    ecx,edx
c0013fd8:	09 c1                	or     ecx,eax
c0013fda:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013fde:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013fe1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013fe5:	c1 e2 02             	shl    edx,0x2
c0013fe8:	01 d0                	add    eax,edx
c0013fea:	83 c9 05             	or     ecx,0x5
c0013fed:	89 ca                	mov    edx,ecx
c0013fef:	89 10                	mov    DWORD PTR [eax],edx
c0013ff1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ff5:	2d 40 03 00 00       	sub    eax,0x340
c0013ffa:	83 f8 7f             	cmp    eax,0x7f
c0013ffd:	77 16                	ja     c0014015 <VAS::VAS(bool)+0x105>
c0013fff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014003:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014006:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001400a:	c1 e2 02             	shl    edx,0x2
c001400d:	01 d0                	add    eax,edx
c001400f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0014015:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001401a:	eb 9d                	jmp    c0013fb9 <VAS::VAS(bool)+0xa9>
c001401c:	8b 15 28 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032428
c0014022:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014026:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014029:	05 20 0c 00 00       	add    eax,0xc20
c001402e:	81 ca 03 40 00 00    	or     edx,0x4003
c0014034:	89 10                	mov    DWORD PTR [eax],edx
c0014036:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001403a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001403d:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c0014042:	09 c2                	or     edx,eax
c0014044:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014048:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001404b:	05 fc 0f 00 00       	add    eax,0xffc
c0014050:	83 ca 03             	or     edx,0x3
c0014053:	89 10                	mov    DWORD PTR [eax],edx
c0014055:	a1 08 21 03 c0       	mov    eax,ds:0xc0032108
c001405a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0014060:	83 ec 0c             	sub    esp,0xc
c0014063:	50                   	push   eax
c0014064:	e8 c3 60 ff ff       	call   c000a12c <Device::getName()>
c0014069:	83 c4 10             	add    esp,0x10
c001406c:	83 ec 08             	sub    esp,0x8
c001406f:	68 57 96 02 c0       	push   0xc0029657
c0014074:	50                   	push   eax
c0014075:	e8 06 c7 fe ff       	call   c0000780 <strcmp>
c001407a:	83 c4 10             	add    esp,0x10
c001407d:	85 c0                	test   eax,eax
c001407f:	0f 94 c0             	sete   al
c0014082:	0f b6 c0             	movzx  eax,al
c0014085:	85 c0                	test   eax,eax
c0014087:	74 68                	je     c00140f1 <VAS::VAS(bool)+0x1e1>
c0014089:	fa                   	cli    
c001408a:	a1 08 21 03 c0       	mov    eax,ds:0xc0032108
c001408f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0014095:	05 68 09 00 00       	add    eax,0x968
c001409a:	83 ec 0c             	sub    esp,0xc
c001409d:	50                   	push   eax
c001409e:	e8 93 ae ff ff       	call   c000ef36 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00140a3:	83 c4 10             	add    esp,0x10
c00140a6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00140ab:	89 c3                	mov    ebx,eax
c00140ad:	a1 08 21 03 c0       	mov    eax,ds:0xc0032108
c00140b2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00140b8:	05 68 09 00 00       	add    eax,0x968
c00140bd:	83 ec 0c             	sub    esp,0xc
c00140c0:	50                   	push   eax
c00140c1:	e8 70 ae ff ff       	call   c000ef36 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00140c6:	83 c4 10             	add    esp,0x10
c00140c9:	83 ec 08             	sub    esp,0x8
c00140cc:	50                   	push   eax
c00140cd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00140d1:	e8 fc f6 ff ff       	call   c00137d2 <VAS::getPageTableEntry(unsigned long)>
c00140d6:	83 c4 10             	add    esp,0x10
c00140d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00140db:	25 00 f0 ff ff       	and    eax,0xfffff000
c00140e0:	6a 11                	push   0x11
c00140e2:	53                   	push   ebx
c00140e3:	50                   	push   eax
c00140e4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00140e8:	e8 df fa ff ff       	call   c0013bcc <VAS::mapPage(unsigned long, unsigned long, int)>
c00140ed:	83 c4 10             	add    esp,0x10
c00140f0:	fb                   	sti    
c00140f1:	90                   	nop
c00140f2:	83 c4 28             	add    esp,0x28
c00140f5:	5b                   	pop    ebx
c00140f6:	c3                   	ret    
c00140f7:	90                   	nop

c00140f8 <VAS::evict(unsigned long)>:
c00140f8:	55                   	push   ebp
c00140f9:	57                   	push   edi
c00140fa:	56                   	push   esi
c00140fb:	53                   	push   ebx
c00140fc:	83 ec 24             	sub    esp,0x24
c00140ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0014103:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0014107:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001410b:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0014110:	50                   	push   eax
c0014111:	68 65 96 02 c0       	push   0xc0029665
c0014116:	e8 4b 2e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001411b:	e8 28 f5 ff ff       	call   c0013648 <Virt::allocateSwapfilePage()>
c0014120:	83 c4 10             	add    esp,0x10
c0014123:	89 c7                	mov    edi,eax
c0014125:	a1 4c c5 02 c0       	mov    eax,ds:0xc002c54c
c001412a:	85 c0                	test   eax,eax
c001412c:	7e 40                	jle    c001416e <VAS::evict(unsigned long)+0x76>
c001412e:	89 ee                	mov    esi,ebp
c0014130:	31 db                	xor    ebx,ebx
c0014132:	83 ec 0c             	sub    esp,0xc
c0014135:	57                   	push   edi
c0014136:	e8 f7 f4 ff ff       	call   c0013632 <Virt::swapIDToSector(unsigned long)>
c001413b:	31 d2                	xor    edx,edx
c001413d:	89 34 24             	mov    DWORD PTR [esp],esi
c0014140:	81 c6 00 02 00 00    	add    esi,0x200
c0014146:	6a 01                	push   0x1
c0014148:	52                   	push   edx
c0014149:	01 d8                	add    eax,ebx
c001414b:	83 c3 01             	add    ebx,0x1
c001414e:	50                   	push   eax
c001414f:	0f be 05 58 c5 02 c0 	movsx  eax,BYTE PTR ds:0xc002c558
c0014156:	8b 04 85 dc 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce624]
c001415d:	50                   	push   eax
c001415e:	e8 f7 6d ff ff       	call   c000af5a <LogicalDisk::write(unsigned long long, int, void*)>
c0014163:	83 c4 20             	add    esp,0x20
c0014166:	39 1d 4c c5 02 c0    	cmp    DWORD PTR ds:0xc002c54c,ebx
c001416c:	7f c4                	jg     c0014132 <VAS::evict(unsigned long)+0x3a>
c001416e:	c1 e7 0c             	shl    edi,0xc
c0014171:	83 ec 08             	sub    esp,0x8
c0014174:	55                   	push   ebp
c0014175:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014179:	50                   	push   eax
c001417a:	e8 53 f6 ff ff       	call   c00137d2 <VAS::getPageTableEntry(unsigned long)>
c001417f:	8b 10                	mov    edx,DWORD PTR [eax]
c0014181:	89 d3                	mov    ebx,edx
c0014183:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0014189:	09 d7                	or     edi,edx
c001418b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0014191:	89 38                	mov    DWORD PTR [eax],edi
c0014193:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014196:	8b 15 88 22 03 c0    	mov    edx,DWORD PTR ds:0xc0032288
c001419c:	83 c2 01             	add    edx,0x1
c001419f:	89 15 88 22 03 c0    	mov    DWORD PTR ds:0xc0032288,edx
c00141a5:	e8 93 bf ff ff       	call   c001013d <Phys::freePage(unsigned long)>
c00141aa:	0f 20 d8             	mov    eax,cr3
c00141ad:	0f 22 d8             	mov    cr3,eax
c00141b0:	8b 0d 88 22 03 c0    	mov    ecx,DWORD PTR ds:0xc0032288
c00141b6:	51                   	push   ecx
c00141b7:	55                   	push   ebp
c00141b8:	53                   	push   ebx
c00141b9:	68 08 94 02 c0       	push   0xc0029408
c00141be:	e8 a3 2d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00141c3:	a1 84 22 03 c0       	mov    eax,ds:0xc0032284
c00141c8:	83 c4 18             	add    esp,0x18
c00141cb:	50                   	push   eax
c00141cc:	68 7a 96 02 c0       	push   0xc002967a
c00141d1:	8d 50 01             	lea    edx,[eax+0x1]
c00141d4:	89 15 84 22 03 c0    	mov    DWORD PTR ds:0xc0032284,edx
c00141da:	e8 87 2d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00141df:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c00141e4:	c7 44 24 40 8c 96 02 c0 	mov    DWORD PTR [esp+0x40],0xc002968c
c00141ec:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00141f0:	83 c4 2c             	add    esp,0x2c
c00141f3:	5b                   	pop    ebx
c00141f4:	5e                   	pop    esi
c00141f5:	5f                   	pop    edi
c00141f6:	5d                   	pop    ebp
c00141f7:	e9 6a 2d ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>

c00141fc <VAS::canLockPage(unsigned long)>:
c00141fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014200:	50                   	push   eax
c0014201:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014205:	52                   	push   edx
c0014206:	e8 c7 f5 ff ff       	call   c00137d2 <VAS::getPageTableEntry(unsigned long)>
c001420b:	59                   	pop    ecx
c001420c:	5a                   	pop    edx
c001420d:	8b 00                	mov    eax,DWORD PTR [eax]
c001420f:	c1 e8 0b             	shr    eax,0xb
c0014212:	83 e0 01             	and    eax,0x1
c0014215:	c3                   	ret    

c0014216 <VAS::unlockPage(unsigned long)>:
c0014216:	83 ec 0c             	sub    esp,0xc
c0014219:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001421d:	50                   	push   eax
c001421e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014222:	52                   	push   edx
c0014223:	e8 aa f5 ff ff       	call   c00137d2 <VAS::getPageTableEntry(unsigned long)>
c0014228:	59                   	pop    ecx
c0014229:	5a                   	pop    edx
c001422a:	8b 10                	mov    edx,DWORD PTR [eax]
c001422c:	f6 c6 08             	test   dh,0x8
c001422f:	75 09                	jne    c001423a <VAS::unlockPage(unsigned long)+0x24>
c0014231:	80 ce 08             	or     dh,0x8
c0014234:	89 10                	mov    DWORD PTR [eax],edx
c0014236:	83 c4 0c             	add    esp,0xc
c0014239:	c3                   	ret    
c001423a:	c7 44 24 10 3c 94 02 c0 	mov    DWORD PTR [esp+0x10],0xc002943c
c0014242:	83 c4 0c             	add    esp,0xc
c0014245:	e9 62 bd ff ff       	jmp    c000ffac <KePanic(char const*)>

c001424a <VAS::canLockPages(unsigned long, int)>:
c001424a:	55                   	push   ebp
c001424b:	57                   	push   edi
c001424c:	56                   	push   esi
c001424d:	53                   	push   ebx
c001424e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014252:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0014256:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001425a:	85 ff                	test   edi,edi
c001425c:	7e 23                	jle    c0014281 <VAS::canLockPages(unsigned long, int)+0x37>
c001425e:	31 f6                	xor    esi,esi
c0014260:	eb 0d                	jmp    c001426f <VAS::canLockPages(unsigned long, int)+0x25>
c0014262:	83 c6 01             	add    esi,0x1
c0014265:	81 c3 00 10 00 00    	add    ebx,0x1000
c001426b:	39 f7                	cmp    edi,esi
c001426d:	74 0d                	je     c001427c <VAS::canLockPages(unsigned long, int)+0x32>
c001426f:	53                   	push   ebx
c0014270:	55                   	push   ebp
c0014271:	e8 86 ff ff ff       	call   c00141fc <VAS::canLockPage(unsigned long)>
c0014276:	5a                   	pop    edx
c0014277:	59                   	pop    ecx
c0014278:	84 c0                	test   al,al
c001427a:	75 e6                	jne    c0014262 <VAS::canLockPages(unsigned long, int)+0x18>
c001427c:	5b                   	pop    ebx
c001427d:	5e                   	pop    esi
c001427e:	5f                   	pop    edi
c001427f:	5d                   	pop    ebp
c0014280:	c3                   	ret    
c0014281:	b0 01                	mov    al,0x1
c0014283:	eb f7                	jmp    c001427c <VAS::canLockPages(unsigned long, int)+0x32>
c0014285:	90                   	nop

c0014286 <VAS::unlockPages(unsigned long, int)>:
c0014286:	55                   	push   ebp
c0014287:	57                   	push   edi
c0014288:	56                   	push   esi
c0014289:	53                   	push   ebx
c001428a:	83 ec 0c             	sub    esp,0xc
c001428d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014291:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0014295:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014299:	85 ff                	test   edi,edi
c001429b:	7e 1c                	jle    c00142b9 <VAS::unlockPages(unsigned long, int)+0x33>
c001429d:	31 f6                	xor    esi,esi
c001429f:	83 ec 08             	sub    esp,0x8
c00142a2:	83 c6 01             	add    esi,0x1
c00142a5:	53                   	push   ebx
c00142a6:	81 c3 00 10 00 00    	add    ebx,0x1000
c00142ac:	55                   	push   ebp
c00142ad:	e8 64 ff ff ff       	call   c0014216 <VAS::unlockPage(unsigned long)>
c00142b2:	83 c4 10             	add    esp,0x10
c00142b5:	39 f7                	cmp    edi,esi
c00142b7:	75 e6                	jne    c001429f <VAS::unlockPages(unsigned long, int)+0x19>
c00142b9:	83 c4 0c             	add    esp,0xc
c00142bc:	5b                   	pop    ebx
c00142bd:	5e                   	pop    esi
c00142be:	5f                   	pop    edi
c00142bf:	5d                   	pop    ebp
c00142c0:	c3                   	ret    
c00142c1:	90                   	nop

c00142c2 <VAS::tryLoadBackOffDisk(unsigned long)>:
c00142c2:	55                   	push   ebp
c00142c3:	57                   	push   edi
c00142c4:	56                   	push   esi
c00142c5:	53                   	push   ebx
c00142c6:	81 ec 1c 10 00 00    	sub    esp,0x101c
c00142cc:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c00142d3:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c00142d9:	77 6f                	ja     c001434a <VAS::tryLoadBackOffDisk(unsigned long)+0x88>
c00142db:	83 ec 08             	sub    esp,0x8
c00142de:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00142e4:	53                   	push   ebx
c00142e5:	8b bc 24 3c 10 00 00 	mov    edi,DWORD PTR [esp+0x103c]
c00142ec:	57                   	push   edi
c00142ed:	e8 e0 f4 ff ff       	call   c00137d2 <VAS::getPageTableEntry(unsigned long)>
c00142f2:	83 c4 10             	add    esp,0x10
c00142f5:	85 c0                	test   eax,eax
c00142f7:	89 c5                	mov    ebp,eax
c00142f9:	0f 95 c0             	setne  al
c00142fc:	85 db                	test   ebx,ebx
c00142fe:	0f 95 c2             	setne  dl
c0014301:	21 d0                	and    eax,edx
c0014303:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0014307:	a8 01                	test   al,0x1
c0014309:	75 0f                	jne    c001431a <VAS::tryLoadBackOffDisk(unsigned long)+0x58>
c001430b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001430f:	81 c4 1c 10 00 00    	add    esp,0x101c
c0014315:	5b                   	pop    ebx
c0014316:	5e                   	pop    esi
c0014317:	5f                   	pop    edi
c0014318:	5d                   	pop    ebp
c0014319:	c3                   	ret    
c001431a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001431d:	f6 c4 02             	test   ah,0x2
c0014320:	75 3d                	jne    c001435f <VAS::tryLoadBackOffDisk(unsigned long)+0x9d>
c0014322:	89 c1                	mov    ecx,eax
c0014324:	81 e1 01 04 00 00    	and    ecx,0x401
c001432a:	81 f9 00 04 00 00    	cmp    ecx,0x400
c0014330:	0f 84 91 00 00 00    	je     c00143c7 <VAS::tryLoadBackOffDisk(unsigned long)+0x105>
c0014336:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001433b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001433f:	81 c4 1c 10 00 00    	add    esp,0x101c
c0014345:	5b                   	pop    ebx
c0014346:	5e                   	pop    esi
c0014347:	5f                   	pop    edi
c0014348:	5d                   	pop    ebp
c0014349:	c3                   	ret    
c001434a:	83 ec 0c             	sub    esp,0xc
c001434d:	68 a1 96 02 c0       	push   0xc00296a1
c0014352:	e8 55 bc ff ff       	call   c000ffac <KePanic(char const*)>
c0014357:	83 c4 10             	add    esp,0x10
c001435a:	e9 7c ff ff ff       	jmp    c00142db <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c001435f:	83 ec 0c             	sub    esp,0xc
c0014362:	68 6c 94 02 c0       	push   0xc002946c
c0014367:	e8 fa 2b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001436c:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c001436f:	e8 32 be ff ff       	call   c00101a6 <Phys::allocatePage()>
c0014374:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001437a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001437e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014381:	83 c8 01             	or     eax,0x1
c0014384:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014387:	0f 20 d8             	mov    eax,cr3
c001438a:	0f 22 d8             	mov    cr3,eax
c001438d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0014391:	b8 00 10 00 00       	mov    eax,0x1000
c0014396:	89 d7                	mov    edi,edx
c0014398:	89 c1                	mov    ecx,eax
c001439a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001439c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001439f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00143a3:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c00143a9:	09 f1                	or     ecx,esi
c00143ab:	83 c9 02             	or     ecx,0x2
c00143ae:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00143b1:	0f 20 d9             	mov    ecx,cr3
c00143b4:	0f 22 d9             	mov    cr3,ecx
c00143b7:	89 d6                	mov    esi,edx
c00143b9:	89 df                	mov    edi,ebx
c00143bb:	89 c1                	mov    ecx,eax
c00143bd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00143bf:	83 c4 10             	add    esp,0x10
c00143c2:	e9 44 ff ff ff       	jmp    c001430b <VAS::tryLoadBackOffDisk(unsigned long)+0x49>
c00143c7:	c1 e8 0c             	shr    eax,0xc
c00143ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00143ce:	e8 d3 bd ff ff       	call   c00101a6 <Phys::allocatePage()>
c00143d3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00143d6:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00143dc:	09 c1                	or     ecx,eax
c00143de:	81 c9 01 08 00 00    	or     ecx,0x801
c00143e4:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00143e7:	a1 4c c5 02 c0       	mov    eax,ds:0xc002c54c
c00143ec:	85 c0                	test   eax,eax
c00143ee:	7e 51                	jle    c0014441 <VAS::tryLoadBackOffDisk(unsigned long)+0x17f>
c00143f0:	89 dd                	mov    ebp,ebx
c00143f2:	31 f6                	xor    esi,esi
c00143f4:	83 ec 08             	sub    esp,0x8
c00143f7:	55                   	push   ebp
c00143f8:	68 b3 96 02 c0       	push   0xc00296b3
c00143fd:	e8 64 2b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014402:	59                   	pop    ecx
c0014403:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014407:	57                   	push   edi
c0014408:	e8 25 f2 ff ff       	call   c0013632 <Virt::swapIDToSector(unsigned long)>
c001440d:	31 d2                	xor    edx,edx
c001440f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014412:	81 c5 00 02 00 00    	add    ebp,0x200
c0014418:	6a 01                	push   0x1
c001441a:	52                   	push   edx
c001441b:	8d 3c 06             	lea    edi,[esi+eax*1]
c001441e:	0f be 05 58 c5 02 c0 	movsx  eax,BYTE PTR ds:0xc002c558
c0014425:	83 c6 01             	add    esi,0x1
c0014428:	57                   	push   edi
c0014429:	8b 04 85 dc 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce624]
c0014430:	50                   	push   eax
c0014431:	e8 b8 6a ff ff       	call   c000aeee <LogicalDisk::read(unsigned long long, int, void*)>
c0014436:	83 c4 20             	add    esp,0x20
c0014439:	39 35 4c c5 02 c0    	cmp    DWORD PTR ds:0xc002c54c,esi
c001443f:	7f b3                	jg     c00143f4 <VAS::tryLoadBackOffDisk(unsigned long)+0x132>
c0014441:	a1 88 22 03 c0       	mov    eax,ds:0xc0032288
c0014446:	83 ec 04             	sub    esp,0x4
c0014449:	83 e8 01             	sub    eax,0x1
c001444c:	50                   	push   eax
c001444d:	53                   	push   ebx
c001444e:	68 cc 96 02 c0       	push   0xc00296cc
c0014453:	a3 88 22 03 c0       	mov    ds:0xc0032288,eax
c0014458:	e8 09 2b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001445d:	58                   	pop    eax
c001445e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014462:	52                   	push   edx
c0014463:	e8 a7 f1 ff ff       	call   c001360f <Virt::freeSwapfilePage(unsigned long)>
c0014468:	0f 20 d8             	mov    eax,cr3
c001446b:	0f 22 d8             	mov    cr3,eax
c001446e:	83 c4 10             	add    esp,0x10
c0014471:	e9 95 fe ff ff       	jmp    c001430b <VAS::tryLoadBackOffDisk(unsigned long)+0x49>

c0014476 <VAS::lockPage(unsigned long)>:
c0014476:	56                   	push   esi
c0014477:	53                   	push   ebx
c0014478:	83 ec 04             	sub    esp,0x4
c001447b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001447f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014483:	50                   	push   eax
c0014484:	56                   	push   esi
c0014485:	e8 48 f3 ff ff       	call   c00137d2 <VAS::getPageTableEntry(unsigned long)>
c001448a:	5a                   	pop    edx
c001448b:	59                   	pop    ecx
c001448c:	89 c3                	mov    ebx,eax
c001448e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014490:	a8 01                	test   al,0x1
c0014492:	74 10                	je     c00144a4 <VAS::lockPage(unsigned long)+0x2e>
c0014494:	f6 c4 08             	test   ah,0x8
c0014497:	74 28                	je     c00144c1 <VAS::lockPage(unsigned long)+0x4b>
c0014499:	80 e4 f7             	and    ah,0xf7
c001449c:	89 03                	mov    DWORD PTR [ebx],eax
c001449e:	83 c4 04             	add    esp,0x4
c00144a1:	5b                   	pop    ebx
c00144a2:	5e                   	pop    esi
c00144a3:	c3                   	ret    
c00144a4:	83 ec 08             	sub    esp,0x8
c00144a7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00144ac:	50                   	push   eax
c00144ad:	56                   	push   esi
c00144ae:	e8 0f fe ff ff       	call   c00142c2 <VAS::tryLoadBackOffDisk(unsigned long)>
c00144b3:	83 c4 10             	add    esp,0x10
c00144b6:	84 c0                	test   al,al
c00144b8:	74 19                	je     c00144d3 <VAS::lockPage(unsigned long)+0x5d>
c00144ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144bc:	f6 c4 08             	test   ah,0x8
c00144bf:	75 d8                	jne    c0014499 <VAS::lockPage(unsigned long)+0x23>
c00144c1:	c7 44 24 10 3c 94 02 c0 	mov    DWORD PTR [esp+0x10],0xc002943c
c00144c9:	83 c4 04             	add    esp,0x4
c00144cc:	5b                   	pop    ebx
c00144cd:	5e                   	pop    esi
c00144ce:	e9 d9 ba ff ff       	jmp    c000ffac <KePanic(char const*)>
c00144d3:	83 ec 0c             	sub    esp,0xc
c00144d6:	68 8c 94 02 c0       	push   0xc002948c
c00144db:	e8 cc ba ff ff       	call   c000ffac <KePanic(char const*)>
c00144e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144e2:	83 c4 10             	add    esp,0x10
c00144e5:	eb ad                	jmp    c0014494 <VAS::lockPage(unsigned long)+0x1e>
c00144e7:	90                   	nop

c00144e8 <VAS::lockPages(unsigned long, int)>:
c00144e8:	55                   	push   ebp
c00144e9:	57                   	push   edi
c00144ea:	56                   	push   esi
c00144eb:	53                   	push   ebx
c00144ec:	83 ec 0c             	sub    esp,0xc
c00144ef:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00144f3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00144f7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00144fb:	85 ff                	test   edi,edi
c00144fd:	7e 1c                	jle    c001451b <VAS::lockPages(unsigned long, int)+0x33>
c00144ff:	31 f6                	xor    esi,esi
c0014501:	83 ec 08             	sub    esp,0x8
c0014504:	83 c6 01             	add    esi,0x1
c0014507:	53                   	push   ebx
c0014508:	81 c3 00 10 00 00    	add    ebx,0x1000
c001450e:	55                   	push   ebp
c001450f:	e8 62 ff ff ff       	call   c0014476 <VAS::lockPage(unsigned long)>
c0014514:	83 c4 10             	add    esp,0x10
c0014517:	39 f7                	cmp    edi,esi
c0014519:	75 e6                	jne    c0014501 <VAS::lockPages(unsigned long, int)+0x19>
c001451b:	83 c4 0c             	add    esp,0xc
c001451e:	5b                   	pop    ebx
c001451f:	5e                   	pop    esi
c0014520:	5f                   	pop    edi
c0014521:	5d                   	pop    ebp
c0014522:	c3                   	ret    
c0014523:	90                   	nop

c0014524 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0014524:	55                   	push   ebp
c0014525:	57                   	push   edi
c0014526:	56                   	push   esi
c0014527:	53                   	push   ebx
c0014528:	83 ec 28             	sub    esp,0x28
c001452b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001452f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014533:	50                   	push   eax
c0014534:	e8 ba ef ff ff       	call   c00134f3 <Virt::allocateKernelVirtualPages(int)>
c0014539:	83 c4 0c             	add    esp,0xc
c001453c:	6a 07                	push   0x7
c001453e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014542:	52                   	push   edx
c0014543:	89 c5                	mov    ebp,eax
c0014545:	53                   	push   ebx
c0014546:	e8 89 f7 ff ff       	call   c0013cd4 <VAS::allocatePages(int, int)>
c001454b:	83 c4 10             	add    esp,0x10
c001454e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014552:	89 c7                	mov    edi,eax
c0014554:	85 c9                	test   ecx,ecx
c0014556:	74 2f                	je     c0014587 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0014558:	31 f6                	xor    esi,esi
c001455a:	e8 47 bc ff ff       	call   c00101a6 <Phys::allocatePage()>
c001455f:	83 c6 01             	add    esi,0x1
c0014562:	6a 03                	push   0x3
c0014564:	55                   	push   ebp
c0014565:	50                   	push   eax
c0014566:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001456a:	53                   	push   ebx
c001456b:	e8 5c f6 ff ff       	call   c0013bcc <VAS::mapPage(unsigned long, unsigned long, int)>
c0014570:	6a 07                	push   0x7
c0014572:	57                   	push   edi
c0014573:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014577:	50                   	push   eax
c0014578:	53                   	push   ebx
c0014579:	e8 4e f6 ff ff       	call   c0013bcc <VAS::mapPage(unsigned long, unsigned long, int)>
c001457e:	83 c4 20             	add    esp,0x20
c0014581:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c0014585:	75 d3                	jne    c001455a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0014587:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001458b:	89 28                	mov    DWORD PTR [eax],ebp
c001458d:	83 c4 1c             	add    esp,0x1c
c0014590:	89 f8                	mov    eax,edi
c0014592:	5b                   	pop    ebx
c0014593:	5e                   	pop    esi
c0014594:	5f                   	pop    edi
c0014595:	5d                   	pop    ebp
c0014596:	c3                   	ret    
c0014597:	90                   	nop

c0014598 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0014598:	53                   	push   ebx
c0014599:	83 ec 14             	sub    esp,0x14
c001459c:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00145a0:	68 bc 94 02 c0       	push   0xc00294bc
c00145a5:	e8 bc 29 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00145aa:	c7 04 24 1c 95 02 c0 	mov    DWORD PTR [esp],0xc002951c
c00145b1:	e8 b0 29 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00145b6:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00145ba:	83 c4 18             	add    esp,0x18
c00145bd:	5b                   	pop    ebx
c00145be:	e9 2e f2 ff ff       	jmp    c00137f1 <Virt::freeKernelVirtualPages(unsigned long)>
c00145c3:	90                   	nop

c00145c4 <VAS::scanForEviction()>:
c00145c4:	57                   	push   edi
c00145c5:	56                   	push   esi
c00145c6:	31 f6                	xor    esi,esi
c00145c8:	53                   	push   ebx
c00145c9:	83 ec 18             	sub    esp,0x18
c00145cc:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c00145d1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00145d5:	50                   	push   eax
c00145d6:	68 98 95 02 c0       	push   0xc0029598
c00145db:	e8 86 29 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00145e0:	c7 04 24 e1 96 02 c0 	mov    DWORD PTR [esp],0xc00296e1
c00145e7:	e8 7a 29 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00145ec:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00145ef:	83 c4 10             	add    esp,0x10
c00145f2:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00145f8:	75 0e                	jne    c0014608 <VAS::scanForEviction()+0x44>
c00145fa:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00145fd:	89 da                	mov    edx,ebx
c00145ff:	c1 ea 16             	shr    edx,0x16
c0014602:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014606:	74 5b                	je     c0014663 <VAS::scanForEviction()+0x9f>
c0014608:	83 ec 08             	sub    esp,0x8
c001460b:	53                   	push   ebx
c001460c:	57                   	push   edi
c001460d:	e8 c0 f1 ff ff       	call   c00137d2 <VAS::getPageTableEntry(unsigned long)>
c0014612:	83 c4 10             	add    esp,0x10
c0014615:	8b 10                	mov    edx,DWORD PTR [eax]
c0014617:	89 d1                	mov    ecx,edx
c0014619:	c1 e9 0c             	shr    ecx,0xc
c001461c:	74 10                	je     c001462e <VAS::scanForEviction()+0x6a>
c001461e:	89 d1                	mov    ecx,edx
c0014620:	81 e1 00 0c 00 00    	and    ecx,0xc00
c0014626:	81 f9 00 0c 00 00    	cmp    ecx,0xc00
c001462c:	74 40                	je     c001466e <VAS::scanForEviction()+0xaa>
c001462e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014634:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c001463a:	76 2d                	jbe    c0014669 <VAS::scanForEviction()+0xa5>
c001463c:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0014643:	83 c6 01             	add    esi,0x1
c0014646:	83 fe 03             	cmp    esi,0x3
c0014649:	74 37                	je     c0014682 <VAS::scanForEviction()+0xbe>
c001464b:	31 db                	xor    ebx,ebx
c001464d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014653:	75 b3                	jne    c0014608 <VAS::scanForEviction()+0x44>
c0014655:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014658:	89 da                	mov    edx,ebx
c001465a:	c1 ea 16             	shr    edx,0x16
c001465d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014661:	75 a5                	jne    c0014608 <VAS::scanForEviction()+0x44>
c0014663:	81 c3 00 00 40 00    	add    ebx,0x400000
c0014669:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c001466c:	eb 84                	jmp    c00145f2 <VAS::scanForEviction()+0x2e>
c001466e:	f6 c2 01             	test   dl,0x1
c0014671:	74 bb                	je     c001462e <VAS::scanForEviction()+0x6a>
c0014673:	f6 c2 20             	test   dl,0x20
c0014676:	74 13                	je     c001468b <VAS::scanForEviction()+0xc7>
c0014678:	83 e2 df             	and    edx,0xffffffdf
c001467b:	89 10                	mov    DWORD PTR [eax],edx
c001467d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0014680:	eb ac                	jmp    c001462e <VAS::scanForEviction()+0x6a>
c0014682:	83 c4 10             	add    esp,0x10
c0014685:	31 c0                	xor    eax,eax
c0014687:	5b                   	pop    ebx
c0014688:	5e                   	pop    esi
c0014689:	5f                   	pop    edi
c001468a:	c3                   	ret    
c001468b:	89 d0                	mov    eax,edx
c001468d:	83 ec 08             	sub    esp,0x8
c0014690:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014695:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014699:	53                   	push   ebx
c001469a:	68 fd 96 02 c0       	push   0xc00296fd
c001469f:	e8 c2 28 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00146a4:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00146a7:	58                   	pop    eax
c00146a8:	5a                   	pop    edx
c00146a9:	51                   	push   ecx
c00146aa:	57                   	push   edi
c00146ab:	e8 48 fa ff ff       	call   c00140f8 <VAS::evict(unsigned long)>
c00146b0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00146b3:	5b                   	pop    ebx
c00146b4:	5e                   	pop    esi
c00146b5:	50                   	push   eax
c00146b6:	68 11 97 02 c0       	push   0xc0029711
c00146bb:	e8 a6 28 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00146c0:	58                   	pop    eax
c00146c1:	5a                   	pop    edx
c00146c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00146c6:	50                   	push   eax
c00146c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00146cb:	68 24 97 02 c0       	push   0xc0029724
c00146d0:	e8 91 28 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00146d5:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00146d8:	81 c1 00 10 00 00    	add    ecx,0x1000
c00146de:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c00146e1:	8b 3d 30 23 03 c0    	mov    edi,DWORD PTR ds:0xc0032330
c00146e7:	5b                   	pop    ebx
c00146e8:	5e                   	pop    esi
c00146e9:	57                   	push   edi
c00146ea:	68 b8 95 02 c0       	push   0xc00295b8
c00146ef:	e8 72 28 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00146f4:	83 c4 10             	add    esp,0x10
c00146f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00146fb:	83 c4 10             	add    esp,0x10
c00146fe:	5b                   	pop    ebx
c00146ff:	5e                   	pop    esi
c0014700:	5f                   	pop    edi
c0014701:	c3                   	ret    

c0014702 <mapVASFirstTime>:
c0014702:	55                   	push   ebp
c0014703:	57                   	push   edi
c0014704:	56                   	push   esi
c0014705:	53                   	push   ebx
c0014706:	83 ec 0c             	sub    esp,0xc
c0014709:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001470e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014711:	83 fa 01             	cmp    edx,0x1
c0014714:	0f 84 cb 00 00 00    	je     c00147e5 <mapVASFirstTime+0xe3>
c001471a:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001471d:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0014722:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0014727:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001472a:	8b b2 b2 05 00 00    	mov    esi,DWORD PTR [edx+0x5b2]
c0014730:	c1 e5 15             	shl    ebp,0x15
c0014733:	29 eb                	sub    ebx,ebp
c0014735:	29 ef                	sub    edi,ebp
c0014737:	e8 6a ba ff ff       	call   c00101a6 <Phys::allocatePage()>
c001473c:	83 ec 0c             	sub    esp,0xc
c001473f:	68 03 04 00 00       	push   0x403
c0014744:	6a 01                	push   0x1
c0014746:	53                   	push   ebx
c0014747:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001474d:	50                   	push   eax
c001474e:	56                   	push   esi
c001474f:	e8 72 f6 ff ff       	call   c0013dc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014754:	83 c4 20             	add    esp,0x20
c0014757:	39 fb                	cmp    ebx,edi
c0014759:	75 dc                	jne    c0014737 <mapVASFirstTime+0x35>
c001475b:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0014760:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0014765:	29 eb                	sub    ebx,ebp
c0014767:	29 ef                	sub    edi,ebp
c0014769:	e8 38 ba ff ff       	call   c00101a6 <Phys::allocatePage()>
c001476e:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0014772:	83 fa 01             	cmp    edx,0x1
c0014775:	19 d2                	sbb    edx,edx
c0014777:	83 ec 0c             	sub    esp,0xc
c001477a:	83 e2 04             	and    edx,0x4
c001477d:	81 c2 03 04 00 00    	add    edx,0x403
c0014783:	52                   	push   edx
c0014784:	6a 01                	push   0x1
c0014786:	53                   	push   ebx
c0014787:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001478d:	50                   	push   eax
c001478e:	56                   	push   esi
c001478f:	e8 32 f6 ff ff       	call   c0013dc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014794:	83 c4 20             	add    esp,0x20
c0014797:	39 df                	cmp    edi,ebx
c0014799:	75 ce                	jne    c0014769 <mapVASFirstTime+0x67>
c001479b:	83 ec 0c             	sub    esp,0xc
c001479e:	bb 7c e0 02 c0       	mov    ebx,0xc002e07c
c00147a3:	6a 04                	push   0x4
c00147a5:	81 eb 00 d0 02 c0    	sub    ebx,0xc002d000
c00147ab:	6a ff                	push   0xffffffff
c00147ad:	c1 eb 0c             	shr    ebx,0xc
c00147b0:	53                   	push   ebx
c00147b1:	68 00 d0 02 c0       	push   0xc002d000
c00147b6:	56                   	push   esi
c00147b7:	e8 b0 f1 ff ff       	call   c001396c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00147bc:	83 c4 14             	add    esp,0x14
c00147bf:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c00147c4:	6a 04                	push   0x4
c00147c6:	6a ff                	push   0xffffffff
c00147c8:	53                   	push   ebx
c00147c9:	68 00 d0 02 c0       	push   0xc002d000
c00147ce:	50                   	push   eax
c00147cf:	e8 98 f1 ff ff       	call   c001396c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00147d4:	0f 20 d8             	mov    eax,cr3
c00147d7:	0f 22 d8             	mov    cr3,eax
c00147da:	83 c4 20             	add    esp,0x20
c00147dd:	83 c4 0c             	add    esp,0xc
c00147e0:	5b                   	pop    ebx
c00147e1:	5e                   	pop    esi
c00147e2:	5f                   	pop    edi
c00147e3:	5d                   	pop    ebp
c00147e4:	c3                   	ret    
c00147e5:	83 ec 0c             	sub    esp,0xc
c00147e8:	68 31 97 02 c0       	push   0xc0029731
c00147ed:	e8 74 27 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00147f2:	83 c4 10             	add    esp,0x10
c00147f5:	83 c4 0c             	add    esp,0xc
c00147f8:	5b                   	pop    ebx
c00147f9:	5e                   	pop    esi
c00147fa:	5f                   	pop    edi
c00147fb:	5d                   	pop    ebp
c00147fc:	c3                   	ret    

c00147fd <SysAlarm(regs*)>:
c00147fd:	53                   	push   ebx
c00147fe:	83 ec 10             	sub    esp,0x10
c0014801:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014805:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014808:	68 4a 97 02 c0       	push   0xc002974a
c001480d:	e8 54 27 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014812:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014815:	83 c4 0c             	add    esp,0xc
c0014818:	31 d2                	xor    edx,edx
c001481a:	52                   	push   edx
c001481b:	50                   	push   eax
c001481c:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0014822:	e8 c5 09 00 00       	call   c00151ec <KeAlarm(ThreadControlBlock*, unsigned long long)>
c0014827:	83 c4 18             	add    esp,0x18
c001482a:	5b                   	pop    ebx
c001482b:	c3                   	ret    

c001482c <SysEject(regs*)>:
c001482c:	83 ec 0c             	sub    esp,0xc
c001482f:	83 ca ff             	or     edx,0xffffffff
c0014832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014836:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014839:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001483e:	83 e9 41             	sub    ecx,0x41
c0014841:	83 f9 19             	cmp    ecx,0x19
c0014844:	77 18                	ja     c001485e <SysEject(regs*)+0x32>
c0014846:	8b 0c 8d e0 1a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffce520]
c001484d:	85 c9                	test   ecx,ecx
c001484f:	74 0d                	je     c001485e <SysEject(regs*)+0x32>
c0014851:	83 ec 0c             	sub    esp,0xc
c0014854:	51                   	push   ecx
c0014855:	e8 2a 66 ff ff       	call   c000ae84 <LogicalDisk::eject()>
c001485a:	83 c4 10             	add    esp,0x10
c001485d:	99                   	cdq    
c001485e:	83 c4 0c             	add    esp,0xc
c0014861:	c3                   	ret    

c0014862 <SysExit(regs*)>:
c0014862:	83 ec 18             	sub    esp,0x18
c0014865:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014869:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001486c:	e8 b7 2a 00 00       	call   c0017328 <KeTerminateCurrentThread(int)>
c0014871:	83 c8 ff             	or     eax,0xffffffff
c0014874:	83 c4 1c             	add    esp,0x1c
c0014877:	89 c2                	mov    edx,eax
c0014879:	c3                   	ret    

c001487a <SysGetCwd(regs*)>:
c001487a:	83 ec 10             	sub    esp,0x10
c001487d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014881:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014884:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014887:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001488c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001488f:	e8 4c 3a ff ff       	call   c00082e0 <Fs::getcwd(Process*, char*, int)>
c0014894:	83 c4 1c             	add    esp,0x1c
c0014897:	99                   	cdq    
c0014898:	c3                   	ret    

c0014899 <SysGetPID(regs*)>:
c0014899:	83 ec 14             	sub    esp,0x14
c001489c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148a1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00148a4:	ff 30                	push   DWORD PTR [eax]
c00148a6:	68 5f 97 02 c0       	push   0xc002975f
c00148ab:	e8 b6 26 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00148b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00148b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00148ba:	83 c4 1c             	add    esp,0x1c
c00148bd:	99                   	cdq    
c00148be:	c3                   	ret    

c00148bf <SysGetRAMData(regs*)>:
c00148bf:	a1 88 22 03 c0       	mov    eax,ds:0xc0032288
c00148c4:	03 05 78 21 03 c0    	add    eax,DWORD PTR ds:0xc0032178
c00148ca:	8b 0d 7c 21 03 c0    	mov    ecx,DWORD PTR ds:0xc003217c
c00148d0:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c00148d6:	99                   	cdq    
c00148d7:	f7 f9                	idiv   ecx
c00148d9:	c1 e0 18             	shl    eax,0x18
c00148dc:	09 c8                	or     eax,ecx
c00148de:	99                   	cdq    
c00148df:	c3                   	ret    

c00148e0 <SysGetVGAPtr(regs*)>:
c00148e0:	55                   	push   ebp
c00148e1:	57                   	push   edi
c00148e2:	56                   	push   esi
c00148e3:	53                   	push   ebx
c00148e4:	83 ec 1c             	sub    esp,0x1c
c00148e7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00148eb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00148ee:	83 f8 ff             	cmp    eax,0xffffffff
c00148f1:	74 23                	je     c0014916 <SysGetVGAPtr(regs*)+0x36>
c00148f3:	83 ec 0c             	sub    esp,0xc
c00148f6:	50                   	push   eax
c00148f7:	e8 e4 24 00 00       	call   c0016de0 <KeProcessFromPID(int)>
c00148fc:	31 d2                	xor    edx,edx
c00148fe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014902:	83 c4 10             	add    esp,0x10
c0014905:	b8 01 00 00 00       	mov    eax,0x1
c001490a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001490f:	75 11                	jne    c0014922 <SysGetVGAPtr(regs*)+0x42>
c0014911:	e9 80 00 00 00       	jmp    c0014996 <SysGetVGAPtr(regs*)+0xb6>
c0014916:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001491b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001491e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014922:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014926:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c001492a:	8b a8 a6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5a6]
c0014930:	74 0c                	je     c001493e <SysGetVGAPtr(regs*)+0x5e>
c0014932:	83 ec 0c             	sub    esp,0xc
c0014935:	55                   	push   ebp
c0014936:	e8 70 dc ff ff       	call   c00125ab <setActiveTerminal(VgaText*)>
c001493b:	83 c4 10             	add    esp,0x10
c001493e:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0014941:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0014946:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0014949:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001494b:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001494e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014951:	89 88 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],ecx
c0014957:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c001495a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001495d:	89 88 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],ecx
c0014963:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014967:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001496a:	0f b6 80 76 02 00 00 	movzx  eax,BYTE PTR [eax+0x276]
c0014971:	c1 e8 07             	shr    eax,0x7
c0014974:	89 81 a8 0f 00 00    	mov    DWORD PTR [ecx+0xfa8],eax
c001497a:	50                   	push   eax
c001497b:	50                   	push   eax
c001497c:	68 6e 97 02 c0       	push   0xc002976e
c0014981:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014984:	05 ac 0f 00 00       	add    eax,0xfac
c0014989:	50                   	push   eax
c001498a:	e8 c1 bc fe ff       	call   c0000650 <strcpy>
c001498f:	83 c4 10             	add    esp,0x10
c0014992:	31 c0                	xor    eax,eax
c0014994:	31 d2                	xor    edx,edx
c0014996:	83 c4 1c             	add    esp,0x1c
c0014999:	5b                   	pop    ebx
c001499a:	5e                   	pop    esi
c001499b:	5f                   	pop    edi
c001499c:	5d                   	pop    ebp
c001499d:	c3                   	ret    
c001499e:	66 90                	xchg   ax,ax

c00149a0 <SysKill(regs*)>:
c00149a0:	53                   	push   ebx
c00149a1:	83 ec 08             	sub    esp,0x8
c00149a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00149a8:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00149ac:	75 16                	jne    c00149c4 <SysKill(regs*)+0x24>
c00149ae:	83 ec 0c             	sub    esp,0xc
c00149b1:	68 78 97 02 c0       	push   0xc0029778
c00149b6:	e8 f1 b5 ff ff       	call   c000ffac <KePanic(char const*)>
c00149bb:	83 c4 10             	add    esp,0x10
c00149be:	e9 89 00 00 00       	jmp    c0014a4c <SysKill(regs*)+0xac>
c00149c3:	90                   	nop
c00149c4:	83 ec 0c             	sub    esp,0xc
c00149c7:	68 4c 23 03 c0       	push   0xc003234c
c00149cc:	e8 2b 20 01 00       	call   c00269fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00149d1:	8d 76 00             	lea    esi,[esi+0x0]
c00149d4:	83 c4 10             	add    esp,0x10
c00149d7:	85 c0                	test   eax,eax
c00149d9:	74 19                	je     c00149f4 <SysKill(regs*)+0x54>
c00149db:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00149de:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00149e1:	39 0a                	cmp    DWORD PTR [edx],ecx
c00149e3:	74 33                	je     c0014a18 <SysKill(regs*)+0x78>
c00149e5:	52                   	push   edx
c00149e6:	52                   	push   edx
c00149e7:	50                   	push   eax
c00149e8:	68 4c 23 03 c0       	push   0xc003234c
c00149ed:	e8 16 25 01 00       	call   c0026f08 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00149f2:	eb e0                	jmp    c00149d4 <SysKill(regs*)+0x34>
c00149f4:	83 ec 0c             	sub    esp,0xc
c00149f7:	68 40 23 03 c0       	push   0xc0032340
c00149fc:	e8 fb 1f 01 00       	call   c00269fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014a01:	8d 76 00             	lea    esi,[esi+0x0]
c0014a04:	83 c4 10             	add    esp,0x10
c0014a07:	85 c0                	test   eax,eax
c0014a09:	74 41                	je     c0014a4c <SysKill(regs*)+0xac>
c0014a0b:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014a0e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014a11:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014a13:	75 27                	jne    c0014a3c <SysKill(regs*)+0x9c>
c0014a15:	8d 76 00             	lea    esi,[esi+0x0]
c0014a18:	51                   	push   ecx
c0014a19:	51                   	push   ecx
c0014a1a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014a1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a22:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a25:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0014a2b:	e8 8b c7 ff ff       	call   c00111bb <KeRaiseSignal(SigHandlerBlock*, int)>
c0014a30:	83 c4 10             	add    esp,0x10
c0014a33:	31 c0                	xor    eax,eax
c0014a35:	31 d2                	xor    edx,edx
c0014a37:	eb 1b                	jmp    c0014a54 <SysKill(regs*)+0xb4>
c0014a39:	8d 76 00             	lea    esi,[esi+0x0]
c0014a3c:	52                   	push   edx
c0014a3d:	52                   	push   edx
c0014a3e:	50                   	push   eax
c0014a3f:	68 40 23 03 c0       	push   0xc0032340
c0014a44:	e8 bf 24 01 00       	call   c0026f08 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014a49:	eb b9                	jmp    c0014a04 <SysKill(regs*)+0x64>
c0014a4b:	90                   	nop
c0014a4c:	83 c8 ff             	or     eax,0xffffffff
c0014a4f:	89 c2                	mov    edx,eax
c0014a51:	8d 76 00             	lea    esi,[esi+0x0]
c0014a54:	83 c4 08             	add    esp,0x8
c0014a57:	5b                   	pop    ebx
c0014a58:	c3                   	ret    

c0014a59 <SysLoadDLL(regs*)>:
c0014a59:	56                   	push   esi
c0014a5a:	31 d2                	xor    edx,edx
c0014a5c:	53                   	push   ebx
c0014a5d:	b8 01 00 00 00       	mov    eax,0x1
c0014a62:	53                   	push   ebx
c0014a63:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a67:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0014a6b:	0f 84 82 00 00 00    	je     c0014af3 <SysLoadDLL(regs*)+0x9a>
c0014a71:	83 ec 0c             	sub    esp,0xc
c0014a74:	68 14 01 00 00       	push   0x114
c0014a79:	e8 da b0 ff ff       	call   c000fb58 <malloc>
c0014a7e:	83 c4 0c             	add    esp,0xc
c0014a81:	89 c3                	mov    ebx,eax
c0014a83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a88:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014a8b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014a8e:	53                   	push   ebx
c0014a8f:	e8 cc 3b ff ff       	call   c0008660 <File::File(char const*, Process*)>
c0014a94:	83 c4 10             	add    esp,0x10
c0014a97:	31 d2                	xor    edx,edx
c0014a99:	85 db                	test   ebx,ebx
c0014a9b:	b8 02 00 00 00       	mov    eax,0x2
c0014aa0:	74 51                	je     c0014af3 <SysLoadDLL(regs*)+0x9a>
c0014aa2:	83 ec 0c             	sub    esp,0xc
c0014aa5:	53                   	push   ebx
c0014aa6:	e8 97 3e ff ff       	call   c0008942 <File::exists()>
c0014aab:	83 c4 10             	add    esp,0x10
c0014aae:	84 c0                	test   al,al
c0014ab0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ab2:	75 11                	jne    c0014ac5 <SysLoadDLL(regs*)+0x6c>
c0014ab4:	83 ec 0c             	sub    esp,0xc
c0014ab7:	53                   	push   ebx
c0014ab8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014abb:	83 c4 10             	add    esp,0x10
c0014abe:	b8 03 00 00 00       	mov    eax,0x3
c0014ac3:	eb 2c                	jmp    c0014af1 <SysLoadDLL(regs*)+0x98>
c0014ac5:	83 ec 0c             	sub    esp,0xc
c0014ac8:	53                   	push   ebx
c0014ac9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014acc:	83 c4 0c             	add    esp,0xc
c0014acf:	6a 00                	push   0x0
c0014ad1:	ff 35 08 21 03 c0    	push   DWORD PTR ds:0xc0032108
c0014ad7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014ada:	e8 d3 16 00 00       	call   c00161b2 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c0014adf:	83 c4 10             	add    esp,0x10
c0014ae2:	31 d2                	xor    edx,edx
c0014ae4:	88 c1                	mov    cl,al
c0014ae6:	31 c0                	xor    eax,eax
c0014ae8:	84 c9                	test   cl,cl
c0014aea:	75 07                	jne    c0014af3 <SysLoadDLL(regs*)+0x9a>
c0014aec:	b8 04 00 00 00       	mov    eax,0x4
c0014af1:	31 d2                	xor    edx,edx
c0014af3:	59                   	pop    ecx
c0014af4:	5b                   	pop    ebx
c0014af5:	5e                   	pop    esi
c0014af6:	c3                   	ret    

c0014af7 <SysPause(regs*)>:
c0014af7:	83 ec 18             	sub    esp,0x18
c0014afa:	6a 08                	push   0x8
c0014afc:	e8 f3 20 00 00       	call   c0016bf4 <blockTask(TaskState)>
c0014b01:	31 c0                	xor    eax,eax
c0014b03:	31 d2                	xor    edx,edx
c0014b05:	83 c4 1c             	add    esp,0x1c
c0014b08:	c3                   	ret    

c0014b09 <SysPthreadCreate(regs*)>:
c0014b09:	83 ec 18             	sub    esp,0x18
c0014b0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b11:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014b14:	e8 b3 1e 00 00       	call   c00169cc <Process::createUserThread()>
c0014b19:	31 c0                	xor    eax,eax
c0014b1b:	31 d2                	xor    edx,edx
c0014b1d:	83 c4 1c             	add    esp,0x1c
c0014b20:	c3                   	ret    

c0014b21 <SysPthreadGetTID(regs*)>:
c0014b21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b26:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014b29:	99                   	cdq    
c0014b2a:	c3                   	ret    

c0014b2b <SysInternalPthreadGetContext(regs*)>:
c0014b2b:	31 c0                	xor    eax,eax
c0014b2d:	31 d2                	xor    edx,edx
c0014b2f:	c3                   	ret    

c0014b30 <SysInternalPthreadGetStartLocation(regs*)>:
c0014b30:	31 c0                	xor    eax,eax
c0014b32:	31 d2                	xor    edx,edx
c0014b34:	c3                   	ret    

c0014b35 <SysPthreadJoin(regs*)>:
c0014b35:	31 c0                	xor    eax,eax
c0014b37:	31 d2                	xor    edx,edx
c0014b39:	c3                   	ret    

c0014b3a <SysPthreadExit(regs*)>:
c0014b3a:	83 ec 18             	sub    esp,0x18
c0014b3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b41:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014b44:	e8 df 27 00 00       	call   c0017328 <KeTerminateCurrentThread(int)>
c0014b49:	83 c8 ff             	or     eax,0xffffffff
c0014b4c:	83 c4 1c             	add    esp,0x1c
c0014b4f:	89 c2                	mov    edx,eax
c0014b51:	c3                   	ret    

c0014b52 <SysRead(regs*)>:
c0014b52:	57                   	push   edi
c0014b53:	56                   	push   esi
c0014b54:	53                   	push   ebx
c0014b55:	83 ec 10             	sub    esp,0x10
c0014b58:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014b5c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014b5f:	83 f8 02             	cmp    eax,0x2
c0014b62:	77 10                	ja     c0014b74 <SysRead(regs*)+0x22>
c0014b64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b69:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b6c:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0014b72:	eb 0e                	jmp    c0014b82 <SysRead(regs*)+0x30>
c0014b74:	83 ec 0c             	sub    esp,0xc
c0014b77:	50                   	push   eax
c0014b78:	e8 18 e8 ff ff       	call   c0013395 <KeGetFileFromDescriptor(int)>
c0014b7d:	83 c4 10             	add    esp,0x10
c0014b80:	89 c1                	mov    ecx,eax
c0014b82:	83 c8 ff             	or     eax,0xffffffff
c0014b85:	85 c9                	test   ecx,ecx
c0014b87:	89 c2                	mov    edx,eax
c0014b89:	74 28                	je     c0014bb3 <SysRead(regs*)+0x61>
c0014b8b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014b93:	83 ec 0c             	sub    esp,0xc
c0014b96:	31 ff                	xor    edi,edi
c0014b98:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014b9c:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014b9e:	52                   	push   edx
c0014b9f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014ba2:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014ba5:	57                   	push   edi
c0014ba6:	56                   	push   esi
c0014ba7:	51                   	push   ecx
c0014ba8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014bab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014baf:	83 c4 20             	add    esp,0x20
c0014bb2:	99                   	cdq    
c0014bb3:	83 c4 10             	add    esp,0x10
c0014bb6:	5b                   	pop    ebx
c0014bb7:	5e                   	pop    esi
c0014bb8:	5f                   	pop    edi
c0014bb9:	c3                   	ret    

c0014bba <SysRegisterSignal(regs*)>:
c0014bba:	83 ec 18             	sub    esp,0x18
c0014bbd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bc1:	6a 00                	push   0x0
c0014bc3:	6a 00                	push   0x0
c0014bc5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014bc8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014bcb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014bd0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014bd3:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0014bd9:	e8 a7 c5 ff ff       	call   c0011185 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014bde:	83 c4 2c             	add    esp,0x2c
c0014be1:	99                   	cdq    
c0014be2:	c3                   	ret    

c0014be3 <SysRegistryGetTypeFromPath(regs*)>:
c0014be3:	53                   	push   ebx
c0014be4:	81 ec 40 01 00 00    	sub    esp,0x140
c0014bea:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014bf1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014bf4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014bf7:	e8 b3 97 ff ff       	call   c000e3af <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014bfc:	83 c4 10             	add    esp,0x10
c0014bff:	85 c0                	test   eax,eax
c0014c01:	89 c1                	mov    ecx,eax
c0014c03:	74 15                	je     c0014c1a <SysRegistryGetTypeFromPath(regs*)+0x37>
c0014c05:	50                   	push   eax
c0014c06:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014c0a:	50                   	push   eax
c0014c0b:	51                   	push   ecx
c0014c0c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014c0f:	e8 80 93 ff ff       	call   c000df94 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014c14:	83 c4 10             	add    esp,0x10
c0014c17:	99                   	cdq    
c0014c18:	eb 05                	jmp    c0014c1f <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0014c1a:	83 c8 ff             	or     eax,0xffffffff
c0014c1d:	89 c2                	mov    edx,eax
c0014c1f:	81 c4 38 01 00 00    	add    esp,0x138
c0014c25:	5b                   	pop    ebx
c0014c26:	c3                   	ret    

c0014c27 <SysRegistryReadExtent(regs*)>:
c0014c27:	83 ec 1c             	sub    esp,0x1c
c0014c2a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014c2e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014c31:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014c34:	85 c0                	test   eax,eax
c0014c36:	79 1f                	jns    c0014c57 <SysRegistryReadExtent(regs*)+0x30>
c0014c38:	52                   	push   edx
c0014c39:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014c3e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014c42:	52                   	push   edx
c0014c43:	50                   	push   eax
c0014c44:	51                   	push   ecx
c0014c45:	e8 3c 92 ff ff       	call   c000de86 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014c4a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c4e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014c52:	83 c4 10             	add    esp,0x10
c0014c55:	eb 14                	jmp    c0014c6b <SysRegistryReadExtent(regs*)+0x44>
c0014c57:	83 ec 04             	sub    esp,0x4
c0014c5a:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014c5d:	50                   	push   eax
c0014c5e:	51                   	push   ecx
c0014c5f:	e8 c0 8c ff ff       	call   c000d924 <CmGetString(Reghive_Tag*, int, char*)>
c0014c64:	83 c4 10             	add    esp,0x10
c0014c67:	31 c0                	xor    eax,eax
c0014c69:	31 d2                	xor    edx,edx
c0014c6b:	83 c4 1c             	add    esp,0x1c
c0014c6e:	c3                   	ret    

c0014c6f <SysRegistryPathToExtentLookup(regs*)>:
c0014c6f:	83 ec 14             	sub    esp,0x14
c0014c72:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c76:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014c79:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014c7c:	e8 2e 97 ff ff       	call   c000e3af <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014c81:	83 c4 1c             	add    esp,0x1c
c0014c84:	99                   	cdq    
c0014c85:	c3                   	ret    

c0014c86 <SysRegistryEnterDirectory(regs*)>:
c0014c86:	83 ec 14             	sub    esp,0x14
c0014c89:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c8d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014c90:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014c93:	e8 03 8d ff ff       	call   c000d99b <CmEnterDirectory(Reghive_Tag*, int)>
c0014c98:	83 c4 1c             	add    esp,0x1c
c0014c9b:	99                   	cdq    
c0014c9c:	c3                   	ret    

c0014c9d <SysRegistryGetNext(regs*)>:
c0014c9d:	83 ec 14             	sub    esp,0x14
c0014ca0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ca4:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014ca7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014caa:	e8 2b 8d ff ff       	call   c000d9da <CmGetNext(Reghive_Tag*, int)>
c0014caf:	83 c4 1c             	add    esp,0x1c
c0014cb2:	99                   	cdq    
c0014cb3:	c3                   	ret    

c0014cb4 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0014cb4:	57                   	push   edi
c0014cb5:	56                   	push   esi
c0014cb6:	53                   	push   ebx
c0014cb7:	81 ec 34 01 00 00    	sub    esp,0x134
c0014cbd:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014cc4:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014cc8:	57                   	push   edi
c0014cc9:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014ccc:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014ccf:	e8 c0 92 ff ff       	call   c000df94 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014cd4:	89 c3                	mov    ebx,eax
c0014cd6:	58                   	pop    eax
c0014cd7:	5a                   	pop    edx
c0014cd8:	57                   	push   edi
c0014cd9:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014cdc:	e8 6f b9 fe ff       	call   c0000650 <strcpy>
c0014ce1:	81 c4 40 01 00 00    	add    esp,0x140
c0014ce7:	89 d8                	mov    eax,ebx
c0014ce9:	5b                   	pop    ebx
c0014cea:	99                   	cdq    
c0014ceb:	5e                   	pop    esi
c0014cec:	5f                   	pop    edi
c0014ced:	c3                   	ret    

c0014cee <SysRegistryOpen(regs*)>:
c0014cee:	83 ec 18             	sub    esp,0x18
c0014cf1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014cf5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014cf8:	e8 b7 8a ff ff       	call   c000d7b4 <CmOpen(char const*)>
c0014cfd:	83 c4 1c             	add    esp,0x1c
c0014d00:	99                   	cdq    
c0014d01:	c3                   	ret    

c0014d02 <SysRegistryClose(regs*)>:
c0014d02:	83 ec 18             	sub    esp,0x18
c0014d05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d09:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014d0c:	e8 c1 8b ff ff       	call   c000d8d2 <CmClose(Reghive_Tag*)>
c0014d11:	31 c0                	xor    eax,eax
c0014d13:	31 d2                	xor    edx,edx
c0014d15:	83 c4 1c             	add    esp,0x1c
c0014d18:	c3                   	ret    

c0014d19 <SysRegistryEasyReadString(regs*)>:
c0014d19:	57                   	push   edi
c0014d1a:	56                   	push   esi
c0014d1b:	53                   	push   ebx
c0014d1c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014d20:	83 ec 0c             	sub    esp,0xc
c0014d23:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014d26:	e8 89 8a ff ff       	call   c000d7b4 <CmOpen(char const*)>
c0014d2b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014d2e:	5a                   	pop    edx
c0014d2f:	59                   	pop    ecx
c0014d30:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014d33:	89 c3                	mov    ebx,eax
c0014d35:	50                   	push   eax
c0014d36:	e8 74 96 ff ff       	call   c000e3af <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014d3b:	83 c4 10             	add    esp,0x10
c0014d3e:	89 c1                	mov    ecx,eax
c0014d40:	b8 01 00 00 00       	mov    eax,0x1
c0014d45:	85 c9                	test   ecx,ecx
c0014d47:	7e 16                	jle    c0014d5f <SysRegistryEasyReadString(regs*)+0x46>
c0014d49:	50                   	push   eax
c0014d4a:	57                   	push   edi
c0014d4b:	51                   	push   ecx
c0014d4c:	53                   	push   ebx
c0014d4d:	e8 d2 8b ff ff       	call   c000d924 <CmGetString(Reghive_Tag*, int, char*)>
c0014d52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d55:	e8 78 8b ff ff       	call   c000d8d2 <CmClose(Reghive_Tag*)>
c0014d5a:	83 c4 10             	add    esp,0x10
c0014d5d:	31 c0                	xor    eax,eax
c0014d5f:	5b                   	pop    ebx
c0014d60:	31 d2                	xor    edx,edx
c0014d62:	5e                   	pop    esi
c0014d63:	5f                   	pop    edi
c0014d64:	c3                   	ret    

c0014d65 <SysRegistryEasyReadInteger(regs*)>:
c0014d65:	56                   	push   esi
c0014d66:	53                   	push   ebx
c0014d67:	83 ec 10             	sub    esp,0x10
c0014d6a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014d6e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014d71:	e8 3e 8a ff ff       	call   c000d7b4 <CmOpen(char const*)>
c0014d76:	5a                   	pop    edx
c0014d77:	59                   	pop    ecx
c0014d78:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014d7b:	89 c3                	mov    ebx,eax
c0014d7d:	50                   	push   eax
c0014d7e:	e8 2c 96 ff ff       	call   c000e3af <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014d83:	83 c4 10             	add    esp,0x10
c0014d86:	89 c1                	mov    ecx,eax
c0014d88:	b8 01 00 00 00       	mov    eax,0x1
c0014d8d:	85 c9                	test   ecx,ecx
c0014d8f:	7e 18                	jle    c0014da9 <SysRegistryEasyReadInteger(regs*)+0x44>
c0014d91:	50                   	push   eax
c0014d92:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014d95:	51                   	push   ecx
c0014d96:	53                   	push   ebx
c0014d97:	e8 ea 90 ff ff       	call   c000de86 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014d9c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d9f:	e8 2e 8b ff ff       	call   c000d8d2 <CmClose(Reghive_Tag*)>
c0014da4:	83 c4 10             	add    esp,0x10
c0014da7:	31 c0                	xor    eax,eax
c0014da9:	59                   	pop    ecx
c0014daa:	31 d2                	xor    edx,edx
c0014dac:	5b                   	pop    ebx
c0014dad:	5e                   	pop    esi
c0014dae:	c3                   	ret    

c0014daf <SysSbrk(regs*)>:
c0014daf:	56                   	push   esi
c0014db0:	53                   	push   ebx
c0014db1:	50                   	push   eax
c0014db2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014db7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014dbb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014dbe:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014dc1:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c0014dc7:	85 db                	test   ebx,ebx
c0014dc9:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014dcc:	74 02                	je     c0014dd0 <SysSbrk(regs*)+0x21>
c0014dce:	79 06                	jns    c0014dd6 <SysSbrk(regs*)+0x27>
c0014dd0:	89 f0                	mov    eax,esi
c0014dd2:	31 d2                	xor    edx,edx
c0014dd4:	eb 2a                	jmp    c0014e00 <SysSbrk(regs*)+0x51>
c0014dd6:	83 c8 ff             	or     eax,0xffffffff
c0014dd9:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014ddf:	89 c2                	mov    edx,eax
c0014de1:	77 1d                	ja     c0014e00 <SysSbrk(regs*)+0x51>
c0014de3:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014de9:	50                   	push   eax
c0014dea:	68 07 0c 00 00       	push   0xc07
c0014def:	c1 ea 0c             	shr    edx,0xc
c0014df2:	52                   	push   edx
c0014df3:	51                   	push   ecx
c0014df4:	e8 db ee ff ff       	call   c0013cd4 <VAS::allocatePages(int, int)>
c0014df9:	89 f0                	mov    eax,esi
c0014dfb:	31 d2                	xor    edx,edx
c0014dfd:	83 c4 10             	add    esp,0x10
c0014e00:	59                   	pop    ecx
c0014e01:	5b                   	pop    ebx
c0014e02:	5e                   	pop    esi
c0014e03:	c3                   	ret    

c0014e04 <SysSetCwd(regs*)>:
c0014e04:	83 ec 14             	sub    esp,0x14
c0014e07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e0b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014e0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e13:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014e16:	e8 c6 3b ff ff       	call   c00089e1 <Fs::setcwd(Process*, char*)>
c0014e1b:	83 c4 1c             	add    esp,0x1c
c0014e1e:	99                   	cdq    
c0014e1f:	c3                   	ret    

c0014e20 <SysSetTime(regs*)>:
c0014e20:	55                   	push   ebp
c0014e21:	31 d2                	xor    edx,edx
c0014e23:	57                   	push   edi
c0014e24:	56                   	push   esi
c0014e25:	53                   	push   ebx
c0014e26:	bb 3c 00 00 00       	mov    ebx,0x3c
c0014e2b:	83 ec 30             	sub    esp,0x30
c0014e2e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0014e32:	8b 71 20             	mov    esi,DWORD PTR [ecx+0x20]
c0014e35:	89 f0                	mov    eax,esi
c0014e37:	f7 f3                	div    ebx
c0014e39:	89 d7                	mov    edi,edx
c0014e3b:	31 d2                	xor    edx,edx
c0014e3d:	f7 f3                	div    ebx
c0014e3f:	bb 10 0e 00 00       	mov    ebx,0xe10
c0014e44:	89 f0                	mov    eax,esi
c0014e46:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014e4a:	31 d2                	xor    edx,edx
c0014e4c:	f7 f3                	div    ebx
c0014e4e:	bb 18 00 00 00       	mov    ebx,0x18
c0014e53:	31 d2                	xor    edx,edx
c0014e55:	f7 f3                	div    ebx
c0014e57:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014e5a:	bb 0c 00 00 00       	mov    ebx,0xc
c0014e5f:	89 c6                	mov    esi,eax
c0014e61:	c1 e8 05             	shr    eax,0x5
c0014e64:	83 e6 1f             	and    esi,0x1f
c0014e67:	46                   	inc    esi
c0014e68:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014e6c:	31 d2                	xor    edx,edx
c0014e6e:	f7 f3                	div    ebx
c0014e70:	31 db                	xor    ebx,ebx
c0014e72:	57                   	push   edi
c0014e73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014e77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e7b:	0f b7 69 24          	movzx  ebp,WORD PTR [ecx+0x24]
c0014e7f:	55                   	push   ebp
c0014e80:	52                   	push   edx
c0014e81:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0014e85:	56                   	push   esi
c0014e86:	68 99 97 02 c0       	push   0xc0029799
c0014e8b:	e8 d6 20 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014e90:	83 c4 1c             	add    esp,0x1c
c0014e93:	57                   	push   edi
c0014e94:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014e98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e9c:	55                   	push   ebp
c0014e9d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014ea1:	52                   	push   edx
c0014ea2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014ea6:	56                   	push   esi
c0014ea7:	68 bb 97 02 c0       	push   0xc00297bb
c0014eac:	e8 b5 20 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014eb1:	a1 08 21 03 c0       	mov    eax,ds:0xc0032108
c0014eb6:	31 c9                	xor    ecx,ecx
c0014eb8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014ebc:	8a 5c 24 30          	mov    bl,BYTE PTR [esp+0x30]
c0014ec0:	8a 7c 24 2c          	mov    bh,BYTE PTR [esp+0x2c]
c0014ec4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0014eca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014ece:	89 f0                	mov    eax,esi
c0014ed0:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0014ed4:	88 c1                	mov    cl,al
c0014ed6:	89 e8                	mov    eax,ebp
c0014ed8:	88 d5                	mov    ch,dl
c0014eda:	83 c4 1c             	add    esp,0x1c
c0014edd:	c1 e0 10             	shl    eax,0x10
c0014ee0:	0f b7 d1             	movzx  edx,cx
c0014ee3:	09 c2                	or     edx,eax
c0014ee5:	89 f8                	mov    eax,edi
c0014ee7:	c1 e0 10             	shl    eax,0x10
c0014eea:	89 d1                	mov    ecx,edx
c0014eec:	89 da                	mov    edx,ebx
c0014eee:	81 e2 ff ff 00 ff    	and    edx,0xff00ffff
c0014ef4:	09 c2                	or     edx,eax
c0014ef6:	52                   	push   edx
c0014ef7:	51                   	push   ecx
c0014ef8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014efc:	e8 29 4b ff ff       	call   c0009a2a <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014f01:	83 c4 3c             	add    esp,0x3c
c0014f04:	31 d2                	xor    edx,edx
c0014f06:	5b                   	pop    ebx
c0014f07:	5e                   	pop    esi
c0014f08:	83 f0 01             	xor    eax,0x1
c0014f0b:	5f                   	pop    edi
c0014f0c:	0f b6 c0             	movzx  eax,al
c0014f0f:	5d                   	pop    ebp
c0014f10:	c3                   	ret    

c0014f11 <SysSymlink(regs*)>:
c0014f11:	56                   	push   esi
c0014f12:	83 c8 ff             	or     eax,0xffffffff
c0014f15:	53                   	push   ebx
c0014f16:	89 c2                	mov    edx,eax
c0014f18:	81 ec 34 02 00 00    	sub    esp,0x234
c0014f1e:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0014f25:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014f29:	74 50                	je     c0014f7b <SysSymlink(regs*)+0x6a>
c0014f2b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0014f2e:	85 c9                	test   ecx,ecx
c0014f30:	74 49                	je     c0014f7b <SysSymlink(regs*)+0x6a>
c0014f32:	6a 01                	push   0x1
c0014f34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f39:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f3c:	05 0c 01 00 00       	add    eax,0x10c
c0014f41:	50                   	push   eax
c0014f42:	51                   	push   ecx
c0014f43:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014f47:	56                   	push   esi
c0014f48:	e8 e7 33 ff ff       	call   c0008334 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014f4d:	6a 01                	push   0x1
c0014f4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f54:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f57:	05 0c 01 00 00       	add    eax,0x10c
c0014f5c:	50                   	push   eax
c0014f5d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014f60:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0014f67:	53                   	push   ebx
c0014f68:	e8 c7 33 ff ff       	call   c0008334 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014f6d:	83 c4 18             	add    esp,0x18
c0014f70:	56                   	push   esi
c0014f71:	53                   	push   ebx
c0014f72:	e8 eb 2f ff ff       	call   c0007f62 <KeCreateSymlink(char const*, char const*)>
c0014f77:	83 c4 10             	add    esp,0x10
c0014f7a:	99                   	cdq    
c0014f7b:	81 c4 34 02 00 00    	add    esp,0x234
c0014f81:	5b                   	pop    ebx
c0014f82:	5e                   	pop    esi
c0014f83:	c3                   	ret    

c0014f84 <SysTimezone(regs*)>:
c0014f84:	83 ec 0c             	sub    esp,0xc
c0014f87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f8b:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014f8f:	75 17                	jne    c0014fa8 <SysTimezone(regs*)+0x24>
c0014f91:	83 ec 0c             	sub    esp,0xc
c0014f94:	68 dd 97 02 c0       	push   0xc00297dd
c0014f99:	e8 c8 1f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014f9e:	83 c8 ff             	or     eax,0xffffffff
c0014fa1:	83 c4 10             	add    esp,0x10
c0014fa4:	89 c2                	mov    edx,eax
c0014fa6:	eb 16                	jmp    c0014fbe <SysTimezone(regs*)+0x3a>
c0014fa8:	83 ec 0c             	sub    esp,0xc
c0014fab:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014fae:	e8 2e 45 ff ff       	call   c00094e1 <KeSetTimezone(int)>
c0014fb3:	31 d2                	xor    edx,edx
c0014fb5:	83 c4 10             	add    esp,0x10
c0014fb8:	83 f0 01             	xor    eax,0x1
c0014fbb:	0f b6 c0             	movzx  eax,al
c0014fbe:	83 c4 0c             	add    esp,0xc
c0014fc1:	c3                   	ret    

c0014fc2 <SysTruncate(regs*)>:
c0014fc2:	55                   	push   ebp
c0014fc3:	57                   	push   edi
c0014fc4:	31 ff                	xor    edi,edi
c0014fc6:	56                   	push   esi
c0014fc7:	53                   	push   ebx
c0014fc8:	83 ec 0c             	sub    esp,0xc
c0014fcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fcf:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014fd2:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014fd6:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014fd9:	89 ce                	mov    esi,ecx
c0014fdb:	0f 84 9a 00 00 00    	je     c001507b <SysTruncate(regs*)+0xb9>
c0014fe1:	83 ec 0c             	sub    esp,0xc
c0014fe4:	68 14 01 00 00       	push   0x114
c0014fe9:	e8 6a ab ff ff       	call   c000fb58 <malloc>
c0014fee:	83 c4 0c             	add    esp,0xc
c0014ff1:	89 c3                	mov    ebx,eax
c0014ff3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ff8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014ffb:	55                   	push   ebp
c0014ffc:	53                   	push   ebx
c0014ffd:	e8 5e 36 ff ff       	call   c0008660 <File::File(char const*, Process*)>
c0015002:	83 c4 10             	add    esp,0x10
c0015005:	31 d2                	xor    edx,edx
c0015007:	85 db                	test   ebx,ebx
c0015009:	b8 03 00 00 00       	mov    eax,0x3
c001500e:	0f 84 a2 00 00 00    	je     c00150b6 <SysTruncate(regs*)+0xf4>
c0015014:	51                   	push   ecx
c0015015:	51                   	push   ecx
c0015016:	6a 02                	push   0x2
c0015018:	53                   	push   ebx
c0015019:	e8 60 36 ff ff       	call   c000867e <File::open(FileOpenMode)>
c001501e:	83 c4 10             	add    esp,0x10
c0015021:	85 c0                	test   eax,eax
c0015023:	74 13                	je     c0015038 <SysTruncate(regs*)+0x76>
c0015025:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015027:	83 ec 0c             	sub    esp,0xc
c001502a:	53                   	push   ebx
c001502b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001502e:	83 c4 10             	add    esp,0x10
c0015031:	b8 04 00 00 00       	mov    eax,0x4
c0015036:	eb 7c                	jmp    c00150b4 <SysTruncate(regs*)+0xf2>
c0015038:	52                   	push   edx
c0015039:	57                   	push   edi
c001503a:	56                   	push   esi
c001503b:	53                   	push   ebx
c001503c:	e8 51 37 ff ff       	call   c0008792 <File::truncate(unsigned long long)>
c0015041:	83 c4 10             	add    esp,0x10
c0015044:	85 c0                	test   eax,eax
c0015046:	74 1b                	je     c0015063 <SysTruncate(regs*)+0xa1>
c0015048:	83 ec 0c             	sub    esp,0xc
c001504b:	53                   	push   ebx
c001504c:	e8 8b 36 ff ff       	call   c00086dc <File::close()>
c0015051:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015053:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015056:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015059:	83 c4 10             	add    esp,0x10
c001505c:	b8 05 00 00 00       	mov    eax,0x5
c0015061:	eb 51                	jmp    c00150b4 <SysTruncate(regs*)+0xf2>
c0015063:	83 ec 0c             	sub    esp,0xc
c0015066:	53                   	push   ebx
c0015067:	e8 70 36 ff ff       	call   c00086dc <File::close()>
c001506c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001506e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015071:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015074:	83 c4 10             	add    esp,0x10
c0015077:	31 c0                	xor    eax,eax
c0015079:	eb 39                	jmp    c00150b4 <SysTruncate(regs*)+0xf2>
c001507b:	31 d2                	xor    edx,edx
c001507d:	83 fd 02             	cmp    ebp,0x2
c0015080:	b8 01 00 00 00       	mov    eax,0x1
c0015085:	7e 2f                	jle    c00150b6 <SysTruncate(regs*)+0xf4>
c0015087:	83 ec 0c             	sub    esp,0xc
c001508a:	51                   	push   ecx
c001508b:	e8 05 e3 ff ff       	call   c0013395 <KeGetFileFromDescriptor(int)>
c0015090:	83 c4 10             	add    esp,0x10
c0015093:	31 d2                	xor    edx,edx
c0015095:	89 c1                	mov    ecx,eax
c0015097:	b8 02 00 00 00       	mov    eax,0x2
c001509c:	85 c9                	test   ecx,ecx
c001509e:	74 16                	je     c00150b6 <SysTruncate(regs*)+0xf4>
c00150a0:	50                   	push   eax
c00150a1:	57                   	push   edi
c00150a2:	56                   	push   esi
c00150a3:	51                   	push   ecx
c00150a4:	e8 e9 36 ff ff       	call   c0008792 <File::truncate(unsigned long long)>
c00150a9:	83 c4 10             	add    esp,0x10
c00150ac:	85 c0                	test   eax,eax
c00150ae:	0f 95 c0             	setne  al
c00150b1:	0f b6 c0             	movzx  eax,al
c00150b4:	31 d2                	xor    edx,edx
c00150b6:	83 c4 0c             	add    esp,0xc
c00150b9:	5b                   	pop    ebx
c00150ba:	5e                   	pop    esi
c00150bb:	5f                   	pop    edi
c00150bc:	5d                   	pop    ebp
c00150bd:	c3                   	ret    

c00150be <SysWrite(regs*)>:
c00150be:	57                   	push   edi
c00150bf:	56                   	push   esi
c00150c0:	53                   	push   ebx
c00150c1:	83 ec 10             	sub    esp,0x10
c00150c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00150c8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00150cb:	83 f8 02             	cmp    eax,0x2
c00150ce:	77 10                	ja     c00150e0 <SysWrite(regs*)+0x22>
c00150d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150d5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00150d8:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c00150de:	eb 0e                	jmp    c00150ee <SysWrite(regs*)+0x30>
c00150e0:	83 ec 0c             	sub    esp,0xc
c00150e3:	50                   	push   eax
c00150e4:	e8 ac e2 ff ff       	call   c0013395 <KeGetFileFromDescriptor(int)>
c00150e9:	83 c4 10             	add    esp,0x10
c00150ec:	89 c1                	mov    ecx,eax
c00150ee:	83 c8 ff             	or     eax,0xffffffff
c00150f1:	85 c9                	test   ecx,ecx
c00150f3:	89 c2                	mov    edx,eax
c00150f5:	74 28                	je     c001511f <SysWrite(regs*)+0x61>
c00150f7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00150ff:	83 ec 0c             	sub    esp,0xc
c0015102:	31 ff                	xor    edi,edi
c0015104:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015108:	8b 01                	mov    eax,DWORD PTR [ecx]
c001510a:	52                   	push   edx
c001510b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001510e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015111:	57                   	push   edi
c0015112:	56                   	push   esi
c0015113:	51                   	push   ecx
c0015114:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015117:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001511b:	83 c4 20             	add    esp,0x20
c001511e:	99                   	cdq    
c001511f:	83 c4 10             	add    esp,0x10
c0015122:	5b                   	pop    ebx
c0015123:	5e                   	pop    esi
c0015124:	5f                   	pop    edi
c0015125:	c3                   	ret    

c0015126 <SysWsbe(regs*)>:
c0015126:	55                   	push   ebp
c0015127:	57                   	push   edi
c0015128:	56                   	push   esi
c0015129:	53                   	push   ebx
c001512a:	83 ec 3c             	sub    esp,0x3c
c001512d:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0015131:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0015138:	75 2d                	jne    c0015167 <SysWsbe(regs*)+0x41>
c001513a:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c0015141:	75 24                	jne    c0015167 <SysWsbe(regs*)+0x41>
c0015143:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c001514a:	75 1b                	jne    c0015167 <SysWsbe(regs*)+0x41>
c001514c:	6a 01                	push   0x1
c001514e:	6a 00                	push   0x0
c0015150:	68 da a3 00 c0       	push   0xc000a3da
c0015155:	ff 35 58 23 03 c0    	push   DWORD PTR ds:0xc0032358
c001515b:	e8 20 17 00 00       	call   c0016880 <Process::createThread(void (*)(void*), void*, int)>
c0015160:	83 c4 10             	add    esp,0x10
c0015163:	31 c0                	xor    eax,eax
c0015165:	eb 52                	jmp    c00151b9 <SysWsbe(regs*)+0x93>
c0015167:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001516b:	be f2 97 02 c0       	mov    esi,0xc00297f2
c0015170:	b9 0b 00 00 00       	mov    ecx,0xb
c0015175:	fc                   	cld    
c0015176:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015178:	83 ec 0c             	sub    esp,0xc
c001517b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001517f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015184:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015187:	8b b0 a6 05 00 00    	mov    esi,DWORD PTR [eax+0x5a6]
c001518d:	8b 06                	mov    eax,DWORD PTR [esi]
c001518f:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0015192:	57                   	push   edi
c0015193:	e8 e8 b3 fe ff       	call   c0000580 <strlen>
c0015198:	5a                   	pop    edx
c0015199:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001519d:	52                   	push   edx
c001519e:	31 d2                	xor    edx,edx
c00151a0:	57                   	push   edi
c00151a1:	52                   	push   edx
c00151a2:	50                   	push   eax
c00151a3:	56                   	push   esi
c00151a4:	ff d5                	call   ebp
c00151a6:	83 c4 14             	add    esp,0x14
c00151a9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00151ac:	e8 77 21 00 00       	call   c0017328 <KeTerminateCurrentThread(int)>
c00151b1:	83 c4 10             	add    esp,0x10
c00151b4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00151b9:	83 c4 3c             	add    esp,0x3c
c00151bc:	31 d2                	xor    edx,edx
c00151be:	5b                   	pop    ebx
c00151bf:	5e                   	pop    esi
c00151c0:	5f                   	pop    edi
c00151c1:	5d                   	pop    ebp
c00151c2:	c3                   	ret    

c00151c3 <SysYield(regs*)>:
c00151c3:	83 ec 0c             	sub    esp,0xc
c00151c6:	fa                   	cli    
c00151c7:	ff 05 30 23 03 c0    	inc    DWORD PTR ds:0xc0032330
c00151cd:	e8 62 19 00 00       	call   c0016b34 <schedule()>
c00151d2:	f0 ff 0d 30 23 03 c0 	lock dec DWORD PTR ds:0xc0032330
c00151d9:	83 3d 30 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032330,0x0
c00151e0:	75 01                	jne    c00151e3 <SysYield(regs*)+0x20>
c00151e2:	fb                   	sti    
c00151e3:	31 c0                	xor    eax,eax
c00151e5:	31 d2                	xor    edx,edx
c00151e7:	83 c4 0c             	add    esp,0xc
c00151ea:	c3                   	ret    
c00151eb:	90                   	nop

c00151ec <KeAlarm(ThreadControlBlock*, unsigned long long)>:
c00151ec:	55                   	push   ebp
c00151ed:	57                   	push   edi
c00151ee:	56                   	push   esi
c00151ef:	53                   	push   ebx
c00151f0:	83 ec 2c             	sub    esp,0x2c
c00151f3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00151f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00151fb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00151ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015203:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015207:	8b 7a 63             	mov    edi,DWORD PTR [edx+0x63]
c001520a:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c001520e:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0015212:	c1 e0 08             	shl    eax,0x8
c0015215:	09 c6                	or     esi,eax
c0015217:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c001521b:	c1 e0 10             	shl    eax,0x10
c001521e:	09 c6                	or     esi,eax
c0015220:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c0015224:	83 e0 7f             	and    eax,0x7f
c0015227:	c1 e0 18             	shl    eax,0x18
c001522a:	09 f0                	or     eax,esi
c001522c:	89 c5                	mov    ebp,eax
c001522e:	89 f8                	mov    eax,edi
c0015230:	80 f4 00             	xor    ah,0x0
c0015233:	89 c1                	mov    ecx,eax
c0015235:	89 e8                	mov    eax,ebp
c0015237:	80 f4 00             	xor    ah,0x0
c001523a:	89 c3                	mov    ebx,eax
c001523c:	89 d8                	mov    eax,ebx
c001523e:	09 c8                	or     eax,ecx
c0015240:	74 42                	je     c0015284 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x98>
c0015242:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015246:	8b 4a 63             	mov    ecx,DWORD PTR [edx+0x63]
c0015249:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c001524d:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0015251:	c1 e0 08             	shl    eax,0x8
c0015254:	09 c6                	or     esi,eax
c0015256:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c001525a:	c1 e0 10             	shl    eax,0x10
c001525d:	09 c6                	or     esi,eax
c001525f:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c0015263:	83 e0 7f             	and    eax,0x7f
c0015266:	c1 e0 18             	shl    eax,0x18
c0015269:	09 f0                	or     eax,esi
c001526b:	89 c3                	mov    ebx,eax
c001526d:	a1 50 1b 03 c0       	mov    eax,ds:0xc0031b50
c0015272:	8b 15 54 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b54
c0015278:	29 c1                	sub    ecx,eax
c001527a:	19 d3                	sbb    ebx,edx
c001527c:	89 c8                	mov    eax,ecx
c001527e:	89 da                	mov    edx,ebx
c0015280:	eb 0e                	jmp    c0015290 <KeAlarm(ThreadControlBlock*, unsigned long long)+0xa4>
c0015282:	66 90                	xchg   ax,ax
c0015284:	b8 00 00 00 00       	mov    eax,0x0
c0015289:	ba 00 00 00 00       	mov    edx,0x0
c001528e:	66 90                	xchg   ax,ax
c0015290:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015294:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001529c:	80 f4 00             	xor    ah,0x0
c001529f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00152a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00152a7:	80 f4 00             	xor    ah,0x0
c00152aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00152ae:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00152b2:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00152b6:	89 e8                	mov    eax,ebp
c00152b8:	09 f8                	or     eax,edi
c00152ba:	74 30                	je     c00152ec <KeAlarm(ThreadControlBlock*, unsigned long long)+0x100>
c00152bc:	8b 0d 50 1b 03 c0    	mov    ecx,DWORD PTR ds:0xc0031b50
c00152c2:	8b 1d 54 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031b54
c00152c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00152cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00152d0:	01 c8                	add    eax,ecx
c00152d2:	11 da                	adc    edx,ebx
c00152d4:	89 c7                	mov    edi,eax
c00152d6:	83 e7 ff             	and    edi,0xffffffff
c00152d9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00152dc:	89 d0                	mov    eax,edx
c00152de:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00152e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00152e7:	eb 13                	jmp    c00152fc <KeAlarm(ThreadControlBlock*, unsigned long long)+0x110>
c00152e9:	8d 76 00             	lea    esi,[esi+0x0]
c00152ec:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00152f3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00152fb:	90                   	nop
c00152fc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015300:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0015303:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0015307:	89 cf                	mov    edi,ecx
c0015309:	89 78 63             	mov    DWORD PTR [eax+0x63],edi
c001530c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001530f:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0015313:	0f b6 5c 24 04       	movzx  ebx,BYTE PTR [esp+0x4]
c0015318:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c001531b:	83 e2 00             	and    edx,0x0
c001531e:	88 d1                	mov    cl,dl
c0015320:	88 da                	mov    dl,bl
c0015322:	09 ca                	or     edx,ecx
c0015324:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c0015327:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001532b:	c1 ea 08             	shr    edx,0x8
c001532e:	0f b6 da             	movzx  ebx,dl
c0015331:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c0015334:	83 e2 00             	and    edx,0x0
c0015337:	88 d1                	mov    cl,dl
c0015339:	88 da                	mov    dl,bl
c001533b:	09 ca                	or     edx,ecx
c001533d:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0015340:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015344:	c1 ea 10             	shr    edx,0x10
c0015347:	0f b6 da             	movzx  ebx,dl
c001534a:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c001534d:	83 e2 00             	and    edx,0x0
c0015350:	88 d1                	mov    cl,dl
c0015352:	88 da                	mov    dl,bl
c0015354:	09 ca                	or     edx,ecx
c0015356:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0015359:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001535d:	c1 ea 18             	shr    edx,0x18
c0015360:	83 e2 7f             	and    edx,0x7f
c0015363:	89 d3                	mov    ebx,edx
c0015365:	83 e3 7f             	and    ebx,0x7f
c0015368:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c001536b:	83 e2 80             	and    edx,0xffffff80
c001536e:	88 d1                	mov    cl,dl
c0015370:	88 da                	mov    dl,bl
c0015372:	09 ca                	or     edx,ecx
c0015374:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c0015377:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001537b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001537f:	83 c4 2c             	add    esp,0x2c
c0015382:	5b                   	pop    ebx
c0015383:	5e                   	pop    esi
c0015384:	5f                   	pop    edi
c0015385:	5d                   	pop    ebp
c0015386:	c3                   	ret    
c0015387:	90                   	nop

c0015388 <KeCheckAlarm(ThreadControlBlock*)>:
c0015388:	55                   	push   ebp
c0015389:	57                   	push   edi
c001538a:	56                   	push   esi
c001538b:	53                   	push   ebx
c001538c:	83 ec 0c             	sub    esp,0xc
c001538f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015393:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c0015396:	0f b6 78 67          	movzx  edi,BYTE PTR [eax+0x67]
c001539a:	0f b6 68 68          	movzx  ebp,BYTE PTR [eax+0x68]
c001539e:	c1 e5 08             	shl    ebp,0x8
c00153a1:	09 fd                	or     ebp,edi
c00153a3:	0f b6 78 69          	movzx  edi,BYTE PTR [eax+0x69]
c00153a7:	c1 e7 10             	shl    edi,0x10
c00153aa:	09 ef                	or     edi,ebp
c00153ac:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c00153b0:	83 e0 7f             	and    eax,0x7f
c00153b3:	c1 e0 18             	shl    eax,0x18
c00153b6:	09 f8                	or     eax,edi
c00153b8:	89 c1                	mov    ecx,eax
c00153ba:	89 d0                	mov    eax,edx
c00153bc:	80 f4 00             	xor    ah,0x0
c00153bf:	89 c3                	mov    ebx,eax
c00153c1:	89 c8                	mov    eax,ecx
c00153c3:	80 f4 00             	xor    ah,0x0
c00153c6:	89 c6                	mov    esi,eax
c00153c8:	89 f0                	mov    eax,esi
c00153ca:	09 d8                	or     eax,ebx
c00153cc:	0f 84 9e 00 00 00    	je     c0015470 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c00153d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00153d6:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c00153d9:	0f b6 58 67          	movzx  ebx,BYTE PTR [eax+0x67]
c00153dd:	0f b6 70 68          	movzx  esi,BYTE PTR [eax+0x68]
c00153e1:	c1 e6 08             	shl    esi,0x8
c00153e4:	09 de                	or     esi,ebx
c00153e6:	0f b6 58 69          	movzx  ebx,BYTE PTR [eax+0x69]
c00153ea:	c1 e3 10             	shl    ebx,0x10
c00153ed:	09 f3                	or     ebx,esi
c00153ef:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c00153f3:	83 e0 7f             	and    eax,0x7f
c00153f6:	c1 e0 18             	shl    eax,0x18
c00153f9:	09 d8                	or     eax,ebx
c00153fb:	89 c1                	mov    ecx,eax
c00153fd:	89 cb                	mov    ebx,ecx
c00153ff:	89 d1                	mov    ecx,edx
c0015401:	a1 50 1b 03 c0       	mov    eax,ds:0xc0031b50
c0015406:	8b 15 54 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b54
c001540c:	39 c8                	cmp    eax,ecx
c001540e:	89 d0                	mov    eax,edx
c0015410:	19 d8                	sbb    eax,ebx
c0015412:	72 5c                	jb     c0015470 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c0015414:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015418:	c7 40 63 00 00 00 00 	mov    DWORD PTR [eax+0x63],0x0
c001541f:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c0015422:	83 e2 00             	and    edx,0x0
c0015425:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c0015428:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c001542b:	83 e2 00             	and    edx,0x0
c001542e:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0015431:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c0015434:	83 e2 00             	and    edx,0x0
c0015437:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c001543a:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c001543d:	83 e2 80             	and    edx,0xffffff80
c0015440:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c0015443:	83 ec 0c             	sub    esp,0xc
c0015446:	68 1e 98 02 c0       	push   0xc002981e
c001544b:	e8 16 1b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0015450:	83 c4 10             	add    esp,0x10
c0015453:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015457:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001545a:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c0015460:	83 ec 08             	sub    esp,0x8
c0015463:	6a 0e                	push   0xe
c0015465:	50                   	push   eax
c0015466:	e8 50 bd ff ff       	call   c00111bb <KeRaiseSignal(SigHandlerBlock*, int)>
c001546b:	83 c4 10             	add    esp,0x10
c001546e:	66 90                	xchg   ax,ax
c0015470:	90                   	nop
c0015471:	83 c4 0c             	add    esp,0xc
c0015474:	5b                   	pop    ebx
c0015475:	5e                   	pop    esi
c0015476:	5f                   	pop    edi
c0015477:	5d                   	pop    ebp
c0015478:	c3                   	ret    

c0015479 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0015479:	55                   	push   ebp
c001547a:	57                   	push   edi
c001547b:	56                   	push   esi
c001547c:	53                   	push   ebx
c001547d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0015483:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001548e:	74 3b                	je     c00154cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0015490:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0015498:	74 31                	je     c00154cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001549a:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00154a2:	75 27                	jne    c00154cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00154a4:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00154ab:	05 00 10 00 00       	add    eax,0x1000
c00154b0:	89 c2                	mov    edx,eax
c00154b2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00154b7:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00154be:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00154c4:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00154cb:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00154d2:	83 ec 0c             	sub    esp,0xc
c00154d5:	6a 01                	push   0x1
c00154d7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00154dd:	e8 11 e0 ff ff       	call   c00134f3 <Virt::allocateKernelVirtualPages(int)>
c00154e2:	83 c4 10             	add    esp,0x10
c00154e5:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00154eb:	89 c3                	mov    ebx,eax
c00154ed:	0f 86 27 01 00 00    	jbe    c001561a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a1>
c00154f3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00154fb:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0015502:	c1 ee 0c             	shr    esi,0xc
c0015505:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0015509:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0015510:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0015517:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001551b:	29 ef                	sub    edi,ebp
c001551d:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0015521:	0f 83 fa 00 00 00    	jae    c0015621 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c0015527:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001552d:	b8 00 10 00 00       	mov    eax,0x1000
c0015532:	0f 47 f8             	cmova  edi,eax
c0015535:	83 ec 0c             	sub    esp,0xc
c0015538:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001553f:	31 d2                	xor    edx,edx
c0015541:	8b 08                	mov    ecx,DWORD PTR [eax]
c0015543:	8d 44 24 28          	lea    eax,[esp+0x28]
c0015547:	50                   	push   eax
c0015548:	8d 74 24 30          	lea    esi,[esp+0x30]
c001554c:	56                   	push   esi
c001554d:	52                   	push   edx
c001554e:	57                   	push   edi
c001554f:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0015556:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015559:	83 c4 20             	add    esp,0x20
c001555c:	85 c0                	test   eax,eax
c001555e:	75 06                	jne    c0015566 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0015560:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015564:	74 13                	je     c0015579 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0015566:	83 ec 0c             	sub    esp,0xc
c0015569:	53                   	push   ebx
c001556a:	e8 82 e2 ff ff       	call   c00137f1 <Virt::freeKernelVirtualPages(unsigned long)>
c001556f:	83 c4 10             	add    esp,0x10
c0015572:	31 c0                	xor    eax,eax
c0015574:	e9 80 01 00 00       	jmp    c00156f9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x280>
c0015579:	fa                   	cli    
c001557a:	ff 05 30 23 03 c0    	inc    DWORD PTR ds:0xc0032330
c0015580:	e8 21 ac ff ff       	call   c00101a6 <Phys::allocatePage()>
c0015585:	6a 07                	push   0x7
c0015587:	53                   	push   ebx
c0015588:	50                   	push   eax
c0015589:	89 c7                	mov    edi,eax
c001558b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015590:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015593:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015599:	e8 2e e6 ff ff       	call   c0013bcc <VAS::mapPage(unsigned long, unsigned long, int)>
c001559e:	83 c4 0c             	add    esp,0xc
c00155a1:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00155a8:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00155ae:	6a 00                	push   0x0
c00155b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00155b8:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00155be:	e8 75 e4 ff ff       	call   c0013a38 <VAS::mapOtherVASIn(bool, VAS*)>
c00155c3:	58                   	pop    eax
c00155c4:	5a                   	pop    edx
c00155c5:	68 07 0c 00 00       	push   0xc07
c00155ca:	55                   	push   ebp
c00155cb:	57                   	push   edi
c00155cc:	89 df                	mov    edi,ebx
c00155ce:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00155d5:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00155db:	6a 00                	push   0x0
c00155dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155e2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00155e5:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00155eb:	e8 30 e8 ff ff       	call   c0013e20 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00155f0:	b9 00 10 00 00       	mov    ecx,0x1000
c00155f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00155f7:	f0 ff 0d 30 23 03 c0 	lock dec DWORD PTR ds:0xc0032330
c00155fe:	83 c4 20             	add    esp,0x20
c0015601:	83 3d 30 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032330,0x0
c0015608:	75 01                	jne    c001560b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c001560a:	fb                   	sti    
c001560b:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001560f:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015615:	e9 ef fe ff ff       	jmp    c0015509 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c001561a:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0015621:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015628:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001562e:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0015634:	0f 86 b1 00 00 00    	jbe    c00156eb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c001563a:	fa                   	cli    
c001563b:	51                   	push   ecx
c001563c:	31 ff                	xor    edi,edi
c001563e:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015645:	c1 ee 0c             	shr    esi,0xc
c0015648:	ff 05 30 23 03 c0    	inc    DWORD PTR ds:0xc0032330
c001564e:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015654:	6a 00                	push   0x0
c0015656:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001565b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001565e:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015664:	e8 cf e3 ff ff       	call   c0013a38 <VAS::mapOtherVASIn(bool, VAS*)>
c0015669:	83 c4 10             	add    esp,0x10
c001566c:	e8 35 ab ff ff       	call   c00101a6 <Phys::allocatePage()>
c0015671:	47                   	inc    edi
c0015672:	6a 07                	push   0x7
c0015674:	53                   	push   ebx
c0015675:	50                   	push   eax
c0015676:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001567a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015680:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0015683:	ff b2 b2 05 00 00    	push   DWORD PTR [edx+0x5b2]
c0015689:	e8 3e e5 ff ff       	call   c0013bcc <VAS::mapPage(unsigned long, unsigned long, int)>
c001568e:	58                   	pop    eax
c001568f:	5a                   	pop    edx
c0015690:	68 07 0c 00 00       	push   0xc07
c0015695:	55                   	push   ebp
c0015696:	81 c5 00 10 00 00    	add    ebp,0x1000
c001569c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00156a0:	50                   	push   eax
c00156a1:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00156a8:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00156ae:	6a 00                	push   0x0
c00156b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00156b8:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00156be:	e8 5d e7 ff ff       	call   c0013e20 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00156c3:	83 c4 1c             	add    esp,0x1c
c00156c6:	68 00 10 00 00       	push   0x1000
c00156cb:	6a 00                	push   0x0
c00156cd:	53                   	push   ebx
c00156ce:	e8 1d ae fe ff       	call   c00004f0 <memset>
c00156d3:	83 c4 10             	add    esp,0x10
c00156d6:	39 fe                	cmp    esi,edi
c00156d8:	77 92                	ja     c001566c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f3>
c00156da:	f0 ff 0d 30 23 03 c0 	lock dec DWORD PTR ds:0xc0032330
c00156e1:	83 3d 30 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032330,0x0
c00156e8:	75 01                	jne    c00156eb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c00156ea:	fb                   	sti    
c00156eb:	83 ec 0c             	sub    esp,0xc
c00156ee:	53                   	push   ebx
c00156ef:	e8 fd e0 ff ff       	call   c00137f1 <Virt::freeKernelVirtualPages(unsigned long)>
c00156f4:	83 c4 10             	add    esp,0x10
c00156f7:	b0 01                	mov    al,0x1
c00156f9:	81 c4 2c 10 00 00    	add    esp,0x102c
c00156ff:	5b                   	pop    ebx
c0015700:	5e                   	pop    esi
c0015701:	5f                   	pop    edi
c0015702:	5d                   	pop    ebp
c0015703:	c3                   	ret    

c0015704 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0015704:	55                   	push   ebp
c0015705:	57                   	push   edi
c0015706:	56                   	push   esi
c0015707:	53                   	push   ebx
c0015708:	83 ec 68             	sub    esp,0x68
c001570b:	68 14 01 00 00       	push   0x114
c0015710:	e8 43 a4 ff ff       	call   c000fb58 <malloc>
c0015715:	83 c4 0c             	add    esp,0xc
c0015718:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001571c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0015720:	89 c3                	mov    ebx,eax
c0015722:	50                   	push   eax
c0015723:	e8 38 2f ff ff       	call   c0008660 <File::File(char const*, Process*)>
c0015728:	5e                   	pop    esi
c0015729:	5f                   	pop    edi
c001572a:	6a 01                	push   0x1
c001572c:	53                   	push   ebx
c001572d:	e8 4c 2f ff ff       	call   c000867e <File::open(FileOpenMode)>
c0015732:	83 c4 10             	add    esp,0x10
c0015735:	85 c0                	test   eax,eax
c0015737:	0f 85 cb 01 00 00    	jne    c0015908 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c001573d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015745:	83 ec 0c             	sub    esp,0xc
c0015748:	6a 34                	push   0x34
c001574a:	e8 09 a4 ff ff       	call   c000fb58 <malloc>
c001574f:	59                   	pop    ecx
c0015750:	8d 74 24 34          	lea    esi,[esp+0x34]
c0015754:	89 c7                	mov    edi,eax
c0015756:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015758:	56                   	push   esi
c0015759:	57                   	push   edi
c001575a:	6a 00                	push   0x0
c001575c:	6a 34                	push   0x34
c001575e:	53                   	push   ebx
c001575f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015762:	83 c4 20             	add    esp,0x20
c0015765:	85 c0                	test   eax,eax
c0015767:	0f 85 9b 01 00 00    	jne    c0015908 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c001576d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015773:	0f 85 8f 01 00 00    	jne    c0015908 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015779:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001577c:	85 c0                	test   eax,eax
c001577e:	0f 84 84 01 00 00    	je     c0015908 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015784:	52                   	push   edx
c0015785:	31 d2                	xor    edx,edx
c0015787:	52                   	push   edx
c0015788:	50                   	push   eax
c0015789:	53                   	push   ebx
c001578a:	e8 ad 2f ff ff       	call   c000873c <File::seek(unsigned long long)>
c001578f:	83 c4 10             	add    esp,0x10
c0015792:	85 c0                	test   eax,eax
c0015794:	0f 85 6e 01 00 00    	jne    c0015908 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c001579a:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001579d:	83 ec 0c             	sub    esp,0xc
c00157a0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00157a4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00157a8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00157ac:	0f af c2             	imul   eax,edx
c00157af:	50                   	push   eax
c00157b0:	e8 a3 a3 ff ff       	call   c000fb58 <malloc>
c00157b5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00157b7:	89 34 24             	mov    DWORD PTR [esp],esi
c00157ba:	31 f6                	xor    esi,esi
c00157bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00157c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00157c4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00157c8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00157cc:	0f af c2             	imul   eax,edx
c00157cf:	99                   	cdq    
c00157d0:	52                   	push   edx
c00157d1:	50                   	push   eax
c00157d2:	53                   	push   ebx
c00157d3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00157d6:	83 c4 20             	add    esp,0x20
c00157d9:	66 3b 77 30          	cmp    si,WORD PTR [edi+0x30]
c00157dd:	0f b7 c6             	movzx  eax,si
c00157e0:	73 71                	jae    c0015853 <Thr::loadProgramIntoMemory(Process*, char const*)+0x14f>
c00157e2:	55                   	push   ebp
c00157e3:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00157e7:	6b c0 28             	imul   eax,eax,0x28
c00157ea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00157ee:	6b d2 28             	imul   edx,edx,0x28
c00157f1:	8b 04 01             	mov    eax,DWORD PTR [ecx+eax*1]
c00157f4:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00157f8:	31 d2                	xor    edx,edx
c00157fa:	52                   	push   edx
c00157fb:	50                   	push   eax
c00157fc:	53                   	push   ebx
c00157fd:	e8 3a 2f ff ff       	call   c000873c <File::seek(unsigned long long)>
c0015802:	83 c4 0c             	add    esp,0xc
c0015805:	6a 20                	push   0x20
c0015807:	6a 00                	push   0x0
c0015809:	8d 6c 24 3c          	lea    ebp,[esp+0x3c]
c001580d:	55                   	push   ebp
c001580e:	e8 dd ac fe ff       	call   c00004f0 <memset>
c0015813:	58                   	pop    eax
c0015814:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015816:	8d 54 24 38          	lea    edx,[esp+0x38]
c001581a:	52                   	push   edx
c001581b:	55                   	push   ebp
c001581c:	6a 00                	push   0x0
c001581e:	6a 1f                	push   0x1f
c0015820:	53                   	push   ebx
c0015821:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015824:	83 c4 18             	add    esp,0x18
c0015827:	55                   	push   ebp
c0015828:	68 2f 98 02 c0       	push   0xc002982f
c001582d:	e8 4e af fe ff       	call   c0000780 <strcmp>
c0015832:	83 c4 10             	add    esp,0x10
c0015835:	85 c0                	test   eax,eax
c0015837:	75 17                	jne    c0015850 <Thr::loadProgramIntoMemory(Process*, char const*)+0x14c>
c0015839:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001583d:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0015841:	8a 80 76 02 00 00    	mov    al,BYTE PTR [eax+0x276]
c0015847:	83 c8 80             	or     eax,0xffffff80
c001584a:	88 82 76 02 00 00    	mov    BYTE PTR [edx+0x276],al
c0015850:	46                   	inc    esi
c0015851:	eb 86                	jmp    c00157d9 <Thr::loadProgramIntoMemory(Process*, char const*)+0xd5>
c0015853:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0015856:	85 c0                	test   eax,eax
c0015858:	0f 84 aa 00 00 00    	je     c0015908 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c001585e:	31 d2                	xor    edx,edx
c0015860:	56                   	push   esi
c0015861:	52                   	push   edx
c0015862:	50                   	push   eax
c0015863:	53                   	push   ebx
c0015864:	e8 d3 2e ff ff       	call   c000873c <File::seek(unsigned long long)>
c0015869:	83 c4 10             	add    esp,0x10
c001586c:	85 c0                	test   eax,eax
c001586e:	0f 85 94 00 00 00    	jne    c0015908 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015874:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015878:	83 ec 0c             	sub    esp,0xc
c001587b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001587f:	0f af c2             	imul   eax,edx
c0015882:	50                   	push   eax
c0015883:	e8 d0 a2 ff ff       	call   c000fb58 <malloc>
c0015888:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001588c:	59                   	pop    ecx
c001588d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001588f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015893:	50                   	push   eax
c0015894:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015898:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001589c:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00158a0:	0f af c2             	imul   eax,edx
c00158a3:	99                   	cdq    
c00158a4:	52                   	push   edx
c00158a5:	50                   	push   eax
c00158a6:	53                   	push   ebx
c00158a7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00158aa:	83 c4 20             	add    esp,0x20
c00158ad:	31 c9                	xor    ecx,ecx
c00158af:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00158b7:	66 3b 4f 2c          	cmp    cx,WORD PTR [edi+0x2c]
c00158bb:	0f b7 e9             	movzx  ebp,cx
c00158be:	0f 83 89 00 00 00    	jae    c001594d <Thr::loadProgramIntoMemory(Process*, char const*)+0x249>
c00158c4:	c1 e5 05             	shl    ebp,0x5
c00158c7:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c00158cb:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c00158cf:	75 76                	jne    c0015947 <Thr::loadProgramIntoMemory(Process*, char const*)+0x243>
c00158d1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00158d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d8:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00158db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00158df:	52                   	push   edx
c00158e0:	31 d2                	xor    edx,edx
c00158e2:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00158e5:	52                   	push   edx
c00158e6:	50                   	push   eax
c00158e7:	53                   	push   ebx
c00158e8:	e8 4f 2e ff ff       	call   c000873c <File::seek(unsigned long long)>
c00158ed:	83 c4 10             	add    esp,0x10
c00158f0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00158f4:	85 c0                	test   eax,eax
c00158f6:	74 17                	je     c001590f <Thr::loadProgramIntoMemory(Process*, char const*)+0x20b>
c00158f8:	83 ec 0c             	sub    esp,0xc
c00158fb:	68 3e 98 02 c0       	push   0xc002983e
c0015900:	e8 61 16 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0015905:	83 c4 10             	add    esp,0x10
c0015908:	31 c0                	xor    eax,eax
c001590a:	e9 8e 00 00 00       	jmp    c001599d <Thr::loadProgramIntoMemory(Process*, char const*)+0x299>
c001590f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0015913:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0015916:	83 ec 0c             	sub    esp,0xc
c0015919:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c001591c:	50                   	push   eax
c001591d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015921:	56                   	push   esi
c0015922:	53                   	push   ebx
c0015923:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001592a:	e8 4a fb ff ff       	call   c0015479 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001592f:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0015933:	83 c4 20             	add    esp,0x20
c0015936:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001593a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001593e:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0015943:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0015947:	41                   	inc    ecx
c0015948:	e9 6a ff ff ff       	jmp    c00158b7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b3>
c001594d:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c0015951:	83 ec 0c             	sub    esp,0xc
c0015954:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015958:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001595c:	8b 91 b2 05 00 00    	mov    edx,DWORD PTR [ecx+0x5b2]
c0015962:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015967:	89 b1 ae 05 00 00    	mov    DWORD PTR [ecx+0x5ae],esi
c001596d:	05 00 10 00 00       	add    eax,0x1000
c0015972:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015975:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015979:	e8 ea a1 ff ff       	call   c000fb68 <free>
c001597e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015981:	e8 e2 a1 ff ff       	call   c000fb68 <free>
c0015986:	58                   	pop    eax
c0015987:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001598b:	e8 d8 a1 ff ff       	call   c000fb68 <free>
c0015990:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015993:	e8 44 2d ff ff       	call   c00086dc <File::close()>
c0015998:	83 c4 10             	add    esp,0x10
c001599b:	b0 01                	mov    al,0x1
c001599d:	83 c4 5c             	add    esp,0x5c
c00159a0:	5b                   	pop    ebx
c00159a1:	5e                   	pop    esi
c00159a2:	5f                   	pop    edi
c00159a3:	5d                   	pop    ebp
c00159a4:	c3                   	ret    

c00159a5 <Thr::runtimeReferenceHelper()>:
c00159a5:	83 ec 18             	sub    esp,0x18
c00159a8:	68 46 98 02 c0       	push   0xc0029846
c00159ad:	e8 b4 15 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00159b2:	fa                   	cli    
c00159b3:	83 c4 10             	add    esp,0x10
c00159b6:	eb fe                	jmp    c00159b6 <Thr::runtimeReferenceHelper()+0x11>

c00159b8 <Thr::getAddressOfKernelSymbol(char const*)>:
c00159b8:	57                   	push   edi
c00159b9:	56                   	push   esi
c00159ba:	53                   	push   ebx
c00159bb:	31 db                	xor    ebx,ebx
c00159bd:	39 1d 00 23 03 c0    	cmp    DWORD PTR ds:0xc0032300,ebx
c00159c3:	7e 3c                	jle    c0015a01 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00159c5:	8b 34 9d e0 22 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcdd20]
c00159cc:	31 ff                	xor    edi,edi
c00159ce:	39 3c 9d a0 22 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcdd60],edi
c00159d5:	7e 27                	jle    c00159fe <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00159d7:	50                   	push   eax
c00159d8:	50                   	push   eax
c00159d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00159dd:	8b 06                	mov    eax,DWORD PTR [esi]
c00159df:	03 04 9d c0 22 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcdd40]
c00159e6:	50                   	push   eax
c00159e7:	e8 94 ad fe ff       	call   c0000780 <strcmp>
c00159ec:	83 c4 10             	add    esp,0x10
c00159ef:	85 c0                	test   eax,eax
c00159f1:	75 05                	jne    c00159f8 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00159f3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00159f6:	eb 0b                	jmp    c0015a03 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00159f8:	83 c6 10             	add    esi,0x10
c00159fb:	47                   	inc    edi
c00159fc:	eb d0                	jmp    c00159ce <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00159fe:	43                   	inc    ebx
c00159ff:	eb bc                	jmp    c00159bd <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0015a01:	31 c0                	xor    eax,eax
c0015a03:	5b                   	pop    ebx
c0015a04:	5e                   	pop    esi
c0015a05:	5f                   	pop    edi
c0015a06:	c3                   	ret    

c0015a07 <Thr::loadKernelSymbolTable(char const*)>:
c0015a07:	55                   	push   ebp
c0015a08:	57                   	push   edi
c0015a09:	56                   	push   esi
c0015a0a:	53                   	push   ebx
c0015a0b:	83 ec 68             	sub    esp,0x68
c0015a0e:	68 14 01 00 00       	push   0x114
c0015a13:	8b 35 58 23 03 c0    	mov    esi,DWORD PTR ds:0xc0032358
c0015a19:	e8 3a a1 ff ff       	call   c000fb58 <malloc>
c0015a1e:	83 c4 0c             	add    esp,0xc
c0015a21:	56                   	push   esi
c0015a22:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015a26:	89 c3                	mov    ebx,eax
c0015a28:	50                   	push   eax
c0015a29:	e8 32 2c ff ff       	call   c0008660 <File::File(char const*, Process*)>
c0015a2e:	5e                   	pop    esi
c0015a2f:	5f                   	pop    edi
c0015a30:	6a 01                	push   0x1
c0015a32:	53                   	push   ebx
c0015a33:	e8 46 2c ff ff       	call   c000867e <File::open(FileOpenMode)>
c0015a38:	83 c4 10             	add    esp,0x10
c0015a3b:	85 c0                	test   eax,eax
c0015a3d:	74 0a                	je     c0015a49 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0015a3f:	83 ec 0c             	sub    esp,0xc
c0015a42:	68 68 98 02 c0       	push   0xc0029868
c0015a47:	eb 34                	jmp    c0015a7d <Thr::loadKernelSymbolTable(char const*)+0x76>
c0015a49:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015a51:	83 ec 0c             	sub    esp,0xc
c0015a54:	6a 34                	push   0x34
c0015a56:	e8 fd a0 ff ff       	call   c000fb58 <malloc>
c0015a5b:	59                   	pop    ecx
c0015a5c:	8d 74 24 34          	lea    esi,[esp+0x34]
c0015a60:	89 c7                	mov    edi,eax
c0015a62:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015a64:	56                   	push   esi
c0015a65:	57                   	push   edi
c0015a66:	6a 00                	push   0x0
c0015a68:	6a 34                	push   0x34
c0015a6a:	53                   	push   ebx
c0015a6b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015a6e:	83 c4 20             	add    esp,0x20
c0015a71:	85 c0                	test   eax,eax
c0015a73:	74 17                	je     c0015a8c <Thr::loadKernelSymbolTable(char const*)+0x85>
c0015a75:	83 ec 0c             	sub    esp,0xc
c0015a78:	68 7f 98 02 c0       	push   0xc002987f
c0015a7d:	e8 2a a5 ff ff       	call   c000ffac <KePanic(char const*)>
c0015a82:	83 c4 10             	add    esp,0x10
c0015a85:	31 c0                	xor    eax,eax
c0015a87:	e9 31 02 00 00       	jmp    c0015cbd <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0015a8c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015a92:	75 e1                	jne    c0015a75 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015a94:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015a97:	85 c0                	test   eax,eax
c0015a99:	74 da                	je     c0015a75 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015a9b:	52                   	push   edx
c0015a9c:	31 d2                	xor    edx,edx
c0015a9e:	52                   	push   edx
c0015a9f:	50                   	push   eax
c0015aa0:	53                   	push   ebx
c0015aa1:	e8 96 2c ff ff       	call   c000873c <File::seek(unsigned long long)>
c0015aa6:	83 c4 10             	add    esp,0x10
c0015aa9:	85 c0                	test   eax,eax
c0015aab:	75 c8                	jne    c0015a75 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015aad:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015ab1:	83 ec 0c             	sub    esp,0xc
c0015ab4:	31 ed                	xor    ebp,ebp
c0015ab6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015aba:	0f af c2             	imul   eax,edx
c0015abd:	50                   	push   eax
c0015abe:	e8 95 a0 ff ff       	call   c000fb58 <malloc>
c0015ac3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015ac5:	89 34 24             	mov    DWORD PTR [esp],esi
c0015ac8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015ad0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015ad4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015ad8:	0f af c2             	imul   eax,edx
c0015adb:	99                   	cdq    
c0015adc:	52                   	push   edx
c0015add:	50                   	push   eax
c0015ade:	53                   	push   ebx
c0015adf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015ae2:	83 c4 20             	add    esp,0x20
c0015ae5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015aed:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015af5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015afd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015b05:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0015b09:	0f b7 f5             	movzx  esi,bp
c0015b0c:	0f 83 a7 00 00 00    	jae    c0015bb9 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0015b12:	6b f6 28             	imul   esi,esi,0x28
c0015b15:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015b19:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015b1c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015b20:	50                   	push   eax
c0015b21:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0015b25:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015b29:	8b 16                	mov    edx,DWORD PTR [esi]
c0015b2b:	6b c0 28             	imul   eax,eax,0x28
c0015b2e:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0015b32:	89 d0                	mov    eax,edx
c0015b34:	31 d2                	xor    edx,edx
c0015b36:	52                   	push   edx
c0015b37:	50                   	push   eax
c0015b38:	53                   	push   ebx
c0015b39:	e8 fe 2b ff ff       	call   c000873c <File::seek(unsigned long long)>
c0015b3e:	83 c4 0c             	add    esp,0xc
c0015b41:	6a 20                	push   0x20
c0015b43:	6a 00                	push   0x0
c0015b45:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015b49:	52                   	push   edx
c0015b4a:	e8 a1 a9 fe ff       	call   c00004f0 <memset>
c0015b4f:	58                   	pop    eax
c0015b50:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b52:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0015b56:	51                   	push   ecx
c0015b57:	8d 54 24 40          	lea    edx,[esp+0x40]
c0015b5b:	52                   	push   edx
c0015b5c:	6a 00                	push   0x0
c0015b5e:	6a 1f                	push   0x1f
c0015b60:	53                   	push   ebx
c0015b61:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015b64:	83 c4 18             	add    esp,0x18
c0015b67:	68 96 98 02 c0       	push   0xc0029896
c0015b6c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015b70:	52                   	push   edx
c0015b71:	e8 0a ac fe ff       	call   c0000780 <strcmp>
c0015b76:	83 c4 10             	add    esp,0x10
c0015b79:	85 c0                	test   eax,eax
c0015b7b:	75 0f                	jne    c0015b8c <Thr::loadKernelSymbolTable(char const*)+0x185>
c0015b7d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015b80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015b84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015b8c:	50                   	push   eax
c0015b8d:	50                   	push   eax
c0015b8e:	68 9e 98 02 c0       	push   0xc002989e
c0015b93:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0015b97:	50                   	push   eax
c0015b98:	e8 e3 ab fe ff       	call   c0000780 <strcmp>
c0015b9d:	83 c4 10             	add    esp,0x10
c0015ba0:	85 c0                	test   eax,eax
c0015ba2:	75 0f                	jne    c0015bb3 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0015ba4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015ba7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015bab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015baf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015bb3:	45                   	inc    ebp
c0015bb4:	e9 4c ff ff ff       	jmp    c0015b05 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0015bb9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015bbe:	75 10                	jne    c0015bd0 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0015bc0:	83 ec 0c             	sub    esp,0xc
c0015bc3:	68 a6 98 02 c0       	push   0xc00298a6
c0015bc8:	e8 df a3 ff ff       	call   c000ffac <KePanic(char const*)>
c0015bcd:	83 c4 10             	add    esp,0x10
c0015bd0:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0015bd5:	75 10                	jne    c0015be7 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0015bd7:	83 ec 0c             	sub    esp,0xc
c0015bda:	68 a6 98 02 c0       	push   0xc00298a6
c0015bdf:	e8 c8 a3 ff ff       	call   c000ffac <KePanic(char const*)>
c0015be4:	83 c4 10             	add    esp,0x10
c0015be7:	50                   	push   eax
c0015be8:	31 d2                	xor    edx,edx
c0015bea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bee:	52                   	push   edx
c0015bef:	50                   	push   eax
c0015bf0:	53                   	push   ebx
c0015bf1:	e8 46 2b ff ff       	call   c000873c <File::seek(unsigned long long)>
c0015bf6:	5a                   	pop    edx
c0015bf7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015bfb:	e8 58 9f ff ff       	call   c000fb58 <malloc>
c0015c00:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015c04:	31 c9                	xor    ecx,ecx
c0015c06:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015c0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c0c:	5e                   	pop    esi
c0015c0d:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0015c11:	55                   	push   ebp
c0015c12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c16:	51                   	push   ecx
c0015c17:	52                   	push   edx
c0015c18:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015c1c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0015c20:	53                   	push   ebx
c0015c21:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015c24:	83 c4 14             	add    esp,0x14
c0015c27:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015c2b:	e8 28 9f ff ff       	call   c000fb58 <malloc>
c0015c30:	89 c6                	mov    esi,eax
c0015c32:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c34:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015c37:	56                   	push   esi
c0015c38:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0015c3c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015c40:	51                   	push   ecx
c0015c41:	52                   	push   edx
c0015c42:	53                   	push   ebx
c0015c43:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015c46:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015c4a:	83 c4 1c             	add    esp,0x1c
c0015c4d:	8b 15 00 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032300
c0015c53:	c1 e8 04             	shr    eax,0x4
c0015c56:	89 04 95 a0 22 03 c0 	mov    DWORD PTR [edx*4-0x3ffcdd60],eax
c0015c5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015c61:	31 d2                	xor    edx,edx
c0015c63:	52                   	push   edx
c0015c64:	50                   	push   eax
c0015c65:	53                   	push   ebx
c0015c66:	e8 d1 2a ff ff       	call   c000873c <File::seek(unsigned long long)>
c0015c6b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015c6d:	31 d2                	xor    edx,edx
c0015c6f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015c72:	56                   	push   esi
c0015c73:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015c77:	52                   	push   edx
c0015c78:	50                   	push   eax
c0015c79:	53                   	push   ebx
c0015c7a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015c7d:	83 c4 14             	add    esp,0x14
c0015c80:	53                   	push   ebx
c0015c81:	e8 56 2a ff ff       	call   c00086dc <File::close()>
c0015c86:	5d                   	pop    ebp
c0015c87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015c8b:	e8 d8 9e ff ff       	call   c000fb68 <free>
c0015c90:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015c93:	e8 d0 9e ff ff       	call   c000fb68 <free>
c0015c98:	a1 00 23 03 c0       	mov    eax,ds:0xc0032300
c0015c9d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015ca1:	83 c4 10             	add    esp,0x10
c0015ca4:	89 34 85 c0 22 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdd40],esi
c0015cab:	8d 50 01             	lea    edx,[eax+0x1]
c0015cae:	89 0c 85 e0 22 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdd20],ecx
c0015cb5:	b0 01                	mov    al,0x1
c0015cb7:	89 15 00 23 03 c0    	mov    DWORD PTR ds:0xc0032300,edx
c0015cbd:	83 c4 5c             	add    esp,0x5c
c0015cc0:	5b                   	pop    ebx
c0015cc1:	5e                   	pop    esi
c0015cc2:	5f                   	pop    edi
c0015cc3:	5d                   	pop    ebp
c0015cc4:	c3                   	ret    

c0015cc5 <KeIsELFValid(Elf32_Ehdr*)>:
c0015cc5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015cc9:	31 c0                	xor    eax,eax
c0015ccb:	80 3a 7f             	cmp    BYTE PTR [edx],0x7f
c0015cce:	75 13                	jne    c0015ce3 <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c0015cd0:	80 7a 01 45          	cmp    BYTE PTR [edx+0x1],0x45
c0015cd4:	75 0d                	jne    c0015ce3 <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c0015cd6:	80 7a 02 4c          	cmp    BYTE PTR [edx+0x2],0x4c
c0015cda:	75 07                	jne    c0015ce3 <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c0015cdc:	80 7a 03 46          	cmp    BYTE PTR [edx+0x3],0x46
c0015ce0:	0f 94 c0             	sete   al
c0015ce3:	c3                   	ret    

c0015ce4 <KeGetELFSectionHeader(unsigned char*, int)>:
c0015ce4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ce8:	6b 54 24 08 28       	imul   edx,DWORD PTR [esp+0x8],0x28
c0015ced:	03 50 20             	add    edx,DWORD PTR [eax+0x20]
c0015cf0:	01 d0                	add    eax,edx
c0015cf2:	c3                   	ret    

c0015cf3 <KeGetELFProgramHeader(unsigned char*, int)>:
c0015cf3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015cf7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015cfb:	c1 e0 05             	shl    eax,0x5
c0015cfe:	03 42 1c             	add    eax,DWORD PTR [edx+0x1c]
c0015d01:	01 d0                	add    eax,edx
c0015d03:	c3                   	ret    

c0015d04 <KeLookupELFString(unsigned char*, int)>:
c0015d04:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015d08:	31 c0                	xor    eax,eax
c0015d0a:	0f b7 51 32          	movzx  edx,WORD PTR [ecx+0x32]
c0015d0e:	85 d2                	test   edx,edx
c0015d10:	74 14                	je     c0015d26 <KeLookupELFString(unsigned char*, int)+0x22>
c0015d12:	52                   	push   edx
c0015d13:	51                   	push   ecx
c0015d14:	e8 cb ff ff ff       	call   c0015ce4 <KeGetELFSectionHeader(unsigned char*, int)>
c0015d19:	5a                   	pop    edx
c0015d1a:	5a                   	pop    edx
c0015d1b:	03 48 10             	add    ecx,DWORD PTR [eax+0x10]
c0015d1e:	89 c8                	mov    eax,ecx
c0015d20:	74 04                	je     c0015d26 <KeLookupELFString(unsigned char*, int)+0x22>
c0015d22:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0015d26:	c3                   	ret    

c0015d27 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)>:
c0015d27:	55                   	push   ebp
c0015d28:	31 ed                	xor    ebp,ebp
c0015d2a:	57                   	push   edi
c0015d2b:	56                   	push   esi
c0015d2c:	53                   	push   ebx
c0015d2d:	83 ec 1c             	sub    esp,0x1c
c0015d30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d34:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015d37:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015d3b:	89 04 24             	mov    DWORD PTR [esp],eax
c0015d3e:	0f b6 44 24 34       	movzx  eax,BYTE PTR [esp+0x34]
c0015d43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d4b:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
c0015d4f:	39 e8                	cmp    eax,ebp
c0015d51:	7e 79                	jle    c0015dcc <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0xa5>
c0015d53:	55                   	push   ebp
c0015d54:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015d58:	e8 96 ff ff ff       	call   c0015cf3 <KeGetELFProgramHeader(unsigned char*, int)>
c0015d5d:	5a                   	pop    edx
c0015d5e:	59                   	pop    ecx
c0015d5f:	83 38 01             	cmp    DWORD PTR [eax],0x1
c0015d62:	75 62                	jne    c0015dc6 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x9f>
c0015d64:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c0015d67:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015d6c:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
c0015d6f:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0015d72:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0015d76:	75 22                	jne    c0015d9a <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x73>
c0015d78:	83 ec 0c             	sub    esp,0xc
c0015d7b:	01 f3                	add    ebx,esi
c0015d7d:	68 c0 98 02 c0       	push   0xc00298c0
c0015d82:	e8 25 a2 ff ff       	call   c000ffac <KePanic(char const*)>
c0015d87:	03 5c 24 18          	add    ebx,DWORD PTR [esp+0x18]
c0015d8b:	83 c4 10             	add    esp,0x10
c0015d8e:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0015d91:	0f 43 1c 24          	cmovae ebx,DWORD PTR [esp]
c0015d95:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d98:	eb 2c                	jmp    c0015dc6 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x9f>
c0015d9a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015d9e:	89 d9                	mov    ecx,ebx
c0015da0:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0015da4:	01 f2                	add    edx,esi
c0015da6:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015daa:	03 70 04             	add    esi,DWORD PTR [eax+0x4]
c0015dad:	89 d7                	mov    edi,edx
c0015daf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015db1:	50                   	push   eax
c0015db2:	01 da                	add    edx,ebx
c0015db4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015db8:	29 d8                	sub    eax,ebx
c0015dba:	50                   	push   eax
c0015dbb:	6a 00                	push   0x0
c0015dbd:	52                   	push   edx
c0015dbe:	e8 2d a7 fe ff       	call   c00004f0 <memset>
c0015dc3:	83 c4 10             	add    esp,0x10
c0015dc6:	45                   	inc    ebp
c0015dc7:	e9 7b ff ff ff       	jmp    c0015d47 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x20>
c0015dcc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015dcf:	83 c4 1c             	add    esp,0x1c
c0015dd2:	5b                   	pop    ebx
c0015dd3:	5e                   	pop    esi
c0015dd4:	5f                   	pop    edi
c0015dd5:	5d                   	pop    ebp
c0015dd6:	c3                   	ret    

c0015dd7 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)>:
c0015dd7:	57                   	push   edi
c0015dd8:	56                   	push   esi
c0015dd9:	53                   	push   ebx
c0015dda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015dde:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015de2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015de6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015dea:	85 c0                	test   eax,eax
c0015dec:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015def:	74 04                	je     c0015df5 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x1e>
c0015df1:	85 db                	test   ebx,ebx
c0015df3:	75 05                	jne    c0015dfa <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x23>
c0015df5:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0015df8:	eb 5c                	jmp    c0015e56 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x7f>
c0015dfa:	50                   	push   eax
c0015dfb:	51                   	push   ecx
c0015dfc:	e8 e3 fe ff ff       	call   c0015ce4 <KeGetELFSectionHeader(unsigned char*, int)>
c0015e01:	5f                   	pop    edi
c0015e02:	5a                   	pop    edx
c0015e03:	31 d2                	xor    edx,edx
c0015e05:	89 c7                	mov    edi,eax
c0015e07:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015e0a:	f7 77 24             	div    DWORD PTR [edi+0x24]
c0015e0d:	39 c3                	cmp    ebx,eax
c0015e0f:	73 e4                	jae    c0015df5 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x1e>
c0015e11:	c1 e3 04             	shl    ebx,0x4
c0015e14:	03 5f 10             	add    ebx,DWORD PTR [edi+0x10]
c0015e17:	01 cb                	add    ebx,ecx
c0015e19:	0f b7 53 0e          	movzx  edx,WORD PTR [ebx+0xe]
c0015e1d:	85 d2                	test   edx,edx
c0015e1f:	75 39                	jne    c0015e5a <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x83>
c0015e21:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0015e24:	51                   	push   ecx
c0015e25:	e8 ba fe ff ff       	call   c0015ce4 <KeGetELFSectionHeader(unsigned char*, int)>
c0015e2a:	52                   	push   edx
c0015e2b:	03 0b                	add    ecx,DWORD PTR [ebx]
c0015e2d:	03 48 10             	add    ecx,DWORD PTR [eax+0x10]
c0015e30:	51                   	push   ecx
c0015e31:	e8 82 fb ff ff       	call   c00159b8 <Thr::getAddressOfKernelSymbol(char const*)>
c0015e36:	83 c4 10             	add    esp,0x10
c0015e39:	85 c0                	test   eax,eax
c0015e3b:	75 32                	jne    c0015e6f <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c0015e3d:	f6 43 0c 20          	test   BYTE PTR [ebx+0xc],0x20
c0015e41:	75 03                	jne    c0015e46 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x6f>
c0015e43:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0015e46:	83 ec 0c             	sub    esp,0xc
c0015e49:	68 e9 98 02 c0       	push   0xc00298e9
c0015e4e:	e8 13 11 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0015e53:	83 c4 10             	add    esp,0x10
c0015e56:	31 c0                	xor    eax,eax
c0015e58:	eb 15                	jmp    c0015e6f <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c0015e5a:	81 fa f1 ff 00 00    	cmp    edx,0xfff1
c0015e60:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0015e63:	74 0a                	je     c0015e6f <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c0015e65:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015e69:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0015e6d:	01 d0                	add    eax,edx
c0015e6f:	5b                   	pop    ebx
c0015e70:	5e                   	pop    esi
c0015e71:	5f                   	pop    edi
c0015e72:	c3                   	ret    

c0015e73 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)>:
c0015e73:	55                   	push   ebp
c0015e74:	57                   	push   edi
c0015e75:	56                   	push   esi
c0015e76:	53                   	push   ebx
c0015e77:	83 ec 1c             	sub    esp,0x1c
c0015e7a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0015e7e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0015e82:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0015e86:	8b 69 18             	mov    ebp,DWORD PTR [ecx+0x18]
c0015e89:	8b 1e                	mov    ebx,DWORD PTR [esi]
c0015e8b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0015e8e:	29 ef                	sub    edi,ebp
c0015e90:	01 fb                	add    ebx,edi
c0015e92:	c1 ea 08             	shr    edx,0x8
c0015e95:	74 2d                	je     c0015ec4 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x51>
c0015e97:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015e9c:	50                   	push   eax
c0015e9d:	50                   	push   eax
c0015e9e:	55                   	push   ebp
c0015e9f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015ea3:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0015ea7:	50                   	push   eax
c0015ea8:	52                   	push   edx
c0015ea9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015ead:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0015eb0:	51                   	push   ecx
c0015eb1:	e8 21 ff ff ff       	call   c0015dd7 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)>
c0015eb6:	83 c4 20             	add    esp,0x20
c0015eb9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015ebe:	74 06                	je     c0015ec6 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x53>
c0015ec0:	31 c0                	xor    eax,eax
c0015ec2:	eb 27                	jmp    c0015eeb <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x78>
c0015ec4:	31 c0                	xor    eax,eax
c0015ec6:	0f b6 56 04          	movzx  edx,BYTE PTR [esi+0x4]
c0015eca:	83 fa 01             	cmp    edx,0x1
c0015ecd:	75 04                	jne    c0015ed3 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x60>
c0015ecf:	01 03                	add    DWORD PTR [ebx],eax
c0015ed1:	eb 16                	jmp    c0015ee9 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x76>
c0015ed3:	83 fa 02             	cmp    edx,0x2
c0015ed6:	75 08                	jne    c0015ee0 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x6d>
c0015ed8:	03 03                	add    eax,DWORD PTR [ebx]
c0015eda:	29 d8                	sub    eax,ebx
c0015edc:	89 03                	mov    DWORD PTR [ebx],eax
c0015ede:	eb 09                	jmp    c0015ee9 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x76>
c0015ee0:	31 c0                	xor    eax,eax
c0015ee2:	83 fa 08             	cmp    edx,0x8
c0015ee5:	75 04                	jne    c0015eeb <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x78>
c0015ee7:	01 3b                	add    DWORD PTR [ebx],edi
c0015ee9:	b0 01                	mov    al,0x1
c0015eeb:	83 c4 1c             	add    esp,0x1c
c0015eee:	5b                   	pop    ebx
c0015eef:	5e                   	pop    esi
c0015ef0:	5f                   	pop    edi
c0015ef1:	5d                   	pop    ebp
c0015ef2:	c3                   	ret    

c0015ef3 <KePerformRelocations(unsigned char*, unsigned long)>:
c0015ef3:	55                   	push   ebp
c0015ef4:	31 ed                	xor    ebp,ebp
c0015ef6:	57                   	push   edi
c0015ef7:	56                   	push   esi
c0015ef8:	53                   	push   ebx
c0015ef9:	83 ec 1c             	sub    esp,0x1c
c0015efc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015f00:	0f b7 46 30          	movzx  eax,WORD PTR [esi+0x30]
c0015f04:	39 e8                	cmp    eax,ebp
c0015f06:	0f 8e 92 00 00 00    	jle    c0015f9e <KePerformRelocations(unsigned char*, unsigned long)+0xab>
c0015f0c:	55                   	push   ebp
c0015f0d:	56                   	push   esi
c0015f0e:	e8 d1 fd ff ff       	call   c0015ce4 <KeGetELFSectionHeader(unsigned char*, int)>
c0015f13:	5a                   	pop    edx
c0015f14:	59                   	pop    ecx
c0015f15:	89 c3                	mov    ebx,eax
c0015f17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015f1a:	83 f8 09             	cmp    eax,0x9
c0015f1d:	75 64                	jne    c0015f83 <KePerformRelocations(unsigned char*, unsigned long)+0x90>
c0015f1f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015f22:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0015f25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015f29:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015f2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015f30:	ff 33                	push   DWORD PTR [ebx]
c0015f32:	56                   	push   esi
c0015f33:	e8 cc fd ff ff       	call   c0015d04 <KeLookupELFString(unsigned char*, int)>
c0015f38:	68 0a 99 02 c0       	push   0xc002990a
c0015f3d:	50                   	push   eax
c0015f3e:	e8 3d a8 fe ff       	call   c0000780 <strcmp>
c0015f43:	83 c4 10             	add    esp,0x10
c0015f46:	85 c0                	test   eax,eax
c0015f48:	89 c1                	mov    ecx,eax
c0015f4a:	75 4c                	jne    c0015f98 <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c0015f4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f50:	31 d2                	xor    edx,edx
c0015f52:	01 f7                	add    edi,esi
c0015f54:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0015f58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015f5c:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0015f60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015f64:	7d 32                	jge    c0015f98 <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c0015f66:	57                   	push   edi
c0015f67:	83 c7 08             	add    edi,0x8
c0015f6a:	53                   	push   ebx
c0015f6b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015f6f:	56                   	push   esi
c0015f70:	e8 fe fe ff ff       	call   c0015e73 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)>
c0015f75:	83 c4 10             	add    esp,0x10
c0015f78:	84 c0                	test   al,al
c0015f7a:	74 24                	je     c0015fa0 <KePerformRelocations(unsigned char*, unsigned long)+0xad>
c0015f7c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015f80:	41                   	inc    ecx
c0015f81:	eb d9                	jmp    c0015f5c <KePerformRelocations(unsigned char*, unsigned long)+0x69>
c0015f83:	83 f8 04             	cmp    eax,0x4
c0015f86:	75 10                	jne    c0015f98 <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c0015f88:	83 ec 0c             	sub    esp,0xc
c0015f8b:	68 13 99 02 c0       	push   0xc0029913
c0015f90:	e8 17 a0 ff ff       	call   c000ffac <KePanic(char const*)>
c0015f95:	83 c4 10             	add    esp,0x10
c0015f98:	45                   	inc    ebp
c0015f99:	e9 62 ff ff ff       	jmp    c0015f00 <KePerformRelocations(unsigned char*, unsigned long)+0xd>
c0015f9e:	b0 01                	mov    al,0x1
c0015fa0:	83 c4 1c             	add    esp,0x1c
c0015fa3:	5b                   	pop    ebx
c0015fa4:	5e                   	pop    esi
c0015fa5:	5f                   	pop    edi
c0015fa6:	5d                   	pop    ebp
c0015fa7:	c3                   	ret    

c0015fa8 <KeLoadELF(unsigned char*, bool, unsigned long)>:
c0015fa8:	57                   	push   edi
c0015fa9:	56                   	push   esi
c0015faa:	53                   	push   ebx
c0015fab:	83 ec 10             	sub    esp,0x10
c0015fae:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015fb2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0015fb6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0015fba:	53                   	push   ebx
c0015fbb:	e8 05 fd ff ff       	call   c0015cc5 <KeIsELFValid(Elf32_Ehdr*)>
c0015fc0:	59                   	pop    ecx
c0015fc1:	84 c0                	test   al,al
c0015fc3:	75 04                	jne    c0015fc9 <KeLoadELF(unsigned char*, bool, unsigned long)+0x21>
c0015fc5:	31 c0                	xor    eax,eax
c0015fc7:	eb 4d                	jmp    c0016016 <KeLoadELF(unsigned char*, bool, unsigned long)+0x6e>
c0015fc9:	81 e6 ff 00 00 00    	and    esi,0xff
c0015fcf:	74 07                	je     c0015fd8 <KeLoadELF(unsigned char*, bool, unsigned long)+0x30>
c0015fd1:	66 83 7b 30 00       	cmp    WORD PTR [ebx+0x30],0x0
c0015fd6:	74 ed                	je     c0015fc5 <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c0015fd8:	66 83 7b 2c 00       	cmp    WORD PTR [ebx+0x2c],0x0
c0015fdd:	74 e6                	je     c0015fc5 <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c0015fdf:	52                   	push   edx
c0015fe0:	57                   	push   edi
c0015fe1:	56                   	push   esi
c0015fe2:	53                   	push   ebx
c0015fe3:	e8 3f fd ff ff       	call   c0015d27 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)>
c0015fe8:	59                   	pop    ecx
c0015fe9:	5a                   	pop    edx
c0015fea:	50                   	push   eax
c0015feb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015fef:	68 34 99 02 c0       	push   0xc0029934
c0015ff4:	e8 6d 0f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0015ff9:	83 c4 10             	add    esp,0x10
c0015ffc:	85 f6                	test   esi,esi
c0015ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016002:	74 12                	je     c0016016 <KeLoadELF(unsigned char*, bool, unsigned long)+0x6e>
c0016004:	50                   	push   eax
c0016005:	50                   	push   eax
c0016006:	57                   	push   edi
c0016007:	53                   	push   ebx
c0016008:	e8 e6 fe ff ff       	call   c0015ef3 <KePerformRelocations(unsigned char*, unsigned long)>
c001600d:	83 c4 10             	add    esp,0x10
c0016010:	84 c0                	test   al,al
c0016012:	74 b1                	je     c0015fc5 <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c0016014:	89 f8                	mov    eax,edi
c0016016:	83 c4 10             	add    esp,0x10
c0016019:	5b                   	pop    ebx
c001601a:	5e                   	pop    esi
c001601b:	5f                   	pop    edi
c001601c:	c3                   	ret    

c001601d <KeLoadDriver(char const*)>:
c001601d:	55                   	push   ebp
c001601e:	57                   	push   edi
c001601f:	56                   	push   esi
c0016020:	53                   	push   ebx
c0016021:	83 ec 34             	sub    esp,0x34
c0016024:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0016028:	57                   	push   edi
c0016029:	68 58 99 02 c0       	push   0xc0029958
c001602e:	e8 33 0f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016033:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001603a:	e8 19 9b ff ff       	call   c000fb58 <malloc>
c001603f:	83 c4 0c             	add    esp,0xc
c0016042:	ff 35 58 23 03 c0    	push   DWORD PTR ds:0xc0032358
c0016048:	57                   	push   edi
c0016049:	50                   	push   eax
c001604a:	89 c6                	mov    esi,eax
c001604c:	e8 0f 26 ff ff       	call   c0008660 <File::File(char const*, Process*)>
c0016051:	83 c4 10             	add    esp,0x10
c0016054:	85 f6                	test   esi,esi
c0016056:	0f 84 20 01 00 00    	je     c001617c <KeLoadDriver(char const*)+0x15f>
c001605c:	50                   	push   eax
c001605d:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016061:	50                   	push   eax
c0016062:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016066:	50                   	push   eax
c0016067:	56                   	push   esi
c0016068:	e8 13 29 ff ff       	call   c0008980 <File::stat(unsigned long long*, bool*)>
c001606d:	83 c4 10             	add    esp,0x10
c0016070:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0016075:	0f 85 01 01 00 00    	jne    c001617c <KeLoadDriver(char const*)+0x15f>
c001607b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001607f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016083:	89 d1                	mov    ecx,edx
c0016085:	09 c1                	or     ecx,eax
c0016087:	0f 84 ef 00 00 00    	je     c001617c <KeLoadDriver(char const*)+0x15f>
c001608d:	05 ff 0f 00 00       	add    eax,0xfff
c0016092:	51                   	push   ecx
c0016093:	83 d2 00             	adc    edx,0x0
c0016096:	0f ac d0 0c          	shrd   eax,edx,0xc
c001609a:	6a 03                	push   0x3
c001609c:	50                   	push   eax
c001609d:	ff 35 90 22 03 c0    	push   DWORD PTR ds:0xc0032290
c00160a3:	e8 2c dc ff ff       	call   c0013cd4 <VAS::allocatePages(int, int)>
c00160a8:	83 c4 0c             	add    esp,0xc
c00160ab:	50                   	push   eax
c00160ac:	89 c3                	mov    ebx,eax
c00160ae:	57                   	push   edi
c00160af:	68 6e 99 02 c0       	push   0xc002996e
c00160b4:	e8 ad 0e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00160b9:	5f                   	pop    edi
c00160ba:	5d                   	pop    ebp
c00160bb:	6a 01                	push   0x1
c00160bd:	56                   	push   esi
c00160be:	e8 bb 25 ff ff       	call   c000867e <File::open(FileOpenMode)>
c00160c3:	83 c4 10             	add    esp,0x10
c00160c6:	85 c0                	test   eax,eax
c00160c8:	74 11                	je     c00160db <KeLoadDriver(char const*)+0xbe>
c00160ca:	8b 06                	mov    eax,DWORD PTR [esi]
c00160cc:	83 ec 0c             	sub    esp,0xc
c00160cf:	56                   	push   esi
c00160d0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00160d3:	83 c4 10             	add    esp,0x10
c00160d6:	e9 a1 00 00 00       	jmp    c001617c <KeLoadDriver(char const*)+0x15f>
c00160db:	83 ec 0c             	sub    esp,0xc
c00160de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00160e2:	e8 71 9a ff ff       	call   c000fb58 <malloc>
c00160e7:	5d                   	pop    ebp
c00160e8:	31 ed                	xor    ebp,ebp
c00160ea:	8d 54 24 20          	lea    edx,[esp+0x20]
c00160ee:	89 c7                	mov    edi,eax
c00160f0:	8b 06                	mov    eax,DWORD PTR [esi]
c00160f2:	52                   	push   edx
c00160f3:	57                   	push   edi
c00160f4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00160f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00160fc:	56                   	push   esi
c00160fd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016100:	83 c4 14             	add    esp,0x14
c0016103:	56                   	push   esi
c0016104:	e8 d3 25 ff ff       	call   c00086dc <File::close()>
c0016109:	83 c4 0c             	add    esp,0xc
c001610c:	53                   	push   ebx
c001610d:	6a 01                	push   0x1
c001610f:	57                   	push   edi
c0016110:	e8 93 fe ff ff       	call   c0015fa8 <KeLoadELF(unsigned char*, bool, unsigned long)>
c0016115:	83 c4 10             	add    esp,0x10
c0016118:	89 c6                	mov    esi,eax
c001611a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001611e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016122:	05 ff 0f 00 00       	add    eax,0xfff
c0016127:	83 d2 00             	adc    edx,0x0
c001612a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001612e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016132:	c1 ea 0c             	shr    edx,0xc
c0016135:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016139:	ba 00 00 00 00       	mov    edx,0x0
c001613e:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0016142:	89 d0                	mov    eax,edx
c0016144:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0016148:	73 34                	jae    c001617e <KeLoadDriver(char const*)+0x161>
c001614a:	50                   	push   eax
c001614b:	50                   	push   eax
c001614c:	89 e8                	mov    eax,ebp
c001614e:	c1 e0 0c             	shl    eax,0xc
c0016151:	01 d8                	add    eax,ebx
c0016153:	50                   	push   eax
c0016154:	ff 35 90 22 03 c0    	push   DWORD PTR ds:0xc0032290
c001615a:	e8 73 d6 ff ff       	call   c00137d2 <VAS::getPageTableEntry(unsigned long)>
c001615f:	83 c4 10             	add    esp,0x10
c0016162:	8b 00                	mov    eax,DWORD PTR [eax]
c0016164:	a8 60                	test   al,0x60
c0016166:	75 11                	jne    c0016179 <KeLoadDriver(char const*)+0x15c>
c0016168:	83 ec 0c             	sub    esp,0xc
c001616b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016170:	50                   	push   eax
c0016171:	e8 c7 9f ff ff       	call   c001013d <Phys::freePage(unsigned long)>
c0016176:	83 c4 10             	add    esp,0x10
c0016179:	45                   	inc    ebp
c001617a:	eb 9e                	jmp    c001611a <KeLoadDriver(char const*)+0xfd>
c001617c:	31 f6                	xor    esi,esi
c001617e:	83 c4 2c             	add    esp,0x2c
c0016181:	89 f0                	mov    eax,esi
c0016183:	5b                   	pop    ebx
c0016184:	5e                   	pop    esi
c0016185:	5f                   	pop    edi
c0016186:	5d                   	pop    ebp
c0016187:	c3                   	ret    

c0016188 <KeExecuteDriver(unsigned long, void*)>:
c0016188:	56                   	push   esi
c0016189:	53                   	push   ebx
c001618a:	51                   	push   ecx
c001618b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001618f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016193:	85 db                	test   ebx,ebx
c0016195:	75 10                	jne    c00161a7 <KeExecuteDriver(unsigned long, void*)+0x1f>
c0016197:	83 ec 0c             	sub    esp,0xc
c001619a:	68 7a 99 02 c0       	push   0xc002997a
c001619f:	e8 08 9e ff ff       	call   c000ffac <KePanic(char const*)>
c00161a4:	83 c4 10             	add    esp,0x10
c00161a7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00161ab:	89 d8                	mov    eax,ebx
c00161ad:	5a                   	pop    edx
c00161ae:	5b                   	pop    ebx
c00161af:	5e                   	pop    esi
c00161b0:	ff e0                	jmp    eax

c00161b2 <KeLoadAndExecuteDriver(char const*, void*, bool)>:
c00161b2:	57                   	push   edi
c00161b3:	56                   	push   esi
c00161b4:	53                   	push   ebx
c00161b5:	81 ec 0c 01 00 00    	sub    esp,0x10c
c00161bb:	8b b4 24 1c 01 00 00 	mov    esi,DWORD PTR [esp+0x11c]
c00161c2:	8b bc 24 24 01 00 00 	mov    edi,DWORD PTR [esp+0x124]
c00161c9:	56                   	push   esi
c00161ca:	e8 4e fe ff ff       	call   c001601d <KeLoadDriver(char const*)>
c00161cf:	83 c4 10             	add    esp,0x10
c00161d2:	85 c0                	test   eax,eax
c00161d4:	74 16                	je     c00161ec <KeLoadAndExecuteDriver(char const*, void*, bool)+0x3a>
c00161d6:	53                   	push   ebx
c00161d7:	53                   	push   ebx
c00161d8:	b3 01                	mov    bl,0x1
c00161da:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00161e1:	50                   	push   eax
c00161e2:	e8 a1 ff ff ff       	call   c0016188 <KeExecuteDriver(unsigned long, void*)>
c00161e7:	83 c4 10             	add    esp,0x10
c00161ea:	eb 2d                	jmp    c0016219 <KeLoadAndExecuteDriver(char const*, void*, bool)+0x67>
c00161ec:	89 fb                	mov    ebx,edi
c00161ee:	84 db                	test   bl,bl
c00161f0:	74 27                	je     c0016219 <KeLoadAndExecuteDriver(char const*, void*, bool)+0x67>
c00161f2:	50                   	push   eax
c00161f3:	50                   	push   eax
c00161f4:	68 a4 99 02 c0       	push   0xc00299a4
c00161f9:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00161fd:	53                   	push   ebx
c00161fe:	e8 4d a4 fe ff       	call   c0000650 <strcpy>
c0016203:	5a                   	pop    edx
c0016204:	59                   	pop    ecx
c0016205:	56                   	push   esi
c0016206:	53                   	push   ebx
c0016207:	e8 64 a6 fe ff       	call   c0000870 <strcat>
c001620c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001620f:	31 db                	xor    ebx,ebx
c0016211:	e8 96 9d ff ff       	call   c000ffac <KePanic(char const*)>
c0016216:	83 c4 10             	add    esp,0x10
c0016219:	81 c4 00 01 00 00    	add    esp,0x100
c001621f:	88 d8                	mov    al,bl
c0016221:	5b                   	pop    ebx
c0016222:	5e                   	pop    esi
c0016223:	5f                   	pop    edi
c0016224:	c3                   	ret    

c0016225 <KeProcessExec(Process*, char const*)>:
c0016225:	56                   	push   esi
c0016226:	53                   	push   ebx
c0016227:	83 ec 04             	sub    esp,0x4
c001622a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001622e:	8b b3 b2 05 00 00    	mov    esi,DWORD PTR [ebx+0x5b2]
c0016234:	85 f6                	test   esi,esi
c0016236:	74 16                	je     c001624e <KeProcessExec(Process*, char const*)+0x29>
c0016238:	83 ec 0c             	sub    esp,0xc
c001623b:	56                   	push   esi
c001623c:	e8 23 d8 ff ff       	call   c0013a64 <VAS::~VAS()>
c0016241:	58                   	pop    eax
c0016242:	5a                   	pop    edx
c0016243:	6a 14                	push   0x14
c0016245:	56                   	push   esi
c0016246:	e8 15 75 ff ff       	call   c000d760 <operator delete(void*, unsigned long)>
c001624b:	83 c4 10             	add    esp,0x10
c001624e:	83 ec 0c             	sub    esp,0xc
c0016251:	6a 14                	push   0x14
c0016253:	e8 00 99 ff ff       	call   c000fb58 <malloc>
c0016258:	89 c6                	mov    esi,eax
c001625a:	58                   	pop    eax
c001625b:	5a                   	pop    edx
c001625c:	6a 00                	push   0x0
c001625e:	56                   	push   esi
c001625f:	e8 ac dc ff ff       	call   c0013f10 <VAS::VAS(bool)>
c0016264:	89 b3 b2 05 00 00    	mov    DWORD PTR [ebx+0x5b2],esi
c001626a:	59                   	pop    ecx
c001626b:	5e                   	pop    esi
c001626c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016270:	50                   	push   eax
c0016271:	53                   	push   ebx
c0016272:	e8 8d f4 ff ff       	call   c0015704 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016277:	83 c4 14             	add    esp,0x14
c001627a:	31 c0                	xor    eax,eax
c001627c:	5b                   	pop    ebx
c001627d:	5e                   	pop    esi
c001627e:	c3                   	ret    
c001627f:	90                   	nop

c0016280 <userModeEntryPoint(void*)>:
c0016280:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c0016288:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001628d:	85 c0                	test   eax,eax
c001628f:	75 03                	jne    c0016294 <userModeEntryPoint(void*)+0x14>
c0016291:	fb                   	sti    
c0016292:	66 90                	xchg   ax,ax
c0016294:	fb                   	sti    
c0016295:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001629a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001629d:	8b 80 ae 05 00 00    	mov    eax,DWORD PTR [eax+0x5ae]
c00162a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00162a7:	e9 93 9f fe ff       	jmp    c000023f <goToUsermode>

c00162ac <changeTSS>:
c00162ac:	83 ec 14             	sub    esp,0x14
c00162af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162b4:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00162b7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00162bc:	c1 e2 15             	shl    edx,0x15
c00162bf:	29 d0                	sub    eax,edx
c00162c1:	50                   	push   eax
c00162c2:	a1 08 21 03 c0       	mov    eax,ds:0xc0032108
c00162c7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00162cd:	05 68 11 00 00       	add    eax,0x1168
c00162d2:	50                   	push   eax
c00162d3:	e8 dc ca ff ff       	call   c0012db4 <TSS::setESP(unsigned long)>
c00162d8:	83 c4 1c             	add    esp,0x1c
c00162db:	c3                   	ret    

c00162dc <switchToThread(ThreadControlBlock*)>:
c00162dc:	57                   	push   edi
c00162dd:	8b 0d 2c 23 03 c0    	mov    ecx,DWORD PTR ds:0xc003232c
c00162e3:	56                   	push   esi
c00162e4:	53                   	push   ebx
c00162e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00162e9:	85 c9                	test   ecx,ecx
c00162eb:	0f 85 9b 00 00 00    	jne    c001638c <switchToThread(ThreadControlBlock*)+0xb0>
c00162f1:	0f b6 53 44          	movzx  edx,BYTE PTR [ebx+0x44]
c00162f5:	81 fa ff 00 00 00    	cmp    edx,0xff
c00162fb:	0f 84 87 00 00 00    	je     c0016388 <switchToThread(ThreadControlBlock*)+0xac>
c0016301:	b8 00 04 00 00       	mov    eax,0x400
c0016306:	29 d0                	sub    eax,edx
c0016308:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001630b:	d1 f8                	sar    eax,1
c001630d:	01 d0                	add    eax,edx
c001630f:	90                   	nop
c0016310:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016313:	e8 0d 49 00 00       	call   c001ac25 <HalQueryPerformanceCounter()>
c0016318:	a3 70 23 03 c0       	mov    ds:0xc0032370,eax
c001631d:	89 c6                	mov    esi,eax
c001631f:	89 d7                	mov    edi,edx
c0016321:	2b 35 60 23 03 c0    	sub    esi,DWORD PTR ds:0xc0032360
c0016327:	a3 60 23 03 c0       	mov    ds:0xc0032360,eax
c001632c:	1b 3d 64 23 03 c0    	sbb    edi,DWORD PTR ds:0xc0032364
c0016332:	89 35 68 23 03 c0    	mov    DWORD PTR ds:0xc0032368,esi
c0016338:	89 15 74 23 03 c0    	mov    DWORD PTR ds:0xc0032374,edx
c001633e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016344:	89 15 64 23 03 c0    	mov    DWORD PTR ds:0xc0032364,edx
c001634a:	89 3d 6c 23 03 c0    	mov    DWORD PTR ds:0xc003236c,edi
c0016350:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0016353:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0016356:	01 c6                	add    esi,eax
c0016358:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001635b:	11 d7                	adc    edi,edx
c001635d:	83 ec 0c             	sub    esp,0xc
c0016360:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0016363:	53                   	push   ebx
c0016364:	e8 0e 9f fe ff       	call   c0000277 <switchToThreadASM>
c0016369:	0f 20 c0             	mov    eax,cr0
c001636c:	83 c8 08             	or     eax,0x8
c001636f:	0f 22 c0             	mov    cr0,eax
c0016372:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016377:	83 c4 10             	add    esp,0x10
c001637a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001637e:	5b                   	pop    ebx
c001637f:	5e                   	pop    esi
c0016380:	5f                   	pop    edi
c0016381:	e9 02 f0 ff ff       	jmp    c0015388 <KeCheckAlarm(ThreadControlBlock*)>
c0016386:	66 90                	xchg   ax,ax
c0016388:	31 c0                	xor    eax,eax
c001638a:	eb 84                	jmp    c0016310 <switchToThread(ThreadControlBlock*)+0x34>
c001638c:	5b                   	pop    ebx
c001638d:	c7 05 28 23 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032328,0x1
c0016397:	5e                   	pop    esi
c0016398:	5f                   	pop    edi
c0016399:	c3                   	ret    
c001639a:	66 90                	xchg   ax,ax

c001639c <Process::addArgs(char**)>:
c001639c:	57                   	push   edi
c001639d:	56                   	push   esi
c001639e:	53                   	push   ebx
c001639f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00163a3:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00163a7:	85 f6                	test   esi,esi
c00163a9:	c7 87 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x5b6],0x0
c00163b3:	74 4f                	je     c0016404 <Process::addArgs(char**)+0x68>
c00163b5:	8b 06                	mov    eax,DWORD PTR [esi]
c00163b7:	85 c0                	test   eax,eax
c00163b9:	74 49                	je     c0016404 <Process::addArgs(char**)+0x68>
c00163bb:	31 db                	xor    ebx,ebx
c00163bd:	8d 76 00             	lea    esi,[esi+0x0]
c00163c0:	83 ec 0c             	sub    esp,0xc
c00163c3:	50                   	push   eax
c00163c4:	e8 b7 a1 fe ff       	call   c0000580 <strlen>
c00163c9:	83 c0 01             	add    eax,0x1
c00163cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00163cf:	e8 84 97 ff ff       	call   c000fb58 <malloc>
c00163d4:	89 84 9f ba 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x5ba],eax
c00163db:	5a                   	pop    edx
c00163dc:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c00163df:	83 c3 01             	add    ebx,0x1
c00163e2:	59                   	pop    ecx
c00163e3:	52                   	push   edx
c00163e4:	50                   	push   eax
c00163e5:	e8 66 a2 fe ff       	call   c0000650 <strcpy>
c00163ea:	8b 8f b6 05 00 00    	mov    ecx,DWORD PTR [edi+0x5b6]
c00163f0:	83 c4 10             	add    esp,0x10
c00163f3:	83 c1 01             	add    ecx,0x1
c00163f6:	89 8f b6 05 00 00    	mov    DWORD PTR [edi+0x5b6],ecx
c00163fc:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00163ff:	85 c0                	test   eax,eax
c0016401:	75 bd                	jne    c00163c0 <Process::addArgs(char**)+0x24>
c0016403:	90                   	nop
c0016404:	5b                   	pop    ebx
c0016405:	5e                   	pop    esi
c0016406:	5f                   	pop    edi
c0016407:	c3                   	ret    

c0016408 <Process::Process(char const*, Process*, char**)>:
c0016408:	56                   	push   esi
c0016409:	53                   	push   ebx
c001640a:	83 ec 14             	sub    esp,0x14
c001640d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016411:	05 0c 02 00 00       	add    eax,0x20c
c0016416:	bb 07 00 00 00       	mov    ebx,0x7
c001641b:	89 c6                	mov    esi,eax
c001641d:	8d 76 00             	lea    esi,[esi+0x0]
c0016420:	85 db                	test   ebx,ebx
c0016422:	78 14                	js     c0016438 <Process::Process(char const*, Process*, char**)+0x30>
c0016424:	83 ec 0c             	sub    esp,0xc
c0016427:	56                   	push   esi
c0016428:	e8 e7 0a 01 00       	call   c0026f14 <ThreadControlBlock::ThreadControlBlock()>
c001642d:	83 c4 10             	add    esp,0x10
c0016430:	83 c6 73             	add    esi,0x73
c0016433:	83 eb 01             	sub    ebx,0x1
c0016436:	eb e8                	jmp    c0016420 <Process::Process(char const*, Process*, char**)+0x18>
c0016438:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001643c:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016443:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016447:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c001644e:	83 ec 0c             	sub    esp,0xc
c0016451:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016455:	e8 2c 85 ff ff       	call   c000e986 <KeNewProcessEnv(Process*)>
c001645a:	83 c4 10             	add    esp,0x10
c001645d:	89 c2                	mov    edx,eax
c001645f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016463:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016469:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001646d:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016476:	a1 5c c5 02 c0       	mov    eax,ds:0xc002c55c
c001647b:	8d 50 01             	lea    edx,[eax+0x1]
c001647e:	89 15 5c c5 02 c0    	mov    DWORD PTR ds:0xc002c55c,edx
c0016484:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016488:	89 02                	mov    DWORD PTR [edx],eax
c001648a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0016492:	83 ec 0c             	sub    esp,0xc
c0016495:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016499:	e8 ba 96 ff ff       	call   c000fb58 <malloc>
c001649e:	83 c4 10             	add    esp,0x10
c00164a1:	89 c3                	mov    ebx,eax
c00164a3:	83 ec 08             	sub    esp,0x8
c00164a6:	6a 00                	push   0x0
c00164a8:	53                   	push   ebx
c00164a9:	e8 62 da ff ff       	call   c0013f10 <VAS::VAS(bool)>
c00164ae:	83 c4 10             	add    esp,0x10
c00164b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164b5:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c00164bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164bf:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c00164c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164cd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00164d1:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c00164d7:	e8 37 ac ff ff       	call   c0011113 <KeInitSignals()>
c00164dc:	89 c2                	mov    edx,eax
c00164de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164e2:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c00164e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164ec:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c00164f2:	85 c0                	test   eax,eax
c00164f4:	74 42                	je     c0016538 <Process::Process(char const*, Process*, char**)+0x130>
c00164f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164fa:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016500:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016506:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001650a:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016510:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016514:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001651a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016520:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016524:	05 0c 01 00 00       	add    eax,0x10c
c0016529:	83 ec 08             	sub    esp,0x8
c001652c:	52                   	push   edx
c001652d:	50                   	push   eax
c001652e:	e8 1d a1 fe ff       	call   c0000650 <strcpy>
c0016533:	83 c4 10             	add    esp,0x10
c0016536:	eb 7c                	jmp    c00165b4 <Process::Process(char const*, Process*, char**)+0x1ac>
c0016538:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0016540:	83 ec 0c             	sub    esp,0xc
c0016543:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016547:	e8 0c 96 ff ff       	call   c000fb58 <malloc>
c001654c:	83 c4 10             	add    esp,0x10
c001654f:	89 c3                	mov    ebx,eax
c0016551:	83 ec 08             	sub    esp,0x8
c0016554:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016558:	53                   	push   ebx
c0016559:	e8 76 c5 ff ff       	call   c0012ad4 <VgaText::VgaText(char const*)>
c001655e:	83 c4 10             	add    esp,0x10
c0016561:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016565:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c001656b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001656f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016575:	83 ec 0c             	sub    esp,0xc
c0016578:	50                   	push   eax
c0016579:	e8 bc bd ff ff       	call   c001233a <addToTerminalCycle(VgaText*)>
c001657e:	83 c4 10             	add    esp,0x10
c0016581:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016585:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001658b:	83 ec 0c             	sub    esp,0xc
c001658e:	50                   	push   eax
c001658f:	e8 17 c0 ff ff       	call   c00125ab <setActiveTerminal(VgaText*)>
c0016594:	83 c4 10             	add    esp,0x10
c0016597:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001659b:	05 0c 01 00 00       	add    eax,0x10c
c00165a0:	83 ec 08             	sub    esp,0x8
c00165a3:	68 b8 99 02 c0       	push   0xc00299b8
c00165a8:	50                   	push   eax
c00165a9:	e8 a2 a0 fe ff       	call   c0000650 <strcpy>
c00165ae:	83 c4 10             	add    esp,0x10
c00165b1:	8d 76 00             	lea    esi,[esi+0x0]
c00165b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165b8:	83 c0 0c             	add    eax,0xc
c00165bb:	83 ec 08             	sub    esp,0x8
c00165be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00165c2:	50                   	push   eax
c00165c3:	e8 88 a0 fe ff       	call   c0000650 <strcpy>
c00165c8:	83 c4 10             	add    esp,0x10
c00165cb:	83 ec 08             	sub    esp,0x8
c00165ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00165d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00165d6:	e8 c1 fd ff ff       	call   c001639c <Process::addArgs(char**)>
c00165db:	83 c4 10             	add    esp,0x10
c00165de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165e2:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c00165e8:	83 e2 7f             	and    edx,0x7f
c00165eb:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c00165f1:	83 ec 08             	sub    esp,0x8
c00165f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00165f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00165fc:	e8 03 f1 ff ff       	call   c0015704 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016601:	83 c4 10             	add    esp,0x10
c0016604:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016608:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001660c:	83 f0 01             	xor    eax,0x1
c001660f:	88 c2                	mov    dl,al
c0016611:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016615:	88 90 be 07 00 00    	mov    BYTE PTR [eax+0x7be],dl
c001661b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001661f:	8b 10                	mov    edx,DWORD PTR [eax]
c0016621:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016626:	52                   	push   edx
c0016627:	50                   	push   eax
c0016628:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001662c:	68 24 9a 02 c0       	push   0xc0029a24
c0016631:	e8 30 09 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016636:	83 c4 10             	add    esp,0x10
c0016639:	90                   	nop
c001663a:	83 c4 14             	add    esp,0x14
c001663d:	5b                   	pop    ebx
c001663e:	5e                   	pop    esi
c001663f:	c3                   	ret    

c0016640 <Process::Process(bool, char const*, Process*, char**)>:
c0016640:	56                   	push   esi
c0016641:	53                   	push   ebx
c0016642:	83 ec 24             	sub    esp,0x24
c0016645:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016649:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001664d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016651:	05 0c 02 00 00       	add    eax,0x20c
c0016656:	bb 07 00 00 00       	mov    ebx,0x7
c001665b:	89 c6                	mov    esi,eax
c001665d:	8d 76 00             	lea    esi,[esi+0x0]
c0016660:	85 db                	test   ebx,ebx
c0016662:	78 14                	js     c0016678 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0016664:	83 ec 0c             	sub    esp,0xc
c0016667:	56                   	push   esi
c0016668:	e8 a7 08 01 00       	call   c0026f14 <ThreadControlBlock::ThreadControlBlock()>
c001666d:	83 c4 10             	add    esp,0x10
c0016670:	83 c6 73             	add    esi,0x73
c0016673:	83 eb 01             	sub    ebx,0x1
c0016676:	eb e8                	jmp    c0016660 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0016678:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001667c:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016683:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016687:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c001668e:	83 ec 0c             	sub    esp,0xc
c0016691:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016695:	e8 ec 82 ff ff       	call   c000e986 <KeNewProcessEnv(Process*)>
c001669a:	83 c4 10             	add    esp,0x10
c001669d:	89 c2                	mov    edx,eax
c001669f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166a3:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c00166a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166ad:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c00166b6:	a1 5c c5 02 c0       	mov    eax,ds:0xc002c55c
c00166bb:	8d 50 01             	lea    edx,[eax+0x1]
c00166be:	89 15 5c c5 02 c0    	mov    DWORD PTR ds:0xc002c55c,edx
c00166c4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00166c8:	89 02                	mov    DWORD PTR [edx],eax
c00166ca:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00166d2:	83 ec 0c             	sub    esp,0xc
c00166d5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00166d9:	e8 7a 94 ff ff       	call   c000fb58 <malloc>
c00166de:	83 c4 10             	add    esp,0x10
c00166e1:	89 c3                	mov    ebx,eax
c00166e3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00166e8:	83 ec 08             	sub    esp,0x8
c00166eb:	50                   	push   eax
c00166ec:	53                   	push   ebx
c00166ed:	e8 1e d8 ff ff       	call   c0013f10 <VAS::VAS(bool)>
c00166f2:	83 c4 10             	add    esp,0x10
c00166f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166f9:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c00166ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016703:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c001670d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016711:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016715:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c001671b:	e8 f3 a9 ff ff       	call   c0011113 <KeInitSignals()>
c0016720:	89 c2                	mov    edx,eax
c0016722:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016726:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c001672c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016730:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016736:	85 c0                	test   eax,eax
c0016738:	74 42                	je     c001677c <Process::Process(bool, char const*, Process*, char**)+0x13c>
c001673a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001673e:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016744:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c001674a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001674e:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016754:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016758:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001675e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016764:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016768:	05 0c 01 00 00       	add    eax,0x10c
c001676d:	83 ec 08             	sub    esp,0x8
c0016770:	52                   	push   edx
c0016771:	50                   	push   eax
c0016772:	e8 d9 9e fe ff       	call   c0000650 <strcpy>
c0016777:	83 c4 10             	add    esp,0x10
c001677a:	eb 7c                	jmp    c00167f8 <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c001677c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0016784:	83 ec 0c             	sub    esp,0xc
c0016787:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001678b:	e8 c8 93 ff ff       	call   c000fb58 <malloc>
c0016790:	83 c4 10             	add    esp,0x10
c0016793:	89 c3                	mov    ebx,eax
c0016795:	83 ec 08             	sub    esp,0x8
c0016798:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001679c:	53                   	push   ebx
c001679d:	e8 32 c3 ff ff       	call   c0012ad4 <VgaText::VgaText(char const*)>
c00167a2:	83 c4 10             	add    esp,0x10
c00167a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00167a9:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c00167af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00167b3:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00167b9:	83 ec 0c             	sub    esp,0xc
c00167bc:	50                   	push   eax
c00167bd:	e8 78 bb ff ff       	call   c001233a <addToTerminalCycle(VgaText*)>
c00167c2:	83 c4 10             	add    esp,0x10
c00167c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00167c9:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00167cf:	83 ec 0c             	sub    esp,0xc
c00167d2:	50                   	push   eax
c00167d3:	e8 d3 bd ff ff       	call   c00125ab <setActiveTerminal(VgaText*)>
c00167d8:	83 c4 10             	add    esp,0x10
c00167db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00167df:	05 0c 01 00 00       	add    eax,0x10c
c00167e4:	83 ec 08             	sub    esp,0x8
c00167e7:	68 b8 99 02 c0       	push   0xc00299b8
c00167ec:	50                   	push   eax
c00167ed:	e8 5e 9e fe ff       	call   c0000650 <strcpy>
c00167f2:	83 c4 10             	add    esp,0x10
c00167f5:	8d 76 00             	lea    esi,[esi+0x0]
c00167f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00167fc:	83 c0 0c             	add    eax,0xc
c00167ff:	83 ec 08             	sub    esp,0x8
c0016802:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016806:	50                   	push   eax
c0016807:	e8 44 9e fe ff       	call   c0000650 <strcpy>
c001680c:	83 c4 10             	add    esp,0x10
c001680f:	83 ec 08             	sub    esp,0x8
c0016812:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016816:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001681a:	e8 7d fb ff ff       	call   c001639c <Process::addArgs(char**)>
c001681f:	83 c4 10             	add    esp,0x10
c0016822:	90                   	nop
c0016823:	83 c4 24             	add    esp,0x24
c0016826:	5b                   	pop    ebx
c0016827:	5e                   	pop    esi
c0016828:	c3                   	ret    
c0016829:	8d 76 00             	lea    esi,[esi+0x0]

c001682c <taskStartupFunction>:
c001682c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016831:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016834:	c3                   	ret    
c0016835:	8d 76 00             	lea    esi,[esi+0x0]

c0016838 <KeDisablePreemption()>:
c0016838:	a1 0c 23 03 c0       	mov    eax,ds:0xc003230c
c001683d:	85 c0                	test   eax,eax
c001683f:	75 13                	jne    c0016854 <KeDisablePreemption()+0x1c>
c0016841:	8a 15 0c 21 03 c0    	mov    dl,BYTE PTR ds:0xc003210c
c0016847:	c6 05 0c 21 03 c0 00 	mov    BYTE PTR ds:0xc003210c,0x0
c001684e:	88 15 08 23 03 c0    	mov    BYTE PTR ds:0xc0032308,dl
c0016854:	83 c0 01             	add    eax,0x1
c0016857:	a3 0c 23 03 c0       	mov    ds:0xc003230c,eax
c001685c:	c3                   	ret    
c001685d:	8d 76 00             	lea    esi,[esi+0x0]

c0016860 <KeRestorePreemption()>:
c0016860:	a1 0c 23 03 c0       	mov    eax,ds:0xc003230c
c0016865:	83 e8 01             	sub    eax,0x1
c0016868:	a3 0c 23 03 c0       	mov    ds:0xc003230c,eax
c001686d:	75 0d                	jne    c001687c <KeRestorePreemption()+0x1c>
c001686f:	a0 08 23 03 c0       	mov    al,ds:0xc0032308
c0016874:	a2 0c 21 03 c0       	mov    ds:0xc003210c,al
c0016879:	8d 76 00             	lea    esi,[esi+0x0]
c001687c:	c3                   	ret    
c001687d:	90                   	nop
c001687e:	66 90                	xchg   ax,ax

c0016880 <Process::createThread(void (*)(void*), void*, int)>:
c0016880:	55                   	push   ebp
c0016881:	31 c9                	xor    ecx,ecx
c0016883:	57                   	push   edi
c0016884:	56                   	push   esi
c0016885:	53                   	push   ebx
c0016886:	83 ec 0c             	sub    esp,0xc
c0016889:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001688d:	66 8b b3 a4 05 00 00 	mov    si,WORD PTR [ebx+0x5a4]
c0016894:	89 f2                	mov    edx,esi
c0016896:	66 90                	xchg   ax,ax
c0016898:	0f b7 c2             	movzx  eax,dx
c001689b:	80 e2 01             	and    dl,0x1
c001689e:	74 18                	je     c00168b8 <Process::createThread(void (*)(void*), void*, int)+0x38>
c00168a0:	d1 f8                	sar    eax,1
c00168a2:	83 c1 01             	add    ecx,0x1
c00168a5:	83 f9 10             	cmp    ecx,0x10
c00168a8:	89 c2                	mov    edx,eax
c00168aa:	75 ec                	jne    c0016898 <Process::createThread(void (*)(void*), void*, int)+0x18>
c00168ac:	83 c4 0c             	add    esp,0xc
c00168af:	31 db                	xor    ebx,ebx
c00168b1:	89 d8                	mov    eax,ebx
c00168b3:	5b                   	pop    ebx
c00168b4:	5e                   	pop    esi
c00168b5:	5f                   	pop    edi
c00168b6:	5d                   	pop    ebp
c00168b7:	c3                   	ret    
c00168b8:	b8 01 00 00 00       	mov    eax,0x1
c00168bd:	d3 e0                	shl    eax,cl
c00168bf:	09 c6                	or     esi,eax
c00168c1:	66 89 b3 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],si
c00168c8:	6b c1 73             	imul   eax,ecx,0x73
c00168cb:	01 d8                	add    eax,ebx
c00168cd:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c00168d4:	75 0a                	jne    c00168e0 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00168d6:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c00168e0:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c00168e6:	6b f9 73             	imul   edi,ecx,0x73
c00168e9:	83 ec 0c             	sub    esp,0xc
c00168ec:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00168ef:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00168f2:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c00168f8:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c00168fe:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0016904:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c001690b:	c7 80 44 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x244],0x0
c0016915:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001691b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001691f:	c7 80 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x26f],0x0
c0016929:	c6 80 73 02 00 00 00 	mov    BYTE PTR [eax+0x273],0x0
c0016930:	c6 80 74 02 00 00 00 	mov    BYTE PTR [eax+0x274],0x0
c0016937:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001693d:	89 ca                	mov    edx,ecx
c001693f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016943:	c6 80 75 02 00 00 00 	mov    BYTE PTR [eax+0x275],0x0
c001694a:	f7 da                	neg    edx
c001694c:	c1 e2 15             	shl    edx,0x15
c001694f:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0016955:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001695b:	8a 54 24 38          	mov    dl,BYTE PTR [esp+0x38]
c001695f:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0016969:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001696f:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016979:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001697f:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0016985:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001698f:	83 e2 80             	and    edx,0xffffff80
c0016992:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0016998:	68 00 01 00 00       	push   0x100
c001699d:	e8 b6 91 ff ff       	call   c000fb58 <malloc>
c00169a2:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00169a5:	58                   	pop    eax
c00169a6:	5a                   	pop    edx
c00169a7:	53                   	push   ebx
c00169a8:	68 bc 99 02 c0       	push   0xc00299bc
c00169ad:	e8 b4 05 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00169b2:	59                   	pop    ecx
c00169b3:	5e                   	pop    esi
c00169b4:	53                   	push   ebx
c00169b5:	68 4c 23 03 c0       	push   0xc003234c
c00169ba:	e8 01 01 01 00       	call   c0026ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00169bf:	83 c4 10             	add    esp,0x10
c00169c2:	89 d8                	mov    eax,ebx
c00169c4:	83 c4 0c             	add    esp,0xc
c00169c7:	5b                   	pop    ebx
c00169c8:	5e                   	pop    esi
c00169c9:	5f                   	pop    edi
c00169ca:	5d                   	pop    ebp
c00169cb:	c3                   	ret    

c00169cc <Process::createUserThread()>:
c00169cc:	83 ec 0c             	sub    esp,0xc
c00169cf:	68 80 00 00 00       	push   0x80
c00169d4:	6a 00                	push   0x0
c00169d6:	68 80 62 01 c0       	push   0xc0016280
c00169db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00169df:	50                   	push   eax
c00169e0:	e8 9b fe ff ff       	call   c0016880 <Process::createThread(void (*)(void*), void*, int)>
c00169e5:	83 c4 1c             	add    esp,0x1c
c00169e8:	c3                   	ret    
c00169e9:	8d 76 00             	lea    esi,[esi+0x0]

c00169ec <setupMultitasking(void (*)())>:
c00169ec:	56                   	push   esi
c00169ed:	53                   	push   ebx
c00169ee:	83 ec 04             	sub    esp,0x4
c00169f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00169f5:	eb 11                	jmp    c0016a08 <setupMultitasking(void (*)())+0x1c>
c00169f7:	90                   	nop
c00169f8:	83 ec 0c             	sub    esp,0xc
c00169fb:	68 4c 23 03 c0       	push   0xc003234c
c0016a00:	e8 ff ff 00 00       	call   c0026a04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016a05:	83 c4 10             	add    esp,0x10
c0016a08:	83 ec 0c             	sub    esp,0xc
c0016a0b:	68 4c 23 03 c0       	push   0xc003234c
c0016a10:	e8 cb ff 00 00       	call   c00269e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016a15:	83 c4 10             	add    esp,0x10
c0016a18:	84 c0                	test   al,al
c0016a1a:	74 dc                	je     c00169f8 <setupMultitasking(void (*)())+0xc>
c0016a1c:	83 ec 0c             	sub    esp,0xc
c0016a1f:	68 c4 07 00 00       	push   0x7c4
c0016a24:	e8 2f 91 ff ff       	call   c000fb58 <malloc>
c0016a29:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016a30:	6a 00                	push   0x0
c0016a32:	68 d0 99 02 c0       	push   0xc00299d0
c0016a37:	6a 01                	push   0x1
c0016a39:	50                   	push   eax
c0016a3a:	89 c3                	mov    ebx,eax
c0016a3c:	e8 ff fb ff ff       	call   c0016640 <Process::Process(bool, char const*, Process*, char**)>
c0016a41:	8b 83 a6 05 00 00    	mov    eax,DWORD PTR [ebx+0x5a6]
c0016a47:	83 c4 14             	add    esp,0x14
c0016a4a:	89 1d 58 23 03 c0    	mov    DWORD PTR ds:0xc0032358,ebx
c0016a50:	50                   	push   eax
c0016a51:	e8 55 bb ff ff       	call   c00125ab <setActiveTerminal(VgaText*)>
c0016a56:	66 8b 83 a4 05 00 00 	mov    ax,WORD PTR [ebx+0x5a4]
c0016a5d:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c0016a67:	83 c8 01             	or     eax,0x1
c0016a6a:	66 89 83 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],ax
c0016a71:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0016a77:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0016a7a:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0016a84:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0016a8a:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0016a94:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0016a9a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016aa4:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0016aae:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016ab4:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0016aba:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0016ac4:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0016ace:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0016ad5:	e8 7e 90 ff ff       	call   c000fb58 <malloc>
c0016ada:	c7 83 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x26f],0x0
c0016ae4:	c6 83 73 02 00 00 00 	mov    BYTE PTR [ebx+0x273],0x0
c0016aeb:	c6 83 74 02 00 00 00 	mov    BYTE PTR [ebx+0x274],0x0
c0016af2:	c6 83 75 02 00 00 00 	mov    BYTE PTR [ebx+0x275],0x0
c0016af9:	c6 83 76 02 00 00 00 	mov    BYTE PTR [ebx+0x276],0x0
c0016b00:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0016b06:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0016b0c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016b12:	5a                   	pop    edx
c0016b13:	59                   	pop    ecx
c0016b14:	68 b8 99 02 c0       	push   0xc00299b8
c0016b19:	50                   	push   eax
c0016b1a:	e8 31 9b fe ff       	call   c0000650 <strcpy>
c0016b1f:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0016b26:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016b2a:	83 c4 14             	add    esp,0x14
c0016b2d:	5b                   	pop    ebx
c0016b2e:	5e                   	pop    esi
c0016b2f:	e9 35 97 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>

c0016b34 <schedule()>:
c0016b34:	8b 15 2c 23 03 c0    	mov    edx,DWORD PTR ds:0xc003232c
c0016b3a:	85 d2                	test   edx,edx
c0016b3c:	74 0e                	je     c0016b4c <schedule()+0x18>
c0016b3e:	c7 05 28 23 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032328,0x1
c0016b48:	c3                   	ret    
c0016b49:	8d 76 00             	lea    esi,[esi+0x0]
c0016b4c:	53                   	push   ebx
c0016b4d:	83 ec 14             	sub    esp,0x14
c0016b50:	68 4c 23 03 c0       	push   0xc003234c
c0016b55:	e8 86 fe 00 00       	call   c00269e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016b5a:	83 c4 10             	add    esp,0x10
c0016b5d:	84 c0                	test   al,al
c0016b5f:	75 3f                	jne    c0016ba0 <schedule()+0x6c>
c0016b61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b66:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016b69:	83 fa 01             	cmp    edx,0x1
c0016b6c:	74 3a                	je     c0016ba8 <schedule()+0x74>
c0016b6e:	66 90                	xchg   ax,ax
c0016b70:	83 ec 0c             	sub    esp,0xc
c0016b73:	68 4c 23 03 c0       	push   0xc003234c
c0016b78:	e8 7f fe 00 00       	call   c00269fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016b7d:	c7 04 24 4c 23 03 c0 	mov    DWORD PTR [esp],0xc003234c
c0016b84:	89 c3                	mov    ebx,eax
c0016b86:	e8 79 fe 00 00       	call   c0026a04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016b8b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0016b92:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b95:	e8 42 f7 ff ff       	call   c00162dc <switchToThread(ThreadControlBlock*)>
c0016b9a:	83 c4 10             	add    esp,0x10
c0016b9d:	8d 76 00             	lea    esi,[esi+0x0]
c0016ba0:	83 c4 08             	add    esp,0x8
c0016ba3:	5b                   	pop    ebx
c0016ba4:	c3                   	ret    
c0016ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ba8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016baf:	83 ec 08             	sub    esp,0x8
c0016bb2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bb7:	50                   	push   eax
c0016bb8:	68 4c 23 03 c0       	push   0xc003234c
c0016bbd:	e8 fe fe 00 00       	call   c0026ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016bc2:	83 c4 10             	add    esp,0x10
c0016bc5:	eb a9                	jmp    c0016b70 <schedule()+0x3c>
c0016bc7:	90                   	nop

c0016bc8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0016bc8:	83 ec 0c             	sub    esp,0xc
c0016bcb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bd0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016bd4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016bd7:	e8 58 ff ff ff       	call   c0016b34 <schedule()>
c0016bdc:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c0016be4:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0016be9:	85 c0                	test   eax,eax
c0016beb:	75 03                	jne    c0016bf0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c0016bed:	fb                   	sti    
c0016bee:	66 90                	xchg   ax,ax
c0016bf0:	83 c4 0c             	add    esp,0xc
c0016bf3:	c3                   	ret    

c0016bf4 <blockTask(TaskState)>:
c0016bf4:	83 ec 0c             	sub    esp,0xc
c0016bf7:	fa                   	cli    
c0016bf8:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0016bfd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016c01:	83 c0 01             	add    eax,0x1
c0016c04:	a3 30 23 03 c0       	mov    ds:0xc0032330,eax
c0016c09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c0e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016c11:	e8 1e ff ff ff       	call   c0016b34 <schedule()>
c0016c16:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c0016c1e:	8b 15 30 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032330
c0016c24:	85 d2                	test   edx,edx
c0016c26:	75 04                	jne    c0016c2c <blockTask(TaskState)+0x38>
c0016c28:	fb                   	sti    
c0016c29:	8d 76 00             	lea    esi,[esi+0x0]
c0016c2c:	83 c4 0c             	add    esp,0xc
c0016c2f:	c3                   	ret    

c0016c30 <waitTask(int, int*, int)>:
c0016c30:	83 ec 18             	sub    esp,0x18
c0016c33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016c3c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0016c3f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016c43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c48:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0016c4b:	6a 07                	push   0x7
c0016c4d:	e8 a2 ff ff ff       	call   c0016bf4 <blockTask(TaskState)>
c0016c52:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c57:	83 c4 10             	add    esp,0x10
c0016c5a:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0016c5d:	85 d2                	test   edx,edx
c0016c5f:	74 0b                	je     c0016c6c <waitTask(int, int*, int)+0x3c>
c0016c61:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0016c64:	89 02                	mov    DWORD PTR [edx],eax
c0016c66:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c6b:	90                   	nop
c0016c6c:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0016c6f:	83 c4 0c             	add    esp,0xc
c0016c72:	c3                   	ret    
c0016c73:	90                   	nop

c0016c74 <milliTenthSleepUntil(unsigned long long)>:
c0016c74:	83 ec 0c             	sub    esp,0xc
c0016c77:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c7f:	3b 05 50 1b 03 c0    	cmp    eax,DWORD PTR ds:0xc0031b50
c0016c85:	89 d1                	mov    ecx,edx
c0016c87:	1b 0d 54 1b 03 c0    	sbb    ecx,DWORD PTR ds:0xc0031b54
c0016c8d:	73 05                	jae    c0016c94 <milliTenthSleepUntil(unsigned long long)+0x20>
c0016c8f:	90                   	nop
c0016c90:	83 c4 0c             	add    esp,0xc
c0016c93:	c3                   	ret    
c0016c94:	fa                   	cli    
c0016c95:	8b 0d 30 23 03 c0    	mov    ecx,DWORD PTR ds:0xc0032330
c0016c9b:	83 ec 08             	sub    esp,0x8
c0016c9e:	83 c1 01             	add    ecx,0x1
c0016ca1:	89 0d 30 23 03 c0    	mov    DWORD PTR ds:0xc0032330,ecx
c0016ca7:	8b 0d 2c 23 03 c0    	mov    ecx,DWORD PTR ds:0xc003232c
c0016cad:	83 c1 01             	add    ecx,0x1
c0016cb0:	89 0d 2c 23 03 c0    	mov    DWORD PTR ds:0xc003232c,ecx
c0016cb6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016cbc:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c0016cbf:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c0016cc2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cc7:	50                   	push   eax
c0016cc8:	68 40 23 03 c0       	push   0xc0032340
c0016ccd:	e8 ee fd 00 00       	call   c0026ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016cd2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0016cd9:	e8 16 ff ff ff       	call   c0016bf4 <blockTask(TaskState)>
c0016cde:	a1 2c 23 03 c0       	mov    eax,ds:0xc003232c
c0016ce3:	83 c4 10             	add    esp,0x10
c0016ce6:	83 e8 01             	sub    eax,0x1
c0016ce9:	a3 2c 23 03 c0       	mov    ds:0xc003232c,eax
c0016cee:	85 c0                	test   eax,eax
c0016cf0:	75 0a                	jne    c0016cfc <milliTenthSleepUntil(unsigned long long)+0x88>
c0016cf2:	8b 15 28 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032328
c0016cf8:	85 d2                	test   edx,edx
c0016cfa:	75 18                	jne    c0016d14 <milliTenthSleepUntil(unsigned long long)+0xa0>
c0016cfc:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c0016d04:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0016d09:	85 c0                	test   eax,eax
c0016d0b:	75 83                	jne    c0016c90 <milliTenthSleepUntil(unsigned long long)+0x1c>
c0016d0d:	fb                   	sti    
c0016d0e:	83 c4 0c             	add    esp,0xc
c0016d11:	c3                   	ret    
c0016d12:	66 90                	xchg   ax,ax
c0016d14:	c7 05 28 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032328,0x0
c0016d1e:	e8 11 fe ff ff       	call   c0016b34 <schedule()>
c0016d23:	eb d7                	jmp    c0016cfc <milliTenthSleepUntil(unsigned long long)+0x88>
c0016d25:	8d 76 00             	lea    esi,[esi+0x0]

c0016d28 <milliTenthSleep(unsigned long long)>:
c0016d28:	a1 50 1b 03 c0       	mov    eax,ds:0xc0031b50
c0016d2d:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0016d31:	8b 15 54 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b54
c0016d37:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0016d3b:	e9 34 ff ff ff       	jmp    c0016c74 <milliTenthSleepUntil(unsigned long long)>

c0016d40 <sleep(unsigned long long)>:
c0016d40:	69 4c 24 08 10 27 00 00 	imul   ecx,DWORD PTR [esp+0x8],0x2710
c0016d48:	b8 10 27 00 00       	mov    eax,0x2710
c0016d4d:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0016d51:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016d55:	01 ca                	add    edx,ecx
c0016d57:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0016d5b:	eb cb                	jmp    c0016d28 <milliTenthSleep(unsigned long long)>
c0016d5d:	8d 76 00             	lea    esi,[esi+0x0]

c0016d60 <sleep(unsigned int)>:
c0016d60:	83 ec 14             	sub    esp,0x14
c0016d63:	b8 10 27 00 00       	mov    eax,0x2710
c0016d68:	f7 64 24 18          	mul    DWORD PTR [esp+0x18]
c0016d6c:	52                   	push   edx
c0016d6d:	50                   	push   eax
c0016d6e:	e8 b5 ff ff ff       	call   c0016d28 <milliTenthSleep(unsigned long long)>
c0016d73:	83 c4 1c             	add    esp,0x1c
c0016d76:	c3                   	ret    
c0016d77:	90                   	nop

c0016d78 <milliTenthSleep(unsigned int)>:
c0016d78:	83 ec 14             	sub    esp,0x14
c0016d7b:	31 d2                	xor    edx,edx
c0016d7d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d81:	03 05 50 1b 03 c0    	add    eax,DWORD PTR ds:0xc0031b50
c0016d87:	13 15 54 1b 03 c0    	adc    edx,DWORD PTR ds:0xc0031b54
c0016d8d:	52                   	push   edx
c0016d8e:	50                   	push   eax
c0016d8f:	e8 e0 fe ff ff       	call   c0016c74 <milliTenthSleepUntil(unsigned long long)>
c0016d94:	83 c4 1c             	add    esp,0x1c
c0016d97:	c3                   	ret    

c0016d98 <taskReturned>:
c0016d98:	83 ec 18             	sub    esp,0x18
c0016d9b:	68 58 9a 02 c0       	push   0xc0029a58
c0016da0:	e8 07 92 ff ff       	call   c000ffac <KePanic(char const*)>
c0016da5:	83 c4 10             	add    esp,0x10
c0016da8:	83 ec 0c             	sub    esp,0xc
c0016dab:	6a 02                	push   0x2
c0016dad:	e8 42 fe ff ff       	call   c0016bf4 <blockTask(TaskState)>
c0016db2:	fa                   	cli    
c0016db3:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0016db8:	83 c0 01             	add    eax,0x1
c0016dbb:	a3 30 23 03 c0       	mov    ds:0xc0032330,eax
c0016dc0:	e8 6f fd ff ff       	call   c0016b34 <schedule()>
c0016dc5:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c0016dcd:	8b 15 30 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032330
c0016dd3:	83 c4 10             	add    esp,0x10
c0016dd6:	85 d2                	test   edx,edx
c0016dd8:	75 ce                	jne    c0016da8 <taskReturned+0x10>
c0016dda:	fb                   	sti    
c0016ddb:	eb cb                	jmp    c0016da8 <taskReturned+0x10>
c0016ddd:	8d 76 00             	lea    esi,[esi+0x0]

c0016de0 <KeProcessFromPID(int)>:
c0016de0:	57                   	push   edi
c0016de1:	56                   	push   esi
c0016de2:	53                   	push   ebx
c0016de3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016de7:	fa                   	cli    
c0016de8:	8b 0d 30 23 03 c0    	mov    ecx,DWORD PTR ds:0xc0032330
c0016dee:	83 ec 0c             	sub    esp,0xc
c0016df1:	68 4c 23 03 c0       	push   0xc003234c
c0016df6:	83 c1 01             	add    ecx,0x1
c0016df9:	89 0d 30 23 03 c0    	mov    DWORD PTR ds:0xc0032330,ecx
c0016dff:	e8 f8 fb 00 00       	call   c00269fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e04:	83 c4 10             	add    esp,0x10
c0016e07:	89 c7                	mov    edi,eax
c0016e09:	eb 15                	jmp    c0016e20 <KeProcessFromPID(int)+0x40>
c0016e0b:	90                   	nop
c0016e0c:	83 ec 0c             	sub    esp,0xc
c0016e0f:	68 4c 23 03 c0       	push   0xc003234c
c0016e14:	e8 e3 fb 00 00       	call   c00269fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e19:	83 c4 10             	add    esp,0x10
c0016e1c:	39 f8                	cmp    eax,edi
c0016e1e:	74 50                	je     c0016e70 <KeProcessFromPID(int)+0x90>
c0016e20:	83 ec 0c             	sub    esp,0xc
c0016e23:	68 4c 23 03 c0       	push   0xc003234c
c0016e28:	e8 cf fb 00 00       	call   c00269fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e2d:	c7 04 24 4c 23 03 c0 	mov    DWORD PTR [esp],0xc003234c
c0016e34:	89 c3                	mov    ebx,eax
c0016e36:	e8 c9 fb 00 00       	call   c0026a04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e3b:	58                   	pop    eax
c0016e3c:	5a                   	pop    edx
c0016e3d:	53                   	push   ebx
c0016e3e:	68 4c 23 03 c0       	push   0xc003234c
c0016e43:	e8 78 fc 00 00       	call   c0026ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e48:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016e4b:	83 c4 10             	add    esp,0x10
c0016e4e:	39 30                	cmp    DWORD PTR [eax],esi
c0016e50:	75 ba                	jne    c0016e0c <KeProcessFromPID(int)+0x2c>
c0016e52:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c0016e5a:	8b 0d 30 23 03 c0    	mov    ecx,DWORD PTR ds:0xc0032330
c0016e60:	85 c9                	test   ecx,ecx
c0016e62:	74 08                	je     c0016e6c <KeProcessFromPID(int)+0x8c>
c0016e64:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016e67:	90                   	nop
c0016e68:	5b                   	pop    ebx
c0016e69:	5e                   	pop    esi
c0016e6a:	5f                   	pop    edi
c0016e6b:	c3                   	ret    
c0016e6c:	fb                   	sti    
c0016e6d:	eb f5                	jmp    c0016e64 <KeProcessFromPID(int)+0x84>
c0016e6f:	90                   	nop
c0016e70:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c0016e78:	8b 15 30 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032330
c0016e7e:	31 c0                	xor    eax,eax
c0016e80:	85 d2                	test   edx,edx
c0016e82:	75 e4                	jne    c0016e68 <KeProcessFromPID(int)+0x88>
c0016e84:	fb                   	sti    
c0016e85:	5b                   	pop    ebx
c0016e86:	5e                   	pop    esi
c0016e87:	5f                   	pop    edi
c0016e88:	c3                   	ret    
c0016e89:	8d 76 00             	lea    esi,[esi+0x0]

c0016e8c <unblockTask(ThreadControlBlock*)>:
c0016e8c:	53                   	push   ebx
c0016e8d:	83 ec 08             	sub    esp,0x8
c0016e90:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016e94:	fa                   	cli    
c0016e95:	8b 15 30 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032330
c0016e9b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016e9e:	83 c2 01             	add    edx,0x1
c0016ea1:	89 15 30 23 03 c0    	mov    DWORD PTR ds:0xc0032330,edx
c0016ea7:	85 c0                	test   eax,eax
c0016ea9:	74 6d                	je     c0016f18 <unblockTask(ThreadControlBlock*)+0x8c>
c0016eab:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016eae:	83 f8 01             	cmp    eax,0x1
c0016eb1:	74 39                	je     c0016eec <unblockTask(ThreadControlBlock*)+0x60>
c0016eb3:	83 ec 0c             	sub    esp,0xc
c0016eb6:	68 4c 23 03 c0       	push   0xc003234c
c0016ebb:	e8 3c fb 00 00       	call   c00269fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ec0:	83 c4 10             	add    esp,0x10
c0016ec3:	85 c0                	test   eax,eax
c0016ec5:	75 1d                	jne    c0016ee4 <unblockTask(ThreadControlBlock*)+0x58>
c0016ec7:	eb 63                	jmp    c0016f2c <unblockTask(ThreadControlBlock*)+0xa0>
c0016ec9:	8d 76 00             	lea    esi,[esi+0x0]
c0016ecc:	83 ec 08             	sub    esp,0x8
c0016ecf:	50                   	push   eax
c0016ed0:	68 4c 23 03 c0       	push   0xc003234c
c0016ed5:	e8 2e 00 01 00       	call   c0026f08 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0016eda:	83 c4 10             	add    esp,0x10
c0016edd:	85 c0                	test   eax,eax
c0016edf:	74 4b                	je     c0016f2c <unblockTask(ThreadControlBlock*)+0xa0>
c0016ee1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ee4:	39 c3                	cmp    ebx,eax
c0016ee6:	75 e4                	jne    c0016ecc <unblockTask(ThreadControlBlock*)+0x40>
c0016ee8:	eb 12                	jmp    c0016efc <unblockTask(ThreadControlBlock*)+0x70>
c0016eea:	66 90                	xchg   ax,ax
c0016eec:	83 ec 0c             	sub    esp,0xc
c0016eef:	68 ee 99 02 c0       	push   0xc00299ee
c0016ef4:	e8 6d 00 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016ef9:	83 c4 10             	add    esp,0x10
c0016efc:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c0016f04:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0016f09:	85 c0                	test   eax,eax
c0016f0b:	75 03                	jne    c0016f10 <unblockTask(ThreadControlBlock*)+0x84>
c0016f0d:	fb                   	sti    
c0016f0e:	66 90                	xchg   ax,ax
c0016f10:	83 c4 08             	add    esp,0x8
c0016f13:	5b                   	pop    ebx
c0016f14:	c3                   	ret    
c0016f15:	8d 76 00             	lea    esi,[esi+0x0]
c0016f18:	83 ec 0c             	sub    esp,0xc
c0016f1b:	68 d7 99 02 c0       	push   0xc00299d7
c0016f20:	e8 41 00 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016f25:	83 c4 10             	add    esp,0x10
c0016f28:	eb d2                	jmp    c0016efc <unblockTask(ThreadControlBlock*)+0x70>
c0016f2a:	66 90                	xchg   ax,ax
c0016f2c:	83 ec 08             	sub    esp,0x8
c0016f2f:	53                   	push   ebx
c0016f30:	68 4c 23 03 c0       	push   0xc003234c
c0016f35:	e8 86 fb 00 00       	call   c0026ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016f3a:	83 c4 10             	add    esp,0x10
c0016f3d:	eb bd                	jmp    c0016efc <unblockTask(ThreadControlBlock*)+0x70>
c0016f3f:	90                   	nop

c0016f40 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016f40:	55                   	push   ebp
c0016f41:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016f46:	57                   	push   edi
c0016f47:	56                   	push   esi
c0016f48:	53                   	push   ebx
c0016f49:	83 ec 1c             	sub    esp,0x1c
c0016f4c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016f50:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0016f53:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016f56:	d3 c0                	rol    eax,cl
c0016f58:	66 8b 8a a4 05 00 00 	mov    cx,WORD PTR [edx+0x5a4]
c0016f5f:	21 c8                	and    eax,ecx
c0016f61:	66 89 82 a4 05 00 00 	mov    WORD PTR [edx+0x5a4],ax
c0016f68:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016f6b:	66 83 b8 a4 05 00 00 00 	cmp    WORD PTR [eax+0x5a4],0x0
c0016f73:	0f 85 af 01 00 00    	jne    c0017128 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0016f79:	8b a8 b6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5b6]
c0016f7f:	85 ed                	test   ebp,ebp
c0016f81:	7e 29                	jle    c0016fac <cleanupTerminatedTask(ThreadControlBlock*)+0x6c>
c0016f83:	31 f6                	xor    esi,esi
c0016f85:	8d 76 00             	lea    esi,[esi+0x0]
c0016f88:	8b bc b0 ba 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x5ba]
c0016f8f:	83 ec 0c             	sub    esp,0xc
c0016f92:	83 c6 01             	add    esi,0x1
c0016f95:	57                   	push   edi
c0016f96:	e8 cd 8b ff ff       	call   c000fb68 <free>
c0016f9b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016f9e:	83 c4 10             	add    esp,0x10
c0016fa1:	39 b0 b6 05 00 00    	cmp    DWORD PTR [eax+0x5b6],esi
c0016fa7:	7f df                	jg     c0016f88 <cleanupTerminatedTask(ThreadControlBlock*)+0x48>
c0016fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0016fac:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016fb6:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016fb9:	8b ae ba 07 00 00    	mov    ebp,DWORD PTR [esi+0x7ba]
c0016fbf:	89 f7                	mov    edi,esi
c0016fc1:	85 ed                	test   ebp,ebp
c0016fc3:	74 1b                	je     c0016fe0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016fc5:	83 ec 0c             	sub    esp,0xc
c0016fc8:	55                   	push   ebp
c0016fc9:	e8 d4 78 ff ff       	call   c000e8a2 <EnvVarContainer::~EnvVarContainer()>
c0016fce:	59                   	pop    ecx
c0016fcf:	5e                   	pop    esi
c0016fd0:	6a 0c                	push   0xc
c0016fd2:	55                   	push   ebp
c0016fd3:	e8 88 67 ff ff       	call   c000d760 <operator delete(void*, unsigned long)>
c0016fd8:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016fdb:	83 c4 10             	add    esp,0x10
c0016fde:	89 f7                	mov    edi,esi
c0016fe0:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0016fe6:	85 c0                	test   eax,eax
c0016fe8:	0f 84 ae 00 00 00    	je     c001709c <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c0016fee:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0016ff1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016ff5:	31 c9                	xor    ecx,ecx
c0016ff7:	eb 17                	jmp    c0017010 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016ff9:	8d 76 00             	lea    esi,[esi+0x0]
c0016ffc:	83 c1 01             	add    ecx,0x1
c0016fff:	83 f9 10             	cmp    ecx,0x10
c0017002:	0f 84 94 00 00 00    	je     c001709c <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c0017008:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c001700e:	66 90                	xchg   ax,ax
c0017010:	0f b7 90 a4 05 00 00 	movzx  edx,WORD PTR [eax+0x5a4]
c0017017:	d3 fa                	sar    edx,cl
c0017019:	80 e2 01             	and    dl,0x1
c001701c:	74 de                	je     c0016ffc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001701e:	6b d1 73             	imul   edx,ecx,0x73
c0017021:	01 d0                	add    eax,edx
c0017023:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0017029:	83 fd 07             	cmp    ebp,0x7
c001702c:	75 ce                	jne    c0016ffc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001702e:	05 40 02 00 00       	add    eax,0x240
c0017033:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0017036:	83 fd ff             	cmp    ebp,0xffffffff
c0017039:	0f 8c f1 00 00 00    	jl     c0017130 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c001703f:	0f 84 af 01 00 00    	je     c00171f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b4>
c0017045:	85 ed                	test   ebp,ebp
c0017047:	0f 84 93 01 00 00    	je     c00171e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a0>
c001704d:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001704f:	75 ab                	jne    c0016ffc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017051:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017055:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c001705b:	01 d0                	add    eax,edx
c001705d:	8d 76 00             	lea    esi,[esi+0x0]
c0017060:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0017064:	83 ec 0c             	sub    esp,0xc
c0017067:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001706d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017070:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0017076:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001707d:	50                   	push   eax
c001707e:	e8 09 fe ff ff       	call   c0016e8c <unblockTask(ThreadControlBlock*)>
c0017083:	83 c4 10             	add    esp,0x10
c0017086:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017089:	89 f7                	mov    edi,esi
c001708b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001708f:	83 c1 01             	add    ecx,0x1
c0017092:	83 f9 10             	cmp    ecx,0x10
c0017095:	0f 85 6d ff ff ff    	jne    c0017008 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001709b:	90                   	nop
c001709c:	8b 86 a6 05 00 00    	mov    eax,DWORD PTR [esi+0x5a6]
c00170a2:	85 c0                	test   eax,eax
c00170a4:	74 62                	je     c0017108 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c00170a6:	8b 96 aa 05 00 00    	mov    edx,DWORD PTR [esi+0x5aa]
c00170ac:	3b 82 a6 05 00 00    	cmp    eax,DWORD PTR [edx+0x5a6]
c00170b2:	74 54                	je     c0017108 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c00170b4:	83 ec 0c             	sub    esp,0xc
c00170b7:	68 4c 23 03 c0       	push   0xc003234c
c00170bc:	e8 3b f9 00 00       	call   c00269fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00170c1:	c7 04 24 4c 23 03 c0 	mov    DWORD PTR [esp],0xc003234c
c00170c8:	89 c7                	mov    edi,eax
c00170ca:	e8 11 f9 00 00       	call   c00269e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00170cf:	83 c4 10             	add    esp,0x10
c00170d2:	84 c0                	test   al,al
c00170d4:	0f 84 ce 00 00 00    	je     c00171a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c00170da:	66 90                	xchg   ax,ax
c00170dc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00170df:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c00170e5:	85 d2                	test   edx,edx
c00170e7:	74 0f                	je     c00170f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c00170e9:	8b 02                	mov    eax,DWORD PTR [edx]
c00170eb:	83 ec 0c             	sub    esp,0xc
c00170ee:	52                   	push   edx
c00170ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00170f2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00170f5:	83 c4 10             	add    esp,0x10
c00170f8:	c7 80 a6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5a6],0x0
c0017102:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0017105:	8d 76 00             	lea    esi,[esi+0x0]
c0017108:	8b 9f b2 05 00 00    	mov    ebx,DWORD PTR [edi+0x5b2]
c001710e:	85 db                	test   ebx,ebx
c0017110:	74 16                	je     c0017128 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0017112:	83 ec 0c             	sub    esp,0xc
c0017115:	53                   	push   ebx
c0017116:	e8 49 c9 ff ff       	call   c0013a64 <VAS::~VAS()>
c001711b:	58                   	pop    eax
c001711c:	5a                   	pop    edx
c001711d:	6a 14                	push   0x14
c001711f:	53                   	push   ebx
c0017120:	e8 3b 66 ff ff       	call   c000d760 <operator delete(void*, unsigned long)>
c0017125:	83 c4 10             	add    esp,0x10
c0017128:	83 c4 1c             	add    esp,0x1c
c001712b:	5b                   	pop    ebx
c001712c:	5e                   	pop    esi
c001712d:	5f                   	pop    edi
c001712e:	5d                   	pop    ebp
c001712f:	c3                   	ret    
c0017130:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017134:	83 ec 0c             	sub    esp,0xc
c0017137:	68 8c 9a 02 c0       	push   0xc0029a8c
c001713c:	e8 6b 8e ff ff       	call   c000ffac <KePanic(char const*)>
c0017141:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017144:	83 c4 10             	add    esp,0x10
c0017147:	89 f7                	mov    edi,esi
c0017149:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001714d:	e9 aa fe ff ff       	jmp    c0016ffc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017152:	66 90                	xchg   ax,ax
c0017154:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001715a:	39 82 a6 05 00 00    	cmp    DWORD PTR [edx+0x5a6],eax
c0017160:	75 1e                	jne    c0017180 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c0017162:	83 ec 0c             	sub    esp,0xc
c0017165:	68 f4 9a 02 c0       	push   0xc0029af4
c001716a:	e8 f7 fd fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001716f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0017176:	e8 79 fa ff ff       	call   c0016bf4 <blockTask(TaskState)>
c001717b:	83 c4 10             	add    esp,0x10
c001717e:	66 90                	xchg   ax,ax
c0017180:	83 ec 08             	sub    esp,0x8
c0017183:	56                   	push   esi
c0017184:	68 4c 23 03 c0       	push   0xc003234c
c0017189:	e8 32 f9 00 00       	call   c0026ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001718e:	c7 04 24 4c 23 03 c0 	mov    DWORD PTR [esp],0xc003234c
c0017195:	e8 62 f8 00 00       	call   c00269fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001719a:	83 c4 10             	add    esp,0x10
c001719d:	39 f8                	cmp    eax,edi
c001719f:	0f 84 37 ff ff ff    	je     c00170dc <cleanupTerminatedTask(ThreadControlBlock*)+0x19c>
c00171a5:	8d 76 00             	lea    esi,[esi+0x0]
c00171a8:	83 ec 0c             	sub    esp,0xc
c00171ab:	68 4c 23 03 c0       	push   0xc003234c
c00171b0:	e8 47 f8 00 00       	call   c00269fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00171b5:	c7 04 24 4c 23 03 c0 	mov    DWORD PTR [esp],0xc003234c
c00171bc:	89 c6                	mov    esi,eax
c00171be:	e8 41 f8 00 00       	call   c0026a04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00171c3:	83 c4 10             	add    esp,0x10
c00171c6:	39 f3                	cmp    ebx,esi
c00171c8:	74 b6                	je     c0017180 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c00171ca:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c00171cd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00171d0:	39 82 aa 05 00 00    	cmp    DWORD PTR [edx+0x5aa],eax
c00171d6:	75 a8                	jne    c0017180 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c00171d8:	e9 77 ff ff ff       	jmp    c0017154 <cleanupTerminatedTask(ThreadControlBlock*)+0x214>
c00171dd:	8d 76 00             	lea    esi,[esi+0x0]
c00171e0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00171e4:	83 ec 0c             	sub    esp,0xc
c00171e7:	68 c0 9a 02 c0       	push   0xc0029ac0
c00171ec:	e9 4b ff ff ff       	jmp    c001713c <cleanupTerminatedTask(ThreadControlBlock*)+0x1fc>
c00171f1:	8d 76 00             	lea    esi,[esi+0x0]
c00171f4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00171f8:	8b 36                	mov    esi,DWORD PTR [esi]
c00171fa:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c00171fd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017200:	8b b8 aa 05 00 00    	mov    edi,DWORD PTR [eax+0x5aa]
c0017206:	01 d7                	add    edi,edx
c0017208:	89 f8                	mov    eax,edi
c001720a:	e9 51 fe ff ff       	jmp    c0017060 <cleanupTerminatedTask(ThreadControlBlock*)+0x120>
c001720f:	90                   	nop

c0017210 <cleanerTaskFunction(void*)>:
c0017210:	53                   	push   ebx
c0017211:	83 ec 08             	sub    esp,0x8
c0017214:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c001721c:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0017221:	85 c0                	test   eax,eax
c0017223:	75 03                	jne    c0017228 <cleanerTaskFunction(void*)+0x18>
c0017225:	fb                   	sti    
c0017226:	66 90                	xchg   ax,ax
c0017228:	fa                   	cli    
c0017229:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001722e:	83 c0 01             	add    eax,0x1
c0017231:	80 3d 14 23 03 c0 00 	cmp    BYTE PTR ds:0xc0032314,0x0
c0017238:	a3 30 23 03 c0       	mov    ds:0xc0032330,eax
c001723d:	0f 85 c9 00 00 00    	jne    c001730c <cleanerTaskFunction(void*)+0xfc>
c0017243:	83 ec 0c             	sub    esp,0xc
c0017246:	6a 02                	push   0x2
c0017248:	e8 7b f9 ff ff       	call   c0016bc8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001724d:	83 c4 10             	add    esp,0x10
c0017250:	c6 05 14 23 03 c0 00 	mov    BYTE PTR ds:0xc0032314,0x0
c0017257:	fa                   	cli    
c0017258:	8b 0d 30 23 03 c0    	mov    ecx,DWORD PTR ds:0xc0032330
c001725e:	8b 1d 2c 23 03 c0    	mov    ebx,DWORD PTR ds:0xc003232c
c0017264:	83 c1 01             	add    ecx,0x1
c0017267:	89 0d 30 23 03 c0    	mov    DWORD PTR ds:0xc0032330,ecx
c001726d:	83 c3 01             	add    ebx,0x1
c0017270:	89 1d 2c 23 03 c0    	mov    DWORD PTR ds:0xc003232c,ebx
c0017276:	fa                   	cli    
c0017277:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001727c:	83 c0 01             	add    eax,0x1
c001727f:	a3 30 23 03 c0       	mov    ds:0xc0032330,eax
c0017284:	eb 2a                	jmp    c00172b0 <cleanerTaskFunction(void*)+0xa0>
c0017286:	66 90                	xchg   ax,ax
c0017288:	83 ec 0c             	sub    esp,0xc
c001728b:	68 34 23 03 c0       	push   0xc0032334
c0017290:	e8 67 f7 00 00       	call   c00269fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017295:	c7 04 24 34 23 03 c0 	mov    DWORD PTR [esp],0xc0032334
c001729c:	89 c3                	mov    ebx,eax
c001729e:	e8 61 f7 00 00       	call   c0026a04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00172a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00172a6:	e8 95 fc ff ff       	call   c0016f40 <cleanupTerminatedTask(ThreadControlBlock*)>
c00172ab:	83 c4 10             	add    esp,0x10
c00172ae:	66 90                	xchg   ax,ax
c00172b0:	83 ec 0c             	sub    esp,0xc
c00172b3:	68 34 23 03 c0       	push   0xc0032334
c00172b8:	e8 23 f7 00 00       	call   c00269e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00172bd:	83 c4 10             	add    esp,0x10
c00172c0:	84 c0                	test   al,al
c00172c2:	74 c4                	je     c0017288 <cleanerTaskFunction(void*)+0x78>
c00172c4:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c00172cc:	8b 15 30 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032330
c00172d2:	85 d2                	test   edx,edx
c00172d4:	75 02                	jne    c00172d8 <cleanerTaskFunction(void*)+0xc8>
c00172d6:	fb                   	sti    
c00172d7:	90                   	nop
c00172d8:	a1 2c 23 03 c0       	mov    eax,ds:0xc003232c
c00172dd:	83 e8 01             	sub    eax,0x1
c00172e0:	a3 2c 23 03 c0       	mov    ds:0xc003232c,eax
c00172e5:	0f 85 29 ff ff ff    	jne    c0017214 <cleanerTaskFunction(void*)+0x4>
c00172eb:	a1 28 23 03 c0       	mov    eax,ds:0xc0032328
c00172f0:	85 c0                	test   eax,eax
c00172f2:	0f 84 1c ff ff ff    	je     c0017214 <cleanerTaskFunction(void*)+0x4>
c00172f8:	c7 05 28 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032328,0x0
c0017302:	e8 2d f8 ff ff       	call   c0016b34 <schedule()>
c0017307:	e9 08 ff ff ff       	jmp    c0017214 <cleanerTaskFunction(void*)+0x4>
c001730c:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c0017314:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0017319:	85 c0                	test   eax,eax
c001731b:	0f 85 2f ff ff ff    	jne    c0017250 <cleanerTaskFunction(void*)+0x40>
c0017321:	fb                   	sti    
c0017322:	e9 29 ff ff ff       	jmp    c0017250 <cleanerTaskFunction(void*)+0x40>
c0017327:	90                   	nop

c0017328 <KeTerminateCurrentThread(int)>:
c0017328:	83 ec 14             	sub    esp,0x14
c001732b:	fa                   	cli    
c001732c:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0017331:	83 c0 01             	add    eax,0x1
c0017334:	a3 30 23 03 c0       	mov    ds:0xc0032330,eax
c0017339:	a1 2c 23 03 c0       	mov    eax,ds:0xc003232c
c001733e:	83 c0 01             	add    eax,0x1
c0017341:	a3 2c 23 03 c0       	mov    ds:0xc003232c,eax
c0017346:	fa                   	cli    
c0017347:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001734c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017350:	83 c0 01             	add    eax,0x1
c0017353:	a3 30 23 03 c0       	mov    ds:0xc0032330,eax
c0017358:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001735d:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0017360:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017365:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0017368:	50                   	push   eax
c0017369:	68 34 23 03 c0       	push   0xc0032334
c001736e:	e8 4d f7 00 00       	call   c0026ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017373:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017378:	83 c4 10             	add    esp,0x10
c001737b:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0017382:	a1 10 23 03 c0       	mov    eax,ds:0xc0032310
c0017387:	85 c0                	test   eax,eax
c0017389:	0f 84 81 00 00 00    	je     c0017410 <KeTerminateCurrentThread(int)+0xe8>
c001738f:	c6 05 14 23 03 c0 01 	mov    BYTE PTR ds:0xc0032314,0x1
c0017396:	83 ec 0c             	sub    esp,0xc
c0017399:	50                   	push   eax
c001739a:	e8 ed fa ff ff       	call   c0016e8c <unblockTask(ThreadControlBlock*)>
c001739f:	83 c4 10             	add    esp,0x10
c00173a2:	66 90                	xchg   ax,ax
c00173a4:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c00173ac:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c00173b1:	85 c0                	test   eax,eax
c00173b3:	75 03                	jne    c00173b8 <KeTerminateCurrentThread(int)+0x90>
c00173b5:	fb                   	sti    
c00173b6:	66 90                	xchg   ax,ax
c00173b8:	a1 2c 23 03 c0       	mov    eax,ds:0xc003232c
c00173bd:	83 e8 01             	sub    eax,0x1
c00173c0:	a3 2c 23 03 c0       	mov    ds:0xc003232c,eax
c00173c5:	75 09                	jne    c00173d0 <KeTerminateCurrentThread(int)+0xa8>
c00173c7:	83 3d 28 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032328,0x0
c00173ce:	75 54                	jne    c0017424 <KeTerminateCurrentThread(int)+0xfc>
c00173d0:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c00173d8:	8b 0d 30 23 03 c0    	mov    ecx,DWORD PTR ds:0xc0032330
c00173de:	85 c9                	test   ecx,ecx
c00173e0:	75 06                	jne    c00173e8 <KeTerminateCurrentThread(int)+0xc0>
c00173e2:	66 90                	xchg   ax,ax
c00173e4:	fb                   	sti    
c00173e5:	8d 76 00             	lea    esi,[esi+0x0]
c00173e8:	fa                   	cli    
c00173e9:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c00173ee:	83 c0 01             	add    eax,0x1
c00173f1:	a3 30 23 03 c0       	mov    ds:0xc0032330,eax
c00173f6:	e8 39 f7 ff ff       	call   c0016b34 <schedule()>
c00173fb:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c0017403:	8b 15 30 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032330
c0017409:	85 d2                	test   edx,edx
c001740b:	75 db                	jne    c00173e8 <KeTerminateCurrentThread(int)+0xc0>
c001740d:	eb d5                	jmp    c00173e4 <KeTerminateCurrentThread(int)+0xbc>
c001740f:	90                   	nop
c0017410:	83 ec 0c             	sub    esp,0xc
c0017413:	68 05 9a 02 c0       	push   0xc0029a05
c0017418:	e8 49 fb fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001741d:	83 c4 10             	add    esp,0x10
c0017420:	eb 82                	jmp    c00173a4 <KeTerminateCurrentThread(int)+0x7c>
c0017422:	66 90                	xchg   ax,ax
c0017424:	c7 05 28 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032328,0x0
c001742e:	e8 01 f7 ff ff       	call   c0016b34 <schedule()>
c0017433:	eb 9b                	jmp    c00173d0 <KeTerminateCurrentThread(int)+0xa8>
c0017435:	8d 76 00             	lea    esi,[esi+0x0]

c0017438 <__static_initialization_and_destruction_0(int, int)>:
c0017438:	83 ec 0c             	sub    esp,0xc
c001743b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017440:	0f 85 8e 00 00 00    	jne    c00174d4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017446:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001744e:	0f 85 80 00 00 00    	jne    c00174d4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017454:	83 ec 0c             	sub    esp,0xc
c0017457:	68 4c 23 03 c0       	push   0xc003234c
c001745c:	e8 ff fa 00 00       	call   c0026f60 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017461:	83 c4 10             	add    esp,0x10
c0017464:	83 ec 04             	sub    esp,0x4
c0017467:	68 20 bd 02 c0       	push   0xc002bd20
c001746c:	68 4c 23 03 c0       	push   0xc003234c
c0017471:	68 10 6f 02 c0       	push   0xc0026f10
c0017476:	e8 95 62 ff ff       	call   c000d710 <__cxa_atexit>
c001747b:	83 c4 10             	add    esp,0x10
c001747e:	83 ec 0c             	sub    esp,0xc
c0017481:	68 40 23 03 c0       	push   0xc0032340
c0017486:	e8 d5 fa 00 00       	call   c0026f60 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001748b:	83 c4 10             	add    esp,0x10
c001748e:	83 ec 04             	sub    esp,0x4
c0017491:	68 20 bd 02 c0       	push   0xc002bd20
c0017496:	68 40 23 03 c0       	push   0xc0032340
c001749b:	68 10 6f 02 c0       	push   0xc0026f10
c00174a0:	e8 6b 62 ff ff       	call   c000d710 <__cxa_atexit>
c00174a5:	83 c4 10             	add    esp,0x10
c00174a8:	83 ec 0c             	sub    esp,0xc
c00174ab:	68 34 23 03 c0       	push   0xc0032334
c00174b0:	e8 ab fa 00 00       	call   c0026f60 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00174b5:	83 c4 10             	add    esp,0x10
c00174b8:	83 ec 04             	sub    esp,0x4
c00174bb:	68 20 bd 02 c0       	push   0xc002bd20
c00174c0:	68 34 23 03 c0       	push   0xc0032334
c00174c5:	68 10 6f 02 c0       	push   0xc0026f10
c00174ca:	e8 41 62 ff ff       	call   c000d710 <__cxa_atexit>
c00174cf:	83 c4 10             	add    esp,0x10
c00174d2:	66 90                	xchg   ax,ax
c00174d4:	90                   	nop
c00174d5:	83 c4 0c             	add    esp,0xc
c00174d8:	c3                   	ret    
c00174d9:	8d 76 00             	lea    esi,[esi+0x0]

c00174dc <_GLOBAL__sub_I_keNextPID>:
c00174dc:	83 ec 0c             	sub    esp,0xc
c00174df:	83 ec 08             	sub    esp,0x8
c00174e2:	68 ff ff 00 00       	push   0xffff
c00174e7:	6a 01                	push   0x1
c00174e9:	e8 4a ff ff ff       	call   c0017438 <__static_initialization_and_destruction_0(int, int)>
c00174ee:	83 c4 10             	add    esp,0x10
c00174f1:	83 c4 0c             	add    esp,0xc
c00174f4:	c3                   	ret    

c00174f5 <Vm::inbv(unsigned short)>:
c00174f5:	55                   	push   ebp
c00174f6:	89 e5                	mov    ebp,esp
c00174f8:	83 ec 14             	sub    esp,0x14
c00174fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00174fe:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
c0017502:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017506:	3d fe fe 00 00       	cmp    eax,0xfefe
c001750b:	75 07                	jne    c0017514 <Vm::inbv(unsigned short)+0x1f>
c001750d:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0017512:	eb 16                	jmp    c001752a <Vm::inbv(unsigned short)+0x35>
c0017514:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017518:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001751c:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0017520:	89 c2                	mov    edx,eax
c0017522:	ec                   	in     al,dx
c0017523:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0017526:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0017529:	90                   	nop
c001752a:	c9                   	leave  
c001752b:	c3                   	ret    

c001752c <Vm::outbv(unsigned short, unsigned char)>:
c001752c:	55                   	push   ebp
c001752d:	89 e5                	mov    ebp,esp
c001752f:	83 ec 18             	sub    esp,0x18
c0017532:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017535:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017538:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
c001753c:	88 d0                	mov    al,dl
c001753e:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c0017541:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017545:	3d fe fe 00 00       	cmp    eax,0xfefe
c001754a:	75 2d                	jne    c0017579 <Vm::outbv(unsigned short, unsigned char)+0x4d>
c001754c:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0017551:	8d 50 01             	lea    edx,[eax+0x1]
c0017554:	89 15 90 23 03 c0    	mov    DWORD PTR ds:0xc0032390,edx
c001755a:	8a 55 e8             	mov    dl,BYTE PTR [ebp-0x18]
c001755d:	88 90 a0 23 03 c0    	mov    BYTE PTR [eax-0x3ffcdc60],dl
c0017563:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0017568:	83 f8 20             	cmp    eax,0x20
c001756b:	75 23                	jne    c0017590 <Vm::outbv(unsigned short, unsigned char)+0x64>
c001756d:	c7 05 90 23 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0032390,0x1f
c0017577:	eb 17                	jmp    c0017590 <Vm::outbv(unsigned short, unsigned char)+0x64>
c0017579:	0f b6 55 e8          	movzx  edx,BYTE PTR [ebp-0x18]
c001757d:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017581:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0017585:	88 55 fd             	mov    BYTE PTR [ebp-0x3],dl
c0017588:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001758b:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001758f:	ee                   	out    dx,al
c0017590:	90                   	nop
c0017591:	c9                   	leave  
c0017592:	c3                   	ret    

c0017593 <Vm::realToLinear(unsigned short, unsigned short)>:
c0017593:	55                   	push   ebp
c0017594:	89 e5                	mov    ebp,esp
c0017596:	83 ec 08             	sub    esp,0x8
c0017599:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001759c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001759f:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
c00175a3:	66 89 45 f8          	mov    WORD PTR [ebp-0x8],ax
c00175a7:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
c00175ab:	c1 e0 04             	shl    eax,0x4
c00175ae:	89 c2                	mov    edx,eax
c00175b0:	0f b7 45 f8          	movzx  eax,WORD PTR [ebp-0x8]
c00175b4:	01 d0                	add    eax,edx
c00175b6:	c9                   	leave  
c00175b7:	c3                   	ret    

c00175b8 <Vm::getSegment(unsigned int)>:
c00175b8:	55                   	push   ebp
c00175b9:	89 e5                	mov    ebp,esp
c00175bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00175be:	c1 e8 10             	shr    eax,0x10
c00175c1:	5d                   	pop    ebp
c00175c2:	c3                   	ret    

c00175c3 <Vm::getOffset(unsigned int)>:
c00175c3:	55                   	push   ebp
c00175c4:	89 e5                	mov    ebp,esp
c00175c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00175c9:	5d                   	pop    ebp
c00175ca:	c3                   	ret    

c00175cb <Vm::mainloop2()>:
c00175cb:	55                   	push   ebp
c00175cc:	89 e5                	mov    ebp,esp
c00175ce:	53                   	push   ebx
c00175cf:	83 ec 04             	sub    esp,0x4
c00175d2:	fa                   	cli    
c00175d3:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c00175d8:	83 c0 01             	add    eax,0x1
c00175db:	a3 30 23 03 c0       	mov    ds:0xc0032330,eax
c00175e0:	c6 05 89 23 03 c0 01 	mov    BYTE PTR ds:0xc0032389,0x1
c00175e7:	83 ec 0c             	sub    esp,0xc
c00175ea:	6a 02                	push   0x2
c00175ec:	e8 d7 f5 ff ff       	call   c0016bc8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00175f1:	83 c4 10             	add    esp,0x10
c00175f4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00175f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00175fb:	66 8b 40 5f          	mov    ax,WORD PTR [eax+0x5f]
c00175ff:	0f b7 d8             	movzx  ebx,ax
c0017602:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017607:	8b 00                	mov    eax,DWORD PTR [eax]
c0017609:	66 8b 40 5d          	mov    ax,WORD PTR [eax+0x5d]
c001760d:	0f b7 c8             	movzx  ecx,ax
c0017610:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017615:	8b 00                	mov    eax,DWORD PTR [eax]
c0017617:	66 8b 40 5b          	mov    ax,WORD PTR [eax+0x5b]
c001761b:	0f b7 d0             	movzx  edx,ax
c001761e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017623:	8b 00                	mov    eax,DWORD PTR [eax]
c0017625:	66 8b 40 59          	mov    ax,WORD PTR [eax+0x59]
c0017629:	0f b7 c0             	movzx  eax,ax
c001762c:	53                   	push   ebx
c001762d:	51                   	push   ecx
c001762e:	52                   	push   edx
c001762f:	50                   	push   eax
c0017630:	e8 da 8b fe ff       	call   c000020f <goToVM86>
c0017635:	83 c4 10             	add    esp,0x10
c0017638:	90                   	nop
c0017639:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001763c:	c9                   	leave  
c001763d:	c3                   	ret    

c001763e <Vm::mainVm8086Loop(void*)>:
c001763e:	55                   	push   ebp
c001763f:	89 e5                	mov    ebp,esp
c0017641:	83 ec 08             	sub    esp,0x8
c0017644:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c001764c:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0017651:	85 c0                	test   eax,eax
c0017653:	75 01                	jne    c0017656 <Vm::mainVm8086Loop(void*)+0x18>
c0017655:	fb                   	sti    
c0017656:	e8 70 ff ff ff       	call   c00175cb <Vm::mainloop2()>
c001765b:	90                   	nop
c001765c:	c9                   	leave  
c001765d:	c3                   	ret    

c001765e <Vm::mainloop3(unsigned long)>:
c001765e:	55                   	push   ebp
c001765f:	89 e5                	mov    ebp,esp
c0017661:	83 ec 08             	sub    esp,0x8
c0017664:	fa                   	cli    
c0017665:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001766a:	83 c0 01             	add    eax,0x1
c001766d:	a3 30 23 03 c0       	mov    ds:0xc0032330,eax
c0017672:	c6 05 88 23 03 c0 01 	mov    BYTE PTR ds:0xc0032388,0x1
c0017679:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001767c:	a3 84 23 03 c0       	mov    ds:0xc0032384,eax
c0017681:	83 ec 0c             	sub    esp,0xc
c0017684:	6a 02                	push   0x2
c0017686:	e8 3d f5 ff ff       	call   c0016bc8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001768b:	83 c4 10             	add    esp,0x10
c001768e:	e8 38 ff ff ff       	call   c00175cb <Vm::mainloop2()>
c0017693:	90                   	nop
c0017694:	c9                   	leave  
c0017695:	c3                   	ret    

c0017696 <Vm::initialise8086()>:
c0017696:	55                   	push   ebp
c0017697:	89 e5                	mov    ebp,esp
c0017699:	83 ec 08             	sub    esp,0x8
c001769c:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c00176a1:	68 80 00 00 00       	push   0x80
c00176a6:	6a 00                	push   0x0
c00176a8:	68 3e 76 01 c0       	push   0xc001763e
c00176ad:	50                   	push   eax
c00176ae:	e8 cd f1 ff ff       	call   c0016880 <Process::createThread(void (*)(void*), void*, int)>
c00176b3:	83 c4 10             	add    esp,0x10
c00176b6:	a3 8c 23 03 c0       	mov    ds:0xc003238c,eax
c00176bb:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c00176c0:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c00176c6:	83 ec 0c             	sub    esp,0xc
c00176c9:	6a 07                	push   0x7
c00176cb:	68 10 01 00 00       	push   0x110
c00176d0:	6a 00                	push   0x0
c00176d2:	6a 00                	push   0x0
c00176d4:	50                   	push   eax
c00176d5:	e8 ec c6 ff ff       	call   c0013dc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00176da:	83 c4 20             	add    esp,0x20
c00176dd:	90                   	nop
c00176de:	c9                   	leave  
c00176df:	c3                   	ret    

c00176e0 <Vm::finish8086()>:
c00176e0:	55                   	push   ebp
c00176e1:	89 e5                	mov    ebp,esp
c00176e3:	83 ec 18             	sub    esp,0x18
c00176e6:	fa                   	cli    
c00176e7:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c00176ec:	83 c0 01             	add    eax,0x1
c00176ef:	a3 30 23 03 c0       	mov    ds:0xc0032330,eax
c00176f4:	a0 88 23 03 c0       	mov    al,ds:0xc0032388
c00176f9:	0f b6 c0             	movzx  eax,al
c00176fc:	85 c0                	test   eax,eax
c00176fe:	75 19                	jne    c0017719 <Vm::finish8086()+0x39>
c0017700:	e8 2f f4 ff ff       	call   c0016b34 <schedule()>
c0017705:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c001770d:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0017712:	85 c0                	test   eax,eax
c0017714:	75 d0                	jne    c00176e6 <Vm::finish8086()+0x6>
c0017716:	fb                   	sti    
c0017717:	eb cd                	jmp    c00176e6 <Vm::finish8086()+0x6>
c0017719:	90                   	nop
c001771a:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c001771f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017722:	c6 05 88 23 03 c0 00 	mov    BYTE PTR ds:0xc0032388,0x0
c0017729:	a1 8c 23 03 c0       	mov    eax,ds:0xc003238c
c001772e:	83 ec 0c             	sub    esp,0xc
c0017731:	50                   	push   eax
c0017732:	e8 55 f7 ff ff       	call   c0016e8c <unblockTask(ThreadControlBlock*)>
c0017737:	83 c4 10             	add    esp,0x10
c001773a:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c0017742:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0017747:	85 c0                	test   eax,eax
c0017749:	75 01                	jne    c001774c <Vm::finish8086()+0x6c>
c001774b:	fb                   	sti    
c001774c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001774f:	c9                   	leave  
c0017750:	c3                   	ret    

c0017751 <Vm::getOutput8086(unsigned char*)>:
c0017751:	55                   	push   ebp
c0017752:	89 e5                	mov    ebp,esp
c0017754:	57                   	push   edi
c0017755:	56                   	push   esi
c0017756:	53                   	push   ebx
c0017757:	83 ec 20             	sub    esp,0x20
c001775a:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001775f:	89 c2                	mov    edx,eax
c0017761:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017764:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0017767:	c7 45 e8 a0 23 03 c0 	mov    DWORD PTR [ebp-0x18],0xc00323a0
c001776e:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0017771:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0017774:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0017777:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001777a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001777d:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0017780:	89 c6                	mov    esi,eax
c0017782:	89 d7                	mov    edi,edx
c0017784:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017786:	89 c8                	mov    eax,ecx
c0017788:	89 fa                	mov    edx,edi
c001778a:	89 f3                	mov    ebx,esi
c001778c:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
c001778f:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0017792:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0017795:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001779a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001779d:	c7 05 90 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032390,0x0
c00177a7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00177aa:	83 c4 20             	add    esp,0x20
c00177ad:	5b                   	pop    ebx
c00177ae:	5e                   	pop    esi
c00177af:	5f                   	pop    edi
c00177b0:	5d                   	pop    ebp
c00177b1:	c3                   	ret    

c00177b2 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00177b2:	55                   	push   ebp
c00177b3:	89 e5                	mov    ebp,esp
c00177b5:	57                   	push   edi
c00177b6:	56                   	push   esi
c00177b7:	53                   	push   ebx
c00177b8:	83 ec 3c             	sub    esp,0x3c
c00177bb:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00177be:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00177c1:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00177c4:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c00177c7:	66 89 5d c4          	mov    WORD PTR [ebp-0x3c],bx
c00177cb:	66 89 4d c0          	mov    WORD PTR [ebp-0x40],cx
c00177cf:	66 89 55 bc          	mov    WORD PTR [ebp-0x44],dx
c00177d3:	66 89 45 b8          	mov    WORD PTR [ebp-0x48],ax
c00177d7:	a0 80 23 03 c0       	mov    al,ds:0xc0032380
c00177dc:	83 f0 01             	xor    eax,0x1
c00177df:	0f b6 c0             	movzx  eax,al
c00177e2:	85 c0                	test   eax,eax
c00177e4:	74 07                	je     c00177ed <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3b>
c00177e6:	c6 05 80 23 03 c0 01 	mov    BYTE PTR ds:0xc0032380,0x1
c00177ed:	fa                   	cli    
c00177ee:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c00177f3:	83 c0 01             	add    eax,0x1
c00177f6:	a3 30 23 03 c0       	mov    ds:0xc0032330,eax
c00177fb:	a0 89 23 03 c0       	mov    al,ds:0xc0032389
c0017800:	0f b6 c0             	movzx  eax,al
c0017803:	85 c0                	test   eax,eax
c0017805:	75 19                	jne    c0017820 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x6e>
c0017807:	e8 28 f3 ff ff       	call   c0016b34 <schedule()>
c001780c:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c0017814:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0017819:	85 c0                	test   eax,eax
c001781b:	75 d0                	jne    c00177ed <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3b>
c001781d:	fb                   	sti    
c001781e:	eb cd                	jmp    c00177ed <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3b>
c0017820:	90                   	nop
c0017821:	a1 8c 23 03 c0       	mov    eax,ds:0xc003238c
c0017826:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0017829:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c001782d:	a1 8c 23 03 c0       	mov    eax,ds:0xc003238c
c0017832:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
c0017835:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0017839:	a1 8c 23 03 c0       	mov    eax,ds:0xc003238c
c001783e:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0017841:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0017845:	a1 8c 23 03 c0       	mov    eax,ds:0xc003238c
c001784a:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
c001784d:	66 89 50 5f          	mov    WORD PTR [eax+0x5f],dx
c0017851:	a1 8c 23 03 c0       	mov    eax,ds:0xc003238c
c0017856:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001785a:	c7 05 90 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032390,0x0
c0017864:	83 ec 04             	sub    esp,0x4
c0017867:	6a 20                	push   0x20
c0017869:	6a 00                	push   0x0
c001786b:	68 a0 23 03 c0       	push   0xc00323a0
c0017870:	e8 7b 8c fe ff       	call   c00004f0 <memset>
c0017875:	83 c4 10             	add    esp,0x10
c0017878:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c001787b:	0f b7 55 c4          	movzx  edx,WORD PTR [ebp-0x3c]
c001787f:	0f b7 45 c0          	movzx  eax,WORD PTR [ebp-0x40]
c0017883:	83 ec 08             	sub    esp,0x8
c0017886:	52                   	push   edx
c0017887:	50                   	push   eax
c0017888:	e8 06 fd ff ff       	call   c0017593 <Vm::realToLinear(unsigned short, unsigned short)>
c001788d:	83 c4 10             	add    esp,0x10
c0017890:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0017893:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017896:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0017899:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
c001789c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001789f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00178a2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00178a5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00178a8:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00178ab:	89 c6                	mov    esi,eax
c00178ad:	89 d7                	mov    edi,edx
c00178af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00178b1:	89 c8                	mov    eax,ecx
c00178b3:	89 fa                	mov    edx,edi
c00178b5:	89 f3                	mov    ebx,esi
c00178b7:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00178ba:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00178bd:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00178c0:	c6 05 89 23 03 c0 00 	mov    BYTE PTR ds:0xc0032389,0x0
c00178c7:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c00178cf:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c00178d4:	85 c0                	test   eax,eax
c00178d6:	75 01                	jne    c00178d9 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x127>
c00178d8:	fb                   	sti    
c00178d9:	a1 8c 23 03 c0       	mov    eax,ds:0xc003238c
c00178de:	83 ec 0c             	sub    esp,0xc
c00178e1:	50                   	push   eax
c00178e2:	e8 a5 f5 ff ff       	call   c0016e8c <unblockTask(ThreadControlBlock*)>
c00178e7:	83 c4 10             	add    esp,0x10
c00178ea:	b0 01                	mov    al,0x1
c00178ec:	8d 65 f4             	lea    esp,[ebp-0xc]
c00178ef:	5b                   	pop    ebx
c00178f0:	5e                   	pop    esi
c00178f1:	5f                   	pop    edi
c00178f2:	5d                   	pop    ebp
c00178f3:	c3                   	ret    

c00178f4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00178f4:	55                   	push   ebp
c00178f5:	89 e5                	mov    ebp,esp
c00178f7:	56                   	push   esi
c00178f8:	53                   	push   ebx
c00178f9:	83 ec 30             	sub    esp,0x30
c00178fc:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00178ff:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0017902:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0017905:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017908:	66 89 5d d4          	mov    WORD PTR [ebp-0x2c],bx
c001790c:	66 89 4d d0          	mov    WORD PTR [ebp-0x30],cx
c0017910:	66 89 55 cc          	mov    WORD PTR [ebp-0x34],dx
c0017914:	66 89 45 c8          	mov    WORD PTR [ebp-0x38],ax
c0017918:	a0 80 23 03 c0       	mov    al,ds:0xc0032380
c001791d:	83 f0 01             	xor    eax,0x1
c0017920:	0f b6 c0             	movzx  eax,al
c0017923:	85 c0                	test   eax,eax
c0017925:	74 07                	je     c001792e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x3a>
c0017927:	c6 05 80 23 03 c0 01 	mov    BYTE PTR ds:0xc0032380,0x1
c001792e:	83 ec 08             	sub    esp,0x8
c0017931:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017934:	68 1c 9b 02 c0       	push   0xc0029b1c
c0017939:	e8 28 f6 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001793e:	83 c4 10             	add    esp,0x10
c0017941:	fa                   	cli    
c0017942:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0017947:	83 c0 01             	add    eax,0x1
c001794a:	a3 30 23 03 c0       	mov    ds:0xc0032330,eax
c001794f:	a0 89 23 03 c0       	mov    al,ds:0xc0032389
c0017954:	0f b6 c0             	movzx  eax,al
c0017957:	85 c0                	test   eax,eax
c0017959:	75 19                	jne    c0017974 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x80>
c001795b:	e8 d4 f1 ff ff       	call   c0016b34 <schedule()>
c0017960:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c0017968:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001796d:	85 c0                	test   eax,eax
c001796f:	75 d0                	jne    c0017941 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x4d>
c0017971:	fb                   	sti    
c0017972:	eb cd                	jmp    c0017941 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x4d>
c0017974:	90                   	nop
c0017975:	a1 8c 23 03 c0       	mov    eax,ds:0xc003238c
c001797a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001797d:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0017981:	a1 8c 23 03 c0       	mov    eax,ds:0xc003238c
c0017986:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0017989:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c001798d:	a1 8c 23 03 c0       	mov    eax,ds:0xc003238c
c0017992:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0017995:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0017999:	a1 8c 23 03 c0       	mov    eax,ds:0xc003238c
c001799e:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00179a1:	66 89 50 5f          	mov    WORD PTR [eax+0x5f],dx
c00179a5:	a1 8c 23 03 c0       	mov    eax,ds:0xc003238c
c00179aa:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00179ae:	c7 05 90 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032390,0x0
c00179b8:	83 ec 04             	sub    esp,0x4
c00179bb:	6a 20                	push   0x20
c00179bd:	6a 00                	push   0x0
c00179bf:	68 a0 23 03 c0       	push   0xc00323a0
c00179c4:	e8 27 8b fe ff       	call   c00004f0 <memset>
c00179c9:	83 c4 10             	add    esp,0x10
c00179cc:	c7 45 ec 14 01 00 00 	mov    DWORD PTR [ebp-0x14],0x114
c00179d3:	83 ec 0c             	sub    esp,0xc
c00179d6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00179d9:	e8 7a 81 ff ff       	call   c000fb58 <malloc>
c00179de:	83 c4 10             	add    esp,0x10
c00179e1:	89 c3                	mov    ebx,eax
c00179e3:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c00179e8:	83 ec 04             	sub    esp,0x4
c00179eb:	50                   	push   eax
c00179ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00179ef:	53                   	push   ebx
c00179f0:	e8 6b 0c ff ff       	call   c0008660 <File::File(char const*, Process*)>
c00179f5:	83 c4 10             	add    esp,0x10
c00179f8:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00179fb:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00179ff:	75 29                	jne    c0017a2a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x136>
c0017a01:	83 ec 0c             	sub    esp,0xc
c0017a04:	68 3e 9b 02 c0       	push   0xc0029b3e
c0017a09:	e8 9e 85 ff ff       	call   c000ffac <KePanic(char const*)>
c0017a0e:	83 c4 10             	add    esp,0x10
c0017a11:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c0017a19:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0017a1e:	85 c0                	test   eax,eax
c0017a20:	75 01                	jne    c0017a23 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x12f>
c0017a22:	fb                   	sti    
c0017a23:	b0 00                	mov    al,0x0
c0017a25:	e9 fb 00 00 00       	jmp    c0017b25 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x231>
c0017a2a:	83 ec 04             	sub    esp,0x4
c0017a2d:	8d 45 df             	lea    eax,[ebp-0x21]
c0017a30:	50                   	push   eax
c0017a31:	8d 45 e0             	lea    eax,[ebp-0x20]
c0017a34:	50                   	push   eax
c0017a35:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0017a38:	e8 43 0f ff ff       	call   c0008980 <File::stat(unsigned long long*, bool*)>
c0017a3d:	83 c4 10             	add    esp,0x10
c0017a40:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0017a43:	0f b6 c0             	movzx  eax,al
c0017a46:	85 c0                	test   eax,eax
c0017a48:	74 29                	je     c0017a73 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17f>
c0017a4a:	83 ec 0c             	sub    esp,0xc
c0017a4d:	68 52 9b 02 c0       	push   0xc0029b52
c0017a52:	e8 55 85 ff ff       	call   c000ffac <KePanic(char const*)>
c0017a57:	83 c4 10             	add    esp,0x10
c0017a5a:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c0017a62:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0017a67:	85 c0                	test   eax,eax
c0017a69:	75 01                	jne    c0017a6c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x178>
c0017a6b:	fb                   	sti    
c0017a6c:	b0 00                	mov    al,0x0
c0017a6e:	e9 b2 00 00 00       	jmp    c0017b25 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x231>
c0017a73:	83 ec 08             	sub    esp,0x8
c0017a76:	6a 01                	push   0x1
c0017a78:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0017a7b:	e8 fe 0b ff ff       	call   c000867e <File::open(FileOpenMode)>
c0017a80:	83 c4 10             	add    esp,0x10
c0017a83:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0017a86:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0017a8a:	74 26                	je     c0017ab2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1be>
c0017a8c:	83 ec 0c             	sub    esp,0xc
c0017a8f:	68 6b 9b 02 c0       	push   0xc0029b6b
c0017a94:	e8 13 85 ff ff       	call   c000ffac <KePanic(char const*)>
c0017a99:	83 c4 10             	add    esp,0x10
c0017a9c:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c0017aa4:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0017aa9:	85 c0                	test   eax,eax
c0017aab:	75 01                	jne    c0017aae <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1ba>
c0017aad:	fb                   	sti    
c0017aae:	b0 00                	mov    al,0x0
c0017ab0:	eb 73                	jmp    c0017b25 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x231>
c0017ab2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017ab5:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ab7:	83 c0 0c             	add    eax,0xc
c0017aba:	8b 18                	mov    ebx,DWORD PTR [eax]
c0017abc:	0f b7 55 d4          	movzx  edx,WORD PTR [ebp-0x2c]
c0017ac0:	0f b7 45 d0          	movzx  eax,WORD PTR [ebp-0x30]
c0017ac4:	83 ec 08             	sub    esp,0x8
c0017ac7:	52                   	push   edx
c0017ac8:	50                   	push   eax
c0017ac9:	e8 c5 fa ff ff       	call   c0017593 <Vm::realToLinear(unsigned short, unsigned short)>
c0017ace:	83 c4 10             	add    esp,0x10
c0017ad1:	89 c6                	mov    esi,eax
c0017ad3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0017ad6:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0017ad9:	83 ec 0c             	sub    esp,0xc
c0017adc:	8d 4d d8             	lea    ecx,[ebp-0x28]
c0017adf:	51                   	push   ecx
c0017ae0:	56                   	push   esi
c0017ae1:	52                   	push   edx
c0017ae2:	50                   	push   eax
c0017ae3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0017ae6:	ff d3                	call   ebx
c0017ae8:	83 c4 20             	add    esp,0x20
c0017aeb:	83 ec 0c             	sub    esp,0xc
c0017aee:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0017af1:	e8 e6 0b ff ff       	call   c00086dc <File::close()>
c0017af6:	83 c4 10             	add    esp,0x10
c0017af9:	c6 05 89 23 03 c0 00 	mov    BYTE PTR ds:0xc0032389,0x0
c0017b00:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c0017b08:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0017b0d:	85 c0                	test   eax,eax
c0017b0f:	75 01                	jne    c0017b12 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x21e>
c0017b11:	fb                   	sti    
c0017b12:	a1 8c 23 03 c0       	mov    eax,ds:0xc003238c
c0017b17:	83 ec 0c             	sub    esp,0xc
c0017b1a:	50                   	push   eax
c0017b1b:	e8 6c f3 ff ff       	call   c0016e8c <unblockTask(ThreadControlBlock*)>
c0017b20:	83 c4 10             	add    esp,0x10
c0017b23:	b0 01                	mov    al,0x1
c0017b25:	8d 65 f8             	lea    esp,[ebp-0x8]
c0017b28:	5b                   	pop    ebx
c0017b29:	5e                   	pop    esi
c0017b2a:	5d                   	pop    ebp
c0017b2b:	c3                   	ret    

c0017b2c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0017b2c:	55                   	push   ebp
c0017b2d:	89 e5                	mov    ebp,esp
c0017b2f:	83 ec 68             	sub    esp,0x68
c0017b32:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0017b35:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017b38:	66 89 55 9c          	mov    WORD PTR [ebp-0x64],dx
c0017b3c:	66 89 45 98          	mov    WORD PTR [ebp-0x68],ax
c0017b40:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
c0017b47:	8b 45 98             	mov    eax,DWORD PTR [ebp-0x68]
c0017b4a:	83 e8 06             	sub    eax,0x6
c0017b4d:	66 89 45 98          	mov    WORD PTR [ebp-0x68],ax
c0017b51:	0f b7 55 98          	movzx  edx,WORD PTR [ebp-0x68]
c0017b55:	0f b7 45 9c          	movzx  eax,WORD PTR [ebp-0x64]
c0017b59:	52                   	push   edx
c0017b5a:	50                   	push   eax
c0017b5b:	e8 33 fa ff ff       	call   c0017593 <Vm::realToLinear(unsigned short, unsigned short)>
c0017b60:	83 c4 08             	add    esp,0x8
c0017b63:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c0017b66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b69:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017b6c:	83 e8 06             	sub    eax,0x6
c0017b6f:	0f b7 d0             	movzx  edx,ax
c0017b72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b75:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0017b78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b7b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017b7e:	83 c0 02             	add    eax,0x2
c0017b81:	0f b7 c0             	movzx  eax,ax
c0017b84:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0017b87:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c0017b8a:	66 89 45 da          	mov    WORD PTR [ebp-0x26],ax
c0017b8e:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0017b91:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0017b94:	66 8b 45 da          	mov    ax,WORD PTR [ebp-0x26]
c0017b98:	88 c2                	mov    dl,al
c0017b9a:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017b9d:	88 10                	mov    BYTE PTR [eax],dl
c0017b9f:	0f b7 45 da          	movzx  eax,WORD PTR [ebp-0x26]
c0017ba3:	c1 e8 08             	shr    eax,0x8
c0017ba6:	89 c2                	mov    edx,eax
c0017ba8:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017bab:	83 c0 01             	add    eax,0x1
c0017bae:	88 10                	mov    BYTE PTR [eax],dl
c0017bb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bb3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017bb6:	0f b7 c0             	movzx  eax,ax
c0017bb9:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0017bbc:	83 c2 02             	add    edx,0x2
c0017bbf:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
c0017bc2:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
c0017bc6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0017bc9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0017bcc:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
c0017bd0:	88 c2                	mov    dl,al
c0017bd2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0017bd5:	88 10                	mov    BYTE PTR [eax],dl
c0017bd7:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
c0017bdb:	c1 e8 08             	shr    eax,0x8
c0017bde:	89 c2                	mov    edx,eax
c0017be0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0017be3:	83 c0 01             	add    eax,0x1
c0017be6:	88 10                	mov    BYTE PTR [eax],dl
c0017be8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017beb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017bee:	0f b7 c0             	movzx  eax,ax
c0017bf1:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0017bf4:	83 c2 04             	add    edx,0x4
c0017bf7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0017bfa:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
c0017bfe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017c01:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0017c04:	66 8b 45 f2          	mov    ax,WORD PTR [ebp-0xe]
c0017c08:	88 c2                	mov    dl,al
c0017c0a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0017c0d:	88 10                	mov    BYTE PTR [eax],dl
c0017c0f:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
c0017c13:	c1 e8 08             	shr    eax,0x8
c0017c16:	89 c2                	mov    edx,eax
c0017c18:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0017c1b:	83 c0 01             	add    eax,0x1
c0017c1e:	88 10                	mov    BYTE PTR [eax],dl
c0017c20:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017c25:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c27:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c0017c2a:	0f b6 c0             	movzx  eax,al
c0017c2d:	85 c0                	test   eax,eax
c0017c2f:	74 5e                	je     c0017c8f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x163>
c0017c31:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0017c34:	83 c0 04             	add    eax,0x4
c0017c37:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0017c3a:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0017c3d:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0017c40:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0017c43:	8a 00                	mov    al,BYTE PTR [eax]
c0017c45:	0f b6 c0             	movzx  eax,al
c0017c48:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
c0017c4b:	83 c2 01             	add    edx,0x1
c0017c4e:	8a 12                	mov    dl,BYTE PTR [edx]
c0017c50:	0f b6 d2             	movzx  edx,dl
c0017c53:	c1 e2 08             	shl    edx,0x8
c0017c56:	09 d0                	or     eax,edx
c0017c58:	80 cc 02             	or     ah,0x2
c0017c5b:	0f b7 c0             	movzx  eax,ax
c0017c5e:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0017c61:	83 c2 04             	add    edx,0x4
c0017c64:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0017c67:	66 89 45 ce          	mov    WORD PTR [ebp-0x32],ax
c0017c6b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017c6e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0017c71:	66 8b 45 ce          	mov    ax,WORD PTR [ebp-0x32]
c0017c75:	88 c2                	mov    dl,al
c0017c77:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0017c7a:	88 10                	mov    BYTE PTR [eax],dl
c0017c7c:	0f b7 45 ce          	movzx  eax,WORD PTR [ebp-0x32]
c0017c80:	c1 e8 08             	shr    eax,0x8
c0017c83:	89 c2                	mov    edx,eax
c0017c85:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0017c88:	83 c0 01             	add    eax,0x1
c0017c8b:	88 10                	mov    BYTE PTR [eax],dl
c0017c8d:	eb 5e                	jmp    c0017ced <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x1c1>
c0017c8f:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0017c92:	83 c0 04             	add    eax,0x4
c0017c95:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
c0017c98:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
c0017c9b:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
c0017c9e:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
c0017ca1:	8a 00                	mov    al,BYTE PTR [eax]
c0017ca3:	0f b6 c0             	movzx  eax,al
c0017ca6:	8b 55 ac             	mov    edx,DWORD PTR [ebp-0x54]
c0017ca9:	83 c2 01             	add    edx,0x1
c0017cac:	8a 12                	mov    dl,BYTE PTR [edx]
c0017cae:	0f b6 d2             	movzx  edx,dl
c0017cb1:	c1 e2 08             	shl    edx,0x8
c0017cb4:	09 d0                	or     eax,edx
c0017cb6:	0f b7 c0             	movzx  eax,ax
c0017cb9:	25 ff fd 00 00       	and    eax,0xfdff
c0017cbe:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0017cc1:	83 c2 04             	add    edx,0x4
c0017cc4:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
c0017cc7:	66 89 45 ba          	mov    WORD PTR [ebp-0x46],ax
c0017ccb:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
c0017cce:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
c0017cd1:	66 8b 45 ba          	mov    ax,WORD PTR [ebp-0x46]
c0017cd5:	88 c2                	mov    dl,al
c0017cd7:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c0017cda:	88 10                	mov    BYTE PTR [eax],dl
c0017cdc:	0f b7 45 ba          	movzx  eax,WORD PTR [ebp-0x46]
c0017ce0:	c1 e8 08             	shr    eax,0x8
c0017ce3:	89 c2                	mov    edx,eax
c0017ce5:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c0017ce8:	83 c0 01             	add    eax,0x1
c0017ceb:	88 10                	mov    BYTE PTR [eax],dl
c0017ced:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017cf2:	8b 00                	mov    eax,DWORD PTR [eax]
c0017cf4:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0017cf8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017cfb:	c1 e0 02             	shl    eax,0x2
c0017cfe:	8d 50 02             	lea    edx,[eax+0x2]
c0017d01:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0017d04:	01 d0                	add    eax,edx
c0017d06:	66 8b 00             	mov    ax,WORD PTR [eax]
c0017d09:	0f b7 d0             	movzx  edx,ax
c0017d0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d0f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0017d12:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017d15:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0017d1c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0017d1f:	01 d0                	add    eax,edx
c0017d21:	66 8b 00             	mov    ax,WORD PTR [eax]
c0017d24:	0f b7 d0             	movzx  edx,ax
c0017d27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d2a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017d2d:	90                   	nop
c0017d2e:	c9                   	leave  
c0017d2f:	c3                   	ret    

c0017d30 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017d30:	55                   	push   ebp
c0017d31:	89 e5                	mov    ebp,esp
c0017d33:	83 ec 28             	sub    esp,0x28
c0017d36:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0017d39:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017d3c:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0017d40:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0017d44:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017d48:	c1 e0 04             	shl    eax,0x4
c0017d4b:	89 c2                	mov    edx,eax
c0017d4d:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017d51:	01 d0                	add    eax,edx
c0017d53:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0017d58:	7e 10                	jle    c0017d6a <Vm::readByteFromReal(unsigned short, unsigned short)+0x3a>
c0017d5a:	83 ec 0c             	sub    esp,0xc
c0017d5d:	68 84 9b 02 c0       	push   0xc0029b84
c0017d62:	e8 45 82 ff ff       	call   c000ffac <KePanic(char const*)>
c0017d67:	83 c4 10             	add    esp,0x10
c0017d6a:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017d6e:	c1 e0 04             	shl    eax,0x4
c0017d71:	89 c2                	mov    edx,eax
c0017d73:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017d77:	01 d0                	add    eax,edx
c0017d79:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017d7c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017d7f:	8a 00                	mov    al,BYTE PTR [eax]
c0017d81:	c9                   	leave  
c0017d82:	c3                   	ret    

c0017d83 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017d83:	55                   	push   ebp
c0017d84:	89 e5                	mov    ebp,esp
c0017d86:	83 ec 28             	sub    esp,0x28
c0017d89:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0017d8c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017d8f:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0017d93:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0017d97:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017d9b:	c1 e0 04             	shl    eax,0x4
c0017d9e:	89 c2                	mov    edx,eax
c0017da0:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017da4:	01 d0                	add    eax,edx
c0017da6:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0017dab:	7e 10                	jle    c0017dbd <Vm::readWordFromReal(unsigned short, unsigned short)+0x3a>
c0017dad:	83 ec 0c             	sub    esp,0xc
c0017db0:	68 84 9b 02 c0       	push   0xc0029b84
c0017db5:	e8 f2 81 ff ff       	call   c000ffac <KePanic(char const*)>
c0017dba:	83 c4 10             	add    esp,0x10
c0017dbd:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017dc1:	c1 e0 04             	shl    eax,0x4
c0017dc4:	89 c2                	mov    edx,eax
c0017dc6:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017dca:	01 d0                	add    eax,edx
c0017dcc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017dcf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017dd2:	66 8b 00             	mov    ax,WORD PTR [eax]
c0017dd5:	c9                   	leave  
c0017dd6:	c3                   	ret    

c0017dd7 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0017dd7:	55                   	push   ebp
c0017dd8:	89 e5                	mov    ebp,esp
c0017dda:	83 ec 28             	sub    esp,0x28
c0017ddd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0017de0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017de3:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0017de7:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0017deb:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017def:	c1 e0 04             	shl    eax,0x4
c0017df2:	89 c2                	mov    edx,eax
c0017df4:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017df8:	01 d0                	add    eax,edx
c0017dfa:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0017dff:	7e 10                	jle    c0017e11 <Vm::readDwordFromReal(unsigned short, unsigned short)+0x3a>
c0017e01:	83 ec 0c             	sub    esp,0xc
c0017e04:	68 84 9b 02 c0       	push   0xc0029b84
c0017e09:	e8 9e 81 ff ff       	call   c000ffac <KePanic(char const*)>
c0017e0e:	83 c4 10             	add    esp,0x10
c0017e11:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017e15:	c1 e0 04             	shl    eax,0x4
c0017e18:	89 c2                	mov    edx,eax
c0017e1a:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017e1e:	01 d0                	add    eax,edx
c0017e20:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017e23:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017e26:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e28:	c9                   	leave  
c0017e29:	c3                   	ret    

c0017e2a <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017e2a:	55                   	push   ebp
c0017e2b:	89 e5                	mov    ebp,esp
c0017e2d:	83 ec 28             	sub    esp,0x28
c0017e30:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0017e33:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017e36:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0017e39:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0017e3d:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0017e41:	88 c8                	mov    al,cl
c0017e43:	88 45 dc             	mov    BYTE PTR [ebp-0x24],al
c0017e46:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017e4a:	c1 e0 04             	shl    eax,0x4
c0017e4d:	89 c2                	mov    edx,eax
c0017e4f:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017e53:	01 d0                	add    eax,edx
c0017e55:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0017e5a:	7e 10                	jle    c0017e6c <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)+0x42>
c0017e5c:	83 ec 0c             	sub    esp,0xc
c0017e5f:	68 84 9b 02 c0       	push   0xc0029b84
c0017e64:	e8 43 81 ff ff       	call   c000ffac <KePanic(char const*)>
c0017e69:	83 c4 10             	add    esp,0x10
c0017e6c:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017e70:	c1 e0 04             	shl    eax,0x4
c0017e73:	89 c2                	mov    edx,eax
c0017e75:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017e79:	01 d0                	add    eax,edx
c0017e7b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017e7e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017e81:	8a 55 dc             	mov    dl,BYTE PTR [ebp-0x24]
c0017e84:	88 10                	mov    BYTE PTR [eax],dl
c0017e86:	90                   	nop
c0017e87:	c9                   	leave  
c0017e88:	c3                   	ret    

c0017e89 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017e89:	55                   	push   ebp
c0017e8a:	89 e5                	mov    ebp,esp
c0017e8c:	83 ec 28             	sub    esp,0x28
c0017e8f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0017e92:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017e95:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0017e98:	66 89 4d e4          	mov    WORD PTR [ebp-0x1c],cx
c0017e9c:	66 89 55 e0          	mov    WORD PTR [ebp-0x20],dx
c0017ea0:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0017ea4:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017ea8:	c1 e0 04             	shl    eax,0x4
c0017eab:	89 c2                	mov    edx,eax
c0017ead:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017eb1:	01 d0                	add    eax,edx
c0017eb3:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0017eb8:	7e 10                	jle    c0017eca <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)+0x41>
c0017eba:	83 ec 0c             	sub    esp,0xc
c0017ebd:	68 84 9b 02 c0       	push   0xc0029b84
c0017ec2:	e8 e5 80 ff ff       	call   c000ffac <KePanic(char const*)>
c0017ec7:	83 c4 10             	add    esp,0x10
c0017eca:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017ece:	c1 e0 04             	shl    eax,0x4
c0017ed1:	89 c2                	mov    edx,eax
c0017ed3:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017ed7:	01 d0                	add    eax,edx
c0017ed9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017edc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017edf:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0017ee2:	66 89 10             	mov    WORD PTR [eax],dx
c0017ee5:	90                   	nop
c0017ee6:	c9                   	leave  
c0017ee7:	c3                   	ret    

c0017ee8 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0017ee8:	55                   	push   ebp
c0017ee9:	89 e5                	mov    ebp,esp
c0017eeb:	83 ec 28             	sub    esp,0x28
c0017eee:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0017ef1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017ef4:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0017ef8:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0017efc:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017f00:	c1 e0 04             	shl    eax,0x4
c0017f03:	89 c2                	mov    edx,eax
c0017f05:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017f09:	01 d0                	add    eax,edx
c0017f0b:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0017f10:	7e 10                	jle    c0017f22 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)+0x3a>
c0017f12:	83 ec 0c             	sub    esp,0xc
c0017f15:	68 84 9b 02 c0       	push   0xc0029b84
c0017f1a:	e8 8d 80 ff ff       	call   c000ffac <KePanic(char const*)>
c0017f1f:	83 c4 10             	add    esp,0x10
c0017f22:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017f26:	c1 e0 04             	shl    eax,0x4
c0017f29:	89 c2                	mov    edx,eax
c0017f2b:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017f2f:	01 d0                	add    eax,edx
c0017f31:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017f34:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017f37:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0017f3a:	89 10                	mov    DWORD PTR [eax],edx
c0017f3c:	90                   	nop
c0017f3d:	c9                   	leave  
c0017f3e:	c3                   	ret    

c0017f3f <Vm::faultHandler(regs*)>:
c0017f3f:	55                   	push   ebp
c0017f40:	89 e5                	mov    ebp,esp
c0017f42:	57                   	push   edi
c0017f43:	56                   	push   esi
c0017f44:	53                   	push   ebx
c0017f45:	81 ec ac 00 00 00    	sub    esp,0xac
c0017f4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f4e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017f51:	0f b7 d0             	movzx  edx,ax
c0017f54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f57:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017f5a:	0f b7 c0             	movzx  eax,ax
c0017f5d:	52                   	push   edx
c0017f5e:	50                   	push   eax
c0017f5f:	e8 2f f6 ff ff       	call   c0017593 <Vm::realToLinear(unsigned short, unsigned short)>
c0017f64:	83 c4 08             	add    esp,0x8
c0017f67:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0017f6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f6d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017f70:	0f b7 d0             	movzx  edx,ax
c0017f73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f76:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0017f79:	0f b7 c0             	movzx  eax,ax
c0017f7c:	52                   	push   edx
c0017f7d:	50                   	push   eax
c0017f7e:	e8 10 f6 ff ff       	call   c0017593 <Vm::realToLinear(unsigned short, unsigned short)>
c0017f83:	83 c4 08             	add    esp,0x8
c0017f86:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0017f89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f8c:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017f8f:	0f b7 d0             	movzx  edx,ax
c0017f92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f95:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0017f98:	0f b7 c0             	movzx  eax,ax
c0017f9b:	52                   	push   edx
c0017f9c:	50                   	push   eax
c0017f9d:	e8 f1 f5 ff ff       	call   c0017593 <Vm::realToLinear(unsigned short, unsigned short)>
c0017fa2:	83 c4 08             	add    esp,0x8
c0017fa5:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0017fa8:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0017faf:	c6 45 e3 00          	mov    BYTE PTR [ebp-0x1d],0x0
c0017fb3:	c6 45 e2 00          	mov    BYTE PTR [ebp-0x1e],0x0
c0017fb7:	c6 45 e1 06          	mov    BYTE PTR [ebp-0x1f],0x6
c0017fbb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0017fbe:	8a 00                	mov    al,BYTE PTR [eax]
c0017fc0:	0f b6 c0             	movzx  eax,al
c0017fc3:	83 e8 26             	sub    eax,0x26
c0017fc6:	3d d5 00 00 00       	cmp    eax,0xd5
c0017fcb:	0f 87 f8 0c 00 00    	ja     c0018cc9 <Vm::faultHandler(regs*)+0xd8a>
c0017fd1:	8b 04 85 04 9c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd63fc]
c0017fd8:	ff e0                	jmp    eax
c0017fda:	c6 45 e1 02          	mov    BYTE PTR [ebp-0x1f],0x2
c0017fde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017fe1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017fe4:	8d 50 01             	lea    edx,[eax+0x1]
c0017fe7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017fea:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017fed:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017ff1:	e9 87 0d 00 00       	jmp    c0018d7d <Vm::faultHandler(regs*)+0xe3e>
c0017ff6:	c6 45 e1 00          	mov    BYTE PTR [ebp-0x1f],0x0
c0017ffa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ffd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018000:	8d 50 01             	lea    edx,[eax+0x1]
c0018003:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018006:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018009:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c001800d:	e9 6b 0d 00 00       	jmp    c0018d7d <Vm::faultHandler(regs*)+0xe3e>
c0018012:	c6 45 e1 01          	mov    BYTE PTR [ebp-0x1f],0x1
c0018016:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018019:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001801c:	8d 50 01             	lea    edx,[eax+0x1]
c001801f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018022:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018025:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018029:	e9 4f 0d 00 00       	jmp    c0018d7d <Vm::faultHandler(regs*)+0xe3e>
c001802e:	c6 45 e1 03          	mov    BYTE PTR [ebp-0x1f],0x3
c0018032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018035:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018038:	8d 50 01             	lea    edx,[eax+0x1]
c001803b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001803e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018041:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018045:	e9 33 0d 00 00       	jmp    c0018d7d <Vm::faultHandler(regs*)+0xe3e>
c001804a:	c6 45 e1 04          	mov    BYTE PTR [ebp-0x1f],0x4
c001804e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018051:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018054:	8d 50 01             	lea    edx,[eax+0x1]
c0018057:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001805a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001805d:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018061:	e9 17 0d 00 00       	jmp    c0018d7d <Vm::faultHandler(regs*)+0xe3e>
c0018066:	c6 45 e1 05          	mov    BYTE PTR [ebp-0x1f],0x5
c001806a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001806d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018070:	8d 50 01             	lea    edx,[eax+0x1]
c0018073:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018076:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018079:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c001807d:	e9 fb 0c 00 00       	jmp    c0018d7d <Vm::faultHandler(regs*)+0xe3e>
c0018082:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0018086:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018089:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001808c:	8d 50 01             	lea    edx,[eax+0x1]
c001808f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018092:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018095:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018099:	e9 df 0c 00 00       	jmp    c0018d7d <Vm::faultHandler(regs*)+0xe3e>
c001809e:	c6 45 e2 01          	mov    BYTE PTR [ebp-0x1e],0x1
c00180a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00180a5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00180a8:	8d 50 01             	lea    edx,[eax+0x1]
c00180ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00180ae:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00180b1:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c00180b5:	e9 c3 0c 00 00       	jmp    c0018d7d <Vm::faultHandler(regs*)+0xe3e>
c00180ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00180bd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00180c0:	8d 50 01             	lea    edx,[eax+0x1]
c00180c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00180c6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00180c9:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c00180cd:	e9 ab 0c 00 00       	jmp    c0018d7d <Vm::faultHandler(regs*)+0xe3e>
c00180d2:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c00180d6:	85 c0                	test   eax,eax
c00180d8:	74 5b                	je     c0018135 <Vm::faultHandler(regs*)+0x1f6>
c00180da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00180dd:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00180e0:	83 e8 04             	sub    eax,0x4
c00180e3:	0f b7 d0             	movzx  edx,ax
c00180e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00180e9:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00180ec:	83 6d d0 04          	sub    DWORD PTR [ebp-0x30],0x4
c00180f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00180f3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00180f6:	25 ff 0d 00 00       	and    eax,0xdff
c00180fb:	89 c2                	mov    edx,eax
c00180fd:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018100:	89 10                	mov    DWORD PTR [eax],edx
c0018102:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018107:	8b 00                	mov    eax,DWORD PTR [eax]
c0018109:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c001810c:	0f b6 c0             	movzx  eax,al
c001810f:	85 c0                	test   eax,eax
c0018111:	74 11                	je     c0018124 <Vm::faultHandler(regs*)+0x1e5>
c0018113:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018116:	8b 00                	mov    eax,DWORD PTR [eax]
c0018118:	80 cc 02             	or     ah,0x2
c001811b:	89 c2                	mov    edx,eax
c001811d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018120:	89 10                	mov    DWORD PTR [eax],edx
c0018122:	eb 6a                	jmp    c001818e <Vm::faultHandler(regs*)+0x24f>
c0018124:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018127:	8b 00                	mov    eax,DWORD PTR [eax]
c0018129:	80 e4 fd             	and    ah,0xfd
c001812c:	89 c2                	mov    edx,eax
c001812e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018131:	89 10                	mov    DWORD PTR [eax],edx
c0018133:	eb 59                	jmp    c001818e <Vm::faultHandler(regs*)+0x24f>
c0018135:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018138:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001813b:	83 e8 02             	sub    eax,0x2
c001813e:	0f b7 d0             	movzx  edx,ax
c0018141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018144:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0018147:	83 6d d4 02          	sub    DWORD PTR [ebp-0x2c],0x2
c001814b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001814e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018151:	89 c2                	mov    edx,eax
c0018153:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018156:	66 89 10             	mov    WORD PTR [eax],dx
c0018159:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001815e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018160:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c0018163:	0f b6 c0             	movzx  eax,al
c0018166:	85 c0                	test   eax,eax
c0018168:	74 13                	je     c001817d <Vm::faultHandler(regs*)+0x23e>
c001816a:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001816d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018170:	80 cc 02             	or     ah,0x2
c0018173:	89 c2                	mov    edx,eax
c0018175:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018178:	66 89 10             	mov    WORD PTR [eax],dx
c001817b:	eb 11                	jmp    c001818e <Vm::faultHandler(regs*)+0x24f>
c001817d:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018180:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018183:	80 e4 fd             	and    ah,0xfd
c0018186:	89 c2                	mov    edx,eax
c0018188:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001818b:	66 89 10             	mov    WORD PTR [eax],dx
c001818e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018191:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018194:	8d 50 01             	lea    edx,[eax+0x1]
c0018197:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001819a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001819d:	b0 01                	mov    al,0x1
c001819f:	e9 de 0b 00 00       	jmp    c0018d82 <Vm::faultHandler(regs*)+0xe43>
c00181a4:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c00181a8:	85 c0                	test   eax,eax
c00181aa:	74 46                	je     c00181f2 <Vm::faultHandler(regs*)+0x2b3>
c00181ac:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00181af:	8b 00                	mov    eax,DWORD PTR [eax]
c00181b1:	25 ff 0d 00 00       	and    eax,0xdff
c00181b6:	0d 00 02 02 00       	or     eax,0x20200
c00181bb:	89 c2                	mov    edx,eax
c00181bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00181c0:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00181c3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00181c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00181c8:	25 00 02 00 00       	and    eax,0x200
c00181cd:	89 c2                	mov    edx,eax
c00181cf:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00181d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00181d6:	85 d2                	test   edx,edx
c00181d8:	0f 95 c2             	setne  dl
c00181db:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c00181de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00181e1:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00181e4:	83 c0 04             	add    eax,0x4
c00181e7:	0f b7 d0             	movzx  edx,ax
c00181ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00181ed:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00181f0:	eb 47                	jmp    c0018239 <Vm::faultHandler(regs*)+0x2fa>
c00181f2:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00181f5:	66 8b 00             	mov    ax,WORD PTR [eax]
c00181f8:	0f b7 c0             	movzx  eax,ax
c00181fb:	0d 00 02 02 00       	or     eax,0x20200
c0018200:	89 c2                	mov    edx,eax
c0018202:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018205:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0018208:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001820b:	66 8b 00             	mov    ax,WORD PTR [eax]
c001820e:	0f b7 c0             	movzx  eax,ax
c0018211:	25 00 02 00 00       	and    eax,0x200
c0018216:	89 c2                	mov    edx,eax
c0018218:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001821d:	8b 00                	mov    eax,DWORD PTR [eax]
c001821f:	85 d2                	test   edx,edx
c0018221:	0f 95 c2             	setne  dl
c0018224:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c0018227:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001822a:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001822d:	83 c0 02             	add    eax,0x2
c0018230:	0f b7 d0             	movzx  edx,ax
c0018233:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018236:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0018239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001823c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001823f:	8d 50 01             	lea    edx,[eax+0x1]
c0018242:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018245:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018248:	b0 01                	mov    al,0x1
c001824a:	e9 33 0b 00 00       	jmp    c0018d82 <Vm::faultHandler(regs*)+0xe43>
c001824f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018252:	83 c0 01             	add    eax,0x1
c0018255:	8a 00                	mov    al,BYTE PTR [eax]
c0018257:	0f b6 c0             	movzx  eax,al
c001825a:	3d ee 00 00 00       	cmp    eax,0xee
c001825f:	75 19                	jne    c001827a <Vm::faultHandler(regs*)+0x33b>
c0018261:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018264:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018267:	83 ec 0c             	sub    esp,0xc
c001826a:	50                   	push   eax
c001826b:	e8 ee f3 ff ff       	call   c001765e <Vm::mainloop3(unsigned long)>
c0018270:	83 c4 10             	add    esp,0x10
c0018273:	b0 01                	mov    al,0x1
c0018275:	e9 08 0b 00 00       	jmp    c0018d82 <Vm::faultHandler(regs*)+0xe43>
c001827a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001827d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018280:	0f b7 c8             	movzx  ecx,ax
c0018283:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018286:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0018289:	0f b7 d0             	movzx  edx,ax
c001828c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001828f:	83 c0 01             	add    eax,0x1
c0018292:	8a 00                	mov    al,BYTE PTR [eax]
c0018294:	0f b6 c0             	movzx  eax,al
c0018297:	83 ec 0c             	sub    esp,0xc
c001829a:	51                   	push   ecx
c001829b:	52                   	push   edx
c001829c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001829f:	50                   	push   eax
c00182a0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00182a3:	e8 84 f8 ff ff       	call   c0017b2c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00182a8:	83 c4 20             	add    esp,0x20
c00182ab:	b0 01                	mov    al,0x1
c00182ad:	e9 d0 0a 00 00       	jmp    c0018d82 <Vm::faultHandler(regs*)+0xe43>
c00182b2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00182b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00182b9:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00182bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182c0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00182c3:	8d 50 01             	lea    edx,[eax+0x1]
c00182c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182c9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00182cc:	b0 01                	mov    al,0x1
c00182ce:	e9 af 0a 00 00       	jmp    c0018d82 <Vm::faultHandler(regs*)+0xe43>
c00182d3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00182d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00182da:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c00182de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182e1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00182e4:	8d 50 01             	lea    edx,[eax+0x1]
c00182e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182ea:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00182ed:	b0 01                	mov    al,0x1
c00182ef:	e9 8e 0a 00 00       	jmp    c0018d82 <Vm::faultHandler(regs*)+0xe43>
c00182f4:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00182f7:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
c00182fa:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
c00182fd:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
c0018300:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
c0018303:	8a 00                	mov    al,BYTE PTR [eax]
c0018305:	0f b6 c0             	movzx  eax,al
c0018308:	8b 55 a8             	mov    edx,DWORD PTR [ebp-0x58]
c001830b:	83 c2 01             	add    edx,0x1
c001830e:	8a 12                	mov    dl,BYTE PTR [edx]
c0018310:	0f b6 d2             	movzx  edx,dl
c0018313:	c1 e2 08             	shl    edx,0x8
c0018316:	09 d0                	or     eax,edx
c0018318:	0f b7 d0             	movzx  edx,ax
c001831b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001831e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018321:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018324:	83 c0 02             	add    eax,0x2
c0018327:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
c001832a:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c001832d:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
c0018330:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
c0018333:	8a 00                	mov    al,BYTE PTR [eax]
c0018335:	0f b6 c0             	movzx  eax,al
c0018338:	8b 55 b0             	mov    edx,DWORD PTR [ebp-0x50]
c001833b:	83 c2 01             	add    edx,0x1
c001833e:	8a 12                	mov    dl,BYTE PTR [edx]
c0018340:	0f b6 d2             	movzx  edx,dl
c0018343:	c1 e2 08             	shl    edx,0x8
c0018346:	09 d0                	or     eax,edx
c0018348:	0f b7 d0             	movzx  edx,ax
c001834b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001834e:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0018351:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018354:	83 c0 04             	add    eax,0x4
c0018357:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
c001835a:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
c001835d:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
c0018360:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
c0018363:	8a 00                	mov    al,BYTE PTR [eax]
c0018365:	0f b6 c0             	movzx  eax,al
c0018368:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
c001836b:	83 c2 01             	add    edx,0x1
c001836e:	8a 12                	mov    dl,BYTE PTR [edx]
c0018370:	0f b6 d2             	movzx  edx,dl
c0018373:	c1 e2 08             	shl    edx,0x8
c0018376:	09 d0                	or     eax,edx
c0018378:	0f b7 c0             	movzx  eax,ax
c001837b:	0d 00 02 02 00       	or     eax,0x20200
c0018380:	89 c2                	mov    edx,eax
c0018382:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018385:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0018388:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001838b:	83 c0 04             	add    eax,0x4
c001838e:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0018391:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0018394:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0018397:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001839a:	8a 00                	mov    al,BYTE PTR [eax]
c001839c:	0f b6 c0             	movzx  eax,al
c001839f:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
c00183a2:	83 c2 01             	add    edx,0x1
c00183a5:	8a 12                	mov    dl,BYTE PTR [edx]
c00183a7:	0f b6 d2             	movzx  edx,dl
c00183aa:	c1 e2 08             	shl    edx,0x8
c00183ad:	09 d0                	or     eax,edx
c00183af:	0f b7 c0             	movzx  eax,ax
c00183b2:	25 00 02 00 00       	and    eax,0x200
c00183b7:	89 c2                	mov    edx,eax
c00183b9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00183be:	8b 00                	mov    eax,DWORD PTR [eax]
c00183c0:	85 d2                	test   edx,edx
c00183c2:	0f 95 c2             	setne  dl
c00183c5:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c00183c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00183cb:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00183ce:	83 c0 06             	add    eax,0x6
c00183d1:	0f b7 d0             	movzx  edx,ax
c00183d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00183d7:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00183da:	b0 01                	mov    al,0x1
c00183dc:	e9 a1 09 00 00       	jmp    c0018d82 <Vm::faultHandler(regs*)+0xe43>
c00183e1:	66 c7 45 ca 00 00    	mov    WORD PTR [ebp-0x36],0x0
c00183e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00183ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00183ed:	66 89 45 ca          	mov    WORD PTR [ebp-0x36],ax
c00183f1:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c00183f5:	85 c0                	test   eax,eax
c00183f7:	74 7a                	je     c0018473 <Vm::faultHandler(regs*)+0x534>
c00183f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00183fc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00183ff:	3d ff ff 00 00       	cmp    eax,0xffff
c0018404:	76 6d                	jbe    c0018473 <Vm::faultHandler(regs*)+0x534>
c0018406:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018409:	83 c0 05             	add    eax,0x5
c001840c:	8a 00                	mov    al,BYTE PTR [eax]
c001840e:	0f b6 c0             	movzx  eax,al
c0018411:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018417:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001841a:	83 c0 04             	add    eax,0x4
c001841d:	8a 00                	mov    al,BYTE PTR [eax]
c001841f:	0f b6 f8             	movzx  edi,al
c0018422:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018425:	83 c0 03             	add    eax,0x3
c0018428:	8a 00                	mov    al,BYTE PTR [eax]
c001842a:	0f b6 f0             	movzx  esi,al
c001842d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018430:	83 c0 02             	add    eax,0x2
c0018433:	8a 00                	mov    al,BYTE PTR [eax]
c0018435:	0f b6 d8             	movzx  ebx,al
c0018438:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001843b:	83 c0 01             	add    eax,0x1
c001843e:	8a 00                	mov    al,BYTE PTR [eax]
c0018440:	0f b6 c8             	movzx  ecx,al
c0018443:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018446:	8a 00                	mov    al,BYTE PTR [eax]
c0018448:	0f b6 d0             	movzx  edx,al
c001844b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001844e:	8a 00                	mov    al,BYTE PTR [eax]
c0018450:	0f b6 c0             	movzx  eax,al
c0018453:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0018459:	57                   	push   edi
c001845a:	56                   	push   esi
c001845b:	53                   	push   ebx
c001845c:	51                   	push   ecx
c001845d:	52                   	push   edx
c001845e:	50                   	push   eax
c001845f:	68 a4 9b 02 c0       	push   0xc0029ba4
c0018464:	e8 fd ea fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018469:	83 c4 20             	add    esp,0x20
c001846c:	b0 00                	mov    al,0x0
c001846e:	e9 0f 09 00 00       	jmp    c0018d82 <Vm::faultHandler(regs*)+0xe43>
c0018473:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018476:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018479:	0f b7 c0             	movzx  eax,ax
c001847c:	83 ec 0c             	sub    esp,0xc
c001847f:	50                   	push   eax
c0018480:	e8 70 f0 ff ff       	call   c00174f5 <Vm::inbv(unsigned short)>
c0018485:	83 c4 10             	add    esp,0x10
c0018488:	0f b6 c8             	movzx  ecx,al
c001848b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001848e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018491:	0f b7 d0             	movzx  edx,ax
c0018494:	0f b7 45 ca          	movzx  eax,WORD PTR [ebp-0x36]
c0018498:	83 ec 04             	sub    esp,0x4
c001849b:	51                   	push   ecx
c001849c:	52                   	push   edx
c001849d:	50                   	push   eax
c001849e:	e8 87 f9 ff ff       	call   c0017e2a <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00184a3:	83 c4 10             	add    esp,0x10
c00184a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184a9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00184ac:	25 00 04 00 00       	and    eax,0x400
c00184b1:	85 c0                	test   eax,eax
c00184b3:	74 14                	je     c00184c9 <Vm::faultHandler(regs*)+0x58a>
c00184b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00184bb:	83 e8 01             	sub    eax,0x1
c00184be:	0f b7 d0             	movzx  edx,ax
c00184c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184c4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00184c7:	eb 12                	jmp    c00184db <Vm::faultHandler(regs*)+0x59c>
c00184c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00184cf:	83 c0 01             	add    eax,0x1
c00184d2:	0f b7 d0             	movzx  edx,ax
c00184d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184d8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00184db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184de:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00184e1:	8d 50 01             	lea    edx,[eax+0x1]
c00184e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184e7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00184ea:	b0 01                	mov    al,0x1
c00184ec:	e9 91 08 00 00       	jmp    c0018d82 <Vm::faultHandler(regs*)+0xe43>
c00184f1:	66 c7 45 c8 00 00    	mov    WORD PTR [ebp-0x38],0x0
c00184f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184fa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00184fd:	66 89 45 c8          	mov    WORD PTR [ebp-0x38],ax
c0018501:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018505:	85 c0                	test   eax,eax
c0018507:	74 7a                	je     c0018583 <Vm::faultHandler(regs*)+0x644>
c0018509:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001850c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001850f:	3d ff ff 00 00       	cmp    eax,0xffff
c0018514:	76 6d                	jbe    c0018583 <Vm::faultHandler(regs*)+0x644>
c0018516:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018519:	83 c0 05             	add    eax,0x5
c001851c:	8a 00                	mov    al,BYTE PTR [eax]
c001851e:	0f b6 c0             	movzx  eax,al
c0018521:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018527:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001852a:	83 c0 04             	add    eax,0x4
c001852d:	8a 00                	mov    al,BYTE PTR [eax]
c001852f:	0f b6 f8             	movzx  edi,al
c0018532:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018535:	83 c0 03             	add    eax,0x3
c0018538:	8a 00                	mov    al,BYTE PTR [eax]
c001853a:	0f b6 f0             	movzx  esi,al
c001853d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018540:	83 c0 02             	add    eax,0x2
c0018543:	8a 00                	mov    al,BYTE PTR [eax]
c0018545:	0f b6 d8             	movzx  ebx,al
c0018548:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001854b:	83 c0 01             	add    eax,0x1
c001854e:	8a 00                	mov    al,BYTE PTR [eax]
c0018550:	0f b6 c8             	movzx  ecx,al
c0018553:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018556:	8a 00                	mov    al,BYTE PTR [eax]
c0018558:	0f b6 d0             	movzx  edx,al
c001855b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001855e:	8a 00                	mov    al,BYTE PTR [eax]
c0018560:	0f b6 c0             	movzx  eax,al
c0018563:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0018569:	57                   	push   edi
c001856a:	56                   	push   esi
c001856b:	53                   	push   ebx
c001856c:	51                   	push   ecx
c001856d:	52                   	push   edx
c001856e:	50                   	push   eax
c001856f:	68 a4 9b 02 c0       	push   0xc0029ba4
c0018574:	e8 ed e9 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018579:	83 c4 20             	add    esp,0x20
c001857c:	b0 00                	mov    al,0x0
c001857e:	e9 ff 07 00 00       	jmp    c0018d82 <Vm::faultHandler(regs*)+0xe43>
c0018583:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018587:	85 c0                	test   eax,eax
c0018589:	74 6f                	je     c00185fa <Vm::faultHandler(regs*)+0x6bb>
c001858b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001858e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018591:	0f b7 c0             	movzx  eax,ax
c0018594:	66 89 45 a6          	mov    WORD PTR [ebp-0x5a],ax
c0018598:	66 8b 45 a6          	mov    ax,WORD PTR [ebp-0x5a]
c001859c:	89 c2                	mov    edx,eax
c001859e:	ed                   	in     eax,dx
c001859f:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
c00185a2:	8b 4d a0             	mov    ecx,DWORD PTR [ebp-0x60]
c00185a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00185ab:	0f b7 d0             	movzx  edx,ax
c00185ae:	0f b7 45 c8          	movzx  eax,WORD PTR [ebp-0x38]
c00185b2:	83 ec 04             	sub    esp,0x4
c00185b5:	51                   	push   ecx
c00185b6:	52                   	push   edx
c00185b7:	50                   	push   eax
c00185b8:	e8 2b f9 ff ff       	call   c0017ee8 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00185bd:	83 c4 10             	add    esp,0x10
c00185c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185c3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00185c6:	25 00 04 00 00       	and    eax,0x400
c00185cb:	85 c0                	test   eax,eax
c00185cd:	74 17                	je     c00185e6 <Vm::faultHandler(regs*)+0x6a7>
c00185cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185d2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00185d5:	83 e8 04             	sub    eax,0x4
c00185d8:	0f b7 d0             	movzx  edx,ax
c00185db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185de:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00185e1:	e9 83 00 00 00       	jmp    c0018669 <Vm::faultHandler(regs*)+0x72a>
c00185e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00185ec:	83 c0 04             	add    eax,0x4
c00185ef:	0f b7 d0             	movzx  edx,ax
c00185f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185f5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00185f8:	eb 6f                	jmp    c0018669 <Vm::faultHandler(regs*)+0x72a>
c00185fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185fd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018600:	0f b7 c0             	movzx  eax,ax
c0018603:	66 89 45 9e          	mov    WORD PTR [ebp-0x62],ax
c0018607:	66 8b 45 9e          	mov    ax,WORD PTR [ebp-0x62]
c001860b:	89 c2                	mov    edx,eax
c001860d:	66 ed                	in     ax,dx
c001860f:	66 89 45 9c          	mov    WORD PTR [ebp-0x64],ax
c0018613:	8b 45 9c             	mov    eax,DWORD PTR [ebp-0x64]
c0018616:	0f b7 c8             	movzx  ecx,ax
c0018619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001861c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001861f:	0f b7 d0             	movzx  edx,ax
c0018622:	0f b7 45 c8          	movzx  eax,WORD PTR [ebp-0x38]
c0018626:	83 ec 04             	sub    esp,0x4
c0018629:	51                   	push   ecx
c001862a:	52                   	push   edx
c001862b:	50                   	push   eax
c001862c:	e8 58 f8 ff ff       	call   c0017e89 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018631:	83 c4 10             	add    esp,0x10
c0018634:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018637:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001863a:	25 00 04 00 00       	and    eax,0x400
c001863f:	85 c0                	test   eax,eax
c0018641:	74 14                	je     c0018657 <Vm::faultHandler(regs*)+0x718>
c0018643:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018646:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018649:	83 e8 02             	sub    eax,0x2
c001864c:	0f b7 d0             	movzx  edx,ax
c001864f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018652:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018655:	eb 12                	jmp    c0018669 <Vm::faultHandler(regs*)+0x72a>
c0018657:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001865a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001865d:	83 c0 02             	add    eax,0x2
c0018660:	0f b7 d0             	movzx  edx,ax
c0018663:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018666:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018669:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001866c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001866f:	8d 50 01             	lea    edx,[eax+0x1]
c0018672:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018675:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018678:	b0 01                	mov    al,0x1
c001867a:	e9 03 07 00 00       	jmp    c0018d82 <Vm::faultHandler(regs*)+0xe43>
c001867f:	66 c7 45 de 00 00    	mov    WORD PTR [ebp-0x22],0x0
c0018685:	0f b6 45 e1          	movzx  eax,BYTE PTR [ebp-0x1f]
c0018689:	83 f8 06             	cmp    eax,0x6
c001868c:	77 4f                	ja     c00186dd <Vm::faultHandler(regs*)+0x79e>
c001868e:	8b 04 85 5c 9f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd60a4]
c0018695:	ff e0                	jmp    eax
c0018697:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001869a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001869d:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c00186a1:	eb 3a                	jmp    c00186dd <Vm::faultHandler(regs*)+0x79e>
c00186a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186a6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00186a9:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c00186ad:	eb 2e                	jmp    c00186dd <Vm::faultHandler(regs*)+0x79e>
c00186af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00186b5:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c00186b9:	eb 22                	jmp    c00186dd <Vm::faultHandler(regs*)+0x79e>
c00186bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00186c1:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c00186c5:	eb 16                	jmp    c00186dd <Vm::faultHandler(regs*)+0x79e>
c00186c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00186cc:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c00186d0:	eb 0b                	jmp    c00186dd <Vm::faultHandler(regs*)+0x79e>
c00186d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186d5:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c00186d8:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c00186dc:	90                   	nop
c00186dd:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c00186e1:	85 c0                	test   eax,eax
c00186e3:	74 7a                	je     c001875f <Vm::faultHandler(regs*)+0x820>
c00186e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186e8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00186eb:	3d ff ff 00 00       	cmp    eax,0xffff
c00186f0:	76 6d                	jbe    c001875f <Vm::faultHandler(regs*)+0x820>
c00186f2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00186f5:	83 c0 05             	add    eax,0x5
c00186f8:	8a 00                	mov    al,BYTE PTR [eax]
c00186fa:	0f b6 c0             	movzx  eax,al
c00186fd:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018703:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018706:	83 c0 04             	add    eax,0x4
c0018709:	8a 00                	mov    al,BYTE PTR [eax]
c001870b:	0f b6 f8             	movzx  edi,al
c001870e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018711:	83 c0 03             	add    eax,0x3
c0018714:	8a 00                	mov    al,BYTE PTR [eax]
c0018716:	0f b6 f0             	movzx  esi,al
c0018719:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001871c:	83 c0 02             	add    eax,0x2
c001871f:	8a 00                	mov    al,BYTE PTR [eax]
c0018721:	0f b6 d8             	movzx  ebx,al
c0018724:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018727:	83 c0 01             	add    eax,0x1
c001872a:	8a 00                	mov    al,BYTE PTR [eax]
c001872c:	0f b6 c8             	movzx  ecx,al
c001872f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018732:	8a 00                	mov    al,BYTE PTR [eax]
c0018734:	0f b6 d0             	movzx  edx,al
c0018737:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001873a:	8a 00                	mov    al,BYTE PTR [eax]
c001873c:	0f b6 c0             	movzx  eax,al
c001873f:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0018745:	57                   	push   edi
c0018746:	56                   	push   esi
c0018747:	53                   	push   ebx
c0018748:	51                   	push   ecx
c0018749:	52                   	push   edx
c001874a:	50                   	push   eax
c001874b:	68 a4 9b 02 c0       	push   0xc0029ba4
c0018750:	e8 11 e8 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018755:	83 c4 20             	add    esp,0x20
c0018758:	b0 00                	mov    al,0x0
c001875a:	e9 23 06 00 00       	jmp    c0018d82 <Vm::faultHandler(regs*)+0xe43>
c001875f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018762:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018765:	0f b7 d0             	movzx  edx,ax
c0018768:	0f b7 45 de          	movzx  eax,WORD PTR [ebp-0x22]
c001876c:	83 ec 08             	sub    esp,0x8
c001876f:	52                   	push   edx
c0018770:	50                   	push   eax
c0018771:	e8 ba f5 ff ff       	call   c0017d30 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0018776:	83 c4 10             	add    esp,0x10
c0018779:	0f b6 d0             	movzx  edx,al
c001877c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001877f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018782:	0f b7 c0             	movzx  eax,ax
c0018785:	83 ec 08             	sub    esp,0x8
c0018788:	52                   	push   edx
c0018789:	50                   	push   eax
c001878a:	e8 9d ed ff ff       	call   c001752c <Vm::outbv(unsigned short, unsigned char)>
c001878f:	83 c4 10             	add    esp,0x10
c0018792:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018795:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018798:	25 00 04 00 00       	and    eax,0x400
c001879d:	85 c0                	test   eax,eax
c001879f:	74 14                	je     c00187b5 <Vm::faultHandler(regs*)+0x876>
c00187a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187a4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00187a7:	83 e8 01             	sub    eax,0x1
c00187aa:	0f b7 d0             	movzx  edx,ax
c00187ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187b0:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00187b3:	eb 12                	jmp    c00187c7 <Vm::faultHandler(regs*)+0x888>
c00187b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187b8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00187bb:	83 c0 01             	add    eax,0x1
c00187be:	0f b7 d0             	movzx  edx,ax
c00187c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187c4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00187c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187ca:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00187cd:	8d 50 01             	lea    edx,[eax+0x1]
c00187d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187d3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00187d6:	b0 01                	mov    al,0x1
c00187d8:	e9 a5 05 00 00       	jmp    c0018d82 <Vm::faultHandler(regs*)+0xe43>
c00187dd:	66 c7 45 dc 00 00    	mov    WORD PTR [ebp-0x24],0x0
c00187e3:	0f b6 45 e1          	movzx  eax,BYTE PTR [ebp-0x1f]
c00187e7:	83 f8 06             	cmp    eax,0x6
c00187ea:	77 4f                	ja     c001883b <Vm::faultHandler(regs*)+0x8fc>
c00187ec:	8b 04 85 78 9f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6088]
c00187f3:	ff e0                	jmp    eax
c00187f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187f8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00187fb:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c00187ff:	eb 3a                	jmp    c001883b <Vm::faultHandler(regs*)+0x8fc>
c0018801:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018804:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018807:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c001880b:	eb 2e                	jmp    c001883b <Vm::faultHandler(regs*)+0x8fc>
c001880d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018810:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018813:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018817:	eb 22                	jmp    c001883b <Vm::faultHandler(regs*)+0x8fc>
c0018819:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001881c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001881f:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018823:	eb 16                	jmp    c001883b <Vm::faultHandler(regs*)+0x8fc>
c0018825:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018828:	8b 00                	mov    eax,DWORD PTR [eax]
c001882a:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c001882e:	eb 0b                	jmp    c001883b <Vm::faultHandler(regs*)+0x8fc>
c0018830:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018833:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0018836:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c001883a:	90                   	nop
c001883b:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c001883f:	85 c0                	test   eax,eax
c0018841:	74 7a                	je     c00188bd <Vm::faultHandler(regs*)+0x97e>
c0018843:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018846:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018849:	3d ff ff 00 00       	cmp    eax,0xffff
c001884e:	76 6d                	jbe    c00188bd <Vm::faultHandler(regs*)+0x97e>
c0018850:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018853:	83 c0 05             	add    eax,0x5
c0018856:	8a 00                	mov    al,BYTE PTR [eax]
c0018858:	0f b6 c0             	movzx  eax,al
c001885b:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018861:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018864:	83 c0 04             	add    eax,0x4
c0018867:	8a 00                	mov    al,BYTE PTR [eax]
c0018869:	0f b6 f8             	movzx  edi,al
c001886c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001886f:	83 c0 03             	add    eax,0x3
c0018872:	8a 00                	mov    al,BYTE PTR [eax]
c0018874:	0f b6 f0             	movzx  esi,al
c0018877:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001887a:	83 c0 02             	add    eax,0x2
c001887d:	8a 00                	mov    al,BYTE PTR [eax]
c001887f:	0f b6 d8             	movzx  ebx,al
c0018882:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018885:	83 c0 01             	add    eax,0x1
c0018888:	8a 00                	mov    al,BYTE PTR [eax]
c001888a:	0f b6 c8             	movzx  ecx,al
c001888d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018890:	8a 00                	mov    al,BYTE PTR [eax]
c0018892:	0f b6 d0             	movzx  edx,al
c0018895:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018898:	8a 00                	mov    al,BYTE PTR [eax]
c001889a:	0f b6 c0             	movzx  eax,al
c001889d:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c00188a3:	57                   	push   edi
c00188a4:	56                   	push   esi
c00188a5:	53                   	push   ebx
c00188a6:	51                   	push   ecx
c00188a7:	52                   	push   edx
c00188a8:	50                   	push   eax
c00188a9:	68 a4 9b 02 c0       	push   0xc0029ba4
c00188ae:	e8 b3 e6 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00188b3:	83 c4 20             	add    esp,0x20
c00188b6:	b0 00                	mov    al,0x0
c00188b8:	e9 c5 04 00 00       	jmp    c0018d82 <Vm::faultHandler(regs*)+0xe43>
c00188bd:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c00188c1:	85 c0                	test   eax,eax
c00188c3:	74 6c                	je     c0018931 <Vm::faultHandler(regs*)+0x9f2>
c00188c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188c8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00188cb:	0f b7 d0             	movzx  edx,ax
c00188ce:	0f b7 45 dc          	movzx  eax,WORD PTR [ebp-0x24]
c00188d2:	83 ec 08             	sub    esp,0x8
c00188d5:	52                   	push   edx
c00188d6:	50                   	push   eax
c00188d7:	e8 fb f4 ff ff       	call   c0017dd7 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00188dc:	83 c4 10             	add    esp,0x10
c00188df:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00188e2:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00188e5:	0f b7 d2             	movzx  edx,dx
c00188e8:	66 89 55 9a          	mov    WORD PTR [ebp-0x66],dx
c00188ec:	89 45 94             	mov    DWORD PTR [ebp-0x6c],eax
c00188ef:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
c00188f2:	66 8b 55 9a          	mov    dx,WORD PTR [ebp-0x66]
c00188f6:	ef                   	out    dx,eax
c00188f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188fa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00188fd:	25 00 04 00 00       	and    eax,0x400
c0018902:	85 c0                	test   eax,eax
c0018904:	74 17                	je     c001891d <Vm::faultHandler(regs*)+0x9de>
c0018906:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018909:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001890c:	83 e8 04             	sub    eax,0x4
c001890f:	0f b7 d0             	movzx  edx,ax
c0018912:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018915:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018918:	e9 80 00 00 00       	jmp    c001899d <Vm::faultHandler(regs*)+0xa5e>
c001891d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018920:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018923:	83 c0 04             	add    eax,0x4
c0018926:	0f b7 d0             	movzx  edx,ax
c0018929:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001892c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001892f:	eb 6c                	jmp    c001899d <Vm::faultHandler(regs*)+0xa5e>
c0018931:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018934:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018937:	0f b7 d0             	movzx  edx,ax
c001893a:	0f b7 45 dc          	movzx  eax,WORD PTR [ebp-0x24]
c001893e:	83 ec 08             	sub    esp,0x8
c0018941:	52                   	push   edx
c0018942:	50                   	push   eax
c0018943:	e8 3b f4 ff ff       	call   c0017d83 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0018948:	83 c4 10             	add    esp,0x10
c001894b:	0f b7 c0             	movzx  eax,ax
c001894e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018951:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0018954:	0f b7 d2             	movzx  edx,dx
c0018957:	66 89 55 92          	mov    WORD PTR [ebp-0x6e],dx
c001895b:	66 89 45 90          	mov    WORD PTR [ebp-0x70],ax
c001895f:	8b 45 90             	mov    eax,DWORD PTR [ebp-0x70]
c0018962:	66 8b 55 92          	mov    dx,WORD PTR [ebp-0x6e]
c0018966:	66 ef                	out    dx,ax
c0018968:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001896b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001896e:	25 00 04 00 00       	and    eax,0x400
c0018973:	85 c0                	test   eax,eax
c0018975:	74 14                	je     c001898b <Vm::faultHandler(regs*)+0xa4c>
c0018977:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001897a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001897d:	83 e8 02             	sub    eax,0x2
c0018980:	0f b7 d0             	movzx  edx,ax
c0018983:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018986:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018989:	eb 12                	jmp    c001899d <Vm::faultHandler(regs*)+0xa5e>
c001898b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001898e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018991:	83 c0 02             	add    eax,0x2
c0018994:	0f b7 d0             	movzx  edx,ax
c0018997:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001899a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001899d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189a0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00189a3:	8d 50 01             	lea    edx,[eax+0x1]
c00189a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189a9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00189ac:	b0 01                	mov    al,0x1
c00189ae:	e9 cf 03 00 00       	jmp    c0018d82 <Vm::faultHandler(regs*)+0xe43>
c00189b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189b6:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00189b9:	b0 00                	mov    al,0x0
c00189bb:	89 c2                	mov    edx,eax
c00189bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189c0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00189c3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00189c6:	83 c0 01             	add    eax,0x1
c00189c9:	8a 00                	mov    al,BYTE PTR [eax]
c00189cb:	0f b6 c0             	movzx  eax,al
c00189ce:	83 ec 0c             	sub    esp,0xc
c00189d1:	50                   	push   eax
c00189d2:	e8 1e eb ff ff       	call   c00174f5 <Vm::inbv(unsigned short)>
c00189d7:	83 c4 10             	add    esp,0x10
c00189da:	88 c1                	mov    cl,al
c00189dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189df:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00189e2:	0f b6 c1             	movzx  eax,cl
c00189e5:	09 c2                	or     edx,eax
c00189e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189ea:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00189ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189f0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00189f3:	8d 50 02             	lea    edx,[eax+0x2]
c00189f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189f9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00189fc:	b0 01                	mov    al,0x1
c00189fe:	e9 7f 03 00 00       	jmp    c0018d82 <Vm::faultHandler(regs*)+0xe43>
c0018a03:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018a07:	85 c0                	test   eax,eax
c0018a09:	74 24                	je     c0018a2f <Vm::faultHandler(regs*)+0xaf0>
c0018a0b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018a0e:	83 c0 01             	add    eax,0x1
c0018a11:	8a 00                	mov    al,BYTE PTR [eax]
c0018a13:	0f b6 c0             	movzx  eax,al
c0018a16:	66 89 45 8e          	mov    WORD PTR [ebp-0x72],ax
c0018a1a:	66 8b 45 8e          	mov    ax,WORD PTR [ebp-0x72]
c0018a1e:	89 c2                	mov    edx,eax
c0018a20:	ed                   	in     eax,dx
c0018a21:	89 45 88             	mov    DWORD PTR [ebp-0x78],eax
c0018a24:	8b 55 88             	mov    edx,DWORD PTR [ebp-0x78]
c0018a27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018a2d:	eb 42                	jmp    c0018a71 <Vm::faultHandler(regs*)+0xb32>
c0018a2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a32:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018a35:	25 00 00 ff ff       	and    eax,0xffff0000
c0018a3a:	89 c2                	mov    edx,eax
c0018a3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a3f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018a42:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018a45:	83 c0 01             	add    eax,0x1
c0018a48:	8a 00                	mov    al,BYTE PTR [eax]
c0018a4a:	0f b6 c0             	movzx  eax,al
c0018a4d:	66 89 45 86          	mov    WORD PTR [ebp-0x7a],ax
c0018a51:	66 8b 45 86          	mov    ax,WORD PTR [ebp-0x7a]
c0018a55:	89 c2                	mov    edx,eax
c0018a57:	66 ed                	in     ax,dx
c0018a59:	66 89 45 84          	mov    WORD PTR [ebp-0x7c],ax
c0018a5d:	8b 4d 84             	mov    ecx,DWORD PTR [ebp-0x7c]
c0018a60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a63:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0018a66:	0f b7 c1             	movzx  eax,cx
c0018a69:	09 c2                	or     edx,eax
c0018a6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a6e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018a71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a74:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018a77:	8d 50 02             	lea    edx,[eax+0x2]
c0018a7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a7d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018a80:	b0 01                	mov    al,0x1
c0018a82:	e9 fb 02 00 00       	jmp    c0018d82 <Vm::faultHandler(regs*)+0xe43>
c0018a87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a8a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018a8d:	0f b6 d0             	movzx  edx,al
c0018a90:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018a93:	83 c0 01             	add    eax,0x1
c0018a96:	8a 00                	mov    al,BYTE PTR [eax]
c0018a98:	0f b6 c0             	movzx  eax,al
c0018a9b:	83 ec 08             	sub    esp,0x8
c0018a9e:	52                   	push   edx
c0018a9f:	50                   	push   eax
c0018aa0:	e8 87 ea ff ff       	call   c001752c <Vm::outbv(unsigned short, unsigned char)>
c0018aa5:	83 c4 10             	add    esp,0x10
c0018aa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018aab:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018aae:	8d 50 02             	lea    edx,[eax+0x2]
c0018ab1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ab4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018ab7:	b0 01                	mov    al,0x1
c0018ab9:	e9 c4 02 00 00       	jmp    c0018d82 <Vm::faultHandler(regs*)+0xe43>
c0018abe:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018ac2:	85 c0                	test   eax,eax
c0018ac4:	74 28                	je     c0018aee <Vm::faultHandler(regs*)+0xbaf>
c0018ac6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ac9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018acc:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0018acf:	83 c2 01             	add    edx,0x1
c0018ad2:	8a 12                	mov    dl,BYTE PTR [edx]
c0018ad4:	0f b6 d2             	movzx  edx,dl
c0018ad7:	66 89 55 82          	mov    WORD PTR [ebp-0x7e],dx
c0018adb:	89 85 7c ff ff ff    	mov    DWORD PTR [ebp-0x84],eax
c0018ae1:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [ebp-0x84]
c0018ae7:	66 8b 55 82          	mov    dx,WORD PTR [ebp-0x7e]
c0018aeb:	ef                   	out    dx,eax
c0018aec:	eb 31                	jmp    c0018b1f <Vm::faultHandler(regs*)+0xbe0>
c0018aee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018af1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018af4:	0f b7 c0             	movzx  eax,ax
c0018af7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0018afa:	83 c2 01             	add    edx,0x1
c0018afd:	8a 12                	mov    dl,BYTE PTR [edx]
c0018aff:	0f b6 d2             	movzx  edx,dl
c0018b02:	66 89 95 7a ff ff ff 	mov    WORD PTR [ebp-0x86],dx
c0018b09:	66 89 85 78 ff ff ff 	mov    WORD PTR [ebp-0x88],ax
c0018b10:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [ebp-0x88]
c0018b16:	66 8b 95 7a ff ff ff 	mov    dx,WORD PTR [ebp-0x86]
c0018b1d:	66 ef                	out    dx,ax
c0018b1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b22:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018b25:	8d 50 02             	lea    edx,[eax+0x2]
c0018b28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b2b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018b2e:	b0 01                	mov    al,0x1
c0018b30:	e9 4d 02 00 00       	jmp    c0018d82 <Vm::faultHandler(regs*)+0xe43>
c0018b35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b38:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018b3b:	b0 00                	mov    al,0x0
c0018b3d:	89 c2                	mov    edx,eax
c0018b3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b42:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018b45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b48:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018b4b:	0f b7 c0             	movzx  eax,ax
c0018b4e:	83 ec 0c             	sub    esp,0xc
c0018b51:	50                   	push   eax
c0018b52:	e8 9e e9 ff ff       	call   c00174f5 <Vm::inbv(unsigned short)>
c0018b57:	83 c4 10             	add    esp,0x10
c0018b5a:	88 c1                	mov    cl,al
c0018b5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b5f:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0018b62:	0f b6 c1             	movzx  eax,cl
c0018b65:	09 c2                	or     edx,eax
c0018b67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b6a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018b6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b70:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018b73:	8d 50 01             	lea    edx,[eax+0x1]
c0018b76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b79:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018b7c:	b0 01                	mov    al,0x1
c0018b7e:	e9 ff 01 00 00       	jmp    c0018d82 <Vm::faultHandler(regs*)+0xe43>
c0018b83:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018b87:	85 c0                	test   eax,eax
c0018b89:	74 2e                	je     c0018bb9 <Vm::faultHandler(regs*)+0xc7a>
c0018b8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b8e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018b91:	0f b7 c0             	movzx  eax,ax
c0018b94:	66 89 85 76 ff ff ff 	mov    WORD PTR [ebp-0x8a],ax
c0018b9b:	66 8b 85 76 ff ff ff 	mov    ax,WORD PTR [ebp-0x8a]
c0018ba2:	89 c2                	mov    edx,eax
c0018ba4:	ed                   	in     eax,dx
c0018ba5:	89 85 70 ff ff ff    	mov    DWORD PTR [ebp-0x90],eax
c0018bab:	8b 95 70 ff ff ff    	mov    edx,DWORD PTR [ebp-0x90]
c0018bb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bb4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018bb7:	eb 4c                	jmp    c0018c05 <Vm::faultHandler(regs*)+0xcc6>
c0018bb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bbc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018bbf:	25 00 00 ff ff       	and    eax,0xffff0000
c0018bc4:	89 c2                	mov    edx,eax
c0018bc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bc9:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018bcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bcf:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018bd2:	0f b7 c0             	movzx  eax,ax
c0018bd5:	66 89 85 6e ff ff ff 	mov    WORD PTR [ebp-0x92],ax
c0018bdc:	66 8b 85 6e ff ff ff 	mov    ax,WORD PTR [ebp-0x92]
c0018be3:	89 c2                	mov    edx,eax
c0018be5:	66 ed                	in     ax,dx
c0018be7:	66 89 85 6c ff ff ff 	mov    WORD PTR [ebp-0x94],ax
c0018bee:	8b 8d 6c ff ff ff    	mov    ecx,DWORD PTR [ebp-0x94]
c0018bf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bf7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0018bfa:	0f b7 c1             	movzx  eax,cx
c0018bfd:	09 c2                	or     edx,eax
c0018bff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c02:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018c05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c08:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018c0b:	8d 50 01             	lea    edx,[eax+0x1]
c0018c0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c11:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018c14:	b0 01                	mov    al,0x1
c0018c16:	e9 67 01 00 00       	jmp    c0018d82 <Vm::faultHandler(regs*)+0xe43>
c0018c1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c1e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018c21:	0f b6 d0             	movzx  edx,al
c0018c24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c27:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018c2a:	0f b7 c0             	movzx  eax,ax
c0018c2d:	83 ec 08             	sub    esp,0x8
c0018c30:	52                   	push   edx
c0018c31:	50                   	push   eax
c0018c32:	e8 f5 e8 ff ff       	call   c001752c <Vm::outbv(unsigned short, unsigned char)>
c0018c37:	83 c4 10             	add    esp,0x10
c0018c3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c3d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018c40:	8d 50 01             	lea    edx,[eax+0x1]
c0018c43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c46:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018c49:	b0 01                	mov    al,0x1
c0018c4b:	e9 32 01 00 00       	jmp    c0018d82 <Vm::faultHandler(regs*)+0xe43>
c0018c50:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018c54:	85 c0                	test   eax,eax
c0018c56:	74 2c                	je     c0018c84 <Vm::faultHandler(regs*)+0xd45>
c0018c58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c5b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018c5e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018c61:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0018c64:	0f b7 d2             	movzx  edx,dx
c0018c67:	66 89 95 6a ff ff ff 	mov    WORD PTR [ebp-0x96],dx
c0018c6e:	89 85 64 ff ff ff    	mov    DWORD PTR [ebp-0x9c],eax
c0018c74:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [ebp-0x9c]
c0018c7a:	66 8b 95 6a ff ff ff 	mov    dx,WORD PTR [ebp-0x96]
c0018c81:	ef                   	out    dx,eax
c0018c82:	eb 2f                	jmp    c0018cb3 <Vm::faultHandler(regs*)+0xd74>
c0018c84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c87:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018c8a:	0f b7 c0             	movzx  eax,ax
c0018c8d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018c90:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0018c93:	0f b7 d2             	movzx  edx,dx
c0018c96:	66 89 95 62 ff ff ff 	mov    WORD PTR [ebp-0x9e],dx
c0018c9d:	66 89 85 60 ff ff ff 	mov    WORD PTR [ebp-0xa0],ax
c0018ca4:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [ebp-0xa0]
c0018caa:	66 8b 95 62 ff ff ff 	mov    dx,WORD PTR [ebp-0x9e]
c0018cb1:	66 ef                	out    dx,ax
c0018cb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018cb6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018cb9:	8d 50 01             	lea    edx,[eax+0x1]
c0018cbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018cbf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018cc2:	b0 01                	mov    al,0x1
c0018cc4:	e9 b9 00 00 00       	jmp    c0018d82 <Vm::faultHandler(regs*)+0xe43>
c0018cc9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018ccc:	83 c0 05             	add    eax,0x5
c0018ccf:	8a 00                	mov    al,BYTE PTR [eax]
c0018cd1:	0f b6 c0             	movzx  eax,al
c0018cd4:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018cda:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018cdd:	83 c0 04             	add    eax,0x4
c0018ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0018ce2:	0f b6 f8             	movzx  edi,al
c0018ce5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018ce8:	83 c0 03             	add    eax,0x3
c0018ceb:	8a 00                	mov    al,BYTE PTR [eax]
c0018ced:	0f b6 f0             	movzx  esi,al
c0018cf0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018cf3:	83 c0 02             	add    eax,0x2
c0018cf6:	8a 00                	mov    al,BYTE PTR [eax]
c0018cf8:	0f b6 d8             	movzx  ebx,al
c0018cfb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018cfe:	83 c0 01             	add    eax,0x1
c0018d01:	8a 00                	mov    al,BYTE PTR [eax]
c0018d03:	0f b6 c8             	movzx  ecx,al
c0018d06:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018d09:	8a 00                	mov    al,BYTE PTR [eax]
c0018d0b:	0f b6 d0             	movzx  edx,al
c0018d0e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018d11:	8a 00                	mov    al,BYTE PTR [eax]
c0018d13:	0f b6 c0             	movzx  eax,al
c0018d16:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0018d1c:	57                   	push   edi
c0018d1d:	56                   	push   esi
c0018d1e:	53                   	push   ebx
c0018d1f:	51                   	push   ecx
c0018d20:	52                   	push   edx
c0018d21:	50                   	push   eax
c0018d22:	68 d4 9b 02 c0       	push   0xc0029bd4
c0018d27:	e8 3a e2 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018d2c:	83 c4 20             	add    esp,0x20
c0018d2f:	83 ec 0c             	sub    esp,0xc
c0018d32:	6a 60                	push   0x60
c0018d34:	e8 bc e7 ff ff       	call   c00174f5 <Vm::inbv(unsigned short)>
c0018d39:	83 c4 10             	add    esp,0x10
c0018d3c:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0018d3f:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c0018d43:	83 f8 1c             	cmp    eax,0x1c
c0018d46:	74 09                	je     c0018d51 <Vm::faultHandler(regs*)+0xe12>
c0018d48:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c0018d4c:	83 f8 5a             	cmp    eax,0x5a
c0018d4f:	75 24                	jne    c0018d75 <Vm::faultHandler(regs*)+0xe36>
c0018d51:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c0018d55:	83 f8 1c             	cmp    eax,0x1c
c0018d58:	74 09                	je     c0018d63 <Vm::faultHandler(regs*)+0xe24>
c0018d5a:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c0018d5e:	83 f8 5a             	cmp    eax,0x5a
c0018d61:	75 15                	jne    c0018d78 <Vm::faultHandler(regs*)+0xe39>
c0018d63:	83 ec 0c             	sub    esp,0xc
c0018d66:	6a 60                	push   0x60
c0018d68:	e8 88 e7 ff ff       	call   c00174f5 <Vm::inbv(unsigned short)>
c0018d6d:	83 c4 10             	add    esp,0x10
c0018d70:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0018d73:	eb dc                	jmp    c0018d51 <Vm::faultHandler(regs*)+0xe12>
c0018d75:	90                   	nop
c0018d76:	eb b7                	jmp    c0018d2f <Vm::faultHandler(regs*)+0xdf0>
c0018d78:	90                   	nop
c0018d79:	b0 00                	mov    al,0x0
c0018d7b:	eb 05                	jmp    c0018d82 <Vm::faultHandler(regs*)+0xe43>
c0018d7d:	e9 39 f2 ff ff       	jmp    c0017fbb <Vm::faultHandler(regs*)+0x7c>
c0018d82:	8d 65 f4             	lea    esp,[ebp-0xc]
c0018d85:	5b                   	pop    ebx
c0018d86:	5e                   	pop    esi
c0018d87:	5f                   	pop    edi
c0018d88:	5d                   	pop    ebp
c0018d89:	c3                   	ret    

c0018d8a <IOAPIC::close(int, int, void*)>:
c0018d8a:	b8 00 00 00 00       	mov    eax,0x0
c0018d8f:	c3                   	ret    

c0018d90 <apicGetBase()>:
c0018d90:	55                   	push   ebp
c0018d91:	89 e5                	mov    ebp,esp
c0018d93:	83 ec 18             	sub    esp,0x18
c0018d96:	a0 4c 24 03 c0       	mov    al,ds:0xc003244c
c0018d9b:	83 e0 08             	and    eax,0x8
c0018d9e:	0f b6 c0             	movzx  eax,al
c0018da1:	85 c0                	test   eax,eax
c0018da3:	75 07                	jne    c0018dac <apicGetBase()+0x1c>
c0018da5:	b8 00 00 00 00       	mov    eax,0x0
c0018daa:	eb 1b                	jmp    c0018dc7 <apicGetBase()+0x37>
c0018dac:	83 ec 0c             	sub    esp,0xc
c0018daf:	6a 1b                	push   0x1b
c0018db1:	e8 74 15 00 00       	call   c001a32a <x86rdmsr(unsigned int)>
c0018db6:	83 c4 10             	add    esp,0x10
c0018db9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0018dbc:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0018dbf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018dc2:	25 00 00 ff ff       	and    eax,0xffff0000
c0018dc7:	c9                   	leave  
c0018dc8:	c3                   	ret    
c0018dc9:	90                   	nop

c0018dca <IOAPIC::IOAPIC()>:
c0018dca:	83 ec 0c             	sub    esp,0xc
c0018dcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dd1:	83 ec 08             	sub    esp,0x8
c0018dd4:	68 94 9f 02 c0       	push   0xc0029f94
c0018dd9:	50                   	push   eax
c0018dda:	e8 51 12 ff ff       	call   c000a030 <Device::Device(char const*)>
c0018ddf:	83 c4 10             	add    esp,0x10
c0018de2:	ba b4 9f 02 c0       	mov    edx,0xc0029fb4
c0018de7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018deb:	89 10                	mov    DWORD PTR [eax],edx
c0018ded:	90                   	nop
c0018dee:	83 c4 0c             	add    esp,0xc
c0018df1:	c3                   	ret    

c0018df2 <apicOpen()>:
c0018df2:	55                   	push   ebp
c0018df3:	89 e5                	mov    ebp,esp
c0018df5:	53                   	push   ebx
c0018df6:	83 ec 34             	sub    esp,0x34
c0018df9:	83 ec 0c             	sub    esp,0xc
c0018dfc:	68 9c 9f 02 c0       	push   0xc0029f9c
c0018e01:	e8 60 e1 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018e06:	83 c4 10             	add    esp,0x10
c0018e09:	a0 00 24 03 c0       	mov    al,ds:0xc0032400
c0018e0e:	83 f0 01             	xor    eax,0x1
c0018e11:	0f b6 c0             	movzx  eax,al
c0018e14:	85 c0                	test   eax,eax
c0018e16:	0f 84 a3 00 00 00    	je     c0018ebf <apicOpen()+0xcd>
c0018e1c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0018e20:	a0 40 1e 03 c0       	mov    al,ds:0xc0031e40
c0018e25:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0018e29:	0f b6 c0             	movzx  eax,al
c0018e2c:	39 c2                	cmp    edx,eax
c0018e2e:	0f 83 84 00 00 00    	jae    c0018eb8 <apicOpen()+0xc6>
c0018e34:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c0018e3b:	83 ec 0c             	sub    esp,0xc
c0018e3e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0018e41:	e8 12 6d ff ff       	call   c000fb58 <malloc>
c0018e46:	83 c4 10             	add    esp,0x10
c0018e49:	89 c3                	mov    ebx,eax
c0018e4b:	83 ec 0c             	sub    esp,0xc
c0018e4e:	53                   	push   ebx
c0018e4f:	e8 76 ff ff ff       	call   c0018dca <IOAPIC::IOAPIC()>
c0018e54:	83 c4 10             	add    esp,0x10
c0018e57:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0018e5a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0018e5e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0018e61:	89 14 85 e0 23 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdc20],edx
c0018e68:	a1 c0 23 03 c0       	mov    eax,ds:0xc00323c0
c0018e6d:	83 c0 01             	add    eax,0x1
c0018e70:	a3 c0 23 03 c0       	mov    ds:0xc00323c0,eax
c0018e75:	a1 08 21 03 c0       	mov    eax,ds:0xc0032108
c0018e7a:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0018e80:	83 ec 08             	sub    esp,0x8
c0018e83:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0018e86:	50                   	push   eax
c0018e87:	e8 42 10 ff ff       	call   c0009ece <Device::addChild(Device*)>
c0018e8c:	83 c4 10             	add    esp,0x10
c0018e8f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018e92:	8b 00                	mov    eax,DWORD PTR [eax]
c0018e94:	83 c0 08             	add    eax,0x8
c0018e97:	8b 00                	mov    eax,DWORD PTR [eax]
c0018e99:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0018e9d:	6a 00                	push   0x0
c0018e9f:	6a 00                	push   0x0
c0018ea1:	52                   	push   edx
c0018ea2:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0018ea5:	ff d0                	call   eax
c0018ea7:	83 c4 10             	add    esp,0x10
c0018eaa:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c0018ead:	83 c0 01             	add    eax,0x1
c0018eb0:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c0018eb3:	e9 68 ff ff ff       	jmp    c0018e20 <apicOpen()+0x2e>
c0018eb8:	c6 05 00 24 03 c0 01 	mov    BYTE PTR ds:0xc0032400,0x1
c0018ebf:	e8 cc fe ff ff       	call   c0018d90 <apicGetBase()>
c0018ec4:	05 f0 00 00 00       	add    eax,0xf0
c0018ec9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0018ecc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0018ecf:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ed1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0018ed4:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c0018edb:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c0018ee2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0018ee5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0018ee8:	89 10                	mov    DWORD PTR [eax],edx
c0018eea:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0018ef1:	a1 8c 1d 03 c0       	mov    eax,ds:0xc0031d8c
c0018ef6:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c0018ef9:	7d 7c                	jge    c0018f77 <apicOpen()+0x185>
c0018efb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018efe:	8b 04 85 a0 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce260]
c0018f05:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c0018f08:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018f0b:	8b 04 85 a0 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce260]
c0018f12:	c1 e8 08             	shr    eax,0x8
c0018f15:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0018f19:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018f1c:	8b 04 85 a0 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce260]
c0018f23:	c1 e8 18             	shr    eax,0x18
c0018f26:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0018f29:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018f2d:	3d ff 00 00 00       	cmp    eax,0xff
c0018f32:	75 3a                	jne    c0018f6e <apicOpen()+0x17c>
c0018f34:	e8 57 fe ff ff       	call   c0018d90 <apicGetBase()>
c0018f39:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c0018f3d:	83 fa 01             	cmp    edx,0x1
c0018f40:	75 07                	jne    c0018f49 <apicOpen()+0x157>
c0018f42:	ba 60 03 00 00       	mov    edx,0x360
c0018f47:	eb 05                	jmp    c0018f4e <apicOpen()+0x15c>
c0018f49:	ba 50 03 00 00       	mov    edx,0x350
c0018f4e:	01 d0                	add    eax,edx
c0018f50:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0018f53:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018f56:	8b 00                	mov    eax,DWORD PTR [eax]
c0018f58:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0018f5b:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0018f62:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0018f66:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018f69:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0018f6c:	89 10                	mov    DWORD PTR [eax],edx
c0018f6e:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0018f72:	e9 7a ff ff ff       	jmp    c0018ef1 <apicOpen()+0xff>
c0018f77:	90                   	nop
c0018f78:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0018f7b:	c9                   	leave  
c0018f7c:	c3                   	ret    
c0018f7d:	90                   	nop

c0018f7e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0018f7e:	55                   	push   ebp
c0018f7f:	89 e5                	mov    ebp,esp
c0018f81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f84:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018f8a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0018f8d:	72 1d                	jb     c0018fac <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0018f8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f92:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0018f98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f9b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0018fa1:	01 d0                	add    eax,edx
c0018fa3:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0018fa6:	73 04                	jae    c0018fac <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0018fa8:	b0 01                	mov    al,0x1
c0018faa:	eb 02                	jmp    c0018fae <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0018fac:	b0 00                	mov    al,0x0
c0018fae:	5d                   	pop    ebp
c0018faf:	c3                   	ret    

c0018fb0 <IOAPIC::read(int)>:
c0018fb0:	55                   	push   ebp
c0018fb1:	89 e5                	mov    ebp,esp
c0018fb3:	83 ec 10             	sub    esp,0x10
c0018fb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fb9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018fbf:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0018fc2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018fc5:	0f b6 d0             	movzx  edx,al
c0018fc8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018fcb:	89 10                	mov    DWORD PTR [eax],edx
c0018fcd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018fd0:	83 c0 10             	add    eax,0x10
c0018fd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0018fd5:	c9                   	leave  
c0018fd6:	c3                   	ret    
c0018fd7:	90                   	nop

c0018fd8 <IOAPIC::open(int, int, void*)>:
c0018fd8:	55                   	push   ebp
c0018fd9:	89 e5                	mov    ebp,esp
c0018fdb:	57                   	push   edi
c0018fdc:	56                   	push   esi
c0018fdd:	53                   	push   ebx
c0018fde:	83 ec 04             	sub    esp,0x4
c0018fe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fe4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0018fe7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018fed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ff0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018ff6:	8b 14 85 80 1e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce180]
c0018ffd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019000:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019006:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019009:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001900f:	8b 14 85 00 1f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce100]
c0019016:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019019:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001901f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019022:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0019028:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001902b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0019031:	0f b6 f0             	movzx  esi,al
c0019034:	89 d0                	mov    eax,edx
c0019036:	ba 00 00 00 00       	mov    edx,0x0
c001903b:	89 c7                	mov    edi,eax
c001903d:	83 e7 ff             	and    edi,0xffffffff
c0019040:	89 f9                	mov    ecx,edi
c0019042:	0f b6 da             	movzx  ebx,dl
c0019045:	89 c8                	mov    eax,ecx
c0019047:	89 da                	mov    edx,ebx
c0019049:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001904c:	8d 5e 08             	lea    ebx,[esi+0x8]
c001904f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0019053:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0019057:	83 e0 00             	and    eax,0x0
c001905a:	09 d0                	or     eax,edx
c001905c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0019060:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019063:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0019069:	8d 50 01             	lea    edx,[eax+0x1]
c001906c:	88 d1                	mov    cl,dl
c001906e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0019071:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c0019077:	0f b6 d0             	movzx  edx,al
c001907a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001907d:	83 c2 08             	add    edx,0x8
c0019080:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0019084:	0f b6 c9             	movzx  ecx,cl
c0019087:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001908d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0019091:	6a 01                	push   0x1
c0019093:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019096:	e8 15 ff ff ff       	call   c0018fb0 <IOAPIC::read(int)>
c001909b:	83 c4 08             	add    esp,0x8
c001909e:	c1 f8 10             	sar    eax,0x10
c00190a1:	0f b6 c0             	movzx  eax,al
c00190a4:	8d 50 01             	lea    edx,[eax+0x1]
c00190a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190aa:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00190b0:	b8 00 00 00 00       	mov    eax,0x0
c00190b5:	8d 65 f4             	lea    esp,[ebp-0xc]
c00190b8:	5b                   	pop    ebx
c00190b9:	5e                   	pop    esi
c00190ba:	5f                   	pop    edi
c00190bb:	5d                   	pop    ebp
c00190bc:	c3                   	ret    
c00190bd:	90                   	nop

c00190be <IOAPIC::write(int, int)>:
c00190be:	55                   	push   ebp
c00190bf:	89 e5                	mov    ebp,esp
c00190c1:	83 ec 10             	sub    esp,0x10
c00190c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190c7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00190cd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00190d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00190d3:	0f b6 d0             	movzx  edx,al
c00190d6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00190d9:	89 10                	mov    DWORD PTR [eax],edx
c00190db:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00190de:	8d 50 10             	lea    edx,[eax+0x10]
c00190e1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00190e4:	89 02                	mov    DWORD PTR [edx],eax
c00190e6:	90                   	nop
c00190e7:	c9                   	leave  
c00190e8:	c3                   	ret    
c00190e9:	90                   	nop

c00190ea <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00190ea:	55                   	push   ebp
c00190eb:	89 e5                	mov    ebp,esp
c00190ed:	53                   	push   ebx
c00190ee:	83 ec 2c             	sub    esp,0x2c
c00190f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00190f4:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00190f7:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00190fa:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00190fd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0019100:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0019103:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0019106:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0019109:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001910c:	88 d8                	mov    al,bl
c001910e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0019111:	88 c8                	mov    al,cl
c0019113:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0019116:	88 d0                	mov    al,dl
c0019118:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001911b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001911f:	83 c0 08             	add    eax,0x8
c0019122:	d1 e0                	shl    eax,1
c0019124:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0019127:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001912b:	83 c0 08             	add    eax,0x8
c001912e:	d1 e0                	shl    eax,1
c0019130:	83 c0 01             	add    eax,0x1
c0019133:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0019136:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0019139:	50                   	push   eax
c001913a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001913d:	e8 6e fe ff ff       	call   c0018fb0 <IOAPIC::read(int)>
c0019142:	83 c4 08             	add    esp,0x8
c0019145:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019148:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001914f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0019152:	c1 e0 18             	shl    eax,0x18
c0019155:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0019158:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001915b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001915e:	52                   	push   edx
c001915f:	50                   	push   eax
c0019160:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019163:	e8 56 ff ff ff       	call   c00190be <IOAPIC::write(int, int)>
c0019168:	83 c4 0c             	add    esp,0xc
c001916b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001916e:	50                   	push   eax
c001916f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019172:	e8 39 fe ff ff       	call   c0018fb0 <IOAPIC::read(int)>
c0019177:	83 c4 08             	add    esp,0x8
c001917a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001917d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0019184:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001918b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0019192:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c0019196:	85 c0                	test   eax,eax
c0019198:	74 09                	je     c00191a3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001919a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00191a1:	eb 07                	jmp    c00191aa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c00191a3:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00191aa:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c00191ae:	85 c0                	test   eax,eax
c00191b0:	74 09                	je     c00191bb <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c00191b2:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00191b9:	eb 07                	jmp    c00191c2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c00191bb:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00191c2:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00191c9:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00191cd:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00191d0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00191d3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00191d6:	52                   	push   edx
c00191d7:	50                   	push   eax
c00191d8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00191db:	e8 de fe ff ff       	call   c00190be <IOAPIC::write(int, int)>
c00191e0:	83 c4 0c             	add    esp,0xc
c00191e3:	90                   	nop
c00191e4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00191e7:	c9                   	leave  
c00191e8:	c3                   	ret    
c00191e9:	90                   	nop

c00191ea <noCopro(unsigned long)>:
c00191ea:	c3                   	ret    

c00191eb <HalRestart()>:
c00191eb:	e4 64                	in     al,0x64
c00191ed:	a8 02                	test   al,0x2
c00191ef:	75 fa                	jne    c00191eb <HalRestart()>
c00191f1:	b0 fe                	mov    al,0xfe
c00191f3:	e6 64                	out    0x64,al
c00191f5:	c3                   	ret    

c00191f6 <HalShutdown()>:
c00191f6:	c3                   	ret    

c00191f7 <HalSleep()>:
c00191f7:	c3                   	ret    

c00191f8 <CPU::close(int, int, void*)>:
c00191f8:	31 c0                	xor    eax,eax
c00191fa:	c3                   	ret    

c00191fb <x86ReadCMOS(unsigned char)>:
c00191fb:	83 ec 14             	sub    esp,0x14
c00191fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019202:	88 04 24             	mov    BYTE PTR [esp],al
c0019205:	a0 2c 24 03 c0       	mov    al,ds:0xc003242c
c001920a:	0f b6 c0             	movzx  eax,al
c001920d:	85 c0                	test   eax,eax
c001920f:	74 04                	je     c0019215 <x86ReadCMOS(unsigned char)+0x1a>
c0019211:	b2 00                	mov    dl,0x0
c0019213:	eb 02                	jmp    c0019217 <x86ReadCMOS(unsigned char)+0x1c>
c0019215:	b2 80                	mov    dl,0x80
c0019217:	8a 04 24             	mov    al,BYTE PTR [esp]
c001921a:	09 d0                	or     eax,edx
c001921c:	0f b6 c0             	movzx  eax,al
c001921f:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0019226:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001922a:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001922e:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0019233:	ee                   	out    dx,al
c0019234:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c001923b:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0019240:	89 c2                	mov    edx,eax
c0019242:	ec                   	in     al,dx
c0019243:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019247:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001924b:	83 c4 14             	add    esp,0x14
c001924e:	c3                   	ret    

c001924f <x86WriteCMOS(unsigned char, unsigned char)>:
c001924f:	83 ec 18             	sub    esp,0x18
c0019252:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019256:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001925a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001925e:	88 d0                	mov    al,dl
c0019260:	88 04 24             	mov    BYTE PTR [esp],al
c0019263:	a0 2c 24 03 c0       	mov    al,ds:0xc003242c
c0019268:	0f b6 c0             	movzx  eax,al
c001926b:	85 c0                	test   eax,eax
c001926d:	74 04                	je     c0019273 <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c001926f:	b2 00                	mov    dl,0x0
c0019271:	eb 02                	jmp    c0019275 <x86WriteCMOS(unsigned char, unsigned char)+0x26>
c0019273:	b2 80                	mov    dl,0x80
c0019275:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019279:	09 d0                	or     eax,edx
c001927b:	0f b6 c0             	movzx  eax,al
c001927e:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0019285:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019289:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001928d:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0019292:	ee                   	out    dx,al
c0019293:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0019297:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c001929e:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00192a2:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c00192a6:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00192ab:	ee                   	out    dx,al
c00192ac:	90                   	nop
c00192ad:	83 c4 18             	add    esp,0x18
c00192b0:	c3                   	ret    

c00192b1 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c00192b1:	60                   	pusha  
c00192b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00192b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00192ba:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00192be:	9c                   	pushf  
c00192bf:	fa                   	cli    
c00192c0:	0f 09                	wbinvd 
c00192c2:	0f 30                	wrmsr  
c00192c4:	9d                   	popf   
c00192c5:	89 c2                	mov    edx,eax
c00192c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192cb:	89 10                	mov    DWORD PTR [eax],edx
c00192cd:	61                   	popa   
c00192ce:	90                   	nop
c00192cf:	c3                   	ret    

c00192d0 <AMD_K6_read_msr(unsigned int, REGS*)>:
c00192d0:	60                   	pusha  
c00192d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00192d5:	89 c1                	mov    ecx,eax
c00192d7:	9c                   	pushf  
c00192d8:	fa                   	cli    
c00192d9:	0f 09                	wbinvd 
c00192db:	31 c0                	xor    eax,eax
c00192dd:	31 d2                	xor    edx,edx
c00192df:	0f 32                	rdmsr  
c00192e1:	9d                   	popf   
c00192e2:	89 c2                	mov    edx,eax
c00192e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00192e8:	89 10                	mov    DWORD PTR [eax],edx
c00192ea:	61                   	popa   
c00192eb:	90                   	nop
c00192ec:	c3                   	ret    

c00192ed <AMD_K6_writeback(int, int, int)>:
c00192ed:	83 ec 20             	sub    esp,0x20
c00192f0:	a1 70 21 03 c0       	mov    eax,ds:0xc0032170
c00192f5:	c1 e8 14             	shr    eax,0x14
c00192f8:	c1 e8 02             	shr    eax,0x2
c00192fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00192ff:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0019304:	0f 85 9e 00 00 00    	jne    c00193a8 <AMD_K6_writeback(int, int, int)+0xbb>
c001930a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001930e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019312:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0019317:	75 19                	jne    c0019332 <AMD_K6_writeback(int, int, int)+0x45>
c0019319:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c001931e:	7f 0a                	jg     c001932a <AMD_K6_writeback(int, int, int)+0x3d>
c0019320:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0019328:	eb 08                	jmp    c0019332 <AMD_K6_writeback(int, int, int)+0x45>
c001932a:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0019332:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0019337:	7c 6e                	jl     c00193a7 <AMD_K6_writeback(int, int, int)+0xba>
c0019339:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c001933e:	7e 09                	jle    c0019349 <AMD_K6_writeback(int, int, int)+0x5c>
c0019340:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0019345:	74 36                	je     c001937d <AMD_K6_writeback(int, int, int)+0x90>
c0019347:	eb 5e                	jmp    c00193a7 <AMD_K6_writeback(int, int, int)+0xba>
c0019349:	8d 44 24 08          	lea    eax,[esp+0x8]
c001934d:	50                   	push   eax
c001934e:	68 82 00 00 c0       	push   0xc0000082
c0019353:	e8 78 ff ff ff       	call   c00192d0 <AMD_K6_read_msr(unsigned int, REGS*)>
c0019358:	83 c4 08             	add    esp,0x8
c001935b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001935f:	d1 e0                	shl    eax,1
c0019361:	83 e0 7f             	and    eax,0x7f
c0019364:	89 c2                	mov    edx,eax
c0019366:	8d 44 24 08          	lea    eax,[esp+0x8]
c001936a:	50                   	push   eax
c001936b:	6a 00                	push   0x0
c001936d:	52                   	push   edx
c001936e:	68 82 00 00 c0       	push   0xc0000082
c0019373:	e8 39 ff ff ff       	call   c00192b1 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0019378:	83 c4 10             	add    esp,0x10
c001937b:	eb 2b                	jmp    c00193a8 <AMD_K6_writeback(int, int, int)+0xbb>
c001937d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019381:	50                   	push   eax
c0019382:	68 82 00 00 c0       	push   0xc0000082
c0019387:	e8 44 ff ff ff       	call   c00192d0 <AMD_K6_read_msr(unsigned int, REGS*)>
c001938c:	83 c4 08             	add    esp,0x8
c001938f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019393:	50                   	push   eax
c0019394:	6a 00                	push   0x0
c0019396:	6a 00                	push   0x0
c0019398:	68 82 00 00 c0       	push   0xc0000082
c001939d:	e8 0f ff ff ff       	call   c00192b1 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c00193a2:	83 c4 10             	add    esp,0x10
c00193a5:	eb 01                	jmp    c00193a8 <AMD_K6_writeback(int, int, int)+0xbb>
c00193a7:	90                   	nop
c00193a8:	90                   	nop
c00193a9:	83 c4 20             	add    esp,0x20
c00193ac:	c3                   	ret    

c00193ad <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00193ad:	56                   	push   esi
c00193ae:	53                   	push   ebx
c00193af:	a1 00 c8 02 c0       	mov    eax,ds:0xc002c800
c00193b4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00193b8:	75 32                	jne    c00193ec <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00193ba:	8b 15 20 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032420
c00193c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193c4:	89 10                	mov    DWORD PTR [eax],edx
c00193c6:	8b 15 1c 24 03 c0    	mov    edx,DWORD PTR ds:0xc003241c
c00193cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00193d0:	89 10                	mov    DWORD PTR [eax],edx
c00193d2:	8b 15 18 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032418
c00193d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00193dc:	89 10                	mov    DWORD PTR [eax],edx
c00193de:	8b 15 14 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032414
c00193e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00193e8:	89 10                	mov    DWORD PTR [eax],edx
c00193ea:	eb 5c                	jmp    c0019448 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c00193ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193f0:	ba 00 00 00 00       	mov    edx,0x0
c00193f5:	89 d1                	mov    ecx,edx
c00193f7:	0f a2                	cpuid  
c00193f9:	89 c6                	mov    esi,eax
c00193fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193ff:	89 30                	mov    DWORD PTR [eax],esi
c0019401:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019405:	89 18                	mov    DWORD PTR [eax],ebx
c0019407:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001940b:	89 08                	mov    DWORD PTR [eax],ecx
c001940d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019411:	89 10                	mov    DWORD PTR [eax],edx
c0019413:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019417:	a3 00 c8 02 c0       	mov    ds:0xc002c800,eax
c001941c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019420:	8b 00                	mov    eax,DWORD PTR [eax]
c0019422:	a3 20 24 03 c0       	mov    ds:0xc0032420,eax
c0019427:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001942b:	8b 00                	mov    eax,DWORD PTR [eax]
c001942d:	a3 1c 24 03 c0       	mov    ds:0xc003241c,eax
c0019432:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019436:	8b 00                	mov    eax,DWORD PTR [eax]
c0019438:	a3 18 24 03 c0       	mov    ds:0xc0032418,eax
c001943d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019441:	8b 00                	mov    eax,DWORD PTR [eax]
c0019443:	a3 14 24 03 c0       	mov    ds:0xc0032414,eax
c0019448:	5b                   	pop    ebx
c0019449:	5e                   	pop    esi
c001944a:	c3                   	ret    

c001944b <cpuidCheckEDX(unsigned int)>:
c001944b:	83 ec 10             	sub    esp,0x10
c001944e:	89 e0                	mov    eax,esp
c0019450:	50                   	push   eax
c0019451:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019455:	50                   	push   eax
c0019456:	8d 44 24 10          	lea    eax,[esp+0x10]
c001945a:	50                   	push   eax
c001945b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001945f:	50                   	push   eax
c0019460:	6a 01                	push   0x1
c0019462:	e8 46 ff ff ff       	call   c00193ad <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019467:	83 c4 14             	add    esp,0x14
c001946a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001946d:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019471:	0f 95 c0             	setne  al
c0019474:	83 c4 10             	add    esp,0x10
c0019477:	c3                   	ret    

c0019478 <cpuidCheckECX(unsigned int)>:
c0019478:	83 ec 10             	sub    esp,0x10
c001947b:	89 e0                	mov    eax,esp
c001947d:	50                   	push   eax
c001947e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019482:	50                   	push   eax
c0019483:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019487:	50                   	push   eax
c0019488:	8d 44 24 18          	lea    eax,[esp+0x18]
c001948c:	50                   	push   eax
c001948d:	6a 01                	push   0x1
c001948f:	e8 19 ff ff ff       	call   c00193ad <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019494:	83 c4 14             	add    esp,0x14
c0019497:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001949b:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c001949f:	0f 95 c0             	setne  al
c00194a2:	83 c4 10             	add    esp,0x10
c00194a5:	c3                   	ret    

c00194a6 <cpuidCheckExtendedEBX(unsigned int)>:
c00194a6:	83 ec 10             	sub    esp,0x10
c00194a9:	89 e0                	mov    eax,esp
c00194ab:	50                   	push   eax
c00194ac:	8d 44 24 08          	lea    eax,[esp+0x8]
c00194b0:	50                   	push   eax
c00194b1:	8d 44 24 10          	lea    eax,[esp+0x10]
c00194b5:	50                   	push   eax
c00194b6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00194ba:	50                   	push   eax
c00194bb:	6a 07                	push   0x7
c00194bd:	e8 eb fe ff ff       	call   c00193ad <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00194c2:	83 c4 14             	add    esp,0x14
c00194c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194c9:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00194cd:	0f 95 c0             	setne  al
c00194d0:	83 c4 10             	add    esp,0x10
c00194d3:	c3                   	ret    

c00194d4 <cpuidCheckExtendedECX(unsigned int)>:
c00194d4:	83 ec 10             	sub    esp,0x10
c00194d7:	89 e0                	mov    eax,esp
c00194d9:	50                   	push   eax
c00194da:	8d 44 24 08          	lea    eax,[esp+0x8]
c00194de:	50                   	push   eax
c00194df:	8d 44 24 10          	lea    eax,[esp+0x10]
c00194e3:	50                   	push   eax
c00194e4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00194e8:	50                   	push   eax
c00194e9:	6a 07                	push   0x7
c00194eb:	e8 bd fe ff ff       	call   c00193ad <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00194f0:	83 c4 14             	add    esp,0x14
c00194f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00194f7:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00194fb:	0f 95 c0             	setne  al
c00194fe:	83 c4 10             	add    esp,0x10
c0019501:	c3                   	ret    

c0019502 <HalDetectFeatures()>:
c0019502:	57                   	push   edi
c0019503:	56                   	push   esi
c0019504:	53                   	push   ebx
c0019505:	81 ec 90 00 00 00    	sub    esp,0x90
c001950b:	83 ec 04             	sub    esp,0x4
c001950e:	6a 08                	push   0x8
c0019510:	6a 00                	push   0x0
c0019512:	68 4c 24 03 c0       	push   0xc003244c
c0019517:	e8 d4 6f fe ff       	call   c00004f0 <memset>
c001951c:	83 c4 10             	add    esp,0x10
c001951f:	a0 4c 24 03 c0       	mov    al,ds:0xc003244c
c0019524:	83 c8 04             	or     eax,0x4
c0019527:	a2 4c 24 03 c0       	mov    ds:0xc003244c,al
c001952c:	83 ec 0c             	sub    esp,0xc
c001952f:	68 d8 9f 02 c0       	push   0xc0029fd8
c0019534:	e8 2d da fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019539:	83 c4 10             	add    esp,0x10
c001953c:	e8 b8 6c fe ff       	call   c00001f9 <detectCPUID>
c0019541:	85 c0                	test   eax,eax
c0019543:	0f 95 c0             	setne  al
c0019546:	83 e0 01             	and    eax,0x1
c0019549:	83 e0 01             	and    eax,0x1
c001954c:	8d 0c 00             	lea    ecx,[eax+eax*1]
c001954f:	a0 4c 24 03 c0       	mov    al,ds:0xc003244c
c0019554:	83 e0 fd             	and    eax,0xfffffffd
c0019557:	88 c2                	mov    dl,al
c0019559:	88 c8                	mov    al,cl
c001955b:	09 d0                	or     eax,edx
c001955d:	a2 4c 24 03 c0       	mov    ds:0xc003244c,al
c0019562:	a0 4c 24 03 c0       	mov    al,ds:0xc003244c
c0019567:	83 e0 02             	and    eax,0x2
c001956a:	0f b6 c0             	movzx  eax,al
c001956d:	85 c0                	test   eax,eax
c001956f:	0f 84 84 02 00 00    	je     c00197f9 <HalDetectFeatures()+0x2f7>
c0019575:	83 ec 0c             	sub    esp,0xc
c0019578:	6a 20                	push   0x20
c001957a:	e8 cc fe ff ff       	call   c001944b <cpuidCheckEDX(unsigned int)>
c001957f:	83 c4 10             	add    esp,0x10
c0019582:	83 e0 01             	and    eax,0x1
c0019585:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001958c:	a0 4c 24 03 c0       	mov    al,ds:0xc003244c
c0019591:	83 e0 f7             	and    eax,0xfffffff7
c0019594:	88 c2                	mov    dl,al
c0019596:	88 c8                	mov    al,cl
c0019598:	09 d0                	or     eax,edx
c001959a:	a2 4c 24 03 c0       	mov    ds:0xc003244c,al
c001959f:	83 ec 0c             	sub    esp,0xc
c00195a2:	68 00 00 00 04       	push   0x4000000
c00195a7:	e8 9f fe ff ff       	call   c001944b <cpuidCheckEDX(unsigned int)>
c00195ac:	83 c4 10             	add    esp,0x10
c00195af:	89 c1                	mov    ecx,eax
c00195b1:	83 e1 01             	and    ecx,0x1
c00195b4:	a0 4d 24 03 c0       	mov    al,ds:0xc003244d
c00195b9:	83 e0 fe             	and    eax,0xfffffffe
c00195bc:	88 c2                	mov    dl,al
c00195be:	88 c8                	mov    al,cl
c00195c0:	09 d0                	or     eax,edx
c00195c2:	a2 4d 24 03 c0       	mov    ds:0xc003244d,al
c00195c7:	83 ec 0c             	sub    esp,0xc
c00195ca:	68 80 00 00 00       	push   0x80
c00195cf:	e8 77 fe ff ff       	call   c001944b <cpuidCheckEDX(unsigned int)>
c00195d4:	83 c4 10             	add    esp,0x10
c00195d7:	89 c1                	mov    ecx,eax
c00195d9:	c1 e1 07             	shl    ecx,0x7
c00195dc:	a0 4d 24 03 c0       	mov    al,ds:0xc003244d
c00195e1:	83 e0 7f             	and    eax,0x7f
c00195e4:	88 c2                	mov    dl,al
c00195e6:	88 c8                	mov    al,cl
c00195e8:	09 d0                	or     eax,edx
c00195ea:	a2 4d 24 03 c0       	mov    ds:0xc003244d,al
c00195ef:	83 ec 0c             	sub    esp,0xc
c00195f2:	68 00 00 80 00       	push   0x800000
c00195f7:	e8 4f fe ff ff       	call   c001944b <cpuidCheckEDX(unsigned int)>
c00195fc:	83 c4 10             	add    esp,0x10
c00195ff:	83 e0 01             	and    eax,0x1
c0019602:	89 c1                	mov    ecx,eax
c0019604:	c1 e1 05             	shl    ecx,0x5
c0019607:	a0 4c 24 03 c0       	mov    al,ds:0xc003244c
c001960c:	83 e0 df             	and    eax,0xffffffdf
c001960f:	88 c2                	mov    dl,al
c0019611:	88 c8                	mov    al,cl
c0019613:	09 d0                	or     eax,edx
c0019615:	a2 4c 24 03 c0       	mov    ds:0xc003244c,al
c001961a:	83 ec 0c             	sub    esp,0xc
c001961d:	6a 01                	push   0x1
c001961f:	e8 44 40 ff ff       	call   c000d668 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019624:	83 c4 10             	add    esp,0x10
c0019627:	0f b6 c0             	movzx  eax,al
c001962a:	85 c0                	test   eax,eax
c001962c:	75 17                	jne    c0019645 <HalDetectFeatures()+0x143>
c001962e:	83 ec 0c             	sub    esp,0xc
c0019631:	68 00 04 00 00       	push   0x400
c0019636:	e8 2d 40 ff ff       	call   c000d668 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001963b:	83 c4 10             	add    esp,0x10
c001963e:	0f b6 c0             	movzx  eax,al
c0019641:	85 c0                	test   eax,eax
c0019643:	74 04                	je     c0019649 <HalDetectFeatures()+0x147>
c0019645:	b0 01                	mov    al,0x1
c0019647:	eb 02                	jmp    c001964b <HalDetectFeatures()+0x149>
c0019649:	b0 00                	mov    al,0x0
c001964b:	0f b6 c0             	movzx  eax,al
c001964e:	85 c0                	test   eax,eax
c0019650:	74 0f                	je     c0019661 <HalDetectFeatures()+0x15f>
c0019652:	a0 4c 24 03 c0       	mov    al,ds:0xc003244c
c0019657:	83 e0 fe             	and    eax,0xfffffffe
c001965a:	a2 4c 24 03 c0       	mov    ds:0xc003244c,al
c001965f:	eb 28                	jmp    c0019689 <HalDetectFeatures()+0x187>
c0019661:	83 ec 0c             	sub    esp,0xc
c0019664:	68 00 02 00 00       	push   0x200
c0019669:	e8 dd fd ff ff       	call   c001944b <cpuidCheckEDX(unsigned int)>
c001966e:	83 c4 10             	add    esp,0x10
c0019671:	89 c1                	mov    ecx,eax
c0019673:	83 e1 01             	and    ecx,0x1
c0019676:	a0 4c 24 03 c0       	mov    al,ds:0xc003244c
c001967b:	83 e0 fe             	and    eax,0xfffffffe
c001967e:	88 c2                	mov    dl,al
c0019680:	88 c8                	mov    al,cl
c0019682:	09 d0                	or     eax,edx
c0019684:	a2 4c 24 03 c0       	mov    ds:0xc003244c,al
c0019689:	a0 4c 24 03 c0       	mov    al,ds:0xc003244c
c001968e:	83 e0 01             	and    eax,0x1
c0019691:	0f b6 c0             	movzx  eax,al
c0019694:	85 c0                	test   eax,eax
c0019696:	74 1c                	je     c00196b4 <HalDetectFeatures()+0x1b2>
c0019698:	a0 4c 24 03 c0       	mov    al,ds:0xc003244c
c001969d:	83 e0 08             	and    eax,0x8
c00196a0:	0f b6 c0             	movzx  eax,al
c00196a3:	85 c0                	test   eax,eax
c00196a5:	75 0d                	jne    c00196b4 <HalDetectFeatures()+0x1b2>
c00196a7:	a0 4c 24 03 c0       	mov    al,ds:0xc003244c
c00196ac:	83 e0 fe             	and    eax,0xfffffffe
c00196af:	a2 4c 24 03 c0       	mov    ds:0xc003244c,al
c00196b4:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c00196bc:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c00196c4:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c00196cc:	85 c0                	test   eax,eax
c00196ce:	0f 84 ab 00 00 00    	je     c001977f <HalDetectFeatures()+0x27d>
c00196d4:	83 ec 0c             	sub    esp,0xc
c00196d7:	6a 01                	push   0x1
c00196d9:	e8 9a fd ff ff       	call   c0019478 <cpuidCheckECX(unsigned int)>
c00196de:	83 c4 10             	add    esp,0x10
c00196e1:	83 e0 01             	and    eax,0x1
c00196e4:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00196e7:	a0 4d 24 03 c0       	mov    al,ds:0xc003244d
c00196ec:	83 e0 fd             	and    eax,0xfffffffd
c00196ef:	88 c2                	mov    dl,al
c00196f1:	88 c8                	mov    al,cl
c00196f3:	09 d0                	or     eax,edx
c00196f5:	a2 4d 24 03 c0       	mov    ds:0xc003244d,al
c00196fa:	83 ec 0c             	sub    esp,0xc
c00196fd:	68 00 02 00 00       	push   0x200
c0019702:	e8 71 fd ff ff       	call   c0019478 <cpuidCheckECX(unsigned int)>
c0019707:	83 c4 10             	add    esp,0x10
c001970a:	83 e0 01             	and    eax,0x1
c001970d:	89 c1                	mov    ecx,eax
c001970f:	c1 e1 04             	shl    ecx,0x4
c0019712:	a0 4d 24 03 c0       	mov    al,ds:0xc003244d
c0019717:	83 e0 ef             	and    eax,0xffffffef
c001971a:	88 c2                	mov    dl,al
c001971c:	88 c8                	mov    al,cl
c001971e:	09 d0                	or     eax,edx
c0019720:	a2 4d 24 03 c0       	mov    ds:0xc003244d,al
c0019725:	83 ec 0c             	sub    esp,0xc
c0019728:	68 00 00 08 00       	push   0x80000
c001972d:	e8 46 fd ff ff       	call   c0019478 <cpuidCheckECX(unsigned int)>
c0019732:	83 c4 10             	add    esp,0x10
c0019735:	83 e0 01             	and    eax,0x1
c0019738:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c001973f:	a0 4d 24 03 c0       	mov    al,ds:0xc003244d
c0019744:	83 e0 fb             	and    eax,0xfffffffb
c0019747:	88 c2                	mov    dl,al
c0019749:	88 c8                	mov    al,cl
c001974b:	09 d0                	or     eax,edx
c001974d:	a2 4d 24 03 c0       	mov    ds:0xc003244d,al
c0019752:	83 ec 0c             	sub    esp,0xc
c0019755:	68 00 00 10 00       	push   0x100000
c001975a:	e8 19 fd ff ff       	call   c0019478 <cpuidCheckECX(unsigned int)>
c001975f:	83 c4 10             	add    esp,0x10
c0019762:	83 e0 01             	and    eax,0x1
c0019765:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001976c:	a0 4d 24 03 c0       	mov    al,ds:0xc003244d
c0019771:	83 e0 f7             	and    eax,0xfffffff7
c0019774:	88 c2                	mov    dl,al
c0019776:	88 c8                	mov    al,cl
c0019778:	09 d0                	or     eax,edx
c001977a:	a2 4d 24 03 c0       	mov    ds:0xc003244d,al
c001977f:	83 ec 0c             	sub    esp,0xc
c0019782:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019786:	50                   	push   eax
c0019787:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001978b:	50                   	push   eax
c001978c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0019790:	50                   	push   eax
c0019791:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019795:	50                   	push   eax
c0019796:	68 00 00 00 80       	push   0x80000000
c001979b:	e8 0d fc ff ff       	call   c00193ad <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00197a0:	83 c4 20             	add    esp,0x20
c00197a3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00197a7:	3d 00 00 00 80       	cmp    eax,0x80000000
c00197ac:	76 4b                	jbe    c00197f9 <HalDetectFeatures()+0x2f7>
c00197ae:	83 ec 0c             	sub    esp,0xc
c00197b1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00197b5:	50                   	push   eax
c00197b6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00197ba:	50                   	push   eax
c00197bb:	8d 44 24 34          	lea    eax,[esp+0x34]
c00197bf:	50                   	push   eax
c00197c0:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00197c4:	50                   	push   eax
c00197c5:	68 01 00 00 80       	push   0x80000001
c00197ca:	e8 de fb ff ff       	call   c00193ad <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00197cf:	83 c4 20             	add    esp,0x20
c00197d2:	a0 4c 24 03 c0       	mov    al,ds:0xc003244c
c00197d7:	83 e0 bf             	and    eax,0xffffffbf
c00197da:	a2 4c 24 03 c0       	mov    ds:0xc003244c,al
c00197df:	a0 4e 24 03 c0       	mov    al,ds:0xc003244e
c00197e4:	83 e0 fd             	and    eax,0xfffffffd
c00197e7:	a2 4e 24 03 c0       	mov    ds:0xc003244e,al
c00197ec:	a0 4e 24 03 c0       	mov    al,ds:0xc003244e
c00197f1:	83 e0 fe             	and    eax,0xfffffffe
c00197f4:	a2 4e 24 03 c0       	mov    ds:0xc003244e,al
c00197f9:	83 ec 0c             	sub    esp,0xc
c00197fc:	68 00 04 00 00       	push   0x400
c0019801:	e8 62 3e ff ff       	call   c000d668 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019806:	83 c4 10             	add    esp,0x10
c0019809:	0f b6 c0             	movzx  eax,al
c001980c:	85 c0                	test   eax,eax
c001980e:	74 0d                	je     c001981d <HalDetectFeatures()+0x31b>
c0019810:	a0 4c 24 03 c0       	mov    al,ds:0xc003244c
c0019815:	83 e0 fb             	and    eax,0xfffffffb
c0019818:	a2 4c 24 03 c0       	mov    ds:0xc003244c,al
c001981d:	c6 05 48 24 03 c0 01 	mov    BYTE PTR ds:0xc0032448,0x1
c0019824:	83 ec 04             	sub    esp,0x4
c0019827:	6a 0d                	push   0xd
c0019829:	6a 00                	push   0x0
c001982b:	68 30 24 03 c0       	push   0xc0032430
c0019830:	e8 bb 6c fe ff       	call   c00004f0 <memset>
c0019835:	83 c4 10             	add    esp,0x10
c0019838:	a0 4c 24 03 c0       	mov    al,ds:0xc003244c
c001983d:	83 e0 02             	and    eax,0x2
c0019840:	0f b6 c0             	movzx  eax,al
c0019843:	85 c0                	test   eax,eax
c0019845:	0f 84 16 08 00 00    	je     c001a061 <HalDetectFeatures()+0xb5f>
c001984b:	83 ec 0c             	sub    esp,0xc
c001984e:	6a 10                	push   0x10
c0019850:	e8 f6 fb ff ff       	call   c001944b <cpuidCheckEDX(unsigned int)>
c0019855:	83 c4 10             	add    esp,0x10
c0019858:	83 e0 01             	and    eax,0x1
c001985b:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019862:	a0 4e 24 03 c0       	mov    al,ds:0xc003244e
c0019867:	83 e0 f7             	and    eax,0xfffffff7
c001986a:	88 c2                	mov    dl,al
c001986c:	88 c8                	mov    al,cl
c001986e:	09 d0                	or     eax,edx
c0019870:	a2 4e 24 03 c0       	mov    ds:0xc003244e,al
c0019875:	83 ec 0c             	sub    esp,0xc
c0019878:	6a 40                	push   0x40
c001987a:	e8 cc fb ff ff       	call   c001944b <cpuidCheckEDX(unsigned int)>
c001987f:	83 c4 10             	add    esp,0x10
c0019882:	83 e0 01             	and    eax,0x1
c0019885:	89 c1                	mov    ecx,eax
c0019887:	c1 e1 04             	shl    ecx,0x4
c001988a:	a0 4e 24 03 c0       	mov    al,ds:0xc003244e
c001988f:	83 e0 ef             	and    eax,0xffffffef
c0019892:	88 c2                	mov    dl,al
c0019894:	88 c8                	mov    al,cl
c0019896:	09 d0                	or     eax,edx
c0019898:	a2 4e 24 03 c0       	mov    ds:0xc003244e,al
c001989d:	83 ec 0c             	sub    esp,0xc
c00198a0:	6a 08                	push   0x8
c00198a2:	e8 a4 fb ff ff       	call   c001944b <cpuidCheckEDX(unsigned int)>
c00198a7:	83 c4 10             	add    esp,0x10
c00198aa:	83 e0 01             	and    eax,0x1
c00198ad:	89 c1                	mov    ecx,eax
c00198af:	c1 e1 05             	shl    ecx,0x5
c00198b2:	a0 4e 24 03 c0       	mov    al,ds:0xc003244e
c00198b7:	83 e0 df             	and    eax,0xffffffdf
c00198ba:	88 c2                	mov    dl,al
c00198bc:	88 c8                	mov    al,cl
c00198be:	09 d0                	or     eax,edx
c00198c0:	a2 4e 24 03 c0       	mov    ds:0xc003244e,al
c00198c5:	83 ec 0c             	sub    esp,0xc
c00198c8:	68 00 20 00 00       	push   0x2000
c00198cd:	e8 79 fb ff ff       	call   c001944b <cpuidCheckEDX(unsigned int)>
c00198d2:	83 c4 10             	add    esp,0x10
c00198d5:	83 e0 01             	and    eax,0x1
c00198d8:	89 c1                	mov    ecx,eax
c00198da:	c1 e1 06             	shl    ecx,0x6
c00198dd:	a0 4e 24 03 c0       	mov    al,ds:0xc003244e
c00198e2:	83 e0 bf             	and    eax,0xffffffbf
c00198e5:	88 c2                	mov    dl,al
c00198e7:	88 c8                	mov    al,cl
c00198e9:	09 d0                	or     eax,edx
c00198eb:	a2 4e 24 03 c0       	mov    ds:0xc003244e,al
c00198f0:	83 ec 0c             	sub    esp,0xc
c00198f3:	68 00 00 01 00       	push   0x10000
c00198f8:	e8 4e fb ff ff       	call   c001944b <cpuidCheckEDX(unsigned int)>
c00198fd:	83 c4 10             	add    esp,0x10
c0019900:	89 c1                	mov    ecx,eax
c0019902:	c1 e1 07             	shl    ecx,0x7
c0019905:	a0 4e 24 03 c0       	mov    al,ds:0xc003244e
c001990a:	83 e0 7f             	and    eax,0x7f
c001990d:	88 c2                	mov    dl,al
c001990f:	88 c8                	mov    al,cl
c0019911:	09 d0                	or     eax,edx
c0019913:	a2 4e 24 03 c0       	mov    ds:0xc003244e,al
c0019918:	83 ec 0c             	sub    esp,0xc
c001991b:	6a 01                	push   0x1
c001991d:	e8 29 fb ff ff       	call   c001944b <cpuidCheckEDX(unsigned int)>
c0019922:	83 c4 10             	add    esp,0x10
c0019925:	83 e0 01             	and    eax,0x1
c0019928:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001992f:	a0 50 24 03 c0       	mov    al,ds:0xc0032450
c0019934:	83 e0 f7             	and    eax,0xfffffff7
c0019937:	88 c2                	mov    dl,al
c0019939:	88 c8                	mov    al,cl
c001993b:	09 d0                	or     eax,edx
c001993d:	a2 50 24 03 c0       	mov    ds:0xc0032450,al
c0019942:	83 ec 0c             	sub    esp,0xc
c0019945:	68 00 08 00 00       	push   0x800
c001994a:	e8 fc fa ff ff       	call   c001944b <cpuidCheckEDX(unsigned int)>
c001994f:	83 c4 10             	add    esp,0x10
c0019952:	89 c1                	mov    ecx,eax
c0019954:	83 e1 01             	and    ecx,0x1
c0019957:	a0 50 24 03 c0       	mov    al,ds:0xc0032450
c001995c:	83 e0 fe             	and    eax,0xfffffffe
c001995f:	88 c2                	mov    dl,al
c0019961:	88 c8                	mov    al,cl
c0019963:	09 d0                	or     eax,edx
c0019965:	a2 50 24 03 c0       	mov    ds:0xc0032450,al
c001996a:	a0 4e 24 03 c0       	mov    al,ds:0xc003244e
c001996f:	83 e0 40             	and    eax,0x40
c0019972:	0f b6 c0             	movzx  eax,al
c0019975:	85 c0                	test   eax,eax
c0019977:	74 0a                	je     c0019983 <HalDetectFeatures()+0x481>
c0019979:	c7 05 28 24 03 c0 00 01 00 00 	mov    DWORD PTR ds:0xc0032428,0x100
c0019983:	a0 4e 24 03 c0       	mov    al,ds:0xc003244e
c0019988:	83 e0 80             	and    eax,0xffffff80
c001998b:	0f b6 c0             	movzx  eax,al
c001998e:	85 c0                	test   eax,eax
c0019990:	74 0a                	je     c001999c <HalDetectFeatures()+0x49a>
c0019992:	c7 05 24 24 03 c0 80 00 00 00 	mov    DWORD PTR ds:0xc0032424,0x80
c001999c:	83 ec 0c             	sub    esp,0xc
c001999f:	8d 44 24 14          	lea    eax,[esp+0x14]
c00199a3:	50                   	push   eax
c00199a4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00199a8:	50                   	push   eax
c00199a9:	8d 44 24 24          	lea    eax,[esp+0x24]
c00199ad:	50                   	push   eax
c00199ae:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00199b2:	50                   	push   eax
c00199b3:	6a 00                	push   0x0
c00199b5:	e8 f3 f9 ff ff       	call   c00193ad <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00199ba:	83 c4 20             	add    esp,0x20
c00199bd:	c7 44 24 48 30 24 03 c0 	mov    DWORD PTR [esp+0x48],0xc0032430
c00199c5:	8d 44 24 10          	lea    eax,[esp+0x10]
c00199c9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00199cd:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c00199d5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00199d9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00199dd:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00199e1:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00199e5:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00199e9:	89 c6                	mov    esi,eax
c00199eb:	89 d7                	mov    edi,edx
c00199ed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00199ef:	89 c8                	mov    eax,ecx
c00199f1:	89 fa                	mov    edx,edi
c00199f3:	89 f3                	mov    ebx,esi
c00199f5:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00199f9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00199fd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0019a01:	b8 34 24 03 c0       	mov    eax,0xc0032434
c0019a06:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0019a0a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019a0e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0019a12:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c0019a1a:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0019a1e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0019a22:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0019a26:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0019a2a:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c0019a2e:	89 c6                	mov    esi,eax
c0019a30:	89 d7                	mov    edi,edx
c0019a32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019a34:	89 c8                	mov    eax,ecx
c0019a36:	89 fa                	mov    edx,edi
c0019a38:	89 f3                	mov    ebx,esi
c0019a3a:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c0019a3e:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c0019a42:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019a46:	b8 38 24 03 c0       	mov    eax,0xc0032438
c0019a4b:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0019a52:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019a56:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c0019a5a:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c0019a62:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0019a69:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0019a6d:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0019a71:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0019a78:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0019a7c:	89 c6                	mov    esi,eax
c0019a7e:	89 d7                	mov    edi,edx
c0019a80:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019a82:	89 c8                	mov    eax,ecx
c0019a84:	89 fa                	mov    edx,edi
c0019a86:	89 f3                	mov    ebx,esi
c0019a88:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c0019a8c:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c0019a90:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0019a94:	83 ec 08             	sub    esp,0x8
c0019a97:	68 ed 9f 02 c0       	push   0xc0029fed
c0019a9c:	68 30 24 03 c0       	push   0xc0032430
c0019aa1:	e8 da 6c fe ff       	call   c0000780 <strcmp>
c0019aa6:	83 c4 10             	add    esp,0x10
c0019aa9:	85 c0                	test   eax,eax
c0019aab:	74 19                	je     c0019ac6 <HalDetectFeatures()+0x5c4>
c0019aad:	83 ec 08             	sub    esp,0x8
c0019ab0:	68 fa 9f 02 c0       	push   0xc0029ffa
c0019ab5:	68 30 24 03 c0       	push   0xc0032430
c0019aba:	e8 c1 6c fe ff       	call   c0000780 <strcmp>
c0019abf:	83 c4 10             	add    esp,0x10
c0019ac2:	85 c0                	test   eax,eax
c0019ac4:	75 04                	jne    c0019aca <HalDetectFeatures()+0x5c8>
c0019ac6:	b0 01                	mov    al,0x1
c0019ac8:	eb 02                	jmp    c0019acc <HalDetectFeatures()+0x5ca>
c0019aca:	b0 00                	mov    al,0x0
c0019acc:	0f b6 c0             	movzx  eax,al
c0019acf:	85 c0                	test   eax,eax
c0019ad1:	74 0f                	je     c0019ae2 <HalDetectFeatures()+0x5e0>
c0019ad3:	c7 05 44 24 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0032444,0x2
c0019add:	e9 0d 03 00 00       	jmp    c0019def <HalDetectFeatures()+0x8ed>
c0019ae2:	83 ec 08             	sub    esp,0x8
c0019ae5:	68 07 a0 02 c0       	push   0xc002a007
c0019aea:	68 30 24 03 c0       	push   0xc0032430
c0019aef:	e8 8c 6c fe ff       	call   c0000780 <strcmp>
c0019af4:	83 c4 10             	add    esp,0x10
c0019af7:	85 c0                	test   eax,eax
c0019af9:	74 19                	je     c0019b14 <HalDetectFeatures()+0x612>
c0019afb:	83 ec 08             	sub    esp,0x8
c0019afe:	68 14 a0 02 c0       	push   0xc002a014
c0019b03:	68 30 24 03 c0       	push   0xc0032430
c0019b08:	e8 73 6c fe ff       	call   c0000780 <strcmp>
c0019b0d:	83 c4 10             	add    esp,0x10
c0019b10:	85 c0                	test   eax,eax
c0019b12:	75 04                	jne    c0019b18 <HalDetectFeatures()+0x616>
c0019b14:	b0 01                	mov    al,0x1
c0019b16:	eb 02                	jmp    c0019b1a <HalDetectFeatures()+0x618>
c0019b18:	b0 00                	mov    al,0x0
c0019b1a:	0f b6 c0             	movzx  eax,al
c0019b1d:	85 c0                	test   eax,eax
c0019b1f:	74 0f                	je     c0019b30 <HalDetectFeatures()+0x62e>
c0019b21:	c7 05 44 24 03 c0 04 00 00 00 	mov    DWORD PTR ds:0xc0032444,0x4
c0019b2b:	e9 bf 02 00 00       	jmp    c0019def <HalDetectFeatures()+0x8ed>
c0019b30:	83 ec 08             	sub    esp,0x8
c0019b33:	68 21 a0 02 c0       	push   0xc002a021
c0019b38:	68 30 24 03 c0       	push   0xc0032430
c0019b3d:	e8 3e 6c fe ff       	call   c0000780 <strcmp>
c0019b42:	83 c4 10             	add    esp,0x10
c0019b45:	85 c0                	test   eax,eax
c0019b47:	74 19                	je     c0019b62 <HalDetectFeatures()+0x660>
c0019b49:	83 ec 08             	sub    esp,0x8
c0019b4c:	68 2e a0 02 c0       	push   0xc002a02e
c0019b51:	68 30 24 03 c0       	push   0xc0032430
c0019b56:	e8 25 6c fe ff       	call   c0000780 <strcmp>
c0019b5b:	83 c4 10             	add    esp,0x10
c0019b5e:	85 c0                	test   eax,eax
c0019b60:	75 04                	jne    c0019b66 <HalDetectFeatures()+0x664>
c0019b62:	b0 01                	mov    al,0x1
c0019b64:	eb 02                	jmp    c0019b68 <HalDetectFeatures()+0x666>
c0019b66:	b0 00                	mov    al,0x0
c0019b68:	0f b6 c0             	movzx  eax,al
c0019b6b:	85 c0                	test   eax,eax
c0019b6d:	74 0f                	je     c0019b7e <HalDetectFeatures()+0x67c>
c0019b6f:	c7 05 44 24 03 c0 05 00 00 00 	mov    DWORD PTR ds:0xc0032444,0x5
c0019b79:	e9 71 02 00 00       	jmp    c0019def <HalDetectFeatures()+0x8ed>
c0019b7e:	83 ec 08             	sub    esp,0x8
c0019b81:	68 3b a0 02 c0       	push   0xc002a03b
c0019b86:	68 30 24 03 c0       	push   0xc0032430
c0019b8b:	e8 f0 6b fe ff       	call   c0000780 <strcmp>
c0019b90:	83 c4 10             	add    esp,0x10
c0019b93:	85 c0                	test   eax,eax
c0019b95:	0f 94 c0             	sete   al
c0019b98:	0f b6 c0             	movzx  eax,al
c0019b9b:	85 c0                	test   eax,eax
c0019b9d:	74 0f                	je     c0019bae <HalDetectFeatures()+0x6ac>
c0019b9f:	c7 05 44 24 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032444,0x1
c0019ba9:	e9 41 02 00 00       	jmp    c0019def <HalDetectFeatures()+0x8ed>
c0019bae:	83 ec 08             	sub    esp,0x8
c0019bb1:	68 48 a0 02 c0       	push   0xc002a048
c0019bb6:	68 30 24 03 c0       	push   0xc0032430
c0019bbb:	e8 c0 6b fe ff       	call   c0000780 <strcmp>
c0019bc0:	83 c4 10             	add    esp,0x10
c0019bc3:	85 c0                	test   eax,eax
c0019bc5:	0f 94 c0             	sete   al
c0019bc8:	0f b6 c0             	movzx  eax,al
c0019bcb:	85 c0                	test   eax,eax
c0019bcd:	74 0f                	je     c0019bde <HalDetectFeatures()+0x6dc>
c0019bcf:	c7 05 44 24 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0032444,0x3
c0019bd9:	e9 11 02 00 00       	jmp    c0019def <HalDetectFeatures()+0x8ed>
c0019bde:	83 ec 08             	sub    esp,0x8
c0019be1:	68 07 a0 02 c0       	push   0xc002a007
c0019be6:	68 30 24 03 c0       	push   0xc0032430
c0019beb:	e8 90 6b fe ff       	call   c0000780 <strcmp>
c0019bf0:	83 c4 10             	add    esp,0x10
c0019bf3:	85 c0                	test   eax,eax
c0019bf5:	0f 94 c0             	sete   al
c0019bf8:	0f b6 c0             	movzx  eax,al
c0019bfb:	85 c0                	test   eax,eax
c0019bfd:	74 0f                	je     c0019c0e <HalDetectFeatures()+0x70c>
c0019bff:	c7 05 44 24 03 c0 06 00 00 00 	mov    DWORD PTR ds:0xc0032444,0x6
c0019c09:	e9 e1 01 00 00       	jmp    c0019def <HalDetectFeatures()+0x8ed>
c0019c0e:	83 ec 08             	sub    esp,0x8
c0019c11:	68 55 a0 02 c0       	push   0xc002a055
c0019c16:	68 30 24 03 c0       	push   0xc0032430
c0019c1b:	e8 60 6b fe ff       	call   c0000780 <strcmp>
c0019c20:	83 c4 10             	add    esp,0x10
c0019c23:	85 c0                	test   eax,eax
c0019c25:	0f 94 c0             	sete   al
c0019c28:	0f b6 c0             	movzx  eax,al
c0019c2b:	85 c0                	test   eax,eax
c0019c2d:	74 0f                	je     c0019c3e <HalDetectFeatures()+0x73c>
c0019c2f:	c7 05 44 24 03 c0 07 00 00 00 	mov    DWORD PTR ds:0xc0032444,0x7
c0019c39:	e9 b1 01 00 00       	jmp    c0019def <HalDetectFeatures()+0x8ed>
c0019c3e:	83 ec 08             	sub    esp,0x8
c0019c41:	68 62 a0 02 c0       	push   0xc002a062
c0019c46:	68 30 24 03 c0       	push   0xc0032430
c0019c4b:	e8 30 6b fe ff       	call   c0000780 <strcmp>
c0019c50:	83 c4 10             	add    esp,0x10
c0019c53:	85 c0                	test   eax,eax
c0019c55:	0f 94 c0             	sete   al
c0019c58:	0f b6 c0             	movzx  eax,al
c0019c5b:	85 c0                	test   eax,eax
c0019c5d:	74 0f                	je     c0019c6e <HalDetectFeatures()+0x76c>
c0019c5f:	c7 05 44 24 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0032444,0x8
c0019c69:	e9 81 01 00 00       	jmp    c0019def <HalDetectFeatures()+0x8ed>
c0019c6e:	83 ec 08             	sub    esp,0x8
c0019c71:	68 6f a0 02 c0       	push   0xc002a06f
c0019c76:	68 30 24 03 c0       	push   0xc0032430
c0019c7b:	e8 00 6b fe ff       	call   c0000780 <strcmp>
c0019c80:	83 c4 10             	add    esp,0x10
c0019c83:	85 c0                	test   eax,eax
c0019c85:	0f 94 c0             	sete   al
c0019c88:	0f b6 c0             	movzx  eax,al
c0019c8b:	85 c0                	test   eax,eax
c0019c8d:	74 0f                	je     c0019c9e <HalDetectFeatures()+0x79c>
c0019c8f:	c7 05 44 24 03 c0 09 00 00 00 	mov    DWORD PTR ds:0xc0032444,0x9
c0019c99:	e9 51 01 00 00       	jmp    c0019def <HalDetectFeatures()+0x8ed>
c0019c9e:	83 ec 08             	sub    esp,0x8
c0019ca1:	68 7c a0 02 c0       	push   0xc002a07c
c0019ca6:	68 30 24 03 c0       	push   0xc0032430
c0019cab:	e8 d0 6a fe ff       	call   c0000780 <strcmp>
c0019cb0:	83 c4 10             	add    esp,0x10
c0019cb3:	85 c0                	test   eax,eax
c0019cb5:	0f 94 c0             	sete   al
c0019cb8:	0f b6 c0             	movzx  eax,al
c0019cbb:	85 c0                	test   eax,eax
c0019cbd:	74 0f                	je     c0019cce <HalDetectFeatures()+0x7cc>
c0019cbf:	c7 05 44 24 03 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0032444,0xa
c0019cc9:	e9 21 01 00 00       	jmp    c0019def <HalDetectFeatures()+0x8ed>
c0019cce:	83 ec 08             	sub    esp,0x8
c0019cd1:	68 89 a0 02 c0       	push   0xc002a089
c0019cd6:	68 30 24 03 c0       	push   0xc0032430
c0019cdb:	e8 a0 6a fe ff       	call   c0000780 <strcmp>
c0019ce0:	83 c4 10             	add    esp,0x10
c0019ce3:	85 c0                	test   eax,eax
c0019ce5:	0f 94 c0             	sete   al
c0019ce8:	0f b6 c0             	movzx  eax,al
c0019ceb:	85 c0                	test   eax,eax
c0019ced:	74 0f                	je     c0019cfe <HalDetectFeatures()+0x7fc>
c0019cef:	c7 05 44 24 03 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc0032444,0xb
c0019cf9:	e9 f1 00 00 00       	jmp    c0019def <HalDetectFeatures()+0x8ed>
c0019cfe:	83 ec 08             	sub    esp,0x8
c0019d01:	68 96 a0 02 c0       	push   0xc002a096
c0019d06:	68 30 24 03 c0       	push   0xc0032430
c0019d0b:	e8 70 6a fe ff       	call   c0000780 <strcmp>
c0019d10:	83 c4 10             	add    esp,0x10
c0019d13:	85 c0                	test   eax,eax
c0019d15:	0f 94 c0             	sete   al
c0019d18:	0f b6 c0             	movzx  eax,al
c0019d1b:	85 c0                	test   eax,eax
c0019d1d:	74 0f                	je     c0019d2e <HalDetectFeatures()+0x82c>
c0019d1f:	c7 05 44 24 03 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc0032444,0xc
c0019d29:	e9 c1 00 00 00       	jmp    c0019def <HalDetectFeatures()+0x8ed>
c0019d2e:	83 ec 08             	sub    esp,0x8
c0019d31:	68 a3 a0 02 c0       	push   0xc002a0a3
c0019d36:	68 30 24 03 c0       	push   0xc0032430
c0019d3b:	e8 40 6a fe ff       	call   c0000780 <strcmp>
c0019d40:	83 c4 10             	add    esp,0x10
c0019d43:	85 c0                	test   eax,eax
c0019d45:	0f 94 c0             	sete   al
c0019d48:	0f b6 c0             	movzx  eax,al
c0019d4b:	85 c0                	test   eax,eax
c0019d4d:	74 0f                	je     c0019d5e <HalDetectFeatures()+0x85c>
c0019d4f:	c7 05 44 24 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0032444,0xd
c0019d59:	e9 91 00 00 00       	jmp    c0019def <HalDetectFeatures()+0x8ed>
c0019d5e:	83 ec 08             	sub    esp,0x8
c0019d61:	68 b0 a0 02 c0       	push   0xc002a0b0
c0019d66:	68 30 24 03 c0       	push   0xc0032430
c0019d6b:	e8 10 6a fe ff       	call   c0000780 <strcmp>
c0019d70:	83 c4 10             	add    esp,0x10
c0019d73:	85 c0                	test   eax,eax
c0019d75:	0f 94 c0             	sete   al
c0019d78:	0f b6 c0             	movzx  eax,al
c0019d7b:	85 c0                	test   eax,eax
c0019d7d:	74 0c                	je     c0019d8b <HalDetectFeatures()+0x889>
c0019d7f:	c7 05 44 24 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0032444,0xd
c0019d89:	eb 64                	jmp    c0019def <HalDetectFeatures()+0x8ed>
c0019d8b:	83 ec 08             	sub    esp,0x8
c0019d8e:	68 bd a0 02 c0       	push   0xc002a0bd
c0019d93:	68 30 24 03 c0       	push   0xc0032430
c0019d98:	e8 e3 69 fe ff       	call   c0000780 <strcmp>
c0019d9d:	83 c4 10             	add    esp,0x10
c0019da0:	85 c0                	test   eax,eax
c0019da2:	0f 94 c0             	sete   al
c0019da5:	0f b6 c0             	movzx  eax,al
c0019da8:	85 c0                	test   eax,eax
c0019daa:	74 0c                	je     c0019db8 <HalDetectFeatures()+0x8b6>
c0019dac:	c7 05 44 24 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0032444,0xd
c0019db6:	eb 37                	jmp    c0019def <HalDetectFeatures()+0x8ed>
c0019db8:	83 ec 08             	sub    esp,0x8
c0019dbb:	68 ca a0 02 c0       	push   0xc002a0ca
c0019dc0:	68 30 24 03 c0       	push   0xc0032430
c0019dc5:	e8 b6 69 fe ff       	call   c0000780 <strcmp>
c0019dca:	83 c4 10             	add    esp,0x10
c0019dcd:	85 c0                	test   eax,eax
c0019dcf:	0f 94 c0             	sete   al
c0019dd2:	0f b6 c0             	movzx  eax,al
c0019dd5:	85 c0                	test   eax,eax
c0019dd7:	74 0c                	je     c0019de5 <HalDetectFeatures()+0x8e3>
c0019dd9:	c7 05 44 24 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0032444,0xd
c0019de3:	eb 0a                	jmp    c0019def <HalDetectFeatures()+0x8ed>
c0019de5:	c7 05 44 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032444,0x0
c0019def:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019df3:	83 f8 06             	cmp    eax,0x6
c0019df6:	0f 86 cc 00 00 00    	jbe    c0019ec8 <HalDetectFeatures()+0x9c6>
c0019dfc:	83 ec 0c             	sub    esp,0xc
c0019dff:	68 80 00 00 00       	push   0x80
c0019e04:	e8 9d f6 ff ff       	call   c00194a6 <cpuidCheckExtendedEBX(unsigned int)>
c0019e09:	83 c4 10             	add    esp,0x10
c0019e0c:	89 c1                	mov    ecx,eax
c0019e0e:	83 e1 01             	and    ecx,0x1
c0019e11:	a0 4f 24 03 c0       	mov    al,ds:0xc003244f
c0019e16:	83 e0 fe             	and    eax,0xfffffffe
c0019e19:	88 c2                	mov    dl,al
c0019e1b:	88 c8                	mov    al,cl
c0019e1d:	09 d0                	or     eax,edx
c0019e1f:	a2 4f 24 03 c0       	mov    ds:0xc003244f,al
c0019e24:	83 ec 0c             	sub    esp,0xc
c0019e27:	68 00 00 10 00       	push   0x100000
c0019e2c:	e8 75 f6 ff ff       	call   c00194a6 <cpuidCheckExtendedEBX(unsigned int)>
c0019e31:	83 c4 10             	add    esp,0x10
c0019e34:	83 e0 01             	and    eax,0x1
c0019e37:	89 c1                	mov    ecx,eax
c0019e39:	c1 e1 06             	shl    ecx,0x6
c0019e3c:	a0 4f 24 03 c0       	mov    al,ds:0xc003244f
c0019e41:	83 e0 bf             	and    eax,0xffffffbf
c0019e44:	88 c2                	mov    dl,al
c0019e46:	88 c8                	mov    al,cl
c0019e48:	09 d0                	or     eax,edx
c0019e4a:	a2 4f 24 03 c0       	mov    ds:0xc003244f,al
c0019e4f:	83 ec 0c             	sub    esp,0xc
c0019e52:	68 00 00 04 00       	push   0x40000
c0019e57:	e8 4a f6 ff ff       	call   c00194a6 <cpuidCheckExtendedEBX(unsigned int)>
c0019e5c:	83 c4 10             	add    esp,0x10
c0019e5f:	83 e0 01             	and    eax,0x1
c0019e62:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019e65:	a0 4f 24 03 c0       	mov    al,ds:0xc003244f
c0019e6a:	83 e0 fd             	and    eax,0xfffffffd
c0019e6d:	88 c2                	mov    dl,al
c0019e6f:	88 c8                	mov    al,cl
c0019e71:	09 d0                	or     eax,edx
c0019e73:	a2 4f 24 03 c0       	mov    ds:0xc003244f,al
c0019e78:	83 ec 0c             	sub    esp,0xc
c0019e7b:	6a 04                	push   0x4
c0019e7d:	e8 52 f6 ff ff       	call   c00194d4 <cpuidCheckExtendedECX(unsigned int)>
c0019e82:	83 c4 10             	add    esp,0x10
c0019e85:	83 e0 01             	and    eax,0x1
c0019e88:	89 c1                	mov    ecx,eax
c0019e8a:	c1 e1 05             	shl    ecx,0x5
c0019e8d:	a0 4f 24 03 c0       	mov    al,ds:0xc003244f
c0019e92:	83 e0 df             	and    eax,0xffffffdf
c0019e95:	88 c2                	mov    dl,al
c0019e97:	88 c8                	mov    al,cl
c0019e99:	09 d0                	or     eax,edx
c0019e9b:	a2 4f 24 03 c0       	mov    ds:0xc003244f,al
c0019ea0:	83 ec 0c             	sub    esp,0xc
c0019ea3:	6a 20                	push   0x20
c0019ea5:	e8 2a f6 ff ff       	call   c00194d4 <cpuidCheckExtendedECX(unsigned int)>
c0019eaa:	83 c4 10             	add    esp,0x10
c0019ead:	83 e0 01             	and    eax,0x1
c0019eb0:	89 c1                	mov    ecx,eax
c0019eb2:	c1 e1 04             	shl    ecx,0x4
c0019eb5:	a0 50 24 03 c0       	mov    al,ds:0xc0032450
c0019eba:	83 e0 ef             	and    eax,0xffffffef
c0019ebd:	88 c2                	mov    dl,al
c0019ebf:	88 c8                	mov    al,cl
c0019ec1:	09 d0                	or     eax,edx
c0019ec3:	a2 50 24 03 c0       	mov    ds:0xc0032450,al
c0019ec8:	83 ec 0c             	sub    esp,0xc
c0019ecb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ecf:	50                   	push   eax
c0019ed0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019ed4:	50                   	push   eax
c0019ed5:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019ed9:	50                   	push   eax
c0019eda:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019ede:	50                   	push   eax
c0019edf:	6a 01                	push   0x1
c0019ee1:	e8 c7 f4 ff ff       	call   c00193ad <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019ee6:	83 c4 20             	add    esp,0x20
c0019ee9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019eed:	83 e0 0f             	and    eax,0xf
c0019ef0:	a2 40 24 03 c0       	mov    ds:0xc0032440,al
c0019ef5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019ef9:	c1 e8 04             	shr    eax,0x4
c0019efc:	83 e0 0f             	and    eax,0xf
c0019eff:	a2 3e 24 03 c0       	mov    ds:0xc003243e,al
c0019f04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019f08:	c1 e8 08             	shr    eax,0x8
c0019f0b:	83 e0 0f             	and    eax,0xf
c0019f0e:	a2 3d 24 03 c0       	mov    ds:0xc003243d,al
c0019f13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019f17:	c1 e8 0c             	shr    eax,0xc
c0019f1a:	83 e0 03             	and    eax,0x3
c0019f1d:	a2 3f 24 03 c0       	mov    ds:0xc003243f,al
c0019f22:	a0 3d 24 03 c0       	mov    al,ds:0xc003243d
c0019f27:	0f b6 c0             	movzx  eax,al
c0019f2a:	83 f8 06             	cmp    eax,0x6
c0019f2d:	74 0d                	je     c0019f3c <HalDetectFeatures()+0xa3a>
c0019f2f:	a0 3d 24 03 c0       	mov    al,ds:0xc003243d
c0019f34:	0f b6 c0             	movzx  eax,al
c0019f37:	83 f8 0f             	cmp    eax,0xf
c0019f3a:	75 18                	jne    c0019f54 <HalDetectFeatures()+0xa52>
c0019f3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019f40:	c1 e8 10             	shr    eax,0x10
c0019f43:	c1 e0 04             	shl    eax,0x4
c0019f46:	88 c2                	mov    dl,al
c0019f48:	a0 3e 24 03 c0       	mov    al,ds:0xc003243e
c0019f4d:	09 d0                	or     eax,edx
c0019f4f:	a2 3e 24 03 c0       	mov    ds:0xc003243e,al
c0019f54:	a0 3d 24 03 c0       	mov    al,ds:0xc003243d
c0019f59:	0f b6 c0             	movzx  eax,al
c0019f5c:	83 f8 0f             	cmp    eax,0xf
c0019f5f:	75 15                	jne    c0019f76 <HalDetectFeatures()+0xa74>
c0019f61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019f65:	c1 e8 14             	shr    eax,0x14
c0019f68:	88 c2                	mov    dl,al
c0019f6a:	a0 3d 24 03 c0       	mov    al,ds:0xc003243d
c0019f6f:	01 d0                	add    eax,edx
c0019f71:	a2 3d 24 03 c0       	mov    ds:0xc003243d,al
c0019f76:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c0019f7e:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c0019f86:	85 c0                	test   eax,eax
c0019f88:	74 2d                	je     c0019fb7 <HalDetectFeatures()+0xab5>
c0019f8a:	83 ec 0c             	sub    esp,0xc
c0019f8d:	68 00 00 00 40       	push   0x40000000
c0019f92:	e8 e1 f4 ff ff       	call   c0019478 <cpuidCheckECX(unsigned int)>
c0019f97:	83 c4 10             	add    esp,0x10
c0019f9a:	83 e0 01             	and    eax,0x1
c0019f9d:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0019fa4:	a0 4e 24 03 c0       	mov    al,ds:0xc003244e
c0019fa9:	83 e0 fb             	and    eax,0xfffffffb
c0019fac:	88 c2                	mov    dl,al
c0019fae:	88 c8                	mov    al,cl
c0019fb0:	09 d0                	or     eax,edx
c0019fb2:	a2 4e 24 03 c0       	mov    ds:0xc003244e,al
c0019fb7:	a0 4f 24 03 c0       	mov    al,ds:0xc003244f
c0019fbc:	83 c8 04             	or     eax,0x4
c0019fbf:	a2 4f 24 03 c0       	mov    ds:0xc003244f,al
c0019fc4:	a0 4f 24 03 c0       	mov    al,ds:0xc003244f
c0019fc9:	83 c8 08             	or     eax,0x8
c0019fcc:	a2 4f 24 03 c0       	mov    ds:0xc003244f,al
c0019fd1:	a0 4f 24 03 c0       	mov    al,ds:0xc003244f
c0019fd6:	83 c8 10             	or     eax,0x10
c0019fd9:	a2 4f 24 03 c0       	mov    ds:0xc003244f,al
c0019fde:	83 ec 0c             	sub    esp,0xc
c0019fe1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019fe5:	50                   	push   eax
c0019fe6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019fea:	50                   	push   eax
c0019feb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019fef:	50                   	push   eax
c0019ff0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019ff4:	50                   	push   eax
c0019ff5:	68 00 00 00 80       	push   0x80000000
c0019ffa:	e8 ae f3 ff ff       	call   c00193ad <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019fff:	83 c4 20             	add    esp,0x20
c001a002:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a006:	3d 00 00 00 80       	cmp    eax,0x80000000
c001a00b:	0f 86 96 01 00 00    	jbe    c001a1a7 <HalDetectFeatures()+0xca5>
c001a011:	83 ec 0c             	sub    esp,0xc
c001a014:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a018:	50                   	push   eax
c001a019:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a01d:	50                   	push   eax
c001a01e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a022:	50                   	push   eax
c001a023:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a027:	50                   	push   eax
c001a028:	68 01 00 00 80       	push   0x80000001
c001a02d:	e8 7b f3 ff ff       	call   c00193ad <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001a032:	83 c4 20             	add    esp,0x20
c001a035:	a0 4f 24 03 c0       	mov    al,ds:0xc003244f
c001a03a:	83 e0 7f             	and    eax,0x7f
c001a03d:	a2 4f 24 03 c0       	mov    ds:0xc003244f,al
c001a042:	a0 50 24 03 c0       	mov    al,ds:0xc0032450
c001a047:	83 e0 fb             	and    eax,0xfffffffb
c001a04a:	a2 50 24 03 c0       	mov    ds:0xc0032450,al
c001a04f:	a0 50 24 03 c0       	mov    al,ds:0xc0032450
c001a054:	83 e0 fd             	and    eax,0xfffffffd
c001a057:	a2 50 24 03 c0       	mov    ds:0xc0032450,al
c001a05c:	e9 46 01 00 00       	jmp    c001a1a7 <HalDetectFeatures()+0xca5>
c001a061:	83 ec 08             	sub    esp,0x8
c001a064:	68 3b a0 02 c0       	push   0xc002a03b
c001a069:	68 30 24 03 c0       	push   0xc0032430
c001a06e:	e8 dd 65 fe ff       	call   c0000650 <strcpy>
c001a073:	83 c4 10             	add    esp,0x10
c001a076:	c7 05 44 24 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032444,0x1
c001a080:	e8 3e 61 fe ff       	call   c00001c3 <is486>
c001a085:	85 c0                	test   eax,eax
c001a087:	0f 95 c0             	setne  al
c001a08a:	0f b6 c0             	movzx  eax,al
c001a08d:	85 c0                	test   eax,eax
c001a08f:	0f 84 8d 00 00 00    	je     c001a122 <HalDetectFeatures()+0xc20>
c001a095:	a0 4f 24 03 c0       	mov    al,ds:0xc003244f
c001a09a:	83 c8 04             	or     eax,0x4
c001a09d:	a2 4f 24 03 c0       	mov    ds:0xc003244f,al
c001a0a2:	a0 4f 24 03 c0       	mov    al,ds:0xc003244f
c001a0a7:	83 c8 08             	or     eax,0x8
c001a0aa:	a2 4f 24 03 c0       	mov    ds:0xc003244f,al
c001a0af:	a0 4f 24 03 c0       	mov    al,ds:0xc003244f
c001a0b4:	83 c8 10             	or     eax,0x10
c001a0b7:	a2 4f 24 03 c0       	mov    ds:0xc003244f,al
c001a0bc:	0f 20 c0             	mov    eax,cr0
c001a0bf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a0c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a0c7:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a0ce:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a0d5:	83 e0 04             	and    eax,0x4
c001a0d8:	74 1e                	je     c001a0f8 <HalDetectFeatures()+0xbf6>
c001a0da:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a0e1:	83 e0 10             	and    eax,0x10
c001a0e4:	75 12                	jne    c001a0f8 <HalDetectFeatures()+0xbf6>
c001a0e6:	a0 50 24 03 c0       	mov    al,ds:0xc0032450
c001a0eb:	83 e0 f7             	and    eax,0xfffffff7
c001a0ee:	a2 50 24 03 c0       	mov    ds:0xc0032450,al
c001a0f3:	e9 af 00 00 00       	jmp    c001a1a7 <HalDetectFeatures()+0xca5>
c001a0f8:	e8 a1 60 fe ff       	call   c000019e <hasLegacyFPU>
c001a0fd:	83 e0 01             	and    eax,0x1
c001a100:	83 e0 01             	and    eax,0x1
c001a103:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a10a:	a0 50 24 03 c0       	mov    al,ds:0xc0032450
c001a10f:	83 e0 f7             	and    eax,0xfffffff7
c001a112:	88 c2                	mov    dl,al
c001a114:	88 c8                	mov    al,cl
c001a116:	09 d0                	or     eax,edx
c001a118:	a2 50 24 03 c0       	mov    ds:0xc0032450,al
c001a11d:	e9 85 00 00 00       	jmp    c001a1a7 <HalDetectFeatures()+0xca5>
c001a122:	a0 4f 24 03 c0       	mov    al,ds:0xc003244f
c001a127:	83 e0 fb             	and    eax,0xfffffffb
c001a12a:	a2 4f 24 03 c0       	mov    ds:0xc003244f,al
c001a12f:	a0 4f 24 03 c0       	mov    al,ds:0xc003244f
c001a134:	83 e0 f7             	and    eax,0xfffffff7
c001a137:	a2 4f 24 03 c0       	mov    ds:0xc003244f,al
c001a13c:	a0 4f 24 03 c0       	mov    al,ds:0xc003244f
c001a141:	83 e0 ef             	and    eax,0xffffffef
c001a144:	a2 4f 24 03 c0       	mov    ds:0xc003244f,al
c001a149:	0f 20 c0             	mov    eax,cr0
c001a14c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a150:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a154:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c001a15b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a162:	83 e0 04             	and    eax,0x4
c001a165:	74 1b                	je     c001a182 <HalDetectFeatures()+0xc80>
c001a167:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a16e:	83 e0 10             	and    eax,0x10
c001a171:	75 0f                	jne    c001a182 <HalDetectFeatures()+0xc80>
c001a173:	a0 50 24 03 c0       	mov    al,ds:0xc0032450
c001a178:	83 e0 f7             	and    eax,0xfffffff7
c001a17b:	a2 50 24 03 c0       	mov    ds:0xc0032450,al
c001a180:	eb 25                	jmp    c001a1a7 <HalDetectFeatures()+0xca5>
c001a182:	e8 17 60 fe ff       	call   c000019e <hasLegacyFPU>
c001a187:	83 e0 01             	and    eax,0x1
c001a18a:	83 e0 01             	and    eax,0x1
c001a18d:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a194:	a0 50 24 03 c0       	mov    al,ds:0xc0032450
c001a199:	83 e0 f7             	and    eax,0xfffffff7
c001a19c:	88 c2                	mov    dl,al
c001a19e:	88 c8                	mov    al,cl
c001a1a0:	09 d0                	or     eax,edx
c001a1a2:	a2 50 24 03 c0       	mov    ds:0xc0032450,al
c001a1a7:	a0 50 24 03 c0       	mov    al,ds:0xc0032450
c001a1ac:	83 e0 08             	and    eax,0x8
c001a1af:	0f b6 c0             	movzx  eax,al
c001a1b2:	85 c0                	test   eax,eax
c001a1b4:	75 25                	jne    c001a1db <HalDetectFeatures()+0xcd9>
c001a1b6:	e8 e3 5f fe ff       	call   c000019e <hasLegacyFPU>
c001a1bb:	83 e0 01             	and    eax,0x1
c001a1be:	83 e0 01             	and    eax,0x1
c001a1c1:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a1c8:	a0 50 24 03 c0       	mov    al,ds:0xc0032450
c001a1cd:	83 e0 f7             	and    eax,0xfffffff7
c001a1d0:	88 c2                	mov    dl,al
c001a1d2:	88 c8                	mov    al,cl
c001a1d4:	09 d0                	or     eax,edx
c001a1d6:	a2 50 24 03 c0       	mov    ds:0xc0032450,al
c001a1db:	a0 50 24 03 c0       	mov    al,ds:0xc0032450
c001a1e0:	83 e0 08             	and    eax,0x8
c001a1e3:	0f b6 c0             	movzx  eax,al
c001a1e6:	85 c0                	test   eax,eax
c001a1e8:	74 0d                	je     c001a1f7 <HalDetectFeatures()+0xcf5>
c001a1ea:	a0 4c 24 03 c0       	mov    al,ds:0xc003244c
c001a1ef:	83 c8 10             	or     eax,0x10
c001a1f2:	a2 4c 24 03 c0       	mov    ds:0xc003244c,al
c001a1f7:	a0 4c 24 03 c0       	mov    al,ds:0xc003244c
c001a1fc:	83 e0 10             	and    eax,0x10
c001a1ff:	0f b6 c0             	movzx  eax,al
c001a202:	85 c0                	test   eax,eax
c001a204:	75 23                	jne    c001a229 <HalDetectFeatures()+0xd27>
c001a206:	e8 8b 7c 00 00       	call   c0021e96 <x87Detect>
c001a20b:	83 e0 01             	and    eax,0x1
c001a20e:	83 e0 01             	and    eax,0x1
c001a211:	89 c1                	mov    ecx,eax
c001a213:	c1 e1 04             	shl    ecx,0x4
c001a216:	a0 4c 24 03 c0       	mov    al,ds:0xc003244c
c001a21b:	83 e0 ef             	and    eax,0xffffffef
c001a21e:	88 c2                	mov    dl,al
c001a220:	88 c8                	mov    al,cl
c001a222:	09 d0                	or     eax,edx
c001a224:	a2 4c 24 03 c0       	mov    ds:0xc003244c,al
c001a229:	a0 4d 24 03 c0       	mov    al,ds:0xc003244d
c001a22e:	83 e0 01             	and    eax,0x1
c001a231:	0f b6 c0             	movzx  eax,al
c001a234:	85 c0                	test   eax,eax
c001a236:	75 2d                	jne    c001a265 <HalDetectFeatures()+0xd63>
c001a238:	a0 4d 24 03 c0       	mov    al,ds:0xc003244d
c001a23d:	83 e0 02             	and    eax,0x2
c001a240:	0f b6 c0             	movzx  eax,al
c001a243:	85 c0                	test   eax,eax
c001a245:	75 1e                	jne    c001a265 <HalDetectFeatures()+0xd63>
c001a247:	a0 4d 24 03 c0       	mov    al,ds:0xc003244d
c001a24c:	83 e0 04             	and    eax,0x4
c001a24f:	0f b6 c0             	movzx  eax,al
c001a252:	85 c0                	test   eax,eax
c001a254:	75 0f                	jne    c001a265 <HalDetectFeatures()+0xd63>
c001a256:	a0 4d 24 03 c0       	mov    al,ds:0xc003244d
c001a25b:	83 e0 08             	and    eax,0x8
c001a25e:	0f b6 c0             	movzx  eax,al
c001a261:	85 c0                	test   eax,eax
c001a263:	74 0d                	je     c001a272 <HalDetectFeatures()+0xd70>
c001a265:	a0 4c 24 03 c0       	mov    al,ds:0xc003244c
c001a26a:	83 c8 80             	or     eax,0xffffff80
c001a26d:	a2 4c 24 03 c0       	mov    ds:0xc003244c,al
c001a272:	a0 4c 24 03 c0       	mov    al,ds:0xc003244c
c001a277:	83 e0 10             	and    eax,0x10
c001a27a:	0f b6 c0             	movzx  eax,al
c001a27d:	85 c0                	test   eax,eax
c001a27f:	74 2f                	je     c001a2b0 <HalDetectFeatures()+0xdae>
c001a281:	a0 4c 24 03 c0       	mov    al,ds:0xc003244c
c001a286:	83 e0 80             	and    eax,0xffffff80
c001a289:	0f b6 c0             	movzx  eax,al
c001a28c:	85 c0                	test   eax,eax
c001a28e:	75 20                	jne    c001a2b0 <HalDetectFeatures()+0xdae>
c001a290:	e8 bb 7b 00 00       	call   c0021e50 <sseDetect>
c001a295:	83 e0 01             	and    eax,0x1
c001a298:	89 c1                	mov    ecx,eax
c001a29a:	c1 e1 07             	shl    ecx,0x7
c001a29d:	a0 4c 24 03 c0       	mov    al,ds:0xc003244c
c001a2a2:	83 e0 7f             	and    eax,0x7f
c001a2a5:	88 c2                	mov    dl,al
c001a2a7:	88 c8                	mov    al,cl
c001a2a9:	09 d0                	or     eax,edx
c001a2ab:	a2 4c 24 03 c0       	mov    ds:0xc003244c,al
c001a2b0:	a0 4c 24 03 c0       	mov    al,ds:0xc003244c
c001a2b5:	83 e0 80             	and    eax,0xffffff80
c001a2b8:	0f b6 c0             	movzx  eax,al
c001a2bb:	85 c0                	test   eax,eax
c001a2bd:	74 1c                	je     c001a2db <HalDetectFeatures()+0xdd9>
c001a2bf:	a0 4d 24 03 c0       	mov    al,ds:0xc003244d
c001a2c4:	83 e0 20             	and    eax,0x20
c001a2c7:	0f b6 c0             	movzx  eax,al
c001a2ca:	85 c0                	test   eax,eax
c001a2cc:	75 0d                	jne    c001a2db <HalDetectFeatures()+0xdd9>
c001a2ce:	a0 4d 24 03 c0       	mov    al,ds:0xc003244d
c001a2d3:	83 e0 df             	and    eax,0xffffffdf
c001a2d6:	a2 4d 24 03 c0       	mov    ds:0xc003244d,al
c001a2db:	c6 05 48 24 03 c0 00 	mov    BYTE PTR ds:0xc0032448,0x0
c001a2e2:	90                   	nop
c001a2e3:	81 c4 90 00 00 00    	add    esp,0x90
c001a2e9:	5b                   	pop    ebx
c001a2ea:	5e                   	pop    esi
c001a2eb:	5f                   	pop    edi
c001a2ec:	c3                   	ret    

c001a2ed <HalEnableNMI()>:
c001a2ed:	c6 05 2c 24 03 c0 01 	mov    BYTE PTR ds:0xc003242c,0x1
c001a2f4:	6a 10                	push   0x10
c001a2f6:	e8 00 ef ff ff       	call   c00191fb <x86ReadCMOS(unsigned char)>
c001a2fb:	83 c4 04             	add    esp,0x4
c001a2fe:	90                   	nop
c001a2ff:	c3                   	ret    

c001a300 <HalDisableNMI()>:
c001a300:	c6 05 2c 24 03 c0 00 	mov    BYTE PTR ds:0xc003242c,0x0
c001a307:	6a 10                	push   0x10
c001a309:	e8 ed ee ff ff       	call   c00191fb <x86ReadCMOS(unsigned char)>
c001a30e:	83 c4 04             	add    esp,0x4
c001a311:	90                   	nop
c001a312:	c3                   	ret    

c001a313 <HalGetNMIState()>:
c001a313:	a0 2c 24 03 c0       	mov    al,ds:0xc003242c
c001a318:	c3                   	ret    

c001a319 <HalIsAPICEnabled()>:
c001a319:	a0 4c 24 03 c0       	mov    al,ds:0xc003244c
c001a31e:	83 e0 01             	and    eax,0x1
c001a321:	0f b6 c0             	movzx  eax,al
c001a324:	85 c0                	test   eax,eax
c001a326:	0f 95 c0             	setne  al
c001a329:	c3                   	ret    

c001a32a <x86rdmsr(unsigned int)>:
c001a32a:	83 ec 1c             	sub    esp,0x1c
c001a32d:	a0 4c 24 03 c0       	mov    al,ds:0xc003244c
c001a332:	83 e0 08             	and    eax,0x8
c001a335:	0f b6 c0             	movzx  eax,al
c001a338:	85 c0                	test   eax,eax
c001a33a:	75 10                	jne    c001a34c <x86rdmsr(unsigned int)+0x22>
c001a33c:	83 ec 0c             	sub    esp,0xc
c001a33f:	68 d6 a0 02 c0       	push   0xc002a0d6
c001a344:	e8 63 5c ff ff       	call   c000ffac <KePanic(char const*)>
c001a349:	83 c4 10             	add    esp,0x10
c001a34c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a350:	89 c1                	mov    ecx,eax
c001a352:	0f 32                	rdmsr  
c001a354:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a358:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a35c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a360:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a364:	83 c4 1c             	add    esp,0x1c
c001a367:	c3                   	ret    

c001a368 <x86wrmsr(unsigned int, unsigned long long)>:
c001a368:	83 ec 1c             	sub    esp,0x1c
c001a36b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a36f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a373:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a377:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a37b:	a0 4c 24 03 c0       	mov    al,ds:0xc003244c
c001a380:	83 e0 08             	and    eax,0x8
c001a383:	0f b6 c0             	movzx  eax,al
c001a386:	85 c0                	test   eax,eax
c001a388:	75 10                	jne    c001a39a <x86wrmsr(unsigned int, unsigned long long)+0x32>
c001a38a:	83 ec 0c             	sub    esp,0xc
c001a38d:	68 dc a0 02 c0       	push   0xc002a0dc
c001a392:	e8 15 5c ff ff       	call   c000ffac <KePanic(char const*)>
c001a397:	83 c4 10             	add    esp,0x10
c001a39a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001a39e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a3a6:	0f 30                	wrmsr  
c001a3a8:	90                   	nop
c001a3a9:	83 c4 1c             	add    esp,0x1c
c001a3ac:	c3                   	ret    

c001a3ad <HalHandleGeneralProtectionFault(void*, void*)>:
c001a3ad:	83 ec 0c             	sub    esp,0xc
c001a3b0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001a3b5:	8b 00                	mov    eax,DWORD PTR [eax]
c001a3b7:	8a 40 62             	mov    al,BYTE PTR [eax+0x62]
c001a3ba:	0f b6 c0             	movzx  eax,al
c001a3bd:	85 c0                	test   eax,eax
c001a3bf:	74 11                	je     c001a3d2 <HalHandleGeneralProtectionFault(void*, void*)+0x25>
c001a3c1:	83 ec 0c             	sub    esp,0xc
c001a3c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3c8:	e8 72 db ff ff       	call   c0017f3f <Vm::faultHandler(regs*)>
c001a3cd:	83 c4 10             	add    esp,0x10
c001a3d0:	eb 02                	jmp    c001a3d4 <HalHandleGeneralProtectionFault(void*, void*)+0x27>
c001a3d2:	b0 00                	mov    al,0x0
c001a3d4:	83 c4 0c             	add    esp,0xc
c001a3d7:	c3                   	ret    

c001a3d8 <HalFindRSDP()>:
c001a3d8:	83 ec 1c             	sub    esp,0x1c
c001a3db:	a1 7c 21 03 c0       	mov    eax,ds:0xc003217c
c001a3e0:	3d ff 07 00 00       	cmp    eax,0x7ff
c001a3e5:	7e 17                	jle    c001a3fe <HalFindRSDP()+0x26>
c001a3e7:	83 ec 0c             	sub    esp,0xc
c001a3ea:	68 00 04 00 00       	push   0x400
c001a3ef:	e8 74 32 ff ff       	call   c000d668 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001a3f4:	83 c4 10             	add    esp,0x10
c001a3f7:	0f b6 c0             	movzx  eax,al
c001a3fa:	85 c0                	test   eax,eax
c001a3fc:	74 04                	je     c001a402 <HalFindRSDP()+0x2a>
c001a3fe:	b0 01                	mov    al,0x1
c001a400:	eb 02                	jmp    c001a404 <HalFindRSDP()+0x2c>
c001a402:	b0 00                	mov    al,0x0
c001a404:	0f b6 c0             	movzx  eax,al
c001a407:	85 c0                	test   eax,eax
c001a409:	74 1d                	je     c001a428 <HalFindRSDP()+0x50>
c001a40b:	a0 4c 24 03 c0       	mov    al,ds:0xc003244c
c001a410:	83 e0 fb             	and    eax,0xfffffffb
c001a413:	a2 4c 24 03 c0       	mov    ds:0xc003244c,al
c001a418:	83 ec 0c             	sub    esp,0xc
c001a41b:	68 e2 a0 02 c0       	push   0xc002a0e2
c001a420:	e8 41 cb fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a425:	83 c4 10             	add    esp,0x10
c001a428:	a0 4c 24 03 c0       	mov    al,ds:0xc003244c
c001a42d:	83 e0 04             	and    eax,0x4
c001a430:	0f b6 c0             	movzx  eax,al
c001a433:	85 c0                	test   eax,eax
c001a435:	75 17                	jne    c001a44e <HalFindRSDP()+0x76>
c001a437:	83 ec 0c             	sub    esp,0xc
c001a43a:	68 f1 a0 02 c0       	push   0xc002a0f1
c001a43f:	e8 22 cb fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a444:	83 c4 10             	add    esp,0x10
c001a447:	b8 00 00 00 00       	mov    eax,0x0
c001a44c:	eb 63                	jmp    c001a4b1 <HalFindRSDP()+0xd9>
c001a44e:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001a456:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001a45e:	77 2f                	ja     c001a48f <HalFindRSDP()+0xb7>
c001a460:	83 ec 04             	sub    esp,0x4
c001a463:	6a 08                	push   0x8
c001a465:	68 fb a0 02 c0       	push   0xc002a0fb
c001a46a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a46e:	e8 0d 5f fe ff       	call   c0000380 <memcmp>
c001a473:	83 c4 10             	add    esp,0x10
c001a476:	85 c0                	test   eax,eax
c001a478:	0f 94 c0             	sete   al
c001a47b:	0f b6 c0             	movzx  eax,al
c001a47e:	85 c0                	test   eax,eax
c001a480:	74 06                	je     c001a488 <HalFindRSDP()+0xb0>
c001a482:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a486:	eb 29                	jmp    c001a4b1 <HalFindRSDP()+0xd9>
c001a488:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001a48d:	eb c7                	jmp    c001a456 <HalFindRSDP()+0x7e>
c001a48f:	83 ec 0c             	sub    esp,0xc
c001a492:	68 04 a1 02 c0       	push   0xc002a104
c001a497:	e8 ca ca fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a49c:	83 c4 10             	add    esp,0x10
c001a49f:	a0 4c 24 03 c0       	mov    al,ds:0xc003244c
c001a4a4:	83 e0 fb             	and    eax,0xfffffffb
c001a4a7:	a2 4c 24 03 c0       	mov    ds:0xc003244c,al
c001a4ac:	b8 00 00 00 00       	mov    eax,0x0
c001a4b1:	83 c4 1c             	add    esp,0x1c
c001a4b4:	c3                   	ret    

c001a4b5 <HalHandlePageFault(void*, void*)>:
c001a4b5:	83 ec 1c             	sub    esp,0x1c
c001a4b8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001a4bd:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4bf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a4c2:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c001a4c8:	0f 20 d2             	mov    edx,cr2
c001a4cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a4cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a4d3:	83 ec 08             	sub    esp,0x8
c001a4d6:	52                   	push   edx
c001a4d7:	50                   	push   eax
c001a4d8:	e8 e5 9d ff ff       	call   c00142c2 <VAS::tryLoadBackOffDisk(unsigned long)>
c001a4dd:	83 c4 10             	add    esp,0x10
c001a4e0:	83 c4 1c             	add    esp,0x1c
c001a4e3:	c3                   	ret    

c001a4e4 <HalHandleOpcodeFault(void*, void*)>:
c001a4e4:	83 ec 1c             	sub    esp,0x1c
c001a4e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a4eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a4ef:	a0 48 24 03 c0       	mov    al,ds:0xc0032448
c001a4f4:	0f b6 c0             	movzx  eax,al
c001a4f7:	85 c0                	test   eax,eax
c001a4f9:	74 25                	je     c001a520 <HalHandleOpcodeFault(void*, void*)+0x3c>
c001a4fb:	83 ec 0c             	sub    esp,0xc
c001a4fe:	68 10 a3 02 c0       	push   0xc002a310
c001a503:	e8 5e ca fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a508:	83 c4 10             	add    esp,0x10
c001a50b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a50f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a512:	8d 50 19             	lea    edx,[eax+0x19]
c001a515:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a519:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001a51c:	b0 01                	mov    al,0x1
c001a51e:	eb 02                	jmp    c001a522 <HalHandleOpcodeFault(void*, void*)+0x3e>
c001a520:	b0 00                	mov    al,0x0
c001a522:	83 c4 1c             	add    esp,0x1c
c001a525:	c3                   	ret    

c001a526 <HalDisplayDebugInfo(void*)>:
c001a526:	83 ec 2c             	sub    esp,0x2c
c001a529:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a52d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a531:	0f 20 c0             	mov    eax,cr0
c001a534:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a538:	0f 20 d0             	mov    eax,cr2
c001a53b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a53f:	0f 20 d8             	mov    eax,cr3
c001a542:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a546:	0f 20 e0             	mov    eax,cr4
c001a549:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a54d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a551:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001a554:	83 ec 08             	sub    esp,0x8
c001a557:	50                   	push   eax
c001a558:	68 1e a1 02 c0       	push   0xc002a11e
c001a55d:	e8 04 ca fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a562:	83 c4 10             	add    esp,0x10
c001a565:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a569:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001a56c:	83 ec 08             	sub    esp,0x8
c001a56f:	50                   	push   eax
c001a570:	68 0f a1 02 c0       	push   0xc002a10f
c001a575:	e8 ec c9 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a57a:	83 c4 10             	add    esp,0x10
c001a57d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a581:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001a584:	83 ec 08             	sub    esp,0x8
c001a587:	50                   	push   eax
c001a588:	68 1a a1 02 c0       	push   0xc002a11a
c001a58d:	e8 d4 c9 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a592:	83 c4 10             	add    esp,0x10
c001a595:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a599:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a59c:	83 ec 08             	sub    esp,0x8
c001a59f:	50                   	push   eax
c001a5a0:	68 29 a1 02 c0       	push   0xc002a129
c001a5a5:	e8 bc c9 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a5aa:	83 c4 10             	add    esp,0x10
c001a5ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a5b1:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001a5b4:	83 ec 08             	sub    esp,0x8
c001a5b7:	50                   	push   eax
c001a5b8:	68 34 a1 02 c0       	push   0xc002a134
c001a5bd:	e8 a4 c9 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a5c2:	83 c4 10             	add    esp,0x10
c001a5c5:	83 ec 08             	sub    esp,0x8
c001a5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5cc:	68 3f a1 02 c0       	push   0xc002a13f
c001a5d1:	e8 90 c9 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a5d6:	83 c4 10             	add    esp,0x10
c001a5d9:	83 ec 08             	sub    esp,0x8
c001a5dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a5e0:	68 4a a1 02 c0       	push   0xc002a14a
c001a5e5:	e8 7c c9 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a5ea:	83 c4 10             	add    esp,0x10
c001a5ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a5f1:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001a5f4:	c1 e0 05             	shl    eax,0x5
c001a5f7:	8d 90 60 c5 02 c0    	lea    edx,[eax-0x3ffd3aa0]
c001a5fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a601:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001a604:	83 ec 04             	sub    esp,0x4
c001a607:	52                   	push   edx
c001a608:	50                   	push   eax
c001a609:	68 55 a1 02 c0       	push   0xc002a155
c001a60e:	e8 53 c9 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a613:	83 c4 10             	add    esp,0x10
c001a616:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c001a61b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a621:	83 ec 0c             	sub    esp,0xc
c001a624:	50                   	push   eax
c001a625:	e8 81 7f ff ff       	call   c00125ab <setActiveTerminal(VgaText*)>
c001a62a:	83 c4 10             	add    esp,0x10
c001a62d:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c001a632:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a638:	83 ec 08             	sub    esp,0x8
c001a63b:	68 64 a1 02 c0       	push   0xc002a164
c001a640:	50                   	push   eax
c001a641:	e8 a2 82 ff ff       	call   c00128e8 <VgaText::puts(char const*)>
c001a646:	83 c4 10             	add    esp,0x10
c001a649:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c001a64e:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a654:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a658:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001a65b:	83 ec 08             	sub    esp,0x8
c001a65e:	52                   	push   edx
c001a65f:	50                   	push   eax
c001a660:	e8 3d 82 ff ff       	call   c00128a2 <VgaText::putx(unsigned int)>
c001a665:	83 c4 10             	add    esp,0x10
c001a668:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c001a66d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a673:	83 ec 08             	sub    esp,0x8
c001a676:	68 72 a1 02 c0       	push   0xc002a172
c001a67b:	50                   	push   eax
c001a67c:	e8 67 82 ff ff       	call   c00128e8 <VgaText::puts(char const*)>
c001a681:	83 c4 10             	add    esp,0x10
c001a684:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c001a689:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a68f:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001a694:	8b 12                	mov    edx,DWORD PTR [edx]
c001a696:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a699:	83 c2 0c             	add    edx,0xc
c001a69c:	83 ec 08             	sub    esp,0x8
c001a69f:	52                   	push   edx
c001a6a0:	50                   	push   eax
c001a6a1:	e8 42 82 ff ff       	call   c00128e8 <VgaText::puts(char const*)>
c001a6a6:	83 c4 10             	add    esp,0x10
c001a6a9:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c001a6ae:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a6b4:	83 ec 08             	sub    esp,0x8
c001a6b7:	68 7b a1 02 c0       	push   0xc002a17b
c001a6bc:	50                   	push   eax
c001a6bd:	e8 26 82 ff ff       	call   c00128e8 <VgaText::puts(char const*)>
c001a6c2:	83 c4 10             	add    esp,0x10
c001a6c5:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c001a6ca:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a6d0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a6d4:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001a6d7:	83 ec 08             	sub    esp,0x8
c001a6da:	52                   	push   edx
c001a6db:	50                   	push   eax
c001a6dc:	e8 c1 81 ff ff       	call   c00128a2 <VgaText::putx(unsigned int)>
c001a6e1:	83 c4 10             	add    esp,0x10
c001a6e4:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c001a6e9:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a6ef:	83 ec 08             	sub    esp,0x8
c001a6f2:	68 83 a1 02 c0       	push   0xc002a183
c001a6f7:	50                   	push   eax
c001a6f8:	e8 eb 81 ff ff       	call   c00128e8 <VgaText::puts(char const*)>
c001a6fd:	83 c4 10             	add    esp,0x10
c001a700:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c001a705:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a70b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a70f:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001a712:	83 ec 08             	sub    esp,0x8
c001a715:	52                   	push   edx
c001a716:	50                   	push   eax
c001a717:	e8 86 81 ff ff       	call   c00128a2 <VgaText::putx(unsigned int)>
c001a71c:	83 c4 10             	add    esp,0x10
c001a71f:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c001a724:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a72a:	83 ec 08             	sub    esp,0x8
c001a72d:	68 8b a1 02 c0       	push   0xc002a18b
c001a732:	50                   	push   eax
c001a733:	e8 b0 81 ff ff       	call   c00128e8 <VgaText::puts(char const*)>
c001a738:	83 c4 10             	add    esp,0x10
c001a73b:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c001a740:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a746:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a74a:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001a74d:	83 ec 08             	sub    esp,0x8
c001a750:	52                   	push   edx
c001a751:	50                   	push   eax
c001a752:	e8 4b 81 ff ff       	call   c00128a2 <VgaText::putx(unsigned int)>
c001a757:	83 c4 10             	add    esp,0x10
c001a75a:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c001a75f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a765:	83 ec 08             	sub    esp,0x8
c001a768:	68 93 a1 02 c0       	push   0xc002a193
c001a76d:	50                   	push   eax
c001a76e:	e8 75 81 ff ff       	call   c00128e8 <VgaText::puts(char const*)>
c001a773:	83 c4 10             	add    esp,0x10
c001a776:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c001a77b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a781:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a785:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001a788:	83 ec 08             	sub    esp,0x8
c001a78b:	52                   	push   edx
c001a78c:	50                   	push   eax
c001a78d:	e8 10 81 ff ff       	call   c00128a2 <VgaText::putx(unsigned int)>
c001a792:	83 c4 10             	add    esp,0x10
c001a795:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c001a79a:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a7a0:	83 ec 08             	sub    esp,0x8
c001a7a3:	68 9b a1 02 c0       	push   0xc002a19b
c001a7a8:	50                   	push   eax
c001a7a9:	e8 3a 81 ff ff       	call   c00128e8 <VgaText::puts(char const*)>
c001a7ae:	83 c4 10             	add    esp,0x10
c001a7b1:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c001a7b6:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a7bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a7c0:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001a7c3:	83 ec 08             	sub    esp,0x8
c001a7c6:	52                   	push   edx
c001a7c7:	50                   	push   eax
c001a7c8:	e8 d5 80 ff ff       	call   c00128a2 <VgaText::putx(unsigned int)>
c001a7cd:	83 c4 10             	add    esp,0x10
c001a7d0:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c001a7d5:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a7db:	83 ec 08             	sub    esp,0x8
c001a7de:	68 a3 a1 02 c0       	push   0xc002a1a3
c001a7e3:	50                   	push   eax
c001a7e4:	e8 ff 80 ff ff       	call   c00128e8 <VgaText::puts(char const*)>
c001a7e9:	83 c4 10             	add    esp,0x10
c001a7ec:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c001a7f1:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a7f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a7fb:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a7fe:	83 ec 08             	sub    esp,0x8
c001a801:	52                   	push   edx
c001a802:	50                   	push   eax
c001a803:	e8 9a 80 ff ff       	call   c00128a2 <VgaText::putx(unsigned int)>
c001a808:	83 c4 10             	add    esp,0x10
c001a80b:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c001a810:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a816:	83 ec 08             	sub    esp,0x8
c001a819:	68 ab a1 02 c0       	push   0xc002a1ab
c001a81e:	50                   	push   eax
c001a81f:	e8 c4 80 ff ff       	call   c00128e8 <VgaText::puts(char const*)>
c001a824:	83 c4 10             	add    esp,0x10
c001a827:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c001a82c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a832:	83 ec 08             	sub    esp,0x8
c001a835:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a839:	50                   	push   eax
c001a83a:	e8 63 80 ff ff       	call   c00128a2 <VgaText::putx(unsigned int)>
c001a83f:	83 c4 10             	add    esp,0x10
c001a842:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c001a847:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a84d:	83 ec 08             	sub    esp,0x8
c001a850:	68 b4 a1 02 c0       	push   0xc002a1b4
c001a855:	50                   	push   eax
c001a856:	e8 8d 80 ff ff       	call   c00128e8 <VgaText::puts(char const*)>
c001a85b:	83 c4 10             	add    esp,0x10
c001a85e:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c001a863:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a869:	83 ec 08             	sub    esp,0x8
c001a86c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a870:	50                   	push   eax
c001a871:	e8 2c 80 ff ff       	call   c00128a2 <VgaText::putx(unsigned int)>
c001a876:	83 c4 10             	add    esp,0x10
c001a879:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c001a87e:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a884:	83 ec 08             	sub    esp,0x8
c001a887:	68 bc a1 02 c0       	push   0xc002a1bc
c001a88c:	50                   	push   eax
c001a88d:	e8 56 80 ff ff       	call   c00128e8 <VgaText::puts(char const*)>
c001a892:	83 c4 10             	add    esp,0x10
c001a895:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c001a89a:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a8a0:	83 ec 08             	sub    esp,0x8
c001a8a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a8a7:	50                   	push   eax
c001a8a8:	e8 f5 7f ff ff       	call   c00128a2 <VgaText::putx(unsigned int)>
c001a8ad:	83 c4 10             	add    esp,0x10
c001a8b0:	fa                   	cli    
c001a8b1:	f4                   	hlt    
c001a8b2:	eb fe                	jmp    c001a8b2 <HalDisplayDebugInfo(void*)+0x38c>

c001a8b4 <HalReceivedNMI()>:
c001a8b4:	83 ec 1c             	sub    esp,0x1c
c001a8b7:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c001a8be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8c2:	89 c2                	mov    edx,eax
c001a8c4:	ec                   	in     al,dx
c001a8c5:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001a8c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001a8cd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a8d1:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c001a8d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a8dc:	89 c2                	mov    edx,eax
c001a8de:	ec                   	in     al,dx
c001a8df:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001a8e3:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001a8e7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001a8eb:	83 ec 0c             	sub    esp,0xc
c001a8ee:	68 c4 a1 02 c0       	push   0xc002a1c4
c001a8f3:	e8 6e c6 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a8f8:	83 c4 10             	add    esp,0x10
c001a8fb:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001a900:	83 e0 10             	and    eax,0x10
c001a903:	74 10                	je     c001a915 <HalReceivedNMI()+0x61>
c001a905:	83 ec 0c             	sub    esp,0xc
c001a908:	68 d5 a1 02 c0       	push   0xc002a1d5
c001a90d:	e8 9a 56 ff ff       	call   c000ffac <KePanic(char const*)>
c001a912:	83 c4 10             	add    esp,0x10
c001a915:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001a91a:	83 e0 40             	and    eax,0x40
c001a91d:	74 10                	je     c001a92f <HalReceivedNMI()+0x7b>
c001a91f:	83 ec 0c             	sub    esp,0xc
c001a922:	68 e2 a1 02 c0       	push   0xc002a1e2
c001a927:	e8 80 56 ff ff       	call   c000ffac <KePanic(char const*)>
c001a92c:	83 c4 10             	add    esp,0x10
c001a92f:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001a933:	0f be c0             	movsx  eax,al
c001a936:	85 c0                	test   eax,eax
c001a938:	79 10                	jns    c001a94a <HalReceivedNMI()+0x96>
c001a93a:	83 ec 0c             	sub    esp,0xc
c001a93d:	68 ec a1 02 c0       	push   0xc002a1ec
c001a942:	e8 65 56 ff ff       	call   c000ffac <KePanic(char const*)>
c001a947:	83 c4 10             	add    esp,0x10
c001a94a:	90                   	nop
c001a94b:	83 c4 1c             	add    esp,0x1c
c001a94e:	c3                   	ret    

c001a94f <HalSystemIdle()>:
c001a94f:	56                   	push   esi
c001a950:	53                   	push   ebx
c001a951:	83 ec 14             	sub    esp,0x14
c001a954:	a0 50 24 03 c0       	mov    al,ds:0xc0032450
c001a959:	83 e0 10             	and    eax,0x10
c001a95c:	0f b6 c0             	movzx  eax,al
c001a95f:	85 c0                	test   eax,eax
c001a961:	74 43                	je     c001a9a6 <HalSystemIdle()+0x57>
c001a963:	83 ec 0c             	sub    esp,0xc
c001a966:	68 e1 00 00 00       	push   0xe1
c001a96b:	e8 ba f9 ff ff       	call   c001a32a <x86rdmsr(unsigned int)>
c001a970:	83 c4 10             	add    esp,0x10
c001a973:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a977:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a97b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a97f:	83 e0 02             	and    eax,0x2
c001a982:	89 c3                	mov    ebx,eax
c001a984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a988:	83 e0 00             	and    eax,0x0
c001a98b:	89 c6                	mov    esi,eax
c001a98d:	83 ec 04             	sub    esp,0x4
c001a990:	56                   	push   esi
c001a991:	53                   	push   ebx
c001a992:	68 e1 00 00 00       	push   0xe1
c001a997:	e8 cc f9 ff ff       	call   c001a368 <x86wrmsr(unsigned int, unsigned long long)>
c001a99c:	83 c4 10             	add    esp,0x10
c001a99f:	e8 f0 57 fe ff       	call   c0000194 <doTPAUSE>
c001a9a4:	eb 01                	jmp    c001a9a7 <HalSystemIdle()+0x58>
c001a9a6:	f4                   	hlt    
c001a9a7:	90                   	nop
c001a9a8:	83 c4 14             	add    esp,0x14
c001a9ab:	5b                   	pop    ebx
c001a9ac:	5e                   	pop    esi
c001a9ad:	c3                   	ret    

c001a9ae <i386SaveCoprocessor(void*)>:
c001a9ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9b2:	83 c0 3f             	add    eax,0x3f
c001a9b5:	83 e0 c0             	and    eax,0xffffffc0
c001a9b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a9bc:	ff 25 10 24 03 c0    	jmp    DWORD PTR ds:0xc0032410

c001a9c2 <i386LoadCoprocessor(void*)>:
c001a9c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9c6:	83 c0 3f             	add    eax,0x3f
c001a9c9:	83 e0 c0             	and    eax,0xffffffc0
c001a9cc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a9d0:	ff 25 0c 24 03 c0    	jmp    DWORD PTR ds:0xc003240c

c001a9d6 <x87EmulHandler(regs*, void*)>:
c001a9d6:	53                   	push   ebx
c001a9d7:	83 ec 08             	sub    esp,0x8
c001a9da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a9df:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c001a9e3:	74 10                	je     c001a9f5 <x87EmulHandler(regs*, void*)+0x1f>
c001a9e5:	83 ec 0c             	sub    esp,0xc
c001a9e8:	68 f9 a1 02 c0       	push   0xc002a1f9
c001a9ed:	e8 ba 55 ff ff       	call   c000ffac <KePanic(char const*)>
c001a9f2:	83 c4 10             	add    esp,0x10
c001a9f5:	0f 20 c0             	mov    eax,cr0
c001a9f8:	a8 08                	test   al,0x8
c001a9fa:	74 59                	je     c001aa55 <x87EmulHandler(regs*, void*)+0x7f>
c001a9fc:	0f 06                	clts   
c001a9fe:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001aa03:	85 c0                	test   eax,eax
c001aa05:	74 0e                	je     c001aa15 <x87EmulHandler(regs*, void*)+0x3f>
c001aa07:	83 ec 0c             	sub    esp,0xc
c001aa0a:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001aa0d:	e8 9c ff ff ff       	call   c001a9ae <i386SaveCoprocessor(void*)>
c001aa12:	83 c4 10             	add    esp,0x10
c001aa15:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001aa1b:	83 7b 59 00          	cmp    DWORD PTR [ebx+0x59],0x0
c001aa1f:	75 12                	jne    c001aa33 <x87EmulHandler(regs*, void*)+0x5d>
c001aa21:	83 ec 0c             	sub    esp,0xc
c001aa24:	68 40 02 00 00       	push   0x240
c001aa29:	e8 2a 51 ff ff       	call   c000fb58 <malloc>
c001aa2e:	89 43 59             	mov    DWORD PTR [ebx+0x59],eax
c001aa31:	eb 10                	jmp    c001aa43 <x87EmulHandler(regs*, void*)+0x6d>
c001aa33:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001aa38:	83 ec 0c             	sub    esp,0xc
c001aa3b:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001aa3e:	e8 7f ff ff ff       	call   c001a9c2 <i386LoadCoprocessor(void*)>
c001aa43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa48:	83 c4 10             	add    esp,0x10
c001aa4b:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001aa50:	83 c4 08             	add    esp,0x8
c001aa53:	5b                   	pop    ebx
c001aa54:	c3                   	ret    
c001aa55:	83 ec 0c             	sub    esp,0xc
c001aa58:	68 0d a2 02 c0       	push   0xc002a20d
c001aa5d:	e8 04 c5 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001aa62:	c7 44 24 20 01 00 00 00 	mov    DWORD PTR [esp+0x20],0x1
c001aa6a:	83 c4 18             	add    esp,0x18
c001aa6d:	5b                   	pop    ebx
c001aa6e:	e9 b5 c8 ff ff       	jmp    c0017328 <KeTerminateCurrentThread(int)>

c001aa73 <HalInitialiseCoprocessor()>:
c001aa73:	83 ec 10             	sub    esp,0x10
c001aa76:	6a 00                	push   0x0
c001aa78:	68 d6 a9 01 c0       	push   0xc001a9d6
c001aa7d:	6a 07                	push   0x7
c001aa7f:	c7 05 08 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032408,0x0
c001aa89:	e8 fb 07 00 00       	call   c001b289 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aa8e:	a0 4c 24 03 c0       	mov    al,ds:0xc003244c
c001aa93:	83 c4 10             	add    esp,0x10
c001aa96:	a8 80                	test   al,0x80
c001aa98:	74 29                	je     c001aac3 <HalInitialiseCoprocessor()+0x50>
c001aa9a:	83 ec 0c             	sub    esp,0xc
c001aa9d:	68 23 a2 02 c0       	push   0xc002a223
c001aaa2:	e8 bf c4 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001aaa7:	c7 05 10 24 03 c0 68 1e 02 c0 	mov    DWORD PTR ds:0xc0032410,0xc0021e68
c001aab1:	c7 05 0c 24 03 c0 70 1e 02 c0 	mov    DWORD PTR ds:0xc003240c,0xc0021e70
c001aabb:	83 c4 1c             	add    esp,0x1c
c001aabe:	e9 b5 73 00 00       	jmp    c0021e78 <sseInit>
c001aac3:	a8 10                	test   al,0x10
c001aac5:	74 29                	je     c001aaf0 <HalInitialiseCoprocessor()+0x7d>
c001aac7:	83 ec 0c             	sub    esp,0xc
c001aaca:	68 2e a2 02 c0       	push   0xc002a22e
c001aacf:	e8 92 c4 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001aad4:	c7 05 10 24 03 c0 b7 1e 02 c0 	mov    DWORD PTR ds:0xc0032410,0xc0021eb7
c001aade:	c7 05 0c 24 03 c0 be 1e 02 c0 	mov    DWORD PTR ds:0xc003240c,0xc0021ebe
c001aae8:	83 c4 1c             	add    esp,0x1c
c001aaeb:	e9 d5 73 00 00       	jmp    c0021ec5 <x87Init>
c001aaf0:	c7 05 10 24 03 c0 ea 91 01 c0 	mov    DWORD PTR ds:0xc0032410,0xc00191ea
c001aafa:	c7 05 0c 24 03 c0 ea 91 01 c0 	mov    DWORD PTR ds:0xc003240c,0xc00191ea
c001ab04:	0f 20 c0             	mov    eax,cr0
c001ab07:	83 c8 04             	or     eax,0x4
c001ab0a:	0f 22 c0             	mov    cr0,eax
c001ab0d:	83 c4 0c             	add    esp,0xc
c001ab10:	c3                   	ret    

c001ab11 <HalPanic(char const*)>:
c001ab11:	53                   	push   ebx
c001ab12:	83 ec 10             	sub    esp,0x10
c001ab15:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ab19:	fa                   	cli    
c001ab1a:	53                   	push   ebx
c001ab1b:	68 39 a2 02 c0       	push   0xc002a239
c001ab20:	e8 41 c4 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ab25:	a1 04 24 03 c0       	mov    eax,ds:0xc0032404
c001ab2a:	83 c4 10             	add    esp,0x10
c001ab2d:	85 c0                	test   eax,eax
c001ab2f:	74 09                	je     c001ab3a <HalPanic(char const*)+0x29>
c001ab31:	83 ec 0c             	sub    esp,0xc
c001ab34:	53                   	push   ebx
c001ab35:	ff d0                	call   eax
c001ab37:	83 c4 10             	add    esp,0x10
c001ab3a:	a1 f4 21 03 c0       	mov    eax,ds:0xc00321f4
c001ab3f:	85 c0                	test   eax,eax
c001ab41:	0f 84 dc 00 00 00    	je     c001ac23 <HalPanic(char const*)+0x112>
c001ab47:	52                   	push   edx
c001ab48:	6a 01                	push   0x1
c001ab4a:	6a 0f                	push   0xf
c001ab4c:	50                   	push   eax
c001ab4d:	e8 98 78 ff ff       	call   c00123ea <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001ab52:	59                   	pop    ecx
c001ab53:	ff 35 f4 21 03 c0    	push   DWORD PTR ds:0xc00321f4
c001ab59:	e8 98 7a ff ff       	call   c00125f6 <VgaText::clearScreen()>
c001ab5e:	58                   	pop    eax
c001ab5f:	5a                   	pop    edx
c001ab60:	68 0d 92 02 c0       	push   0xc002920d
c001ab65:	ff 35 f4 21 03 c0    	push   DWORD PTR ds:0xc00321f4
c001ab6b:	e8 b2 78 ff ff       	call   c0012422 <VgaText::setTitle(char*)>
c001ab70:	83 c4 0c             	add    esp,0xc
c001ab73:	6a 01                	push   0x1
c001ab75:	6a 0f                	push   0xf
c001ab77:	ff 35 f4 21 03 c0    	push   DWORD PTR ds:0xc00321f4
c001ab7d:	e8 68 78 ff ff       	call   c00123ea <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001ab82:	59                   	pop    ecx
c001ab83:	58                   	pop    eax
c001ab84:	68 52 a2 02 c0       	push   0xc002a252
c001ab89:	ff 35 f4 21 03 c0    	push   DWORD PTR ds:0xc00321f4
c001ab8f:	e8 54 7d ff ff       	call   c00128e8 <VgaText::puts(char const*)>
c001ab94:	83 c4 0c             	add    esp,0xc
c001ab97:	6a 0f                	push   0xf
c001ab99:	6a 01                	push   0x1
c001ab9b:	ff 35 f4 21 03 c0    	push   DWORD PTR ds:0xc00321f4
c001aba1:	e8 44 78 ff ff       	call   c00123ea <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001aba6:	58                   	pop    eax
c001aba7:	5a                   	pop    edx
c001aba8:	68 5b a2 02 c0       	push   0xc002a25b
c001abad:	ff 35 f4 21 03 c0    	push   DWORD PTR ds:0xc00321f4
c001abb3:	e8 30 7d ff ff       	call   c00128e8 <VgaText::puts(char const*)>
c001abb8:	83 c4 0c             	add    esp,0xc
c001abbb:	6a 01                	push   0x1
c001abbd:	6a 0f                	push   0xf
c001abbf:	ff 35 f4 21 03 c0    	push   DWORD PTR ds:0xc00321f4
c001abc5:	e8 20 78 ff ff       	call   c00123ea <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001abca:	59                   	pop    ecx
c001abcb:	58                   	pop    eax
c001abcc:	68 9f a2 02 c0       	push   0xc002a29f
c001abd1:	ff 35 f4 21 03 c0    	push   DWORD PTR ds:0xc00321f4
c001abd7:	e8 0c 7d ff ff       	call   c00128e8 <VgaText::puts(char const*)>
c001abdc:	58                   	pop    eax
c001abdd:	5a                   	pop    edx
c001abde:	68 68 a2 02 c0       	push   0xc002a268
c001abe3:	ff 35 f4 21 03 c0    	push   DWORD PTR ds:0xc00321f4
c001abe9:	e8 fa 7c ff ff       	call   c00128e8 <VgaText::puts(char const*)>
c001abee:	59                   	pop    ecx
c001abef:	58                   	pop    eax
c001abf0:	68 a2 a2 02 c0       	push   0xc002a2a2
c001abf5:	ff 35 f4 21 03 c0    	push   DWORD PTR ds:0xc00321f4
c001abfb:	e8 e8 7c ff ff       	call   c00128e8 <VgaText::puts(char const*)>
c001ac00:	58                   	pop    eax
c001ac01:	5a                   	pop    edx
c001ac02:	53                   	push   ebx
c001ac03:	ff 35 f4 21 03 c0    	push   DWORD PTR ds:0xc00321f4
c001ac09:	e8 da 7c ff ff       	call   c00128e8 <VgaText::puts(char const*)>
c001ac0e:	59                   	pop    ecx
c001ac0f:	5b                   	pop    ebx
c001ac10:	68 9f a2 02 c0       	push   0xc002a29f
c001ac15:	ff 35 f4 21 03 c0    	push   DWORD PTR ds:0xc00321f4
c001ac1b:	e8 c8 7c ff ff       	call   c00128e8 <VgaText::puts(char const*)>
c001ac20:	83 c4 10             	add    esp,0x10
c001ac23:	eb fe                	jmp    c001ac23 <HalPanic(char const*)+0x112>

c001ac25 <HalQueryPerformanceCounter()>:
c001ac25:	31 c0                	xor    eax,eax
c001ac27:	31 d2                	xor    edx,edx
c001ac29:	f6 05 4e 24 03 c0 08 	test   BYTE PTR ds:0xc003244e,0x8
c001ac30:	75 02                	jne    c001ac34 <HalQueryPerformanceCounter()+0xf>
c001ac32:	0f 31                	rdtsc  
c001ac34:	c3                   	ret    

c001ac35 <HalInitialise()>:
c001ac35:	53                   	push   ebx
c001ac36:	83 ec 08             	sub    esp,0x8
c001ac39:	e8 c4 e8 ff ff       	call   c0019502 <HalDetectFeatures()>
c001ac3e:	83 ec 0c             	sub    esp,0xc
c001ac41:	68 eb 91 01 c0       	push   0xc00191eb
c001ac46:	e8 9b 5c ff ff       	call   c00108e6 <KeRegisterRestartHandler(void (*)())>
c001ac4b:	c7 04 24 f6 91 01 c0 	mov    DWORD PTR [esp],0xc00191f6
c001ac52:	e8 85 5c ff ff       	call   c00108dc <KeRegisterShutdownHandler(void (*)())>
c001ac57:	c7 04 24 f7 91 01 c0 	mov    DWORD PTR [esp],0xc00191f7
c001ac5e:	e8 8d 5c ff ff       	call   c00108f0 <KeRegisterSleepHandler(void (*)())>
c001ac63:	e8 e4 1b ff ff       	call   c000c84c <scanMADT()>
c001ac68:	83 c4 10             	add    esp,0x10
c001ac6b:	80 3d 40 1e 03 c0 00 	cmp    BYTE PTR ds:0xc0031e40,0x0
c001ac72:	75 0d                	jne    c001ac81 <HalInitialise()+0x4c>
c001ac74:	a0 4c 24 03 c0       	mov    al,ds:0xc003244c
c001ac79:	83 e0 fe             	and    eax,0xfffffffe
c001ac7c:	a2 4c 24 03 c0       	mov    ds:0xc003244c,al
c001ac81:	e8 ea 08 00 00       	call   c001b570 <picOpen()>
c001ac86:	f6 05 4c 24 03 c0 01 	test   BYTE PTR ds:0xc003244c,0x1
c001ac8d:	74 0a                	je     c001ac99 <HalInitialise()+0x64>
c001ac8f:	e8 2c 08 00 00       	call   c001b4c0 <picDisable()>
c001ac94:	e8 59 e1 ff ff       	call   c0018df2 <apicOpen()>
c001ac99:	50                   	push   eax
c001ac9a:	bb 0f 00 00 00       	mov    ebx,0xf
c001ac9f:	6a 00                	push   0x0
c001aca1:	68 80 ec 00 c0       	push   0xc000ec80
c001aca6:	6a 02                	push   0x2
c001aca8:	e8 dc 05 00 00       	call   c001b289 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001acad:	83 c4 0c             	add    esp,0xc
c001acb0:	6a 00                	push   0x0
c001acb2:	68 f8 eb 00 c0       	push   0xc000ebf8
c001acb7:	6a 06                	push   0x6
c001acb9:	e8 cb 05 00 00       	call   c001b289 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001acbe:	83 c4 0c             	add    esp,0xc
c001acc1:	6a 00                	push   0x0
c001acc3:	68 90 ec 00 c0       	push   0xc000ec90
c001acc8:	6a 08                	push   0x8
c001acca:	e8 ba 05 00 00       	call   c001b289 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001accf:	83 c4 0c             	add    esp,0xc
c001acd2:	6a 00                	push   0x0
c001acd4:	68 50 eb 00 c0       	push   0xc000eb50
c001acd9:	6a 0d                	push   0xd
c001acdb:	e8 a9 05 00 00       	call   c001b289 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ace0:	83 c4 0c             	add    esp,0xc
c001ace3:	6a 00                	push   0x0
c001ace5:	68 a4 eb 00 c0       	push   0xc000eba4
c001acea:	6a 0e                	push   0xe
c001acec:	e8 98 05 00 00       	call   c001b289 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001acf1:	83 c4 0c             	add    esp,0xc
c001acf4:	6a 00                	push   0x0
c001acf6:	68 4c ec 00 c0       	push   0xc000ec4c
c001acfb:	6a 00                	push   0x0
c001acfd:	e8 87 05 00 00       	call   c001b289 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ad02:	83 c4 0c             	add    esp,0xc
c001ad05:	6a 00                	push   0x0
c001ad07:	68 4c ec 00 c0       	push   0xc000ec4c
c001ad0c:	6a 01                	push   0x1
c001ad0e:	e8 76 05 00 00       	call   c001b289 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ad13:	83 c4 0c             	add    esp,0xc
c001ad16:	6a 00                	push   0x0
c001ad18:	68 4c ec 00 c0       	push   0xc000ec4c
c001ad1d:	6a 03                	push   0x3
c001ad1f:	e8 65 05 00 00       	call   c001b289 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ad24:	83 c4 0c             	add    esp,0xc
c001ad27:	6a 00                	push   0x0
c001ad29:	68 4c ec 00 c0       	push   0xc000ec4c
c001ad2e:	6a 04                	push   0x4
c001ad30:	e8 54 05 00 00       	call   c001b289 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ad35:	83 c4 0c             	add    esp,0xc
c001ad38:	6a 00                	push   0x0
c001ad3a:	68 4c ec 00 c0       	push   0xc000ec4c
c001ad3f:	6a 05                	push   0x5
c001ad41:	e8 43 05 00 00       	call   c001b289 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ad46:	83 c4 0c             	add    esp,0xc
c001ad49:	6a 00                	push   0x0
c001ad4b:	68 4c ec 00 c0       	push   0xc000ec4c
c001ad50:	6a 00                	push   0x0
c001ad52:	e8 32 05 00 00       	call   c001b289 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ad57:	83 c4 0c             	add    esp,0xc
c001ad5a:	6a 00                	push   0x0
c001ad5c:	68 4c ec 00 c0       	push   0xc000ec4c
c001ad61:	6a 01                	push   0x1
c001ad63:	e8 21 05 00 00       	call   c001b289 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ad68:	83 c4 0c             	add    esp,0xc
c001ad6b:	6a 00                	push   0x0
c001ad6d:	68 4c ec 00 c0       	push   0xc000ec4c
c001ad72:	6a 09                	push   0x9
c001ad74:	e8 10 05 00 00       	call   c001b289 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ad79:	83 c4 0c             	add    esp,0xc
c001ad7c:	6a 00                	push   0x0
c001ad7e:	68 4c ec 00 c0       	push   0xc000ec4c
c001ad83:	6a 0a                	push   0xa
c001ad85:	e8 ff 04 00 00       	call   c001b289 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ad8a:	83 c4 0c             	add    esp,0xc
c001ad8d:	6a 00                	push   0x0
c001ad8f:	68 4c ec 00 c0       	push   0xc000ec4c
c001ad94:	6a 0b                	push   0xb
c001ad96:	e8 ee 04 00 00       	call   c001b289 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ad9b:	83 c4 10             	add    esp,0x10
c001ad9e:	50                   	push   eax
c001ad9f:	6a 00                	push   0x0
c001ada1:	68 4c ec 00 c0       	push   0xc000ec4c
c001ada6:	53                   	push   ebx
c001ada7:	43                   	inc    ebx
c001ada8:	e8 dc 04 00 00       	call   c001b289 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001adad:	83 c4 10             	add    esp,0x10
c001adb0:	83 fb 1e             	cmp    ebx,0x1e
c001adb3:	75 e9                	jne    c001ad9e <HalInitialise()+0x169>
c001adb5:	50                   	push   eax
c001adb6:	6a 00                	push   0x0
c001adb8:	68 84 22 01 c0       	push   0xc0012284
c001adbd:	6a 60                	push   0x60
c001adbf:	e8 c5 04 00 00       	call   c001b289 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001adc4:	a1 08 21 03 c0       	mov    eax,ds:0xc0032108
c001adc9:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001add3:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001adda:	e8 79 4d ff ff       	call   c000fb58 <malloc>
c001addf:	89 04 24             	mov    DWORD PTR [esp],eax
c001ade2:	89 c3                	mov    ebx,eax
c001ade4:	e8 ef 0e 00 00       	call   c001bcd8 <RTC::RTC()>
c001ade9:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001adf3:	5a                   	pop    edx
c001adf4:	59                   	pop    ecx
c001adf5:	53                   	push   ebx
c001adf6:	ff 35 08 21 03 c0    	push   DWORD PTR ds:0xc0032108
c001adfc:	e8 cd f0 fe ff       	call   c0009ece <Device::addChild(Device*)>
c001ae01:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae03:	6a 00                	push   0x0
c001ae05:	6a 00                	push   0x0
c001ae07:	6a 00                	push   0x0
c001ae09:	53                   	push   ebx
c001ae0a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae0d:	a1 08 21 03 c0       	mov    eax,ds:0xc0032108
c001ae12:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
c001ae18:	83 c4 28             	add    esp,0x28
c001ae1b:	5b                   	pop    ebx
c001ae1c:	c3                   	ret    

c001ae1d <HalMakeBeep(int)>:
c001ae1d:	53                   	push   ebx
c001ae1e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001ae22:	85 db                	test   ebx,ebx
c001ae24:	75 07                	jne    c001ae2d <HalMakeBeep(int)+0x10>
c001ae26:	e4 61                	in     al,0x61
c001ae28:	83 e0 fc             	and    eax,0xfffffffc
c001ae2b:	eb 26                	jmp    c001ae53 <HalMakeBeep(int)+0x36>
c001ae2d:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ae32:	99                   	cdq    
c001ae33:	f7 fb                	idiv   ebx
c001ae35:	89 c1                	mov    ecx,eax
c001ae37:	b0 b6                	mov    al,0xb6
c001ae39:	e6 43                	out    0x43,al
c001ae3b:	88 c8                	mov    al,cl
c001ae3d:	e6 42                	out    0x42,al
c001ae3f:	89 c8                	mov    eax,ecx
c001ae41:	c1 e8 08             	shr    eax,0x8
c001ae44:	e6 42                	out    0x42,al
c001ae46:	e4 61                	in     al,0x61
c001ae48:	89 c2                	mov    edx,eax
c001ae4a:	83 ca 03             	or     edx,0x3
c001ae4d:	38 d0                	cmp    al,dl
c001ae4f:	74 04                	je     c001ae55 <HalMakeBeep(int)+0x38>
c001ae51:	88 d0                	mov    al,dl
c001ae53:	e6 61                	out    0x61,al
c001ae55:	5b                   	pop    ebx
c001ae56:	c3                   	ret    

c001ae57 <HalGetRand()>:
c001ae57:	31 c0                	xor    eax,eax
c001ae59:	c3                   	ret    

c001ae5a <HalEndOfInterrupt(int)>:
c001ae5a:	f6 05 4c 24 03 c0 01 	test   BYTE PTR ds:0xc003244c,0x1
c001ae61:	74 1d                	je     c001ae80 <HalEndOfInterrupt(int)+0x26>
c001ae63:	83 ec 18             	sub    esp,0x18
c001ae66:	6a 1b                	push   0x1b
c001ae68:	e8 bd f4 ff ff       	call   c001a32a <x86rdmsr(unsigned int)>
c001ae6d:	25 00 f0 ff ff       	and    eax,0xfffff000
c001ae72:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001ae7c:	83 c4 1c             	add    esp,0x1c
c001ae7f:	c3                   	ret    
c001ae80:	e9 6f 08 00 00       	jmp    c001b6f4 <picEOI(int)>
c001ae85:	90                   	nop

c001ae86 <CPU::CPU()>:
c001ae86:	83 ec 0c             	sub    esp,0xc
c001ae89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae8d:	83 ec 08             	sub    esp,0x8
c001ae90:	68 2a a0 02 c0       	push   0xc002a02a
c001ae95:	50                   	push   eax
c001ae96:	e8 95 f1 fe ff       	call   c000a030 <Device::Device(char const*)>
c001ae9b:	83 c4 10             	add    esp,0x10
c001ae9e:	ba 3c a3 02 c0       	mov    edx,0xc002a33c
c001aea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aea7:	89 10                	mov    DWORD PTR [eax],edx
c001aea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aead:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001aeb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aebb:	05 64 01 00 00       	add    eax,0x164
c001aec0:	83 ec 0c             	sub    esp,0xc
c001aec3:	50                   	push   eax
c001aec4:	e8 19 3e ff ff       	call   c000ece2 <GDT::GDT()>
c001aec9:	83 c4 10             	add    esp,0x10
c001aecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aed0:	05 68 09 00 00       	add    eax,0x968
c001aed5:	83 ec 0c             	sub    esp,0xc
c001aed8:	50                   	push   eax
c001aed9:	e8 56 40 ff ff       	call   c000ef34 <IDT::IDT()>
c001aede:	83 c4 10             	add    esp,0x10
c001aee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aee5:	05 68 11 00 00       	add    eax,0x1168
c001aeea:	83 ec 0c             	sub    esp,0xc
c001aeed:	50                   	push   eax
c001aeee:	e8 b1 7e ff ff       	call   c0012da4 <TSS::TSS()>
c001aef3:	83 c4 10             	add    esp,0x10
c001aef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aefa:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001af04:	90                   	nop
c001af05:	83 c4 0c             	add    esp,0xc
c001af08:	c3                   	ret    
c001af09:	90                   	nop

c001af0a <CPU::setupSMEP()>:
c001af0a:	0f 20 e0             	mov    eax,cr4
c001af0d:	0d 00 00 10 00       	or     eax,0x100000
c001af12:	0f 22 e0             	mov    cr4,eax
c001af15:	c3                   	ret    

c001af16 <CPU::setupUMIP()>:
c001af16:	0f 20 e0             	mov    eax,cr4
c001af19:	80 cc 08             	or     ah,0x8
c001af1c:	0f 22 e0             	mov    cr4,eax
c001af1f:	c3                   	ret    

c001af20 <CPU::setupTSC()>:
c001af20:	0f 20 e0             	mov    eax,cr4
c001af23:	83 c8 04             	or     eax,0x4
c001af26:	0f 22 e0             	mov    cr4,eax
c001af29:	c3                   	ret    

c001af2a <CPU::setupLargePages()>:
c001af2a:	0f 20 e0             	mov    eax,cr4
c001af2d:	83 c8 10             	or     eax,0x10
c001af30:	0f 22 e0             	mov    cr4,eax
c001af33:	c3                   	ret    

c001af34 <CPU::setupPAT()>:
c001af34:	f6 05 4c 24 03 c0 08 	test   BYTE PTR ds:0xc003244c,0x8
c001af3b:	74 28                	je     c001af65 <CPU::setupPAT()+0x31>
c001af3d:	53                   	push   ebx
c001af3e:	83 ec 14             	sub    esp,0x14
c001af41:	68 77 02 00 00       	push   0x277
c001af46:	e8 df f3 ff ff       	call   c001a32a <x86rdmsr(unsigned int)>
c001af4b:	83 c4 0c             	add    esp,0xc
c001af4e:	83 e2 f8             	and    edx,0xfffffff8
c001af51:	83 ca 01             	or     edx,0x1
c001af54:	52                   	push   edx
c001af55:	50                   	push   eax
c001af56:	68 77 02 00 00       	push   0x277
c001af5b:	e8 08 f4 ff ff       	call   c001a368 <x86wrmsr(unsigned int, unsigned long long)>
c001af60:	83 c4 18             	add    esp,0x18
c001af63:	5b                   	pop    ebx
c001af64:	c3                   	ret    
c001af65:	c3                   	ret    

c001af66 <CPU::setupMTRR()>:
c001af66:	c3                   	ret    
c001af67:	90                   	nop

c001af68 <CPU::setupGlobalPages()>:
c001af68:	0f 20 e0             	mov    eax,cr4
c001af6b:	0c 80                	or     al,0x80
c001af6d:	0f 22 e0             	mov    cr4,eax
c001af70:	c3                   	ret    
c001af71:	90                   	nop

c001af72 <CPU::allowUsermodeDataAccess()>:
c001af72:	f6 05 4f 24 03 c0 40 	test   BYTE PTR ds:0xc003244f,0x40
c001af79:	74 03                	je     c001af7e <CPU::allowUsermodeDataAccess()+0xc>
c001af7b:	0f 01 cb             	stac   
c001af7e:	c3                   	ret    
c001af7f:	90                   	nop

c001af80 <CPU::prohibitUsermodeDataAccess()>:
c001af80:	f6 05 4f 24 03 c0 40 	test   BYTE PTR ds:0xc003244f,0x40
c001af87:	74 03                	je     c001af8c <CPU::prohibitUsermodeDataAccess()+0xc>
c001af89:	0f 01 ca             	clac   
c001af8c:	c3                   	ret    
c001af8d:	90                   	nop

c001af8e <CPU::setupSMAP()>:
c001af8e:	0f 20 e0             	mov    eax,cr4
c001af91:	0d 00 00 20 00       	or     eax,0x200000
c001af96:	0f 22 e0             	mov    cr4,eax
c001af99:	eb e5                	jmp    c001af80 <CPU::prohibitUsermodeDataAccess()>
c001af9b:	90                   	nop

c001af9c <CPU::setupFeatures()>:
c001af9c:	53                   	push   ebx
c001af9d:	83 ec 08             	sub    esp,0x8
c001afa0:	f6 05 4f 24 03 c0 20 	test   BYTE PTR ds:0xc003244f,0x20
c001afa7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001afab:	74 18                	je     c001afc5 <CPU::setupFeatures()+0x29>
c001afad:	83 ec 0c             	sub    esp,0xc
c001afb0:	68 ad a2 02 c0       	push   0xc002a2ad
c001afb5:	e8 ac bf fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001afba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afbd:	e8 54 ff ff ff       	call   c001af16 <CPU::setupUMIP()>
c001afc2:	83 c4 10             	add    esp,0x10
c001afc5:	f6 05 4e 24 03 c0 08 	test   BYTE PTR ds:0xc003244e,0x8
c001afcc:	74 18                	je     c001afe6 <CPU::setupFeatures()+0x4a>
c001afce:	83 ec 0c             	sub    esp,0xc
c001afd1:	68 b7 a2 02 c0       	push   0xc002a2b7
c001afd6:	e8 8b bf fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001afdb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afde:	e8 3d ff ff ff       	call   c001af20 <CPU::setupTSC()>
c001afe3:	83 c4 10             	add    esp,0x10
c001afe6:	f6 05 4e 24 03 c0 20 	test   BYTE PTR ds:0xc003244e,0x20
c001afed:	74 18                	je     c001b007 <CPU::setupFeatures()+0x6b>
c001afef:	83 ec 0c             	sub    esp,0xc
c001aff2:	68 c0 a2 02 c0       	push   0xc002a2c0
c001aff7:	e8 6a bf fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001affc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afff:	e8 26 ff ff ff       	call   c001af2a <CPU::setupLargePages()>
c001b004:	83 c4 10             	add    esp,0x10
c001b007:	f6 05 4e 24 03 c0 40 	test   BYTE PTR ds:0xc003244e,0x40
c001b00e:	74 18                	je     c001b028 <CPU::setupFeatures()+0x8c>
c001b010:	83 ec 0c             	sub    esp,0xc
c001b013:	68 c9 a2 02 c0       	push   0xc002a2c9
c001b018:	e8 49 bf fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001b01d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b020:	e8 43 ff ff ff       	call   c001af68 <CPU::setupGlobalPages()>
c001b025:	83 c4 10             	add    esp,0x10
c001b028:	f6 05 4e 24 03 c0 80 	test   BYTE PTR ds:0xc003244e,0x80
c001b02f:	74 18                	je     c001b049 <CPU::setupFeatures()+0xad>
c001b031:	83 ec 0c             	sub    esp,0xc
c001b034:	68 db a2 02 c0       	push   0xc002a2db
c001b039:	e8 28 bf fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001b03e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b041:	e8 ee fe ff ff       	call   c001af34 <CPU::setupPAT()>
c001b046:	83 c4 10             	add    esp,0x10
c001b049:	f6 05 50 24 03 c0 04 	test   BYTE PTR ds:0xc0032450,0x4
c001b050:	74 11                	je     c001b063 <CPU::setupFeatures()+0xc7>
c001b052:	c7 44 24 10 e4 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a2e4
c001b05a:	83 c4 08             	add    esp,0x8
c001b05d:	5b                   	pop    ebx
c001b05e:	e9 03 bf fe ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>
c001b063:	83 c4 08             	add    esp,0x8
c001b066:	5b                   	pop    ebx
c001b067:	c3                   	ret    

c001b068 <CPU::open(int, int, void*)>:
c001b068:	55                   	push   ebp
c001b069:	57                   	push   edi
c001b06a:	56                   	push   esi
c001b06b:	53                   	push   ebx
c001b06c:	83 ec 18             	sub    esp,0x18
c001b06f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b073:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b077:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001b07b:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001b081:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001b087:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001b08d:	50                   	push   eax
c001b08e:	e8 b1 3c ff ff       	call   c000ed44 <GDT::setup()>
c001b093:	83 c4 0c             	add    esp,0xc
c001b096:	6a 00                	push   0x0
c001b098:	68 ef be ad de       	push   0xdeadbeef
c001b09d:	55                   	push   ebp
c001b09e:	e8 45 7d ff ff       	call   c0012de8 <TSS::setup(unsigned long, unsigned long)>
c001b0a3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b0a6:	e8 1d 7d ff ff       	call   c0012dc8 <TSS::flush()>
c001b0ab:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001b0b1:	89 04 24             	mov    DWORD PTR [esp],eax
c001b0b4:	e8 f1 3e ff ff       	call   c000efaa <IDT::setup()>
c001b0b9:	b8 00 04 00 00       	mov    eax,0x400
c001b0be:	0f 23 f8             	mov    dr7,eax
c001b0c1:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001b0cb:	e8 d6 50 ff ff       	call   c00101a6 <Phys::allocatePage()>
c001b0d0:	83 c4 10             	add    esp,0x10
c001b0d3:	85 f6                	test   esi,esi
c001b0d5:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001b0db:	89 38                	mov    DWORD PTR [eax],edi
c001b0dd:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b0e3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001b0e6:	74 10                	je     c001b0f8 <CPU::open(int, int, void*)+0x90>
c001b0e8:	50                   	push   eax
c001b0e9:	50                   	push   eax
c001b0ea:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b0f0:	56                   	push   esi
c001b0f1:	e8 94 86 ff ff       	call   c001378a <VAS::setCPUSpecific(unsigned long)>
c001b0f6:	eb 0d                	jmp    c001b105 <CPU::open(int, int, void*)+0x9d>
c001b0f8:	83 ec 0c             	sub    esp,0xc
c001b0fb:	68 ee a2 02 c0       	push   0xc002a2ee
c001b100:	e8 a7 4e ff ff       	call   c000ffac <KePanic(char const*)>
c001b105:	83 c4 10             	add    esp,0x10
c001b108:	83 ec 0c             	sub    esp,0xc
c001b10b:	68 fc a2 02 c0       	push   0xc002a2fc
c001b110:	e8 a0 25 ff ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001b115:	e8 1b fb ff ff       	call   c001ac35 <HalInitialise()>
c001b11a:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
c001b121:	e8 42 25 ff ff       	call   c000d668 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001b126:	0f b6 c0             	movzx  eax,al
c001b129:	83 f8 01             	cmp    eax,0x1
c001b12c:	19 c0                	sbb    eax,eax
c001b12e:	25 aa 00 00 00       	and    eax,0xaa
c001b133:	83 c0 1e             	add    eax,0x1e
c001b136:	89 04 24             	mov    DWORD PTR [esp],eax
c001b139:	e8 f7 03 ff ff       	call   c000b535 <setupTimer(int)>
c001b13e:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001b144:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001b14b:	e8 18 25 ff ff       	call   c000d668 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001b150:	83 c4 10             	add    esp,0x10
c001b153:	84 c0                	test   al,al
c001b155:	74 0c                	je     c001b163 <CPU::open(int, int, void*)+0xfb>
c001b157:	83 ec 0c             	sub    esp,0xc
c001b15a:	53                   	push   ebx
c001b15b:	e8 3c fe ff ff       	call   c001af9c <CPU::setupFeatures()>
c001b160:	83 c4 10             	add    esp,0x10
c001b163:	83 c4 0c             	add    esp,0xc
c001b166:	31 c0                	xor    eax,eax
c001b168:	5b                   	pop    ebx
c001b169:	5e                   	pop    esi
c001b16a:	5f                   	pop    edi
c001b16b:	5d                   	pop    ebp
c001b16c:	c3                   	ret    

c001b16d <convertLegacyIRQNumber(int)>:
c001b16d:	83 ec 0c             	sub    esp,0xc
c001b170:	f6 05 4c 24 03 c0 01 	test   BYTE PTR ds:0xc003244c,0x1
c001b177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b17b:	74 0c                	je     c001b189 <convertLegacyIRQNumber(int)+0x1c>
c001b17d:	83 f8 0f             	cmp    eax,0xf
c001b180:	7f 0b                	jg     c001b18d <convertLegacyIRQNumber(int)+0x20>
c001b182:	0f b6 80 68 bd 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd4298]
c001b189:	83 c4 0c             	add    esp,0xc
c001b18c:	c3                   	ret    
c001b18d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b191:	83 ec 0c             	sub    esp,0xc
c001b194:	68 60 a3 02 c0       	push   0xc002a360
c001b199:	e8 0e 4e ff ff       	call   c000ffac <KePanic(char const*)>
c001b19e:	83 c4 10             	add    esp,0x10
c001b1a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1a5:	83 c4 0c             	add    esp,0xc
c001b1a8:	c3                   	ret    

c001b1a9 <KeSetupInterrupts()>:
c001b1a9:	31 c0                	xor    eax,eax
c001b1ab:	c7 80 60 34 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffccba0],0x0
c001b1b5:	83 c0 10             	add    eax,0x10
c001b1b8:	c7 80 50 24 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcdbb0],0x0
c001b1c2:	c7 80 54 34 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffccbac],0x0
c001b1cc:	c7 80 54 24 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcdbac],0x0
c001b1d6:	c7 80 58 34 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffccba8],0x0
c001b1e0:	c7 80 58 24 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcdba8],0x0
c001b1ea:	c7 80 5c 34 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffccba4],0x0
c001b1f4:	c7 80 5c 24 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcdba4],0x0
c001b1fe:	3d 00 10 00 00       	cmp    eax,0x1000
c001b203:	75 a6                	jne    c001b1ab <KeSetupInterrupts()+0x2>
c001b205:	c3                   	ret    

c001b206 <int_handler>:
c001b206:	55                   	push   ebp
c001b207:	57                   	push   edi
c001b208:	56                   	push   esi
c001b209:	53                   	push   ebx
c001b20a:	83 ec 0c             	sub    esp,0xc
c001b20d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b211:	eb 02                	jmp    c001b215 <int_handler+0xf>
c001b213:	fa                   	cli    
c001b214:	f4                   	hlt    
c001b215:	e8 8c 4d ff ff       	call   c000ffa6 <KeIsKernelInPanic()>
c001b21a:	84 c0                	test   al,al
c001b21c:	75 f5                	jne    c001b213 <int_handler+0xd>
c001b21e:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001b221:	8d 46 e0             	lea    eax,[esi-0x20]
c001b224:	83 f8 17             	cmp    eax,0x17
c001b227:	76 40                	jbe    c001b269 <int_handler+0x63>
c001b229:	c1 e6 04             	shl    esi,0x4
c001b22c:	31 db                	xor    ebx,ebx
c001b22e:	8d ae 60 34 03 c0    	lea    ebp,[esi-0x3ffccba0]
c001b234:	81 c6 60 24 03 c0    	add    esi,0xc0032460
c001b23a:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001b23e:	85 c0                	test   eax,eax
c001b240:	74 13                	je     c001b255 <int_handler+0x4f>
c001b242:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001b246:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001b249:	74 2c                	je     c001b277 <int_handler+0x71>
c001b24b:	83 ec 08             	sub    esp,0x8
c001b24e:	52                   	push   edx
c001b24f:	57                   	push   edi
c001b250:	ff d0                	call   eax
c001b252:	83 c4 10             	add    esp,0x10
c001b255:	83 c3 01             	add    ebx,0x1
c001b258:	83 fb 04             	cmp    ebx,0x4
c001b25b:	75 dd                	jne    c001b23a <int_handler+0x34>
c001b25d:	83 c4 0c             	add    esp,0xc
c001b260:	31 c0                	xor    eax,eax
c001b262:	5b                   	pop    ebx
c001b263:	31 d2                	xor    edx,edx
c001b265:	5e                   	pop    esi
c001b266:	5f                   	pop    edi
c001b267:	5d                   	pop    ebp
c001b268:	c3                   	ret    
c001b269:	83 ec 0c             	sub    esp,0xc
c001b26c:	50                   	push   eax
c001b26d:	e8 e8 fb ff ff       	call   c001ae5a <HalEndOfInterrupt(int)>
c001b272:	83 c4 10             	add    esp,0x10
c001b275:	eb b2                	jmp    c001b229 <int_handler+0x23>
c001b277:	83 ec 08             	sub    esp,0x8
c001b27a:	52                   	push   edx
c001b27b:	57                   	push   edi
c001b27c:	ff d0                	call   eax
c001b27e:	83 c4 10             	add    esp,0x10
c001b281:	83 c4 0c             	add    esp,0xc
c001b284:	5b                   	pop    ebx
c001b285:	5e                   	pop    esi
c001b286:	5f                   	pop    edi
c001b287:	5d                   	pop    ebp
c001b288:	c3                   	ret    

c001b289 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001b289:	56                   	push   esi
c001b28a:	31 c0                	xor    eax,eax
c001b28c:	53                   	push   ebx
c001b28d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b291:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b295:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b299:	89 ca                	mov    edx,ecx
c001b29b:	c1 e2 04             	shl    edx,0x4
c001b29e:	83 bc 82 60 34 03 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffccba0],0x0
c001b2a6:	74 17                	je     c001b2bf <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001b2a8:	83 c0 01             	add    eax,0x1
c001b2ab:	83 f8 04             	cmp    eax,0x4
c001b2ae:	75 ee                	jne    c001b29e <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001b2b0:	c7 44 24 0c c1 a3 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a3c1
c001b2b8:	5b                   	pop    ebx
c001b2b9:	5e                   	pop    esi
c001b2ba:	e9 ed 4c ff ff       	jmp    c000ffac <KePanic(char const*)>
c001b2bf:	8d 04 88             	lea    eax,[eax+ecx*4]
c001b2c2:	89 1c 85 60 34 03 c0 	mov    DWORD PTR [eax*4-0x3ffccba0],ebx
c001b2c9:	5b                   	pop    ebx
c001b2ca:	89 34 85 60 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdba0],esi
c001b2d1:	5e                   	pop    esi
c001b2d2:	c3                   	ret    

c001b2d3 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b2d3:	55                   	push   ebp
c001b2d4:	57                   	push   edi
c001b2d5:	56                   	push   esi
c001b2d6:	53                   	push   ebx
c001b2d7:	83 ec 0c             	sub    esp,0xc
c001b2da:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b2de:	f6 05 4c 24 03 c0 01 	test   BYTE PTR ds:0xc003244c,0x1
c001b2e5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b2e9:	8d 6e 20             	lea    ebp,[esi+0x20]
c001b2ec:	74 57                	je     c001b345 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001b2ee:	84 c0                	test   al,al
c001b2f0:	89 c7                	mov    edi,eax
c001b2f2:	74 1d                	je     c001b311 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001b2f4:	83 fe 0f             	cmp    esi,0xf
c001b2f7:	0f 8f d9 00 00 00    	jg     c001b3d6 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x103>
c001b2fd:	0f b6 b6 68 bd 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd4298]
c001b304:	0f b7 bc 36 20 1e 03 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffce1e0]
c001b30c:	d1 ef                	shr    edi,1
c001b30e:	83 e7 01             	and    edi,0x1
c001b311:	a1 c0 23 03 c0       	mov    eax,ds:0xc00323c0
c001b316:	83 ec 08             	sub    esp,0x8
c001b319:	31 db                	xor    ebx,ebx
c001b31b:	50                   	push   eax
c001b31c:	68 ce a3 02 c0       	push   0xc002a3ce
c001b321:	e8 40 bc fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001b326:	a1 c0 23 03 c0       	mov    eax,ds:0xc00323c0
c001b32b:	83 c4 10             	add    esp,0x10
c001b32e:	85 c0                	test   eax,eax
c001b330:	7f 59                	jg     c001b38b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb8>
c001b332:	8d 6e 20             	lea    ebp,[esi+0x20]
c001b335:	83 ec 0c             	sub    esp,0xc
c001b338:	68 e5 a3 02 c0       	push   0xc002a3e5
c001b33d:	e8 6a 4c ff ff       	call   c000ffac <KePanic(char const*)>
c001b342:	83 c4 10             	add    esp,0x10
c001b345:	89 e8                	mov    eax,ebp
c001b347:	31 d2                	xor    edx,edx
c001b349:	c1 e0 04             	shl    eax,0x4
c001b34c:	8b 8c 90 60 34 03 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffccba0]
c001b353:	85 c9                	test   ecx,ecx
c001b355:	0f 84 92 00 00 00    	je     c001b3ed <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x11a>
c001b35b:	83 c2 01             	add    edx,0x1
c001b35e:	83 fa 04             	cmp    edx,0x4
c001b361:	75 e9                	jne    c001b34c <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c001b363:	83 ec 0c             	sub    esp,0xc
c001b366:	68 9c a3 02 c0       	push   0xc002a39c
c001b36b:	e8 3c 4c ff ff       	call   c000ffac <KePanic(char const*)>
c001b370:	83 c4 10             	add    esp,0x10
c001b373:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b378:	83 c4 0c             	add    esp,0xc
c001b37b:	5b                   	pop    ebx
c001b37c:	5e                   	pop    esi
c001b37d:	5f                   	pop    edi
c001b37e:	5d                   	pop    ebp
c001b37f:	c3                   	ret    
c001b380:	83 c3 01             	add    ebx,0x1
c001b383:	39 1d c0 23 03 c0    	cmp    DWORD PTR ds:0xc00323c0,ebx
c001b389:	7e a7                	jle    c001b332 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001b38b:	8b 2c 9d e0 23 03 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffcdc20]
c001b392:	83 ec 08             	sub    esp,0x8
c001b395:	56                   	push   esi
c001b396:	55                   	push   ebp
c001b397:	e8 e2 db ff ff       	call   c0018f7e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001b39c:	83 c4 10             	add    esp,0x10
c001b39f:	84 c0                	test   al,al
c001b3a1:	74 dd                	je     c001b380 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001b3a3:	89 f8                	mov    eax,edi
c001b3a5:	83 ec 04             	sub    esp,0x4
c001b3a8:	8b 1c 9d e0 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdc20]
c001b3af:	8d 6e 20             	lea    ebp,[esi+0x20]
c001b3b2:	0f b6 f8             	movzx  edi,al
c001b3b5:	57                   	push   edi
c001b3b6:	89 e8                	mov    eax,ebp
c001b3b8:	6a 00                	push   0x0
c001b3ba:	0f b6 c0             	movzx  eax,al
c001b3bd:	50                   	push   eax
c001b3be:	89 f0                	mov    eax,esi
c001b3c0:	6a 00                	push   0x0
c001b3c2:	0f b6 c0             	movzx  eax,al
c001b3c5:	6a 00                	push   0x0
c001b3c7:	50                   	push   eax
c001b3c8:	53                   	push   ebx
c001b3c9:	e8 1c dd ff ff       	call   c00190ea <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001b3ce:	83 c4 20             	add    esp,0x20
c001b3d1:	e9 6f ff ff ff       	jmp    c001b345 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001b3d6:	83 ec 0c             	sub    esp,0xc
c001b3d9:	31 ff                	xor    edi,edi
c001b3db:	68 60 a3 02 c0       	push   0xc002a360
c001b3e0:	e8 c7 4b ff ff       	call   c000ffac <KePanic(char const*)>
c001b3e5:	83 c4 10             	add    esp,0x10
c001b3e8:	e9 24 ff ff ff       	jmp    c001b311 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001b3ed:	8d 04 aa             	lea    eax,[edx+ebp*4]
c001b3f0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b3f4:	89 14 85 60 34 03 c0 	mov    DWORD PTR [eax*4-0x3ffccba0],edx
c001b3fb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b3ff:	89 14 85 60 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdba0],edx
c001b406:	83 c4 0c             	add    esp,0xc
c001b409:	89 f0                	mov    eax,esi
c001b40b:	5b                   	pop    ebx
c001b40c:	5e                   	pop    esi
c001b40d:	5f                   	pop    edi
c001b40e:	5d                   	pop    ebp
c001b40f:	c3                   	ret    

c001b410 <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001b410:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b414:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b418:	c1 e0 04             	shl    eax,0x4
c001b41b:	8d 50 10             	lea    edx,[eax+0x10]
c001b41e:	39 88 60 34 03 c0    	cmp    DWORD PTR [eax-0x3ffccba0],ecx
c001b424:	74 08                	je     c001b42e <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001b426:	83 c0 04             	add    eax,0x4
c001b429:	39 d0                	cmp    eax,edx
c001b42b:	75 f1                	jne    c001b41e <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001b42d:	c3                   	ret    
c001b42e:	c7 80 60 34 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffccba0],0x0
c001b438:	c7 80 60 24 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcdba0],0x0
c001b442:	eb e2                	jmp    c001b426 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001b444 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b444:	56                   	push   esi
c001b445:	53                   	push   ebx
c001b446:	83 ec 04             	sub    esp,0x4
c001b449:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b44e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b452:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b456:	74 09                	je     c001b461 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001b458:	f6 05 4c 24 03 c0 01 	test   BYTE PTR ds:0xc003244c,0x1
c001b45f:	75 34                	jne    c001b495 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x51>
c001b461:	8d 43 20             	lea    eax,[ebx+0x20]
c001b464:	c1 e0 04             	shl    eax,0x4
c001b467:	8d 50 10             	lea    edx,[eax+0x10]
c001b46a:	39 b0 60 34 03 c0    	cmp    DWORD PTR [eax-0x3ffccba0],esi
c001b470:	74 0d                	je     c001b47f <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001b472:	83 c0 04             	add    eax,0x4
c001b475:	39 d0                	cmp    eax,edx
c001b477:	75 f1                	jne    c001b46a <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x26>
c001b479:	83 c4 04             	add    esp,0x4
c001b47c:	5b                   	pop    ebx
c001b47d:	5e                   	pop    esi
c001b47e:	c3                   	ret    
c001b47f:	c7 80 60 34 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffccba0],0x0
c001b489:	c7 80 60 24 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcdba0],0x0
c001b493:	eb dd                	jmp    c001b472 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2e>
c001b495:	83 fb 0f             	cmp    ebx,0xf
c001b498:	7f 09                	jg     c001b4a3 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x5f>
c001b49a:	0f b6 9b 68 bd 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd4298]
c001b4a1:	eb be                	jmp    c001b461 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001b4a3:	83 ec 0c             	sub    esp,0xc
c001b4a6:	68 f2 a3 02 c0       	push   0xc002a3f2
c001b4ab:	e8 fc 4a ff ff       	call   c000ffac <KePanic(char const*)>
c001b4b0:	83 c4 10             	add    esp,0x10
c001b4b3:	eb ac                	jmp    c001b461 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001b4b5:	66 90                	xchg   ax,ax
c001b4b7:	90                   	nop

c001b4b8 <picIoWait()>:
c001b4b8:	eb 00                	jmp    c001b4ba <picIoWait()+0x2>
c001b4ba:	eb 00                	jmp    c001b4bc <picIoWait()+0x4>
c001b4bc:	90                   	nop
c001b4bd:	c3                   	ret    
c001b4be:	66 90                	xchg   ax,ax

c001b4c0 <picDisable()>:
c001b4c0:	83 ec 10             	sub    esp,0x10
c001b4c3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001b4ca:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001b4cf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b4d3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b4d8:	ee                   	out    dx,al
c001b4d9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001b4e0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001b4e5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001b4e9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001b4ee:	ee                   	out    dx,al
c001b4ef:	90                   	nop
c001b4f0:	83 c4 10             	add    esp,0x10
c001b4f3:	c3                   	ret    

c001b4f4 <picGetIRQReg(int)>:
c001b4f4:	83 ec 10             	sub    esp,0x10
c001b4f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b4fb:	0f b6 c0             	movzx  eax,al
c001b4fe:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001b505:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001b509:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b50d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b512:	ee                   	out    dx,al
c001b513:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b517:	0f b6 c0             	movzx  eax,al
c001b51a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001b521:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b525:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b529:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b52e:	ee                   	out    dx,al
c001b52f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001b536:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001b53b:	89 c2                	mov    edx,eax
c001b53d:	ec                   	in     al,dx
c001b53e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b542:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b546:	0f b6 c0             	movzx  eax,al
c001b549:	c1 e0 08             	shl    eax,0x8
c001b54c:	89 c1                	mov    ecx,eax
c001b54e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001b555:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001b55a:	89 c2                	mov    edx,eax
c001b55c:	ec                   	in     al,dx
c001b55d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001b561:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001b565:	0f b6 c0             	movzx  eax,al
c001b568:	09 c8                	or     eax,ecx
c001b56a:	83 c4 10             	add    esp,0x10
c001b56d:	c3                   	ret    
c001b56e:	66 90                	xchg   ax,ax

c001b570 <picOpen()>:
c001b570:	83 ec 50             	sub    esp,0x50
c001b573:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001b57a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001b57f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b583:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b587:	ee                   	out    dx,al
c001b588:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001b58f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b594:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001b598:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b59c:	ee                   	out    dx,al
c001b59d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001b5a5:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001b5ad:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001b5b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b5b8:	89 c2                	mov    edx,eax
c001b5ba:	ec                   	in     al,dx
c001b5bb:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001b5bf:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001b5c3:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001b5c7:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001b5ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b5d2:	89 c2                	mov    edx,eax
c001b5d4:	ec                   	in     al,dx
c001b5d5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b5d9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001b5dd:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001b5e1:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001b5e8:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001b5ed:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001b5f1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b5f5:	ee                   	out    dx,al
c001b5f6:	e8 bd fe ff ff       	call   c001b4b8 <picIoWait()>
c001b5fb:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001b602:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001b607:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001b60b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b60f:	ee                   	out    dx,al
c001b610:	e8 a3 fe ff ff       	call   c001b4b8 <picIoWait()>
c001b615:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b619:	0f b6 c0             	movzx  eax,al
c001b61c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001b623:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001b627:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001b62b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b62f:	ee                   	out    dx,al
c001b630:	e8 83 fe ff ff       	call   c001b4b8 <picIoWait()>
c001b635:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001b639:	0f b6 c0             	movzx  eax,al
c001b63c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001b643:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b647:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b64b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b64f:	ee                   	out    dx,al
c001b650:	e8 63 fe ff ff       	call   c001b4b8 <picIoWait()>
c001b655:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001b65c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001b661:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001b665:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b669:	ee                   	out    dx,al
c001b66a:	e8 49 fe ff ff       	call   c001b4b8 <picIoWait()>
c001b66f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001b676:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001b67b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001b67f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b683:	ee                   	out    dx,al
c001b684:	e8 2f fe ff ff       	call   c001b4b8 <picIoWait()>
c001b689:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001b690:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001b695:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001b699:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b69d:	ee                   	out    dx,al
c001b69e:	e8 15 fe ff ff       	call   c001b4b8 <picIoWait()>
c001b6a3:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001b6aa:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001b6af:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001b6b3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b6b7:	ee                   	out    dx,al
c001b6b8:	e8 fb fd ff ff       	call   c001b4b8 <picIoWait()>
c001b6bd:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001b6c2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001b6c9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001b6cd:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001b6d1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001b6d5:	ee                   	out    dx,al
c001b6d6:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001b6db:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001b6e2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b6e6:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001b6ea:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001b6ee:	ee                   	out    dx,al
c001b6ef:	90                   	nop
c001b6f0:	83 c4 50             	add    esp,0x50
c001b6f3:	c3                   	ret    

c001b6f4 <picEOI(int)>:
c001b6f4:	83 ec 10             	sub    esp,0x10
c001b6f7:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001b6fc:	75 1e                	jne    c001b71c <picEOI(int)+0x28>
c001b6fe:	6a 0b                	push   0xb
c001b700:	e8 ef fd ff ff       	call   c001b4f4 <picGetIRQReg(int)>
c001b705:	83 c4 04             	add    esp,0x4
c001b708:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001b70d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001b712:	25 80 00 00 00       	and    eax,0x80
c001b717:	74 73                	je     c001b78c <picEOI(int)+0x98>
c001b719:	8d 76 00             	lea    esi,[esi+0x0]
c001b71c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001b721:	75 31                	jne    c001b754 <picEOI(int)+0x60>
c001b723:	6a 0b                	push   0xb
c001b725:	e8 ca fd ff ff       	call   c001b4f4 <picGetIRQReg(int)>
c001b72a:	83 c4 04             	add    esp,0x4
c001b72d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001b732:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b736:	98                   	cwde   
c001b737:	85 c0                	test   eax,eax
c001b739:	78 19                	js     c001b754 <picEOI(int)+0x60>
c001b73b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001b742:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001b747:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b74b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b750:	ee                   	out    dx,al
c001b751:	eb 3d                	jmp    c001b790 <picEOI(int)+0x9c>
c001b753:	90                   	nop
c001b754:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001b759:	7e 19                	jle    c001b774 <picEOI(int)+0x80>
c001b75b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001b762:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001b767:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b76b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b770:	ee                   	out    dx,al
c001b771:	8d 76 00             	lea    esi,[esi+0x0]
c001b774:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001b77b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001b780:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b784:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b789:	ee                   	out    dx,al
c001b78a:	eb 04                	jmp    c001b790 <picEOI(int)+0x9c>
c001b78c:	90                   	nop
c001b78d:	8d 76 00             	lea    esi,[esi+0x0]
c001b790:	83 c4 10             	add    esp,0x10
c001b793:	c3                   	ret    

c001b794 <RTC::open(int, int, void*)>:
c001b794:	31 c0                	xor    eax,eax
c001b796:	c3                   	ret    
c001b797:	90                   	nop

c001b798 <RTC::close(int, int, void*)>:
c001b798:	31 c0                	xor    eax,eax
c001b79a:	c3                   	ret    
c001b79b:	90                   	nop

c001b79c <RTC::timeInSecondsUTC()>:
c001b79c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b7a0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b7a6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b7ac:	c3                   	ret    
c001b7ad:	90                   	nop

c001b7ae <RTC::timeInDatetimeUTC()>:
c001b7ae:	53                   	push   ebx
c001b7af:	83 ec 14             	sub    esp,0x14
c001b7b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b7ba:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7bc:	50                   	push   eax
c001b7bd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b7c0:	83 c4 0c             	add    esp,0xc
c001b7c3:	52                   	push   edx
c001b7c4:	50                   	push   eax
c001b7c5:	53                   	push   ebx
c001b7c6:	e8 21 e3 fe ff       	call   c0009aec <KeSecondsToDatetime(unsigned long long)>
c001b7cb:	89 d8                	mov    eax,ebx
c001b7cd:	83 c4 14             	add    esp,0x14
c001b7d0:	5b                   	pop    ebx
c001b7d1:	c2 04 00             	ret    0x4

c001b7d4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001b7d4:	56                   	push   esi
c001b7d5:	53                   	push   ebx
c001b7d6:	83 ec 14             	sub    esp,0x14
c001b7d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b7dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b7df:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001b7e2:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b7e6:	52                   	push   edx
c001b7e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b7eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b7ef:	50                   	push   eax
c001b7f0:	e8 f7 e2 fe ff       	call   c0009aec <KeSecondsToDatetime(unsigned long long)>
c001b7f5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001b7f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b7fd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b801:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b805:	89 f0                	mov    eax,esi
c001b807:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001b80b:	83 c4 20             	add    esp,0x20
c001b80e:	5b                   	pop    ebx
c001b80f:	5e                   	pop    esi
c001b810:	ff e0                	jmp    eax

c001b812 <RTC::~RTC()>:
c001b812:	83 ec 0c             	sub    esp,0xc
c001b815:	ba 1c a4 02 c0       	mov    edx,0xc002a41c
c001b81a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b81e:	89 10                	mov    DWORD PTR [eax],edx
c001b820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b824:	83 ec 0c             	sub    esp,0xc
c001b827:	50                   	push   eax
c001b828:	e8 97 dd fe ff       	call   c00095c4 <Clock::~Clock()>
c001b82d:	83 c4 10             	add    esp,0x10
c001b830:	90                   	nop
c001b831:	83 c4 0c             	add    esp,0xc
c001b834:	c3                   	ret    
c001b835:	90                   	nop

c001b836 <RTC::~RTC()>:
c001b836:	83 ec 0c             	sub    esp,0xc
c001b839:	83 ec 0c             	sub    esp,0xc
c001b83c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b840:	e8 cd ff ff ff       	call   c001b812 <RTC::~RTC()>
c001b845:	83 c4 10             	add    esp,0x10
c001b848:	83 ec 08             	sub    esp,0x8
c001b84b:	68 60 01 00 00       	push   0x160
c001b850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b854:	e8 07 1f ff ff       	call   c000d760 <operator delete(void*, unsigned long)>
c001b859:	83 c4 10             	add    esp,0x10
c001b85c:	83 c4 0c             	add    esp,0xc
c001b85f:	c3                   	ret    

c001b860 <RTC::get_update_in_progress_flag()>:
c001b860:	83 ec 18             	sub    esp,0x18
c001b863:	6a 0a                	push   0xa
c001b865:	e8 91 d9 ff ff       	call   c00191fb <x86ReadCMOS(unsigned char)>
c001b86a:	83 c4 1c             	add    esp,0x1c
c001b86d:	0f b6 c0             	movzx  eax,al
c001b870:	c1 e8 07             	shr    eax,0x7
c001b873:	c3                   	ret    

c001b874 <RTC::completeRTCRefresh()>:
c001b874:	55                   	push   ebp
c001b875:	57                   	push   edi
c001b876:	56                   	push   esi
c001b877:	53                   	push   ebx
c001b878:	83 ec 3c             	sub    esp,0x3c
c001b87b:	8b 1d 50 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031b50
c001b881:	83 ec 0c             	sub    esp,0xc
c001b884:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b888:	e8 d3 ff ff ff       	call   c001b860 <RTC::get_update_in_progress_flag()>
c001b88d:	83 c4 10             	add    esp,0x10
c001b890:	84 c0                	test   al,al
c001b892:	74 0e                	je     c001b8a2 <RTC::completeRTCRefresh()+0x2e>
c001b894:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001b89a:	3b 05 50 1b 03 c0    	cmp    eax,DWORD PTR ds:0xc0031b50
c001b8a0:	73 df                	jae    c001b881 <RTC::completeRTCRefresh()+0xd>
c001b8a2:	83 ec 0c             	sub    esp,0xc
c001b8a5:	6a 00                	push   0x0
c001b8a7:	e8 4f d9 ff ff       	call   c00191fb <x86ReadCMOS(unsigned char)>
c001b8ac:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001b8b3:	89 c7                	mov    edi,eax
c001b8b5:	e8 41 d9 ff ff       	call   c00191fb <x86ReadCMOS(unsigned char)>
c001b8ba:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001b8c1:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001b8c5:	e8 31 d9 ff ff       	call   c00191fb <x86ReadCMOS(unsigned char)>
c001b8ca:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001b8d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001b8d5:	e8 21 d9 ff ff       	call   c00191fb <x86ReadCMOS(unsigned char)>
c001b8da:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001b8e1:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b8e5:	e8 11 d9 ff ff       	call   c00191fb <x86ReadCMOS(unsigned char)>
c001b8ea:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001b8f1:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b8f5:	e8 01 d9 ff ff       	call   c00191fb <x86ReadCMOS(unsigned char)>
c001b8fa:	0f b6 c0             	movzx  eax,al
c001b8fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001b901:	83 c4 10             	add    esp,0x10
c001b904:	8b 1d 50 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031b50
c001b90a:	83 ec 0c             	sub    esp,0xc
c001b90d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b911:	e8 4a ff ff ff       	call   c001b860 <RTC::get_update_in_progress_flag()>
c001b916:	83 c4 10             	add    esp,0x10
c001b919:	84 c0                	test   al,al
c001b91b:	74 0e                	je     c001b92b <RTC::completeRTCRefresh()+0xb7>
c001b91d:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001b923:	3b 05 50 1b 03 c0    	cmp    eax,DWORD PTR ds:0xc0031b50
c001b929:	73 df                	jae    c001b90a <RTC::completeRTCRefresh()+0x96>
c001b92b:	83 ec 0c             	sub    esp,0xc
c001b92e:	6a 00                	push   0x0
c001b930:	e8 c6 d8 ff ff       	call   c00191fb <x86ReadCMOS(unsigned char)>
c001b935:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001b93c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b940:	e8 b6 d8 ff ff       	call   c00191fb <x86ReadCMOS(unsigned char)>
c001b945:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001b94c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b950:	e8 a6 d8 ff ff       	call   c00191fb <x86ReadCMOS(unsigned char)>
c001b955:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001b95c:	88 c3                	mov    bl,al
c001b95e:	e8 98 d8 ff ff       	call   c00191fb <x86ReadCMOS(unsigned char)>
c001b963:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001b96a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b96e:	e8 88 d8 ff ff       	call   c00191fb <x86ReadCMOS(unsigned char)>
c001b973:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001b97a:	89 c6                	mov    esi,eax
c001b97c:	e8 7a d8 ff ff       	call   c00191fb <x86ReadCMOS(unsigned char)>
c001b981:	89 f9                	mov    ecx,edi
c001b983:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b987:	83 c4 10             	add    esp,0x10
c001b98a:	0f b6 e8             	movzx  ebp,al
c001b98d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b992:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001b996:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b99a:	74 27                	je     c001b9c3 <RTC::completeRTCRefresh()+0x14f>
c001b99c:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001b9a0:	89 f0                	mov    eax,esi
c001b9a2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001b9a6:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001b9aa:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b9ae:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001b9b2:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001b9b6:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b9ba:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b9be:	e9 41 ff ff ff       	jmp    c001b904 <RTC::completeRTCRefresh()+0x90>
c001b9c3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b9c8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b9cc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b9d0:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c001b9d4:	75 c6                	jne    c001b99c <RTC::completeRTCRefresh()+0x128>
c001b9d6:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b9db:	89 f1                	mov    ecx,esi
c001b9dd:	0f b6 fb             	movzx  edi,bl
c001b9e0:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001b9e4:	0f b6 c9             	movzx  ecx,cl
c001b9e7:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001b9eb:	89 f1                	mov    ecx,esi
c001b9ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b9f1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b9f5:	0f 94 c2             	sete   dl
c001b9f8:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001b9fc:	0f 94 c0             	sete   al
c001b9ff:	21 d0                	and    eax,edx
c001ba01:	31 d2                	xor    edx,edx
c001ba03:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001ba07:	0f 94 c2             	sete   dl
c001ba0a:	85 c2                	test   edx,eax
c001ba0c:	74 8e                	je     c001b99c <RTC::completeRTCRefresh()+0x128>
c001ba0e:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001ba12:	75 88                	jne    c001b99c <RTC::completeRTCRefresh()+0x128>
c001ba14:	83 ec 0c             	sub    esp,0xc
c001ba17:	6a 0b                	push   0xb
c001ba19:	e8 dd d7 ff ff       	call   c00191fb <x86ReadCMOS(unsigned char)>
c001ba1e:	83 c4 10             	add    esp,0x10
c001ba21:	a8 04                	test   al,0x4
c001ba23:	75 7a                	jne    c001ba9f <RTC::completeRTCRefresh()+0x22b>
c001ba25:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ba29:	c1 ef 04             	shr    edi,0x4
c001ba2c:	83 e6 0f             	and    esi,0xf
c001ba2f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ba33:	c1 ed 04             	shr    ebp,0x4
c001ba36:	6b ed 0a             	imul   ebp,ebp,0xa
c001ba39:	c1 ea 04             	shr    edx,0x4
c001ba3c:	6b d2 0a             	imul   edx,edx,0xa
c001ba3f:	83 e1 0f             	and    ecx,0xf
c001ba42:	01 d1                	add    ecx,edx
c001ba44:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ba48:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001ba4c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ba50:	c1 ea 04             	shr    edx,0x4
c001ba53:	6b d2 0a             	imul   edx,edx,0xa
c001ba56:	83 e1 0f             	and    ecx,0xf
c001ba59:	01 d1                	add    ecx,edx
c001ba5b:	89 fa                	mov    edx,edi
c001ba5d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001ba61:	83 e2 07             	and    edx,0x7
c001ba64:	89 d9                	mov    ecx,ebx
c001ba66:	6b d2 0a             	imul   edx,edx,0xa
c001ba69:	83 e1 0f             	and    ecx,0xf
c001ba6c:	83 e3 80             	and    ebx,0xffffff80
c001ba6f:	01 d1                	add    ecx,edx
c001ba71:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ba75:	09 cb                	or     ebx,ecx
c001ba77:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba7b:	c1 ea 04             	shr    edx,0x4
c001ba7e:	6b d2 0a             	imul   edx,edx,0xa
c001ba81:	83 e1 0f             	and    ecx,0xf
c001ba84:	01 d1                	add    ecx,edx
c001ba86:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ba8a:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001ba8e:	c1 ea 04             	shr    edx,0x4
c001ba91:	6b d2 0a             	imul   edx,edx,0xa
c001ba94:	01 d6                	add    esi,edx
c001ba96:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ba9a:	83 e2 0f             	and    edx,0xf
c001ba9d:	01 d5                	add    ebp,edx
c001ba9f:	a8 02                	test   al,0x2
c001baa1:	75 15                	jne    c001bab8 <RTC::completeRTCRefresh()+0x244>
c001baa3:	f6 c3 80             	test   bl,0x80
c001baa6:	74 10                	je     c001bab8 <RTC::completeRTCRefresh()+0x244>
c001baa8:	83 e3 7f             	and    ebx,0x7f
c001baab:	b9 18 00 00 00       	mov    ecx,0x18
c001bab0:	8d 43 0c             	lea    eax,[ebx+0xc]
c001bab3:	99                   	cdq    
c001bab4:	f7 f9                	idiv   ecx
c001bab6:	88 d3                	mov    bl,dl
c001bab8:	8d bd 6c 07 00 00    	lea    edi,[ebp+0x76c]
c001babe:	81 ff b1 07 00 00    	cmp    edi,0x7b1
c001bac4:	77 06                	ja     c001bacc <RTC::completeRTCRefresh()+0x258>
c001bac6:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c001bacc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bad1:	31 c9                	xor    ecx,ecx
c001bad3:	31 d2                	xor    edx,edx
c001bad5:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001bad9:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001badd:	89 cd                	mov    ebp,ecx
c001badf:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c001bae3:	c1 e7 10             	shl    edi,0x10
c001bae6:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001baec:	c1 e0 10             	shl    eax,0x10
c001baef:	09 c5                	or     ebp,eax
c001baf1:	89 e9                	mov    ecx,ebp
c001baf3:	0f b7 c2             	movzx  eax,dx
c001baf6:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001bafa:	09 f8                	or     eax,edi
c001bafc:	89 c2                	mov    edx,eax
c001bafe:	50                   	push   eax
c001baff:	50                   	push   eax
c001bb00:	88 d9                	mov    cl,bl
c001bb02:	51                   	push   ecx
c001bb03:	52                   	push   edx
c001bb04:	e8 f3 db fe ff       	call   c00096fc <KeDatetimeToSeconds(datetime_t)>
c001bb09:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001bb0d:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001bb13:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001bb19:	83 c4 4c             	add    esp,0x4c
c001bb1c:	5b                   	pop    ebx
c001bb1d:	5e                   	pop    esi
c001bb1e:	5f                   	pop    edi
c001bb1f:	5d                   	pop    ebp
c001bb20:	c3                   	ret    
c001bb21:	90                   	nop

c001bb22 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001bb22:	55                   	push   ebp
c001bb23:	57                   	push   edi
c001bb24:	56                   	push   esi
c001bb25:	53                   	push   ebx
c001bb26:	83 ec 34             	sub    esp,0x34
c001bb29:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001bb2d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001bb31:	6a 00                	push   0x0
c001bb33:	6a 00                	push   0x0
c001bb35:	e8 15 d7 ff ff       	call   c001924f <x86WriteCMOS(unsigned char, unsigned char)>
c001bb3a:	5d                   	pop    ebp
c001bb3b:	89 fb                	mov    ebx,edi
c001bb3d:	58                   	pop    eax
c001bb3e:	6a 00                	push   0x0
c001bb40:	6a 02                	push   0x2
c001bb42:	e8 08 d7 ff ff       	call   c001924f <x86WriteCMOS(unsigned char, unsigned char)>
c001bb47:	89 f8                	mov    eax,edi
c001bb49:	89 f9                	mov    ecx,edi
c001bb4b:	0f b6 c4             	movzx  eax,ah
c001bb4e:	31 d2                	xor    edx,edx
c001bb50:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bb54:	c1 e9 10             	shr    ecx,0x10
c001bb57:	89 f0                	mov    eax,esi
c001bb59:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001bb5d:	89 f0                	mov    eax,esi
c001bb5f:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001bb63:	0f b6 c4             	movzx  eax,ah
c001bb66:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb6a:	89 f0                	mov    eax,esi
c001bb6c:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001bb70:	c1 e8 10             	shr    eax,0x10
c001bb73:	b9 64 00 00 00       	mov    ecx,0x64
c001bb78:	f7 f1                	div    ecx
c001bb7a:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001bb81:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001bb85:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001bb89:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001bb8d:	e8 69 d6 ff ff       	call   c00191fb <x86ReadCMOS(unsigned char)>
c001bb92:	83 c4 10             	add    esp,0x10
c001bb95:	a8 04                	test   al,0x4
c001bb97:	89 c5                	mov    ebp,eax
c001bb99:	75 6e                	jne    c001bc09 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001bb9b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bb9f:	31 d2                	xor    edx,edx
c001bba1:	0f b6 c1             	movzx  eax,cl
c001bba4:	b9 0a 00 00 00       	mov    ecx,0xa
c001bba9:	f7 f1                	div    ecx
c001bbab:	c1 e0 04             	shl    eax,0x4
c001bbae:	09 d0                	or     eax,edx
c001bbb0:	31 d2                	xor    edx,edx
c001bbb2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bbb6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001bbbb:	f7 f1                	div    ecx
c001bbbd:	c1 e0 04             	shl    eax,0x4
c001bbc0:	09 d0                	or     eax,edx
c001bbc2:	31 d2                	xor    edx,edx
c001bbc4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bbc8:	0f b6 c3             	movzx  eax,bl
c001bbcb:	f7 f1                	div    ecx
c001bbcd:	c1 e0 04             	shl    eax,0x4
c001bbd0:	09 d0                	or     eax,edx
c001bbd2:	31 d2                	xor    edx,edx
c001bbd4:	89 c3                	mov    ebx,eax
c001bbd6:	89 f0                	mov    eax,esi
c001bbd8:	0f b6 c0             	movzx  eax,al
c001bbdb:	f7 f1                	div    ecx
c001bbdd:	c1 e0 04             	shl    eax,0x4
c001bbe0:	09 d0                	or     eax,edx
c001bbe2:	31 d2                	xor    edx,edx
c001bbe4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bbe8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bbed:	f7 f1                	div    ecx
c001bbef:	c1 e0 04             	shl    eax,0x4
c001bbf2:	09 d0                	or     eax,edx
c001bbf4:	31 d2                	xor    edx,edx
c001bbf6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bbfa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bbfe:	f7 f1                	div    ecx
c001bc00:	c1 e0 04             	shl    eax,0x4
c001bc03:	09 d0                	or     eax,edx
c001bc05:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bc09:	83 e5 02             	and    ebp,0x2
c001bc0c:	75 1e                	jne    c001bc2c <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001bc0e:	0f b6 c3             	movzx  eax,bl
c001bc11:	83 f8 0b             	cmp    eax,0xb
c001bc14:	76 10                	jbe    c001bc26 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001bc16:	8d 53 f4             	lea    edx,[ebx-0xc]
c001bc19:	84 d2                	test   dl,dl
c001bc1b:	88 d3                	mov    bl,dl
c001bc1d:	75 02                	jne    c001bc21 <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001bc1f:	b3 0c                	mov    bl,0xc
c001bc21:	83 cb 80             	or     ebx,0xffffff80
c001bc24:	eb 06                	jmp    c001bc2c <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001bc26:	85 c0                	test   eax,eax
c001bc28:	75 02                	jne    c001bc2c <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001bc2a:	b3 0c                	mov    bl,0xc
c001bc2c:	50                   	push   eax
c001bc2d:	0f b6 db             	movzx  ebx,bl
c001bc30:	50                   	push   eax
c001bc31:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001bc36:	52                   	push   edx
c001bc37:	6a 00                	push   0x0
c001bc39:	e8 11 d6 ff ff       	call   c001924f <x86WriteCMOS(unsigned char, unsigned char)>
c001bc3e:	5a                   	pop    edx
c001bc3f:	59                   	pop    ecx
c001bc40:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bc45:	50                   	push   eax
c001bc46:	6a 02                	push   0x2
c001bc48:	e8 02 d6 ff ff       	call   c001924f <x86WriteCMOS(unsigned char, unsigned char)>
c001bc4d:	5e                   	pop    esi
c001bc4e:	5f                   	pop    edi
c001bc4f:	53                   	push   ebx
c001bc50:	6a 04                	push   0x4
c001bc52:	e8 f8 d5 ff ff       	call   c001924f <x86WriteCMOS(unsigned char, unsigned char)>
c001bc57:	5d                   	pop    ebp
c001bc58:	58                   	pop    eax
c001bc59:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001bc5e:	52                   	push   edx
c001bc5f:	6a 07                	push   0x7
c001bc61:	e8 e9 d5 ff ff       	call   c001924f <x86WriteCMOS(unsigned char, unsigned char)>
c001bc66:	58                   	pop    eax
c001bc67:	5a                   	pop    edx
c001bc68:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001bc6d:	50                   	push   eax
c001bc6e:	6a 08                	push   0x8
c001bc70:	e8 da d5 ff ff       	call   c001924f <x86WriteCMOS(unsigned char, unsigned char)>
c001bc75:	59                   	pop    ecx
c001bc76:	5b                   	pop    ebx
c001bc77:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001bc7c:	55                   	push   ebp
c001bc7d:	6a 09                	push   0x9
c001bc7f:	e8 cb d5 ff ff       	call   c001924f <x86WriteCMOS(unsigned char, unsigned char)>
c001bc84:	5e                   	pop    esi
c001bc85:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001bc89:	e8 e6 fb ff ff       	call   c001b874 <RTC::completeRTCRefresh()>
c001bc8e:	83 c4 3c             	add    esp,0x3c
c001bc91:	b0 01                	mov    al,0x1
c001bc93:	5b                   	pop    ebx
c001bc94:	5e                   	pop    esi
c001bc95:	5f                   	pop    edi
c001bc96:	5d                   	pop    ebp
c001bc97:	c3                   	ret    

c001bc98 <rtcIRQHandler(regs*, void*)>:
c001bc98:	53                   	push   ebx
c001bc99:	83 ec 14             	sub    esp,0x14
c001bc9c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bca0:	6a 0c                	push   0xc
c001bca2:	e8 54 d5 ff ff       	call   c00191fb <x86ReadCMOS(unsigned char)>
c001bca7:	83 c4 10             	add    esp,0x10
c001bcaa:	a8 80                	test   al,0x80
c001bcac:	74 24                	je     c001bcd2 <rtcIRQHandler(regs*, void*)+0x3a>
c001bcae:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001bcb5:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001bcbc:	66 ff 05 60 44 03 c0 	inc    WORD PTR ds:0xc0034460
c001bcc3:	75 0d                	jne    c001bcd2 <rtcIRQHandler(regs*, void*)+0x3a>
c001bcc5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001bcc9:	83 c4 08             	add    esp,0x8
c001bccc:	5b                   	pop    ebx
c001bccd:	e9 a2 fb ff ff       	jmp    c001b874 <RTC::completeRTCRefresh()>
c001bcd2:	83 c4 08             	add    esp,0x8
c001bcd5:	5b                   	pop    ebx
c001bcd6:	c3                   	ret    
c001bcd7:	90                   	nop

c001bcd8 <RTC::RTC()>:
c001bcd8:	83 ec 1c             	sub    esp,0x1c
c001bcdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcdf:	83 ec 08             	sub    esp,0x8
c001bce2:	68 ff a3 02 c0       	push   0xc002a3ff
c001bce7:	50                   	push   eax
c001bce8:	e8 a1 d8 fe ff       	call   c000958e <Clock::Clock(char const*)>
c001bced:	83 c4 10             	add    esp,0x10
c001bcf0:	ba 1c a4 02 c0       	mov    edx,0xc002a41c
c001bcf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcf9:	89 10                	mov    DWORD PTR [eax],edx
c001bcfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcff:	83 ec 0c             	sub    esp,0xc
c001bd02:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bd06:	6a 01                	push   0x1
c001bd08:	68 98 bc 01 c0       	push   0xc001bc98
c001bd0d:	6a 08                	push   0x8
c001bd0f:	50                   	push   eax
c001bd10:	e8 65 e1 fe ff       	call   c0009e7a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bd15:	83 c4 20             	add    esp,0x20
c001bd18:	89 c2                	mov    edx,eax
c001bd1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd1e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001bd24:	fa                   	cli    
c001bd25:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001bd2a:	83 c0 01             	add    eax,0x1
c001bd2d:	a3 30 23 03 c0       	mov    ds:0xc0032330,eax
c001bd32:	83 ec 0c             	sub    esp,0xc
c001bd35:	6a 0b                	push   0xb
c001bd37:	e8 bf d4 ff ff       	call   c00191fb <x86ReadCMOS(unsigned char)>
c001bd3c:	83 c4 10             	add    esp,0x10
c001bd3f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001bd43:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bd47:	83 c8 10             	or     eax,0x10
c001bd4a:	0f b6 c0             	movzx  eax,al
c001bd4d:	83 ec 08             	sub    esp,0x8
c001bd50:	50                   	push   eax
c001bd51:	6a 0b                	push   0xb
c001bd53:	e8 f7 d4 ff ff       	call   c001924f <x86WriteCMOS(unsigned char, unsigned char)>
c001bd58:	83 c4 10             	add    esp,0x10
c001bd5b:	83 ec 0c             	sub    esp,0xc
c001bd5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bd62:	e8 0d fb ff ff       	call   c001b874 <RTC::completeRTCRefresh()>
c001bd67:	83 c4 10             	add    esp,0x10
c001bd6a:	f0 83 2d 30 23 03 c0 01 	lock sub DWORD PTR ds:0xc0032330,0x1
c001bd72:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001bd77:	85 c0                	test   eax,eax
c001bd79:	75 01                	jne    c001bd7c <RTC::RTC()+0xa4>
c001bd7b:	fb                   	sti    
c001bd7c:	90                   	nop
c001bd7d:	83 c4 1c             	add    esp,0x1c
c001bd80:	c3                   	ret    
c001bd81:	66 90                	xchg   ax,ax
c001bd83:	90                   	nop

c001bd84 <HalConsoleScroll(int, int)>:
c001bd84:	83 ec 10             	sub    esp,0x10
c001bd87:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001bd8f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001bd97:	90                   	nop
c001bd98:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001bd9d:	0f 8f e1 00 00 00    	jg     c001be84 <HalConsoleScroll(int, int)+0x100>
c001bda3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bdab:	90                   	nop
c001bdac:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001bdb4:	0f 8f be 00 00 00    	jg     c001be78 <HalConsoleScroll(int, int)+0xf4>
c001bdba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bdbe:	89 d0                	mov    eax,edx
c001bdc0:	c1 e0 02             	shl    eax,0x2
c001bdc3:	01 d0                	add    eax,edx
c001bdc5:	c1 e0 05             	shl    eax,0x5
c001bdc8:	89 c2                	mov    edx,eax
c001bdca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bdce:	01 d0                	add    eax,edx
c001bdd0:	89 c2                	mov    edx,eax
c001bdd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdd6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001bdd9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bddd:	89 d0                	mov    eax,edx
c001bddf:	c1 e0 02             	shl    eax,0x2
c001bde2:	01 d0                	add    eax,edx
c001bde4:	c1 e0 05             	shl    eax,0x5
c001bde7:	89 c2                	mov    edx,eax
c001bde9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bded:	01 d0                	add    eax,edx
c001bdef:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001bdf5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdf9:	01 d0                	add    eax,edx
c001bdfb:	8a 11                	mov    dl,BYTE PTR [ecx]
c001bdfd:	88 10                	mov    BYTE PTR [eax],dl
c001bdff:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001be04:	75 66                	jne    c001be6c <HalConsoleScroll(int, int)+0xe8>
c001be06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001be0a:	83 e0 01             	and    eax,0x1
c001be0d:	74 39                	je     c001be48 <HalConsoleScroll(int, int)+0xc4>
c001be0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001be13:	83 e0 0f             	and    eax,0xf
c001be16:	88 c2                	mov    dl,al
c001be18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001be1c:	c1 e0 04             	shl    eax,0x4
c001be1f:	09 d0                	or     eax,edx
c001be21:	88 c1                	mov    cl,al
c001be23:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001be27:	89 d0                	mov    eax,edx
c001be29:	c1 e0 02             	shl    eax,0x2
c001be2c:	01 d0                	add    eax,edx
c001be2e:	c1 e0 05             	shl    eax,0x5
c001be31:	89 c2                	mov    edx,eax
c001be33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001be37:	01 d0                	add    eax,edx
c001be39:	89 c2                	mov    edx,eax
c001be3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be3f:	01 d0                	add    eax,edx
c001be41:	88 ca                	mov    dl,cl
c001be43:	88 10                	mov    BYTE PTR [eax],dl
c001be45:	eb 25                	jmp    c001be6c <HalConsoleScroll(int, int)+0xe8>
c001be47:	90                   	nop
c001be48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001be4c:	89 d0                	mov    eax,edx
c001be4e:	c1 e0 02             	shl    eax,0x2
c001be51:	01 d0                	add    eax,edx
c001be53:	c1 e0 05             	shl    eax,0x5
c001be56:	89 c2                	mov    edx,eax
c001be58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001be5c:	01 d0                	add    eax,edx
c001be5e:	89 c2                	mov    edx,eax
c001be60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be64:	01 d0                	add    eax,edx
c001be66:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001be69:	8d 76 00             	lea    esi,[esi+0x0]
c001be6c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001be71:	e9 36 ff ff ff       	jmp    c001bdac <HalConsoleScroll(int, int)+0x28>
c001be76:	66 90                	xchg   ax,ax
c001be78:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001be7d:	e9 16 ff ff ff       	jmp    c001bd98 <HalConsoleScroll(int, int)+0x14>
c001be82:	66 90                	xchg   ax,ax
c001be84:	90                   	nop
c001be85:	83 c4 10             	add    esp,0x10
c001be88:	c3                   	ret    
c001be89:	8d 76 00             	lea    esi,[esi+0x0]

c001be8c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001be8c:	83 ec 14             	sub    esp,0x14
c001be8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001be93:	88 04 24             	mov    BYTE PTR [esp],al
c001be96:	8a 04 24             	mov    al,BYTE PTR [esp]
c001be99:	0f b6 c0             	movzx  eax,al
c001be9c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bea0:	89 d1                	mov    ecx,edx
c001bea2:	83 e1 0f             	and    ecx,0xf
c001bea5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bea9:	c1 e2 04             	shl    edx,0x4
c001beac:	0f b6 d2             	movzx  edx,dl
c001beaf:	09 ca                	or     edx,ecx
c001beb1:	c1 e2 08             	shl    edx,0x8
c001beb4:	09 d0                	or     eax,edx
c001beb6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001bebb:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001bec3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bec7:	89 d0                	mov    eax,edx
c001bec9:	c1 e0 02             	shl    eax,0x2
c001becc:	01 d0                	add    eax,edx
c001bece:	c1 e0 04             	shl    eax,0x4
c001bed1:	89 c2                	mov    edx,eax
c001bed3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bed7:	01 d0                	add    eax,edx
c001bed9:	d1 e0                	shl    eax,1
c001bedb:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001bedf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bee3:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c001bee8:	66 89 10             	mov    WORD PTR [eax],dx
c001beeb:	90                   	nop
c001beec:	83 c4 14             	add    esp,0x14
c001beef:	c3                   	ret    

c001bef0 <HalConsoleCursorUpdate(int, int)>:
c001bef0:	83 ec 20             	sub    esp,0x20
c001bef3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bef7:	89 c2                	mov    edx,eax
c001bef9:	c1 e2 02             	shl    edx,0x2
c001befc:	01 d0                	add    eax,edx
c001befe:	c1 e0 04             	shl    eax,0x4
c001bf01:	89 c2                	mov    edx,eax
c001bf03:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bf07:	01 d0                	add    eax,edx
c001bf09:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001bf0e:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001bf15:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001bf1a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bf1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bf22:	ee                   	out    dx,al
c001bf23:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001bf28:	0f b6 c0             	movzx  eax,al
c001bf2b:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001bf32:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001bf36:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001bf3a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bf3e:	ee                   	out    dx,al
c001bf3f:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001bf46:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001bf4b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001bf4f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bf53:	ee                   	out    dx,al
c001bf54:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001bf59:	c1 e8 08             	shr    eax,0x8
c001bf5c:	0f b6 c0             	movzx  eax,al
c001bf5f:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001bf66:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001bf6a:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001bf6e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bf72:	ee                   	out    dx,al
c001bf73:	90                   	nop
c001bf74:	83 c4 20             	add    esp,0x20
c001bf77:	c3                   	ret    

c001bf78 <FAT::getName()>:
c001bf78:	b8 50 a4 02 c0       	mov    eax,0xc002a450
c001bf7d:	c3                   	ret    
c001bf7e:	66 90                	xchg   ax,ax

c001bf80 <FAT::tell(void*, unsigned long long*)>:
c001bf80:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001bf85:	75 09                	jne    c001bf90 <FAT::tell(void*, unsigned long long*)+0x10>
c001bf87:	b8 04 00 00 00       	mov    eax,0x4
c001bf8c:	c3                   	ret    
c001bf8d:	8d 76 00             	lea    esi,[esi+0x0]
c001bf90:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bf95:	75 09                	jne    c001bfa0 <FAT::tell(void*, unsigned long long*)+0x20>
c001bf97:	b8 04 00 00 00       	mov    eax,0x4
c001bf9c:	c3                   	ret    
c001bf9d:	8d 76 00             	lea    esi,[esi+0x0]
c001bfa0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bfa4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bfa7:	ba 00 00 00 00       	mov    edx,0x0
c001bfac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bfb0:	89 01                	mov    DWORD PTR [ecx],eax
c001bfb2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bfb5:	b8 00 00 00 00       	mov    eax,0x0
c001bfba:	c3                   	ret    
c001bfbb:	90                   	nop

c001bfbc <FAT::stat(void*, unsigned long long*)>:
c001bfbc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001bfc1:	75 09                	jne    c001bfcc <FAT::stat(void*, unsigned long long*)+0x10>
c001bfc3:	b8 04 00 00 00       	mov    eax,0x4
c001bfc8:	c3                   	ret    
c001bfc9:	8d 76 00             	lea    esi,[esi+0x0]
c001bfcc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bfd1:	75 09                	jne    c001bfdc <FAT::stat(void*, unsigned long long*)+0x20>
c001bfd3:	b8 04 00 00 00       	mov    eax,0x4
c001bfd8:	c3                   	ret    
c001bfd9:	8d 76 00             	lea    esi,[esi+0x0]
c001bfdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bfe0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001bfe3:	ba 00 00 00 00       	mov    edx,0x0
c001bfe8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bfec:	89 01                	mov    DWORD PTR [ecx],eax
c001bfee:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bff1:	b8 00 00 00 00       	mov    eax,0x0
c001bff6:	c3                   	ret    
c001bff7:	90                   	nop

c001bff8 <FAT::~FAT()>:
c001bff8:	83 ec 0c             	sub    esp,0xc
c001bffb:	ba 9c a4 02 c0       	mov    edx,0xc002a49c
c001c000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c004:	89 10                	mov    DWORD PTR [eax],edx
c001c006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c00a:	83 ec 0c             	sub    esp,0xc
c001c00d:	50                   	push   eax
c001c00e:	e8 9b c2 fe ff       	call   c00082ae <Filesystem::~Filesystem()>
c001c013:	83 c4 10             	add    esp,0x10
c001c016:	90                   	nop
c001c017:	83 c4 0c             	add    esp,0xc
c001c01a:	c3                   	ret    
c001c01b:	90                   	nop

c001c01c <FAT::~FAT()>:
c001c01c:	83 ec 0c             	sub    esp,0xc
c001c01f:	83 ec 0c             	sub    esp,0xc
c001c022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c026:	e8 cd ff ff ff       	call   c001bff8 <FAT::~FAT()>
c001c02b:	83 c4 10             	add    esp,0x10
c001c02e:	83 ec 08             	sub    esp,0x8
c001c031:	6a 08                	push   0x8
c001c033:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c037:	e8 24 17 ff ff       	call   c000d760 <operator delete(void*, unsigned long)>
c001c03c:	83 c4 10             	add    esp,0x10
c001c03f:	83 c4 0c             	add    esp,0xc
c001c042:	c3                   	ret    
c001c043:	90                   	nop

c001c044 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001c044:	83 ec 1c             	sub    esp,0x1c
c001c047:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001c04e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001c053:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c057:	8b 04 85 a0 44 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcbb60]
c001c05e:	83 f8 ff             	cmp    eax,0xffffffff
c001c061:	75 35                	jne    c001c098 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001c063:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001c067:	88 c2                	mov    dl,al
c001c069:	a1 80 44 03 c0       	mov    eax,ds:0xc0034480
c001c06e:	01 d0                	add    eax,edx
c001c070:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001c074:	8b 15 80 44 03 c0    	mov    edx,DWORD PTR ds:0xc0034480
c001c07a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c07e:	89 14 85 a0 44 03 c0 	mov    DWORD PTR [eax*4-0x3ffcbb60],edx
c001c085:	a1 80 44 03 c0       	mov    eax,ds:0xc0034480
c001c08a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c08e:	89 14 85 20 45 03 c0 	mov    DWORD PTR [eax*4-0x3ffcbae0],edx
c001c095:	eb 19                	jmp    c001c0b0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001c097:	90                   	nop
c001c098:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001c09c:	88 c2                	mov    dl,al
c001c09e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c0a2:	8b 04 85 a0 44 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcbb60]
c001c0a9:	01 d0                	add    eax,edx
c001c0ab:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001c0af:	90                   	nop
c001c0b0:	83 ec 04             	sub    esp,0x4
c001c0b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c0b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c0bb:	8d 44 24 15          	lea    eax,[esp+0x15]
c001c0bf:	50                   	push   eax
c001c0c0:	e8 0f 91 fe ff       	call   c00051d4 <f_getlabel>
c001c0c5:	83 c4 10             	add    esp,0x10
c001c0c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0cc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c0d1:	75 09                	jne    c001c0dc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001c0d3:	b8 00 00 00 00       	mov    eax,0x0
c001c0d8:	eb 0a                	jmp    c001c0e4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001c0da:	66 90                	xchg   ax,ax
c001c0dc:	b8 01 00 00 00       	mov    eax,0x1
c001c0e1:	8d 76 00             	lea    esi,[esi+0x0]
c001c0e4:	83 c4 1c             	add    esp,0x1c
c001c0e7:	c3                   	ret    

c001c0e8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001c0e8:	53                   	push   ebx
c001c0e9:	83 ec 58             	sub    esp,0x58
c001c0ec:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001c0f4:	8d 54 24 10          	lea    edx,[esp+0x10]
c001c0f8:	b9 00 00 00 00       	mov    ecx,0x0
c001c0fd:	b8 3c 00 00 00       	mov    eax,0x3c
c001c102:	83 e0 f8             	and    eax,0xfffffff8
c001c105:	89 c3                	mov    ebx,eax
c001c107:	b8 00 00 00 00       	mov    eax,0x0
c001c10c:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c001c110:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c001c114:	83 c0 08             	add    eax,0x8
c001c117:	39 d8                	cmp    eax,ebx
c001c119:	72 f1                	jb     c001c10c <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c001c11b:	01 c2                	add    edx,eax
c001c11d:	89 0a                	mov    DWORD PTR [edx],ecx
c001c11f:	83 c2 04             	add    edx,0x4
c001c122:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001c126:	8b 04 85 a0 44 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcbb60]
c001c12d:	83 f8 ff             	cmp    eax,0xffffffff
c001c130:	75 36                	jne    c001c168 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c001c132:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c136:	88 c2                	mov    dl,al
c001c138:	a1 80 44 03 c0       	mov    eax,ds:0xc0034480
c001c13d:	01 d0                	add    eax,edx
c001c13f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c143:	8b 15 80 44 03 c0    	mov    edx,DWORD PTR ds:0xc0034480
c001c149:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001c14d:	89 14 85 a0 44 03 c0 	mov    DWORD PTR [eax*4-0x3ffcbb60],edx
c001c154:	a1 80 44 03 c0       	mov    eax,ds:0xc0034480
c001c159:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001c15d:	89 14 85 20 45 03 c0 	mov    DWORD PTR [eax*4-0x3ffcbae0],edx
c001c164:	eb 1a                	jmp    c001c180 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c001c166:	66 90                	xchg   ax,ax
c001c168:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c16c:	88 c2                	mov    dl,al
c001c16e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001c172:	8b 04 85 a0 44 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcbb60]
c001c179:	01 d0                	add    eax,edx
c001c17b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c17f:	90                   	nop
c001c180:	83 ec 08             	sub    esp,0x8
c001c183:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001c187:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c18b:	50                   	push   eax
c001c18c:	e8 df 46 fe ff       	call   c0000870 <strcat>
c001c191:	83 c4 10             	add    esp,0x10
c001c194:	83 ec 0c             	sub    esp,0xc
c001c197:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c19b:	50                   	push   eax
c001c19c:	e8 87 91 fe ff       	call   c0005328 <f_setlabel>
c001c1a1:	83 c4 10             	add    esp,0x10
c001c1a4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c1a8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001c1ad:	75 09                	jne    c001c1b8 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c001c1af:	b8 00 00 00 00       	mov    eax,0x0
c001c1b4:	eb 0a                	jmp    c001c1c0 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c001c1b6:	66 90                	xchg   ax,ax
c001c1b8:	b8 01 00 00 00       	mov    eax,0x1
c001c1bd:	8d 76 00             	lea    esi,[esi+0x0]
c001c1c0:	83 c4 58             	add    esp,0x58
c001c1c3:	5b                   	pop    ebx
c001c1c4:	c3                   	ret    
c001c1c5:	90                   	nop
c001c1c6:	66 90                	xchg   ax,ax

c001c1c8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001c1c8:	83 ec 2c             	sub    esp,0x2c
c001c1cb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001c1d3:	83 ec 08             	sub    esp,0x8
c001c1d6:	68 74 a4 02 c0       	push   0xc002a474
c001c1db:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c1df:	e8 9c 45 fe ff       	call   c0000780 <strcmp>
c001c1e4:	83 c4 10             	add    esp,0x10
c001c1e7:	85 c0                	test   eax,eax
c001c1e9:	0f 94 c0             	sete   al
c001c1ec:	0f b6 c0             	movzx  eax,al
c001c1ef:	85 c0                	test   eax,eax
c001c1f1:	74 0d                	je     c001c200 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001c1f3:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001c1fb:	e9 c0 00 00 00       	jmp    c001c2c0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001c200:	83 ec 08             	sub    esp,0x8
c001c203:	68 66 a4 02 c0       	push   0xc002a466
c001c208:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c20c:	e8 6f 45 fe ff       	call   c0000780 <strcmp>
c001c211:	83 c4 10             	add    esp,0x10
c001c214:	85 c0                	test   eax,eax
c001c216:	0f 94 c0             	sete   al
c001c219:	0f b6 c0             	movzx  eax,al
c001c21c:	85 c0                	test   eax,eax
c001c21e:	74 10                	je     c001c230 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001c220:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001c228:	e9 93 00 00 00       	jmp    c001c2c0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001c22d:	8d 76 00             	lea    esi,[esi+0x0]
c001c230:	83 ec 08             	sub    esp,0x8
c001c233:	68 6c a4 02 c0       	push   0xc002a46c
c001c238:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c23c:	e8 3f 45 fe ff       	call   c0000780 <strcmp>
c001c241:	83 c4 10             	add    esp,0x10
c001c244:	85 c0                	test   eax,eax
c001c246:	0f 94 c0             	sete   al
c001c249:	0f b6 c0             	movzx  eax,al
c001c24c:	85 c0                	test   eax,eax
c001c24e:	74 0c                	je     c001c25c <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001c250:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001c258:	eb 66                	jmp    c001c2c0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001c25a:	66 90                	xchg   ax,ax
c001c25c:	83 ec 08             	sub    esp,0x8
c001c25f:	68 3c 74 02 c0       	push   0xc002743c
c001c264:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c268:	e8 13 45 fe ff       	call   c0000780 <strcmp>
c001c26d:	83 c4 10             	add    esp,0x10
c001c270:	85 c0                	test   eax,eax
c001c272:	0f 94 c0             	sete   al
c001c275:	0f b6 c0             	movzx  eax,al
c001c278:	85 c0                	test   eax,eax
c001c27a:	74 0c                	je     c001c288 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001c27c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001c284:	eb 3a                	jmp    c001c2c0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001c286:	66 90                	xchg   ax,ax
c001c288:	83 ec 08             	sub    esp,0x8
c001c28b:	68 72 a4 02 c0       	push   0xc002a472
c001c290:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c294:	e8 e7 44 fe ff       	call   c0000780 <strcmp>
c001c299:	83 c4 10             	add    esp,0x10
c001c29c:	85 c0                	test   eax,eax
c001c29e:	0f 94 c0             	sete   al
c001c2a1:	0f b6 c0             	movzx  eax,al
c001c2a4:	85 c0                	test   eax,eax
c001c2a6:	74 0c                	je     c001c2b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001c2a8:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001c2b0:	eb 0e                	jmp    c001c2c0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001c2b2:	66 90                	xchg   ax,ax
c001c2b4:	b8 08 00 00 00       	mov    eax,0x8
c001c2b9:	e9 ea 00 00 00       	jmp    c001c3a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001c2be:	66 90                	xchg   ax,ax
c001c2c0:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001c2c7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001c2cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c2d0:	8b 04 85 a0 44 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcbb60]
c001c2d7:	83 f8 ff             	cmp    eax,0xffffffff
c001c2da:	75 34                	jne    c001c310 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001c2dc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001c2e0:	88 c2                	mov    dl,al
c001c2e2:	a1 80 44 03 c0       	mov    eax,ds:0xc0034480
c001c2e7:	01 d0                	add    eax,edx
c001c2e9:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001c2ed:	8b 15 80 44 03 c0    	mov    edx,DWORD PTR ds:0xc0034480
c001c2f3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c2f7:	89 14 85 a0 44 03 c0 	mov    DWORD PTR [eax*4-0x3ffcbb60],edx
c001c2fe:	a1 80 44 03 c0       	mov    eax,ds:0xc0034480
c001c303:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c307:	89 14 85 20 45 03 c0 	mov    DWORD PTR [eax*4-0x3ffcbae0],edx
c001c30e:	eb 18                	jmp    c001c328 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001c310:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001c314:	88 c2                	mov    dl,al
c001c316:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c31a:	8b 04 85 a0 44 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcbb60]
c001c321:	01 d0                	add    eax,edx
c001c323:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001c327:	90                   	nop
c001c328:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c32c:	88 04 24             	mov    BYTE PTR [esp],al
c001c32f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001c333:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c337:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c33f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001c344:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c34c:	83 ec 0c             	sub    esp,0xc
c001c34f:	68 00 20 00 00       	push   0x2000
c001c354:	e8 ff 37 ff ff       	call   c000fb58 <malloc>
c001c359:	83 c4 10             	add    esp,0x10
c001c35c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c360:	68 00 20 00 00       	push   0x2000
c001c365:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c369:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c36d:	50                   	push   eax
c001c36e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001c372:	50                   	push   eax
c001c373:	e8 ad 92 fe ff       	call   c0005625 <f_mkfs>
c001c378:	83 c4 10             	add    esp,0x10
c001c37b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c37f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c384:	75 0a                	jne    c001c390 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001c386:	b8 00 00 00 00       	mov    eax,0x0
c001c38b:	eb 1b                	jmp    c001c3a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001c38d:	8d 76 00             	lea    esi,[esi+0x0]
c001c390:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001c395:	75 09                	jne    c001c3a0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001c397:	b8 09 00 00 00       	mov    eax,0x9
c001c39c:	eb 0a                	jmp    c001c3a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001c39e:	66 90                	xchg   ax,ax
c001c3a0:	b8 01 00 00 00       	mov    eax,0x1
c001c3a5:	8d 76 00             	lea    esi,[esi+0x0]
c001c3a8:	83 c4 2c             	add    esp,0x2c
c001c3ab:	c3                   	ret    

c001c3ac <FAT::tryMount(LogicalDisk*, int)>:
c001c3ac:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001c3b2:	a1 80 44 03 c0       	mov    eax,ds:0xc0034480
c001c3b7:	83 f8 14             	cmp    eax,0x14
c001c3ba:	75 18                	jne    c001c3d4 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001c3bc:	83 ec 0c             	sub    esp,0xc
c001c3bf:	68 78 a4 02 c0       	push   0xc002a478
c001c3c4:	e8 e3 3b ff ff       	call   c000ffac <KePanic(char const*)>
c001c3c9:	83 c4 10             	add    esp,0x10
c001c3cc:	b0 00                	mov    al,0x0
c001c3ce:	e9 ed 01 00 00       	jmp    c001c5c0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c3d3:	90                   	nop
c001c3d4:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001c3db:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c3e1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c3e7:	3d 00 02 00 00       	cmp    eax,0x200
c001c3ec:	74 0a                	je     c001c3f8 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001c3ee:	b0 00                	mov    al,0x0
c001c3f0:	e9 cb 01 00 00       	jmp    c001c5c0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c3f5:	8d 76 00             	lea    esi,[esi+0x0]
c001c3f8:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001c400:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001c407:	8b 04 85 a0 44 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcbb60]
c001c40e:	83 f8 ff             	cmp    eax,0xffffffff
c001c411:	74 09                	je     c001c41c <FAT::tryMount(LogicalDisk*, int)+0x70>
c001c413:	b0 01                	mov    al,0x1
c001c415:	e9 a6 01 00 00       	jmp    c001c5c0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c41a:	66 90                	xchg   ax,ax
c001c41c:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001c426:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001c42e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001c435:	88 c2                	mov    dl,al
c001c437:	a1 80 44 03 c0       	mov    eax,ds:0xc0034480
c001c43c:	01 d0                	add    eax,edx
c001c43e:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001c445:	8b 15 80 44 03 c0    	mov    edx,DWORD PTR ds:0xc0034480
c001c44b:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001c452:	89 14 85 a0 44 03 c0 	mov    DWORD PTR [eax*4-0x3ffcbb60],edx
c001c459:	a1 80 44 03 c0       	mov    eax,ds:0xc0034480
c001c45e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001c465:	89 14 85 20 45 03 c0 	mov    DWORD PTR [eax*4-0x3ffcbae0],edx
c001c46c:	83 ec 0c             	sub    esp,0xc
c001c46f:	68 34 02 00 00       	push   0x234
c001c474:	e8 df 36 ff ff       	call   c000fb58 <malloc>
c001c479:	83 c4 10             	add    esp,0x10
c001c47c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001c483:	83 ec 04             	sub    esp,0x4
c001c486:	6a 00                	push   0x0
c001c488:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001c48f:	50                   	push   eax
c001c490:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001c497:	e8 83 79 fe ff       	call   c0003e1f <f_mount>
c001c49c:	83 c4 10             	add    esp,0x10
c001c49f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001c4a6:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001c4ae:	74 1c                	je     c001c4cc <FAT::tryMount(LogicalDisk*, int)+0x120>
c001c4b0:	83 ec 0c             	sub    esp,0xc
c001c4b3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001c4ba:	e8 b9 36 ff ff       	call   c000fb78 <rfree>
c001c4bf:	83 c4 10             	add    esp,0x10
c001c4c2:	b0 00                	mov    al,0x0
c001c4c4:	e9 f7 00 00 00       	jmp    c001c5c0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c4c9:	8d 76 00             	lea    esi,[esi+0x0]
c001c4cc:	83 ec 04             	sub    esp,0x4
c001c4cf:	68 00 01 00 00       	push   0x100
c001c4d4:	6a 00                	push   0x0
c001c4d6:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001c4dd:	50                   	push   eax
c001c4de:	e8 0d 40 fe ff       	call   c00004f0 <memset>
c001c4e3:	83 c4 10             	add    esp,0x10
c001c4e6:	83 ec 08             	sub    esp,0x8
c001c4e9:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001c4f0:	50                   	push   eax
c001c4f1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001c4f8:	50                   	push   eax
c001c4f9:	e8 72 43 fe ff       	call   c0000870 <strcat>
c001c4fe:	83 c4 10             	add    esp,0x10
c001c501:	83 ec 08             	sub    esp,0x8
c001c504:	68 86 a4 02 c0       	push   0xc002a486
c001c509:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001c510:	50                   	push   eax
c001c511:	e8 5a 43 fe ff       	call   c0000870 <strcat>
c001c516:	83 c4 10             	add    esp,0x10
c001c519:	83 ec 04             	sub    esp,0x4
c001c51c:	6a 01                	push   0x1
c001c51e:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001c525:	50                   	push   eax
c001c526:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c52a:	50                   	push   eax
c001c52b:	e8 51 79 fe ff       	call   c0003e81 <f_open>
c001c530:	83 c4 10             	add    esp,0x10
c001c533:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001c53a:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001c541:	85 c0                	test   eax,eax
c001c543:	74 0b                	je     c001c550 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001c545:	78 31                	js     c001c578 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001c547:	83 e8 04             	sub    eax,0x4
c001c54a:	83 f8 01             	cmp    eax,0x1
c001c54d:	77 29                	ja     c001c578 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001c54f:	90                   	nop
c001c550:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001c558:	83 ec 0c             	sub    esp,0xc
c001c55b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c55f:	50                   	push   eax
c001c560:	e8 cc 80 fe ff       	call   c0004631 <f_close>
c001c565:	83 c4 10             	add    esp,0x10
c001c568:	90                   	nop
c001c569:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001c571:	85 c0                	test   eax,eax
c001c573:	74 43                	je     c001c5b8 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001c575:	eb 31                	jmp    c001c5a8 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001c577:	90                   	nop
c001c578:	83 ec 0c             	sub    esp,0xc
c001c57b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001c582:	e8 f1 35 ff ff       	call   c000fb78 <rfree>
c001c587:	83 c4 10             	add    esp,0x10
c001c58a:	83 ec 04             	sub    esp,0x4
c001c58d:	6a 00                	push   0x0
c001c58f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001c596:	50                   	push   eax
c001c597:	6a 00                	push   0x0
c001c599:	e8 81 78 fe ff       	call   c0003e1f <f_mount>
c001c59e:	83 c4 10             	add    esp,0x10
c001c5a1:	b0 00                	mov    al,0x0
c001c5a3:	eb 1b                	jmp    c001c5c0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c5a5:	8d 76 00             	lea    esi,[esi+0x0]
c001c5a8:	a1 80 44 03 c0       	mov    eax,ds:0xc0034480
c001c5ad:	83 c0 01             	add    eax,0x1
c001c5b0:	a3 80 44 03 c0       	mov    ds:0xc0034480,eax
c001c5b5:	8d 76 00             	lea    esi,[esi+0x0]
c001c5b8:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001c5bf:	90                   	nop
c001c5c0:	81 c4 4c 03 00 00    	add    esp,0x34c
c001c5c6:	c3                   	ret    
c001c5c7:	90                   	nop

c001c5c8 <FAT::allocateSwapfile(char const*, int)>:
c001c5c8:	55                   	push   ebp
c001c5c9:	57                   	push   edi
c001c5ca:	56                   	push   esi
c001c5cb:	53                   	push   ebx
c001c5cc:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001c5d2:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001c5dd:	83 ec 0c             	sub    esp,0xc
c001c5e0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001c5e7:	e8 6c 35 ff ff       	call   c000fb58 <malloc>
c001c5ec:	83 c4 10             	add    esp,0x10
c001c5ef:	89 c7                	mov    edi,eax
c001c5f1:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c001c5f6:	83 ec 04             	sub    esp,0x4
c001c5f9:	50                   	push   eax
c001c5fa:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001c601:	57                   	push   edi
c001c602:	e8 59 c0 fe ff       	call   c0008660 <File::File(char const*, Process*)>
c001c607:	83 c4 10             	add    esp,0x10
c001c60a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001c611:	83 ec 04             	sub    esp,0x4
c001c614:	8d 44 24 13          	lea    eax,[esp+0x13]
c001c618:	50                   	push   eax
c001c619:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c61d:	50                   	push   eax
c001c61e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c625:	e8 56 c3 fe ff       	call   c0008980 <File::stat(unsigned long long*, bool*)>
c001c62a:	83 c4 10             	add    esp,0x10
c001c62d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001c634:	c1 e0 14             	shl    eax,0x14
c001c637:	89 c7                	mov    edi,eax
c001c639:	89 c5                	mov    ebp,eax
c001c63b:	c1 fd 1f             	sar    ebp,0x1f
c001c63e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c642:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c646:	89 f9                	mov    ecx,edi
c001c648:	31 c1                	xor    ecx,eax
c001c64a:	89 cb                	mov    ebx,ecx
c001c64c:	89 e9                	mov    ecx,ebp
c001c64e:	31 d1                	xor    ecx,edx
c001c650:	89 ce                	mov    esi,ecx
c001c652:	89 f0                	mov    eax,esi
c001c654:	09 d8                	or     eax,ebx
c001c656:	0f 84 9c 00 00 00    	je     c001c6f8 <FAT::allocateSwapfile(char const*, int)+0x130>
c001c65c:	83 ec 0c             	sub    esp,0xc
c001c65f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c666:	e8 e1 c1 fe ff       	call   c000884c <File::unlink()>
c001c66b:	83 c4 10             	add    esp,0x10
c001c66e:	83 ec 08             	sub    esp,0x8
c001c671:	6a 12                	push   0x12
c001c673:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c67a:	e8 ff bf fe ff       	call   c000867e <File::open(FileOpenMode)>
c001c67f:	83 c4 10             	add    esp,0x10
c001c682:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c689:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001c68f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001c696:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001c69d:	c1 e0 14             	shl    eax,0x14
c001c6a0:	83 ec 04             	sub    esp,0x4
c001c6a3:	6a 01                	push   0x1
c001c6a5:	50                   	push   eax
c001c6a6:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001c6ad:	e8 06 8e fe ff       	call   c00054b8 <f_expand>
c001c6b2:	83 c4 10             	add    esp,0x10
c001c6b5:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c6bc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6be:	83 c0 10             	add    eax,0x10
c001c6c1:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6c3:	83 ec 0c             	sub    esp,0xc
c001c6c6:	8d 54 24 24          	lea    edx,[esp+0x24]
c001c6ca:	52                   	push   edx
c001c6cb:	8d 54 24 30          	lea    edx,[esp+0x30]
c001c6cf:	52                   	push   edx
c001c6d0:	6a 00                	push   0x0
c001c6d2:	68 00 04 00 00       	push   0x400
c001c6d7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001c6de:	ff d0                	call   eax
c001c6e0:	83 c4 20             	add    esp,0x20
c001c6e3:	83 ec 0c             	sub    esp,0xc
c001c6e6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c6ed:	e8 ea bf fe ff       	call   c00086dc <File::close()>
c001c6f2:	83 c4 10             	add    esp,0x10
c001c6f5:	8d 76 00             	lea    esi,[esi+0x0]
c001c6f8:	83 ec 08             	sub    esp,0x8
c001c6fb:	6a 01                	push   0x1
c001c6fd:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c704:	e8 75 bf fe ff       	call   c000867e <File::open(FileOpenMode)>
c001c709:	83 c4 10             	add    esp,0x10
c001c70c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c713:	8b 00                	mov    eax,DWORD PTR [eax]
c001c715:	83 c0 0c             	add    eax,0xc
c001c718:	8b 00                	mov    eax,DWORD PTR [eax]
c001c71a:	83 ec 0c             	sub    esp,0xc
c001c71d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001c721:	52                   	push   edx
c001c722:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001c726:	52                   	push   edx
c001c727:	6a 00                	push   0x0
c001c729:	6a 04                	push   0x4
c001c72b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001c732:	ff d0                	call   eax
c001c734:	83 c4 20             	add    esp,0x20
c001c737:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c73e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001c744:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001c74b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001c752:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001c755:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001c75c:	83 ec 0c             	sub    esp,0xc
c001c75f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c766:	e8 71 bf fe ff       	call   c00086dc <File::close()>
c001c76b:	83 c4 10             	add    esp,0x10
c001c76e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001c775:	ba 00 00 00 00       	mov    edx,0x0
c001c77a:	81 c4 3c 04 00 00    	add    esp,0x43c
c001c780:	5b                   	pop    ebx
c001c781:	5e                   	pop    esi
c001c782:	5f                   	pop    edi
c001c783:	5d                   	pop    ebp
c001c784:	c3                   	ret    
c001c785:	90                   	nop
c001c786:	66 90                	xchg   ax,ax

c001c788 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001c788:	57                   	push   edi
c001c789:	56                   	push   esi
c001c78a:	53                   	push   ebx
c001c78b:	81 ec 50 02 00 00    	sub    esp,0x250
c001c791:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001c799:	74 0d                	je     c001c7a8 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001c79b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001c7a3:	75 0f                	jne    c001c7b4 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001c7a5:	8d 76 00             	lea    esi,[esi+0x0]
c001c7a8:	b8 04 00 00 00       	mov    eax,0x4
c001c7ad:	e9 3a 01 00 00       	jmp    c001c8ec <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c7b2:	66 90                	xchg   ax,ax
c001c7b4:	83 ec 08             	sub    esp,0x8
c001c7b7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001c7be:	50                   	push   eax
c001c7bf:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001c7c6:	e8 32 81 fe ff       	call   c00048fd <f_readdir>
c001c7cb:	83 c4 10             	add    esp,0x10
c001c7ce:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001c7d5:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001c7dc:	83 ec 0c             	sub    esp,0xc
c001c7df:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c7e6:	83 c0 16             	add    eax,0x16
c001c7e9:	50                   	push   eax
c001c7ea:	e8 91 3d fe ff       	call   c0000580 <strlen>
c001c7ef:	83 c4 10             	add    esp,0x10
c001c7f2:	ba 00 00 00 00       	mov    edx,0x0
c001c7f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7fb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001c7ff:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001c806:	0f b6 c0             	movzx  eax,al
c001c809:	83 e0 10             	and    eax,0x10
c001c80c:	74 0a                	je     c001c818 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001c80e:	b8 02 00 00 00       	mov    eax,0x2
c001c813:	eb 0b                	jmp    c001c820 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001c815:	8d 76 00             	lea    esi,[esi+0x0]
c001c818:	b8 01 00 00 00       	mov    eax,0x1
c001c81d:	8d 76 00             	lea    esi,[esi+0x0]
c001c820:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c824:	83 ec 08             	sub    esp,0x8
c001c827:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001c82e:	83 c0 16             	add    eax,0x16
c001c831:	50                   	push   eax
c001c832:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c836:	83 c0 10             	add    eax,0x10
c001c839:	50                   	push   eax
c001c83a:	e8 11 3e fe ff       	call   c0000650 <strcpy>
c001c83f:	83 c4 10             	add    esp,0x10
c001c842:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001c849:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001c850:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c854:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001c85b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001c862:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001c869:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001c870:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001c877:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001c87e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001c885:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001c88c:	89 c6                	mov    esi,eax
c001c88e:	89 d7                	mov    edi,edx
c001c890:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c892:	89 c8                	mov    eax,ecx
c001c894:	89 fa                	mov    edx,edi
c001c896:	89 f3                	mov    ebx,esi
c001c898:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001c89f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001c8a6:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001c8ad:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001c8b4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c8ba:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001c8c1:	0f be c0             	movsx  eax,al
c001c8c4:	85 c0                	test   eax,eax
c001c8c6:	75 08                	jne    c001c8d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001c8c8:	b8 07 00 00 00       	mov    eax,0x7
c001c8cd:	eb 1d                	jmp    c001c8ec <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c8cf:	90                   	nop
c001c8d0:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001c8d7:	85 c0                	test   eax,eax
c001c8d9:	75 09                	jne    c001c8e4 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001c8db:	b8 00 00 00 00       	mov    eax,0x0
c001c8e0:	eb 0a                	jmp    c001c8ec <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c8e2:	66 90                	xchg   ax,ax
c001c8e4:	b8 01 00 00 00       	mov    eax,0x1
c001c8e9:	8d 76 00             	lea    esi,[esi+0x0]
c001c8ec:	81 c4 50 02 00 00    	add    esp,0x250
c001c8f2:	5b                   	pop    ebx
c001c8f3:	5e                   	pop    esi
c001c8f4:	5f                   	pop    edi
c001c8f5:	c3                   	ret    
c001c8f6:	66 90                	xchg   ax,ax

c001c8f8 <FAT::read(void*, unsigned long, void*, int*)>:
c001c8f8:	83 ec 1c             	sub    esp,0x1c
c001c8fb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c900:	74 0a                	je     c001c90c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001c902:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001c907:	75 0b                	jne    c001c914 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001c909:	8d 76 00             	lea    esi,[esi+0x0]
c001c90c:	b8 04 00 00 00       	mov    eax,0x4
c001c911:	eb 41                	jmp    c001c954 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001c913:	90                   	nop
c001c914:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c918:	50                   	push   eax
c001c919:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c91d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c921:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c925:	e8 1a 78 fe ff       	call   c0004144 <f_read>
c001c92a:	83 c4 10             	add    esp,0x10
c001c92d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c931:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c935:	89 c2                	mov    edx,eax
c001c937:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c93b:	89 10                	mov    DWORD PTR [eax],edx
c001c93d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c941:	85 c0                	test   eax,eax
c001c943:	75 07                	jne    c001c94c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001c945:	b8 00 00 00 00       	mov    eax,0x0
c001c94a:	eb 08                	jmp    c001c954 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001c94c:	b8 01 00 00 00       	mov    eax,0x1
c001c951:	8d 76 00             	lea    esi,[esi+0x0]
c001c954:	83 c4 1c             	add    esp,0x1c
c001c957:	c3                   	ret    

c001c958 <FAT::write(void*, unsigned long, void*, int*)>:
c001c958:	83 ec 1c             	sub    esp,0x1c
c001c95b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c960:	74 0a                	je     c001c96c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001c962:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001c967:	75 0b                	jne    c001c974 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001c969:	8d 76 00             	lea    esi,[esi+0x0]
c001c96c:	b8 04 00 00 00       	mov    eax,0x4
c001c971:	eb 41                	jmp    c001c9b4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c973:	90                   	nop
c001c974:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c978:	50                   	push   eax
c001c979:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c97d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c981:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c985:	e8 9b 79 fe ff       	call   c0004325 <f_write>
c001c98a:	83 c4 10             	add    esp,0x10
c001c98d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c991:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c995:	89 c2                	mov    edx,eax
c001c997:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c99b:	89 10                	mov    DWORD PTR [eax],edx
c001c99d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9a1:	85 c0                	test   eax,eax
c001c9a3:	75 07                	jne    c001c9ac <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001c9a5:	b8 00 00 00 00       	mov    eax,0x0
c001c9aa:	eb 08                	jmp    c001c9b4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c9ac:	b8 01 00 00 00       	mov    eax,0x1
c001c9b1:	8d 76 00             	lea    esi,[esi+0x0]
c001c9b4:	83 c4 1c             	add    esp,0x1c
c001c9b7:	c3                   	ret    

c001c9b8 <FAT::close(void*)>:
c001c9b8:	83 ec 1c             	sub    esp,0x1c
c001c9bb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c9c0:	75 0a                	jne    c001c9cc <FAT::close(void*)+0x14>
c001c9c2:	b8 04 00 00 00       	mov    eax,0x4
c001c9c7:	eb 3f                	jmp    c001ca08 <FAT::close(void*)+0x50>
c001c9c9:	8d 76 00             	lea    esi,[esi+0x0]
c001c9cc:	83 ec 0c             	sub    esp,0xc
c001c9cf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c9d3:	e8 59 7c fe ff       	call   c0004631 <f_close>
c001c9d8:	83 c4 10             	add    esp,0x10
c001c9db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c9df:	83 ec 0c             	sub    esp,0xc
c001c9e2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c9e6:	e8 7d 31 ff ff       	call   c000fb68 <free>
c001c9eb:	83 c4 10             	add    esp,0x10
c001c9ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9f2:	85 c0                	test   eax,eax
c001c9f4:	75 0a                	jne    c001ca00 <FAT::close(void*)+0x48>
c001c9f6:	b8 00 00 00 00       	mov    eax,0x0
c001c9fb:	eb 0b                	jmp    c001ca08 <FAT::close(void*)+0x50>
c001c9fd:	8d 76 00             	lea    esi,[esi+0x0]
c001ca00:	b8 01 00 00 00       	mov    eax,0x1
c001ca05:	8d 76 00             	lea    esi,[esi+0x0]
c001ca08:	83 c4 1c             	add    esp,0x1c
c001ca0b:	c3                   	ret    

c001ca0c <FAT::closeDir(void*)>:
c001ca0c:	83 ec 1c             	sub    esp,0x1c
c001ca0f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ca14:	75 0a                	jne    c001ca20 <FAT::closeDir(void*)+0x14>
c001ca16:	b8 04 00 00 00       	mov    eax,0x4
c001ca1b:	eb 3f                	jmp    c001ca5c <FAT::closeDir(void*)+0x50>
c001ca1d:	8d 76 00             	lea    esi,[esi+0x0]
c001ca20:	83 ec 0c             	sub    esp,0xc
c001ca23:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ca27:	e8 af 7e fe ff       	call   c00048db <f_closedir>
c001ca2c:	83 c4 10             	add    esp,0x10
c001ca2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ca33:	83 ec 0c             	sub    esp,0xc
c001ca36:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ca3a:	e8 29 31 ff ff       	call   c000fb68 <free>
c001ca3f:	83 c4 10             	add    esp,0x10
c001ca42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca46:	85 c0                	test   eax,eax
c001ca48:	75 0a                	jne    c001ca54 <FAT::closeDir(void*)+0x48>
c001ca4a:	b8 00 00 00 00       	mov    eax,0x0
c001ca4f:	eb 0b                	jmp    c001ca5c <FAT::closeDir(void*)+0x50>
c001ca51:	8d 76 00             	lea    esi,[esi+0x0]
c001ca54:	b8 01 00 00 00       	mov    eax,0x1
c001ca59:	8d 76 00             	lea    esi,[esi+0x0]
c001ca5c:	83 c4 1c             	add    esp,0x1c
c001ca5f:	c3                   	ret    

c001ca60 <FAT::truncate(void*, unsigned long long)>:
c001ca60:	83 ec 2c             	sub    esp,0x2c
c001ca63:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ca67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ca6b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ca6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ca73:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001ca78:	75 0a                	jne    c001ca84 <FAT::truncate(void*, unsigned long long)+0x24>
c001ca7a:	b8 04 00 00 00       	mov    eax,0x4
c001ca7f:	eb 47                	jmp    c001cac8 <FAT::truncate(void*, unsigned long long)+0x68>
c001ca81:	8d 76 00             	lea    esi,[esi+0x0]
c001ca84:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ca88:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ca8b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ca8f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001ca97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca9b:	83 ec 08             	sub    esp,0x8
c001ca9e:	50                   	push   eax
c001ca9f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001caa3:	e8 b8 7b fe ff       	call   c0004660 <f_lseek>
c001caa8:	83 c4 10             	add    esp,0x10
c001caab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001caaf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cab3:	85 c0                	test   eax,eax
c001cab5:	75 09                	jne    c001cac0 <FAT::truncate(void*, unsigned long long)+0x60>
c001cab7:	b8 00 00 00 00       	mov    eax,0x0
c001cabc:	eb 0a                	jmp    c001cac8 <FAT::truncate(void*, unsigned long long)+0x68>
c001cabe:	66 90                	xchg   ax,ax
c001cac0:	b8 01 00 00 00       	mov    eax,0x1
c001cac5:	8d 76 00             	lea    esi,[esi+0x0]
c001cac8:	83 c4 2c             	add    esp,0x2c
c001cacb:	c3                   	ret    

c001cacc <FAT::seek(void*, unsigned long long)>:
c001cacc:	83 ec 2c             	sub    esp,0x2c
c001cacf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cad3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cad7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001cadb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cadf:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001cae4:	75 0a                	jne    c001caf0 <FAT::seek(void*, unsigned long long)+0x24>
c001cae6:	b8 04 00 00 00       	mov    eax,0x4
c001caeb:	eb 33                	jmp    c001cb20 <FAT::seek(void*, unsigned long long)+0x54>
c001caed:	8d 76 00             	lea    esi,[esi+0x0]
c001caf0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001caf4:	83 ec 08             	sub    esp,0x8
c001caf7:	50                   	push   eax
c001caf8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001cafc:	e8 5f 7b fe ff       	call   c0004660 <f_lseek>
c001cb01:	83 c4 10             	add    esp,0x10
c001cb04:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cb0c:	85 c0                	test   eax,eax
c001cb0e:	75 08                	jne    c001cb18 <FAT::seek(void*, unsigned long long)+0x4c>
c001cb10:	b8 00 00 00 00       	mov    eax,0x0
c001cb15:	eb 09                	jmp    c001cb20 <FAT::seek(void*, unsigned long long)+0x54>
c001cb17:	90                   	nop
c001cb18:	b8 01 00 00 00       	mov    eax,0x1
c001cb1d:	8d 76 00             	lea    esi,[esi+0x0]
c001cb20:	83 c4 2c             	add    esp,0x2c
c001cb23:	c3                   	ret    

c001cb24 <fatWrapperReadDisk>:
c001cb24:	53                   	push   ebx
c001cb25:	83 ec 18             	sub    esp,0x18
c001cb28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb2c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cb30:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cb35:	8b 0c 85 e0 1a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffce520]
c001cb3c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cb40:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cb44:	ba 00 00 00 00       	mov    edx,0x0
c001cb49:	83 ec 0c             	sub    esp,0xc
c001cb4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001cb50:	53                   	push   ebx
c001cb51:	52                   	push   edx
c001cb52:	50                   	push   eax
c001cb53:	51                   	push   ecx
c001cb54:	e8 95 e3 fe ff       	call   c000aeee <LogicalDisk::read(unsigned long long, int, void*)>
c001cb59:	83 c4 20             	add    esp,0x20
c001cb5c:	83 c4 18             	add    esp,0x18
c001cb5f:	5b                   	pop    ebx
c001cb60:	c3                   	ret    
c001cb61:	8d 76 00             	lea    esi,[esi+0x0]

c001cb64 <fatWrapperWriteDisk>:
c001cb64:	53                   	push   ebx
c001cb65:	83 ec 18             	sub    esp,0x18
c001cb68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb6c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cb70:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cb75:	8b 0c 85 e0 1a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffce520]
c001cb7c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cb80:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cb84:	ba 00 00 00 00       	mov    edx,0x0
c001cb89:	83 ec 0c             	sub    esp,0xc
c001cb8c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001cb90:	53                   	push   ebx
c001cb91:	52                   	push   edx
c001cb92:	50                   	push   eax
c001cb93:	51                   	push   ecx
c001cb94:	e8 c1 e3 fe ff       	call   c000af5a <LogicalDisk::write(unsigned long long, int, void*)>
c001cb99:	83 c4 20             	add    esp,0x20
c001cb9c:	83 c4 18             	add    esp,0x18
c001cb9f:	5b                   	pop    ebx
c001cba0:	c3                   	ret    
c001cba1:	8d 76 00             	lea    esi,[esi+0x0]

c001cba4 <fatWrapperIoctl>:
c001cba4:	53                   	push   ebx
c001cba5:	83 ec 28             	sub    esp,0x28
c001cba8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbac:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001cbb0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cbb4:	88 d0                	mov    al,dl
c001cbb6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001cbba:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cbbf:	83 f8 02             	cmp    eax,0x2
c001cbc2:	75 34                	jne    c001cbf8 <fatWrapperIoctl+0x54>
c001cbc4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cbc8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cbcc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cbd1:	8b 04 85 e0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce520]
c001cbd8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001cbde:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001cbe4:	89 c2                	mov    edx,eax
c001cbe6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cbea:	66 89 10             	mov    WORD PTR [eax],dx
c001cbed:	b8 00 00 00 00       	mov    eax,0x0
c001cbf2:	e9 c5 00 00 00       	jmp    c001ccbc <fatWrapperIoctl+0x118>
c001cbf7:	90                   	nop
c001cbf8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cbfd:	83 f8 01             	cmp    eax,0x1
c001cc00:	75 6a                	jne    c001cc6c <fatWrapperIoctl+0xc8>
c001cc02:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cc06:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc0a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cc0f:	8b 04 85 e0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce520]
c001cc16:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001cc1c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001cc22:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001cc28:	89 c8                	mov    eax,ecx
c001cc2a:	89 da                	mov    edx,ebx
c001cc2c:	0f a4 c2 0a          	shld   edx,eax,0xa
c001cc30:	c1 e0 0a             	shl    eax,0xa
c001cc33:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001cc38:	8b 0c 8d e0 1a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffce520]
c001cc3f:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001cc45:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001cc4b:	89 cb                	mov    ebx,ecx
c001cc4d:	c1 fb 1f             	sar    ebx,0x1f
c001cc50:	53                   	push   ebx
c001cc51:	51                   	push   ecx
c001cc52:	52                   	push   edx
c001cc53:	50                   	push   eax
c001cc54:	e8 7b 55 00 00       	call   c00221d4 <__udivdi3>
c001cc59:	83 c4 10             	add    esp,0x10
c001cc5c:	89 c2                	mov    edx,eax
c001cc5e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc62:	89 10                	mov    DWORD PTR [eax],edx
c001cc64:	b8 00 00 00 00       	mov    eax,0x0
c001cc69:	eb 51                	jmp    c001ccbc <fatWrapperIoctl+0x118>
c001cc6b:	90                   	nop
c001cc6c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cc71:	85 c0                	test   eax,eax
c001cc73:	75 07                	jne    c001cc7c <fatWrapperIoctl+0xd8>
c001cc75:	b8 00 00 00 00       	mov    eax,0x0
c001cc7a:	eb 40                	jmp    c001ccbc <fatWrapperIoctl+0x118>
c001cc7c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cc81:	83 f8 03             	cmp    eax,0x3
c001cc84:	75 1a                	jne    c001cca0 <fatWrapperIoctl+0xfc>
c001cc86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cc8a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cc92:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001cc98:	b8 00 00 00 00       	mov    eax,0x0
c001cc9d:	eb 1d                	jmp    c001ccbc <fatWrapperIoctl+0x118>
c001cc9f:	90                   	nop
c001cca0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cca5:	83 f8 04             	cmp    eax,0x4
c001cca8:	75 0a                	jne    c001ccb4 <fatWrapperIoctl+0x110>
c001ccaa:	b8 00 00 00 00       	mov    eax,0x0
c001ccaf:	eb 0b                	jmp    c001ccbc <fatWrapperIoctl+0x118>
c001ccb1:	8d 76 00             	lea    esi,[esi+0x0]
c001ccb4:	b8 04 00 00 00       	mov    eax,0x4
c001ccb9:	8d 76 00             	lea    esi,[esi+0x0]
c001ccbc:	83 c4 28             	add    esp,0x28
c001ccbf:	5b                   	pop    ebx
c001ccc0:	c3                   	ret    
c001ccc1:	90                   	nop
c001ccc2:	66 90                	xchg   ax,ax

c001ccc4 <FAT::FAT()>:
c001ccc4:	83 ec 1c             	sub    esp,0x1c
c001ccc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cccb:	83 ec 0c             	sub    esp,0xc
c001ccce:	50                   	push   eax
c001cccf:	e8 b6 b5 fe ff       	call   c000828a <Filesystem::Filesystem()>
c001ccd4:	83 c4 10             	add    esp,0x10
c001ccd7:	ba 9c a4 02 c0       	mov    edx,0xc002a49c
c001ccdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cce0:	89 10                	mov    DWORD PTR [eax],edx
c001cce2:	c7 05 80 44 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0034480,0x0
c001ccec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ccf4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001ccf9:	7f 19                	jg     c001cd14 <FAT::FAT()+0x50>
c001ccfb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccff:	c7 04 85 a0 44 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcbb60],0xffffffff
c001cd0a:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001cd0f:	eb e3                	jmp    c001ccf4 <FAT::FAT()+0x30>
c001cd11:	8d 76 00             	lea    esi,[esi+0x0]
c001cd14:	90                   	nop
c001cd15:	83 c4 1c             	add    esp,0x1c
c001cd18:	c3                   	ret    
c001cd19:	90                   	nop
c001cd1a:	66 90                	xchg   ax,ax

c001cd1c <FAT::fixFilepath(char*)>:
c001cd1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cd20:	8a 00                	mov    al,BYTE PTR [eax]
c001cd22:	0f be c0             	movsx  eax,al
c001cd25:	83 f8 40             	cmp    eax,0x40
c001cd28:	7e 2e                	jle    c001cd58 <FAT::fixFilepath(char*)+0x3c>
c001cd2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cd2e:	8a 00                	mov    al,BYTE PTR [eax]
c001cd30:	83 e8 41             	sub    eax,0x41
c001cd33:	88 c2                	mov    dl,al
c001cd35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cd39:	88 10                	mov    BYTE PTR [eax],dl
c001cd3b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cd3f:	8a 00                	mov    al,BYTE PTR [eax]
c001cd41:	0f be c0             	movsx  eax,al
c001cd44:	8b 04 85 a0 44 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcbb60]
c001cd4b:	83 c0 30             	add    eax,0x30
c001cd4e:	88 c2                	mov    dl,al
c001cd50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cd54:	88 10                	mov    BYTE PTR [eax],dl
c001cd56:	66 90                	xchg   ax,ax
c001cd58:	90                   	nop
c001cd59:	c3                   	ret    
c001cd5a:	66 90                	xchg   ax,ax

c001cd5c <FAT::open(char const*, void**, FileOpenMode)>:
c001cd5c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001cd62:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001cd6a:	74 0c                	je     c001cd78 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001cd6c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001cd74:	75 0e                	jne    c001cd84 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001cd76:	66 90                	xchg   ax,ax
c001cd78:	b8 04 00 00 00       	mov    eax,0x4
c001cd7d:	e9 46 01 00 00       	jmp    c001cec8 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001cd82:	66 90                	xchg   ax,ax
c001cd84:	83 ec 08             	sub    esp,0x8
c001cd87:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cd8e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cd92:	50                   	push   eax
c001cd93:	e8 b8 38 fe ff       	call   c0000650 <strcpy>
c001cd98:	83 c4 10             	add    esp,0x10
c001cd9b:	83 ec 08             	sub    esp,0x8
c001cd9e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001cda2:	50                   	push   eax
c001cda3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cdaa:	e8 6d ff ff ff       	call   c001cd1c <FAT::fixFilepath(char*)>
c001cdaf:	83 c4 10             	add    esp,0x10
c001cdb2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001cdba:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001cdc1:	83 e0 01             	and    eax,0x1
c001cdc4:	74 12                	je     c001cdd8 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001cdc6:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001cdcd:	83 c8 01             	or     eax,0x1
c001cdd0:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001cdd7:	90                   	nop
c001cdd8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001cddf:	83 e0 04             	and    eax,0x4
c001cde2:	74 24                	je     c001ce08 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001cde4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001cdeb:	83 c8 30             	or     eax,0x30
c001cdee:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001cdf5:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001cdfc:	83 c8 02             	or     eax,0x2
c001cdff:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001ce06:	66 90                	xchg   ax,ax
c001ce08:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ce0f:	83 e0 02             	and    eax,0x2
c001ce12:	74 14                	je     c001ce28 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001ce14:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001ce1b:	83 c8 02             	or     eax,0x2
c001ce1e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001ce25:	8d 76 00             	lea    esi,[esi+0x0]
c001ce28:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ce2f:	83 e0 08             	and    eax,0x8
c001ce32:	74 14                	je     c001ce48 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001ce34:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001ce3b:	83 c8 04             	or     eax,0x4
c001ce3e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001ce45:	8d 76 00             	lea    esi,[esi+0x0]
c001ce48:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ce4f:	83 e0 10             	and    eax,0x10
c001ce52:	74 14                	je     c001ce68 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001ce54:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001ce5b:	83 c8 08             	or     eax,0x8
c001ce5e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001ce65:	8d 76 00             	lea    esi,[esi+0x0]
c001ce68:	83 ec 0c             	sub    esp,0xc
c001ce6b:	68 28 02 00 00       	push   0x228
c001ce70:	e8 e3 2c ff ff       	call   c000fb58 <malloc>
c001ce75:	83 c4 10             	add    esp,0x10
c001ce78:	89 c2                	mov    edx,eax
c001ce7a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ce81:	89 10                	mov    DWORD PTR [eax],edx
c001ce83:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001ce8b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ce92:	8b 00                	mov    eax,DWORD PTR [eax]
c001ce94:	83 ec 04             	sub    esp,0x4
c001ce97:	52                   	push   edx
c001ce98:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ce9c:	52                   	push   edx
c001ce9d:	50                   	push   eax
c001ce9e:	e8 de 6f fe ff       	call   c0003e81 <f_open>
c001cea3:	83 c4 10             	add    esp,0x10
c001cea6:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001cead:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001ceb5:	74 09                	je     c001cec0 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001ceb7:	b8 01 00 00 00       	mov    eax,0x1
c001cebc:	eb 0a                	jmp    c001cec8 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001cebe:	66 90                	xchg   ax,ax
c001cec0:	b8 00 00 00 00       	mov    eax,0x0
c001cec5:	8d 76 00             	lea    esi,[esi+0x0]
c001cec8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cece:	c3                   	ret    
c001cecf:	90                   	nop

c001ced0 <FAT::openDir(char const*, void**)>:
c001ced0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ced6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001cede:	74 0c                	je     c001ceec <FAT::openDir(char const*, void**)+0x1c>
c001cee0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001cee8:	75 0e                	jne    c001cef8 <FAT::openDir(char const*, void**)+0x28>
c001ceea:	66 90                	xchg   ax,ax
c001ceec:	b8 04 00 00 00       	mov    eax,0x4
c001cef1:	e9 82 00 00 00       	jmp    c001cf78 <FAT::openDir(char const*, void**)+0xa8>
c001cef6:	66 90                	xchg   ax,ax
c001cef8:	83 ec 08             	sub    esp,0x8
c001cefb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cf02:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cf06:	50                   	push   eax
c001cf07:	e8 44 37 fe ff       	call   c0000650 <strcpy>
c001cf0c:	83 c4 10             	add    esp,0x10
c001cf0f:	83 ec 08             	sub    esp,0x8
c001cf12:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cf16:	50                   	push   eax
c001cf17:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cf1e:	e8 f9 fd ff ff       	call   c001cd1c <FAT::fixFilepath(char*)>
c001cf23:	83 c4 10             	add    esp,0x10
c001cf26:	83 ec 0c             	sub    esp,0xc
c001cf29:	6a 30                	push   0x30
c001cf2b:	e8 28 2c ff ff       	call   c000fb58 <malloc>
c001cf30:	83 c4 10             	add    esp,0x10
c001cf33:	89 c2                	mov    edx,eax
c001cf35:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001cf3c:	89 10                	mov    DWORD PTR [eax],edx
c001cf3e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001cf45:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf47:	83 ec 08             	sub    esp,0x8
c001cf4a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001cf4e:	52                   	push   edx
c001cf4f:	50                   	push   eax
c001cf50:	e8 bb 78 fe ff       	call   c0004810 <f_opendir>
c001cf55:	83 c4 10             	add    esp,0x10
c001cf58:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001cf5f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001cf67:	74 07                	je     c001cf70 <FAT::openDir(char const*, void**)+0xa0>
c001cf69:	b8 01 00 00 00       	mov    eax,0x1
c001cf6e:	eb 08                	jmp    c001cf78 <FAT::openDir(char const*, void**)+0xa8>
c001cf70:	b8 00 00 00 00       	mov    eax,0x0
c001cf75:	8d 76 00             	lea    esi,[esi+0x0]
c001cf78:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cf7e:	c3                   	ret    
c001cf7f:	90                   	nop

c001cf80 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001cf80:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001cf86:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001cf8e:	75 0c                	jne    c001cf9c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001cf90:	b8 04 00 00 00       	mov    eax,0x4
c001cf95:	e9 d6 00 00 00       	jmp    c001d070 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cf9a:	66 90                	xchg   ax,ax
c001cf9c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001cfa4:	75 0a                	jne    c001cfb0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001cfa6:	b8 04 00 00 00       	mov    eax,0x4
c001cfab:	e9 c0 00 00 00       	jmp    c001d070 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cfb0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001cfb8:	75 0a                	jne    c001cfc4 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001cfba:	b8 04 00 00 00       	mov    eax,0x4
c001cfbf:	e9 ac 00 00 00       	jmp    c001d070 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cfc4:	83 ec 08             	sub    esp,0x8
c001cfc7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001cfce:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001cfd5:	50                   	push   eax
c001cfd6:	e8 75 36 fe ff       	call   c0000650 <strcpy>
c001cfdb:	83 c4 10             	add    esp,0x10
c001cfde:	83 ec 08             	sub    esp,0x8
c001cfe1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001cfe8:	50                   	push   eax
c001cfe9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001cff0:	e8 27 fd ff ff       	call   c001cd1c <FAT::fixFilepath(char*)>
c001cff5:	83 c4 10             	add    esp,0x10
c001cff8:	83 ec 08             	sub    esp,0x8
c001cffb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001cfff:	50                   	push   eax
c001d000:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001d007:	50                   	push   eax
c001d008:	e8 82 79 fe ff       	call   c000498f <f_stat>
c001d00d:	83 c4 10             	add    esp,0x10
c001d010:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001d017:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001d01e:	85 c0                	test   eax,eax
c001d020:	74 0a                	je     c001d02c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001d022:	83 f8 04             	cmp    eax,0x4
c001d025:	74 39                	je     c001d060 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001d027:	eb 3f                	jmp    c001d068 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001d029:	8d 76 00             	lea    esi,[esi+0x0]
c001d02c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001d030:	0f b6 c0             	movzx  eax,al
c001d033:	83 e0 10             	and    eax,0x10
c001d036:	0f 95 c2             	setne  dl
c001d039:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001d040:	88 10                	mov    BYTE PTR [eax],dl
c001d042:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d046:	ba 00 00 00 00       	mov    edx,0x0
c001d04b:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001d052:	89 01                	mov    DWORD PTR [ecx],eax
c001d054:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001d057:	b8 00 00 00 00       	mov    eax,0x0
c001d05c:	eb 12                	jmp    c001d070 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001d05e:	66 90                	xchg   ax,ax
c001d060:	b8 02 00 00 00       	mov    eax,0x2
c001d065:	eb 09                	jmp    c001d070 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001d067:	90                   	nop
c001d068:	b8 01 00 00 00       	mov    eax,0x1
c001d06d:	8d 76 00             	lea    esi,[esi+0x0]
c001d070:	81 c4 2c 02 00 00    	add    esp,0x22c
c001d076:	c3                   	ret    
c001d077:	90                   	nop

c001d078 <FAT::unlink(char const*)>:
c001d078:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d07e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001d086:	75 08                	jne    c001d090 <FAT::unlink(char const*)+0x18>
c001d088:	b8 04 00 00 00       	mov    eax,0x4
c001d08d:	eb 61                	jmp    c001d0f0 <FAT::unlink(char const*)+0x78>
c001d08f:	90                   	nop
c001d090:	83 ec 08             	sub    esp,0x8
c001d093:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001d09a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d09e:	50                   	push   eax
c001d09f:	e8 ac 35 fe ff       	call   c0000650 <strcpy>
c001d0a4:	83 c4 10             	add    esp,0x10
c001d0a7:	83 ec 08             	sub    esp,0x8
c001d0aa:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d0ae:	50                   	push   eax
c001d0af:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001d0b6:	e8 61 fc ff ff       	call   c001cd1c <FAT::fixFilepath(char*)>
c001d0bb:	83 c4 10             	add    esp,0x10
c001d0be:	83 ec 0c             	sub    esp,0xc
c001d0c1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d0c5:	50                   	push   eax
c001d0c6:	e8 36 7b fe ff       	call   c0004c01 <f_unlink>
c001d0cb:	83 c4 10             	add    esp,0x10
c001d0ce:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001d0d5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001d0dc:	85 c0                	test   eax,eax
c001d0de:	75 08                	jne    c001d0e8 <FAT::unlink(char const*)+0x70>
c001d0e0:	b8 00 00 00 00       	mov    eax,0x0
c001d0e5:	eb 09                	jmp    c001d0f0 <FAT::unlink(char const*)+0x78>
c001d0e7:	90                   	nop
c001d0e8:	b8 01 00 00 00       	mov    eax,0x1
c001d0ed:	8d 76 00             	lea    esi,[esi+0x0]
c001d0f0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d0f6:	c3                   	ret    
c001d0f7:	90                   	nop

c001d0f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001d0f8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001d0fe:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001d105:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001d10c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d110:	88 d0                	mov    al,dl
c001d112:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d116:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001d11e:	75 0c                	jne    c001d12c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001d120:	b8 04 00 00 00       	mov    eax,0x4
c001d125:	e9 7e 01 00 00       	jmp    c001d2a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001d12a:	66 90                	xchg   ax,ax
c001d12c:	83 ec 08             	sub    esp,0x8
c001d12f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001d136:	8d 44 24 24          	lea    eax,[esp+0x24]
c001d13a:	50                   	push   eax
c001d13b:	e8 10 35 fe ff       	call   c0000650 <strcpy>
c001d140:	83 c4 10             	add    esp,0x10
c001d143:	83 ec 08             	sub    esp,0x8
c001d146:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d14a:	50                   	push   eax
c001d14b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001d152:	e8 c5 fb ff ff       	call   c001cd1c <FAT::fixFilepath(char*)>
c001d157:	83 c4 10             	add    esp,0x10
c001d15a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001d162:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001d16a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d16f:	83 e0 01             	and    eax,0x1
c001d172:	74 14                	je     c001d188 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001d174:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001d17b:	83 c8 01             	or     eax,0x1
c001d17e:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001d185:	8d 76 00             	lea    esi,[esi+0x0]
c001d188:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d18d:	83 e0 02             	and    eax,0x2
c001d190:	74 12                	je     c001d1a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001d192:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001d199:	83 c8 20             	or     eax,0x20
c001d19c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001d1a3:	90                   	nop
c001d1a4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d1a9:	83 e0 04             	and    eax,0x4
c001d1ac:	74 12                	je     c001d1c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001d1ae:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001d1b5:	83 c8 04             	or     eax,0x4
c001d1b8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001d1bf:	90                   	nop
c001d1c0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d1c5:	83 e0 08             	and    eax,0x8
c001d1c8:	74 12                	je     c001d1dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001d1ca:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001d1d1:	83 c8 02             	or     eax,0x2
c001d1d4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001d1db:	90                   	nop
c001d1dc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d1e1:	83 e0 01             	and    eax,0x1
c001d1e4:	74 12                	je     c001d1f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001d1e6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001d1ed:	83 c8 01             	or     eax,0x1
c001d1f0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001d1f7:	90                   	nop
c001d1f8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d1fd:	83 e0 02             	and    eax,0x2
c001d200:	74 12                	je     c001d214 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001d202:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001d209:	83 c8 20             	or     eax,0x20
c001d20c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001d213:	90                   	nop
c001d214:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d219:	83 e0 04             	and    eax,0x4
c001d21c:	74 12                	je     c001d230 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001d21e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001d225:	83 c8 04             	or     eax,0x4
c001d228:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001d22f:	90                   	nop
c001d230:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d235:	83 e0 08             	and    eax,0x8
c001d238:	74 12                	je     c001d24c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001d23a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001d241:	83 c8 02             	or     eax,0x2
c001d244:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001d24b:	90                   	nop
c001d24c:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001d253:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001d25a:	09 d0                	or     eax,edx
c001d25c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001d263:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001d26b:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001d273:	83 ec 04             	sub    esp,0x4
c001d276:	52                   	push   edx
c001d277:	50                   	push   eax
c001d278:	8d 44 24 24          	lea    eax,[esp+0x24]
c001d27c:	50                   	push   eax
c001d27d:	e8 f2 7d fe ff       	call   c0005074 <f_chmod>
c001d282:	83 c4 10             	add    esp,0x10
c001d285:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001d28c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001d293:	85 c0                	test   eax,eax
c001d295:	75 09                	jne    c001d2a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001d297:	b8 00 00 00 00       	mov    eax,0x0
c001d29c:	eb 0a                	jmp    c001d2a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001d29e:	66 90                	xchg   ax,ax
c001d2a0:	b8 01 00 00 00       	mov    eax,0x1
c001d2a5:	8d 76 00             	lea    esi,[esi+0x0]
c001d2a8:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d2ae:	c3                   	ret    
c001d2af:	90                   	nop

c001d2b0 <FAT::rename(char const*, char const*)>:
c001d2b0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001d2b6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001d2be:	74 0c                	je     c001d2cc <FAT::rename(char const*, char const*)+0x1c>
c001d2c0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001d2c8:	75 0e                	jne    c001d2d8 <FAT::rename(char const*, char const*)+0x28>
c001d2ca:	66 90                	xchg   ax,ax
c001d2cc:	b8 04 00 00 00       	mov    eax,0x4
c001d2d1:	e9 9e 00 00 00       	jmp    c001d374 <FAT::rename(char const*, char const*)+0xc4>
c001d2d6:	66 90                	xchg   ax,ax
c001d2d8:	83 ec 08             	sub    esp,0x8
c001d2db:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001d2e2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001d2e9:	50                   	push   eax
c001d2ea:	e8 61 33 fe ff       	call   c0000650 <strcpy>
c001d2ef:	83 c4 10             	add    esp,0x10
c001d2f2:	83 ec 08             	sub    esp,0x8
c001d2f5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001d2fc:	50                   	push   eax
c001d2fd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001d304:	e8 13 fa ff ff       	call   c001cd1c <FAT::fixFilepath(char*)>
c001d309:	83 c4 10             	add    esp,0x10
c001d30c:	83 ec 08             	sub    esp,0x8
c001d30f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001d316:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d31a:	50                   	push   eax
c001d31b:	e8 30 33 fe ff       	call   c0000650 <strcpy>
c001d320:	83 c4 10             	add    esp,0x10
c001d323:	83 ec 08             	sub    esp,0x8
c001d326:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d32a:	50                   	push   eax
c001d32b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001d332:	e8 e5 f9 ff ff       	call   c001cd1c <FAT::fixFilepath(char*)>
c001d337:	83 c4 10             	add    esp,0x10
c001d33a:	83 ec 08             	sub    esp,0x8
c001d33d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d341:	50                   	push   eax
c001d342:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001d349:	50                   	push   eax
c001d34a:	e8 6d 7b fe ff       	call   c0004ebc <f_rename>
c001d34f:	83 c4 10             	add    esp,0x10
c001d352:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001d359:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001d360:	85 c0                	test   eax,eax
c001d362:	75 08                	jne    c001d36c <FAT::rename(char const*, char const*)+0xbc>
c001d364:	b8 00 00 00 00       	mov    eax,0x0
c001d369:	eb 09                	jmp    c001d374 <FAT::rename(char const*, char const*)+0xc4>
c001d36b:	90                   	nop
c001d36c:	b8 01 00 00 00       	mov    eax,0x1
c001d371:	8d 76 00             	lea    esi,[esi+0x0]
c001d374:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d37a:	c3                   	ret    
c001d37b:	90                   	nop

c001d37c <FAT::mkdir(char const*)>:
c001d37c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d382:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001d38a:	75 08                	jne    c001d394 <FAT::mkdir(char const*)+0x18>
c001d38c:	b8 04 00 00 00       	mov    eax,0x4
c001d391:	eb 61                	jmp    c001d3f4 <FAT::mkdir(char const*)+0x78>
c001d393:	90                   	nop
c001d394:	83 ec 08             	sub    esp,0x8
c001d397:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001d39e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d3a2:	50                   	push   eax
c001d3a3:	e8 a8 32 fe ff       	call   c0000650 <strcpy>
c001d3a8:	83 c4 10             	add    esp,0x10
c001d3ab:	83 ec 08             	sub    esp,0x8
c001d3ae:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d3b2:	50                   	push   eax
c001d3b3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001d3ba:	e8 5d f9 ff ff       	call   c001cd1c <FAT::fixFilepath(char*)>
c001d3bf:	83 c4 10             	add    esp,0x10
c001d3c2:	83 ec 0c             	sub    esp,0xc
c001d3c5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d3c9:	50                   	push   eax
c001d3ca:	e8 52 79 fe ff       	call   c0004d21 <f_mkdir>
c001d3cf:	83 c4 10             	add    esp,0x10
c001d3d2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001d3d9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001d3e0:	85 c0                	test   eax,eax
c001d3e2:	75 08                	jne    c001d3ec <FAT::mkdir(char const*)+0x70>
c001d3e4:	b8 00 00 00 00       	mov    eax,0x0
c001d3e9:	eb 09                	jmp    c001d3f4 <FAT::mkdir(char const*)+0x78>
c001d3eb:	90                   	nop
c001d3ec:	b8 01 00 00 00       	mov    eax,0x1
c001d3f1:	8d 76 00             	lea    esi,[esi+0x0]
c001d3f4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d3fa:	c3                   	ret    
c001d3fb:	90                   	nop

c001d3fc <FAT::exists(char const*)>:
c001d3fc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001d402:	83 ec 08             	sub    esp,0x8
c001d405:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001d40c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001d410:	50                   	push   eax
c001d411:	e8 3a 32 fe ff       	call   c0000650 <strcpy>
c001d416:	83 c4 10             	add    esp,0x10
c001d419:	83 ec 08             	sub    esp,0x8
c001d41c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001d420:	50                   	push   eax
c001d421:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001d428:	e8 ef f8 ff ff       	call   c001cd1c <FAT::fixFilepath(char*)>
c001d42d:	83 c4 10             	add    esp,0x10
c001d430:	83 ec 08             	sub    esp,0x8
c001d433:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001d43a:	50                   	push   eax
c001d43b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001d43f:	50                   	push   eax
c001d440:	e8 4a 75 fe ff       	call   c000498f <f_stat>
c001d445:	83 c4 10             	add    esp,0x10
c001d448:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001d44f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001d456:	85 c0                	test   eax,eax
c001d458:	75 06                	jne    c001d460 <FAT::exists(char const*)+0x64>
c001d45a:	b0 01                	mov    al,0x1
c001d45c:	eb 06                	jmp    c001d464 <FAT::exists(char const*)+0x68>
c001d45e:	66 90                	xchg   ax,ax
c001d460:	b0 00                	mov    al,0x0
c001d462:	66 90                	xchg   ax,ax
c001d464:	81 c4 2c 02 00 00    	add    esp,0x22c
c001d46a:	c3                   	ret    
c001d46b:	90                   	nop

c001d46c <isoReadDiscSectorHelper>:
c001d46c:	83 ec 2c             	sub    esp,0x2c
c001d46f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d473:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d477:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001d47c:	83 e8 41             	sub    eax,0x41
c001d47f:	8b 0c 85 e0 1a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffce520]
c001d486:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d48a:	ba 00 00 00 00       	mov    edx,0x0
c001d48f:	83 ec 0c             	sub    esp,0xc
c001d492:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d496:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d49a:	52                   	push   edx
c001d49b:	50                   	push   eax
c001d49c:	51                   	push   ecx
c001d49d:	e8 4c da fe ff       	call   c000aeee <LogicalDisk::read(unsigned long long, int, void*)>
c001d4a2:	83 c4 20             	add    esp,0x20
c001d4a5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d4a9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001d4ae:	74 0c                	je     c001d4bc <isoReadDiscSectorHelper+0x50>
c001d4b0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d4b4:	c1 e0 0b             	shl    eax,0xb
c001d4b7:	eb 0b                	jmp    c001d4c4 <isoReadDiscSectorHelper+0x58>
c001d4b9:	8d 76 00             	lea    esi,[esi+0x0]
c001d4bc:	b8 00 00 00 00       	mov    eax,0x0
c001d4c1:	8d 76 00             	lea    esi,[esi+0x0]
c001d4c4:	83 c4 2c             	add    esp,0x2c
c001d4c7:	c3                   	ret    

c001d4c8 <iso_kprintf>:
c001d4c8:	83 ec 0c             	sub    esp,0xc
c001d4cb:	83 ec 08             	sub    esp,0x8
c001d4ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d4d2:	68 60 a1 02 c0       	push   0xc002a160
c001d4d7:	e8 8a 9a fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d4dc:	83 c4 10             	add    esp,0x10
c001d4df:	90                   	nop
c001d4e0:	83 c4 0c             	add    esp,0xc
c001d4e3:	c3                   	ret    

c001d4e4 <iso_kprintfd>:
c001d4e4:	83 ec 0c             	sub    esp,0xc
c001d4e7:	83 ec 08             	sub    esp,0x8
c001d4ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d4ee:	68 1e 97 02 c0       	push   0xc002971e
c001d4f3:	e8 6e 9a fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d4f8:	83 c4 10             	add    esp,0x10
c001d4fb:	90                   	nop
c001d4fc:	83 c4 0c             	add    esp,0xc
c001d4ff:	c3                   	ret    

c001d500 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001d500:	b8 08 00 00 00       	mov    eax,0x8
c001d505:	c3                   	ret    

c001d506 <ISO9660::truncate(void*, unsigned long long)>:
c001d506:	b8 01 00 00 00       	mov    eax,0x1
c001d50b:	c3                   	ret    

c001d50c <ISO9660::getName()>:
c001d50c:	b8 00 a5 02 c0       	mov    eax,0xc002a500
c001d511:	c3                   	ret    

c001d512 <ISO9660::closeDir(void*)>:
c001d512:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d516:	8b 00                	mov    eax,DWORD PTR [eax]
c001d518:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001d51b:	90                   	nop

c001d51c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001d51c:	b8 01 00 00 00       	mov    eax,0x1
c001d521:	c3                   	ret    

c001d522 <ISO9660::unlink(char const*)>:
c001d522:	b8 01 00 00 00       	mov    eax,0x1
c001d527:	c3                   	ret    

c001d528 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001d528:	b8 03 00 00 00       	mov    eax,0x3
c001d52d:	c3                   	ret    

c001d52e <ISO9660::rename(char const*, char const*)>:
c001d52e:	b8 01 00 00 00       	mov    eax,0x1
c001d533:	c3                   	ret    

c001d534 <ISO9660::mkdir(char const*)>:
c001d534:	b8 01 00 00 00       	mov    eax,0x1
c001d539:	c3                   	ret    

c001d53a <ISO9660::~ISO9660()>:
c001d53a:	83 ec 0c             	sub    esp,0xc
c001d53d:	ba 40 a6 02 c0       	mov    edx,0xc002a640
c001d542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d546:	89 10                	mov    DWORD PTR [eax],edx
c001d548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d54c:	83 ec 0c             	sub    esp,0xc
c001d54f:	50                   	push   eax
c001d550:	e8 59 ad fe ff       	call   c00082ae <Filesystem::~Filesystem()>
c001d555:	83 c4 10             	add    esp,0x10
c001d558:	90                   	nop
c001d559:	83 c4 0c             	add    esp,0xc
c001d55c:	c3                   	ret    
c001d55d:	90                   	nop

c001d55e <ISO9660::~ISO9660()>:
c001d55e:	83 ec 0c             	sub    esp,0xc
c001d561:	83 ec 0c             	sub    esp,0xc
c001d564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d568:	e8 cd ff ff ff       	call   c001d53a <ISO9660::~ISO9660()>
c001d56d:	83 c4 10             	add    esp,0x10
c001d570:	83 ec 08             	sub    esp,0x8
c001d573:	6a 08                	push   0x8
c001d575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d579:	e8 e2 01 ff ff       	call   c000d760 <operator delete(void*, unsigned long)>
c001d57e:	83 c4 10             	add    esp,0x10
c001d581:	83 c4 0c             	add    esp,0xc
c001d584:	c3                   	ret    
c001d585:	90                   	nop

c001d586 <ISO9660::exists(char const*)>:
c001d586:	83 ec 18             	sub    esp,0x18
c001d589:	68 1b a5 02 c0       	push   0xc002a51b
c001d58e:	e8 19 2a ff ff       	call   c000ffac <KePanic(char const*)>
c001d593:	31 c0                	xor    eax,eax
c001d595:	83 c4 1c             	add    esp,0x1c
c001d598:	c3                   	ret    
c001d599:	90                   	nop

c001d59a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001d59a:	56                   	push   esi
c001d59b:	53                   	push   ebx
c001d59c:	53                   	push   ebx
c001d59d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d5a1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d5a5:	85 db                	test   ebx,ebx
c001d5a7:	0f 84 ca 00 00 00    	je     c001d677 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001d5ad:	85 f6                	test   esi,esi
c001d5af:	0f 84 c2 00 00 00    	je     c001d677 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001d5b5:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001d5ba:	b8 03 00 00 00       	mov    eax,0x3
c001d5bf:	0f 85 b7 00 00 00    	jne    c001d67c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d5c5:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001d5c7:	38 0d 80 45 03 c0    	cmp    BYTE PTR ds:0xc0034580,cl
c001d5cd:	0f be 05 80 45 03 c0 	movsx  eax,BYTE PTR ds:0xc0034580
c001d5d4:	74 1b                	je     c001d5f1 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001d5d6:	85 c0                	test   eax,eax
c001d5d8:	74 10                	je     c001d5ea <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001d5da:	83 ec 0c             	sub    esp,0xc
c001d5dd:	68 39 a5 02 c0       	push   0xc002a539
c001d5e2:	e8 c5 29 ff ff       	call   c000ffac <KePanic(char const*)>
c001d5e7:	83 c4 10             	add    esp,0x10
c001d5ea:	8a 03                	mov    al,BYTE PTR [ebx]
c001d5ec:	a2 80 45 03 c0       	mov    ds:0xc0034580,al
c001d5f1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d5f4:	8b 04 85 dc 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce624]
c001d5fb:	85 c0                	test   eax,eax
c001d5fd:	74 09                	je     c001d608 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001d5ff:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d606:	74 48                	je     c001d650 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001d608:	83 ec 0c             	sub    esp,0xc
c001d60b:	68 49 a5 02 c0       	push   0xc002a549
c001d610:	e8 51 99 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d615:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d618:	83 c4 10             	add    esp,0x10
c001d61b:	8b 04 85 dc 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce624]
c001d622:	85 c0                	test   eax,eax
c001d624:	74 17                	je     c001d63d <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001d626:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d62d:	83 ec 0c             	sub    esp,0xc
c001d630:	68 69 a5 02 c0       	push   0xc002a569
c001d635:	e8 2c 99 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d63a:	83 c4 10             	add    esp,0x10
c001d63d:	0f be 05 80 45 03 c0 	movsx  eax,BYTE PTR ds:0xc0034580
c001d644:	83 ec 0c             	sub    esp,0xc
c001d647:	50                   	push   eax
c001d648:	e8 fa 95 fe ff       	call   c0006c47 <init_percd>
c001d64d:	83 c4 10             	add    esp,0x10
c001d650:	51                   	push   ecx
c001d651:	83 c3 03             	add    ebx,0x3
c001d654:	51                   	push   ecx
c001d655:	6a 00                	push   0x0
c001d657:	53                   	push   ebx
c001d658:	e8 ad 90 fe ff       	call   c000670a <iso_open>
c001d65d:	83 c4 10             	add    esp,0x10
c001d660:	89 c2                	mov    edx,eax
c001d662:	b8 01 00 00 00       	mov    eax,0x1
c001d667:	83 fa ff             	cmp    edx,0xffffffff
c001d66a:	74 10                	je     c001d67c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d66c:	83 c2 32             	add    edx,0x32
c001d66f:	31 c0                	xor    eax,eax
c001d671:	01 d2                	add    edx,edx
c001d673:	89 16                	mov    DWORD PTR [esi],edx
c001d675:	eb 05                	jmp    c001d67c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d677:	b8 04 00 00 00       	mov    eax,0x4
c001d67c:	5a                   	pop    edx
c001d67d:	5b                   	pop    ebx
c001d67e:	5e                   	pop    esi
c001d67f:	c3                   	ret    

c001d680 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001d680:	53                   	push   ebx
c001d681:	83 ec 08             	sub    esp,0x8
c001d684:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d688:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d68c:	85 c0                	test   eax,eax
c001d68e:	74 2d                	je     c001d6bd <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001d690:	85 db                	test   ebx,ebx
c001d692:	74 29                	je     c001d6bd <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001d694:	52                   	push   edx
c001d695:	b9 02 00 00 00       	mov    ecx,0x2
c001d69a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d69e:	99                   	cdq    
c001d69f:	f7 f9                	idiv   ecx
c001d6a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d6a5:	83 e8 32             	sub    eax,0x32
c001d6a8:	50                   	push   eax
c001d6a9:	e8 04 91 fe ff       	call   c00067b2 <iso_read>
c001d6ae:	83 c4 10             	add    esp,0x10
c001d6b1:	89 03                	mov    DWORD PTR [ebx],eax
c001d6b3:	09 d0                	or     eax,edx
c001d6b5:	0f 94 c0             	sete   al
c001d6b8:	0f b6 c0             	movzx  eax,al
c001d6bb:	eb 05                	jmp    c001d6c2 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001d6bd:	b8 04 00 00 00       	mov    eax,0x4
c001d6c2:	83 c4 08             	add    esp,0x8
c001d6c5:	5b                   	pop    ebx
c001d6c6:	c3                   	ret    
c001d6c7:	90                   	nop

c001d6c8 <ISO9660::seek(void*, unsigned long long)>:
c001d6c8:	57                   	push   edi
c001d6c9:	b8 04 00 00 00       	mov    eax,0x4
c001d6ce:	56                   	push   esi
c001d6cf:	51                   	push   ecx
c001d6d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d6d4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d6d8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d6dc:	85 d2                	test   edx,edx
c001d6de:	74 26                	je     c001d706 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001d6e0:	89 d0                	mov    eax,edx
c001d6e2:	b9 02 00 00 00       	mov    ecx,0x2
c001d6e7:	6a 00                	push   0x0
c001d6e9:	99                   	cdq    
c001d6ea:	f7 f9                	idiv   ecx
c001d6ec:	57                   	push   edi
c001d6ed:	56                   	push   esi
c001d6ee:	83 e8 32             	sub    eax,0x32
c001d6f1:	50                   	push   eax
c001d6f2:	e8 d1 91 fe ff       	call   c00068c8 <iso_seek>
c001d6f7:	83 c4 10             	add    esp,0x10
c001d6fa:	31 f0                	xor    eax,esi
c001d6fc:	31 fa                	xor    edx,edi
c001d6fe:	09 d0                	or     eax,edx
c001d700:	0f 95 c0             	setne  al
c001d703:	0f b6 c0             	movzx  eax,al
c001d706:	5a                   	pop    edx
c001d707:	5e                   	pop    esi
c001d708:	5f                   	pop    edi
c001d709:	c3                   	ret    

c001d70a <ISO9660::tell(void*, unsigned long long*)>:
c001d70a:	53                   	push   ebx
c001d70b:	83 ec 08             	sub    esp,0x8
c001d70e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d712:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d716:	85 c0                	test   eax,eax
c001d718:	74 24                	je     c001d73e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001d71a:	85 db                	test   ebx,ebx
c001d71c:	74 20                	je     c001d73e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001d71e:	b9 02 00 00 00       	mov    ecx,0x2
c001d723:	99                   	cdq    
c001d724:	f7 f9                	idiv   ecx
c001d726:	83 ec 0c             	sub    esp,0xc
c001d729:	83 e8 32             	sub    eax,0x32
c001d72c:	50                   	push   eax
c001d72d:	e8 1a 92 fe ff       	call   c000694c <iso_tell>
c001d732:	83 c4 10             	add    esp,0x10
c001d735:	89 03                	mov    DWORD PTR [ebx],eax
c001d737:	31 c0                	xor    eax,eax
c001d739:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001d73c:	eb 05                	jmp    c001d743 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001d73e:	b8 04 00 00 00       	mov    eax,0x4
c001d743:	83 c4 08             	add    esp,0x8
c001d746:	5b                   	pop    ebx
c001d747:	c3                   	ret    

c001d748 <ISO9660::stat(void*, unsigned long long*)>:
c001d748:	56                   	push   esi
c001d749:	53                   	push   ebx
c001d74a:	83 ec 10             	sub    esp,0x10
c001d74d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d751:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d755:	68 8d a5 02 c0       	push   0xc002a58d
c001d75a:	e8 07 98 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d75f:	83 c4 10             	add    esp,0x10
c001d762:	85 db                	test   ebx,ebx
c001d764:	74 2a                	je     c001d790 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001d766:	85 f6                	test   esi,esi
c001d768:	74 26                	je     c001d790 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001d76a:	89 d8                	mov    eax,ebx
c001d76c:	b9 02 00 00 00       	mov    ecx,0x2
c001d771:	99                   	cdq    
c001d772:	83 ec 0c             	sub    esp,0xc
c001d775:	f7 f9                	idiv   ecx
c001d777:	83 e8 32             	sub    eax,0x32
c001d77a:	50                   	push   eax
c001d77b:	e8 fd 91 fe ff       	call   c000697d <iso_total>
c001d780:	83 c4 10             	add    esp,0x10
c001d783:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001d78a:	89 06                	mov    DWORD PTR [esi],eax
c001d78c:	31 c0                	xor    eax,eax
c001d78e:	eb 05                	jmp    c001d795 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001d790:	b8 04 00 00 00       	mov    eax,0x4
c001d795:	5a                   	pop    edx
c001d796:	5b                   	pop    ebx
c001d797:	5e                   	pop    esi
c001d798:	c3                   	ret    
c001d799:	90                   	nop

c001d79a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001d79a:	55                   	push   ebp
c001d79b:	57                   	push   edi
c001d79c:	56                   	push   esi
c001d79d:	53                   	push   ebx
c001d79e:	83 ec 18             	sub    esp,0x18
c001d7a1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d7a5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d7a9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d7ad:	68 95 a5 02 c0       	push   0xc002a595
c001d7b2:	e8 af 97 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d7b7:	83 c4 10             	add    esp,0x10
c001d7ba:	85 ff                	test   edi,edi
c001d7bc:	0f 94 c0             	sete   al
c001d7bf:	85 f6                	test   esi,esi
c001d7c1:	0f 94 c2             	sete   dl
c001d7c4:	09 d0                	or     eax,edx
c001d7c6:	a8 01                	test   al,0x1
c001d7c8:	0f 85 dd 00 00 00    	jne    c001d8ab <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001d7ce:	85 db                	test   ebx,ebx
c001d7d0:	0f 84 d5 00 00 00    	je     c001d8ab <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001d7d6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001d7d9:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001d7df:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001d7e6:	0f be 05 80 45 03 c0 	movsx  eax,BYTE PTR ds:0xc0034580
c001d7ed:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001d7ef:	38 0d 80 45 03 c0    	cmp    BYTE PTR ds:0xc0034580,cl
c001d7f5:	74 1b                	je     c001d812 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001d7f7:	85 c0                	test   eax,eax
c001d7f9:	74 10                	je     c001d80b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001d7fb:	83 ec 0c             	sub    esp,0xc
c001d7fe:	68 39 a5 02 c0       	push   0xc002a539
c001d803:	e8 a4 27 ff ff       	call   c000ffac <KePanic(char const*)>
c001d808:	83 c4 10             	add    esp,0x10
c001d80b:	8a 03                	mov    al,BYTE PTR [ebx]
c001d80d:	a2 80 45 03 c0       	mov    ds:0xc0034580,al
c001d812:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d815:	8b 04 85 dc 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce624]
c001d81c:	85 c0                	test   eax,eax
c001d81e:	74 09                	je     c001d829 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001d820:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d827:	74 51                	je     c001d87a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001d829:	83 ec 0c             	sub    esp,0xc
c001d82c:	68 9d a5 02 c0       	push   0xc002a59d
c001d831:	e8 30 97 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d836:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d839:	83 c4 10             	add    esp,0x10
c001d83c:	83 3c 85 dc 19 03 c0 00 	cmp    DWORD PTR [eax*4-0x3ffce624],0x0
c001d844:	74 21                	je     c001d867 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001d846:	83 ec 0c             	sub    esp,0xc
c001d849:	68 bd a5 02 c0       	push   0xc002a5bd
c001d84e:	e8 13 97 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d853:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d856:	83 c4 10             	add    esp,0x10
c001d859:	8b 04 85 dc 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce624]
c001d860:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d867:	0f be 05 80 45 03 c0 	movsx  eax,BYTE PTR ds:0xc0034580
c001d86e:	83 ec 0c             	sub    esp,0xc
c001d871:	50                   	push   eax
c001d872:	e8 d0 93 fe ff       	call   c0006c47 <init_percd>
c001d877:	83 c4 10             	add    esp,0x10
c001d87a:	52                   	push   edx
c001d87b:	83 c3 03             	add    ebx,0x3
c001d87e:	52                   	push   edx
c001d87f:	6a 00                	push   0x0
c001d881:	53                   	push   ebx
c001d882:	e8 83 8e fe ff       	call   c000670a <iso_open>
c001d887:	83 c4 10             	add    esp,0x10
c001d88a:	83 f8 ff             	cmp    eax,0xffffffff
c001d88d:	89 c5                	mov    ebp,eax
c001d88f:	75 21                	jne    c001d8b2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001d891:	50                   	push   eax
c001d892:	50                   	push   eax
c001d893:	6a 01                	push   0x1
c001d895:	53                   	push   ebx
c001d896:	e8 6f 8e fe ff       	call   c000670a <iso_open>
c001d89b:	83 c4 10             	add    esp,0x10
c001d89e:	ba 02 00 00 00       	mov    edx,0x2
c001d8a3:	40                   	inc    eax
c001d8a4:	74 2b                	je     c001d8d1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001d8a6:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001d8a9:	eb 24                	jmp    c001d8cf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001d8ab:	ba 04 00 00 00       	mov    edx,0x4
c001d8b0:	eb 1f                	jmp    c001d8d1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001d8b2:	83 ec 0c             	sub    esp,0xc
c001d8b5:	50                   	push   eax
c001d8b6:	e8 c2 90 fe ff       	call   c000697d <iso_total>
c001d8bb:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001d8c2:	89 07                	mov    DWORD PTR [edi],eax
c001d8c4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d8c7:	e8 c8 8e fe ff       	call   c0006794 <iso_close>
c001d8cc:	83 c4 10             	add    esp,0x10
c001d8cf:	31 d2                	xor    edx,edx
c001d8d1:	83 c4 0c             	add    esp,0xc
c001d8d4:	89 d0                	mov    eax,edx
c001d8d6:	5b                   	pop    ebx
c001d8d7:	5e                   	pop    esi
c001d8d8:	5f                   	pop    edi
c001d8d9:	5d                   	pop    ebp
c001d8da:	c3                   	ret    
c001d8db:	90                   	nop

c001d8dc <ISO9660::close(void*)>:
c001d8dc:	83 ec 0c             	sub    esp,0xc
c001d8df:	b8 04 00 00 00       	mov    eax,0x4
c001d8e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d8e8:	85 d2                	test   edx,edx
c001d8ea:	74 1b                	je     c001d907 <ISO9660::close(void*)+0x2b>
c001d8ec:	89 d0                	mov    eax,edx
c001d8ee:	b9 02 00 00 00       	mov    ecx,0x2
c001d8f3:	99                   	cdq    
c001d8f4:	83 ec 0c             	sub    esp,0xc
c001d8f7:	f7 f9                	idiv   ecx
c001d8f9:	83 e8 32             	sub    eax,0x32
c001d8fc:	50                   	push   eax
c001d8fd:	e8 92 8e fe ff       	call   c0006794 <iso_close>
c001d902:	83 c4 10             	add    esp,0x10
c001d905:	31 c0                	xor    eax,eax
c001d907:	83 c4 0c             	add    esp,0xc
c001d90a:	c3                   	ret    
c001d90b:	90                   	nop

c001d90c <ISO9660::openDir(char const*, void**)>:
c001d90c:	56                   	push   esi
c001d90d:	53                   	push   ebx
c001d90e:	50                   	push   eax
c001d90f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d913:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d917:	85 db                	test   ebx,ebx
c001d919:	0f 84 bd 00 00 00    	je     c001d9dc <ISO9660::openDir(char const*, void**)+0xd0>
c001d91f:	85 f6                	test   esi,esi
c001d921:	0f 84 b5 00 00 00    	je     c001d9dc <ISO9660::openDir(char const*, void**)+0xd0>
c001d927:	8a 13                	mov    dl,BYTE PTR [ebx]
c001d929:	38 15 80 45 03 c0    	cmp    BYTE PTR ds:0xc0034580,dl
c001d92f:	0f be 05 80 45 03 c0 	movsx  eax,BYTE PTR ds:0xc0034580
c001d936:	74 1b                	je     c001d953 <ISO9660::openDir(char const*, void**)+0x47>
c001d938:	85 c0                	test   eax,eax
c001d93a:	74 10                	je     c001d94c <ISO9660::openDir(char const*, void**)+0x40>
c001d93c:	83 ec 0c             	sub    esp,0xc
c001d93f:	68 39 a5 02 c0       	push   0xc002a539
c001d944:	e8 63 26 ff ff       	call   c000ffac <KePanic(char const*)>
c001d949:	83 c4 10             	add    esp,0x10
c001d94c:	8a 03                	mov    al,BYTE PTR [ebx]
c001d94e:	a2 80 45 03 c0       	mov    ds:0xc0034580,al
c001d953:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d956:	8b 04 85 dc 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce624]
c001d95d:	85 c0                	test   eax,eax
c001d95f:	74 10                	je     c001d971 <ISO9660::openDir(char const*, void**)+0x65>
c001d961:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d968:	74 1a                	je     c001d984 <ISO9660::openDir(char const*, void**)+0x78>
c001d96a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d971:	0f be 05 80 45 03 c0 	movsx  eax,BYTE PTR ds:0xc0034580
c001d978:	83 ec 0c             	sub    esp,0xc
c001d97b:	50                   	push   eax
c001d97c:	e8 c6 92 fe ff       	call   c0006c47 <init_percd>
c001d981:	83 c4 10             	add    esp,0x10
c001d984:	50                   	push   eax
c001d985:	83 c3 03             	add    ebx,0x3
c001d988:	50                   	push   eax
c001d989:	6a 01                	push   0x1
c001d98b:	53                   	push   ebx
c001d98c:	e8 79 8d fe ff       	call   c000670a <iso_open>
c001d991:	83 c4 10             	add    esp,0x10
c001d994:	83 f8 ff             	cmp    eax,0xffffffff
c001d997:	89 c3                	mov    ebx,eax
c001d999:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c001d99e:	75 1c                	jne    c001d9bc <ISO9660::openDir(char const*, void**)+0xb0>
c001d9a0:	53                   	push   ebx
c001d9a1:	53                   	push   ebx
c001d9a2:	68 e1 a5 02 c0       	push   0xc002a5e1
c001d9a7:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d9ad:	e8 36 4f ff ff       	call   c00128e8 <VgaText::puts(char const*)>
c001d9b2:	83 c4 10             	add    esp,0x10
c001d9b5:	b8 01 00 00 00       	mov    eax,0x1
c001d9ba:	eb 25                	jmp    c001d9e1 <ISO9660::openDir(char const*, void**)+0xd5>
c001d9bc:	51                   	push   ecx
c001d9bd:	01 db                	add    ebx,ebx
c001d9bf:	51                   	push   ecx
c001d9c0:	83 c3 65             	add    ebx,0x65
c001d9c3:	68 f4 a5 02 c0       	push   0xc002a5f4
c001d9c8:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d9ce:	e8 15 4f ff ff       	call   c00128e8 <VgaText::puts(char const*)>
c001d9d3:	83 c4 10             	add    esp,0x10
c001d9d6:	31 c0                	xor    eax,eax
c001d9d8:	89 1e                	mov    DWORD PTR [esi],ebx
c001d9da:	eb 05                	jmp    c001d9e1 <ISO9660::openDir(char const*, void**)+0xd5>
c001d9dc:	b8 04 00 00 00       	mov    eax,0x4
c001d9e1:	5a                   	pop    edx
c001d9e2:	5b                   	pop    ebx
c001d9e3:	5e                   	pop    esi
c001d9e4:	c3                   	ret    
c001d9e5:	90                   	nop

c001d9e6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001d9e6:	55                   	push   ebp
c001d9e7:	57                   	push   edi
c001d9e8:	56                   	push   esi
c001d9e9:	53                   	push   ebx
c001d9ea:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d9f0:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001d9f7:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001d9fe:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001da05:	85 db                	test   ebx,ebx
c001da07:	0f 84 e4 00 00 00    	je     c001daf1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001da0d:	85 ed                	test   ebp,ebp
c001da0f:	0f 84 dc 00 00 00    	je     c001daf1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001da15:	83 ec 0c             	sub    esp,0xc
c001da18:	68 07 a6 02 c0       	push   0xc002a607
c001da1d:	e8 44 95 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001da22:	89 d8                	mov    eax,ebx
c001da24:	b9 02 00 00 00       	mov    ecx,0x2
c001da29:	99                   	cdq    
c001da2a:	f7 f9                	idiv   ecx
c001da2c:	83 e8 32             	sub    eax,0x32
c001da2f:	89 04 24             	mov    DWORD PTR [esp],eax
c001da32:	e8 98 8f fe ff       	call   c00069cf <iso_readdir>
c001da37:	83 c4 10             	add    esp,0x10
c001da3a:	85 c0                	test   eax,eax
c001da3c:	89 c3                	mov    ebx,eax
c001da3e:	75 38                	jne    c001da78 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001da40:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c001da45:	53                   	push   ebx
c001da46:	53                   	push   ebx
c001da47:	68 12 a6 02 c0       	push   0xc002a612
c001da4c:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001da52:	e8 91 4e ff ff       	call   c00128e8 <VgaText::puts(char const*)>
c001da57:	83 c4 0c             	add    esp,0xc
c001da5a:	68 10 01 00 00       	push   0x110
c001da5f:	6a 00                	push   0x0
c001da61:	57                   	push   edi
c001da62:	e8 89 2a fe ff       	call   c00004f0 <memset>
c001da67:	83 c4 10             	add    esp,0x10
c001da6a:	b8 01 00 00 00       	mov    eax,0x1
c001da6f:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001da76:	eb 7e                	jmp    c001daf6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001da78:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001da7e:	8d 70 08             	lea    esi,[eax+0x8]
c001da81:	83 ec 0c             	sub    esp,0xc
c001da84:	56                   	push   esi
c001da85:	e8 f6 2a fe ff       	call   c0000580 <strlen>
c001da8a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001da92:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001da96:	83 c4 10             	add    esp,0x10
c001da99:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001da9d:	75 0a                	jne    c001daa9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001da9f:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001daa2:	b8 02 00 00 00       	mov    eax,0x2
c001daa7:	74 05                	je     c001daae <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001daa9:	b8 01 00 00 00       	mov    eax,0x1
c001daae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dab2:	50                   	push   eax
c001dab3:	50                   	push   eax
c001dab4:	56                   	push   esi
c001dab5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dab9:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001dabd:	50                   	push   eax
c001dabe:	e8 8d 2b fe ff       	call   c0000650 <strcpy>
c001dac3:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001daca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dacc:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001dad3:	5a                   	pop    edx
c001dad4:	a1 58 23 03 c0       	mov    eax,ds:0xc0032358
c001dad9:	59                   	pop    ecx
c001dada:	68 25 a6 02 c0       	push   0xc002a625
c001dadf:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001dae5:	e8 fe 4d ff ff       	call   c00128e8 <VgaText::puts(char const*)>
c001daea:	83 c4 10             	add    esp,0x10
c001daed:	31 c0                	xor    eax,eax
c001daef:	eb 05                	jmp    c001daf6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001daf1:	b8 04 00 00 00       	mov    eax,0x4
c001daf6:	81 c4 1c 01 00 00    	add    esp,0x11c
c001dafc:	5b                   	pop    ebx
c001dafd:	5e                   	pop    esi
c001dafe:	5f                   	pop    edi
c001daff:	5d                   	pop    ebp
c001db00:	c3                   	ret    

c001db01 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001db01:	57                   	push   edi
c001db02:	56                   	push   esi
c001db03:	53                   	push   ebx
c001db04:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001db08:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001db0c:	39 35 84 45 03 c0    	cmp    DWORD PTR ds:0xc0034584,esi
c001db12:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001db16:	0f be cb             	movsx  ecx,bl
c001db19:	75 0b                	jne    c001db26 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001db1b:	0f be 05 04 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c804
c001db22:	39 c8                	cmp    eax,ecx
c001db24:	74 47                	je     c001db6d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001db26:	83 ec 0c             	sub    esp,0xc
c001db29:	31 d2                	xor    edx,edx
c001db2b:	68 a0 45 03 c0       	push   0xc00345a0
c001db30:	6a 01                	push   0x1
c001db32:	52                   	push   edx
c001db33:	56                   	push   esi
c001db34:	ff 34 8d dc 19 03 c0 	push   DWORD PTR [ecx*4-0x3ffce624]
c001db3b:	e8 ae d3 fe ff       	call   c000aeee <LogicalDisk::read(unsigned long long, int, void*)>
c001db40:	83 c4 20             	add    esp,0x20
c001db43:	85 c0                	test   eax,eax
c001db45:	75 0e                	jne    c001db55 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001db47:	89 35 84 45 03 c0    	mov    DWORD PTR ds:0xc0034584,esi
c001db4d:	88 1d 04 c8 02 c0    	mov    BYTE PTR ds:0xc002c804,bl
c001db53:	eb 18                	jmp    c001db6d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001db55:	50                   	push   eax
c001db56:	68 00 08 00 00       	push   0x800
c001db5b:	6a 00                	push   0x0
c001db5d:	57                   	push   edi
c001db5e:	e8 8d 29 fe ff       	call   c00004f0 <memset>
c001db63:	83 c4 10             	add    esp,0x10
c001db66:	b8 01 00 00 00       	mov    eax,0x1
c001db6b:	eb 0e                	jmp    c001db7b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001db6d:	be a0 45 03 c0       	mov    esi,0xc00345a0
c001db72:	b9 00 08 00 00       	mov    ecx,0x800
c001db77:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001db79:	31 c0                	xor    eax,eax
c001db7b:	5b                   	pop    ebx
c001db7c:	5e                   	pop    esi
c001db7d:	5f                   	pop    edi
c001db7e:	c3                   	ret    
c001db7f:	90                   	nop

c001db80 <ISO9660::tryMount(LogicalDisk*, int)>:
c001db80:	53                   	push   ebx
c001db81:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001db87:	c7 05 84 45 03 c0 ef be ad de 	mov    DWORD PTR ds:0xc0034584,0xdeadbeef
c001db91:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001db98:	8d 58 41             	lea    ebx,[eax+0x41]
c001db9b:	0f be db             	movsx  ebx,bl
c001db9e:	53                   	push   ebx
c001db9f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001dba3:	50                   	push   eax
c001dba4:	6a 10                	push   0x10
c001dba6:	e8 56 ff ff ff       	call   c001db01 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001dbab:	83 c4 10             	add    esp,0x10
c001dbae:	31 d2                	xor    edx,edx
c001dbb0:	85 c0                	test   eax,eax
c001dbb2:	75 33                	jne    c001dbe7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001dbb4:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001dbb9:	75 2c                	jne    c001dbe7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001dbbb:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001dbc0:	75 25                	jne    c001dbe7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001dbc2:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001dbc7:	75 1e                	jne    c001dbe7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001dbc9:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001dbce:	75 17                	jne    c001dbe7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001dbd0:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001dbd5:	75 10                	jne    c001dbe7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001dbd7:	83 ec 0c             	sub    esp,0xc
c001dbda:	53                   	push   ebx
c001dbdb:	e8 67 90 fe ff       	call   c0006c47 <init_percd>
c001dbe0:	83 c4 10             	add    esp,0x10
c001dbe3:	40                   	inc    eax
c001dbe4:	0f 95 c2             	setne  dl
c001dbe7:	81 c4 08 08 00 00    	add    esp,0x808
c001dbed:	88 d0                	mov    al,dl
c001dbef:	5b                   	pop    ebx
c001dbf0:	c3                   	ret    
c001dbf1:	90                   	nop

c001dbf2 <ISO9660::ISO9660()>:
c001dbf2:	83 ec 0c             	sub    esp,0xc
c001dbf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbf9:	83 ec 0c             	sub    esp,0xc
c001dbfc:	50                   	push   eax
c001dbfd:	e8 88 a6 fe ff       	call   c000828a <Filesystem::Filesystem()>
c001dc02:	83 c4 10             	add    esp,0x10
c001dc05:	ba 40 a6 02 c0       	mov    edx,0xc002a640
c001dc0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc0e:	89 10                	mov    DWORD PTR [eax],edx
c001dc10:	e8 44 91 fe ff       	call   c0006d59 <fs_iso9660_init>
c001dc15:	90                   	nop
c001dc16:	83 c4 0c             	add    esp,0xc
c001dc19:	c3                   	ret    

c001dc1a <SoundCard::beginPlayback()>:
c001dc1a:	c7 44 24 04 a4 a6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a6a4
c001dc22:	e9 85 23 ff ff       	jmp    c000ffac <KePanic(char const*)>
c001dc27:	90                   	nop

c001dc28 <SoundCard::stopPlayback()>:
c001dc28:	c7 44 24 04 a4 a6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a6a4
c001dc30:	e9 77 23 ff ff       	jmp    c000ffac <KePanic(char const*)>
c001dc35:	90                   	nop

c001dc36 <SoundCard::SoundCard(char const*)>:
c001dc36:	83 ec 1c             	sub    esp,0x1c
c001dc39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc3d:	83 ec 08             	sub    esp,0x8
c001dc40:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc44:	50                   	push   eax
c001dc45:	e8 e6 c3 fe ff       	call   c000a030 <Device::Device(char const*)>
c001dc4a:	83 c4 10             	add    esp,0x10
c001dc4d:	ba f0 a6 02 c0       	mov    edx,0xc002a6f0
c001dc52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc56:	89 10                	mov    DWORD PTR [eax],edx
c001dc58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc5c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001dc63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc67:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001dc71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc75:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001dc7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc83:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001dc8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc91:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001dc9b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001dca3:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001dca8:	7f 1a                	jg     c001dcc4 <SoundCard::SoundCard(char const*)+0x8e>
c001dcaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001dcb2:	83 c2 54             	add    edx,0x54
c001dcb5:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001dcbd:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001dcc2:	eb df                	jmp    c001dca3 <SoundCard::SoundCard(char const*)+0x6d>
c001dcc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcc8:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001dccf:	90                   	nop
c001dcd0:	83 c4 1c             	add    esp,0x1c
c001dcd3:	c3                   	ret    

c001dcd4 <SoundCard::~SoundCard()>:
c001dcd4:	83 ec 0c             	sub    esp,0xc
c001dcd7:	ba f0 a6 02 c0       	mov    edx,0xc002a6f0
c001dcdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dce0:	89 10                	mov    DWORD PTR [eax],edx
c001dce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dce6:	83 ec 0c             	sub    esp,0xc
c001dce9:	50                   	push   eax
c001dcea:	e8 e1 c0 fe ff       	call   c0009dd0 <Device::~Device()>
c001dcef:	83 c4 10             	add    esp,0x10
c001dcf2:	90                   	nop
c001dcf3:	83 c4 0c             	add    esp,0xc
c001dcf6:	c3                   	ret    
c001dcf7:	90                   	nop

c001dcf8 <SoundCard::~SoundCard()>:
c001dcf8:	83 ec 0c             	sub    esp,0xc
c001dcfb:	83 ec 0c             	sub    esp,0xc
c001dcfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd02:	e8 cd ff ff ff       	call   c001dcd4 <SoundCard::~SoundCard()>
c001dd07:	83 c4 10             	add    esp,0x10
c001dd0a:	83 ec 08             	sub    esp,0x8
c001dd0d:	68 e8 01 00 00       	push   0x1e8
c001dd12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd16:	e8 45 fa fe ff       	call   c000d760 <operator delete(void*, unsigned long)>
c001dd1b:	83 c4 10             	add    esp,0x10
c001dd1e:	83 c4 0c             	add    esp,0xc
c001dd21:	c3                   	ret    

c001dd22 <SoundCard::configureRates(int, int, int)>:
c001dd22:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001dd26:	31 c0                	xor    eax,eax
c001dd28:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001dd2f:	75 20                	jne    c001dd51 <SoundCard::configureRates(int, int, int)+0x2f>
c001dd31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dd35:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001dd3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd3f:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001dd45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd49:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001dd4f:	b0 01                	mov    al,0x1
c001dd51:	c3                   	ret    

c001dd52 <SoundCard::getSamples16(int, short*)>:
c001dd52:	55                   	push   ebp
c001dd53:	57                   	push   edi
c001dd54:	31 ff                	xor    edi,edi
c001dd56:	56                   	push   esi
c001dd57:	53                   	push   ebx
c001dd58:	31 db                	xor    ebx,ebx
c001dd5a:	83 ec 10             	sub    esp,0x10
c001dd5d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001dd61:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001dd65:	8d 04 36             	lea    eax,[esi+esi*1]
c001dd68:	50                   	push   eax
c001dd69:	6a 00                	push   0x0
c001dd6b:	55                   	push   ebp
c001dd6c:	e8 7f 27 fe ff       	call   c00004f0 <memset>
c001dd71:	83 c4 10             	add    esp,0x10
c001dd74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd78:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001dd7f:	85 c0                	test   eax,eax
c001dd81:	74 1a                	je     c001dd9d <SoundCard::getSamples16(int, short*)+0x4b>
c001dd83:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001dd87:	75 14                	jne    c001dd9d <SoundCard::getSamples16(int, short*)+0x4b>
c001dd89:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001dd8d:	55                   	push   ebp
c001dd8e:	56                   	push   esi
c001dd8f:	50                   	push   eax
c001dd90:	e8 8f 03 00 00       	call   c001e124 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001dd95:	83 c4 10             	add    esp,0x10
c001dd98:	39 c3                	cmp    ebx,eax
c001dd9a:	0f 4c d8             	cmovl  ebx,eax
c001dd9d:	47                   	inc    edi
c001dd9e:	83 ff 20             	cmp    edi,0x20
c001dda1:	75 d1                	jne    c001dd74 <SoundCard::getSamples16(int, short*)+0x22>
c001dda3:	83 c4 0c             	add    esp,0xc
c001dda6:	89 d8                	mov    eax,ebx
c001dda8:	5b                   	pop    ebx
c001dda9:	5e                   	pop    esi
c001ddaa:	5f                   	pop    edi
c001ddab:	5d                   	pop    ebp
c001ddac:	c3                   	ret    
c001ddad:	90                   	nop

c001ddae <SoundCard::getSamples32(int, int*)>:
c001ddae:	55                   	push   ebp
c001ddaf:	57                   	push   edi
c001ddb0:	31 ff                	xor    edi,edi
c001ddb2:	56                   	push   esi
c001ddb3:	31 f6                	xor    esi,esi
c001ddb5:	53                   	push   ebx
c001ddb6:	83 ec 10             	sub    esp,0x10
c001ddb9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ddbd:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ddc1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ddc5:	c1 e0 02             	shl    eax,0x2
c001ddc8:	50                   	push   eax
c001ddc9:	6a 00                	push   0x0
c001ddcb:	55                   	push   ebp
c001ddcc:	e8 1f 27 fe ff       	call   c00004f0 <memset>
c001ddd1:	83 c4 10             	add    esp,0x10
c001ddd4:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001dddb:	85 c0                	test   eax,eax
c001dddd:	74 1a                	je     c001ddf9 <SoundCard::getSamples32(int, int*)+0x4b>
c001dddf:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001dde3:	75 14                	jne    c001ddf9 <SoundCard::getSamples32(int, int*)+0x4b>
c001dde5:	53                   	push   ebx
c001dde6:	55                   	push   ebp
c001dde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ddeb:	50                   	push   eax
c001ddec:	e8 03 04 00 00       	call   c001e1f4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ddf1:	83 c4 10             	add    esp,0x10
c001ddf4:	39 c6                	cmp    esi,eax
c001ddf6:	0f 4c f0             	cmovl  esi,eax
c001ddf9:	47                   	inc    edi
c001ddfa:	83 ff 20             	cmp    edi,0x20
c001ddfd:	75 d5                	jne    c001ddd4 <SoundCard::getSamples32(int, int*)+0x26>
c001ddff:	85 f6                	test   esi,esi
c001de01:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001de08:	75 0f                	jne    c001de19 <SoundCard::getSamples32(int, int*)+0x6b>
c001de0a:	85 c0                	test   eax,eax
c001de0c:	74 1b                	je     c001de29 <SoundCard::getSamples32(int, int*)+0x7b>
c001de0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001de10:	83 ec 0c             	sub    esp,0xc
c001de13:	53                   	push   ebx
c001de14:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001de17:	eb 0d                	jmp    c001de26 <SoundCard::getSamples32(int, int*)+0x78>
c001de19:	85 c0                	test   eax,eax
c001de1b:	75 0c                	jne    c001de29 <SoundCard::getSamples32(int, int*)+0x7b>
c001de1d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001de1f:	83 ec 0c             	sub    esp,0xc
c001de22:	53                   	push   ebx
c001de23:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001de26:	83 c4 10             	add    esp,0x10
c001de29:	83 c4 0c             	add    esp,0xc
c001de2c:	89 f0                	mov    eax,esi
c001de2e:	5b                   	pop    ebx
c001de2f:	5e                   	pop    esi
c001de30:	5f                   	pop    edi
c001de31:	5d                   	pop    ebp
c001de32:	c3                   	ret    
c001de33:	90                   	nop

c001de34 <SoundCard::addChannel(SoundPort*)>:
c001de34:	83 ec 0c             	sub    esp,0xc
c001de37:	31 c0                	xor    eax,eax
c001de39:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001de3d:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001de45:	74 1b                	je     c001de62 <SoundCard::addChannel(SoundPort*)+0x2e>
c001de47:	40                   	inc    eax
c001de48:	83 f8 20             	cmp    eax,0x20
c001de4b:	75 f0                	jne    c001de3d <SoundCard::addChannel(SoundPort*)+0x9>
c001de4d:	83 ec 0c             	sub    esp,0xc
c001de50:	68 c9 a6 02 c0       	push   0xc002a6c9
c001de55:	e8 52 21 ff ff       	call   c000ffac <KePanic(char const*)>
c001de5a:	83 c4 10             	add    esp,0x10
c001de5d:	83 c8 ff             	or     eax,0xffffffff
c001de60:	eb 0b                	jmp    c001de6d <SoundCard::addChannel(SoundPort*)+0x39>
c001de62:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001de66:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001de6d:	83 c4 0c             	add    esp,0xc
c001de70:	c3                   	ret    
c001de71:	90                   	nop

c001de72 <SoundCard::removeChannel(int)>:
c001de72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001de7a:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001de85:	c3                   	ret    
c001de86:	66 90                	xchg   ax,ax

c001de88 <SoundPort::SoundPort(int, int, int, int)>:
c001de88:	83 ec 0c             	sub    esp,0xc
c001de8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de8f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001de96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de9a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001de9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dea2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dea6:	89 10                	mov    DWORD PTR [eax],edx
c001dea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001deac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001deb0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001deb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001deb7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001debb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001debe:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001dec3:	75 13                	jne    c001ded8 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001dec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dec9:	8b 00                	mov    eax,DWORD PTR [eax]
c001decb:	05 a0 0f 00 00       	add    eax,0xfa0
c001ded0:	d1 e0                	shl    eax,1
c001ded2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ded6:	66 90                	xchg   ax,ax
c001ded8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dedc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dee0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001dee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dee7:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001deee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001def2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001def5:	c1 e0 02             	shl    eax,0x2
c001def8:	83 ec 0c             	sub    esp,0xc
c001defb:	50                   	push   eax
c001defc:	e8 57 1c ff ff       	call   c000fb58 <malloc>
c001df01:	83 c4 10             	add    esp,0x10
c001df04:	89 c2                	mov    edx,eax
c001df06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df0a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001df0d:	90                   	nop
c001df0e:	83 c4 0c             	add    esp,0xc
c001df11:	c3                   	ret    
c001df12:	66 90                	xchg   ax,ax

c001df14 <SoundPort::~SoundPort()>:
c001df14:	83 ec 0c             	sub    esp,0xc
c001df17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df1b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001df1e:	85 c0                	test   eax,eax
c001df20:	74 1e                	je     c001df40 <SoundPort::~SoundPort()+0x2c>
c001df22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df26:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001df29:	83 ec 0c             	sub    esp,0xc
c001df2c:	50                   	push   eax
c001df2d:	e8 36 1c ff ff       	call   c000fb68 <free>
c001df32:	83 c4 10             	add    esp,0x10
c001df35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df39:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001df40:	90                   	nop
c001df41:	83 c4 0c             	add    esp,0xc
c001df44:	c3                   	ret    
c001df45:	90                   	nop
c001df46:	66 90                	xchg   ax,ax

c001df48 <SoundPort::unpause()>:
c001df48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df4c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001df50:	c3                   	ret    
c001df51:	90                   	nop
c001df52:	66 90                	xchg   ax,ax

c001df54 <SoundPort::pause()>:
c001df54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df58:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001df5c:	c3                   	ret    
c001df5d:	90                   	nop
c001df5e:	66 90                	xchg   ax,ax

c001df60 <SoundPort::getBufferUsed()>:
c001df60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df64:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001df67:	c3                   	ret    

c001df68 <SoundPort::getBufferSize()>:
c001df68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df6c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001df6f:	c3                   	ret    

c001df70 <SoundPort::buffer8(signed char*, int)>:
c001df70:	55                   	push   ebp
c001df71:	57                   	push   edi
c001df72:	56                   	push   esi
c001df73:	53                   	push   ebx
c001df74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001df78:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001df7c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001df7f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001df82:	74 70                	je     c001dff4 <SoundPort::buffer8(signed char*, int)+0x84>
c001df84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001df88:	85 c9                	test   ecx,ecx
c001df8a:	7e 68                	jle    c001dff4 <SoundPort::buffer8(signed char*, int)+0x84>
c001df8c:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001df90:	8d 48 01             	lea    ecx,[eax+0x1]
c001df93:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001df96:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001df99:	89 f1                	mov    ecx,esi
c001df9b:	c1 e1 18             	shl    ecx,0x18
c001df9e:	29 f1                	sub    ecx,esi
c001dfa0:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001dfa3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dfa6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dfa9:	74 51                	je     c001dffc <SoundPort::buffer8(signed char*, int)+0x8c>
c001dfab:	31 ff                	xor    edi,edi
c001dfad:	eb 25                	jmp    c001dfd4 <SoundPort::buffer8(signed char*, int)+0x64>
c001dfaf:	90                   	nop
c001dfb0:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001dfb5:	8d 59 01             	lea    ebx,[ecx+0x1]
c001dfb8:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001dfbb:	89 f3                	mov    ebx,esi
c001dfbd:	c1 e3 18             	shl    ebx,0x18
c001dfc0:	29 f3                	sub    ebx,esi
c001dfc2:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001dfc5:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001dfc8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dfcb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dfce:	74 1c                	je     c001dfec <SoundPort::buffer8(signed char*, int)+0x7c>
c001dfd0:	89 c7                	mov    edi,eax
c001dfd2:	66 90                	xchg   ax,ax
c001dfd4:	8d 47 01             	lea    eax,[edi+0x1]
c001dfd7:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001dfdb:	75 d3                	jne    c001dfb0 <SoundPort::buffer8(signed char*, int)+0x40>
c001dfdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dfe1:	8d 76 00             	lea    esi,[esi+0x0]
c001dfe4:	5b                   	pop    ebx
c001dfe5:	5e                   	pop    esi
c001dfe6:	5f                   	pop    edi
c001dfe7:	5d                   	pop    ebp
c001dfe8:	c3                   	ret    
c001dfe9:	8d 76 00             	lea    esi,[esi+0x0]
c001dfec:	5b                   	pop    ebx
c001dfed:	8d 47 02             	lea    eax,[edi+0x2]
c001dff0:	5e                   	pop    esi
c001dff1:	5f                   	pop    edi
c001dff2:	5d                   	pop    ebp
c001dff3:	c3                   	ret    
c001dff4:	5b                   	pop    ebx
c001dff5:	31 c0                	xor    eax,eax
c001dff7:	5e                   	pop    esi
c001dff8:	5f                   	pop    edi
c001dff9:	5d                   	pop    ebp
c001dffa:	c3                   	ret    
c001dffb:	90                   	nop
c001dffc:	b8 01 00 00 00       	mov    eax,0x1
c001e001:	eb e1                	jmp    c001dfe4 <SoundPort::buffer8(signed char*, int)+0x74>
c001e003:	90                   	nop

c001e004 <SoundPort::buffer16(short*, int)>:
c001e004:	55                   	push   ebp
c001e005:	57                   	push   edi
c001e006:	56                   	push   esi
c001e007:	53                   	push   ebx
c001e008:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e00c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001e010:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001e013:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001e016:	74 70                	je     c001e088 <SoundPort::buffer16(short*, int)+0x84>
c001e018:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e01c:	85 c9                	test   ecx,ecx
c001e01e:	7e 68                	jle    c001e088 <SoundPort::buffer16(short*, int)+0x84>
c001e020:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001e024:	8d 48 01             	lea    ecx,[eax+0x1]
c001e027:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001e02a:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001e02d:	89 f1                	mov    ecx,esi
c001e02f:	c1 e1 10             	shl    ecx,0x10
c001e032:	29 f1                	sub    ecx,esi
c001e034:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001e037:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001e03a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001e03d:	74 51                	je     c001e090 <SoundPort::buffer16(short*, int)+0x8c>
c001e03f:	31 ff                	xor    edi,edi
c001e041:	eb 25                	jmp    c001e068 <SoundPort::buffer16(short*, int)+0x64>
c001e043:	90                   	nop
c001e044:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001e049:	8d 59 01             	lea    ebx,[ecx+0x1]
c001e04c:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001e04f:	89 f3                	mov    ebx,esi
c001e051:	c1 e3 10             	shl    ebx,0x10
c001e054:	29 f3                	sub    ebx,esi
c001e056:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001e059:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001e05c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001e05f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001e062:	74 1c                	je     c001e080 <SoundPort::buffer16(short*, int)+0x7c>
c001e064:	89 c7                	mov    edi,eax
c001e066:	66 90                	xchg   ax,ax
c001e068:	8d 47 01             	lea    eax,[edi+0x1]
c001e06b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001e06f:	75 d3                	jne    c001e044 <SoundPort::buffer16(short*, int)+0x40>
c001e071:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e075:	8d 76 00             	lea    esi,[esi+0x0]
c001e078:	5b                   	pop    ebx
c001e079:	5e                   	pop    esi
c001e07a:	5f                   	pop    edi
c001e07b:	5d                   	pop    ebp
c001e07c:	c3                   	ret    
c001e07d:	8d 76 00             	lea    esi,[esi+0x0]
c001e080:	5b                   	pop    ebx
c001e081:	8d 47 02             	lea    eax,[edi+0x2]
c001e084:	5e                   	pop    esi
c001e085:	5f                   	pop    edi
c001e086:	5d                   	pop    ebp
c001e087:	c3                   	ret    
c001e088:	5b                   	pop    ebx
c001e089:	31 c0                	xor    eax,eax
c001e08b:	5e                   	pop    esi
c001e08c:	5f                   	pop    edi
c001e08d:	5d                   	pop    ebp
c001e08e:	c3                   	ret    
c001e08f:	90                   	nop
c001e090:	b8 01 00 00 00       	mov    eax,0x1
c001e095:	eb e1                	jmp    c001e078 <SoundPort::buffer16(short*, int)+0x74>
c001e097:	90                   	nop

c001e098 <SoundPort::buffer32(int*, int)>:
c001e098:	55                   	push   ebp
c001e099:	57                   	push   edi
c001e09a:	56                   	push   esi
c001e09b:	53                   	push   ebx
c001e09c:	83 ec 04             	sub    esp,0x4
c001e09f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e0a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0a7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e0ab:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001e0ae:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001e0b1:	89 04 24             	mov    DWORD PTR [esp],eax
c001e0b4:	74 5a                	je     c001e110 <SoundPort::buffer32(int*, int)+0x78>
c001e0b6:	85 c0                	test   eax,eax
c001e0b8:	7e 56                	jle    c001e110 <SoundPort::buffer32(int*, int)+0x78>
c001e0ba:	8d 71 01             	lea    esi,[ecx+0x1]
c001e0bd:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001e0c0:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001e0c3:	8b 37                	mov    esi,DWORD PTR [edi]
c001e0c5:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001e0c8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001e0cb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001e0ce:	74 4c                	je     c001e11c <SoundPort::buffer32(int*, int)+0x84>
c001e0d0:	31 f6                	xor    esi,esi
c001e0d2:	eb 1c                	jmp    c001e0f0 <SoundPort::buffer32(int*, int)+0x58>
c001e0d4:	8d 69 01             	lea    ebp,[ecx+0x1]
c001e0d7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001e0da:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001e0dd:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001e0e0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001e0e4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001e0e7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001e0ea:	74 18                	je     c001e104 <SoundPort::buffer32(int*, int)+0x6c>
c001e0ec:	89 de                	mov    esi,ebx
c001e0ee:	66 90                	xchg   ax,ax
c001e0f0:	8d 5e 01             	lea    ebx,[esi+0x1]
c001e0f3:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001e0f6:	75 dc                	jne    c001e0d4 <SoundPort::buffer32(int*, int)+0x3c>
c001e0f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e0fb:	90                   	nop
c001e0fc:	83 c4 04             	add    esp,0x4
c001e0ff:	5b                   	pop    ebx
c001e100:	5e                   	pop    esi
c001e101:	5f                   	pop    edi
c001e102:	5d                   	pop    ebp
c001e103:	c3                   	ret    
c001e104:	8d 46 02             	lea    eax,[esi+0x2]
c001e107:	83 c4 04             	add    esp,0x4
c001e10a:	5b                   	pop    ebx
c001e10b:	5e                   	pop    esi
c001e10c:	5f                   	pop    edi
c001e10d:	5d                   	pop    ebp
c001e10e:	c3                   	ret    
c001e10f:	90                   	nop
c001e110:	83 c4 04             	add    esp,0x4
c001e113:	31 c0                	xor    eax,eax
c001e115:	5b                   	pop    ebx
c001e116:	5e                   	pop    esi
c001e117:	5f                   	pop    edi
c001e118:	5d                   	pop    ebp
c001e119:	c3                   	ret    
c001e11a:	66 90                	xchg   ax,ax
c001e11c:	b8 01 00 00 00       	mov    eax,0x1
c001e121:	eb d9                	jmp    c001e0fc <SoundPort::buffer32(int*, int)+0x64>
c001e123:	90                   	nop

c001e124 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001e124:	55                   	push   ebp
c001e125:	57                   	push   edi
c001e126:	56                   	push   esi
c001e127:	53                   	push   ebx
c001e128:	83 ec 0c             	sub    esp,0xc
c001e12b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001e12f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e133:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001e137:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001e13b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001e141:	39 03                	cmp    DWORD PTR [ebx],eax
c001e143:	74 13                	je     c001e158 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001e145:	83 ec 0c             	sub    esp,0xc
c001e148:	68 1c a7 02 c0       	push   0xc002a71c
c001e14d:	e8 5a 1e ff ff       	call   c000ffac <KePanic(char const*)>
c001e152:	83 c4 10             	add    esp,0x10
c001e155:	8d 76 00             	lea    esi,[esi+0x0]
c001e158:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001e15e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001e161:	74 11                	je     c001e174 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001e163:	83 ec 0c             	sub    esp,0xc
c001e166:	68 5b a7 02 c0       	push   0xc002a75b
c001e16b:	e8 3c 1e ff ff       	call   c000ffac <KePanic(char const*)>
c001e170:	83 c4 10             	add    esp,0x10
c001e173:	90                   	nop
c001e174:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001e17a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001e17d:	74 11                	je     c001e190 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001e17f:	83 ec 0c             	sub    esp,0xc
c001e182:	68 5b a7 02 c0       	push   0xc002a75b
c001e187:	e8 20 1e ff ff       	call   c000ffac <KePanic(char const*)>
c001e18c:	83 c4 10             	add    esp,0x10
c001e18f:	90                   	nop
c001e190:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001e193:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001e197:	85 f6                	test   esi,esi
c001e199:	7e 2d                	jle    c001e1c8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001e19b:	31 c0                	xor    eax,eax
c001e19d:	8d 76 00             	lea    esi,[esi+0x0]
c001e1a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001e1a3:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001e1a6:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001e1ac:	85 c9                	test   ecx,ecx
c001e1ae:	0f 49 d1             	cmovns edx,ecx
c001e1b1:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001e1b5:	c1 fa 0f             	sar    edx,0xf
c001e1b8:	01 d1                	add    ecx,edx
c001e1ba:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001e1be:	83 c0 01             	add    eax,0x1
c001e1c1:	39 f0                	cmp    eax,esi
c001e1c3:	75 db                	jne    c001e1a0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001e1c5:	8d 76 00             	lea    esi,[esi+0x0]
c001e1c8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001e1cb:	83 ec 04             	sub    esp,0x4
c001e1ce:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001e1d1:	29 f0                	sub    eax,esi
c001e1d3:	c1 e0 02             	shl    eax,0x2
c001e1d6:	50                   	push   eax
c001e1d7:	8d 04 b2             	lea    eax,[edx+esi*4]
c001e1da:	50                   	push   eax
c001e1db:	52                   	push   edx
c001e1dc:	e8 ef 21 fe ff       	call   c00003d0 <memmove>
c001e1e1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001e1e4:	29 f0                	sub    eax,esi
c001e1e6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001e1e9:	83 c4 1c             	add    esp,0x1c
c001e1ec:	89 f0                	mov    eax,esi
c001e1ee:	5b                   	pop    ebx
c001e1ef:	5e                   	pop    esi
c001e1f0:	5f                   	pop    edi
c001e1f1:	5d                   	pop    ebp
c001e1f2:	c3                   	ret    
c001e1f3:	90                   	nop

c001e1f4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001e1f4:	55                   	push   ebp
c001e1f5:	57                   	push   edi
c001e1f6:	56                   	push   esi
c001e1f7:	53                   	push   ebx
c001e1f8:	83 ec 0c             	sub    esp,0xc
c001e1fb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001e1ff:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e203:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001e207:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001e20b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001e211:	39 03                	cmp    DWORD PTR [ebx],eax
c001e213:	74 13                	je     c001e228 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001e215:	83 ec 0c             	sub    esp,0xc
c001e218:	68 3c a7 02 c0       	push   0xc002a73c
c001e21d:	e8 8a 1d ff ff       	call   c000ffac <KePanic(char const*)>
c001e222:	83 c4 10             	add    esp,0x10
c001e225:	8d 76 00             	lea    esi,[esi+0x0]
c001e228:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001e22e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001e231:	74 11                	je     c001e244 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001e233:	83 ec 0c             	sub    esp,0xc
c001e236:	68 77 a7 02 c0       	push   0xc002a777
c001e23b:	e8 6c 1d ff ff       	call   c000ffac <KePanic(char const*)>
c001e240:	83 c4 10             	add    esp,0x10
c001e243:	90                   	nop
c001e244:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001e24a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001e24d:	74 11                	je     c001e260 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001e24f:	83 ec 0c             	sub    esp,0xc
c001e252:	68 77 a7 02 c0       	push   0xc002a777
c001e257:	e8 50 1d ff ff       	call   c000ffac <KePanic(char const*)>
c001e25c:	83 c4 10             	add    esp,0x10
c001e25f:	90                   	nop
c001e260:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001e263:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001e267:	85 ff                	test   edi,edi
c001e269:	7e 21                	jle    c001e28c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001e26b:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001e272:	31 c0                	xor    eax,eax
c001e274:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001e277:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001e27a:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001e27d:	01 d5                	add    ebp,edx
c001e27f:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001e282:	83 c0 04             	add    eax,0x4
c001e285:	39 c1                	cmp    ecx,eax
c001e287:	75 eb                	jne    c001e274 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001e289:	8d 76 00             	lea    esi,[esi+0x0]
c001e28c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001e28f:	83 ec 04             	sub    esp,0x4
c001e292:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001e295:	29 f8                	sub    eax,edi
c001e297:	c1 e0 02             	shl    eax,0x2
c001e29a:	50                   	push   eax
c001e29b:	8d 04 ba             	lea    eax,[edx+edi*4]
c001e29e:	50                   	push   eax
c001e29f:	52                   	push   edx
c001e2a0:	e8 2b 21 fe ff       	call   c00003d0 <memmove>
c001e2a5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001e2a8:	29 f8                	sub    eax,edi
c001e2aa:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001e2ad:	83 c4 1c             	add    esp,0x1c
c001e2b0:	89 f8                	mov    eax,edi
c001e2b2:	5b                   	pop    ebx
c001e2b3:	5e                   	pop    esi
c001e2b4:	5f                   	pop    edi
c001e2b5:	5d                   	pop    ebp
c001e2b6:	c3                   	ret    
c001e2b7:	90                   	nop

c001e2b8 <PCI::open(int, int, void*)>:
c001e2b8:	83 ec 18             	sub    esp,0x18
c001e2bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e2bf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2c3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e2c9:	8b 10                	mov    edx,DWORD PTR [eax]
c001e2cb:	50                   	push   eax
c001e2cc:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001e2cf:	31 c0                	xor    eax,eax
c001e2d1:	83 c4 1c             	add    esp,0x1c
c001e2d4:	c3                   	ret    
c001e2d5:	90                   	nop

c001e2d6 <PCI::close(int, int, void*)>:
c001e2d6:	31 c0                	xor    eax,eax
c001e2d8:	c3                   	ret    
c001e2d9:	90                   	nop

c001e2da <PCI::PCI()>:
c001e2da:	83 ec 0c             	sub    esp,0xc
c001e2dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2e1:	83 ec 08             	sub    esp,0x8
c001e2e4:	68 93 a7 02 c0       	push   0xc002a793
c001e2e9:	50                   	push   eax
c001e2ea:	e8 4d ab fe ff       	call   c0008e3c <Bus::Bus(char const*)>
c001e2ef:	83 c4 10             	add    esp,0x10
c001e2f2:	ba a0 a8 02 c0       	mov    edx,0xc002a8a0
c001e2f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2fb:	89 10                	mov    DWORD PTR [eax],edx
c001e2fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e301:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001e30b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e30f:	a3 a0 4d 03 c0       	mov    ds:0xc0034da0,eax
c001e314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e318:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e31e:	0f b6 d0             	movzx  edx,al
c001e321:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e325:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001e32c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e330:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e336:	0f b6 d0             	movzx  edx,al
c001e339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e33d:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001e342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e346:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e34c:	8d 50 01             	lea    edx,[eax+0x1]
c001e34f:	88 d1                	mov    cl,dl
c001e351:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e355:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001e35b:	0f b6 d0             	movzx  edx,al
c001e35e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e362:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e366:	83 c9 c0             	or     ecx,0xffffffc0
c001e369:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e36d:	90                   	nop
c001e36e:	83 c4 0c             	add    esp,0xc
c001e371:	c3                   	ret    

c001e372 <PCI::readBAR8(unsigned int, int)>:
c001e372:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e376:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e37a:	f6 c2 01             	test   dl,0x1
c001e37d:	74 07                	je     c001e386 <PCI::readBAR8(unsigned int, int)+0x14>
c001e37f:	83 e2 fc             	and    edx,0xfffffffc
c001e382:	01 c2                	add    edx,eax
c001e384:	ec                   	in     al,dx
c001e385:	c3                   	ret    
c001e386:	83 e2 f0             	and    edx,0xfffffff0
c001e389:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001e38c:	c3                   	ret    
c001e38d:	90                   	nop

c001e38e <PCI::readBAR16(unsigned int, int)>:
c001e38e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e392:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e396:	f6 c2 01             	test   dl,0x1
c001e399:	74 08                	je     c001e3a3 <PCI::readBAR16(unsigned int, int)+0x15>
c001e39b:	83 e2 fc             	and    edx,0xfffffffc
c001e39e:	01 c2                	add    edx,eax
c001e3a0:	66 ed                	in     ax,dx
c001e3a2:	c3                   	ret    
c001e3a3:	83 e2 f0             	and    edx,0xfffffff0
c001e3a6:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001e3aa:	c3                   	ret    
c001e3ab:	90                   	nop

c001e3ac <PCI::readBAR32(unsigned int, int)>:
c001e3ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e3b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e3b4:	f6 c2 01             	test   dl,0x1
c001e3b7:	74 07                	je     c001e3c0 <PCI::readBAR32(unsigned int, int)+0x14>
c001e3b9:	83 e2 fc             	and    edx,0xfffffffc
c001e3bc:	01 c2                	add    edx,eax
c001e3be:	ed                   	in     eax,dx
c001e3bf:	c3                   	ret    
c001e3c0:	83 e2 f0             	and    edx,0xfffffff0
c001e3c3:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001e3c6:	c3                   	ret    
c001e3c7:	90                   	nop

c001e3c8 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001e3c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e3cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e3d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e3d4:	f6 c2 01             	test   dl,0x1
c001e3d7:	74 07                	je     c001e3e0 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001e3d9:	83 e2 fc             	and    edx,0xfffffffc
c001e3dc:	01 ca                	add    edx,ecx
c001e3de:	ee                   	out    dx,al
c001e3df:	c3                   	ret    
c001e3e0:	83 e2 f0             	and    edx,0xfffffff0
c001e3e3:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001e3e6:	c3                   	ret    
c001e3e7:	90                   	nop

c001e3e8 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001e3e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e3ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e3f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e3f4:	f6 c2 01             	test   dl,0x1
c001e3f7:	74 08                	je     c001e401 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001e3f9:	83 e2 fc             	and    edx,0xfffffffc
c001e3fc:	01 ca                	add    edx,ecx
c001e3fe:	66 ef                	out    dx,ax
c001e400:	c3                   	ret    
c001e401:	83 e2 f0             	and    edx,0xfffffff0
c001e404:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001e408:	c3                   	ret    
c001e409:	90                   	nop

c001e40a <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001e40a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e40e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e412:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e416:	f6 c2 01             	test   dl,0x1
c001e419:	74 07                	je     c001e422 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001e41b:	83 e2 fc             	and    edx,0xfffffffc
c001e41e:	01 ca                	add    edx,ecx
c001e420:	ef                   	out    dx,eax
c001e421:	c3                   	ret    
c001e422:	83 e2 f0             	and    edx,0xfffffff0
c001e425:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001e428:	c3                   	ret    
c001e429:	90                   	nop

c001e42a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001e42a:	55                   	push   ebp
c001e42b:	57                   	push   edi
c001e42c:	56                   	push   esi
c001e42d:	53                   	push   ebx
c001e42e:	83 ec 0c             	sub    esp,0xc
c001e431:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001e436:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001e43a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001e43e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e442:	83 fe 07             	cmp    esi,0x7
c001e445:	76 10                	jbe    c001e457 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001e447:	83 ec 0c             	sub    esp,0xc
c001e44a:	68 9b a7 02 c0       	push   0xc002a79b
c001e44f:	e8 58 1b ff ff       	call   c000ffac <KePanic(char const*)>
c001e454:	83 c4 10             	add    esp,0x10
c001e457:	0f b6 db             	movzx  ebx,bl
c001e45a:	83 fb 0f             	cmp    ebx,0xf
c001e45d:	76 10                	jbe    c001e46f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001e45f:	83 ec 0c             	sub    esp,0xc
c001e462:	68 cb a7 02 c0       	push   0xc002a7cb
c001e467:	e8 40 1b ff ff       	call   c000ffac <KePanic(char const*)>
c001e46c:	83 c4 10             	add    esp,0x10
c001e46f:	8d 04 36             	lea    eax,[esi+esi*1]
c001e472:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e477:	83 c8 f0             	or     eax,0xfffffff0
c001e47a:	ee                   	out    dx,al
c001e47b:	ba fa 0c 00 00       	mov    edx,0xcfa
c001e480:	89 e8                	mov    eax,ebp
c001e482:	ee                   	out    dx,al
c001e483:	89 f9                	mov    ecx,edi
c001e485:	89 d8                	mov    eax,ebx
c001e487:	0f b6 d9             	movzx  ebx,cl
c001e48a:	83 c4 0c             	add    esp,0xc
c001e48d:	c1 e0 08             	shl    eax,0x8
c001e490:	83 e3 fc             	and    ebx,0xfffffffc
c001e493:	09 d8                	or     eax,ebx
c001e495:	5b                   	pop    ebx
c001e496:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001e49b:	5e                   	pop    esi
c001e49c:	5f                   	pop    edi
c001e49d:	5d                   	pop    ebp
c001e49e:	c3                   	ret    
c001e49f:	90                   	nop

c001e4a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001e4a0:	57                   	push   edi
c001e4a1:	56                   	push   esi
c001e4a2:	53                   	push   ebx
c001e4a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e4a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e4ab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e4af:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e4b3:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001e4b9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e4bd:	83 ff 01             	cmp    edi,0x1
c001e4c0:	75 3f                	jne    c001e501 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001e4c2:	89 de                	mov    esi,ebx
c001e4c4:	0f b6 c0             	movzx  eax,al
c001e4c7:	c1 e0 10             	shl    eax,0x10
c001e4ca:	81 e6 fc 00 00 00    	and    esi,0xfc
c001e4d0:	0f b6 c9             	movzx  ecx,cl
c001e4d3:	09 f0                	or     eax,esi
c001e4d5:	c1 e1 08             	shl    ecx,0x8
c001e4d8:	0f b6 d2             	movzx  edx,dl
c001e4db:	c1 e2 0b             	shl    edx,0xb
c001e4de:	09 c8                	or     eax,ecx
c001e4e0:	09 d0                	or     eax,edx
c001e4e2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e4e7:	0d 00 00 00 80       	or     eax,0x80000000
c001e4ec:	ef                   	out    dx,eax
c001e4ed:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e4f2:	ed                   	in     eax,dx
c001e4f3:	83 e3 02             	and    ebx,0x2
c001e4f6:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001e4fd:	d3 e8                	shr    eax,cl
c001e4ff:	eb 44                	jmp    c001e545 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001e501:	83 ff 02             	cmp    edi,0x2
c001e504:	75 2d                	jne    c001e533 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001e506:	83 ec 0c             	sub    esp,0xc
c001e509:	0f b6 fb             	movzx  edi,bl
c001e50c:	57                   	push   edi
c001e50d:	0f b6 c9             	movzx  ecx,cl
c001e510:	51                   	push   ecx
c001e511:	0f b6 d2             	movzx  edx,dl
c001e514:	52                   	push   edx
c001e515:	0f b6 c0             	movzx  eax,al
c001e518:	50                   	push   eax
c001e519:	56                   	push   esi
c001e51a:	e8 0b ff ff ff       	call   c001e42a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e51f:	89 c2                	mov    edx,eax
c001e521:	ed                   	in     eax,dx
c001e522:	83 e3 02             	and    ebx,0x2
c001e525:	83 c4 20             	add    esp,0x20
c001e528:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001e52f:	d3 e8                	shr    eax,cl
c001e531:	eb 12                	jmp    c001e545 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001e533:	83 ec 0c             	sub    esp,0xc
c001e536:	68 fb a7 02 c0       	push   0xc002a7fb
c001e53b:	e8 6c 1a ff ff       	call   c000ffac <KePanic(char const*)>
c001e540:	83 c4 10             	add    esp,0x10
c001e543:	31 c0                	xor    eax,eax
c001e545:	5b                   	pop    ebx
c001e546:	5e                   	pop    esi
c001e547:	5f                   	pop    edi
c001e548:	c3                   	ret    
c001e549:	90                   	nop

c001e54a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001e54a:	83 ec 18             	sub    esp,0x18
c001e54d:	6a 00                	push   0x0
c001e54f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e554:	50                   	push   eax
c001e555:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e55a:	50                   	push   eax
c001e55b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e560:	50                   	push   eax
c001e561:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e565:	e8 36 ff ff ff       	call   c001e4a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e56a:	83 c4 2c             	add    esp,0x2c
c001e56d:	c3                   	ret    

c001e56e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001e56e:	83 ec 18             	sub    esp,0x18
c001e571:	6a 0e                	push   0xe
c001e573:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e578:	50                   	push   eax
c001e579:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e57e:	50                   	push   eax
c001e57f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e584:	50                   	push   eax
c001e585:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e589:	e8 12 ff ff ff       	call   c001e4a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e58e:	83 c4 2c             	add    esp,0x2c
c001e591:	0f b6 c0             	movzx  eax,al
c001e594:	c3                   	ret    
c001e595:	90                   	nop

c001e596 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001e596:	55                   	push   ebp
c001e597:	57                   	push   edi
c001e598:	56                   	push   esi
c001e599:	53                   	push   ebx
c001e59a:	83 ec 18             	sub    esp,0x18
c001e59d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001e5a2:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001e5a7:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001e5ac:	6a 0a                	push   0xa
c001e5ae:	56                   	push   esi
c001e5af:	55                   	push   ebp
c001e5b0:	57                   	push   edi
c001e5b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e5b5:	e8 e6 fe ff ff       	call   c001e4a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e5ba:	83 c4 14             	add    esp,0x14
c001e5bd:	6a 0a                	push   0xa
c001e5bf:	56                   	push   esi
c001e5c0:	55                   	push   ebp
c001e5c1:	57                   	push   edi
c001e5c2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e5c6:	89 c3                	mov    ebx,eax
c001e5c8:	0f b6 db             	movzx  ebx,bl
c001e5cb:	e8 d0 fe ff ff       	call   c001e4a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e5d0:	83 c4 2c             	add    esp,0x2c
c001e5d3:	25 00 ff 00 00       	and    eax,0xff00
c001e5d8:	09 d8                	or     eax,ebx
c001e5da:	5b                   	pop    ebx
c001e5db:	5e                   	pop    esi
c001e5dc:	5f                   	pop    edi
c001e5dd:	5d                   	pop    ebp
c001e5de:	c3                   	ret    
c001e5df:	90                   	nop

c001e5e0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001e5e0:	83 ec 18             	sub    esp,0x18
c001e5e3:	6a 08                	push   0x8
c001e5e5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e5ea:	50                   	push   eax
c001e5eb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e5f0:	50                   	push   eax
c001e5f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e5f6:	50                   	push   eax
c001e5f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e5fb:	e8 a0 fe ff ff       	call   c001e4a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e600:	83 c4 2c             	add    esp,0x2c
c001e603:	0f b6 c4             	movzx  eax,ah
c001e606:	c3                   	ret    
c001e607:	90                   	nop

c001e608 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001e608:	83 ec 18             	sub    esp,0x18
c001e60b:	6a 08                	push   0x8
c001e60d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e612:	50                   	push   eax
c001e613:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e618:	50                   	push   eax
c001e619:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e61e:	50                   	push   eax
c001e61f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e623:	e8 78 fe ff ff       	call   c001e4a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e628:	83 c4 2c             	add    esp,0x2c
c001e62b:	c3                   	ret    

c001e62c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001e62c:	83 ec 18             	sub    esp,0x18
c001e62f:	6a 3c                	push   0x3c
c001e631:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e636:	50                   	push   eax
c001e637:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e63c:	50                   	push   eax
c001e63d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e642:	50                   	push   eax
c001e643:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e647:	e8 54 fe ff ff       	call   c001e4a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e64c:	83 c4 2c             	add    esp,0x2c
c001e64f:	c3                   	ret    

c001e650 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001e650:	83 ec 18             	sub    esp,0x18
c001e653:	6a 18                	push   0x18
c001e655:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e65a:	50                   	push   eax
c001e65b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e660:	50                   	push   eax
c001e661:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e666:	50                   	push   eax
c001e667:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e66b:	e8 30 fe ff ff       	call   c001e4a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e670:	83 c4 2c             	add    esp,0x2c
c001e673:	0f b6 c4             	movzx  eax,ah
c001e676:	c3                   	ret    
c001e677:	90                   	nop

c001e678 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001e678:	55                   	push   ebp
c001e679:	57                   	push   edi
c001e67a:	56                   	push   esi
c001e67b:	53                   	push   ebx
c001e67c:	83 ec 28             	sub    esp,0x28
c001e67f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e683:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001e688:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001e68d:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001e692:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001e699:	8d 43 12             	lea    eax,[ebx+0x12]
c001e69c:	83 c3 10             	add    ebx,0x10
c001e69f:	0f b6 c0             	movzx  eax,al
c001e6a2:	0f b6 db             	movzx  ebx,bl
c001e6a5:	50                   	push   eax
c001e6a6:	51                   	push   ecx
c001e6a7:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001e6ab:	57                   	push   edi
c001e6ac:	55                   	push   ebp
c001e6ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e6b1:	e8 ea fd ff ff       	call   c001e4a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e6b6:	83 c4 14             	add    esp,0x14
c001e6b9:	53                   	push   ebx
c001e6ba:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e6be:	51                   	push   ecx
c001e6bf:	89 c6                	mov    esi,eax
c001e6c1:	57                   	push   edi
c001e6c2:	55                   	push   ebp
c001e6c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e6c7:	c1 e6 10             	shl    esi,0x10
c001e6ca:	e8 d1 fd ff ff       	call   c001e4a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e6cf:	83 c4 3c             	add    esp,0x3c
c001e6d2:	5b                   	pop    ebx
c001e6d3:	0f b7 c0             	movzx  eax,ax
c001e6d6:	09 f0                	or     eax,esi
c001e6d8:	5e                   	pop    esi
c001e6d9:	5f                   	pop    edi
c001e6da:	5d                   	pop    ebp
c001e6db:	c3                   	ret    

c001e6dc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001e6dc:	55                   	push   ebp
c001e6dd:	57                   	push   edi
c001e6de:	56                   	push   esi
c001e6df:	53                   	push   ebx
c001e6e0:	83 ec 0c             	sub    esp,0xc
c001e6e3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e6e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e6eb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e6ef:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001e6f3:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001e6f9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e6fd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e701:	83 f9 01             	cmp    ecx,0x1
c001e704:	75 5d                	jne    c001e763 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001e706:	0f b6 c8             	movzx  ecx,al
c001e709:	89 f0                	mov    eax,esi
c001e70b:	25 fc 00 00 00       	and    eax,0xfc
c001e710:	0f b6 d2             	movzx  edx,dl
c001e713:	c1 e1 10             	shl    ecx,0x10
c001e716:	c1 e2 0b             	shl    edx,0xb
c001e719:	09 c1                	or     ecx,eax
c001e71b:	89 f8                	mov    eax,edi
c001e71d:	0f b6 f8             	movzx  edi,al
c001e720:	c1 e7 08             	shl    edi,0x8
c001e723:	09 f9                	or     ecx,edi
c001e725:	09 d1                	or     ecx,edx
c001e727:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e72c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001e732:	89 c8                	mov    eax,ecx
c001e734:	ef                   	out    dx,eax
c001e735:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e73a:	ed                   	in     eax,dx
c001e73b:	83 e6 02             	and    esi,0x2
c001e73e:	0f b7 db             	movzx  ebx,bx
c001e741:	74 0a                	je     c001e74d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001e743:	c1 e3 10             	shl    ebx,0x10
c001e746:	0f b7 d0             	movzx  edx,ax
c001e749:	09 d3                	or     ebx,edx
c001e74b:	eb 05                	jmp    c001e752 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001e74d:	66 31 c0             	xor    ax,ax
c001e750:	09 c3                	or     ebx,eax
c001e752:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e757:	89 c8                	mov    eax,ecx
c001e759:	ef                   	out    dx,eax
c001e75a:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e75f:	89 d8                	mov    eax,ebx
c001e761:	eb 41                	jmp    c001e7a4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001e763:	83 f9 02             	cmp    ecx,0x2
c001e766:	75 45                	jne    c001e7ad <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001e768:	89 f1                	mov    ecx,esi
c001e76a:	83 ec 0c             	sub    esp,0xc
c001e76d:	0f b6 f1             	movzx  esi,cl
c001e770:	89 f9                	mov    ecx,edi
c001e772:	56                   	push   esi
c001e773:	0f b6 f9             	movzx  edi,cl
c001e776:	57                   	push   edi
c001e777:	0f b6 d2             	movzx  edx,dl
c001e77a:	52                   	push   edx
c001e77b:	0f b6 c0             	movzx  eax,al
c001e77e:	50                   	push   eax
c001e77f:	55                   	push   ebp
c001e780:	e8 a5 fc ff ff       	call   c001e42a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e785:	89 c2                	mov    edx,eax
c001e787:	ed                   	in     eax,dx
c001e788:	83 c4 20             	add    esp,0x20
c001e78b:	f6 c2 02             	test   dl,0x2
c001e78e:	0f b7 db             	movzx  ebx,bx
c001e791:	74 0c                	je     c001e79f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001e793:	0f b7 c8             	movzx  ecx,ax
c001e796:	89 d8                	mov    eax,ebx
c001e798:	c1 e0 10             	shl    eax,0x10
c001e79b:	09 c8                	or     eax,ecx
c001e79d:	eb 05                	jmp    c001e7a4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001e79f:	66 31 c0             	xor    ax,ax
c001e7a2:	09 d8                	or     eax,ebx
c001e7a4:	ef                   	out    dx,eax
c001e7a5:	83 c4 0c             	add    esp,0xc
c001e7a8:	5b                   	pop    ebx
c001e7a9:	5e                   	pop    esi
c001e7aa:	5f                   	pop    edi
c001e7ab:	5d                   	pop    ebp
c001e7ac:	c3                   	ret    
c001e7ad:	c7 44 24 20 fb a7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a7fb
c001e7b5:	83 c4 0c             	add    esp,0xc
c001e7b8:	5b                   	pop    ebx
c001e7b9:	5e                   	pop    esi
c001e7ba:	5f                   	pop    edi
c001e7bb:	5d                   	pop    ebp
c001e7bc:	e9 eb 17 ff ff       	jmp    c000ffac <KePanic(char const*)>
c001e7c1:	90                   	nop

c001e7c2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001e7c2:	55                   	push   ebp
c001e7c3:	57                   	push   edi
c001e7c4:	56                   	push   esi
c001e7c5:	53                   	push   ebx
c001e7c6:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001e7cc:	80 3d ac 4d 03 c0 00 	cmp    BYTE PTR ds:0xc0034dac,0x0
c001e7d3:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001e7da:	0f 85 bd 00 00 00    	jne    c001e89d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001e7e0:	83 ec 0c             	sub    esp,0xc
c001e7e3:	68 14 01 00 00       	push   0x114
c001e7e8:	e8 6b 13 ff ff       	call   c000fb58 <malloc>
c001e7ed:	83 c4 0c             	add    esp,0xc
c001e7f0:	ff 35 58 23 03 c0    	push   DWORD PTR ds:0xc0032358
c001e7f6:	68 01 a8 02 c0       	push   0xc002a801
c001e7fb:	50                   	push   eax
c001e7fc:	89 c3                	mov    ebx,eax
c001e7fe:	e8 5d 9e fe ff       	call   c0008660 <File::File(char const*, Process*)>
c001e803:	83 c4 10             	add    esp,0x10
c001e806:	85 db                	test   ebx,ebx
c001e808:	0f 84 6b 02 00 00    	je     c001ea79 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001e80e:	57                   	push   edi
c001e80f:	57                   	push   edi
c001e810:	6a 01                	push   0x1
c001e812:	53                   	push   ebx
c001e813:	e8 66 9e fe ff       	call   c000867e <File::open(FileOpenMode)>
c001e818:	83 c4 10             	add    esp,0x10
c001e81b:	85 c0                	test   eax,eax
c001e81d:	0f 85 56 02 00 00    	jne    c001ea79 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001e823:	52                   	push   edx
c001e824:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001e828:	50                   	push   eax
c001e829:	8d 44 24 48          	lea    eax,[esp+0x48]
c001e82d:	50                   	push   eax
c001e82e:	53                   	push   ebx
c001e82f:	e8 4c a1 fe ff       	call   c0008980 <File::stat(unsigned long long*, bool*)>
c001e834:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e838:	40                   	inc    eax
c001e839:	89 04 24             	mov    DWORD PTR [esp],eax
c001e83c:	e8 17 13 ff ff       	call   c000fb58 <malloc>
c001e841:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001e845:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001e849:	59                   	pop    ecx
c001e84a:	a3 a8 4d 03 c0       	mov    ds:0xc0034da8,eax
c001e84f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e851:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001e855:	51                   	push   ecx
c001e856:	50                   	push   eax
c001e857:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e85b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e85f:	53                   	push   ebx
c001e860:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e863:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001e867:	83 c4 20             	add    esp,0x20
c001e86a:	89 c8                	mov    eax,ecx
c001e86c:	99                   	cdq    
c001e86d:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001e871:	0f 85 02 02 00 00    	jne    c001ea79 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001e877:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001e87b:	0f 85 f8 01 00 00    	jne    c001ea79 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001e881:	83 ec 0c             	sub    esp,0xc
c001e884:	53                   	push   ebx
c001e885:	e8 52 9e fe ff       	call   c00086dc <File::close()>
c001e88a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e88e:	83 c4 10             	add    esp,0x10
c001e891:	c6 05 ac 4d 03 c0 01 	mov    BYTE PTR ds:0xc0034dac,0x1
c001e898:	a3 a4 4d 03 c0       	mov    ds:0xc0034da4,eax
c001e89d:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001e8a5:	31 c9                	xor    ecx,ecx
c001e8a7:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001e8ae:	8b 2d a4 4d 03 c0    	mov    ebp,DWORD PTR ds:0xc0034da4
c001e8b4:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001e8bb:	8b 15 a8 4d 03 c0    	mov    edx,DWORD PTR ds:0xc0034da8
c001e8c1:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001e8c6:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001e8ce:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001e8d3:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001e8db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e8df:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001e8e7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e8eb:	39 cd                	cmp    ebp,ecx
c001e8ed:	0f 8e 86 01 00 00    	jle    c001ea79 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001e8f3:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001e8f6:	d4 40                	aam    0x40
c001e8f8:	d5 39                	aad    0x39
c001e8fa:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e8fe:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001e902:	d4 40                	aam    0x40
c001e904:	d5 39                	aad    0x39
c001e906:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e90a:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001e90e:	d4 40                	aam    0x40
c001e910:	d5 39                	aad    0x39
c001e912:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e916:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001e91a:	d4 40                	aam    0x40
c001e91c:	d5 39                	aad    0x39
c001e91e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e922:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001e926:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001e92a:	3c 56                	cmp    al,0x56
c001e92c:	74 47                	je     c001e975 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001e92e:	d4 40                	aam    0x40
c001e930:	d5 39                	aad    0x39
c001e932:	8d 58 d0             	lea    ebx,[eax-0x30]
c001e935:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001e939:	0f b6 db             	movzx  ebx,bl
c001e93c:	c1 e3 04             	shl    ebx,0x4
c001e93f:	d4 40                	aam    0x40
c001e941:	d5 39                	aad    0x39
c001e943:	83 e8 30             	sub    eax,0x30
c001e946:	0f b6 c0             	movzx  eax,al
c001e949:	09 c3                	or     ebx,eax
c001e94b:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001e94f:	c1 e3 04             	shl    ebx,0x4
c001e952:	d4 40                	aam    0x40
c001e954:	d5 39                	aad    0x39
c001e956:	83 e8 30             	sub    eax,0x30
c001e959:	0f b6 c0             	movzx  eax,al
c001e95c:	09 c3                	or     ebx,eax
c001e95e:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001e962:	c1 e3 04             	shl    ebx,0x4
c001e965:	d4 40                	aam    0x40
c001e967:	d5 39                	aad    0x39
c001e969:	83 e8 30             	sub    eax,0x30
c001e96c:	0f b6 c0             	movzx  eax,al
c001e96f:	09 c3                	or     ebx,eax
c001e971:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001e975:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001e979:	80 fb 58             	cmp    bl,0x58
c001e97c:	74 49                	je     c001e9c7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001e97e:	88 d8                	mov    al,bl
c001e980:	d4 40                	aam    0x40
c001e982:	d5 39                	aad    0x39
c001e984:	83 e8 30             	sub    eax,0x30
c001e987:	0f b6 f8             	movzx  edi,al
c001e98a:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001e98e:	c1 e7 04             	shl    edi,0x4
c001e991:	d4 40                	aam    0x40
c001e993:	d5 39                	aad    0x39
c001e995:	83 e8 30             	sub    eax,0x30
c001e998:	0f b6 c0             	movzx  eax,al
c001e99b:	09 c7                	or     edi,eax
c001e99d:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001e9a1:	c1 e7 04             	shl    edi,0x4
c001e9a4:	d4 40                	aam    0x40
c001e9a6:	d5 39                	aad    0x39
c001e9a8:	83 e8 30             	sub    eax,0x30
c001e9ab:	0f b6 c0             	movzx  eax,al
c001e9ae:	09 c7                	or     edi,eax
c001e9b0:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001e9b4:	c1 e7 04             	shl    edi,0x4
c001e9b7:	d4 40                	aam    0x40
c001e9b9:	d5 39                	aad    0x39
c001e9bb:	83 e8 30             	sub    eax,0x30
c001e9be:	0f b6 c0             	movzx  eax,al
c001e9c1:	09 c7                	or     edi,eax
c001e9c3:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001e9c7:	8d 41 10             	lea    eax,[ecx+0x10]
c001e9ca:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001e9ce:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001e9d2:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001e9d6:	83 f9 0a             	cmp    ecx,0xa
c001e9d9:	74 07                	je     c001e9e2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001e9db:	47                   	inc    edi
c001e9dc:	39 c5                	cmp    ebp,eax
c001e9de:	75 16                	jne    c001e9f6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001e9e0:	89 e8                	mov    eax,ebp
c001e9e2:	83 f9 0a             	cmp    ecx,0xa
c001e9e5:	0f 94 c1             	sete   cl
c001e9e8:	0f b6 c9             	movzx  ecx,cl
c001e9eb:	01 c1                	add    ecx,eax
c001e9ed:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001e9f2:	75 0f                	jne    c001ea03 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001e9f4:	eb 1c                	jmp    c001ea12 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001e9f6:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001e9f9:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001e9fd:	40                   	inc    eax
c001e9fe:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001ea01:	eb cb                	jmp    c001e9ce <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001ea03:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ea07:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001ea0c:	0f 85 d9 fe ff ff    	jne    c001e8eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001ea12:	80 fb 58             	cmp    bl,0x58
c001ea15:	74 10                	je     c001ea27 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001ea17:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001ea1c:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001ea21:	0f 85 c4 fe ff ff    	jne    c001e8eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001ea27:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ea2b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ea2f:	83 e8 30             	sub    eax,0x30
c001ea32:	c1 e0 04             	shl    eax,0x4
c001ea35:	83 eb 30             	sub    ebx,0x30
c001ea38:	09 d8                	or     eax,ebx
c001ea3a:	0f b6 c0             	movzx  eax,al
c001ea3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001ea41:	0f 85 a4 fe ff ff    	jne    c001e8eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001ea47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea4b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ea4f:	83 e8 30             	sub    eax,0x30
c001ea52:	c1 e0 04             	shl    eax,0x4
c001ea55:	83 eb 30             	sub    ebx,0x30
c001ea58:	09 d8                	or     eax,ebx
c001ea5a:	0f b6 c0             	movzx  eax,al
c001ea5d:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001ea61:	0f 85 84 fe ff ff    	jne    c001e8eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001ea67:	50                   	push   eax
c001ea68:	50                   	push   eax
c001ea69:	8d 44 24 48          	lea    eax,[esp+0x48]
c001ea6d:	50                   	push   eax
c001ea6e:	56                   	push   esi
c001ea6f:	e8 dc 1b fe ff       	call   c0000650 <strcpy>
c001ea74:	83 c4 10             	add    esp,0x10
c001ea77:	eb 05                	jmp    c001ea7e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001ea79:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ea7c:	31 f6                	xor    esi,esi
c001ea7e:	81 c4 4c 01 00 00    	add    esp,0x14c
c001ea84:	89 f0                	mov    eax,esi
c001ea86:	5b                   	pop    ebx
c001ea87:	5e                   	pop    esi
c001ea88:	5f                   	pop    edi
c001ea89:	5d                   	pop    ebp
c001ea8a:	c3                   	ret    
c001ea8b:	90                   	nop

c001ea8c <PCI::checkBus(unsigned char)>:
c001ea8c:	56                   	push   esi
c001ea8d:	53                   	push   ebx
c001ea8e:	31 db                	xor    ebx,ebx
c001ea90:	51                   	push   ecx
c001ea91:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ea96:	52                   	push   edx
c001ea97:	53                   	push   ebx
c001ea98:	43                   	inc    ebx
c001ea99:	56                   	push   esi
c001ea9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea9e:	e8 6f 03 00 00       	call   c001ee12 <PCI::checkDevice(unsigned char, unsigned char)>
c001eaa3:	83 c4 10             	add    esp,0x10
c001eaa6:	83 fb 20             	cmp    ebx,0x20
c001eaa9:	75 eb                	jne    c001ea96 <PCI::checkBus(unsigned char)+0xa>
c001eaab:	58                   	pop    eax
c001eaac:	5b                   	pop    ebx
c001eaad:	5e                   	pop    esi
c001eaae:	c3                   	ret    
c001eaaf:	90                   	nop

c001eab0 <PCI::foundDevice(PCIDeviceInfo)>:
c001eab0:	55                   	push   ebp
c001eab1:	57                   	push   edi
c001eab2:	56                   	push   esi
c001eab3:	53                   	push   ebx
c001eab4:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001eaba:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001eac2:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001eac9:	3d ff ff 00 00       	cmp    eax,0xffff
c001eace:	0f 84 b6 01 00 00    	je     c001ec8a <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001ead4:	0f b7 ac 24 a4 00 00 00 	movzx  ebp,WORD PTR [esp+0xa4]
c001eadc:	66 81 fd 06 04       	cmp    bp,0x406
c001eae1:	75 32                	jne    c001eb15 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001eae3:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001eaeb:	50                   	push   eax
c001eaec:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001eaf4:	50                   	push   eax
c001eaf5:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001eafd:	50                   	push   eax
c001eafe:	53                   	push   ebx
c001eaff:	e8 4c fb ff ff       	call   c001e650 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001eb04:	59                   	pop    ecx
c001eb05:	5e                   	pop    esi
c001eb06:	0f b6 c0             	movzx  eax,al
c001eb09:	50                   	push   eax
c001eb0a:	53                   	push   ebx
c001eb0b:	e8 7c ff ff ff       	call   c001ea8c <PCI::checkBus(unsigned char)>
c001eb10:	e9 15 01 00 00       	jmp    c001ec2a <PCI::foundDevice(PCIDeviceInfo)+0x17a>
c001eb15:	0f b6 94 24 c4 00 00 00 	movzx  edx,BYTE PTR [esp+0xc4]
c001eb1d:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001eb23:	8b 8c 24 a4 00 00 00 	mov    ecx,DWORD PTR [esp+0xa4]
c001eb2a:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001eb31:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001eb35:	85 c0                	test   eax,eax
c001eb37:	74 34                	je     c001eb6d <PCI::foundDevice(PCIDeviceInfo)+0xbd>
c001eb39:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001eb3c:	85 d2                	test   edx,edx
c001eb3e:	74 29                	je     c001eb69 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001eb40:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001eb46:	31 cf                	xor    edi,ecx
c001eb48:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001eb4e:	75 19                	jne    c001eb69 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001eb50:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001eb56:	75 11                	jne    c001eb69 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001eb58:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001eb5f:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001eb63:	0f 84 21 01 00 00    	je     c001ec8a <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001eb69:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb6b:	eb c8                	jmp    c001eb35 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001eb6d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001eb71:	be 34 a8 02 c0       	mov    esi,0xc002a834
c001eb76:	b9 07 00 00 00       	mov    ecx,0x7
c001eb7b:	fc                   	cld    
c001eb7c:	31 d2                	xor    edx,edx
c001eb7e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001eb80:	b9 12 00 00 00       	mov    ecx,0x12
c001eb85:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001eb8c:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001eb90:	83 ec 0c             	sub    esp,0xc
c001eb93:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001eb95:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001eb9d:	b9 0a 00 00 00       	mov    ecx,0xa
c001eba2:	f7 f1                	div    ecx
c001eba4:	83 c0 30             	add    eax,0x30
c001eba7:	83 c2 30             	add    edx,0x30
c001ebaa:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001ebae:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001ebb6:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001ebba:	31 d2                	xor    edx,edx
c001ebbc:	f7 f1                	div    ecx
c001ebbe:	83 c0 30             	add    eax,0x30
c001ebc1:	83 c2 30             	add    edx,0x30
c001ebc4:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001ebc8:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001ebcc:	8d 44 24 28          	lea    eax,[esp+0x28]
c001ebd0:	50                   	push   eax
c001ebd1:	e8 df ea fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001ebd6:	83 c4 10             	add    esp,0x10
c001ebd9:	81 fd 01 06 00 00    	cmp    ebp,0x601
c001ebdf:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001ebe6:	75 47                	jne    c001ec2f <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c001ebe8:	83 ec 0c             	sub    esp,0xc
c001ebeb:	68 64 01 00 00       	push   0x164
c001ebf0:	e8 63 0f ff ff       	call   c000fb58 <malloc>
c001ebf5:	89 04 24             	mov    DWORD PTR [esp],eax
c001ebf8:	89 c5                	mov    ebp,eax
c001ebfa:	e8 37 11 00 00       	call   c001fd36 <SATABus::SATABus()>
c001ebff:	58                   	pop    eax
c001ec00:	5a                   	pop    edx
c001ec01:	55                   	push   ebp
c001ec02:	53                   	push   ebx
c001ec03:	e8 c6 b2 fe ff       	call   c0009ece <Device::addChild(Device*)>
c001ec08:	83 ec 1c             	sub    esp,0x1c
c001ec0b:	b9 09 00 00 00       	mov    ecx,0x9
c001ec10:	89 e7                	mov    edi,esp
c001ec12:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ec14:	55                   	push   ebp
c001ec15:	e8 fa b1 fe ff       	call   c0009e14 <Device::preOpenPCI(PCIDeviceInfo)>
c001ec1a:	83 c4 30             	add    esp,0x30
c001ec1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ec20:	6a 00                	push   0x0
c001ec22:	6a 00                	push   0x0
c001ec24:	6a 00                	push   0x0
c001ec26:	55                   	push   ebp
c001ec27:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ec2a:	83 c4 10             	add    esp,0x10
c001ec2d:	eb 5b                	jmp    c001ec8a <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001ec2f:	81 fd 01 01 00 00    	cmp    ebp,0x101
c001ec35:	75 19                	jne    c001ec50 <PCI::foundDevice(PCIDeviceInfo)+0x1a0>
c001ec37:	83 ec 0c             	sub    esp,0xc
c001ec3a:	68 70 02 00 00       	push   0x270
c001ec3f:	e8 14 0f ff ff       	call   c000fb58 <malloc>
c001ec44:	89 04 24             	mov    DWORD PTR [esp],eax
c001ec47:	89 c5                	mov    ebp,eax
c001ec49:	e8 94 02 00 00       	call   c001eee2 <IDE::IDE()>
c001ec4e:	eb af                	jmp    c001ebff <PCI::foundDevice(PCIDeviceInfo)+0x14f>
c001ec50:	83 ec 0c             	sub    esp,0xc
c001ec53:	68 58 01 00 00       	push   0x158
c001ec58:	e8 fb 0e ff ff       	call   c000fb58 <malloc>
c001ec5d:	89 c5                	mov    ebp,eax
c001ec5f:	58                   	pop    eax
c001ec60:	5a                   	pop    edx
c001ec61:	68 1a a8 02 c0       	push   0xc002a81a
c001ec66:	55                   	push   ebp
c001ec67:	e8 16 b5 fe ff       	call   c000a182 <DriverlessDevice::DriverlessDevice(char const*)>
c001ec6c:	59                   	pop    ecx
c001ec6d:	5f                   	pop    edi
c001ec6e:	55                   	push   ebp
c001ec6f:	53                   	push   ebx
c001ec70:	e8 59 b2 fe ff       	call   c0009ece <Device::addChild(Device*)>
c001ec75:	83 ec 1c             	sub    esp,0x1c
c001ec78:	b9 09 00 00 00       	mov    ecx,0x9
c001ec7d:	89 e7                	mov    edi,esp
c001ec7f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ec81:	55                   	push   ebp
c001ec82:	e8 8d b1 fe ff       	call   c0009e14 <Device::preOpenPCI(PCIDeviceInfo)>
c001ec87:	83 c4 30             	add    esp,0x30
c001ec8a:	81 c4 8c 00 00 00    	add    esp,0x8c
c001ec90:	5b                   	pop    ebx
c001ec91:	5e                   	pop    esi
c001ec92:	5f                   	pop    edi
c001ec93:	5d                   	pop    ebp
c001ec94:	c3                   	ret    
c001ec95:	90                   	nop

c001ec96 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001ec96:	55                   	push   ebp
c001ec97:	57                   	push   edi
c001ec98:	56                   	push   esi
c001ec99:	53                   	push   ebx
c001ec9a:	83 ec 68             	sub    esp,0x68
c001ec9d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001eca4:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001eca8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ecac:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ecb3:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001ecb8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ecbc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ecc3:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001ecc8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001eccc:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001ecd1:	6a 0c                	push   0xc
c001ecd3:	57                   	push   edi
c001ecd4:	53                   	push   ebx
c001ecd5:	56                   	push   esi
c001ecd6:	55                   	push   ebp
c001ecd7:	e8 c4 f7 ff ff       	call   c001e4a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ecdc:	83 c4 20             	add    esp,0x20
c001ecdf:	57                   	push   edi
c001ece0:	53                   	push   ebx
c001ece1:	56                   	push   esi
c001ece2:	55                   	push   ebp
c001ece3:	e8 ae f8 ff ff       	call   c001e596 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001ece8:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001eced:	57                   	push   edi
c001ecee:	53                   	push   ebx
c001ecef:	56                   	push   esi
c001ecf0:	55                   	push   ebp
c001ecf1:	e8 36 f9 ff ff       	call   c001e62c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001ecf6:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001ecfa:	83 c4 14             	add    esp,0x14
c001ecfd:	6a 3c                	push   0x3c
c001ecff:	57                   	push   edi
c001ed00:	53                   	push   ebx
c001ed01:	56                   	push   esi
c001ed02:	55                   	push   ebp
c001ed03:	e8 98 f7 ff ff       	call   c001e4a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ed08:	0f b6 c4             	movzx  eax,ah
c001ed0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ed0f:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001ed13:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001ed17:	a1 08 21 03 c0       	mov    eax,ds:0xc0032108
c001ed1c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001ed22:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001ed28:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ed2c:	83 c4 20             	add    esp,0x20
c001ed2f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001ed34:	74 30                	je     c001ed66 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001ed36:	31 c0                	xor    eax,eax
c001ed38:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ed3c:	7e 28                	jle    c001ed66 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001ed3e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001ed46:	39 cb                	cmp    ebx,ecx
c001ed48:	75 19                	jne    c001ed63 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001ed4a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001ed52:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001ed56:	75 0b                	jne    c001ed63 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001ed58:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001ed5f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001ed63:	40                   	inc    eax
c001ed64:	eb d2                	jmp    c001ed38 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001ed66:	31 d2                	xor    edx,edx
c001ed68:	83 ec 0c             	sub    esp,0xc
c001ed6b:	57                   	push   edi
c001ed6c:	53                   	push   ebx
c001ed6d:	56                   	push   esi
c001ed6e:	52                   	push   edx
c001ed6f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001ed73:	55                   	push   ebp
c001ed74:	e8 ff f8 ff ff       	call   c001e678 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ed79:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ed7d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001ed81:	42                   	inc    edx
c001ed82:	83 c4 20             	add    esp,0x20
c001ed85:	83 fa 06             	cmp    edx,0x6
c001ed88:	75 de                	jne    c001ed68 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001ed8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ed8e:	83 ec 0c             	sub    esp,0xc
c001ed91:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ed95:	c1 e2 08             	shl    edx,0x8
c001ed98:	0f b6 c4             	movzx  eax,ah
c001ed9b:	09 d0                	or     eax,edx
c001ed9d:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001eda2:	6a 02                	push   0x2
c001eda4:	57                   	push   edi
c001eda5:	53                   	push   ebx
c001eda6:	56                   	push   esi
c001eda7:	55                   	push   ebp
c001eda8:	e8 f3 f6 ff ff       	call   c001e4a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001edad:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001edb2:	83 c4 20             	add    esp,0x20
c001edb5:	57                   	push   edi
c001edb6:	53                   	push   ebx
c001edb7:	56                   	push   esi
c001edb8:	55                   	push   ebp
c001edb9:	e8 22 f8 ff ff       	call   c001e5e0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001edbe:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001edc2:	57                   	push   edi
c001edc3:	53                   	push   ebx
c001edc4:	56                   	push   esi
c001edc5:	55                   	push   ebp
c001edc6:	e8 7f f7 ff ff       	call   c001e54a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001edcb:	b9 09 00 00 00       	mov    ecx,0x9
c001edd0:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001edd5:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001edd9:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001eddd:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001ede1:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001ede5:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001ede9:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001eded:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001edf1:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001edf5:	83 ec 0c             	sub    esp,0xc
c001edf8:	fc                   	cld    
c001edf9:	8d 74 24 58          	lea    esi,[esp+0x58]
c001edfd:	89 e7                	mov    edi,esp
c001edff:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ee01:	55                   	push   ebp
c001ee02:	e8 a9 fc ff ff       	call   c001eab0 <PCI::foundDevice(PCIDeviceInfo)>
c001ee07:	81 c4 8c 00 00 00    	add    esp,0x8c
c001ee0d:	5b                   	pop    ebx
c001ee0e:	5e                   	pop    esi
c001ee0f:	5f                   	pop    edi
c001ee10:	5d                   	pop    ebp
c001ee11:	c3                   	ret    

c001ee12 <PCI::checkDevice(unsigned char, unsigned char)>:
c001ee12:	55                   	push   ebp
c001ee13:	57                   	push   edi
c001ee14:	56                   	push   esi
c001ee15:	53                   	push   ebx
c001ee16:	83 ec 0c             	sub    esp,0xc
c001ee19:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001ee1e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001ee23:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001ee27:	6a 00                	push   0x0
c001ee29:	56                   	push   esi
c001ee2a:	57                   	push   edi
c001ee2b:	55                   	push   ebp
c001ee2c:	e8 19 f7 ff ff       	call   c001e54a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ee31:	6a 00                	push   0x0
c001ee33:	56                   	push   esi
c001ee34:	57                   	push   edi
c001ee35:	55                   	push   ebp
c001ee36:	e8 5b fe ff ff       	call   c001ec96 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ee3b:	83 c4 20             	add    esp,0x20
c001ee3e:	6a 00                	push   0x0
c001ee40:	56                   	push   esi
c001ee41:	57                   	push   edi
c001ee42:	55                   	push   ebp
c001ee43:	e8 26 f7 ff ff       	call   c001e56e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ee48:	83 c4 10             	add    esp,0x10
c001ee4b:	a8 80                	test   al,0x80
c001ee4d:	74 2d                	je     c001ee7c <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001ee4f:	bb 01 00 00 00       	mov    ebx,0x1
c001ee54:	53                   	push   ebx
c001ee55:	56                   	push   esi
c001ee56:	57                   	push   edi
c001ee57:	55                   	push   ebp
c001ee58:	e8 ed f6 ff ff       	call   c001e54a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ee5d:	83 c4 10             	add    esp,0x10
c001ee60:	0f b7 c0             	movzx  eax,ax
c001ee63:	3d ff ff 00 00       	cmp    eax,0xffff
c001ee68:	74 0c                	je     c001ee76 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001ee6a:	53                   	push   ebx
c001ee6b:	56                   	push   esi
c001ee6c:	57                   	push   edi
c001ee6d:	55                   	push   ebp
c001ee6e:	e8 23 fe ff ff       	call   c001ec96 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ee73:	83 c4 10             	add    esp,0x10
c001ee76:	43                   	inc    ebx
c001ee77:	83 fb 08             	cmp    ebx,0x8
c001ee7a:	75 d8                	jne    c001ee54 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001ee7c:	83 c4 0c             	add    esp,0xc
c001ee7f:	5b                   	pop    ebx
c001ee80:	5e                   	pop    esi
c001ee81:	5f                   	pop    edi
c001ee82:	5d                   	pop    ebp
c001ee83:	c3                   	ret    

c001ee84 <PCI::detect()>:
c001ee84:	56                   	push   esi
c001ee85:	53                   	push   ebx
c001ee86:	53                   	push   ebx
c001ee87:	31 db                	xor    ebx,ebx
c001ee89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ee8d:	6a 00                	push   0x0
c001ee8f:	6a 00                	push   0x0
c001ee91:	6a 00                	push   0x0
c001ee93:	56                   	push   esi
c001ee94:	e8 d5 f6 ff ff       	call   c001e56e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ee99:	83 c4 10             	add    esp,0x10
c001ee9c:	a8 80                	test   al,0x80
c001ee9e:	75 21                	jne    c001eec1 <PCI::detect()+0x3d>
c001eea0:	51                   	push   ecx
c001eea1:	51                   	push   ecx
c001eea2:	6a 00                	push   0x0
c001eea4:	56                   	push   esi
c001eea5:	e8 e2 fb ff ff       	call   c001ea8c <PCI::checkBus(unsigned char)>
c001eeaa:	83 c4 10             	add    esp,0x10
c001eead:	eb 2a                	jmp    c001eed9 <PCI::detect()+0x55>
c001eeaf:	52                   	push   edx
c001eeb0:	52                   	push   edx
c001eeb1:	53                   	push   ebx
c001eeb2:	43                   	inc    ebx
c001eeb3:	56                   	push   esi
c001eeb4:	e8 d3 fb ff ff       	call   c001ea8c <PCI::checkBus(unsigned char)>
c001eeb9:	83 c4 10             	add    esp,0x10
c001eebc:	83 fb 08             	cmp    ebx,0x8
c001eebf:	74 18                	je     c001eed9 <PCI::detect()+0x55>
c001eec1:	53                   	push   ebx
c001eec2:	6a 00                	push   0x0
c001eec4:	6a 00                	push   0x0
c001eec6:	56                   	push   esi
c001eec7:	e8 7e f6 ff ff       	call   c001e54a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001eecc:	83 c4 10             	add    esp,0x10
c001eecf:	0f b7 c0             	movzx  eax,ax
c001eed2:	3d ff ff 00 00       	cmp    eax,0xffff
c001eed7:	74 d6                	je     c001eeaf <PCI::detect()+0x2b>
c001eed9:	58                   	pop    eax
c001eeda:	5b                   	pop    ebx
c001eedb:	5e                   	pop    esi
c001eedc:	c3                   	ret    
c001eedd:	90                   	nop

c001eede <IDE::close(int, int, void*)>:
c001eede:	83 c8 ff             	or     eax,0xffffffff
c001eee1:	c3                   	ret    

c001eee2 <IDE::IDE()>:
c001eee2:	83 ec 0c             	sub    esp,0xc
c001eee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eee9:	83 ec 08             	sub    esp,0x8
c001eeec:	68 c4 a8 02 c0       	push   0xc002a8c4
c001eef1:	50                   	push   eax
c001eef2:	e8 31 b3 fe ff       	call   c000a228 <HardDiskController::HardDiskController(char const*)>
c001eef7:	83 c4 10             	add    esp,0x10
c001eefa:	ba f0 a9 02 c0       	mov    edx,0xc002a9f0
c001eeff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef03:	89 10                	mov    DWORD PTR [eax],edx
c001ef05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef09:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001ef10:	90                   	nop
c001ef11:	83 c4 0c             	add    esp,0xc
c001ef14:	c3                   	ret    
c001ef15:	90                   	nop

c001ef16 <IDE::prepareInterrupt(unsigned char)>:
c001ef16:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ef1b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ef1f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001ef27:	c3                   	ret    

c001ef28 <selectDrive(unsigned char, unsigned char)>:
c001ef28:	c3                   	ret    
c001ef29:	90                   	nop

c001ef2a <IDE::getBase(unsigned char)>:
c001ef2a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001ef2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef33:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001ef3b:	c3                   	ret    

c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001ef3c:	55                   	push   ebp
c001ef3d:	57                   	push   edi
c001ef3e:	56                   	push   esi
c001ef3f:	53                   	push   ebx
c001ef40:	83 ec 1c             	sub    esp,0x1c
c001ef43:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ef47:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ef4b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ef4f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ef53:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001ef56:	80 f9 03             	cmp    cl,0x3
c001ef59:	77 4f                	ja     c001efaa <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001ef5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ef5f:	0f b6 f2             	movzx  esi,dl
c001ef62:	0f b6 db             	movzx  ebx,bl
c001ef65:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001ef68:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001ef6d:	80 ca 80             	or     dl,0x80
c001ef70:	52                   	push   edx
c001ef71:	6a 0c                	push   0xc
c001ef73:	56                   	push   esi
c001ef74:	57                   	push   edi
c001ef75:	e8 c2 ff ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ef7a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001ef7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ef83:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001ef87:	ee                   	out    dx,al
c001ef88:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001ef8d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001ef91:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001ef95:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ef9d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001efa1:	83 c4 2c             	add    esp,0x2c
c001efa4:	5b                   	pop    ebx
c001efa5:	5e                   	pop    esi
c001efa6:	5f                   	pop    edi
c001efa7:	5d                   	pop    ebp
c001efa8:	eb 92                	jmp    c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001efaa:	0f b6 cb             	movzx  ecx,bl
c001efad:	83 f9 07             	cmp    ecx,0x7
c001efb0:	77 12                	ja     c001efc4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001efb2:	0f b6 d2             	movzx  edx,dl
c001efb5:	0f b6 db             	movzx  ebx,bl
c001efb8:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001efc0:	01 da                	add    edx,ebx
c001efc2:	eb 2f                	jmp    c001eff3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001efc4:	83 f9 0d             	cmp    ecx,0xd
c001efc7:	77 13                	ja     c001efdc <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001efc9:	0f b6 d2             	movzx  edx,dl
c001efcc:	0f b6 db             	movzx  ebx,bl
c001efcf:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001efd6:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001efda:	eb 17                	jmp    c001eff3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001efdc:	83 f9 15             	cmp    ecx,0x15
c001efdf:	77 13                	ja     c001eff4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001efe1:	0f b6 d2             	movzx  edx,dl
c001efe4:	0f b6 db             	movzx  ebx,bl
c001efe7:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001efef:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001eff3:	ee                   	out    dx,al
c001eff4:	83 c4 1c             	add    esp,0x1c
c001eff7:	5b                   	pop    ebx
c001eff8:	5e                   	pop    esi
c001eff9:	5f                   	pop    edi
c001effa:	5d                   	pop    ebp
c001effb:	c3                   	ret    

c001effc <IDE::read(unsigned char, unsigned char)>:
c001effc:	57                   	push   edi
c001effd:	56                   	push   esi
c001effe:	53                   	push   ebx
c001efff:	83 ec 10             	sub    esp,0x10
c001f002:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f006:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f00a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001f00e:	8d 42 f8             	lea    eax,[edx-0x8]
c001f011:	3c 03                	cmp    al,0x3
c001f013:	77 48                	ja     c001f05d <IDE::read(unsigned char, unsigned char)+0x61>
c001f015:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f019:	0f b6 f1             	movzx  esi,cl
c001f01c:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001f01f:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001f024:	0c 80                	or     al,0x80
c001f026:	50                   	push   eax
c001f027:	6a 0c                	push   0xc
c001f029:	56                   	push   esi
c001f02a:	53                   	push   ebx
c001f02b:	e8 0c ff ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f030:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f034:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001f039:	0f b6 d2             	movzx  edx,dl
c001f03c:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001f040:	ec                   	in     al,dx
c001f041:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001f045:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001f04a:	52                   	push   edx
c001f04b:	6a 0c                	push   0xc
c001f04d:	56                   	push   esi
c001f04e:	53                   	push   ebx
c001f04f:	e8 e8 fe ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f054:	83 c4 20             	add    esp,0x20
c001f057:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f05b:	eb 4c                	jmp    c001f0a9 <IDE::read(unsigned char, unsigned char)+0xad>
c001f05d:	0f b6 f2             	movzx  esi,dl
c001f060:	83 fe 07             	cmp    esi,0x7
c001f063:	77 12                	ja     c001f077 <IDE::read(unsigned char, unsigned char)+0x7b>
c001f065:	0f b6 c9             	movzx  ecx,cl
c001f068:	0f b6 d2             	movzx  edx,dl
c001f06b:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001f073:	01 c2                	add    edx,eax
c001f075:	eb 31                	jmp    c001f0a8 <IDE::read(unsigned char, unsigned char)+0xac>
c001f077:	83 fe 0d             	cmp    esi,0xd
c001f07a:	77 13                	ja     c001f08f <IDE::read(unsigned char, unsigned char)+0x93>
c001f07c:	0f b6 c9             	movzx  ecx,cl
c001f07f:	0f b6 d2             	movzx  edx,dl
c001f082:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001f089:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001f08d:	eb 19                	jmp    c001f0a8 <IDE::read(unsigned char, unsigned char)+0xac>
c001f08f:	31 c0                	xor    eax,eax
c001f091:	83 fe 15             	cmp    esi,0x15
c001f094:	77 13                	ja     c001f0a9 <IDE::read(unsigned char, unsigned char)+0xad>
c001f096:	0f b6 c9             	movzx  ecx,cl
c001f099:	0f b6 d2             	movzx  edx,dl
c001f09c:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001f0a4:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001f0a8:	ec                   	in     al,dx
c001f0a9:	83 c4 10             	add    esp,0x10
c001f0ac:	5b                   	pop    ebx
c001f0ad:	5e                   	pop    esi
c001f0ae:	5f                   	pop    edi
c001f0af:	c3                   	ret    

c001f0b0 <IDE::waitInterrupt(unsigned char)>:
c001f0b0:	55                   	push   ebp
c001f0b1:	57                   	push   edi
c001f0b2:	56                   	push   esi
c001f0b3:	53                   	push   ebx
c001f0b4:	31 db                	xor    ebx,ebx
c001f0b6:	83 ec 0c             	sub    esp,0xc
c001f0b9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001f0bd:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001f0c2:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001f0ca:	89 e8                	mov    eax,ebp
c001f0cc:	84 c0                	test   al,al
c001f0ce:	75 31                	jne    c001f101 <IDE::waitInterrupt(unsigned char)+0x51>
c001f0d0:	52                   	push   edx
c001f0d1:	6a 0c                	push   0xc
c001f0d3:	56                   	push   esi
c001f0d4:	57                   	push   edi
c001f0d5:	e8 22 ff ff ff       	call   c001effc <IDE::read(unsigned char, unsigned char)>
c001f0da:	83 c4 10             	add    esp,0x10
c001f0dd:	a8 01                	test   al,0x1
c001f0df:	75 28                	jne    c001f109 <IDE::waitInterrupt(unsigned char)+0x59>
c001f0e1:	f6 c3 04             	test   bl,0x4
c001f0e4:	75 13                	jne    c001f0f9 <IDE::waitInterrupt(unsigned char)+0x49>
c001f0e6:	83 fb 32             	cmp    ebx,0x32
c001f0e9:	7e 0e                	jle    c001f0f9 <IDE::waitInterrupt(unsigned char)+0x49>
c001f0eb:	50                   	push   eax
c001f0ec:	50                   	push   eax
c001f0ed:	6a 00                	push   0x0
c001f0ef:	6a 64                	push   0x64
c001f0f1:	e8 32 7c ff ff       	call   c0016d28 <milliTenthSleep(unsigned long long)>
c001f0f6:	83 c4 10             	add    esp,0x10
c001f0f9:	83 fb 3c             	cmp    ebx,0x3c
c001f0fc:	74 0b                	je     c001f109 <IDE::waitInterrupt(unsigned char)+0x59>
c001f0fe:	43                   	inc    ebx
c001f0ff:	eb c1                	jmp    c001f0c2 <IDE::waitInterrupt(unsigned char)+0x12>
c001f101:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001f109:	83 c4 0c             	add    esp,0xc
c001f10c:	89 e8                	mov    eax,ebp
c001f10e:	5b                   	pop    ebx
c001f10f:	5e                   	pop    esi
c001f110:	5f                   	pop    edi
c001f111:	5d                   	pop    ebp
c001f112:	c3                   	ret    

c001f113 <ideChannel0IRQHandler(regs*, void*)>:
c001f113:	83 ec 10             	sub    esp,0x10
c001f116:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f11a:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001f121:	6a 07                	push   0x7
c001f123:	6a 00                	push   0x0
c001f125:	50                   	push   eax
c001f126:	e8 d1 fe ff ff       	call   c001effc <IDE::read(unsigned char, unsigned char)>
c001f12b:	83 c4 1c             	add    esp,0x1c
c001f12e:	c3                   	ret    

c001f12f <ideChannel1IRQHandler(regs*, void*)>:
c001f12f:	83 ec 10             	sub    esp,0x10
c001f132:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f136:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001f13d:	6a 07                	push   0x7
c001f13f:	6a 01                	push   0x1
c001f141:	50                   	push   eax
c001f142:	e8 b5 fe ff ff       	call   c001effc <IDE::read(unsigned char, unsigned char)>
c001f147:	83 c4 1c             	add    esp,0x1c
c001f14a:	c3                   	ret    
c001f14b:	90                   	nop

c001f14c <IDE::enableIRQs(unsigned char, bool)>:
c001f14c:	57                   	push   edi
c001f14d:	b8 02 00 00 00       	mov    eax,0x2
c001f152:	56                   	push   esi
c001f153:	53                   	push   ebx
c001f154:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001f159:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f15d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f161:	74 02                	je     c001f165 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001f163:	31 c0                	xor    eax,eax
c001f165:	0f b6 db             	movzx  ebx,bl
c001f168:	bf 04 00 00 00       	mov    edi,0x4
c001f16d:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001f174:	50                   	push   eax
c001f175:	6a 0c                	push   0xc
c001f177:	53                   	push   ebx
c001f178:	56                   	push   esi
c001f179:	e8 be fd ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f17e:	83 c4 10             	add    esp,0x10
c001f181:	50                   	push   eax
c001f182:	6a 0c                	push   0xc
c001f184:	53                   	push   ebx
c001f185:	56                   	push   esi
c001f186:	e8 71 fe ff ff       	call   c001effc <IDE::read(unsigned char, unsigned char)>
c001f18b:	83 c4 10             	add    esp,0x10
c001f18e:	4f                   	dec    edi
c001f18f:	75 f0                	jne    c001f181 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001f191:	5b                   	pop    ebx
c001f192:	5e                   	pop    esi
c001f193:	5f                   	pop    edi
c001f194:	c3                   	ret    
c001f195:	90                   	nop

c001f196 <IDE::open(int, int, void*)>:
c001f196:	55                   	push   ebp
c001f197:	57                   	push   edi
c001f198:	56                   	push   esi
c001f199:	53                   	push   ebx
c001f19a:	83 ec 1c             	sub    esp,0x1c
c001f19d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f1a1:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001f1a8:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001f1b1:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001f1ba:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001f1c1:	0f 85 80 02 00 00    	jne    c001f447 <IDE::open(int, int, void*)+0x2b1>
c001f1c7:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001f1cd:	a8 70                	test   al,0x70
c001f1cf:	75 44                	jne    c001f215 <IDE::open(int, int, void*)+0x7f>
c001f1d1:	ba 20 84 00 00       	mov    edx,0x8420
c001f1d6:	0f a3 c2             	bt     edx,eax
c001f1d9:	73 3a                	jae    c001f215 <IDE::open(int, int, void*)+0x7f>
c001f1db:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001f1e1:	83 ec 0c             	sub    esp,0xc
c001f1e4:	83 e0 fc             	and    eax,0xfffffffc
c001f1e7:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001f1ee:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001f1f4:	83 e0 fc             	and    eax,0xfffffffc
c001f1f7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001f1fe:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001f204:	83 e0 fc             	and    eax,0xfffffffc
c001f207:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f20e:	68 66 7f 02 c0       	push   0xc0027f66
c001f213:	eb 60                	jmp    c001f275 <IDE::open(int, int, void*)+0xdf>
c001f215:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001f21f:	be 64 00 00 00       	mov    esi,0x64
c001f224:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001f22e:	57                   	push   edi
c001f22f:	57                   	push   edi
c001f230:	68 dc a8 02 c0       	push   0xc002a8dc
c001f235:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001f239:	57                   	push   edi
c001f23a:	e8 11 14 fe ff       	call   c0000650 <strcpy>
c001f23f:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001f246:	31 d2                	xor    edx,edx
c001f248:	89 3c 24             	mov    DWORD PTR [esp],edi
c001f24b:	89 c8                	mov    eax,ecx
c001f24d:	f7 f6                	div    esi
c001f24f:	be 0a 00 00 00       	mov    esi,0xa
c001f254:	31 d2                	xor    edx,edx
c001f256:	83 c0 30             	add    eax,0x30
c001f259:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f25d:	89 c8                	mov    eax,ecx
c001f25f:	f7 f6                	div    esi
c001f261:	89 d1                	mov    ecx,edx
c001f263:	31 d2                	xor    edx,edx
c001f265:	f7 f6                	div    esi
c001f267:	83 c1 30             	add    ecx,0x30
c001f26a:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001f26e:	83 c2 30             	add    edx,0x30
c001f271:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001f275:	e8 3b e4 fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001f27a:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001f281:	bf f8 0c 00 00       	mov    edi,0xcf8
c001f286:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001f28d:	83 c4 10             	add    esp,0x10
c001f290:	89 fa                	mov    edx,edi
c001f292:	c1 e1 10             	shl    ecx,0x10
c001f295:	c1 e0 0b             	shl    eax,0xb
c001f298:	09 c1                	or     ecx,eax
c001f29a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001f2a1:	c1 e0 08             	shl    eax,0x8
c001f2a4:	09 c1                	or     ecx,eax
c001f2a6:	89 c8                	mov    eax,ecx
c001f2a8:	0d 08 00 00 80       	or     eax,0x80000008
c001f2ad:	ef                   	out    dx,eax
c001f2ae:	be fc 0c 00 00       	mov    esi,0xcfc
c001f2b3:	89 f2                	mov    edx,esi
c001f2b5:	ed                   	in     eax,dx
c001f2b6:	c1 e8 10             	shr    eax,0x10
c001f2b9:	3d ff ff 00 00       	cmp    eax,0xffff
c001f2be:	0f 84 e1 00 00 00    	je     c001f3a5 <IDE::open(int, int, void*)+0x20f>
c001f2c4:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001f2ca:	89 fa                	mov    edx,edi
c001f2cc:	89 c8                	mov    eax,ecx
c001f2ce:	ef                   	out    dx,eax
c001f2cf:	b0 fe                	mov    al,0xfe
c001f2d1:	89 f2                	mov    edx,esi
c001f2d3:	ee                   	out    dx,al
c001f2d4:	89 c8                	mov    eax,ecx
c001f2d6:	89 fa                	mov    edx,edi
c001f2d8:	ef                   	out    dx,eax
c001f2d9:	89 f2                	mov    edx,esi
c001f2db:	ed                   	in     eax,dx
c001f2dc:	3c fe                	cmp    al,0xfe
c001f2de:	0f 85 83 00 00 00    	jne    c001f367 <IDE::open(int, int, void*)+0x1d1>
c001f2e4:	83 ec 0c             	sub    esp,0xc
c001f2e7:	68 9c 7f 02 c0       	push   0xc0027f9c
c001f2ec:	e8 c4 e3 fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001f2f1:	c7 04 24 e2 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8e2
c001f2f8:	e8 69 7c fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001f2fd:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001f307:	c7 04 24 88 82 02 c0 	mov    DWORD PTR [esp],0xc0028288
c001f30e:	e8 a2 e3 fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001f313:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001f31a:	89 fa                	mov    edx,edi
c001f31c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001f323:	c1 e1 10             	shl    ecx,0x10
c001f326:	c1 e0 08             	shl    eax,0x8
c001f329:	09 c1                	or     ecx,eax
c001f32b:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001f332:	c1 e0 0b             	shl    eax,0xb
c001f335:	09 c1                	or     ecx,eax
c001f337:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001f33d:	89 c8                	mov    eax,ecx
c001f33f:	ef                   	out    dx,eax
c001f340:	8b ab 50 01 00 00    	mov    ebp,DWORD PTR [ebx+0x150]
c001f346:	89 f2                	mov    edx,esi
c001f348:	89 e8                	mov    eax,ebp
c001f34a:	ee                   	out    dx,al
c001f34b:	89 c8                	mov    eax,ecx
c001f34d:	89 fa                	mov    edx,edi
c001f34f:	ef                   	out    dx,eax
c001f350:	89 f2                	mov    edx,esi
c001f352:	ed                   	in     eax,dx
c001f353:	0f b6 c0             	movzx  eax,al
c001f356:	83 c4 10             	add    esp,0x10
c001f359:	39 e8                	cmp    eax,ebp
c001f35b:	74 58                	je     c001f3b5 <IDE::open(int, int, void*)+0x21f>
c001f35d:	83 ec 0c             	sub    esp,0xc
c001f360:	68 f7 a8 02 c0       	push   0xc002a8f7
c001f365:	eb 46                	jmp    c001f3ad <IDE::open(int, int, void*)+0x217>
c001f367:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001f370:	75 29                	jne    c001f39b <IDE::open(int, int, void*)+0x205>
c001f372:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001f379:	3d 8a 00 00 00       	cmp    eax,0x8a
c001f37e:	74 05                	je     c001f385 <IDE::open(int, int, void*)+0x1ef>
c001f380:	83 c0 80             	add    eax,0xffffff80
c001f383:	75 16                	jne    c001f39b <IDE::open(int, int, void*)+0x205>
c001f385:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001f38c:	83 ec 0c             	sub    esp,0xc
c001f38f:	68 e3 91 02 c0       	push   0xc00291e3
c001f394:	e8 1c e3 fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001f399:	eb 17                	jmp    c001f3b2 <IDE::open(int, int, void*)+0x21c>
c001f39b:	83 ec 0c             	sub    esp,0xc
c001f39e:	68 ff a8 02 c0       	push   0xc002a8ff
c001f3a3:	eb 08                	jmp    c001f3ad <IDE::open(int, int, void*)+0x217>
c001f3a5:	83 ec 0c             	sub    esp,0xc
c001f3a8:	68 30 a9 02 c0       	push   0xc002a930
c001f3ad:	e8 fa 0b ff ff       	call   c000ffac <KePanic(char const*)>
c001f3b2:	83 c4 10             	add    esp,0x10
c001f3b5:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001f3bc:	0f 84 bf 00 00 00    	je     c001f481 <IDE::open(int, int, void*)+0x2eb>
c001f3c2:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001f3c8:	83 ec 0c             	sub    esp,0xc
c001f3cb:	83 e0 fc             	and    eax,0xfffffffc
c001f3ce:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001f3d5:	83 c0 08             	add    eax,0x8
c001f3d8:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001f3df:	68 5a a9 02 c0       	push   0xc002a95a
c001f3e4:	e8 7d 7b fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001f3e9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001f3f0:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001f3f7:	50                   	push   eax
c001f3f8:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001f3ff:	50                   	push   eax
c001f400:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001f407:	50                   	push   eax
c001f408:	ff 35 a0 4d 03 c0    	push   DWORD PTR ds:0xc0034da0
c001f40e:	e8 8d f0 ff ff       	call   c001e4a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f413:	83 c4 18             	add    esp,0x18
c001f416:	83 c8 07             	or     eax,0x7
c001f419:	0f b7 c0             	movzx  eax,ax
c001f41c:	50                   	push   eax
c001f41d:	6a 04                	push   0x4
c001f41f:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001f426:	50                   	push   eax
c001f427:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001f42e:	50                   	push   eax
c001f42f:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001f436:	50                   	push   eax
c001f437:	ff 35 a0 4d 03 c0    	push   DWORD PTR ds:0xc0034da0
c001f43d:	e8 9a f2 ff ff       	call   c001e6dc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001f442:	83 c4 20             	add    esp,0x20
c001f445:	eb 3a                	jmp    c001f481 <IDE::open(int, int, void*)+0x2eb>
c001f447:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001f44e:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001f454:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001f45b:	05 06 02 00 00       	add    eax,0x206
c001f460:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f467:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001f46e:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001f475:	05 06 02 00 00       	add    eax,0x206
c001f47a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f481:	83 ec 0c             	sub    esp,0xc
c001f484:	68 40 88 02 c0       	push   0xc0028840
c001f489:	e8 27 e2 fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001f48e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001f494:	83 c4 10             	add    esp,0x10
c001f497:	89 c2                	mov    edx,eax
c001f499:	83 e2 0f             	and    edx,0xf
c001f49c:	83 fa 08             	cmp    edx,0x8
c001f49f:	75 0a                	jne    c001f4ab <IDE::open(int, int, void*)+0x315>
c001f4a1:	83 e8 02             	sub    eax,0x2
c001f4a4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f4ab:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001f4b1:	89 c2                	mov    edx,eax
c001f4b3:	83 e2 0f             	and    edx,0xf
c001f4b6:	83 fa 08             	cmp    edx,0x8
c001f4b9:	75 0a                	jne    c001f4c5 <IDE::open(int, int, void*)+0x32f>
c001f4bb:	83 e8 02             	sub    eax,0x2
c001f4be:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f4c5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001f4cc:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001f4d3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f4d6:	89 d0                	mov    eax,edx
c001f4d8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f4dc:	8d 7a 01             	lea    edi,[edx+0x1]
c001f4df:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001f4e3:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001f4e7:	83 e1 3f             	and    ecx,0x3f
c001f4ea:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001f4ee:	89 f9                	mov    ecx,edi
c001f4f0:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001f4f7:	8d 78 02             	lea    edi,[eax+0x2]
c001f4fa:	0f b6 c9             	movzx  ecx,cl
c001f4fd:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f500:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001f504:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f508:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001f50c:	83 e2 3f             	and    edx,0x3f
c001f50f:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001f513:	89 f9                	mov    ecx,edi
c001f515:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001f51b:	8d 78 03             	lea    edi,[eax+0x3]
c001f51e:	0f b6 d1             	movzx  edx,cl
c001f521:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f524:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001f528:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f52c:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001f530:	83 e1 3f             	and    ecx,0x3f
c001f533:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001f537:	89 fa                	mov    edx,edi
c001f539:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001f53f:	8d 78 04             	lea    edi,[eax+0x4]
c001f542:	0f b6 ca             	movzx  ecx,dl
c001f545:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f548:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001f54c:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f550:	89 fa                	mov    edx,edi
c001f552:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001f558:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001f55c:	83 e2 3f             	and    edx,0x3f
c001f55f:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001f563:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001f56a:	66 85 f6             	test   si,si
c001f56d:	74 24                	je     c001f593 <IDE::open(int, int, void*)+0x3fd>
c001f56f:	89 f9                	mov    ecx,edi
c001f571:	83 c0 05             	add    eax,0x5
c001f574:	0f b6 d1             	movzx  edx,cl
c001f577:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f57a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f57e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001f582:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001f588:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001f58c:	83 e0 3f             	and    eax,0x3f
c001f58f:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001f593:	83 ec 0c             	sub    esp,0xc
c001f596:	68 68 7e 02 c0       	push   0xc0027e68
c001f59b:	e8 15 e1 fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001f5a0:	58                   	pop    eax
c001f5a1:	5a                   	pop    edx
c001f5a2:	6a 00                	push   0x0
c001f5a4:	53                   	push   ebx
c001f5a5:	e8 6c f9 ff ff       	call   c001ef16 <IDE::prepareInterrupt(unsigned char)>
c001f5aa:	59                   	pop    ecx
c001f5ab:	5e                   	pop    esi
c001f5ac:	6a 01                	push   0x1
c001f5ae:	53                   	push   ebx
c001f5af:	e8 62 f9 ff ff       	call   c001ef16 <IDE::prepareInterrupt(unsigned char)>
c001f5b4:	c7 04 24 e0 a1 02 c0 	mov    DWORD PTR [esp],0xc002a1e0
c001f5bb:	e8 f5 e0 fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001f5c0:	83 c4 0c             	add    esp,0xc
c001f5c3:	6a 00                	push   0x0
c001f5c5:	6a 00                	push   0x0
c001f5c7:	53                   	push   ebx
c001f5c8:	e8 7f fb ff ff       	call   c001f14c <IDE::enableIRQs(unsigned char, bool)>
c001f5cd:	83 c4 0c             	add    esp,0xc
c001f5d0:	6a 00                	push   0x0
c001f5d2:	6a 01                	push   0x1
c001f5d4:	53                   	push   ebx
c001f5d5:	e8 72 fb ff ff       	call   c001f14c <IDE::enableIRQs(unsigned char, bool)>
c001f5da:	c7 04 24 72 a9 02 c0 	mov    DWORD PTR [esp],0xc002a972
c001f5e1:	e8 cf e0 fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001f5e6:	83 c4 10             	add    esp,0x10
c001f5e9:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001f5f0:	74 3c                	je     c001f62e <IDE::open(int, int, void*)+0x498>
c001f5f2:	83 ec 0c             	sub    esp,0xc
c001f5f5:	53                   	push   ebx
c001f5f6:	6a 01                	push   0x1
c001f5f8:	68 13 f1 01 c0       	push   0xc001f113
c001f5fd:	6a 0e                	push   0xe
c001f5ff:	53                   	push   ebx
c001f600:	e8 75 a8 fe ff       	call   c0009e7a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f605:	83 c4 14             	add    esp,0x14
c001f608:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001f60e:	53                   	push   ebx
c001f60f:	6a 01                	push   0x1
c001f611:	68 2f f1 01 c0       	push   0xc001f12f
c001f616:	6a 0f                	push   0xf
c001f618:	53                   	push   ebx
c001f619:	e8 5c a8 fe ff       	call   c0009e7a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f61e:	83 c4 14             	add    esp,0x14
c001f621:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001f627:	68 8e 84 02 c0       	push   0xc002848e
c001f62c:	eb 40                	jmp    c001f66e <IDE::open(int, int, void*)+0x4d8>
c001f62e:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001f638:	83 ec 0c             	sub    esp,0xc
c001f63b:	53                   	push   ebx
c001f63c:	6a 00                	push   0x0
c001f63e:	68 13 f1 01 c0       	push   0xc001f113
c001f643:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001f649:	53                   	push   ebx
c001f64a:	e8 2b a8 fe ff       	call   c0009e7a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f64f:	83 c4 14             	add    esp,0x14
c001f652:	53                   	push   ebx
c001f653:	6a 00                	push   0x0
c001f655:	68 2f f1 01 c0       	push   0xc001f12f
c001f65a:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001f660:	53                   	push   ebx
c001f661:	e8 14 a8 fe ff       	call   c0009e7a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f666:	83 c4 14             	add    esp,0x14
c001f669:	68 d2 91 02 c0       	push   0xc00291d2
c001f66e:	e8 42 e0 fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001f673:	83 c4 10             	add    esp,0x10
c001f676:	83 ec 0c             	sub    esp,0xc
c001f679:	68 74 a9 02 c0       	push   0xc002a974
c001f67e:	e8 32 e0 fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001f683:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f685:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f688:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001f68b:	c7 04 24 55 96 02 c0 	mov    DWORD PTR [esp],0xc0029655
c001f692:	e8 1e e0 fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001f697:	83 c4 0c             	add    esp,0xc
c001f69a:	6a 07                	push   0x7
c001f69c:	6a 00                	push   0x0
c001f69e:	53                   	push   ebx
c001f69f:	e8 58 f9 ff ff       	call   c001effc <IDE::read(unsigned char, unsigned char)>
c001f6a4:	83 c4 0c             	add    esp,0xc
c001f6a7:	6a 07                	push   0x7
c001f6a9:	6a 01                	push   0x1
c001f6ab:	53                   	push   ebx
c001f6ac:	e8 4b f9 ff ff       	call   c001effc <IDE::read(unsigned char, unsigned char)>
c001f6b1:	c7 04 24 dc 8e 02 c0 	mov    DWORD PTR [esp],0xc0028edc
c001f6b8:	e8 f8 df fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001f6bd:	83 c4 0c             	add    esp,0xc
c001f6c0:	6a 01                	push   0x1
c001f6c2:	6a 00                	push   0x0
c001f6c4:	53                   	push   ebx
c001f6c5:	e8 82 fa ff ff       	call   c001f14c <IDE::enableIRQs(unsigned char, bool)>
c001f6ca:	83 c4 0c             	add    esp,0xc
c001f6cd:	6a 01                	push   0x1
c001f6cf:	6a 01                	push   0x1
c001f6d1:	53                   	push   ebx
c001f6d2:	e8 75 fa ff ff       	call   c001f14c <IDE::enableIRQs(unsigned char, bool)>
c001f6d7:	c7 04 24 77 a9 02 c0 	mov    DWORD PTR [esp],0xc002a977
c001f6de:	e8 d2 df fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001f6e3:	83 c4 2c             	add    esp,0x2c
c001f6e6:	31 c0                	xor    eax,eax
c001f6e8:	5b                   	pop    ebx
c001f6e9:	5e                   	pop    esi
c001f6ea:	5f                   	pop    edi
c001f6eb:	5d                   	pop    ebp
c001f6ec:	c3                   	ret    
c001f6ed:	90                   	nop

c001f6ee <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001f6ee:	55                   	push   ebp
c001f6ef:	57                   	push   edi
c001f6f0:	56                   	push   esi
c001f6f1:	53                   	push   ebx
c001f6f2:	83 ec 1c             	sub    esp,0x1c
c001f6f5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001f6f9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f6fd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f701:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001f705:	8d 42 f8             	lea    eax,[edx-0x8]
c001f708:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f70c:	3c 03                	cmp    al,0x3
c001f70e:	77 5a                	ja     c001f76a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001f710:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f714:	0f b6 db             	movzx  ebx,bl
c001f717:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f71b:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001f71e:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f723:	0c 80                	or     al,0x80
c001f725:	50                   	push   eax
c001f726:	6a 0c                	push   0xc
c001f728:	53                   	push   ebx
c001f729:	56                   	push   esi
c001f72a:	e8 0d f8 ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f72f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f733:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001f738:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f73c:	0f b6 d2             	movzx  edx,dl
c001f73f:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001f743:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f745:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f74a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001f74e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001f752:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001f75a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f75e:	83 c4 2c             	add    esp,0x2c
c001f761:	5b                   	pop    ebx
c001f762:	5e                   	pop    esi
c001f763:	5f                   	pop    edi
c001f764:	5d                   	pop    ebp
c001f765:	e9 d2 f7 ff ff       	jmp    c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f76a:	0f b6 c2             	movzx  eax,dl
c001f76d:	83 f8 07             	cmp    eax,0x7
c001f770:	77 12                	ja     c001f784 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001f772:	0f b6 db             	movzx  ebx,bl
c001f775:	0f b6 c2             	movzx  eax,dl
c001f778:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001f780:	01 c2                	add    edx,eax
c001f782:	eb 2f                	jmp    c001f7b3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001f784:	83 f8 0d             	cmp    eax,0xd
c001f787:	77 13                	ja     c001f79c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001f789:	0f b6 db             	movzx  ebx,bl
c001f78c:	0f b6 d2             	movzx  edx,dl
c001f78f:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001f796:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001f79a:	eb 17                	jmp    c001f7b3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001f79c:	83 f8 15             	cmp    eax,0x15
c001f79f:	77 14                	ja     c001f7b5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001f7a1:	0f b6 db             	movzx  ebx,bl
c001f7a4:	0f b6 d2             	movzx  edx,dl
c001f7a7:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001f7af:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001f7b3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f7b5:	83 c4 1c             	add    esp,0x1c
c001f7b8:	5b                   	pop    ebx
c001f7b9:	5e                   	pop    esi
c001f7ba:	5f                   	pop    edi
c001f7bb:	5d                   	pop    ebp
c001f7bc:	c3                   	ret    
c001f7bd:	90                   	nop

c001f7be <IDE::detect()>:
c001f7be:	55                   	push   ebp
c001f7bf:	57                   	push   edi
c001f7c0:	56                   	push   esi
c001f7c1:	53                   	push   ebx
c001f7c2:	81 ec 28 02 00 00    	sub    esp,0x228
c001f7c8:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001f7cf:	68 79 a9 02 c0       	push   0xc002a979
c001f7d4:	e8 dc de fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001f7d9:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001f7df:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001f7e3:	83 c4 10             	add    esp,0x10
c001f7e6:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001f7eb:	0f 85 26 04 00 00    	jne    c001fc17 <IDE::detect()+0x459>
c001f7f1:	83 ec 0c             	sub    esp,0xc
c001f7f4:	31 f6                	xor    esi,esi
c001f7f6:	68 7c a9 02 c0       	push   0xc002a97c
c001f7fb:	31 ff                	xor    edi,edi
c001f7fd:	e8 b3 de fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001f802:	83 c4 10             	add    esp,0x10
c001f805:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001f80c:	83 ec 0c             	sub    esp,0xc
c001f80f:	68 7f a9 02 c0       	push   0xc002a97f
c001f814:	e8 9c de fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001f819:	83 c4 10             	add    esp,0x10
c001f81c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f823:	83 ec 0c             	sub    esp,0xc
c001f826:	31 ed                	xor    ebp,ebp
c001f828:	68 82 a9 02 c0       	push   0xc002a982
c001f82d:	e8 83 de fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001f832:	89 f8                	mov    eax,edi
c001f834:	c1 e0 06             	shl    eax,0x6
c001f837:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001f83f:	c7 04 24 85 a9 02 c0 	mov    DWORD PTR [esp],0xc002a985
c001f846:	e8 6a de fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001f84b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f84f:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f857:	c1 e0 04             	shl    eax,0x4
c001f85a:	83 c8 a0             	or     eax,0xffffffa0
c001f85d:	0f b6 c0             	movzx  eax,al
c001f860:	50                   	push   eax
c001f861:	6a 06                	push   0x6
c001f863:	56                   	push   esi
c001f864:	53                   	push   ebx
c001f865:	e8 d2 f6 ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f86a:	83 c4 1c             	add    esp,0x1c
c001f86d:	6a 0c                	push   0xc
c001f86f:	56                   	push   esi
c001f870:	53                   	push   ebx
c001f871:	e8 86 f7 ff ff       	call   c001effc <IDE::read(unsigned char, unsigned char)>
c001f876:	83 c4 0c             	add    esp,0xc
c001f879:	6a 0c                	push   0xc
c001f87b:	56                   	push   esi
c001f87c:	53                   	push   ebx
c001f87d:	e8 7a f7 ff ff       	call   c001effc <IDE::read(unsigned char, unsigned char)>
c001f882:	83 c4 0c             	add    esp,0xc
c001f885:	6a 0c                	push   0xc
c001f887:	56                   	push   esi
c001f888:	53                   	push   ebx
c001f889:	e8 6e f7 ff ff       	call   c001effc <IDE::read(unsigned char, unsigned char)>
c001f88e:	83 c4 0c             	add    esp,0xc
c001f891:	6a 0c                	push   0xc
c001f893:	56                   	push   esi
c001f894:	53                   	push   ebx
c001f895:	e8 62 f7 ff ff       	call   c001effc <IDE::read(unsigned char, unsigned char)>
c001f89a:	c7 04 24 88 a9 02 c0 	mov    DWORD PTR [esp],0xc002a988
c001f8a1:	e8 0f de fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001f8a6:	68 ec 00 00 00       	push   0xec
c001f8ab:	6a 07                	push   0x7
c001f8ad:	56                   	push   esi
c001f8ae:	53                   	push   ebx
c001f8af:	e8 88 f6 ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f8b4:	83 c4 1c             	add    esp,0x1c
c001f8b7:	6a 0c                	push   0xc
c001f8b9:	56                   	push   esi
c001f8ba:	53                   	push   ebx
c001f8bb:	e8 3c f7 ff ff       	call   c001effc <IDE::read(unsigned char, unsigned char)>
c001f8c0:	83 c4 0c             	add    esp,0xc
c001f8c3:	6a 0c                	push   0xc
c001f8c5:	56                   	push   esi
c001f8c6:	53                   	push   ebx
c001f8c7:	e8 30 f7 ff ff       	call   c001effc <IDE::read(unsigned char, unsigned char)>
c001f8cc:	83 c4 0c             	add    esp,0xc
c001f8cf:	6a 0c                	push   0xc
c001f8d1:	56                   	push   esi
c001f8d2:	53                   	push   ebx
c001f8d3:	e8 24 f7 ff ff       	call   c001effc <IDE::read(unsigned char, unsigned char)>
c001f8d8:	83 c4 0c             	add    esp,0xc
c001f8db:	6a 0c                	push   0xc
c001f8dd:	56                   	push   esi
c001f8de:	53                   	push   ebx
c001f8df:	e8 18 f7 ff ff       	call   c001effc <IDE::read(unsigned char, unsigned char)>
c001f8e4:	c7 04 24 8b a9 02 c0 	mov    DWORD PTR [esp],0xc002a98b
c001f8eb:	e8 c5 dd fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001f8f0:	83 c4 0c             	add    esp,0xc
c001f8f3:	6a 0c                	push   0xc
c001f8f5:	56                   	push   esi
c001f8f6:	53                   	push   ebx
c001f8f7:	e8 00 f7 ff ff       	call   c001effc <IDE::read(unsigned char, unsigned char)>
c001f8fc:	83 c4 10             	add    esp,0x10
c001f8ff:	84 c0                	test   al,al
c001f901:	75 1f                	jne    c001f922 <IDE::detect()+0x164>
c001f903:	83 ec 0c             	sub    esp,0xc
c001f906:	68 8e a9 02 c0       	push   0xc002a98e
c001f90b:	e8 a5 dd fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001f910:	e9 e0 02 00 00       	jmp    c001fbf5 <IDE::detect()+0x437>
c001f915:	a8 80                	test   al,0x80
c001f917:	74 21                	je     c001f93a <IDE::detect()+0x17c>
c001f919:	45                   	inc    ebp
c001f91a:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001f920:	7f 1e                	jg     c001f940 <IDE::detect()+0x182>
c001f922:	50                   	push   eax
c001f923:	6a 0c                	push   0xc
c001f925:	56                   	push   esi
c001f926:	53                   	push   ebx
c001f927:	e8 d0 f6 ff ff       	call   c001effc <IDE::read(unsigned char, unsigned char)>
c001f92c:	83 c4 10             	add    esp,0x10
c001f92f:	a8 01                	test   al,0x1
c001f931:	74 e2                	je     c001f915 <IDE::detect()+0x157>
c001f933:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001f938:	eb 23                	jmp    c001f95d <IDE::detect()+0x19f>
c001f93a:	a8 08                	test   al,0x8
c001f93c:	74 db                	je     c001f919 <IDE::detect()+0x15b>
c001f93e:	eb 18                	jmp    c001f958 <IDE::detect()+0x19a>
c001f940:	50                   	push   eax
c001f941:	50                   	push   eax
c001f942:	6a 00                	push   0x0
c001f944:	6a 32                	push   0x32
c001f946:	e8 dd 73 ff ff       	call   c0016d28 <milliTenthSleep(unsigned long long)>
c001f94b:	83 c4 10             	add    esp,0x10
c001f94e:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001f954:	75 cc                	jne    c001f922 <IDE::detect()+0x164>
c001f956:	eb db                	jmp    c001f933 <IDE::detect()+0x175>
c001f958:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001f95d:	83 ec 0c             	sub    esp,0xc
c001f960:	68 91 a9 02 c0       	push   0xc002a991
c001f965:	e8 4b dd fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001f96a:	83 c4 10             	add    esp,0x10
c001f96d:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f972:	74 56                	je     c001f9ca <IDE::detect()+0x20c>
c001f974:	51                   	push   ecx
c001f975:	6a 04                	push   0x4
c001f977:	56                   	push   esi
c001f978:	53                   	push   ebx
c001f979:	e8 7e f6 ff ff       	call   c001effc <IDE::read(unsigned char, unsigned char)>
c001f97e:	83 c4 0c             	add    esp,0xc
c001f981:	6a 05                	push   0x5
c001f983:	56                   	push   esi
c001f984:	53                   	push   ebx
c001f985:	89 c5                	mov    ebp,eax
c001f987:	e8 70 f6 ff ff       	call   c001effc <IDE::read(unsigned char, unsigned char)>
c001f98c:	89 e9                	mov    ecx,ebp
c001f98e:	83 c4 10             	add    esp,0x10
c001f991:	0f b6 e9             	movzx  ebp,cl
c001f994:	83 fd 14             	cmp    ebp,0x14
c001f997:	75 04                	jne    c001f99d <IDE::detect()+0x1df>
c001f999:	3c eb                	cmp    al,0xeb
c001f99b:	74 11                	je     c001f9ae <IDE::detect()+0x1f0>
c001f99d:	83 fd 69             	cmp    ebp,0x69
c001f9a0:	0f 85 52 02 00 00    	jne    c001fbf8 <IDE::detect()+0x43a>
c001f9a6:	3c 96                	cmp    al,0x96
c001f9a8:	0f 85 4a 02 00 00    	jne    c001fbf8 <IDE::detect()+0x43a>
c001f9ae:	68 a1 00 00 00       	push   0xa1
c001f9b3:	6a 07                	push   0x7
c001f9b5:	56                   	push   esi
c001f9b6:	53                   	push   ebx
c001f9b7:	e8 80 f5 ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f9bc:	58                   	pop    eax
c001f9bd:	5a                   	pop    edx
c001f9be:	6a 00                	push   0x0
c001f9c0:	6a 0a                	push   0xa
c001f9c2:	e8 61 73 ff ff       	call   c0016d28 <milliTenthSleep(unsigned long long)>
c001f9c7:	83 c4 10             	add    esp,0x10
c001f9ca:	83 ec 0c             	sub    esp,0xc
c001f9cd:	89 fd                	mov    ebp,edi
c001f9cf:	68 94 a9 02 c0       	push   0xc002a994
c001f9d4:	e8 dc dc fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001f9d9:	8d 54 24 20          	lea    edx,[esp+0x20]
c001f9dd:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001f9e4:	c1 e5 06             	shl    ebp,0x6
c001f9e7:	52                   	push   edx
c001f9e8:	01 dd                	add    ebp,ebx
c001f9ea:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001f9ee:	6a 00                	push   0x0
c001f9f0:	56                   	push   esi
c001f9f1:	53                   	push   ebx
c001f9f2:	e8 f7 fc ff ff       	call   c001f6ee <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001f9f7:	83 c4 14             	add    esp,0x14
c001f9fa:	68 98 a9 02 c0       	push   0xc002a998
c001f9ff:	e8 b1 dc fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001fa04:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001fa09:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001fa10:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001fa17:	89 f0                	mov    eax,esi
c001fa19:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001fa1f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001fa23:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001fa29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa2d:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001fa34:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001fa3c:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001fa43:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001fa4b:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001fa51:	c7 04 24 9c a9 02 c0 	mov    DWORD PTR [esp],0xc002a99c
c001fa58:	e8 58 dc fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001fa5d:	83 c4 10             	add    esp,0x10
c001fa60:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001fa67:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fa6b:	74 09                	je     c001fa76 <IDE::detect()+0x2b8>
c001fa6d:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001fa74:	eb 07                	jmp    c001fa7d <IDE::detect()+0x2bf>
c001fa76:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001fa7d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001fa81:	89 f8                	mov    eax,edi
c001fa83:	83 ec 0c             	sub    esp,0xc
c001fa86:	c1 e0 06             	shl    eax,0x6
c001fa89:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001fa8c:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001fa92:	68 a0 a9 02 c0       	push   0xc002a9a0
c001fa97:	e8 19 dc fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001fa9c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001faa0:	89 e8                	mov    eax,ebp
c001faa2:	83 c4 10             	add    esp,0x10
c001faa5:	8d 6a 28             	lea    ebp,[edx+0x28]
c001faa8:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001faab:	83 c2 02             	add    edx,0x2
c001faae:	83 c0 02             	add    eax,0x2
c001fab1:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001fab7:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001faba:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001fac0:	39 d5                	cmp    ebp,edx
c001fac2:	75 e4                	jne    c001faa8 <IDE::detect()+0x2ea>
c001fac4:	89 f8                	mov    eax,edi
c001fac6:	c1 e0 06             	shl    eax,0x6
c001fac9:	01 d8                	add    eax,ebx
c001facb:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001fad2:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001fad9:	c1 ea 09             	shr    edx,0x9
c001fadc:	83 e2 01             	and    edx,0x1
c001fadf:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001fae6:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001faec:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001faf0:	74 0c                	je     c001fafe <IDE::detect()+0x340>
c001faf2:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001fafb:	0f 95 c2             	setne  dl
c001fafe:	89 fd                	mov    ebp,edi
c001fb00:	83 ec 0c             	sub    esp,0xc
c001fb03:	c1 e5 06             	shl    ebp,0x6
c001fb06:	01 dd                	add    ebp,ebx
c001fb08:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001fb0e:	68 a4 a9 02 c0       	push   0xc002a9a4
c001fb13:	e8 9d db fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001fb18:	83 c4 10             	add    esp,0x10
c001fb1b:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001fb20:	75 66                	jne    c001fb88 <IDE::detect()+0x3ca>
c001fb22:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001fb29:	0f 84 b8 00 00 00    	je     c001fbe7 <IDE::detect()+0x429>
c001fb2f:	83 ec 0c             	sub    esp,0xc
c001fb32:	68 a8 a9 02 c0       	push   0xc002a9a8
c001fb37:	e8 79 db fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001fb3c:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001fb43:	e8 10 00 ff ff       	call   c000fb58 <malloc>
c001fb48:	89 04 24             	mov    DWORD PTR [esp],eax
c001fb4b:	89 c5                	mov    ebp,eax
c001fb4d:	e8 44 05 00 00       	call   c0020096 <ATA::ATA()>
c001fb52:	c7 04 24 ac a9 02 c0 	mov    DWORD PTR [esp],0xc002a9ac
c001fb59:	e8 57 db fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001fb5e:	59                   	pop    ecx
c001fb5f:	58                   	pop    eax
c001fb60:	55                   	push   ebp
c001fb61:	53                   	push   ebx
c001fb62:	e8 67 a3 fe ff       	call   c0009ece <Device::addChild(Device*)>
c001fb67:	c7 04 24 b1 a9 02 c0 	mov    DWORD PTR [esp],0xc002a9b1
c001fb6e:	e8 42 db fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001fb73:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001fb76:	53                   	push   ebx
c001fb77:	57                   	push   edi
c001fb78:	6a 00                	push   0x0
c001fb7a:	55                   	push   ebp
c001fb7b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fb7e:	83 c4 14             	add    esp,0x14
c001fb81:	68 b6 a9 02 c0       	push   0xc002a9b6
c001fb86:	eb 57                	jmp    c001fbdf <IDE::detect()+0x421>
c001fb88:	83 ec 0c             	sub    esp,0xc
c001fb8b:	68 bb a9 02 c0       	push   0xc002a9bb
c001fb90:	e8 20 db fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001fb95:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001fb9c:	e8 b7 ff fe ff       	call   c000fb58 <malloc>
c001fba1:	89 04 24             	mov    DWORD PTR [esp],eax
c001fba4:	89 c5                	mov    ebp,eax
c001fba6:	e8 b1 0c 00 00       	call   c002085c <ATAPI::ATAPI()>
c001fbab:	c7 04 24 c1 a9 02 c0 	mov    DWORD PTR [esp],0xc002a9c1
c001fbb2:	e8 fe da fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001fbb7:	58                   	pop    eax
c001fbb8:	5a                   	pop    edx
c001fbb9:	55                   	push   ebp
c001fbba:	53                   	push   ebx
c001fbbb:	e8 0e a3 fe ff       	call   c0009ece <Device::addChild(Device*)>
c001fbc0:	c7 04 24 c8 a9 02 c0 	mov    DWORD PTR [esp],0xc002a9c8
c001fbc7:	e8 e9 da fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001fbcc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001fbcf:	53                   	push   ebx
c001fbd0:	57                   	push   edi
c001fbd1:	6a 00                	push   0x0
c001fbd3:	55                   	push   ebp
c001fbd4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fbd7:	83 c4 14             	add    esp,0x14
c001fbda:	68 cf a9 02 c0       	push   0xc002a9cf
c001fbdf:	e8 d1 da fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001fbe4:	83 c4 10             	add    esp,0x10
c001fbe7:	83 ec 0c             	sub    esp,0xc
c001fbea:	47                   	inc    edi
c001fbeb:	68 d6 a9 02 c0       	push   0xc002a9d6
c001fbf0:	e8 c0 da fe ff       	call   c000d6b5 <KeSetBootMessage(char const*)>
c001fbf5:	83 c4 10             	add    esp,0x10
c001fbf8:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001fbfc:	74 0c                	je     c001fc0a <IDE::detect()+0x44c>
c001fbfe:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001fc05:	e9 19 fc ff ff       	jmp    c001f823 <IDE::detect()+0x65>
c001fc0a:	4e                   	dec    esi
c001fc0b:	74 0a                	je     c001fc17 <IDE::detect()+0x459>
c001fc0d:	be 01 00 00 00       	mov    esi,0x1
c001fc12:	e9 f5 fb ff ff       	jmp    c001f80c <IDE::detect()+0x4e>
c001fc17:	81 c4 1c 02 00 00    	add    esp,0x21c
c001fc1d:	5b                   	pop    ebx
c001fc1e:	5e                   	pop    esi
c001fc1f:	5f                   	pop    edi
c001fc20:	5d                   	pop    ebp
c001fc21:	c3                   	ret    

c001fc22 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001fc22:	55                   	push   ebp
c001fc23:	57                   	push   edi
c001fc24:	56                   	push   esi
c001fc25:	53                   	push   ebx
c001fc26:	83 ec 1c             	sub    esp,0x1c
c001fc29:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001fc2d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001fc31:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001fc35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fc39:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001fc3d:	88 c3                	mov    bl,al
c001fc3f:	25 ff 00 00 00       	and    eax,0xff
c001fc44:	0f 84 88 00 00 00    	je     c001fcd2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001fc4a:	83 ec 0c             	sub    esp,0xc
c001fc4d:	89 c7                	mov    edi,eax
c001fc4f:	68 da a9 02 c0       	push   0xc002a9da
c001fc54:	e8 0d 73 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001fc59:	83 c4 10             	add    esp,0x10
c001fc5c:	83 ff 01             	cmp    edi,0x1
c001fc5f:	74 6b                	je     c001fccc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001fc61:	83 ff 02             	cmp    edi,0x2
c001fc64:	75 58                	jne    c001fcbe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001fc66:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001fc6b:	50                   	push   eax
c001fc6c:	6a 01                	push   0x1
c001fc6e:	01 ff                	add    edi,edi
c001fc70:	09 fe                	or     esi,edi
c001fc72:	89 f0                	mov    eax,esi
c001fc74:	0f b6 f0             	movzx  esi,al
c001fc77:	c1 e6 06             	shl    esi,0x6
c001fc7a:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001fc82:	50                   	push   eax
c001fc83:	55                   	push   ebp
c001fc84:	e8 73 f3 ff ff       	call   c001effc <IDE::read(unsigned char, unsigned char)>
c001fc89:	83 c4 10             	add    esp,0x10
c001fc8c:	a8 01                	test   al,0x1
c001fc8e:	74 02                	je     c001fc92 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001fc90:	b3 07                	mov    bl,0x7
c001fc92:	a8 02                	test   al,0x2
c001fc94:	74 02                	je     c001fc98 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001fc96:	b3 03                	mov    bl,0x3
c001fc98:	a8 04                	test   al,0x4
c001fc9a:	74 02                	je     c001fc9e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001fc9c:	b3 14                	mov    bl,0x14
c001fc9e:	a8 08                	test   al,0x8
c001fca0:	74 02                	je     c001fca4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001fca2:	b3 03                	mov    bl,0x3
c001fca4:	a8 10                	test   al,0x10
c001fca6:	74 02                	je     c001fcaa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001fca8:	b3 15                	mov    bl,0x15
c001fcaa:	a8 20                	test   al,0x20
c001fcac:	74 02                	je     c001fcb0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001fcae:	b3 03                	mov    bl,0x3
c001fcb0:	a8 40                	test   al,0x40
c001fcb2:	74 02                	je     c001fcb6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001fcb4:	b3 16                	mov    bl,0x16
c001fcb6:	a8 80                	test   al,0x80
c001fcb8:	74 18                	je     c001fcd2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001fcba:	b3 0d                	mov    bl,0xd
c001fcbc:	eb 14                	jmp    c001fcd2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001fcbe:	83 ff 03             	cmp    edi,0x3
c001fcc1:	74 0d                	je     c001fcd0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001fcc3:	83 ff 04             	cmp    edi,0x4
c001fcc6:	75 0a                	jne    c001fcd2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001fcc8:	b3 08                	mov    bl,0x8
c001fcca:	eb 06                	jmp    c001fcd2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001fccc:	b3 13                	mov    bl,0x13
c001fcce:	eb 02                	jmp    c001fcd2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001fcd0:	b3 17                	mov    bl,0x17
c001fcd2:	83 c4 1c             	add    esp,0x1c
c001fcd5:	88 d8                	mov    al,bl
c001fcd7:	5b                   	pop    ebx
c001fcd8:	5e                   	pop    esi
c001fcd9:	5f                   	pop    edi
c001fcda:	5d                   	pop    ebp
c001fcdb:	c3                   	ret    

c001fcdc <IDE::polling(unsigned char, unsigned int)>:
c001fcdc:	57                   	push   edi
c001fcdd:	56                   	push   esi
c001fcde:	53                   	push   ebx
c001fcdf:	bb 04 00 00 00       	mov    ebx,0x4
c001fce4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001fce8:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001fced:	52                   	push   edx
c001fcee:	6a 0c                	push   0xc
c001fcf0:	56                   	push   esi
c001fcf1:	57                   	push   edi
c001fcf2:	e8 05 f3 ff ff       	call   c001effc <IDE::read(unsigned char, unsigned char)>
c001fcf7:	83 c4 10             	add    esp,0x10
c001fcfa:	4b                   	dec    ebx
c001fcfb:	75 f0                	jne    c001fced <IDE::polling(unsigned char, unsigned int)+0x11>
c001fcfd:	bb a0 86 01 00       	mov    ebx,0x186a0
c001fd02:	50                   	push   eax
c001fd03:	6a 0c                	push   0xc
c001fd05:	56                   	push   esi
c001fd06:	57                   	push   edi
c001fd07:	e8 f0 f2 ff ff       	call   c001effc <IDE::read(unsigned char, unsigned char)>
c001fd0c:	83 c4 10             	add    esp,0x10
c001fd0f:	a8 01                	test   al,0x1
c001fd11:	75 17                	jne    c001fd2a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001fd13:	a8 20                	test   al,0x20
c001fd15:	75 0f                	jne    c001fd26 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001fd17:	4b                   	dec    ebx
c001fd18:	74 10                	je     c001fd2a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001fd1a:	a8 80                	test   al,0x80
c001fd1c:	75 e4                	jne    c001fd02 <IDE::polling(unsigned char, unsigned int)+0x26>
c001fd1e:	a8 08                	test   al,0x8
c001fd20:	74 e0                	je     c001fd02 <IDE::polling(unsigned char, unsigned int)+0x26>
c001fd22:	31 c0                	xor    eax,eax
c001fd24:	eb 06                	jmp    c001fd2c <IDE::polling(unsigned char, unsigned int)+0x50>
c001fd26:	b0 01                	mov    al,0x1
c001fd28:	eb 02                	jmp    c001fd2c <IDE::polling(unsigned char, unsigned int)+0x50>
c001fd2a:	b0 02                	mov    al,0x2
c001fd2c:	5b                   	pop    ebx
c001fd2d:	5e                   	pop    esi
c001fd2e:	5f                   	pop    edi
c001fd2f:	c3                   	ret    

c001fd30 <SATABus::close(int, int, void*)>:
c001fd30:	31 c0                	xor    eax,eax
c001fd32:	c3                   	ret    
c001fd33:	90                   	nop

c001fd34 <SATABus::detect()>:
c001fd34:	c3                   	ret    
c001fd35:	90                   	nop

c001fd36 <SATABus::SATABus()>:
c001fd36:	83 ec 0c             	sub    esp,0xc
c001fd39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd3d:	83 ec 08             	sub    esp,0x8
c001fd40:	68 14 aa 02 c0       	push   0xc002aa14
c001fd45:	50                   	push   eax
c001fd46:	e8 dd a4 fe ff       	call   c000a228 <HardDiskController::HardDiskController(char const*)>
c001fd4b:	83 c4 10             	add    esp,0x10
c001fd4e:	ba 40 aa 02 c0       	mov    edx,0xc002aa40
c001fd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd57:	89 10                	mov    DWORD PTR [eax],edx
c001fd59:	83 ec 0c             	sub    esp,0xc
c001fd5c:	6a 50                	push   0x50
c001fd5e:	e8 2a 05 ff ff       	call   c001028d <Phys::allocateContiguousPages(int)>
c001fd63:	83 c4 10             	add    esp,0x10
c001fd66:	89 c2                	mov    edx,eax
c001fd68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd6c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001fd72:	83 ec 0c             	sub    esp,0xc
c001fd75:	6a 50                	push   0x50
c001fd77:	e8 77 37 ff ff       	call   c00134f3 <Virt::allocateKernelVirtualPages(int)>
c001fd7c:	83 c4 10             	add    esp,0x10
c001fd7f:	89 c2                	mov    edx,eax
c001fd81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd85:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001fd8b:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001fd90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fd94:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001fd9a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fd9e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001fda4:	83 ec 0c             	sub    esp,0xc
c001fda7:	6a 03                	push   0x3
c001fda9:	6a 50                	push   0x50
c001fdab:	51                   	push   ecx
c001fdac:	52                   	push   edx
c001fdad:	50                   	push   eax
c001fdae:	e8 13 40 ff ff       	call   c0013dc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001fdb3:	83 c4 20             	add    esp,0x20
c001fdb6:	90                   	nop
c001fdb7:	83 c4 0c             	add    esp,0xc
c001fdba:	c3                   	ret    
c001fdbb:	90                   	nop

c001fdbc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001fdbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fdc0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001fdc3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001fdc6:	09 c2                	or     edx,eax
c001fdc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdcc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001fdd2:	8b 08                	mov    ecx,DWORD PTR [eax]
c001fdd4:	31 c0                	xor    eax,eax
c001fdd6:	c1 e9 08             	shr    ecx,0x8
c001fdd9:	83 e1 0f             	and    ecx,0xf
c001fddc:	39 c8                	cmp    eax,ecx
c001fdde:	74 0a                	je     c001fdea <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001fde0:	f6 c2 01             	test   dl,0x1
c001fde3:	74 08                	je     c001fded <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001fde5:	d1 ea                	shr    edx,1
c001fde7:	40                   	inc    eax
c001fde8:	eb f2                	jmp    c001fddc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001fdea:	83 c8 ff             	or     eax,0xffffffff
c001fded:	c3                   	ret    

c001fdee <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001fdee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fdf2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001fdf5:	89 c2                	mov    edx,eax
c001fdf7:	c1 ea 08             	shr    edx,0x8
c001fdfa:	83 e2 0f             	and    edx,0xf
c001fdfd:	4a                   	dec    edx
c001fdfe:	75 32                	jne    c001fe32 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001fe00:	83 e0 0f             	and    eax,0xf
c001fe03:	83 f8 03             	cmp    eax,0x3
c001fe06:	75 2a                	jne    c001fe32 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001fe08:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001fe0b:	b8 02 00 00 00       	mov    eax,0x2
c001fe10:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001fe16:	74 1c                	je     c001fe34 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001fe18:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001fe1e:	b8 04 00 00 00       	mov    eax,0x4
c001fe23:	74 0f                	je     c001fe34 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001fe25:	31 c0                	xor    eax,eax
c001fe27:	83 fa 03             	cmp    edx,0x3
c001fe2a:	0f 94 c0             	sete   al
c001fe2d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001fe31:	c3                   	ret    
c001fe32:	31 c0                	xor    eax,eax
c001fe34:	c3                   	ret    
c001fe35:	90                   	nop

c001fe36 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001fe36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe3a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fe3d:	0f ba e2 0f          	bt     edx,0xf
c001fe41:	72 f7                	jb     c001fe3a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001fe43:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fe46:	83 ca 10             	or     edx,0x10
c001fe49:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fe4c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fe4f:	83 ca 01             	or     edx,0x1
c001fe52:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fe55:	c3                   	ret    

c001fe56 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001fe56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe5a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fe5d:	83 e2 fe             	and    edx,0xfffffffe
c001fe60:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fe63:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fe66:	83 e2 ef             	and    edx,0xffffffef
c001fe69:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fe6c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fe6f:	0f ba e2 0e          	bt     edx,0xe
c001fe73:	72 f7                	jb     c001fe6c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001fe75:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fe78:	0f ba e2 0f          	bt     edx,0xf
c001fe7c:	72 ee                	jb     c001fe6c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001fe7e:	c3                   	ret    
c001fe7f:	90                   	nop

c001fe80 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001fe80:	55                   	push   ebp
c001fe81:	57                   	push   edi
c001fe82:	56                   	push   esi
c001fe83:	53                   	push   ebx
c001fe84:	83 ec 1c             	sub    esp,0x1c
c001fe87:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fe8b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001fe8f:	53                   	push   ebx
c001fe90:	57                   	push   edi
c001fe91:	e8 c0 ff ff ff       	call   c001fe56 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001fe96:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001fe9a:	83 ec 0c             	sub    esp,0xc
c001fe9d:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001fea3:	c1 e5 0a             	shl    ebp,0xa
c001fea6:	01 e8                	add    eax,ebp
c001fea8:	89 03                	mov    DWORD PTR [ebx],eax
c001feaa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001feac:	68 00 04 00 00       	push   0x400
c001feb1:	6a 00                	push   0x0
c001feb3:	50                   	push   eax
c001feb4:	e8 37 06 fe ff       	call   c00004f0 <memset>
c001feb9:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001febf:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001fec3:	83 c4 1c             	add    esp,0x1c
c001fec6:	01 e8                	add    eax,ebp
c001fec8:	89 03                	mov    DWORD PTR [ebx],eax
c001feca:	c1 e6 08             	shl    esi,0x8
c001fecd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001fed4:	81 c6 00 80 00 00    	add    esi,0x8000
c001feda:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001fee0:	01 f0                	add    eax,esi
c001fee2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001fee5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001fee8:	68 00 01 00 00       	push   0x100
c001feed:	6a 00                	push   0x0
c001feef:	50                   	push   eax
c001fef0:	e8 fb 05 fe ff       	call   c00004f0 <memset>
c001fef5:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001fefb:	31 d2                	xor    edx,edx
c001fefd:	01 f0                	add    eax,esi
c001feff:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ff02:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ff09:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001ff0f:	01 ee                	add    esi,ebp
c001ff11:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001ff15:	83 c4 10             	add    esp,0x10
c001ff18:	c1 e5 0d             	shl    ebp,0xd
c001ff1b:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001ff21:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001ff27:	83 c6 20             	add    esi,0x20
c001ff2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ff2e:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001ff34:	01 e8                	add    eax,ebp
c001ff36:	01 d0                	add    eax,edx
c001ff38:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001ff3b:	52                   	push   edx
c001ff3c:	68 00 01 00 00       	push   0x100
c001ff41:	6a 00                	push   0x0
c001ff43:	50                   	push   eax
c001ff44:	e8 a7 05 fe ff       	call   c00004f0 <memset>
c001ff49:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001ff4f:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001ff56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ff5a:	83 c4 10             	add    esp,0x10
c001ff5d:	01 e8                	add    eax,ebp
c001ff5f:	01 d0                	add    eax,edx
c001ff61:	81 c2 00 01 00 00    	add    edx,0x100
c001ff67:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001ff6a:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001ff70:	75 af                	jne    c001ff21 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001ff72:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001ff79:	50                   	push   eax
c001ff7a:	50                   	push   eax
c001ff7b:	53                   	push   ebx
c001ff7c:	57                   	push   edi
c001ff7d:	e8 b4 fe ff ff       	call   c001fe36 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001ff82:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001ff89:	83 c4 2c             	add    esp,0x2c
c001ff8c:	5b                   	pop    ebx
c001ff8d:	5e                   	pop    esi
c001ff8e:	5f                   	pop    edi
c001ff8f:	5d                   	pop    ebp
c001ff90:	c3                   	ret    
c001ff91:	90                   	nop

c001ff92 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001ff92:	55                   	push   ebp
c001ff93:	57                   	push   edi
c001ff94:	56                   	push   esi
c001ff95:	53                   	push   ebx
c001ff96:	31 db                	xor    ebx,ebx
c001ff98:	83 ec 0c             	sub    esp,0xc
c001ff9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ff9f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ffa3:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001ffa6:	f7 c7 01 00 00 00    	test   edi,0x1
c001ffac:	74 7a                	je     c0020028 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001ffae:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ffb2:	89 d8                	mov    eax,ebx
c001ffb4:	c1 e0 07             	shl    eax,0x7
c001ffb7:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001ffbe:	55                   	push   ebp
c001ffbf:	56                   	push   esi
c001ffc0:	e8 29 fe ff ff       	call   c001fdee <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001ffc5:	5a                   	pop    edx
c001ffc6:	59                   	pop    ecx
c001ffc7:	83 f8 01             	cmp    eax,0x1
c001ffca:	75 21                	jne    c001ffed <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001ffcc:	50                   	push   eax
c001ffcd:	53                   	push   ebx
c001ffce:	55                   	push   ebp
c001ffcf:	56                   	push   esi
c001ffd0:	e8 ab fe ff ff       	call   c001fe80 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ffd5:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001ffdc:	e8 77 fb fe ff       	call   c000fb58 <malloc>
c001ffe1:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffe4:	89 c5                	mov    ebp,eax
c001ffe6:	e8 37 0f 00 00       	call   c0020f22 <SATA::SATA()>
c001ffeb:	eb 24                	jmp    c0020011 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001ffed:	83 f8 04             	cmp    eax,0x4
c001fff0:	75 36                	jne    c0020028 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001fff2:	51                   	push   ecx
c001fff3:	53                   	push   ebx
c001fff4:	55                   	push   ebp
c001fff5:	56                   	push   esi
c001fff6:	e8 85 fe ff ff       	call   c001fe80 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fffb:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0020002:	e8 51 fb fe ff       	call   c000fb58 <malloc>
c0020007:	89 04 24             	mov    DWORD PTR [esp],eax
c002000a:	89 c5                	mov    ebp,eax
c002000c:	e8 a7 12 00 00       	call   c00212b8 <SATAPI::SATAPI()>
c0020011:	58                   	pop    eax
c0020012:	5a                   	pop    edx
c0020013:	55                   	push   ebp
c0020014:	56                   	push   esi
c0020015:	e8 b4 9e fe ff       	call   c0009ece <Device::addChild(Device*)>
c002001a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002001d:	56                   	push   esi
c002001e:	6a 00                	push   0x0
c0020020:	53                   	push   ebx
c0020021:	55                   	push   ebp
c0020022:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0020025:	83 c4 20             	add    esp,0x20
c0020028:	d1 ef                	shr    edi,1
c002002a:	43                   	inc    ebx
c002002b:	83 fb 20             	cmp    ebx,0x20
c002002e:	0f 85 72 ff ff ff    	jne    c001ffa6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0020034:	83 c4 0c             	add    esp,0xc
c0020037:	5b                   	pop    ebx
c0020038:	5e                   	pop    esi
c0020039:	5f                   	pop    edi
c002003a:	5d                   	pop    ebp
c002003b:	c3                   	ret    

c002003c <SATABus::open(int, int, void*)>:
c002003c:	53                   	push   ebx
c002003d:	83 ec 08             	sub    esp,0x8
c0020040:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020044:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c002004a:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0020050:	e8 e3 67 ff ff       	call   c0016838 <KeDisablePreemption()>
c0020055:	52                   	push   edx
c0020056:	52                   	push   edx
c0020057:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c002005d:	53                   	push   ebx
c002005e:	e8 2f ff ff ff       	call   c001ff92 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0020063:	e8 f8 67 ff ff       	call   c0016860 <KeRestorePreemption()>
c0020068:	83 c4 18             	add    esp,0x18
c002006b:	31 c0                	xor    eax,eax
c002006d:	5b                   	pop    ebx
c002006e:	c3                   	ret    
c002006f:	90                   	nop

c0020070 <ATA::close(int, int, void*)>:
c0020070:	83 ec 0c             	sub    esp,0xc
c0020073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020077:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002007d:	85 c0                	test   eax,eax
c002007f:	74 0c                	je     c002008d <ATA::close(int, int, void*)+0x1d>
c0020081:	8b 10                	mov    edx,DWORD PTR [eax]
c0020083:	83 ec 0c             	sub    esp,0xc
c0020086:	50                   	push   eax
c0020087:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002008a:	83 c4 10             	add    esp,0x10
c002008d:	31 c0                	xor    eax,eax
c002008f:	83 c4 0c             	add    esp,0xc
c0020092:	c3                   	ret    
c0020093:	90                   	nop

c0020094 <ATA::powerSaving(PowerSavingLevel)>:
c0020094:	c3                   	ret    
c0020095:	90                   	nop

c0020096 <ATA::ATA()>:
c0020096:	83 ec 0c             	sub    esp,0xc
c0020099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002009d:	83 ec 04             	sub    esp,0x4
c00200a0:	68 00 02 00 00       	push   0x200
c00200a5:	68 c1 ab 02 c0       	push   0xc002abc1
c00200aa:	50                   	push   eax
c00200ab:	e8 02 a2 fe ff       	call   c000a2b2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00200b0:	83 c4 10             	add    esp,0x10
c00200b3:	ba 28 ab 02 c0       	mov    edx,0xc002ab28
c00200b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200bc:	89 10                	mov    DWORD PTR [eax],edx
c00200be:	90                   	nop
c00200bf:	83 c4 0c             	add    esp,0xc
c00200c2:	c3                   	ret    
c00200c3:	90                   	nop

c00200c4 <ATA::flush(bool)>:
c00200c4:	53                   	push   ebx
c00200c5:	83 ec 08             	sub    esp,0x8
c00200c8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00200cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00200d1:	83 f8 01             	cmp    eax,0x1
c00200d4:	19 c0                	sbb    eax,eax
c00200d6:	83 e0 fd             	and    eax,0xfffffffd
c00200d9:	05 ea 00 00 00       	add    eax,0xea
c00200de:	50                   	push   eax
c00200df:	6a 07                	push   0x7
c00200e1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00200e8:	50                   	push   eax
c00200e9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00200ef:	e8 48 ee ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00200f4:	83 c4 0c             	add    esp,0xc
c00200f7:	6a 00                	push   0x0
c00200f9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020100:	50                   	push   eax
c0020101:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020107:	e8 d0 fb ff ff       	call   c001fcdc <IDE::polling(unsigned char, unsigned int)>
c002010c:	83 c4 18             	add    esp,0x18
c002010f:	5b                   	pop    ebx
c0020110:	c3                   	ret    
c0020111:	90                   	nop

c0020112 <ATA::readyForCommand()>:
c0020112:	56                   	push   esi
c0020113:	53                   	push   ebx
c0020114:	31 db                	xor    ebx,ebx
c0020116:	50                   	push   eax
c0020117:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002011b:	50                   	push   eax
c002011c:	6a 0c                	push   0xc
c002011e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0020125:	50                   	push   eax
c0020126:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002012c:	e8 cb ee ff ff       	call   c001effc <IDE::read(unsigned char, unsigned char)>
c0020131:	83 c4 10             	add    esp,0x10
c0020134:	a8 88                	test   al,0x88
c0020136:	74 20                	je     c0020158 <ATA::readyForCommand()+0x46>
c0020138:	43                   	inc    ebx
c0020139:	83 fb 63             	cmp    ebx,0x63
c002013c:	7e dd                	jle    c002011b <ATA::readyForCommand()+0x9>
c002013e:	51                   	push   ecx
c002013f:	51                   	push   ecx
c0020140:	6a 00                	push   0x0
c0020142:	6a 0a                	push   0xa
c0020144:	e8 df 6b ff ff       	call   c0016d28 <milliTenthSleep(unsigned long long)>
c0020149:	83 c4 10             	add    esp,0x10
c002014c:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0020152:	75 c7                	jne    c002011b <ATA::readyForCommand()+0x9>
c0020154:	31 c0                	xor    eax,eax
c0020156:	eb 02                	jmp    c002015a <ATA::readyForCommand()+0x48>
c0020158:	b0 01                	mov    al,0x1
c002015a:	5a                   	pop    edx
c002015b:	5b                   	pop    ebx
c002015c:	5e                   	pop    esi
c002015d:	c3                   	ret    

c002015e <ATA::access(unsigned long long, int, void*, bool)>:
c002015e:	55                   	push   ebp
c002015f:	57                   	push   edi
c0020160:	56                   	push   esi
c0020161:	53                   	push   ebx
c0020162:	83 ec 2c             	sub    esp,0x2c
c0020165:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020169:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002016d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0020171:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0020175:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020179:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002017d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0020181:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0020187:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002018b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0020191:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020195:	c1 e0 06             	shl    eax,0x6
c0020198:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00201a0:	74 5b                	je     c00201fd <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c00201a2:	89 fa                	mov    edx,edi
c00201a4:	89 f0                	mov    eax,esi
c00201a6:	c1 ea 1c             	shr    edx,0x1c
c00201a9:	0f ac f8 1c          	shrd   eax,edi,0x1c
c00201ad:	89 d1                	mov    ecx,edx
c00201af:	09 c1                	or     ecx,eax
c00201b1:	74 25                	je     c00201d8 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00201b3:	31 ed                	xor    ebp,ebp
c00201b5:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00201bc:	89 fa                	mov    edx,edi
c00201be:	89 f0                	mov    eax,esi
c00201c0:	0f ad d0             	shrd   eax,edx,cl
c00201c3:	d3 ea                	shr    edx,cl
c00201c5:	f6 c1 20             	test   cl,0x20
c00201c8:	74 02                	je     c00201cc <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00201ca:	89 d0                	mov    eax,edx
c00201cc:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00201d0:	45                   	inc    ebp
c00201d1:	83 fd 06             	cmp    ebp,0x6
c00201d4:	75 df                	jne    c00201b5 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00201d6:	eb 71                	jmp    c0020249 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c00201d8:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00201dd:	89 f0                	mov    eax,esi
c00201df:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00201e6:	0f ac f8 10          	shrd   eax,edi,0x10
c00201ea:	bf 01 00 00 00       	mov    edi,0x1
c00201ef:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00201f3:	c1 ee 18             	shr    esi,0x18
c00201f6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00201fb:	eb 53                	jmp    c0020250 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c00201fd:	6a 00                	push   0x0
c00201ff:	6a 3f                	push   0x3f
c0020201:	57                   	push   edi
c0020202:	56                   	push   esi
c0020203:	e8 cc 20 00 00       	call   c00222d4 <__umoddi3>
c0020208:	83 c4 10             	add    esp,0x10
c002020b:	40                   	inc    eax
c002020c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0020210:	6a 00                	push   0x0
c0020212:	68 f0 03 00 00       	push   0x3f0
c0020217:	57                   	push   edi
c0020218:	56                   	push   esi
c0020219:	e8 b6 1f 00 00       	call   c00221d4 <__udivdi3>
c002021e:	83 c4 10             	add    esp,0x10
c0020221:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0020226:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002022d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0020232:	6a 00                	push   0x0
c0020234:	6a 3f                	push   0x3f
c0020236:	57                   	push   edi
c0020237:	31 ff                	xor    edi,edi
c0020239:	56                   	push   esi
c002023a:	e8 95 1f 00 00       	call   c00221d4 <__udivdi3>
c002023f:	83 c4 10             	add    esp,0x10
c0020242:	83 e0 0f             	and    eax,0xf
c0020245:	89 c6                	mov    esi,eax
c0020247:	eb 07                	jmp    c0020250 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c0020249:	31 f6                	xor    esi,esi
c002024b:	bf 02 00 00 00       	mov    edi,0x2
c0020250:	55                   	push   ebp
c0020251:	6a 00                	push   0x0
c0020253:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002025a:	50                   	push   eax
c002025b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002025f:	e8 e8 ee ff ff       	call   c001f14c <IDE::enableIRQs(unsigned char, bool)>
c0020264:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020267:	e8 a6 fe ff ff       	call   c0020112 <ATA::readyForCommand()>
c002026c:	83 c4 10             	add    esp,0x10
c002026f:	84 c0                	test   al,al
c0020271:	75 0a                	jne    c002027d <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c0020273:	be 01 00 00 00       	mov    esi,0x1
c0020278:	e9 df 02 00 00       	jmp    c002055c <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c002027d:	fa                   	cli    
c002027e:	ff 05 30 23 03 c0    	inc    DWORD PTR ds:0xc0032330
c0020284:	f7 c7 03 00 00 00    	test   edi,0x3
c002028a:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0020290:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020296:	75 0a                	jne    c00202a2 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c0020298:	c1 e0 04             	shl    eax,0x4
c002029b:	09 c6                	or     esi,eax
c002029d:	83 ce a0             	or     esi,0xffffffa0
c00202a0:	eb 08                	jmp    c00202aa <ATA::access(unsigned long long, int, void*, bool)+0x14c>
c00202a2:	c1 e0 04             	shl    eax,0x4
c00202a5:	09 c6                	or     esi,eax
c00202a7:	83 ce e0             	or     esi,0xffffffe0
c00202aa:	89 f0                	mov    eax,esi
c00202ac:	0f b6 d2             	movzx  edx,dl
c00202af:	0f b6 f0             	movzx  esi,al
c00202b2:	56                   	push   esi
c00202b3:	6a 06                	push   0x6
c00202b5:	52                   	push   edx
c00202b6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00202bc:	e8 7b ec ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00202c1:	83 c4 10             	add    esp,0x10
c00202c4:	6a 00                	push   0x0
c00202c6:	6a 01                	push   0x1
c00202c8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00202cf:	50                   	push   eax
c00202d0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00202d6:	e8 61 ec ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00202db:	89 f8                	mov    eax,edi
c00202dd:	83 c4 10             	add    esp,0x10
c00202e0:	0f b6 f0             	movzx  esi,al
c00202e3:	83 fe 02             	cmp    esi,0x2
c00202e6:	75 6e                	jne    c0020356 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c00202e8:	6a 00                	push   0x0
c00202ea:	6a 08                	push   0x8
c00202ec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00202f3:	50                   	push   eax
c00202f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00202fa:	e8 3d ec ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00202ff:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0020304:	50                   	push   eax
c0020305:	6a 09                	push   0x9
c0020307:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002030e:	50                   	push   eax
c002030f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020315:	e8 22 ec ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002031a:	83 c4 20             	add    esp,0x20
c002031d:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0020322:	50                   	push   eax
c0020323:	6a 0a                	push   0xa
c0020325:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002032c:	50                   	push   eax
c002032d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020333:	e8 04 ec ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020338:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002033d:	50                   	push   eax
c002033e:	6a 0b                	push   0xb
c0020340:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020347:	50                   	push   eax
c0020348:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002034e:	e8 e9 eb ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020353:	83 c4 20             	add    esp,0x20
c0020356:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002035b:	50                   	push   eax
c002035c:	6a 02                	push   0x2
c002035e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020365:	50                   	push   eax
c0020366:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002036c:	e8 cb eb ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020371:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0020376:	50                   	push   eax
c0020377:	6a 03                	push   0x3
c0020379:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020380:	50                   	push   eax
c0020381:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020387:	e8 b0 eb ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002038c:	83 c4 20             	add    esp,0x20
c002038f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0020394:	50                   	push   eax
c0020395:	6a 04                	push   0x4
c0020397:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002039e:	50                   	push   eax
c002039f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00203a5:	e8 92 eb ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00203aa:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00203af:	50                   	push   eax
c00203b0:	6a 05                	push   0x5
c00203b2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00203b9:	50                   	push   eax
c00203ba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00203c0:	e8 77 eb ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00203c5:	83 c4 20             	add    esp,0x20
c00203c8:	83 fe 02             	cmp    esi,0x2
c00203cb:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c00203d0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00203d5:	85 c9                	test   ecx,ecx
c00203d7:	74 07                	je     c00203e0 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c00203d9:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00203de:	75 45                	jne    c0020425 <ATA::access(unsigned long long, int, void*, bool)+0x2c7>
c00203e0:	89 f8                	mov    eax,edi
c00203e2:	0f b6 f8             	movzx  edi,al
c00203e5:	31 c0                	xor    eax,eax
c00203e7:	4f                   	dec    edi
c00203e8:	0f 94 c0             	sete   al
c00203eb:	89 c6                	mov    esi,eax
c00203ed:	75 0c                	jne    c00203fb <ATA::access(unsigned long long, int, void*, bool)+0x29d>
c00203ef:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00203f4:	b8 30 00 00 00       	mov    eax,0x30
c00203f9:	75 2f                	jne    c002042a <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c00203fb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00203ff:	83 f2 01             	xor    edx,0x1
c0020402:	85 c9                	test   ecx,ecx
c0020404:	74 09                	je     c002040f <ATA::access(unsigned long long, int, void*, bool)+0x2b1>
c0020406:	84 d2                	test   dl,dl
c0020408:	b8 24 00 00 00       	mov    eax,0x24
c002040d:	75 1b                	jne    c002042a <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c002040f:	85 f6                	test   esi,esi
c0020411:	0f 84 5c fe ff ff    	je     c0020273 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c0020417:	84 d2                	test   dl,dl
c0020419:	b8 20 00 00 00       	mov    eax,0x20
c002041e:	75 0a                	jne    c002042a <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c0020420:	e9 4e fe ff ff       	jmp    c0020273 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c0020425:	b8 34 00 00 00       	mov    eax,0x34
c002042a:	50                   	push   eax
c002042b:	6a 07                	push   0x7
c002042d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020434:	50                   	push   eax
c0020435:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002043b:	e8 fc ea ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020440:	f0 ff 0d 30 23 03 c0 	lock dec DWORD PTR ds:0xc0032330
c0020447:	83 c4 10             	add    esp,0x10
c002044a:	83 3d 30 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032330,0x0
c0020451:	75 01                	jne    c0020454 <ATA::access(unsigned long long, int, void*, bool)+0x2f6>
c0020453:	fb                   	sti    
c0020454:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0020458:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c002045d:	85 f6                	test   esi,esi
c002045f:	0f 84 dd 00 00 00    	je     c0020542 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c0020465:	57                   	push   edi
c0020466:	6a 01                	push   0x1
c0020468:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002046f:	50                   	push   eax
c0020470:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020476:	e8 61 f8 ff ff       	call   c001fcdc <IDE::polling(unsigned char, unsigned int)>
c002047b:	83 c4 10             	add    esp,0x10
c002047e:	0f b6 c0             	movzx  eax,al
c0020481:	85 c0                	test   eax,eax
c0020483:	74 23                	je     c00204a8 <ATA::access(unsigned long long, int, void*, bool)+0x34a>
c0020485:	50                   	push   eax
c0020486:	89 c6                	mov    esi,eax
c0020488:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002048f:	50                   	push   eax
c0020490:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020497:	50                   	push   eax
c0020498:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002049e:	e8 7f f7 ff ff       	call   c001fc22 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00204a3:	e9 b1 00 00 00       	jmp    c0020559 <ATA::access(unsigned long long, int, void*, bool)+0x3fb>
c00204a8:	85 ed                	test   ebp,ebp
c00204aa:	74 49                	je     c00204f5 <ATA::access(unsigned long long, int, void*, bool)+0x397>
c00204ac:	fa                   	cli    
c00204ad:	ff 05 30 23 03 c0    	inc    DWORD PTR ds:0xc0032330
c00204b3:	31 ff                	xor    edi,edi
c00204b5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00204b9:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c00204bd:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00204c2:	51                   	push   ecx
c00204c3:	51                   	push   ecx
c00204c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00204cb:	50                   	push   eax
c00204cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00204d2:	e8 53 ea ff ff       	call   c001ef2a <IDE::getBase(unsigned char)>
c00204d7:	89 c2                	mov    edx,eax
c00204d9:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00204de:	66 ef                	out    dx,ax
c00204e0:	47                   	inc    edi
c00204e1:	83 c4 10             	add    esp,0x10
c00204e4:	81 ff 00 01 00 00    	cmp    edi,0x100
c00204ea:	75 c9                	jne    c00204b5 <ATA::access(unsigned long long, int, void*, bool)+0x357>
c00204ec:	f0 ff 0d 30 23 03 c0 	lock dec DWORD PTR ds:0xc0032330
c00204f3:	eb 35                	jmp    c002052a <ATA::access(unsigned long long, int, void*, bool)+0x3cc>
c00204f5:	fa                   	cli    
c00204f6:	52                   	push   edx
c00204f7:	52                   	push   edx
c00204f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00204ff:	ff 05 30 23 03 c0    	inc    DWORD PTR ds:0xc0032330
c0020505:	50                   	push   eax
c0020506:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002050c:	e8 19 ea ff ff       	call   c001ef2a <IDE::getBase(unsigned char)>
c0020511:	b9 00 01 00 00       	mov    ecx,0x100
c0020516:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002051a:	89 c2                	mov    edx,eax
c002051c:	fc                   	cld    
c002051d:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0020520:	f0 ff 0d 30 23 03 c0 	lock dec DWORD PTR ds:0xc0032330
c0020527:	83 c4 10             	add    esp,0x10
c002052a:	83 3d 30 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032330,0x0
c0020531:	75 01                	jne    c0020534 <ATA::access(unsigned long long, int, void*, bool)+0x3d6>
c0020533:	fb                   	sti    
c0020534:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002053c:	4e                   	dec    esi
c002053d:	e9 1b ff ff ff       	jmp    c002045d <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c0020542:	31 f6                	xor    esi,esi
c0020544:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0020549:	74 11                	je     c002055c <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c002054b:	50                   	push   eax
c002054c:	50                   	push   eax
c002054d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0020552:	50                   	push   eax
c0020553:	53                   	push   ebx
c0020554:	e8 6b fb ff ff       	call   c00200c4 <ATA::flush(bool)>
c0020559:	83 c4 10             	add    esp,0x10
c002055c:	83 c4 2c             	add    esp,0x2c
c002055f:	89 f0                	mov    eax,esi
c0020561:	5b                   	pop    ebx
c0020562:	5e                   	pop    esi
c0020563:	5f                   	pop    edi
c0020564:	5d                   	pop    ebp
c0020565:	c3                   	ret    

c0020566 <ATA::read(unsigned long long, int, void*)>:
c0020566:	57                   	push   edi
c0020567:	b8 04 00 00 00       	mov    eax,0x4
c002056c:	56                   	push   esi
c002056d:	53                   	push   ebx
c002056e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020572:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020576:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002057a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002057e:	8d 7a ff             	lea    edi,[edx-0x1]
c0020581:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0020587:	77 25                	ja     c00205ae <ATA::read(unsigned long long, int, void*)+0x48>
c0020589:	85 f6                	test   esi,esi
c002058b:	b8 06 00 00 00       	mov    eax,0x6
c0020590:	74 1c                	je     c00205ae <ATA::read(unsigned long long, int, void*)+0x48>
c0020592:	50                   	push   eax
c0020593:	50                   	push   eax
c0020594:	6a 00                	push   0x0
c0020596:	56                   	push   esi
c0020597:	52                   	push   edx
c0020598:	53                   	push   ebx
c0020599:	51                   	push   ecx
c002059a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002059e:	e8 bb fb ff ff       	call   c002015e <ATA::access(unsigned long long, int, void*, bool)>
c00205a3:	83 c4 20             	add    esp,0x20
c00205a6:	85 c0                	test   eax,eax
c00205a8:	0f 95 c0             	setne  al
c00205ab:	0f b6 c0             	movzx  eax,al
c00205ae:	5b                   	pop    ebx
c00205af:	5e                   	pop    esi
c00205b0:	5f                   	pop    edi
c00205b1:	c3                   	ret    

c00205b2 <ATA::write(unsigned long long, int, void*)>:
c00205b2:	57                   	push   edi
c00205b3:	b8 04 00 00 00       	mov    eax,0x4
c00205b8:	56                   	push   esi
c00205b9:	53                   	push   ebx
c00205ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00205be:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00205c2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00205c6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00205ca:	8d 7a ff             	lea    edi,[edx-0x1]
c00205cd:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00205d3:	77 25                	ja     c00205fa <ATA::write(unsigned long long, int, void*)+0x48>
c00205d5:	85 f6                	test   esi,esi
c00205d7:	b8 06 00 00 00       	mov    eax,0x6
c00205dc:	74 1c                	je     c00205fa <ATA::write(unsigned long long, int, void*)+0x48>
c00205de:	50                   	push   eax
c00205df:	50                   	push   eax
c00205e0:	6a 01                	push   0x1
c00205e2:	56                   	push   esi
c00205e3:	52                   	push   edx
c00205e4:	53                   	push   ebx
c00205e5:	51                   	push   ecx
c00205e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00205ea:	e8 6f fb ff ff       	call   c002015e <ATA::access(unsigned long long, int, void*, bool)>
c00205ef:	83 c4 20             	add    esp,0x20
c00205f2:	85 c0                	test   eax,eax
c00205f4:	0f 95 c0             	setne  al
c00205f7:	0f b6 c0             	movzx  eax,al
c00205fa:	5b                   	pop    ebx
c00205fb:	5e                   	pop    esi
c00205fc:	5f                   	pop    edi
c00205fd:	c3                   	ret    

c00205fe <ATA::detectCHS()>:
c00205fe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020602:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0020608:	c1 e0 06             	shl    eax,0x6
c002060b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0020611:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002061b:	c7 44 24 04 64 aa 02 c0 	mov    DWORD PTR [esp+0x4],0xc002aa64
c0020623:	e9 84 f9 fe ff       	jmp    c000ffac <KePanic(char const*)>

c0020628 <ATA::open(int, int, void*)>:
c0020628:	53                   	push   ebx
c0020629:	83 ec 08             	sub    esp,0x8
c002062c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020630:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020634:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020638:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002063e:	c1 e0 06             	shl    eax,0x6
c0020641:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0020647:	01 d0                	add    eax,edx
c0020649:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0020650:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0020656:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002065d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020667:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002066e:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0020674:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002067b:	75 0c                	jne    c0020689 <ATA::open(int, int, void*)+0x61>
c002067d:	83 ec 0c             	sub    esp,0xc
c0020680:	53                   	push   ebx
c0020681:	e8 78 ff ff ff       	call   c00205fe <ATA::detectCHS()>
c0020686:	83 c4 10             	add    esp,0x10
c0020689:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002068f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0020695:	c1 e0 06             	shl    eax,0x6
c0020698:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002069f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00206a9:	d1 e8                	shr    eax,1
c00206ab:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00206b1:	6a 04                	push   0x4
c00206b3:	6a 0c                	push   0xc
c00206b5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00206bc:	50                   	push   eax
c00206bd:	52                   	push   edx
c00206be:	e8 79 e8 ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00206c3:	90                   	nop
c00206c4:	90                   	nop
c00206c5:	6a 00                	push   0x0
c00206c7:	6a 0c                	push   0xc
c00206c9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00206d0:	50                   	push   eax
c00206d1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00206d7:	e8 60 e8 ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00206dc:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00206e2:	83 c4 20             	add    esp,0x20
c00206e5:	c1 e0 06             	shl    eax,0x6
c00206e8:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c00206ee:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c00206f5:	0f 84 00 01 00 00    	je     c00207fb <ATA::open(int, int, void*)+0x1d3>
c00206fb:	83 ec 0c             	sub    esp,0xc
c00206fe:	6a 08                	push   0x8
c0020700:	e8 88 fb fe ff       	call   c001028d <Phys::allocateContiguousPages(int)>
c0020705:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002070b:	c7 04 24 76 aa 02 c0 	mov    DWORD PTR [esp],0xc002aa76
c0020712:	e8 4f 68 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020717:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c002071e:	e8 d0 2d ff ff       	call   c00134f3 <Virt::allocateKernelVirtualPages(int)>
c0020723:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0020729:	6a 03                	push   0x3
c002072b:	50                   	push   eax
c002072c:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0020732:	ff 35 90 22 03 c0    	push   DWORD PTR ds:0xc0032290
c0020738:	e8 8f 34 ff ff       	call   c0013bcc <VAS::mapPage(unsigned long, unsigned long, int)>
c002073d:	83 c4 20             	add    esp,0x20
c0020740:	e8 61 fa fe ff       	call   c00101a6 <Phys::allocatePage()>
c0020745:	83 ec 0c             	sub    esp,0xc
c0020748:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c002074e:	6a 01                	push   0x1
c0020750:	e8 9e 2d ff ff       	call   c00134f3 <Virt::allocateKernelVirtualPages(int)>
c0020755:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c002075b:	6a 03                	push   0x3
c002075d:	50                   	push   eax
c002075e:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c0020764:	ff 35 90 22 03 c0    	push   DWORD PTR ds:0xc0032290
c002076a:	e8 5d 34 ff ff       	call   c0013bcc <VAS::mapPage(unsigned long, unsigned long, int)>
c002076f:	83 c4 14             	add    esp,0x14
c0020772:	68 af aa 02 c0       	push   0xc002aaaf
c0020777:	e8 ea 67 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c002077c:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c0020783:	50                   	push   eax
c0020784:	6a 12                	push   0x12
c0020786:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002078d:	50                   	push   eax
c002078e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020794:	e8 a3 e7 ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020799:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c002079f:	83 c4 20             	add    esp,0x20
c00207a2:	0f b6 c4             	movzx  eax,ah
c00207a5:	50                   	push   eax
c00207a6:	6a 13                	push   0x13
c00207a8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00207af:	50                   	push   eax
c00207b0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00207b6:	e8 81 e7 ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00207bb:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c00207c2:	50                   	push   eax
c00207c3:	6a 14                	push   0x14
c00207c5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00207cc:	50                   	push   eax
c00207cd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00207d3:	e8 64 e7 ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00207d8:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c00207df:	83 c4 20             	add    esp,0x20
c00207e2:	50                   	push   eax
c00207e3:	6a 15                	push   0x15
c00207e5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00207ec:	50                   	push   eax
c00207ed:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00207f3:	e8 44 e7 ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00207f8:	83 c4 10             	add    esp,0x10
c00207fb:	83 ec 0c             	sub    esp,0xc
c00207fe:	53                   	push   ebx
c00207ff:	e8 16 9b fe ff       	call   c000a31a <PhysicalDisk::startCache()>
c0020804:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020807:	e8 7a a9 fe ff       	call   c000b186 <createPartitionsForDisk(PhysicalDisk*)>
c002080c:	83 c4 18             	add    esp,0x18
c002080f:	31 c0                	xor    eax,eax
c0020811:	5b                   	pop    ebx
c0020812:	c3                   	ret    

c0020813 <combineCharAndColour(char, unsigned char)>:
c0020813:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020818:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c002081e:	c1 e0 08             	shl    eax,0x8
c0020821:	09 d0                	or     eax,edx
c0020823:	c3                   	ret    

c0020824 <combineColours(unsigned char, unsigned char)>:
c0020824:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020829:	c1 e0 04             	shl    eax,0x4
c002082c:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c0020830:	c3                   	ret    
c0020831:	90                   	nop

c0020832 <ATAPI::write(unsigned long long, int, void*)>:
c0020832:	b8 03 00 00 00       	mov    eax,0x3
c0020837:	c3                   	ret    

c0020838 <ATAPI::close(int, int, void*)>:
c0020838:	83 ec 0c             	sub    esp,0xc
c002083b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002083f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020845:	85 c0                	test   eax,eax
c0020847:	74 0c                	je     c0020855 <ATAPI::close(int, int, void*)+0x1d>
c0020849:	8b 10                	mov    edx,DWORD PTR [eax]
c002084b:	83 ec 0c             	sub    esp,0xc
c002084e:	50                   	push   eax
c002084f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020852:	83 c4 10             	add    esp,0x10
c0020855:	31 c0                	xor    eax,eax
c0020857:	83 c4 0c             	add    esp,0xc
c002085a:	c3                   	ret    
c002085b:	90                   	nop

c002085c <ATAPI::ATAPI()>:
c002085c:	83 ec 0c             	sub    esp,0xc
c002085f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020863:	83 ec 04             	sub    esp,0x4
c0020866:	68 00 08 00 00       	push   0x800
c002086b:	68 61 ac 02 c0       	push   0xc002ac61
c0020870:	50                   	push   eax
c0020871:	e8 3c 9a fe ff       	call   c000a2b2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020876:	83 c4 10             	add    esp,0x10
c0020879:	ba 70 ab 02 c0       	mov    edx,0xc002ab70
c002087e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020882:	89 10                	mov    DWORD PTR [eax],edx
c0020884:	90                   	nop
c0020885:	83 c4 0c             	add    esp,0xc
c0020888:	c3                   	ret    
c0020889:	90                   	nop

c002088a <ATAPI::readyForCommand()>:
c002088a:	56                   	push   esi
c002088b:	53                   	push   ebx
c002088c:	31 db                	xor    ebx,ebx
c002088e:	50                   	push   eax
c002088f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020893:	50                   	push   eax
c0020894:	6a 0c                	push   0xc
c0020896:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002089d:	50                   	push   eax
c002089e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00208a4:	e8 53 e7 ff ff       	call   c001effc <IDE::read(unsigned char, unsigned char)>
c00208a9:	83 c4 10             	add    esp,0x10
c00208ac:	a8 88                	test   al,0x88
c00208ae:	74 26                	je     c00208d6 <ATAPI::readyForCommand()+0x4c>
c00208b0:	43                   	inc    ebx
c00208b1:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c00208b7:	7e da                	jle    c0020893 <ATAPI::readyForCommand()+0x9>
c00208b9:	51                   	push   ecx
c00208ba:	51                   	push   ecx
c00208bb:	6a 00                	push   0x0
c00208bd:	68 5e 01 00 00       	push   0x15e
c00208c2:	e8 61 64 ff ff       	call   c0016d28 <milliTenthSleep(unsigned long long)>
c00208c7:	83 c4 10             	add    esp,0x10
c00208ca:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c00208d0:	75 c1                	jne    c0020893 <ATAPI::readyForCommand()+0x9>
c00208d2:	31 c0                	xor    eax,eax
c00208d4:	eb 02                	jmp    c00208d8 <ATAPI::readyForCommand()+0x4e>
c00208d6:	b0 01                	mov    al,0x1
c00208d8:	5a                   	pop    edx
c00208d9:	5b                   	pop    ebx
c00208da:	5e                   	pop    esi
c00208db:	c3                   	ret    

c00208dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00208dc:	55                   	push   ebp
c00208dd:	57                   	push   edi
c00208de:	56                   	push   esi
c00208df:	53                   	push   ebx
c00208e0:	83 ec 20             	sub    esp,0x20
c00208e3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00208e7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00208eb:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00208ef:	6a 01                	push   0x1
c00208f1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00208f8:	50                   	push   eax
c00208f9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00208ff:	e8 48 e8 ff ff       	call   c001f14c <IDE::enableIRQs(unsigned char, bool)>
c0020904:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002090b:	59                   	pop    ecx
c002090c:	5e                   	pop    esi
c002090d:	50                   	push   eax
c002090e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020914:	e8 fd e5 ff ff       	call   c001ef16 <IDE::prepareInterrupt(unsigned char)>
c0020919:	89 3c 24             	mov    DWORD PTR [esp],edi
c002091c:	e8 69 ff ff ff       	call   c002088a <ATAPI::readyForCommand()>
c0020921:	83 c4 10             	add    esp,0x10
c0020924:	84 c0                	test   al,al
c0020926:	75 0a                	jne    c0020932 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c0020928:	bb 01 00 00 00       	mov    ebx,0x1
c002092d:	e9 5f 02 00 00       	jmp    c0020b91 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0020932:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c0020938:	c1 e0 04             	shl    eax,0x4
c002093b:	0f b6 c0             	movzx  eax,al
c002093e:	50                   	push   eax
c002093f:	6a 06                	push   0x6
c0020941:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020948:	50                   	push   eax
c0020949:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002094f:	e8 e8 e5 ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020954:	6a 00                	push   0x0
c0020956:	6a 01                	push   0x1
c0020958:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002095f:	50                   	push   eax
c0020960:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020966:	e8 d1 e5 ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002096b:	83 c4 20             	add    esp,0x20
c002096e:	0f b6 c3             	movzx  eax,bl
c0020971:	50                   	push   eax
c0020972:	0f b6 df             	movzx  ebx,bh
c0020975:	6a 04                	push   0x4
c0020977:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002097e:	50                   	push   eax
c002097f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020985:	e8 b2 e5 ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002098a:	53                   	push   ebx
c002098b:	6a 05                	push   0x5
c002098d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020994:	50                   	push   eax
c0020995:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002099b:	e8 9c e5 ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00209a0:	83 c4 20             	add    esp,0x20
c00209a3:	68 a0 00 00 00       	push   0xa0
c00209a8:	6a 07                	push   0x7
c00209aa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00209b1:	50                   	push   eax
c00209b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00209b8:	e8 7f e5 ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00209bd:	83 c4 0c             	add    esp,0xc
c00209c0:	6a 01                	push   0x1
c00209c2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00209c9:	50                   	push   eax
c00209ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00209d0:	e8 07 f3 ff ff       	call   c001fcdc <IDE::polling(unsigned char, unsigned int)>
c00209d5:	83 c4 10             	add    esp,0x10
c00209d8:	0f b6 d8             	movzx  ebx,al
c00209db:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c00209e1:	85 db                	test   ebx,ebx
c00209e3:	74 20                	je     c0020a05 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c00209e5:	53                   	push   ebx
c00209e6:	0f b6 c0             	movzx  eax,al
c00209e9:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c00209f0:	52                   	push   edx
c00209f1:	50                   	push   eax
c00209f2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00209f8:	e8 25 f2 ff ff       	call   c001fc22 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00209fd:	83 c4 10             	add    esp,0x10
c0020a00:	e9 8c 01 00 00       	jmp    c0020b91 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0020a05:	52                   	push   edx
c0020a06:	0f b6 c0             	movzx  eax,al
c0020a09:	52                   	push   edx
c0020a0a:	50                   	push   eax
c0020a0b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020a11:	e8 14 e5 ff ff       	call   c001ef2a <IDE::getBase(unsigned char)>
c0020a16:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0020a1a:	b9 06 00 00 00       	mov    ecx,0x6
c0020a1f:	89 c2                	mov    edx,eax
c0020a21:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0020a24:	89 e8                	mov    eax,ebp
c0020a26:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0020a2a:	83 c4 10             	add    esp,0x10
c0020a2d:	0f b6 c0             	movzx  eax,al
c0020a30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a34:	85 db                	test   ebx,ebx
c0020a36:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020a3c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020a43:	0f 84 eb 00 00 00    	je     c0020b34 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0020a49:	55                   	push   ebp
c0020a4a:	55                   	push   ebp
c0020a4b:	52                   	push   edx
c0020a4c:	50                   	push   eax
c0020a4d:	e8 5e e6 ff ff       	call   c001f0b0 <IDE::waitInterrupt(unsigned char)>
c0020a52:	83 c4 10             	add    esp,0x10
c0020a55:	84 c0                	test   al,al
c0020a57:	0f 84 cb fe ff ff    	je     c0020928 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c0020a5d:	56                   	push   esi
c0020a5e:	56                   	push   esi
c0020a5f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020a66:	50                   	push   eax
c0020a67:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020a6d:	e8 a4 e4 ff ff       	call   c001ef16 <IDE::prepareInterrupt(unsigned char)>
c0020a72:	83 c4 0c             	add    esp,0xc
c0020a75:	6a 04                	push   0x4
c0020a77:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020a7e:	50                   	push   eax
c0020a7f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020a85:	e8 72 e5 ff ff       	call   c001effc <IDE::read(unsigned char, unsigned char)>
c0020a8a:	83 c4 0c             	add    esp,0xc
c0020a8d:	6a 05                	push   0x5
c0020a8f:	89 c6                	mov    esi,eax
c0020a91:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020a98:	50                   	push   eax
c0020a99:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020a9f:	e8 58 e5 ff ff       	call   c001effc <IDE::read(unsigned char, unsigned char)>
c0020aa4:	83 c4 10             	add    esp,0x10
c0020aa7:	0f b6 e8             	movzx  ebp,al
c0020aaa:	89 f0                	mov    eax,esi
c0020aac:	c1 e5 08             	shl    ebp,0x8
c0020aaf:	0f b6 f0             	movzx  esi,al
c0020ab2:	09 f5                	or     ebp,esi
c0020ab4:	31 f6                	xor    esi,esi
c0020ab6:	d1 fd                	sar    ebp,1
c0020ab8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020abd:	74 5c                	je     c0020b1b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c0020abf:	39 ee                	cmp    esi,ebp
c0020ac1:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020ac7:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020ace:	75 0d                	jne    c0020add <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c0020ad0:	8d 0c 36             	lea    ecx,[esi+esi*1]
c0020ad3:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c0020ad7:	4b                   	dec    ebx
c0020ad8:	e9 57 ff ff ff       	jmp    c0020a34 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c0020add:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020ae1:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c0020ae5:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c0020aea:	51                   	push   ecx
c0020aeb:	51                   	push   ecx
c0020aec:	52                   	push   edx
c0020aed:	50                   	push   eax
c0020aee:	e8 37 e4 ff ff       	call   c001ef2a <IDE::getBase(unsigned char)>
c0020af3:	89 c2                	mov    edx,eax
c0020af5:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0020afa:	66 ef                	out    dx,ax
c0020afc:	46                   	inc    esi
c0020afd:	83 c4 10             	add    esp,0x10
c0020b00:	eb bd                	jmp    c0020abf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c0020b02:	51                   	push   ecx
c0020b03:	51                   	push   ecx
c0020b04:	52                   	push   edx
c0020b05:	50                   	push   eax
c0020b06:	e8 1f e4 ff ff       	call   c001ef2a <IDE::getBase(unsigned char)>
c0020b0b:	89 c2                	mov    edx,eax
c0020b0d:	66 ed                	in     ax,dx
c0020b0f:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0020b13:	83 c4 10             	add    esp,0x10
c0020b16:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0020b1a:	46                   	inc    esi
c0020b1b:	39 ee                	cmp    esi,ebp
c0020b1d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020b23:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020b2a:	75 d6                	jne    c0020b02 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c0020b2c:	01 f6                	add    esi,esi
c0020b2e:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c0020b32:	eb a3                	jmp    c0020ad7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c0020b34:	51                   	push   ecx
c0020b35:	51                   	push   ecx
c0020b36:	52                   	push   edx
c0020b37:	50                   	push   eax
c0020b38:	e8 73 e5 ff ff       	call   c001f0b0 <IDE::waitInterrupt(unsigned char)>
c0020b3d:	83 c4 10             	add    esp,0x10
c0020b40:	84 c0                	test   al,al
c0020b42:	0f 84 e0 fd ff ff    	je     c0020928 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c0020b48:	52                   	push   edx
c0020b49:	bb a0 86 01 00       	mov    ebx,0x186a0
c0020b4e:	52                   	push   edx
c0020b4f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020b56:	50                   	push   eax
c0020b57:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020b5d:	e8 b4 e3 ff ff       	call   c001ef16 <IDE::prepareInterrupt(unsigned char)>
c0020b62:	83 c4 10             	add    esp,0x10
c0020b65:	50                   	push   eax
c0020b66:	50                   	push   eax
c0020b67:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020b6e:	50                   	push   eax
c0020b6f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020b75:	e8 b0 e3 ff ff       	call   c001ef2a <IDE::getBase(unsigned char)>
c0020b7a:	8d 50 07             	lea    edx,[eax+0x7]
c0020b7d:	ec                   	in     al,dx
c0020b7e:	83 c4 10             	add    esp,0x10
c0020b81:	a8 88                	test   al,0x88
c0020b83:	74 0a                	je     c0020b8f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0020b85:	4b                   	dec    ebx
c0020b86:	75 dd                	jne    c0020b65 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0020b88:	bb 02 00 00 00       	mov    ebx,0x2
c0020b8d:	eb 02                	jmp    c0020b91 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0020b8f:	31 db                	xor    ebx,ebx
c0020b91:	83 c4 1c             	add    esp,0x1c
c0020b94:	89 d8                	mov    eax,ebx
c0020b96:	5b                   	pop    ebx
c0020b97:	5e                   	pop    esi
c0020b98:	5f                   	pop    edi
c0020b99:	5d                   	pop    ebp
c0020b9a:	c3                   	ret    
c0020b9b:	90                   	nop

c0020b9c <ATAPI::diskRemoved()>:
c0020b9c:	53                   	push   ebx
c0020b9d:	83 ec 14             	sub    esp,0x14
c0020ba0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020ba4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020bab:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c0020bb1:	e8 be a2 fe ff       	call   c000ae74 <LogicalDisk::unmount()>
c0020bb6:	58                   	pop    eax
c0020bb7:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020bbd:	e8 aa ac fe ff       	call   c000b86c <VCache::writeWriteBuffer()>
c0020bc2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0020bc8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020bcc:	83 c4 18             	add    esp,0x18
c0020bcf:	5b                   	pop    ebx
c0020bd0:	e9 87 ac fe ff       	jmp    c000b85c <VCache::invalidateReadBuffer()>
c0020bd5:	90                   	nop

c0020bd6 <ATAPI::eject()>:
c0020bd6:	57                   	push   edi
c0020bd7:	b9 03 00 00 00       	mov    ecx,0x3
c0020bdc:	53                   	push   ebx
c0020bdd:	83 ec 14             	sub    esp,0x14
c0020be0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020be4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020be8:	fc                   	cld    
c0020be9:	31 c0                	xor    eax,eax
c0020beb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020bed:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020bf2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020bf7:	50                   	push   eax
c0020bf8:	50                   	push   eax
c0020bf9:	6a 00                	push   0x0
c0020bfb:	6a 00                	push   0x0
c0020bfd:	6a 00                	push   0x0
c0020bff:	6a 02                	push   0x2
c0020c01:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020c05:	50                   	push   eax
c0020c06:	53                   	push   ebx
c0020c07:	e8 d0 fc ff ff       	call   c00208dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020c0c:	83 c4 14             	add    esp,0x14
c0020c0f:	53                   	push   ebx
c0020c10:	e8 87 ff ff ff       	call   c0020b9c <ATAPI::diskRemoved()>
c0020c15:	83 c4 24             	add    esp,0x24
c0020c18:	31 c0                	xor    eax,eax
c0020c1a:	5b                   	pop    ebx
c0020c1b:	5f                   	pop    edi
c0020c1c:	c3                   	ret    
c0020c1d:	90                   	nop

c0020c1e <ATAPI::diskInserted()>:
c0020c1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020c22:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0020c29:	c3                   	ret    

c0020c2a <ATAPI::detectMedia()>:
c0020c2a:	56                   	push   esi
c0020c2b:	53                   	push   ebx
c0020c2c:	83 ec 28             	sub    esp,0x28
c0020c2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020c33:	6a 0c                	push   0xc
c0020c35:	6a 00                	push   0x0
c0020c37:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0020c3b:	56                   	push   esi
c0020c3c:	e8 af f8 fd ff       	call   c00004f0 <memset>
c0020c41:	58                   	pop    eax
c0020c42:	5a                   	pop    edx
c0020c43:	6a 00                	push   0x0
c0020c45:	6a 00                	push   0x0
c0020c47:	6a 00                	push   0x0
c0020c49:	6a 00                	push   0x0
c0020c4b:	56                   	push   esi
c0020c4c:	53                   	push   ebx
c0020c4d:	e8 8a fc ff ff       	call   c00208dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020c52:	83 c4 1c             	add    esp,0x1c
c0020c55:	6a 0c                	push   0xc
c0020c57:	6a 00                	push   0x0
c0020c59:	56                   	push   esi
c0020c5a:	e8 91 f8 fd ff       	call   c00004f0 <memset>
c0020c5f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020c64:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0020c69:	59                   	pop    ecx
c0020c6a:	58                   	pop    eax
c0020c6b:	6a 01                	push   0x1
c0020c6d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020c71:	50                   	push   eax
c0020c72:	6a 00                	push   0x0
c0020c74:	6a 12                	push   0x12
c0020c76:	56                   	push   esi
c0020c77:	53                   	push   ebx
c0020c78:	e8 5f fc ff ff       	call   c00208dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020c7d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0020c81:	83 c4 20             	add    esp,0x20
c0020c84:	83 e0 7f             	and    eax,0x7f
c0020c87:	83 f8 70             	cmp    eax,0x70
c0020c8a:	74 15                	je     c0020ca1 <ATAPI::detectMedia()+0x77>
c0020c8c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020c93:	75 0c                	jne    c0020ca1 <ATAPI::detectMedia()+0x77>
c0020c95:	83 ec 0c             	sub    esp,0xc
c0020c98:	53                   	push   ebx
c0020c99:	e8 80 ff ff ff       	call   c0020c1e <ATAPI::diskInserted()>
c0020c9e:	83 c4 10             	add    esp,0x10
c0020ca1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020ca5:	83 e0 0f             	and    eax,0xf
c0020ca8:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0020cad:	0f b6 c0             	movzx  eax,al
c0020cb0:	75 19                	jne    c0020ccb <ATAPI::detectMedia()+0xa1>
c0020cb2:	83 f8 02             	cmp    eax,0x2
c0020cb5:	75 14                	jne    c0020ccb <ATAPI::detectMedia()+0xa1>
c0020cb7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020cbe:	74 24                	je     c0020ce4 <ATAPI::detectMedia()+0xba>
c0020cc0:	83 ec 0c             	sub    esp,0xc
c0020cc3:	53                   	push   ebx
c0020cc4:	e8 d3 fe ff ff       	call   c0020b9c <ATAPI::diskRemoved()>
c0020cc9:	eb 16                	jmp    c0020ce1 <ATAPI::detectMedia()+0xb7>
c0020ccb:	85 c0                	test   eax,eax
c0020ccd:	75 15                	jne    c0020ce4 <ATAPI::detectMedia()+0xba>
c0020ccf:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020cd6:	75 0c                	jne    c0020ce4 <ATAPI::detectMedia()+0xba>
c0020cd8:	83 ec 0c             	sub    esp,0xc
c0020cdb:	53                   	push   ebx
c0020cdc:	e8 3d ff ff ff       	call   c0020c1e <ATAPI::diskInserted()>
c0020ce1:	83 c4 10             	add    esp,0x10
c0020ce4:	83 c4 24             	add    esp,0x24
c0020ce7:	5b                   	pop    ebx
c0020ce8:	5e                   	pop    esi
c0020ce9:	c3                   	ret    

c0020cea <ATAPI::open(int, int, void*)>:
c0020cea:	56                   	push   esi
c0020ceb:	53                   	push   ebx
c0020cec:	50                   	push   eax
c0020ced:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020cf1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020cf5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020cf9:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020cff:	c1 e0 06             	shl    eax,0x6
c0020d02:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0020d08:	01 d0                	add    eax,edx
c0020d0a:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0020d11:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0020d17:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0020d1e:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020d28:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020d2f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020d35:	6a 04                	push   0x4
c0020d37:	6a 0c                	push   0xc
c0020d39:	51                   	push   ecx
c0020d3a:	52                   	push   edx
c0020d3b:	e8 fc e1 ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020d40:	90                   	nop
c0020d41:	90                   	nop
c0020d42:	6a 00                	push   0x0
c0020d44:	6a 0c                	push   0xc
c0020d46:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020d4d:	50                   	push   eax
c0020d4e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020d54:	e8 e3 e1 ff ff       	call   c001ef3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020d59:	83 c4 14             	add    esp,0x14
c0020d5c:	68 78 01 00 00       	push   0x178
c0020d61:	e8 f2 ed fe ff       	call   c000fb58 <malloc>
c0020d66:	83 c4 0c             	add    esp,0xc
c0020d69:	6a 00                	push   0x0
c0020d6b:	68 ff ff ff 7f       	push   0x7fffffff
c0020d70:	6a 00                	push   0x0
c0020d72:	6a 00                	push   0x0
c0020d74:	53                   	push   ebx
c0020d75:	68 13 ad 02 c0       	push   0xc002ad13
c0020d7a:	89 c6                	mov    esi,eax
c0020d7c:	50                   	push   eax
c0020d7d:	e8 30 9f fe ff       	call   c000acb2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020d82:	83 c4 14             	add    esp,0x14
c0020d85:	56                   	push   esi
c0020d86:	e8 e7 9f fe ff       	call   c000ad72 <LogicalDisk::assignDriveLetter()>
c0020d8b:	5a                   	pop    edx
c0020d8c:	59                   	pop    ecx
c0020d8d:	0f be c0             	movsx  eax,al
c0020d90:	50                   	push   eax
c0020d91:	68 58 ab 02 c0       	push   0xc002ab58
c0020d96:	e8 cb 61 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020d9b:	58                   	pop    eax
c0020d9c:	5a                   	pop    edx
c0020d9d:	56                   	push   esi
c0020d9e:	53                   	push   ebx
c0020d9f:	e8 2a 91 fe ff       	call   c0009ece <Device::addChild(Device*)>
c0020da4:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0020daa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020dad:	e8 68 95 fe ff       	call   c000a31a <PhysicalDisk::startCache()>
c0020db2:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020db9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020dbc:	e8 69 fe ff ff       	call   c0020c2a <ATAPI::detectMedia()>
c0020dc1:	83 c4 14             	add    esp,0x14
c0020dc4:	31 c0                	xor    eax,eax
c0020dc6:	5b                   	pop    ebx
c0020dc7:	5e                   	pop    esi
c0020dc8:	c3                   	ret    
c0020dc9:	90                   	nop

c0020dca <ATAPI::read(unsigned long long, int, void*)>:
c0020dca:	55                   	push   ebp
c0020dcb:	57                   	push   edi
c0020dcc:	56                   	push   esi
c0020dcd:	53                   	push   ebx
c0020dce:	83 ec 1c             	sub    esp,0x1c
c0020dd1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0020dd5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020dd9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020ddd:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020de4:	74 3c                	je     c0020e22 <ATAPI::read(unsigned long long, int, void*)+0x58>
c0020de6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020dea:	b9 03 00 00 00       	mov    ecx,0x3
c0020def:	fc                   	cld    
c0020df0:	31 c0                	xor    eax,eax
c0020df2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020df4:	89 e8                	mov    eax,ebp
c0020df6:	0f ce                	bswap  esi
c0020df8:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0020dfc:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0020e01:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c0020e05:	50                   	push   eax
c0020e06:	50                   	push   eax
c0020e07:	55                   	push   ebp
c0020e08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020e0c:	c1 e5 0b             	shl    ebp,0xb
c0020e0f:	6a 00                	push   0x0
c0020e11:	55                   	push   ebp
c0020e12:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020e16:	50                   	push   eax
c0020e17:	53                   	push   ebx
c0020e18:	e8 bf fa ff ff       	call   c00208dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020e1d:	83 c4 20             	add    esp,0x20
c0020e20:	eb 1a                	jmp    c0020e3c <ATAPI::read(unsigned long long, int, void*)+0x72>
c0020e22:	83 ec 0c             	sub    esp,0xc
c0020e25:	53                   	push   ebx
c0020e26:	e8 ff fd ff ff       	call   c0020c2a <ATAPI::detectMedia()>
c0020e2b:	83 c4 10             	add    esp,0x10
c0020e2e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020e35:	75 af                	jne    c0020de6 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0020e37:	b8 02 00 00 00       	mov    eax,0x2
c0020e3c:	83 c4 1c             	add    esp,0x1c
c0020e3f:	5b                   	pop    ebx
c0020e40:	5e                   	pop    esi
c0020e41:	5f                   	pop    edi
c0020e42:	5d                   	pop    ebp
c0020e43:	c3                   	ret    

c0020e44 <SATA::close(int, int, void*)>:
c0020e44:	83 ec 0c             	sub    esp,0xc
c0020e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e4b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020e51:	85 c0                	test   eax,eax
c0020e53:	74 0c                	je     c0020e61 <SATA::close(int, int, void*)+0x1d>
c0020e55:	8b 10                	mov    edx,DWORD PTR [eax]
c0020e57:	83 ec 0c             	sub    esp,0xc
c0020e5a:	50                   	push   eax
c0020e5b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020e5e:	83 c4 10             	add    esp,0x10
c0020e61:	31 c0                	xor    eax,eax
c0020e63:	83 c4 0c             	add    esp,0xc
c0020e66:	c3                   	ret    
c0020e67:	90                   	nop

c0020e68 <SATA::powerSaving(PowerSavingLevel)>:
c0020e68:	c3                   	ret    
c0020e69:	90                   	nop

c0020e6a <SATA::open(int, int, void*)>:
c0020e6a:	56                   	push   esi
c0020e6b:	53                   	push   ebx
c0020e6c:	83 ec 10             	sub    esp,0x10
c0020e6f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020e73:	68 a0 ab 02 c0       	push   0xc002aba0
c0020e78:	e8 e9 60 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020e7d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e81:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020e8b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020e95:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020e9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020e9f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020ea9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020eb0:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020eb6:	e8 eb f2 fe ff       	call   c00101a6 <Phys::allocatePage()>
c0020ebb:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020ec1:	89 c6                	mov    esi,eax
c0020ec3:	e8 de f2 fe ff       	call   c00101a6 <Phys::allocatePage()>
c0020ec8:	81 c6 00 10 00 00    	add    esi,0x1000
c0020ece:	83 c4 10             	add    esp,0x10
c0020ed1:	39 c6                	cmp    esi,eax
c0020ed3:	74 10                	je     c0020ee5 <SATA::open(int, int, void*)+0x7b>
c0020ed5:	83 ec 0c             	sub    esp,0xc
c0020ed8:	68 ac ab 02 c0       	push   0xc002abac
c0020edd:	e8 ca f0 fe ff       	call   c000ffac <KePanic(char const*)>
c0020ee2:	83 c4 10             	add    esp,0x10
c0020ee5:	83 ec 0c             	sub    esp,0xc
c0020ee8:	6a 02                	push   0x2
c0020eea:	e8 04 26 ff ff       	call   c00134f3 <Virt::allocateKernelVirtualPages(int)>
c0020eef:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020ef5:	6a 03                	push   0x3
c0020ef7:	50                   	push   eax
c0020ef8:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0020efe:	ff 35 90 22 03 c0    	push   DWORD PTR ds:0xc0032290
c0020f04:	e8 c3 2c ff ff       	call   c0013bcc <VAS::mapPage(unsigned long, unsigned long, int)>
c0020f09:	83 c4 14             	add    esp,0x14
c0020f0c:	53                   	push   ebx
c0020f0d:	e8 08 94 fe ff       	call   c000a31a <PhysicalDisk::startCache()>
c0020f12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020f15:	e8 6c a2 fe ff       	call   c000b186 <createPartitionsForDisk(PhysicalDisk*)>
c0020f1a:	83 c4 14             	add    esp,0x14
c0020f1d:	31 c0                	xor    eax,eax
c0020f1f:	5b                   	pop    ebx
c0020f20:	5e                   	pop    esi
c0020f21:	c3                   	ret    

c0020f22 <SATA::SATA()>:
c0020f22:	83 ec 0c             	sub    esp,0xc
c0020f25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f29:	83 ec 04             	sub    esp,0x4
c0020f2c:	68 00 02 00 00       	push   0x200
c0020f31:	68 c0 ab 02 c0       	push   0xc002abc0
c0020f36:	50                   	push   eax
c0020f37:	e8 76 93 fe ff       	call   c000a2b2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020f3c:	83 c4 10             	add    esp,0x10
c0020f3f:	ba 30 ac 02 c0       	mov    edx,0xc002ac30
c0020f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f48:	89 10                	mov    DWORD PTR [eax],edx
c0020f4a:	90                   	nop
c0020f4b:	83 c4 0c             	add    esp,0xc
c0020f4e:	c3                   	ret    
c0020f4f:	90                   	nop

c0020f50 <SATA::access(unsigned long long, int, void*, bool)>:
c0020f50:	55                   	push   ebp
c0020f51:	57                   	push   edi
c0020f52:	56                   	push   esi
c0020f53:	53                   	push   ebx
c0020f54:	83 ec 2c             	sub    esp,0x2c
c0020f57:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020f5b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020f5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f63:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020f67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020f6b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020f6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020f73:	fa                   	cli    
c0020f74:	ff 05 30 23 03 c0    	inc    DWORD PTR ds:0xc0032330
c0020f7a:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0020f7f:	7e 10                	jle    c0020f91 <SATA::access(unsigned long long, int, void*, bool)+0x41>
c0020f81:	83 ec 0c             	sub    esp,0xc
c0020f84:	68 d0 ab 02 c0       	push   0xc002abd0
c0020f89:	e8 1e f0 fe ff       	call   c000ffac <KePanic(char const*)>
c0020f8e:	83 c4 10             	add    esp,0x10
c0020f91:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020f97:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c0020f9d:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0020fa3:	89 e8                	mov    eax,ebp
c0020fa5:	c1 e0 07             	shl    eax,0x7
c0020fa8:	01 d0                	add    eax,edx
c0020faa:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020fb4:	8d 45 02             	lea    eax,[ebp+0x2]
c0020fb7:	51                   	push   ecx
c0020fb8:	c1 e0 07             	shl    eax,0x7
c0020fbb:	51                   	push   ecx
c0020fbc:	01 d0                	add    eax,edx
c0020fbe:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0020fc2:	50                   	push   eax
c0020fc3:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020fc9:	e8 ee ed ff ff       	call   c001fdbc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020fce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020fd2:	83 c4 10             	add    esp,0x10
c0020fd5:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c0020fda:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020fde:	0f 84 a6 01 00 00    	je     c002118a <SATA::access(unsigned long long, int, void*, bool)+0x23a>
c0020fe4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020fe8:	c1 e0 09             	shl    eax,0x9
c0020feb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020ff0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020ff4:	74 0e                	je     c0021004 <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c0020ff6:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020ffc:	89 c1                	mov    ecx,eax
c0020ffe:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0021002:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021004:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0021008:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002100e:	8d 45 02             	lea    eax,[ebp+0x2]
c0021011:	c1 e0 07             	shl    eax,0x7
c0021014:	01 d0                	add    eax,edx
c0021016:	8b 00                	mov    eax,DWORD PTR [eax]
c0021018:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002101e:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0021024:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021028:	c1 e1 05             	shl    ecx,0x5
c002102b:	01 c8                	add    eax,ecx
c002102d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021031:	83 e1 01             	and    ecx,0x1
c0021034:	89 ce                	mov    esi,ecx
c0021036:	8a 08                	mov    cl,BYTE PTR [eax]
c0021038:	c1 e6 06             	shl    esi,0x6
c002103b:	83 e1 bf             	and    ecx,0xffffffbf
c002103e:	09 f1                	or     ecx,esi
c0021040:	88 08                	mov    BYTE PTR [eax],cl
c0021042:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021044:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002104a:	81 c9 05 00 01 00    	or     ecx,0x10005
c0021050:	89 08                	mov    DWORD PTR [eax],ecx
c0021052:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0021058:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002105e:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0021064:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0021067:	50                   	push   eax
c0021068:	68 90 00 00 00       	push   0x90
c002106d:	6a 00                	push   0x0
c002106f:	56                   	push   esi
c0021070:	e8 7b f4 fd ff       	call   c00004f0 <memset>
c0021075:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002107b:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0021081:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021085:	83 c4 10             	add    esp,0x10
c0021088:	48                   	dec    eax
c0021089:	25 ff ff 3f 00       	and    eax,0x3fffff
c002108e:	89 c1                	mov    ecx,eax
c0021090:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0021096:	25 00 00 c0 ff       	and    eax,0xffc00000
c002109b:	09 c8                	or     eax,ecx
c002109d:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c00210a3:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c00210a9:	83 c8 80             	or     eax,0xffffff80
c00210ac:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c00210b2:	66 8b 06             	mov    ax,WORD PTR [esi]
c00210b5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00210b9:	25 00 7f 00 00       	and    eax,0x7f00
c00210be:	0d 27 80 ff ff       	or     eax,0xffff8027
c00210c3:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00210c8:	66 89 06             	mov    WORD PTR [esi],ax
c00210cb:	b0 35                	mov    al,0x35
c00210cd:	75 02                	jne    c00210d1 <SATA::access(unsigned long long, int, void*, bool)+0x181>
c00210cf:	b0 25                	mov    al,0x25
c00210d1:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00210d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00210d8:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c00210dc:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c00210e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00210e4:	c1 e8 10             	shr    eax,0x10
c00210e7:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00210ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00210ee:	c1 e8 18             	shr    eax,0x18
c00210f1:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c00210f4:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00210f8:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00210fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00210ff:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0021102:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0021106:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c002110a:	89 ee                	mov    esi,ebp
c002110c:	31 c0                	xor    eax,eax
c002110e:	c1 e6 07             	shl    esi,0x7
c0021111:	01 d6                	add    esi,edx
c0021113:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0021119:	80 e1 88             	and    cl,0x88
c002111c:	74 0a                	je     c0021128 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c002111e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0021123:	74 0a                	je     c002112f <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0021125:	40                   	inc    eax
c0021126:	eb eb                	jmp    c0021113 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c0021128:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002112d:	75 0a                	jne    c0021139 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c002112f:	83 ec 0c             	sub    esp,0xc
c0021132:	68 09 ac 02 c0       	push   0xc002ac09
c0021137:	eb 34                	jmp    c002116d <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0021139:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c002113d:	c1 e5 07             	shl    ebp,0x7
c0021140:	b8 01 00 00 00       	mov    eax,0x1
c0021145:	01 ea                	add    edx,ebp
c0021147:	d3 e0                	shl    eax,cl
c0021149:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002114f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0021155:	85 c8                	test   eax,ecx
c0021157:	74 25                	je     c002117e <SATA::access(unsigned long long, int, void*, bool)+0x22e>
c0021159:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002115f:	0f ba e1 1e          	bt     ecx,0x1e
c0021163:	73 ea                	jae    c002114f <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c0021165:	83 ec 0c             	sub    esp,0xc
c0021168:	68 17 ac 02 c0       	push   0xc002ac17
c002116d:	e8 f4 5d fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0021172:	f0 ff 0d 30 23 03 c0 	lock dec DWORD PTR ds:0xc0032330
c0021179:	83 c4 10             	add    esp,0x10
c002117c:	eb 13                	jmp    c0021191 <SATA::access(unsigned long long, int, void*, bool)+0x241>
c002117e:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0021184:	0f ba e0 1e          	bt     eax,0x1e
c0021188:	73 18                	jae    c00211a2 <SATA::access(unsigned long long, int, void*, bool)+0x252>
c002118a:	f0 ff 0d 30 23 03 c0 	lock dec DWORD PTR ds:0xc0032330
c0021191:	83 3d 30 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032330,0x0
c0021198:	75 01                	jne    c002119b <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c002119a:	fb                   	sti    
c002119b:	b8 01 00 00 00       	mov    eax,0x1
c00211a0:	eb 2c                	jmp    c00211ce <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c00211a2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00211a7:	75 10                	jne    c00211b9 <SATA::access(unsigned long long, int, void*, bool)+0x269>
c00211a9:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c00211af:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00211b3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00211b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00211b9:	f0 ff 0d 30 23 03 c0 	lock dec DWORD PTR ds:0xc0032330
c00211c0:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c00211c5:	85 c0                	test   eax,eax
c00211c7:	75 03                	jne    c00211cc <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c00211c9:	fb                   	sti    
c00211ca:	eb 02                	jmp    c00211ce <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c00211cc:	31 c0                	xor    eax,eax
c00211ce:	83 c4 2c             	add    esp,0x2c
c00211d1:	5b                   	pop    ebx
c00211d2:	5e                   	pop    esi
c00211d3:	5f                   	pop    edi
c00211d4:	5d                   	pop    ebp
c00211d5:	c3                   	ret    

c00211d6 <SATA::read(unsigned long long, int, void*)>:
c00211d6:	57                   	push   edi
c00211d7:	b8 04 00 00 00       	mov    eax,0x4
c00211dc:	56                   	push   esi
c00211dd:	53                   	push   ebx
c00211de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00211e2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00211e6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00211ea:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00211ee:	8d 7a ff             	lea    edi,[edx-0x1]
c00211f1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00211f7:	77 25                	ja     c002121e <SATA::read(unsigned long long, int, void*)+0x48>
c00211f9:	85 f6                	test   esi,esi
c00211fb:	b8 06 00 00 00       	mov    eax,0x6
c0021200:	74 1c                	je     c002121e <SATA::read(unsigned long long, int, void*)+0x48>
c0021202:	50                   	push   eax
c0021203:	50                   	push   eax
c0021204:	6a 00                	push   0x0
c0021206:	56                   	push   esi
c0021207:	52                   	push   edx
c0021208:	53                   	push   ebx
c0021209:	51                   	push   ecx
c002120a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002120e:	e8 3d fd ff ff       	call   c0020f50 <SATA::access(unsigned long long, int, void*, bool)>
c0021213:	83 c4 20             	add    esp,0x20
c0021216:	85 c0                	test   eax,eax
c0021218:	0f 95 c0             	setne  al
c002121b:	0f b6 c0             	movzx  eax,al
c002121e:	5b                   	pop    ebx
c002121f:	5e                   	pop    esi
c0021220:	5f                   	pop    edi
c0021221:	c3                   	ret    

c0021222 <SATA::write(unsigned long long, int, void*)>:
c0021222:	55                   	push   ebp
c0021223:	b8 04 00 00 00       	mov    eax,0x4
c0021228:	57                   	push   edi
c0021229:	56                   	push   esi
c002122a:	53                   	push   ebx
c002122b:	83 ec 0c             	sub    esp,0xc
c002122e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021232:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021236:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002123a:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002123e:	8d 73 ff             	lea    esi,[ebx-0x1]
c0021241:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0021247:	77 3d                	ja     c0021286 <SATA::write(unsigned long long, int, void*)+0x64>
c0021249:	85 ed                	test   ebp,ebp
c002124b:	b8 06 00 00 00       	mov    eax,0x6
c0021250:	74 34                	je     c0021286 <SATA::write(unsigned long long, int, void*)+0x64>
c0021252:	c1 e3 09             	shl    ebx,0x9
c0021255:	01 eb                	add    ebx,ebp
c0021257:	50                   	push   eax
c0021258:	89 d6                	mov    esi,edx
c002125a:	50                   	push   eax
c002125b:	83 c6 01             	add    esi,0x1
c002125e:	6a 01                	push   0x1
c0021260:	89 cf                	mov    edi,ecx
c0021262:	55                   	push   ebp
c0021263:	83 d7 00             	adc    edi,0x0
c0021266:	6a 01                	push   0x1
c0021268:	81 c5 00 02 00 00    	add    ebp,0x200
c002126e:	51                   	push   ecx
c002126f:	52                   	push   edx
c0021270:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021274:	e8 d7 fc ff ff       	call   c0020f50 <SATA::access(unsigned long long, int, void*, bool)>
c0021279:	83 c4 20             	add    esp,0x20
c002127c:	39 dd                	cmp    ebp,ebx
c002127e:	89 f2                	mov    edx,esi
c0021280:	89 f9                	mov    ecx,edi
c0021282:	75 d3                	jne    c0021257 <SATA::write(unsigned long long, int, void*)+0x35>
c0021284:	31 c0                	xor    eax,eax
c0021286:	83 c4 0c             	add    esp,0xc
c0021289:	5b                   	pop    ebx
c002128a:	5e                   	pop    esi
c002128b:	5f                   	pop    edi
c002128c:	5d                   	pop    ebp
c002128d:	c3                   	ret    

c002128e <SATAPI::write(unsigned long long, int, void*)>:
c002128e:	b8 03 00 00 00       	mov    eax,0x3
c0021293:	c3                   	ret    

c0021294 <SATAPI::close(int, int, void*)>:
c0021294:	83 ec 0c             	sub    esp,0xc
c0021297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002129b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00212a1:	85 c0                	test   eax,eax
c00212a3:	74 0c                	je     c00212b1 <SATAPI::close(int, int, void*)+0x1d>
c00212a5:	8b 10                	mov    edx,DWORD PTR [eax]
c00212a7:	83 ec 0c             	sub    esp,0xc
c00212aa:	50                   	push   eax
c00212ab:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00212ae:	83 c4 10             	add    esp,0x10
c00212b1:	31 c0                	xor    eax,eax
c00212b3:	83 c4 0c             	add    esp,0xc
c00212b6:	c3                   	ret    
c00212b7:	90                   	nop

c00212b8 <SATAPI::SATAPI()>:
c00212b8:	83 ec 0c             	sub    esp,0xc
c00212bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212bf:	83 ec 04             	sub    esp,0x4
c00212c2:	68 00 08 00 00       	push   0x800
c00212c7:	68 60 ac 02 c0       	push   0xc002ac60
c00212cc:	50                   	push   eax
c00212cd:	e8 e0 8f fe ff       	call   c000a2b2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00212d2:	83 c4 10             	add    esp,0x10
c00212d5:	ba 54 ad 02 c0       	mov    edx,0xc002ad54
c00212da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212de:	89 10                	mov    DWORD PTR [eax],edx
c00212e0:	90                   	nop
c00212e1:	83 c4 0c             	add    esp,0xc
c00212e4:	c3                   	ret    
c00212e5:	90                   	nop

c00212e6 <SATAPI::diskRemoved()>:
c00212e6:	c3                   	ret    
c00212e7:	90                   	nop

c00212e8 <SATAPI::diskInserted()>:
c00212e8:	83 ec 18             	sub    esp,0x18
c00212eb:	68 6c ac 02 c0       	push   0xc002ac6c
c00212f0:	e8 71 5c fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00212f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00212f9:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0021300:	83 c4 1c             	add    esp,0x1c
c0021303:	c3                   	ret    

c0021304 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0021304:	55                   	push   ebp
c0021305:	57                   	push   edi
c0021306:	56                   	push   esi
c0021307:	53                   	push   ebx
c0021308:	83 ec 34             	sub    esp,0x34
c002130b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002130f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0021313:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021317:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002131b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002131f:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0021325:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002132b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002132f:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0021335:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021339:	83 c0 02             	add    eax,0x2
c002133c:	c1 e0 07             	shl    eax,0x7
c002133f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0021343:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021347:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002134b:	c1 e0 07             	shl    eax,0x7
c002134e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0021352:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021356:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0021360:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0021364:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002136a:	e8 4d ea ff ff       	call   c001fdbc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002136f:	83 c4 10             	add    esp,0x10
c0021372:	89 c2                	mov    edx,eax
c0021374:	b8 01 00 00 00       	mov    eax,0x1
c0021379:	83 fa ff             	cmp    edx,0xffffffff
c002137c:	0f 84 63 02 00 00    	je     c00215e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2e1>
c0021382:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0021386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002138a:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0021390:	8b 00                	mov    eax,DWORD PTR [eax]
c0021392:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0021398:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002139e:	89 d1                	mov    ecx,edx
c00213a0:	c1 e1 05             	shl    ecx,0x5
c00213a3:	01 c8                	add    eax,ecx
c00213a5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00213a7:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00213ad:	81 c9 25 00 01 00    	or     ecx,0x10025
c00213b3:	89 08                	mov    DWORD PTR [eax],ecx
c00213b5:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00213bb:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00213c1:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00213c7:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00213ca:	50                   	push   eax
c00213cb:	68 90 00 00 00       	push   0x90
c00213d0:	6a 00                	push   0x0
c00213d2:	53                   	push   ebx
c00213d3:	e8 18 f1 fd ff       	call   c00004f0 <memset>
c00213d8:	8d 7b 40             	lea    edi,[ebx+0x40]
c00213db:	b9 0c 00 00 00       	mov    ecx,0xc
c00213e0:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00213e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00213e6:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c00213ec:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00213f0:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00213f4:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00213fa:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00213fe:	48                   	dec    eax
c00213ff:	25 ff ff 3f 00       	and    eax,0x3fffff
c0021404:	89 c1                	mov    ecx,eax
c0021406:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002140c:	25 00 00 c0 ff       	and    eax,0xffc00000
c0021411:	09 c8                	or     eax,ecx
c0021413:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0021419:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c002141f:	83 c8 80             	or     eax,0xffffff80
c0021422:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c0021428:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002142b:	25 00 7f 00 00       	and    eax,0x7f00
c0021430:	0d 27 80 ff ff       	or     eax,0xffff8027
c0021435:	66 89 03             	mov    WORD PTR [ebx],ax
c0021438:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002143c:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0021440:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021444:	c1 e8 10             	shr    eax,0x10
c0021447:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002144a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002144e:	c1 e8 18             	shr    eax,0x18
c0021451:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0021454:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0021458:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002145b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002145f:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0021462:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0021466:	83 c4 10             	add    esp,0x10
c0021469:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002146d:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0021471:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0021475:	31 c0                	xor    eax,eax
c0021477:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c002147d:	80 e1 88             	and    cl,0x88
c0021480:	74 0a                	je     c002148c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c0021482:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0021487:	74 0a                	je     c0021493 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c0021489:	40                   	inc    eax
c002148a:	eb eb                	jmp    c0021477 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c002148c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0021491:	75 43                	jne    c00214d6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c0021493:	83 ec 0c             	sub    esp,0xc
c0021496:	68 84 ac 02 c0       	push   0xc002ac84
c002149b:	e8 c6 5a fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00214a0:	58                   	pop    eax
c00214a1:	5a                   	pop    edx
c00214a2:	68 99 ac 02 c0       	push   0xc002ac99
c00214a7:	ff 35 f4 21 03 c0    	push   DWORD PTR ds:0xc00321f4
c00214ad:	e8 36 14 ff ff       	call   c00128e8 <VgaText::puts(char const*)>
c00214b2:	59                   	pop    ecx
c00214b3:	5b                   	pop    ebx
c00214b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00214b8:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00214be:	e8 93 e9 ff ff       	call   c001fe56 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00214c3:	5e                   	pop    esi
c00214c4:	5f                   	pop    edi
c00214c5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00214c9:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00214cf:	e8 62 e9 ff ff       	call   c001fe36 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c00214d4:	eb 48                	jmp    c002151e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c00214d6:	b8 01 00 00 00       	mov    eax,0x1
c00214db:	88 d1                	mov    cl,dl
c00214dd:	d3 e0                	shl    eax,cl
c00214df:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c00214e4:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c00214ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00214ee:	89 c7                	mov    edi,eax
c00214f0:	c1 e3 07             	shl    ebx,0x7
c00214f3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00214f7:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c00214fd:	85 c7                	test   edi,eax
c00214ff:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0021505:	0f 84 a7 00 00 00    	je     c00215b2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2ae>
c002150b:	0f ba e0 1e          	bt     eax,0x1e
c002150f:	73 1a                	jae    c002152b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c0021511:	83 ec 0c             	sub    esp,0xc
c0021514:	68 ab ac 02 c0       	push   0xc002acab
c0021519:	e8 48 5a fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c002151e:	83 c4 10             	add    esp,0x10
c0021521:	b8 01 00 00 00       	mov    eax,0x1
c0021526:	e9 ba 00 00 00       	jmp    c00215e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2e1>
c002152b:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c0021531:	83 f8 0d             	cmp    eax,0xd
c0021534:	77 0b                	ja     c0021541 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23d>
c0021536:	50                   	push   eax
c0021537:	50                   	push   eax
c0021538:	6a 00                	push   0x0
c002153a:	68 c8 00 00 00       	push   0xc8
c002153f:	eb 2a                	jmp    c002156b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c0021541:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c0021547:	83 f8 0d             	cmp    eax,0xd
c002154a:	77 0b                	ja     c0021557 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c002154c:	51                   	push   ecx
c002154d:	51                   	push   ecx
c002154e:	6a 00                	push   0x0
c0021550:	68 58 02 00 00       	push   0x258
c0021555:	eb 14                	jmp    c002156b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c0021557:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c002155d:	83 f8 06             	cmp    eax,0x6
c0021560:	77 11                	ja     c0021573 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26f>
c0021562:	52                   	push   edx
c0021563:	52                   	push   edx
c0021564:	6a 00                	push   0x0
c0021566:	68 dc 05 00 00       	push   0x5dc
c002156b:	e8 b8 57 ff ff       	call   c0016d28 <milliTenthSleep(unsigned long long)>
c0021570:	83 c4 10             	add    esp,0x10
c0021573:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0021577:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c002157a:	75 06                	jne    c0021582 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c002157c:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c0021580:	74 16                	je     c0021598 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c0021582:	83 fe 06             	cmp    esi,0x6
c0021585:	77 11                	ja     c0021598 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c0021587:	50                   	push   eax
c0021588:	50                   	push   eax
c0021589:	6a 00                	push   0x0
c002158b:	68 c4 09 00 00       	push   0x9c4
c0021590:	e8 93 57 ff ff       	call   c0016d28 <milliTenthSleep(unsigned long long)>
c0021595:	83 c4 10             	add    esp,0x10
c0021598:	46                   	inc    esi
c0021599:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c002159f:	0f 85 52 ff ff ff    	jne    c00214f7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c00215a5:	83 ec 0c             	sub    esp,0xc
c00215a8:	68 be ac 02 c0       	push   0xc002acbe
c00215ad:	e9 67 ff ff ff       	jmp    c0021519 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c00215b2:	0f ba e0 1e          	bt     eax,0x1e
c00215b6:	73 0d                	jae    c00215c5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c1>
c00215b8:	83 ec 0c             	sub    esp,0xc
c00215bb:	68 d2 ac 02 c0       	push   0xc002acd2
c00215c0:	e9 54 ff ff ff       	jmp    c0021519 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c00215c5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00215ca:	74 17                	je     c00215e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2df>
c00215cc:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c00215d1:	74 10                	je     c00215e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2df>
c00215d3:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c00215d9:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00215dd:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00215e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00215e3:	31 c0                	xor    eax,eax
c00215e5:	83 c4 2c             	add    esp,0x2c
c00215e8:	5b                   	pop    ebx
c00215e9:	5e                   	pop    esi
c00215ea:	5f                   	pop    edi
c00215eb:	5d                   	pop    ebp
c00215ec:	c3                   	ret    
c00215ed:	90                   	nop

c00215ee <SATAPI::eject()>:
c00215ee:	57                   	push   edi
c00215ef:	b9 03 00 00 00       	mov    ecx,0x3
c00215f4:	83 ec 18             	sub    esp,0x18
c00215f7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00215fb:	fc                   	cld    
c00215fc:	31 c0                	xor    eax,eax
c00215fe:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021600:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0021605:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002160a:	50                   	push   eax
c002160b:	6a 00                	push   0x0
c002160d:	6a 00                	push   0x0
c002160f:	6a 00                	push   0x0
c0021611:	6a 00                	push   0x0
c0021613:	6a 02                	push   0x2
c0021615:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021619:	50                   	push   eax
c002161a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002161e:	e8 e1 fc ff ff       	call   c0021304 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021623:	83 c4 38             	add    esp,0x38
c0021626:	31 c0                	xor    eax,eax
c0021628:	5f                   	pop    edi
c0021629:	c3                   	ret    

c002162a <SATAPI::detectMedia()>:
c002162a:	53                   	push   ebx
c002162b:	83 ec 14             	sub    esp,0x14
c002162e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021632:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0021638:	e8 2f a2 fe ff       	call   c000b86c <VCache::writeWriteBuffer()>
c002163d:	59                   	pop    ecx
c002163e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0021644:	e8 13 a2 fe ff       	call   c000b85c <VCache::invalidateReadBuffer()>
c0021649:	c7 04 24 e7 ac 02 c0 	mov    DWORD PTR [esp],0xc002ace7
c0021650:	e8 11 59 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0021655:	83 c4 10             	add    esp,0x10
c0021658:	31 c0                	xor    eax,eax
c002165a:	8b 14 85 e0 1a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce520]
c0021661:	85 d2                	test   edx,edx
c0021663:	74 0f                	je     c0021674 <SATAPI::detectMedia()+0x4a>
c0021665:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c002166b:	75 07                	jne    c0021674 <SATAPI::detectMedia()+0x4a>
c002166d:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c0021674:	40                   	inc    eax
c0021675:	83 f8 1a             	cmp    eax,0x1a
c0021678:	75 e0                	jne    c002165a <SATAPI::detectMedia()+0x30>
c002167a:	83 c4 08             	add    esp,0x8
c002167d:	5b                   	pop    ebx
c002167e:	c3                   	ret    
c002167f:	90                   	nop

c0021680 <SATAPI::open(int, int, void*)>:
c0021680:	56                   	push   esi
c0021681:	53                   	push   ebx
c0021682:	51                   	push   ecx
c0021683:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021687:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002168b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0021695:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002169b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002169f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00216a9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00216b3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00216ba:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00216c0:	e8 e1 ea fe ff       	call   c00101a6 <Phys::allocatePage()>
c00216c5:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00216cb:	89 c6                	mov    esi,eax
c00216cd:	e8 d4 ea fe ff       	call   c00101a6 <Phys::allocatePage()>
c00216d2:	81 c6 00 10 00 00    	add    esi,0x1000
c00216d8:	39 c6                	cmp    esi,eax
c00216da:	74 10                	je     c00216ec <SATAPI::open(int, int, void*)+0x6c>
c00216dc:	83 ec 0c             	sub    esp,0xc
c00216df:	68 fc ac 02 c0       	push   0xc002acfc
c00216e4:	e8 c3 e8 fe ff       	call   c000ffac <KePanic(char const*)>
c00216e9:	83 c4 10             	add    esp,0x10
c00216ec:	83 ec 0c             	sub    esp,0xc
c00216ef:	6a 02                	push   0x2
c00216f1:	e8 fd 1d ff ff       	call   c00134f3 <Virt::allocateKernelVirtualPages(int)>
c00216f6:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c00216fc:	6a 03                	push   0x3
c00216fe:	50                   	push   eax
c00216ff:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0021705:	ff 35 90 22 03 c0    	push   DWORD PTR ds:0xc0032290
c002170b:	e8 bc 24 ff ff       	call   c0013bcc <VAS::mapPage(unsigned long, unsigned long, int)>
c0021710:	83 c4 14             	add    esp,0x14
c0021713:	68 78 01 00 00       	push   0x178
c0021718:	e8 3b e4 fe ff       	call   c000fb58 <malloc>
c002171d:	83 c4 0c             	add    esp,0xc
c0021720:	6a 00                	push   0x0
c0021722:	68 ff ff ff 7f       	push   0x7fffffff
c0021727:	6a 00                	push   0x0
c0021729:	6a 00                	push   0x0
c002172b:	53                   	push   ebx
c002172c:	68 12 ad 02 c0       	push   0xc002ad12
c0021731:	89 c6                	mov    esi,eax
c0021733:	50                   	push   eax
c0021734:	e8 79 95 fe ff       	call   c000acb2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0021739:	83 c4 14             	add    esp,0x14
c002173c:	56                   	push   esi
c002173d:	e8 30 96 fe ff       	call   c000ad72 <LogicalDisk::assignDriveLetter()>
c0021742:	5a                   	pop    edx
c0021743:	59                   	pop    ecx
c0021744:	0f be c0             	movsx  eax,al
c0021747:	50                   	push   eax
c0021748:	68 58 ab 02 c0       	push   0xc002ab58
c002174d:	e8 14 58 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0021752:	58                   	pop    eax
c0021753:	5a                   	pop    edx
c0021754:	56                   	push   esi
c0021755:	53                   	push   ebx
c0021756:	e8 73 87 fe ff       	call   c0009ece <Device::addChild(Device*)>
c002175b:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0021761:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021764:	e8 b1 8b fe ff       	call   c000a31a <PhysicalDisk::startCache()>
c0021769:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0021770:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021773:	e8 b2 fe ff ff       	call   c002162a <SATAPI::detectMedia()>
c0021778:	83 c4 14             	add    esp,0x14
c002177b:	31 c0                	xor    eax,eax
c002177d:	5b                   	pop    ebx
c002177e:	5e                   	pop    esi
c002177f:	c3                   	ret    

c0021780 <SATAPI::read(unsigned long long, int, void*)>:
c0021780:	55                   	push   ebp
c0021781:	57                   	push   edi
c0021782:	56                   	push   esi
c0021783:	53                   	push   ebx
c0021784:	83 ec 3c             	sub    esp,0x3c
c0021787:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c002178b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002178f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0021793:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0021797:	83 fd 04             	cmp    ebp,0x4
c002179a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002179e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00217a2:	7e 10                	jle    c00217b4 <SATAPI::read(unsigned long long, int, void*)+0x34>
c00217a4:	83 ec 0c             	sub    esp,0xc
c00217a7:	68 20 ad 02 c0       	push   0xc002ad20
c00217ac:	e8 fb e7 fe ff       	call   c000ffac <KePanic(char const*)>
c00217b1:	83 c4 10             	add    esp,0x10
c00217b4:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00217ba:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00217c0:	51                   	push   ecx
c00217c1:	50                   	push   eax
c00217c2:	83 c0 02             	add    eax,0x2
c00217c5:	c1 e0 07             	shl    eax,0x7
c00217c8:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c00217ce:	50                   	push   eax
c00217cf:	52                   	push   edx
c00217d0:	e8 ab e6 ff ff       	call   c001fe80 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00217d5:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00217d9:	b9 03 00 00 00       	mov    ecx,0x3
c00217de:	fc                   	cld    
c00217df:	31 c0                	xor    eax,eax
c00217e1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00217e3:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c00217e8:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00217ed:	83 c4 0c             	add    esp,0xc
c00217f0:	6a 00                	push   0x0
c00217f2:	6a 00                	push   0x0
c00217f4:	6a 00                	push   0x0
c00217f6:	6a 00                	push   0x0
c00217f8:	6a 02                	push   0x2
c00217fa:	8d 44 24 30          	lea    eax,[esp+0x30]
c00217fe:	50                   	push   eax
c00217ff:	53                   	push   ebx
c0021800:	e8 ff fa ff ff       	call   c0021304 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021805:	83 c4 20             	add    esp,0x20
c0021808:	85 c0                	test   eax,eax
c002180a:	89 c6                	mov    esi,eax
c002180c:	75 46                	jne    c0021854 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c002180e:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021812:	b9 03 00 00 00       	mov    ecx,0x3
c0021817:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002181d:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c0021822:	0f c8                	bswap  eax
c0021824:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c0021828:	89 e8                	mov    eax,ebp
c002182a:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002182e:	50                   	push   eax
c002182f:	55                   	push   ebp
c0021830:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c0021834:	c1 e5 0b             	shl    ebp,0xb
c0021837:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002183b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002183f:	55                   	push   ebp
c0021840:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0021844:	50                   	push   eax
c0021845:	53                   	push   ebx
c0021846:	e8 b9 fa ff ff       	call   c0021304 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002184b:	83 c4 20             	add    esp,0x20
c002184e:	85 c0                	test   eax,eax
c0021850:	89 c6                	mov    esi,eax
c0021852:	74 0c                	je     c0021860 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c0021854:	83 ec 0c             	sub    esp,0xc
c0021857:	53                   	push   ebx
c0021858:	e8 cd fd ff ff       	call   c002162a <SATAPI::detectMedia()>
c002185d:	83 c4 10             	add    esp,0x10
c0021860:	83 c4 3c             	add    esp,0x3c
c0021863:	89 f0                	mov    eax,esi
c0021865:	5b                   	pop    ebx
c0021866:	5e                   	pop    esi
c0021867:	5f                   	pop    edi
c0021868:	5d                   	pop    ebp
c0021869:	c3                   	ret    
c002186a:	66 90                	xchg   ax,ax

c002186c <APICTimer::close(int, int, void*)>:
c002186c:	b8 00 00 00 00       	mov    eax,0x0
c0021871:	c3                   	ret    
c0021872:	66 90                	xchg   ax,ax

c0021874 <apicTimerHandler(regs*, void*)>:
c0021874:	83 ec 0c             	sub    esp,0xc
c0021877:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002187b:	8b 08                	mov    ecx,DWORD PTR [eax]
c002187d:	b8 10 27 00 00       	mov    eax,0x2710
c0021882:	ba 00 00 00 00       	mov    edx,0x0
c0021887:	f7 f1                	div    ecx
c0021889:	83 ec 0c             	sub    esp,0xc
c002188c:	50                   	push   eax
c002188d:	e8 de 9c fe ff       	call   c000b570 <timerHandler(unsigned int)>
c0021892:	83 c4 10             	add    esp,0x10
c0021895:	90                   	nop
c0021896:	83 c4 0c             	add    esp,0xc
c0021899:	c3                   	ret    
c002189a:	66 90                	xchg   ax,ax

c002189c <APICTimer::open(int, int, void*)>:
c002189c:	83 ec 0c             	sub    esp,0xc
c002189f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00218a5:	83 c0 24             	add    eax,0x24
c00218a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00218aa:	83 ec 08             	sub    esp,0x8
c00218ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00218b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00218b5:	ff d0                	call   eax
c00218b7:	83 c4 10             	add    esp,0x10
c00218ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00218c2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00218c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00218d0:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00218d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00218da:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00218e0:	83 ec 0c             	sub    esp,0xc
c00218e3:	51                   	push   ecx
c00218e4:	6a 01                	push   0x1
c00218e6:	68 74 18 02 c0       	push   0xc0021874
c00218eb:	52                   	push   edx
c00218ec:	50                   	push   eax
c00218ed:	e8 88 85 fe ff       	call   c0009e7a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00218f2:	83 c4 20             	add    esp,0x20
c00218f5:	89 c2                	mov    edx,eax
c00218f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218fb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021901:	b8 00 00 00 00       	mov    eax,0x0
c0021906:	83 c4 0c             	add    esp,0xc
c0021909:	c3                   	ret    
c002190a:	66 90                	xchg   ax,ax

c002190c <APICTimer::write(int)>:
c002190c:	83 ec 0c             	sub    esp,0xc
c002190f:	83 ec 0c             	sub    esp,0xc
c0021912:	68 84 ad 02 c0       	push   0xc002ad84
c0021917:	e8 90 e6 fe ff       	call   c000ffac <KePanic(char const*)>
c002191c:	83 c4 10             	add    esp,0x10
c002191f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021923:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021927:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002192d:	90                   	nop
c002192e:	83 c4 0c             	add    esp,0xc
c0021931:	c3                   	ret    
c0021932:	66 90                	xchg   ax,ax

c0021934 <APICTimer::APICTimer()>:
c0021934:	83 ec 0c             	sub    esp,0xc
c0021937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002193b:	83 ec 08             	sub    esp,0x8
c002193e:	68 94 ad 02 c0       	push   0xc002ad94
c0021943:	50                   	push   eax
c0021944:	e8 5b 9b fe ff       	call   c000b4a4 <Timer::Timer(char const*)>
c0021949:	83 c4 10             	add    esp,0x10
c002194c:	ba a8 ad 02 c0       	mov    edx,0xc002ada8
c0021951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021955:	89 10                	mov    DWORD PTR [eax],edx
c0021957:	90                   	nop
c0021958:	83 c4 0c             	add    esp,0xc
c002195b:	c3                   	ret    

c002195c <PIT::write(int)>:
c002195c:	83 ec 10             	sub    esp,0x10
c002195f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021963:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021967:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002196d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021971:	a3 b8 4d 03 c0       	mov    ds:0xc0034db8,eax
c0021976:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002197b:	89 c2                	mov    edx,eax
c002197d:	c1 fa 1f             	sar    edx,0x1f
c0021980:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0021984:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021988:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002198f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0021994:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0021998:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002199d:	ee                   	out    dx,al
c002199e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00219a2:	0f b6 c0             	movzx  eax,al
c00219a5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00219ac:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00219b0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00219b4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00219b9:	ee                   	out    dx,al
c00219ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00219be:	c1 f8 08             	sar    eax,0x8
c00219c1:	0f b6 c0             	movzx  eax,al
c00219c4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00219cb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00219cf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00219d3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00219d8:	ee                   	out    dx,al
c00219d9:	90                   	nop
c00219da:	83 c4 10             	add    esp,0x10
c00219dd:	c3                   	ret    
c00219de:	66 90                	xchg   ax,ax

c00219e0 <pitHandler(regs*, void*)>:
c00219e0:	83 ec 0c             	sub    esp,0xc
c00219e3:	8b 0d b8 4d 03 c0    	mov    ecx,DWORD PTR ds:0xc0034db8
c00219e9:	b8 10 27 00 00       	mov    eax,0x2710
c00219ee:	89 c2                	mov    edx,eax
c00219f0:	c1 fa 1f             	sar    edx,0x1f
c00219f3:	f7 f9                	idiv   ecx
c00219f5:	83 ec 0c             	sub    esp,0xc
c00219f8:	50                   	push   eax
c00219f9:	e8 72 9b fe ff       	call   c000b570 <timerHandler(unsigned int)>
c00219fe:	83 c4 10             	add    esp,0x10
c0021a01:	90                   	nop
c0021a02:	83 c4 0c             	add    esp,0xc
c0021a05:	c3                   	ret    
c0021a06:	66 90                	xchg   ax,ax

c0021a08 <PIT::open(int, int, void*)>:
c0021a08:	83 ec 0c             	sub    esp,0xc
c0021a0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a11:	83 c0 24             	add    eax,0x24
c0021a14:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a16:	83 ec 08             	sub    esp,0x8
c0021a19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a21:	ff d0                	call   eax
c0021a23:	83 c4 10             	add    esp,0x10
c0021a26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a2a:	83 ec 0c             	sub    esp,0xc
c0021a2d:	6a 00                	push   0x0
c0021a2f:	6a 01                	push   0x1
c0021a31:	68 e0 19 02 c0       	push   0xc00219e0
c0021a36:	6a 00                	push   0x0
c0021a38:	50                   	push   eax
c0021a39:	e8 3c 84 fe ff       	call   c0009e7a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021a3e:	83 c4 20             	add    esp,0x20
c0021a41:	89 c2                	mov    edx,eax
c0021a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a47:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021a4d:	b8 00 00 00 00       	mov    eax,0x0
c0021a52:	83 c4 0c             	add    esp,0xc
c0021a55:	c3                   	ret    
c0021a56:	66 90                	xchg   ax,ax

c0021a58 <PIT::close(int, int, void*)>:
c0021a58:	83 ec 0c             	sub    esp,0xc
c0021a5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a5f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0021a69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a6d:	6a 01                	push   0x1
c0021a6f:	68 e0 19 02 c0       	push   0xc00219e0
c0021a74:	6a 00                	push   0x0
c0021a76:	50                   	push   eax
c0021a77:	e8 34 84 fe ff       	call   c0009eb0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0021a7c:	83 c4 10             	add    esp,0x10
c0021a7f:	b8 00 00 00 00       	mov    eax,0x0
c0021a84:	83 c4 0c             	add    esp,0xc
c0021a87:	c3                   	ret    

c0021a88 <PIT::PIT()>:
c0021a88:	83 ec 0c             	sub    esp,0xc
c0021a8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a8f:	83 ec 08             	sub    esp,0x8
c0021a92:	68 d0 ad 02 c0       	push   0xc002add0
c0021a97:	50                   	push   eax
c0021a98:	e8 07 9a fe ff       	call   c000b4a4 <Timer::Timer(char const*)>
c0021a9d:	83 c4 10             	add    esp,0x10
c0021aa0:	ba f8 ad 02 c0       	mov    edx,0xc002adf8
c0021aa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021aa9:	89 10                	mov    DWORD PTR [eax],edx
c0021aab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021aaf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021ab5:	0f b6 d0             	movzx  edx,al
c0021ab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021abc:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0021ac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ac7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021acd:	0f b6 d0             	movzx  edx,al
c0021ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ad4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0021ad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021add:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021ae3:	8d 50 01             	lea    edx,[eax+0x1]
c0021ae6:	88 d1                	mov    cl,dl
c0021ae8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021aec:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0021af2:	0f b6 d0             	movzx  edx,al
c0021af5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021af9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021afd:	83 e1 3f             	and    ecx,0x3f
c0021b00:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021b04:	90                   	nop
c0021b05:	83 c4 0c             	add    esp,0xc
c0021b08:	c3                   	ret    
c0021b09:	66 90                	xchg   ax,ax
c0021b0b:	66 90                	xchg   ax,ax
c0021b0d:	66 90                	xchg   ax,ax
c0021b0f:	90                   	nop

c0021b10 <avxDetect>:
c0021b10:	b8 01 00 00 00       	mov    eax,0x1
c0021b15:	0f a2                	cpuid  
c0021b17:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c0021b1d:	74 15                	je     c0021b34 <avxDetect.noAVX>
c0021b1f:	b8 01 00 00 00       	mov    eax,0x1
c0021b24:	0f a2                	cpuid  
c0021b26:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c0021b2c:	74 06                	je     c0021b34 <avxDetect.noAVX>
c0021b2e:	b8 01 00 00 00       	mov    eax,0x1
c0021b33:	c3                   	ret    

c0021b34 <avxDetect.noAVX>:
c0021b34:	b8 00 00 00 00       	mov    eax,0x0
c0021b39:	c3                   	ret    

c0021b3a <avxSave>:
c0021b3a:	53                   	push   ebx
c0021b3b:	52                   	push   edx
c0021b3c:	31 c0                	xor    eax,eax
c0021b3e:	48                   	dec    eax
c0021b3f:	89 c2                	mov    edx,eax
c0021b41:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021b45:	0f ae 23             	xsave  [ebx]
c0021b48:	5a                   	pop    edx
c0021b49:	5b                   	pop    ebx
c0021b4a:	c3                   	ret    

c0021b4b <avxLoad>:
c0021b4b:	53                   	push   ebx
c0021b4c:	52                   	push   edx
c0021b4d:	31 c0                	xor    eax,eax
c0021b4f:	48                   	dec    eax
c0021b50:	89 c2                	mov    edx,eax
c0021b52:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021b56:	0f ae 2b             	xrstor [ebx]
c0021b59:	5a                   	pop    edx
c0021b5a:	5b                   	pop    ebx
c0021b5b:	c3                   	ret    

c0021b5c <avxInit>:
c0021b5c:	e8 17 03 00 00       	call   c0021e78 <sseInit>
c0021b61:	50                   	push   eax
c0021b62:	51                   	push   ecx
c0021b63:	0f 20 e0             	mov    eax,cr4
c0021b66:	0d 00 00 04 00       	or     eax,0x40000
c0021b6b:	0f 22 e0             	mov    cr4,eax
c0021b6e:	31 c9                	xor    ecx,ecx
c0021b70:	0f 01 d0             	xgetbv 
c0021b73:	0d 07 00 00 00       	or     eax,0x7
c0021b78:	0f 01 d1             	xsetbv 
c0021b7b:	59                   	pop    ecx
c0021b7c:	58                   	pop    eax
c0021b7d:	c3                   	ret    

c0021b7e <avxClose>:
c0021b7e:	c3                   	ret    
c0021b7f:	90                   	nop

c0021b80 <isr0>:
c0021b80:	fa                   	cli    
c0021b81:	68 00 00 00 00       	push   0x0
c0021b86:	68 00 00 00 00       	push   0x0
c0021b8b:	e9 56 01 00 00       	jmp    c0021ce6 <int_common_stub>

c0021b90 <isr1>:
c0021b90:	fa                   	cli    
c0021b91:	6a 00                	push   0x0
c0021b93:	6a 01                	push   0x1
c0021b95:	e9 4c 01 00 00       	jmp    c0021ce6 <int_common_stub>

c0021b9a <isr2>:
c0021b9a:	fa                   	cli    
c0021b9b:	6a 00                	push   0x0
c0021b9d:	6a 02                	push   0x2
c0021b9f:	e9 42 01 00 00       	jmp    c0021ce6 <int_common_stub>

c0021ba4 <isr3>:
c0021ba4:	fa                   	cli    
c0021ba5:	6a 00                	push   0x0
c0021ba7:	6a 03                	push   0x3
c0021ba9:	e9 38 01 00 00       	jmp    c0021ce6 <int_common_stub>

c0021bae <isr4>:
c0021bae:	fa                   	cli    
c0021baf:	6a 00                	push   0x0
c0021bb1:	6a 04                	push   0x4
c0021bb3:	e9 2e 01 00 00       	jmp    c0021ce6 <int_common_stub>

c0021bb8 <isr5>:
c0021bb8:	fa                   	cli    
c0021bb9:	6a 00                	push   0x0
c0021bbb:	6a 05                	push   0x5
c0021bbd:	e9 24 01 00 00       	jmp    c0021ce6 <int_common_stub>

c0021bc2 <isr6>:
c0021bc2:	fa                   	cli    
c0021bc3:	6a 00                	push   0x0
c0021bc5:	6a 06                	push   0x6
c0021bc7:	e9 1a 01 00 00       	jmp    c0021ce6 <int_common_stub>

c0021bcc <isr7>:
c0021bcc:	fa                   	cli    
c0021bcd:	6a 00                	push   0x0
c0021bcf:	6a 07                	push   0x7
c0021bd1:	e9 10 01 00 00       	jmp    c0021ce6 <int_common_stub>

c0021bd6 <isr8>:
c0021bd6:	fa                   	cli    
c0021bd7:	6a 08                	push   0x8
c0021bd9:	e9 08 01 00 00       	jmp    c0021ce6 <int_common_stub>

c0021bde <isr9>:
c0021bde:	fa                   	cli    
c0021bdf:	6a 00                	push   0x0
c0021be1:	6a 09                	push   0x9
c0021be3:	e9 fe 00 00 00       	jmp    c0021ce6 <int_common_stub>

c0021be8 <isr10>:
c0021be8:	fa                   	cli    
c0021be9:	6a 0a                	push   0xa
c0021beb:	e9 f6 00 00 00       	jmp    c0021ce6 <int_common_stub>

c0021bf0 <isr11>:
c0021bf0:	fa                   	cli    
c0021bf1:	6a 0b                	push   0xb
c0021bf3:	e9 ee 00 00 00       	jmp    c0021ce6 <int_common_stub>

c0021bf8 <isr12>:
c0021bf8:	fa                   	cli    
c0021bf9:	6a 0c                	push   0xc
c0021bfb:	e9 e6 00 00 00       	jmp    c0021ce6 <int_common_stub>

c0021c00 <isr13>:
c0021c00:	fa                   	cli    
c0021c01:	6a 0d                	push   0xd
c0021c03:	53                   	push   ebx
c0021c04:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021c08:	81 fb ab 1d 02 c0    	cmp    ebx,0xc0021dab
c0021c0e:	5b                   	pop    ebx
c0021c0f:	0f 84 98 01 00 00    	je     c0021dad <finishSignal2>
c0021c15:	e9 cc 00 00 00       	jmp    c0021ce6 <int_common_stub>

c0021c1a <isr14>:
c0021c1a:	fa                   	cli    
c0021c1b:	6a 0e                	push   0xe
c0021c1d:	e9 c4 00 00 00       	jmp    c0021ce6 <int_common_stub>

c0021c22 <isr15>:
c0021c22:	fa                   	cli    
c0021c23:	6a 00                	push   0x0
c0021c25:	6a 0f                	push   0xf
c0021c27:	e9 ba 00 00 00       	jmp    c0021ce6 <int_common_stub>

c0021c2c <isr16>:
c0021c2c:	fa                   	cli    
c0021c2d:	6a 00                	push   0x0
c0021c2f:	6a 10                	push   0x10
c0021c31:	e9 b0 00 00 00       	jmp    c0021ce6 <int_common_stub>

c0021c36 <isr17>:
c0021c36:	fa                   	cli    
c0021c37:	6a 00                	push   0x0
c0021c39:	6a 11                	push   0x11
c0021c3b:	e9 a6 00 00 00       	jmp    c0021ce6 <int_common_stub>

c0021c40 <isr18>:
c0021c40:	fa                   	cli    
c0021c41:	6a 00                	push   0x0
c0021c43:	6a 12                	push   0x12
c0021c45:	e9 9c 00 00 00       	jmp    c0021ce6 <int_common_stub>

c0021c4a <irq3>:
c0021c4a:	fa                   	cli    
c0021c4b:	6a 00                	push   0x0
c0021c4d:	6a 23                	push   0x23
c0021c4f:	e9 92 00 00 00       	jmp    c0021ce6 <int_common_stub>

c0021c54 <irq4>:
c0021c54:	fa                   	cli    
c0021c55:	6a 00                	push   0x0
c0021c57:	6a 24                	push   0x24
c0021c59:	e9 88 00 00 00       	jmp    c0021ce6 <int_common_stub>

c0021c5e <irq5>:
c0021c5e:	fa                   	cli    
c0021c5f:	6a 00                	push   0x0
c0021c61:	6a 25                	push   0x25
c0021c63:	e9 7e 00 00 00       	jmp    c0021ce6 <int_common_stub>

c0021c68 <irq6>:
c0021c68:	fa                   	cli    
c0021c69:	6a 00                	push   0x0
c0021c6b:	6a 26                	push   0x26
c0021c6d:	e9 74 00 00 00       	jmp    c0021ce6 <int_common_stub>

c0021c72 <irq7>:
c0021c72:	fa                   	cli    
c0021c73:	6a 00                	push   0x0
c0021c75:	6a 27                	push   0x27
c0021c77:	e9 6a 00 00 00       	jmp    c0021ce6 <int_common_stub>

c0021c7c <irq8>:
c0021c7c:	fa                   	cli    
c0021c7d:	6a 00                	push   0x0
c0021c7f:	6a 28                	push   0x28
c0021c81:	e9 60 00 00 00       	jmp    c0021ce6 <int_common_stub>

c0021c86 <irq9>:
c0021c86:	fa                   	cli    
c0021c87:	6a 00                	push   0x0
c0021c89:	6a 29                	push   0x29
c0021c8b:	e9 56 00 00 00       	jmp    c0021ce6 <int_common_stub>

c0021c90 <irq10>:
c0021c90:	fa                   	cli    
c0021c91:	6a 00                	push   0x0
c0021c93:	6a 2a                	push   0x2a
c0021c95:	e9 4c 00 00 00       	jmp    c0021ce6 <int_common_stub>

c0021c9a <irq11>:
c0021c9a:	fa                   	cli    
c0021c9b:	6a 00                	push   0x0
c0021c9d:	6a 2b                	push   0x2b
c0021c9f:	e9 42 00 00 00       	jmp    c0021ce6 <int_common_stub>

c0021ca4 <irq12>:
c0021ca4:	fa                   	cli    
c0021ca5:	6a 00                	push   0x0
c0021ca7:	6a 2c                	push   0x2c
c0021ca9:	e9 38 00 00 00       	jmp    c0021ce6 <int_common_stub>

c0021cae <irq13>:
c0021cae:	fa                   	cli    
c0021caf:	6a 00                	push   0x0
c0021cb1:	6a 2d                	push   0x2d
c0021cb3:	e9 2e 00 00 00       	jmp    c0021ce6 <int_common_stub>

c0021cb8 <irq14>:
c0021cb8:	fa                   	cli    
c0021cb9:	6a 00                	push   0x0
c0021cbb:	6a 2e                	push   0x2e
c0021cbd:	e9 24 00 00 00       	jmp    c0021ce6 <int_common_stub>

c0021cc2 <irq15>:
c0021cc2:	fa                   	cli    
c0021cc3:	6a 00                	push   0x0
c0021cc5:	6a 2f                	push   0x2f
c0021cc7:	e9 1a 00 00 00       	jmp    c0021ce6 <int_common_stub>

c0021ccc <irq1>:
c0021ccc:	fa                   	cli    
c0021ccd:	6a 00                	push   0x0
c0021ccf:	6a 21                	push   0x21
c0021cd1:	eb 13                	jmp    c0021ce6 <int_common_stub>

c0021cd3 <irq2>:
c0021cd3:	fa                   	cli    
c0021cd4:	6a 00                	push   0x0
c0021cd6:	6a 22                	push   0x22
c0021cd8:	eb 0c                	jmp    c0021ce6 <int_common_stub>

c0021cda <isr96>:
c0021cda:	6a 00                	push   0x0
c0021cdc:	6a 60                	push   0x60
c0021cde:	fb                   	sti    
c0021cdf:	eb 05                	jmp    c0021ce6 <int_common_stub>

c0021ce1 <irq0>:
c0021ce1:	fa                   	cli    
c0021ce2:	6a 00                	push   0x0
c0021ce4:	6a 20                	push   0x20

c0021ce6 <int_common_stub>:
c0021ce6:	60                   	pusha  
c0021ce7:	1e                   	push   ds
c0021ce8:	06                   	push   es
c0021ce9:	0f a0                	push   fs
c0021ceb:	0f a8                	push   gs
c0021ced:	66 b8 10 00          	mov    ax,0x10
c0021cf1:	66 8e d8             	mov    ds,ax
c0021cf4:	66 8e c0             	mov    es,ax
c0021cf7:	66 8e e0             	mov    fs,ax
c0021cfa:	66 8e e8             	mov    gs,ax
c0021cfd:	54                   	push   esp
c0021cfe:	fc                   	cld    
c0021cff:	e8 02 95 ff ff       	call   c001b206 <int_handler>
c0021d04:	81 c4 04 00 00 00    	add    esp,0x4
c0021d0a:	e8 5c f6 fe ff       	call   c001136b <KiCheckSignalZ>
c0021d0f:	85 c0                	test   eax,eax
c0021d11:	75 0e                	jne    c0021d21 <doSignals>
c0021d13:	0f a9                	pop    gs
c0021d15:	0f a1                	pop    fs
c0021d17:	07                   	pop    es
c0021d18:	1f                   	pop    ds
c0021d19:	61                   	popa   
c0021d1a:	81 c4 08 00 00 00    	add    esp,0x8
c0021d20:	cf                   	iret   

c0021d21 <doSignals>:
c0021d21:	0f a9                	pop    gs
c0021d23:	0f a1                	pop    fs
c0021d25:	07                   	pop    es
c0021d26:	1f                   	pop    ds
c0021d27:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c0021d2c:	61                   	popa   
c0021d2d:	53                   	push   ebx
c0021d2e:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c0021d34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0021d37:	5b                   	pop    ebx
c0021d38:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c0021d3d:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c0021d40:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c0021d43:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0021d46:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c0021d49:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c0021d4c:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c0021d4f:	81 c4 08 00 00 00    	add    esp,0x8
c0021d55:	5e                   	pop    esi
c0021d56:	5b                   	pop    ebx
c0021d57:	59                   	pop    ecx
c0021d58:	5a                   	pop    edx
c0021d59:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c0021d5c:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c0021d5f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0021d62:	52                   	push   edx
c0021d63:	51                   	push   ecx
c0021d64:	53                   	push   ebx
c0021d65:	56                   	push   esi
c0021d66:	81 ec 08 00 00 00    	sub    esp,0x8
c0021d6c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c0021d6f:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0021d72:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c0021d75:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021d78:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021d7b:	60                   	pusha  
c0021d7c:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c0021d82:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0021d85:	89 e3                	mov    ebx,esp
c0021d87:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c0021d8a:	52                   	push   edx
c0021d8b:	68 ab 1d 02 c0       	push   0xc0021dab
c0021d90:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c0021d93:	89 dc                	mov    esp,ebx
c0021d95:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0021d98:	68 23 00 00 00       	push   0x23
c0021d9d:	51                   	push   ecx
c0021d9e:	68 02 02 00 00       	push   0x202
c0021da3:	68 1b 00 00 00       	push   0x1b
c0021da8:	ff 36                	push   DWORD PTR [esi]
c0021daa:	cf                   	iret   

c0021dab <finishSignal>:
c0021dab:	cd 0f                	int    0xf

c0021dad <finishSignal2>:
c0021dad:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c0021db3:	e8 3f f6 fe ff       	call   c00113f7 <KiFinishSignalZ>
c0021db8:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c0021dbe:	68 23 00 00 00       	push   0x23
c0021dc3:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0021dc6:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0021dc9:	68 1b 00 00 00       	push   0x1b
c0021dce:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c0021dd1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021dd4:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0021dd7:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0021dda:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0021ddd:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c0021de0:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0021de3:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c0021de6:	cf                   	iret   
c0021de7:	90                   	nop

c0021de8 <irq16>:
c0021de8:	fa                   	cli    
c0021de9:	6a 00                	push   0x0
c0021deb:	6a 30                	push   0x30
c0021ded:	e9 f4 fe ff ff       	jmp    c0021ce6 <int_common_stub>

c0021df2 <irq17>:
c0021df2:	fa                   	cli    
c0021df3:	6a 00                	push   0x0
c0021df5:	6a 31                	push   0x31
c0021df7:	e9 ea fe ff ff       	jmp    c0021ce6 <int_common_stub>

c0021dfc <irq18>:
c0021dfc:	fa                   	cli    
c0021dfd:	6a 00                	push   0x0
c0021dff:	6a 32                	push   0x32
c0021e01:	e9 e0 fe ff ff       	jmp    c0021ce6 <int_common_stub>

c0021e06 <irq19>:
c0021e06:	fa                   	cli    
c0021e07:	6a 00                	push   0x0
c0021e09:	6a 33                	push   0x33
c0021e0b:	e9 d6 fe ff ff       	jmp    c0021ce6 <int_common_stub>

c0021e10 <irq20>:
c0021e10:	fa                   	cli    
c0021e11:	6a 00                	push   0x0
c0021e13:	6a 34                	push   0x34
c0021e15:	e9 cc fe ff ff       	jmp    c0021ce6 <int_common_stub>

c0021e1a <irq21>:
c0021e1a:	fa                   	cli    
c0021e1b:	6a 00                	push   0x0
c0021e1d:	6a 35                	push   0x35
c0021e1f:	e9 c2 fe ff ff       	jmp    c0021ce6 <int_common_stub>

c0021e24 <irq22>:
c0021e24:	fa                   	cli    
c0021e25:	6a 00                	push   0x0
c0021e27:	6a 36                	push   0x36
c0021e29:	e9 b8 fe ff ff       	jmp    c0021ce6 <int_common_stub>

c0021e2e <irq23>:
c0021e2e:	fa                   	cli    
c0021e2f:	6a 00                	push   0x0
c0021e31:	6a 37                	push   0x37
c0021e33:	e9 ae fe ff ff       	jmp    c0021ce6 <int_common_stub>
c0021e38:	66 90                	xchg   ax,ax
c0021e3a:	66 90                	xchg   ax,ax
c0021e3c:	66 90                	xchg   ax,ax
c0021e3e:	66 90                	xchg   ax,ax

c0021e40 <i386GetRDRAND>:
c0021e40:	b9 64 00 00 00       	mov    ecx,0x64

c0021e45 <retry>:
c0021e45:	0f c7 f0             	rdrand eax
c0021e48:	72 05                	jb     c0021e4f <retry.done>
c0021e4a:	e2 f9                	loop   c0021e45 <retry>

c0021e4c <retry.fail>:
c0021e4c:	31 c0                	xor    eax,eax
c0021e4e:	c3                   	ret    

c0021e4f <retry.done>:
c0021e4f:	c3                   	ret    

c0021e50 <sseDetect>:
c0021e50:	b8 01 00 00 00       	mov    eax,0x1
c0021e55:	0f a2                	cpuid  
c0021e57:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0021e5d:	74 06                	je     c0021e65 <sseDetect.noSSE>
c0021e5f:	b8 01 00 00 00       	mov    eax,0x1
c0021e64:	c3                   	ret    

c0021e65 <sseDetect.noSSE>:
c0021e65:	31 c0                	xor    eax,eax
c0021e67:	c3                   	ret    

c0021e68 <sseSave>:
c0021e68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e6c:	0f ae 00             	fxsave [eax]
c0021e6f:	c3                   	ret    

c0021e70 <sseLoad>:
c0021e70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e74:	0f ae 08             	fxrstor [eax]
c0021e77:	c3                   	ret    

c0021e78 <sseInit>:
c0021e78:	e8 48 00 00 00       	call   c0021ec5 <x87Init>
c0021e7d:	0f 20 e0             	mov    eax,cr4
c0021e80:	66 0d 00 06          	or     ax,0x600
c0021e84:	0f 22 e0             	mov    cr4,eax
c0021e87:	c3                   	ret    

c0021e88 <sseClose>:
c0021e88:	c3                   	ret    
c0021e89:	66 90                	xchg   ax,ax
c0021e8b:	66 90                	xchg   ax,ax
c0021e8d:	66 90                	xchg   ax,ax
c0021e8f:	90                   	nop

c0021e90 <value_37F>:
c0021e90:	7f 03                	jg     c0021e95 <value_37A+0x1>

c0021e92 <value_37E>:
c0021e92:	7e 03                	jle    c0021e97 <x87Detect+0x1>

c0021e94 <value_37A>:
c0021e94:	7a 03                	jp     c0021e99 <x87Detect+0x3>

c0021e96 <x87Detect>:
c0021e96:	53                   	push   ebx
c0021e97:	51                   	push   ecx
c0021e98:	52                   	push   edx
c0021e99:	b8 01 00 00 00       	mov    eax,0x1
c0021e9e:	0f a2                	cpuid  
c0021ea0:	f7 c2 01 00 00 00    	test   edx,0x1
c0021ea6:	74 06                	je     c0021eae <x87Detect.nox87>
c0021ea8:	b8 01 00 00 00       	mov    eax,0x1
c0021ead:	c3                   	ret    

c0021eae <x87Detect.nox87>:
c0021eae:	b8 00 00 00 00       	mov    eax,0x0
c0021eb3:	5a                   	pop    edx
c0021eb4:	59                   	pop    ecx
c0021eb5:	5b                   	pop    ebx
c0021eb6:	c3                   	ret    

c0021eb7 <x87Save>:
c0021eb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ebb:	dd 30                	fnsave [eax]
c0021ebd:	c3                   	ret    

c0021ebe <x87Load>:
c0021ebe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ec2:	dd 20                	frstor [eax]
c0021ec4:	c3                   	ret    

c0021ec5 <x87Init>:
c0021ec5:	0f 20 c0             	mov    eax,cr0
c0021ec8:	66 25 fb ff          	and    ax,0xfffb
c0021ecc:	66 0d 22 00          	or     ax,0x22
c0021ed0:	0f 22 c0             	mov    cr0,eax
c0021ed3:	db e3                	fninit 
c0021ed5:	0f 06                	clts   
c0021ed7:	d9 2d 94 1e 02 c0    	fldcw  WORD PTR ds:0xc0021e94
c0021edd:	c3                   	ret    

c0021ede <x87Close>:
c0021ede:	c3                   	ret    
c0021edf:	90                   	nop

c0021ee0 <__do_global_ctors_aux>:
c0021ee0:	a1 08 73 02 c0       	mov    eax,ds:0xc0027308
c0021ee5:	83 f8 ff             	cmp    eax,0xffffffff
c0021ee8:	74 1a                	je     c0021f04 <__do_global_ctors_aux+0x24>
c0021eea:	55                   	push   ebp
c0021eeb:	89 e5                	mov    ebp,esp
c0021eed:	53                   	push   ebx
c0021eee:	52                   	push   edx
c0021eef:	bb 08 73 02 c0       	mov    ebx,0xc0027308
c0021ef4:	ff d0                	call   eax
c0021ef6:	83 eb 04             	sub    ebx,0x4
c0021ef9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021efb:	83 f8 ff             	cmp    eax,0xffffffff
c0021efe:	75 f4                	jne    c0021ef4 <__do_global_ctors_aux+0x14>
c0021f00:	58                   	pop    eax
c0021f01:	5b                   	pop    ebx
c0021f02:	5d                   	pop    ebp
c0021f03:	c3                   	ret    
c0021f04:	c3                   	ret    
c0021f05:	66 90                	xchg   ax,ax
c0021f07:	90                   	nop

c0021f08 <__divdi3>:
c0021f08:	55                   	push   ebp
c0021f09:	57                   	push   edi
c0021f0a:	56                   	push   esi
c0021f0b:	53                   	push   ebx
c0021f0c:	83 ec 1c             	sub    esp,0x1c
c0021f0f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0021f13:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021f17:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021f1a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0021f1e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021f22:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021f26:	85 db                	test   ebx,ebx
c0021f28:	0f 88 8e 00 00 00    	js     c0021fbc <__divdi3+0xb4>
c0021f2e:	89 dd                	mov    ebp,ebx
c0021f30:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021f38:	89 d3                	mov    ebx,edx
c0021f3a:	85 d2                	test   edx,edx
c0021f3c:	79 0d                	jns    c0021f4b <__divdi3+0x43>
c0021f3e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0021f42:	f7 d8                	neg    eax
c0021f44:	83 d2 00             	adc    edx,0x0
c0021f47:	f7 da                	neg    edx
c0021f49:	89 d3                	mov    ebx,edx
c0021f4b:	89 c7                	mov    edi,eax
c0021f4d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021f50:	85 db                	test   ebx,ebx
c0021f52:	75 48                	jne    c0021f9c <__divdi3+0x94>
c0021f54:	39 ef                	cmp    edi,ebp
c0021f56:	76 24                	jbe    c0021f7c <__divdi3+0x74>
c0021f58:	89 ea                	mov    edx,ebp
c0021f5a:	f7 f7                	div    edi
c0021f5c:	89 c1                	mov    ecx,eax
c0021f5e:	31 f6                	xor    esi,esi
c0021f60:	89 c8                	mov    eax,ecx
c0021f62:	89 f2                	mov    edx,esi
c0021f64:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021f68:	85 c9                	test   ecx,ecx
c0021f6a:	74 07                	je     c0021f73 <__divdi3+0x6b>
c0021f6c:	f7 d8                	neg    eax
c0021f6e:	83 d2 00             	adc    edx,0x0
c0021f71:	f7 da                	neg    edx
c0021f73:	83 c4 1c             	add    esp,0x1c
c0021f76:	5b                   	pop    ebx
c0021f77:	5e                   	pop    esi
c0021f78:	5f                   	pop    edi
c0021f79:	5d                   	pop    ebp
c0021f7a:	c3                   	ret    
c0021f7b:	90                   	nop
c0021f7c:	85 ff                	test   edi,edi
c0021f7e:	75 0b                	jne    c0021f8b <__divdi3+0x83>
c0021f80:	b8 01 00 00 00       	mov    eax,0x1
c0021f85:	31 d2                	xor    edx,edx
c0021f87:	f7 f3                	div    ebx
c0021f89:	89 c7                	mov    edi,eax
c0021f8b:	31 d2                	xor    edx,edx
c0021f8d:	89 e8                	mov    eax,ebp
c0021f8f:	f7 f7                	div    edi
c0021f91:	89 c6                	mov    esi,eax
c0021f93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021f96:	f7 f7                	div    edi
c0021f98:	89 c1                	mov    ecx,eax
c0021f9a:	eb c4                	jmp    c0021f60 <__divdi3+0x58>
c0021f9c:	39 eb                	cmp    ebx,ebp
c0021f9e:	77 3c                	ja     c0021fdc <__divdi3+0xd4>
c0021fa0:	0f bd f3             	bsr    esi,ebx
c0021fa3:	83 f6 1f             	xor    esi,0x1f
c0021fa6:	75 40                	jne    c0021fe8 <__divdi3+0xe0>
c0021fa8:	39 eb                	cmp    ebx,ebp
c0021faa:	72 09                	jb     c0021fb5 <__divdi3+0xad>
c0021fac:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021faf:	0f 87 97 00 00 00    	ja     c002204c <__divdi3+0x144>
c0021fb5:	b9 01 00 00 00       	mov    ecx,0x1
c0021fba:	eb a4                	jmp    c0021f60 <__divdi3+0x58>
c0021fbc:	f7 d9                	neg    ecx
c0021fbe:	83 d3 00             	adc    ebx,0x0
c0021fc1:	f7 db                	neg    ebx
c0021fc3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021fc6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0021fca:	89 dd                	mov    ebp,ebx
c0021fcc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0021fd4:	e9 5f ff ff ff       	jmp    c0021f38 <__divdi3+0x30>
c0021fd9:	8d 76 00             	lea    esi,[esi+0x0]
c0021fdc:	31 f6                	xor    esi,esi
c0021fde:	31 c9                	xor    ecx,ecx
c0021fe0:	e9 7b ff ff ff       	jmp    c0021f60 <__divdi3+0x58>
c0021fe5:	8d 76 00             	lea    esi,[esi+0x0]
c0021fe8:	b8 20 00 00 00       	mov    eax,0x20
c0021fed:	29 f0                	sub    eax,esi
c0021fef:	89 f1                	mov    ecx,esi
c0021ff1:	d3 e3                	shl    ebx,cl
c0021ff3:	89 fa                	mov    edx,edi
c0021ff5:	88 c1                	mov    cl,al
c0021ff7:	d3 ea                	shr    edx,cl
c0021ff9:	09 da                	or     edx,ebx
c0021ffb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021fff:	89 f1                	mov    ecx,esi
c0022001:	d3 e7                	shl    edi,cl
c0022003:	89 eb                	mov    ebx,ebp
c0022005:	88 c1                	mov    cl,al
c0022007:	d3 eb                	shr    ebx,cl
c0022009:	89 f1                	mov    ecx,esi
c002200b:	d3 e5                	shl    ebp,cl
c002200d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0022010:	88 c1                	mov    cl,al
c0022012:	d3 ea                	shr    edx,cl
c0022014:	09 d5                	or     ebp,edx
c0022016:	89 e8                	mov    eax,ebp
c0022018:	89 da                	mov    edx,ebx
c002201a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002201e:	89 d3                	mov    ebx,edx
c0022020:	89 c5                	mov    ebp,eax
c0022022:	f7 e7                	mul    edi
c0022024:	39 d3                	cmp    ebx,edx
c0022026:	72 18                	jb     c0022040 <__divdi3+0x138>
c0022028:	74 0a                	je     c0022034 <__divdi3+0x12c>
c002202a:	89 e9                	mov    ecx,ebp
c002202c:	31 f6                	xor    esi,esi
c002202e:	e9 2d ff ff ff       	jmp    c0021f60 <__divdi3+0x58>
c0022033:	90                   	nop
c0022034:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022037:	89 f1                	mov    ecx,esi
c0022039:	d3 e7                	shl    edi,cl
c002203b:	39 c7                	cmp    edi,eax
c002203d:	73 eb                	jae    c002202a <__divdi3+0x122>
c002203f:	90                   	nop
c0022040:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0022043:	31 f6                	xor    esi,esi
c0022045:	e9 16 ff ff ff       	jmp    c0021f60 <__divdi3+0x58>
c002204a:	66 90                	xchg   ax,ax
c002204c:	31 c9                	xor    ecx,ecx
c002204e:	e9 0d ff ff ff       	jmp    c0021f60 <__divdi3+0x58>
c0022053:	90                   	nop

c0022054 <__moddi3>:
c0022054:	55                   	push   ebp
c0022055:	57                   	push   edi
c0022056:	56                   	push   esi
c0022057:	53                   	push   ebx
c0022058:	83 ec 2c             	sub    esp,0x2c
c002205b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002205f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0022063:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022067:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002206b:	85 db                	test   ebx,ebx
c002206d:	0f 88 85 00 00 00    	js     c00220f8 <__moddi3+0xa4>
c0022073:	89 de                	mov    esi,ebx
c0022075:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002207d:	89 d7                	mov    edi,edx
c002207f:	85 d2                	test   edx,edx
c0022081:	79 09                	jns    c002208c <__moddi3+0x38>
c0022083:	f7 d8                	neg    eax
c0022085:	83 d2 00             	adc    edx,0x0
c0022088:	f7 da                	neg    edx
c002208a:	89 d7                	mov    edi,edx
c002208c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022090:	89 cd                	mov    ebp,ecx
c0022092:	85 ff                	test   edi,edi
c0022094:	75 52                	jne    c00220e8 <__moddi3+0x94>
c0022096:	89 c3                	mov    ebx,eax
c0022098:	39 f0                	cmp    eax,esi
c002209a:	76 24                	jbe    c00220c0 <__moddi3+0x6c>
c002209c:	89 c8                	mov    eax,ecx
c002209e:	89 f2                	mov    edx,esi
c00220a0:	f7 f3                	div    ebx
c00220a2:	89 d6                	mov    esi,edx
c00220a4:	89 f0                	mov    eax,esi
c00220a6:	31 d2                	xor    edx,edx
c00220a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00220ac:	85 c9                	test   ecx,ecx
c00220ae:	74 07                	je     c00220b7 <__moddi3+0x63>
c00220b0:	f7 d8                	neg    eax
c00220b2:	83 d2 00             	adc    edx,0x0
c00220b5:	f7 da                	neg    edx
c00220b7:	83 c4 2c             	add    esp,0x2c
c00220ba:	5b                   	pop    ebx
c00220bb:	5e                   	pop    esi
c00220bc:	5f                   	pop    edi
c00220bd:	5d                   	pop    ebp
c00220be:	c3                   	ret    
c00220bf:	90                   	nop
c00220c0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00220c4:	85 db                	test   ebx,ebx
c00220c6:	75 0d                	jne    c00220d5 <__moddi3+0x81>
c00220c8:	b8 01 00 00 00       	mov    eax,0x1
c00220cd:	31 d2                	xor    edx,edx
c00220cf:	f7 f7                	div    edi
c00220d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00220d5:	89 f0                	mov    eax,esi
c00220d7:	31 d2                	xor    edx,edx
c00220d9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00220dd:	f7 f7                	div    edi
c00220df:	89 e8                	mov    eax,ebp
c00220e1:	f7 f7                	div    edi
c00220e3:	89 d6                	mov    esi,edx
c00220e5:	eb bd                	jmp    c00220a4 <__moddi3+0x50>
c00220e7:	90                   	nop
c00220e8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00220ec:	39 f7                	cmp    edi,esi
c00220ee:	76 20                	jbe    c0022110 <__moddi3+0xbc>
c00220f0:	89 c8                	mov    eax,ecx
c00220f2:	89 f2                	mov    edx,esi
c00220f4:	eb b2                	jmp    c00220a8 <__moddi3+0x54>
c00220f6:	66 90                	xchg   ax,ax
c00220f8:	f7 d9                	neg    ecx
c00220fa:	83 d3 00             	adc    ebx,0x0
c00220fd:	f7 db                	neg    ebx
c00220ff:	89 de                	mov    esi,ebx
c0022101:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0022109:	e9 6f ff ff ff       	jmp    c002207d <__moddi3+0x29>
c002210e:	66 90                	xchg   ax,ax
c0022110:	0f bd c7             	bsr    eax,edi
c0022113:	83 f0 1f             	xor    eax,0x1f
c0022116:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002211a:	75 24                	jne    c0022140 <__moddi3+0xec>
c002211c:	39 f7                	cmp    edi,esi
c002211e:	72 06                	jb     c0022126 <__moddi3+0xd2>
c0022120:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0022124:	77 0c                	ja     c0022132 <__moddi3+0xde>
c0022126:	89 e9                	mov    ecx,ebp
c0022128:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002212c:	19 fe                	sbb    esi,edi
c002212e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022132:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022136:	89 f2                	mov    edx,esi
c0022138:	e9 6b ff ff ff       	jmp    c00220a8 <__moddi3+0x54>
c002213d:	8d 76 00             	lea    esi,[esi+0x0]
c0022140:	b8 20 00 00 00       	mov    eax,0x20
c0022145:	89 c2                	mov    edx,eax
c0022147:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002214b:	29 da                	sub    edx,ebx
c002214d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022151:	88 d9                	mov    cl,bl
c0022153:	d3 e7                	shl    edi,cl
c0022155:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022159:	88 d1                	mov    cl,dl
c002215b:	d3 e8                	shr    eax,cl
c002215d:	09 c7                	or     edi,eax
c002215f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0022163:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022167:	89 d8                	mov    eax,ebx
c0022169:	88 d9                	mov    cl,bl
c002216b:	d3 e7                	shl    edi,cl
c002216d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022171:	89 f3                	mov    ebx,esi
c0022173:	88 d1                	mov    cl,dl
c0022175:	d3 eb                	shr    ebx,cl
c0022177:	89 c7                	mov    edi,eax
c0022179:	88 c1                	mov    cl,al
c002217b:	d3 e6                	shl    esi,cl
c002217d:	89 e8                	mov    eax,ebp
c002217f:	88 d1                	mov    cl,dl
c0022181:	d3 e8                	shr    eax,cl
c0022183:	09 f0                	or     eax,esi
c0022185:	89 f9                	mov    ecx,edi
c0022187:	d3 e5                	shl    ebp,cl
c0022189:	89 da                	mov    edx,ebx
c002218b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002218f:	89 d3                	mov    ebx,edx
c0022191:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022195:	89 c6                	mov    esi,eax
c0022197:	89 d1                	mov    ecx,edx
c0022199:	39 d3                	cmp    ebx,edx
c002219b:	72 27                	jb     c00221c4 <__moddi3+0x170>
c002219d:	74 21                	je     c00221c0 <__moddi3+0x16c>
c002219f:	29 f5                	sub    ebp,esi
c00221a1:	19 cb                	sbb    ebx,ecx
c00221a3:	89 de                	mov    esi,ebx
c00221a5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00221a9:	d3 e6                	shl    esi,cl
c00221ab:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00221af:	89 f9                	mov    ecx,edi
c00221b1:	d3 ed                	shr    ebp,cl
c00221b3:	09 ee                	or     esi,ebp
c00221b5:	89 f0                	mov    eax,esi
c00221b7:	d3 eb                	shr    ebx,cl
c00221b9:	89 da                	mov    edx,ebx
c00221bb:	e9 e8 fe ff ff       	jmp    c00220a8 <__moddi3+0x54>
c00221c0:	39 c5                	cmp    ebp,eax
c00221c2:	73 db                	jae    c002219f <__moddi3+0x14b>
c00221c4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00221c8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00221cc:	89 d1                	mov    ecx,edx
c00221ce:	89 c6                	mov    esi,eax
c00221d0:	eb cd                	jmp    c002219f <__moddi3+0x14b>
c00221d2:	66 90                	xchg   ax,ax

c00221d4 <__udivdi3>:
c00221d4:	55                   	push   ebp
c00221d5:	57                   	push   edi
c00221d6:	56                   	push   esi
c00221d7:	53                   	push   ebx
c00221d8:	83 ec 1c             	sub    esp,0x1c
c00221db:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00221df:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00221e3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00221e7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00221eb:	85 d2                	test   edx,edx
c00221ed:	75 41                	jne    c0022230 <__udivdi3+0x5c>
c00221ef:	39 f7                	cmp    edi,esi
c00221f1:	76 15                	jbe    c0022208 <__udivdi3+0x34>
c00221f3:	89 e8                	mov    eax,ebp
c00221f5:	89 f2                	mov    edx,esi
c00221f7:	f7 f7                	div    edi
c00221f9:	31 db                	xor    ebx,ebx
c00221fb:	89 da                	mov    edx,ebx
c00221fd:	83 c4 1c             	add    esp,0x1c
c0022200:	5b                   	pop    ebx
c0022201:	5e                   	pop    esi
c0022202:	5f                   	pop    edi
c0022203:	5d                   	pop    ebp
c0022204:	c3                   	ret    
c0022205:	8d 76 00             	lea    esi,[esi+0x0]
c0022208:	89 f9                	mov    ecx,edi
c002220a:	85 ff                	test   edi,edi
c002220c:	75 0b                	jne    c0022219 <__udivdi3+0x45>
c002220e:	b8 01 00 00 00       	mov    eax,0x1
c0022213:	31 d2                	xor    edx,edx
c0022215:	f7 f7                	div    edi
c0022217:	89 c1                	mov    ecx,eax
c0022219:	31 d2                	xor    edx,edx
c002221b:	89 f0                	mov    eax,esi
c002221d:	f7 f1                	div    ecx
c002221f:	89 c3                	mov    ebx,eax
c0022221:	89 e8                	mov    eax,ebp
c0022223:	f7 f1                	div    ecx
c0022225:	89 da                	mov    edx,ebx
c0022227:	83 c4 1c             	add    esp,0x1c
c002222a:	5b                   	pop    ebx
c002222b:	5e                   	pop    esi
c002222c:	5f                   	pop    edi
c002222d:	5d                   	pop    ebp
c002222e:	c3                   	ret    
c002222f:	90                   	nop
c0022230:	39 f2                	cmp    edx,esi
c0022232:	77 1c                	ja     c0022250 <__udivdi3+0x7c>
c0022234:	0f bd da             	bsr    ebx,edx
c0022237:	83 f3 1f             	xor    ebx,0x1f
c002223a:	75 24                	jne    c0022260 <__udivdi3+0x8c>
c002223c:	39 f2                	cmp    edx,esi
c002223e:	72 08                	jb     c0022248 <__udivdi3+0x74>
c0022240:	39 ef                	cmp    edi,ebp
c0022242:	0f 87 84 00 00 00    	ja     c00222cc <__udivdi3+0xf8>
c0022248:	b8 01 00 00 00       	mov    eax,0x1
c002224d:	eb ac                	jmp    c00221fb <__udivdi3+0x27>
c002224f:	90                   	nop
c0022250:	31 db                	xor    ebx,ebx
c0022252:	31 c0                	xor    eax,eax
c0022254:	89 da                	mov    edx,ebx
c0022256:	83 c4 1c             	add    esp,0x1c
c0022259:	5b                   	pop    ebx
c002225a:	5e                   	pop    esi
c002225b:	5f                   	pop    edi
c002225c:	5d                   	pop    ebp
c002225d:	c3                   	ret    
c002225e:	66 90                	xchg   ax,ax
c0022260:	b8 20 00 00 00       	mov    eax,0x20
c0022265:	29 d8                	sub    eax,ebx
c0022267:	88 d9                	mov    cl,bl
c0022269:	d3 e2                	shl    edx,cl
c002226b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002226f:	89 fa                	mov    edx,edi
c0022271:	88 c1                	mov    cl,al
c0022273:	d3 ea                	shr    edx,cl
c0022275:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022279:	09 d1                	or     ecx,edx
c002227b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002227f:	88 d9                	mov    cl,bl
c0022281:	d3 e7                	shl    edi,cl
c0022283:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022287:	89 f7                	mov    edi,esi
c0022289:	88 c1                	mov    cl,al
c002228b:	d3 ef                	shr    edi,cl
c002228d:	88 d9                	mov    cl,bl
c002228f:	d3 e6                	shl    esi,cl
c0022291:	89 ea                	mov    edx,ebp
c0022293:	88 c1                	mov    cl,al
c0022295:	d3 ea                	shr    edx,cl
c0022297:	09 d6                	or     esi,edx
c0022299:	89 f0                	mov    eax,esi
c002229b:	89 fa                	mov    edx,edi
c002229d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00222a1:	89 d7                	mov    edi,edx
c00222a3:	89 c6                	mov    esi,eax
c00222a5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00222a9:	39 d7                	cmp    edi,edx
c00222ab:	72 13                	jb     c00222c0 <__udivdi3+0xec>
c00222ad:	74 09                	je     c00222b8 <__udivdi3+0xe4>
c00222af:	89 f0                	mov    eax,esi
c00222b1:	31 db                	xor    ebx,ebx
c00222b3:	e9 43 ff ff ff       	jmp    c00221fb <__udivdi3+0x27>
c00222b8:	88 d9                	mov    cl,bl
c00222ba:	d3 e5                	shl    ebp,cl
c00222bc:	39 c5                	cmp    ebp,eax
c00222be:	73 ef                	jae    c00222af <__udivdi3+0xdb>
c00222c0:	8d 46 ff             	lea    eax,[esi-0x1]
c00222c3:	31 db                	xor    ebx,ebx
c00222c5:	e9 31 ff ff ff       	jmp    c00221fb <__udivdi3+0x27>
c00222ca:	66 90                	xchg   ax,ax
c00222cc:	31 c0                	xor    eax,eax
c00222ce:	e9 28 ff ff ff       	jmp    c00221fb <__udivdi3+0x27>
c00222d3:	90                   	nop

c00222d4 <__umoddi3>:
c00222d4:	55                   	push   ebp
c00222d5:	57                   	push   edi
c00222d6:	56                   	push   esi
c00222d7:	53                   	push   ebx
c00222d8:	83 ec 1c             	sub    esp,0x1c
c00222db:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00222df:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00222e3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00222e7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00222eb:	89 da                	mov    edx,ebx
c00222ed:	85 c0                	test   eax,eax
c00222ef:	75 37                	jne    c0022328 <__umoddi3+0x54>
c00222f1:	39 df                	cmp    edi,ebx
c00222f3:	76 13                	jbe    c0022308 <__umoddi3+0x34>
c00222f5:	89 f0                	mov    eax,esi
c00222f7:	f7 f7                	div    edi
c00222f9:	89 d0                	mov    eax,edx
c00222fb:	31 d2                	xor    edx,edx
c00222fd:	83 c4 1c             	add    esp,0x1c
c0022300:	5b                   	pop    ebx
c0022301:	5e                   	pop    esi
c0022302:	5f                   	pop    edi
c0022303:	5d                   	pop    ebp
c0022304:	c3                   	ret    
c0022305:	8d 76 00             	lea    esi,[esi+0x0]
c0022308:	89 fd                	mov    ebp,edi
c002230a:	85 ff                	test   edi,edi
c002230c:	75 0b                	jne    c0022319 <__umoddi3+0x45>
c002230e:	b8 01 00 00 00       	mov    eax,0x1
c0022313:	31 d2                	xor    edx,edx
c0022315:	f7 f7                	div    edi
c0022317:	89 c5                	mov    ebp,eax
c0022319:	89 d8                	mov    eax,ebx
c002231b:	31 d2                	xor    edx,edx
c002231d:	f7 f5                	div    ebp
c002231f:	89 f0                	mov    eax,esi
c0022321:	f7 f5                	div    ebp
c0022323:	89 d0                	mov    eax,edx
c0022325:	eb d4                	jmp    c00222fb <__umoddi3+0x27>
c0022327:	90                   	nop
c0022328:	89 f1                	mov    ecx,esi
c002232a:	39 d8                	cmp    eax,ebx
c002232c:	76 0a                	jbe    c0022338 <__umoddi3+0x64>
c002232e:	89 f0                	mov    eax,esi
c0022330:	83 c4 1c             	add    esp,0x1c
c0022333:	5b                   	pop    ebx
c0022334:	5e                   	pop    esi
c0022335:	5f                   	pop    edi
c0022336:	5d                   	pop    ebp
c0022337:	c3                   	ret    
c0022338:	0f bd e8             	bsr    ebp,eax
c002233b:	83 f5 1f             	xor    ebp,0x1f
c002233e:	75 1c                	jne    c002235c <__umoddi3+0x88>
c0022340:	39 d8                	cmp    eax,ebx
c0022342:	72 04                	jb     c0022348 <__umoddi3+0x74>
c0022344:	39 f7                	cmp    edi,esi
c0022346:	77 08                	ja     c0022350 <__umoddi3+0x7c>
c0022348:	89 da                	mov    edx,ebx
c002234a:	29 fe                	sub    esi,edi
c002234c:	19 c2                	sbb    edx,eax
c002234e:	89 f1                	mov    ecx,esi
c0022350:	89 c8                	mov    eax,ecx
c0022352:	83 c4 1c             	add    esp,0x1c
c0022355:	5b                   	pop    ebx
c0022356:	5e                   	pop    esi
c0022357:	5f                   	pop    edi
c0022358:	5d                   	pop    ebp
c0022359:	c3                   	ret    
c002235a:	66 90                	xchg   ax,ax
c002235c:	ba 20 00 00 00       	mov    edx,0x20
c0022361:	29 ea                	sub    edx,ebp
c0022363:	89 e9                	mov    ecx,ebp
c0022365:	d3 e0                	shl    eax,cl
c0022367:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002236b:	89 f8                	mov    eax,edi
c002236d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022371:	88 d1                	mov    cl,dl
c0022373:	d3 e8                	shr    eax,cl
c0022375:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022379:	09 c1                	or     ecx,eax
c002237b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002237f:	89 e9                	mov    ecx,ebp
c0022381:	d3 e7                	shl    edi,cl
c0022383:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022387:	89 d8                	mov    eax,ebx
c0022389:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002238d:	88 d1                	mov    cl,dl
c002238f:	d3 e8                	shr    eax,cl
c0022391:	89 c7                	mov    edi,eax
c0022393:	89 e9                	mov    ecx,ebp
c0022395:	d3 e3                	shl    ebx,cl
c0022397:	89 f0                	mov    eax,esi
c0022399:	88 d1                	mov    cl,dl
c002239b:	d3 e8                	shr    eax,cl
c002239d:	09 d8                	or     eax,ebx
c002239f:	89 e9                	mov    ecx,ebp
c00223a1:	d3 e6                	shl    esi,cl
c00223a3:	89 f3                	mov    ebx,esi
c00223a5:	89 fa                	mov    edx,edi
c00223a7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00223ab:	89 d1                	mov    ecx,edx
c00223ad:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00223b1:	89 c6                	mov    esi,eax
c00223b3:	89 d7                	mov    edi,edx
c00223b5:	39 d1                	cmp    ecx,edx
c00223b7:	72 27                	jb     c00223e0 <__umoddi3+0x10c>
c00223b9:	74 21                	je     c00223dc <__umoddi3+0x108>
c00223bb:	89 ca                	mov    edx,ecx
c00223bd:	29 f3                	sub    ebx,esi
c00223bf:	19 fa                	sbb    edx,edi
c00223c1:	89 d0                	mov    eax,edx
c00223c3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00223c7:	d3 e0                	shl    eax,cl
c00223c9:	89 e9                	mov    ecx,ebp
c00223cb:	d3 eb                	shr    ebx,cl
c00223cd:	09 d8                	or     eax,ebx
c00223cf:	d3 ea                	shr    edx,cl
c00223d1:	83 c4 1c             	add    esp,0x1c
c00223d4:	5b                   	pop    ebx
c00223d5:	5e                   	pop    esi
c00223d6:	5f                   	pop    edi
c00223d7:	5d                   	pop    ebp
c00223d8:	c3                   	ret    
c00223d9:	8d 76 00             	lea    esi,[esi+0x0]
c00223dc:	39 c3                	cmp    ebx,eax
c00223de:	73 db                	jae    c00223bb <__umoddi3+0xe7>
c00223e0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00223e4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00223e8:	89 d7                	mov    edi,edx
c00223ea:	89 c6                	mov    esi,eax
c00223ec:	eb cd                	jmp    c00223bb <__umoddi3+0xe7>
c00223ee:	66 90                	xchg   ax,ax

c00223f0 <acos>:
c00223f0:	83 ec 4c             	sub    esp,0x4c
c00223f3:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c00223f7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00223fb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00223ff:	89 d0                	mov    eax,edx
c0022401:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0022406:	3d ff ff ef 3f       	cmp    eax,0x3fefffff
c002240b:	7e 23                	jle    c0022430 <acos+0x40>
c002240d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022411:	2d 00 00 f0 3f       	sub    eax,0x3ff00000
c0022416:	09 c8                	or     eax,ecx
c0022418:	0f 85 32 01 00 00    	jne    c0022550 <acos+0x160>
c002241e:	85 d2                	test   edx,edx
c0022420:	0f 8e 4a 01 00 00    	jle    c0022570 <acos+0x180>
c0022426:	d9 ee                	fldz   
c0022428:	83 c4 4c             	add    esp,0x4c
c002242b:	c3                   	ret    
c002242c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0022430:	3d ff ff df 3f       	cmp    eax,0x3fdfffff
c0022435:	7f 29                	jg     c0022460 <acos+0x70>
c0022437:	3d 00 00 60 3c       	cmp    eax,0x3c600000
c002243c:	0f 8f 4e 01 00 00    	jg     c0022590 <acos+0x1a0>
c0022442:	dd 05 08 c8 02 c0    	fld    QWORD PTR ds:0xc002c808
c0022448:	dc 05 28 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae28
c002244e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022452:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022456:	83 c4 4c             	add    esp,0x4c
c0022459:	c3                   	ret    
c002245a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0022460:	85 d2                	test   edx,edx
c0022462:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022466:	0f 88 d4 01 00 00    	js     c0022640 <acos+0x250>
c002246c:	d9 e8                	fld1   
c002246e:	de e1                	fsubrp st(1),st
c0022470:	d8 0d 84 ae 02 c0    	fmul   DWORD PTR ds:0xc002ae84
c0022476:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002247a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002247e:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c0022482:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022485:	e8 36 27 00 00       	call   c0024bc0 <sqrt>
c002248a:	31 c0                	xor    eax,eax
c002248c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022490:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0022494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022498:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c002249c:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00224a0:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00224a4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00224a8:	d9 c1                	fld    st(1)
c00224aa:	dc 0d 30 ae 02 c0    	fmul   QWORD PTR ds:0xc002ae30
c00224b0:	dc 05 38 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae38
c00224b6:	d8 ca                	fmul   st,st(2)
c00224b8:	dc 25 40 ae 02 c0    	fsub   QWORD PTR ds:0xc002ae40
c00224be:	d8 ca                	fmul   st,st(2)
c00224c0:	dc 05 48 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae48
c00224c6:	d8 ca                	fmul   st,st(2)
c00224c8:	dc 25 50 ae 02 c0    	fsub   QWORD PTR ds:0xc002ae50
c00224ce:	d8 ca                	fmul   st,st(2)
c00224d0:	dc 05 58 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae58
c00224d6:	d8 ca                	fmul   st,st(2)
c00224d8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00224dc:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00224e0:	d9 c2                	fld    st(2)
c00224e2:	dc 0d 60 ae 02 c0    	fmul   QWORD PTR ds:0xc002ae60
c00224e8:	dc 25 68 ae 02 c0    	fsub   QWORD PTR ds:0xc002ae68
c00224ee:	d8 cb                	fmul   st,st(3)
c00224f0:	dc 05 70 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae70
c00224f6:	d8 cb                	fmul   st,st(3)
c00224f8:	dc 25 78 ae 02 c0    	fsub   QWORD PTR ds:0xc002ae78
c00224fe:	d8 cb                	fmul   st,st(3)
c0022500:	d9 e8                	fld1   
c0022502:	de c1                	faddp  st(1),st
c0022504:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022508:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002250c:	de f9                	fdivp  st(1),st
c002250e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022512:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022516:	d8 c9                	fmul   st,st(1)
c0022518:	d9 c3                	fld    st(3)
c002251a:	d8 cc                	fmul   st,st(4)
c002251c:	de eb                	fsubp  st(3),st
c002251e:	d9 c9                	fxch   st(1)
c0022520:	d8 c3                	fadd   st,st(3)
c0022522:	de fa                	fdivp  st(2),st
c0022524:	d9 c9                	fxch   st(1)
c0022526:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002252a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002252e:	de c1                	faddp  st(1),st
c0022530:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022534:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022538:	de c1                	faddp  st(1),st
c002253a:	d8 c0                	fadd   st,st(0)
c002253c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022540:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022544:	83 c4 4c             	add    esp,0x4c
c0022547:	c3                   	ret    
c0022548:	90                   	nop
c0022549:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0022550:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022554:	d8 e0                	fsub   st,st(0)
c0022556:	d8 f0                	fdiv   st,st(0)
c0022558:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002255c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022560:	83 c4 4c             	add    esp,0x4c
c0022563:	c3                   	ret    
c0022564:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002256a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0022570:	dd 05 08 c8 02 c0    	fld    QWORD PTR ds:0xc002c808
c0022576:	d8 c0                	fadd   st,st(0)
c0022578:	dc 05 20 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae20
c002257e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022582:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022586:	83 c4 4c             	add    esp,0x4c
c0022589:	c3                   	ret    
c002258a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0022590:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022594:	d9 c0                	fld    st(0)
c0022596:	d8 c9                	fmul   st,st(1)
c0022598:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002259c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00225a0:	dd 05 08 c8 02 c0    	fld    QWORD PTR ds:0xc002c808
c00225a6:	d9 c1                	fld    st(1)
c00225a8:	dc 0d 30 ae 02 c0    	fmul   QWORD PTR ds:0xc002ae30
c00225ae:	dc 05 38 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae38
c00225b4:	d8 ca                	fmul   st,st(2)
c00225b6:	dc 25 40 ae 02 c0    	fsub   QWORD PTR ds:0xc002ae40
c00225bc:	d8 ca                	fmul   st,st(2)
c00225be:	dc 05 48 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae48
c00225c4:	d8 ca                	fmul   st,st(2)
c00225c6:	dc 25 50 ae 02 c0    	fsub   QWORD PTR ds:0xc002ae50
c00225cc:	d8 ca                	fmul   st,st(2)
c00225ce:	dc 05 58 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae58
c00225d4:	d8 ca                	fmul   st,st(2)
c00225d6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00225da:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00225de:	d9 c2                	fld    st(2)
c00225e0:	dc 0d 60 ae 02 c0    	fmul   QWORD PTR ds:0xc002ae60
c00225e6:	dc 25 68 ae 02 c0    	fsub   QWORD PTR ds:0xc002ae68
c00225ec:	d8 cb                	fmul   st,st(3)
c00225ee:	dc 05 70 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae70
c00225f4:	d8 cb                	fmul   st,st(3)
c00225f6:	dc 25 78 ae 02 c0    	fsub   QWORD PTR ds:0xc002ae78
c00225fc:	de cb                	fmulp  st(3),st
c00225fe:	d9 ca                	fxch   st(2)
c0022600:	d8 05 80 ae 02 c0    	fadd   DWORD PTR ds:0xc002ae80
c0022606:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002260a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002260e:	de fa                	fdivp  st(2),st
c0022610:	d9 c9                	fxch   st(1)
c0022612:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022616:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002261a:	d8 ca                	fmul   st,st(2)
c002261c:	de e9                	fsubp  st(1),st
c002261e:	de e9                	fsubp  st(1),st
c0022620:	dc 2d 28 ae 02 c0    	fsubr  QWORD PTR ds:0xc002ae28
c0022626:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002262a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002262e:	83 c4 4c             	add    esp,0x4c
c0022631:	c3                   	ret    
c0022632:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0022639:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0022640:	d9 e8                	fld1   
c0022642:	de c1                	faddp  st(1),st
c0022644:	d8 0d 84 ae 02 c0    	fmul   DWORD PTR ds:0xc002ae84
c002264a:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002264e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022652:	d9 c0                	fld    st(0)
c0022654:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0022658:	dd 1c 24             	fstp   QWORD PTR [esp]
c002265b:	e8 60 25 00 00       	call   c0024bc0 <sqrt>
c0022660:	dd 05 08 c8 02 c0    	fld    QWORD PTR ds:0xc002c808
c0022666:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c002266a:	d9 c0                	fld    st(0)
c002266c:	dc 0d 30 ae 02 c0    	fmul   QWORD PTR ds:0xc002ae30
c0022672:	dc 05 38 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae38
c0022678:	d8 c9                	fmul   st,st(1)
c002267a:	dc 25 40 ae 02 c0    	fsub   QWORD PTR ds:0xc002ae40
c0022680:	d8 c9                	fmul   st,st(1)
c0022682:	dc 05 48 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae48
c0022688:	d8 c9                	fmul   st,st(1)
c002268a:	dc 25 50 ae 02 c0    	fsub   QWORD PTR ds:0xc002ae50
c0022690:	d8 c9                	fmul   st,st(1)
c0022692:	dc 05 58 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae58
c0022698:	d8 c9                	fmul   st,st(1)
c002269a:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002269e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00226a2:	d9 c1                	fld    st(1)
c00226a4:	dc 0d 60 ae 02 c0    	fmul   QWORD PTR ds:0xc002ae60
c00226aa:	dc 25 68 ae 02 c0    	fsub   QWORD PTR ds:0xc002ae68
c00226b0:	d8 ca                	fmul   st,st(2)
c00226b2:	dc 05 70 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae70
c00226b8:	d8 ca                	fmul   st,st(2)
c00226ba:	dc 25 78 ae 02 c0    	fsub   QWORD PTR ds:0xc002ae78
c00226c0:	de ca                	fmulp  st(2),st
c00226c2:	d9 e8                	fld1   
c00226c4:	de c2                	faddp  st(2),st
c00226c6:	d9 c9                	fxch   st(1)
c00226c8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00226cc:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00226d0:	de f9                	fdivp  st(1),st
c00226d2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00226d6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00226da:	d8 ca                	fmul   st,st(2)
c00226dc:	de e1                	fsubrp st(1),st
c00226de:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00226e2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00226e6:	de c1                	faddp  st(1),st
c00226e8:	d8 c0                	fadd   st,st(0)
c00226ea:	dc 2d 20 ae 02 c0    	fsubr  QWORD PTR ds:0xc002ae20
c00226f0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00226f4:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00226f8:	83 c4 4c             	add    esp,0x4c
c00226fb:	c3                   	ret    
c00226fc:	66 90                	xchg   ax,ax
c00226fe:	66 90                	xchg   ax,ax

c0022700 <asin>:
c0022700:	56                   	push   esi
c0022701:	53                   	push   ebx
c0022702:	83 ec 44             	sub    esp,0x44
c0022705:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0022709:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c002270d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022711:	89 f3                	mov    ebx,esi
c0022713:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0022719:	81 fb ff ff ef 3f    	cmp    ebx,0x3fefffff
c002271f:	7e 4f                	jle    c0022770 <asin+0x70>
c0022721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022725:	81 eb 00 00 f0 3f    	sub    ebx,0x3ff00000
c002272b:	09 c3                	or     ebx,eax
c002272d:	74 21                	je     c0022750 <asin+0x50>
c002272f:	d8 e0                	fsub   st,st(0)
c0022731:	d8 f0                	fdiv   st,st(0)
c0022733:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022737:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002273b:	eb 05                	jmp    c0022742 <asin+0x42>
c002273d:	8d 76 00             	lea    esi,[esi+0x0]
c0022740:	dd d9                	fstp   st(1)
c0022742:	83 c4 44             	add    esp,0x44
c0022745:	5b                   	pop    ebx
c0022746:	5e                   	pop    esi
c0022747:	c3                   	ret    
c0022748:	90                   	nop
c0022749:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0022750:	d9 c0                	fld    st(0)
c0022752:	dc 0d 28 ae 02 c0    	fmul   QWORD PTR ds:0xc002ae28
c0022758:	d9 c9                	fxch   st(1)
c002275a:	dc 0d 88 ae 02 c0    	fmul   QWORD PTR ds:0xc002ae88
c0022760:	de c1                	faddp  st(1),st
c0022762:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022766:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002276a:	83 c4 44             	add    esp,0x44
c002276d:	5b                   	pop    ebx
c002276e:	5e                   	pop    esi
c002276f:	c3                   	ret    
c0022770:	dd d8                	fstp   st(0)
c0022772:	81 fb ff ff df 3f    	cmp    ebx,0x3fdfffff
c0022778:	0f 8f b2 00 00 00    	jg     c0022830 <asin+0x130>
c002277e:	81 fb ff ff 4f 3e    	cmp    ebx,0x3e4fffff
c0022784:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022788:	7f 16                	jg     c00227a0 <asin+0xa0>
c002278a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002278e:	d9 e8                	fld1   
c0022790:	d9 c2                	fld    st(2)
c0022792:	dc 05 90 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae90
c0022798:	df f1                	fcomip st,st(1)
c002279a:	dd d8                	fstp   st(0)
c002279c:	77 a2                	ja     c0022740 <asin+0x40>
c002279e:	dd d8                	fstp   st(0)
c00227a0:	d9 c0                	fld    st(0)
c00227a2:	d8 c9                	fmul   st,st(1)
c00227a4:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00227a8:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00227ac:	d9 c0                	fld    st(0)
c00227ae:	dc 0d 30 ae 02 c0    	fmul   QWORD PTR ds:0xc002ae30
c00227b4:	dc 05 38 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae38
c00227ba:	d8 c9                	fmul   st,st(1)
c00227bc:	dc 25 40 ae 02 c0    	fsub   QWORD PTR ds:0xc002ae40
c00227c2:	d8 c9                	fmul   st,st(1)
c00227c4:	dc 05 48 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae48
c00227ca:	d8 c9                	fmul   st,st(1)
c00227cc:	dc 25 50 ae 02 c0    	fsub   QWORD PTR ds:0xc002ae50
c00227d2:	d8 c9                	fmul   st,st(1)
c00227d4:	dc 05 58 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae58
c00227da:	d8 c9                	fmul   st,st(1)
c00227dc:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00227e0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00227e4:	d9 c1                	fld    st(1)
c00227e6:	dc 0d 60 ae 02 c0    	fmul   QWORD PTR ds:0xc002ae60
c00227ec:	dc 25 68 ae 02 c0    	fsub   QWORD PTR ds:0xc002ae68
c00227f2:	d8 ca                	fmul   st,st(2)
c00227f4:	dc 05 70 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae70
c00227fa:	d8 ca                	fmul   st,st(2)
c00227fc:	dc 25 78 ae 02 c0    	fsub   QWORD PTR ds:0xc002ae78
c0022802:	de ca                	fmulp  st(2),st
c0022804:	d9 c9                	fxch   st(1)
c0022806:	d8 05 80 ae 02 c0    	fadd   DWORD PTR ds:0xc002ae80
c002280c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022810:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022814:	de f9                	fdivp  st(1),st
c0022816:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002281a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002281e:	d8 c9                	fmul   st,st(1)
c0022820:	de c1                	faddp  st(1),st
c0022822:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022826:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002282a:	83 c4 44             	add    esp,0x44
c002282d:	5b                   	pop    ebx
c002282e:	5e                   	pop    esi
c002282f:	c3                   	ret    
c0022830:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022834:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022837:	e8 34 1d 00 00       	call   c0024570 <fabs>
c002283c:	d9 e8                	fld1   
c002283e:	dc e1                	fsubr  st(1),st
c0022840:	d9 c9                	fxch   st(1)
c0022842:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022846:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002284a:	d9 05 84 ae 02 c0    	fld    DWORD PTR ds:0xc002ae84
c0022850:	de c9                	fmulp  st(1),st
c0022852:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022856:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002285a:	d9 c0                	fld    st(0)
c002285c:	d9 c0                	fld    st(0)
c002285e:	dc 0d 30 ae 02 c0    	fmul   QWORD PTR ds:0xc002ae30
c0022864:	dc 05 38 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae38
c002286a:	d8 c9                	fmul   st,st(1)
c002286c:	dc 25 40 ae 02 c0    	fsub   QWORD PTR ds:0xc002ae40
c0022872:	d8 c9                	fmul   st,st(1)
c0022874:	dc 05 48 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae48
c002287a:	d8 c9                	fmul   st,st(1)
c002287c:	dc 25 50 ae 02 c0    	fsub   QWORD PTR ds:0xc002ae50
c0022882:	d8 c9                	fmul   st,st(1)
c0022884:	dc 05 58 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae58
c002288a:	d8 c9                	fmul   st,st(1)
c002288c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022890:	d9 c0                	fld    st(0)
c0022892:	dc 0d 60 ae 02 c0    	fmul   QWORD PTR ds:0xc002ae60
c0022898:	dc 25 68 ae 02 c0    	fsub   QWORD PTR ds:0xc002ae68
c002289e:	d8 c9                	fmul   st,st(1)
c00228a0:	dc 05 70 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae70
c00228a6:	d8 c9                	fmul   st,st(1)
c00228a8:	dc 25 78 ae 02 c0    	fsub   QWORD PTR ds:0xc002ae78
c00228ae:	d8 c9                	fmul   st,st(1)
c00228b0:	d9 c9                	fxch   st(1)
c00228b2:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c00228b6:	de c2                	faddp  st(2),st
c00228b8:	d9 c9                	fxch   st(1)
c00228ba:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00228be:	dd 1c 24             	fstp   QWORD PTR [esp]
c00228c1:	e8 fa 22 00 00       	call   c0024bc0 <sqrt>
c00228c6:	81 fb 32 33 ef 3f    	cmp    ebx,0x3fef3332
c00228cc:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00228d0:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c00228d4:	7e 4a                	jle    c0022920 <asin+0x220>
c00228d6:	dd d8                	fstp   st(0)
c00228d8:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00228dc:	dc 74 24 30          	fdiv   QWORD PTR [esp+0x30]
c00228e0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00228e4:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00228e8:	d8 c9                	fmul   st,st(1)
c00228ea:	de c1                	faddp  st(1),st
c00228ec:	d8 c0                	fadd   st,st(0)
c00228ee:	dc 25 88 ae 02 c0    	fsub   QWORD PTR ds:0xc002ae88
c00228f4:	dc 2d 28 ae 02 c0    	fsubr  QWORD PTR ds:0xc002ae28
c00228fa:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00228fe:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022902:	85 f6                	test   esi,esi
c0022904:	0f 8f 38 fe ff ff    	jg     c0022742 <asin+0x42>
c002290a:	d9 e0                	fchs   
c002290c:	e9 31 fe ff ff       	jmp    c0022742 <asin+0x42>
c0022911:	eb 0d                	jmp    c0022920 <asin+0x220>
c0022913:	90                   	nop
c0022914:	90                   	nop
c0022915:	90                   	nop
c0022916:	90                   	nop
c0022917:	90                   	nop
c0022918:	90                   	nop
c0022919:	90                   	nop
c002291a:	90                   	nop
c002291b:	90                   	nop
c002291c:	90                   	nop
c002291d:	90                   	nop
c002291e:	90                   	nop
c002291f:	90                   	nop
c0022920:	dd d9                	fstp   st(1)
c0022922:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022926:	31 c0                	xor    eax,eax
c0022928:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002292c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022930:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022934:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022938:	d9 c0                	fld    st(0)
c002293a:	d8 c1                	fadd   st,st(1)
c002293c:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022940:	dc 74 24 30          	fdiv   QWORD PTR [esp+0x30]
c0022944:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022948:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002294c:	de c9                	fmulp  st(1),st
c002294e:	d9 c2                	fld    st(2)
c0022950:	d8 cb                	fmul   st,st(3)
c0022952:	de ec                	fsubp  st(4),st
c0022954:	d9 c9                	fxch   st(1)
c0022956:	d8 c2                	fadd   st,st(2)
c0022958:	de fb                	fdivp  st(3),st
c002295a:	d9 ca                	fxch   st(2)
c002295c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022960:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022964:	d8 c0                	fadd   st,st(0)
c0022966:	dc 2d 88 ae 02 c0    	fsubr  QWORD PTR ds:0xc002ae88
c002296c:	de ea                	fsubp  st(2),st
c002296e:	d9 c9                	fxch   st(1)
c0022970:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022974:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022978:	d9 c9                	fxch   st(1)
c002297a:	d8 c0                	fadd   st,st(0)
c002297c:	dd 05 98 ae 02 c0    	fld    QWORD PTR ds:0xc002ae98
c0022982:	dc e1                	fsubr  st(1),st
c0022984:	d9 c9                	fxch   st(1)
c0022986:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002298a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002298e:	de ea                	fsubp  st(2),st
c0022990:	de e1                	fsubrp st(1),st
c0022992:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022996:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002299a:	e9 63 ff ff ff       	jmp    c0022902 <asin+0x202>
c002299f:	90                   	nop

c00229a0 <atan2>:
c00229a0:	83 ec 4c             	sub    esp,0x4c
c00229a3:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c00229a7:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c00229ab:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00229af:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c00229b3:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00229b7:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c00229bb:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00229bf:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00229c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00229cb:	89 c1                	mov    ecx,eax
c00229cd:	f7 d9                	neg    ecx
c00229cf:	89 d3                	mov    ebx,edx
c00229d1:	09 c1                	or     ecx,eax
c00229d3:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00229d9:	c1 e9 1f             	shr    ecx,0x1f
c00229dc:	09 d9                	or     ecx,ebx
c00229de:	81 f9 00 00 f0 7f    	cmp    ecx,0x7ff00000
c00229e4:	77 7a                	ja     c0022a60 <atan2+0xc0>
c00229e6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00229ea:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00229ee:	89 f1                	mov    ecx,esi
c00229f0:	f7 d9                	neg    ecx
c00229f2:	89 ef                	mov    edi,ebp
c00229f4:	09 f1                	or     ecx,esi
c00229f6:	81 e7 ff ff ff 7f    	and    edi,0x7fffffff
c00229fc:	c1 e9 1f             	shr    ecx,0x1f
c00229ff:	09 f9                	or     ecx,edi
c0022a01:	81 f9 00 00 f0 7f    	cmp    ecx,0x7ff00000
c0022a07:	77 57                	ja     c0022a60 <atan2+0xc0>
c0022a09:	81 fa 00 00 f0 3f    	cmp    edx,0x3ff00000
c0022a0f:	75 08                	jne    c0022a19 <atan2+0x79>
c0022a11:	85 c0                	test   eax,eax
c0022a13:	0f 84 f7 00 00 00    	je     c0022b10 <atan2+0x170>
c0022a19:	89 d1                	mov    ecx,edx
c0022a1b:	c1 f9 1e             	sar    ecx,0x1e
c0022a1e:	83 e1 02             	and    ecx,0x2
c0022a21:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0022a25:	89 e9                	mov    ecx,ebp
c0022a27:	c1 e9 1f             	shr    ecx,0x1f
c0022a2a:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0022a2e:	09 fe                	or     esi,edi
c0022a30:	75 5e                	jne    c0022a90 <atan2+0xf0>
c0022a32:	83 f9 02             	cmp    ecx,0x2
c0022a35:	0f 84 65 01 00 00    	je     c0022ba0 <atan2+0x200>
c0022a3b:	83 f9 03             	cmp    ecx,0x3
c0022a3e:	0f 85 1c 01 00 00    	jne    c0022b60 <atan2+0x1c0>
c0022a44:	dd 05 18 c8 02 c0    	fld    QWORD PTR ds:0xc002c818
c0022a4a:	dd 05 a0 ae 02 c0    	fld    QWORD PTR ds:0xc002aea0
c0022a50:	de e1                	fsubrp st(1),st
c0022a52:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022a56:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022a5a:	eb 14                	jmp    c0022a70 <atan2+0xd0>
c0022a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0022a60:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022a64:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0022a68:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022a6c:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022a70:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0022a74:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0022a78:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0022a7c:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0022a80:	83 c4 4c             	add    esp,0x4c
c0022a83:	c3                   	ret    
c0022a84:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0022a8a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0022a90:	09 d8                	or     eax,ebx
c0022a92:	0f 84 98 00 00 00    	je     c0022b30 <atan2+0x190>
c0022a98:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c0022a9e:	0f 84 1c 01 00 00    	je     c0022bc0 <atan2+0x220>
c0022aa4:	81 ff 00 00 f0 7f    	cmp    edi,0x7ff00000
c0022aaa:	0f 84 80 00 00 00    	je     c0022b30 <atan2+0x190>
c0022ab0:	29 df                	sub    edi,ebx
c0022ab2:	c1 ff 14             	sar    edi,0x14
c0022ab5:	83 ff 3c             	cmp    edi,0x3c
c0022ab8:	0f 8f b2 00 00 00    	jg     c0022b70 <atan2+0x1d0>
c0022abe:	c1 ea 1f             	shr    edx,0x1f
c0022ac1:	84 d2                	test   dl,dl
c0022ac3:	0f 84 97 01 00 00    	je     c0022c60 <atan2+0x2c0>
c0022ac9:	83 ff c4             	cmp    edi,0xffffffc4
c0022acc:	0f 8d 8e 01 00 00    	jge    c0022c60 <atan2+0x2c0>
c0022ad2:	d9 ee                	fldz   
c0022ad4:	83 f9 01             	cmp    ecx,0x1
c0022ad7:	0f 84 02 01 00 00    	je     c0022bdf <atan2+0x23f>
c0022add:	83 f9 02             	cmp    ecx,0x2
c0022ae0:	0f 84 2a 01 00 00    	je     c0022c10 <atan2+0x270>
c0022ae6:	85 c9                	test   ecx,ecx
c0022ae8:	74 86                	je     c0022a70 <atan2+0xd0>
c0022aea:	dd 05 10 c8 02 c0    	fld    QWORD PTR ds:0xc002c810
c0022af0:	de e9                	fsubp  st(1),st
c0022af2:	dc 25 20 ae 02 c0    	fsub   QWORD PTR ds:0xc002ae20
c0022af8:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022afc:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022b00:	e9 6b ff ff ff       	jmp    c0022a70 <atan2+0xd0>
c0022b05:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0022b09:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0022b10:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0022b14:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0022b18:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0022b1c:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0022b20:	83 c4 4c             	add    esp,0x4c
c0022b23:	e9 a8 11 00 00       	jmp    c0023cd0 <atan>
c0022b28:	90                   	nop
c0022b29:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0022b30:	85 ed                	test   ebp,ebp
c0022b32:	0f 88 b8 00 00 00    	js     c0022bf0 <atan2+0x250>
c0022b38:	dd 05 18 c8 02 c0    	fld    QWORD PTR ds:0xc002c818
c0022b3e:	dc 05 28 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae28
c0022b44:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022b48:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022b4c:	e9 1f ff ff ff       	jmp    c0022a70 <atan2+0xd0>
c0022b51:	eb 0d                	jmp    c0022b60 <atan2+0x1c0>
c0022b53:	90                   	nop
c0022b54:	90                   	nop
c0022b55:	90                   	nop
c0022b56:	90                   	nop
c0022b57:	90                   	nop
c0022b58:	90                   	nop
c0022b59:	90                   	nop
c0022b5a:	90                   	nop
c0022b5b:	90                   	nop
c0022b5c:	90                   	nop
c0022b5d:	90                   	nop
c0022b5e:	90                   	nop
c0022b5f:	90                   	nop
c0022b60:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022b64:	e9 07 ff ff ff       	jmp    c0022a70 <atan2+0xd0>
c0022b69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0022b70:	dd 05 10 c8 02 c0    	fld    QWORD PTR ds:0xc002c810
c0022b76:	83 e1 01             	and    ecx,0x1
c0022b79:	d9 05 84 ae 02 c0    	fld    DWORD PTR ds:0xc002ae84
c0022b7f:	de c9                	fmulp  st(1),st
c0022b81:	dc 05 28 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae28
c0022b87:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022b8b:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022b8f:	e9 40 ff ff ff       	jmp    c0022ad4 <atan2+0x134>
c0022b94:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0022b9a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0022ba0:	dd 05 18 c8 02 c0    	fld    QWORD PTR ds:0xc002c818
c0022ba6:	dc 05 20 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae20
c0022bac:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022bb0:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022bb4:	e9 b7 fe ff ff       	jmp    c0022a70 <atan2+0xd0>
c0022bb9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0022bc0:	81 ff 00 00 f0 7f    	cmp    edi,0x7ff00000
c0022bc6:	74 68                	je     c0022c30 <atan2+0x290>
c0022bc8:	83 f9 02             	cmp    ecx,0x2
c0022bcb:	74 d3                	je     c0022ba0 <atan2+0x200>
c0022bcd:	83 f9 03             	cmp    ecx,0x3
c0022bd0:	0f 84 6e fe ff ff    	je     c0022a44 <atan2+0xa4>
c0022bd6:	d9 ee                	fldz   
c0022bd8:	49                   	dec    ecx
c0022bd9:	0f 85 91 fe ff ff    	jne    c0022a70 <atan2+0xd0>
c0022bdf:	d9 e0                	fchs   
c0022be1:	e9 8a fe ff ff       	jmp    c0022a70 <atan2+0xd0>
c0022be6:	8d 76 00             	lea    esi,[esi+0x0]
c0022be9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0022bf0:	dd 05 18 c8 02 c0    	fld    QWORD PTR ds:0xc002c818
c0022bf6:	dd 05 a8 ae 02 c0    	fld    QWORD PTR ds:0xc002aea8
c0022bfc:	de e1                	fsubrp st(1),st
c0022bfe:	e9 41 ff ff ff       	jmp    c0022b44 <atan2+0x1a4>
c0022c03:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0022c09:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0022c10:	dd 05 10 c8 02 c0    	fld    QWORD PTR ds:0xc002c810
c0022c16:	de e9                	fsubp  st(1),st
c0022c18:	dc 2d 20 ae 02 c0    	fsubr  QWORD PTR ds:0xc002ae20
c0022c1e:	e9 21 ff ff ff       	jmp    c0022b44 <atan2+0x1a4>
c0022c23:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0022c29:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0022c30:	83 f9 02             	cmp    ecx,0x2
c0022c33:	0f 84 82 00 00 00    	je     c0022cbb <atan2+0x31b>
c0022c39:	83 f9 03             	cmp    ecx,0x3
c0022c3c:	74 62                	je     c0022ca0 <atan2+0x300>
c0022c3e:	49                   	dec    ecx
c0022c3f:	90                   	nop
c0022c40:	74 43                	je     c0022c85 <atan2+0x2e5>
c0022c42:	dd 05 18 c8 02 c0    	fld    QWORD PTR ds:0xc002c818
c0022c48:	dc 05 98 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae98
c0022c4e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022c52:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022c56:	e9 15 fe ff ff       	jmp    c0022a70 <atan2+0xd0>
c0022c5b:	90                   	nop
c0022c5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0022c60:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0022c64:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022c68:	dc 74 24 10          	fdiv   QWORD PTR [esp+0x10]
c0022c6c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022c6f:	e8 fc 18 00 00       	call   c0024570 <fabs>
c0022c74:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022c77:	e8 54 10 00 00       	call   c0023cd0 <atan>
c0022c7c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022c80:	e9 4f fe ff ff       	jmp    c0022ad4 <atan2+0x134>
c0022c85:	dd 05 18 c8 02 c0    	fld    QWORD PTR ds:0xc002c818
c0022c8b:	dd 05 b0 ae 02 c0    	fld    QWORD PTR ds:0xc002aeb0
c0022c91:	de e1                	fsubrp st(1),st
c0022c93:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022c97:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022c9b:	e9 d0 fd ff ff       	jmp    c0022a70 <atan2+0xd0>
c0022ca0:	dd 05 18 c8 02 c0    	fld    QWORD PTR ds:0xc002c818
c0022ca6:	dd 05 c0 ae 02 c0    	fld    QWORD PTR ds:0xc002aec0
c0022cac:	de e1                	fsubrp st(1),st
c0022cae:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022cb2:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022cb6:	e9 b5 fd ff ff       	jmp    c0022a70 <atan2+0xd0>
c0022cbb:	dd 05 18 c8 02 c0    	fld    QWORD PTR ds:0xc002c818
c0022cc1:	dc 05 b8 ae 02 c0    	fadd   QWORD PTR ds:0xc002aeb8
c0022cc7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022ccb:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022ccf:	e9 9c fd ff ff       	jmp    c0022a70 <atan2+0xd0>
c0022cd4:	66 90                	xchg   ax,ax
c0022cd6:	66 90                	xchg   ax,ax
c0022cd8:	66 90                	xchg   ax,ax
c0022cda:	66 90                	xchg   ax,ax
c0022cdc:	66 90                	xchg   ax,ax
c0022cde:	66 90                	xchg   ax,ax

c0022ce0 <cosh>:
c0022ce0:	53                   	push   ebx
c0022ce1:	83 ec 28             	sub    esp,0x28
c0022ce4:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0022ce8:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0022cec:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0022cf0:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0022cf6:	81 fb ff ff ef 7f    	cmp    ebx,0x7fefffff
c0022cfc:	0f 8f 9e 00 00 00    	jg     c0022da0 <cosh+0xc0>
c0022d02:	dd d8                	fstp   st(0)
c0022d04:	81 fb 42 2e d6 3f    	cmp    ebx,0x3fd62e42
c0022d0a:	7e 44                	jle    c0022d50 <cosh+0x70>
c0022d0c:	81 fb ff ff 35 40    	cmp    ebx,0x4035ffff
c0022d12:	0f 8e a8 00 00 00    	jle    c0022dc0 <cosh+0xe0>
c0022d18:	81 fb 41 2e 86 40    	cmp    ebx,0x40862e41
c0022d1e:	0f 8e dc 00 00 00    	jle    c0022e00 <cosh+0x120>
c0022d24:	81 fb ce 33 86 40    	cmp    ebx,0x408633ce
c0022d2a:	0f 8e 00 01 00 00    	jle    c0022e30 <cosh+0x150>
c0022d30:	d9 05 c8 ae 02 c0    	fld    DWORD PTR ds:0xc002aec8
c0022d36:	eb 0c                	jmp    c0022d44 <cosh+0x64>
c0022d38:	90                   	nop
c0022d39:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0022d40:	dd d9                	fstp   st(1)
c0022d42:	dd d9                	fstp   st(1)
c0022d44:	83 c4 28             	add    esp,0x28
c0022d47:	5b                   	pop    ebx
c0022d48:	c3                   	ret    
c0022d49:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0022d50:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022d54:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022d57:	e8 14 18 00 00       	call   c0024570 <fabs>
c0022d5c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022d5f:	e8 7c 13 00 00       	call   c00240e0 <expm1>
c0022d64:	81 fb ff ff 7f 3c    	cmp    ebx,0x3c7fffff
c0022d6a:	d9 e8                	fld1   
c0022d6c:	d9 c1                	fld    st(1)
c0022d6e:	d8 c1                	fadd   st,st(1)
c0022d70:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0022d74:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022d78:	7e c6                	jle    c0022d40 <cosh+0x60>
c0022d7a:	d9 ca                	fxch   st(2)
c0022d7c:	d8 c8                	fmul   st,st(0)
c0022d7e:	d9 ca                	fxch   st(2)
c0022d80:	d8 c0                	fadd   st,st(0)
c0022d82:	de fa                	fdivp  st(2),st
c0022d84:	de c1                	faddp  st(1),st
c0022d86:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0022d8a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022d8e:	83 c4 28             	add    esp,0x28
c0022d91:	5b                   	pop    ebx
c0022d92:	c3                   	ret    
c0022d93:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0022d99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0022da0:	d9 c0                	fld    st(0)
c0022da2:	de c9                	fmulp  st(1),st
c0022da4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0022da8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022dac:	83 c4 28             	add    esp,0x28
c0022daf:	5b                   	pop    ebx
c0022db0:	c3                   	ret    
c0022db1:	eb 0d                	jmp    c0022dc0 <cosh+0xe0>
c0022db3:	90                   	nop
c0022db4:	90                   	nop
c0022db5:	90                   	nop
c0022db6:	90                   	nop
c0022db7:	90                   	nop
c0022db8:	90                   	nop
c0022db9:	90                   	nop
c0022dba:	90                   	nop
c0022dbb:	90                   	nop
c0022dbc:	90                   	nop
c0022dbd:	90                   	nop
c0022dbe:	90                   	nop
c0022dbf:	90                   	nop
c0022dc0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022dc4:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022dc7:	e8 a4 17 00 00       	call   c0024570 <fabs>
c0022dcc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022dcf:	e8 54 1d 00 00       	call   c0024b28 <exp>
c0022dd4:	d9 05 84 ae 02 c0    	fld    DWORD PTR ds:0xc002ae84
c0022dda:	d9 c1                	fld    st(1)
c0022ddc:	d8 c9                	fmul   st,st(1)
c0022dde:	d9 c9                	fxch   st(1)
c0022de0:	de f2                	fdivrp st(2),st
c0022de2:	de c1                	faddp  st(1),st
c0022de4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0022de8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022dec:	e9 53 ff ff ff       	jmp    c0022d44 <cosh+0x64>
c0022df1:	eb 0d                	jmp    c0022e00 <cosh+0x120>
c0022df3:	90                   	nop
c0022df4:	90                   	nop
c0022df5:	90                   	nop
c0022df6:	90                   	nop
c0022df7:	90                   	nop
c0022df8:	90                   	nop
c0022df9:	90                   	nop
c0022dfa:	90                   	nop
c0022dfb:	90                   	nop
c0022dfc:	90                   	nop
c0022dfd:	90                   	nop
c0022dfe:	90                   	nop
c0022dff:	90                   	nop
c0022e00:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022e04:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022e07:	e8 64 17 00 00       	call   c0024570 <fabs>
c0022e0c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022e0f:	e8 14 1d 00 00       	call   c0024b28 <exp>
c0022e14:	d9 05 84 ae 02 c0    	fld    DWORD PTR ds:0xc002ae84
c0022e1a:	de c9                	fmulp  st(1),st
c0022e1c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0022e20:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022e24:	e9 1b ff ff ff       	jmp    c0022d44 <cosh+0x64>
c0022e29:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0022e30:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022e34:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022e37:	e8 34 17 00 00       	call   c0024570 <fabs>
c0022e3c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0022e41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022e45:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022e48:	e8 d3 0c 00 00       	call   c0023b20 <__ldexp_exp>
c0022e4d:	e9 f2 fe ff ff       	jmp    c0022d44 <cosh+0x64>
c0022e52:	66 90                	xchg   ax,ax
c0022e54:	66 90                	xchg   ax,ax
c0022e56:	66 90                	xchg   ax,ax
c0022e58:	66 90                	xchg   ax,ax
c0022e5a:	66 90                	xchg   ax,ax
c0022e5c:	66 90                	xchg   ax,ax
c0022e5e:	66 90                	xchg   ax,ax

c0022e60 <pow>:
c0022e60:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0022e66:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
c0022e6d:	dd 84 24 a0 00 00 00 	fld    QWORD PTR [esp+0xa0]
c0022e74:	89 9c 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],ebx
c0022e7b:	89 bc 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],edi
c0022e82:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0022e86:	89 ac 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],ebp
c0022e8d:	dd 84 24 a8 00 00 00 	fld    QWORD PTR [esp+0xa8]
c0022e94:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0022e98:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ea0:	89 f3                	mov    ebx,esi
c0022ea2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0022ea8:	89 d9                	mov    ecx,ebx
c0022eaa:	09 c1                	or     ecx,eax
c0022eac:	0f 84 9e 00 00 00    	je     c0022f50 <pow+0xf0>
c0022eb2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022eb6:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022eba:	81 ff 00 00 f0 3f    	cmp    edi,0x3ff00000
c0022ec0:	75 3e                	jne    c0022f00 <pow+0xa0>
c0022ec2:	85 ed                	test   ebp,ebp
c0022ec4:	75 3a                	jne    c0022f00 <pow+0xa0>
c0022ec6:	d9 e8                	fld1   
c0022ec8:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022ecc:	eb 02                	jmp    c0022ed0 <pow+0x70>
c0022ece:	dd d8                	fstp   st(0)
c0022ed0:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022ed4:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0022edb:	8b b4 24 90 00 00 00 	mov    esi,DWORD PTR [esp+0x90]
c0022ee2:	8b bc 24 94 00 00 00 	mov    edi,DWORD PTR [esp+0x94]
c0022ee9:	8b ac 24 98 00 00 00 	mov    ebp,DWORD PTR [esp+0x98]
c0022ef0:	81 c4 9c 00 00 00    	add    esp,0x9c
c0022ef6:	c3                   	ret    
c0022ef7:	89 f6                	mov    esi,esi
c0022ef9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0022f00:	89 fa                	mov    edx,edi
c0022f02:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0022f08:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0022f0c:	81 fa 00 00 f0 7f    	cmp    edx,0x7ff00000
c0022f12:	7f 1c                	jg     c0022f30 <pow+0xd0>
c0022f14:	0f 94 c1             	sete   cl
c0022f17:	85 ed                	test   ebp,ebp
c0022f19:	0f 95 c2             	setne  dl
c0022f1c:	84 ca                	test   dl,cl
c0022f1e:	75 10                	jne    c0022f30 <pow+0xd0>
c0022f20:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c0022f26:	7f 08                	jg     c0022f30 <pow+0xd0>
c0022f28:	75 36                	jne    c0022f60 <pow+0x100>
c0022f2a:	85 c0                	test   eax,eax
c0022f2c:	74 32                	je     c0022f60 <pow+0x100>
c0022f2e:	66 90                	xchg   ax,ax
c0022f30:	d9 ee                	fldz   
c0022f32:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022f36:	d8 c1                	fadd   st,st(1)
c0022f38:	d9 c9                	fxch   st(1)
c0022f3a:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0022f3e:	de c1                	faddp  st(1),st
c0022f40:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022f44:	eb 8a                	jmp    c0022ed0 <pow+0x70>
c0022f46:	8d 76 00             	lea    esi,[esi+0x0]
c0022f49:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0022f50:	d9 e8                	fld1   
c0022f52:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022f56:	e9 75 ff ff ff       	jmp    c0022ed0 <pow+0x70>
c0022f5b:	90                   	nop
c0022f5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0022f60:	31 c9                	xor    ecx,ecx
c0022f62:	85 ff                	test   edi,edi
c0022f64:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0022f68:	0f 88 22 01 00 00    	js     c0023090 <pow+0x230>
c0022f6e:	85 c0                	test   eax,eax
c0022f70:	75 5e                	jne    c0022fd0 <pow+0x170>
c0022f72:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c0022f78:	0f 84 72 01 00 00    	je     c00230f0 <pow+0x290>
c0022f7e:	81 fb 00 00 f0 3f    	cmp    ebx,0x3ff00000
c0022f84:	0f 84 b6 01 00 00    	je     c0023140 <pow+0x2e0>
c0022f8a:	81 fe 00 00 00 40    	cmp    esi,0x40000000
c0022f90:	0f 84 38 07 00 00    	je     c00236ce <pow+0x86e>
c0022f96:	81 fe 00 00 08 40    	cmp    esi,0x40080000
c0022f9c:	0f 84 33 08 00 00    	je     c00237d5 <pow+0x975>
c0022fa2:	81 fe 00 00 10 40    	cmp    esi,0x40100000
c0022fa8:	0f 84 4f 08 00 00    	je     c00237fd <pow+0x99d>
c0022fae:	81 fe 00 00 e0 3f    	cmp    esi,0x3fe00000
c0022fb4:	75 1a                	jne    c0022fd0 <pow+0x170>
c0022fb6:	89 f8                	mov    eax,edi
c0022fb8:	f7 d0                	not    eax
c0022fba:	c1 e8 1f             	shr    eax,0x1f
c0022fbd:	84 c0                	test   al,al
c0022fbf:	0f 85 f1 08 00 00    	jne    c00238b6 <pow+0xa56>
c0022fc5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0022fc9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0022fd0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022fd4:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022fd7:	e8 94 15 00 00       	call   c0024570 <fabs>
c0022fdc:	85 ed                	test   ebp,ebp
c0022fde:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022fe2:	75 1e                	jne    c0023002 <pow+0x1a2>
c0022fe4:	89 f8                	mov    eax,edi
c0022fe6:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0022feb:	3d 00 00 f0 3f       	cmp    eax,0x3ff00000
c0022ff0:	0f 84 33 06 00 00    	je     c0023629 <pow+0x7c9>
c0022ff6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022ffa:	85 c0                	test   eax,eax
c0022ffc:	0f 84 27 06 00 00    	je     c0023629 <pow+0x7c9>
c0023002:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0023006:	89 f8                	mov    eax,edi
c0023008:	c1 e8 1f             	shr    eax,0x1f
c002300b:	48                   	dec    eax
c002300c:	09 c1                	or     ecx,eax
c002300e:	0f 84 49 01 00 00    	je     c002315d <pow+0x2fd>
c0023014:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0023018:	d9 ee                	fldz   
c002301a:	49                   	dec    ecx
c002301b:	09 c1                	or     ecx,eax
c002301d:	0f 85 4b 01 00 00    	jne    c002316e <pow+0x30e>
c0023023:	d9 e0                	fchs   
c0023025:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0023029:	d9 05 cc ae 02 c0    	fld    DWORD PTR ds:0xc002aecc
c002302f:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0023033:	db 2d 20 af 02 c0    	fld    TBYTE PTR ds:0xc002af20
c0023039:	db 2d 30 af 02 c0    	fld    TBYTE PTR ds:0xc002af30
c002303f:	d9 e8                	fld1   
c0023041:	d9 e0                	fchs   
c0023043:	db 7c 24 38          	fstp   TBYTE PTR [esp+0x38]
c0023047:	81 fb 00 00 e0 41    	cmp    ebx,0x41e00000
c002304d:	0f 8e 40 01 00 00    	jle    c0023193 <pow+0x333>
c0023053:	81 fb 00 00 f0 43    	cmp    ebx,0x43f00000
c0023059:	0f 8e 93 06 00 00    	jle    c00236f2 <pow+0x892>
c002305f:	dd d8                	fstp   st(0)
c0023061:	dd d8                	fstp   st(0)
c0023063:	81 7c 24 30 ff ff ef 3f 	cmp    DWORD PTR [esp+0x30],0x3fefffff
c002306b:	0f 8f c9 07 00 00    	jg     c002383a <pow+0x9da>
c0023071:	85 f6                	test   esi,esi
c0023073:	0f 88 94 08 00 00    	js     c002390d <pow+0xaad>
c0023079:	d9 ee                	fldz   
c002307b:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002307f:	e9 4c fe ff ff       	jmp    c0022ed0 <pow+0x70>
c0023084:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002308a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0023090:	81 fb ff ff 3f 43    	cmp    ebx,0x433fffff
c0023096:	0f 8f 94 00 00 00    	jg     c0023130 <pow+0x2d0>
c002309c:	81 fb ff ff ef 3f    	cmp    ebx,0x3fefffff
c00230a2:	0f 8e c6 fe ff ff    	jle    c0022f6e <pow+0x10e>
c00230a8:	89 d9                	mov    ecx,ebx
c00230aa:	c1 f9 14             	sar    ecx,0x14
c00230ad:	81 e9 ff 03 00 00    	sub    ecx,0x3ff
c00230b3:	83 f9 14             	cmp    ecx,0x14
c00230b6:	0f 8e e5 06 00 00    	jle    c00237a1 <pow+0x941>
c00230bc:	ba 34 00 00 00       	mov    edx,0x34
c00230c1:	29 ca                	sub    edx,ecx
c00230c3:	89 d1                	mov    ecx,edx
c00230c5:	89 c2                	mov    edx,eax
c00230c7:	d3 ea                	shr    edx,cl
c00230c9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00230cd:	d3 e2                	shl    edx,cl
c00230cf:	39 c2                	cmp    edx,eax
c00230d1:	0f 85 97 fe ff ff    	jne    c0022f6e <pow+0x10e>
c00230d7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00230db:	b9 02 00 00 00       	mov    ecx,0x2
c00230e0:	83 e2 01             	and    edx,0x1
c00230e3:	29 d1                	sub    ecx,edx
c00230e5:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00230e9:	e9 80 fe ff ff       	jmp    c0022f6e <pow+0x10e>
c00230ee:	66 90                	xchg   ax,ax
c00230f0:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00230f4:	8d 87 00 00 10 c0    	lea    eax,[edi-0x3ff00000]
c00230fa:	09 e8                	or     eax,ebp
c00230fc:	0f 84 61 05 00 00    	je     c0023663 <pow+0x803>
c0023102:	81 ff ff ff ef 3f    	cmp    edi,0x3fefffff
c0023108:	0f 8e 60 05 00 00    	jle    c002366e <pow+0x80e>
c002310e:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023112:	85 f6                	test   esi,esi
c0023114:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023118:	0f 89 b2 fd ff ff    	jns    c0022ed0 <pow+0x70>
c002311e:	e9 56 ff ff ff       	jmp    c0023079 <pow+0x219>
c0023123:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0023129:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023130:	ba 02 00 00 00       	mov    edx,0x2
c0023135:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0023139:	e9 30 fe ff ff       	jmp    c0022f6e <pow+0x10e>
c002313e:	66 90                	xchg   ax,ax
c0023140:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023144:	85 f6                	test   esi,esi
c0023146:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c002314a:	0f 89 7e fd ff ff    	jns    c0022ece <pow+0x6e>
c0023150:	d9 e8                	fld1   
c0023152:	de f1                	fdivrp st(1),st
c0023154:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023158:	e9 73 fd ff ff       	jmp    c0022ed0 <pow+0x70>
c002315d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023161:	d8 e0                	fsub   st,st(0)
c0023163:	d8 f0                	fdiv   st,st(0)
c0023165:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023169:	e9 62 fd ff ff       	jmp    c0022ed0 <pow+0x70>
c002316e:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0023172:	d9 05 c8 ae 02 c0    	fld    DWORD PTR ds:0xc002aec8
c0023178:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002317c:	db 2d 00 af 02 c0    	fld    TBYTE PTR ds:0xc002af00
c0023182:	db 2d 10 af 02 c0    	fld    TBYTE PTR ds:0xc002af10
c0023188:	d9 e8                	fld1   
c002318a:	db 7c 24 38          	fstp   TBYTE PTR [esp+0x38]
c002318e:	e9 b4 fe ff ff       	jmp    c0023047 <pow+0x1e7>
c0023193:	dd d8                	fstp   st(0)
c0023195:	dd d8                	fstp   st(0)
c0023197:	31 c0                	xor    eax,eax
c0023199:	81 e7 00 00 f0 7f    	and    edi,0x7ff00000
c002319f:	75 1b                	jne    c00231bc <pow+0x35c>
c00231a1:	d9 05 e0 ae 02 c0    	fld    DWORD PTR ds:0xc002aee0
c00231a7:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c00231ab:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00231af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00231b3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00231b7:	b8 cb ff ff ff       	mov    eax,0xffffffcb
c00231bc:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00231c0:	89 f9                	mov    ecx,edi
c00231c2:	81 e7 ff ff 0f 00    	and    edi,0xfffff
c00231c8:	c1 f9 14             	sar    ecx,0x14
c00231cb:	8d 8c 08 01 fc ff ff 	lea    ecx,[eax+ecx*1-0x3ff]
c00231d2:	89 f8                	mov    eax,edi
c00231d4:	0d 00 00 f0 3f       	or     eax,0x3ff00000
c00231d9:	81 ff 8e 98 03 00    	cmp    edi,0x3988e
c00231df:	0f 8e f8 04 00 00    	jle    c00236dd <pow+0x87d>
c00231e5:	81 ff 79 b6 0b 00    	cmp    edi,0xbb679
c00231eb:	0f 8e 25 06 00 00    	jle    c0023816 <pow+0x9b6>
c00231f1:	d9 ee                	fldz   
c00231f3:	41                   	inc    ecx
c00231f4:	db 7c 24 68          	fstp   TBYTE PTR [esp+0x68]
c00231f8:	2d 00 00 10 00       	sub    eax,0x100000
c00231fd:	31 d2                	xor    edx,edx
c00231ff:	d9 ee                	fldz   
c0023201:	db 7c 24 58          	fstp   TBYTE PTR [esp+0x58]
c0023205:	d9 e8                	fld1   
c0023207:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002320b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002320f:	d1 f8                	sar    eax,1
c0023211:	31 f6                	xor    esi,esi
c0023213:	0d 00 00 00 20       	or     eax,0x20000000
c0023218:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c002321c:	8d 84 02 00 00 08 00 	lea    eax,[edx+eax*1+0x80000]
c0023223:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0023227:	31 ff                	xor    edi,edi
c0023229:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002322d:	d9 c0                	fld    st(0)
c002322f:	d8 e2                	fsub   st,st(2)
c0023231:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023235:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023239:	d9 c1                	fld    st(1)
c002323b:	d8 c3                	fadd   st,st(3)
c002323d:	d8 3d 80 ae 02 c0    	fdivr  DWORD PTR ds:0xc002ae80
c0023243:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023247:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002324b:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c002324f:	d9 c0                	fld    st(0)
c0023251:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0023255:	de ca                	fmulp  st(2),st
c0023257:	d9 c9                	fxch   st(1)
c0023259:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002325d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0023261:	89 6c 24 34          	mov    DWORD PTR [esp+0x34],ebp
c0023265:	31 ed                	xor    ebp,ebp
c0023267:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c002326b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c002326f:	31 c0                	xor    eax,eax
c0023271:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
c0023275:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0023279:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002327d:	d9 c0                	fld    st(0)
c002327f:	d8 c9                	fmul   st,st(1)
c0023281:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023285:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023289:	d9 c2                	fld    st(2)
c002328b:	d8 cc                	fmul   st,st(4)
c002328d:	de ed                	fsubp  st(5),st
c002328f:	d9 ca                	fxch   st(2)
c0023291:	de e6                	fsubrp st(6),st
c0023293:	d9 cc                	fxch   st(4)
c0023295:	de e5                	fsubrp st(5),st
c0023297:	d9 cc                	fxch   st(4)
c0023299:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002329d:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00232a1:	d8 c9                	fmul   st,st(1)
c00232a3:	de ea                	fsubp  st(2),st
c00232a5:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c00232a9:	de ca                	fmulp  st(2),st
c00232ab:	d9 c9                	fxch   st(1)
c00232ad:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00232b1:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00232b5:	d9 c3                	fld    st(3)
c00232b7:	dc 0d 68 af 02 c0    	fmul   QWORD PTR ds:0xc002af68
c00232bd:	dc 05 70 af 02 c0    	fadd   QWORD PTR ds:0xc002af70
c00232c3:	d8 cc                	fmul   st,st(4)
c00232c5:	dc 05 78 af 02 c0    	fadd   QWORD PTR ds:0xc002af78
c00232cb:	d8 cc                	fmul   st,st(4)
c00232cd:	dc 05 80 af 02 c0    	fadd   QWORD PTR ds:0xc002af80
c00232d3:	d8 cc                	fmul   st,st(4)
c00232d5:	dc 05 88 af 02 c0    	fadd   QWORD PTR ds:0xc002af88
c00232db:	d8 cc                	fmul   st,st(4)
c00232dd:	dc 05 90 af 02 c0    	fadd   QWORD PTR ds:0xc002af90
c00232e3:	d9 cc                	fxch   st(4)
c00232e5:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00232e9:	d8 c8                	fmul   st,st(0)
c00232eb:	de cc                	fmulp  st(4),st
c00232ed:	d9 cb                	fxch   st(3)
c00232ef:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00232f3:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00232f7:	d9 c1                	fld    st(1)
c00232f9:	d8 c3                	fadd   st,st(3)
c00232fb:	d8 cc                	fmul   st,st(4)
c00232fd:	de c1                	faddp  st(1),st
c00232ff:	d9 c1                	fld    st(1)
c0023301:	d8 ca                	fmul   st,st(2)
c0023303:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023307:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002330b:	d9 c9                	fxch   st(1)
c002330d:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023311:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023315:	d9 05 e4 ae 02 c0    	fld    DWORD PTR ds:0xc002aee4
c002331b:	d9 c2                	fld    st(2)
c002331d:	d8 c1                	fadd   st,st(1)
c002331f:	d8 c2                	fadd   st,st(2)
c0023321:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023325:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0023329:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002332d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023331:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023335:	31 c0                	xor    eax,eax
c0023337:	dc cc                	fmul   st(4),st
c0023339:	d9 cc                	fxch   st(4)
c002333b:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002333f:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023343:	d9 c9                	fxch   st(1)
c0023345:	d8 ec                	fsubr  st,st(4)
c0023347:	de e3                	fsubrp st(3),st
c0023349:	d9 c9                	fxch   st(1)
c002334b:	de e2                	fsubrp st(2),st
c002334d:	d9 c9                	fxch   st(1)
c002334f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023353:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023357:	de cb                	fmulp  st(3),st
c0023359:	d9 cb                	fxch   st(3)
c002335b:	de c9                	fmulp  st(1),st
c002335d:	de c1                	faddp  st(1),st
c002335f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023363:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023367:	d9 c1                	fld    st(1)
c0023369:	d8 c1                	fadd   st,st(1)
c002336b:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002336f:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0023373:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0023377:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002337b:	d9 c0                	fld    st(0)
c002337d:	d8 0d e8 ae 02 c0    	fmul   DWORD PTR ds:0xc002aee8
c0023383:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023387:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002338b:	d9 cb                	fxch   st(3)
c002338d:	d8 e9                	fsubr  st,st(1)
c002338f:	de ea                	fsubp  st(2),st
c0023391:	d9 c9                	fxch   st(1)
c0023393:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023397:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002339b:	dc 0d 98 af 02 c0    	fmul   QWORD PTR ds:0xc002af98
c00233a1:	d9 c9                	fxch   st(1)
c00233a3:	dc 0d a0 af 02 c0    	fmul   QWORD PTR ds:0xc002afa0
c00233a9:	de c1                	faddp  st(1),st
c00233ab:	db 6c 24 58          	fld    TBYTE PTR [esp+0x58]
c00233af:	de c1                	faddp  st(1),st
c00233b1:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00233b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00233b9:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00233bd:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c00233c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00233c5:	d9 c2                	fld    st(2)
c00233c7:	d8 c2                	fadd   st,st(2)
c00233c9:	db 6c 24 68          	fld    TBYTE PTR [esp+0x68]
c00233cd:	dc c1                	fadd   st(1),st
c00233cf:	d9 c9                	fxch   st(1)
c00233d1:	d8 c2                	fadd   st,st(2)
c00233d3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00233d7:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00233db:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00233df:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00233e3:	dc e2                	fsubr  st(2),st
c00233e5:	d9 ca                	fxch   st(2)
c00233e7:	de e1                	fsubrp st(1),st
c00233e9:	de e3                	fsubrp st(3),st
c00233eb:	d9 ca                	fxch   st(2)
c00233ed:	de e9                	fsubp  st(1),st
c00233ef:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00233f3:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00233f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00233fb:	31 db                	xor    ebx,ebx
c00233fd:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0023401:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0023405:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023409:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002340d:	d9 c0                	fld    st(0)
c002340f:	d8 e2                	fsub   st,st(2)
c0023411:	d8 cc                	fmul   st,st(4)
c0023413:	d9 c9                	fxch   st(1)
c0023415:	de cb                	fmulp  st(3),st
c0023417:	de c2                	faddp  st(2),st
c0023419:	d9 c9                	fxch   st(1)
c002341b:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002341f:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023423:	d9 ca                	fxch   st(2)
c0023425:	de c9                	fmulp  st(1),st
c0023427:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002342b:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002342f:	d9 c1                	fld    st(1)
c0023431:	d8 c1                	fadd   st,st(1)
c0023433:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023437:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c002343b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c002343f:	81 fa ff ff 8f 40    	cmp    edx,0x408fffff
c0023445:	89 d3                	mov    ebx,edx
c0023447:	0f 8e 38 02 00 00    	jle    c0023685 <pow+0x825>
c002344d:	8d 8a 00 00 70 bf    	lea    ecx,[edx-0x40900000]
c0023453:	09 c1                	or     ecx,eax
c0023455:	0f 85 f6 03 00 00    	jne    c0023851 <pow+0x9f1>
c002345b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002345f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0023463:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023467:	d8 e1                	fsub   st,st(1)
c0023469:	d9 c2                	fld    st(2)
c002346b:	dc 05 a8 af 02 c0    	fadd   QWORD PTR ds:0xc002afa8
c0023471:	df f1                	fcomip st,st(1)
c0023473:	dd d8                	fstp   st(0)
c0023475:	0f 87 2a 04 00 00    	ja     c00238a5 <pow+0xa45>
c002347b:	89 d9                	mov    ecx,ebx
c002347d:	c1 f9 14             	sar    ecx,0x14
c0023480:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0023486:	81 e9 fe 03 00 00    	sub    ecx,0x3fe
c002348c:	b8 00 00 10 00       	mov    eax,0x100000
c0023491:	d3 f8                	sar    eax,cl
c0023493:	31 c9                	xor    ecx,ecx
c0023495:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0023499:	01 d8                	add    eax,ebx
c002349b:	be ff ff 0f 00       	mov    esi,0xfffff
c00234a0:	89 c2                	mov    edx,eax
c00234a2:	c1 fa 14             	sar    edx,0x14
c00234a5:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00234ab:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00234b1:	88 d1                	mov    cl,dl
c00234b3:	d3 fe                	sar    esi,cl
c00234b5:	b9 14 00 00 00       	mov    ecx,0x14
c00234ba:	f7 d6                	not    esi
c00234bc:	29 d1                	sub    ecx,edx
c00234be:	21 c6                	and    esi,eax
c00234c0:	25 ff ff 0f 00       	and    eax,0xfffff
c00234c5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00234c9:	0d 00 00 10 00       	or     eax,0x100000
c00234ce:	d3 f8                	sar    eax,cl
c00234d0:	85 db                	test   ebx,ebx
c00234d2:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00234d6:	89 c1                	mov    ecx,eax
c00234d8:	79 02                	jns    c00234dc <pow+0x67c>
c00234da:	f7 d9                	neg    ecx
c00234dc:	de e9                	fsubp  st(1),st
c00234de:	89 ce                	mov    esi,ecx
c00234e0:	c1 e6 14             	shl    esi,0x14
c00234e3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00234e7:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00234eb:	d9 c1                	fld    st(1)
c00234ed:	d8 c1                	fadd   st,st(1)
c00234ef:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00234f3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00234f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00234fb:	31 c0                	xor    eax,eax
c00234fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023501:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023505:	d9 c0                	fld    st(0)
c0023507:	d8 0d ec ae 02 c0    	fmul   DWORD PTR ds:0xc002aeec
c002350d:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023511:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023515:	d9 ca                	fxch   st(2)
c0023517:	d8 e9                	fsubr  st,st(1)
c0023519:	de eb                	fsubp  st(3),st
c002351b:	d9 ca                	fxch   st(2)
c002351d:	dc 0d b0 af 02 c0    	fmul   QWORD PTR ds:0xc002afb0
c0023523:	d9 ca                	fxch   st(2)
c0023525:	dc 0d b8 af 02 c0    	fmul   QWORD PTR ds:0xc002afb8
c002352b:	de c2                	faddp  st(2),st
c002352d:	d9 c9                	fxch   st(1)
c002352f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023533:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023537:	d9 c1                	fld    st(1)
c0023539:	d8 c1                	fadd   st,st(1)
c002353b:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002353f:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023543:	d9 c0                	fld    st(0)
c0023545:	d8 c9                	fmul   st,st(1)
c0023547:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002354b:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002354f:	d9 c0                	fld    st(0)
c0023551:	dc 0d c0 af 02 c0    	fmul   QWORD PTR ds:0xc002afc0
c0023557:	dc 25 c8 af 02 c0    	fsub   QWORD PTR ds:0xc002afc8
c002355d:	d8 c9                	fmul   st,st(1)
c002355f:	dc 05 d0 af 02 c0    	fadd   QWORD PTR ds:0xc002afd0
c0023565:	d8 c9                	fmul   st,st(1)
c0023567:	dc 25 d8 af 02 c0    	fsub   QWORD PTR ds:0xc002afd8
c002356d:	d8 c9                	fmul   st,st(1)
c002356f:	dc 05 e0 af 02 c0    	fadd   QWORD PTR ds:0xc002afe0
c0023575:	de c9                	fmulp  st(1),st
c0023577:	d8 e9                	fsubr  st,st(1)
c0023579:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002357d:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023581:	d9 cb                	fxch   st(3)
c0023583:	d8 e9                	fsubr  st,st(1)
c0023585:	de ea                	fsubp  st(2),st
c0023587:	d9 c9                	fxch   st(1)
c0023589:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002358d:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023591:	d9 c1                	fld    st(1)
c0023593:	d8 cb                	fmul   st,st(3)
c0023595:	d9 cb                	fxch   st(3)
c0023597:	d8 25 f0 ae 02 c0    	fsub   DWORD PTR ds:0xc002aef0
c002359d:	de fb                	fdivp  st(3),st
c002359f:	d9 c1                	fld    st(1)
c00235a1:	d8 c9                	fmul   st,st(1)
c00235a3:	de c1                	faddp  st(1),st
c00235a5:	de ea                	fsubp  st(2),st
c00235a7:	d9 c9                	fxch   st(1)
c00235a9:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00235ad:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00235b1:	de e1                	fsubrp st(1),st
c00235b3:	d8 2d 80 ae 02 c0    	fsubr  DWORD PTR ds:0xc002ae80
c00235b9:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00235bd:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00235c1:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00235c5:	89 d3                	mov    ebx,edx
c00235c7:	01 f3                	add    ebx,esi
c00235c9:	81 fb ff ff 0f 00    	cmp    ebx,0xfffff
c00235cf:	0f 8e a7 02 00 00    	jle    c002387c <pow+0xa1c>
c00235d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00235d9:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00235dd:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00235e1:	db 6c 24 38          	fld    TBYTE PTR [esp+0x38]
c00235e5:	de c9                	fmulp  st(1),st
c00235e7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00235eb:	e9 e0 f8 ff ff       	jmp    c0022ed0 <pow+0x70>
c00235f0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00235f4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00235f7:	e8 74 0f 00 00       	call   c0024570 <fabs>
c00235fc:	85 ed                	test   ebp,ebp
c00235fe:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023602:	0f 85 55 fb ff ff    	jne    c002315d <pow+0x2fd>
c0023608:	89 f8                	mov    eax,edi
c002360a:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002360f:	3d 00 00 f0 3f       	cmp    eax,0x3ff00000
c0023614:	74 0b                	je     c0023621 <pow+0x7c1>
c0023616:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002361b:	0f 85 3c fb ff ff    	jne    c002315d <pow+0x2fd>
c0023621:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0023629:	85 f6                	test   esi,esi
c002362b:	79 0a                	jns    c0023637 <pow+0x7d7>
c002362d:	d9 e8                	fld1   
c002362f:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0023633:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023637:	85 ff                	test   edi,edi
c0023639:	0f 89 91 f8 ff ff    	jns    c0022ed0 <pow+0x70>
c002363f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023643:	2d 00 00 f0 3f       	sub    eax,0x3ff00000
c0023648:	0b 44 24 38          	or     eax,DWORD PTR [esp+0x38]
c002364c:	0f 85 10 02 00 00    	jne    c0023862 <pow+0xa02>
c0023652:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023656:	d8 e0                	fsub   st,st(0)
c0023658:	d8 f0                	fdiv   st,st(0)
c002365a:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002365e:	e9 6d f8 ff ff       	jmp    c0022ed0 <pow+0x70>
c0023663:	d9 e8                	fld1   
c0023665:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023669:	e9 62 f8 ff ff       	jmp    c0022ed0 <pow+0x70>
c002366e:	85 f6                	test   esi,esi
c0023670:	0f 89 03 fa ff ff    	jns    c0023079 <pow+0x219>
c0023676:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002367a:	d9 e0                	fchs   
c002367c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023680:	e9 4b f8 ff ff       	jmp    c0022ed0 <pow+0x70>
c0023685:	89 d1                	mov    ecx,edx
c0023687:	81 e1 ff ff ff 7f    	and    ecx,0x7fffffff
c002368d:	81 f9 ff cb 90 40    	cmp    ecx,0x4090cbff
c0023693:	0f 8e 4f 01 00 00    	jle    c00237e8 <pow+0x988>
c0023699:	8d 8a 00 34 6f 3f    	lea    ecx,[edx+0x3f6f3400]
c002369f:	09 c1                	or     ecx,eax
c00236a1:	0f 85 55 02 00 00    	jne    c00238fc <pow+0xa9c>
c00236a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00236ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00236af:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00236b3:	d8 e1                	fsub   st,st(1)
c00236b5:	df f2                	fcomip st,st(2)
c00236b7:	0f 82 be fd ff ff    	jb     c002347b <pow+0x61b>
c00236bd:	dd d8                	fstp   st(0)
c00236bf:	dd d8                	fstp   st(0)
c00236c1:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c00236c5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00236c9:	e9 02 f8 ff ff       	jmp    c0022ed0 <pow+0x70>
c00236ce:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00236d2:	d8 c8                	fmul   st,st(0)
c00236d4:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00236d8:	e9 f3 f7 ff ff       	jmp    c0022ed0 <pow+0x70>
c00236dd:	d9 ee                	fldz   
c00236df:	31 d2                	xor    edx,edx
c00236e1:	db 7c 24 68          	fstp   TBYTE PTR [esp+0x68]
c00236e5:	d9 ee                	fldz   
c00236e7:	db 7c 24 58          	fstp   TBYTE PTR [esp+0x58]
c00236eb:	d9 e8                	fld1   
c00236ed:	e9 15 fb ff ff       	jmp    c0023207 <pow+0x3a7>
c00236f2:	81 7c 24 30 fe ff ef 3f 	cmp    DWORD PTR [esp+0x30],0x3feffffe
c00236fa:	0f 8e 91 01 00 00    	jle    c0023891 <pow+0xa31>
c0023700:	81 7c 24 30 00 00 f0 3f 	cmp    DWORD PTR [esp+0x30],0x3ff00000
c0023708:	0f 8f da 01 00 00    	jg     c00238e8 <pow+0xa88>
c002370e:	dd d8                	fstp   st(0)
c0023710:	dd d8                	fstp   st(0)
c0023712:	d9 e8                	fld1   
c0023714:	31 c0                	xor    eax,eax
c0023716:	dc 6c 24 28          	fsubr  QWORD PTR [esp+0x28]
c002371a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002371e:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023722:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023726:	d9 c0                	fld    st(0)
c0023728:	d8 0d d8 ae 02 c0    	fmul   DWORD PTR ds:0xc002aed8
c002372e:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023732:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023736:	d9 c1                	fld    st(1)
c0023738:	dc 0d 58 af 02 c0    	fmul   QWORD PTR ds:0xc002af58
c002373e:	d9 c2                	fld    st(2)
c0023740:	d8 0d dc ae 02 c0    	fmul   DWORD PTR ds:0xc002aedc
c0023746:	db 2d 40 af 02 c0    	fld    TBYTE PTR ds:0xc002af40
c002374c:	de e1                	fsubrp st(1),st
c002374e:	d8 cb                	fmul   st,st(3)
c0023750:	d8 2d 84 ae 02 c0    	fsubr  DWORD PTR ds:0xc002ae84
c0023756:	d9 cb                	fxch   st(3)
c0023758:	d8 c8                	fmul   st,st(0)
c002375a:	de cb                	fmulp  st(3),st
c002375c:	d9 ca                	fxch   st(2)
c002375e:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023762:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023766:	dc 0d 60 af 02 c0    	fmul   QWORD PTR ds:0xc002af60
c002376c:	de ea                	fsubp  st(2),st
c002376e:	d9 c9                	fxch   st(1)
c0023770:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023774:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023778:	d9 c1                	fld    st(1)
c002377a:	d8 c1                	fadd   st,st(1)
c002377c:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023780:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0023784:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0023788:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002378c:	dc e2                	fsubr  st(2),st
c002378e:	d9 c9                	fxch   st(1)
c0023790:	de e2                	fsubrp st(2),st
c0023792:	d9 c9                	fxch   st(1)
c0023794:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023798:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002379c:	e9 56 fc ff ff       	jmp    c00233f7 <pow+0x597>
c00237a1:	85 c0                	test   eax,eax
c00237a3:	0f 85 47 fe ff ff    	jne    c00235f0 <pow+0x790>
c00237a9:	b8 14 00 00 00       	mov    eax,0x14
c00237ae:	29 c8                	sub    eax,ecx
c00237b0:	89 c1                	mov    ecx,eax
c00237b2:	89 d8                	mov    eax,ebx
c00237b4:	d3 f8                	sar    eax,cl
c00237b6:	89 c2                	mov    edx,eax
c00237b8:	d3 e2                	shl    edx,cl
c00237ba:	39 da                	cmp    edx,ebx
c00237bc:	0f 85 bc f7 ff ff    	jne    c0022f7e <pow+0x11e>
c00237c2:	83 e0 01             	and    eax,0x1
c00237c5:	b9 02 00 00 00       	mov    ecx,0x2
c00237ca:	29 c1                	sub    ecx,eax
c00237cc:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00237d0:	e9 a9 f7 ff ff       	jmp    c0022f7e <pow+0x11e>
c00237d5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00237d9:	d9 c0                	fld    st(0)
c00237db:	d8 c9                	fmul   st,st(1)
c00237dd:	de c9                	fmulp  st(1),st
c00237df:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00237e3:	e9 e8 f6 ff ff       	jmp    c0022ed0 <pow+0x70>
c00237e8:	81 f9 00 00 e0 3f    	cmp    ecx,0x3fe00000
c00237ee:	0f 8f 28 01 00 00    	jg     c002391c <pow+0xabc>
c00237f4:	31 f6                	xor    esi,esi
c00237f6:	31 c9                	xor    ecx,ecx
c00237f8:	e9 fa fc ff ff       	jmp    c00234f7 <pow+0x697>
c00237fd:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023801:	d8 c8                	fmul   st,st(0)
c0023803:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023807:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002380b:	d8 c8                	fmul   st,st(0)
c002380d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023811:	e9 ba f6 ff ff       	jmp    c0022ed0 <pow+0x70>
c0023816:	d9 05 d0 ae 02 c0    	fld    DWORD PTR ds:0xc002aed0
c002381c:	ba 00 00 04 00       	mov    edx,0x40000
c0023821:	db 7c 24 68          	fstp   TBYTE PTR [esp+0x68]
c0023825:	dd 05 50 af 02 c0    	fld    QWORD PTR ds:0xc002af50
c002382b:	db 7c 24 58          	fstp   TBYTE PTR [esp+0x58]
c002382f:	d9 05 d4 ae 02 c0    	fld    DWORD PTR ds:0xc002aed4
c0023835:	e9 cd f9 ff ff       	jmp    c0023207 <pow+0x3a7>
c002383a:	85 f6                	test   esi,esi
c002383c:	0f 8e 37 f8 ff ff    	jle    c0023079 <pow+0x219>
c0023842:	d9 05 c8 ae 02 c0    	fld    DWORD PTR ds:0xc002aec8
c0023848:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002384c:	e9 7f f6 ff ff       	jmp    c0022ed0 <pow+0x70>
c0023851:	dd d8                	fstp   st(0)
c0023853:	dd d8                	fstp   st(0)
c0023855:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0023859:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002385d:	e9 6e f6 ff ff       	jmp    c0022ed0 <pow+0x70>
c0023862:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0023867:	0f 85 63 f6 ff ff    	jne    c0022ed0 <pow+0x70>
c002386d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023871:	d9 e0                	fchs   
c0023873:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023877:	e9 54 f6 ff ff       	jmp    c0022ed0 <pow+0x70>
c002387c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023880:	89 04 24             	mov    DWORD PTR [esp],eax
c0023883:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0023887:	e8 c0 13 00 00       	call   c0024c4c <ldexp>
c002388c:	e9 50 fd ff ff       	jmp    c00235e1 <pow+0x781>
c0023891:	85 f6                	test   esi,esi
c0023893:	0f 99 c0             	setns  al
c0023896:	84 c0                	test   al,al
c0023898:	db c9                	fcmovne st,st(1)
c002389a:	dd d9                	fstp   st(1)
c002389c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00238a0:	e9 2b f6 ff ff       	jmp    c0022ed0 <pow+0x70>
c00238a5:	dd d8                	fstp   st(0)
c00238a7:	dd d8                	fstp   st(0)
c00238a9:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00238ad:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00238b1:	e9 1a f6 ff ff       	jmp    c0022ed0 <pow+0x70>
c00238b6:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c00238bd:	8b b4 24 90 00 00 00 	mov    esi,DWORD PTR [esp+0x90]
c00238c4:	8b bc 24 94 00 00 00 	mov    edi,DWORD PTR [esp+0x94]
c00238cb:	8b ac 24 98 00 00 00 	mov    ebp,DWORD PTR [esp+0x98]
c00238d2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00238d6:	dd 9c 24 a0 00 00 00 	fstp   QWORD PTR [esp+0xa0]
c00238dd:	81 c4 9c 00 00 00    	add    esp,0x9c
c00238e3:	e9 d8 12 00 00       	jmp    c0024bc0 <sqrt>
c00238e8:	85 f6                	test   esi,esi
c00238ea:	0f 9e c0             	setle  al
c00238ed:	84 c0                	test   al,al
c00238ef:	db c9                	fcmovne st,st(1)
c00238f1:	dd d9                	fstp   st(1)
c00238f3:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00238f7:	e9 d4 f5 ff ff       	jmp    c0022ed0 <pow+0x70>
c00238fc:	dd d8                	fstp   st(0)
c00238fe:	dd d8                	fstp   st(0)
c0023900:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0023904:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023908:	e9 c3 f5 ff ff       	jmp    c0022ed0 <pow+0x70>
c002390d:	d9 05 c8 ae 02 c0    	fld    DWORD PTR ds:0xc002aec8
c0023913:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023917:	e9 b4 f5 ff ff       	jmp    c0022ed0 <pow+0x70>
c002391c:	c1 f9 14             	sar    ecx,0x14
c002391f:	e9 62 fb ff ff       	jmp    c0023486 <pow+0x626>
c0023924:	66 90                	xchg   ax,ax
c0023926:	66 90                	xchg   ax,ax
c0023928:	66 90                	xchg   ax,ax
c002392a:	66 90                	xchg   ax,ax
c002392c:	66 90                	xchg   ax,ax
c002392e:	66 90                	xchg   ax,ax

c0023930 <sinh>:
c0023930:	53                   	push   ebx
c0023931:	83 ec 38             	sub    esp,0x38
c0023934:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0023938:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c002393c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023940:	89 c3                	mov    ebx,eax
c0023942:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0023948:	81 fb ff ff ef 7f    	cmp    ebx,0x7fefffff
c002394e:	0f 8f ec 00 00 00    	jg     c0023a40 <sinh+0x110>
c0023954:	dd d8                	fstp   st(0)
c0023956:	d9 e8                	fld1   
c0023958:	85 c0                	test   eax,eax
c002395a:	0f 88 90 00 00 00    	js     c00239f0 <sinh+0xc0>
c0023960:	81 fb ff ff 35 40    	cmp    ebx,0x4035ffff
c0023966:	d9 05 84 ae 02 c0    	fld    DWORD PTR ds:0xc002ae84
c002396c:	0f 8f 8e 00 00 00    	jg     c0023a00 <sinh+0xd0>
c0023972:	dd d9                	fstp   st(1)
c0023974:	eb 0c                	jmp    c0023982 <sinh+0x52>
c0023976:	8d 76 00             	lea    esi,[esi+0x0]
c0023979:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023980:	dd d9                	fstp   st(1)
c0023982:	81 fb ff ff 2f 3e    	cmp    ebx,0x3e2fffff
c0023988:	0f 8f d2 00 00 00    	jg     c0023a60 <sinh+0x130>
c002398e:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023992:	d9 e8                	fld1   
c0023994:	d9 c1                	fld    st(1)
c0023996:	dc 05 f0 af 02 c0    	fadd   QWORD PTR ds:0xc002aff0
c002399c:	df f1                	fcomip st,st(1)
c002399e:	dd d8                	fstp   st(0)
c00239a0:	77 3e                	ja     c00239e0 <sinh+0xb0>
c00239a2:	dd d8                	fstp   st(0)
c00239a4:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c00239a8:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00239ac:	dd 1c 24             	fstp   QWORD PTR [esp]
c00239af:	e8 bc 0b 00 00       	call   c0024570 <fabs>
c00239b4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00239b7:	e8 24 07 00 00       	call   c00240e0 <expm1>
c00239bc:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c00239c0:	d9 c1                	fld    st(1)
c00239c2:	d8 c2                	fadd   st,st(2)
c00239c4:	d9 c2                	fld    st(2)
c00239c6:	d8 cb                	fmul   st,st(3)
c00239c8:	d9 cb                	fxch   st(3)
c00239ca:	d8 05 80 ae 02 c0    	fadd   DWORD PTR ds:0xc002ae80
c00239d0:	de fb                	fdivp  st(3),st
c00239d2:	de e2                	fsubrp st(2),st
c00239d4:	de c9                	fmulp  st(1),st
c00239d6:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00239da:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00239de:	eb 02                	jmp    c00239e2 <sinh+0xb2>
c00239e0:	dd d9                	fstp   st(1)
c00239e2:	83 c4 38             	add    esp,0x38
c00239e5:	5b                   	pop    ebx
c00239e6:	c3                   	ret    
c00239e7:	89 f6                	mov    esi,esi
c00239e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00239f0:	d9 e0                	fchs   
c00239f2:	81 fb ff ff 35 40    	cmp    ebx,0x4035ffff
c00239f8:	d9 05 e8 af 02 c0    	fld    DWORD PTR ds:0xc002afe8
c00239fe:	7e 80                	jle    c0023980 <sinh+0x50>
c0023a00:	81 fb 41 2e 86 40    	cmp    ebx,0x40862e41
c0023a06:	0f 8e a4 00 00 00    	jle    c0023ab0 <sinh+0x180>
c0023a0c:	dd d8                	fstp   st(0)
c0023a0e:	81 fb ce 33 86 40    	cmp    ebx,0x408633ce
c0023a14:	0f 8e c6 00 00 00    	jle    c0023ae0 <sinh+0x1b0>
c0023a1a:	dd d8                	fstp   st(0)
c0023a1c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023a20:	dc 0d f0 af 02 c0    	fmul   QWORD PTR ds:0xc002aff0
c0023a26:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023a2a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023a2e:	83 c4 38             	add    esp,0x38
c0023a31:	5b                   	pop    ebx
c0023a32:	c3                   	ret    
c0023a33:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0023a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023a40:	d9 c0                	fld    st(0)
c0023a42:	de c1                	faddp  st(1),st
c0023a44:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023a48:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023a4c:	83 c4 38             	add    esp,0x38
c0023a4f:	5b                   	pop    ebx
c0023a50:	c3                   	ret    
c0023a51:	eb 0d                	jmp    c0023a60 <sinh+0x130>
c0023a53:	90                   	nop
c0023a54:	90                   	nop
c0023a55:	90                   	nop
c0023a56:	90                   	nop
c0023a57:	90                   	nop
c0023a58:	90                   	nop
c0023a59:	90                   	nop
c0023a5a:	90                   	nop
c0023a5b:	90                   	nop
c0023a5c:	90                   	nop
c0023a5d:	90                   	nop
c0023a5e:	90                   	nop
c0023a5f:	90                   	nop
c0023a60:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0023a64:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023a68:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023a6b:	e8 00 0b 00 00       	call   c0024570 <fabs>
c0023a70:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023a73:	e8 68 06 00 00       	call   c00240e0 <expm1>
c0023a78:	81 fb ff ff ef 3f    	cmp    ebx,0x3fefffff
c0023a7e:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0023a82:	0f 8e 38 ff ff ff    	jle    c00239c0 <sinh+0x90>
c0023a88:	d9 c1                	fld    st(1)
c0023a8a:	d8 05 80 ae 02 c0    	fadd   DWORD PTR ds:0xc002ae80
c0023a90:	d8 fa                	fdivr  st,st(2)
c0023a92:	de c2                	faddp  st(2),st
c0023a94:	de c9                	fmulp  st(1),st
c0023a96:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023a9a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023a9e:	83 c4 38             	add    esp,0x38
c0023aa1:	5b                   	pop    ebx
c0023aa2:	c3                   	ret    
c0023aa3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0023aa9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023ab0:	dd d9                	fstp   st(1)
c0023ab2:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0023ab6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023aba:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023abd:	e8 ae 0a 00 00       	call   c0024570 <fabs>
c0023ac2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023ac5:	e8 5e 10 00 00       	call   c0024b28 <exp>
c0023aca:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0023ace:	de c9                	fmulp  st(1),st
c0023ad0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023ad4:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023ad8:	e9 05 ff ff ff       	jmp    c00239e2 <sinh+0xb2>
c0023add:	8d 76 00             	lea    esi,[esi+0x0]
c0023ae0:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0023ae4:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023ae8:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023aeb:	e8 80 0a 00 00       	call   c0024570 <fabs>
c0023af0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0023af5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023af9:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023afc:	e8 1f 00 00 00       	call   c0023b20 <__ldexp_exp>
c0023b01:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0023b05:	de c9                	fmulp  st(1),st
c0023b07:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023b0b:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023b0f:	e9 ce fe ff ff       	jmp    c00239e2 <sinh+0xb2>
c0023b14:	66 90                	xchg   ax,ax
c0023b16:	66 90                	xchg   ax,ax
c0023b18:	66 90                	xchg   ax,ax
c0023b1a:	66 90                	xchg   ax,ax
c0023b1c:	66 90                	xchg   ax,ax
c0023b1e:	66 90                	xchg   ax,ax

c0023b20 <__ldexp_exp>:
c0023b20:	53                   	push   ebx
c0023b21:	83 ec 28             	sub    esp,0x28
c0023b24:	dd 05 f8 af 02 c0    	fld    QWORD PTR ds:0xc002aff8
c0023b2a:	dc 6c 24 30          	fsubr  QWORD PTR [esp+0x30]
c0023b2e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023b31:	e8 f2 0f 00 00       	call   c0024b28 <exp>
c0023b36:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0023b3a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0023b3e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023b42:	89 da                	mov    edx,ebx
c0023b44:	89 d8                	mov    eax,ebx
c0023b46:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0023b4a:	c1 e8 14             	shr    eax,0x14
c0023b4d:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0023b53:	81 ca 00 00 e0 7f    	or     edx,0x7fe00000
c0023b59:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0023b5d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0023b61:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023b65:	8d 84 02 08 03 00 00 	lea    eax,[edx+eax*1+0x308]
c0023b6c:	c1 e0 14             	shl    eax,0x14
c0023b6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023b73:	31 c0                	xor    eax,eax
c0023b75:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023b79:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023b7d:	de c9                	fmulp  st(1),st
c0023b7f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023b83:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023b87:	83 c4 28             	add    esp,0x28
c0023b8a:	5b                   	pop    ebx
c0023b8b:	c3                   	ret    
c0023b8c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0023b90 <__ldexp_cexp>:
c0023b90:	57                   	push   edi
c0023b91:	56                   	push   esi
c0023b92:	53                   	push   ebx
c0023b93:	83 ec 60             	sub    esp,0x60
c0023b96:	dd 44 24 7c          	fld    QWORD PTR [esp+0x7c]
c0023b9a:	dd 44 24 74          	fld    QWORD PTR [esp+0x74]
c0023b9e:	dd 14 24             	fst    QWORD PTR [esp]
c0023ba1:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0023ba5:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0023ba9:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0023bad:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023bb1:	e8 6a 0f 00 00       	call   c0024b20 <creal>
c0023bb6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0023bba:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0023bbe:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023bc1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023bc5:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0023bc9:	e8 42 0f 00 00       	call   c0024b10 <cimag>
c0023bce:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023bd2:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023bd6:	dc 25 f8 af 02 c0    	fsub   QWORD PTR ds:0xc002aff8
c0023bdc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023bdf:	e8 44 0f 00 00       	call   c0024b28 <exp>
c0023be4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0023be8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0023bec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023bf0:	89 fa                	mov    edx,edi
c0023bf2:	89 f8                	mov    eax,edi
c0023bf4:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0023bf8:	c1 e8 14             	shr    eax,0x14
c0023bfb:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0023c01:	81 ca 00 00 e0 7f    	or     edx,0x7fe00000
c0023c07:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0023c0b:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0023c12:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023c16:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0023c1a:	8d 94 02 09 ff ff ff 	lea    edx,[edx+eax*1-0xf7]
c0023c21:	89 d1                	mov    ecx,edx
c0023c23:	c1 e9 1f             	shr    ecx,0x1f
c0023c26:	01 d1                	add    ecx,edx
c0023c28:	d1 f9                	sar    ecx,1
c0023c2a:	8d 81 ff 03 00 00    	lea    eax,[ecx+0x3ff]
c0023c30:	29 ca                	sub    edx,ecx
c0023c32:	c1 e0 14             	shl    eax,0x14
c0023c35:	81 c2 ff 03 00 00    	add    edx,0x3ff
c0023c3b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023c3f:	c1 e2 14             	shl    edx,0x14
c0023c42:	31 c0                	xor    eax,eax
c0023c44:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023c48:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023c4c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0023c50:	31 d2                	xor    edx,edx
c0023c52:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0023c56:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0023c5a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023c5e:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0023c62:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023c66:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023c69:	e8 12 03 00 00       	call   c0023f80 <cos>
c0023c6e:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0023c72:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0023c76:	db 7c 24 48          	fstp   TBYTE PTR [esp+0x48]
c0023c7a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0023c7e:	db 7c 24 38          	fstp   TBYTE PTR [esp+0x38]
c0023c82:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0023c86:	db 7c 24 20          	fstp   TBYTE PTR [esp+0x20]
c0023c8a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023c8e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023c91:	e8 fa 0b 00 00       	call   c0024890 <sin>
c0023c96:	89 d8                	mov    eax,ebx
c0023c98:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023c9c:	db 6c 24 48          	fld    TBYTE PTR [esp+0x48]
c0023ca0:	dc c9                	fmul   st(1),st
c0023ca2:	db 6c 24 38          	fld    TBYTE PTR [esp+0x38]
c0023ca6:	dc ca                	fmul   st(2),st
c0023ca8:	db 6c 24 20          	fld    TBYTE PTR [esp+0x20]
c0023cac:	dc cb                	fmul   st(3),st
c0023cae:	d9 cb                	fxch   st(3)
c0023cb0:	dd 1b                	fstp   QWORD PTR [ebx]
c0023cb2:	d9 cb                	fxch   st(3)
c0023cb4:	de c9                	fmulp  st(1),st
c0023cb6:	de ca                	fmulp  st(2),st
c0023cb8:	de c9                	fmulp  st(1),st
c0023cba:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0023cbd:	83 c4 60             	add    esp,0x60
c0023cc0:	5b                   	pop    ebx
c0023cc1:	5e                   	pop    esi
c0023cc2:	5f                   	pop    edi
c0023cc3:	c2 04 00             	ret    0x4
c0023cc6:	66 90                	xchg   ax,ax
c0023cc8:	66 90                	xchg   ax,ax
c0023cca:	66 90                	xchg   ax,ax
c0023ccc:	66 90                	xchg   ax,ax
c0023cce:	66 90                	xchg   ax,ax

c0023cd0 <atan>:
c0023cd0:	56                   	push   esi
c0023cd1:	53                   	push   ebx
c0023cd2:	83 ec 24             	sub    esp,0x24
c0023cd5:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0023cd9:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0023cdd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0023ce1:	89 f3                	mov    ebx,esi
c0023ce3:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0023ce9:	81 fb ff ff 0f 44    	cmp    ebx,0x440fffff
c0023cef:	7e 5f                	jle    c0023d50 <atan+0x80>
c0023cf1:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c0023cf7:	7f 0a                	jg     c0023d03 <atan+0x33>
c0023cf9:	75 25                	jne    c0023d20 <atan+0x50>
c0023cfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cff:	85 c0                	test   eax,eax
c0023d01:	74 1d                	je     c0023d20 <atan+0x50>
c0023d03:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023d07:	d8 c0                	fadd   st,st(0)
c0023d09:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023d0d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023d11:	83 c4 24             	add    esp,0x24
c0023d14:	5b                   	pop    ebx
c0023d15:	5e                   	pop    esi
c0023d16:	c3                   	ret    
c0023d17:	89 f6                	mov    esi,esi
c0023d19:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023d20:	85 f6                	test   esi,esi
c0023d22:	dd 05 18 b0 02 c0    	fld    QWORD PTR ds:0xc002b018
c0023d28:	0f 8e 22 01 00 00    	jle    c0023e50 <atan+0x180>
c0023d2e:	dc 05 28 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae28
c0023d34:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023d38:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023d3c:	83 c4 24             	add    esp,0x24
c0023d3f:	5b                   	pop    ebx
c0023d40:	5e                   	pop    esi
c0023d41:	c3                   	ret    
c0023d42:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0023d49:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023d50:	81 fb ff ff db 3f    	cmp    ebx,0x3fdbffff
c0023d56:	0f 8f 34 01 00 00    	jg     c0023e90 <atan+0x1c0>
c0023d5c:	81 fb ff ff 3f 3e    	cmp    ebx,0x3e3fffff
c0023d62:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023d66:	0f 8e c4 00 00 00    	jle    c0023e30 <atan+0x160>
c0023d6c:	eb 04                	jmp    c0023d72 <atan+0xa2>
c0023d6e:	66 90                	xchg   ax,ax
c0023d70:	dd d8                	fstp   st(0)
c0023d72:	d9 ee                	fldz   
c0023d74:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0023d79:	d9 ee                	fldz   
c0023d7b:	d9 c2                	fld    st(2)
c0023d7d:	40                   	inc    eax
c0023d7e:	d8 cb                	fmul   st,st(3)
c0023d80:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023d84:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023d88:	d9 c0                	fld    st(0)
c0023d8a:	d8 c9                	fmul   st,st(1)
c0023d8c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023d90:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023d94:	d9 c0                	fld    st(0)
c0023d96:	dc 0d 48 b0 02 c0    	fmul   QWORD PTR ds:0xc002b048
c0023d9c:	dc 05 50 b0 02 c0    	fadd   QWORD PTR ds:0xc002b050
c0023da2:	d8 c9                	fmul   st,st(1)
c0023da4:	dc 05 58 b0 02 c0    	fadd   QWORD PTR ds:0xc002b058
c0023daa:	d8 c9                	fmul   st,st(1)
c0023dac:	dc 05 60 b0 02 c0    	fadd   QWORD PTR ds:0xc002b060
c0023db2:	d8 c9                	fmul   st,st(1)
c0023db4:	dc 05 68 b0 02 c0    	fadd   QWORD PTR ds:0xc002b068
c0023dba:	d8 c9                	fmul   st,st(1)
c0023dbc:	dc 05 70 b0 02 c0    	fadd   QWORD PTR ds:0xc002b070
c0023dc2:	de ca                	fmulp  st(2),st
c0023dc4:	d9 c9                	fxch   st(1)
c0023dc6:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023dca:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023dce:	d9 c1                	fld    st(1)
c0023dd0:	dc 0d 78 b0 02 c0    	fmul   QWORD PTR ds:0xc002b078
c0023dd6:	dc 25 80 b0 02 c0    	fsub   QWORD PTR ds:0xc002b080
c0023ddc:	d8 ca                	fmul   st,st(2)
c0023dde:	dc 25 88 b0 02 c0    	fsub   QWORD PTR ds:0xc002b088
c0023de4:	d8 ca                	fmul   st,st(2)
c0023de6:	dc 25 90 b0 02 c0    	fsub   QWORD PTR ds:0xc002b090
c0023dec:	d8 ca                	fmul   st,st(2)
c0023dee:	dc 25 98 b0 02 c0    	fsub   QWORD PTR ds:0xc002b098
c0023df4:	de ca                	fmulp  st(2),st
c0023df6:	d9 c9                	fxch   st(1)
c0023df8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023dfc:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023e00:	de c1                	faddp  st(1),st
c0023e02:	d8 cb                	fmul   st,st(3)
c0023e04:	74 6a                	je     c0023e70 <atan+0x1a0>
c0023e06:	85 f6                	test   esi,esi
c0023e08:	de e2                	fsubrp st(2),st
c0023e0a:	d9 c9                	fxch   st(1)
c0023e0c:	de e2                	fsubrp st(2),st
c0023e0e:	de e1                	fsubrp st(1),st
c0023e10:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023e14:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023e18:	0f 89 f3 fe ff ff    	jns    c0023d11 <atan+0x41>
c0023e1e:	d9 e0                	fchs   
c0023e20:	83 c4 24             	add    esp,0x24
c0023e23:	5b                   	pop    ebx
c0023e24:	5e                   	pop    esi
c0023e25:	c3                   	ret    
c0023e26:	8d 76 00             	lea    esi,[esi+0x0]
c0023e29:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023e30:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023e34:	d9 e8                	fld1   
c0023e36:	d9 c2                	fld    st(2)
c0023e38:	dc 05 90 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae90
c0023e3e:	df f1                	fcomip st,st(1)
c0023e40:	dd d8                	fstp   st(0)
c0023e42:	0f 86 28 ff ff ff    	jbe    c0023d70 <atan+0xa0>
c0023e48:	dd d9                	fstp   st(1)
c0023e4a:	e9 c2 fe ff ff       	jmp    c0023d11 <atan+0x41>
c0023e4f:	90                   	nop
c0023e50:	dd 05 a8 ae 02 c0    	fld    QWORD PTR ds:0xc002aea8
c0023e56:	de e1                	fsubrp st(1),st
c0023e58:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023e5c:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023e60:	e9 ac fe ff ff       	jmp    c0023d11 <atan+0x41>
c0023e65:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0023e69:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023e70:	dd da                	fstp   st(2)
c0023e72:	dd d8                	fstp   st(0)
c0023e74:	de e9                	fsubp  st(1),st
c0023e76:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023e7a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023e7e:	83 c4 24             	add    esp,0x24
c0023e81:	5b                   	pop    ebx
c0023e82:	5e                   	pop    esi
c0023e83:	c3                   	ret    
c0023e84:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0023e8a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0023e90:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023e94:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023e97:	e8 d4 06 00 00       	call   c0024570 <fabs>
c0023e9c:	81 fb ff ff f2 3f    	cmp    ebx,0x3ff2ffff
c0023ea2:	7f 3c                	jg     c0023ee0 <atan+0x210>
c0023ea4:	81 fb ff ff e5 3f    	cmp    ebx,0x3fe5ffff
c0023eaa:	0f 8f a0 00 00 00    	jg     c0023f50 <atan+0x280>
c0023eb0:	d9 c0                	fld    st(0)
c0023eb2:	31 c0                	xor    eax,eax
c0023eb4:	d8 c1                	fadd   st,st(1)
c0023eb6:	d8 25 80 ae 02 c0    	fsub   DWORD PTR ds:0xc002ae80
c0023ebc:	d9 c9                	fxch   st(1)
c0023ebe:	d8 05 f0 ae 02 c0    	fadd   DWORD PTR ds:0xc002aef0
c0023ec4:	de f9                	fdivp  st(1),st
c0023ec6:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023eca:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023ece:	dd 05 38 b0 02 c0    	fld    QWORD PTR ds:0xc002b038
c0023ed4:	dd 05 40 b0 02 c0    	fld    QWORD PTR ds:0xc002b040
c0023eda:	e9 9c fe ff ff       	jmp    c0023d7b <atan+0xab>
c0023edf:	90                   	nop
c0023ee0:	81 fb ff 7f 03 40    	cmp    ebx,0x40037fff
c0023ee6:	7f 38                	jg     c0023f20 <atan+0x250>
c0023ee8:	d9 05 d4 ae 02 c0    	fld    DWORD PTR ds:0xc002aed4
c0023eee:	b8 02 00 00 00       	mov    eax,0x2
c0023ef3:	d9 c1                	fld    st(1)
c0023ef5:	d8 e1                	fsub   st,st(1)
c0023ef7:	d9 ca                	fxch   st(2)
c0023ef9:	de c9                	fmulp  st(1),st
c0023efb:	d8 05 80 ae 02 c0    	fadd   DWORD PTR ds:0xc002ae80
c0023f01:	de f9                	fdivp  st(1),st
c0023f03:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023f07:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023f0b:	dd 05 28 b0 02 c0    	fld    QWORD PTR ds:0xc002b028
c0023f11:	dd 05 30 b0 02 c0    	fld    QWORD PTR ds:0xc002b030
c0023f17:	e9 5f fe ff ff       	jmp    c0023d7b <atan+0xab>
c0023f1c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0023f20:	d8 3d a0 b0 02 c0    	fdivr  DWORD PTR ds:0xc002b0a0
c0023f26:	b8 03 00 00 00       	mov    eax,0x3
c0023f2b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023f2f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023f33:	dd 05 88 ae 02 c0    	fld    QWORD PTR ds:0xc002ae88
c0023f39:	dd 05 28 ae 02 c0    	fld    QWORD PTR ds:0xc002ae28
c0023f3f:	e9 37 fe ff ff       	jmp    c0023d7b <atan+0xab>
c0023f44:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0023f4a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0023f50:	d9 e8                	fld1   
c0023f52:	b8 01 00 00 00       	mov    eax,0x1
c0023f57:	d9 c1                	fld    st(1)
c0023f59:	d8 e1                	fsub   st,st(1)
c0023f5b:	d9 ca                	fxch   st(2)
c0023f5d:	de c1                	faddp  st(1),st
c0023f5f:	de f9                	fdivp  st(1),st
c0023f61:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023f65:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023f69:	dd 05 20 b0 02 c0    	fld    QWORD PTR ds:0xc002b020
c0023f6f:	dd 05 98 ae 02 c0    	fld    QWORD PTR ds:0xc002ae98
c0023f75:	e9 01 fe ff ff       	jmp    c0023d7b <atan+0xab>
c0023f7a:	66 90                	xchg   ax,ax
c0023f7c:	66 90                	xchg   ax,ax
c0023f7e:	66 90                	xchg   ax,ax

c0023f80 <cos>:
c0023f80:	83 ec 5c             	sub    esp,0x5c
c0023f83:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c0023f87:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c0023f8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0023f8f:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023f94:	3d fb 21 e9 3f       	cmp    eax,0x3fe921fb
c0023f99:	7f 55                	jg     c0023ff0 <cos+0x70>
c0023f9b:	3d 9d a0 46 3e       	cmp    eax,0x3e46a09d
c0023fa0:	7f 2e                	jg     c0023fd0 <cos+0x50>
c0023fa2:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c0023fa6:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c0023fab:	66 0d 00 0c          	or     ax,0xc00
c0023faf:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c0023fb4:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0023fb8:	db 5c 24 30          	fistp  DWORD PTR [esp+0x30]
c0023fbc:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0023fc0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023fc4:	85 c0                	test   eax,eax
c0023fc6:	0f 84 94 00 00 00    	je     c0024060 <cos+0xe0>
c0023fcc:	eb 04                	jmp    c0023fd2 <cos+0x52>
c0023fce:	66 90                	xchg   ax,ax
c0023fd0:	dd d8                	fstp   st(0)
c0023fd2:	d9 ee                	fldz   
c0023fd4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0023fd8:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023fdc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023fdf:	e8 ac 11 00 00       	call   c0025190 <__kernel_cos>
c0023fe4:	83 c4 5c             	add    esp,0x5c
c0023fe7:	c3                   	ret    
c0023fe8:	90                   	nop
c0023fe9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0023ff0:	dd d8                	fstp   st(0)
c0023ff2:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0023ff7:	7e 17                	jle    c0024010 <cos+0x90>
c0023ff9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023ffd:	d8 e0                	fsub   st,st(0)
c0023fff:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024003:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024007:	83 c4 5c             	add    esp,0x5c
c002400a:	c3                   	ret    
c002400b:	90                   	nop
c002400c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024010:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024014:	8d 44 24 40          	lea    eax,[esp+0x40]
c0024018:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002401c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002401f:	e8 3c 0c 00 00       	call   c0024c60 <__ieee754_rem_pio2>
c0024024:	83 e0 03             	and    eax,0x3
c0024027:	83 f8 01             	cmp    eax,0x1
c002402a:	0f 84 80 00 00 00    	je     c00240b0 <cos+0x130>
c0024030:	83 f8 02             	cmp    eax,0x2
c0024033:	74 5b                	je     c0024090 <cos+0x110>
c0024035:	85 c0                	test   eax,eax
c0024037:	74 37                	je     c0024070 <cos+0xf0>
c0024039:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002403d:	b8 01 00 00 00       	mov    eax,0x1
c0024042:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024046:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c002404a:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c002404e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024051:	e8 ba 1b 00 00       	call   c0025c10 <__kernel_sin>
c0024056:	eb 8c                	jmp    c0023fe4 <cos+0x64>
c0024058:	90                   	nop
c0024059:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024060:	d9 e8                	fld1   
c0024062:	83 c4 5c             	add    esp,0x5c
c0024065:	c3                   	ret    
c0024066:	8d 76 00             	lea    esi,[esi+0x0]
c0024069:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024070:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024074:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024078:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c002407c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002407f:	e8 0c 11 00 00       	call   c0025190 <__kernel_cos>
c0024084:	e9 5b ff ff ff       	jmp    c0023fe4 <cos+0x64>
c0024089:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024090:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024094:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024098:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c002409c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002409f:	e8 ec 10 00 00       	call   c0025190 <__kernel_cos>
c00240a4:	d9 e0                	fchs   
c00240a6:	e9 39 ff ff ff       	jmp    c0023fe4 <cos+0x64>
c00240ab:	90                   	nop
c00240ac:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00240b0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00240b4:	ba 01 00 00 00       	mov    edx,0x1
c00240b9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00240bd:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00240c1:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00240c5:	dd 1c 24             	fstp   QWORD PTR [esp]
c00240c8:	e8 43 1b 00 00       	call   c0025c10 <__kernel_sin>
c00240cd:	d9 e0                	fchs   
c00240cf:	e9 10 ff ff ff       	jmp    c0023fe4 <cos+0x64>
c00240d4:	66 90                	xchg   ax,ax
c00240d6:	66 90                	xchg   ax,ax
c00240d8:	66 90                	xchg   ax,ax
c00240da:	66 90                	xchg   ax,ax
c00240dc:	66 90                	xchg   ax,ax
c00240de:	66 90                	xchg   ax,ax

c00240e0 <expm1>:
c00240e0:	d9 05 b0 b0 02 c0    	fld    DWORD PTR ds:0xc002b0b0
c00240e6:	83 ec 24             	sub    esp,0x24
c00240e9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00240ed:	dd 14 24             	fst    QWORD PTR [esp]
c00240f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00240f4:	89 d0                	mov    eax,edx
c00240f6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00240fb:	3d 79 68 43 40       	cmp    eax,0x40436879
c0024100:	0f 86 ea 00 00 00    	jbe    c00241f0 <expm1+0x110>
c0024106:	dd d9                	fstp   st(1)
c0024108:	3d 41 2e 86 40       	cmp    eax,0x40862e41
c002410d:	76 51                	jbe    c0024160 <expm1+0x80>
c002410f:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0024114:	76 2a                	jbe    c0024140 <expm1+0x60>
c0024116:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0024119:	89 d1                	mov    ecx,edx
c002411b:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0024121:	09 c1                	or     ecx,eax
c0024123:	0f 84 b7 03 00 00    	je     c00244e0 <expm1+0x400>
c0024129:	d9 c0                	fld    st(0)
c002412b:	de c1                	faddp  st(1),st
c002412d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024131:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024135:	e9 0a 02 00 00       	jmp    c0024344 <expm1+0x264>
c002413a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024140:	dd d8                	fstp   st(0)
c0024142:	dd 05 c8 b0 02 c0    	fld    QWORD PTR ds:0xc002b0c8
c0024148:	dd 04 24             	fld    QWORD PTR [esp]
c002414b:	df f1                	fcomip st,st(1)
c002414d:	dd d8                	fstp   st(0)
c002414f:	0f 87 cb 03 00 00    	ja     c0024520 <expm1+0x440>
c0024155:	eb 0b                	jmp    c0024162 <expm1+0x82>
c0024157:	89 f6                	mov    esi,esi
c0024159:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024160:	dd d8                	fstp   st(0)
c0024162:	85 d2                	test   edx,edx
c0024164:	dd 04 24             	fld    QWORD PTR [esp]
c0024167:	0f 88 e3 01 00 00    	js     c0024350 <expm1+0x270>
c002416d:	d9 c0                	fld    st(0)
c002416f:	dc 0d 60 af 02 c0    	fmul   QWORD PTR ds:0xc002af60
c0024175:	d9 05 84 ae 02 c0    	fld    DWORD PTR ds:0xc002ae84
c002417b:	d9 7c 24 16          	fnstcw WORD PTR [esp+0x16]
c002417f:	de c1                	faddp  st(1),st
c0024181:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0024186:	66 0d 00 0c          	or     ax,0xc00
c002418a:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c002418f:	d9 6c 24 14          	fldcw  WORD PTR [esp+0x14]
c0024193:	db 5c 24 10          	fistp  DWORD PTR [esp+0x10]
c0024197:	d9 6c 24 16          	fldcw  WORD PTR [esp+0x16]
c002419b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002419f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00241a2:	db 04 24             	fild   DWORD PTR [esp]
c00241a5:	d9 c0                	fld    st(0)
c00241a7:	dc 0d d8 b0 02 c0    	fmul   QWORD PTR ds:0xc002b0d8
c00241ad:	de ea                	fsubp  st(2),st
c00241af:	d9 c9                	fxch   st(1)
c00241b1:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00241b5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00241b9:	d9 c9                	fxch   st(1)
c00241bb:	dc 0d c0 b0 02 c0    	fmul   QWORD PTR ds:0xc002b0c0
c00241c1:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00241c5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00241c9:	d9 c1                	fld    st(1)
c00241cb:	d8 e1                	fsub   st,st(1)
c00241cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00241d0:	dd 04 24             	fld    QWORD PTR [esp]
c00241d3:	dc ea                	fsub   st(2),st
c00241d5:	d9 ca                	fxch   st(2)
c00241d7:	de e1                	fsubrp st(1),st
c00241d9:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00241dd:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00241e1:	eb 2c                	jmp    c002420f <expm1+0x12f>
c00241e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00241e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00241f0:	dd d8                	fstp   st(0)
c00241f2:	3d 42 2e d6 3f       	cmp    eax,0x3fd62e42
c00241f7:	dd 04 24             	fld    QWORD PTR [esp]
c00241fa:	0f 87 c0 01 00 00    	ja     c00243c0 <expm1+0x2e0>
c0024200:	31 c9                	xor    ecx,ecx
c0024202:	3d ff ff 8f 3c       	cmp    eax,0x3c8fffff
c0024207:	0f 86 f3 01 00 00    	jbe    c0024400 <expm1+0x320>
c002420d:	d9 c9                	fxch   st(1)
c002420f:	d9 05 84 ae 02 c0    	fld    DWORD PTR ds:0xc002ae84
c0024215:	85 c9                	test   ecx,ecx
c0024217:	d9 c2                	fld    st(2)
c0024219:	d8 c9                	fmul   st,st(1)
c002421b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002421f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024223:	d9 c0                	fld    st(0)
c0024225:	d8 cc                	fmul   st,st(4)
c0024227:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002422b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002422f:	d9 c0                	fld    st(0)
c0024231:	dc 0d e0 b0 02 c0    	fmul   QWORD PTR ds:0xc002b0e0
c0024237:	dc 05 e8 b0 02 c0    	fadd   QWORD PTR ds:0xc002b0e8
c002423d:	d8 c9                	fmul   st,st(1)
c002423f:	dc 25 f0 b0 02 c0    	fsub   QWORD PTR ds:0xc002b0f0
c0024245:	d8 c9                	fmul   st,st(1)
c0024247:	dc 05 f8 b0 02 c0    	fadd   QWORD PTR ds:0xc002b0f8
c002424d:	d8 c9                	fmul   st,st(1)
c002424f:	dc 25 00 b1 02 c0    	fsub   QWORD PTR ds:0xc002b100
c0024255:	d8 c9                	fmul   st,st(1)
c0024257:	d9 e8                	fld1   
c0024259:	dc c1                	fadd   st(1),st
c002425b:	d9 c9                	fxch   st(1)
c002425d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024261:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024265:	dc cb                	fmul   st(3),st
c0024267:	d9 cb                	fxch   st(3)
c0024269:	d8 2d e4 ae 02 c0    	fsubr  DWORD PTR ds:0xc002aee4
c002426f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024273:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024277:	dc eb                	fsub   st(3),st
c0024279:	d8 ce                	fmul   st,st(6)
c002427b:	d8 2d a4 b0 02 c0    	fsubr  DWORD PTR ds:0xc002b0a4
c0024281:	de fb                	fdivp  st(3),st
c0024283:	d9 ca                	fxch   st(2)
c0024285:	d8 c9                	fmul   st,st(1)
c0024287:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002428b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002428f:	0f 84 9b 00 00 00    	je     c0024330 <expm1+0x250>
c0024295:	89 c8                	mov    eax,ecx
c0024297:	c1 e0 14             	shl    eax,0x14
c002429a:	05 00 00 f0 3f       	add    eax,0x3ff00000
c002429f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00242a3:	31 c0                	xor    eax,eax
c00242a5:	83 f9 ff             	cmp    ecx,0xffffffff
c00242a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00242ac:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00242b0:	d9 c9                	fxch   st(1)
c00242b2:	d8 e5                	fsub   st,st(5)
c00242b4:	d8 ce                	fmul   st,st(6)
c00242b6:	de e5                	fsubrp st(5),st
c00242b8:	d9 cc                	fxch   st(4)
c00242ba:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00242be:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00242c2:	de e1                	fsubrp st(1),st
c00242c4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00242c8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00242cc:	0f 84 9e 01 00 00    	je     c0024470 <expm1+0x390>
c00242d2:	83 f9 01             	cmp    ecx,0x1
c00242d5:	0f 84 55 01 00 00    	je     c0024430 <expm1+0x350>
c00242db:	dd da                	fstp   st(2)
c00242dd:	d9 c9                	fxch   st(1)
c00242df:	8d 41 01             	lea    eax,[ecx+0x1]
c00242e2:	83 f8 39             	cmp    eax,0x39
c00242e5:	0f 87 95 00 00 00    	ja     c0024380 <expm1+0x2a0>
c00242eb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00242f2:	83 f9 13             	cmp    ecx,0x13
c00242f5:	0f 8f b5 01 00 00    	jg     c00244b0 <expm1+0x3d0>
c00242fb:	dd d9                	fstp   st(1)
c00242fd:	b8 00 00 20 00       	mov    eax,0x200000
c0024302:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c0024307:	d3 f8                	sar    eax,cl
c0024309:	29 c2                	sub    edx,eax
c002430b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002430f:	dd 04 24             	fld    QWORD PTR [esp]
c0024312:	d9 cb                	fxch   st(3)
c0024314:	de e9                	fsubp  st(1),st
c0024316:	de ea                	fsubp  st(2),st
c0024318:	d9 c9                	fxch   st(1)
c002431a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002431e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024322:	de c9                	fmulp  st(1),st
c0024324:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024328:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002432c:	83 c4 24             	add    esp,0x24
c002432f:	c3                   	ret    
c0024330:	dd db                	fstp   st(3)
c0024332:	dd db                	fstp   st(3)
c0024334:	dd d8                	fstp   st(0)
c0024336:	d8 ca                	fmul   st,st(2)
c0024338:	de e1                	fsubrp st(1),st
c002433a:	de e9                	fsubp  st(1),st
c002433c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024340:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024344:	83 c4 24             	add    esp,0x24
c0024347:	c3                   	ret    
c0024348:	90                   	nop
c0024349:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024350:	d9 ee                	fldz   
c0024352:	d9 c1                	fld    st(1)
c0024354:	dc 05 d0 b0 02 c0    	fadd   QWORD PTR ds:0xc002b0d0
c002435a:	d9 c9                	fxch   st(1)
c002435c:	df f1                	fcomip st,st(1)
c002435e:	dd d8                	fstp   st(0)
c0024360:	0f 87 8a 01 00 00    	ja     c00244f0 <expm1+0x410>
c0024366:	d9 c0                	fld    st(0)
c0024368:	dc 0d 60 af 02 c0    	fmul   QWORD PTR ds:0xc002af60
c002436e:	d9 05 e8 af 02 c0    	fld    DWORD PTR ds:0xc002afe8
c0024374:	e9 02 fe ff ff       	jmp    c002417b <expm1+0x9b>
c0024379:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024380:	de e3                	fsubrp st(3),st
c0024382:	81 f9 00 04 00 00    	cmp    ecx,0x400
c0024388:	de e2                	fsubrp st(2),st
c002438a:	d9 c9                	fxch   st(1)
c002438c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024390:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024394:	0f 84 96 01 00 00    	je     c0024530 <expm1+0x450>
c002439a:	de c9                	fmulp  st(1),st
c002439c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00243a0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00243a4:	d9 e8                	fld1   
c00243a6:	de e9                	fsubp  st(1),st
c00243a8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00243ac:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00243b0:	eb 92                	jmp    c0024344 <expm1+0x264>
c00243b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00243b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00243c0:	dd d9                	fstp   st(1)
c00243c2:	3d b1 a2 f0 3f       	cmp    eax,0x3ff0a2b1
c00243c7:	0f 87 7a 01 00 00    	ja     c0024547 <expm1+0x467>
c00243cd:	85 d2                	test   edx,edx
c00243cf:	0f 88 bb 00 00 00    	js     c0024490 <expm1+0x3b0>
c00243d5:	dc 25 d8 b0 02 c0    	fsub   QWORD PTR ds:0xc002b0d8
c00243db:	b9 01 00 00 00       	mov    ecx,0x1
c00243e0:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00243e4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00243e8:	dd 05 c0 b0 02 c0    	fld    QWORD PTR ds:0xc002b0c0
c00243ee:	e9 d6 fd ff ff       	jmp    c00241c9 <expm1+0xe9>
c00243f3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00243f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024400:	dd d9                	fstp   st(1)
c0024402:	d9 c0                	fld    st(0)
c0024404:	dc 05 90 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae90
c002440a:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c002440e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024412:	de e1                	fsubrp st(1),st
c0024414:	de e9                	fsubp  st(1),st
c0024416:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002441a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002441e:	83 c4 24             	add    esp,0x24
c0024421:	c3                   	ret    
c0024422:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024429:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024430:	dd db                	fstp   st(3)
c0024432:	d9 c9                	fxch   st(1)
c0024434:	d9 ca                	fxch   st(2)
c0024436:	dd 04 24             	fld    QWORD PTR [esp]
c0024439:	d9 05 a8 b0 02 c0    	fld    DWORD PTR ds:0xc002b0a8
c002443f:	df f1                	fcomip st,st(1)
c0024441:	dd d8                	fstp   st(0)
c0024443:	0f 86 b7 00 00 00    	jbe    c0024500 <expm1+0x420>
c0024449:	dd d9                	fstp   st(1)
c002444b:	d9 ca                	fxch   st(2)
c002444d:	de c1                	faddp  st(1),st
c002444f:	de e9                	fsubp  st(1),st
c0024451:	d8 0d ac b0 02 c0    	fmul   DWORD PTR ds:0xc002b0ac
c0024457:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002445b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002445f:	e9 e0 fe ff ff       	jmp    c0024344 <expm1+0x264>
c0024464:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002446a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024470:	dd db                	fstp   st(3)
c0024472:	dd d8                	fstp   st(0)
c0024474:	d9 c9                	fxch   st(1)
c0024476:	de ea                	fsubp  st(2),st
c0024478:	dc c9                	fmul   st(1),st
c002447a:	de e9                	fsubp  st(1),st
c002447c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024480:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024484:	e9 bb fe ff ff       	jmp    c0024344 <expm1+0x264>
c0024489:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024490:	dc 05 d8 b0 02 c0    	fadd   QWORD PTR ds:0xc002b0d8
c0024496:	b9 ff ff ff ff       	mov    ecx,0xffffffff
c002449b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002449f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00244a3:	dd 05 b8 b0 02 c0    	fld    QWORD PTR ds:0xc002b0b8
c00244a9:	e9 1b fd ff ff       	jmp    c00241c9 <expm1+0xe9>
c00244ae:	66 90                	xchg   ax,ax
c00244b0:	b8 ff 03 00 00       	mov    eax,0x3ff
c00244b5:	29 c8                	sub    eax,ecx
c00244b7:	c1 e0 14             	shl    eax,0x14
c00244ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00244be:	dd 04 24             	fld    QWORD PTR [esp]
c00244c1:	de c1                	faddp  st(1),st
c00244c3:	de eb                	fsubp  st(3),st
c00244c5:	d9 ca                	fxch   st(2)
c00244c7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00244cb:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00244cf:	de c2                	faddp  st(2),st
c00244d1:	d9 c9                	fxch   st(1)
c00244d3:	e9 42 fe ff ff       	jmp    c002431a <expm1+0x23a>
c00244d8:	90                   	nop
c00244d9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00244e0:	dd d8                	fstp   st(0)
c00244e2:	85 d2                	test   edx,edx
c00244e4:	78 0c                	js     c00244f2 <expm1+0x412>
c00244e6:	dd 04 24             	fld    QWORD PTR [esp]
c00244e9:	e9 56 fe ff ff       	jmp    c0024344 <expm1+0x264>
c00244ee:	66 90                	xchg   ax,ax
c00244f0:	dd d8                	fstp   st(0)
c00244f2:	d9 e8                	fld1   
c00244f4:	d9 e0                	fchs   
c00244f6:	e9 49 fe ff ff       	jmp    c0024344 <expm1+0x264>
c00244fb:	90                   	nop
c00244fc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024500:	dd da                	fstp   st(2)
c0024502:	d9 c9                	fxch   st(1)
c0024504:	de ea                	fsubp  st(2),st
c0024506:	d9 c9                	fxch   st(1)
c0024508:	d8 c0                	fadd   st,st(0)
c002450a:	de c1                	faddp  st(1),st
c002450c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024510:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024514:	e9 2b fe ff ff       	jmp    c0024344 <expm1+0x264>
c0024519:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024520:	d9 05 c8 ae 02 c0    	fld    DWORD PTR ds:0xc002aec8
c0024526:	e9 19 fe ff ff       	jmp    c0024344 <expm1+0x264>
c002452b:	90                   	nop
c002452c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024530:	dd d9                	fstp   st(1)
c0024532:	d8 c0                	fadd   st,st(0)
c0024534:	dc 0d 08 b1 02 c0    	fmul   QWORD PTR ds:0xc002b108
c002453a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002453e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024542:	e9 5d fe ff ff       	jmp    c00243a4 <expm1+0x2c4>
c0024547:	d9 c0                	fld    st(0)
c0024549:	85 d2                	test   edx,edx
c002454b:	dc 0d 60 af 02 c0    	fmul   QWORD PTR ds:0xc002af60
c0024551:	0f 88 17 fe ff ff    	js     c002436e <expm1+0x28e>
c0024557:	d9 05 84 ae 02 c0    	fld    DWORD PTR ds:0xc002ae84
c002455d:	e9 19 fc ff ff       	jmp    c002417b <expm1+0x9b>
c0024562:	66 90                	xchg   ax,ax
c0024564:	66 90                	xchg   ax,ax
c0024566:	66 90                	xchg   ax,ax
c0024568:	66 90                	xchg   ax,ax
c002456a:	66 90                	xchg   ax,ax
c002456c:	66 90                	xchg   ax,ax
c002456e:	66 90                	xchg   ax,ax

c0024570 <fabs>:
c0024570:	83 ec 0c             	sub    esp,0xc
c0024573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024577:	89 04 24             	mov    DWORD PTR [esp],eax
c002457a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002457e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024583:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024587:	dd 04 24             	fld    QWORD PTR [esp]
c002458a:	83 c4 0c             	add    esp,0xc
c002458d:	c3                   	ret    
c002458e:	66 90                	xchg   ax,ax

c0024590 <frexp>:
c0024590:	53                   	push   ebx
c0024591:	83 ec 10             	sub    esp,0x10
c0024594:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024598:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002459c:	dd 14 24             	fst    QWORD PTR [esp]
c002459f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00245a3:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00245a9:	89 d0                	mov    eax,edx
c00245ab:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00245b0:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c00245b5:	7f 59                	jg     c0024610 <frexp+0x80>
c00245b7:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00245ba:	09 c3                	or     ebx,eax
c00245bc:	74 62                	je     c0024620 <frexp+0x90>
c00245be:	31 db                	xor    ebx,ebx
c00245c0:	f7 c2 00 00 f0 7f    	test   edx,0x7ff00000
c00245c6:	75 28                	jne    c00245f0 <frexp+0x60>
c00245c8:	d9 05 10 b1 02 c0    	fld    DWORD PTR ds:0xc002b110
c00245ce:	bb ca ff ff ff       	mov    ebx,0xffffffca
c00245d3:	de c9                	fmulp  st(1),st
c00245d5:	dd 1c 24             	fstp   QWORD PTR [esp]
c00245d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00245dc:	89 d0                	mov    eax,edx
c00245de:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00245e3:	eb 0d                	jmp    c00245f2 <frexp+0x62>
c00245e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00245e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00245f0:	dd d8                	fstp   st(0)
c00245f2:	c1 f8 14             	sar    eax,0x14
c00245f5:	81 e2 ff ff 0f 80    	and    edx,0x800fffff
c00245fb:	8d 84 03 02 fc ff ff 	lea    eax,[ebx+eax*1-0x3fe]
c0024602:	81 ca 00 00 e0 3f    	or     edx,0x3fe00000
c0024608:	89 01                	mov    DWORD PTR [ecx],eax
c002460a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002460e:	eb 12                	jmp    c0024622 <frexp+0x92>
c0024610:	dd d8                	fstp   st(0)
c0024612:	eb 0e                	jmp    c0024622 <frexp+0x92>
c0024614:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002461a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024620:	dd d8                	fstp   st(0)
c0024622:	dd 04 24             	fld    QWORD PTR [esp]
c0024625:	83 c4 10             	add    esp,0x10
c0024628:	5b                   	pop    ebx
c0024629:	c3                   	ret    
c002462a:	66 90                	xchg   ax,ax
c002462c:	66 90                	xchg   ax,ax
c002462e:	66 90                	xchg   ax,ax

c0024630 <modf>:
c0024630:	53                   	push   ebx
c0024631:	83 ec 18             	sub    esp,0x18
c0024634:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0024638:	dd 14 24             	fst    QWORD PTR [esp]
c002463b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002463f:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0024642:	89 d0                	mov    eax,edx
c0024644:	c1 f8 14             	sar    eax,0x14
c0024647:	25 ff 07 00 00       	and    eax,0x7ff
c002464c:	8d 88 01 fc ff ff    	lea    ecx,[eax-0x3ff]
c0024652:	83 f9 13             	cmp    ecx,0x13
c0024655:	7f 49                	jg     c00246a0 <modf+0x70>
c0024657:	85 c9                	test   ecx,ecx
c0024659:	0f 88 f1 00 00 00    	js     c0024750 <modf+0x120>
c002465f:	dd d8                	fstp   st(0)
c0024661:	b8 ff ff 0f 00       	mov    eax,0xfffff
c0024666:	d3 f8                	sar    eax,cl
c0024668:	89 d1                	mov    ecx,edx
c002466a:	21 c1                	and    ecx,eax
c002466c:	09 d9                	or     ecx,ebx
c002466e:	0f 84 ac 00 00 00    	je     c0024720 <modf+0xf0>
c0024674:	f7 d0                	not    eax
c0024676:	21 d0                	and    eax,edx
c0024678:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002467c:	31 c0                	xor    eax,eax
c002467e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024682:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024686:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c002468a:	dd 10                	fst    QWORD PTR [eax]
c002468c:	dd 04 24             	fld    QWORD PTR [esp]
c002468f:	de e1                	fsubrp st(1),st
c0024691:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0024695:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024699:	83 c4 18             	add    esp,0x18
c002469c:	5b                   	pop    ebx
c002469d:	c3                   	ret    
c002469e:	66 90                	xchg   ax,ax
c00246a0:	dd d8                	fstp   st(0)
c00246a2:	83 f9 33             	cmp    ecx,0x33
c00246a5:	7e 39                	jle    c00246e0 <modf+0xb0>
c00246a7:	81 f9 00 04 00 00    	cmp    ecx,0x400
c00246ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00246b1:	0f 84 e9 00 00 00    	je     c00247a0 <modf+0x170>
c00246b7:	dd 04 24             	fld    QWORD PTR [esp]
c00246ba:	81 e2 00 00 00 80    	and    edx,0x80000000
c00246c0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00246c7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00246cb:	dd 18                	fstp   QWORD PTR [eax]
c00246cd:	dd 04 24             	fld    QWORD PTR [esp]
c00246d0:	83 c4 18             	add    esp,0x18
c00246d3:	5b                   	pop    ebx
c00246d4:	c3                   	ret    
c00246d5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00246d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00246e0:	8d 88 ed fb ff ff    	lea    ecx,[eax-0x413]
c00246e6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00246eb:	d3 e8                	shr    eax,cl
c00246ed:	85 d8                	test   eax,ebx
c00246ef:	75 7f                	jne    c0024770 <modf+0x140>
c00246f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00246f5:	81 e2 00 00 00 80    	and    edx,0x80000000
c00246fb:	dd 04 24             	fld    QWORD PTR [esp]
c00246fe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0024705:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0024709:	dd 18                	fstp   QWORD PTR [eax]
c002470b:	dd 04 24             	fld    QWORD PTR [esp]
c002470e:	83 c4 18             	add    esp,0x18
c0024711:	5b                   	pop    ebx
c0024712:	c3                   	ret    
c0024713:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024719:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024720:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024724:	81 e2 00 00 00 80    	and    edx,0x80000000
c002472a:	dd 04 24             	fld    QWORD PTR [esp]
c002472d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0024734:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0024738:	dd 18                	fstp   QWORD PTR [eax]
c002473a:	dd 04 24             	fld    QWORD PTR [esp]
c002473d:	83 c4 18             	add    esp,0x18
c0024740:	5b                   	pop    ebx
c0024741:	c3                   	ret    
c0024742:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024749:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024750:	81 e2 00 00 00 80    	and    edx,0x80000000
c0024756:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002475a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002475e:	31 d2                	xor    edx,edx
c0024760:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0024764:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0024768:	dd 18                	fstp   QWORD PTR [eax]
c002476a:	83 c4 18             	add    esp,0x18
c002476d:	5b                   	pop    ebx
c002476e:	c3                   	ret    
c002476f:	90                   	nop
c0024770:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024774:	f7 d0                	not    eax
c0024776:	21 d8                	and    eax,ebx
c0024778:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002477c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024780:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0024784:	dd 10                	fst    QWORD PTR [eax]
c0024786:	dd 04 24             	fld    QWORD PTR [esp]
c0024789:	de e1                	fsubrp st(1),st
c002478b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c002478f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024793:	83 c4 18             	add    esp,0x18
c0024796:	5b                   	pop    ebx
c0024797:	c3                   	ret    
c0024798:	90                   	nop
c0024799:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00247a0:	dd 04 24             	fld    QWORD PTR [esp]
c00247a3:	dd 10                	fst    QWORD PTR [eax]
c00247a5:	d9 ee                	fldz   
c00247a7:	de f1                	fdivrp st(1),st
c00247a9:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00247ad:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00247b1:	e9 e3 fe ff ff       	jmp    c0024699 <modf+0x69>
c00247b6:	66 90                	xchg   ax,ax
c00247b8:	66 90                	xchg   ax,ax
c00247ba:	66 90                	xchg   ax,ax
c00247bc:	66 90                	xchg   ax,ax
c00247be:	66 90                	xchg   ax,ax

c00247c0 <round>:
c00247c0:	83 ec 2c             	sub    esp,0x2c
c00247c3:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00247c7:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00247cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00247cf:	89 c2                	mov    edx,eax
c00247d1:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00247d7:	81 fa 00 00 f0 7f    	cmp    edx,0x7ff00000
c00247dd:	0f 84 9d 00 00 00    	je     c0024880 <round+0xc0>
c00247e3:	dd d8                	fstp   st(0)
c00247e5:	85 c0                	test   eax,eax
c00247e7:	78 47                	js     c0024830 <round+0x70>
c00247e9:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00247ed:	dd 1c 24             	fstp   QWORD PTR [esp]
c00247f0:	e8 ff 03 00 00       	call   c0024bf4 <floor>
c00247f5:	d9 c0                	fld    st(0)
c00247f7:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00247fb:	d8 e9                	fsubr  st,st(1)
c00247fd:	d9 05 e8 af 02 c0    	fld    DWORD PTR ds:0xc002afe8
c0024803:	df f1                	fcomip st,st(1)
c0024805:	dd d8                	fstp   st(0)
c0024807:	72 17                	jb     c0024820 <round+0x60>
c0024809:	dd d9                	fstp   st(1)
c002480b:	d8 05 80 ae 02 c0    	fadd   DWORD PTR ds:0xc002ae80
c0024811:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024815:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024819:	eb 07                	jmp    c0024822 <round+0x62>
c002481b:	90                   	nop
c002481c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024820:	dd d8                	fstp   st(0)
c0024822:	83 c4 2c             	add    esp,0x2c
c0024825:	c3                   	ret    
c0024826:	8d 76 00             	lea    esi,[esi+0x0]
c0024829:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024830:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024834:	d9 e0                	fchs   
c0024836:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024839:	e8 b6 03 00 00       	call   c0024bf4 <floor>
c002483e:	d9 c0                	fld    st(0)
c0024840:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024844:	d8 c1                	fadd   st,st(1)
c0024846:	d9 05 e8 af 02 c0    	fld    DWORD PTR ds:0xc002afe8
c002484c:	df f1                	fcomip st,st(1)
c002484e:	dd d8                	fstp   st(0)
c0024850:	72 1e                	jb     c0024870 <round+0xb0>
c0024852:	dd d9                	fstp   st(1)
c0024854:	d8 05 80 ae 02 c0    	fadd   DWORD PTR ds:0xc002ae80
c002485a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002485e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024862:	eb 0e                	jmp    c0024872 <round+0xb2>
c0024864:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002486a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024870:	dd d8                	fstp   st(0)
c0024872:	d9 e0                	fchs   
c0024874:	83 c4 2c             	add    esp,0x2c
c0024877:	c3                   	ret    
c0024878:	90                   	nop
c0024879:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024880:	d9 c0                	fld    st(0)
c0024882:	de c1                	faddp  st(1),st
c0024884:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024888:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002488c:	83 c4 2c             	add    esp,0x2c
c002488f:	c3                   	ret    

c0024890 <sin>:
c0024890:	83 ec 5c             	sub    esp,0x5c
c0024893:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c0024897:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c002489b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002489f:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00248a4:	3d fb 21 e9 3f       	cmp    eax,0x3fe921fb
c00248a9:	7f 65                	jg     c0024910 <sin+0x80>
c00248ab:	3d ff ff 4f 3e       	cmp    eax,0x3e4fffff
c00248b0:	7f 2e                	jg     c00248e0 <sin+0x50>
c00248b2:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c00248b6:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c00248bb:	66 0d 00 0c          	or     ax,0xc00
c00248bf:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c00248c4:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c00248c8:	db 54 24 30          	fist   DWORD PTR [esp+0x30]
c00248cc:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c00248d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00248d4:	85 c0                	test   eax,eax
c00248d6:	75 18                	jne    c00248f0 <sin+0x60>
c00248d8:	83 c4 5c             	add    esp,0x5c
c00248db:	c3                   	ret    
c00248dc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00248e0:	dd d8                	fstp   st(0)
c00248e2:	eb 0e                	jmp    c00248f2 <sin+0x62>
c00248e4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00248ea:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00248f0:	dd d8                	fstp   st(0)
c00248f2:	d9 ee                	fldz   
c00248f4:	31 c9                	xor    ecx,ecx
c00248f6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00248fa:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00248fe:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024902:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024905:	e8 06 13 00 00       	call   c0025c10 <__kernel_sin>
c002490a:	83 c4 5c             	add    esp,0x5c
c002490d:	c3                   	ret    
c002490e:	66 90                	xchg   ax,ax
c0024910:	dd d8                	fstp   st(0)
c0024912:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0024917:	7e 17                	jle    c0024930 <sin+0xa0>
c0024919:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002491d:	d8 e0                	fsub   st,st(0)
c002491f:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024923:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024927:	83 c4 5c             	add    esp,0x5c
c002492a:	c3                   	ret    
c002492b:	90                   	nop
c002492c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024930:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024934:	8d 44 24 40          	lea    eax,[esp+0x40]
c0024938:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002493c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002493f:	e8 1c 03 00 00       	call   c0024c60 <__ieee754_rem_pio2>
c0024944:	83 e0 03             	and    eax,0x3
c0024947:	83 f8 01             	cmp    eax,0x1
c002494a:	0f 84 90 00 00 00    	je     c00249e0 <sin+0x150>
c0024950:	83 f8 02             	cmp    eax,0x2
c0024953:	74 2b                	je     c0024980 <sin+0xf0>
c0024955:	85 c0                	test   eax,eax
c0024957:	74 57                	je     c00249b0 <sin+0x120>
c0024959:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002495d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024961:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0024965:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024968:	e8 23 08 00 00       	call   c0025190 <__kernel_cos>
c002496d:	d9 e0                	fchs   
c002496f:	e9 64 ff ff ff       	jmp    c00248d8 <sin+0x48>
c0024974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002497a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024980:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024984:	b8 01 00 00 00       	mov    eax,0x1
c0024989:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002498d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024991:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0024995:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024998:	e8 73 12 00 00       	call   c0025c10 <__kernel_sin>
c002499d:	d9 e0                	fchs   
c002499f:	e9 34 ff ff ff       	jmp    c00248d8 <sin+0x48>
c00249a4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00249aa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00249b0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00249b4:	ba 01 00 00 00       	mov    edx,0x1
c00249b9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00249bd:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00249c1:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00249c5:	dd 1c 24             	fstp   QWORD PTR [esp]
c00249c8:	e8 43 12 00 00       	call   c0025c10 <__kernel_sin>
c00249cd:	e9 06 ff ff ff       	jmp    c00248d8 <sin+0x48>
c00249d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00249d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00249e0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00249e4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00249e8:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00249ec:	dd 1c 24             	fstp   QWORD PTR [esp]
c00249ef:	e8 9c 07 00 00       	call   c0025190 <__kernel_cos>
c00249f4:	e9 df fe ff ff       	jmp    c00248d8 <sin+0x48>
c00249f9:	66 90                	xchg   ax,ax
c00249fb:	66 90                	xchg   ax,ax
c00249fd:	66 90                	xchg   ax,ax
c00249ff:	90                   	nop

c0024a00 <tanh>:
c0024a00:	53                   	push   ebx
c0024a01:	83 ec 28             	sub    esp,0x28
c0024a04:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0024a08:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0024a0c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024a10:	89 d8                	mov    eax,ebx
c0024a12:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024a17:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0024a1c:	7e 32                	jle    c0024a50 <tanh+0x50>
c0024a1e:	d9 e8                	fld1   
c0024a20:	85 db                	test   ebx,ebx
c0024a22:	dc f1                	fdivr  st(1),st
c0024a24:	78 1a                	js     c0024a40 <tanh+0x40>
c0024a26:	de c1                	faddp  st(1),st
c0024a28:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024a2c:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024a30:	83 c4 28             	add    esp,0x28
c0024a33:	5b                   	pop    ebx
c0024a34:	c3                   	ret    
c0024a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024a40:	de e9                	fsubp  st(1),st
c0024a42:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024a46:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024a4a:	83 c4 28             	add    esp,0x28
c0024a4d:	5b                   	pop    ebx
c0024a4e:	c3                   	ret    
c0024a4f:	90                   	nop
c0024a50:	dd d8                	fstp   st(0)
c0024a52:	3d ff ff 35 40       	cmp    eax,0x4035ffff
c0024a57:	7f 57                	jg     c0024ab0 <tanh+0xb0>
c0024a59:	3d ff ff 2f 3e       	cmp    eax,0x3e2fffff
c0024a5e:	7f 70                	jg     c0024ad0 <tanh+0xd0>
c0024a60:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024a64:	d9 e8                	fld1   
c0024a66:	d9 c1                	fld    st(1)
c0024a68:	dc 05 90 ae 02 c0    	fadd   QWORD PTR ds:0xc002ae90
c0024a6e:	df f1                	fcomip st,st(1)
c0024a70:	dd d8                	fstp   st(0)
c0024a72:	77 bc                	ja     c0024a30 <tanh+0x30>
c0024a74:	dd d8                	fstp   st(0)
c0024a76:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024a7a:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024a7d:	e8 ee fa ff ff       	call   c0024570 <fabs>
c0024a82:	d9 05 ac b0 02 c0    	fld    DWORD PTR ds:0xc002b0ac
c0024a88:	de c9                	fmulp  st(1),st
c0024a8a:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024a8d:	e8 4e f6 ff ff       	call   c00240e0 <expm1>
c0024a92:	d9 c0                	fld    st(0)
c0024a94:	d9 e0                	fchs   
c0024a96:	d9 05 f0 ae 02 c0    	fld    DWORD PTR ds:0xc002aef0
c0024a9c:	de c2                	faddp  st(2),st
c0024a9e:	de f1                	fdivrp st(1),st
c0024aa0:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024aa4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024aa8:	eb 08                	jmp    c0024ab2 <tanh+0xb2>
c0024aaa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024ab0:	d9 e8                	fld1   
c0024ab2:	85 db                	test   ebx,ebx
c0024ab4:	0f 89 76 ff ff ff    	jns    c0024a30 <tanh+0x30>
c0024aba:	d9 e0                	fchs   
c0024abc:	83 c4 28             	add    esp,0x28
c0024abf:	5b                   	pop    ebx
c0024ac0:	c3                   	ret    
c0024ac1:	eb 0d                	jmp    c0024ad0 <tanh+0xd0>
c0024ac3:	90                   	nop
c0024ac4:	90                   	nop
c0024ac5:	90                   	nop
c0024ac6:	90                   	nop
c0024ac7:	90                   	nop
c0024ac8:	90                   	nop
c0024ac9:	90                   	nop
c0024aca:	90                   	nop
c0024acb:	90                   	nop
c0024acc:	90                   	nop
c0024acd:	90                   	nop
c0024ace:	90                   	nop
c0024acf:	90                   	nop
c0024ad0:	3d ff ff ef 3f       	cmp    eax,0x3fefffff
c0024ad5:	7e 9f                	jle    c0024a76 <tanh+0x76>
c0024ad7:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024adb:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024ade:	e8 8d fa ff ff       	call   c0024570 <fabs>
c0024ae3:	d8 c0                	fadd   st,st(0)
c0024ae5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024ae8:	e8 f3 f5 ff ff       	call   c00240e0 <expm1>
c0024aed:	d9 05 f0 ae 02 c0    	fld    DWORD PTR ds:0xc002aef0
c0024af3:	dc c1                	fadd   st(1),st
c0024af5:	de f1                	fdivrp st(1),st
c0024af7:	d8 2d 80 ae 02 c0    	fsubr  DWORD PTR ds:0xc002ae80
c0024afd:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024b01:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024b05:	eb ab                	jmp    c0024ab2 <tanh+0xb2>
c0024b07:	66 90                	xchg   ax,ax
c0024b09:	66 90                	xchg   ax,ax
c0024b0b:	66 90                	xchg   ax,ax
c0024b0d:	66 90                	xchg   ax,ax
c0024b0f:	90                   	nop

c0024b10 <cimag>:
c0024b10:	dd 44 24 0c          	fld    QWORD PTR [esp+0xc]
c0024b14:	c3                   	ret    
c0024b15:	66 90                	xchg   ax,ax
c0024b17:	66 90                	xchg   ax,ax
c0024b19:	66 90                	xchg   ax,ax
c0024b1b:	66 90                	xchg   ax,ax
c0024b1d:	66 90                	xchg   ax,ax
c0024b1f:	90                   	nop

c0024b20 <creal>:
c0024b20:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0024b24:	c3                   	ret    
c0024b25:	66 90                	xchg   ax,ax
c0024b27:	90                   	nop

c0024b28 <exp>:
c0024b28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024b2c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024b31:	3d 00 00 f0 7f       	cmp    eax,0x7ff00000
c0024b36:	73 42                	jae    c0024b7a <x_Inf_or_NaN>
c0024b38:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0024b3c:	9b d9 7c 24 04       	fstcw  WORD PTR [esp+0x4]
c0024b41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024b45:	25 00 03 00 00       	and    eax,0x300
c0024b4a:	3d 00 03 00 00       	cmp    eax,0x300
c0024b4f:	74 0c                	je     c0024b5d <exp+0x35>
c0024b51:	c7 44 24 08 7f 13 00 00 	mov    DWORD PTR [esp+0x8],0x137f
c0024b59:	d9 6c 24 08          	fldcw  WORD PTR [esp+0x8]
c0024b5d:	d9 ea                	fldl2e 
c0024b5f:	de c9                	fmulp  st(1),st
c0024b61:	dd d1                	fst    st(1)
c0024b63:	d9 fc                	frndint 
c0024b65:	dd d2                	fst    st(2)
c0024b67:	de e9                	fsubp  st(1),st
c0024b69:	d9 f0                	f2xm1  
c0024b6b:	d9 e8                	fld1   
c0024b6d:	de c1                	faddp  st(1),st
c0024b6f:	d9 fd                	fscale 
c0024b71:	dd d9                	fstp   st(1)
c0024b73:	74 04                	je     c0024b79 <exp+0x51>
c0024b75:	d9 6c 24 04          	fldcw  WORD PTR [esp+0x4]
c0024b79:	c3                   	ret    

c0024b7a <x_Inf_or_NaN>:
c0024b7a:	81 7c 24 08 00 00 f0 ff 	cmp    DWORD PTR [esp+0x8],0xfff00000
c0024b82:	75 0a                	jne    c0024b8e <x_not_minus_Inf>
c0024b84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0024b89:	75 03                	jne    c0024b8e <x_not_minus_Inf>
c0024b8b:	d9 ee                	fldz   
c0024b8d:	c3                   	ret    

c0024b8e <x_not_minus_Inf>:
c0024b8e:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0024b92:	c3                   	ret    
c0024b93:	90                   	nop

c0024b94 <fmod>:
c0024b94:	dd 44 24 0c          	fld    QWORD PTR [esp+0xc]
c0024b98:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0024b9c:	d9 f8                	fprem  
c0024b9e:	9b df e0             	fstsw  ax
c0024ba1:	9e                   	sahf   
c0024ba2:	7a f8                	jp     c0024b9c <fmod+0x8>
c0024ba4:	dd d9                	fstp   st(1)
c0024ba6:	c3                   	ret    
c0024ba7:	90                   	nop

c0024ba8 <log>:
c0024ba8:	d9 ed                	fldln2 
c0024baa:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0024bae:	d9 f1                	fyl2x  
c0024bb0:	c3                   	ret    
c0024bb1:	66 90                	xchg   ax,ax
c0024bb3:	90                   	nop

c0024bb4 <log10>:
c0024bb4:	d9 ec                	fldlg2 
c0024bb6:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0024bba:	d9 f1                	fyl2x  
c0024bbc:	c3                   	ret    
c0024bbd:	66 90                	xchg   ax,ax
c0024bbf:	90                   	nop

c0024bc0 <sqrt>:
c0024bc0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0024bc4:	d9 fa                	fsqrt  
c0024bc6:	c3                   	ret    
c0024bc7:	90                   	nop

c0024bc8 <ceil>:
c0024bc8:	55                   	push   ebp
c0024bc9:	89 e5                	mov    ebp,esp
c0024bcb:	83 ec 08             	sub    esp,0x8
c0024bce:	9b d9 7d fc          	fstcw  WORD PTR [ebp-0x4]
c0024bd2:	66 8b 55 fc          	mov    dx,WORD PTR [ebp-0x4]
c0024bd6:	66 81 ca 00 08       	or     dx,0x800
c0024bdb:	66 81 e2 ff fb       	and    dx,0xfbff
c0024be0:	66 89 55 f8          	mov    WORD PTR [ebp-0x8],dx
c0024be4:	d9 6d f8             	fldcw  WORD PTR [ebp-0x8]
c0024be7:	dd 45 08             	fld    QWORD PTR [ebp+0x8]
c0024bea:	d9 fc                	frndint 
c0024bec:	d9 6d fc             	fldcw  WORD PTR [ebp-0x4]
c0024bef:	c9                   	leave  
c0024bf0:	c3                   	ret    
c0024bf1:	66 90                	xchg   ax,ax
c0024bf3:	90                   	nop

c0024bf4 <floor>:
c0024bf4:	55                   	push   ebp
c0024bf5:	89 e5                	mov    ebp,esp
c0024bf7:	83 ec 08             	sub    esp,0x8
c0024bfa:	9b d9 7d fc          	fstcw  WORD PTR [ebp-0x4]
c0024bfe:	66 8b 55 fc          	mov    dx,WORD PTR [ebp-0x4]
c0024c02:	66 81 ca 00 04       	or     dx,0x400
c0024c07:	66 81 e2 ff f7       	and    dx,0xf7ff
c0024c0c:	66 89 55 f8          	mov    WORD PTR [ebp-0x8],dx
c0024c10:	d9 6d f8             	fldcw  WORD PTR [ebp-0x8]
c0024c13:	dd 45 08             	fld    QWORD PTR [ebp+0x8]
c0024c16:	d9 fc                	frndint 
c0024c18:	d9 6d fc             	fldcw  WORD PTR [ebp-0x4]
c0024c1b:	c9                   	leave  
c0024c1c:	c3                   	ret    
c0024c1d:	66 90                	xchg   ax,ax
c0024c1f:	90                   	nop

c0024c20 <tan>:
c0024c20:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0024c24:	d9 f2                	fptan  
c0024c26:	df e0                	fnstsw ax
c0024c28:	66 25 00 04          	and    ax,0x400
c0024c2c:	75 03                	jne    c0024c31 <tan+0x11>
c0024c2e:	dd d8                	fstp   st(0)
c0024c30:	c3                   	ret    
c0024c31:	d9 eb                	fldpi  
c0024c33:	d8 c0                	fadd   st,st(0)
c0024c35:	d9 c9                	fxch   st(1)
c0024c37:	d9 f5                	fprem1 
c0024c39:	9b df e0             	fstsw  ax
c0024c3c:	66 25 00 04          	and    ax,0x400
c0024c40:	75 f5                	jne    c0024c37 <tan+0x17>
c0024c42:	dd d9                	fstp   st(1)
c0024c44:	d9 f2                	fptan  
c0024c46:	dd d8                	fstp   st(0)
c0024c48:	c3                   	ret    
c0024c49:	66 90                	xchg   ax,ax
c0024c4b:	90                   	nop

c0024c4c <ldexp>:
c0024c4c:	db 44 24 0c          	fild   DWORD PTR [esp+0xc]
c0024c50:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0024c54:	d9 fd                	fscale 
c0024c56:	dd d9                	fstp   st(1)
c0024c58:	c3                   	ret    
c0024c59:	66 90                	xchg   ax,ax
c0024c5b:	66 90                	xchg   ax,ax
c0024c5d:	66 90                	xchg   ax,ax
c0024c5f:	90                   	nop

c0024c60 <__ieee754_rem_pio2>:
c0024c60:	56                   	push   esi
c0024c61:	53                   	push   ebx
c0024c62:	83 ec 74             	sub    esp,0x74
c0024c65:	dd 84 24 80 00 00 00 	fld    QWORD PTR [esp+0x80]
c0024c6c:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0024c73:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c0024c77:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024c7b:	89 f2                	mov    edx,esi
c0024c7d:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024c83:	81 fa 7a 6a 0f 40    	cmp    edx,0x400f6a7a
c0024c89:	7f 65                	jg     c0024cf0 <__ieee754_rem_pio2+0x90>
c0024c8b:	89 f0                	mov    eax,esi
c0024c8d:	25 ff ff 0f 00       	and    eax,0xfffff
c0024c92:	3d fb 21 09 00       	cmp    eax,0x921fb
c0024c97:	0f 84 57 02 00 00    	je     c0024ef4 <__ieee754_rem_pio2+0x294>
c0024c9d:	81 fa 7c d9 02 40    	cmp    edx,0x4002d97c
c0024ca3:	0f 8f b7 01 00 00    	jg     c0024e60 <__ieee754_rem_pio2+0x200>
c0024ca9:	85 f6                	test   esi,esi
c0024cab:	0f 8e 3a 04 00 00    	jle    c00250eb <__ieee754_rem_pio2+0x48b>
c0024cb1:	dc 25 18 b1 02 c0    	fsub   QWORD PTR ds:0xc002b118
c0024cb7:	b8 01 00 00 00       	mov    eax,0x1
c0024cbc:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024cc0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024cc4:	dd 05 20 b1 02 c0    	fld    QWORD PTR ds:0xc002b120
c0024cca:	d9 c1                	fld    st(1)
c0024ccc:	d8 e1                	fsub   st,st(1)
c0024cce:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024cd2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024cd6:	dd 13                	fst    QWORD PTR [ebx]
c0024cd8:	de ea                	fsubp  st(2),st
c0024cda:	de e9                	fsubp  st(1),st
c0024cdc:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0024cdf:	83 c4 74             	add    esp,0x74
c0024ce2:	5b                   	pop    ebx
c0024ce3:	5e                   	pop    esi
c0024ce4:	c3                   	ret    
c0024ce5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024ce9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024cf0:	dd d8                	fstp   st(0)
c0024cf2:	81 fa 3b 46 1c 40    	cmp    edx,0x401c463b
c0024cf8:	7f 66                	jg     c0024d60 <__ieee754_rem_pio2+0x100>
c0024cfa:	81 fa bc fd 15 40    	cmp    edx,0x4015fdbc
c0024d00:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0024d04:	0f 8f 96 01 00 00    	jg     c0024ea0 <__ieee754_rem_pio2+0x240>
c0024d0a:	81 fa 7c d9 12 40    	cmp    edx,0x4012d97c
c0024d10:	0f 84 de 01 00 00    	je     c0024ef4 <__ieee754_rem_pio2+0x294>
c0024d16:	85 f6                	test   esi,esi
c0024d18:	0f 8e 00 04 00 00    	jle    c002511e <__ieee754_rem_pio2+0x4be>
c0024d1e:	dc 25 38 b1 02 c0    	fsub   QWORD PTR ds:0xc002b138
c0024d24:	b8 03 00 00 00       	mov    eax,0x3
c0024d29:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024d2d:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024d31:	db 2d 80 b1 02 c0    	fld    TBYTE PTR ds:0xc002b180
c0024d37:	d9 c1                	fld    st(1)
c0024d39:	d8 e1                	fsub   st,st(1)
c0024d3b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024d3f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024d43:	dd 13                	fst    QWORD PTR [ebx]
c0024d45:	de ea                	fsubp  st(2),st
c0024d47:	de e9                	fsubp  st(1),st
c0024d49:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0024d4c:	83 c4 74             	add    esp,0x74
c0024d4f:	5b                   	pop    ebx
c0024d50:	5e                   	pop    esi
c0024d51:	c3                   	ret    
c0024d52:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024d59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024d60:	81 fa fa 21 39 41    	cmp    edx,0x413921fa
c0024d66:	0f 8e 84 01 00 00    	jle    c0024ef0 <__ieee754_rem_pio2+0x290>
c0024d6c:	81 fa ff ff ef 7f    	cmp    edx,0x7fefffff
c0024d72:	0f 8f d8 02 00 00    	jg     c0025050 <__ieee754_rem_pio2+0x3f0>
c0024d78:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c0024d7c:	89 d1                	mov    ecx,edx
c0024d7e:	c1 f9 14             	sar    ecx,0x14
c0024d81:	81 e9 16 04 00 00    	sub    ecx,0x416
c0024d87:	89 c8                	mov    eax,ecx
c0024d89:	c1 e0 14             	shl    eax,0x14
c0024d8c:	29 c2                	sub    edx,eax
c0024d8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0024d96:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0024d9a:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c0024d9f:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024da3:	66 0d 00 0c          	or     ax,0xc00
c0024da7:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c0024dac:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0024db0:	db 54 24 20          	fist   DWORD PTR [esp+0x20]
c0024db4:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0024db8:	db 44 24 20          	fild   DWORD PTR [esp+0x20]
c0024dbc:	dd 54 24 58          	fst    QWORD PTR [esp+0x58]
c0024dc0:	de e9                	fsubp  st(1),st
c0024dc2:	d9 05 94 b1 02 c0    	fld    DWORD PTR ds:0xc002b194
c0024dc8:	dc c9                	fmul   st(1),st
c0024dca:	d9 c9                	fxch   st(1)
c0024dcc:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024dd0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024dd4:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0024dd8:	db 54 24 20          	fist   DWORD PTR [esp+0x20]
c0024ddc:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0024de0:	db 44 24 20          	fild   DWORD PTR [esp+0x20]
c0024de4:	dd 54 24 60          	fst    QWORD PTR [esp+0x60]
c0024de8:	de e9                	fsubp  st(1),st
c0024dea:	de c9                	fmulp  st(1),st
c0024dec:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024df0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024df4:	dd 54 24 68          	fst    QWORD PTR [esp+0x68]
c0024df8:	d9 ee                	fldz   
c0024dfa:	d9 c9                	fxch   st(1)
c0024dfc:	df e9                	fucomip st,st(1)
c0024dfe:	dd d8                	fstp   st(0)
c0024e00:	0f 8a 8a 02 00 00    	jp     c0025090 <__ieee754_rem_pio2+0x430>
c0024e06:	0f 85 84 02 00 00    	jne    c0025090 <__ieee754_rem_pio2+0x430>
c0024e0c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0024e10:	31 c0                	xor    eax,eax
c0024e12:	85 d2                	test   edx,edx
c0024e14:	0f 95 c0             	setne  al
c0024e17:	40                   	inc    eax
c0024e18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024e1c:	8d 44 24 48          	lea    eax,[esp+0x48]
c0024e20:	ba 01 00 00 00       	mov    edx,0x1
c0024e25:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024e29:	8d 44 24 58          	lea    eax,[esp+0x58]
c0024e2d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0024e31:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0024e35:	89 04 24             	mov    DWORD PTR [esp],eax
c0024e38:	e8 f3 03 00 00       	call   c0025230 <__kernel_rem_pio2>
c0024e3d:	85 f6                	test   esi,esi
c0024e3f:	0f 88 5b 02 00 00    	js     c00250a0 <__ieee754_rem_pio2+0x440>
c0024e45:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024e49:	dd 1b                	fstp   QWORD PTR [ebx]
c0024e4b:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0024e4f:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0024e52:	e9 88 fe ff ff       	jmp    c0024cdf <__ieee754_rem_pio2+0x7f>
c0024e57:	89 f6                	mov    esi,esi
c0024e59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024e60:	85 f6                	test   esi,esi
c0024e62:	0f 8e 50 02 00 00    	jle    c00250b8 <__ieee754_rem_pio2+0x458>
c0024e68:	dc 25 28 b1 02 c0    	fsub   QWORD PTR ds:0xc002b128
c0024e6e:	b8 02 00 00 00       	mov    eax,0x2
c0024e73:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024e77:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024e7b:	dd 05 30 b1 02 c0    	fld    QWORD PTR ds:0xc002b130
c0024e81:	d9 c1                	fld    st(1)
c0024e83:	d8 e1                	fsub   st,st(1)
c0024e85:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024e89:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024e8d:	dd 13                	fst    QWORD PTR [ebx]
c0024e8f:	de ea                	fsubp  st(2),st
c0024e91:	de e9                	fsubp  st(1),st
c0024e93:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0024e96:	83 c4 74             	add    esp,0x74
c0024e99:	5b                   	pop    ebx
c0024e9a:	5e                   	pop    esi
c0024e9b:	c3                   	ret    
c0024e9c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024ea0:	81 fa fb 21 19 40    	cmp    edx,0x401921fb
c0024ea6:	74 4c                	je     c0024ef4 <__ieee754_rem_pio2+0x294>
c0024ea8:	85 f6                	test   esi,esi
c0024eaa:	0f 8e a1 02 00 00    	jle    c0025151 <__ieee754_rem_pio2+0x4f1>
c0024eb0:	dc 25 40 b1 02 c0    	fsub   QWORD PTR ds:0xc002b140
c0024eb6:	b8 04 00 00 00       	mov    eax,0x4
c0024ebb:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024ebf:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024ec3:	dd 05 48 b1 02 c0    	fld    QWORD PTR ds:0xc002b148
c0024ec9:	d9 c1                	fld    st(1)
c0024ecb:	d8 e1                	fsub   st,st(1)
c0024ecd:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024ed1:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024ed5:	dd 13                	fst    QWORD PTR [ebx]
c0024ed7:	de ea                	fsubp  st(2),st
c0024ed9:	de e9                	fsubp  st(1),st
c0024edb:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0024ede:	83 c4 74             	add    esp,0x74
c0024ee1:	5b                   	pop    ebx
c0024ee2:	5e                   	pop    esi
c0024ee3:	c3                   	ret    
c0024ee4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024eea:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024ef0:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0024ef4:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c0024ef8:	d9 c0                	fld    st(0)
c0024efa:	dc 0d 50 b1 02 c0    	fmul   QWORD PTR ds:0xc002b150
c0024f00:	c1 fa 14             	sar    edx,0x14
c0024f03:	89 d6                	mov    esi,edx
c0024f05:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c0024f0a:	d9 05 90 b1 02 c0    	fld    DWORD PTR ds:0xc002b190
c0024f10:	dc c1                	fadd   st(1),st
c0024f12:	d9 c9                	fxch   st(1)
c0024f14:	66 0d 00 0c          	or     ax,0xc00
c0024f18:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c0024f1d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024f21:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024f25:	de e1                	fsubrp st(1),st
c0024f27:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024f2b:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024f2f:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0024f33:	db 54 24 30          	fist   DWORD PTR [esp+0x30]
c0024f37:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0024f3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f3f:	d9 c0                	fld    st(0)
c0024f41:	dc 0d 18 b1 02 c0    	fmul   QWORD PTR ds:0xc002b118
c0024f47:	de ea                	fsubp  st(2),st
c0024f49:	d9 c9                	fxch   st(1)
c0024f4b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024f4f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024f53:	d9 c1                	fld    st(1)
c0024f55:	dc 0d 20 b1 02 c0    	fmul   QWORD PTR ds:0xc002b120
c0024f5b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024f5f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024f63:	d9 c1                	fld    st(1)
c0024f65:	d8 e1                	fsub   st,st(1)
c0024f67:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0024f6b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0024f6f:	c1 e9 14             	shr    ecx,0x14
c0024f72:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0024f78:	29 ce                	sub    esi,ecx
c0024f7a:	83 fe 10             	cmp    esi,0x10
c0024f7d:	7f 21                	jg     c0024fa0 <__ieee754_rem_pio2+0x340>
c0024f7f:	dd da                	fstp   st(2)
c0024f81:	d9 c9                	fxch   st(1)
c0024f83:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0024f87:	dd 1b                	fstp   QWORD PTR [ebx]
c0024f89:	d9 c9                	fxch   st(1)
c0024f8b:	dc 64 24 20          	fsub   QWORD PTR [esp+0x20]
c0024f8f:	de e1                	fsubrp st(1),st
c0024f91:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0024f94:	83 c4 74             	add    esp,0x74
c0024f97:	5b                   	pop    ebx
c0024f98:	5e                   	pop    esi
c0024f99:	c3                   	ret    
c0024f9a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024fa0:	dd d8                	fstp   st(0)
c0024fa2:	d9 c1                	fld    st(1)
c0024fa4:	dc 0d 58 b1 02 c0    	fmul   QWORD PTR ds:0xc002b158
c0024faa:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024fae:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024fb2:	d9 c1                	fld    st(1)
c0024fb4:	d8 e1                	fsub   st,st(1)
c0024fb6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024fba:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024fbe:	d9 c0                	fld    st(0)
c0024fc0:	dc eb                	fsub   st(3),st
c0024fc2:	d9 cb                	fxch   st(3)
c0024fc4:	de e2                	fsubrp st(2),st
c0024fc6:	d9 c3                	fld    st(3)
c0024fc8:	dc 0d 60 b1 02 c0    	fmul   QWORD PTR ds:0xc002b160
c0024fce:	de e2                	fsubrp st(2),st
c0024fd0:	d9 c9                	fxch   st(1)
c0024fd2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024fd6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024fda:	d9 c2                	fld    st(2)
c0024fdc:	d8 e1                	fsub   st,st(1)
c0024fde:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0024fe2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0024fe6:	c1 e9 14             	shr    ecx,0x14
c0024fe9:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0024fef:	29 ca                	sub    edx,ecx
c0024ff1:	83 fa 31             	cmp    edx,0x31
c0024ff4:	7e 7a                	jle    c0025070 <__ieee754_rem_pio2+0x410>
c0024ff6:	dd d8                	fstp   st(0)
c0024ff8:	dd d8                	fstp   st(0)
c0024ffa:	d9 c1                	fld    st(1)
c0024ffc:	dc 0d 68 b1 02 c0    	fmul   QWORD PTR ds:0xc002b168
c0025002:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025006:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002500a:	d9 c1                	fld    st(1)
c002500c:	d8 e1                	fsub   st,st(1)
c002500e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025012:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025016:	d9 cb                	fxch   st(3)
c0025018:	dc 0d 70 b1 02 c0    	fmul   QWORD PTR ds:0xc002b170
c002501e:	d9 ca                	fxch   st(2)
c0025020:	d8 e3                	fsub   st,st(3)
c0025022:	de e1                	fsubrp st(1),st
c0025024:	de e9                	fsubp  st(1),st
c0025026:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002502a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002502e:	d9 c1                	fld    st(1)
c0025030:	d8 e1                	fsub   st,st(1)
c0025032:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0025036:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c002503a:	dd 1b                	fstp   QWORD PTR [ebx]
c002503c:	d9 c9                	fxch   st(1)
c002503e:	e9 48 ff ff ff       	jmp    c0024f8b <__ieee754_rem_pio2+0x32b>
c0025043:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025049:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025050:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0025054:	31 c0                	xor    eax,eax
c0025056:	d8 e0                	fsub   st,st(0)
c0025058:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002505c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025060:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0025063:	dd 1b                	fstp   QWORD PTR [ebx]
c0025065:	e9 75 fc ff ff       	jmp    c0024cdf <__ieee754_rem_pio2+0x7f>
c002506a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025070:	dd da                	fstp   st(2)
c0025072:	dd da                	fstp   st(2)
c0025074:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0025078:	dd 1b                	fstp   QWORD PTR [ebx]
c002507a:	d9 c9                	fxch   st(1)
c002507c:	e9 0a ff ff ff       	jmp    c0024f8b <__ieee754_rem_pio2+0x32b>
c0025081:	eb 0d                	jmp    c0025090 <__ieee754_rem_pio2+0x430>
c0025083:	90                   	nop
c0025084:	90                   	nop
c0025085:	90                   	nop
c0025086:	90                   	nop
c0025087:	90                   	nop
c0025088:	90                   	nop
c0025089:	90                   	nop
c002508a:	90                   	nop
c002508b:	90                   	nop
c002508c:	90                   	nop
c002508d:	90                   	nop
c002508e:	90                   	nop
c002508f:	90                   	nop
c0025090:	b8 03 00 00 00       	mov    eax,0x3
c0025095:	e9 7e fd ff ff       	jmp    c0024e18 <__ieee754_rem_pio2+0x1b8>
c002509a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00250a0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00250a4:	f7 d8                	neg    eax
c00250a6:	d9 e0                	fchs   
c00250a8:	dd 1b                	fstp   QWORD PTR [ebx]
c00250aa:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c00250ae:	d9 e0                	fchs   
c00250b0:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c00250b3:	e9 27 fc ff ff       	jmp    c0024cdf <__ieee754_rem_pio2+0x7f>
c00250b8:	dc 05 28 b1 02 c0    	fadd   QWORD PTR ds:0xc002b128
c00250be:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00250c3:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00250c7:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00250cb:	dd 05 30 b1 02 c0    	fld    QWORD PTR ds:0xc002b130
c00250d1:	d9 c1                	fld    st(1)
c00250d3:	d8 c1                	fadd   st,st(1)
c00250d5:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00250d9:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00250dd:	dd 13                	fst    QWORD PTR [ebx]
c00250df:	de ea                	fsubp  st(2),st
c00250e1:	de c1                	faddp  st(1),st
c00250e3:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c00250e6:	e9 f4 fb ff ff       	jmp    c0024cdf <__ieee754_rem_pio2+0x7f>
c00250eb:	dc 05 18 b1 02 c0    	fadd   QWORD PTR ds:0xc002b118
c00250f1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00250f6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00250fa:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00250fe:	dd 05 20 b1 02 c0    	fld    QWORD PTR ds:0xc002b120
c0025104:	d9 c1                	fld    st(1)
c0025106:	d8 c1                	fadd   st,st(1)
c0025108:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002510c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025110:	dd 13                	fst    QWORD PTR [ebx]
c0025112:	de ea                	fsubp  st(2),st
c0025114:	de c1                	faddp  st(1),st
c0025116:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0025119:	e9 c1 fb ff ff       	jmp    c0024cdf <__ieee754_rem_pio2+0x7f>
c002511e:	dc 05 38 b1 02 c0    	fadd   QWORD PTR ds:0xc002b138
c0025124:	b8 fd ff ff ff       	mov    eax,0xfffffffd
c0025129:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002512d:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025131:	db 2d 80 b1 02 c0    	fld    TBYTE PTR ds:0xc002b180
c0025137:	d9 c1                	fld    st(1)
c0025139:	d8 c1                	fadd   st,st(1)
c002513b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002513f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025143:	dd 13                	fst    QWORD PTR [ebx]
c0025145:	de ea                	fsubp  st(2),st
c0025147:	de c1                	faddp  st(1),st
c0025149:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c002514c:	e9 8e fb ff ff       	jmp    c0024cdf <__ieee754_rem_pio2+0x7f>
c0025151:	dc 05 40 b1 02 c0    	fadd   QWORD PTR ds:0xc002b140
c0025157:	b8 fc ff ff ff       	mov    eax,0xfffffffc
c002515c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025160:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025164:	dd 05 48 b1 02 c0    	fld    QWORD PTR ds:0xc002b148
c002516a:	d9 c1                	fld    st(1)
c002516c:	d8 c1                	fadd   st,st(1)
c002516e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025172:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025176:	dd 13                	fst    QWORD PTR [ebx]
c0025178:	de ea                	fsubp  st(2),st
c002517a:	de c1                	faddp  st(1),st
c002517c:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c002517f:	e9 5b fb ff ff       	jmp    c0024cdf <__ieee754_rem_pio2+0x7f>
c0025184:	66 90                	xchg   ax,ax
c0025186:	66 90                	xchg   ax,ax
c0025188:	66 90                	xchg   ax,ax
c002518a:	66 90                	xchg   ax,ax
c002518c:	66 90                	xchg   ax,ax
c002518e:	66 90                	xchg   ax,ax

c0025190 <__kernel_cos>:
c0025190:	83 ec 0c             	sub    esp,0xc
c0025193:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025197:	d9 c0                	fld    st(0)
c0025199:	d8 c9                	fmul   st,st(1)
c002519b:	dd 1c 24             	fstp   QWORD PTR [esp]
c002519e:	dd 04 24             	fld    QWORD PTR [esp]
c00251a1:	d9 c0                	fld    st(0)
c00251a3:	d8 c9                	fmul   st,st(1)
c00251a5:	dd 1c 24             	fstp   QWORD PTR [esp]
c00251a8:	dd 04 24             	fld    QWORD PTR [esp]
c00251ab:	d9 c1                	fld    st(1)
c00251ad:	d8 0d 84 ae 02 c0    	fmul   DWORD PTR ds:0xc002ae84
c00251b3:	dd 1c 24             	fstp   QWORD PTR [esp]
c00251b6:	dd 04 24             	fld    QWORD PTR [esp]
c00251b9:	d9 e8                	fld1   
c00251bb:	d9 c0                	fld    st(0)
c00251bd:	d8 e2                	fsub   st,st(2)
c00251bf:	dd 1c 24             	fstp   QWORD PTR [esp]
c00251c2:	dd 04 24             	fld    QWORD PTR [esp]
c00251c5:	d9 c4                	fld    st(4)
c00251c7:	dc 0d 98 b1 02 c0    	fmul   QWORD PTR ds:0xc002b198
c00251cd:	dc 05 a0 b1 02 c0    	fadd   QWORD PTR ds:0xc002b1a0
c00251d3:	d8 cd                	fmul   st,st(5)
c00251d5:	dc 25 a8 b1 02 c0    	fsub   QWORD PTR ds:0xc002b1a8
c00251db:	d9 cc                	fxch   st(4)
c00251dd:	d8 c8                	fmul   st,st(0)
c00251df:	de cc                	fmulp  st(4),st
c00251e1:	d9 c4                	fld    st(4)
c00251e3:	dc 0d b0 b1 02 c0    	fmul   QWORD PTR ds:0xc002b1b0
c00251e9:	dc 25 b8 b1 02 c0    	fsub   QWORD PTR ds:0xc002b1b8
c00251ef:	d8 cd                	fmul   st,st(5)
c00251f1:	dc 05 c0 b1 02 c0    	fadd   QWORD PTR ds:0xc002b1c0
c00251f7:	d8 cd                	fmul   st,st(5)
c00251f9:	de c4                	faddp  st(4),st
c00251fb:	d9 cb                	fxch   st(3)
c00251fd:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025200:	dd 04 24             	fld    QWORD PTR [esp]
c0025203:	de cc                	fmulp  st(4),st
c0025205:	d9 cc                	fxch   st(4)
c0025207:	dc 4c 24 18          	fmul   QWORD PTR [esp+0x18]
c002520b:	de eb                	fsubp  st(3),st
c002520d:	d9 cb                	fxch   st(3)
c002520f:	d8 e1                	fsub   st,st(1)
c0025211:	de e3                	fsubrp st(3),st
c0025213:	d9 c9                	fxch   st(1)
c0025215:	de c2                	faddp  st(2),st
c0025217:	de c1                	faddp  st(1),st
c0025219:	dd 1c 24             	fstp   QWORD PTR [esp]
c002521c:	dd 04 24             	fld    QWORD PTR [esp]
c002521f:	83 c4 0c             	add    esp,0xc
c0025222:	c3                   	ret    
c0025223:	66 90                	xchg   ax,ax
c0025225:	66 90                	xchg   ax,ax
c0025227:	66 90                	xchg   ax,ax
c0025229:	66 90                	xchg   ax,ax
c002522b:	66 90                	xchg   ax,ax
c002522d:	66 90                	xchg   ax,ax
c002522f:	90                   	nop

c0025230 <__kernel_rem_pio2>:
c0025230:	55                   	push   ebp
c0025231:	57                   	push   edi
c0025232:	56                   	push   esi
c0025233:	53                   	push   ebx
c0025234:	81 ec 8c 02 00 00    	sub    esp,0x28c
c002523a:	8b 84 24 b0 02 00 00 	mov    eax,DWORD PTR [esp+0x2b0]
c0025241:	8b 9c 24 a8 02 00 00 	mov    ebx,DWORD PTR [esp+0x2a8]
c0025248:	8b 04 85 a8 bc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4358]
c002524f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0025253:	8b 84 24 ac 02 00 00 	mov    eax,DWORD PTR [esp+0x2ac]
c002525a:	48                   	dec    eax
c002525b:	83 fb ec             	cmp    ebx,0xffffffec
c002525e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025262:	0f 8c 44 08 00 00    	jl     c0025aac <__kernel_rem_pio2+0x87c>
c0025268:	8d 4b fd             	lea    ecx,[ebx-0x3]
c002526b:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
c0025270:	89 c8                	mov    eax,ecx
c0025272:	f7 ea                	imul   edx
c0025274:	c1 f9 1f             	sar    ecx,0x1f
c0025277:	c1 fa 02             	sar    edx,0x2
c002527a:	29 ca                	sub    edx,ecx
c002527c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0025280:	8d 42 01             	lea    eax,[edx+0x1]
c0025283:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c002528a:	29 d0                	sub    eax,edx
c002528c:	c1 e0 03             	shl    eax,0x3
c002528f:	01 d8                	add    eax,ebx
c0025291:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025295:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0025299:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002529d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00252a1:	29 c2                	sub    edx,eax
c00252a3:	01 c6                	add    esi,eax
c00252a5:	78 58                	js     c00252ff <__kernel_rem_pio2+0xcf>
c00252a7:	85 d2                	test   edx,edx
c00252a9:	0f 89 f4 04 00 00    	jns    c00257a3 <__kernel_rem_pio2+0x573>
c00252af:	8d 5c 16 01          	lea    ebx,[esi+edx*1+0x1]
c00252b3:	b8 00 00 00 00       	mov    eax,0x0
c00252b8:	8d 8c 24 a0 00 00 00 	lea    ecx,[esp+0xa0]
c00252bf:	85 db                	test   ebx,ebx
c00252c1:	0f 4f d8             	cmovg  ebx,eax
c00252c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00252ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00252d0:	d9 ee                	fldz   
c00252d2:	42                   	inc    edx
c00252d3:	dd 1c c1             	fstp   QWORD PTR [ecx+eax*8]
c00252d6:	40                   	inc    eax
c00252d7:	39 da                	cmp    edx,ebx
c00252d9:	7c f5                	jl     c00252d0 <__kernel_rem_pio2+0xa0>
c00252db:	39 c6                	cmp    esi,eax
c00252dd:	7c 20                	jl     c00252ff <__kernel_rem_pio2+0xcf>
c00252df:	29 c2                	sub    edx,eax
c00252e1:	c1 e2 02             	shl    edx,0x2
c00252e4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00252ea:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00252f0:	db 84 82 e0 b1 02 c0 	fild   DWORD PTR [edx+eax*4-0x3ffd4e20]
c00252f7:	dd 1c c1             	fstp   QWORD PTR [ecx+eax*8]
c00252fa:	40                   	inc    eax
c00252fb:	39 c6                	cmp    esi,eax
c00252fd:	7d f1                	jge    c00252f0 <__kernel_rem_pio2+0xc0>
c00252ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025303:	85 c0                	test   eax,eax
c0025305:	78 7c                	js     c0025383 <__kernel_rem_pio2+0x153>
c0025307:	8d 2c c5 08 00 00 00 	lea    ebp,[eax*8+0x8]
c002530e:	8b 84 24 ac 02 00 00 	mov    eax,DWORD PTR [esp+0x2ac]
c0025315:	31 db                	xor    ebx,ebx
c0025317:	8b 8c 24 a0 02 00 00 	mov    ecx,DWORD PTR [esp+0x2a0]
c002531e:	8d b4 24 e0 01 00 00 	lea    esi,[esp+0x1e0]
c0025325:	c1 e0 03             	shl    eax,0x3
c0025328:	8d bc 04 98 00 00 00 	lea    edi,[esp+eax*1+0x98]
c002532f:	01 c1                	add    ecx,eax
c0025331:	eb 0d                	jmp    c0025340 <__kernel_rem_pio2+0x110>
c0025333:	90                   	nop
c0025334:	90                   	nop
c0025335:	90                   	nop
c0025336:	90                   	nop
c0025337:	90                   	nop
c0025338:	90                   	nop
c0025339:	90                   	nop
c002533a:	90                   	nop
c002533b:	90                   	nop
c002533c:	90                   	nop
c002533d:	90                   	nop
c002533e:	90                   	nop
c002533f:	90                   	nop
c0025340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025344:	85 c0                	test   eax,eax
c0025346:	0f 88 65 04 00 00    	js     c00257b1 <__kernel_rem_pio2+0x581>
c002534c:	8b 84 24 a0 02 00 00 	mov    eax,DWORD PTR [esp+0x2a0]
c0025353:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0025356:	d9 ee                	fldz   
c0025358:	90                   	nop
c0025359:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025360:	dd 02                	fld    QWORD PTR [edx]
c0025362:	83 c0 08             	add    eax,0x8
c0025365:	83 ea 08             	sub    edx,0x8
c0025368:	dc 48 f8             	fmul   QWORD PTR [eax-0x8]
c002536b:	39 c1                	cmp    ecx,eax
c002536d:	de c1                	faddp  st(1),st
c002536f:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025373:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025377:	75 e7                	jne    c0025360 <__kernel_rem_pio2+0x130>
c0025379:	dd 1c 1e             	fstp   QWORD PTR [esi+ebx*1]
c002537c:	83 c3 08             	add    ebx,0x8
c002537f:	39 dd                	cmp    ebp,ebx
c0025381:	75 bd                	jne    c0025340 <__kernel_rem_pio2+0x110>
c0025383:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0025387:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c002538b:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
c0025392:	8d 7c 04 4c          	lea    edi,[esp+eax*1+0x4c]
c0025396:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
c002539a:	8d 44 04 48          	lea    eax,[esp+eax*1+0x48]
c002539e:	8b bc 24 ac 02 00 00 	mov    edi,DWORD PTR [esp+0x2ac]
c00253a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00253a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253ad:	c1 e0 02             	shl    eax,0x2
c00253b0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00253b4:	8b 84 24 a0 02 00 00 	mov    eax,DWORD PTR [esp+0x2a0]
c00253bb:	8d 1c f8             	lea    ebx,[eax+edi*8]
c00253be:	b8 18 00 00 00       	mov    eax,0x18
c00253c3:	29 e8                	sub    eax,ebp
c00253c5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00253c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00253d0:	85 f6                	test   esi,esi
c00253d2:	dd 84 f4 e0 01 00 00 	fld    QWORD PTR [esp+esi*8+0x1e0]
c00253d9:	7e 6a                	jle    c0025445 <__kernel_rem_pio2+0x215>
c00253db:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c00253df:	8d ac 24 e0 01 00 00 	lea    ebp,[esp+0x1e0]
c00253e6:	8d 44 f5 f8          	lea    eax,[ebp+esi*8-0x8]
c00253ea:	8d 54 24 50          	lea    edx,[esp+0x50]
c00253ee:	0f b7 4c 24 46       	movzx  ecx,WORD PTR [esp+0x46]
c00253f3:	66 81 c9 00 0c       	or     cx,0xc00
c00253f8:	66 89 4c 24 44       	mov    WORD PTR [esp+0x44],cx
c00253fd:	eb 03                	jmp    c0025402 <__kernel_rem_pio2+0x1d2>
c00253ff:	90                   	nop
c0025400:	89 c8                	mov    eax,ecx
c0025402:	83 c2 04             	add    edx,0x4
c0025405:	d9 c0                	fld    st(0)
c0025407:	d8 0d bc bc 02 c0    	fmul   DWORD PTR ds:0xc002bcbc
c002540d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0025410:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0025414:	db 5c 24 10          	fistp  DWORD PTR [esp+0x10]
c0025418:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c002541c:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0025420:	d9 c0                	fld    st(0)
c0025422:	d8 0d 94 b1 02 c0    	fmul   DWORD PTR ds:0xc002b194
c0025428:	de ea                	fsubp  st(2),st
c002542a:	d9 c9                	fxch   st(1)
c002542c:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0025430:	db 5a fc             	fistp  DWORD PTR [edx-0x4]
c0025433:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c0025437:	39 c5                	cmp    ebp,eax
c0025439:	dc 00                	fadd   QWORD PTR [eax]
c002543b:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002543f:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025443:	75 bb                	jne    c0025400 <__kernel_rem_pio2+0x1d0>
c0025445:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0025449:	dd 1c 24             	fstp   QWORD PTR [esp]
c002544c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0025450:	e8 f7 f7 ff ff       	call   c0024c4c <ldexp>
c0025455:	d9 c0                	fld    st(0)
c0025457:	db 7c 24 10          	fstp   TBYTE PTR [esp+0x10]
c002545b:	d8 0d c0 bc 02 c0    	fmul   DWORD PTR ds:0xc002bcc0
c0025461:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025464:	e8 8b f7 ff ff       	call   c0024bf4 <floor>
c0025469:	d9 05 c4 bc 02 c0    	fld    DWORD PTR ds:0xc002bcc4
c002546f:	de c9                	fmulp  st(1),st
c0025471:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c0025475:	db 6c 24 10          	fld    TBYTE PTR [esp+0x10]
c0025479:	0f b7 44 24 46       	movzx  eax,WORD PTR [esp+0x46]
c002547e:	de e1                	fsubrp st(1),st
c0025480:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025484:	66 0d 00 0c          	or     ax,0xc00
c0025488:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
c002548d:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025491:	85 ff                	test   edi,edi
c0025493:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0025497:	db 54 24 40          	fist   DWORD PTR [esp+0x40]
c002549b:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c002549f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00254a3:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00254a7:	db 44 24 24          	fild   DWORD PTR [esp+0x24]
c00254ab:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c00254af:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c00254b3:	de e9                	fsubp  st(1),st
c00254b5:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00254b9:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00254bd:	0f 8e 2d 01 00 00    	jle    c00255f0 <__kernel_rem_pio2+0x3c0>
c00254c3:	8d 7e ff             	lea    edi,[esi-0x1]
c00254c6:	0f b6 4c 24 2c       	movzx  ecx,BYTE PTR [esp+0x2c]
c00254cb:	8b 44 bc 50          	mov    eax,DWORD PTR [esp+edi*4+0x50]
c00254cf:	89 c2                	mov    edx,eax
c00254d1:	d3 fa                	sar    edx,cl
c00254d3:	01 d5                	add    ebp,edx
c00254d5:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c00254d9:	d3 e2                	shl    edx,cl
c00254db:	b9 17 00 00 00       	mov    ecx,0x17
c00254e0:	29 d0                	sub    eax,edx
c00254e2:	89 44 bc 50          	mov    DWORD PTR [esp+edi*4+0x50],eax
c00254e6:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00254ea:	29 f9                	sub    ecx,edi
c00254ec:	d3 f8                	sar    eax,cl
c00254ee:	89 c5                	mov    ebp,eax
c00254f0:	85 ed                	test   ebp,ebp
c00254f2:	0f 8f 0e 01 00 00    	jg     c0025606 <__kernel_rem_pio2+0x3d6>
c00254f8:	d9 ee                	fldz   
c00254fa:	d9 c9                	fxch   st(1)
c00254fc:	db e9                	fucomi st,st(1)
c00254fe:	dd d9                	fstp   st(1)
c0025500:	0f 8a a2 01 00 00    	jp     c00256a8 <__kernel_rem_pio2+0x478>
c0025506:	0f 85 9c 01 00 00    	jne    c00256a8 <__kernel_rem_pio2+0x478>
c002550c:	dd d8                	fstp   st(0)
c002550e:	8d 7e ff             	lea    edi,[esi-0x1]
c0025511:	39 7c 24 28          	cmp    DWORD PTR [esp+0x28],edi
c0025515:	7f 2a                	jg     c0025541 <__kernel_rem_pio2+0x311>
c0025517:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002551b:	8d 44 b4 4c          	lea    eax,[esp+esi*4+0x4c]
c002551f:	31 d2                	xor    edx,edx
c0025521:	eb 0d                	jmp    c0025530 <__kernel_rem_pio2+0x300>
c0025523:	90                   	nop
c0025524:	90                   	nop
c0025525:	90                   	nop
c0025526:	90                   	nop
c0025527:	90                   	nop
c0025528:	90                   	nop
c0025529:	90                   	nop
c002552a:	90                   	nop
c002552b:	90                   	nop
c002552c:	90                   	nop
c002552d:	90                   	nop
c002552e:	90                   	nop
c002552f:	90                   	nop
c0025530:	0b 10                	or     edx,DWORD PTR [eax]
c0025532:	83 e8 04             	sub    eax,0x4
c0025535:	39 c1                	cmp    ecx,eax
c0025537:	75 f7                	jne    c0025530 <__kernel_rem_pio2+0x300>
c0025539:	85 d2                	test   edx,edx
c002553b:	0f 85 85 02 00 00    	jne    c00257c6 <__kernel_rem_pio2+0x596>
c0025541:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025545:	8b 4c 84 4c          	mov    ecx,DWORD PTR [esp+eax*4+0x4c]
c0025549:	85 c9                	test   ecx,ecx
c002554b:	0f 85 48 02 00 00    	jne    c0025799 <__kernel_rem_pio2+0x569>
c0025551:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0025555:	bf 01 00 00 00       	mov    edi,0x1
c002555a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025560:	83 e8 04             	sub    eax,0x4
c0025563:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0025566:	47                   	inc    edi
c0025567:	85 d2                	test   edx,edx
c0025569:	74 f5                	je     c0025560 <__kernel_rem_pio2+0x330>
c002556b:	8d 4e 01             	lea    ecx,[esi+0x1]
c002556e:	01 f7                	add    edi,esi
c0025570:	8b 84 24 ac 02 00 00 	mov    eax,DWORD PTR [esp+0x2ac]
c0025577:	8d ac 24 e0 01 00 00 	lea    ebp,[esp+0x1e0]
c002557e:	01 c6                	add    esi,eax
c0025580:	8d b4 f4 a0 00 00 00 	lea    esi,[esp+esi*8+0xa0]
c0025587:	89 f6                	mov    esi,esi
c0025589:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025590:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025594:	db 84 88 e0 b1 02 c0 	fild   DWORD PTR [eax+ecx*4-0x3ffd4e20]
c002559b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002559f:	85 c0                	test   eax,eax
c00255a1:	dd 1e                	fstp   QWORD PTR [esi]
c00255a3:	78 3b                	js     c00255e0 <__kernel_rem_pio2+0x3b0>
c00255a5:	8b 84 24 a0 02 00 00 	mov    eax,DWORD PTR [esp+0x2a0]
c00255ac:	d9 ee                	fldz   
c00255ae:	89 f2                	mov    edx,esi
c00255b0:	dd 02                	fld    QWORD PTR [edx]
c00255b2:	83 c0 08             	add    eax,0x8
c00255b5:	83 ea 08             	sub    edx,0x8
c00255b8:	dc 48 f8             	fmul   QWORD PTR [eax-0x8]
c00255bb:	39 c3                	cmp    ebx,eax
c00255bd:	de c1                	faddp  st(1),st
c00255bf:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00255c3:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00255c7:	75 e7                	jne    c00255b0 <__kernel_rem_pio2+0x380>
c00255c9:	dd 5c cd 00          	fstp   QWORD PTR [ebp+ecx*8+0x0]
c00255cd:	41                   	inc    ecx
c00255ce:	83 c6 08             	add    esi,0x8
c00255d1:	39 cf                	cmp    edi,ecx
c00255d3:	7d bb                	jge    c0025590 <__kernel_rem_pio2+0x360>
c00255d5:	89 fe                	mov    esi,edi
c00255d7:	e9 f4 fd ff ff       	jmp    c00253d0 <__kernel_rem_pio2+0x1a0>
c00255dc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00255e0:	d9 ee                	fldz   
c00255e2:	83 c6 08             	add    esi,0x8
c00255e5:	dd 5c cd 00          	fstp   QWORD PTR [ebp+ecx*8+0x0]
c00255e9:	41                   	inc    ecx
c00255ea:	39 cf                	cmp    edi,ecx
c00255ec:	7d a2                	jge    c0025590 <__kernel_rem_pio2+0x360>
c00255ee:	eb e5                	jmp    c00255d5 <__kernel_rem_pio2+0x3a5>
c00255f0:	0f 85 8a 01 00 00    	jne    c0025780 <__kernel_rem_pio2+0x550>
c00255f6:	8b 6c b4 4c          	mov    ebp,DWORD PTR [esp+esi*4+0x4c]
c00255fa:	c1 fd 17             	sar    ebp,0x17
c00255fd:	85 ed                	test   ebp,ebp
c00255ff:	90                   	nop
c0025600:	0f 8e f2 fe ff ff    	jle    c00254f8 <__kernel_rem_pio2+0x2c8>
c0025606:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c002560a:	85 f6                	test   esi,esi
c002560c:	0f 8e d3 04 00 00    	jle    c0025ae5 <__kernel_rem_pio2+0x8b5>
c0025612:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0025616:	85 d2                	test   edx,edx
c0025618:	0f 85 12 01 00 00    	jne    c0025730 <__kernel_rem_pio2+0x500>
c002561e:	83 fe 01             	cmp    esi,0x1
c0025621:	b9 01 00 00 00       	mov    ecx,0x1
c0025626:	74 15                	je     c002563d <__kernel_rem_pio2+0x40d>
c0025628:	8b 54 8c 50          	mov    edx,DWORD PTR [esp+ecx*4+0x50]
c002562c:	8d 41 01             	lea    eax,[ecx+0x1]
c002562f:	85 d2                	test   edx,edx
c0025631:	0f 85 00 01 00 00    	jne    c0025737 <__kernel_rem_pio2+0x507>
c0025637:	39 c6                	cmp    esi,eax
c0025639:	89 c1                	mov    ecx,eax
c002563b:	75 eb                	jne    c0025628 <__kernel_rem_pio2+0x3f8>
c002563d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0025641:	85 c0                	test   eax,eax
c0025643:	7e 16                	jle    c002565b <__kernel_rem_pio2+0x42b>
c0025645:	83 f8 01             	cmp    eax,0x1
c0025648:	0f 84 51 04 00 00    	je     c0025a9f <__kernel_rem_pio2+0x86f>
c002564e:	83 f8 02             	cmp    eax,0x2
c0025651:	75 08                	jne    c002565b <__kernel_rem_pio2+0x42b>
c0025653:	81 64 b4 4c ff ff 3f 00 	and    DWORD PTR [esp+esi*4+0x4c],0x3fffff
c002565b:	83 fd 02             	cmp    ebp,0x2
c002565e:	0f 85 94 fe ff ff    	jne    c00254f8 <__kernel_rem_pio2+0x2c8>
c0025664:	d9 e8                	fld1   
c0025666:	85 d2                	test   edx,edx
c0025668:	de e1                	fsubrp st(1),st
c002566a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002566e:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025672:	0f 84 80 fe ff ff    	je     c00254f8 <__kernel_rem_pio2+0x2c8>
c0025678:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002567c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0025680:	d9 e8                	fld1   
c0025682:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025685:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025689:	e8 be f5 ff ff       	call   c0024c4c <ldexp>
c002568e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025692:	de e1                	fsubrp st(1),st
c0025694:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025698:	d9 ee                	fldz   
c002569a:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002569e:	db e9                	fucomi st,st(1)
c00256a0:	dd d9                	fstp   st(1)
c00256a2:	0f 8b 5e fe ff ff    	jnp    c0025506 <__kernel_rem_pio2+0x2d6>
c00256a8:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00256ac:	dd 1c 24             	fstp   QWORD PTR [esp]
c00256af:	89 d8                	mov    eax,ebx
c00256b1:	f7 d8                	neg    eax
c00256b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00256b7:	e8 90 f5 ff ff       	call   c0024c4c <ldexp>
c00256bc:	d9 05 94 b1 02 c0    	fld    DWORD PTR ds:0xc002b194
c00256c2:	d9 c9                	fxch   st(1)
c00256c4:	db f1                	fcomi  st,st(1)
c00256c6:	dd d9                	fstp   st(1)
c00256c8:	0f 82 94 04 00 00    	jb     c0025b62 <__kernel_rem_pio2+0x932>
c00256ce:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c00256d2:	83 c3 18             	add    ebx,0x18
c00256d5:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c00256d9:	d9 c0                	fld    st(0)
c00256db:	d8 0d bc bc 02 c0    	fmul   DWORD PTR ds:0xc002bcbc
c00256e1:	8d 7e 01             	lea    edi,[esi+0x1]
c00256e4:	0f b7 44 24 46       	movzx  eax,WORD PTR [esp+0x46]
c00256e9:	66 0d 00 0c          	or     ax,0xc00
c00256ed:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
c00256f2:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c00256f6:	db 5c 24 40          	fistp  DWORD PTR [esp+0x40]
c00256fa:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c00256fe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0025702:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025706:	db 44 24 1c          	fild   DWORD PTR [esp+0x1c]
c002570a:	d8 0d 94 b1 02 c0    	fmul   DWORD PTR ds:0xc002b194
c0025710:	de e9                	fsubp  st(1),st
c0025712:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0025716:	db 5c b4 50          	fistp  DWORD PTR [esp+esi*4+0x50]
c002571a:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c002571e:	89 44 bc 50          	mov    DWORD PTR [esp+edi*4+0x50],eax
c0025722:	89 d8                	mov    eax,ebx
c0025724:	e9 be 00 00 00       	jmp    c00257e7 <__kernel_rem_pio2+0x5b7>
c0025729:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025730:	b8 01 00 00 00       	mov    eax,0x1
c0025735:	31 c9                	xor    ecx,ecx
c0025737:	bf 00 00 00 01       	mov    edi,0x1000000
c002573c:	29 d7                	sub    edi,edx
c002573e:	39 c6                	cmp    esi,eax
c0025740:	89 7c 8c 50          	mov    DWORD PTR [esp+ecx*4+0x50],edi
c0025744:	7e 30                	jle    c0025776 <__kernel_rem_pio2+0x546>
c0025746:	8b 4c 84 50          	mov    ecx,DWORD PTR [esp+eax*4+0x50]
c002574a:	ba ff ff ff 00       	mov    edx,0xffffff
c002574f:	29 ca                	sub    edx,ecx
c0025751:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0025755:	40                   	inc    eax
c0025756:	39 c6                	cmp    esi,eax
c0025758:	7e 1c                	jle    c0025776 <__kernel_rem_pio2+0x546>
c002575a:	8d 44 84 50          	lea    eax,[esp+eax*4+0x50]
c002575e:	b9 ff ff ff 00       	mov    ecx,0xffffff
c0025763:	8d 7c b4 50          	lea    edi,[esp+esi*4+0x50]
c0025767:	89 ca                	mov    edx,ecx
c0025769:	83 c0 04             	add    eax,0x4
c002576c:	2b 50 fc             	sub    edx,DWORD PTR [eax-0x4]
c002576f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0025772:	39 c7                	cmp    edi,eax
c0025774:	75 f1                	jne    c0025767 <__kernel_rem_pio2+0x537>
c0025776:	ba 01 00 00 00       	mov    edx,0x1
c002577b:	e9 bd fe ff ff       	jmp    c002563d <__kernel_rem_pio2+0x40d>
c0025780:	d9 05 84 ae 02 c0    	fld    DWORD PTR ds:0xc002ae84
c0025786:	d9 c9                	fxch   st(1)
c0025788:	db f1                	fcomi  st,st(1)
c002578a:	dd d9                	fstp   st(1)
c002578c:	0f 83 2a 03 00 00    	jae    c0025abc <__kernel_rem_pio2+0x88c>
c0025792:	31 ed                	xor    ebp,ebp
c0025794:	e9 5f fd ff ff       	jmp    c00254f8 <__kernel_rem_pio2+0x2c8>
c0025799:	8d 4e 01             	lea    ecx,[esi+0x1]
c002579c:	89 cf                	mov    edi,ecx
c002579e:	e9 cd fd ff ff       	jmp    c0025570 <__kernel_rem_pio2+0x340>
c00257a3:	8d 8c 24 a0 00 00 00 	lea    ecx,[esp+0xa0]
c00257aa:	31 c0                	xor    eax,eax
c00257ac:	e9 2e fb ff ff       	jmp    c00252df <__kernel_rem_pio2+0xaf>
c00257b1:	d9 ee                	fldz   
c00257b3:	dd 1c 1e             	fstp   QWORD PTR [esi+ebx*1]
c00257b6:	83 c3 08             	add    ebx,0x8
c00257b9:	39 dd                	cmp    ebp,ebx
c00257bb:	0f 85 7f fb ff ff    	jne    c0025340 <__kernel_rem_pio2+0x110>
c00257c1:	e9 bd fb ff ff       	jmp    c0025383 <__kernel_rem_pio2+0x153>
c00257c6:	8b 5c bc 50          	mov    ebx,DWORD PTR [esp+edi*4+0x50]
c00257ca:	83 6c 24 24 18       	sub    DWORD PTR [esp+0x24],0x18
c00257cf:	85 db                	test   ebx,ebx
c00257d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00257d5:	75 10                	jne    c00257e7 <__kernel_rem_pio2+0x5b7>
c00257d7:	4f                   	dec    edi
c00257d8:	83 e8 18             	sub    eax,0x18
c00257db:	8b 4c bc 50          	mov    ecx,DWORD PTR [esp+edi*4+0x50]
c00257df:	85 c9                	test   ecx,ecx
c00257e1:	74 f4                	je     c00257d7 <__kernel_rem_pio2+0x5a7>
c00257e3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00257e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00257eb:	d9 e8                	fld1   
c00257ed:	dd 1c 24             	fstp   QWORD PTR [esp]
c00257f0:	e8 57 f4 ff ff       	call   c0024c4c <ldexp>
c00257f5:	85 ff                	test   edi,edi
c00257f7:	0f 88 d2 03 00 00    	js     c0025bcf <__kernel_rem_pio2+0x99f>
c00257fd:	8d b4 24 e0 01 00 00 	lea    esi,[esp+0x1e0]
c0025804:	89 f8                	mov    eax,edi
c0025806:	8d 76 00             	lea    esi,[esi+0x0]
c0025809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025810:	db 44 84 50          	fild   DWORD PTR [esp+eax*4+0x50]
c0025814:	d8 c9                	fmul   st,st(1)
c0025816:	dd 1c c6             	fstp   QWORD PTR [esi+eax*8]
c0025819:	48                   	dec    eax
c002581a:	d8 0d bc bc 02 c0    	fmul   DWORD PTR ds:0xc002bcbc
c0025820:	83 f8 ff             	cmp    eax,0xffffffff
c0025823:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025827:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002582b:	75 e3                	jne    c0025810 <__kernel_rem_pio2+0x5e0>
c002582d:	dd d8                	fstp   st(0)
c002582f:	8d 04 fd 00 00 00 00 	lea    eax,[edi*8+0x0]
c0025836:	31 d2                	xor    edx,edx
c0025838:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002583c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025840:	8d 8c 24 40 01 00 00 	lea    ecx,[esp+0x140]
c0025847:	01 f0                	add    eax,esi
c0025849:	89 6c 24 20          	mov    DWORD PTR [esp+0x20],ebp
c002584d:	eb 03                	jmp    c0025852 <__kernel_rem_pio2+0x622>
c002584f:	90                   	nop
c0025850:	89 e8                	mov    eax,ebp
c0025852:	85 db                	test   ebx,ebx
c0025854:	0f 88 84 02 00 00    	js     c0025ade <__kernel_rem_pio2+0x8ae>
c002585a:	d9 05 dc bc 02 c0    	fld    DWORD PTR ds:0xc002bcdc
c0025860:	dc 08                	fmul   QWORD PTR [eax]
c0025862:	d8 05 b8 bc 02 c0    	fadd   DWORD PTR ds:0xc002bcb8
c0025868:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002586c:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025870:	0f 84 d9 00 00 00    	je     c002594f <__kernel_rem_pio2+0x71f>
c0025876:	85 d2                	test   edx,edx
c0025878:	0f 84 d1 00 00 00    	je     c002594f <__kernel_rem_pio2+0x71f>
c002587e:	d9 05 c8 bc 02 c0    	fld    DWORD PTR ds:0xc002bcc8
c0025884:	83 fb 01             	cmp    ebx,0x1
c0025887:	dc 48 08             	fmul   QWORD PTR [eax+0x8]
c002588a:	de c1                	faddp  st(1),st
c002588c:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025890:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025894:	0f 84 b5 00 00 00    	je     c002594f <__kernel_rem_pio2+0x71f>
c002589a:	83 fa 01             	cmp    edx,0x1
c002589d:	0f 84 ac 00 00 00    	je     c002594f <__kernel_rem_pio2+0x71f>
c00258a3:	d9 05 cc bc 02 c0    	fld    DWORD PTR ds:0xc002bccc
c00258a9:	83 fb 02             	cmp    ebx,0x2
c00258ac:	dc 48 10             	fmul   QWORD PTR [eax+0x10]
c00258af:	de c1                	faddp  st(1),st
c00258b1:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00258b5:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00258b9:	0f 84 90 00 00 00    	je     c002594f <__kernel_rem_pio2+0x71f>
c00258bf:	83 fa 02             	cmp    edx,0x2
c00258c2:	0f 84 87 00 00 00    	je     c002594f <__kernel_rem_pio2+0x71f>
c00258c8:	d9 05 d0 bc 02 c0    	fld    DWORD PTR ds:0xc002bcd0
c00258ce:	83 fb 03             	cmp    ebx,0x3
c00258d1:	dc 48 18             	fmul   QWORD PTR [eax+0x18]
c00258d4:	de c1                	faddp  st(1),st
c00258d6:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00258da:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00258de:	74 6f                	je     c002594f <__kernel_rem_pio2+0x71f>
c00258e0:	83 fa 03             	cmp    edx,0x3
c00258e3:	74 6a                	je     c002594f <__kernel_rem_pio2+0x71f>
c00258e5:	d9 05 d4 bc 02 c0    	fld    DWORD PTR ds:0xc002bcd4
c00258eb:	83 fb 04             	cmp    ebx,0x4
c00258ee:	dc 48 20             	fmul   QWORD PTR [eax+0x20]
c00258f1:	de c1                	faddp  st(1),st
c00258f3:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00258f7:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00258fb:	74 52                	je     c002594f <__kernel_rem_pio2+0x71f>
c00258fd:	83 fa 04             	cmp    edx,0x4
c0025900:	74 4d                	je     c002594f <__kernel_rem_pio2+0x71f>
c0025902:	d9 05 d8 bc 02 c0    	fld    DWORD PTR ds:0xc002bcd8
c0025908:	83 fb 05             	cmp    ebx,0x5
c002590b:	dc 48 28             	fmul   QWORD PTR [eax+0x28]
c002590e:	de c1                	faddp  st(1),st
c0025910:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025914:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025918:	74 35                	je     c002594f <__kernel_rem_pio2+0x71f>
c002591a:	83 fa 05             	cmp    edx,0x5
c002591d:	74 30                	je     c002594f <__kernel_rem_pio2+0x71f>
c002591f:	dd 05 e0 bc 02 c0    	fld    QWORD PTR ds:0xc002bce0
c0025925:	83 fb 06             	cmp    ebx,0x6
c0025928:	dc 48 30             	fmul   QWORD PTR [eax+0x30]
c002592b:	de c1                	faddp  st(1),st
c002592d:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025931:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025935:	74 18                	je     c002594f <__kernel_rem_pio2+0x71f>
c0025937:	83 fa 06             	cmp    edx,0x6
c002593a:	74 13                	je     c002594f <__kernel_rem_pio2+0x71f>
c002593c:	dd 05 e8 bc 02 c0    	fld    QWORD PTR ds:0xc002bce8
c0025942:	dc 48 38             	fmul   QWORD PTR [eax+0x38]
c0025945:	de c1                	faddp  st(1),st
c0025947:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002594b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002594f:	dd 1c d1             	fstp   QWORD PTR [ecx+edx*8]
c0025952:	42                   	inc    edx
c0025953:	8d 68 f8             	lea    ebp,[eax-0x8]
c0025956:	39 c6                	cmp    esi,eax
c0025958:	0f 85 f2 fe ff ff    	jne    c0025850 <__kernel_rem_pio2+0x620>
c002595e:	83 bc 24 b0 02 00 00 02 	cmp    DWORD PTR [esp+0x2b0],0x2
c0025966:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002596a:	7f 4f                	jg     c00259bb <__kernel_rem_pio2+0x78b>
c002596c:	8b 84 24 b0 02 00 00 	mov    eax,DWORD PTR [esp+0x2b0]
c0025973:	85 c0                	test   eax,eax
c0025975:	0f 8f 71 01 00 00    	jg     c0025aec <__kernel_rem_pio2+0x8bc>
c002597b:	75 2c                	jne    c00259a9 <__kernel_rem_pio2+0x779>
c002597d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025981:	d9 ee                	fldz   
c0025983:	01 c8                	add    eax,ecx
c0025985:	eb 02                	jmp    c0025989 <__kernel_rem_pio2+0x759>
c0025987:	89 d0                	mov    eax,edx
c0025989:	39 c8                	cmp    eax,ecx
c002598b:	dc 00                	fadd   QWORD PTR [eax]
c002598d:	8d 50 f8             	lea    edx,[eax-0x8]
c0025990:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025994:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025998:	75 ed                	jne    c0025987 <__kernel_rem_pio2+0x757>
c002599a:	85 ed                	test   ebp,ebp
c002599c:	74 02                	je     c00259a0 <__kernel_rem_pio2+0x770>
c002599e:	d9 e0                	fchs   
c00259a0:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c00259a7:	dd 18                	fstp   QWORD PTR [eax]
c00259a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259ad:	81 c4 8c 02 00 00    	add    esp,0x28c
c00259b3:	5b                   	pop    ebx
c00259b4:	5e                   	pop    esi
c00259b5:	83 e0 07             	and    eax,0x7
c00259b8:	5f                   	pop    edi
c00259b9:	5d                   	pop    ebp
c00259ba:	c3                   	ret    
c00259bb:	83 bc 24 b0 02 00 00 03 	cmp    DWORD PTR [esp+0x2b0],0x3
c00259c3:	75 e4                	jne    c00259a9 <__kernel_rem_pio2+0x779>
c00259c5:	85 ff                	test   edi,edi
c00259c7:	0f 8e 38 02 00 00    	jle    c0025c05 <__kernel_rem_pio2+0x9d5>
c00259cd:	8d 14 fd 00 00 00 00 	lea    edx,[edi*8+0x0]
c00259d4:	8d 8c 24 40 01 00 00 	lea    ecx,[esp+0x140]
c00259db:	dd 84 14 40 01 00 00 	fld    QWORD PTR [esp+edx*1+0x140]
c00259e2:	8d 44 11 f8          	lea    eax,[ecx+edx*1-0x8]
c00259e6:	eb 02                	jmp    c00259ea <__kernel_rem_pio2+0x7ba>
c00259e8:	89 d0                	mov    eax,edx
c00259ea:	dd 00                	fld    QWORD PTR [eax]
c00259ec:	8d 50 f8             	lea    edx,[eax-0x8]
c00259ef:	39 c1                	cmp    ecx,eax
c00259f1:	d9 c1                	fld    st(1)
c00259f3:	d9 c1                	fld    st(1)
c00259f5:	de c3                	faddp  st(3),st
c00259f7:	d9 ca                	fxch   st(2)
c00259f9:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00259fd:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025a01:	d9 c0                	fld    st(0)
c0025a03:	dc ea                	fsub   st(2),st
c0025a05:	d9 ca                	fxch   st(2)
c0025a07:	de c3                	faddp  st(3),st
c0025a09:	d9 ca                	fxch   st(2)
c0025a0b:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c0025a0e:	d9 c9                	fxch   st(1)
c0025a10:	dd 18                	fstp   QWORD PTR [eax]
c0025a12:	75 d4                	jne    c00259e8 <__kernel_rem_pio2+0x7b8>
c0025a14:	dd d8                	fstp   st(0)
c0025a16:	83 ff 01             	cmp    edi,0x1
c0025a19:	0f 8e e6 01 00 00    	jle    c0025c05 <__kernel_rem_pio2+0x9d5>
c0025a1f:	c1 e7 03             	shl    edi,0x3
c0025a22:	8d 44 39 f8          	lea    eax,[ecx+edi*1-0x8]
c0025a26:	dd 84 3c 40 01 00 00 	fld    QWORD PTR [esp+edi*1+0x140]
c0025a2d:	eb 02                	jmp    c0025a31 <__kernel_rem_pio2+0x801>
c0025a2f:	89 d0                	mov    eax,edx
c0025a31:	dd 00                	fld    QWORD PTR [eax]
c0025a33:	8d 50 f8             	lea    edx,[eax-0x8]
c0025a36:	d9 c1                	fld    st(1)
c0025a38:	39 d1                	cmp    ecx,edx
c0025a3a:	d9 c1                	fld    st(1)
c0025a3c:	de c3                	faddp  st(3),st
c0025a3e:	d9 ca                	fxch   st(2)
c0025a40:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025a44:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025a48:	d9 c0                	fld    st(0)
c0025a4a:	dc ea                	fsub   st(2),st
c0025a4c:	d9 ca                	fxch   st(2)
c0025a4e:	de c3                	faddp  st(3),st
c0025a50:	d9 ca                	fxch   st(2)
c0025a52:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c0025a55:	d9 c9                	fxch   st(1)
c0025a57:	dd 18                	fstp   QWORD PTR [eax]
c0025a59:	75 d4                	jne    c0025a2f <__kernel_rem_pio2+0x7ff>
c0025a5b:	dd d8                	fstp   st(0)
c0025a5d:	d9 ee                	fldz   
c0025a5f:	01 f9                	add    ecx,edi
c0025a61:	83 e9 08             	sub    ecx,0x8
c0025a64:	dc 41 08             	fadd   QWORD PTR [ecx+0x8]
c0025a67:	39 c8                	cmp    eax,ecx
c0025a69:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025a6d:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025a71:	75 ee                	jne    c0025a61 <__kernel_rem_pio2+0x831>
c0025a73:	dd 84 24 40 01 00 00 	fld    QWORD PTR [esp+0x140]
c0025a7a:	85 ed                	test   ebp,ebp
c0025a7c:	dd 84 24 48 01 00 00 	fld    QWORD PTR [esp+0x148]
c0025a83:	0f 85 02 01 00 00    	jne    c0025b8b <__kernel_rem_pio2+0x95b>
c0025a89:	d9 c9                	fxch   st(1)
c0025a8b:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0025a92:	dd 18                	fstp   QWORD PTR [eax]
c0025a94:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c0025a97:	dd 58 10             	fstp   QWORD PTR [eax+0x10]
c0025a9a:	e9 0a ff ff ff       	jmp    c00259a9 <__kernel_rem_pio2+0x779>
c0025a9f:	81 64 b4 4c ff ff 7f 00 	and    DWORD PTR [esp+esi*4+0x4c],0x7fffff
c0025aa7:	e9 af fb ff ff       	jmp    c002565b <__kernel_rem_pio2+0x42b>
c0025aac:	31 d2                	xor    edx,edx
c0025aae:	b8 e8 ff ff ff       	mov    eax,0xffffffe8
c0025ab3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0025ab7:	e9 d3 f7 ff ff       	jmp    c002528f <__kernel_rem_pio2+0x5f>
c0025abc:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0025ac0:	85 f6                	test   esi,esi
c0025ac2:	bd 02 00 00 00       	mov    ebp,0x2
c0025ac7:	0f 8f 45 fb ff ff    	jg     c0025612 <__kernel_rem_pio2+0x3e2>
c0025acd:	d9 e8                	fld1   
c0025acf:	de e1                	fsubrp st(1),st
c0025ad1:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025ad5:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025ad9:	e9 1a fa ff ff       	jmp    c00254f8 <__kernel_rem_pio2+0x2c8>
c0025ade:	d9 ee                	fldz   
c0025ae0:	e9 6a fe ff ff       	jmp    c002594f <__kernel_rem_pio2+0x71f>
c0025ae5:	31 d2                	xor    edx,edx
c0025ae7:	e9 51 fb ff ff       	jmp    c002563d <__kernel_rem_pio2+0x40d>
c0025aec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025af0:	d9 ee                	fldz   
c0025af2:	01 c8                	add    eax,ecx
c0025af4:	eb 02                	jmp    c0025af8 <__kernel_rem_pio2+0x8c8>
c0025af6:	89 d0                	mov    eax,edx
c0025af8:	39 c8                	cmp    eax,ecx
c0025afa:	dc 00                	fadd   QWORD PTR [eax]
c0025afc:	8d 50 f8             	lea    edx,[eax-0x8]
c0025aff:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025b03:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025b07:	75 ed                	jne    c0025af6 <__kernel_rem_pio2+0x8c6>
c0025b09:	d9 c0                	fld    st(0)
c0025b0b:	85 ed                	test   ebp,ebp
c0025b0d:	0f 85 94 00 00 00    	jne    c0025ba7 <__kernel_rem_pio2+0x977>
c0025b13:	d9 c9                	fxch   st(1)
c0025b15:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0025b1c:	85 ff                	test   edi,edi
c0025b1e:	dd 18                	fstp   QWORD PTR [eax]
c0025b20:	dc ac 24 40 01 00 00 	fsubr  QWORD PTR [esp+0x140]
c0025b27:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025b2b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025b2f:	7e 22                	jle    c0025b53 <__kernel_rem_pio2+0x923>
c0025b31:	8d 84 24 48 01 00 00 	lea    eax,[esp+0x148]
c0025b38:	8d 14 f8             	lea    edx,[eax+edi*8]
c0025b3b:	83 c0 08             	add    eax,0x8
c0025b3e:	dc 40 f8             	fadd   QWORD PTR [eax-0x8]
c0025b41:	39 d0                	cmp    eax,edx
c0025b43:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025b47:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025b4b:	75 ee                	jne    c0025b3b <__kernel_rem_pio2+0x90b>
c0025b4d:	85 ed                	test   ebp,ebp
c0025b4f:	74 02                	je     c0025b53 <__kernel_rem_pio2+0x923>
c0025b51:	d9 e0                	fchs   
c0025b53:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0025b5a:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c0025b5d:	e9 47 fe ff ff       	jmp    c00259a9 <__kernel_rem_pio2+0x779>
c0025b62:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c0025b66:	89 f7                	mov    edi,esi
c0025b68:	0f b7 44 24 46       	movzx  eax,WORD PTR [esp+0x46]
c0025b6d:	66 0d 00 0c          	or     ax,0xc00
c0025b71:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
c0025b76:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0025b7a:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0025b7e:	db 5c b4 50          	fistp  DWORD PTR [esp+esi*4+0x50]
c0025b82:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c0025b86:	e9 5c fc ff ff       	jmp    c00257e7 <__kernel_rem_pio2+0x5b7>
c0025b8b:	d9 c9                	fxch   st(1)
c0025b8d:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0025b94:	d9 e0                	fchs   
c0025b96:	dd 18                	fstp   QWORD PTR [eax]
c0025b98:	d9 e0                	fchs   
c0025b9a:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c0025b9d:	d9 e0                	fchs   
c0025b9f:	dd 58 10             	fstp   QWORD PTR [eax+0x10]
c0025ba2:	e9 02 fe ff ff       	jmp    c00259a9 <__kernel_rem_pio2+0x779>
c0025ba7:	d9 c9                	fxch   st(1)
c0025ba9:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0025bb0:	d9 e0                	fchs   
c0025bb2:	85 ff                	test   edi,edi
c0025bb4:	dd 18                	fstp   QWORD PTR [eax]
c0025bb6:	dc ac 24 40 01 00 00 	fsubr  QWORD PTR [esp+0x140]
c0025bbd:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025bc1:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025bc5:	0f 8f 66 ff ff ff    	jg     c0025b31 <__kernel_rem_pio2+0x901>
c0025bcb:	d9 e0                	fchs   
c0025bcd:	eb 84                	jmp    c0025b53 <__kernel_rem_pio2+0x923>
c0025bcf:	dd d8                	fstp   st(0)
c0025bd1:	83 bc 24 b0 02 00 00 02 	cmp    DWORD PTR [esp+0x2b0],0x2
c0025bd9:	0f 8f dc fd ff ff    	jg     c00259bb <__kernel_rem_pio2+0x78b>
c0025bdf:	8b 94 24 b0 02 00 00 	mov    edx,DWORD PTR [esp+0x2b0]
c0025be6:	85 d2                	test   edx,edx
c0025be8:	7f 0d                	jg     c0025bf7 <__kernel_rem_pio2+0x9c7>
c0025bea:	0f 85 b9 fd ff ff    	jne    c00259a9 <__kernel_rem_pio2+0x779>
c0025bf0:	d9 ee                	fldz   
c0025bf2:	e9 a3 fd ff ff       	jmp    c002599a <__kernel_rem_pio2+0x76a>
c0025bf7:	d9 ee                	fldz   
c0025bf9:	d9 ee                	fldz   
c0025bfb:	90                   	nop
c0025bfc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0025c00:	e9 06 ff ff ff       	jmp    c0025b0b <__kernel_rem_pio2+0x8db>
c0025c05:	d9 ee                	fldz   
c0025c07:	e9 67 fe ff ff       	jmp    c0025a73 <__kernel_rem_pio2+0x843>
c0025c0c:	66 90                	xchg   ax,ax
c0025c0e:	66 90                	xchg   ax,ax

c0025c10 <__kernel_sin>:
c0025c10:	83 ec 0c             	sub    esp,0xc
c0025c13:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025c17:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025c1b:	d9 c0                	fld    st(0)
c0025c1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025c21:	d8 c9                	fmul   st,st(1)
c0025c23:	85 c0                	test   eax,eax
c0025c25:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025c28:	dd 04 24             	fld    QWORD PTR [esp]
c0025c2b:	d9 c1                	fld    st(1)
c0025c2d:	d8 c9                	fmul   st,st(1)
c0025c2f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025c32:	dd 04 24             	fld    QWORD PTR [esp]
c0025c35:	d9 c1                	fld    st(1)
c0025c37:	d8 ca                	fmul   st,st(2)
c0025c39:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025c3c:	dd 04 24             	fld    QWORD PTR [esp]
c0025c3f:	d8 ca                	fmul   st,st(2)
c0025c41:	d9 c2                	fld    st(2)
c0025c43:	dc 0d f0 bc 02 c0    	fmul   QWORD PTR ds:0xc002bcf0
c0025c49:	dc 25 f8 bc 02 c0    	fsub   QWORD PTR ds:0xc002bcf8
c0025c4f:	de c9                	fmulp  st(1),st
c0025c51:	d9 c2                	fld    st(2)
c0025c53:	dc 0d 00 bd 02 c0    	fmul   QWORD PTR ds:0xc002bd00
c0025c59:	dc 25 08 bd 02 c0    	fsub   QWORD PTR ds:0xc002bd08
c0025c5f:	d8 cb                	fmul   st,st(3)
c0025c61:	dc 05 10 bd 02 c0    	fadd   QWORD PTR ds:0xc002bd10
c0025c67:	de c1                	faddp  st(1),st
c0025c69:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025c6c:	dd 04 24             	fld    QWORD PTR [esp]
c0025c6f:	75 2f                	jne    c0025ca0 <__kernel_sin+0x90>
c0025c71:	dd dc                	fstp   st(4)
c0025c73:	d9 c9                	fxch   st(1)
c0025c75:	d9 ca                	fxch   st(2)
c0025c77:	d9 cb                	fxch   st(3)
c0025c79:	de ca                	fmulp  st(2),st
c0025c7b:	d9 c9                	fxch   st(1)
c0025c7d:	dc 25 18 bd 02 c0    	fsub   QWORD PTR ds:0xc002bd18
c0025c83:	de c9                	fmulp  st(1),st
c0025c85:	de c1                	faddp  st(1),st
c0025c87:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025c8a:	dd 04 24             	fld    QWORD PTR [esp]
c0025c8d:	83 c4 0c             	add    esp,0xc
c0025c90:	c3                   	ret    
c0025c91:	eb 0d                	jmp    c0025ca0 <__kernel_sin+0x90>
c0025c93:	90                   	nop
c0025c94:	90                   	nop
c0025c95:	90                   	nop
c0025c96:	90                   	nop
c0025c97:	90                   	nop
c0025c98:	90                   	nop
c0025c99:	90                   	nop
c0025c9a:	90                   	nop
c0025c9b:	90                   	nop
c0025c9c:	90                   	nop
c0025c9d:	90                   	nop
c0025c9e:	90                   	nop
c0025c9f:	90                   	nop
c0025ca0:	d9 c4                	fld    st(4)
c0025ca2:	d8 0d 84 ae 02 c0    	fmul   DWORD PTR ds:0xc002ae84
c0025ca8:	d9 c9                	fxch   st(1)
c0025caa:	d8 ca                	fmul   st,st(2)
c0025cac:	de e9                	fsubp  st(1),st
c0025cae:	de ca                	fmulp  st(2),st
c0025cb0:	d9 c9                	fxch   st(1)
c0025cb2:	de e3                	fsubrp st(3),st
c0025cb4:	dc 0d 18 bd 02 c0    	fmul   QWORD PTR ds:0xc002bd18
c0025cba:	de c2                	faddp  st(2),st
c0025cbc:	de e1                	fsubrp st(1),st
c0025cbe:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025cc1:	dd 04 24             	fld    QWORD PTR [esp]
c0025cc4:	83 c4 0c             	add    esp,0xc
c0025cc7:	c3                   	ret    

Disassembly of section .init:

c0025cc8 <_init>:
c0025cc8:	55                   	push   ebp
c0025cc9:	89 e5                	mov    ebp,esp
c0025ccb:	e8 24 a4 fd ff       	call   c00000f4 <frame_dummy>
c0025cd0:	e8 0b c2 ff ff       	call   c0021ee0 <__do_global_ctors_aux>
c0025cd5:	5d                   	pop    ebp
c0025cd6:	c3                   	ret    

Disassembly of section .fini:

c0025cd7 <_fini>:
c0025cd7:	55                   	push   ebp
c0025cd8:	89 e5                	mov    ebp,esp
c0025cda:	e8 a5 a3 fd ff       	call   c0000084 <__do_global_dtors_aux>
c0025cdf:	5d                   	pop    ebp
c0025ce0:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareED2Ev:

c0025ce2 <std::vector<Hardware*>::~vector()>:
c0025ce2:	83 ec 0c             	sub    esp,0xc
c0025ce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ce9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025cec:	85 c0                	test   eax,eax
c0025cee:	74 1e                	je     c0025d0e <std::vector<Hardware*>::~vector()+0x2c>
c0025cf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cf4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025cf7:	85 c0                	test   eax,eax
c0025cf9:	74 13                	je     c0025d0e <std::vector<Hardware*>::~vector()+0x2c>
c0025cfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025d02:	83 ec 0c             	sub    esp,0xc
c0025d05:	50                   	push   eax
c0025d06:	e8 5a 7a fe ff       	call   c000d765 <operator delete[](void*)>
c0025d0b:	83 c4 10             	add    esp,0x10
c0025d0e:	90                   	nop
c0025d0f:	83 c4 0c             	add    esp,0xc
c0025d12:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeED2Ev:

c0025d14 <std::vector<DeviceMemoryRange>::~vector()>:
c0025d14:	83 ec 0c             	sub    esp,0xc
c0025d17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d1b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025d1e:	85 c0                	test   eax,eax
c0025d20:	74 1e                	je     c0025d40 <std::vector<DeviceMemoryRange>::~vector()+0x2c>
c0025d22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d26:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025d29:	85 c0                	test   eax,eax
c0025d2b:	74 13                	je     c0025d40 <std::vector<DeviceMemoryRange>::~vector()+0x2c>
c0025d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d31:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025d34:	83 ec 0c             	sub    esp,0xc
c0025d37:	50                   	push   eax
c0025d38:	e8 28 7a fe ff       	call   c000d765 <operator delete[](void*)>
c0025d3d:	83 c4 10             	add    esp,0x10
c0025d40:	90                   	nop
c0025d41:	83 c4 0c             	add    esp,0xc
c0025d44:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeED2Ev:

c0025d46 <std::vector<DevicePortRange>::~vector()>:
c0025d46:	83 ec 0c             	sub    esp,0xc
c0025d49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d4d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025d50:	85 c0                	test   eax,eax
c0025d52:	74 1e                	je     c0025d72 <std::vector<DevicePortRange>::~vector()+0x2c>
c0025d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d58:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025d5b:	85 c0                	test   eax,eax
c0025d5d:	74 13                	je     c0025d72 <std::vector<DevicePortRange>::~vector()+0x2c>
c0025d5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d63:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025d66:	83 ec 0c             	sub    esp,0xc
c0025d69:	50                   	push   eax
c0025d6a:	e8 f6 79 fe ff       	call   c000d765 <operator delete[](void*)>
c0025d6f:	83 c4 10             	add    esp,0x10
c0025d72:	90                   	nop
c0025d73:	83 c4 0c             	add    esp,0xc
c0025d76:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorD2Ev:

c0025d78 <std::vector<Hardware*>::iterator::~iterator()>:
c0025d78:	90                   	nop
c0025d79:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorC2ERKS3_:

c0025d7a <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>:
c0025d7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025d7e:	8b 10                	mov    edx,DWORD PTR [eax]
c0025d80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025d84:	89 10                	mov    DWORD PTR [eax],edx
c0025d86:	90                   	nop
c0025d87:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareEC2Ev:

c0025d88 <std::vector<Hardware*>::vector()>:
c0025d88:	83 ec 1c             	sub    esp,0x1c
c0025d8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025d8f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0025d96:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0025d9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025da2:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c0025da7:	77 05                	ja     c0025dae <std::vector<Hardware*>::vector()+0x26>
c0025da9:	c1 e0 02             	shl    eax,0x2
c0025dac:	eb 05                	jmp    c0025db3 <std::vector<Hardware*>::vector()+0x2b>
c0025dae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025db3:	83 ec 0c             	sub    esp,0xc
c0025db6:	50                   	push   eax
c0025db7:	e8 9f 79 fe ff       	call   c000d75b <operator new[](unsigned long)>
c0025dbc:	83 c4 10             	add    esp,0x10
c0025dbf:	89 c2                	mov    edx,eax
c0025dc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025dc5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025dc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025dcc:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0025dcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025dd3:	89 10                	mov    DWORD PTR [eax],edx
c0025dd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025dd9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0025ddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025de0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025de3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025de7:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0025dee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025df2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025df6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0025df9:	90                   	nop
c0025dfa:	83 c4 1c             	add    esp,0x1c
c0025dfd:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeEC2Ev:

c0025dfe <std::vector<DeviceMemoryRange>::vector()>:
c0025dfe:	83 ec 1c             	sub    esp,0x1c
c0025e01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025e05:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0025e0c:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0025e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025e18:	3d ff ff ff 0f       	cmp    eax,0xfffffff
c0025e1d:	77 05                	ja     c0025e24 <std::vector<DeviceMemoryRange>::vector()+0x26>
c0025e1f:	c1 e0 03             	shl    eax,0x3
c0025e22:	eb 05                	jmp    c0025e29 <std::vector<DeviceMemoryRange>::vector()+0x2b>
c0025e24:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025e29:	83 ec 0c             	sub    esp,0xc
c0025e2c:	50                   	push   eax
c0025e2d:	e8 29 79 fe ff       	call   c000d75b <operator new[](unsigned long)>
c0025e32:	83 c4 10             	add    esp,0x10
c0025e35:	89 c2                	mov    edx,eax
c0025e37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025e3b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025e3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025e42:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0025e45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025e49:	89 10                	mov    DWORD PTR [eax],edx
c0025e4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025e4f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0025e52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025e56:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025e59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025e5d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0025e64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025e68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025e6c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0025e6f:	90                   	nop
c0025e70:	83 c4 1c             	add    esp,0x1c
c0025e73:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeEC2Ev:

c0025e74 <std::vector<DevicePortRange>::vector()>:
c0025e74:	83 ec 1c             	sub    esp,0x1c
c0025e77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025e7b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0025e82:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0025e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025e8e:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c0025e93:	77 05                	ja     c0025e9a <std::vector<DevicePortRange>::vector()+0x26>
c0025e95:	c1 e0 02             	shl    eax,0x2
c0025e98:	eb 05                	jmp    c0025e9f <std::vector<DevicePortRange>::vector()+0x2b>
c0025e9a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025e9f:	83 ec 0c             	sub    esp,0xc
c0025ea2:	50                   	push   eax
c0025ea3:	e8 b3 78 fe ff       	call   c000d75b <operator new[](unsigned long)>
c0025ea8:	83 c4 10             	add    esp,0x10
c0025eab:	89 c2                	mov    edx,eax
c0025ead:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025eb1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025eb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025eb8:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0025ebb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025ebf:	89 10                	mov    DWORD PTR [eax],edx
c0025ec1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025ec5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0025ec8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025ecc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025ecf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025ed3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0025eda:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025ede:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025ee2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0025ee5:	90                   	nop
c0025ee6:	83 c4 1c             	add    esp,0x1c
c0025ee9:	c3                   	ret    

Disassembly of section .text._ZNKSt6vectorIP8HardwareE8iteratorneERKS3_:

c0025eea <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>:
c0025eea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025eee:	8b 10                	mov    edx,DWORD PTR [eax]
c0025ef0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025ef4:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ef6:	39 c2                	cmp    edx,eax
c0025ef8:	0f 95 c0             	setne  al
c0025efb:	c3                   	ret    

Disassembly of section .text._ZNKSt6vectorIP8HardwareE8iteratordeEv:

c0025efc <std::vector<Hardware*>::iterator::operator*() const>:
c0025efc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025f00:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f02:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorC2EPS1_:

c0025f04 <std::vector<Hardware*>::iterator::iterator(Hardware**)>:
c0025f04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025f08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025f0c:	89 10                	mov    DWORD PTR [eax],edx
c0025f0e:	90                   	nop
c0025f0f:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE3endEv:

c0025f10 <std::vector<Hardware*>::end()>:
c0025f10:	83 ec 0c             	sub    esp,0xc
c0025f13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025f1a:	83 ec 08             	sub    esp,0x8
c0025f1d:	50                   	push   eax
c0025f1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025f22:	e8 dd ff ff ff       	call   c0025f04 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0025f27:	83 c4 10             	add    esp,0x10
c0025f2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f2e:	83 c4 0c             	add    esp,0xc
c0025f31:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE5beginEv:

c0025f34 <std::vector<Hardware*>::begin()>:
c0025f34:	83 ec 0c             	sub    esp,0xc
c0025f37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f3d:	83 ec 08             	sub    esp,0x8
c0025f40:	50                   	push   eax
c0025f41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025f45:	e8 ba ff ff ff       	call   c0025f04 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0025f4a:	83 c4 10             	add    esp,0x10
c0025f4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f51:	83 c4 0c             	add    esp,0xc
c0025f54:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorppEv:

c0025f58 <std::vector<Hardware*>::iterator::operator++()>:
c0025f58:	83 ec 0c             	sub    esp,0xc
c0025f5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f61:	8d 50 04             	lea    edx,[eax+0x4]
c0025f64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f68:	89 10                	mov    DWORD PTR [eax],edx
c0025f6a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f70:	83 ec 08             	sub    esp,0x8
c0025f73:	50                   	push   eax
c0025f74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025f78:	e8 87 ff ff ff       	call   c0025f04 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0025f7d:	83 c4 10             	add    esp,0x10
c0025f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f84:	83 c4 0c             	add    esp,0xc
c0025f87:	c2 04 00             	ret    0x4

Disassembly of section .text._ZSt4findINSt6vectorIP8HardwareE8iteratorES2_ET_S5_S5_RKT0_:

c0025f8a <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>:
c0025f8a:	83 ec 1c             	sub    esp,0x1c
c0025f8d:	83 ec 08             	sub    esp,0x8
c0025f90:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0025f94:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0025f98:	e8 4d ff ff ff       	call   c0025eea <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c0025f9d:	83 c4 10             	add    esp,0x10
c0025fa0:	0f b6 c0             	movzx  eax,al
c0025fa3:	85 c0                	test   eax,eax
c0025fa5:	74 5e                	je     c0026005 <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x7b>
c0025fa7:	83 ec 0c             	sub    esp,0xc
c0025faa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0025fae:	e8 49 ff ff ff       	call   c0025efc <std::vector<Hardware*>::iterator::operator*() const>
c0025fb3:	83 c4 10             	add    esp,0x10
c0025fb6:	8b 10                	mov    edx,DWORD PTR [eax]
c0025fb8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0025fbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0025fbe:	39 c2                	cmp    edx,eax
c0025fc0:	0f 94 c0             	sete   al
c0025fc3:	0f b6 c0             	movzx  eax,al
c0025fc6:	85 c0                	test   eax,eax
c0025fc8:	74 15                	je     c0025fdf <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x55>
c0025fca:	83 ec 08             	sub    esp,0x8
c0025fcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025fd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025fd5:	e8 a0 fd ff ff       	call   c0025d7a <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0025fda:	83 c4 10             	add    esp,0x10
c0025fdd:	eb 39                	jmp    c0026018 <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x8e>
c0025fdf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0025fe3:	83 ec 08             	sub    esp,0x8
c0025fe6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025fea:	50                   	push   eax
c0025feb:	e8 68 ff ff ff       	call   c0025f58 <std::vector<Hardware*>::iterator::operator++()>
c0025ff0:	83 c4 0c             	add    esp,0xc
c0025ff3:	83 ec 0c             	sub    esp,0xc
c0025ff6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0025ffa:	50                   	push   eax
c0025ffb:	e8 78 fd ff ff       	call   c0025d78 <std::vector<Hardware*>::iterator::~iterator()>
c0026000:	83 c4 10             	add    esp,0x10
c0026003:	eb 88                	jmp    c0025f8d <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x3>
c0026005:	83 ec 08             	sub    esp,0x8
c0026008:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002600c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026010:	e8 65 fd ff ff       	call   c0025d7a <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0026015:	83 c4 10             	add    esp,0x10
c0026018:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002601c:	83 c4 1c             	add    esp,0x1c
c002601f:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratoraSERKS3_:

c0026022 <std::vector<Hardware*>::iterator::operator=(std::vector<Hardware*>::iterator const&)>:
c0026022:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026026:	8b 10                	mov    edx,DWORD PTR [eax]
c0026028:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002602c:	89 10                	mov    DWORD PTR [eax],edx
c002602e:	90                   	nop
c002602f:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorppEi:

c0026030 <std::vector<Hardware*>::iterator::operator++(int)>:
c0026030:	83 ec 0c             	sub    esp,0xc
c0026033:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026037:	8b 00                	mov    eax,DWORD PTR [eax]
c0026039:	8d 48 04             	lea    ecx,[eax+0x4]
c002603c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026040:	89 0a                	mov    DWORD PTR [edx],ecx
c0026042:	83 ec 08             	sub    esp,0x8
c0026045:	50                   	push   eax
c0026046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002604a:	e8 b5 fe ff ff       	call   c0025f04 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c002604f:	83 c4 10             	add    esp,0x10
c0026052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026056:	83 c4 0c             	add    esp,0xc
c0026059:	c2 04 00             	ret    0x4

Disassembly of section .text._ZSt4moveIRP8HardwareEONSt16remove_referenceIT_E4typeEOS4_:

c002605c <std::remove_reference<Hardware*&>::type&& std::move<Hardware*&>(Hardware*&)>:
c002605c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026060:	c3                   	ret    

Disassembly of section .text._ZSt6removeINSt6vectorIP8HardwareE8iteratorES2_ET_S5_S5_RKT0_:

c0026061 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>:
c0026061:	53                   	push   ebx
c0026062:	83 ec 28             	sub    esp,0x28
c0026065:	83 ec 08             	sub    esp,0x8
c0026068:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002606c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0026070:	50                   	push   eax
c0026071:	e8 04 fd ff ff       	call   c0025d7a <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0026076:	83 c4 10             	add    esp,0x10
c0026079:	83 ec 08             	sub    esp,0x8
c002607c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0026080:	8d 44 24 20          	lea    eax,[esp+0x20]
c0026084:	50                   	push   eax
c0026085:	e8 f0 fc ff ff       	call   c0025d7a <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c002608a:	83 c4 10             	add    esp,0x10
c002608d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0026091:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0026095:	8d 54 24 14          	lea    edx,[esp+0x14]
c0026099:	52                   	push   edx
c002609a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002609e:	52                   	push   edx
c002609f:	50                   	push   eax
c00260a0:	e8 e5 fe ff ff       	call   c0025f8a <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>
c00260a5:	83 c4 0c             	add    esp,0xc
c00260a8:	83 ec 08             	sub    esp,0x8
c00260ab:	8d 44 24 14          	lea    eax,[esp+0x14]
c00260af:	50                   	push   eax
c00260b0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00260b4:	e8 69 ff ff ff       	call   c0026022 <std::vector<Hardware*>::iterator::operator=(std::vector<Hardware*>::iterator const&)>
c00260b9:	83 c4 10             	add    esp,0x10
c00260bc:	83 ec 0c             	sub    esp,0xc
c00260bf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00260c3:	50                   	push   eax
c00260c4:	e8 af fc ff ff       	call   c0025d78 <std::vector<Hardware*>::iterator::~iterator()>
c00260c9:	83 c4 10             	add    esp,0x10
c00260cc:	83 ec 0c             	sub    esp,0xc
c00260cf:	8d 44 24 20          	lea    eax,[esp+0x20]
c00260d3:	50                   	push   eax
c00260d4:	e8 9f fc ff ff       	call   c0025d78 <std::vector<Hardware*>::iterator::~iterator()>
c00260d9:	83 c4 10             	add    esp,0x10
c00260dc:	83 ec 0c             	sub    esp,0xc
c00260df:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00260e3:	50                   	push   eax
c00260e4:	e8 8f fc ff ff       	call   c0025d78 <std::vector<Hardware*>::iterator::~iterator()>
c00260e9:	83 c4 10             	add    esp,0x10
c00260ec:	83 ec 08             	sub    esp,0x8
c00260ef:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00260f3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00260f7:	e8 ee fd ff ff       	call   c0025eea <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c00260fc:	83 c4 10             	add    esp,0x10
c00260ff:	0f b6 c0             	movzx  eax,al
c0026102:	85 c0                	test   eax,eax
c0026104:	0f 84 eb 00 00 00    	je     c00261f5 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x194>
c002610a:	83 ec 08             	sub    esp,0x8
c002610d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0026111:	8d 44 24 14          	lea    eax,[esp+0x14]
c0026115:	50                   	push   eax
c0026116:	e8 5f fc ff ff       	call   c0025d7a <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c002611b:	83 c4 10             	add    esp,0x10
c002611e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0026122:	83 ec 08             	sub    esp,0x8
c0026125:	8d 54 24 10          	lea    edx,[esp+0x10]
c0026129:	52                   	push   edx
c002612a:	50                   	push   eax
c002612b:	e8 28 fe ff ff       	call   c0025f58 <std::vector<Hardware*>::iterator::operator++()>
c0026130:	83 c4 0c             	add    esp,0xc
c0026133:	83 ec 08             	sub    esp,0x8
c0026136:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002613a:	8d 44 24 24          	lea    eax,[esp+0x24]
c002613e:	50                   	push   eax
c002613f:	e8 a6 fd ff ff       	call   c0025eea <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c0026144:	83 c4 10             	add    esp,0x10
c0026147:	88 c3                	mov    bl,al
c0026149:	83 ec 0c             	sub    esp,0xc
c002614c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0026150:	50                   	push   eax
c0026151:	e8 22 fc ff ff       	call   c0025d78 <std::vector<Hardware*>::iterator::~iterator()>
c0026156:	83 c4 10             	add    esp,0x10
c0026159:	0f b6 c3             	movzx  eax,bl
c002615c:	85 c0                	test   eax,eax
c002615e:	0f 84 81 00 00 00    	je     c00261e5 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x184>
c0026164:	83 ec 0c             	sub    esp,0xc
c0026167:	8d 44 24 14          	lea    eax,[esp+0x14]
c002616b:	50                   	push   eax
c002616c:	e8 8b fd ff ff       	call   c0025efc <std::vector<Hardware*>::iterator::operator*() const>
c0026171:	83 c4 10             	add    esp,0x10
c0026174:	8b 10                	mov    edx,DWORD PTR [eax]
c0026176:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002617a:	8b 00                	mov    eax,DWORD PTR [eax]
c002617c:	39 c2                	cmp    edx,eax
c002617e:	0f 95 c0             	setne  al
c0026181:	0f b6 c0             	movzx  eax,al
c0026184:	85 c0                	test   eax,eax
c0026186:	74 96                	je     c002611e <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0xbd>
c0026188:	83 ec 0c             	sub    esp,0xc
c002618b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002618f:	50                   	push   eax
c0026190:	e8 67 fd ff ff       	call   c0025efc <std::vector<Hardware*>::iterator::operator*() const>
c0026195:	83 c4 10             	add    esp,0x10
c0026198:	83 ec 0c             	sub    esp,0xc
c002619b:	50                   	push   eax
c002619c:	e8 bb fe ff ff       	call   c002605c <std::remove_reference<Hardware*&>::type&& std::move<Hardware*&>(Hardware*&)>
c00261a1:	83 c4 10             	add    esp,0x10
c00261a4:	89 c3                	mov    ebx,eax
c00261a6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00261aa:	83 ec 04             	sub    esp,0x4
c00261ad:	6a 00                	push   0x0
c00261af:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00261b3:	50                   	push   eax
c00261b4:	e8 77 fe ff ff       	call   c0026030 <std::vector<Hardware*>::iterator::operator++(int)>
c00261b9:	83 c4 0c             	add    esp,0xc
c00261bc:	83 ec 0c             	sub    esp,0xc
c00261bf:	8d 44 24 28          	lea    eax,[esp+0x28]
c00261c3:	50                   	push   eax
c00261c4:	e8 33 fd ff ff       	call   c0025efc <std::vector<Hardware*>::iterator::operator*() const>
c00261c9:	83 c4 10             	add    esp,0x10
c00261cc:	8b 13                	mov    edx,DWORD PTR [ebx]
c00261ce:	89 10                	mov    DWORD PTR [eax],edx
c00261d0:	83 ec 0c             	sub    esp,0xc
c00261d3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00261d7:	50                   	push   eax
c00261d8:	e8 9b fb ff ff       	call   c0025d78 <std::vector<Hardware*>::iterator::~iterator()>
c00261dd:	83 c4 10             	add    esp,0x10
c00261e0:	e9 39 ff ff ff       	jmp    c002611e <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0xbd>
c00261e5:	83 ec 0c             	sub    esp,0xc
c00261e8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00261ec:	50                   	push   eax
c00261ed:	e8 86 fb ff ff       	call   c0025d78 <std::vector<Hardware*>::iterator::~iterator()>
c00261f2:	83 c4 10             	add    esp,0x10
c00261f5:	83 ec 08             	sub    esp,0x8
c00261f8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00261fc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0026200:	e8 75 fb ff ff       	call   c0025d7a <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0026205:	83 c4 10             	add    esp,0x10
c0026208:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002620c:	83 c4 28             	add    esp,0x28
c002620f:	5b                   	pop    ebx
c0026210:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratormiES3_:

c0026214 <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>:
c0026214:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026218:	8b 10                	mov    edx,DWORD PTR [eax]
c002621a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002621e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026220:	29 c2                	sub    edx,eax
c0026222:	89 d0                	mov    eax,edx
c0026224:	c1 f8 02             	sar    eax,0x2
c0026227:	c3                   	ret    

Disassembly of section .text._ZSt4copyIPP8HardwareS2_ET0_T_S4_S3_:

c0026228 <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>:
c0026228:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002622c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0026230:	74 18                	je     c002624a <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)+0x22>
c0026232:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026236:	8b 10                	mov    edx,DWORD PTR [eax]
c0026238:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002623c:	89 10                	mov    DWORD PTR [eax],edx
c002623e:	83 44 24 04 04       	add    DWORD PTR [esp+0x4],0x4
c0026243:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c0026248:	eb de                	jmp    c0026228 <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>
c002624a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002624e:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE7reserveEm:

c0026250 <std::vector<Hardware*>::reserve(unsigned long)>:
c0026250:	83 ec 1c             	sub    esp,0x1c
c0026253:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026257:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002625a:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c002625e:	0f 86 c8 00 00 00    	jbe    c002632c <std::vector<Hardware*>::reserve(unsigned long)+0xdc>
c0026264:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026268:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002626b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c002626f:	76 13                	jbe    c0026284 <std::vector<Hardware*>::reserve(unsigned long)+0x34>
c0026271:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026275:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0026278:	8d 14 00             	lea    edx,[eax+eax*1]
c002627b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002627f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0026282:	eb e0                	jmp    c0026264 <std::vector<Hardware*>::reserve(unsigned long)+0x14>
c0026284:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026288:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002628b:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c0026290:	77 05                	ja     c0026297 <std::vector<Hardware*>::reserve(unsigned long)+0x47>
c0026292:	c1 e0 02             	shl    eax,0x2
c0026295:	eb 05                	jmp    c002629c <std::vector<Hardware*>::reserve(unsigned long)+0x4c>
c0026297:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002629c:	83 ec 0c             	sub    esp,0xc
c002629f:	50                   	push   eax
c00262a0:	e8 b6 74 fe ff       	call   c000d75b <operator new[](unsigned long)>
c00262a5:	83 c4 10             	add    esp,0x10
c00262a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00262ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00262b0:	8b 10                	mov    edx,DWORD PTR [eax]
c00262b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00262b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00262b9:	39 c2                	cmp    edx,eax
c00262bb:	74 1f                	je     c00262dc <std::vector<Hardware*>::reserve(unsigned long)+0x8c>
c00262bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00262c1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00262c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00262c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00262cb:	83 ec 04             	sub    esp,0x4
c00262ce:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00262d2:	52                   	push   edx
c00262d3:	50                   	push   eax
c00262d4:	e8 4f ff ff ff       	call   c0026228 <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>
c00262d9:	83 c4 10             	add    esp,0x10
c00262dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00262e0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00262e3:	85 c0                	test   eax,eax
c00262e5:	74 13                	je     c00262fa <std::vector<Hardware*>::reserve(unsigned long)+0xaa>
c00262e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00262eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00262ee:	83 ec 0c             	sub    esp,0xc
c00262f1:	50                   	push   eax
c00262f2:	e8 6e 74 fe ff       	call   c000d765 <operator delete[](void*)>
c00262f7:	83 c4 10             	add    esp,0x10
c00262fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00262fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026302:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026305:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026309:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002630c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026310:	89 10                	mov    DWORD PTR [eax],edx
c0026312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026316:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0026319:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002631d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0026320:	c1 e0 02             	shl    eax,0x2
c0026323:	01 c2                	add    edx,eax
c0026325:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026329:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002632c:	90                   	nop
c002632d:	83 c4 1c             	add    esp,0x1c
c0026330:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE9push_backERKS1_:

c0026332 <std::vector<Hardware*>::push_back(Hardware* const&)>:
c0026332:	83 ec 0c             	sub    esp,0xc
c0026335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026339:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c002633c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026340:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0026343:	39 c2                	cmp    edx,eax
c0026345:	73 2c                	jae    c0026373 <std::vector<Hardware*>::push_back(Hardware* const&)+0x41>
c0026347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002634b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002634e:	8d 48 04             	lea    ecx,[eax+0x4]
c0026351:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026355:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0026358:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002635c:	8b 12                	mov    edx,DWORD PTR [edx]
c002635e:	89 10                	mov    DWORD PTR [eax],edx
c0026360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026364:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0026367:	8d 50 01             	lea    edx,[eax+0x1]
c002636a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002636e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0026371:	eb 43                	jmp    c00263b6 <std::vector<Hardware*>::push_back(Hardware* const&)+0x84>
c0026373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026377:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002637a:	d1 e0                	shl    eax,1
c002637c:	83 ec 08             	sub    esp,0x8
c002637f:	50                   	push   eax
c0026380:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026384:	e8 c7 fe ff ff       	call   c0026250 <std::vector<Hardware*>::reserve(unsigned long)>
c0026389:	83 c4 10             	add    esp,0x10
c002638c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026390:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0026393:	8d 50 01             	lea    edx,[eax+0x1]
c0026396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002639a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002639d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00263a4:	8d 48 04             	lea    ecx,[eax+0x4]
c00263a7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00263ab:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00263ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00263b2:	8b 12                	mov    edx,DWORD PTR [edx]
c00263b4:	89 10                	mov    DWORD PTR [eax],edx
c00263b6:	90                   	nop
c00263b7:	83 c4 0c             	add    esp,0xc
c00263ba:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE5eraseENS2_8iteratorES3_:

c00263bc <std::vector<Hardware*>::erase(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator)>:
c00263bc:	53                   	push   ebx
c00263bd:	83 ec 28             	sub    esp,0x28
c00263c0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00263c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00263c6:	83 ec 08             	sub    esp,0x8
c00263c9:	50                   	push   eax
c00263ca:	8d 44 24 14          	lea    eax,[esp+0x14]
c00263ce:	50                   	push   eax
c00263cf:	e8 30 fb ff ff       	call   c0025f04 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c00263d4:	83 c4 10             	add    esp,0x10
c00263d7:	83 ec 08             	sub    esp,0x8
c00263da:	8d 44 24 10          	lea    eax,[esp+0x10]
c00263de:	50                   	push   eax
c00263df:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00263e3:	e8 2c fe ff ff       	call   c0026214 <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c00263e8:	83 c4 10             	add    esp,0x10
c00263eb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00263ef:	83 ec 0c             	sub    esp,0xc
c00263f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00263f6:	50                   	push   eax
c00263f7:	e8 7c f9 ff ff       	call   c0025d78 <std::vector<Hardware*>::iterator::~iterator()>
c00263fc:	83 c4 10             	add    esp,0x10
c00263ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0026403:	8b 00                	mov    eax,DWORD PTR [eax]
c0026405:	83 ec 08             	sub    esp,0x8
c0026408:	50                   	push   eax
c0026409:	8d 44 24 18          	lea    eax,[esp+0x18]
c002640d:	50                   	push   eax
c002640e:	e8 f1 fa ff ff       	call   c0025f04 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0026413:	83 c4 10             	add    esp,0x10
c0026416:	83 ec 08             	sub    esp,0x8
c0026419:	8d 44 24 14          	lea    eax,[esp+0x14]
c002641d:	50                   	push   eax
c002641e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0026422:	e8 ed fd ff ff       	call   c0026214 <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c0026427:	83 c4 10             	add    esp,0x10
c002642a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002642e:	83 ec 0c             	sub    esp,0xc
c0026431:	8d 44 24 18          	lea    eax,[esp+0x18]
c0026435:	50                   	push   eax
c0026436:	e8 3d f9 ff ff       	call   c0025d78 <std::vector<Hardware*>::iterator::~iterator()>
c002643b:	83 c4 10             	add    esp,0x10
c002643e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0026442:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026445:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0026449:	c1 e2 02             	shl    edx,0x2
c002644c:	8d 0c 10             	lea    ecx,[eax+edx*1]
c002644f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0026453:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0026456:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002645a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002645d:	c1 e0 02             	shl    eax,0x2
c0026460:	01 c2                	add    edx,eax
c0026462:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0026466:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026469:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002646d:	c1 e3 02             	shl    ebx,0x2
c0026470:	01 d8                	add    eax,ebx
c0026472:	83 ec 04             	sub    esp,0x4
c0026475:	51                   	push   ecx
c0026476:	52                   	push   edx
c0026477:	50                   	push   eax
c0026478:	e8 ab fd ff ff       	call   c0026228 <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>
c002647d:	83 c4 10             	add    esp,0x10
c0026480:	83 ec 08             	sub    esp,0x8
c0026483:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0026487:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002648b:	50                   	push   eax
c002648c:	e8 e9 f8 ff ff       	call   c0025d7a <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0026491:	83 c4 10             	add    esp,0x10
c0026494:	83 ec 08             	sub    esp,0x8
c0026497:	8d 44 24 18          	lea    eax,[esp+0x18]
c002649b:	50                   	push   eax
c002649c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00264a0:	e8 6f fd ff ff       	call   c0026214 <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c00264a5:	83 c4 10             	add    esp,0x10
c00264a8:	89 c2                	mov    edx,eax
c00264aa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00264ae:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00264b1:	29 d0                	sub    eax,edx
c00264b3:	89 c2                	mov    edx,eax
c00264b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00264b9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00264bc:	83 ec 0c             	sub    esp,0xc
c00264bf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00264c3:	50                   	push   eax
c00264c4:	e8 af f8 ff ff       	call   c0025d78 <std::vector<Hardware*>::iterator::~iterator()>
c00264c9:	83 c4 10             	add    esp,0x10
c00264cc:	83 ec 08             	sub    esp,0x8
c00264cf:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00264d3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00264d7:	50                   	push   eax
c00264d8:	e8 9d f8 ff ff       	call   c0025d7a <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c00264dd:	83 c4 10             	add    esp,0x10
c00264e0:	83 ec 08             	sub    esp,0x8
c00264e3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00264e7:	50                   	push   eax
c00264e8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00264ec:	e8 23 fd ff ff       	call   c0026214 <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c00264f1:	83 c4 10             	add    esp,0x10
c00264f4:	89 c2                	mov    edx,eax
c00264f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00264fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00264fd:	c1 e2 02             	shl    edx,0x2
c0026500:	f7 da                	neg    edx
c0026502:	01 c2                	add    edx,eax
c0026504:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0026508:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002650b:	83 ec 0c             	sub    esp,0xc
c002650e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0026512:	50                   	push   eax
c0026513:	e8 60 f8 ff ff       	call   c0025d78 <std::vector<Hardware*>::iterator::~iterator()>
c0026518:	83 c4 10             	add    esp,0x10
c002651b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002651f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026522:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0026526:	c1 e2 02             	shl    edx,0x2
c0026529:	01 d0                	add    eax,edx
c002652b:	83 ec 08             	sub    esp,0x8
c002652e:	50                   	push   eax
c002652f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0026533:	e8 cc f9 ff ff       	call   c0025f04 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0026538:	83 c4 10             	add    esp,0x10
c002653b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002653f:	83 c4 28             	add    esp,0x28
c0026542:	5b                   	pop    ebx
c0026543:	c2 04 00             	ret    0x4

Disassembly of section .text._ZSt4copyIP17DeviceMemoryRangeS1_ET0_T_S3_S2_:

c0026546 <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)>:
c0026546:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002654a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c002654e:	74 1e                	je     c002656e <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)+0x28>
c0026550:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0026554:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026558:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c002655b:	8b 00                	mov    eax,DWORD PTR [eax]
c002655d:	89 01                	mov    DWORD PTR [ecx],eax
c002655f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0026562:	83 44 24 04 08       	add    DWORD PTR [esp+0x4],0x8
c0026567:	83 44 24 0c 08       	add    DWORD PTR [esp+0xc],0x8
c002656c:	eb d8                	jmp    c0026546 <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)>
c002656e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026572:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeE7reserveEm:

c0026574 <std::vector<DeviceMemoryRange>::reserve(unsigned long)>:
c0026574:	83 ec 1c             	sub    esp,0x1c
c0026577:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002657b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002657e:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0026582:	0f 86 c8 00 00 00    	jbe    c0026650 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0xdc>
c0026588:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002658c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002658f:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0026593:	76 13                	jbe    c00265a8 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x34>
c0026595:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026599:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002659c:	8d 14 00             	lea    edx,[eax+eax*1]
c002659f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00265a3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00265a6:	eb e0                	jmp    c0026588 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x14>
c00265a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00265ac:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00265af:	3d ff ff ff 0f       	cmp    eax,0xfffffff
c00265b4:	77 05                	ja     c00265bb <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x47>
c00265b6:	c1 e0 03             	shl    eax,0x3
c00265b9:	eb 05                	jmp    c00265c0 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x4c>
c00265bb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00265c0:	83 ec 0c             	sub    esp,0xc
c00265c3:	50                   	push   eax
c00265c4:	e8 92 71 fe ff       	call   c000d75b <operator new[](unsigned long)>
c00265c9:	83 c4 10             	add    esp,0x10
c00265cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00265d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00265d4:	8b 10                	mov    edx,DWORD PTR [eax]
c00265d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00265da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00265dd:	39 c2                	cmp    edx,eax
c00265df:	74 1f                	je     c0026600 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x8c>
c00265e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00265e5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00265e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00265ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00265ef:	83 ec 04             	sub    esp,0x4
c00265f2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00265f6:	52                   	push   edx
c00265f7:	50                   	push   eax
c00265f8:	e8 49 ff ff ff       	call   c0026546 <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)>
c00265fd:	83 c4 10             	add    esp,0x10
c0026600:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026604:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026607:	85 c0                	test   eax,eax
c0026609:	74 13                	je     c002661e <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0xaa>
c002660b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002660f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026612:	83 ec 0c             	sub    esp,0xc
c0026615:	50                   	push   eax
c0026616:	e8 4a 71 fe ff       	call   c000d765 <operator delete[](void*)>
c002661b:	83 c4 10             	add    esp,0x10
c002661e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026622:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026626:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026629:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002662d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0026630:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026634:	89 10                	mov    DWORD PTR [eax],edx
c0026636:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002663a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002663d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026641:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0026644:	c1 e0 03             	shl    eax,0x3
c0026647:	01 c2                	add    edx,eax
c0026649:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002664d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026650:	90                   	nop
c0026651:	83 c4 1c             	add    esp,0x1c
c0026654:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeE9push_backERKS0_:

c0026656 <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)>:
c0026656:	83 ec 0c             	sub    esp,0xc
c0026659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002665d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0026660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026664:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0026667:	39 c2                	cmp    edx,eax
c0026669:	73 32                	jae    c002669d <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)+0x47>
c002666b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002666f:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0026672:	8d 51 08             	lea    edx,[ecx+0x8]
c0026675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026679:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002667c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026680:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0026683:	8b 00                	mov    eax,DWORD PTR [eax]
c0026685:	89 01                	mov    DWORD PTR [ecx],eax
c0026687:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002668a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002668e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0026691:	8d 50 01             	lea    edx,[eax+0x1]
c0026694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026698:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002669b:	eb 49                	jmp    c00266e6 <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)+0x90>
c002669d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266a1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00266a4:	d1 e0                	shl    eax,1
c00266a6:	83 ec 08             	sub    esp,0x8
c00266a9:	50                   	push   eax
c00266aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00266ae:	e8 c1 fe ff ff       	call   c0026574 <std::vector<DeviceMemoryRange>::reserve(unsigned long)>
c00266b3:	83 c4 10             	add    esp,0x10
c00266b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266ba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00266bd:	8d 50 01             	lea    edx,[eax+0x1]
c00266c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266c4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00266c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266cb:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00266ce:	8d 51 08             	lea    edx,[ecx+0x8]
c00266d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266d5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00266d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00266dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00266df:	8b 00                	mov    eax,DWORD PTR [eax]
c00266e1:	89 01                	mov    DWORD PTR [ecx],eax
c00266e3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00266e6:	90                   	nop
c00266e7:	83 c4 0c             	add    esp,0xc
c00266ea:	c3                   	ret    

Disassembly of section .text._ZSt4copyIP15DevicePortRangeS1_ET0_T_S3_S2_:

c00266eb <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)>:
c00266eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00266ef:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00266f3:	74 18                	je     c002670d <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)+0x22>
c00266f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00266f9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00266fd:	8b 12                	mov    edx,DWORD PTR [edx]
c00266ff:	89 10                	mov    DWORD PTR [eax],edx
c0026701:	83 44 24 04 04       	add    DWORD PTR [esp+0x4],0x4
c0026706:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c002670b:	eb de                	jmp    c00266eb <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)>
c002670d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026711:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeE7reserveEm:

c0026712 <std::vector<DevicePortRange>::reserve(unsigned long)>:
c0026712:	83 ec 1c             	sub    esp,0x1c
c0026715:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026719:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002671c:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0026720:	0f 86 c8 00 00 00    	jbe    c00267ee <std::vector<DevicePortRange>::reserve(unsigned long)+0xdc>
c0026726:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002672a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002672d:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0026731:	76 13                	jbe    c0026746 <std::vector<DevicePortRange>::reserve(unsigned long)+0x34>
c0026733:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026737:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002673a:	8d 14 00             	lea    edx,[eax+eax*1]
c002673d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026741:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0026744:	eb e0                	jmp    c0026726 <std::vector<DevicePortRange>::reserve(unsigned long)+0x14>
c0026746:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002674a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002674d:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c0026752:	77 05                	ja     c0026759 <std::vector<DevicePortRange>::reserve(unsigned long)+0x47>
c0026754:	c1 e0 02             	shl    eax,0x2
c0026757:	eb 05                	jmp    c002675e <std::vector<DevicePortRange>::reserve(unsigned long)+0x4c>
c0026759:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002675e:	83 ec 0c             	sub    esp,0xc
c0026761:	50                   	push   eax
c0026762:	e8 f4 6f fe ff       	call   c000d75b <operator new[](unsigned long)>
c0026767:	83 c4 10             	add    esp,0x10
c002676a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002676e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026772:	8b 10                	mov    edx,DWORD PTR [eax]
c0026774:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026778:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002677b:	39 c2                	cmp    edx,eax
c002677d:	74 1f                	je     c002679e <std::vector<DevicePortRange>::reserve(unsigned long)+0x8c>
c002677f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026783:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0026786:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002678a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002678d:	83 ec 04             	sub    esp,0x4
c0026790:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026794:	52                   	push   edx
c0026795:	50                   	push   eax
c0026796:	e8 50 ff ff ff       	call   c00266eb <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)>
c002679b:	83 c4 10             	add    esp,0x10
c002679e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00267a2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00267a5:	85 c0                	test   eax,eax
c00267a7:	74 13                	je     c00267bc <std::vector<DevicePortRange>::reserve(unsigned long)+0xaa>
c00267a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00267ad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00267b0:	83 ec 0c             	sub    esp,0xc
c00267b3:	50                   	push   eax
c00267b4:	e8 ac 6f fe ff       	call   c000d765 <operator delete[](void*)>
c00267b9:	83 c4 10             	add    esp,0x10
c00267bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00267c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00267c4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00267c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00267cb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00267ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00267d2:	89 10                	mov    DWORD PTR [eax],edx
c00267d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00267d8:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00267db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00267df:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00267e2:	c1 e0 02             	shl    eax,0x2
c00267e5:	01 c2                	add    edx,eax
c00267e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00267eb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00267ee:	90                   	nop
c00267ef:	83 c4 1c             	add    esp,0x1c
c00267f2:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeE9push_backERKS0_:

c00267f4 <std::vector<DevicePortRange>::push_back(DevicePortRange const&)>:
c00267f4:	83 ec 0c             	sub    esp,0xc
c00267f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267fb:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00267fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026802:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0026805:	39 c2                	cmp    edx,eax
c0026807:	73 2c                	jae    c0026835 <std::vector<DevicePortRange>::push_back(DevicePortRange const&)+0x41>
c0026809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002680d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026810:	8d 48 04             	lea    ecx,[eax+0x4]
c0026813:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026817:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c002681a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002681e:	8b 12                	mov    edx,DWORD PTR [edx]
c0026820:	89 10                	mov    DWORD PTR [eax],edx
c0026822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026826:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0026829:	8d 50 01             	lea    edx,[eax+0x1]
c002682c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026830:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0026833:	eb 43                	jmp    c0026878 <std::vector<DevicePortRange>::push_back(DevicePortRange const&)+0x84>
c0026835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026839:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002683c:	d1 e0                	shl    eax,1
c002683e:	83 ec 08             	sub    esp,0x8
c0026841:	50                   	push   eax
c0026842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026846:	e8 c7 fe ff ff       	call   c0026712 <std::vector<DevicePortRange>::reserve(unsigned long)>
c002684b:	83 c4 10             	add    esp,0x10
c002684e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026852:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0026855:	8d 50 01             	lea    edx,[eax+0x1]
c0026858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002685c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002685f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026863:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026866:	8d 48 04             	lea    ecx,[eax+0x4]
c0026869:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002686d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0026870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026874:	8b 12                	mov    edx,DWORD PTR [edx]
c0026876:	89 10                	mov    DWORD PTR [eax],edx
c0026878:	90                   	nop
c0026879:	83 c4 0c             	add    esp,0xc
c002687c:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002687e <DriverlessDevice::~DriverlessDevice()>:
c002687e:	ba 3c 83 02 c0       	mov    edx,0xc002833c
c0026883:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026887:	89 10                	mov    DWORD PTR [eax],edx
c0026889:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002688d:	50                   	push   eax
c002688e:	e8 3d 35 fe ff       	call   c0009dd0 <Device::~Device()>
c0026893:	83 c4 04             	add    esp,0x4
c0026896:	90                   	nop
c0026897:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0026898 <DriverlessDevice::~DriverlessDevice()>:
c0026898:	83 ec 0c             	sub    esp,0xc
c002689b:	83 ec 0c             	sub    esp,0xc
c002689e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00268a2:	e8 d7 ff ff ff       	call   c002687e <DriverlessDevice::~DriverlessDevice()>
c00268a7:	83 c4 10             	add    esp,0x10
c00268aa:	83 ec 08             	sub    esp,0x8
c00268ad:	68 58 01 00 00       	push   0x158
c00268b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00268b6:	e8 a5 6e fe ff       	call   c000d760 <operator delete(void*, unsigned long)>
c00268bb:	83 c4 10             	add    esp,0x10
c00268be:	83 c4 0c             	add    esp,0xc
c00268c1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00268c2 <LinkedList<Device>::addElement(Device*)>:
c00268c2:	83 ec 0c             	sub    esp,0xc
c00268c5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00268ca:	75 10                	jne    c00268dc <LinkedList<Device>::addElement(Device*)+0x1a>
c00268cc:	83 ec 0c             	sub    esp,0xc
c00268cf:	68 d0 82 02 c0       	push   0xc00282d0
c00268d4:	e8 d3 96 fe ff       	call   c000ffac <KePanic(char const*)>
c00268d9:	83 c4 10             	add    esp,0x10
c00268dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00268e2:	85 c0                	test   eax,eax
c00268e4:	74 3a                	je     c0026920 <LinkedList<Device>::addElement(Device*)+0x5e>
c00268e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00268ed:	85 c0                	test   eax,eax
c00268ef:	74 2f                	je     c0026920 <LinkedList<Device>::addElement(Device*)+0x5e>
c00268f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268f5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00268f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00268fc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0026902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026906:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002690a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002690d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026911:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026914:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002691e:	eb 68                	jmp    c0026988 <LinkedList<Device>::addElement(Device*)+0xc6>
c0026920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026924:	8b 00                	mov    eax,DWORD PTR [eax]
c0026926:	85 c0                	test   eax,eax
c0026928:	75 4e                	jne    c0026978 <LinkedList<Device>::addElement(Device*)+0xb6>
c002692a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002692e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026931:	85 c0                	test   eax,eax
c0026933:	75 43                	jne    c0026978 <LinkedList<Device>::addElement(Device*)+0xb6>
c0026935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026939:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002693d:	89 10                	mov    DWORD PTR [eax],edx
c002693f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026943:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026947:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002694a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002694e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026951:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002695b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002695f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026962:	85 c0                	test   eax,eax
c0026964:	74 22                	je     c0026988 <LinkedList<Device>::addElement(Device*)+0xc6>
c0026966:	83 ec 0c             	sub    esp,0xc
c0026969:	68 f2 82 02 c0       	push   0xc00282f2
c002696e:	e8 39 96 fe ff       	call   c000ffac <KePanic(char const*)>
c0026973:	83 c4 10             	add    esp,0x10
c0026976:	eb 10                	jmp    c0026988 <LinkedList<Device>::addElement(Device*)+0xc6>
c0026978:	83 ec 0c             	sub    esp,0xc
c002697b:	68 fc 82 02 c0       	push   0xc00282fc
c0026980:	e8 27 96 fe ff       	call   c000ffac <KePanic(char const*)>
c0026985:	83 c4 10             	add    esp,0x10
c0026988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002698c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002698f:	8d 50 01             	lea    edx,[eax+0x1]
c0026992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026996:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026999:	90                   	nop
c002699a:	83 c4 0c             	add    esp,0xc
c002699d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002699e <LinkedList<Device>::LinkedList()>:
c002699e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00269a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00269a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00269ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00269b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00269b7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00269be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00269c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00269c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00269cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00269d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00269d7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00269de:	90                   	nop
c00269df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00269e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00269e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00269e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00269e6:	85 c0                	test   eax,eax
c00269e8:	75 0e                	jne    c00269f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00269ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00269ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00269f1:	85 c0                	test   eax,eax
c00269f3:	75 03                	jne    c00269f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00269f5:	b0 01                	mov    al,0x1
c00269f7:	c3                   	ret    
c00269f8:	b0 00                	mov    al,0x0
c00269fa:	90                   	nop
c00269fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00269fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00269fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026a00:	8b 00                	mov    eax,DWORD PTR [eax]
c0026a02:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0026a04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0026a04:	83 ec 0c             	sub    esp,0xc
c0026a07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0026a0d:	85 c0                	test   eax,eax
c0026a0f:	75 17                	jne    c0026a28 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0026a11:	83 ec 0c             	sub    esp,0xc
c0026a14:	68 6c 85 02 c0       	push   0xc002856c
c0026a19:	e8 8e 95 fe ff       	call   c000ffac <KePanic(char const*)>
c0026a1e:	83 c4 10             	add    esp,0x10
c0026a21:	e9 96 00 00 00       	jmp    c0026abc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0026a26:	66 90                	xchg   ax,ax
c0026a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026a2f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0026a32:	85 c0                	test   eax,eax
c0026a34:	0f 95 c0             	setne  al
c0026a37:	0f b6 c0             	movzx  eax,al
c0026a3a:	85 c0                	test   eax,eax
c0026a3c:	74 12                	je     c0026a50 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c0026a3e:	83 ec 0c             	sub    esp,0xc
c0026a41:	68 b7 85 02 c0       	push   0xc00285b7
c0026a46:	e8 61 95 fe ff       	call   c000ffac <KePanic(char const*)>
c0026a4b:	83 c4 10             	add    esp,0x10
c0026a4e:	66 90                	xchg   ax,ax
c0026a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a54:	8b 00                	mov    eax,DWORD PTR [eax]
c0026a56:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0026a59:	85 c0                	test   eax,eax
c0026a5b:	0f 94 c0             	sete   al
c0026a5e:	0f b6 c0             	movzx  eax,al
c0026a61:	85 c0                	test   eax,eax
c0026a63:	74 33                	je     c0026a98 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0026a65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a69:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026a6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a73:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026a7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a7e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026a81:	83 f8 01             	cmp    eax,0x1
c0026a84:	74 22                	je     c0026aa8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0026a86:	83 ec 0c             	sub    esp,0xc
c0026a89:	68 90 85 02 c0       	push   0xc0028590
c0026a8e:	e8 19 95 fe ff       	call   c000ffac <KePanic(char const*)>
c0026a93:	83 c4 10             	add    esp,0x10
c0026a96:	eb 10                	jmp    c0026aa8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0026a98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0026a9e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0026aa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026aa5:	89 10                	mov    DWORD PTR [eax],edx
c0026aa7:	90                   	nop
c0026aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026aac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026aaf:	8d 50 ff             	lea    edx,[eax-0x1]
c0026ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ab6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026ab9:	8d 76 00             	lea    esi,[esi+0x0]
c0026abc:	83 c4 0c             	add    esp,0xc
c0026abf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0026ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0026ac0:	83 ec 0c             	sub    esp,0xc
c0026ac3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0026ac8:	75 12                	jne    c0026adc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0026aca:	83 ec 0c             	sub    esp,0xc
c0026acd:	68 d0 82 02 c0       	push   0xc00282d0
c0026ad2:	e8 d5 94 fe ff       	call   c000ffac <KePanic(char const*)>
c0026ad7:	83 c4 10             	add    esp,0x10
c0026ada:	66 90                	xchg   ax,ax
c0026adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ae0:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ae2:	85 c0                	test   eax,eax
c0026ae4:	74 36                	je     c0026b1c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0026ae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026aea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026aed:	85 c0                	test   eax,eax
c0026aef:	74 2b                	je     c0026b1c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0026af1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026af5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026af8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026afc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0026aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026b07:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026b11:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0026b18:	eb 6a                	jmp    c0026b84 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0026b1a:	66 90                	xchg   ax,ax
c0026b1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b20:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b22:	85 c0                	test   eax,eax
c0026b24:	75 4e                	jne    c0026b74 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0026b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026b2d:	85 c0                	test   eax,eax
c0026b2f:	75 43                	jne    c0026b74 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0026b31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b35:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026b39:	89 10                	mov    DWORD PTR [eax],edx
c0026b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b3f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026b43:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026b4d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0026b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b58:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026b5b:	85 c0                	test   eax,eax
c0026b5d:	74 25                	je     c0026b84 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0026b5f:	83 ec 0c             	sub    esp,0xc
c0026b62:	68 f2 82 02 c0       	push   0xc00282f2
c0026b67:	e8 40 94 fe ff       	call   c000ffac <KePanic(char const*)>
c0026b6c:	83 c4 10             	add    esp,0x10
c0026b6f:	eb 13                	jmp    c0026b84 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0026b71:	8d 76 00             	lea    esi,[esi+0x0]
c0026b74:	83 ec 0c             	sub    esp,0xc
c0026b77:	68 fc 82 02 c0       	push   0xc00282fc
c0026b7c:	e8 2b 94 fe ff       	call   c000ffac <KePanic(char const*)>
c0026b81:	83 c4 10             	add    esp,0x10
c0026b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b88:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026b8b:	8d 50 01             	lea    edx,[eax+0x1]
c0026b8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b92:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026b95:	90                   	nop
c0026b96:	83 c4 0c             	add    esp,0xc
c0026b99:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0026b9c <ACPI::~ACPI()>:
c0026b9c:	83 ec 0c             	sub    esp,0xc
c0026b9f:	ba ec 89 02 c0       	mov    edx,0xc00289ec
c0026ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ba8:	89 10                	mov    DWORD PTR [eax],edx
c0026baa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bae:	83 ec 0c             	sub    esp,0xc
c0026bb1:	50                   	push   eax
c0026bb2:	e8 19 32 fe ff       	call   c0009dd0 <Device::~Device()>
c0026bb7:	83 c4 10             	add    esp,0x10
c0026bba:	90                   	nop
c0026bbb:	83 c4 0c             	add    esp,0xc
c0026bbe:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0026bc0 <ACPI::~ACPI()>:
c0026bc0:	83 ec 0c             	sub    esp,0xc
c0026bc3:	83 ec 0c             	sub    esp,0xc
c0026bc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026bca:	e8 cd ff ff ff       	call   c0026b9c <ACPI::~ACPI()>
c0026bcf:	83 c4 10             	add    esp,0x10
c0026bd2:	83 ec 08             	sub    esp,0x8
c0026bd5:	68 64 12 00 00       	push   0x1264
c0026bda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026bde:	e8 7d 6b fe ff       	call   c000d760 <operator delete(void*, unsigned long)>
c0026be3:	83 c4 10             	add    esp,0x10
c0026be6:	83 c4 0c             	add    esp,0xc
c0026be9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0026bec <LinkedList<Device>::~LinkedList()>:
c0026bec:	90                   	nop
c0026bed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0026bf0 <LinkedList<Device>::isEmpty()>:
c0026bf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026bf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0026bf6:	85 c0                	test   eax,eax
c0026bf8:	75 0e                	jne    c0026c08 <LinkedList<Device>::isEmpty()+0x18>
c0026bfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026bfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026c01:	85 c0                	test   eax,eax
c0026c03:	75 03                	jne    c0026c08 <LinkedList<Device>::isEmpty()+0x18>
c0026c05:	b0 01                	mov    al,0x1
c0026c07:	c3                   	ret    
c0026c08:	b0 00                	mov    al,0x0
c0026c0a:	90                   	nop
c0026c0b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0026c0c <LinkedList<Device>::getFirstElement()>:
c0026c0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c12:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0026c14 <LinkedList<Device>::removeFirst()>:
c0026c14:	83 ec 0c             	sub    esp,0xc
c0026c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c1d:	85 c0                	test   eax,eax
c0026c1f:	75 17                	jne    c0026c38 <LinkedList<Device>::removeFirst()+0x24>
c0026c21:	83 ec 0c             	sub    esp,0xc
c0026c24:	68 6c 85 02 c0       	push   0xc002856c
c0026c29:	e8 7e 93 fe ff       	call   c000ffac <KePanic(char const*)>
c0026c2e:	83 c4 10             	add    esp,0x10
c0026c31:	e9 92 00 00 00       	jmp    c0026cc8 <LinkedList<Device>::removeFirst()+0xb4>
c0026c36:	66 90                	xchg   ax,ax
c0026c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026c3f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0026c45:	85 c0                	test   eax,eax
c0026c47:	74 13                	je     c0026c5c <LinkedList<Device>::removeFirst()+0x48>
c0026c49:	83 ec 0c             	sub    esp,0xc
c0026c4c:	68 b7 85 02 c0       	push   0xc00285b7
c0026c51:	e8 56 93 fe ff       	call   c000ffac <KePanic(char const*)>
c0026c56:	83 c4 10             	add    esp,0x10
c0026c59:	8d 76 00             	lea    esi,[esi+0x0]
c0026c5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c60:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c62:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0026c68:	85 c0                	test   eax,eax
c0026c6a:	75 34                	jne    c0026ca0 <LinkedList<Device>::removeFirst()+0x8c>
c0026c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c70:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c7a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026c81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c85:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026c88:	83 f8 01             	cmp    eax,0x1
c0026c8b:	74 27                	je     c0026cb4 <LinkedList<Device>::removeFirst()+0xa0>
c0026c8d:	83 ec 0c             	sub    esp,0xc
c0026c90:	68 90 85 02 c0       	push   0xc0028590
c0026c95:	e8 12 93 fe ff       	call   c000ffac <KePanic(char const*)>
c0026c9a:	83 c4 10             	add    esp,0x10
c0026c9d:	eb 15                	jmp    c0026cb4 <LinkedList<Device>::removeFirst()+0xa0>
c0026c9f:	90                   	nop
c0026ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ca4:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ca6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0026cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cb0:	89 10                	mov    DWORD PTR [eax],edx
c0026cb2:	66 90                	xchg   ax,ax
c0026cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cb8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026cbb:	8d 50 ff             	lea    edx,[eax-0x1]
c0026cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cc2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0026cc8:	83 c4 0c             	add    esp,0xc
c0026ccb:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0026ccc <Computer::~Computer()>:
c0026ccc:	83 ec 0c             	sub    esp,0xc
c0026ccf:	ba 64 8b 02 c0       	mov    edx,0xc0028b64
c0026cd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cd8:	89 10                	mov    DWORD PTR [eax],edx
c0026cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cde:	83 ec 0c             	sub    esp,0xc
c0026ce1:	50                   	push   eax
c0026ce2:	e8 e9 30 fe ff       	call   c0009dd0 <Device::~Device()>
c0026ce7:	83 c4 10             	add    esp,0x10
c0026cea:	90                   	nop
c0026ceb:	83 c4 0c             	add    esp,0xc
c0026cee:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0026cf0 <Computer::~Computer()>:
c0026cf0:	83 ec 0c             	sub    esp,0xc
c0026cf3:	83 ec 0c             	sub    esp,0xc
c0026cf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026cfa:	e8 cd ff ff ff       	call   c0026ccc <Computer::~Computer()>
c0026cff:	83 c4 10             	add    esp,0x10
c0026d02:	83 ec 08             	sub    esp,0x8
c0026d05:	68 68 01 00 00       	push   0x168
c0026d0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d0e:	e8 4d 6a fe ff       	call   c000d760 <operator delete(void*, unsigned long)>
c0026d13:	83 c4 10             	add    esp,0x10
c0026d16:	83 c4 0c             	add    esp,0xc
c0026d19:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0026d1a <idleCommon()>:
c0026d1a:	83 ec 0c             	sub    esp,0xc
c0026d1d:	fa                   	cli    
c0026d1e:	ff 05 30 23 03 c0    	inc    DWORD PTR ds:0xc0032330
c0026d24:	e8 0b fe fe ff       	call   c0016b34 <schedule()>
c0026d29:	f0 ff 0d 30 23 03 c0 	lock dec DWORD PTR ds:0xc0032330
c0026d30:	83 3d 30 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032330,0x0
c0026d37:	75 01                	jne    c0026d3a <idleCommon()+0x20>
c0026d39:	fb                   	sti    
c0026d3a:	83 c4 0c             	add    esp,0xc
c0026d3d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0026d3e <LinkedList<UnixFile>::~LinkedList()>:
c0026d3e:	90                   	nop
c0026d3f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0026d40 <LinkedList<UnixFile>::LinkedList()>:
c0026d40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026d44:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026d4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026d4e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026d55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026d59:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026d60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026d64:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026d6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026d6e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026d75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026d79:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026d80:	90                   	nop
c0026d81:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0026d82 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0026d82:	83 ec 0c             	sub    esp,0xc
c0026d85:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0026d8a:	75 10                	jne    c0026d9c <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0026d8c:	83 ec 0c             	sub    esp,0xc
c0026d8f:	68 d0 82 02 c0       	push   0xc00282d0
c0026d94:	e8 13 92 fe ff       	call   c000ffac <KePanic(char const*)>
c0026d99:	83 c4 10             	add    esp,0x10
c0026d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026da0:	8b 00                	mov    eax,DWORD PTR [eax]
c0026da2:	85 c0                	test   eax,eax
c0026da4:	74 34                	je     c0026dda <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0026da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026daa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026dad:	85 c0                	test   eax,eax
c0026daf:	74 29                	je     c0026dda <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0026db1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026db5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026db8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026dbc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026dbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dc3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026dc7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026dca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026dd1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026dd8:	eb 65                	jmp    c0026e3f <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0026dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dde:	8b 00                	mov    eax,DWORD PTR [eax]
c0026de0:	85 c0                	test   eax,eax
c0026de2:	75 4b                	jne    c0026e2f <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0026de4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026de8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026deb:	85 c0                	test   eax,eax
c0026ded:	75 40                	jne    c0026e2f <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0026def:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026df3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026df7:	89 10                	mov    DWORD PTR [eax],edx
c0026df9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dfd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026e01:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026e04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026e0b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e16:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026e19:	85 c0                	test   eax,eax
c0026e1b:	74 22                	je     c0026e3f <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0026e1d:	83 ec 0c             	sub    esp,0xc
c0026e20:	68 f2 82 02 c0       	push   0xc00282f2
c0026e25:	e8 82 91 fe ff       	call   c000ffac <KePanic(char const*)>
c0026e2a:	83 c4 10             	add    esp,0x10
c0026e2d:	eb 10                	jmp    c0026e3f <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0026e2f:	83 ec 0c             	sub    esp,0xc
c0026e32:	68 fc 82 02 c0       	push   0xc00282fc
c0026e37:	e8 70 91 fe ff       	call   c000ffac <KePanic(char const*)>
c0026e3c:	83 c4 10             	add    esp,0x10
c0026e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e43:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026e46:	8d 50 01             	lea    edx,[eax+0x1]
c0026e49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e4d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026e50:	90                   	nop
c0026e51:	83 c4 0c             	add    esp,0xc
c0026e54:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0026e56 <LinkedList<UnixFile>::getFirstElement()>:
c0026e56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026e5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0026e5c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0026e5e <LinkedList<UnixFile>::removeFirst()>:
c0026e5e:	83 ec 0c             	sub    esp,0xc
c0026e61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e65:	8b 00                	mov    eax,DWORD PTR [eax]
c0026e67:	85 c0                	test   eax,eax
c0026e69:	75 12                	jne    c0026e7d <LinkedList<UnixFile>::removeFirst()+0x1f>
c0026e6b:	83 ec 0c             	sub    esp,0xc
c0026e6e:	68 6c 85 02 c0       	push   0xc002856c
c0026e73:	e8 34 91 fe ff       	call   c000ffac <KePanic(char const*)>
c0026e78:	83 c4 10             	add    esp,0x10
c0026e7b:	eb 7e                	jmp    c0026efb <LinkedList<UnixFile>::removeFirst()+0x9d>
c0026e7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e81:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026e84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026e87:	85 c0                	test   eax,eax
c0026e89:	74 10                	je     c0026e9b <LinkedList<UnixFile>::removeFirst()+0x3d>
c0026e8b:	83 ec 0c             	sub    esp,0xc
c0026e8e:	68 b7 85 02 c0       	push   0xc00285b7
c0026e93:	e8 14 91 fe ff       	call   c000ffac <KePanic(char const*)>
c0026e98:	83 c4 10             	add    esp,0x10
c0026e9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ea1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026ea4:	85 c0                	test   eax,eax
c0026ea6:	75 33                	jne    c0026edb <LinkedList<UnixFile>::removeFirst()+0x7d>
c0026ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026eac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026eb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026eb6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026ebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ec1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026ec4:	83 f8 01             	cmp    eax,0x1
c0026ec7:	74 21                	je     c0026eea <LinkedList<UnixFile>::removeFirst()+0x8c>
c0026ec9:	83 ec 0c             	sub    esp,0xc
c0026ecc:	68 90 85 02 c0       	push   0xc0028590
c0026ed1:	e8 d6 90 fe ff       	call   c000ffac <KePanic(char const*)>
c0026ed6:	83 c4 10             	add    esp,0x10
c0026ed9:	eb 0f                	jmp    c0026eea <LinkedList<UnixFile>::removeFirst()+0x8c>
c0026edb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026edf:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ee1:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0026ee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ee8:	89 10                	mov    DWORD PTR [eax],edx
c0026eea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026eee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026ef1:	8d 50 ff             	lea    edx,[eax-0x1]
c0026ef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ef8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026efb:	83 c4 0c             	add    esp,0xc
c0026efe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0026f00 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0026f00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026f04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026f07:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0026f08 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0026f08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026f0c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0026f0f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0026f10 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0026f10:	90                   	nop
c0026f11:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0026f14 <ThreadControlBlock::ThreadControlBlock()>:
c0026f14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026f18:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0026f1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026f23:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0026f2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026f2e:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0026f35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026f39:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0026f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026f44:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0026f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026f4f:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0026f53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026f57:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0026f5b:	90                   	nop
c0026f5c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0026f60 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0026f60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026f64:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026f6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026f6e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026f75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026f79:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026f80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026f84:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026f8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026f8e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026f99:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026fa0:	90                   	nop
c0026fa1:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0026fa2 <IOAPIC::~IOAPIC()>:
c0026fa2:	83 ec 0c             	sub    esp,0xc
c0026fa5:	ba b4 9f 02 c0       	mov    edx,0xc0029fb4
c0026faa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fae:	89 10                	mov    DWORD PTR [eax],edx
c0026fb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fb4:	83 ec 0c             	sub    esp,0xc
c0026fb7:	50                   	push   eax
c0026fb8:	e8 13 2e fe ff       	call   c0009dd0 <Device::~Device()>
c0026fbd:	83 c4 10             	add    esp,0x10
c0026fc0:	90                   	nop
c0026fc1:	83 c4 0c             	add    esp,0xc
c0026fc4:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0026fc6 <IOAPIC::~IOAPIC()>:
c0026fc6:	83 ec 0c             	sub    esp,0xc
c0026fc9:	83 ec 0c             	sub    esp,0xc
c0026fcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026fd0:	e8 cd ff ff ff       	call   c0026fa2 <IOAPIC::~IOAPIC()>
c0026fd5:	83 c4 10             	add    esp,0x10
c0026fd8:	83 ec 08             	sub    esp,0x8
c0026fdb:	68 68 01 00 00       	push   0x168
c0026fe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026fe4:	e8 77 67 fe ff       	call   c000d760 <operator delete(void*, unsigned long)>
c0026fe9:	83 c4 10             	add    esp,0x10
c0026fec:	83 c4 0c             	add    esp,0xc
c0026fef:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0026ff0 <CPU::~CPU()>:
c0026ff0:	83 ec 0c             	sub    esp,0xc
c0026ff3:	ba 3c a3 02 c0       	mov    edx,0xc002a33c
c0026ff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ffc:	89 10                	mov    DWORD PTR [eax],edx
c0026ffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027002:	83 ec 0c             	sub    esp,0xc
c0027005:	50                   	push   eax
c0027006:	e8 c5 2d fe ff       	call   c0009dd0 <Device::~Device()>
c002700b:	83 c4 10             	add    esp,0x10
c002700e:	90                   	nop
c002700f:	83 c4 0c             	add    esp,0xc
c0027012:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0027014 <CPU::~CPU()>:
c0027014:	83 ec 0c             	sub    esp,0xc
c0027017:	83 ec 0c             	sub    esp,0xc
c002701a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002701e:	e8 cd ff ff ff       	call   c0026ff0 <CPU::~CPU()>
c0027023:	83 c4 10             	add    esp,0x10
c0027026:	83 ec 08             	sub    esp,0x8
c0027029:	68 78 11 00 00       	push   0x1178
c002702e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027032:	e8 29 67 fe ff       	call   c000d760 <operator delete(void*, unsigned long)>
c0027037:	83 c4 10             	add    esp,0x10
c002703a:	83 c4 0c             	add    esp,0xc
c002703d:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002703e <PCI::~PCI()>:
c002703e:	83 ec 0c             	sub    esp,0xc
c0027041:	ba a0 a8 02 c0       	mov    edx,0xc002a8a0
c0027046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002704a:	89 10                	mov    DWORD PTR [eax],edx
c002704c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027050:	83 ec 0c             	sub    esp,0xc
c0027053:	50                   	push   eax
c0027054:	e8 1b 1e fe ff       	call   c0008e74 <Bus::~Bus()>
c0027059:	83 c4 10             	add    esp,0x10
c002705c:	90                   	nop
c002705d:	83 c4 0c             	add    esp,0xc
c0027060:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0027062 <PCI::~PCI()>:
c0027062:	83 ec 0c             	sub    esp,0xc
c0027065:	83 ec 0c             	sub    esp,0xc
c0027068:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002706c:	e8 cd ff ff ff       	call   c002703e <PCI::~PCI()>
c0027071:	83 c4 10             	add    esp,0x10
c0027074:	83 ec 08             	sub    esp,0x8
c0027077:	68 5c 01 00 00       	push   0x15c
c002707c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027080:	e8 db 66 fe ff       	call   c000d760 <operator delete(void*, unsigned long)>
c0027085:	83 c4 10             	add    esp,0x10
c0027088:	83 c4 0c             	add    esp,0xc
c002708b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002708c <IDE::~IDE()>:
c002708c:	83 ec 0c             	sub    esp,0xc
c002708f:	ba f0 a9 02 c0       	mov    edx,0xc002a9f0
c0027094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027098:	89 10                	mov    DWORD PTR [eax],edx
c002709a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002709e:	83 ec 0c             	sub    esp,0xc
c00270a1:	50                   	push   eax
c00270a2:	e8 b9 31 fe ff       	call   c000a260 <HardDiskController::~HardDiskController()>
c00270a7:	83 c4 10             	add    esp,0x10
c00270aa:	90                   	nop
c00270ab:	83 c4 0c             	add    esp,0xc
c00270ae:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00270b0 <IDE::~IDE()>:
c00270b0:	83 ec 0c             	sub    esp,0xc
c00270b3:	83 ec 0c             	sub    esp,0xc
c00270b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00270ba:	e8 cd ff ff ff       	call   c002708c <IDE::~IDE()>
c00270bf:	83 c4 10             	add    esp,0x10
c00270c2:	83 ec 08             	sub    esp,0x8
c00270c5:	68 70 02 00 00       	push   0x270
c00270ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00270ce:	e8 8d 66 fe ff       	call   c000d760 <operator delete(void*, unsigned long)>
c00270d3:	83 c4 10             	add    esp,0x10
c00270d6:	83 c4 0c             	add    esp,0xc
c00270d9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00270da <SATABus::~SATABus()>:
c00270da:	83 ec 0c             	sub    esp,0xc
c00270dd:	ba 40 aa 02 c0       	mov    edx,0xc002aa40
c00270e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270e6:	89 10                	mov    DWORD PTR [eax],edx
c00270e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270ec:	83 ec 0c             	sub    esp,0xc
c00270ef:	50                   	push   eax
c00270f0:	e8 6b 31 fe ff       	call   c000a260 <HardDiskController::~HardDiskController()>
c00270f5:	83 c4 10             	add    esp,0x10
c00270f8:	90                   	nop
c00270f9:	83 c4 0c             	add    esp,0xc
c00270fc:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00270fe <SATABus::~SATABus()>:
c00270fe:	83 ec 0c             	sub    esp,0xc
c0027101:	83 ec 0c             	sub    esp,0xc
c0027104:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027108:	e8 cd ff ff ff       	call   c00270da <SATABus::~SATABus()>
c002710d:	83 c4 10             	add    esp,0x10
c0027110:	83 ec 08             	sub    esp,0x8
c0027113:	68 64 01 00 00       	push   0x164
c0027118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002711c:	e8 3f 66 fe ff       	call   c000d760 <operator delete(void*, unsigned long)>
c0027121:	83 c4 10             	add    esp,0x10
c0027124:	83 c4 0c             	add    esp,0xc
c0027127:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0027128 <ATA::~ATA()>:
c0027128:	83 ec 0c             	sub    esp,0xc
c002712b:	ba 28 ab 02 c0       	mov    edx,0xc002ab28
c0027130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027134:	89 10                	mov    DWORD PTR [eax],edx
c0027136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002713a:	83 ec 0c             	sub    esp,0xc
c002713d:	50                   	push   eax
c002713e:	e8 ff 31 fe ff       	call   c000a342 <PhysicalDisk::~PhysicalDisk()>
c0027143:	83 c4 10             	add    esp,0x10
c0027146:	90                   	nop
c0027147:	83 c4 0c             	add    esp,0xc
c002714a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002714c <ATA::~ATA()>:
c002714c:	83 ec 0c             	sub    esp,0xc
c002714f:	83 ec 0c             	sub    esp,0xc
c0027152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027156:	e8 cd ff ff ff       	call   c0027128 <ATA::~ATA()>
c002715b:	83 c4 10             	add    esp,0x10
c002715e:	83 ec 08             	sub    esp,0x8
c0027161:	68 8c 01 00 00       	push   0x18c
c0027166:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002716a:	e8 f1 65 fe ff       	call   c000d760 <operator delete(void*, unsigned long)>
c002716f:	83 c4 10             	add    esp,0x10
c0027172:	83 c4 0c             	add    esp,0xc
c0027175:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0027176 <ATAPI::~ATAPI()>:
c0027176:	83 ec 0c             	sub    esp,0xc
c0027179:	ba 70 ab 02 c0       	mov    edx,0xc002ab70
c002717e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027182:	89 10                	mov    DWORD PTR [eax],edx
c0027184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027188:	83 ec 0c             	sub    esp,0xc
c002718b:	50                   	push   eax
c002718c:	e8 b1 31 fe ff       	call   c000a342 <PhysicalDisk::~PhysicalDisk()>
c0027191:	83 c4 10             	add    esp,0x10
c0027194:	90                   	nop
c0027195:	83 c4 0c             	add    esp,0xc
c0027198:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002719a <ATAPI::~ATAPI()>:
c002719a:	83 ec 0c             	sub    esp,0xc
c002719d:	83 ec 0c             	sub    esp,0xc
c00271a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00271a4:	e8 cd ff ff ff       	call   c0027176 <ATAPI::~ATAPI()>
c00271a9:	83 c4 10             	add    esp,0x10
c00271ac:	83 ec 08             	sub    esp,0x8
c00271af:	68 84 01 00 00       	push   0x184
c00271b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00271b8:	e8 a3 65 fe ff       	call   c000d760 <operator delete(void*, unsigned long)>
c00271bd:	83 c4 10             	add    esp,0x10
c00271c0:	83 c4 0c             	add    esp,0xc
c00271c3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00271c4 <SATA::~SATA()>:
c00271c4:	83 ec 0c             	sub    esp,0xc
c00271c7:	ba 30 ac 02 c0       	mov    edx,0xc002ac30
c00271cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271d0:	89 10                	mov    DWORD PTR [eax],edx
c00271d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271d6:	83 ec 0c             	sub    esp,0xc
c00271d9:	50                   	push   eax
c00271da:	e8 63 31 fe ff       	call   c000a342 <PhysicalDisk::~PhysicalDisk()>
c00271df:	83 c4 10             	add    esp,0x10
c00271e2:	90                   	nop
c00271e3:	83 c4 0c             	add    esp,0xc
c00271e6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00271e8 <SATA::~SATA()>:
c00271e8:	83 ec 0c             	sub    esp,0xc
c00271eb:	83 ec 0c             	sub    esp,0xc
c00271ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00271f2:	e8 cd ff ff ff       	call   c00271c4 <SATA::~SATA()>
c00271f7:	83 c4 10             	add    esp,0x10
c00271fa:	83 ec 08             	sub    esp,0x8
c00271fd:	68 7c 01 00 00       	push   0x17c
c0027202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027206:	e8 55 65 fe ff       	call   c000d760 <operator delete(void*, unsigned long)>
c002720b:	83 c4 10             	add    esp,0x10
c002720e:	83 c4 0c             	add    esp,0xc
c0027211:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0027212 <SATAPI::~SATAPI()>:
c0027212:	83 ec 0c             	sub    esp,0xc
c0027215:	ba 54 ad 02 c0       	mov    edx,0xc002ad54
c002721a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002721e:	89 10                	mov    DWORD PTR [eax],edx
c0027220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027224:	83 ec 0c             	sub    esp,0xc
c0027227:	50                   	push   eax
c0027228:	e8 15 31 fe ff       	call   c000a342 <PhysicalDisk::~PhysicalDisk()>
c002722d:	83 c4 10             	add    esp,0x10
c0027230:	90                   	nop
c0027231:	83 c4 0c             	add    esp,0xc
c0027234:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0027236 <SATAPI::~SATAPI()>:
c0027236:	83 ec 0c             	sub    esp,0xc
c0027239:	83 ec 0c             	sub    esp,0xc
c002723c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027240:	e8 cd ff ff ff       	call   c0027212 <SATAPI::~SATAPI()>
c0027245:	83 c4 10             	add    esp,0x10
c0027248:	83 ec 08             	sub    esp,0x8
c002724b:	68 84 01 00 00       	push   0x184
c0027250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027254:	e8 07 65 fe ff       	call   c000d760 <operator delete(void*, unsigned long)>
c0027259:	83 c4 10             	add    esp,0x10
c002725c:	83 c4 0c             	add    esp,0xc
c002725f:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0027260 <APICTimer::~APICTimer()>:
c0027260:	83 ec 0c             	sub    esp,0xc
c0027263:	ba a8 ad 02 c0       	mov    edx,0xc002ada8
c0027268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002726c:	89 10                	mov    DWORD PTR [eax],edx
c002726e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027272:	83 ec 0c             	sub    esp,0xc
c0027275:	50                   	push   eax
c0027276:	e8 61 42 fe ff       	call   c000b4dc <Timer::~Timer()>
c002727b:	83 c4 10             	add    esp,0x10
c002727e:	90                   	nop
c002727f:	83 c4 0c             	add    esp,0xc
c0027282:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0027284 <APICTimer::~APICTimer()>:
c0027284:	83 ec 0c             	sub    esp,0xc
c0027287:	83 ec 0c             	sub    esp,0xc
c002728a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002728e:	e8 cd ff ff ff       	call   c0027260 <APICTimer::~APICTimer()>
c0027293:	83 c4 10             	add    esp,0x10
c0027296:	83 ec 08             	sub    esp,0x8
c0027299:	68 60 01 00 00       	push   0x160
c002729e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00272a2:	e8 b9 64 fe ff       	call   c000d760 <operator delete(void*, unsigned long)>
c00272a7:	83 c4 10             	add    esp,0x10
c00272aa:	83 c4 0c             	add    esp,0xc
c00272ad:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00272b0 <PIT::~PIT()>:
c00272b0:	83 ec 0c             	sub    esp,0xc
c00272b3:	ba f8 ad 02 c0       	mov    edx,0xc002adf8
c00272b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272bc:	89 10                	mov    DWORD PTR [eax],edx
c00272be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272c2:	83 ec 0c             	sub    esp,0xc
c00272c5:	50                   	push   eax
c00272c6:	e8 11 42 fe ff       	call   c000b4dc <Timer::~Timer()>
c00272cb:	83 c4 10             	add    esp,0x10
c00272ce:	90                   	nop
c00272cf:	83 c4 0c             	add    esp,0xc
c00272d2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00272d4 <PIT::~PIT()>:
c00272d4:	83 ec 0c             	sub    esp,0xc
c00272d7:	83 ec 0c             	sub    esp,0xc
c00272da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00272de:	e8 cd ff ff ff       	call   c00272b0 <PIT::~PIT()>
c00272e3:	83 c4 10             	add    esp,0x10
c00272e6:	83 ec 08             	sub    esp,0x8
c00272e9:	68 5c 01 00 00       	push   0x15c
c00272ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00272f2:	e8 69 64 fe ff       	call   c000d760 <operator delete(void*, unsigned long)>
c00272f7:	83 c4 10             	add    esp,0x10
c00272fa:	83 c4 0c             	add    esp,0xc
c00272fd:	c3                   	ret    

Disassembly of section userkernel:

c002d000 <KiDefaultSignalHandlerAbort(int)>:
c002d000:	57                   	push   edi
c002d001:	b9 07 00 00 00       	mov    ecx,0x7
c002d006:	56                   	push   esi
c002d007:	be 4b 90 02 c0       	mov    esi,0xc002904b
c002d00c:	83 ec 24             	sub    esp,0x24
c002d00f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002d013:	fc                   	cld    
c002d014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002d016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002d01a:	50                   	push   eax
c002d01b:	6a 00                	push   0x0
c002d01d:	6a 38                	push   0x38
c002d01f:	6a 01                	push   0x1
c002d021:	e8 2c 00 00 00       	call   c002d052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002d026:	83 c4 34             	add    esp,0x34
c002d029:	5e                   	pop    esi
c002d02a:	5f                   	pop    edi
c002d02b:	c3                   	ret    

c002d02c <KiDefaultSignalHandlerTerminate(int)>:
c002d02c:	57                   	push   edi
c002d02d:	b9 08 00 00 00       	mov    ecx,0x8
c002d032:	56                   	push   esi
c002d033:	be 67 90 02 c0       	mov    esi,0xc0029067
c002d038:	83 ec 24             	sub    esp,0x24
c002d03b:	89 e7                	mov    edi,esp
c002d03d:	fc                   	cld    
c002d03e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002d040:	54                   	push   esp
c002d041:	6a 00                	push   0x0
c002d043:	6a 37                	push   0x37
c002d045:	6a 01                	push   0x1
c002d047:	e8 06 00 00 00       	call   c002d052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002d04c:	83 c4 34             	add    esp,0x34
c002d04f:	5e                   	pop    esi
c002d050:	5f                   	pop    edi
c002d051:	c3                   	ret    

c002d052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c002d052:	53                   	push   ebx
c002d053:	83 ec 10             	sub    esp,0x10
c002d056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002d05a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002d05e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002d062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002d066:	cd 60                	int    0x60
c002d068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002d06c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002d074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002d078:	83 c4 10             	add    esp,0x10
c002d07b:	5b                   	pop    ebx
c002d07c:	c3                   	ret    

Disassembly of section align_previous:

c002e000 <DO_NOT_DELETE()>:
c002e000:	c3                   	ret    
