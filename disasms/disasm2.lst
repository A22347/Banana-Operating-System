
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 df ea 00 00       	call   c000eaff <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 28 48 02 c0       	mov    eax,0xc0024828
c0000025:	3d 28 48 02 c0       	cmp    eax,0xc0024828
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 28 48 02 c0       	push   0xc0024828
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 28 48 02 c0       	mov    eax,0xc0024828
c0000051:	2d 28 48 02 c0       	sub    eax,0xc0024828
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 28 48 02 c0       	push   0xc0024828
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb b0 09 02 c0       	mov    ebx,0xc00209b0
c0000097:	81 eb ac 09 02 c0    	sub    ebx,0xc00209ac
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be ac 09 02 c0       	mov    esi,0xc00209ac
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 28 48 02 c0       	push   0xc0024828
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 28 48 02 c0       	push   0xc0024828
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 73 49 01 00       	call   c0014c20 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 cc 2c 01 00       	call   c0012f91 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 51 49 01 00       	call   c0014c20 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 5e 4e 01 00       	call   c001514c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 01 53 01 00       	call   c00155f8 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 80 bd 02 c0 	lgdtd  ds:0xc002bd80
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 92 e3 00 00       	jmp    c000e711 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 c0 09 02 c0 02 	test   BYTE PTR [edx-0x3ffdf640],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 c0 09 02 c0 01 	test   BYTE PTR [edx-0x3ffdf640],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 c0 09 02 c0 08 	test   BYTE PTR [edx-0x3ffdf640],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 c0 09 02 c0 08 	test   BYTE PTR [edx-0x3ffdf640],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 c0 09 02 c0 04 	test   BYTE PTR [ecx-0x3ffdf640],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 c0 09 02 c0 01 	test   BYTE PTR [edx-0x3ffdf640],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d8d:	85 c9                	test   ecx,ecx
c0000d8f:	0f 84 01 01 00 00    	je     c0000e96 <dlfree+0x110>
c0000d95:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d98:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d9b:	8b 1d 00 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c3                	cmp    ebx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 cb 03             	or     ebx,0x3
c0000db0:	89 1d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ebx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 1c 85 04 61 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd9efc]
c0000dc0:	89 19                	mov    DWORD PTR [ecx],ebx
c0000dc2:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000dc9:	e9 c8 00 00 00       	jmp    c0000e96 <dlfree+0x110>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 cb 01             	or     ebx,0x1
c0000ddd:	89 1d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ebx
c0000de3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000de6:	83 e3 fc             	and    ebx,0xfffffffc
c0000de9:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000df2:	29 ca                	sub    edx,ecx
c0000df4:	01 c8                	add    eax,ecx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dfc:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dff:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e02:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000e0e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000e11:	80 e1 01             	and    cl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 d8                	add    eax,ebx
c0000e1b:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000e1e:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000e21:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e24:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000e2a:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 d8                	add    eax,ebx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 35                	jbe    c0000e96 <dlfree+0x110>
c0000e61:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e68:	74 2c                	je     c0000e96 <dlfree+0x110>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e7a:	53                   	push   ebx
c0000e7b:	53                   	push   ebx
c0000e7c:	ff 0d 50 64 02 c0    	dec    DWORD PTR ds:0xc0026450
c0000e82:	01 c8                	add    eax,ecx
c0000e84:	29 ca                	sub    edx,ecx
c0000e86:	50                   	push   eax
c0000e87:	52                   	push   edx
c0000e88:	29 05 64 64 02 c0    	sub    DWORD PTR ds:0xc0026464,eax
c0000e8e:	e8 bb d9 00 00       	call   c000e84e <munmap>
c0000e93:	83 c4 10             	add    esp,0x10
c0000e96:	5b                   	pop    ebx
c0000e97:	5e                   	pop    esi
c0000e98:	5f                   	pop    edi
c0000e99:	c3                   	ret    

c0000e9a <sYSMALLOc>:
c0000e9a:	55                   	push   ebp
c0000e9b:	57                   	push   edi
c0000e9c:	56                   	push   esi
c0000e9d:	53                   	push   ebx
c0000e9e:	89 d3                	mov    ebx,edx
c0000ea0:	83 ec 2c             	sub    esp,0x2c
c0000ea3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000ea7:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ead:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000eb0:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000eb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000eb7:	74 1f                	je     c0000ed8 <sYSMALLOc+0x3e>
c0000eb9:	89 d0                	mov    eax,edx
c0000ebb:	e8 df fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ec0:	83 ec 0c             	sub    esp,0xc
c0000ec3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ec7:	83 e8 07             	sub    eax,0x7
c0000eca:	50                   	push   eax
c0000ecb:	e8 78 03 00 00       	call   c0001248 <dlmalloc>
c0000ed0:	83 c4 10             	add    esp,0x10
c0000ed3:	e9 68 03 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0000ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000edc:	f7 d9                	neg    ecx
c0000ede:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000ee4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0000ee8:	0f 87 be 00 00 00    	ja     c0000fac <sYSMALLOc+0x112>
c0000eee:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ef4:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000efa:	0f 8d ac 00 00 00    	jge    c0000fac <sYSMALLOc+0x112>
c0000f00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000f08:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000f0c:	21 ce                	and    esi,ecx
c0000f0e:	39 fe                	cmp    esi,edi
c0000f10:	0f 86 96 00 00 00    	jbe    c0000fac <sYSMALLOc+0x112>
c0000f16:	52                   	push   edx
c0000f17:	52                   	push   edx
c0000f18:	6a 00                	push   0x0
c0000f1a:	6a ff                	push   0xffffffff
c0000f1c:	6a 0c                	push   0xc
c0000f1e:	6a 03                	push   0x3
c0000f20:	56                   	push   esi
c0000f21:	6a 00                	push   0x0
c0000f23:	e8 c8 d8 00 00       	call   c000e7f0 <mmap>
c0000f28:	83 c4 20             	add    esp,0x20
c0000f2b:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2e:	74 7c                	je     c0000fac <sYSMALLOc+0x112>
c0000f30:	89 c1                	mov    ecx,eax
c0000f32:	83 e1 07             	and    ecx,0x7
c0000f35:	74 13                	je     c0000f4a <sYSMALLOc+0xb0>
c0000f37:	ba 08 00 00 00       	mov    edx,0x8
c0000f3c:	89 f7                	mov    edi,esi
c0000f3e:	29 ca                	sub    edx,ecx
c0000f40:	01 d0                	add    eax,edx
c0000f42:	29 d7                	sub    edi,edx
c0000f44:	89 10                	mov    DWORD PTR [eax],edx
c0000f46:	89 fa                	mov    edx,edi
c0000f48:	eb 08                	jmp    c0000f52 <sYSMALLOc+0xb8>
c0000f4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f50:	89 f2                	mov    edx,esi
c0000f52:	83 ca 02             	or     edx,0x2
c0000f55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f58:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f5e:	8d 57 01             	lea    edx,[edi+0x1]
c0000f61:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f67:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f6d:	7e 06                	jle    c0000f75 <sYSMALLOc+0xdb>
c0000f6f:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f75:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f7b:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f81:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f87:	76 06                	jbe    c0000f8f <sYSMALLOc+0xf5>
c0000f89:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f8f:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f95:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f9b:	0f 83 41 01 00 00    	jae    c00010e2 <sYSMALLOc+0x248>
c0000fa1:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000fa7:	e9 36 01 00 00       	jmp    c00010e2 <sYSMALLOc+0x248>
c0000fac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000faf:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000fbc:	83 e0 fc             	and    eax,0xfffffffc
c0000fbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000fc7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fd3:	83 c0 10             	add    eax,0x10
c0000fd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000fda:	01 c5                	add    ebp,eax
c0000fdc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fe3:	74 04                	je     c0000fe9 <sYSMALLOc+0x14f>
c0000fe5:	2b 6c 24 04          	sub    ebp,DWORD PTR [esp+0x4]
c0000fe9:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c0000fed:	23 6c 24 14          	and    ebp,DWORD PTR [esp+0x14]
c0000ff1:	89 ee                	mov    esi,ebp
c0000ff3:	7f 19                	jg     c000100e <sYSMALLOc+0x174>
c0000ff5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ffc:	74 28                	je     c0001026 <sYSMALLOc+0x18c>
c0000ffe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001002:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001006:	01 ee                	add    esi,ebp
c0001008:	23 74 24 14          	and    esi,DWORD PTR [esp+0x14]
c000100c:	eb 18                	jmp    c0001026 <sYSMALLOc+0x18c>
c000100e:	83 ec 0c             	sub    esp,0xc
c0001011:	55                   	push   ebp
c0001012:	e8 a3 d7 00 00       	call   c000e7ba <sbrk_thunk>
c0001017:	83 c4 10             	add    esp,0x10
c000101a:	89 c7                	mov    edi,eax
c000101c:	83 c8 ff             	or     eax,0xffffffff
c000101f:	83 ff ff             	cmp    edi,0xffffffff
c0001022:	75 42                	jne    c0001066 <sYSMALLOc+0x1cc>
c0001024:	eb cf                	jmp    c0000ff5 <sYSMALLOc+0x15b>
c0001026:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c000102c:	77 05                	ja     c0001033 <sYSMALLOc+0x199>
c000102e:	be 00 c0 00 00       	mov    esi,0xc000
c0001033:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0001037:	77 07                	ja     c0001040 <sYSMALLOc+0x1a6>
c0001039:	31 c0                	xor    eax,eax
c000103b:	e9 00 02 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0001040:	50                   	push   eax
c0001041:	50                   	push   eax
c0001042:	6a 00                	push   0x0
c0001044:	6a ff                	push   0xffffffff
c0001046:	6a 0c                	push   0xc
c0001048:	6a 03                	push   0x3
c000104a:	56                   	push   esi
c000104b:	6a 00                	push   0x0
c000104d:	e8 9e d7 00 00       	call   c000e7f0 <mmap>
c0001052:	83 c4 20             	add    esp,0x20
c0001055:	83 f8 ff             	cmp    eax,0xffffffff
c0001058:	89 c7                	mov    edi,eax
c000105a:	74 dd                	je     c0001039 <sYSMALLOc+0x19f>
c000105c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001063:	8d 04 30             	lea    eax,[eax+esi*1]
c0001066:	8b 8b 68 03 00 00    	mov    ecx,DWORD PTR [ebx+0x368]
c000106c:	01 f1                	add    ecx,esi
c000106e:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001072:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001078:	75 70                	jne    c00010ea <sYSMALLOc+0x250>
c000107a:	83 f8 ff             	cmp    eax,0xffffffff
c000107d:	75 6b                	jne    c00010ea <sYSMALLOc+0x250>
c000107f:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001083:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001087:	83 ce 01             	or     esi,0x1
c000108a:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c000108d:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001093:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001099:	73 06                	jae    c00010a1 <sYSMALLOc+0x207>
c000109b:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a1:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a7:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010ad:	73 06                	jae    c00010b5 <sYSMALLOc+0x21b>
c00010af:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bb:	83 e2 fc             	and    edx,0xfffffffc
c00010be:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
c00010c2:	0f 87 71 ff ff ff    	ja     c0001039 <sYSMALLOc+0x19f>
c00010c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010cc:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010cf:	29 fa                	sub    edx,edi
c00010d1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d4:	89 fb                	mov    ebx,edi
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	83 cb 01             	or     ebx,0x1
c00010dc:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e2:	83 c0 08             	add    eax,0x8
c00010e5:	e9 56 01 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c00010ea:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010f0:	f6 c2 01             	test   dl,0x1
c00010f3:	74 1e                	je     c0001113 <sYSMALLOc+0x279>
c00010f5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010fa:	0f 84 bb 00 00 00    	je     c00011bb <sYSMALLOc+0x321>
c0001100:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001104:	0f 86 b1 00 00 00    	jbe    c00011bb <sYSMALLOc+0x321>
c000110a:	83 e2 fe             	and    edx,0xfffffffe
c000110d:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001113:	83 f8 ff             	cmp    eax,0xffffffff
c0001116:	89 fd                	mov    ebp,edi
c0001118:	75 24                	jne    c000113e <sYSMALLOc+0x2a4>
c000111a:	83 ec 0c             	sub    esp,0xc
c000111d:	89 fd                	mov    ebp,edi
c000111f:	6a 00                	push   0x0
c0001121:	e8 94 d6 00 00       	call   c000e7ba <sbrk_thunk>
c0001126:	83 c4 10             	add    esp,0x10
c0001129:	89 c2                	mov    edx,eax
c000112b:	29 fa                	sub    edx,edi
c000112d:	29 f2                	sub    edx,esi
c000112f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001135:	83 f8 ff             	cmp    eax,0xffffffff
c0001138:	0f 84 4f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000113e:	31 c9                	xor    ecx,ecx
c0001140:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001143:	29 e8                	sub    eax,ebp
c0001145:	01 c8                	add    eax,ecx
c0001147:	83 c8 01             	or     eax,0x1
c000114a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000114d:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0001153:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001158:	0f 84 2f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000115e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0001162:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001166:	83 ee 0c             	sub    esi,0xc
c0001169:	83 e6 f8             	and    esi,0xfffffff8
c000116c:	89 f0                	mov    eax,esi
c000116e:	83 c8 01             	or     eax,0x1
c0001171:	83 fe 0f             	cmp    esi,0xf
c0001174:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001177:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c000117f:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c0001187:	0f 86 00 ff ff ff    	jbe    c000108d <sYSMALLOc+0x1f3>
c000118d:	83 ec 0c             	sub    esp,0xc
c0001190:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001196:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00011a4:	83 c0 08             	add    eax,0x8
c00011a7:	50                   	push   eax
c00011a8:	e8 d9 fb ff ff       	call   c0000d86 <dlfree>
c00011ad:	83 c4 10             	add    esp,0x10
c00011b0:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00011b6:	e9 d2 fe ff ff       	jmp    c000108d <sYSMALLOc+0x1f3>
c00011bb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00011c0:	74 0e                	je     c00011d0 <sYSMALLOc+0x336>
c00011c2:	89 f8                	mov    eax,edi
c00011c4:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00011c8:	01 c1                	add    ecx,eax
c00011ca:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c00011d0:	89 fa                	mov    edx,edi
c00011d2:	83 e2 07             	and    edx,0x7
c00011d5:	74 0c                	je     c00011e3 <sYSMALLOc+0x349>
c00011d7:	b8 08 00 00 00       	mov    eax,0x8
c00011dc:	29 d0                	sub    eax,edx
c00011de:	8d 2c 07             	lea    ebp,[edi+eax*1]
c00011e1:	eb 04                	jmp    c00011e7 <sYSMALLOc+0x34d>
c00011e3:	89 fd                	mov    ebp,edi
c00011e5:	31 c0                	xor    eax,eax
c00011e7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00011eb:	83 ec 0c             	sub    esp,0xc
c00011ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00011f2:	8d 14 06             	lea    edx,[esi+eax*1]
c00011f5:	01 fa                	add    edx,edi
c00011f7:	01 d1                	add    ecx,edx
c00011f9:	29 d0                	sub    eax,edx
c00011fb:	23 4c 24 20          	and    ecx,DWORD PTR [esp+0x20]
c00011ff:	01 c1                	add    ecx,eax
c0001201:	51                   	push   ecx
c0001202:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0001206:	e8 af d5 00 00       	call   c000e7ba <sbrk_thunk>
c000120b:	83 c4 10             	add    esp,0x10
c000120e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001212:	83 f8 ff             	cmp    eax,0xffffffff
c0001215:	75 12                	jne    c0001229 <sYSMALLOc+0x38f>
c0001217:	83 ec 0c             	sub    esp,0xc
c000121a:	6a 00                	push   0x0
c000121c:	e8 99 d5 00 00       	call   c000e7ba <sbrk_thunk>
c0001221:	83 c4 10             	add    esp,0x10
c0001224:	e9 0c ff ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001229:	39 f8                	cmp    eax,edi
c000122b:	0f 83 0f ff ff ff    	jae    c0001140 <sYSMALLOc+0x2a6>
c0001231:	8d 04 37             	lea    eax,[edi+esi*1]
c0001234:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000123b:	e9 f5 fe ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001240:	83 c4 2c             	add    esp,0x2c
c0001243:	5b                   	pop    ebx
c0001244:	5e                   	pop    esi
c0001245:	5f                   	pop    edi
c0001246:	5d                   	pop    ebp
c0001247:	c3                   	ret    

c0001248 <dlmalloc>:
c0001248:	55                   	push   ebp
c0001249:	57                   	push   edi
c000124a:	56                   	push   esi
c000124b:	53                   	push   ebx
c000124c:	83 ec 1c             	sub    esp,0x1c
c000124f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001253:	83 f8 df             	cmp    eax,0xffffffdf
c0001256:	0f 87 70 03 00 00    	ja     c00015cc <dlmalloc+0x384>
c000125c:	83 c0 0b             	add    eax,0xb
c000125f:	be 10 00 00 00       	mov    esi,0x10
c0001264:	83 f8 0f             	cmp    eax,0xf
c0001267:	76 05                	jbe    c000126e <dlmalloc+0x26>
c0001269:	83 e0 f8             	and    eax,0xfffffff8
c000126c:	89 c6                	mov    esi,eax
c000126e:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c0001274:	f7 c7 01 00 00 00    	test   edi,0x1
c000127a:	75 17                	jne    c0001293 <dlmalloc+0x4b>
c000127c:	85 ff                	test   edi,edi
c000127e:	0f 85 05 03 00 00    	jne    c0001589 <dlmalloc+0x341>
c0001284:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001289:	e8 11 fa ff ff       	call   c0000c9f <malloc_consolidate>
c000128e:	e9 f6 02 00 00       	jmp    c0001589 <dlmalloc+0x341>
c0001293:	39 f7                	cmp    edi,esi
c0001295:	72 1f                	jb     c00012b6 <dlmalloc+0x6e>
c0001297:	89 f2                	mov    edx,esi
c0001299:	c1 ea 03             	shr    edx,0x3
c000129c:	83 ea 02             	sub    edx,0x2
c000129f:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c00012a6:	85 c0                	test   eax,eax
c00012a8:	74 0c                	je     c00012b6 <dlmalloc+0x6e>
c00012aa:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00012ad:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c00012b4:	eb 30                	jmp    c00012e6 <dlmalloc+0x9e>
c00012b6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012bc:	89 f0                	mov    eax,esi
c00012be:	77 2e                	ja     c00012ee <dlmalloc+0xa6>
c00012c0:	c1 e8 03             	shr    eax,0x3
c00012c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012c7:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c00012ce:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012d1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012d4:	39 c3                	cmp    ebx,eax
c00012d6:	74 2e                	je     c0001306 <dlmalloc+0xbe>
c00012d8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012db:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012e0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012e3:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012e6:	83 c0 08             	add    eax,0x8
c00012e9:	e9 e0 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00012ee:	e8 28 f9 ff ff       	call   c0000c1b <largebin_index>
c00012f3:	83 e7 02             	and    edi,0x2
c00012f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012fa:	74 0a                	je     c0001306 <dlmalloc+0xbe>
c00012fc:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001301:	e8 99 f9 ff ff       	call   c0000c9f <malloc_consolidate>
c0001306:	8d 46 10             	lea    eax,[esi+0x10]
c0001309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000130d:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c0001313:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c0001319:	0f 84 13 01 00 00    	je     c0001432 <dlmalloc+0x1ea>
c000131f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001322:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001325:	83 e7 fc             	and    edi,0xfffffffc
c0001328:	81 fe ff 00 00 00    	cmp    esi,0xff
c000132e:	77 4c                	ja     c000137c <dlmalloc+0x134>
c0001330:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c0001335:	75 45                	jne    c000137c <dlmalloc+0x134>
c0001337:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c000133d:	75 3d                	jne    c000137c <dlmalloc+0x134>
c000133f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001343:	73 37                	jae    c000137c <dlmalloc+0x134>
c0001345:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001348:	89 fa                	mov    edx,edi
c000134a:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c000134f:	29 f2                	sub    edx,esi
c0001351:	83 ce 01             	or     esi,0x1
c0001354:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c0001359:	89 d1                	mov    ecx,edx
c000135b:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c0001360:	83 c9 01             	or     ecx,0x1
c0001363:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c000136a:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c0001371:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001374:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001377:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000137a:	eb 15                	jmp    c0001391 <dlmalloc+0x149>
c000137c:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c0001381:	39 fe                	cmp    esi,edi
c0001383:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c000138a:	75 0d                	jne    c0001399 <dlmalloc+0x151>
c000138c:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001391:	8d 43 08             	lea    eax,[ebx+0x8]
c0001394:	e9 35 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c0001399:	81 ff ff 00 00 00    	cmp    edi,0xff
c000139f:	89 f8                	mov    eax,edi
c00013a1:	77 19                	ja     c00013bc <dlmalloc+0x174>
c00013a3:	c1 e8 03             	shr    eax,0x3
c00013a6:	8d 14 00             	lea    edx,[eax+eax*1]
c00013a9:	83 c2 0d             	add    edx,0xd
c00013ac:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c00013b3:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c00013ba:	eb 46                	jmp    c0001402 <dlmalloc+0x1ba>
c00013bc:	e8 5a f8 ff ff       	call   c0000c1b <largebin_index>
c00013c1:	8d 14 00             	lea    edx,[eax+eax*1]
c00013c4:	83 c2 0d             	add    edx,0xd
c00013c7:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c00013ce:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c00013d5:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013d8:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013dc:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013e0:	89 d5                	mov    ebp,edx
c00013e2:	74 1e                	je     c0001402 <dlmalloc+0x1ba>
c00013e4:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013e7:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013ea:	77 12                	ja     c00013fe <dlmalloc+0x1b6>
c00013ec:	83 cf 01             	or     edi,0x1
c00013ef:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013f2:	76 05                	jbe    c00013f9 <dlmalloc+0x1b1>
c00013f4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013f7:	eb f6                	jmp    c00013ef <dlmalloc+0x1a7>
c00013f9:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013fc:	eb 04                	jmp    c0001402 <dlmalloc+0x1ba>
c00013fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001402:	89 c7                	mov    edi,eax
c0001404:	88 c1                	mov    cl,al
c0001406:	c1 ff 05             	sar    edi,0x5
c0001409:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000140d:	bf 01 00 00 00       	mov    edi,0x1
c0001412:	d3 e7                	shl    edi,cl
c0001414:	89 f8                	mov    eax,edi
c0001416:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000141a:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c0001421:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001424:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001427:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000142a:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000142d:	e9 db fe ff ff       	jmp    c000130d <dlmalloc+0xc5>
c0001432:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001438:	76 78                	jbe    c00014b2 <dlmalloc+0x26a>
c000143a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000143e:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c0001445:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001448:	8d 48 f8             	lea    ecx,[eax-0x8]
c000144b:	39 ca                	cmp    edx,ecx
c000144d:	74 63                	je     c00014b2 <dlmalloc+0x26a>
c000144f:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001452:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001455:	83 e3 fc             	and    ebx,0xfffffffc
c0001458:	39 de                	cmp    esi,ebx
c000145a:	77 52                	ja     c00014ae <dlmalloc+0x266>
c000145c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000145f:	89 df                	mov    edi,ebx
c0001461:	01 d3                	add    ebx,edx
c0001463:	29 f7                	sub    edi,esi
c0001465:	83 ff 0f             	cmp    edi,0xf
c0001468:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000146b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000146e:	8d 42 08             	lea    eax,[edx+0x8]
c0001471:	77 09                	ja     c000147c <dlmalloc+0x234>
c0001473:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001477:	e9 52 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000147c:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000147f:	83 ce 01             	or     esi,0x1
c0001482:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c0001488:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c000148e:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c0001495:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c000149c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000149f:	89 fa                	mov    edx,edi
c00014a1:	83 ca 01             	or     edx,0x1
c00014a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014a7:	89 3b                	mov    DWORD PTR [ebx],edi
c00014a9:	e9 20 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00014ae:	89 c2                	mov    edx,eax
c00014b0:	eb 99                	jmp    c000144b <dlmalloc+0x203>
c00014b2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00014b6:	b8 01 00 00 00       	mov    eax,0x1
c00014bb:	41                   	inc    ecx
c00014bc:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c00014c3:	89 cb                	mov    ebx,ecx
c00014c5:	c1 eb 05             	shr    ebx,0x5
c00014c8:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c00014cf:	d3 e0                	shl    eax,cl
c00014d1:	39 f8                	cmp    eax,edi
c00014d3:	77 04                	ja     c00014d9 <dlmalloc+0x291>
c00014d5:	85 c0                	test   eax,eax
c00014d7:	75 26                	jne    c00014ff <dlmalloc+0x2b7>
c00014d9:	43                   	inc    ebx
c00014da:	83 fb 02             	cmp    ebx,0x2
c00014dd:	0f 87 a6 00 00 00    	ja     c0001589 <dlmalloc+0x341>
c00014e3:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c00014ea:	85 ff                	test   edi,edi
c00014ec:	74 eb                	je     c00014d9 <dlmalloc+0x291>
c00014ee:	89 d8                	mov    eax,ebx
c00014f0:	c1 e0 06             	shl    eax,0x6
c00014f3:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c00014fa:	b8 01 00 00 00       	mov    eax,0x1
c00014ff:	85 f8                	test   eax,edi
c0001501:	75 07                	jne    c000150a <dlmalloc+0x2c2>
c0001503:	83 c2 08             	add    edx,0x8
c0001506:	01 c0                	add    eax,eax
c0001508:	eb f5                	jmp    c00014ff <dlmalloc+0x2b7>
c000150a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000150d:	39 ca                	cmp    edx,ecx
c000150f:	75 14                	jne    c0001525 <dlmalloc+0x2dd>
c0001511:	89 c1                	mov    ecx,eax
c0001513:	83 c2 08             	add    edx,0x8
c0001516:	f7 d1                	not    ecx
c0001518:	01 c0                	add    eax,eax
c000151a:	21 cf                	and    edi,ecx
c000151c:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c0001523:	eb ac                	jmp    c00014d1 <dlmalloc+0x289>
c0001525:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001528:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000152b:	83 e0 fc             	and    eax,0xfffffffc
c000152e:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001531:	89 c3                	mov    ebx,eax
c0001533:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001536:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001539:	29 f3                	sub    ebx,esi
c000153b:	8d 41 08             	lea    eax,[ecx+0x8]
c000153e:	83 fb 0f             	cmp    ebx,0xf
c0001541:	77 09                	ja     c000154c <dlmalloc+0x304>
c0001543:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001547:	e9 82 00 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000154c:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000154f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001555:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c000155b:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c0001561:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c0001568:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c000156f:	77 06                	ja     c0001577 <dlmalloc+0x32f>
c0001571:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c0001577:	83 ce 01             	or     esi,0x1
c000157a:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000157d:	89 d9                	mov    ecx,ebx
c000157f:	83 c9 01             	or     ecx,0x1
c0001582:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001585:	89 1a                	mov    DWORD PTR [edx],ebx
c0001587:	eb 45                	jmp    c00015ce <dlmalloc+0x386>
c0001589:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c000158e:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001591:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001594:	83 e2 fc             	and    edx,0xfffffffc
c0001597:	39 d1                	cmp    ecx,edx
c0001599:	77 1e                	ja     c00015b9 <dlmalloc+0x371>
c000159b:	89 f3                	mov    ebx,esi
c000159d:	29 f2                	sub    edx,esi
c000159f:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00015a2:	83 cb 01             	or     ebx,0x1
c00015a5:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c00015ab:	83 ca 01             	or     edx,0x1
c00015ae:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015b1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00015b4:	e9 2d fd ff ff       	jmp    c00012e6 <dlmalloc+0x9e>
c00015b9:	83 c4 1c             	add    esp,0x1c
c00015bc:	89 f0                	mov    eax,esi
c00015be:	5b                   	pop    ebx
c00015bf:	ba 00 61 02 c0       	mov    edx,0xc0026100
c00015c4:	5e                   	pop    esi
c00015c5:	5f                   	pop    edi
c00015c6:	5d                   	pop    ebp
c00015c7:	e9 ce f8 ff ff       	jmp    c0000e9a <sYSMALLOc>
c00015cc:	31 c0                	xor    eax,eax
c00015ce:	83 c4 1c             	add    esp,0x1c
c00015d1:	5b                   	pop    ebx
c00015d2:	5e                   	pop    esi
c00015d3:	5f                   	pop    edi
c00015d4:	5d                   	pop    ebp
c00015d5:	c3                   	ret    

c00015d6 <iALLOc>:
c00015d6:	55                   	push   ebp
c00015d7:	89 c5                	mov    ebp,eax
c00015d9:	57                   	push   edi
c00015da:	56                   	push   esi
c00015db:	53                   	push   ebx
c00015dc:	83 ec 2c             	sub    esp,0x2c
c00015df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015e7:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00015ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015f2:	75 12                	jne    c0001606 <iALLOc+0x30>
c00015f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015f8:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00015fd:	e8 9d f6 ff ff       	call   c0000c9f <malloc_consolidate>
c0001602:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001606:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000160b:	74 12                	je     c000161f <iALLOc+0x49>
c000160d:	85 ed                	test   ebp,ebp
c000160f:	0f 84 64 01 00 00    	je     c0001779 <iALLOc+0x1a3>
c0001615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000161d:	eb 33                	jmp    c0001652 <iALLOc+0x7c>
c000161f:	85 ed                	test   ebp,ebp
c0001621:	75 14                	jne    c0001637 <iALLOc+0x61>
c0001623:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000162b:	83 c4 2c             	add    esp,0x2c
c000162e:	5b                   	pop    ebx
c000162f:	5e                   	pop    esi
c0001630:	5f                   	pop    edi
c0001631:	5d                   	pop    ebp
c0001632:	e9 11 fc ff ff       	jmp    c0001248 <dlmalloc>
c0001637:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000163f:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001646:	83 f8 0f             	cmp    eax,0xf
c0001649:	76 07                	jbe    c0001652 <iALLOc+0x7c>
c000164b:	83 e0 f8             	and    eax,0xfffffff8
c000164e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001652:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001657:	75 09                	jne    c0001662 <iALLOc+0x8c>
c0001659:	89 d0                	mov    eax,edx
c000165b:	31 f6                	xor    esi,esi
c000165d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001660:	eb 3b                	jmp    c000169d <iALLOc+0xc7>
c0001662:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000166a:	8b 02                	mov    eax,DWORD PTR [edx]
c000166c:	83 c0 0b             	add    eax,0xb
c000166f:	83 f8 0f             	cmp    eax,0xf
c0001672:	76 07                	jbe    c000167b <iALLOc+0xa5>
c0001674:	83 e0 f8             	and    eax,0xfffffff8
c0001677:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000167b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000167f:	0f af f5             	imul   esi,ebp
c0001682:	eb 25                	jmp    c00016a9 <iALLOc+0xd3>
c0001684:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001686:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001689:	bb 10 00 00 00       	mov    ebx,0x10
c000168e:	83 f9 0f             	cmp    ecx,0xf
c0001691:	76 05                	jbe    c0001698 <iALLOc+0xc2>
c0001693:	83 e1 f8             	and    ecx,0xfffffff8
c0001696:	89 cb                	mov    ebx,ecx
c0001698:	01 de                	add    esi,ebx
c000169a:	83 c0 04             	add    eax,0x4
c000169d:	39 c7                	cmp    edi,eax
c000169f:	75 e3                	jne    c0001684 <iALLOc+0xae>
c00016a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00016a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00016ad:	83 ec 0c             	sub    esp,0xc
c00016b0:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c00016b6:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c00016c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016c4:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00016c8:	50                   	push   eax
c00016c9:	e8 7a fb ff ff       	call   c0001248 <dlmalloc>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c00016d7:	85 c0                	test   eax,eax
c00016d9:	0f 84 92 00 00 00    	je     c0001771 <iALLOc+0x19b>
c00016df:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016e2:	8d 78 f8             	lea    edi,[eax-0x8]
c00016e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016e9:	83 e3 fc             	and    ebx,0xfffffffc
c00016ec:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016f1:	74 1e                	je     c0001711 <iALLOc+0x13b>
c00016f3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016f7:	89 d9                	mov    ecx,ebx
c00016f9:	52                   	push   edx
c00016fa:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016fe:	83 e9 04             	sub    ecx,0x4
c0001701:	51                   	push   ecx
c0001702:	6a 00                	push   0x0
c0001704:	50                   	push   eax
c0001705:	e8 e6 ed ff ff       	call   c00004f0 <memset>
c000170a:	83 c4 10             	add    esp,0x10
c000170d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001711:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001716:	75 14                	jne    c000172c <iALLOc+0x156>
c0001718:	8d 04 37             	lea    eax,[edi+esi*1]
c000171b:	29 f3                	sub    ebx,esi
c000171d:	8d 48 08             	lea    ecx,[eax+0x8]
c0001720:	83 cb 01             	or     ebx,0x1
c0001723:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001726:	89 f3                	mov    ebx,esi
c0001728:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000172c:	31 c0                	xor    eax,eax
c000172e:	4d                   	dec    ebp
c000172f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001733:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001736:	39 c5                	cmp    ebp,eax
c0001738:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000173b:	74 2c                	je     c0001769 <iALLOc+0x193>
c000173d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001741:	85 c9                	test   ecx,ecx
c0001743:	75 15                	jne    c000175a <iALLOc+0x184>
c0001745:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001748:	8d 71 0b             	lea    esi,[ecx+0xb]
c000174b:	b9 10 00 00 00       	mov    ecx,0x10
c0001750:	83 fe 0f             	cmp    esi,0xf
c0001753:	76 05                	jbe    c000175a <iALLOc+0x184>
c0001755:	83 e6 f8             	and    esi,0xfffffff8
c0001758:	89 f1                	mov    ecx,esi
c000175a:	89 ce                	mov    esi,ecx
c000175c:	29 cb                	sub    ebx,ecx
c000175e:	83 ce 01             	or     esi,0x1
c0001761:	40                   	inc    eax
c0001762:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001765:	01 cf                	add    edi,ecx
c0001767:	eb c6                	jmp    c000172f <iALLOc+0x159>
c0001769:	83 cb 01             	or     ebx,0x1
c000176c:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000176f:	eb 08                	jmp    c0001779 <iALLOc+0x1a3>
c0001771:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001779:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177d:	83 c4 2c             	add    esp,0x2c
c0001780:	5b                   	pop    ebx
c0001781:	5e                   	pop    esi
c0001782:	5f                   	pop    edi
c0001783:	5d                   	pop    ebp
c0001784:	c3                   	ret    

c0001785 <dlrealloc>:
c0001785:	55                   	push   ebp
c0001786:	57                   	push   edi
c0001787:	56                   	push   esi
c0001788:	53                   	push   ebx
c0001789:	83 ec 1c             	sub    esp,0x1c
c000178c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001790:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001794:	85 db                	test   ebx,ebx
c0001796:	75 10                	jne    c00017a8 <dlrealloc+0x23>
c0001798:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000179c:	83 c4 1c             	add    esp,0x1c
c000179f:	5b                   	pop    ebx
c00017a0:	5e                   	pop    esi
c00017a1:	5f                   	pop    edi
c00017a2:	5d                   	pop    ebp
c00017a3:	e9 a0 fa ff ff       	jmp    c0001248 <dlmalloc>
c00017a8:	83 f8 df             	cmp    eax,0xffffffdf
c00017ab:	0f 87 a6 01 00 00    	ja     c0001957 <dlrealloc+0x1d2>
c00017b1:	83 c0 0b             	add    eax,0xb
c00017b4:	bd 10 00 00 00       	mov    ebp,0x10
c00017b9:	83 f8 0f             	cmp    eax,0xf
c00017bc:	76 05                	jbe    c00017c3 <dlrealloc+0x3e>
c00017be:	83 e0 f8             	and    eax,0xfffffff8
c00017c1:	89 c5                	mov    ebp,eax
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	89 ce                	mov    esi,ecx
c00017c8:	83 e6 fc             	and    esi,0xfffffffc
c00017cb:	f6 c1 02             	test   cl,0x2
c00017ce:	0f 85 4e 01 00 00    	jne    c0001922 <dlrealloc+0x19d>
c00017d4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017d7:	39 f5                	cmp    ebp,esi
c00017d9:	0f 86 04 01 00 00    	jbe    c00018e3 <dlrealloc+0x15e>
c00017df:	8d 14 37             	lea    edx,[edi+esi*1]
c00017e2:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c00017e8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00017eb:	75 33                	jne    c0001820 <dlrealloc+0x9b>
c00017ed:	83 e0 fc             	and    eax,0xfffffffc
c00017f0:	01 f0                	add    eax,esi
c00017f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017f6:	8d 45 10             	lea    eax,[ebp+0x10]
c00017f9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00017fd:	77 49                	ja     c0001848 <dlrealloc+0xc3>
c00017ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001803:	83 e1 01             	and    ecx,0x1
c0001806:	01 ef                	add    edi,ebp
c0001808:	09 e9                	or     ecx,ebp
c000180a:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c000180d:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c0001813:	29 e8                	sub    eax,ebp
c0001815:	83 c8 01             	or     eax,0x1
c0001818:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000181b:	e9 39 01 00 00       	jmp    c0001959 <dlrealloc+0x1d4>
c0001820:	89 c1                	mov    ecx,eax
c0001822:	83 e1 fe             	and    ecx,0xfffffffe
c0001825:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000182a:	75 1c                	jne    c0001848 <dlrealloc+0xc3>
c000182c:	83 e0 fc             	and    eax,0xfffffffc
c000182f:	01 f0                	add    eax,esi
c0001831:	39 c5                	cmp    ebp,eax
c0001833:	77 13                	ja     c0001848 <dlrealloc+0xc3>
c0001835:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001838:	89 c6                	mov    esi,eax
c000183a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000183d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001840:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001843:	e9 9b 00 00 00       	jmp    c00018e3 <dlrealloc+0x15e>
c0001848:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000184c:	8d 45 f9             	lea    eax,[ebp-0x7]
c000184f:	83 ec 0c             	sub    esp,0xc
c0001852:	50                   	push   eax
c0001853:	e8 f0 f9 ff ff       	call   c0001248 <dlmalloc>
c0001858:	83 c4 10             	add    esp,0x10
c000185b:	85 c0                	test   eax,eax
c000185d:	0f 84 f4 00 00 00    	je     c0001957 <dlrealloc+0x1d2>
c0001863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001867:	8d 48 f8             	lea    ecx,[eax-0x8]
c000186a:	39 ca                	cmp    edx,ecx
c000186c:	75 0a                	jne    c0001878 <dlrealloc+0xf3>
c000186e:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001871:	83 e0 fc             	and    eax,0xfffffffc
c0001874:	01 c6                	add    esi,eax
c0001876:	eb 6b                	jmp    c00018e3 <dlrealloc+0x15e>
c0001878:	8d 4e fc             	lea    ecx,[esi-0x4]
c000187b:	83 f9 27             	cmp    ecx,0x27
c000187e:	76 08                	jbe    c0001888 <dlrealloc+0x103>
c0001880:	89 de                	mov    esi,ebx
c0001882:	89 c7                	mov    edi,eax
c0001884:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001886:	eb 43                	jmp    c00018cb <dlrealloc+0x146>
c0001888:	8b 13                	mov    edx,DWORD PTR [ebx]
c000188a:	83 f9 13             	cmp    ecx,0x13
c000188d:	89 10                	mov    DWORD PTR [eax],edx
c000188f:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001892:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001895:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001898:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000189b:	76 2e                	jbe    c00018cb <dlrealloc+0x146>
c000189d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00018a0:	83 f9 1b             	cmp    ecx,0x1b
c00018a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00018a6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00018a9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00018ac:	76 1d                	jbe    c00018cb <dlrealloc+0x146>
c00018ae:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00018b1:	83 f9 23             	cmp    ecx,0x23
c00018b4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00018b7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00018ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00018bd:	76 0c                	jbe    c00018cb <dlrealloc+0x146>
c00018bf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00018c2:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00018c5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00018c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00018cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018cf:	83 ec 0c             	sub    esp,0xc
c00018d2:	53                   	push   ebx
c00018d3:	e8 ae f4 ff ff       	call   c0000d86 <dlfree>
c00018d8:	83 c4 10             	add    esp,0x10
c00018db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018df:	89 c3                	mov    ebx,eax
c00018e1:	eb 76                	jmp    c0001959 <dlrealloc+0x1d4>
c00018e3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018e6:	8d 04 37             	lea    eax,[edi+esi*1]
c00018e9:	89 f2                	mov    edx,esi
c00018eb:	29 ea                	sub    edx,ebp
c00018ed:	83 e1 01             	and    ecx,0x1
c00018f0:	83 fa 0f             	cmp    edx,0xf
c00018f3:	77 0b                	ja     c0001900 <dlrealloc+0x17b>
c00018f5:	09 f1                	or     ecx,esi
c00018f7:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018fe:	eb 59                	jmp    c0001959 <dlrealloc+0x1d4>
c0001900:	01 ef                	add    edi,ebp
c0001902:	83 ca 01             	or     edx,0x1
c0001905:	09 cd                	or     ebp,ecx
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000190d:	83 c7 08             	add    edi,0x8
c0001910:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001913:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001917:	57                   	push   edi
c0001918:	e8 69 f4 ff ff       	call   c0000d86 <dlfree>
c000191d:	83 c4 10             	add    esp,0x10
c0001920:	eb 37                	jmp    c0001959 <dlrealloc+0x1d4>
c0001922:	8d 45 04             	lea    eax,[ebp+0x4]
c0001925:	39 f0                	cmp    eax,esi
c0001927:	76 30                	jbe    c0001959 <dlrealloc+0x1d4>
c0001929:	83 ec 0c             	sub    esp,0xc
c000192c:	83 ed 07             	sub    ebp,0x7
c000192f:	55                   	push   ebp
c0001930:	e8 13 f9 ff ff       	call   c0001248 <dlmalloc>
c0001935:	83 c4 10             	add    esp,0x10
c0001938:	85 c0                	test   eax,eax
c000193a:	89 c5                	mov    ebp,eax
c000193c:	74 19                	je     c0001957 <dlrealloc+0x1d2>
c000193e:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001941:	89 c7                	mov    edi,eax
c0001943:	89 de                	mov    esi,ebx
c0001945:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001947:	83 ec 0c             	sub    esp,0xc
c000194a:	53                   	push   ebx
c000194b:	89 eb                	mov    ebx,ebp
c000194d:	e8 34 f4 ff ff       	call   c0000d86 <dlfree>
c0001952:	83 c4 10             	add    esp,0x10
c0001955:	eb 02                	jmp    c0001959 <dlrealloc+0x1d4>
c0001957:	31 db                	xor    ebx,ebx
c0001959:	83 c4 1c             	add    esp,0x1c
c000195c:	89 d8                	mov    eax,ebx
c000195e:	5b                   	pop    ebx
c000195f:	5e                   	pop    esi
c0001960:	5f                   	pop    edi
c0001961:	5d                   	pop    ebp
c0001962:	c3                   	ret    

c0001963 <dlmemalign>:
c0001963:	55                   	push   ebp
c0001964:	57                   	push   edi
c0001965:	56                   	push   esi
c0001966:	53                   	push   ebx
c0001967:	83 ec 0c             	sub    esp,0xc
c000196a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000196e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001972:	83 fa 08             	cmp    edx,0x8
c0001975:	77 10                	ja     c0001987 <dlmemalign+0x24>
c0001977:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000197b:	83 c4 0c             	add    esp,0xc
c000197e:	5b                   	pop    ebx
c000197f:	5e                   	pop    esi
c0001980:	5f                   	pop    edi
c0001981:	5d                   	pop    ebp
c0001982:	e9 c1 f8 ff ff       	jmp    c0001248 <dlmalloc>
c0001987:	83 fa 0f             	cmp    edx,0xf
c000198a:	bf 10 00 00 00       	mov    edi,0x10
c000198f:	76 13                	jbe    c00019a4 <dlmemalign+0x41>
c0001991:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001994:	85 d1                	test   ecx,edx
c0001996:	75 04                	jne    c000199c <dlmemalign+0x39>
c0001998:	89 d7                	mov    edi,edx
c000199a:	eb 08                	jmp    c00019a4 <dlmemalign+0x41>
c000199c:	39 d7                	cmp    edi,edx
c000199e:	73 04                	jae    c00019a4 <dlmemalign+0x41>
c00019a0:	01 ff                	add    edi,edi
c00019a2:	eb f8                	jmp    c000199c <dlmemalign+0x39>
c00019a4:	83 f8 df             	cmp    eax,0xffffffdf
c00019a7:	76 07                	jbe    c00019b0 <dlmemalign+0x4d>
c00019a9:	31 c0                	xor    eax,eax
c00019ab:	e9 ce 00 00 00       	jmp    c0001a7e <dlmemalign+0x11b>
c00019b0:	83 c0 0b             	add    eax,0xb
c00019b3:	bd 10 00 00 00       	mov    ebp,0x10
c00019b8:	83 f8 0f             	cmp    eax,0xf
c00019bb:	76 05                	jbe    c00019c2 <dlmemalign+0x5f>
c00019bd:	83 e0 f8             	and    eax,0xfffffff8
c00019c0:	89 c5                	mov    ebp,eax
c00019c2:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00019c6:	83 ec 0c             	sub    esp,0xc
c00019c9:	50                   	push   eax
c00019ca:	e8 79 f8 ff ff       	call   c0001248 <dlmalloc>
c00019cf:	83 c4 10             	add    esp,0x10
c00019d2:	85 c0                	test   eax,eax
c00019d4:	89 c1                	mov    ecx,eax
c00019d6:	74 d1                	je     c00019a9 <dlmemalign+0x46>
c00019d8:	8d 70 f8             	lea    esi,[eax-0x8]
c00019db:	31 d2                	xor    edx,edx
c00019dd:	f7 f7                	div    edi
c00019df:	85 d2                	test   edx,edx
c00019e1:	74 62                	je     c0001a45 <dlmemalign+0xe2>
c00019e3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019e7:	89 f8                	mov    eax,edi
c00019e9:	f7 d8                	neg    eax
c00019eb:	21 c3                	and    ebx,eax
c00019ed:	83 eb 08             	sub    ebx,0x8
c00019f0:	89 d8                	mov    eax,ebx
c00019f2:	29 f0                	sub    eax,esi
c00019f4:	83 f8 0f             	cmp    eax,0xf
c00019f7:	77 02                	ja     c00019fb <dlmemalign+0x98>
c00019f9:	01 fb                	add    ebx,edi
c00019fb:	89 d8                	mov    eax,ebx
c00019fd:	29 f0                	sub    eax,esi
c00019ff:	89 c6                	mov    esi,eax
c0001a01:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a04:	89 c2                	mov    edx,eax
c0001a06:	83 e2 fc             	and    edx,0xfffffffc
c0001a09:	29 f2                	sub    edx,esi
c0001a0b:	a8 02                	test   al,0x2
c0001a0d:	74 10                	je     c0001a1f <dlmemalign+0xbc>
c0001a0f:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001a12:	83 ca 02             	or     edx,0x2
c0001a15:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001a18:	8d 43 08             	lea    eax,[ebx+0x8]
c0001a1b:	89 33                	mov    DWORD PTR [ebx],esi
c0001a1d:	eb 5f                	jmp    c0001a7e <dlmemalign+0x11b>
c0001a1f:	89 d0                	mov    eax,edx
c0001a21:	83 ec 0c             	sub    esp,0xc
c0001a24:	83 c8 01             	or     eax,0x1
c0001a27:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001a2a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a2f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a32:	83 e0 01             	and    eax,0x1
c0001a35:	09 f0                	or     eax,esi
c0001a37:	89 de                	mov    esi,ebx
c0001a39:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a3c:	51                   	push   ecx
c0001a3d:	e8 44 f3 ff ff       	call   c0000d86 <dlfree>
c0001a42:	83 c4 10             	add    esp,0x10
c0001a45:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a48:	a8 02                	test   al,0x2
c0001a4a:	75 2f                	jne    c0001a7b <dlmemalign+0x118>
c0001a4c:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a4f:	83 e0 fc             	and    eax,0xfffffffc
c0001a52:	39 c2                	cmp    edx,eax
c0001a54:	73 25                	jae    c0001a7b <dlmemalign+0x118>
c0001a56:	29 e8                	sub    eax,ebp
c0001a58:	83 ec 0c             	sub    esp,0xc
c0001a5b:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a5e:	83 c8 01             	or     eax,0x1
c0001a61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001a64:	83 c2 08             	add    edx,0x8
c0001a67:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a6a:	83 e0 01             	and    eax,0x1
c0001a6d:	09 c5                	or     ebp,eax
c0001a6f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a72:	52                   	push   edx
c0001a73:	e8 0e f3 ff ff       	call   c0000d86 <dlfree>
c0001a78:	83 c4 10             	add    esp,0x10
c0001a7b:	8d 46 08             	lea    eax,[esi+0x8]
c0001a7e:	83 c4 0c             	add    esp,0xc
c0001a81:	5b                   	pop    ebx
c0001a82:	5e                   	pop    esi
c0001a83:	5f                   	pop    edi
c0001a84:	5d                   	pop    ebp
c0001a85:	c3                   	ret    

c0001a86 <dlcalloc>:
c0001a86:	53                   	push   ebx
c0001a87:	83 ec 14             	sub    esp,0x14
c0001a8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a8e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a93:	50                   	push   eax
c0001a94:	e8 af f7 ff ff       	call   c0001248 <dlmalloc>
c0001a99:	83 c4 10             	add    esp,0x10
c0001a9c:	85 c0                	test   eax,eax
c0001a9e:	89 c3                	mov    ebx,eax
c0001aa0:	74 6e                	je     c0001b10 <dlcalloc+0x8a>
c0001aa2:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001aa5:	a8 02                	test   al,0x2
c0001aa7:	75 67                	jne    c0001b10 <dlcalloc+0x8a>
c0001aa9:	83 e0 fc             	and    eax,0xfffffffc
c0001aac:	83 e8 04             	sub    eax,0x4
c0001aaf:	83 f8 27             	cmp    eax,0x27
c0001ab2:	76 0f                	jbe    c0001ac3 <dlcalloc+0x3d>
c0001ab4:	52                   	push   edx
c0001ab5:	50                   	push   eax
c0001ab6:	6a 00                	push   0x0
c0001ab8:	53                   	push   ebx
c0001ab9:	e8 32 ea ff ff       	call   c00004f0 <memset>
c0001abe:	83 c4 10             	add    esp,0x10
c0001ac1:	eb 4d                	jmp    c0001b10 <dlcalloc+0x8a>
c0001ac3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001ac9:	83 f8 13             	cmp    eax,0x13
c0001acc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001ad3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001ada:	76 34                	jbe    c0001b10 <dlcalloc+0x8a>
c0001adc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ae3:	83 f8 1b             	cmp    eax,0x1b
c0001ae6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001aed:	76 21                	jbe    c0001b10 <dlcalloc+0x8a>
c0001aef:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001af6:	83 f8 23             	cmp    eax,0x23
c0001af9:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001b00:	76 0e                	jbe    c0001b10 <dlcalloc+0x8a>
c0001b02:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001b09:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001b10:	83 c4 08             	add    esp,0x8
c0001b13:	89 d8                	mov    eax,ebx
c0001b15:	5b                   	pop    ebx
c0001b16:	c3                   	ret    

c0001b17 <dlcfree>:
c0001b17:	e9 6a f2 ff ff       	jmp    c0000d86 <dlfree>

c0001b1c <dlindependent_calloc>:
c0001b1c:	83 ec 28             	sub    esp,0x28
c0001b1f:	b9 03 00 00 00       	mov    ecx,0x3
c0001b24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001b2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b34:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b38:	e8 99 fa ff ff       	call   c00015d6 <iALLOc>
c0001b3d:	83 c4 2c             	add    esp,0x2c
c0001b40:	c3                   	ret    

c0001b41 <dlindependent_comalloc>:
c0001b41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b45:	31 c9                	xor    ecx,ecx
c0001b47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b53:	e9 7e fa ff ff       	jmp    c00015d6 <iALLOc>

c0001b58 <dlvalloc>:
c0001b58:	83 ec 0c             	sub    esp,0xc
c0001b5b:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001b62:	75 0a                	jne    c0001b6e <dlvalloc+0x16>
c0001b64:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b69:	e8 31 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b6e:	50                   	push   eax
c0001b6f:	50                   	push   eax
c0001b70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b74:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c0001b7a:	e8 e4 fd ff ff       	call   c0001963 <dlmemalign>
c0001b7f:	83 c4 1c             	add    esp,0x1c
c0001b82:	c3                   	ret    

c0001b83 <dlpvalloc>:
c0001b83:	83 ec 0c             	sub    esp,0xc
c0001b86:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001b8d:	75 0a                	jne    c0001b99 <dlpvalloc+0x16>
c0001b8f:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b94:	e8 06 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b99:	52                   	push   edx
c0001b9a:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c0001b9f:	52                   	push   edx
c0001ba0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001ba4:	89 c1                	mov    ecx,eax
c0001ba6:	f7 d9                	neg    ecx
c0001ba8:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001bac:	21 ca                	and    edx,ecx
c0001bae:	52                   	push   edx
c0001baf:	50                   	push   eax
c0001bb0:	e8 ae fd ff ff       	call   c0001963 <dlmemalign>
c0001bb5:	83 c4 1c             	add    esp,0x1c
c0001bb8:	c3                   	ret    

c0001bb9 <dlmalloc_trim>:
c0001bb9:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001bbe:	e8 dc f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001bc3:	31 c0                	xor    eax,eax
c0001bc5:	c3                   	ret    

c0001bc6 <dlmalloc_usable_size>:
c0001bc6:	53                   	push   ebx
c0001bc7:	31 c0                	xor    eax,eax
c0001bc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001bcd:	85 c9                	test   ecx,ecx
c0001bcf:	74 24                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bd1:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001bd4:	f6 c2 02             	test   dl,0x2
c0001bd7:	74 08                	je     c0001be1 <dlmalloc_usable_size+0x1b>
c0001bd9:	83 e2 fc             	and    edx,0xfffffffc
c0001bdc:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bdf:	eb 14                	jmp    c0001bf5 <dlmalloc_usable_size+0x2f>
c0001be1:	89 d3                	mov    ebx,edx
c0001be3:	31 c0                	xor    eax,eax
c0001be5:	83 e3 fe             	and    ebx,0xfffffffe
c0001be8:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bed:	74 06                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bef:	83 e2 fc             	and    edx,0xfffffffc
c0001bf2:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bf5:	5b                   	pop    ebx
c0001bf6:	c3                   	ret    

c0001bf7 <dlmallinfo>:
c0001bf7:	55                   	push   ebp
c0001bf8:	57                   	push   edi
c0001bf9:	56                   	push   esi
c0001bfa:	53                   	push   ebx
c0001bfb:	83 ec 08             	sub    esp,0x8
c0001bfe:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001c05:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001c09:	75 0a                	jne    c0001c15 <dlmallinfo+0x1e>
c0001c0b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001c10:	e8 8a f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001c15:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001c1a:	31 ed                	xor    ebp,ebp
c0001c1c:	31 c9                	xor    ecx,ecx
c0001c1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001c21:	83 e0 fc             	and    eax,0xfffffffc
c0001c24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c28:	31 c0                	xor    eax,eax
c0001c2a:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001c31:	85 d2                	test   edx,edx
c0001c33:	74 0e                	je     c0001c43 <dlmallinfo+0x4c>
c0001c35:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c38:	45                   	inc    ebp
c0001c39:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c3c:	83 e6 fc             	and    esi,0xfffffffc
c0001c3f:	01 f1                	add    ecx,esi
c0001c41:	eb ee                	jmp    c0001c31 <dlmallinfo+0x3a>
c0001c43:	40                   	inc    eax
c0001c44:	83 f8 0a             	cmp    eax,0xa
c0001c47:	75 e1                	jne    c0001c2a <dlmallinfo+0x33>
c0001c49:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c54:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c57:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001c5c:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c5f:	39 f0                	cmp    eax,esi
c0001c61:	74 10                	je     c0001c73 <dlmallinfo+0x7c>
c0001c63:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c66:	ff 04 24             	inc    DWORD PTR [esp]
c0001c69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c6c:	83 e7 fc             	and    edi,0xfffffffc
c0001c6f:	01 fa                	add    edx,edi
c0001c71:	eb ec                	jmp    c0001c5f <dlmallinfo+0x68>
c0001c73:	83 c0 08             	add    eax,0x8
c0001c76:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001c7b:	75 df                	jne    c0001c5c <dlmallinfo+0x65>
c0001c7d:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001c83:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c86:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001c8b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c8e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c91:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c97:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001c9d:	89 03                	mov    DWORD PTR [ebx],eax
c0001c9f:	29 d0                	sub    eax,edx
c0001ca1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ca8:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001cab:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001cae:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001cb4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001cb7:	89 d8                	mov    eax,ebx
c0001cb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001cbc:	83 c4 08             	add    esp,0x8
c0001cbf:	5b                   	pop    ebx
c0001cc0:	5e                   	pop    esi
c0001cc1:	5f                   	pop    edi
c0001cc2:	5d                   	pop    ebp
c0001cc3:	c2 04 00             	ret    0x4

c0001cc6 <dlmalloc_stats>:
c0001cc6:	83 ec 30             	sub    esp,0x30
c0001cc9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001ccd:	50                   	push   eax
c0001cce:	e8 24 ff ff ff       	call   c0001bf7 <dlmallinfo>
c0001cd3:	83 c4 30             	add    esp,0x30
c0001cd6:	c3                   	ret    

c0001cd7 <dlmallopt>:
c0001cd7:	56                   	push   esi
c0001cd8:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001cdd:	53                   	push   ebx
c0001cde:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001ce2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001ce6:	e8 b4 ef ff ff       	call   c0000c9f <malloc_consolidate>
c0001ceb:	8d 46 04             	lea    eax,[esi+0x4]
c0001cee:	83 f8 05             	cmp    eax,0x5
c0001cf1:	77 5d                	ja     c0001d50 <dlmallopt+0x79>
c0001cf3:	ff 24 85 c4 0a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf53c]
c0001cfa:	83 fb 50             	cmp    ebx,0x50
c0001cfd:	77 51                	ja     c0001d50 <dlmallopt+0x79>
c0001cff:	85 db                	test   ebx,ebx
c0001d01:	ba 08 00 00 00       	mov    edx,0x8
c0001d06:	74 12                	je     c0001d1a <dlmallopt+0x43>
c0001d08:	83 c3 0b             	add    ebx,0xb
c0001d0b:	ba 10 00 00 00       	mov    edx,0x10
c0001d10:	83 fb 0f             	cmp    ebx,0xf
c0001d13:	76 05                	jbe    c0001d1a <dlmallopt+0x43>
c0001d15:	89 da                	mov    edx,ebx
c0001d17:	83 e2 f8             	and    edx,0xfffffff8
c0001d1a:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001d1f:	83 e0 03             	and    eax,0x3
c0001d22:	09 d0                	or     eax,edx
c0001d24:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001d29:	eb 27                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d2b:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001d31:	eb 16                	jmp    c0001d49 <dlmallopt+0x72>
c0001d33:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001d39:	eb 0e                	jmp    c0001d49 <dlmallopt+0x72>
c0001d3b:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001d41:	eb 06                	jmp    c0001d49 <dlmallopt+0x72>
c0001d43:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c0001d49:	be 01 00 00 00       	mov    esi,0x1
c0001d4e:	eb 02                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d50:	31 f6                	xor    esi,esi
c0001d52:	5b                   	pop    ebx
c0001d53:	89 f0                	mov    eax,esi
c0001d55:	5e                   	pop    esi
c0001d56:	c3                   	ret    
c0001d57:	90                   	nop

c0001d58 <isblank>:
c0001d58:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d5d:	74 09                	je     c0001d68 <isblank+0x10>
c0001d5f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d64:	75 0a                	jne    c0001d70 <isblank+0x18>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	b8 01 00 00 00       	mov    eax,0x1
c0001d6d:	c3                   	ret    
c0001d6e:	66 90                	xchg   ax,ax
c0001d70:	b8 00 00 00 00       	mov    eax,0x0
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax

c0001d78 <iscntrl>:
c0001d78:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d7d:	7e 09                	jle    c0001d88 <iscntrl+0x10>
c0001d7f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d84:	75 0a                	jne    c0001d90 <iscntrl+0x18>
c0001d86:	66 90                	xchg   ax,ax
c0001d88:	b8 01 00 00 00       	mov    eax,0x1
c0001d8d:	c3                   	ret    
c0001d8e:	66 90                	xchg   ax,ax
c0001d90:	b8 00 00 00 00       	mov    eax,0x0
c0001d95:	c3                   	ret    
c0001d96:	66 90                	xchg   ax,ax

c0001d98 <isdigit>:
c0001d98:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d9d:	7e 0d                	jle    c0001dac <isdigit+0x14>
c0001d9f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001da4:	7f 06                	jg     c0001dac <isdigit+0x14>
c0001da6:	b8 01 00 00 00       	mov    eax,0x1
c0001dab:	c3                   	ret    
c0001dac:	b8 00 00 00 00       	mov    eax,0x0
c0001db1:	c3                   	ret    
c0001db2:	66 90                	xchg   ax,ax

c0001db4 <islower>:
c0001db4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001db9:	7e 0d                	jle    c0001dc8 <islower+0x14>
c0001dbb:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001dc0:	7f 06                	jg     c0001dc8 <islower+0x14>
c0001dc2:	b8 01 00 00 00       	mov    eax,0x1
c0001dc7:	c3                   	ret    
c0001dc8:	b8 00 00 00 00       	mov    eax,0x0
c0001dcd:	c3                   	ret    
c0001dce:	66 90                	xchg   ax,ax

c0001dd0 <isspace>:
c0001dd0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001dd5:	7c 19                	jl     c0001df0 <isspace+0x20>
c0001dd7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001ddc:	7e 0a                	jle    c0001de8 <isspace+0x18>
c0001dde:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001de3:	75 0b                	jne    c0001df0 <isspace+0x20>
c0001de5:	8d 76 00             	lea    esi,[esi+0x0]
c0001de8:	b8 01 00 00 00       	mov    eax,0x1
c0001ded:	c3                   	ret    
c0001dee:	66 90                	xchg   ax,ax
c0001df0:	b8 00 00 00 00       	mov    eax,0x0
c0001df5:	c3                   	ret    
c0001df6:	66 90                	xchg   ax,ax

c0001df8 <isupper>:
c0001df8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dfd:	7e 0d                	jle    c0001e0c <isupper+0x14>
c0001dff:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001e04:	7f 06                	jg     c0001e0c <isupper+0x14>
c0001e06:	b8 01 00 00 00       	mov    eax,0x1
c0001e0b:	c3                   	ret    
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalpha>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 db ff ff ff       	call   c0001df8 <isupper>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalpha+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 87 ff ff ff       	call   c0001db4 <islower>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalpha+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <isalnum>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalpha>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 10                	jne    c0001e64 <isalnum+0x20>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 3b ff ff ff       	call   c0001d98 <isdigit>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	74 08                	je     c0001e6c <isalnum+0x28>
c0001e64:	b8 01 00 00 00       	mov    eax,0x1
c0001e69:	c3                   	ret    
c0001e6a:	66 90                	xchg   ax,ax
c0001e6c:	b8 00 00 00 00       	mov    eax,0x0
c0001e71:	c3                   	ret    
c0001e72:	66 90                	xchg   ax,ax

c0001e74 <ispunct>:
c0001e74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e78:	e8 c7 ff ff ff       	call   c0001e44 <isalnum>
c0001e7d:	83 c4 04             	add    esp,0x4
c0001e80:	85 c0                	test   eax,eax
c0001e82:	75 28                	jne    c0001eac <ispunct+0x38>
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 43 ff ff ff       	call   c0001dd0 <isspace>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 18                	jne    c0001eac <ispunct+0x38>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 db fe ff ff       	call   c0001d78 <iscntrl>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	75 08                	jne    c0001eac <ispunct+0x38>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isgraph>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 87 ff ff ff       	call   c0001e44 <isalnum>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 10                	jne    c0001ed4 <isgraph+0x20>
c0001ec4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ec8:	e8 a7 ff ff ff       	call   c0001e74 <ispunct>
c0001ecd:	83 c4 04             	add    esp,0x4
c0001ed0:	85 c0                	test   eax,eax
c0001ed2:	74 08                	je     c0001edc <isgraph+0x28>
c0001ed4:	b8 01 00 00 00       	mov    eax,0x1
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax
c0001edc:	b8 00 00 00 00       	mov    eax,0x0
c0001ee1:	c3                   	ret    
c0001ee2:	66 90                	xchg   ax,ax

c0001ee4 <isprint>:
c0001ee4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee8:	e8 c7 ff ff ff       	call   c0001eb4 <isgraph>
c0001eed:	83 c4 04             	add    esp,0x4
c0001ef0:	85 c0                	test   eax,eax
c0001ef2:	75 08                	jne    c0001efc <isprint+0x18>
c0001ef4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ef9:	75 09                	jne    c0001f04 <isprint+0x20>
c0001efb:	90                   	nop
c0001efc:	b8 01 00 00 00       	mov    eax,0x1
c0001f01:	c3                   	ret    
c0001f02:	66 90                	xchg   ax,ax
c0001f04:	b8 00 00 00 00       	mov    eax,0x0
c0001f09:	c3                   	ret    
c0001f0a:	66 90                	xchg   ax,ax

c0001f0c <isxdigit>:
c0001f0c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f10:	e8 83 fe ff ff       	call   c0001d98 <isdigit>
c0001f15:	83 c4 04             	add    esp,0x4
c0001f18:	85 c0                	test   eax,eax
c0001f1a:	75 20                	jne    c0001f3c <isxdigit+0x30>
c0001f1c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f21:	7e 09                	jle    c0001f2c <isxdigit+0x20>
c0001f23:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001f28:	7e 12                	jle    c0001f3c <isxdigit+0x30>
c0001f2a:	66 90                	xchg   ax,ax
c0001f2c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f31:	7e 11                	jle    c0001f44 <isxdigit+0x38>
c0001f33:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f38:	7f 0a                	jg     c0001f44 <isxdigit+0x38>
c0001f3a:	66 90                	xchg   ax,ax
c0001f3c:	b8 01 00 00 00       	mov    eax,0x1
c0001f41:	c3                   	ret    
c0001f42:	66 90                	xchg   ax,ax
c0001f44:	b8 00 00 00 00       	mov    eax,0x0
c0001f49:	c3                   	ret    
c0001f4a:	66 90                	xchg   ax,ax

c0001f4c <LWIP_PLATFORM_HTONS>:
c0001f4c:	83 ec 04             	sub    esp,0x4
c0001f4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f53:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f57:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f5b:	c1 e8 08             	shr    eax,0x8
c0001f5e:	89 c2                	mov    edx,eax
c0001f60:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f64:	c1 e0 08             	shl    eax,0x8
c0001f67:	09 d0                	or     eax,edx
c0001f69:	83 c4 04             	add    esp,0x4
c0001f6c:	c3                   	ret    
c0001f6d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f70 <LWIP_PLATFORM_HTONL>:
c0001f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f74:	c1 e8 18             	shr    eax,0x18
c0001f77:	89 c2                	mov    edx,eax
c0001f79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f7d:	c1 e8 08             	shr    eax,0x8
c0001f80:	25 00 ff 00 00       	and    eax,0xff00
c0001f85:	09 c2                	or     edx,eax
c0001f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f8b:	c1 e0 08             	shl    eax,0x8
c0001f8e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f93:	09 c2                	or     edx,eax
c0001f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f99:	c1 e0 18             	shl    eax,0x18
c0001f9c:	09 d0                	or     eax,edx
c0001f9e:	c3                   	ret    

c0001f9f <disk_status>:
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <disk_initialize>:
c0001fa2:	31 c0                	xor    eax,eax
c0001fa4:	c3                   	ret    

c0001fa5 <disk_read>:
c0001fa5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faa:	0f b6 04 85 40 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37c0]
c0001fb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fb6:	e9 09 82 01 00       	jmp    c001a1c4 <fatWrapperReadDisk>

c0001fbb <disk_write>:
c0001fbb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fc0:	0f b6 04 85 40 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37c0]
c0001fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fcc:	e9 33 82 01 00       	jmp    c001a204 <fatWrapperWriteDisk>

c0001fd1 <disk_ioctl>:
c0001fd1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001fda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fdf:	0f b6 04 85 40 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37c0]
c0001fe7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001feb:	e9 54 82 01 00       	jmp    c001a244 <fatWrapperIoctl>

c0001ff0 <ld_word>:
c0001ff0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ff4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ff7:	c1 e2 08             	shl    edx,0x8
c0001ffa:	09 d0                	or     eax,edx
c0001ffc:	c3                   	ret    

c0001ffd <ld_dword>:
c0001ffd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002001:	89 d1                	mov    ecx,edx
c0002003:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002007:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000200a:	c1 e1 08             	shl    ecx,0x8
c000200d:	09 ca                	or     edx,ecx
c000200f:	c1 e2 08             	shl    edx,0x8
c0002012:	09 d0                	or     eax,edx
c0002014:	c3                   	ret    

c0002015 <st_word>:
c0002015:	66 89 10             	mov    WORD PTR [eax],dx
c0002018:	c3                   	ret    

c0002019 <st_dword>:
c0002019:	89 10                	mov    DWORD PTR [eax],edx
c000201b:	c3                   	ret    

c000201c <mem_cpy>:
c000201c:	85 c9                	test   ecx,ecx
c000201e:	74 10                	je     c0002030 <mem_cpy+0x14>
c0002020:	57                   	push   edi
c0002021:	01 c1                	add    ecx,eax
c0002023:	56                   	push   esi
c0002024:	89 c7                	mov    edi,eax
c0002026:	89 d6                	mov    esi,edx
c0002028:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0002029:	39 f9                	cmp    ecx,edi
c000202b:	75 fb                	jne    c0002028 <mem_cpy+0xc>
c000202d:	5e                   	pop    esi
c000202e:	5f                   	pop    edi
c000202f:	c3                   	ret    
c0002030:	c3                   	ret    

c0002031 <mem_set>:
c0002031:	01 c1                	add    ecx,eax
c0002033:	88 10                	mov    BYTE PTR [eax],dl
c0002035:	40                   	inc    eax
c0002036:	39 c8                	cmp    eax,ecx
c0002038:	75 f9                	jne    c0002033 <mem_set+0x2>
c000203a:	c3                   	ret    

c000203b <mem_cmp>:
c000203b:	57                   	push   edi
c000203c:	56                   	push   esi
c000203d:	89 c6                	mov    esi,eax
c000203f:	53                   	push   ebx
c0002040:	46                   	inc    esi
c0002041:	42                   	inc    edx
c0002042:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0002046:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c000204a:	29 fb                	sub    ebx,edi
c000204c:	89 cf                	mov    edi,ecx
c000204e:	29 f7                	sub    edi,esi
c0002050:	01 c7                	add    edi,eax
c0002052:	74 04                	je     c0002058 <mem_cmp+0x1d>
c0002054:	85 db                	test   ebx,ebx
c0002056:	74 e8                	je     c0002040 <mem_cmp+0x5>
c0002058:	89 d8                	mov    eax,ebx
c000205a:	5b                   	pop    ebx
c000205b:	5e                   	pop    esi
c000205c:	5f                   	pop    edi
c000205d:	c3                   	ret    

c000205e <chk_chr>:
c000205e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002061:	85 c9                	test   ecx,ecx
c0002063:	74 07                	je     c000206c <chk_chr+0xe>
c0002065:	39 d1                	cmp    ecx,edx
c0002067:	74 03                	je     c000206c <chk_chr+0xe>
c0002069:	40                   	inc    eax
c000206a:	eb f2                	jmp    c000205e <chk_chr>
c000206c:	89 c8                	mov    eax,ecx
c000206e:	c3                   	ret    

c000206f <dbc_1st>:
c000206f:	31 c0                	xor    eax,eax
c0002071:	c3                   	ret    

c0002072 <dbc_2nd>:
c0002072:	31 c0                	xor    eax,eax
c0002074:	c3                   	ret    

c0002075 <tchar2uni>:
c0002075:	57                   	push   edi
c0002076:	56                   	push   esi
c0002077:	53                   	push   ebx
c0002078:	8b 18                	mov    ebx,DWORD PTR [eax]
c000207a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000207c:	8d 73 01             	lea    esi,[ebx+0x1]
c000207f:	f6 c1 80             	test   cl,0x80
c0002082:	75 0a                	jne    c000208e <tchar2uni+0x19>
c0002084:	0f b6 d1             	movzx  edx,cl
c0002087:	89 f3                	mov    ebx,esi
c0002089:	e9 b2 00 00 00       	jmp    c0002140 <tchar2uni+0xcb>
c000208e:	89 ca                	mov    edx,ecx
c0002090:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002096:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000209c:	89 ca                	mov    edx,ecx
c000209e:	75 0a                	jne    c00020aa <tchar2uni+0x35>
c00020a0:	83 e2 1f             	and    edx,0x1f
c00020a3:	b9 01 00 00 00       	mov    ecx,0x1
c00020a8:	eb 37                	jmp    c00020e1 <tchar2uni+0x6c>
c00020aa:	81 e2 f0 00 00 00    	and    edx,0xf0
c00020b0:	81 fa e0 00 00 00    	cmp    edx,0xe0
c00020b6:	75 0c                	jne    c00020c4 <tchar2uni+0x4f>
c00020b8:	89 ca                	mov    edx,ecx
c00020ba:	b9 02 00 00 00       	mov    ecx,0x2
c00020bf:	83 e2 0f             	and    edx,0xf
c00020c2:	eb 1d                	jmp    c00020e1 <tchar2uni+0x6c>
c00020c4:	89 cf                	mov    edi,ecx
c00020c6:	83 ca ff             	or     edx,0xffffffff
c00020c9:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020cf:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020d5:	75 70                	jne    c0002147 <tchar2uni+0xd2>
c00020d7:	89 ca                	mov    edx,ecx
c00020d9:	b9 03 00 00 00       	mov    ecx,0x3
c00020de:	83 e2 07             	and    edx,0x7
c00020e1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020e5:	46                   	inc    esi
c00020e6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020e9:	89 cf                	mov    edi,ecx
c00020eb:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020f1:	83 c7 80             	add    edi,0xffffff80
c00020f4:	75 4e                	jne    c0002144 <tchar2uni+0xcf>
c00020f6:	c1 e2 06             	shl    edx,0x6
c00020f9:	83 e1 3f             	and    ecx,0x3f
c00020fc:	09 ca                	or     edx,ecx
c00020fe:	39 de                	cmp    esi,ebx
c0002100:	75 e3                	jne    c00020e5 <tchar2uni+0x70>
c0002102:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0002108:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000210e:	76 34                	jbe    c0002144 <tchar2uni+0xcf>
c0002110:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002113:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0002119:	77 29                	ja     c0002144 <tchar2uni+0xcf>
c000211b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002121:	76 1d                	jbe    c0002140 <tchar2uni+0xcb>
c0002123:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0002129:	81 e2 ff 03 00 00    	and    edx,0x3ff
c000212f:	c1 e1 06             	shl    ecx,0x6
c0002132:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002138:	09 ca                	or     edx,ecx
c000213a:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002140:	89 18                	mov    DWORD PTR [eax],ebx
c0002142:	eb 03                	jmp    c0002147 <tchar2uni+0xd2>
c0002144:	83 ca ff             	or     edx,0xffffffff
c0002147:	5b                   	pop    ebx
c0002148:	89 d0                	mov    eax,edx
c000214a:	5e                   	pop    esi
c000214b:	5f                   	pop    edi
c000214c:	c3                   	ret    

c000214d <put_utf>:
c000214d:	53                   	push   ebx
c000214e:	83 f8 7f             	cmp    eax,0x7f
c0002151:	89 c3                	mov    ebx,eax
c0002153:	b0 00                	mov    al,0x0
c0002155:	77 11                	ja     c0002168 <put_utf+0x1b>
c0002157:	85 c9                	test   ecx,ecx
c0002159:	0f 84 e5 00 00 00    	je     c0002244 <put_utf+0xf7>
c000215f:	88 1a                	mov    BYTE PTR [edx],bl
c0002161:	b0 01                	mov    al,0x1
c0002163:	e9 dc 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002168:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000216e:	77 23                	ja     c0002193 <put_utf+0x46>
c0002170:	83 f9 01             	cmp    ecx,0x1
c0002173:	0f 86 cb 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c0002179:	89 d8                	mov    eax,ebx
c000217b:	83 e3 3f             	and    ebx,0x3f
c000217e:	c1 e8 06             	shr    eax,0x6
c0002181:	83 cb 80             	or     ebx,0xffffff80
c0002184:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0002187:	83 c8 c0             	or     eax,0xffffffc0
c000218a:	88 02                	mov    BYTE PTR [edx],al
c000218c:	b0 02                	mov    al,0x2
c000218e:	e9 b1 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002193:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002199:	77 40                	ja     c00021db <put_utf+0x8e>
c000219b:	83 f9 02             	cmp    ecx,0x2
c000219e:	0f 86 a0 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021a4:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00021aa:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00021b0:	0f 86 8e 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021b6:	89 d8                	mov    eax,ebx
c00021b8:	c1 e8 0c             	shr    eax,0xc
c00021bb:	83 c8 e0             	or     eax,0xffffffe0
c00021be:	88 02                	mov    BYTE PTR [edx],al
c00021c0:	89 d8                	mov    eax,ebx
c00021c2:	83 e3 3f             	and    ebx,0x3f
c00021c5:	c1 e8 06             	shr    eax,0x6
c00021c8:	83 cb 80             	or     ebx,0xffffff80
c00021cb:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021ce:	83 e0 3f             	and    eax,0x3f
c00021d1:	83 c8 80             	or     eax,0xffffff80
c00021d4:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021d7:	b0 03                	mov    al,0x3
c00021d9:	eb 69                	jmp    c0002244 <put_utf+0xf7>
c00021db:	83 f9 03             	cmp    ecx,0x3
c00021de:	76 64                	jbe    c0002244 <put_utf+0xf7>
c00021e0:	89 d9                	mov    ecx,ebx
c00021e2:	0f b7 c3             	movzx  eax,bx
c00021e5:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021eb:	66 31 c9             	xor    cx,cx
c00021ee:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021f4:	c1 e9 06             	shr    ecx,0x6
c00021f7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021fd:	77 43                	ja     c0002242 <put_utf+0xf5>
c00021ff:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002205:	77 3b                	ja     c0002242 <put_utf+0xf5>
c0002207:	09 cb                	or     ebx,ecx
c0002209:	81 c3 00 00 01 00    	add    ebx,0x10000
c000220f:	89 d8                	mov    eax,ebx
c0002211:	c1 e8 12             	shr    eax,0x12
c0002214:	83 c8 f0             	or     eax,0xfffffff0
c0002217:	88 02                	mov    BYTE PTR [edx],al
c0002219:	89 d8                	mov    eax,ebx
c000221b:	c1 e8 0c             	shr    eax,0xc
c000221e:	83 e0 3f             	and    eax,0x3f
c0002221:	83 c8 80             	or     eax,0xffffff80
c0002224:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002227:	89 d8                	mov    eax,ebx
c0002229:	83 e3 3f             	and    ebx,0x3f
c000222c:	c1 e8 06             	shr    eax,0x6
c000222f:	83 cb 80             	or     ebx,0xffffff80
c0002232:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002235:	83 e0 3f             	and    eax,0x3f
c0002238:	83 c8 80             	or     eax,0xffffff80
c000223b:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000223e:	b0 04                	mov    al,0x4
c0002240:	eb 02                	jmp    c0002244 <put_utf+0xf7>
c0002242:	31 c0                	xor    eax,eax
c0002244:	5b                   	pop    ebx
c0002245:	c3                   	ret    

c0002246 <clst2sect>:
c0002246:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002249:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000224c:	83 ea 02             	sub    edx,0x2
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	76 0d                	jbe    c0002260 <clst2sect+0x1a>
c0002253:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002257:	0f af d1             	imul   edx,ecx
c000225a:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000225d:	89 d0                	mov    eax,edx
c000225f:	c3                   	ret    
c0002260:	31 c0                	xor    eax,eax
c0002262:	c3                   	ret    

c0002263 <pick_lfn>:
c0002263:	55                   	push   ebp
c0002264:	57                   	push   edi
c0002265:	89 c7                	mov    edi,eax
c0002267:	56                   	push   esi
c0002268:	53                   	push   ebx
c0002269:	89 d3                	mov    ebx,edx
c000226b:	8d 42 1a             	lea    eax,[edx+0x1a]
c000226e:	e8 7d fd ff ff       	call   c0001ff0 <ld_word>
c0002273:	66 85 c0             	test   ax,ax
c0002276:	74 04                	je     c000227c <pick_lfn+0x19>
c0002278:	31 c0                	xor    eax,eax
c000227a:	eb 62                	jmp    c00022de <pick_lfn+0x7b>
c000227c:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000227f:	bd 01 00 00 00       	mov    ebp,0x1
c0002284:	31 f6                	xor    esi,esi
c0002286:	83 e1 bf             	and    ecx,0xffffffbf
c0002289:	49                   	dec    ecx
c000228a:	6b c9 0d             	imul   ecx,ecx,0xd
c000228d:	0f b6 86 20 0c 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf3e0]
c0002294:	01 d8                	add    eax,ebx
c0002296:	e8 55 fd ff ff       	call   c0001ff0 <ld_word>
c000229b:	66 85 ed             	test   bp,bp
c000229e:	74 11                	je     c00022b1 <pick_lfn+0x4e>
c00022a0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a6:	77 d0                	ja     c0002278 <pick_lfn+0x15>
c00022a8:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00022ac:	89 c5                	mov    ebp,eax
c00022ae:	41                   	inc    ecx
c00022af:	eb 0a                	jmp    c00022bb <pick_lfn+0x58>
c00022b1:	0f b7 c0             	movzx  eax,ax
c00022b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00022b9:	75 bd                	jne    c0002278 <pick_lfn+0x15>
c00022bb:	46                   	inc    esi
c00022bc:	83 fe 0d             	cmp    esi,0xd
c00022bf:	75 cc                	jne    c000228d <pick_lfn+0x2a>
c00022c1:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00022c4:	74 13                	je     c00022d9 <pick_lfn+0x76>
c00022c6:	66 85 ed             	test   bp,bp
c00022c9:	74 0e                	je     c00022d9 <pick_lfn+0x76>
c00022cb:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022d1:	77 a5                	ja     c0002278 <pick_lfn+0x15>
c00022d3:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022d9:	b8 01 00 00 00       	mov    eax,0x1
c00022de:	5b                   	pop    ebx
c00022df:	5e                   	pop    esi
c00022e0:	5f                   	pop    edi
c00022e1:	5d                   	pop    ebp
c00022e2:	c3                   	ret    

c00022e3 <put_lfn>:
c00022e3:	55                   	push   ebp
c00022e4:	57                   	push   edi
c00022e5:	89 d7                	mov    edi,edx
c00022e7:	56                   	push   esi
c00022e8:	31 f6                	xor    esi,esi
c00022ea:	53                   	push   ebx
c00022eb:	83 ec 0c             	sub    esp,0xc
c00022ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022f2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00022f6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022fc:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002300:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002303:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002306:	31 d2                	xor    edx,edx
c0002308:	e8 08 fd ff ff       	call   c0002015 <st_word>
c000230d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002314:	0f b6 d9             	movzx  ebx,cl
c0002317:	4b                   	dec    ebx
c0002318:	6b db 0d             	imul   ebx,ebx,0xd
c000231b:	0f b7 c6             	movzx  eax,si
c000231e:	3d ff ff 00 00       	cmp    eax,0xffff
c0002323:	74 09                	je     c000232e <put_lfn+0x4b>
c0002325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002329:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000232d:	43                   	inc    ebx
c000232e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002331:	0f b7 ee             	movzx  ebp,si
c0002334:	89 ea                	mov    edx,ebp
c0002336:	0f b6 80 20 0c 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf3e0]
c000233d:	01 f8                	add    eax,edi
c000233f:	e8 d1 fc ff ff       	call   c0002015 <st_word>
c0002344:	85 ed                	test   ebp,ebp
c0002346:	75 05                	jne    c000234d <put_lfn+0x6a>
c0002348:	be ff ff 00 00       	mov    esi,0xffff
c000234d:	ff 04 24             	inc    DWORD PTR [esp]
c0002350:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002354:	75 c5                	jne    c000231b <put_lfn+0x38>
c0002356:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000235c:	74 0b                	je     c0002369 <put_lfn+0x86>
c000235e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002362:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002367:	75 07                	jne    c0002370 <put_lfn+0x8d>
c0002369:	83 c9 40             	or     ecx,0x40
c000236c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002370:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002374:	88 07                	mov    BYTE PTR [edi],al
c0002376:	83 c4 0c             	add    esp,0xc
c0002379:	5b                   	pop    ebx
c000237a:	5e                   	pop    esi
c000237b:	5f                   	pop    edi
c000237c:	5d                   	pop    ebp
c000237d:	c3                   	ret    

c000237e <gen_numname>:
c000237e:	57                   	push   edi
c000237f:	89 cf                	mov    edi,ecx
c0002381:	56                   	push   esi
c0002382:	b9 0b 00 00 00       	mov    ecx,0xb
c0002387:	53                   	push   ebx
c0002388:	89 c6                	mov    esi,eax
c000238a:	83 ec 10             	sub    esp,0x10
c000238d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002391:	e8 86 fc ff ff       	call   c000201c <mem_cpy>
c0002396:	83 fb 05             	cmp    ebx,0x5
c0002399:	76 30                	jbe    c00023cb <gen_numname+0x4d>
c000239b:	66 8b 07             	mov    ax,WORD PTR [edi]
c000239e:	66 85 c0             	test   ax,ax
c00023a1:	74 28                	je     c00023cb <gen_numname+0x4d>
c00023a3:	83 c7 02             	add    edi,0x2
c00023a6:	ba 10 00 00 00       	mov    edx,0x10
c00023ab:	89 c1                	mov    ecx,eax
c00023ad:	01 db                	add    ebx,ebx
c00023af:	c1 e0 10             	shl    eax,0x10
c00023b2:	83 e1 01             	and    ecx,0x1
c00023b5:	c1 e8 11             	shr    eax,0x11
c00023b8:	01 cb                	add    ebx,ecx
c00023ba:	0f ba e3 10          	bt     ebx,0x10
c00023be:	73 06                	jae    c00023c6 <gen_numname+0x48>
c00023c0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00023c6:	4a                   	dec    edx
c00023c7:	75 e2                	jne    c00023ab <gen_numname+0x2d>
c00023c9:	eb d0                	jmp    c000239b <gen_numname+0x1d>
c00023cb:	b8 07 00 00 00       	mov    eax,0x7
c00023d0:	89 d9                	mov    ecx,ebx
c00023d2:	83 e1 0f             	and    ecx,0xf
c00023d5:	8d 79 30             	lea    edi,[ecx+0x30]
c00023d8:	83 ff 39             	cmp    edi,0x39
c00023db:	89 fa                	mov    edx,edi
c00023dd:	76 03                	jbe    c00023e2 <gen_numname+0x64>
c00023df:	8d 51 37             	lea    edx,[ecx+0x37]
c00023e2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023e5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023e9:	89 da                	mov    edx,ebx
c00023eb:	c1 ea 04             	shr    edx,0x4
c00023ee:	83 fb 0f             	cmp    ebx,0xf
c00023f1:	76 06                	jbe    c00023f9 <gen_numname+0x7b>
c00023f3:	89 c8                	mov    eax,ecx
c00023f5:	89 d3                	mov    ebx,edx
c00023f7:	eb d7                	jmp    c00023d0 <gen_numname+0x52>
c00023f9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023fe:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002401:	31 d2                	xor    edx,edx
c0002403:	8d 04 16             	lea    eax,[esi+edx*1]
c0002406:	39 ca                	cmp    edx,ecx
c0002408:	73 19                	jae    c0002423 <gen_numname+0xa5>
c000240a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000240d:	83 f8 20             	cmp    eax,0x20
c0002410:	74 11                	je     c0002423 <gen_numname+0xa5>
c0002412:	e8 58 fc ff ff       	call   c000206f <dbc_1st>
c0002417:	85 c0                	test   eax,eax
c0002419:	74 05                	je     c0002420 <gen_numname+0xa2>
c000241b:	39 d3                	cmp    ebx,edx
c000241d:	74 04                	je     c0002423 <gen_numname+0xa5>
c000241f:	42                   	inc    edx
c0002420:	42                   	inc    edx
c0002421:	eb e0                	jmp    c0002403 <gen_numname+0x85>
c0002423:	83 f9 07             	cmp    ecx,0x7
c0002426:	b0 20                	mov    al,0x20
c0002428:	77 05                	ja     c000242f <gen_numname+0xb1>
c000242a:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000242e:	41                   	inc    ecx
c000242f:	42                   	inc    edx
c0002430:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002434:	83 fa 07             	cmp    edx,0x7
c0002437:	76 ea                	jbe    c0002423 <gen_numname+0xa5>
c0002439:	83 c4 10             	add    esp,0x10
c000243c:	5b                   	pop    ebx
c000243d:	5e                   	pop    esi
c000243e:	5f                   	pop    edi
c000243f:	c3                   	ret    

c0002440 <sum_sfn>:
c0002440:	53                   	push   ebx
c0002441:	31 c9                	xor    ecx,ecx
c0002443:	31 db                	xor    ebx,ebx
c0002445:	0f b6 d1             	movzx  edx,cl
c0002448:	d1 ea                	shr    edx,1
c000244a:	c1 e1 07             	shl    ecx,0x7
c000244d:	09 ca                	or     edx,ecx
c000244f:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002452:	43                   	inc    ebx
c0002453:	01 ca                	add    edx,ecx
c0002455:	83 fb 0b             	cmp    ebx,0xb
c0002458:	88 d1                	mov    cl,dl
c000245a:	75 e9                	jne    c0002445 <sum_sfn+0x5>
c000245c:	5b                   	pop    ebx
c000245d:	88 d0                	mov    al,dl
c000245f:	c3                   	ret    

c0002460 <get_ldnumber>:
c0002460:	55                   	push   ebp
c0002461:	57                   	push   edi
c0002462:	56                   	push   esi
c0002463:	83 ce ff             	or     esi,0xffffffff
c0002466:	53                   	push   ebx
c0002467:	8b 10                	mov    edx,DWORD PTR [eax]
c0002469:	85 d2                	test   edx,edx
c000246b:	74 38                	je     c00024a5 <get_ldnumber+0x45>
c000246d:	89 c5                	mov    ebp,eax
c000246f:	89 d1                	mov    ecx,edx
c0002471:	41                   	inc    ecx
c0002472:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002476:	80 fb 1f             	cmp    bl,0x1f
c0002479:	76 05                	jbe    c0002480 <get_ldnumber+0x20>
c000247b:	83 fb 3a             	cmp    ebx,0x3a
c000247e:	75 f1                	jne    c0002471 <get_ldnumber+0x11>
c0002480:	31 f6                	xor    esi,esi
c0002482:	83 fb 3a             	cmp    ebx,0x3a
c0002485:	75 1e                	jne    c00024a5 <get_ldnumber+0x45>
c0002487:	8a 1a                	mov    bl,BYTE PTR [edx]
c0002489:	83 ce ff             	or     esi,0xffffffff
c000248c:	8d 7b d0             	lea    edi,[ebx-0x30]
c000248f:	89 f8                	mov    eax,edi
c0002491:	3c 09                	cmp    al,0x9
c0002493:	77 10                	ja     c00024a5 <get_ldnumber+0x45>
c0002495:	83 c2 02             	add    edx,0x2
c0002498:	39 d1                	cmp    ecx,edx
c000249a:	75 09                	jne    c00024a5 <get_ldnumber+0x45>
c000249c:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000249f:	0f be f3             	movsx  esi,bl
c00024a2:	83 ee 30             	sub    esi,0x30
c00024a5:	5b                   	pop    ebx
c00024a6:	89 f0                	mov    eax,esi
c00024a8:	5e                   	pop    esi
c00024a9:	5f                   	pop    edi
c00024aa:	5d                   	pop    ebp
c00024ab:	c3                   	ret    

c00024ac <validate>:
c00024ac:	56                   	push   esi
c00024ad:	85 c0                	test   eax,eax
c00024af:	53                   	push   ebx
c00024b0:	89 d6                	mov    esi,edx
c00024b2:	51                   	push   ecx
c00024b3:	75 09                	jne    c00024be <validate+0x12>
c00024b5:	b8 09 00 00 00       	mov    eax,0x9
c00024ba:	31 c9                	xor    ecx,ecx
c00024bc:	eb 2e                	jmp    c00024ec <validate+0x40>
c00024be:	89 c3                	mov    ebx,eax
c00024c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00024c2:	85 c0                	test   eax,eax
c00024c4:	74 ef                	je     c00024b5 <validate+0x9>
c00024c6:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00024c9:	74 ea                	je     c00024b5 <validate+0x9>
c00024cb:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024ce:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024d2:	75 e1                	jne    c00024b5 <validate+0x9>
c00024d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	50                   	push   eax
c00024dc:	e8 be fa ff ff       	call   c0001f9f <disk_status>
c00024e1:	83 c4 10             	add    esp,0x10
c00024e4:	a8 01                	test   al,0x1
c00024e6:	75 cd                	jne    c00024b5 <validate+0x9>
c00024e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024ea:	31 c0                	xor    eax,eax
c00024ec:	89 0e                	mov    DWORD PTR [esi],ecx
c00024ee:	5a                   	pop    edx
c00024ef:	5b                   	pop    ebx
c00024f0:	5e                   	pop    esi
c00024f1:	c3                   	ret    

c00024f2 <sync_window>:
c00024f2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024f6:	74 58                	je     c0002550 <sync_window+0x5e>
c00024f8:	56                   	push   esi
c00024f9:	53                   	push   ebx
c00024fa:	89 c3                	mov    ebx,eax
c00024fc:	51                   	push   ecx
c00024fd:	6a 01                	push   0x1
c00024ff:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002502:	8d 70 34             	lea    esi,[eax+0x34]
c0002505:	56                   	push   esi
c0002506:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000250a:	50                   	push   eax
c000250b:	e8 ab fa ff ff       	call   c0001fbb <disk_write>
c0002510:	83 c4 10             	add    esp,0x10
c0002513:	ba 01 00 00 00       	mov    edx,0x1
c0002518:	85 c0                	test   eax,eax
c000251a:	75 2e                	jne    c000254a <sync_window+0x58>
c000251c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002520:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002523:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002526:	89 c1                	mov    ecx,eax
c0002528:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000252b:	39 d1                	cmp    ecx,edx
c000252d:	73 19                	jae    c0002548 <sync_window+0x56>
c000252f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002533:	75 13                	jne    c0002548 <sync_window+0x56>
c0002535:	6a 01                	push   0x1
c0002537:	01 d0                	add    eax,edx
c0002539:	50                   	push   eax
c000253a:	56                   	push   esi
c000253b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000253f:	50                   	push   eax
c0002540:	e8 76 fa ff ff       	call   c0001fbb <disk_write>
c0002545:	83 c4 10             	add    esp,0x10
c0002548:	31 d2                	xor    edx,edx
c000254a:	89 d0                	mov    eax,edx
c000254c:	5a                   	pop    edx
c000254d:	5b                   	pop    ebx
c000254e:	5e                   	pop    esi
c000254f:	c3                   	ret    
c0002550:	31 d2                	xor    edx,edx
c0002552:	89 d0                	mov    eax,edx
c0002554:	c3                   	ret    

c0002555 <move_window>:
c0002555:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002558:	74 3a                	je     c0002594 <move_window+0x3f>
c000255a:	56                   	push   esi
c000255b:	89 d6                	mov    esi,edx
c000255d:	53                   	push   ebx
c000255e:	89 c3                	mov    ebx,eax
c0002560:	51                   	push   ecx
c0002561:	e8 8c ff ff ff       	call   c00024f2 <sync_window>
c0002566:	85 c0                	test   eax,eax
c0002568:	75 2d                	jne    c0002597 <move_window+0x42>
c000256a:	6a 01                	push   0x1
c000256c:	56                   	push   esi
c000256d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002570:	50                   	push   eax
c0002571:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002575:	50                   	push   eax
c0002576:	e8 2a fa ff ff       	call   c0001fa5 <disk_read>
c000257b:	83 c4 10             	add    esp,0x10
c000257e:	89 c2                	mov    edx,eax
c0002580:	31 c0                	xor    eax,eax
c0002582:	85 d2                	test   edx,edx
c0002584:	ba ff ff ff ff       	mov    edx,0xffffffff
c0002589:	0f 45 f2             	cmovne esi,edx
c000258c:	0f 95 c0             	setne  al
c000258f:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0002592:	eb 03                	jmp    c0002597 <move_window+0x42>
c0002594:	31 c0                	xor    eax,eax
c0002596:	c3                   	ret    
c0002597:	5a                   	pop    edx
c0002598:	5b                   	pop    ebx
c0002599:	5e                   	pop    esi
c000259a:	c3                   	ret    

c000259b <check_fs>:
c000259b:	53                   	push   ebx
c000259c:	89 c3                	mov    ebx,eax
c000259e:	83 ec 08             	sub    esp,0x8
c00025a1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00025a5:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00025ac:	e8 a4 ff ff ff       	call   c0002555 <move_window>
c00025b1:	ba 04 00 00 00       	mov    edx,0x4
c00025b6:	85 c0                	test   eax,eax
c00025b8:	75 68                	jne    c0002622 <check_fs+0x87>
c00025ba:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00025c0:	e8 2b fa ff ff       	call   c0001ff0 <ld_word>
c00025c5:	ba 03 00 00 00       	mov    edx,0x3
c00025ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00025ce:	75 52                	jne    c0002622 <check_fs+0x87>
c00025d0:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025d3:	8d 50 18             	lea    edx,[eax+0x18]
c00025d6:	80 fa 01             	cmp    dl,0x1
c00025d9:	76 09                	jbe    c00025e4 <check_fs+0x49>
c00025db:	3c eb                	cmp    al,0xeb
c00025dd:	ba 02 00 00 00       	mov    edx,0x2
c00025e2:	75 3e                	jne    c0002622 <check_fs+0x87>
c00025e4:	ba dc 33 02 c0       	mov    edx,0xc00233dc
c00025e9:	b9 03 00 00 00       	mov    ecx,0x3
c00025ee:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025f1:	e8 45 fa ff ff       	call   c000203b <mem_cmp>
c00025f6:	31 d2                	xor    edx,edx
c00025f8:	85 c0                	test   eax,eax
c00025fa:	74 26                	je     c0002622 <check_fs+0x87>
c00025fc:	ba dc 0a 02 c0       	mov    edx,0xc0020adc
c0002601:	b9 05 00 00 00       	mov    ecx,0x5
c0002606:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000260c:	e8 2a fa ff ff       	call   c000203b <mem_cmp>
c0002611:	31 d2                	xor    edx,edx
c0002613:	85 c0                	test   eax,eax
c0002615:	74 0b                	je     c0002622 <check_fs+0x87>
c0002617:	31 d2                	xor    edx,edx
c0002619:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000261d:	0f 95 c2             	setne  dl
c0002620:	01 d2                	add    edx,edx
c0002622:	83 c4 08             	add    esp,0x8
c0002625:	89 d0                	mov    eax,edx
c0002627:	5b                   	pop    ebx
c0002628:	c3                   	ret    

c0002629 <find_volume>:
c0002629:	55                   	push   ebp
c000262a:	57                   	push   edi
c000262b:	56                   	push   esi
c000262c:	89 c6                	mov    esi,eax
c000262e:	53                   	push   ebx
c000262f:	89 d3                	mov    ebx,edx
c0002631:	83 ec 2c             	sub    esp,0x2c
c0002634:	31 d2                	xor    edx,edx
c0002636:	e8 60 ff ff ff       	call   c000259b <check_fs>
c000263b:	85 db                	test   ebx,ebx
c000263d:	0f 94 c2             	sete   dl
c0002640:	83 f8 02             	cmp    eax,0x2
c0002643:	74 07                	je     c000264c <find_volume+0x23>
c0002645:	77 63                	ja     c00026aa <find_volume+0x81>
c0002647:	f6 c2 01             	test   dl,0x1
c000264a:	75 5e                	jne    c00026aa <find_volume+0x81>
c000264c:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002652:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002656:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000265c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0002660:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002664:	89 f8                	mov    eax,edi
c0002666:	83 c7 10             	add    edi,0x10
c0002669:	e8 8f f9 ff ff       	call   c0001ffd <ld_dword>
c000266e:	83 c5 04             	add    ebp,0x4
c0002671:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002675:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002678:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000267c:	75 e2                	jne    c0002660 <find_volume+0x37>
c000267e:	83 fb 01             	cmp    ebx,0x1
c0002681:	0f b6 fa             	movzx  edi,dl
c0002684:	83 d3 ff             	adc    ebx,0xffffffff
c0002687:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c000268b:	b8 03 00 00 00       	mov    eax,0x3
c0002690:	85 d2                	test   edx,edx
c0002692:	74 07                	je     c000269b <find_volume+0x72>
c0002694:	89 f0                	mov    eax,esi
c0002696:	e8 00 ff ff ff       	call   c000259b <check_fs>
c000269b:	83 f8 01             	cmp    eax,0x1
c000269e:	76 0a                	jbe    c00026aa <find_volume+0x81>
c00026a0:	85 ff                	test   edi,edi
c00026a2:	74 06                	je     c00026aa <find_volume+0x81>
c00026a4:	43                   	inc    ebx
c00026a5:	83 fb 03             	cmp    ebx,0x3
c00026a8:	76 dd                	jbe    c0002687 <find_volume+0x5e>
c00026aa:	83 c4 2c             	add    esp,0x2c
c00026ad:	5b                   	pop    ebx
c00026ae:	5e                   	pop    esi
c00026af:	5f                   	pop    edi
c00026b0:	5d                   	pop    ebp
c00026b1:	c3                   	ret    

c00026b2 <mount_volume>:
c00026b2:	55                   	push   ebp
c00026b3:	89 d5                	mov    ebp,edx
c00026b5:	57                   	push   edi
c00026b6:	89 cf                	mov    edi,ecx
c00026b8:	56                   	push   esi
c00026b9:	53                   	push   ebx
c00026ba:	bb 0b 00 00 00       	mov    ebx,0xb
c00026bf:	83 ec 2c             	sub    esp,0x2c
c00026c2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026c8:	e8 93 fd ff ff       	call   c0002460 <get_ldnumber>
c00026cd:	85 c0                	test   eax,eax
c00026cf:	0f 88 d0 02 00 00    	js     c00029a5 <mount_volume+0x2f3>
c00026d5:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00026dc:	89 c2                	mov    edx,eax
c00026de:	bb 0c 00 00 00       	mov    ebx,0xc
c00026e3:	85 f6                	test   esi,esi
c00026e5:	0f 84 ba 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c00026eb:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026ee:	83 e7 fe             	and    edi,0xfffffffe
c00026f1:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026f4:	74 3c                	je     c0002732 <mount_volume+0x80>
c00026f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026fa:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026fe:	83 ec 0c             	sub    esp,0xc
c0002701:	50                   	push   eax
c0002702:	e8 98 f8 ff ff       	call   c0001f9f <disk_status>
c0002707:	83 c4 10             	add    esp,0x10
c000270a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000270e:	a8 01                	test   al,0x1
c0002710:	75 20                	jne    c0002732 <mount_volume+0x80>
c0002712:	31 db                	xor    ebx,ebx
c0002714:	81 e7 fe 00 00 00    	and    edi,0xfe
c000271a:	0f 84 85 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002720:	a8 04                	test   al,0x4
c0002722:	0f 84 7d 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002728:	bb 0a 00 00 00       	mov    ebx,0xa
c000272d:	e9 73 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002732:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002735:	83 ec 0c             	sub    esp,0xc
c0002738:	0f b6 c2             	movzx  eax,dl
c000273b:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000273e:	bb 03 00 00 00       	mov    ebx,0x3
c0002743:	50                   	push   eax
c0002744:	e8 59 f8 ff ff       	call   c0001fa2 <disk_initialize>
c0002749:	83 c4 10             	add    esp,0x10
c000274c:	a8 01                	test   al,0x1
c000274e:	0f 85 51 02 00 00    	jne    c00029a5 <mount_volume+0x2f3>
c0002754:	81 e7 fe 00 00 00    	and    edi,0xfe
c000275a:	74 04                	je     c0002760 <mount_volume+0xae>
c000275c:	a8 04                	test   al,0x4
c000275e:	75 c8                	jne    c0002728 <mount_volume+0x76>
c0002760:	31 d2                	xor    edx,edx
c0002762:	89 f0                	mov    eax,esi
c0002764:	e8 c0 fe ff ff       	call   c0002629 <find_volume>
c0002769:	bb 01 00 00 00       	mov    ebx,0x1
c000276e:	83 f8 04             	cmp    eax,0x4
c0002771:	0f 84 2e 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002777:	83 f8 01             	cmp    eax,0x1
c000277a:	76 0a                	jbe    c0002786 <mount_volume+0xd4>
c000277c:	bb 0d 00 00 00       	mov    ebx,0xd
c0002781:	e9 1f 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002786:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002789:	e8 62 f8 ff ff       	call   c0001ff0 <ld_word>
c000278e:	66 3d 00 02          	cmp    ax,0x200
c0002792:	75 e8                	jne    c000277c <mount_volume+0xca>
c0002794:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002797:	e8 54 f8 ff ff       	call   c0001ff0 <ld_word>
c000279c:	0f b7 c0             	movzx  eax,ax
c000279f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027a3:	85 c0                	test   eax,eax
c00027a5:	75 0c                	jne    c00027b3 <mount_volume+0x101>
c00027a7:	8d 46 58             	lea    eax,[esi+0x58]
c00027aa:	e8 4e f8 ff ff       	call   c0001ffd <ld_dword>
c00027af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027b3:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00027b6:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00027b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00027c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00027c4:	89 e8                	mov    eax,ebp
c00027c6:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00027c9:	8d 45 ff             	lea    eax,[ebp-0x1]
c00027cc:	3c 01                	cmp    al,0x1
c00027ce:	77 ac                	ja     c000277c <mount_volume+0xca>
c00027d0:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00027d4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027d8:	66 85 c0             	test   ax,ax
c00027db:	89 c3                	mov    ebx,eax
c00027dd:	74 9d                	je     c000277c <mount_volume+0xca>
c00027df:	8d 40 ff             	lea    eax,[eax-0x1]
c00027e2:	85 d8                	test   eax,ebx
c00027e4:	75 96                	jne    c000277c <mount_volume+0xca>
c00027e6:	8d 46 45             	lea    eax,[esi+0x45]
c00027e9:	e8 02 f8 ff ff       	call   c0001ff0 <ld_word>
c00027ee:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027f2:	a8 0f                	test   al,0xf
c00027f4:	89 c7                	mov    edi,eax
c00027f6:	75 84                	jne    c000277c <mount_volume+0xca>
c00027f8:	8d 46 47             	lea    eax,[esi+0x47]
c00027fb:	e8 f0 f7 ff ff       	call   c0001ff0 <ld_word>
c0002800:	0f b7 d0             	movzx  edx,ax
c0002803:	85 d2                	test   edx,edx
c0002805:	75 0a                	jne    c0002811 <mount_volume+0x15f>
c0002807:	8d 46 54             	lea    eax,[esi+0x54]
c000280a:	e8 ee f7 ff ff       	call   c0001ffd <ld_dword>
c000280f:	89 c2                	mov    edx,eax
c0002811:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002815:	8d 46 42             	lea    eax,[esi+0x42]
c0002818:	e8 d3 f7 ff ff       	call   c0001ff0 <ld_word>
c000281d:	0f b7 c8             	movzx  ecx,ax
c0002820:	85 c9                	test   ecx,ecx
c0002822:	0f 84 54 ff ff ff    	je     c000277c <mount_volume+0xca>
c0002828:	89 e8                	mov    eax,ebp
c000282a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000282e:	0f b6 e8             	movzx  ebp,al
c0002831:	0f b7 c7             	movzx  eax,di
c0002834:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002839:	c1 e8 04             	shr    eax,0x4
c000283c:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0002840:	01 e8                	add    eax,ebp
c0002842:	01 c8                	add    eax,ecx
c0002844:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002848:	39 c2                	cmp    edx,eax
c000284a:	0f 82 2c ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002850:	29 c2                	sub    edx,eax
c0002852:	89 d5                	mov    ebp,edx
c0002854:	89 d0                	mov    eax,edx
c0002856:	31 d2                	xor    edx,edx
c0002858:	f7 f3                	div    ebx
c000285a:	39 dd                	cmp    ebp,ebx
c000285c:	0f 82 1a ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002862:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002867:	0f 87 0f ff ff ff    	ja     c000277c <mount_volume+0xca>
c000286d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002872:	0f 86 1e 01 00 00    	jbe    c0002996 <mount_volume+0x2e4>
c0002878:	bb 03 00 00 00       	mov    ebx,0x3
c000287d:	8d 68 02             	lea    ebp,[eax+0x2]
c0002880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002884:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002887:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000288b:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c000288f:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002892:	01 c8                	add    eax,ecx
c0002894:	83 fb 03             	cmp    ebx,0x3
c0002897:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000289a:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000289d:	75 23                	jne    c00028c2 <mount_volume+0x210>
c000289f:	8d 46 5e             	lea    eax,[esi+0x5e]
c00028a2:	e8 49 f7 ff ff       	call   c0001ff0 <ld_word>
c00028a7:	09 c7                	or     edi,eax
c00028a9:	66 85 ff             	test   di,di
c00028ac:	0f 85 ca fe ff ff    	jne    c000277c <mount_volume+0xca>
c00028b2:	8d 46 60             	lea    eax,[esi+0x60]
c00028b5:	e8 43 f7 ff ff       	call   c0001ffd <ld_dword>
c00028ba:	c1 e5 02             	shl    ebp,0x2
c00028bd:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028c0:	eb 25                	jmp    c00028e7 <mount_volume+0x235>
c00028c2:	66 85 ff             	test   di,di
c00028c5:	0f 84 b1 fe ff ff    	je     c000277c <mount_volume+0xca>
c00028cb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00028cf:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00028d3:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00028d7:	83 e5 01             	and    ebp,0x1
c00028da:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028dd:	d1 ea                	shr    edx,1
c00028df:	01 d5                	add    ebp,edx
c00028e1:	83 fb 02             	cmp    ebx,0x2
c00028e4:	0f 44 ef             	cmove  ebp,edi
c00028e7:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028ed:	c1 ed 09             	shr    ebp,0x9
c00028f0:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00028f4:	0f 87 82 fe ff ff    	ja     c000277c <mount_volume+0xca>
c00028fa:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002901:	83 fb 03             	cmp    ebx,0x3
c0002904:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000290b:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000290f:	75 6e                	jne    c000297f <mount_volume+0x2cd>
c0002911:	8d 46 64             	lea    eax,[esi+0x64]
c0002914:	e8 d7 f6 ff ff       	call   c0001ff0 <ld_word>
c0002919:	66 48                	dec    ax
c000291b:	75 62                	jne    c000297f <mount_volume+0x2cd>
c000291d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002921:	89 f0                	mov    eax,esi
c0002923:	42                   	inc    edx
c0002924:	e8 2c fc ff ff       	call   c0002555 <move_window>
c0002929:	85 c0                	test   eax,eax
c000292b:	75 52                	jne    c000297f <mount_volume+0x2cd>
c000292d:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002931:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002937:	e8 b4 f6 ff ff       	call   c0001ff0 <ld_word>
c000293c:	66 3d 55 aa          	cmp    ax,0xaa55
c0002940:	75 3d                	jne    c000297f <mount_volume+0x2cd>
c0002942:	8d 46 34             	lea    eax,[esi+0x34]
c0002945:	e8 b3 f6 ff ff       	call   c0001ffd <ld_dword>
c000294a:	3d 52 52 61 41       	cmp    eax,0x41615252
c000294f:	75 2e                	jne    c000297f <mount_volume+0x2cd>
c0002951:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002957:	e8 a1 f6 ff ff       	call   c0001ffd <ld_dword>
c000295c:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002961:	75 1c                	jne    c000297f <mount_volume+0x2cd>
c0002963:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002969:	e8 8f f6 ff ff       	call   c0001ffd <ld_dword>
c000296e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002971:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002977:	e8 81 f6 ff ff       	call   c0001ffd <ld_dword>
c000297c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000297f:	88 1e                	mov    BYTE PTR [esi],bl
c0002981:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c0002987:	31 db                	xor    ebx,ebx
c0002989:	40                   	inc    eax
c000298a:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c0002990:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002994:	eb 0f                	jmp    c00029a5 <mount_volume+0x2f3>
c0002996:	3d f6 0f 00 00       	cmp    eax,0xff6
c000299b:	19 db                	sbb    ebx,ebx
c000299d:	83 c3 02             	add    ebx,0x2
c00029a0:	e9 d8 fe ff ff       	jmp    c000287d <mount_volume+0x1cb>
c00029a5:	83 c4 2c             	add    esp,0x2c
c00029a8:	89 d8                	mov    eax,ebx
c00029aa:	5b                   	pop    ebx
c00029ab:	5e                   	pop    esi
c00029ac:	5f                   	pop    edi
c00029ad:	5d                   	pop    ebp
c00029ae:	c3                   	ret    

c00029af <put_fat>:
c00029af:	55                   	push   ebp
c00029b0:	bd 02 00 00 00       	mov    ebp,0x2
c00029b5:	57                   	push   edi
c00029b6:	56                   	push   esi
c00029b7:	53                   	push   ebx
c00029b8:	83 ec 1c             	sub    esp,0x1c
c00029bb:	83 fa 01             	cmp    edx,0x1
c00029be:	0f 86 38 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029c4:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00029c7:	0f 86 2f 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029cd:	89 c6                	mov    esi,eax
c00029cf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00029d2:	89 cf                	mov    edi,ecx
c00029d4:	89 d3                	mov    ebx,edx
c00029d6:	83 f8 02             	cmp    eax,0x2
c00029d9:	0f 84 b1 00 00 00    	je     c0002a90 <put_fat+0xe1>
c00029df:	83 f8 03             	cmp    eax,0x3
c00029e2:	0f 84 d5 00 00 00    	je     c0002abd <put_fat+0x10e>
c00029e8:	48                   	dec    eax
c00029e9:	0f 85 0d 01 00 00    	jne    c0002afc <put_fat+0x14d>
c00029ef:	89 d1                	mov    ecx,edx
c00029f1:	89 f0                	mov    eax,esi
c00029f3:	d1 e9                	shr    ecx,1
c00029f5:	01 d1                	add    ecx,edx
c00029f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029fb:	89 ca                	mov    edx,ecx
c00029fd:	c1 ea 09             	shr    edx,0x9
c0002a00:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a03:	e8 4d fb ff ff       	call   c0002555 <move_window>
c0002a08:	85 c0                	test   eax,eax
c0002a0a:	89 c5                	mov    ebp,eax
c0002a0c:	0f 85 ea 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a16:	8d 46 34             	lea    eax,[esi+0x34]
c0002a19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002a1d:	8d 41 01             	lea    eax,[ecx+0x1]
c0002a20:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002a26:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2a:	83 e3 01             	and    ebx,0x1
c0002a2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a31:	89 f8                	mov    eax,edi
c0002a33:	74 11                	je     c0002a46 <put_fat+0x97>
c0002a35:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002a37:	89 f8                	mov    eax,edi
c0002a39:	c1 e0 04             	shl    eax,0x4
c0002a3c:	25 f0 0f 00 00       	and    eax,0xff0
c0002a41:	83 e2 0f             	and    edx,0xf
c0002a44:	09 d0                	or     eax,edx
c0002a46:	88 01                	mov    BYTE PTR [ecx],al
c0002a48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a4c:	89 f0                	mov    eax,esi
c0002a4e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a52:	c1 ea 09             	shr    edx,0x9
c0002a55:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a58:	e8 f8 fa ff ff       	call   c0002555 <move_window>
c0002a5d:	85 c0                	test   eax,eax
c0002a5f:	89 c5                	mov    ebp,eax
c0002a61:	0f 85 95 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a6b:	25 ff 01 00 00       	and    eax,0x1ff
c0002a70:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a74:	85 db                	test   ebx,ebx
c0002a76:	74 07                	je     c0002a7f <put_fat+0xd0>
c0002a78:	c1 ef 04             	shr    edi,0x4
c0002a7b:	89 f9                	mov    ecx,edi
c0002a7d:	eb 0d                	jmp    c0002a8c <put_fat+0xdd>
c0002a7f:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a81:	c1 ef 08             	shr    edi,0x8
c0002a84:	83 e7 0f             	and    edi,0xf
c0002a87:	83 e1 f0             	and    ecx,0xfffffff0
c0002a8a:	09 f9                	or     ecx,edi
c0002a8c:	88 08                	mov    BYTE PTR [eax],cl
c0002a8e:	eb 27                	jmp    c0002ab7 <put_fat+0x108>
c0002a90:	c1 ea 08             	shr    edx,0x8
c0002a93:	89 f0                	mov    eax,esi
c0002a95:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a98:	e8 b8 fa ff ff       	call   c0002555 <move_window>
c0002a9d:	85 c0                	test   eax,eax
c0002a9f:	89 c5                	mov    ebp,eax
c0002aa1:	75 59                	jne    c0002afc <put_fat+0x14d>
c0002aa3:	01 db                	add    ebx,ebx
c0002aa5:	0f b7 d7             	movzx  edx,di
c0002aa8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002aae:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002ab2:	e8 5e f5 ff ff       	call   c0002015 <st_word>
c0002ab7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002abb:	eb 3f                	jmp    c0002afc <put_fat+0x14d>
c0002abd:	c1 ea 07             	shr    edx,0x7
c0002ac0:	89 f0                	mov    eax,esi
c0002ac2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002ac5:	e8 8b fa ff ff       	call   c0002555 <move_window>
c0002aca:	85 c0                	test   eax,eax
c0002acc:	89 c5                	mov    ebp,eax
c0002ace:	75 2c                	jne    c0002afc <put_fat+0x14d>
c0002ad0:	c1 e3 02             	shl    ebx,0x2
c0002ad3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ad9:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002adf:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002ae3:	89 d8                	mov    eax,ebx
c0002ae5:	e8 13 f5 ff ff       	call   c0001ffd <ld_dword>
c0002aea:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aef:	09 f8                	or     eax,edi
c0002af1:	89 c2                	mov    edx,eax
c0002af3:	89 d8                	mov    eax,ebx
c0002af5:	e8 1f f5 ff ff       	call   c0002019 <st_dword>
c0002afa:	eb bb                	jmp    c0002ab7 <put_fat+0x108>
c0002afc:	83 c4 1c             	add    esp,0x1c
c0002aff:	89 e8                	mov    eax,ebp
c0002b01:	5b                   	pop    ebx
c0002b02:	5e                   	pop    esi
c0002b03:	5f                   	pop    edi
c0002b04:	5d                   	pop    ebp
c0002b05:	c3                   	ret    

c0002b06 <dir_clear>:
c0002b06:	55                   	push   ebp
c0002b07:	57                   	push   edi
c0002b08:	56                   	push   esi
c0002b09:	89 c6                	mov    esi,eax
c0002b0b:	53                   	push   ebx
c0002b0c:	83 ec 1c             	sub    esp,0x1c
c0002b0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002b13:	e8 da f9 ff ff       	call   c00024f2 <sync_window>
c0002b18:	85 c0                	test   eax,eax
c0002b1a:	0f 85 c1 00 00 00    	jne    c0002be1 <dir_clear+0xdb>
c0002b20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b24:	89 f0                	mov    eax,esi
c0002b26:	e8 1b f7 ff ff       	call   c0002246 <clst2sect>
c0002b2b:	31 d2                	xor    edx,edx
c0002b2d:	b9 00 02 00 00       	mov    ecx,0x200
c0002b32:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002b35:	89 c5                	mov    ebp,eax
c0002b37:	8d 46 34             	lea    eax,[esi+0x34]
c0002b3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b3e:	e8 ee f4 ff ff       	call   c0002031 <mem_set>
c0002b43:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b47:	b8 00 80 00 00       	mov    eax,0x8000
c0002b4c:	c1 e3 09             	shl    ebx,0x9
c0002b4f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b55:	0f 47 d8             	cmova  ebx,eax
c0002b58:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b5e:	76 16                	jbe    c0002b76 <dir_clear+0x70>
c0002b60:	83 ec 0c             	sub    esp,0xc
c0002b63:	53                   	push   ebx
c0002b64:	e8 cb 32 00 00       	call   c0005e34 <ff_memalloc>
c0002b69:	83 c4 10             	add    esp,0x10
c0002b6c:	85 c0                	test   eax,eax
c0002b6e:	89 c7                	mov    edi,eax
c0002b70:	75 76                	jne    c0002be8 <dir_clear+0xe2>
c0002b72:	d1 eb                	shr    ebx,1
c0002b74:	eb e2                	jmp    c0002b58 <dir_clear+0x52>
c0002b76:	31 db                	xor    ebx,ebx
c0002b78:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7c:	39 d8                	cmp    eax,ebx
c0002b7e:	76 53                	jbe    c0002bd3 <dir_clear+0xcd>
c0002b80:	6a 01                	push   0x1
c0002b82:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b85:	50                   	push   eax
c0002b86:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b8e:	50                   	push   eax
c0002b8f:	e8 27 f4 ff ff       	call   c0001fbb <disk_write>
c0002b94:	83 c4 10             	add    esp,0x10
c0002b97:	85 c0                	test   eax,eax
c0002b99:	75 38                	jne    c0002bd3 <dir_clear+0xcd>
c0002b9b:	43                   	inc    ebx
c0002b9c:	eb da                	jmp    c0002b78 <dir_clear+0x72>
c0002b9e:	52                   	push   edx
c0002b9f:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ba2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002ba6:	50                   	push   eax
c0002ba7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002bab:	57                   	push   edi
c0002bac:	50                   	push   eax
c0002bad:	e8 09 f4 ff ff       	call   c0001fbb <disk_write>
c0002bb2:	83 c4 10             	add    esp,0x10
c0002bb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bb9:	85 c0                	test   eax,eax
c0002bbb:	75 0a                	jne    c0002bc7 <dir_clear+0xc1>
c0002bbd:	01 d3                	add    ebx,edx
c0002bbf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bc3:	39 d8                	cmp    eax,ebx
c0002bc5:	77 d7                	ja     c0002b9e <dir_clear+0x98>
c0002bc7:	83 ec 0c             	sub    esp,0xc
c0002bca:	57                   	push   edi
c0002bcb:	e8 7c 32 00 00       	call   c0005e4c <ff_memfree>
c0002bd0:	83 c4 10             	add    esp,0x10
c0002bd3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bd7:	39 d8                	cmp    eax,ebx
c0002bd9:	0f 95 c0             	setne  al
c0002bdc:	0f b6 c0             	movzx  eax,al
c0002bdf:	eb 19                	jmp    c0002bfa <dir_clear+0xf4>
c0002be1:	b8 01 00 00 00       	mov    eax,0x1
c0002be6:	eb 12                	jmp    c0002bfa <dir_clear+0xf4>
c0002be8:	89 d9                	mov    ecx,ebx
c0002bea:	31 d2                	xor    edx,edx
c0002bec:	e8 40 f4 ff ff       	call   c0002031 <mem_set>
c0002bf1:	89 da                	mov    edx,ebx
c0002bf3:	31 db                	xor    ebx,ebx
c0002bf5:	c1 ea 09             	shr    edx,0x9
c0002bf8:	eb c5                	jmp    c0002bbf <dir_clear+0xb9>
c0002bfa:	83 c4 1c             	add    esp,0x1c
c0002bfd:	5b                   	pop    ebx
c0002bfe:	5e                   	pop    esi
c0002bff:	5f                   	pop    edi
c0002c00:	5d                   	pop    ebp
c0002c01:	c3                   	ret    

c0002c02 <create_name>:
c0002c02:	55                   	push   ebp
c0002c03:	89 c5                	mov    ebp,eax
c0002c05:	57                   	push   edi
c0002c06:	89 d7                	mov    edi,edx
c0002c08:	56                   	push   esi
c0002c09:	31 f6                	xor    esi,esi
c0002c0b:	53                   	push   ebx
c0002c0c:	83 ec 3c             	sub    esp,0x3c
c0002c0f:	8b 02                	mov    eax,DWORD PTR [edx]
c0002c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002c18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002c1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c1f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002c23:	e8 4d f4 ff ff       	call   c0002075 <tchar2uni>
c0002c28:	83 f8 ff             	cmp    eax,0xffffffff
c0002c2b:	89 c3                	mov    ebx,eax
c0002c2d:	75 0a                	jne    c0002c39 <create_name+0x37>
c0002c2f:	b8 06 00 00 00       	mov    eax,0x6
c0002c34:	e9 7c 02 00 00       	jmp    c0002eb5 <create_name+0x2b3>
c0002c39:	3d ff ff 00 00       	cmp    eax,0xffff
c0002c3e:	76 0c                	jbe    c0002c4c <create_name+0x4a>
c0002c40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002c44:	c1 e8 10             	shr    eax,0x10
c0002c47:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002c4b:	46                   	inc    esi
c0002c4c:	0f b7 d3             	movzx  edx,bx
c0002c4f:	89 d8                	mov    eax,ebx
c0002c51:	83 fa 1f             	cmp    edx,0x1f
c0002c54:	76 30                	jbe    c0002c86 <create_name+0x84>
c0002c56:	83 fa 2f             	cmp    edx,0x2f
c0002c59:	74 2b                	je     c0002c86 <create_name+0x84>
c0002c5b:	83 fa 5c             	cmp    edx,0x5c
c0002c5e:	74 35                	je     c0002c95 <create_name+0x93>
c0002c60:	83 fa 7f             	cmp    edx,0x7f
c0002c63:	77 0e                	ja     c0002c73 <create_name+0x71>
c0002c65:	b8 e2 0a 02 c0       	mov    eax,0xc0020ae2
c0002c6a:	e8 ef f3 ff ff       	call   c000205e <chk_chr>
c0002c6f:	85 c0                	test   eax,eax
c0002c71:	75 bc                	jne    c0002c2f <create_name+0x2d>
c0002c73:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c79:	77 b4                	ja     c0002c2f <create_name+0x2d>
c0002c7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c7f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c83:	46                   	inc    esi
c0002c84:	eb 99                	jmp    c0002c1f <create_name+0x1d>
c0002c86:	66 83 f8 1f          	cmp    ax,0x1f
c0002c8a:	b3 04                	mov    bl,0x4
c0002c8c:	76 1a                	jbe    c0002ca8 <create_name+0xa6>
c0002c8e:	eb 05                	jmp    c0002c95 <create_name+0x93>
c0002c90:	40                   	inc    eax
c0002c91:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c99:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c9c:	83 fa 2f             	cmp    edx,0x2f
c0002c9f:	74 ef                	je     c0002c90 <create_name+0x8e>
c0002ca1:	83 fa 5c             	cmp    edx,0x5c
c0002ca4:	74 ea                	je     c0002c90 <create_name+0x8e>
c0002ca6:	31 db                	xor    ebx,ebx
c0002ca8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002cac:	89 07                	mov    DWORD PTR [edi],eax
c0002cae:	85 f6                	test   esi,esi
c0002cb0:	74 16                	je     c0002cc8 <create_name+0xc6>
c0002cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cb6:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002cbb:	83 f8 20             	cmp    eax,0x20
c0002cbe:	74 05                	je     c0002cc5 <create_name+0xc3>
c0002cc0:	83 f8 2e             	cmp    eax,0x2e
c0002cc3:	75 03                	jne    c0002cc8 <create_name+0xc6>
c0002cc5:	4e                   	dec    esi
c0002cc6:	eb e6                	jmp    c0002cae <create_name+0xac>
c0002cc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ccc:	31 ff                	xor    edi,edi
c0002cce:	85 f6                	test   esi,esi
c0002cd0:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002cd6:	0f 84 53 ff ff ff    	je     c0002c2f <create_name+0x2d>
c0002cdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ce0:	8d 57 01             	lea    edx,[edi+0x1]
c0002ce3:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ce7:	83 f8 20             	cmp    eax,0x20
c0002cea:	75 04                	jne    c0002cf0 <create_name+0xee>
c0002cec:	89 d7                	mov    edi,edx
c0002cee:	eb ec                	jmp    c0002cdc <create_name+0xda>
c0002cf0:	85 ff                	test   edi,edi
c0002cf2:	75 05                	jne    c0002cf9 <create_name+0xf7>
c0002cf4:	83 f8 2e             	cmp    eax,0x2e
c0002cf7:	75 08                	jne    c0002d01 <create_name+0xff>
c0002cf9:	83 cb 03             	or     ebx,0x3
c0002cfc:	eb 03                	jmp    c0002d01 <create_name+0xff>
c0002cfe:	4e                   	dec    esi
c0002cff:	74 0c                	je     c0002d0d <create_name+0x10b>
c0002d01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d05:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002d0b:	75 f1                	jne    c0002cfe <create_name+0xfc>
c0002d0d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d12:	ba 20 00 00 00       	mov    edx,0x20
c0002d17:	8d 45 20             	lea    eax,[ebp+0x20]
c0002d1a:	e8 12 f3 ff ff       	call   c0002031 <mem_set>
c0002d1f:	31 c9                	xor    ecx,ecx
c0002d21:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002d29:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002d2e:	8d 47 01             	lea    eax,[edi+0x1]
c0002d31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d39:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002d3d:	85 c0                	test   eax,eax
c0002d3f:	89 c7                	mov    edi,eax
c0002d41:	0f 84 1d 01 00 00    	je     c0002e64 <create_name+0x262>
c0002d47:	83 f8 20             	cmp    eax,0x20
c0002d4a:	74 0b                	je     c0002d57 <create_name+0x155>
c0002d4c:	83 f8 2e             	cmp    eax,0x2e
c0002d4f:	75 0f                	jne    c0002d60 <create_name+0x15e>
c0002d51:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d55:	74 09                	je     c0002d60 <create_name+0x15e>
c0002d57:	83 cb 03             	or     ebx,0x3
c0002d5a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002d5e:	eb ce                	jmp    c0002d2e <create_name+0x12c>
c0002d60:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002d64:	73 06                	jae    c0002d6c <create_name+0x16a>
c0002d66:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d6a:	75 3a                	jne    c0002da6 <create_name+0x1a4>
c0002d6c:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002d71:	75 08                	jne    c0002d7b <create_name+0x179>
c0002d73:	83 cb 03             	or     ebx,0x3
c0002d76:	e9 e9 00 00 00       	jmp    c0002e64 <create_name+0x262>
c0002d7b:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d7f:	74 0d                	je     c0002d8e <create_name+0x18c>
c0002d81:	83 cb 03             	or     ebx,0x3
c0002d84:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d88:	0f 87 d6 00 00 00    	ja     c0002e64 <create_name+0x262>
c0002d8e:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d93:	b9 08 00 00 00       	mov    ecx,0x8
c0002d98:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002d9c:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002da4:	eb b4                	jmp    c0002d5a <create_name+0x158>
c0002da6:	0f b7 c7             	movzx  eax,di
c0002da9:	83 f8 7f             	cmp    eax,0x7f
c0002dac:	76 66                	jbe    c0002e14 <create_name+0x212>
c0002dae:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002db2:	89 d9                	mov    ecx,ebx
c0002db4:	83 c9 02             	or     ecx,0x2
c0002db7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dbb:	52                   	push   edx
c0002dbc:	52                   	push   edx
c0002dbd:	68 b5 01 00 00       	push   0x1b5
c0002dc2:	50                   	push   eax
c0002dc3:	e8 9c 30 00 00       	call   c0005e64 <ff_uni2oem>
c0002dc8:	83 c4 10             	add    esp,0x10
c0002dcb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002dcf:	a8 80                	test   al,0x80
c0002dd1:	89 c7                	mov    edi,eax
c0002dd3:	74 0c                	je     c0002de1 <create_name+0x1df>
c0002dd5:	83 e7 7f             	and    edi,0x7f
c0002dd8:	0f b6 bf a0 0b 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdf460]
c0002ddf:	eb 2a                	jmp    c0002e0b <create_name+0x209>
c0002de1:	0f b7 c0             	movzx  eax,ax
c0002de4:	3d ff 00 00 00       	cmp    eax,0xff
c0002de9:	76 20                	jbe    c0002e0b <create_name+0x209>
c0002deb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002def:	4a                   	dec    edx
c0002df0:	39 ca                	cmp    edx,ecx
c0002df2:	77 0c                	ja     c0002e00 <create_name+0x1fe>
c0002df4:	83 cb 03             	or     ebx,0x3
c0002df7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002dfb:	e9 5a ff ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e00:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002e04:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e08:	41                   	inc    ecx
c0002e09:	eb 4d                	jmp    c0002e58 <create_name+0x256>
c0002e0b:	66 85 ff             	test   di,di
c0002e0e:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e12:	74 19                	je     c0002e2d <create_name+0x22b>
c0002e14:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002e18:	0f b7 d7             	movzx  edx,di
c0002e1b:	b8 eb 0a 02 c0       	mov    eax,0xc0020aeb
c0002e20:	e8 39 f2 ff ff       	call   c000205e <chk_chr>
c0002e25:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	74 0a                	je     c0002e37 <create_name+0x235>
c0002e2d:	83 cb 03             	or     ebx,0x3
c0002e30:	bf 5f 00 00 00       	mov    edi,0x5f
c0002e35:	eb 21                	jmp    c0002e58 <create_name+0x256>
c0002e37:	8d 47 bf             	lea    eax,[edi-0x41]
c0002e3a:	66 83 f8 19          	cmp    ax,0x19
c0002e3e:	77 07                	ja     c0002e47 <create_name+0x245>
c0002e40:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e45:	eb 11                	jmp    c0002e58 <create_name+0x256>
c0002e47:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e4a:	66 83 f8 19          	cmp    ax,0x19
c0002e4e:	77 08                	ja     c0002e58 <create_name+0x256>
c0002e50:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e55:	83 ef 20             	sub    edi,0x20
c0002e58:	89 f8                	mov    eax,edi
c0002e5a:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002e5e:	41                   	inc    ecx
c0002e5f:	e9 f6 fe ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e64:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002e68:	75 04                	jne    c0002e6e <create_name+0x26c>
c0002e6a:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002e6e:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002e73:	75 05                	jne    c0002e7a <create_name+0x278>
c0002e75:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e7e:	83 e0 0c             	and    eax,0xc
c0002e81:	83 f8 0c             	cmp    eax,0xc
c0002e84:	74 0c                	je     c0002e92 <create_name+0x290>
c0002e86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e8a:	83 e0 03             	and    eax,0x3
c0002e8d:	83 f8 03             	cmp    eax,0x3
c0002e90:	75 05                	jne    c0002e97 <create_name+0x295>
c0002e92:	83 cb 02             	or     ebx,0x2
c0002e95:	eb 19                	jmp    c0002eb0 <create_name+0x2ae>
c0002e97:	f6 c3 02             	test   bl,0x2
c0002e9a:	75 14                	jne    c0002eb0 <create_name+0x2ae>
c0002e9c:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002ea1:	74 03                	je     c0002ea6 <create_name+0x2a4>
c0002ea3:	83 cb 10             	or     ebx,0x10
c0002ea6:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002eab:	74 03                	je     c0002eb0 <create_name+0x2ae>
c0002ead:	83 cb 08             	or     ebx,0x8
c0002eb0:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002eb3:	31 c0                	xor    eax,eax
c0002eb5:	83 c4 3c             	add    esp,0x3c
c0002eb8:	5b                   	pop    ebx
c0002eb9:	5e                   	pop    esi
c0002eba:	5f                   	pop    edi
c0002ebb:	5d                   	pop    ebp
c0002ebc:	c3                   	ret    

c0002ebd <cmp_lfn>:
c0002ebd:	55                   	push   ebp
c0002ebe:	57                   	push   edi
c0002ebf:	89 d7                	mov    edi,edx
c0002ec1:	56                   	push   esi
c0002ec2:	53                   	push   ebx
c0002ec3:	83 ec 1c             	sub    esp,0x1c
c0002ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002eca:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ecd:	e8 1e f1 ff ff       	call   c0001ff0 <ld_word>
c0002ed2:	66 85 c0             	test   ax,ax
c0002ed5:	74 07                	je     c0002ede <cmp_lfn+0x21>
c0002ed7:	31 c0                	xor    eax,eax
c0002ed9:	e9 a4 00 00 00       	jmp    c0002f82 <cmp_lfn+0xc5>
c0002ede:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002ee0:	bd 01 00 00 00       	mov    ebp,0x1
c0002ee5:	31 c9                	xor    ecx,ecx
c0002ee7:	83 e3 3f             	and    ebx,0x3f
c0002eea:	4b                   	dec    ebx
c0002eeb:	6b db 0d             	imul   ebx,ebx,0xd
c0002eee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef2:	0f b6 81 20 0c 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdf3e0]
c0002ef9:	01 f8                	add    eax,edi
c0002efb:	e8 f0 f0 ff ff       	call   c0001ff0 <ld_word>
c0002f00:	66 85 ed             	test   bp,bp
c0002f03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f07:	0f b7 f0             	movzx  esi,ax
c0002f0a:	74 44                	je     c0002f50 <cmp_lfn+0x93>
c0002f0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002f10:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002f16:	77 bf                	ja     c0002ed7 <cmp_lfn+0x1a>
c0002f18:	83 ec 0c             	sub    esp,0xc
c0002f1b:	0f b7 c6             	movzx  eax,si
c0002f1e:	50                   	push   eax
c0002f1f:	e8 54 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f24:	89 c5                	mov    ebp,eax
c0002f26:	8d 43 01             	lea    eax,[ebx+0x1]
c0002f29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002f2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f31:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f35:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f38:	e8 3b 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f3d:	83 c4 10             	add    esp,0x10
c0002f40:	39 c5                	cmp    ebp,eax
c0002f42:	75 93                	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f44:	89 f5                	mov    ebp,esi
c0002f46:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002f4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002f4e:	eb 0c                	jmp    c0002f5c <cmp_lfn+0x9f>
c0002f50:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002f56:	0f 85 7b ff ff ff    	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f5c:	41                   	inc    ecx
c0002f5d:	83 f9 0d             	cmp    ecx,0xd
c0002f60:	75 8c                	jne    c0002eee <cmp_lfn+0x31>
c0002f62:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f65:	74 16                	je     c0002f7d <cmp_lfn+0xc0>
c0002f67:	66 85 ed             	test   bp,bp
c0002f6a:	74 11                	je     c0002f7d <cmp_lfn+0xc0>
c0002f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f75:	0f 94 c0             	sete   al
c0002f78:	0f b6 c0             	movzx  eax,al
c0002f7b:	eb 05                	jmp    c0002f82 <cmp_lfn+0xc5>
c0002f7d:	b8 01 00 00 00       	mov    eax,0x1
c0002f82:	83 c4 1c             	add    esp,0x1c
c0002f85:	5b                   	pop    ebx
c0002f86:	5e                   	pop    esi
c0002f87:	5f                   	pop    edi
c0002f88:	5d                   	pop    ebp
c0002f89:	c3                   	ret    

c0002f8a <sync_fs>:
c0002f8a:	56                   	push   esi
c0002f8b:	53                   	push   ebx
c0002f8c:	53                   	push   ebx
c0002f8d:	89 c3                	mov    ebx,eax
c0002f8f:	e8 5e f5 ff ff       	call   c00024f2 <sync_window>
c0002f94:	85 c0                	test   eax,eax
c0002f96:	0f 85 9a 00 00 00    	jne    c0003036 <sync_fs+0xac>
c0002f9c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f9f:	75 7b                	jne    c000301c <sync_fs+0x92>
c0002fa1:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002fa5:	75 75                	jne    c000301c <sync_fs+0x92>
c0002fa7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002faa:	b9 00 02 00 00       	mov    ecx,0x200
c0002faf:	31 d2                	xor    edx,edx
c0002fb1:	89 f0                	mov    eax,esi
c0002fb3:	e8 79 f0 ff ff       	call   c0002031 <mem_set>
c0002fb8:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002fbe:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fc3:	e8 4d f0 ff ff       	call   c0002015 <st_word>
c0002fc8:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fcd:	89 f0                	mov    eax,esi
c0002fcf:	e8 45 f0 ff ff       	call   c0002019 <st_dword>
c0002fd4:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fda:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fdf:	e8 35 f0 ff ff       	call   c0002019 <st_dword>
c0002fe4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fe7:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fed:	e8 27 f0 ff ff       	call   c0002019 <st_dword>
c0002ff2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff5:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ffb:	e8 19 f0 ff ff       	call   c0002019 <st_dword>
c0003000:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0003003:	6a 01                	push   0x1
c0003005:	40                   	inc    eax
c0003006:	50                   	push   eax
c0003007:	56                   	push   esi
c0003008:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000300b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000300f:	50                   	push   eax
c0003010:	e8 a6 ef ff ff       	call   c0001fbb <disk_write>
c0003015:	83 c4 10             	add    esp,0x10
c0003018:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000301c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003020:	51                   	push   ecx
c0003021:	6a 00                	push   0x0
c0003023:	6a 00                	push   0x0
c0003025:	50                   	push   eax
c0003026:	e8 a6 ef ff ff       	call   c0001fd1 <disk_ioctl>
c000302b:	83 c4 10             	add    esp,0x10
c000302e:	85 c0                	test   eax,eax
c0003030:	0f 95 c0             	setne  al
c0003033:	0f b6 c0             	movzx  eax,al
c0003036:	5a                   	pop    edx
c0003037:	5b                   	pop    ebx
c0003038:	5e                   	pop    esi
c0003039:	c3                   	ret    

c000303a <create_partition>:
c000303a:	55                   	push   ebp
c000303b:	0f b6 c0             	movzx  eax,al
c000303e:	57                   	push   edi
c000303f:	56                   	push   esi
c0003040:	53                   	push   ebx
c0003041:	83 ec 40             	sub    esp,0x40
c0003044:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003048:	8d 44 24 30          	lea    eax,[esp+0x30]
c000304c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003050:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003054:	50                   	push   eax
c0003055:	6a 01                	push   0x1
c0003057:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000305b:	e8 71 ef ff ff       	call   c0001fd1 <disk_ioctl>
c0003060:	83 c4 10             	add    esp,0x10
c0003063:	85 c0                	test   eax,eax
c0003065:	0f 85 68 01 00 00    	jne    c00031d3 <create_partition+0x199>
c000306b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000306f:	b9 05 00 00 00       	mov    ecx,0x5
c0003074:	be 08 00 00 00       	mov    esi,0x8
c0003079:	89 f0                	mov    eax,esi
c000307b:	31 d2                	xor    edx,edx
c000307d:	0f b6 d8             	movzx  ebx,al
c0003080:	89 e8                	mov    eax,ebp
c0003082:	f7 f3                	div    ebx
c0003084:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003089:	76 0a                	jbe    c0003095 <create_partition+0x5b>
c000308b:	d1 e6                	shl    esi,1
c000308d:	49                   	dec    ecx
c000308e:	75 e9                	jne    c0003079 <create_partition+0x3f>
c0003090:	be ff ff ff ff       	mov    esi,0xffffffff
c0003095:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003099:	b9 00 02 00 00       	mov    ecx,0x200
c000309e:	31 d2                	xor    edx,edx
c00030a0:	e8 8c ef ff ff       	call   c0002031 <mem_set>
c00030a5:	b9 64 00 00 00       	mov    ecx,0x64
c00030aa:	89 e8                	mov    eax,ebp
c00030ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00030b4:	31 d2                	xor    edx,edx
c00030b6:	f7 f1                	div    ecx
c00030b8:	b9 3f 00 00 00       	mov    ecx,0x3f
c00030bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00030c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030c5:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030cb:	89 f0                	mov    eax,esi
c00030cd:	0f b6 c0             	movzx  eax,al
c00030d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030d4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00030d9:	0f 96 c0             	setbe  al
c00030dc:	31 d2                	xor    edx,edx
c00030de:	85 c9                	test   ecx,ecx
c00030e0:	0f 95 c2             	setne  dl
c00030e3:	85 c2                	test   edx,eax
c00030e5:	0f 84 b7 00 00 00    	je     c00031a2 <create_partition+0x168>
c00030eb:	39 e9                	cmp    ecx,ebp
c00030ed:	0f 83 af 00 00 00    	jae    c00031a2 <create_partition+0x168>
c00030f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030fb:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030fe:	83 fe 64             	cmp    esi,0x64
c0003101:	77 0b                	ja     c000310e <create_partition+0xd4>
c0003103:	74 07                	je     c000310c <create_partition+0xd2>
c0003105:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c000310a:	eb 02                	jmp    c000310e <create_partition+0xd4>
c000310c:	89 ee                	mov    esi,ebp
c000310e:	89 ca                	mov    edx,ecx
c0003110:	31 c0                	xor    eax,eax
c0003112:	01 f2                	add    edx,esi
c0003114:	0f 92 c0             	setb   al
c0003117:	39 ea                	cmp    edx,ebp
c0003119:	77 04                	ja     c000311f <create_partition+0xe5>
c000311b:	85 c0                	test   eax,eax
c000311d:	74 06                	je     c0003125 <create_partition+0xeb>
c000311f:	89 ee                	mov    esi,ebp
c0003121:	29 ce                	sub    esi,ecx
c0003123:	eb 04                	jmp    c0003129 <create_partition+0xef>
c0003125:	85 f6                	test   esi,esi
c0003127:	74 79                	je     c00031a2 <create_partition+0x168>
c0003129:	89 ca                	mov    edx,ecx
c000312b:	89 d8                	mov    eax,ebx
c000312d:	e8 e7 ee ff ff       	call   c0002019 <st_dword>
c0003132:	8d 43 04             	lea    eax,[ebx+0x4]
c0003135:	89 f2                	mov    edx,esi
c0003137:	e8 dd ee ff ff       	call   c0002019 <st_dword>
c000313c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003140:	bf 3f 00 00 00       	mov    edi,0x3f
c0003145:	31 d2                	xor    edx,edx
c0003147:	83 c3 10             	add    ebx,0x10
c000314a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000314e:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003151:	89 c8                	mov    eax,ecx
c0003153:	01 f1                	add    ecx,esi
c0003155:	f7 f7                	div    edi
c0003157:	89 d7                	mov    edi,edx
c0003159:	31 d2                	xor    edx,edx
c000315b:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000315f:	47                   	inc    edi
c0003160:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003163:	89 c2                	mov    edx,eax
c0003165:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003168:	c1 ea 02             	shr    edx,0x2
c000316b:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316e:	83 e2 c0             	and    edx,0xffffffc0
c0003171:	09 fa                	or     edx,edi
c0003173:	bf 3f 00 00 00       	mov    edi,0x3f
c0003178:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c000317b:	31 d2                	xor    edx,edx
c000317d:	f7 f7                	div    edi
c000317f:	89 d6                	mov    esi,edx
c0003181:	31 d2                	xor    edx,edx
c0003183:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003187:	46                   	inc    esi
c0003188:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c000318b:	89 c7                	mov    edi,eax
c000318d:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003190:	c1 ef 02             	shr    edi,0x2
c0003193:	83 e7 c0             	and    edi,0xffffffc0
c0003196:	09 fe                	or     esi,edi
c0003198:	89 f2                	mov    edx,esi
c000319a:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c000319d:	e9 32 ff ff ff       	jmp    c00030d4 <create_partition+0x9a>
c00031a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00031ab:	05 fe 01 00 00       	add    eax,0x1fe
c00031b0:	e8 60 ee ff ff       	call   c0002015 <st_word>
c00031b5:	6a 01                	push   0x1
c00031b7:	6a 00                	push   0x0
c00031b9:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00031bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00031c1:	e8 f5 ed ff ff       	call   c0001fbb <disk_write>
c00031c6:	83 c4 10             	add    esp,0x10
c00031c9:	85 c0                	test   eax,eax
c00031cb:	0f 95 c0             	setne  al
c00031ce:	0f b6 c0             	movzx  eax,al
c00031d1:	eb 05                	jmp    c00031d8 <create_partition+0x19e>
c00031d3:	b8 01 00 00 00       	mov    eax,0x1
c00031d8:	83 c4 3c             	add    esp,0x3c
c00031db:	5b                   	pop    ebx
c00031dc:	5e                   	pop    esi
c00031dd:	5f                   	pop    edi
c00031de:	5d                   	pop    ebp
c00031df:	c3                   	ret    

c00031e0 <get_fileinfo>:
c00031e0:	55                   	push   ebp
c00031e1:	57                   	push   edi
c00031e2:	56                   	push   esi
c00031e3:	53                   	push   ebx
c00031e4:	83 ec 1c             	sub    esp,0x1c
c00031e7:	8b 30                	mov    esi,DWORD PTR [eax]
c00031e9:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031ed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031f1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031f5:	0f 84 de 01 00 00    	je     c00033d9 <get_fileinfo+0x1f9>
c00031fb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031ff:	89 d3                	mov    ebx,edx
c0003201:	89 c6                	mov    esi,eax
c0003203:	74 7d                	je     c0003282 <get_fileinfo+0xa2>
c0003205:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000320d:	31 ff                	xor    edi,edi
c000320f:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003216:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000321a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000321e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003221:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003225:	85 c0                	test   eax,eax
c0003227:	89 c2                	mov    edx,eax
c0003229:	74 44                	je     c000326f <get_fileinfo+0x8f>
c000322b:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003230:	85 ed                	test   ebp,ebp
c0003232:	75 0d                	jne    c0003241 <get_fileinfo+0x61>
c0003234:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000323a:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000323f:	76 20                	jbe    c0003261 <get_fileinfo+0x81>
c0003241:	c1 e5 10             	shl    ebp,0x10
c0003244:	b9 ff 00 00 00       	mov    ecx,0xff
c0003249:	29 f9                	sub    ecx,edi
c000324b:	09 e8                	or     eax,ebp
c000324d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003251:	e8 f7 ee ff ff       	call   c000214d <put_utf>
c0003256:	0f b6 c0             	movzx  eax,al
c0003259:	85 c0                	test   eax,eax
c000325b:	74 10                	je     c000326d <get_fileinfo+0x8d>
c000325d:	01 c7                	add    edi,eax
c000325f:	31 d2                	xor    edx,edx
c0003261:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003266:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000326b:	eb a9                	jmp    c0003216 <get_fileinfo+0x36>
c000326d:	31 ff                	xor    edi,edi
c000326f:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003275:	b8 00 00 00 00       	mov    eax,0x0
c000327a:	0f 45 f8             	cmovne edi,eax
c000327d:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003282:	31 ff                	xor    edi,edi
c0003284:	31 c9                	xor    ecx,ecx
c0003286:	83 f9 0a             	cmp    ecx,0xa
c0003289:	0f 87 ac 00 00 00    	ja     c000333b <get_fileinfo+0x15b>
c000328f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003292:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003295:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003299:	83 f8 20             	cmp    eax,0x20
c000329c:	89 c2                	mov    edx,eax
c000329e:	0f 84 90 00 00 00    	je     c0003334 <get_fileinfo+0x154>
c00032a4:	83 f8 05             	cmp    eax,0x5
c00032a7:	75 05                	jne    c00032ae <get_fileinfo+0xce>
c00032a9:	ba e5 00 00 00       	mov    edx,0xe5
c00032ae:	83 fd 09             	cmp    ebp,0x9
c00032b1:	75 0b                	jne    c00032be <get_fileinfo+0xde>
c00032b3:	83 ff 0b             	cmp    edi,0xb
c00032b6:	77 06                	ja     c00032be <get_fileinfo+0xde>
c00032b8:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00032bd:	47                   	inc    edi
c00032be:	0f b7 c2             	movzx  eax,dx
c00032c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00032c5:	e8 a5 ed ff ff       	call   c000206f <dbc_1st>
c00032ca:	85 c0                	test   eax,eax
c00032cc:	74 2f                	je     c00032fd <get_fileinfo+0x11d>
c00032ce:	83 fd 08             	cmp    ebp,0x8
c00032d1:	74 2a                	je     c00032fd <get_fileinfo+0x11d>
c00032d3:	83 fd 0b             	cmp    ebp,0xb
c00032d6:	74 25                	je     c00032fd <get_fileinfo+0x11d>
c00032d8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032db:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032df:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c00032e3:	e8 8a ed ff ff       	call   c0002072 <dbc_2nd>
c00032e8:	85 c0                	test   eax,eax
c00032ea:	74 11                	je     c00032fd <get_fileinfo+0x11d>
c00032ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032f0:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032f3:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c00032f8:	c1 e0 08             	shl    eax,0x8
c00032fb:	09 c2                	or     edx,eax
c00032fd:	50                   	push   eax
c00032fe:	0f b7 d2             	movzx  edx,dx
c0003301:	50                   	push   eax
c0003302:	68 b5 01 00 00       	push   0x1b5
c0003307:	52                   	push   edx
c0003308:	e8 f3 2b 00 00       	call   c0005f00 <ff_oem2uni>
c000330d:	83 c4 10             	add    esp,0x10
c0003310:	0f b7 c0             	movzx  eax,ax
c0003313:	85 c0                	test   eax,eax
c0003315:	75 04                	jne    c000331b <get_fileinfo+0x13b>
c0003317:	31 ff                	xor    edi,edi
c0003319:	eb 20                	jmp    c000333b <get_fileinfo+0x15b>
c000331b:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000331f:	b9 0c 00 00 00       	mov    ecx,0xc
c0003324:	29 f9                	sub    ecx,edi
c0003326:	e8 22 ee ff ff       	call   c000214d <put_utf>
c000332b:	0f b6 c0             	movzx  eax,al
c000332e:	85 c0                	test   eax,eax
c0003330:	74 e5                	je     c0003317 <get_fileinfo+0x137>
c0003332:	01 c7                	add    edi,eax
c0003334:	89 e9                	mov    ecx,ebp
c0003336:	e9 4b ff ff ff       	jmp    c0003286 <get_fileinfo+0xa6>
c000333b:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003340:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003344:	75 5f                	jne    c00033a5 <get_fileinfo+0x1c5>
c0003346:	85 ff                	test   edi,edi
c0003348:	75 0b                	jne    c0003355 <get_fileinfo+0x175>
c000334a:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000334e:	ba 01 00 00 00       	mov    edx,0x1
c0003353:	eb 3e                	jmp    c0003393 <get_fileinfo+0x1b3>
c0003355:	bf 08 00 00 00       	mov    edi,0x8
c000335a:	31 d2                	xor    edx,edx
c000335c:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003362:	84 c0                	test   al,al
c0003364:	74 2d                	je     c0003393 <get_fileinfo+0x1b3>
c0003366:	66 83 f8 2e          	cmp    ax,0x2e
c000336a:	74 1b                	je     c0003387 <get_fileinfo+0x1a7>
c000336c:	8d 48 bf             	lea    ecx,[eax-0x41]
c000336f:	66 83 f9 19          	cmp    cx,0x19
c0003373:	77 17                	ja     c000338c <get_fileinfo+0x1ac>
c0003375:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003378:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000337b:	21 f9                	and    ecx,edi
c000337d:	80 e1 18             	and    cl,0x18
c0003380:	74 0a                	je     c000338c <get_fileinfo+0x1ac>
c0003382:	83 c0 20             	add    eax,0x20
c0003385:	eb 05                	jmp    c000338c <get_fileinfo+0x1ac>
c0003387:	bf 10 00 00 00       	mov    edi,0x10
c000338c:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003390:	42                   	inc    edx
c0003391:	eb c9                	jmp    c000335c <get_fileinfo+0x17c>
c0003393:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003398:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000339b:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000339f:	75 04                	jne    c00033a5 <get_fileinfo+0x1c5>
c00033a1:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00033a5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033a8:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00033ab:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00033ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033b1:	83 c0 1c             	add    eax,0x1c
c00033b4:	e8 44 ec ff ff       	call   c0001ffd <ld_dword>
c00033b9:	89 03                	mov    DWORD PTR [ebx],eax
c00033bb:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033be:	83 c0 16             	add    eax,0x16
c00033c1:	e8 2a ec ff ff       	call   c0001ff0 <ld_word>
c00033c6:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00033ca:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033cd:	83 c0 18             	add    eax,0x18
c00033d0:	e8 1b ec ff ff       	call   c0001ff0 <ld_word>
c00033d5:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033d9:	83 c4 1c             	add    esp,0x1c
c00033dc:	5b                   	pop    ebx
c00033dd:	5e                   	pop    esi
c00033de:	5f                   	pop    edi
c00033df:	5d                   	pop    ebp
c00033e0:	c3                   	ret    

c00033e1 <ld_clust.isra.0>:
c00033e1:	56                   	push   esi
c00033e2:	89 c6                	mov    esi,eax
c00033e4:	53                   	push   ebx
c00033e5:	89 d3                	mov    ebx,edx
c00033e7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033ea:	e8 01 ec ff ff       	call   c0001ff0 <ld_word>
c00033ef:	0f b7 c8             	movzx  ecx,ax
c00033f2:	89 f0                	mov    eax,esi
c00033f4:	3c 03                	cmp    al,0x3
c00033f6:	75 0d                	jne    c0003405 <ld_clust.isra.0+0x24>
c00033f8:	8d 43 14             	lea    eax,[ebx+0x14]
c00033fb:	e8 f0 eb ff ff       	call   c0001ff0 <ld_word>
c0003400:	c1 e0 10             	shl    eax,0x10
c0003403:	09 c1                	or     ecx,eax
c0003405:	5b                   	pop    ebx
c0003406:	89 c8                	mov    eax,ecx
c0003408:	5e                   	pop    esi
c0003409:	c3                   	ret    

c000340a <st_clust.isra.1>:
c000340a:	56                   	push   esi
c000340b:	89 c6                	mov    esi,eax
c000340d:	53                   	push   ebx
c000340e:	89 d3                	mov    ebx,edx
c0003410:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003413:	0f b7 d1             	movzx  edx,cx
c0003416:	e8 fa eb ff ff       	call   c0002015 <st_word>
c000341b:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000341e:	75 0f                	jne    c000342f <st_clust.isra.1+0x25>
c0003420:	8d 43 14             	lea    eax,[ebx+0x14]
c0003423:	5b                   	pop    ebx
c0003424:	c1 e9 10             	shr    ecx,0x10
c0003427:	89 ca                	mov    edx,ecx
c0003429:	5e                   	pop    esi
c000342a:	e9 e6 eb ff ff       	jmp    c0002015 <st_word>
c000342f:	5b                   	pop    ebx
c0003430:	5e                   	pop    esi
c0003431:	c3                   	ret    

c0003432 <get_fat.isra.2>:
c0003432:	83 fa 01             	cmp    edx,0x1
c0003435:	b9 01 00 00 00       	mov    ecx,0x1
c000343a:	0f 86 f4 00 00 00    	jbe    c0003534 <get_fat.isra.2+0x102>
c0003440:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003443:	0f 83 eb 00 00 00    	jae    c0003534 <get_fat.isra.2+0x102>
c0003449:	55                   	push   ebp
c000344a:	57                   	push   edi
c000344b:	56                   	push   esi
c000344c:	89 c6                	mov    esi,eax
c000344e:	53                   	push   ebx
c000344f:	89 d3                	mov    ebx,edx
c0003451:	83 ec 0c             	sub    esp,0xc
c0003454:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003457:	83 f8 02             	cmp    eax,0x2
c000345a:	74 79                	je     c00034d5 <get_fat.isra.2+0xa3>
c000345c:	83 f8 03             	cmp    eax,0x3
c000345f:	0f 84 97 00 00 00    	je     c00034fc <get_fat.isra.2+0xca>
c0003465:	48                   	dec    eax
c0003466:	0f 85 be 00 00 00    	jne    c000352a <get_fat.isra.2+0xf8>
c000346c:	89 d7                	mov    edi,edx
c000346e:	89 f0                	mov    eax,esi
c0003470:	d1 ef                	shr    edi,1
c0003472:	01 d7                	add    edi,edx
c0003474:	89 fa                	mov    edx,edi
c0003476:	c1 ea 09             	shr    edx,0x9
c0003479:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000347c:	e8 d4 f0 ff ff       	call   c0002555 <move_window>
c0003481:	85 c0                	test   eax,eax
c0003483:	74 08                	je     c000348d <get_fat.isra.2+0x5b>
c0003485:	83 c9 ff             	or     ecx,0xffffffff
c0003488:	e9 9d 00 00 00       	jmp    c000352a <get_fat.isra.2+0xf8>
c000348d:	8d 6f 01             	lea    ebp,[edi+0x1]
c0003490:	89 f0                	mov    eax,esi
c0003492:	89 ea                	mov    edx,ebp
c0003494:	81 e7 ff 01 00 00    	and    edi,0x1ff
c000349a:	c1 ea 09             	shr    edx,0x9
c000349d:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00034a2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034a5:	e8 ab f0 ff ff       	call   c0002555 <move_window>
c00034aa:	85 c0                	test   eax,eax
c00034ac:	75 d7                	jne    c0003485 <get_fat.isra.2+0x53>
c00034ae:	89 f8                	mov    eax,edi
c00034b0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00034b6:	0f b6 f8             	movzx  edi,al
c00034b9:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00034be:	c1 e0 08             	shl    eax,0x8
c00034c1:	09 f8                	or     eax,edi
c00034c3:	89 c1                	mov    ecx,eax
c00034c5:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00034cb:	80 e3 01             	and    bl,0x1
c00034ce:	74 5a                	je     c000352a <get_fat.isra.2+0xf8>
c00034d0:	c1 e8 04             	shr    eax,0x4
c00034d3:	eb 53                	jmp    c0003528 <get_fat.isra.2+0xf6>
c00034d5:	c1 ea 08             	shr    edx,0x8
c00034d8:	89 f0                	mov    eax,esi
c00034da:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034dd:	e8 73 f0 ff ff       	call   c0002555 <move_window>
c00034e2:	85 c0                	test   eax,eax
c00034e4:	75 9f                	jne    c0003485 <get_fat.isra.2+0x53>
c00034e6:	01 db                	add    ebx,ebx
c00034e8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00034ee:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00034f2:	e8 f9 ea ff ff       	call   c0001ff0 <ld_word>
c00034f7:	0f b7 c8             	movzx  ecx,ax
c00034fa:	eb 2e                	jmp    c000352a <get_fat.isra.2+0xf8>
c00034fc:	c1 ea 07             	shr    edx,0x7
c00034ff:	89 f0                	mov    eax,esi
c0003501:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003504:	e8 4c f0 ff ff       	call   c0002555 <move_window>
c0003509:	85 c0                	test   eax,eax
c000350b:	0f 85 74 ff ff ff    	jne    c0003485 <get_fat.isra.2+0x53>
c0003511:	c1 e3 02             	shl    ebx,0x2
c0003514:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c000351a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000351e:	e8 da ea ff ff       	call   c0001ffd <ld_dword>
c0003523:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003528:	89 c1                	mov    ecx,eax
c000352a:	83 c4 0c             	add    esp,0xc
c000352d:	89 c8                	mov    eax,ecx
c000352f:	5b                   	pop    ebx
c0003530:	5e                   	pop    esi
c0003531:	5f                   	pop    edi
c0003532:	5d                   	pop    ebp
c0003533:	c3                   	ret    
c0003534:	89 c8                	mov    eax,ecx
c0003536:	c3                   	ret    

c0003537 <dir_sdi>:
c0003537:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000353d:	0f 87 b6 00 00 00    	ja     c00035f9 <dir_sdi+0xc2>
c0003543:	55                   	push   ebp
c0003544:	57                   	push   edi
c0003545:	56                   	push   esi
c0003546:	53                   	push   ebx
c0003547:	89 d3                	mov    ebx,edx
c0003549:	83 ec 1c             	sub    esp,0x1c
c000354c:	f6 c2 1f             	test   dl,0x1f
c000354f:	74 0a                	je     c000355b <dir_sdi+0x24>
c0003551:	b8 02 00 00 00       	mov    eax,0x2
c0003556:	e9 96 00 00 00       	jmp    c00035f1 <dir_sdi+0xba>
c000355b:	89 c6                	mov    esi,eax
c000355d:	8b 28                	mov    ebp,DWORD PTR [eax]
c000355f:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003562:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003565:	85 ff                	test   edi,edi
c0003567:	75 21                	jne    c000358a <dir_sdi+0x53>
c0003569:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000356d:	76 07                	jbe    c0003576 <dir_sdi+0x3f>
c000356f:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003572:	85 c0                	test   eax,eax
c0003574:	75 12                	jne    c0003588 <dir_sdi+0x51>
c0003576:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000357a:	89 da                	mov    edx,ebx
c000357c:	c1 ea 05             	shr    edx,0x5
c000357f:	39 c2                	cmp    edx,eax
c0003581:	73 ce                	jae    c0003551 <dir_sdi+0x1a>
c0003583:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003586:	eb 3c                	jmp    c00035c4 <dir_sdi+0x8d>
c0003588:	89 c7                	mov    edi,eax
c000358a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000358e:	c1 e1 09             	shl    ecx,0x9
c0003591:	39 cb                	cmp    ebx,ecx
c0003593:	72 26                	jb     c00035bb <dir_sdi+0x84>
c0003595:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003599:	8b 06                	mov    eax,DWORD PTR [esi]
c000359b:	89 fa                	mov    edx,edi
c000359d:	e8 90 fe ff ff       	call   c0003432 <get_fat.isra.2>
c00035a2:	83 f8 ff             	cmp    eax,0xffffffff
c00035a5:	89 c7                	mov    edi,eax
c00035a7:	74 43                	je     c00035ec <dir_sdi+0xb5>
c00035a9:	83 f8 01             	cmp    eax,0x1
c00035ac:	76 a3                	jbe    c0003551 <dir_sdi+0x1a>
c00035ae:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00035b1:	76 9e                	jbe    c0003551 <dir_sdi+0x1a>
c00035b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035b7:	29 cb                	sub    ebx,ecx
c00035b9:	eb d6                	jmp    c0003591 <dir_sdi+0x5a>
c00035bb:	89 fa                	mov    edx,edi
c00035bd:	89 e8                	mov    eax,ebp
c00035bf:	e8 82 ec ff ff       	call   c0002246 <clst2sect>
c00035c4:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035c7:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00035ca:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00035cd:	85 d2                	test   edx,edx
c00035cf:	74 80                	je     c0003551 <dir_sdi+0x1a>
c00035d1:	89 d8                	mov    eax,ebx
c00035d3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035d9:	c1 e8 09             	shr    eax,0x9
c00035dc:	01 d0                	add    eax,edx
c00035de:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035e1:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c00035e5:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035e8:	31 c0                	xor    eax,eax
c00035ea:	eb 05                	jmp    c00035f1 <dir_sdi+0xba>
c00035ec:	b8 01 00 00 00       	mov    eax,0x1
c00035f1:	83 c4 1c             	add    esp,0x1c
c00035f4:	5b                   	pop    ebx
c00035f5:	5e                   	pop    esi
c00035f6:	5f                   	pop    edi
c00035f7:	5d                   	pop    ebp
c00035f8:	c3                   	ret    
c00035f9:	b8 02 00 00 00       	mov    eax,0x2
c00035fe:	c3                   	ret    

c00035ff <create_chain>:
c00035ff:	55                   	push   ebp
c0003600:	89 c5                	mov    ebp,eax
c0003602:	57                   	push   edi
c0003603:	89 d7                	mov    edi,edx
c0003605:	56                   	push   esi
c0003606:	53                   	push   ebx
c0003607:	83 ec 1c             	sub    esp,0x1c
c000360a:	85 d2                	test   edx,edx
c000360c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000360e:	75 0e                	jne    c000361e <create_chain+0x1f>
c0003610:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003613:	85 c9                	test   ecx,ecx
c0003615:	74 32                	je     c0003649 <create_chain+0x4a>
c0003617:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000361a:	77 32                	ja     c000364e <create_chain+0x4f>
c000361c:	eb 2b                	jmp    c0003649 <create_chain+0x4a>
c000361e:	89 d8                	mov    eax,ebx
c0003620:	e8 0d fe ff ff       	call   c0003432 <get_fat.isra.2>
c0003625:	83 f8 01             	cmp    eax,0x1
c0003628:	77 0a                	ja     c0003634 <create_chain+0x35>
c000362a:	b8 01 00 00 00       	mov    eax,0x1
c000362f:	e9 fd 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003634:	83 f8 ff             	cmp    eax,0xffffffff
c0003637:	0f 84 f1 00 00 00    	je     c000372e <create_chain+0x12f>
c000363d:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003640:	89 f9                	mov    ecx,edi
c0003642:	76 0a                	jbe    c000364e <create_chain+0x4f>
c0003644:	e9 e8 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003649:	b9 01 00 00 00       	mov    ecx,0x1
c000364e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003652:	75 07                	jne    c000365b <create_chain+0x5c>
c0003654:	31 c0                	xor    eax,eax
c0003656:	e9 d6 00 00 00       	jmp    c0003731 <create_chain+0x132>
c000365b:	39 f9                	cmp    ecx,edi
c000365d:	75 49                	jne    c00036a8 <create_chain+0xa9>
c000365f:	8d 71 01             	lea    esi,[ecx+0x1]
c0003662:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003665:	77 05                	ja     c000366c <create_chain+0x6d>
c0003667:	be 02 00 00 00       	mov    esi,0x2
c000366c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003670:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003673:	89 f2                	mov    edx,esi
c0003675:	e8 b8 fd ff ff       	call   c0003432 <get_fat.isra.2>
c000367a:	83 f8 01             	cmp    eax,0x1
c000367d:	0f 84 ae 00 00 00    	je     c0003731 <create_chain+0x132>
c0003683:	83 f8 ff             	cmp    eax,0xffffffff
c0003686:	0f 84 a5 00 00 00    	je     c0003731 <create_chain+0x132>
c000368c:	85 c0                	test   eax,eax
c000368e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003692:	74 10                	je     c00036a4 <create_chain+0xa5>
c0003694:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003697:	83 f8 01             	cmp    eax,0x1
c000369a:	76 0c                	jbe    c00036a8 <create_chain+0xa9>
c000369c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000369f:	0f 47 c8             	cmova  ecx,eax
c00036a2:	eb 04                	jmp    c00036a8 <create_chain+0xa9>
c00036a4:	85 f6                	test   esi,esi
c00036a6:	75 3b                	jne    c00036e3 <create_chain+0xe4>
c00036a8:	89 ce                	mov    esi,ecx
c00036aa:	46                   	inc    esi
c00036ab:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00036ae:	77 0a                	ja     c00036ba <create_chain+0xbb>
c00036b0:	83 f9 01             	cmp    ecx,0x1
c00036b3:	76 9f                	jbe    c0003654 <create_chain+0x55>
c00036b5:	be 02 00 00 00       	mov    esi,0x2
c00036ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00036c1:	89 f2                	mov    edx,esi
c00036c3:	e8 6a fd ff ff       	call   c0003432 <get_fat.isra.2>
c00036c8:	85 c0                	test   eax,eax
c00036ca:	74 17                	je     c00036e3 <create_chain+0xe4>
c00036cc:	83 f8 01             	cmp    eax,0x1
c00036cf:	74 60                	je     c0003731 <create_chain+0x132>
c00036d1:	83 f8 ff             	cmp    eax,0xffffffff
c00036d4:	74 5b                	je     c0003731 <create_chain+0x132>
c00036d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036da:	39 ce                	cmp    esi,ecx
c00036dc:	75 cc                	jne    c00036aa <create_chain+0xab>
c00036de:	e9 71 ff ff ff       	jmp    c0003654 <create_chain+0x55>
c00036e3:	83 c9 ff             	or     ecx,0xffffffff
c00036e6:	89 f2                	mov    edx,esi
c00036e8:	89 d8                	mov    eax,ebx
c00036ea:	e8 c0 f2 ff ff       	call   c00029af <put_fat>
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 0f                	jne    c0003702 <create_chain+0x103>
c00036f3:	85 ff                	test   edi,edi
c00036f5:	74 0b                	je     c0003702 <create_chain+0x103>
c00036f7:	89 f1                	mov    ecx,esi
c00036f9:	89 fa                	mov    edx,edi
c00036fb:	89 d8                	mov    eax,ebx
c00036fd:	e8 ad f2 ff ff       	call   c00029af <put_fat>
c0003702:	85 c0                	test   eax,eax
c0003704:	75 21                	jne    c0003727 <create_chain+0x128>
c0003706:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003709:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000370c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000370f:	8d 57 fe             	lea    edx,[edi-0x2]
c0003712:	39 d0                	cmp    eax,edx
c0003714:	77 04                	ja     c000371a <create_chain+0x11b>
c0003716:	48                   	dec    eax
c0003717:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000371a:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000371d:	83 c8 01             	or     eax,0x1
c0003720:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003723:	89 f0                	mov    eax,esi
c0003725:	eb 0a                	jmp    c0003731 <create_chain+0x132>
c0003727:	48                   	dec    eax
c0003728:	0f 85 fc fe ff ff    	jne    c000362a <create_chain+0x2b>
c000372e:	83 c8 ff             	or     eax,0xffffffff
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <remove_chain>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 d6                	mov    esi,edx
c000373e:	53                   	push   ebx
c000373f:	83 ec 0c             	sub    esp,0xc
c0003742:	83 fa 01             	cmp    edx,0x1
c0003745:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003747:	76 6a                	jbe    c00037b3 <remove_chain+0x7a>
c0003749:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000374c:	76 65                	jbe    c00037b3 <remove_chain+0x7a>
c000374e:	85 c9                	test   ecx,ecx
c0003750:	89 c5                	mov    ebp,eax
c0003752:	89 ca                	mov    edx,ecx
c0003754:	74 0e                	je     c0003764 <remove_chain+0x2b>
c0003756:	83 c9 ff             	or     ecx,0xffffffff
c0003759:	89 d8                	mov    eax,ebx
c000375b:	e8 4f f2 ff ff       	call   c00029af <put_fat>
c0003760:	85 c0                	test   eax,eax
c0003762:	75 5b                	jne    c00037bf <remove_chain+0x86>
c0003764:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003767:	89 f2                	mov    edx,esi
c0003769:	e8 c4 fc ff ff       	call   c0003432 <get_fat.isra.2>
c000376e:	85 c0                	test   eax,eax
c0003770:	89 c7                	mov    edi,eax
c0003772:	75 04                	jne    c0003778 <remove_chain+0x3f>
c0003774:	31 c0                	xor    eax,eax
c0003776:	eb 47                	jmp    c00037bf <remove_chain+0x86>
c0003778:	83 f8 01             	cmp    eax,0x1
c000377b:	74 36                	je     c00037b3 <remove_chain+0x7a>
c000377d:	83 f8 ff             	cmp    eax,0xffffffff
c0003780:	74 38                	je     c00037ba <remove_chain+0x81>
c0003782:	31 c9                	xor    ecx,ecx
c0003784:	89 f2                	mov    edx,esi
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 22 f2 ff ff       	call   c00029af <put_fat>
c000378d:	85 c0                	test   eax,eax
c000378f:	75 2e                	jne    c00037bf <remove_chain+0x86>
c0003791:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003797:	8d 4a fe             	lea    ecx,[edx-0x2]
c000379a:	39 c8                	cmp    eax,ecx
c000379c:	73 0d                	jae    c00037ab <remove_chain+0x72>
c000379e:	40                   	inc    eax
c000379f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00037a2:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00037a5:	83 c8 01             	or     eax,0x1
c00037a8:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00037ab:	39 fa                	cmp    edx,edi
c00037ad:	89 fe                	mov    esi,edi
c00037af:	77 b3                	ja     c0003764 <remove_chain+0x2b>
c00037b1:	eb c1                	jmp    c0003774 <remove_chain+0x3b>
c00037b3:	b8 02 00 00 00       	mov    eax,0x2
c00037b8:	eb 05                	jmp    c00037bf <remove_chain+0x86>
c00037ba:	b8 01 00 00 00       	mov    eax,0x1
c00037bf:	83 c4 0c             	add    esp,0xc
c00037c2:	5b                   	pop    ebx
c00037c3:	5e                   	pop    esi
c00037c4:	5f                   	pop    edi
c00037c5:	5d                   	pop    ebp
c00037c6:	c3                   	ret    

c00037c7 <dir_next>:
c00037c7:	55                   	push   ebp
c00037c8:	57                   	push   edi
c00037c9:	56                   	push   esi
c00037ca:	53                   	push   ebx
c00037cb:	83 ec 1c             	sub    esp,0x1c
c00037ce:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037d1:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037d3:	83 c7 20             	add    edi,0x20
c00037d6:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037dc:	76 07                	jbe    c00037e5 <dir_next+0x1e>
c00037de:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037e5:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037e8:	b9 04 00 00 00       	mov    ecx,0x4
c00037ed:	85 f6                	test   esi,esi
c00037ef:	0f 84 cd 00 00 00    	je     c00038c2 <dir_next+0xfb>
c00037f5:	89 c3                	mov    ebx,eax
c00037f7:	89 f8                	mov    eax,edi
c00037f9:	25 ff 01 00 00       	and    eax,0x1ff
c00037fe:	89 d1                	mov    ecx,edx
c0003800:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003804:	0f 85 a8 00 00 00    	jne    c00038b2 <dir_next+0xeb>
c000380a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000380d:	46                   	inc    esi
c000380e:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003811:	85 d2                	test   edx,edx
c0003813:	75 22                	jne    c0003837 <dir_next+0x70>
c0003815:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003819:	89 fa                	mov    edx,edi
c000381b:	c1 ea 05             	shr    edx,0x5
c000381e:	39 c2                	cmp    edx,eax
c0003820:	0f 82 8c 00 00 00    	jb     c00038b2 <dir_next+0xeb>
c0003826:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000382d:	b9 04 00 00 00       	mov    ecx,0x4
c0003832:	e9 8b 00 00 00       	jmp    c00038c2 <dir_next+0xfb>
c0003837:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000383b:	89 fe                	mov    esi,edi
c000383d:	c1 ee 09             	shr    esi,0x9
c0003840:	48                   	dec    eax
c0003841:	85 f0                	test   eax,esi
c0003843:	75 6d                	jne    c00038b2 <dir_next+0xeb>
c0003845:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003849:	89 e8                	mov    eax,ebp
c000384b:	e8 e2 fb ff ff       	call   c0003432 <get_fat.isra.2>
c0003850:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003854:	83 f8 01             	cmp    eax,0x1
c0003857:	89 c6                	mov    esi,eax
c0003859:	77 07                	ja     c0003862 <dir_next+0x9b>
c000385b:	b9 02 00 00 00       	mov    ecx,0x2
c0003860:	eb 60                	jmp    c00038c2 <dir_next+0xfb>
c0003862:	83 f8 ff             	cmp    eax,0xffffffff
c0003865:	75 07                	jne    c000386e <dir_next+0xa7>
c0003867:	b9 01 00 00 00       	mov    ecx,0x1
c000386c:	eb 54                	jmp    c00038c2 <dir_next+0xfb>
c000386e:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003871:	77 30                	ja     c00038a3 <dir_next+0xdc>
c0003873:	85 c9                	test   ecx,ecx
c0003875:	74 af                	je     c0003826 <dir_next+0x5f>
c0003877:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000387a:	89 d8                	mov    eax,ebx
c000387c:	e8 7e fd ff ff       	call   c00035ff <create_chain>
c0003881:	b9 07 00 00 00       	mov    ecx,0x7
c0003886:	85 c0                	test   eax,eax
c0003888:	89 c6                	mov    esi,eax
c000388a:	74 36                	je     c00038c2 <dir_next+0xfb>
c000388c:	83 f8 01             	cmp    eax,0x1
c000388f:	74 ca                	je     c000385b <dir_next+0x94>
c0003891:	83 f8 ff             	cmp    eax,0xffffffff
c0003894:	74 d1                	je     c0003867 <dir_next+0xa0>
c0003896:	89 c2                	mov    edx,eax
c0003898:	89 e8                	mov    eax,ebp
c000389a:	e8 67 f2 ff ff       	call   c0002b06 <dir_clear>
c000389f:	85 c0                	test   eax,eax
c00038a1:	75 c4                	jne    c0003867 <dir_next+0xa0>
c00038a3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00038a6:	89 f2                	mov    edx,esi
c00038a8:	89 e8                	mov    eax,ebp
c00038aa:	e8 97 e9 ff ff       	call   c0002246 <clst2sect>
c00038af:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00038b2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00038b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00038b9:	31 c9                	xor    ecx,ecx
c00038bb:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00038bf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00038c2:	83 c4 1c             	add    esp,0x1c
c00038c5:	89 c8                	mov    eax,ecx
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	5d                   	pop    ebp
c00038cb:	c3                   	ret    

c00038cc <dir_alloc>:
c00038cc:	55                   	push   ebp
c00038cd:	89 c5                	mov    ebp,eax
c00038cf:	57                   	push   edi
c00038d0:	89 d7                	mov    edi,edx
c00038d2:	56                   	push   esi
c00038d3:	31 d2                	xor    edx,edx
c00038d5:	53                   	push   ebx
c00038d6:	83 ec 0c             	sub    esp,0xc
c00038d9:	8b 30                	mov    esi,DWORD PTR [eax]
c00038db:	e8 57 fc ff ff       	call   c0003537 <dir_sdi>
c00038e0:	85 c0                	test   eax,eax
c00038e2:	75 3b                	jne    c000391f <dir_alloc+0x53>
c00038e4:	31 db                	xor    ebx,ebx
c00038e6:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038e9:	89 f0                	mov    eax,esi
c00038eb:	e8 65 ec ff ff       	call   c0002555 <move_window>
c00038f0:	85 c0                	test   eax,eax
c00038f2:	75 2b                	jne    c000391f <dir_alloc+0x53>
c00038f4:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038f7:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038fa:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003900:	74 04                	je     c0003906 <dir_alloc+0x3a>
c0003902:	85 d2                	test   edx,edx
c0003904:	75 07                	jne    c000390d <dir_alloc+0x41>
c0003906:	43                   	inc    ebx
c0003907:	39 fb                	cmp    ebx,edi
c0003909:	75 04                	jne    c000390f <dir_alloc+0x43>
c000390b:	eb 1c                	jmp    c0003929 <dir_alloc+0x5d>
c000390d:	31 db                	xor    ebx,ebx
c000390f:	ba 01 00 00 00       	mov    edx,0x1
c0003914:	89 e8                	mov    eax,ebp
c0003916:	e8 ac fe ff ff       	call   c00037c7 <dir_next>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c7                	je     c00038e6 <dir_alloc+0x1a>
c000391f:	83 f8 04             	cmp    eax,0x4
c0003922:	75 05                	jne    c0003929 <dir_alloc+0x5d>
c0003924:	b8 07 00 00 00       	mov    eax,0x7
c0003929:	83 c4 0c             	add    esp,0xc
c000392c:	5b                   	pop    ebx
c000392d:	5e                   	pop    esi
c000392e:	5f                   	pop    edi
c000392f:	5d                   	pop    ebp
c0003930:	c3                   	ret    

c0003931 <dir_read>:
c0003931:	55                   	push   ebp
c0003932:	57                   	push   edi
c0003933:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003938:	56                   	push   esi
c0003939:	be 04 00 00 00       	mov    esi,0x4
c000393e:	53                   	push   ebx
c000393f:	89 c3                	mov    ebx,eax
c0003941:	83 ec 1c             	sub    esp,0x1c
c0003944:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003948:	8b 28                	mov    ebp,DWORD PTR [eax]
c000394a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000394f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003952:	85 d2                	test   edx,edx
c0003954:	0f 84 e3 00 00 00    	je     c0003a3d <dir_read+0x10c>
c000395a:	89 e8                	mov    eax,ebp
c000395c:	e8 f4 eb ff ff       	call   c0002555 <move_window>
c0003961:	85 c0                	test   eax,eax
c0003963:	89 c6                	mov    esi,eax
c0003965:	0f 85 dd 00 00 00    	jne    c0003a48 <dir_read+0x117>
c000396b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000396e:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003971:	88 04 24             	mov    BYTE PTR [esp],al
c0003974:	85 c0                	test   eax,eax
c0003976:	0f 84 c7 00 00 00    	je     c0003a43 <dir_read+0x112>
c000397c:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000397f:	83 e1 3f             	and    ecx,0x3f
c0003982:	3d e5 00 00 00       	cmp    eax,0xe5
c0003987:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000398a:	0f 84 93 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003990:	83 f8 2e             	cmp    eax,0x2e
c0003993:	0f 84 8a 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003999:	0f b6 c9             	movzx  ecx,cl
c000399c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00039a0:	83 e1 df             	and    ecx,0xffffffdf
c00039a3:	83 f9 08             	cmp    ecx,0x8
c00039a6:	0f 94 c1             	sete   cl
c00039a9:	0f b6 c9             	movzx  ecx,cl
c00039ac:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00039b0:	75 71                	jne    c0003a23 <dir_read+0xf2>
c00039b2:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00039b7:	75 4a                	jne    c0003a03 <dir_read+0xd2>
c00039b9:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00039bd:	74 16                	je     c00039d5 <dir_read+0xa4>
c00039bf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039c2:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00039c9:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00039d0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039d3:	eb 0e                	jmp    c00039e3 <dir_read+0xb2>
c00039d5:	89 f9                	mov    ecx,edi
c00039d7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039dc:	0f b6 c9             	movzx  ecx,cl
c00039df:	39 c1                	cmp    ecx,eax
c00039e1:	75 45                	jne    c0003a28 <dir_read+0xf7>
c00039e3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039e7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ec:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039ef:	75 37                	jne    c0003a28 <dir_read+0xf7>
c00039f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039f4:	e8 6a e8 ff ff       	call   c0002263 <pick_lfn>
c00039f9:	85 c0                	test   eax,eax
c00039fb:	74 2b                	je     c0003a28 <dir_read+0xf7>
c00039fd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003a00:	4f                   	dec    edi
c0003a01:	eb 25                	jmp    c0003a28 <dir_read+0xf7>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	84 c0                	test   al,al
c0003a07:	75 11                	jne    c0003a1a <dir_read+0xe9>
c0003a09:	89 d0                	mov    eax,edx
c0003a0b:	e8 30 ea ff ff       	call   c0002440 <sum_sfn>
c0003a10:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003a14:	75 04                	jne    c0003a1a <dir_read+0xe9>
c0003a16:	31 f6                	xor    esi,esi
c0003a18:	eb 35                	jmp    c0003a4f <dir_read+0x11e>
c0003a1a:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a21:	eb 2c                	jmp    c0003a4f <dir_read+0x11e>
c0003a23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a28:	31 d2                	xor    edx,edx
c0003a2a:	89 d8                	mov    eax,ebx
c0003a2c:	e8 96 fd ff ff       	call   c00037c7 <dir_next>
c0003a31:	85 c0                	test   eax,eax
c0003a33:	89 c6                	mov    esi,eax
c0003a35:	0f 84 14 ff ff ff    	je     c000394f <dir_read+0x1e>
c0003a3b:	eb 0b                	jmp    c0003a48 <dir_read+0x117>
c0003a3d:	85 f6                	test   esi,esi
c0003a3f:	74 d5                	je     c0003a16 <dir_read+0xe5>
c0003a41:	eb 05                	jmp    c0003a48 <dir_read+0x117>
c0003a43:	be 04 00 00 00       	mov    esi,0x4
c0003a48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a4f:	83 c4 1c             	add    esp,0x1c
c0003a52:	89 f0                	mov    eax,esi
c0003a54:	5b                   	pop    ebx
c0003a55:	5e                   	pop    esi
c0003a56:	5f                   	pop    edi
c0003a57:	5d                   	pop    ebp
c0003a58:	c3                   	ret    

c0003a59 <dir_remove>:
c0003a59:	57                   	push   edi
c0003a5a:	56                   	push   esi
c0003a5b:	53                   	push   ebx
c0003a5c:	89 c3                	mov    ebx,eax
c0003a5e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a61:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a63:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a66:	83 fa ff             	cmp    edx,0xffffffff
c0003a69:	74 09                	je     c0003a74 <dir_remove+0x1b>
c0003a6b:	e8 c7 fa ff ff       	call   c0003537 <dir_sdi>
c0003a70:	85 c0                	test   eax,eax
c0003a72:	75 34                	jne    c0003aa8 <dir_remove+0x4f>
c0003a74:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a77:	89 f0                	mov    eax,esi
c0003a79:	e8 d7 ea ff ff       	call   c0002555 <move_window>
c0003a7e:	85 c0                	test   eax,eax
c0003a80:	75 1c                	jne    c0003a9e <dir_remove+0x45>
c0003a82:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a8c:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a8f:	73 17                	jae    c0003aa8 <dir_remove+0x4f>
c0003a91:	31 d2                	xor    edx,edx
c0003a93:	89 d8                	mov    eax,ebx
c0003a95:	e8 2d fd ff ff       	call   c00037c7 <dir_next>
c0003a9a:	85 c0                	test   eax,eax
c0003a9c:	74 d6                	je     c0003a74 <dir_remove+0x1b>
c0003a9e:	83 f8 04             	cmp    eax,0x4
c0003aa1:	75 05                	jne    c0003aa8 <dir_remove+0x4f>
c0003aa3:	b8 02 00 00 00       	mov    eax,0x2
c0003aa8:	5b                   	pop    ebx
c0003aa9:	5e                   	pop    esi
c0003aaa:	5f                   	pop    edi
c0003aab:	c3                   	ret    

c0003aac <dir_find>:
c0003aac:	55                   	push   ebp
c0003aad:	31 d2                	xor    edx,edx
c0003aaf:	57                   	push   edi
c0003ab0:	56                   	push   esi
c0003ab1:	53                   	push   ebx
c0003ab2:	89 c3                	mov    ebx,eax
c0003ab4:	83 ec 1c             	sub    esp,0x1c
c0003ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003abd:	89 d8                	mov    eax,ebx
c0003abf:	e8 73 fa ff ff       	call   c0003537 <dir_sdi>
c0003ac4:	85 c0                	test   eax,eax
c0003ac6:	89 c6                	mov    esi,eax
c0003ac8:	0f 85 22 01 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003ace:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003ad5:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003ada:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003adf:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ae6:	e8 6a ea ff ff       	call   c0002555 <move_window>
c0003aeb:	85 c0                	test   eax,eax
c0003aed:	89 c6                	mov    esi,eax
c0003aef:	0f 85 fb 00 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003af5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003af8:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003afb:	85 d2                	test   edx,edx
c0003afd:	89 d1                	mov    ecx,edx
c0003aff:	0f 84 e6 00 00 00    	je     c0003beb <dir_find+0x13f>
c0003b05:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003b08:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003b0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b10:	83 e0 3f             	and    eax,0x3f
c0003b13:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003b19:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003b1c:	0f 84 a8 00 00 00    	je     c0003bca <dir_find+0x11e>
c0003b22:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003b27:	0f b6 c0             	movzx  eax,al
c0003b2a:	74 0b                	je     c0003b37 <dir_find+0x8b>
c0003b2c:	83 f8 0f             	cmp    eax,0xf
c0003b2f:	0f 85 95 00 00 00    	jne    c0003bca <dir_find+0x11e>
c0003b35:	eb 05                	jmp    c0003b3c <dir_find+0x90>
c0003b37:	83 f8 0f             	cmp    eax,0xf
c0003b3a:	75 62                	jne    c0003b9e <dir_find+0xf2>
c0003b3c:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b40:	0f 85 90 00 00 00    	jne    c0003bd6 <dir_find+0x12a>
c0003b46:	f6 c1 40             	test   cl,0x40
c0003b49:	74 15                	je     c0003b60 <dir_find+0xb4>
c0003b4b:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003b4e:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003b54:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003b58:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b5b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b5e:	eb 11                	jmp    c0003b71 <dir_find+0xc5>
c0003b60:	89 e8                	mov    eax,ebp
c0003b62:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b67:	0f b6 d0             	movzx  edx,al
c0003b6a:	0f b6 c1             	movzx  eax,cl
c0003b6d:	39 c2                	cmp    edx,eax
c0003b6f:	75 65                	jne    c0003bd6 <dir_find+0x12a>
c0003b71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b75:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b7a:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003b7d:	75 57                	jne    c0003bd6 <dir_find+0x12a>
c0003b7f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b87:	89 fa                	mov    edx,edi
c0003b89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b8c:	e8 2c f3 ff ff       	call   c0002ebd <cmp_lfn>
c0003b91:	85 c0                	test   eax,eax
c0003b93:	74 41                	je     c0003bd6 <dir_find+0x12a>
c0003b95:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b99:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003b9c:	eb 38                	jmp    c0003bd6 <dir_find+0x12a>
c0003b9e:	89 e8                	mov    eax,ebp
c0003ba0:	84 c0                	test   al,al
c0003ba2:	75 0d                	jne    c0003bb1 <dir_find+0x105>
c0003ba4:	89 f8                	mov    eax,edi
c0003ba6:	e8 95 e8 ff ff       	call   c0002440 <sum_sfn>
c0003bab:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003baf:	74 3f                	je     c0003bf0 <dir_find+0x144>
c0003bb1:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003bb5:	75 13                	jne    c0003bca <dir_find+0x11e>
c0003bb7:	8d 53 20             	lea    edx,[ebx+0x20]
c0003bba:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bbf:	89 f8                	mov    eax,edi
c0003bc1:	e8 75 e4 ff ff       	call   c000203b <mem_cmp>
c0003bc6:	85 c0                	test   eax,eax
c0003bc8:	74 26                	je     c0003bf0 <dir_find+0x144>
c0003bca:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003bd1:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003bd6:	31 d2                	xor    edx,edx
c0003bd8:	89 d8                	mov    eax,ebx
c0003bda:	e8 e8 fb ff ff       	call   c00037c7 <dir_next>
c0003bdf:	85 c0                	test   eax,eax
c0003be1:	89 c6                	mov    esi,eax
c0003be3:	0f 84 f6 fe ff ff    	je     c0003adf <dir_find+0x33>
c0003be9:	eb 05                	jmp    c0003bf0 <dir_find+0x144>
c0003beb:	be 04 00 00 00       	mov    esi,0x4
c0003bf0:	83 c4 1c             	add    esp,0x1c
c0003bf3:	89 f0                	mov    eax,esi
c0003bf5:	5b                   	pop    ebx
c0003bf6:	5e                   	pop    esi
c0003bf7:	5f                   	pop    edi
c0003bf8:	5d                   	pop    ebp
c0003bf9:	c3                   	ret    

c0003bfa <follow_path>:
c0003bfa:	56                   	push   esi
c0003bfb:	53                   	push   ebx
c0003bfc:	89 c3                	mov    ebx,eax
c0003bfe:	83 ec 14             	sub    esp,0x14
c0003c01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003c05:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c0b:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003c0e:	83 fa 2f             	cmp    edx,0x2f
c0003c11:	75 07                	jne    c0003c1a <follow_path+0x20>
c0003c13:	40                   	inc    eax
c0003c14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c18:	eb ed                	jmp    c0003c07 <follow_path+0xd>
c0003c1a:	83 fa 5c             	cmp    edx,0x5c
c0003c1d:	74 f4                	je     c0003c13 <follow_path+0x19>
c0003c1f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003c26:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003c29:	77 3e                	ja     c0003c69 <follow_path+0x6f>
c0003c2b:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003c2f:	31 d2                	xor    edx,edx
c0003c31:	89 d8                	mov    eax,ebx
c0003c33:	e8 ff f8 ff ff       	call   c0003537 <dir_sdi>
c0003c38:	eb 57                	jmp    c0003c91 <follow_path+0x97>
c0003c3a:	89 d8                	mov    eax,ebx
c0003c3c:	e8 6b fe ff ff       	call   c0003aac <dir_find>
c0003c41:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c44:	85 c0                	test   eax,eax
c0003c46:	75 32                	jne    c0003c7a <follow_path+0x80>
c0003c48:	80 e2 04             	and    dl,0x4
c0003c4b:	75 44                	jne    c0003c91 <follow_path+0x97>
c0003c4d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c51:	74 39                	je     c0003c8c <follow_path+0x92>
c0003c53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c56:	25 ff 01 00 00       	and    eax,0x1ff
c0003c5b:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c5f:	8a 06                	mov    al,BYTE PTR [esi]
c0003c61:	e8 7b f7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003c66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c69:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c6d:	89 d8                	mov    eax,ebx
c0003c6f:	e8 8e ef ff ff       	call   c0002c02 <create_name>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 c2                	je     c0003c3a <follow_path+0x40>
c0003c78:	eb 17                	jmp    c0003c91 <follow_path+0x97>
c0003c7a:	83 f8 04             	cmp    eax,0x4
c0003c7d:	75 12                	jne    c0003c91 <follow_path+0x97>
c0003c7f:	80 e2 04             	and    dl,0x4
c0003c82:	ba 05 00 00 00       	mov    edx,0x5
c0003c87:	0f 44 c2             	cmove  eax,edx
c0003c8a:	eb 05                	jmp    c0003c91 <follow_path+0x97>
c0003c8c:	b8 05 00 00 00       	mov    eax,0x5
c0003c91:	83 c4 14             	add    esp,0x14
c0003c94:	5b                   	pop    ebx
c0003c95:	5e                   	pop    esi
c0003c96:	c3                   	ret    

c0003c97 <dir_register>:
c0003c97:	55                   	push   ebp
c0003c98:	57                   	push   edi
c0003c99:	56                   	push   esi
c0003c9a:	be 06 00 00 00       	mov    esi,0x6
c0003c9f:	53                   	push   ebx
c0003ca0:	83 ec 2c             	sub    esp,0x2c
c0003ca3:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ca6:	80 e2 a0             	and    dl,0xa0
c0003ca9:	0f 85 66 01 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003caf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003cb7:	8b 38                	mov    edi,DWORD PTR [eax]
c0003cb9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003cbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cc0:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003cc5:	74 06                	je     c0003ccd <dir_register+0x36>
c0003cc7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003ccb:	eb ef                	jmp    c0003cbc <dir_register+0x25>
c0003ccd:	89 c3                	mov    ebx,eax
c0003ccf:	b9 0c 00 00 00       	mov    ecx,0xc
c0003cd4:	8d 40 20             	lea    eax,[eax+0x20]
c0003cd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003cdb:	89 c2                	mov    edx,eax
c0003cdd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ce1:	e8 36 e3 ff ff       	call   c000201c <mem_cpy>
c0003ce6:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ceb:	74 48                	je     c0003d35 <dir_register+0x9e>
c0003ced:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cf1:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf6:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cf9:	55                   	push   ebp
c0003cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cfe:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003d02:	e8 77 e6 ff ff       	call   c000237e <gen_numname>
c0003d07:	58                   	pop    eax
c0003d08:	89 d8                	mov    eax,ebx
c0003d0a:	e8 9d fd ff ff       	call   c0003aac <dir_find>
c0003d0f:	85 c0                	test   eax,eax
c0003d11:	89 c6                	mov    esi,eax
c0003d13:	75 10                	jne    c0003d25 <dir_register+0x8e>
c0003d15:	45                   	inc    ebp
c0003d16:	83 fd 64             	cmp    ebp,0x64
c0003d19:	75 db                	jne    c0003cf6 <dir_register+0x5f>
c0003d1b:	be 07 00 00 00       	mov    esi,0x7
c0003d20:	e9 f0 00 00 00       	jmp    c0003e15 <dir_register+0x17e>
c0003d25:	83 f8 04             	cmp    eax,0x4
c0003d28:	0f 85 e7 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d2e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003d32:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003d35:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d3a:	bd 01 00 00 00       	mov    ebp,0x1
c0003d3f:	74 13                	je     c0003d54 <dir_register+0xbd>
c0003d41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d45:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d4a:	31 d2                	xor    edx,edx
c0003d4c:	83 c0 0c             	add    eax,0xc
c0003d4f:	f7 f1                	div    ecx
c0003d51:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d54:	89 ea                	mov    edx,ebp
c0003d56:	89 d8                	mov    eax,ebx
c0003d58:	e8 6f fb ff ff       	call   c00038cc <dir_alloc>
c0003d5d:	85 c0                	test   eax,eax
c0003d5f:	89 c6                	mov    esi,eax
c0003d61:	0f 85 ae 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d67:	4d                   	dec    ebp
c0003d68:	74 6b                	je     c0003dd5 <dir_register+0x13e>
c0003d6a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d6d:	89 e8                	mov    eax,ebp
c0003d6f:	c1 e0 05             	shl    eax,0x5
c0003d72:	29 c2                	sub    edx,eax
c0003d74:	89 d8                	mov    eax,ebx
c0003d76:	e8 bc f7 ff ff       	call   c0003537 <dir_sdi>
c0003d7b:	85 c0                	test   eax,eax
c0003d7d:	89 c6                	mov    esi,eax
c0003d7f:	0f 85 90 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d89:	e8 b2 e6 ff ff       	call   c0002440 <sum_sfn>
c0003d8e:	0f b6 c0             	movzx  eax,al
c0003d91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d95:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d98:	89 f8                	mov    eax,edi
c0003d9a:	e8 b6 e7 ff ff       	call   c0002555 <move_window>
c0003d9f:	85 c0                	test   eax,eax
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	75 70                	jne    c0003e15 <dir_register+0x17e>
c0003da5:	83 ec 0c             	sub    esp,0xc
c0003da8:	89 e8                	mov    eax,ebp
c0003daa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dad:	0f b6 c8             	movzx  ecx,al
c0003db0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003db3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003db7:	e8 27 e5 ff ff       	call   c00022e3 <put_lfn>
c0003dbc:	31 d2                	xor    edx,edx
c0003dbe:	89 d8                	mov    eax,ebx
c0003dc0:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dc4:	e8 fe f9 ff ff       	call   c00037c7 <dir_next>
c0003dc9:	83 c4 10             	add    esp,0x10
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	89 c6                	mov    esi,eax
c0003dd0:	75 43                	jne    c0003e15 <dir_register+0x17e>
c0003dd2:	4d                   	dec    ebp
c0003dd3:	75 c0                	jne    c0003d95 <dir_register+0xfe>
c0003dd5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003dd8:	89 f8                	mov    eax,edi
c0003dda:	e8 76 e7 ff ff       	call   c0002555 <move_window>
c0003ddf:	85 c0                	test   eax,eax
c0003de1:	89 c6                	mov    esi,eax
c0003de3:	75 30                	jne    c0003e15 <dir_register+0x17e>
c0003de5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003de8:	b9 20 00 00 00       	mov    ecx,0x20
c0003ded:	31 d2                	xor    edx,edx
c0003def:	e8 3d e2 ff ff       	call   c0002031 <mem_set>
c0003df4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e00:	e8 17 e2 ff ff       	call   c000201c <mem_cpy>
c0003e05:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003e08:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003e0b:	83 e0 18             	and    eax,0x18
c0003e0e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003e11:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003e15:	83 c4 2c             	add    esp,0x2c
c0003e18:	89 f0                	mov    eax,esi
c0003e1a:	5b                   	pop    ebx
c0003e1b:	5e                   	pop    esi
c0003e1c:	5f                   	pop    edi
c0003e1d:	5d                   	pop    ebp
c0003e1e:	c3                   	ret    

c0003e1f <f_mount>:
c0003e1f:	53                   	push   ebx
c0003e20:	83 ec 18             	sub    esp,0x18
c0003e23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003e27:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003e2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003e2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003e33:	e8 28 e6 ff ff       	call   c0002460 <get_ldnumber>
c0003e38:	89 c2                	mov    edx,eax
c0003e3a:	b8 0b 00 00 00       	mov    eax,0xb
c0003e3f:	85 d2                	test   edx,edx
c0003e41:	78 39                	js     c0003e7c <f_mount+0x5d>
c0003e43:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003e4a:	85 c0                	test   eax,eax
c0003e4c:	74 03                	je     c0003e51 <f_mount+0x32>
c0003e4e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e55:	85 c0                	test   eax,eax
c0003e57:	74 03                	je     c0003e5c <f_mount+0x3d>
c0003e59:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e60:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003e67:	31 c0                	xor    eax,eax
c0003e69:	84 db                	test   bl,bl
c0003e6b:	74 0f                	je     c0003e7c <f_mount+0x5d>
c0003e6d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e71:	31 c9                	xor    ecx,ecx
c0003e73:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e77:	e8 36 e8 ff ff       	call   c00026b2 <mount_volume>
c0003e7c:	83 c4 18             	add    esp,0x18
c0003e7f:	5b                   	pop    ebx
c0003e80:	c3                   	ret    

c0003e81 <f_open>:
c0003e81:	55                   	push   ebp
c0003e82:	b8 09 00 00 00       	mov    eax,0x9
c0003e87:	57                   	push   edi
c0003e88:	56                   	push   esi
c0003e89:	53                   	push   ebx
c0003e8a:	83 ec 5c             	sub    esp,0x5c
c0003e8d:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e95:	85 db                	test   ebx,ebx
c0003e97:	0f 84 9f 02 00 00    	je     c000413c <f_open+0x2bb>
c0003e9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ea1:	89 fd                	mov    ebp,edi
c0003ea3:	83 e5 3f             	and    ebp,0x3f
c0003ea6:	89 e8                	mov    eax,ebp
c0003ea8:	89 ee                	mov    esi,ebp
c0003eaa:	0f b6 c8             	movzx  ecx,al
c0003ead:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003eb1:	e8 fc e7 ff ff       	call   c00026b2 <mount_volume>
c0003eb6:	85 c0                	test   eax,eax
c0003eb8:	0f 85 78 02 00 00    	jne    c0004136 <f_open+0x2b5>
c0003ebe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec2:	83 ec 0c             	sub    esp,0xc
c0003ec5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ec9:	68 00 02 00 00       	push   0x200
c0003ece:	e8 61 1f 00 00       	call   c0005e34 <ff_memalloc>
c0003ed3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003ed7:	83 c4 10             	add    esp,0x10
c0003eda:	b8 11 00 00 00       	mov    eax,0x11
c0003edf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ee4:	0f 84 52 02 00 00    	je     c000413c <f_open+0x2bb>
c0003eea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ef2:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ef6:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ef9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003efd:	e8 f8 fc ff ff       	call   c0003bfa <follow_path>
c0003f02:	85 c0                	test   eax,eax
c0003f04:	75 0d                	jne    c0003f13 <f_open+0x92>
c0003f06:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003f0b:	ba 06 00 00 00       	mov    edx,0x6
c0003f10:	0f 45 c2             	cmovne eax,edx
c0003f13:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003f19:	0f 84 d5 00 00 00    	je     c0003ff4 <f_open+0x173>
c0003f1f:	85 c0                	test   eax,eax
c0003f21:	74 21                	je     c0003f44 <f_open+0xc3>
c0003f23:	83 f8 04             	cmp    eax,0x4
c0003f26:	0f 85 ef 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f30:	e8 62 fd ff ff       	call   c0003c97 <dir_register>
c0003f35:	85 c0                	test   eax,eax
c0003f37:	0f 85 de 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f3d:	83 cd 08             	or     ebp,0x8
c0003f40:	89 ee                	mov    esi,ebp
c0003f42:	eb 2c                	jmp    c0003f70 <f_open+0xef>
c0003f44:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f48:	b8 07 00 00 00       	mov    eax,0x7
c0003f4d:	80 e2 11             	and    dl,0x11
c0003f50:	0f 85 c5 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f56:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f5c:	b8 08 00 00 00       	mov    eax,0x8
c0003f61:	0f 85 b4 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f67:	83 e7 08             	and    edi,0x8
c0003f6a:	0f 84 b1 00 00 00    	je     c0004021 <f_open+0x1a0>
c0003f70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f74:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f78:	8a 00                	mov    al,BYTE PTR [eax]
c0003f7a:	89 ea                	mov    edx,ebp
c0003f7c:	e8 60 f4 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003f81:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f86:	89 c7                	mov    edi,eax
c0003f88:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f8b:	e8 89 e0 ff ff       	call   c0002019 <st_dword>
c0003f90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f94:	31 c9                	xor    ecx,ecx
c0003f96:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003fa2:	e8 63 f4 ff ff       	call   c000340a <st_clust.isra.1>
c0003fa7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003fab:	31 d2                	xor    edx,edx
c0003fad:	83 c0 1c             	add    eax,0x1c
c0003fb0:	e8 64 e0 ff ff       	call   c0002019 <st_dword>
c0003fb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fb9:	85 ff                	test   edi,edi
c0003fbb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003fbf:	74 60                	je     c0004021 <f_open+0x1a0>
c0003fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fc5:	31 c9                	xor    ecx,ecx
c0003fc7:	89 fa                	mov    edx,edi
c0003fc9:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003fcc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003fd0:	e8 64 f7 ff ff       	call   c0003739 <remove_chain>
c0003fd5:	85 c0                	test   eax,eax
c0003fd7:	0f 85 3e 01 00 00    	jne    c000411b <f_open+0x29a>
c0003fdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fe1:	89 ea                	mov    edx,ebp
c0003fe3:	4f                   	dec    edi
c0003fe4:	e8 6c e5 ff ff       	call   c0002555 <move_window>
c0003fe9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fed:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ff0:	85 c0                	test   eax,eax
c0003ff2:	eb 27                	jmp    c000401b <f_open+0x19a>
c0003ff4:	85 c0                	test   eax,eax
c0003ff6:	0f 85 1f 01 00 00    	jne    c000411b <f_open+0x29a>
c0003ffc:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004000:	b8 04 00 00 00       	mov    eax,0x4
c0004005:	f6 c2 10             	test   dl,0x10
c0004008:	0f 85 0d 01 00 00    	jne    c000411b <f_open+0x29a>
c000400e:	83 e7 02             	and    edi,0x2
c0004011:	74 0e                	je     c0004021 <f_open+0x1a0>
c0004013:	b8 07 00 00 00       	mov    eax,0x7
c0004018:	80 e2 01             	and    dl,0x1
c000401b:	0f 85 fa 00 00 00    	jne    c000411b <f_open+0x29a>
c0004021:	f7 c6 08 00 00 00    	test   esi,0x8
c0004027:	74 03                	je     c000402c <f_open+0x1ab>
c0004029:	83 ce 40             	or     esi,0x40
c000402c:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004030:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004034:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0004037:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000403a:	89 fa                	mov    edx,edi
c000403c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000403f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004042:	e8 9a f3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004047:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000404a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000404d:	e8 ab df ff ff       	call   c0001ffd <ld_dword>
c0004052:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004055:	31 d2                	xor    edx,edx
c0004057:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004059:	b9 00 02 00 00       	mov    ecx,0x200
c000405e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004061:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004065:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004069:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004070:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004077:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000407b:	89 f0                	mov    eax,esi
c000407d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004080:	89 f8                	mov    eax,edi
c0004082:	e8 aa df ff ff       	call   c0002031 <mem_set>
c0004087:	83 e6 20             	and    esi,0x20
c000408a:	75 07                	jne    c0004093 <f_open+0x212>
c000408c:	31 c0                	xor    eax,eax
c000408e:	e9 88 00 00 00       	jmp    c000411b <f_open+0x29a>
c0004093:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0004096:	85 f6                	test   esi,esi
c0004098:	74 f2                	je     c000408c <f_open+0x20b>
c000409a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000409d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040a1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00040a4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00040a8:	31 c0                	xor    eax,eax
c00040aa:	c1 e5 09             	shl    ebp,0x9
c00040ad:	85 c0                	test   eax,eax
c00040af:	75 23                	jne    c00040d4 <f_open+0x253>
c00040b1:	39 ee                	cmp    esi,ebp
c00040b3:	76 1f                	jbe    c00040d4 <f_open+0x253>
c00040b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040b7:	e8 76 f3 ff ff       	call   c0003432 <get_fat.isra.2>
c00040bc:	89 c2                	mov    edx,eax
c00040be:	b8 02 00 00 00       	mov    eax,0x2
c00040c3:	83 fa 01             	cmp    edx,0x1
c00040c6:	76 08                	jbe    c00040d0 <f_open+0x24f>
c00040c8:	31 c0                	xor    eax,eax
c00040ca:	83 fa ff             	cmp    edx,0xffffffff
c00040cd:	0f 94 c0             	sete   al
c00040d0:	29 ee                	sub    esi,ebp
c00040d2:	eb d9                	jmp    c00040ad <f_open+0x22c>
c00040d4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00040d7:	85 c0                	test   eax,eax
c00040d9:	75 40                	jne    c000411b <f_open+0x29a>
c00040db:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00040e1:	74 a9                	je     c000408c <f_open+0x20b>
c00040e3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00040e7:	89 e8                	mov    eax,ebp
c00040e9:	e8 58 e1 ff ff       	call   c0002246 <clst2sect>
c00040ee:	89 c2                	mov    edx,eax
c00040f0:	b8 02 00 00 00       	mov    eax,0x2
c00040f5:	85 d2                	test   edx,edx
c00040f7:	74 22                	je     c000411b <f_open+0x29a>
c00040f9:	c1 ee 09             	shr    esi,0x9
c00040fc:	8d 04 16             	lea    eax,[esi+edx*1]
c00040ff:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004102:	6a 01                	push   0x1
c0004104:	50                   	push   eax
c0004105:	57                   	push   edi
c0004106:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000410a:	50                   	push   eax
c000410b:	e8 95 de ff ff       	call   c0001fa5 <disk_read>
c0004110:	83 c4 10             	add    esp,0x10
c0004113:	85 c0                	test   eax,eax
c0004115:	0f 95 c0             	setne  al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000411f:	83 ec 0c             	sub    esp,0xc
c0004122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0004126:	e8 21 1d 00 00       	call   c0005e4c <ff_memfree>
c000412b:	83 c4 10             	add    esp,0x10
c000412e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004132:	85 c0                	test   eax,eax
c0004134:	74 06                	je     c000413c <f_open+0x2bb>
c0004136:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000413c:	83 c4 5c             	add    esp,0x5c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_read>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c000415b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004161:	89 d8                	mov    eax,ebx
c0004163:	e8 44 e3 ff ff       	call   c00024ac <validate>
c0004168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000416c:	85 c0                	test   eax,eax
c000416e:	0f 85 a5 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004174:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0004178:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000417c:	85 c0                	test   eax,eax
c000417e:	0f 85 95 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004184:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004188:	0f 84 83 01 00 00    	je     c0004311 <f_read+0x1cd>
c000418e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004191:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004194:	39 f8                	cmp    eax,edi
c0004196:	0f 46 f8             	cmovbe edi,eax
c0004199:	85 ff                	test   edi,edi
c000419b:	0f 84 78 01 00 00    	je     c0004319 <f_read+0x1d5>
c00041a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a4:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a9:	0f 85 2b 01 00 00    	jne    c00042da <f_read+0x196>
c00041af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b3:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b7:	89 c2                	mov    edx,eax
c00041b9:	c1 ea 09             	shr    edx,0x9
c00041bc:	4d                   	dec    ebp
c00041bd:	21 d5                	and    ebp,edx
c00041bf:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c3:	75 42                	jne    c0004207 <f_read+0xc3>
c00041c5:	85 c0                	test   eax,eax
c00041c7:	75 05                	jne    c00041ce <f_read+0x8a>
c00041c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041cc:	eb 0a                	jmp    c00041d8 <f_read+0x94>
c00041ce:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041d3:	e8 5a f2 ff ff       	call   c0003432 <get_fat.isra.2>
c00041d8:	83 f8 01             	cmp    eax,0x1
c00041db:	77 11                	ja     c00041ee <f_read+0xaa>
c00041dd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041e1:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c00041e9:	e9 2b 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c00041ee:	83 f8 ff             	cmp    eax,0xffffffff
c00041f1:	75 11                	jne    c0004204 <f_read+0xc0>
c00041f3:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041f7:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00041ff:	e9 15 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c0004204:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004207:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000420b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000420e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004212:	89 c8                	mov    eax,ecx
c0004214:	e8 2d e0 ff ff       	call   c0002246 <clst2sect>
c0004219:	85 c0                	test   eax,eax
c000421b:	74 c0                	je     c00041dd <f_read+0x99>
c000421d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004221:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004227:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000422a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000422e:	76 58                	jbe    c0004288 <f_read+0x144>
c0004230:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004234:	89 fe                	mov    esi,edi
c0004236:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000423a:	c1 ee 09             	shr    esi,0x9
c000423d:	01 f2                	add    edx,esi
c000423f:	39 c2                	cmp    edx,eax
c0004241:	76 06                	jbe    c0004249 <f_read+0x105>
c0004243:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004247:	89 c6                	mov    esi,eax
c0004249:	56                   	push   esi
c000424a:	55                   	push   ebp
c000424b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000424f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004253:	50                   	push   eax
c0004254:	e8 4c dd ff ff       	call   c0001fa5 <disk_read>
c0004259:	83 c4 10             	add    esp,0x10
c000425c:	85 c0                	test   eax,eax
c000425e:	75 93                	jne    c00041f3 <f_read+0xaf>
c0004260:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004264:	74 1d                	je     c0004283 <f_read+0x13f>
c0004266:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004269:	29 e8                	sub    eax,ebp
c000426b:	39 f0                	cmp    eax,esi
c000426d:	73 14                	jae    c0004283 <f_read+0x13f>
c000426f:	c1 e0 09             	shl    eax,0x9
c0004272:	b9 00 02 00 00       	mov    ecx,0x200
c0004277:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000427b:	8d 53 28             	lea    edx,[ebx+0x28]
c000427e:	e8 99 dd ff ff       	call   c000201c <mem_cpy>
c0004283:	c1 e6 09             	shl    esi,0x9
c0004286:	eb 75                	jmp    c00042fd <f_read+0x1b9>
c0004288:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000428b:	39 e8                	cmp    eax,ebp
c000428d:	74 48                	je     c00042d7 <f_read+0x193>
c000428f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004293:	8d 73 28             	lea    esi,[ebx+0x28]
c0004296:	74 22                	je     c00042ba <f_read+0x176>
c0004298:	6a 01                	push   0x1
c000429a:	50                   	push   eax
c000429b:	56                   	push   esi
c000429c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00042a0:	50                   	push   eax
c00042a1:	e8 15 dd ff ff       	call   c0001fbb <disk_write>
c00042a6:	83 c4 10             	add    esp,0x10
c00042a9:	85 c0                	test   eax,eax
c00042ab:	0f 85 42 ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042b1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042b4:	83 e0 7f             	and    eax,0x7f
c00042b7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ba:	6a 01                	push   0x1
c00042bc:	55                   	push   ebp
c00042bd:	56                   	push   esi
c00042be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042c6:	50                   	push   eax
c00042c7:	e8 d9 dc ff ff       	call   c0001fa5 <disk_read>
c00042cc:	83 c4 10             	add    esp,0x10
c00042cf:	85 c0                	test   eax,eax
c00042d1:	0f 85 1c ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042d7:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00042da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042dd:	be 00 02 00 00       	mov    esi,0x200
c00042e2:	25 ff 01 00 00       	and    eax,0x1ff
c00042e7:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042eb:	29 c6                	sub    esi,eax
c00042ed:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042f1:	39 f7                	cmp    edi,esi
c00042f3:	0f 46 f7             	cmovbe esi,edi
c00042f6:	89 f1                	mov    ecx,esi
c00042f8:	e8 1f dd ff ff       	call   c000201c <mem_cpy>
c00042fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004301:	29 f7                	sub    edi,esi
c0004303:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004307:	01 30                	add    DWORD PTR [eax],esi
c0004309:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000430c:	e9 88 fe ff ff       	jmp    c0004199 <f_read+0x55>
c0004311:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000431d:	83 c4 2c             	add    esp,0x2c
c0004320:	5b                   	pop    ebx
c0004321:	5e                   	pop    esi
c0004322:	5f                   	pop    edi
c0004323:	5d                   	pop    ebp
c0004324:	c3                   	ret    

c0004325 <f_write>:
c0004325:	55                   	push   ebp
c0004326:	57                   	push   edi
c0004327:	56                   	push   esi
c0004328:	53                   	push   ebx
c0004329:	83 ec 2c             	sub    esp,0x2c
c000432c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004330:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004334:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004338:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000433e:	89 d8                	mov    eax,ebx
c0004340:	e8 67 e1 ff ff       	call   c00024ac <validate>
c0004345:	85 c0                	test   eax,eax
c0004347:	89 c7                	mov    edi,eax
c0004349:	0f 85 13 02 00 00    	jne    c0004562 <f_write+0x23d>
c000434f:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004353:	85 ff                	test   edi,edi
c0004355:	0f 85 07 02 00 00    	jne    c0004562 <f_write+0x23d>
c000435b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435f:	0f 84 f8 01 00 00    	je     c000455d <f_write+0x238>
c0004365:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004368:	89 c1                	mov    ecx,eax
c000436a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000436e:	0f 83 ed 00 00 00    	jae    c0004461 <f_write+0x13c>
c0004374:	f7 d0                	not    eax
c0004376:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000437a:	e9 e2 00 00 00       	jmp    c0004461 <f_write+0x13c>
c000437f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004382:	a9 ff 01 00 00       	test   eax,0x1ff
c0004387:	0f 85 9b 01 00 00    	jne    c0004528 <f_write+0x203>
c000438d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004391:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0004395:	89 c2                	mov    edx,eax
c0004397:	c1 ea 09             	shr    edx,0x9
c000439a:	4d                   	dec    ebp
c000439b:	21 d5                	and    ebp,edx
c000439d:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00043a1:	0f 84 c7 00 00 00    	je     c000446e <f_write+0x149>
c00043a7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043ab:	0f 85 23 01 00 00    	jne    c00044d4 <f_write+0x1af>
c00043b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00043b5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043bc:	89 c8                	mov    eax,ecx
c00043be:	e8 83 de ff ff       	call   c0002246 <clst2sect>
c00043c3:	85 c0                	test   eax,eax
c00043c5:	0f 84 d3 00 00 00    	je     c000449e <f_write+0x179>
c00043cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00043cf:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043d7:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00043da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043de:	0f 86 1c 01 00 00    	jbe    c0004500 <f_write+0x1db>
c00043e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043ec:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043f0:	c1 ee 09             	shr    esi,0x9
c00043f3:	01 f2                	add    edx,esi
c00043f5:	39 c2                	cmp    edx,eax
c00043f7:	76 06                	jbe    c00043ff <f_write+0xda>
c00043f9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043fd:	89 c6                	mov    esi,eax
c00043ff:	56                   	push   esi
c0004400:	55                   	push   ebp
c0004401:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004405:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004409:	50                   	push   eax
c000440a:	e8 ac db ff ff       	call   c0001fbb <disk_write>
c000440f:	83 c4 10             	add    esp,0x10
c0004412:	85 c0                	test   eax,eax
c0004414:	0f 85 97 00 00 00    	jne    c00044b1 <f_write+0x18c>
c000441a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000441d:	29 ea                	sub    edx,ebp
c000441f:	39 f2                	cmp    edx,esi
c0004421:	73 1d                	jae    c0004440 <f_write+0x11b>
c0004423:	c1 e2 09             	shl    edx,0x9
c0004426:	b9 00 02 00 00       	mov    ecx,0x200
c000442b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000442f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004432:	e8 e5 db ff ff       	call   c000201c <mem_cpy>
c0004437:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000443a:	83 e0 7f             	and    eax,0x7f
c000443d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004440:	c1 e6 09             	shl    esi,0x9
c0004443:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004447:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000444b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000444f:	01 30                	add    DWORD PTR [eax],esi
c0004451:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004454:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004457:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000445a:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000445e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004461:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004466:	0f 85 13 ff ff ff    	jne    c000437f <f_write+0x5a>
c000446c:	eb 1d                	jmp    c000448b <f_write+0x166>
c000446e:	85 c0                	test   eax,eax
c0004470:	75 0b                	jne    c000447d <f_write+0x158>
c0004472:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004475:	31 d2                	xor    edx,edx
c0004477:	85 c0                	test   eax,eax
c0004479:	75 1e                	jne    c0004499 <f_write+0x174>
c000447b:	eb 03                	jmp    c0004480 <f_write+0x15b>
c000447d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004480:	89 d8                	mov    eax,ebx
c0004482:	e8 78 f1 ff ff       	call   c00035ff <create_chain>
c0004487:	85 c0                	test   eax,eax
c0004489:	75 0e                	jne    c0004499 <f_write+0x174>
c000448b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000448e:	83 c8 40             	or     eax,0x40
c0004491:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004494:	e9 c9 00 00 00       	jmp    c0004562 <f_write+0x23d>
c0004499:	83 f8 01             	cmp    eax,0x1
c000449c:	75 0e                	jne    c00044ac <f_write+0x187>
c000449e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044a2:	bf 02 00 00 00       	mov    edi,0x2
c00044a7:	e9 b6 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044ac:	83 f8 ff             	cmp    eax,0xffffffff
c00044af:	75 0e                	jne    c00044bf <f_write+0x19a>
c00044b1:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00044b5:	bf 01 00 00 00       	mov    edi,0x1
c00044ba:	e9 a3 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044bf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044c6:	0f 85 db fe ff ff    	jne    c00043a7 <f_write+0x82>
c00044cc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044cf:	e9 d3 fe ff ff       	jmp    c00043a7 <f_write+0x82>
c00044d4:	6a 01                	push   0x1
c00044d6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044d9:	8d 43 28             	lea    eax,[ebx+0x28]
c00044dc:	50                   	push   eax
c00044dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044e5:	50                   	push   eax
c00044e6:	e8 d0 da ff ff       	call   c0001fbb <disk_write>
c00044eb:	83 c4 10             	add    esp,0x10
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 bf                	jne    c00044b1 <f_write+0x18c>
c00044f2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044f5:	83 e0 7f             	and    eax,0x7f
c00044f8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044fb:	e9 b1 fe ff ff       	jmp    c00043b1 <f_write+0x8c>
c0004500:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004503:	74 20                	je     c0004525 <f_write+0x200>
c0004505:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004508:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000450b:	76 18                	jbe    c0004525 <f_write+0x200>
c000450d:	6a 01                	push   0x1
c000450f:	55                   	push   ebp
c0004510:	8d 43 28             	lea    eax,[ebx+0x28]
c0004513:	50                   	push   eax
c0004514:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004518:	50                   	push   eax
c0004519:	e8 87 da ff ff       	call   c0001fa5 <disk_read>
c000451e:	83 c4 10             	add    esp,0x10
c0004521:	85 c0                	test   eax,eax
c0004523:	75 8c                	jne    c00044b1 <f_write+0x18c>
c0004525:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004528:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000452b:	be 00 02 00 00       	mov    esi,0x200
c0004530:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004534:	25 ff 01 00 00       	and    eax,0x1ff
c0004539:	29 c6                	sub    esi,eax
c000453b:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000453f:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004543:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004548:	89 f1                	mov    ecx,esi
c000454a:	e8 cd da ff ff       	call   c000201c <mem_cpy>
c000454f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004552:	83 c8 80             	or     eax,0xffffff80
c0004555:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004558:	e9 e6 fe ff ff       	jmp    c0004443 <f_write+0x11e>
c000455d:	bf 07 00 00 00       	mov    edi,0x7
c0004562:	83 c4 2c             	add    esp,0x2c
c0004565:	89 f8                	mov    eax,edi
c0004567:	5b                   	pop    ebx
c0004568:	5e                   	pop    esi
c0004569:	5f                   	pop    edi
c000456a:	5d                   	pop    ebp
c000456b:	c3                   	ret    

c000456c <f_sync>:
c000456c:	56                   	push   esi
c000456d:	53                   	push   ebx
c000456e:	83 ec 14             	sub    esp,0x14
c0004571:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004575:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004579:	89 d8                	mov    eax,ebx
c000457b:	e8 2c df ff ff       	call   c00024ac <validate>
c0004580:	85 c0                	test   eax,eax
c0004582:	0f 85 a3 00 00 00    	jne    c000462b <f_sync+0xbf>
c0004588:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000458b:	f6 c2 40             	test   dl,0x40
c000458e:	0f 84 97 00 00 00    	je     c000462b <f_sync+0xbf>
c0004594:	80 e2 80             	and    dl,0x80
c0004597:	74 2e                	je     c00045c7 <f_sync+0x5b>
c0004599:	6a 01                	push   0x1
c000459b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000459e:	8d 43 28             	lea    eax,[ebx+0x28]
c00045a1:	50                   	push   eax
c00045a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045aa:	50                   	push   eax
c00045ab:	e8 0b da ff ff       	call   c0001fbb <disk_write>
c00045b0:	83 c4 10             	add    esp,0x10
c00045b3:	89 c2                	mov    edx,eax
c00045b5:	b8 01 00 00 00       	mov    eax,0x1
c00045ba:	85 d2                	test   edx,edx
c00045bc:	75 6d                	jne    c000462b <f_sync+0xbf>
c00045be:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045c1:	83 e0 7f             	and    eax,0x7f
c00045c4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045c7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045ce:	e8 82 df ff ff       	call   c0002555 <move_window>
c00045d3:	85 c0                	test   eax,eax
c00045d5:	75 54                	jne    c000462b <f_sync+0xbf>
c00045d7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045da:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045dd:	89 f2                	mov    edx,esi
c00045df:	83 c8 20             	or     eax,0x20
c00045e2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045e5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045ea:	e8 1b ee ff ff       	call   c000340a <st_clust.isra.1>
c00045ef:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045f2:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045f5:	e8 1f da ff ff       	call   c0002019 <st_dword>
c00045fa:	8d 46 16             	lea    eax,[esi+0x16]
c00045fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004602:	e8 12 da ff ff       	call   c0002019 <st_dword>
c0004607:	8d 46 12             	lea    eax,[esi+0x12]
c000460a:	31 d2                	xor    edx,edx
c000460c:	e8 04 da ff ff       	call   c0002015 <st_word>
c0004611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004615:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461d:	e8 68 e9 ff ff       	call   c0002f8a <sync_fs>
c0004622:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004625:	83 e2 bf             	and    edx,0xffffffbf
c0004628:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000462b:	83 c4 14             	add    esp,0x14
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <f_close>:
c0004631:	53                   	push   ebx
c0004632:	83 ec 24             	sub    esp,0x24
c0004635:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004639:	53                   	push   ebx
c000463a:	e8 2d ff ff ff       	call   c000456c <f_sync>
c000463f:	83 c4 10             	add    esp,0x10
c0004642:	85 c0                	test   eax,eax
c0004644:	75 15                	jne    c000465b <f_close+0x2a>
c0004646:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000464a:	89 d8                	mov    eax,ebx
c000464c:	e8 5b de ff ff       	call   c00024ac <validate>
c0004651:	85 c0                	test   eax,eax
c0004653:	75 06                	jne    c000465b <f_close+0x2a>
c0004655:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000465b:	83 c4 18             	add    esp,0x18
c000465e:	5b                   	pop    ebx
c000465f:	c3                   	ret    

c0004660 <f_lseek>:
c0004660:	55                   	push   ebp
c0004661:	57                   	push   edi
c0004662:	56                   	push   esi
c0004663:	53                   	push   ebx
c0004664:	83 ec 2c             	sub    esp,0x2c
c0004667:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000466b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000466f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004673:	89 d8                	mov    eax,ebx
c0004675:	e8 32 de ff ff       	call   c00024ac <validate>
c000467a:	85 c0                	test   eax,eax
c000467c:	89 c5                	mov    ebp,eax
c000467e:	0f 85 82 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004684:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004688:	85 ed                	test   ebp,ebp
c000468a:	0f 85 76 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004690:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004693:	39 f0                	cmp    eax,esi
c0004695:	73 07                	jae    c000469e <f_lseek+0x3e>
c0004697:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000469b:	0f 44 f0             	cmove  esi,eax
c000469e:	85 f6                	test   esi,esi
c00046a0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00046a3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00046aa:	75 07                	jne    c00046b3 <f_lseek+0x53>
c00046ac:	31 f6                	xor    esi,esi
c00046ae:	e9 e2 00 00 00       	jmp    c0004795 <f_lseek+0x135>
c00046b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b7:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00046bb:	c1 e7 09             	shl    edi,0x9
c00046be:	85 c9                	test   ecx,ecx
c00046c0:	74 28                	je     c00046ea <f_lseek+0x8a>
c00046c2:	31 d2                	xor    edx,edx
c00046c4:	49                   	dec    ecx
c00046c5:	8d 46 ff             	lea    eax,[esi-0x1]
c00046c8:	f7 f7                	div    edi
c00046ca:	31 d2                	xor    edx,edx
c00046cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046d0:	89 c8                	mov    eax,ecx
c00046d2:	f7 f7                	div    edi
c00046d4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046d8:	72 10                	jb     c00046ea <f_lseek+0x8a>
c00046da:	89 f8                	mov    eax,edi
c00046dc:	f7 d8                	neg    eax
c00046de:	21 c1                	and    ecx,eax
c00046e0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046e3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046e6:	29 ce                	sub    esi,ecx
c00046e8:	eb 3c                	jmp    c0004726 <f_lseek+0xc6>
c00046ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046ed:	85 c0                	test   eax,eax
c00046ef:	75 32                	jne    c0004723 <f_lseek+0xc3>
c00046f1:	31 d2                	xor    edx,edx
c00046f3:	89 d8                	mov    eax,ebx
c00046f5:	e8 05 ef ff ff       	call   c00035ff <create_chain>
c00046fa:	83 f8 01             	cmp    eax,0x1
c00046fd:	75 0e                	jne    c000470d <f_lseek+0xad>
c00046ff:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004703:	bd 02 00 00 00       	mov    ebp,0x2
c0004708:	e9 f9 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c000470d:	83 f8 ff             	cmp    eax,0xffffffff
c0004710:	75 0e                	jne    c0004720 <f_lseek+0xc0>
c0004712:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004716:	bd 01 00 00 00       	mov    ebp,0x1
c000471b:	e9 e6 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c0004720:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004723:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004726:	85 c0                	test   eax,eax
c0004728:	74 82                	je     c00046ac <f_lseek+0x4c>
c000472a:	39 fe                	cmp    esi,edi
c000472c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000472f:	76 3d                	jbe    c000476e <f_lseek+0x10e>
c0004731:	01 fa                	add    edx,edi
c0004733:	29 fe                	sub    esi,edi
c0004735:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004739:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000473c:	89 c2                	mov    edx,eax
c000473e:	74 0d                	je     c000474d <f_lseek+0xed>
c0004740:	89 d8                	mov    eax,ebx
c0004742:	e8 b8 ee ff ff       	call   c00035ff <create_chain>
c0004747:	85 c0                	test   eax,eax
c0004749:	75 09                	jne    c0004754 <f_lseek+0xf4>
c000474b:	eb 1f                	jmp    c000476c <f_lseek+0x10c>
c000474d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000474f:	e8 de ec ff ff       	call   c0003432 <get_fat.isra.2>
c0004754:	83 f8 ff             	cmp    eax,0xffffffff
c0004757:	74 b9                	je     c0004712 <f_lseek+0xb2>
c0004759:	83 f8 01             	cmp    eax,0x1
c000475c:	76 a1                	jbe    c00046ff <f_lseek+0x9f>
c000475e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004762:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004765:	76 98                	jbe    c00046ff <f_lseek+0x9f>
c0004767:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000476a:	eb be                	jmp    c000472a <f_lseek+0xca>
c000476c:	31 f6                	xor    esi,esi
c000476e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004771:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004777:	0f 84 2f ff ff ff    	je     c00046ac <f_lseek+0x4c>
c000477d:	89 c2                	mov    edx,eax
c000477f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004783:	e8 be da ff ff       	call   c0002246 <clst2sect>
c0004788:	85 c0                	test   eax,eax
c000478a:	0f 84 6f ff ff ff    	je     c00046ff <f_lseek+0x9f>
c0004790:	c1 ee 09             	shr    esi,0x9
c0004793:	01 c6                	add    esi,eax
c0004795:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004798:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000479b:	76 0c                	jbe    c00047a9 <f_lseek+0x149>
c000479d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00047a0:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00047a3:	83 ca 40             	or     edx,0x40
c00047a6:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00047a9:	a9 ff 01 00 00       	test   eax,0x1ff
c00047ae:	74 56                	je     c0004806 <f_lseek+0x1a6>
c00047b0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00047b3:	39 f0                	cmp    eax,esi
c00047b5:	74 4f                	je     c0004806 <f_lseek+0x1a6>
c00047b7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047bb:	8d 7b 28             	lea    edi,[ebx+0x28]
c00047be:	74 26                	je     c00047e6 <f_lseek+0x186>
c00047c0:	6a 01                	push   0x1
c00047c2:	50                   	push   eax
c00047c3:	57                   	push   edi
c00047c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047c8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047cc:	50                   	push   eax
c00047cd:	e8 e9 d7 ff ff       	call   c0001fbb <disk_write>
c00047d2:	83 c4 10             	add    esp,0x10
c00047d5:	85 c0                	test   eax,eax
c00047d7:	0f 85 35 ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c00047dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047e0:	83 e0 7f             	and    eax,0x7f
c00047e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047e6:	6a 01                	push   0x1
c00047e8:	56                   	push   esi
c00047e9:	57                   	push   edi
c00047ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047ee:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047f2:	50                   	push   eax
c00047f3:	e8 ad d7 ff ff       	call   c0001fa5 <disk_read>
c00047f8:	83 c4 10             	add    esp,0x10
c00047fb:	85 c0                	test   eax,eax
c00047fd:	0f 85 0f ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c0004803:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004806:	83 c4 2c             	add    esp,0x2c
c0004809:	89 e8                	mov    eax,ebp
c000480b:	5b                   	pop    ebx
c000480c:	5e                   	pop    esi
c000480d:	5f                   	pop    edi
c000480e:	5d                   	pop    ebp
c000480f:	c3                   	ret    

c0004810 <f_opendir>:
c0004810:	56                   	push   esi
c0004811:	b8 09 00 00 00       	mov    eax,0x9
c0004816:	53                   	push   ebx
c0004817:	83 ec 24             	sub    esp,0x24
c000481a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000481e:	85 db                	test   ebx,ebx
c0004820:	0f 84 af 00 00 00    	je     c00048d5 <f_opendir+0xc5>
c0004826:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000482a:	31 c9                	xor    ecx,ecx
c000482c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004830:	e8 7d de ff ff       	call   c00026b2 <mount_volume>
c0004835:	85 c0                	test   eax,eax
c0004837:	0f 85 92 00 00 00    	jne    c00048cf <f_opendir+0xbf>
c000483d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004841:	83 ec 0c             	sub    esp,0xc
c0004844:	89 03                	mov    DWORD PTR [ebx],eax
c0004846:	68 00 02 00 00       	push   0x200
c000484b:	e8 e4 15 00 00       	call   c0005e34 <ff_memalloc>
c0004850:	83 c4 10             	add    esp,0x10
c0004853:	89 c6                	mov    esi,eax
c0004855:	b8 11 00 00 00       	mov    eax,0x11
c000485a:	85 f6                	test   esi,esi
c000485c:	74 77                	je     c00048d5 <f_opendir+0xc5>
c000485e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004862:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004866:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004869:	89 d8                	mov    eax,ebx
c000486b:	e8 8a f3 ff ff       	call   c0003bfa <follow_path>
c0004870:	85 c0                	test   eax,eax
c0004872:	75 37                	jne    c00048ab <f_opendir+0x9b>
c0004874:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004878:	75 1c                	jne    c0004896 <f_opendir+0x86>
c000487a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000487e:	b8 05 00 00 00       	mov    eax,0x5
c0004883:	74 26                	je     c00048ab <f_opendir+0x9b>
c0004885:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004889:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000488c:	8a 00                	mov    al,BYTE PTR [eax]
c000488e:	e8 4e eb ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004893:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004896:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000489a:	31 d2                	xor    edx,edx
c000489c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00048a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00048a4:	89 d8                	mov    eax,ebx
c00048a6:	e8 8c ec ff ff       	call   c0003537 <dir_sdi>
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	83 ec 0c             	sub    esp,0xc
c00048b2:	56                   	push   esi
c00048b3:	e8 94 15 00 00       	call   c0005e4c <ff_memfree>
c00048b8:	83 c4 10             	add    esp,0x10
c00048bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048bf:	83 f8 04             	cmp    eax,0x4
c00048c2:	74 06                	je     c00048ca <f_opendir+0xba>
c00048c4:	85 c0                	test   eax,eax
c00048c6:	74 0d                	je     c00048d5 <f_opendir+0xc5>
c00048c8:	eb 05                	jmp    c00048cf <f_opendir+0xbf>
c00048ca:	b8 05 00 00 00       	mov    eax,0x5
c00048cf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048d5:	83 c4 24             	add    esp,0x24
c00048d8:	5b                   	pop    ebx
c00048d9:	5e                   	pop    esi
c00048da:	c3                   	ret    

c00048db <f_closedir>:
c00048db:	53                   	push   ebx
c00048dc:	83 ec 18             	sub    esp,0x18
c00048df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048e3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048e7:	89 d8                	mov    eax,ebx
c00048e9:	e8 be db ff ff       	call   c00024ac <validate>
c00048ee:	85 c0                	test   eax,eax
c00048f0:	75 06                	jne    c00048f8 <f_closedir+0x1d>
c00048f2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048f8:	83 c4 18             	add    esp,0x18
c00048fb:	5b                   	pop    ebx
c00048fc:	c3                   	ret    

c00048fd <f_readdir>:
c00048fd:	57                   	push   edi
c00048fe:	56                   	push   esi
c00048ff:	53                   	push   ebx
c0004900:	83 ec 20             	sub    esp,0x20
c0004903:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004907:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000490b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000490f:	89 d8                	mov    eax,ebx
c0004911:	e8 96 db ff ff       	call   c00024ac <validate>
c0004916:	85 c0                	test   eax,eax
c0004918:	75 6e                	jne    c0004988 <f_readdir+0x8b>
c000491a:	85 ff                	test   edi,edi
c000491c:	75 0b                	jne    c0004929 <f_readdir+0x2c>
c000491e:	31 d2                	xor    edx,edx
c0004920:	89 d8                	mov    eax,ebx
c0004922:	e8 10 ec ff ff       	call   c0003537 <dir_sdi>
c0004927:	eb 5f                	jmp    c0004988 <f_readdir+0x8b>
c0004929:	83 ec 0c             	sub    esp,0xc
c000492c:	68 00 02 00 00       	push   0x200
c0004931:	e8 fe 14 00 00       	call   c0005e34 <ff_memalloc>
c0004936:	83 c4 10             	add    esp,0x10
c0004939:	89 c6                	mov    esi,eax
c000493b:	b8 11 00 00 00       	mov    eax,0x11
c0004940:	85 f6                	test   esi,esi
c0004942:	74 44                	je     c0004988 <f_readdir+0x8b>
c0004944:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004948:	31 d2                	xor    edx,edx
c000494a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000494d:	89 d8                	mov    eax,ebx
c000494f:	e8 dd ef ff ff       	call   c0003931 <dir_read>
c0004954:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004959:	75 19                	jne    c0004974 <f_readdir+0x77>
c000495b:	89 fa                	mov    edx,edi
c000495d:	89 d8                	mov    eax,ebx
c000495f:	e8 7c e8 ff ff       	call   c00031e0 <get_fileinfo>
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 d8                	mov    eax,ebx
c0004968:	e8 5a ee ff ff       	call   c00037c7 <dir_next>
c000496d:	83 f8 04             	cmp    eax,0x4
c0004970:	75 02                	jne    c0004974 <f_readdir+0x77>
c0004972:	31 c0                	xor    eax,eax
c0004974:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004978:	83 ec 0c             	sub    esp,0xc
c000497b:	56                   	push   esi
c000497c:	e8 cb 14 00 00       	call   c0005e4c <ff_memfree>
c0004981:	83 c4 10             	add    esp,0x10
c0004984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004988:	83 c4 20             	add    esp,0x20
c000498b:	5b                   	pop    ebx
c000498c:	5e                   	pop    esi
c000498d:	5f                   	pop    edi
c000498e:	c3                   	ret    

c000498f <f_stat>:
c000498f:	57                   	push   edi
c0004990:	31 c9                	xor    ecx,ecx
c0004992:	56                   	push   esi
c0004993:	53                   	push   ebx
c0004994:	83 ec 30             	sub    esp,0x30
c0004997:	8d 44 24 40          	lea    eax,[esp+0x40]
c000499b:	89 e2                	mov    edx,esp
c000499d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00049a1:	e8 0c dd ff ff       	call   c00026b2 <mount_volume>
c00049a6:	85 c0                	test   eax,eax
c00049a8:	89 c3                	mov    ebx,eax
c00049aa:	75 59                	jne    c0004a05 <f_stat+0x76>
c00049ac:	83 ec 0c             	sub    esp,0xc
c00049af:	bb 11 00 00 00       	mov    ebx,0x11
c00049b4:	68 00 02 00 00       	push   0x200
c00049b9:	e8 76 14 00 00       	call   c0005e34 <ff_memalloc>
c00049be:	83 c4 10             	add    esp,0x10
c00049c1:	85 c0                	test   eax,eax
c00049c3:	89 c6                	mov    esi,eax
c00049c5:	74 3e                	je     c0004a05 <f_stat+0x76>
c00049c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ca:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049ce:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049d1:	89 e0                	mov    eax,esp
c00049d3:	e8 22 f2 ff ff       	call   c0003bfa <follow_path>
c00049d8:	85 c0                	test   eax,eax
c00049da:	89 c3                	mov    ebx,eax
c00049dc:	75 1b                	jne    c00049f9 <f_stat+0x6a>
c00049de:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049e3:	75 0f                	jne    c00049f4 <f_stat+0x65>
c00049e5:	85 ff                	test   edi,edi
c00049e7:	74 10                	je     c00049f9 <f_stat+0x6a>
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	89 e0                	mov    eax,esp
c00049ed:	e8 ee e7 ff ff       	call   c00031e0 <get_fileinfo>
c00049f2:	eb 05                	jmp    c00049f9 <f_stat+0x6a>
c00049f4:	bb 06 00 00 00       	mov    ebx,0x6
c00049f9:	83 ec 0c             	sub    esp,0xc
c00049fc:	56                   	push   esi
c00049fd:	e8 4a 14 00 00       	call   c0005e4c <ff_memfree>
c0004a02:	83 c4 10             	add    esp,0x10
c0004a05:	83 c4 30             	add    esp,0x30
c0004a08:	89 d8                	mov    eax,ebx
c0004a0a:	5b                   	pop    ebx
c0004a0b:	5e                   	pop    esi
c0004a0c:	5f                   	pop    edi
c0004a0d:	c3                   	ret    

c0004a0e <f_getfree>:
c0004a0e:	55                   	push   ebp
c0004a0f:	31 c9                	xor    ecx,ecx
c0004a11:	57                   	push   edi
c0004a12:	56                   	push   esi
c0004a13:	53                   	push   ebx
c0004a14:	83 ec 2c             	sub    esp,0x2c
c0004a17:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a1b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a1f:	e8 8e dc ff ff       	call   c00026b2 <mount_volume>
c0004a24:	85 c0                	test   eax,eax
c0004a26:	89 c6                	mov    esi,eax
c0004a28:	0f 85 df 00 00 00    	jne    c0004b0d <f_getfree+0xff>
c0004a2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004a32:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a36:	89 18                	mov    DWORD PTR [eax],ebx
c0004a38:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004a3b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a3e:	8d 57 fe             	lea    edx,[edi-0x2]
c0004a41:	39 d0                	cmp    eax,edx
c0004a43:	77 0b                	ja     c0004a50 <f_getfree+0x42>
c0004a45:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a49:	89 01                	mov    DWORD PTR [ecx],eax
c0004a4b:	e9 bd 00 00 00       	jmp    c0004b0d <f_getfree+0xff>
c0004a50:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004a53:	75 29                	jne    c0004a7e <f_getfree+0x70>
c0004a55:	bf 02 00 00 00       	mov    edi,0x2
c0004a5a:	31 ed                	xor    ebp,ebp
c0004a5c:	89 fa                	mov    edx,edi
c0004a5e:	89 d8                	mov    eax,ebx
c0004a60:	e8 cd e9 ff ff       	call   c0003432 <get_fat.isra.2>
c0004a65:	83 f8 ff             	cmp    eax,0xffffffff
c0004a68:	74 7d                	je     c0004ae7 <f_getfree+0xd9>
c0004a6a:	83 f8 01             	cmp    eax,0x1
c0004a6d:	74 7f                	je     c0004aee <f_getfree+0xe0>
c0004a6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a73:	83 d5 00             	adc    ebp,0x0
c0004a76:	47                   	inc    edi
c0004a77:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004a7a:	77 e0                	ja     c0004a5c <f_getfree+0x4e>
c0004a7c:	eb 79                	jmp    c0004af7 <f_getfree+0xe9>
c0004a7e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004a81:	31 ed                	xor    ebp,ebp
c0004a83:	31 db                	xor    ebx,ebx
c0004a85:	85 db                	test   ebx,ebx
c0004a87:	75 18                	jne    c0004aa1 <f_getfree+0x93>
c0004a89:	8d 42 01             	lea    eax,[edx+0x1]
c0004a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a94:	e8 bc da ff ff       	call   c0002555 <move_window>
c0004a99:	85 c0                	test   eax,eax
c0004a9b:	75 58                	jne    c0004af5 <f_getfree+0xe7>
c0004a9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004aa5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004aa9:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004aac:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004ab0:	75 13                	jne    c0004ac5 <f_getfree+0xb7>
c0004ab2:	e8 39 d5 ff ff       	call   c0001ff0 <ld_word>
c0004ab7:	0f b7 c0             	movzx  eax,ax
c0004aba:	83 f8 01             	cmp    eax,0x1
c0004abd:	83 d5 00             	adc    ebp,0x0
c0004ac0:	83 c3 02             	add    ebx,0x2
c0004ac3:	eb 13                	jmp    c0004ad8 <f_getfree+0xca>
c0004ac5:	e8 33 d5 ff ff       	call   c0001ffd <ld_dword>
c0004aca:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004acf:	83 f8 01             	cmp    eax,0x1
c0004ad2:	83 d5 00             	adc    ebp,0x0
c0004ad5:	83 c3 04             	add    ebx,0x4
c0004ad8:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004ade:	4f                   	dec    edi
c0004adf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ae3:	75 a0                	jne    c0004a85 <f_getfree+0x77>
c0004ae5:	eb 10                	jmp    c0004af7 <f_getfree+0xe9>
c0004ae7:	be 01 00 00 00       	mov    esi,0x1
c0004aec:	eb 09                	jmp    c0004af7 <f_getfree+0xe9>
c0004aee:	be 02 00 00 00       	mov    esi,0x2
c0004af3:	eb 02                	jmp    c0004af7 <f_getfree+0xe9>
c0004af5:	89 c6                	mov    esi,eax
c0004af7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004afb:	89 28                	mov    DWORD PTR [eax],ebp
c0004afd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b01:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004b04:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004b07:	83 ca 01             	or     edx,0x1
c0004b0a:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004b0d:	83 c4 2c             	add    esp,0x2c
c0004b10:	89 f0                	mov    eax,esi
c0004b12:	5b                   	pop    ebx
c0004b13:	5e                   	pop    esi
c0004b14:	5f                   	pop    edi
c0004b15:	5d                   	pop    ebp
c0004b16:	c3                   	ret    

c0004b17 <f_truncate>:
c0004b17:	56                   	push   esi
c0004b18:	53                   	push   ebx
c0004b19:	83 ec 14             	sub    esp,0x14
c0004b1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b20:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b24:	89 d8                	mov    eax,ebx
c0004b26:	e8 81 d9 ff ff       	call   c00024ac <validate>
c0004b2b:	85 c0                	test   eax,eax
c0004b2d:	89 c6                	mov    esi,eax
c0004b2f:	0f 85 c4 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b35:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b39:	85 f6                	test   esi,esi
c0004b3b:	0f 85 b8 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b41:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b45:	0f 84 a9 00 00 00    	je     c0004bf4 <f_truncate+0xdd>
c0004b4b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b4e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b51:	0f 83 a2 00 00 00    	jae    c0004bf9 <f_truncate+0xe2>
c0004b57:	85 c0                	test   eax,eax
c0004b59:	75 15                	jne    c0004b70 <f_truncate+0x59>
c0004b5b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b5e:	31 c9                	xor    ecx,ecx
c0004b60:	89 d8                	mov    eax,ebx
c0004b62:	e8 d2 eb ff ff       	call   c0003739 <remove_chain>
c0004b67:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b6e:	eb 35                	jmp    c0004ba5 <f_truncate+0x8e>
c0004b70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b75:	e8 b8 e8 ff ff       	call   c0003432 <get_fat.isra.2>
c0004b7a:	89 c2                	mov    edx,eax
c0004b7c:	b8 01 00 00 00       	mov    eax,0x1
c0004b81:	83 fa ff             	cmp    edx,0xffffffff
c0004b84:	74 1f                	je     c0004ba5 <f_truncate+0x8e>
c0004b86:	83 fa 01             	cmp    edx,0x1
c0004b89:	b8 02 00 00 00       	mov    eax,0x2
c0004b8e:	74 15                	je     c0004ba5 <f_truncate+0x8e>
c0004b90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b94:	31 c0                	xor    eax,eax
c0004b96:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b99:	76 0a                	jbe    c0004ba5 <f_truncate+0x8e>
c0004b9b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b9e:	89 d8                	mov    eax,ebx
c0004ba0:	e8 94 eb ff ff       	call   c0003739 <remove_chain>
c0004ba5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004ba8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004bab:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004bae:	83 ca 40             	or     edx,0x40
c0004bb1:	85 c0                	test   eax,eax
c0004bb3:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004bb6:	75 35                	jne    c0004bed <f_truncate+0xd6>
c0004bb8:	80 e2 80             	and    dl,0x80
c0004bbb:	74 3c                	je     c0004bf9 <f_truncate+0xe2>
c0004bbd:	6a 01                	push   0x1
c0004bbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004bc2:	8d 43 28             	lea    eax,[ebx+0x28]
c0004bc5:	50                   	push   eax
c0004bc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bce:	50                   	push   eax
c0004bcf:	e8 e7 d3 ff ff       	call   c0001fbb <disk_write>
c0004bd4:	83 c4 10             	add    esp,0x10
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	75 0d                	jne    c0004be8 <f_truncate+0xd1>
c0004bdb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bde:	31 f6                	xor    esi,esi
c0004be0:	83 e0 7f             	and    eax,0x7f
c0004be3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004be6:	eb 11                	jmp    c0004bf9 <f_truncate+0xe2>
c0004be8:	b8 01 00 00 00       	mov    eax,0x1
c0004bed:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	eb 05                	jmp    c0004bf9 <f_truncate+0xe2>
c0004bf4:	be 07 00 00 00       	mov    esi,0x7
c0004bf9:	83 c4 14             	add    esp,0x14
c0004bfc:	89 f0                	mov    eax,esi
c0004bfe:	5b                   	pop    ebx
c0004bff:	5e                   	pop    esi
c0004c00:	c3                   	ret    

c0004c01 <f_unlink>:
c0004c01:	55                   	push   ebp
c0004c02:	b9 02 00 00 00       	mov    ecx,0x2
c0004c07:	57                   	push   edi
c0004c08:	56                   	push   esi
c0004c09:	53                   	push   ebx
c0004c0a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004c10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c14:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004c1b:	e8 92 da ff ff       	call   c00026b2 <mount_volume>
c0004c20:	85 c0                	test   eax,eax
c0004c22:	0f 85 ee 00 00 00    	jne    c0004d16 <f_unlink+0x115>
c0004c28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c2c:	83 ec 0c             	sub    esp,0xc
c0004c2f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c33:	68 00 02 00 00       	push   0x200
c0004c38:	e8 f7 11 00 00       	call   c0005e34 <ff_memalloc>
c0004c3d:	83 c4 10             	add    esp,0x10
c0004c40:	89 c3                	mov    ebx,eax
c0004c42:	b8 11 00 00 00       	mov    eax,0x11
c0004c47:	85 db                	test   ebx,ebx
c0004c49:	0f 84 c7 00 00 00    	je     c0004d16 <f_unlink+0x115>
c0004c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c53:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c5a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c5d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c61:	e8 94 ef ff ff       	call   c0003bfa <follow_path>
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 94 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c6e:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c73:	b8 06 00 00 00       	mov    eax,0x6
c0004c78:	0f 85 84 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c7e:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c83:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c89:	74 07                	je     c0004c92 <f_unlink+0x91>
c0004c8b:	b8 07 00 00 00       	mov    eax,0x7
c0004c90:	eb 70                	jmp    c0004d02 <f_unlink+0x101>
c0004c92:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c96:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c9a:	8a 07                	mov    al,BYTE PTR [edi]
c0004c9c:	e8 40 e7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004ca1:	83 e5 10             	and    ebp,0x10
c0004ca4:	89 c6                	mov    esi,eax
c0004ca6:	75 20                	jne    c0004cc8 <f_unlink+0xc7>
c0004ca8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cac:	e8 a8 ed ff ff       	call   c0003a59 <dir_remove>
c0004cb1:	85 c0                	test   eax,eax
c0004cb3:	75 40                	jne    c0004cf5 <f_unlink+0xf4>
c0004cb5:	85 f6                	test   esi,esi
c0004cb7:	74 3c                	je     c0004cf5 <f_unlink+0xf4>
c0004cb9:	31 c9                	xor    ecx,ecx
c0004cbb:	89 f2                	mov    edx,esi
c0004cbd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc1:	e8 73 ea ff ff       	call   c0003739 <remove_chain>
c0004cc6:	eb 2d                	jmp    c0004cf5 <f_unlink+0xf4>
c0004cc8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ccc:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cd0:	31 d2                	xor    edx,edx
c0004cd2:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004cd6:	e8 5c e8 ff ff       	call   c0003537 <dir_sdi>
c0004cdb:	85 c0                	test   eax,eax
c0004cdd:	75 23                	jne    c0004d02 <f_unlink+0x101>
c0004cdf:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ce3:	31 d2                	xor    edx,edx
c0004ce5:	e8 47 ec ff ff       	call   c0003931 <dir_read>
c0004cea:	85 c0                	test   eax,eax
c0004cec:	74 9d                	je     c0004c8b <f_unlink+0x8a>
c0004cee:	83 f8 04             	cmp    eax,0x4
c0004cf1:	75 0f                	jne    c0004d02 <f_unlink+0x101>
c0004cf3:	eb b3                	jmp    c0004ca8 <f_unlink+0xa7>
c0004cf5:	85 c0                	test   eax,eax
c0004cf7:	75 09                	jne    c0004d02 <f_unlink+0x101>
c0004cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfd:	e8 88 e2 ff ff       	call   c0002f8a <sync_fs>
c0004d02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d06:	83 ec 0c             	sub    esp,0xc
c0004d09:	53                   	push   ebx
c0004d0a:	e8 3d 11 00 00       	call   c0005e4c <ff_memfree>
c0004d0f:	83 c4 10             	add    esp,0x10
c0004d12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d16:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	5f                   	pop    edi
c0004d1f:	5d                   	pop    ebp
c0004d20:	c3                   	ret    

c0004d21 <f_mkdir>:
c0004d21:	57                   	push   edi
c0004d22:	b9 02 00 00 00       	mov    ecx,0x2
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	83 ec 50             	sub    esp,0x50
c0004d2c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d30:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d34:	e8 79 d9 ff ff       	call   c00026b2 <mount_volume>
c0004d39:	85 c0                	test   eax,eax
c0004d3b:	89 c3                	mov    ebx,eax
c0004d3d:	0f 85 70 01 00 00    	jne    c0004eb3 <f_mkdir+0x192>
c0004d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d47:	83 ec 0c             	sub    esp,0xc
c0004d4a:	bb 11 00 00 00       	mov    ebx,0x11
c0004d4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d53:	68 00 02 00 00       	push   0x200
c0004d58:	e8 d7 10 00 00       	call   c0005e34 <ff_memalloc>
c0004d5d:	83 c4 10             	add    esp,0x10
c0004d60:	85 c0                	test   eax,eax
c0004d62:	89 c7                	mov    edi,eax
c0004d64:	0f 84 49 01 00 00    	je     c0004eb3 <f_mkdir+0x192>
c0004d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d72:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d75:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d79:	e8 7c ee ff ff       	call   c0003bfa <follow_path>
c0004d7e:	85 c0                	test   eax,eax
c0004d80:	89 c3                	mov    ebx,eax
c0004d82:	74 3e                	je     c0004dc2 <f_mkdir+0xa1>
c0004d84:	83 f8 04             	cmp    eax,0x4
c0004d87:	75 3e                	jne    c0004dc7 <f_mkdir+0xa6>
c0004d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8d:	31 d2                	xor    edx,edx
c0004d8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d93:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d97:	e8 63 e8 ff ff       	call   c00035ff <create_chain>
c0004d9c:	85 c0                	test   eax,eax
c0004d9e:	89 c6                	mov    esi,eax
c0004da0:	74 0c                	je     c0004dae <f_mkdir+0x8d>
c0004da2:	83 f8 01             	cmp    eax,0x1
c0004da5:	bb 02 00 00 00       	mov    ebx,0x2
c0004daa:	74 07                	je     c0004db3 <f_mkdir+0x92>
c0004dac:	eb 2a                	jmp    c0004dd8 <f_mkdir+0xb7>
c0004dae:	bb 07 00 00 00       	mov    ebx,0x7
c0004db3:	31 c9                	xor    ecx,ecx
c0004db5:	89 f2                	mov    edx,esi
c0004db7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004dbb:	e8 79 e9 ff ff       	call   c0003739 <remove_chain>
c0004dc0:	eb 05                	jmp    c0004dc7 <f_mkdir+0xa6>
c0004dc2:	bb 08 00 00 00       	mov    ebx,0x8
c0004dc7:	83 ec 0c             	sub    esp,0xc
c0004dca:	57                   	push   edi
c0004dcb:	e8 7c 10 00 00       	call   c0005e4c <ff_memfree>
c0004dd0:	83 c4 10             	add    esp,0x10
c0004dd3:	e9 db 00 00 00       	jmp    c0004eb3 <f_mkdir+0x192>
c0004dd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004ddb:	bb 01 00 00 00       	mov    ebx,0x1
c0004de0:	74 d1                	je     c0004db3 <f_mkdir+0x92>
c0004de2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de6:	89 f2                	mov    edx,esi
c0004de8:	e8 19 dd ff ff       	call   c0002b06 <dir_clear>
c0004ded:	85 c0                	test   eax,eax
c0004def:	89 c3                	mov    ebx,eax
c0004df1:	75 c0                	jne    c0004db3 <f_mkdir+0x92>
c0004df3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004dfc:	ba 20 00 00 00       	mov    edx,0x20
c0004e01:	83 c0 34             	add    eax,0x34
c0004e04:	e8 28 d2 ff ff       	call   c0002031 <mem_set>
c0004e09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e12:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004e16:	83 c0 4a             	add    eax,0x4a
c0004e19:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004e1d:	e8 f7 d1 ff ff       	call   c0002019 <st_dword>
c0004e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e26:	89 f1                	mov    ecx,esi
c0004e28:	8d 50 34             	lea    edx,[eax+0x34]
c0004e2b:	e8 da e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e34:	b9 20 00 00 00       	mov    ecx,0x20
c0004e39:	8d 50 34             	lea    edx,[eax+0x34]
c0004e3c:	83 c0 54             	add    eax,0x54
c0004e3f:	e8 d8 d1 ff ff       	call   c000201c <mem_cpy>
c0004e44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e48:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e4c:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e50:	8d 50 54             	lea    edx,[eax+0x54]
c0004e53:	e8 b2 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e60:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e64:	e8 2e ee ff ff       	call   c0003c97 <dir_register>
c0004e69:	85 c0                	test   eax,eax
c0004e6b:	89 c3                	mov    ebx,eax
c0004e6d:	0f 85 40 ff ff ff    	jne    c0004db3 <f_mkdir+0x92>
c0004e73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e77:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e7c:	83 c0 16             	add    eax,0x16
c0004e7f:	e8 95 d1 ff ff       	call   c0002019 <st_dword>
c0004e84:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e88:	89 f1                	mov    ecx,esi
c0004e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8e:	e8 77 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e97:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e9f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ea3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ea7:	e8 de e0 ff ff       	call   c0002f8a <sync_fs>
c0004eac:	89 c3                	mov    ebx,eax
c0004eae:	e9 14 ff ff ff       	jmp    c0004dc7 <f_mkdir+0xa6>
c0004eb3:	83 c4 50             	add    esp,0x50
c0004eb6:	89 d8                	mov    eax,ebx
c0004eb8:	5b                   	pop    ebx
c0004eb9:	5e                   	pop    esi
c0004eba:	5f                   	pop    edi
c0004ebb:	c3                   	ret    

c0004ebc <f_rename>:
c0004ebc:	57                   	push   edi
c0004ebd:	56                   	push   esi
c0004ebe:	53                   	push   ebx
c0004ebf:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ec5:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ecc:	e8 8f d5 ff ff       	call   c0002460 <get_ldnumber>
c0004ed1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ed5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eda:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ee1:	e8 cc d7 ff ff       	call   c00026b2 <mount_volume>
c0004ee6:	85 c0                	test   eax,eax
c0004ee8:	0f 85 7c 01 00 00    	jne    c000506a <f_rename+0x1ae>
c0004eee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef2:	83 ec 0c             	sub    esp,0xc
c0004ef5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ef9:	68 00 02 00 00       	push   0x200
c0004efe:	e8 31 0f 00 00       	call   c0005e34 <ff_memalloc>
c0004f03:	83 c4 10             	add    esp,0x10
c0004f06:	89 c6                	mov    esi,eax
c0004f08:	b8 11 00 00 00       	mov    eax,0x11
c0004f0d:	85 f6                	test   esi,esi
c0004f0f:	0f 84 55 01 00 00    	je     c000506a <f_rename+0x1ae>
c0004f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f19:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f20:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f23:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f27:	e8 ce ec ff ff       	call   c0003bfa <follow_path>
c0004f2c:	85 c0                	test   eax,eax
c0004f2e:	0f 85 22 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f34:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f38:	b8 06 00 00 00       	mov    eax,0x6
c0004f3d:	80 e2 a0             	and    dl,0xa0
c0004f40:	0f 85 10 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f4e:	b9 20 00 00 00       	mov    ecx,0x20
c0004f53:	e8 c4 d0 ff ff       	call   c000201c <mem_cpy>
c0004f58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f5c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f65:	e8 b2 d0 ff ff       	call   c000201c <mem_cpy>
c0004f6a:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f71:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f75:	e8 80 ec ff ff       	call   c0003bfa <follow_path>
c0004f7a:	85 c0                	test   eax,eax
c0004f7c:	75 20                	jne    c0004f9e <f_rename+0xe2>
c0004f7e:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f82:	b8 08 00 00 00       	mov    eax,0x8
c0004f87:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f8b:	0f 85 c5 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f91:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f95:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f9c:	eb 03                	jmp    c0004fa1 <f_rename+0xe5>
c0004f9e:	83 f8 04             	cmp    eax,0x4
c0004fa1:	0f 85 af 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fa7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fab:	e8 e7 ec ff ff       	call   c0003c97 <dir_register>
c0004fb0:	85 c0                	test   eax,eax
c0004fb2:	0f 85 9e 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fb8:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fbf:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004fc3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fc8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fcb:	e8 4c d0 ff ff       	call   c000201c <mem_cpy>
c0004fd0:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fd4:	a8 10                	test   al,0x10
c0004fd6:	75 03                	jne    c0004fdb <f_rename+0x11f>
c0004fd8:	83 c8 20             	or     eax,0x20
c0004fdb:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fe2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fe6:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fea:	74 54                	je     c0005040 <f_rename+0x184>
c0004fec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004ff0:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004ff4:	74 4a                	je     c0005040 <f_rename+0x184>
c0004ff6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ffa:	89 da                	mov    edx,ebx
c0004ffc:	8a 07                	mov    al,BYTE PTR [edi]
c0004ffe:	e8 de e3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0005003:	89 c2                	mov    edx,eax
c0005005:	89 f8                	mov    eax,edi
c0005007:	e8 3a d2 ff ff       	call   c0002246 <clst2sect>
c000500c:	89 c2                	mov    edx,eax
c000500e:	b8 02 00 00 00       	mov    eax,0x2
c0005013:	85 d2                	test   edx,edx
c0005015:	74 3f                	je     c0005056 <f_rename+0x19a>
c0005017:	89 f8                	mov    eax,edi
c0005019:	e8 37 d5 ff ff       	call   c0002555 <move_window>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 34                	jne    c0005056 <f_rename+0x19a>
c0005022:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005026:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000502a:	75 14                	jne    c0005040 <f_rename+0x184>
c000502c:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005030:	8d 50 54             	lea    edx,[eax+0x54]
c0005033:	e8 d2 e3 ff ff       	call   c000340a <st_clust.isra.1>
c0005038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000503c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005040:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005044:	e8 10 ea ff ff       	call   c0003a59 <dir_remove>
c0005049:	85 c0                	test   eax,eax
c000504b:	75 09                	jne    c0005056 <f_rename+0x19a>
c000504d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005051:	e8 34 df ff ff       	call   c0002f8a <sync_fs>
c0005056:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000505a:	83 ec 0c             	sub    esp,0xc
c000505d:	56                   	push   esi
c000505e:	e8 e9 0d 00 00       	call   c0005e4c <ff_memfree>
c0005063:	83 c4 10             	add    esp,0x10
c0005066:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000506a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005070:	5b                   	pop    ebx
c0005071:	5e                   	pop    esi
c0005072:	5f                   	pop    edi
c0005073:	c3                   	ret    

c0005074 <f_chmod>:
c0005074:	57                   	push   edi
c0005075:	b9 02 00 00 00       	mov    ecx,0x2
c000507a:	56                   	push   esi
c000507b:	53                   	push   ebx
c000507c:	83 ec 50             	sub    esp,0x50
c000507f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005083:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005087:	8d 44 24 60          	lea    eax,[esp+0x60]
c000508b:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000508f:	e8 1e d6 ff ff       	call   c00026b2 <mount_volume>
c0005094:	85 c0                	test   eax,eax
c0005096:	0f 85 81 00 00 00    	jne    c000511d <f_chmod+0xa9>
c000509c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a0:	83 ec 0c             	sub    esp,0xc
c00050a3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00050a7:	68 00 02 00 00       	push   0x200
c00050ac:	e8 83 0d 00 00       	call   c0005e34 <ff_memalloc>
c00050b1:	83 c4 10             	add    esp,0x10
c00050b4:	89 c6                	mov    esi,eax
c00050b6:	b8 11 00 00 00       	mov    eax,0x11
c00050bb:	85 f6                	test   esi,esi
c00050bd:	74 5e                	je     c000511d <f_chmod+0xa9>
c00050bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050c3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ca:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050ce:	e8 27 eb ff ff       	call   c0003bfa <follow_path>
c00050d3:	85 c0                	test   eax,eax
c00050d5:	75 32                	jne    c0005109 <f_chmod+0x95>
c00050d7:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050db:	b8 06 00 00 00       	mov    eax,0x6
c00050e0:	80 e2 a0             	and    dl,0xa0
c00050e3:	75 24                	jne    c0005109 <f_chmod+0x95>
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050ec:	31 d7                	xor    edi,edx
c00050ee:	21 fb                	and    ebx,edi
c00050f0:	83 e3 27             	and    ebx,0x27
c00050f3:	31 d3                	xor    ebx,edx
c00050f5:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050fc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005104:	e8 81 de ff ff       	call   c0002f8a <sync_fs>
c0005109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000510d:	83 ec 0c             	sub    esp,0xc
c0005110:	56                   	push   esi
c0005111:	e8 36 0d 00 00       	call   c0005e4c <ff_memfree>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000511d:	83 c4 50             	add    esp,0x50
c0005120:	5b                   	pop    ebx
c0005121:	5e                   	pop    esi
c0005122:	5f                   	pop    edi
c0005123:	c3                   	ret    

c0005124 <f_utime>:
c0005124:	56                   	push   esi
c0005125:	b9 02 00 00 00       	mov    ecx,0x2
c000512a:	53                   	push   ebx
c000512b:	83 ec 54             	sub    esp,0x54
c000512e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005132:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005136:	8d 44 24 60          	lea    eax,[esp+0x60]
c000513a:	e8 73 d5 ff ff       	call   c00026b2 <mount_volume>
c000513f:	85 c0                	test   eax,eax
c0005141:	0f 85 87 00 00 00    	jne    c00051ce <f_utime+0xaa>
c0005147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000514b:	83 ec 0c             	sub    esp,0xc
c000514e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005152:	68 00 02 00 00       	push   0x200
c0005157:	e8 d8 0c 00 00       	call   c0005e34 <ff_memalloc>
c000515c:	83 c4 10             	add    esp,0x10
c000515f:	89 c3                	mov    ebx,eax
c0005161:	b8 11 00 00 00       	mov    eax,0x11
c0005166:	85 db                	test   ebx,ebx
c0005168:	74 64                	je     c00051ce <f_utime+0xaa>
c000516a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005172:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005175:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005179:	e8 7c ea ff ff       	call   c0003bfa <follow_path>
c000517e:	85 c0                	test   eax,eax
c0005180:	75 38                	jne    c00051ba <f_utime+0x96>
c0005182:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005186:	b8 06 00 00 00       	mov    eax,0x6
c000518b:	80 e2 a0             	and    dl,0xa0
c000518e:	75 2a                	jne    c00051ba <f_utime+0x96>
c0005190:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0005194:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005198:	c1 e2 10             	shl    edx,0x10
c000519b:	09 c2                	or     edx,eax
c000519d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00051a1:	83 c0 16             	add    eax,0x16
c00051a4:	e8 70 ce ff ff       	call   c0002019 <st_dword>
c00051a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ad:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b5:	e8 d0 dd ff ff       	call   c0002f8a <sync_fs>
c00051ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051be:	83 ec 0c             	sub    esp,0xc
c00051c1:	53                   	push   ebx
c00051c2:	e8 85 0c 00 00       	call   c0005e4c <ff_memfree>
c00051c7:	83 c4 10             	add    esp,0x10
c00051ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051ce:	83 c4 54             	add    esp,0x54
c00051d1:	5b                   	pop    ebx
c00051d2:	5e                   	pop    esi
c00051d3:	c3                   	ret    

c00051d4 <f_getlabel>:
c00051d4:	55                   	push   ebp
c00051d5:	31 c9                	xor    ecx,ecx
c00051d7:	57                   	push   edi
c00051d8:	56                   	push   esi
c00051d9:	53                   	push   ebx
c00051da:	83 ec 5c             	sub    esp,0x5c
c00051dd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051e1:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c00051e5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051e9:	e8 c4 d4 ff ff       	call   c00026b2 <mount_volume>
c00051ee:	85 c0                	test   eax,eax
c00051f0:	89 c3                	mov    ebx,eax
c00051f2:	0f 85 d9 00 00 00    	jne    c00052d1 <f_getlabel+0xfd>
c00051f8:	85 ff                	test   edi,edi
c00051fa:	0f 84 d1 00 00 00    	je     c00052d1 <f_getlabel+0xfd>
c0005200:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005208:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000520c:	31 d2                	xor    edx,edx
c000520e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005216:	e8 1c e3 ff ff       	call   c0003537 <dir_sdi>
c000521b:	85 c0                	test   eax,eax
c000521d:	89 c3                	mov    ebx,eax
c000521f:	0f 85 a2 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c0005225:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005229:	ba 01 00 00 00       	mov    edx,0x1
c000522e:	e8 fe e6 ff ff       	call   c0003931 <dir_read>
c0005233:	85 c0                	test   eax,eax
c0005235:	89 c3                	mov    ebx,eax
c0005237:	0f 85 8a 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c000523d:	31 f6                	xor    esi,esi
c000523f:	31 d2                	xor    edx,edx
c0005241:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005245:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000524c:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c0005250:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005255:	89 c8                	mov    eax,ecx
c0005257:	e8 13 ce ff ff       	call   c000206f <dbc_1st>
c000525c:	85 c0                	test   eax,eax
c000525e:	74 19                	je     c0005279 <f_getlabel+0xa5>
c0005260:	83 fd 0b             	cmp    ebp,0xb
c0005263:	74 14                	je     c0005279 <f_getlabel+0xa5>
c0005265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005269:	c1 e1 08             	shl    ecx,0x8
c000526c:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0005270:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005273:	09 c1                	or     ecx,eax
c0005275:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005279:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000527e:	52                   	push   edx
c000527f:	52                   	push   edx
c0005280:	68 b5 01 00 00       	push   0x1b5
c0005285:	50                   	push   eax
c0005286:	e8 75 0c 00 00       	call   c0005f00 <ff_oem2uni>
c000528b:	83 c4 10             	add    esp,0x10
c000528e:	0f b7 c0             	movzx  eax,ax
c0005291:	85 c0                	test   eax,eax
c0005293:	74 1f                	je     c00052b4 <f_getlabel+0xe0>
c0005295:	8d 14 37             	lea    edx,[edi+esi*1]
c0005298:	b9 04 00 00 00       	mov    ecx,0x4
c000529d:	e8 ab ce ff ff       	call   c000214d <put_utf>
c00052a2:	0f b6 c0             	movzx  eax,al
c00052a5:	85 c0                	test   eax,eax
c00052a7:	74 0b                	je     c00052b4 <f_getlabel+0xe0>
c00052a9:	01 c6                	add    esi,eax
c00052ab:	83 fd 0b             	cmp    ebp,0xb
c00052ae:	74 06                	je     c00052b6 <f_getlabel+0xe2>
c00052b0:	89 ea                	mov    edx,ebp
c00052b2:	eb 8d                	jmp    c0005241 <f_getlabel+0x6d>
c00052b4:	31 f6                	xor    esi,esi
c00052b6:	01 fe                	add    esi,edi
c00052b8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00052bb:	39 f7                	cmp    edi,esi
c00052bd:	74 12                	je     c00052d1 <f_getlabel+0xfd>
c00052bf:	4e                   	dec    esi
c00052c0:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00052c3:	74 f3                	je     c00052b8 <f_getlabel+0xe4>
c00052c5:	eb 0a                	jmp    c00052d1 <f_getlabel+0xfd>
c00052c7:	83 fb 04             	cmp    ebx,0x4
c00052ca:	75 05                	jne    c00052d1 <f_getlabel+0xfd>
c00052cc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00052cf:	31 db                	xor    ebx,ebx
c00052d1:	85 db                	test   ebx,ebx
c00052d3:	75 49                	jne    c000531e <f_getlabel+0x14a>
c00052d5:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052da:	74 42                	je     c000531e <f_getlabel+0x14a>
c00052dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052e3:	e8 6d d2 ff ff       	call   c0002555 <move_window>
c00052e8:	85 c0                	test   eax,eax
c00052ea:	89 c3                	mov    ebx,eax
c00052ec:	75 30                	jne    c000531e <f_getlabel+0x14a>
c00052ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052f2:	b8 43 00 00 00       	mov    eax,0x43
c00052f7:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052fa:	83 f9 03             	cmp    ecx,0x3
c00052fd:	74 10                	je     c000530f <f_getlabel+0x13b>
c00052ff:	83 f9 04             	cmp    ecx,0x4
c0005302:	b8 64 00 00 00       	mov    eax,0x64
c0005307:	b9 27 00 00 00       	mov    ecx,0x27
c000530c:	0f 45 c1             	cmovne eax,ecx
c000530f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005313:	e8 e5 cc ff ff       	call   c0001ffd <ld_dword>
c0005318:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000531c:	89 07                	mov    DWORD PTR [edi],eax
c000531e:	83 c4 5c             	add    esp,0x5c
c0005321:	89 d8                	mov    eax,ebx
c0005323:	5b                   	pop    ebx
c0005324:	5e                   	pop    esi
c0005325:	5f                   	pop    edi
c0005326:	5d                   	pop    ebp
c0005327:	c3                   	ret    

c0005328 <f_setlabel>:
c0005328:	57                   	push   edi
c0005329:	b9 02 00 00 00       	mov    ecx,0x2
c000532e:	56                   	push   esi
c000532f:	53                   	push   ebx
c0005330:	83 ec 50             	sub    esp,0x50
c0005333:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005337:	8d 44 24 60          	lea    eax,[esp+0x60]
c000533b:	e8 72 d3 ff ff       	call   c00026b2 <mount_volume>
c0005340:	85 c0                	test   eax,eax
c0005342:	89 c6                	mov    esi,eax
c0005344:	0f 85 65 01 00 00    	jne    c00054af <f_setlabel+0x187>
c000534a:	b9 0b 00 00 00       	mov    ecx,0xb
c000534f:	ba 20 00 00 00       	mov    edx,0x20
c0005354:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005358:	31 db                	xor    ebx,ebx
c000535a:	e8 d2 cc ff ff       	call   c0002031 <mem_set>
c000535f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005363:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005366:	76 5d                	jbe    c00053c5 <f_setlabel+0x9d>
c0005368:	8d 44 24 60          	lea    eax,[esp+0x60]
c000536c:	e8 04 cd ff ff       	call   c0002075 <tchar2uni>
c0005371:	3d ff ff 00 00       	cmp    eax,0xffff
c0005376:	76 0a                	jbe    c0005382 <f_setlabel+0x5a>
c0005378:	be 06 00 00 00       	mov    esi,0x6
c000537d:	e9 2d 01 00 00       	jmp    c00054af <f_setlabel+0x187>
c0005382:	83 ec 0c             	sub    esp,0xc
c0005385:	50                   	push   eax
c0005386:	e8 ed 0b 00 00       	call   c0005f78 <ff_wtoupper>
c000538b:	5a                   	pop    edx
c000538c:	59                   	pop    ecx
c000538d:	68 b5 01 00 00       	push   0x1b5
c0005392:	50                   	push   eax
c0005393:	e8 cc 0a 00 00       	call   c0005e64 <ff_uni2oem>
c0005398:	83 c4 10             	add    esp,0x10
c000539b:	0f b7 f0             	movzx  esi,ax
c000539e:	85 f6                	test   esi,esi
c00053a0:	89 f7                	mov    edi,esi
c00053a2:	74 d4                	je     c0005378 <f_setlabel+0x50>
c00053a4:	89 f2                	mov    edx,esi
c00053a6:	b8 70 0b 02 c0       	mov    eax,0xc0020b70
c00053ab:	e8 ae cc ff ff       	call   c000205e <chk_chr>
c00053b0:	85 c0                	test   eax,eax
c00053b2:	75 c4                	jne    c0005378 <f_setlabel+0x50>
c00053b4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00053ba:	0f 87 c9 00 00 00    	ja     c0005489 <f_setlabel+0x161>
c00053c0:	e9 e0 00 00 00       	jmp    c00054a5 <f_setlabel+0x17d>
c00053c5:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ca:	74 ac                	je     c0005378 <f_setlabel+0x50>
c00053cc:	85 db                	test   ebx,ebx
c00053ce:	74 0e                	je     c00053de <f_setlabel+0xb6>
c00053d0:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053d5:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053d8:	75 04                	jne    c00053de <f_setlabel+0xb6>
c00053da:	89 c3                	mov    ebx,eax
c00053dc:	eb ee                	jmp    c00053cc <f_setlabel+0xa4>
c00053de:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053ea:	31 d2                	xor    edx,edx
c00053ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053f4:	e8 3e e1 ff ff       	call   c0003537 <dir_sdi>
c00053f9:	85 c0                	test   eax,eax
c00053fb:	89 c6                	mov    esi,eax
c00053fd:	0f 85 ac 00 00 00    	jne    c00054af <f_setlabel+0x187>
c0005403:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005407:	ba 01 00 00 00       	mov    edx,0x1
c000540c:	e8 20 e5 ff ff       	call   c0003931 <dir_read>
c0005411:	85 c0                	test   eax,eax
c0005413:	75 18                	jne    c000542d <f_setlabel+0x105>
c0005415:	85 db                	test   ebx,ebx
c0005417:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000541b:	74 0b                	je     c0005428 <f_setlabel+0x100>
c000541d:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005421:	b9 0b 00 00 00       	mov    ecx,0xb
c0005426:	eb 47                	jmp    c000546f <f_setlabel+0x147>
c0005428:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000542b:	eb 47                	jmp    c0005474 <f_setlabel+0x14c>
c000542d:	83 f8 04             	cmp    eax,0x4
c0005430:	75 53                	jne    c0005485 <f_setlabel+0x15d>
c0005432:	85 db                	test   ebx,ebx
c0005434:	74 79                	je     c00054af <f_setlabel+0x187>
c0005436:	8d 44 24 20          	lea    eax,[esp+0x20]
c000543a:	ba 01 00 00 00       	mov    edx,0x1
c000543f:	e8 88 e4 ff ff       	call   c00038cc <dir_alloc>
c0005444:	85 c0                	test   eax,eax
c0005446:	89 c6                	mov    esi,eax
c0005448:	75 65                	jne    c00054af <f_setlabel+0x187>
c000544a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000544e:	b9 20 00 00 00       	mov    ecx,0x20
c0005453:	31 d2                	xor    edx,edx
c0005455:	e8 d7 cb ff ff       	call   c0002031 <mem_set>
c000545a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000545e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005463:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005467:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000546b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000546f:	e8 a8 cb ff ff       	call   c000201c <mem_cpy>
c0005474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005478:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000547c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005480:	e8 05 db ff ff       	call   c0002f8a <sync_fs>
c0005485:	89 c6                	mov    esi,eax
c0005487:	eb 26                	jmp    c00054af <f_setlabel+0x187>
c0005489:	83 fb 09             	cmp    ebx,0x9
c000548c:	0f 87 e6 fe ff ff    	ja     c0005378 <f_setlabel+0x50>
c0005492:	89 f0                	mov    eax,esi
c0005494:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005498:	43                   	inc    ebx
c0005499:	89 f8                	mov    eax,edi
c000549b:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000549f:	43                   	inc    ebx
c00054a0:	e9 ba fe ff ff       	jmp    c000535f <f_setlabel+0x37>
c00054a5:	83 fb 0a             	cmp    ebx,0xa
c00054a8:	76 ef                	jbe    c0005499 <f_setlabel+0x171>
c00054aa:	e9 c9 fe ff ff       	jmp    c0005378 <f_setlabel+0x50>
c00054af:	83 c4 50             	add    esp,0x50
c00054b2:	89 f0                	mov    eax,esi
c00054b4:	5b                   	pop    ebx
c00054b5:	5e                   	pop    esi
c00054b6:	5f                   	pop    edi
c00054b7:	c3                   	ret    

c00054b8 <f_expand>:
c00054b8:	55                   	push   ebp
c00054b9:	57                   	push   edi
c00054ba:	56                   	push   esi
c00054bb:	53                   	push   ebx
c00054bc:	83 ec 2c             	sub    esp,0x2c
c00054bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054c7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054cf:	89 d8                	mov    eax,ebx
c00054d1:	e8 d6 cf ff ff       	call   c00024ac <validate>
c00054d6:	85 c0                	test   eax,eax
c00054d8:	89 c6                	mov    esi,eax
c00054da:	0f 85 3b 01 00 00    	jne    c000561b <f_expand+0x163>
c00054e0:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054e4:	85 f6                	test   esi,esi
c00054e6:	0f 85 2f 01 00 00    	jne    c000561b <f_expand+0x163>
c00054ec:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054f1:	75 0a                	jne    c00054fd <f_expand+0x45>
c00054f3:	be 07 00 00 00       	mov    esi,0x7
c00054f8:	e9 1e 01 00 00       	jmp    c000561b <f_expand+0x163>
c00054fd:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005501:	75 f0                	jne    c00054f3 <f_expand+0x3b>
c0005503:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005507:	74 ea                	je     c00054f3 <f_expand+0x3b>
c0005509:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000550d:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005511:	c1 e7 09             	shl    edi,0x9
c0005514:	8d 47 ff             	lea    eax,[edi-0x1]
c0005517:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000551b:	0f 95 c0             	setne  al
c000551e:	31 d2                	xor    edx,edx
c0005520:	0f b6 c0             	movzx  eax,al
c0005523:	89 c5                	mov    ebp,eax
c0005525:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005529:	f7 f7                	div    edi
c000552b:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000552e:	01 e8                	add    eax,ebp
c0005530:	83 ff 01             	cmp    edi,0x1
c0005533:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005537:	76 05                	jbe    c000553e <f_expand+0x86>
c0005539:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000553c:	77 05                	ja     c0005543 <f_expand+0x8b>
c000553e:	bf 02 00 00 00       	mov    edi,0x2
c0005543:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005546:	89 fd                	mov    ebp,edi
c0005548:	31 c9                	xor    ecx,ecx
c000554a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000554e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005550:	89 ea                	mov    edx,ebp
c0005552:	45                   	inc    ebp
c0005553:	e8 da de ff ff       	call   c0003432 <get_fat.isra.2>
c0005558:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000555c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005560:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005563:	77 05                	ja     c000556a <f_expand+0xb2>
c0005565:	bd 02 00 00 00       	mov    ebp,0x2
c000556a:	83 f8 01             	cmp    eax,0x1
c000556d:	74 20                	je     c000558f <f_expand+0xd7>
c000556f:	83 f8 ff             	cmp    eax,0xffffffff
c0005572:	74 25                	je     c0005599 <f_expand+0xe1>
c0005574:	85 c0                	test   eax,eax
c0005576:	75 09                	jne    c0005581 <f_expand+0xc9>
c0005578:	41                   	inc    ecx
c0005579:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000557d:	75 07                	jne    c0005586 <f_expand+0xce>
c000557f:	eb 1f                	jmp    c00055a0 <f_expand+0xe8>
c0005581:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005584:	31 c9                	xor    ecx,ecx
c0005586:	39 fd                	cmp    ebp,edi
c0005588:	75 c0                	jne    c000554a <f_expand+0x92>
c000558a:	e9 64 ff ff ff       	jmp    c00054f3 <f_expand+0x3b>
c000558f:	be 02 00 00 00       	mov    esi,0x2
c0005594:	e9 82 00 00 00       	jmp    c000561b <f_expand+0x163>
c0005599:	be 01 00 00 00       	mov    esi,0x1
c000559e:	eb 7b                	jmp    c000561b <f_expand+0x163>
c00055a0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055a5:	74 2b                	je     c00055d2 <f_expand+0x11a>
c00055a7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00055aa:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00055ae:	85 ed                	test   ebp,ebp
c00055b0:	74 24                	je     c00055d6 <f_expand+0x11e>
c00055b2:	83 c9 ff             	or     ecx,0xffffffff
c00055b5:	83 fd 01             	cmp    ebp,0x1
c00055b8:	74 03                	je     c00055bd <f_expand+0x105>
c00055ba:	8d 4f 01             	lea    ecx,[edi+0x1]
c00055bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c1:	89 fa                	mov    edx,edi
c00055c3:	e8 e7 d3 ff ff       	call   c00029af <put_fat>
c00055c8:	85 c0                	test   eax,eax
c00055ca:	75 4d                	jne    c0005619 <f_expand+0x161>
c00055cc:	89 f8                	mov    eax,edi
c00055ce:	4d                   	dec    ebp
c00055cf:	47                   	inc    edi
c00055d0:	eb dc                	jmp    c00055ae <f_expand+0xf6>
c00055d2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055d5:	48                   	dec    eax
c00055d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055da:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055df:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055e2:	74 37                	je     c000561b <f_expand+0x163>
c00055e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055ee:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055f1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055f4:	83 c8 40             	or     eax,0x40
c00055f7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055fa:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055fd:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005600:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005603:	39 c8                	cmp    eax,ecx
c0005605:	77 14                	ja     c000561b <f_expand+0x163>
c0005607:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000560b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000560e:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005611:	83 c8 01             	or     eax,0x1
c0005614:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005617:	eb 02                	jmp    c000561b <f_expand+0x163>
c0005619:	89 c6                	mov    esi,eax
c000561b:	83 c4 2c             	add    esp,0x2c
c000561e:	89 f0                	mov    eax,esi
c0005620:	5b                   	pop    ebx
c0005621:	5e                   	pop    esi
c0005622:	5f                   	pop    edi
c0005623:	5d                   	pop    ebp
c0005624:	c3                   	ret    

c0005625 <f_mkfs>:
c0005625:	55                   	push   ebp
c0005626:	57                   	push   edi
c0005627:	56                   	push   esi
c0005628:	be 0b 00 00 00       	mov    esi,0xb
c000562d:	53                   	push   ebx
c000562e:	83 ec 5c             	sub    esp,0x5c
c0005631:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005635:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005639:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000563d:	e8 1e ce ff ff       	call   c0002460 <get_ldnumber>
c0005642:	85 c0                	test   eax,eax
c0005644:	0f 88 e0 07 00 00    	js     c0005e2a <f_mkfs+0x805>
c000564a:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005651:	85 d2                	test   edx,edx
c0005653:	74 03                	je     c0005658 <f_mkfs+0x33>
c0005655:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005658:	85 db                	test   ebx,ebx
c000565a:	75 05                	jne    c0005661 <f_mkfs+0x3c>
c000565c:	bb 60 0b 02 c0       	mov    ebx,0xc0020b60
c0005661:	0f b6 c0             	movzx  eax,al
c0005664:	83 ec 0c             	sub    esp,0xc
c0005667:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000566b:	be 03 00 00 00       	mov    esi,0x3
c0005670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005674:	e8 29 c9 ff ff       	call   c0001fa2 <disk_initialize>
c0005679:	83 c4 10             	add    esp,0x10
c000567c:	a8 01                	test   al,0x1
c000567e:	0f 85 a6 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005684:	a8 04                	test   al,0x4
c0005686:	be 0a 00 00 00       	mov    esi,0xa
c000568b:	0f 85 99 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005691:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005694:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005698:	85 c0                	test   eax,eax
c000569a:	75 20                	jne    c00056bc <f_mkfs+0x97>
c000569c:	51                   	push   ecx
c000569d:	8d 44 24 44          	lea    eax,[esp+0x44]
c00056a1:	50                   	push   eax
c00056a2:	6a 03                	push   0x3
c00056a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00056a8:	e8 24 c9 ff ff       	call   c0001fd1 <disk_ioctl>
c00056ad:	83 c4 10             	add    esp,0x10
c00056b0:	85 c0                	test   eax,eax
c00056b2:	74 08                	je     c00056bc <f_mkfs+0x97>
c00056b4:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056bc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056c0:	8d 42 ff             	lea    eax,[edx-0x1]
c00056c3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056c8:	77 04                	ja     c00056ce <f_mkfs+0xa9>
c00056ca:	85 c2                	test   edx,eax
c00056cc:	74 08                	je     c00056d6 <f_mkfs+0xb1>
c00056ce:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056d6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056d9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e1:	48                   	dec    eax
c00056e2:	3c 01                	cmp    al,0x1
c00056e4:	76 05                	jbe    c00056eb <f_mkfs+0xc6>
c00056e6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00056f2:	48                   	dec    eax
c00056f3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056f8:	77 15                	ja     c000570f <f_mkfs+0xea>
c00056fa:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c00056ff:	b8 00 02 00 00       	mov    eax,0x200
c0005704:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005709:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000570d:	eb 08                	jmp    c0005717 <f_mkfs+0xf2>
c000570f:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005717:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000571a:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005720:	77 0f                	ja     c0005731 <f_mkfs+0x10c>
c0005722:	8d 47 ff             	lea    eax,[edi-0x1]
c0005725:	85 f8                	test   eax,edi
c0005727:	b8 00 00 00 00       	mov    eax,0x0
c000572c:	0f 45 f8             	cmovne edi,eax
c000572f:	eb 02                	jmp    c0005733 <f_mkfs+0x10e>
c0005731:	31 ff                	xor    edi,edi
c0005733:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000573b:	77 0a                	ja     c0005747 <f_mkfs+0x122>
c000573d:	be 11 00 00 00       	mov    esi,0x11
c0005742:	e9 e3 06 00 00       	jmp    c0005e2a <f_mkfs+0x805>
c0005747:	85 ed                	test   ebp,ebp
c0005749:	8b 33                	mov    esi,DWORD PTR [ebx]
c000574b:	89 eb                	mov    ebx,ebp
c000574d:	75 1e                	jne    c000576d <f_mkfs+0x148>
c000574f:	83 ec 0c             	sub    esp,0xc
c0005752:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005759:	25 00 fe ff ff       	and    eax,0xfffffe00
c000575e:	50                   	push   eax
c000575f:	e8 d0 06 00 00       	call   c0005e34 <ff_memalloc>
c0005764:	83 c4 10             	add    esp,0x10
c0005767:	85 c0                	test   eax,eax
c0005769:	89 c3                	mov    ebx,eax
c000576b:	74 d0                	je     c000573d <f_mkfs+0x118>
c000576d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005775:	52                   	push   edx
c0005776:	8d 44 24 48          	lea    eax,[esp+0x48]
c000577a:	50                   	push   eax
c000577b:	6a 01                	push   0x1
c000577d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005781:	e8 4b c8 ff ff       	call   c0001fd1 <disk_ioctl>
c0005786:	83 c4 10             	add    esp,0x10
c0005789:	85 c0                	test   eax,eax
c000578b:	0f 85 42 06 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005791:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005799:	89 f0                	mov    eax,esi
c000579b:	83 e0 08             	and    eax,0x8
c000579e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00057a2:	75 18                	jne    c00057bc <f_mkfs+0x197>
c00057a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057a8:	83 f8 3f             	cmp    eax,0x3f
c00057ab:	76 0f                	jbe    c00057bc <f_mkfs+0x197>
c00057ad:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00057b5:	83 e8 3f             	sub    eax,0x3f
c00057b8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00057bc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00057c4:	83 f8 7f             	cmp    eax,0x7f
c00057c7:	0f 86 5f 02 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c00057cd:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057d3:	b9 80 00 00 00       	mov    ecx,0x80
c00057d8:	77 05                	ja     c00057df <f_mkfs+0x1ba>
c00057da:	c1 ef 09             	shr    edi,0x9
c00057dd:	89 f9                	mov    ecx,edi
c00057df:	89 f0                	mov    eax,esi
c00057e1:	89 f7                	mov    edi,esi
c00057e3:	83 e0 01             	and    eax,0x1
c00057e6:	83 e7 02             	and    edi,0x2
c00057e9:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057ed:	0f b6 c0             	movzx  eax,al
c00057f0:	74 0a                	je     c00057fc <f_mkfs+0x1d7>
c00057f2:	85 c0                	test   eax,eax
c00057f4:	0f 84 53 01 00 00    	je     c000594d <f_mkfs+0x328>
c00057fa:	eb 37                	jmp    c0005833 <f_mkfs+0x20e>
c00057fc:	85 c0                	test   eax,eax
c00057fe:	be 13 00 00 00       	mov    esi,0x13
c0005803:	75 2e                	jne    c0005833 <f_mkfs+0x20e>
c0005805:	e9 e0 05 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c000580a:	83 f8 02             	cmp    eax,0x2
c000580d:	0f 85 11 02 00 00    	jne    c0005a24 <f_mkfs+0x3ff>
c0005813:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005819:	0f 86 e8 01 00 00    	jbe    c0005a07 <f_mkfs+0x3e2>
c000581f:	85 c9                	test   ecx,ecx
c0005821:	0f 85 d5 05 00 00    	jne    c0005dfc <f_mkfs+0x7d7>
c0005827:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000582a:	83 f9 40             	cmp    ecx,0x40
c000582d:	0f 87 d9 05 00 00    	ja     c0005e0c <f_mkfs+0x7e7>
c0005833:	85 c9                	test   ecx,ecx
c0005835:	89 cf                	mov    edi,ecx
c0005837:	75 1c                	jne    c0005855 <f_mkfs+0x230>
c0005839:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000583d:	b8 40 0b 02 c0       	mov    eax,0xc0020b40
c0005842:	bf 01 00 00 00       	mov    edi,0x1
c0005847:	c1 ee 0c             	shr    esi,0xc
c000584a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000584d:	85 d2                	test   edx,edx
c000584f:	0f 85 67 01 00 00    	jne    c00059bc <f_mkfs+0x397>
c0005855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005859:	31 d2                	xor    edx,edx
c000585b:	f7 f7                	div    edi
c000585d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005862:	0f 86 66 01 00 00    	jbe    c00059ce <f_mkfs+0x3a9>
c0005868:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000586d:	83 c0 02             	add    eax,0x2
c0005870:	01 c0                	add    eax,eax
c0005872:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000587a:	05 ff 01 00 00       	add    eax,0x1ff
c000587f:	c1 e8 09             	shr    eax,0x9
c0005882:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000588a:	c1 e0 05             	shl    eax,0x5
c000588d:	c1 e8 09             	shr    eax,0x9
c0005890:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005894:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005899:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000589d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058a1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00058a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00058a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ad:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00058b2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00058b6:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00058ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00058be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00058c2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00058c6:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00058ca:	f7 d8                	neg    eax
c00058cc:	21 c6                	and    esi,eax
c00058ce:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058d3:	29 d6                	sub    esi,edx
c00058d5:	83 f8 03             	cmp    eax,0x3
c00058d8:	0f 85 03 01 00 00    	jne    c00059e1 <f_mkfs+0x3bc>
c00058de:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058e2:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058e6:	89 f8                	mov    eax,edi
c00058e8:	c1 e0 04             	shl    eax,0x4
c00058eb:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00058ef:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058f3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058f7:	0f 82 2f 01 00 00    	jb     c0005a2c <f_mkfs+0x407>
c00058fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005901:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005905:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005909:	89 c2                	mov    edx,eax
c000590b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000590f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005914:	29 c2                	sub    edx,eax
c0005916:	89 d0                	mov    eax,edx
c0005918:	31 d2                	xor    edx,edx
c000591a:	f7 f7                	div    edi
c000591c:	89 c6                	mov    esi,eax
c000591e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005923:	83 f8 03             	cmp    eax,0x3
c0005926:	0f 85 de fe ff ff    	jne    c000580a <f_mkfs+0x1e5>
c000592c:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005932:	0f 87 03 01 00 00    	ja     c0005a3b <f_mkfs+0x416>
c0005938:	85 c9                	test   ecx,ecx
c000593a:	0f 85 ec 00 00 00    	jne    c0005a2c <f_mkfs+0x407>
c0005940:	83 ff 01             	cmp    edi,0x1
c0005943:	0f 86 e3 00 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c0005949:	d1 ef                	shr    edi,1
c000594b:	89 f9                	mov    ecx,edi
c000594d:	85 c9                	test   ecx,ecx
c000594f:	89 ce                	mov    esi,ecx
c0005951:	75 25                	jne    c0005978 <f_mkfs+0x353>
c0005953:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005957:	b8 50 0b 02 c0       	mov    eax,0xc0020b50
c000595c:	b9 01 00 00 00       	mov    ecx,0x1
c0005961:	c1 ee 11             	shr    esi,0x11
c0005964:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005967:	85 d2                	test   edx,edx
c0005969:	74 0b                	je     c0005976 <f_mkfs+0x351>
c000596b:	83 c0 02             	add    eax,0x2
c000596e:	39 f2                	cmp    edx,esi
c0005970:	77 04                	ja     c0005976 <f_mkfs+0x351>
c0005972:	01 c9                	add    ecx,ecx
c0005974:	eb ee                	jmp    c0005964 <f_mkfs+0x33f>
c0005976:	31 f6                	xor    esi,esi
c0005978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000597c:	31 d2                	xor    edx,edx
c000597e:	f7 f1                	div    ecx
c0005980:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005987:	2d f6 ff 00 00       	sub    eax,0xfff6
c000598c:	c1 ea 09             	shr    edx,0x9
c000598f:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005994:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005998:	0f 87 8e 00 00 00    	ja     c0005a2c <f_mkfs+0x407>
c000599e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00059a6:	89 cf                	mov    edi,ecx
c00059a8:	89 f1                	mov    ecx,esi
c00059aa:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00059b2:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00059b7:	e9 d8 fe ff ff       	jmp    c0005894 <f_mkfs+0x26f>
c00059bc:	83 c0 02             	add    eax,0x2
c00059bf:	39 f2                	cmp    edx,esi
c00059c1:	0f 87 8e fe ff ff    	ja     c0005855 <f_mkfs+0x230>
c00059c7:	01 ff                	add    edi,edi
c00059c9:	e9 7c fe ff ff       	jmp    c000584a <f_mkfs+0x225>
c00059ce:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00059d3:	8d 04 40             	lea    eax,[eax+eax*2]
c00059d6:	40                   	inc    eax
c00059d7:	d1 e8                	shr    eax,1
c00059d9:	83 c0 03             	add    eax,0x3
c00059dc:	e9 91 fe ff ff       	jmp    c0005872 <f_mkfs+0x24d>
c00059e1:	31 d2                	xor    edx,edx
c00059e3:	89 f0                	mov    eax,esi
c00059e5:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059e9:	85 d2                	test   edx,edx
c00059eb:	74 09                	je     c00059f6 <f_mkfs+0x3d1>
c00059ed:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059f1:	4e                   	dec    esi
c00059f2:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059f6:	89 f0                	mov    eax,esi
c00059f8:	31 d2                	xor    edx,edx
c00059fa:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059fe:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005a02:	e9 df fe ff ff       	jmp    c00058e6 <f_mkfs+0x2c1>
c0005a07:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a0d:	77 2c                	ja     c0005a3b <f_mkfs+0x416>
c0005a0f:	85 c9                	test   ecx,ecx
c0005a11:	75 19                	jne    c0005a2c <f_mkfs+0x407>
c0005a13:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005a16:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a1c:	0f 86 11 fe ff ff    	jbe    c0005833 <f_mkfs+0x20e>
c0005a22:	eb 08                	jmp    c0005a2c <f_mkfs+0x407>
c0005a24:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a2a:	76 0a                	jbe    c0005a36 <f_mkfs+0x411>
c0005a2c:	be 0e 00 00 00       	mov    esi,0xe
c0005a31:	e9 b4 03 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c0005a36:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a3b:	31 d2                	xor    edx,edx
c0005a3d:	b9 00 02 00 00       	mov    ecx,0x200
c0005a42:	89 d8                	mov    eax,ebx
c0005a44:	e8 e8 c5 ff ff       	call   c0002031 <mem_set>
c0005a49:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a4e:	ba f2 0a 02 c0       	mov    edx,0xc0020af2
c0005a53:	89 d8                	mov    eax,ebx
c0005a55:	e8 c2 c5 ff ff       	call   c000201c <mem_cpy>
c0005a5a:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a5d:	ba 00 02 00 00       	mov    edx,0x200
c0005a62:	e8 ae c5 ff ff       	call   c0002015 <st_word>
c0005a67:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a6c:	89 f8                	mov    eax,edi
c0005a6e:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a71:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a74:	e8 9c c5 ff ff       	call   c0002015 <st_word>
c0005a79:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a7d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a80:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a85:	83 f8 03             	cmp    eax,0x3
c0005a88:	b8 00 00 00 00       	mov    eax,0x0
c0005a8d:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005a92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a96:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005a9d:	e8 73 c5 ff ff       	call   c0002015 <st_word>
c0005aa2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005aa6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005aac:	77 0a                	ja     c0005ab8 <f_mkfs+0x493>
c0005aae:	8d 43 13             	lea    eax,[ebx+0x13]
c0005ab1:	e8 5f c5 ff ff       	call   c0002015 <st_word>
c0005ab6:	eb 08                	jmp    c0005ac0 <f_mkfs+0x49b>
c0005ab8:	8d 43 20             	lea    eax,[ebx+0x20]
c0005abb:	e8 59 c5 ff ff       	call   c0002019 <st_dword>
c0005ac0:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005ac4:	8d 43 18             	lea    eax,[ebx+0x18]
c0005ac7:	ba 3f 00 00 00       	mov    edx,0x3f
c0005acc:	e8 44 c5 ff ff       	call   c0002015 <st_word>
c0005ad1:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005ad4:	ba ff 00 00 00       	mov    edx,0xff
c0005ad9:	e8 37 c5 ff ff       	call   c0002015 <st_word>
c0005ade:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ae2:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005ae5:	e8 2f c5 ff ff       	call   c0002019 <st_dword>
c0005aea:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005aef:	83 f8 03             	cmp    eax,0x3
c0005af2:	75 57                	jne    c0005b4b <f_mkfs+0x526>
c0005af4:	8d 43 43             	lea    eax,[ebx+0x43]
c0005af7:	ba 00 00 21 50       	mov    edx,0x50210000
c0005afc:	e8 18 c5 ff ff       	call   c0002019 <st_dword>
c0005b01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005b05:	8d 43 24             	lea    eax,[ebx+0x24]
c0005b08:	e8 0c c5 ff ff       	call   c0002019 <st_dword>
c0005b0d:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005b10:	ba 02 00 00 00       	mov    edx,0x2
c0005b15:	e8 ff c4 ff ff       	call   c0002019 <st_dword>
c0005b1a:	8d 43 30             	lea    eax,[ebx+0x30]
c0005b1d:	ba 01 00 00 00       	mov    edx,0x1
c0005b22:	e8 ee c4 ff ff       	call   c0002015 <st_word>
c0005b27:	8d 43 32             	lea    eax,[ebx+0x32]
c0005b2a:	ba 06 00 00 00       	mov    edx,0x6
c0005b2f:	e8 e1 c4 ff ff       	call   c0002015 <st_word>
c0005b34:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b37:	b9 13 00 00 00       	mov    ecx,0x13
c0005b3c:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005b40:	ba fe 0a 02 c0       	mov    edx,0xc0020afe
c0005b45:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005b49:	eb 2f                	jmp    c0005b7a <f_mkfs+0x555>
c0005b4b:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b4e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b53:	e8 c1 c4 ff ff       	call   c0002019 <st_dword>
c0005b58:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b5d:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b60:	e8 b0 c4 ff ff       	call   c0002015 <st_word>
c0005b65:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b68:	b9 13 00 00 00       	mov    ecx,0x13
c0005b6d:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b71:	ba 12 0b 02 c0       	mov    edx,0xc0020b12
c0005b76:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b7a:	e8 9d c4 ff ff       	call   c000201c <mem_cpy>
c0005b7f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b85:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b8e:	e8 82 c4 ff ff       	call   c0002015 <st_word>
c0005b93:	6a 01                	push   0x1
c0005b95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b99:	53                   	push   ebx
c0005b9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b9e:	e8 18 c4 ff ff       	call   c0001fbb <disk_write>
c0005ba3:	83 c4 10             	add    esp,0x10
c0005ba6:	85 c0                	test   eax,eax
c0005ba8:	0f 85 25 02 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005bae:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005bb3:	83 f8 03             	cmp    eax,0x3
c0005bb6:	0f 85 98 00 00 00    	jne    c0005c54 <f_mkfs+0x62f>
c0005bbc:	6a 01                	push   0x1
c0005bbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005bc2:	83 c0 06             	add    eax,0x6
c0005bc5:	50                   	push   eax
c0005bc6:	53                   	push   ebx
c0005bc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bcb:	e8 eb c3 ff ff       	call   c0001fbb <disk_write>
c0005bd0:	b9 00 02 00 00       	mov    ecx,0x200
c0005bd5:	31 d2                	xor    edx,edx
c0005bd7:	89 d8                	mov    eax,ebx
c0005bd9:	e8 53 c4 ff ff       	call   c0002031 <mem_set>
c0005bde:	ba 52 52 61 41       	mov    edx,0x41615252
c0005be3:	89 d8                	mov    eax,ebx
c0005be5:	e8 2f c4 ff ff       	call   c0002019 <st_dword>
c0005bea:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bf0:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bf5:	e8 1f c4 ff ff       	call   c0002019 <st_dword>
c0005bfa:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bfd:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005c03:	e8 11 c4 ff ff       	call   c0002019 <st_dword>
c0005c08:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005c0e:	ba 02 00 00 00       	mov    edx,0x2
c0005c13:	e8 01 c4 ff ff       	call   c0002019 <st_dword>
c0005c18:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005c1e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005c23:	e8 ed c3 ff ff       	call   c0002015 <st_word>
c0005c28:	6a 01                	push   0x1
c0005c2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005c2e:	83 c0 07             	add    eax,0x7
c0005c31:	50                   	push   eax
c0005c32:	53                   	push   ebx
c0005c33:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005c37:	e8 7f c3 ff ff       	call   c0001fbb <disk_write>
c0005c3c:	83 c4 20             	add    esp,0x20
c0005c3f:	6a 01                	push   0x1
c0005c41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c45:	40                   	inc    eax
c0005c46:	50                   	push   eax
c0005c47:	53                   	push   ebx
c0005c48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c4c:	e8 6a c3 ff ff       	call   c0001fbb <disk_write>
c0005c51:	83 c4 10             	add    esp,0x10
c0005c54:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c58:	31 d2                	xor    edx,edx
c0005c5a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c5e:	c1 e8 09             	shr    eax,0x9
c0005c61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c65:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c6b:	89 d8                	mov    eax,ebx
c0005c6d:	e8 bf c3 ff ff       	call   c0002031 <mem_set>
c0005c72:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c77:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005c7c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005c84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c89:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c8d:	83 f8 01             	cmp    eax,0x1
c0005c90:	0f 44 d1             	cmove  edx,ecx
c0005c93:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005c97:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c9c:	75 21                	jne    c0005cbf <f_mkfs+0x69a>
c0005c9e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ca3:	89 d8                	mov    eax,ebx
c0005ca5:	e8 6f c3 ff ff       	call   c0002019 <st_dword>
c0005caa:	8d 43 04             	lea    eax,[ebx+0x4]
c0005cad:	83 ca ff             	or     edx,0xffffffff
c0005cb0:	e8 64 c3 ff ff       	call   c0002019 <st_dword>
c0005cb5:	8d 43 08             	lea    eax,[ebx+0x8]
c0005cb8:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005cbd:	eb 06                	jmp    c0005cc5 <f_mkfs+0x6a0>
c0005cbf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005cc3:	89 d8                	mov    eax,ebx
c0005cc5:	e8 4f c3 ff ff       	call   c0002019 <st_dword>
c0005cca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cd2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005cd6:	0f 46 c6             	cmovbe eax,esi
c0005cd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cdd:	50                   	push   eax
c0005cde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ce2:	53                   	push   ebx
c0005ce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ce7:	e8 cf c2 ff ff       	call   c0001fbb <disk_write>
c0005cec:	83 c4 10             	add    esp,0x10
c0005cef:	85 c0                	test   eax,eax
c0005cf1:	0f 85 dc 00 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005cf7:	b9 00 02 00 00       	mov    ecx,0x200
c0005cfc:	31 d2                	xor    edx,edx
c0005cfe:	89 d8                	mov    eax,ebx
c0005d00:	e8 2c c3 ff ff       	call   c0002031 <mem_set>
c0005d05:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005d09:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005d0d:	29 ce                	sub    esi,ecx
c0005d0f:	75 bd                	jne    c0005cce <f_mkfs+0x6a9>
c0005d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d15:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005d1d:	40                   	inc    eax
c0005d1e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005d22:	0f 87 6f ff ff ff    	ja     c0005c97 <f_mkfs+0x672>
c0005d28:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d2d:	83 f8 03             	cmp    eax,0x3
c0005d30:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005d35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d39:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d3d:	0f 46 f7             	cmovbe esi,edi
c0005d40:	56                   	push   esi
c0005d41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d45:	53                   	push   ebx
c0005d46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d4a:	e8 6c c2 ff ff       	call   c0001fbb <disk_write>
c0005d4f:	83 c4 10             	add    esp,0x10
c0005d52:	85 c0                	test   eax,eax
c0005d54:	75 7d                	jne    c0005dd3 <f_mkfs+0x7ae>
c0005d56:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d5a:	29 f7                	sub    edi,esi
c0005d5c:	75 d7                	jne    c0005d35 <f_mkfs+0x710>
c0005d5e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d63:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d68:	83 f8 03             	cmp    eax,0x3
c0005d6b:	74 1e                	je     c0005d8b <f_mkfs+0x766>
c0005d6d:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d75:	b9 06 00 00 00       	mov    ecx,0x6
c0005d7a:	77 0f                	ja     c0005d8b <f_mkfs+0x766>
c0005d7c:	83 f8 02             	cmp    eax,0x2
c0005d7f:	b9 04 00 00 00       	mov    ecx,0x4
c0005d84:	74 05                	je     c0005d8b <f_mkfs+0x766>
c0005d86:	b9 01 00 00 00       	mov    ecx,0x1
c0005d8b:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d90:	75 2a                	jne    c0005dbc <f_mkfs+0x797>
c0005d92:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d9a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d9e:	83 ec 0c             	sub    esp,0xc
c0005da1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005da5:	53                   	push   ebx
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005dae:	e8 87 d2 ff ff       	call   c000303a <create_partition>
c0005db3:	83 c4 10             	add    esp,0x10
c0005db6:	85 c0                	test   eax,eax
c0005db8:	89 c6                	mov    esi,eax
c0005dba:	75 2e                	jne    c0005dea <f_mkfs+0x7c5>
c0005dbc:	50                   	push   eax
c0005dbd:	31 f6                	xor    esi,esi
c0005dbf:	6a 00                	push   0x0
c0005dc1:	6a 00                	push   0x0
c0005dc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005dc7:	e8 05 c2 ff ff       	call   c0001fd1 <disk_ioctl>
c0005dcc:	83 c4 10             	add    esp,0x10
c0005dcf:	85 c0                	test   eax,eax
c0005dd1:	74 17                	je     c0005dea <f_mkfs+0x7c5>
c0005dd3:	85 ed                	test   ebp,ebp
c0005dd5:	75 0c                	jne    c0005de3 <f_mkfs+0x7be>
c0005dd7:	83 ec 0c             	sub    esp,0xc
c0005dda:	53                   	push   ebx
c0005ddb:	e8 6c 00 00 00       	call   c0005e4c <ff_memfree>
c0005de0:	83 c4 10             	add    esp,0x10
c0005de3:	be 01 00 00 00       	mov    esi,0x1
c0005de8:	eb 40                	jmp    c0005e2a <f_mkfs+0x805>
c0005dea:	85 ed                	test   ebp,ebp
c0005dec:	75 3c                	jne    c0005e2a <f_mkfs+0x805>
c0005dee:	83 ec 0c             	sub    esp,0xc
c0005df1:	53                   	push   ebx
c0005df2:	e8 55 00 00 00       	call   c0005e4c <ff_memfree>
c0005df7:	83 c4 10             	add    esp,0x10
c0005dfa:	eb 2e                	jmp    c0005e2a <f_mkfs+0x805>
c0005dfc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e01:	0f 85 46 fb ff ff    	jne    c000594d <f_mkfs+0x328>
c0005e07:	e9 20 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e0c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e11:	0f 85 3c fb ff ff    	jne    c0005953 <f_mkfs+0x32e>
c0005e17:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005e1d:	89 cf                	mov    edi,ecx
c0005e1f:	0f 86 30 fa ff ff    	jbe    c0005855 <f_mkfs+0x230>
c0005e25:	e9 02 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e2a:	83 c4 5c             	add    esp,0x5c
c0005e2d:	89 f0                	mov    eax,esi
c0005e2f:	5b                   	pop    ebx
c0005e30:	5e                   	pop    esi
c0005e31:	5f                   	pop    edi
c0005e32:	5d                   	pop    ebp
c0005e33:	c3                   	ret    

c0005e34 <ff_memalloc>:
c0005e34:	83 ec 0c             	sub    esp,0xc
c0005e37:	83 ec 0c             	sub    esp,0xc
c0005e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e3e:	e8 8d 8a 00 00       	call   c000e8d0 <malloc>
c0005e43:	83 c4 10             	add    esp,0x10
c0005e46:	83 c4 0c             	add    esp,0xc
c0005e49:	c3                   	ret    
c0005e4a:	66 90                	xchg   ax,ax

c0005e4c <ff_memfree>:
c0005e4c:	83 ec 0c             	sub    esp,0xc
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e56:	e8 85 8a 00 00       	call   c000e8e0 <free>
c0005e5b:	83 c4 10             	add    esp,0x10
c0005e5e:	90                   	nop
c0005e5f:	83 c4 0c             	add    esp,0xc
c0005e62:	c3                   	ret    
c0005e63:	90                   	nop

c0005e64 <ff_uni2oem>:
c0005e64:	83 ec 14             	sub    esp,0x14
c0005e67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e6b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e6f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e76:	c7 44 24 0c 40 0f 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020f40
c0005e7e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e83:	77 0b                	ja     c0005e90 <ff_uni2oem+0x2c>
c0005e85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e89:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e8e:	eb 64                	jmp    c0005ef4 <ff_uni2oem+0x90>
c0005e90:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e98:	77 5a                	ja     c0005ef4 <ff_uni2oem+0x90>
c0005e9a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e9e:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005ea3:	75 4f                	jne    c0005ef4 <ff_uni2oem+0x90>
c0005ea5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005eac:	eb 12                	jmp    c0005ec0 <ff_uni2oem+0x5c>
c0005eae:	66 90                	xchg   ax,ax
c0005eb0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005eb5:	83 c0 01             	add    eax,0x1
c0005eb8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ec0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ec5:	83 f8 7f             	cmp    eax,0x7f
c0005ec8:	77 1a                	ja     c0005ee4 <ff_uni2oem+0x80>
c0005eca:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ecf:	8d 14 00             	lea    edx,[eax+eax*1]
c0005ed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ed6:	01 d0                	add    eax,edx
c0005ed8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005edb:	0f b7 c0             	movzx  eax,ax
c0005ede:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ee2:	75 cc                	jne    c0005eb0 <ff_uni2oem+0x4c>
c0005ee4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ee9:	83 e8 80             	sub    eax,0xffffff80
c0005eec:	0f b6 c0             	movzx  eax,al
c0005eef:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ef4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ef9:	83 c4 14             	add    esp,0x14
c0005efc:	c3                   	ret    
c0005efd:	8d 76 00             	lea    esi,[esi+0x0]

c0005f00 <ff_oem2uni>:
c0005f00:	83 ec 18             	sub    esp,0x18
c0005f03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005f0b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005f10:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005f14:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005f1b:	c7 44 24 10 40 0f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020f40
c0005f23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f28:	83 f8 7f             	cmp    eax,0x7f
c0005f2b:	77 0b                	ja     c0005f38 <ff_oem2uni+0x38>
c0005f2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f31:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f36:	eb 34                	jmp    c0005f6c <ff_oem2uni+0x6c>
c0005f38:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f3c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f41:	75 29                	jne    c0005f6c <ff_oem2uni+0x6c>
c0005f43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f48:	3d ff 00 00 00       	cmp    eax,0xff
c0005f4d:	77 1d                	ja     c0005f6c <ff_oem2uni+0x6c>
c0005f4f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f54:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f59:	8d 14 00             	lea    edx,[eax+eax*1]
c0005f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f60:	01 d0                	add    eax,edx
c0005f62:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f65:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f6a:	66 90                	xchg   ax,ax
c0005f6c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f71:	83 c4 18             	add    esp,0x18
c0005f74:	c3                   	ret    
c0005f75:	8d 76 00             	lea    esi,[esi+0x0]

c0005f78 <ff_wtoupper>:
c0005f78:	83 ec 10             	sub    esp,0x10
c0005f7b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f83:	0f 87 a7 01 00 00    	ja     c0006130 <ff_wtoupper+0x1b8>
c0005f89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f8d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f92:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f97:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f9c:	77 0a                	ja     c0005fa8 <ff_wtoupper+0x30>
c0005f9e:	b8 40 0d 02 c0       	mov    eax,0xc0020d40
c0005fa3:	eb 0b                	jmp    c0005fb0 <ff_wtoupper+0x38>
c0005fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0005fa8:	b8 80 0c 02 c0       	mov    eax,0xc0020c80
c0005fad:	8d 76 00             	lea    esi,[esi+0x0]
c0005fb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fb8:	8d 50 02             	lea    edx,[eax+0x2]
c0005fbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fbf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fc2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005fc7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fcc:	85 c0                	test   eax,eax
c0005fce:	0f 84 50 01 00 00    	je     c0006124 <ff_wtoupper+0x1ac>
c0005fd4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fd9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fde:	39 c2                	cmp    edx,eax
c0005fe0:	0f 82 3e 01 00 00    	jb     c0006124 <ff_wtoupper+0x1ac>
c0005fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fea:	8d 50 02             	lea    edx,[eax+0x2]
c0005fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ff1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ff4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005ff9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ffe:	c1 e8 08             	shr    eax,0x8
c0006001:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0006006:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000600b:	0f b6 c0             	movzx  eax,al
c000600e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006013:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006018:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000601d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0006022:	01 ca                	add    edx,ecx
c0006024:	39 d0                	cmp    eax,edx
c0006026:	0f 8d d4 00 00 00    	jge    c0006100 <ff_wtoupper+0x188>
c000602c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006031:	83 f8 08             	cmp    eax,0x8
c0006034:	0f 87 e6 00 00 00    	ja     c0006120 <ff_wtoupper+0x1a8>
c000603a:	8b 04 85 40 0c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf3c0]
c0006041:	ff e0                	jmp    eax
c0006043:	90                   	nop
c0006044:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006049:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000604e:	29 c2                	sub    edx,eax
c0006050:	89 d0                	mov    eax,edx
c0006052:	8d 14 00             	lea    edx,[eax+eax*1]
c0006055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006059:	01 d0                	add    eax,edx
c000605b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000605e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006063:	e9 94 00 00 00       	jmp    c00060fc <ff_wtoupper+0x184>
c0006068:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c000606d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006071:	89 d1                	mov    ecx,edx
c0006073:	29 c1                	sub    ecx,eax
c0006075:	89 c8                	mov    eax,ecx
c0006077:	83 e0 01             	and    eax,0x1
c000607a:	89 c2                	mov    edx,eax
c000607c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006081:	29 d0                	sub    eax,edx
c0006083:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006088:	eb 72                	jmp    c00060fc <ff_wtoupper+0x184>
c000608a:	66 90                	xchg   ax,ax
c000608c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006091:	83 e8 10             	sub    eax,0x10
c0006094:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006099:	eb 61                	jmp    c00060fc <ff_wtoupper+0x184>
c000609b:	90                   	nop
c000609c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060a1:	83 e8 20             	sub    eax,0x20
c00060a4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a9:	eb 51                	jmp    c00060fc <ff_wtoupper+0x184>
c00060ab:	90                   	nop
c00060ac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060b1:	83 e8 30             	sub    eax,0x30
c00060b4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b9:	eb 41                	jmp    c00060fc <ff_wtoupper+0x184>
c00060bb:	90                   	nop
c00060bc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060c1:	83 e8 1a             	sub    eax,0x1a
c00060c4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c9:	eb 31                	jmp    c00060fc <ff_wtoupper+0x184>
c00060cb:	90                   	nop
c00060cc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060d1:	83 c0 08             	add    eax,0x8
c00060d4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d9:	eb 21                	jmp    c00060fc <ff_wtoupper+0x184>
c00060db:	90                   	nop
c00060dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060e1:	83 e8 50             	sub    eax,0x50
c00060e4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060e9:	eb 11                	jmp    c00060fc <ff_wtoupper+0x184>
c00060eb:	90                   	nop
c00060ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060f1:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060f6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060fb:	90                   	nop
c00060fc:	eb 22                	jmp    c0006120 <ff_wtoupper+0x1a8>
c00060fe:	66 90                	xchg   ax,ax
c0006100:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006105:	85 c0                	test   eax,eax
c0006107:	0f 85 a7 fe ff ff    	jne    c0005fb4 <ff_wtoupper+0x3c>
c000610d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006112:	d1 e0                	shl    eax,1
c0006114:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006118:	e9 97 fe ff ff       	jmp    c0005fb4 <ff_wtoupper+0x3c>
c000611d:	8d 76 00             	lea    esi,[esi+0x0]
c0006120:	90                   	nop
c0006121:	8d 76 00             	lea    esi,[esi+0x0]
c0006124:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006129:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000612d:	8d 76 00             	lea    esi,[esi+0x0]
c0006130:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006134:	83 c4 10             	add    esp,0x10
c0006137:	c3                   	ret    

c0006138 <utf2ucs>:
c0006138:	57                   	push   edi
c0006139:	31 c9                	xor    ecx,ecx
c000613b:	56                   	push   esi
c000613c:	89 d7                	mov    edi,edx
c000613e:	53                   	push   ebx
c000613f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0006143:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006147:	89 de                	mov    esi,ebx
c0006149:	c1 fe 08             	sar    esi,0x8
c000614c:	89 f2                	mov    edx,esi
c000614e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006151:	41                   	inc    ecx
c0006152:	85 db                	test   ebx,ebx
c0006154:	75 e9                	jne    c000613f <utf2ucs+0x7>
c0006156:	5b                   	pop    ebx
c0006157:	5e                   	pop    esi
c0006158:	5f                   	pop    edi
c0006159:	c3                   	ret    

c000615a <ucs2utfn>:
c000615a:	83 e1 fe             	and    ecx,0xfffffffe
c000615d:	01 d1                	add    ecx,edx
c000615f:	39 d1                	cmp    ecx,edx
c0006161:	75 04                	jne    c0006167 <ucs2utfn+0xd>
c0006163:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006166:	c3                   	ret    
c0006167:	57                   	push   edi
c0006168:	56                   	push   esi
c0006169:	53                   	push   ebx
c000616a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c000616d:	83 c2 02             	add    edx,0x2
c0006170:	89 de                	mov    esi,ebx
c0006172:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006176:	c1 e6 08             	shl    esi,0x8
c0006179:	09 f3                	or     ebx,esi
c000617b:	83 fb 3b             	cmp    ebx,0x3b
c000617e:	74 50                	je     c00061d0 <ucs2utfn+0x76>
c0006180:	83 fb 7f             	cmp    ebx,0x7f
c0006183:	7f 05                	jg     c000618a <ucs2utfn+0x30>
c0006185:	88 18                	mov    BYTE PTR [eax],bl
c0006187:	40                   	inc    eax
c0006188:	eb 42                	jmp    c00061cc <ucs2utfn+0x72>
c000618a:	89 df                	mov    edi,ebx
c000618c:	89 de                	mov    esi,ebx
c000618e:	c1 fe 06             	sar    esi,0x6
c0006191:	83 e7 3f             	and    edi,0x3f
c0006194:	83 cf 80             	or     edi,0xffffff80
c0006197:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000619d:	7f 12                	jg     c00061b1 <ucs2utfn+0x57>
c000619f:	83 ce c0             	or     esi,0xffffffc0
c00061a2:	83 c0 02             	add    eax,0x2
c00061a5:	89 f3                	mov    ebx,esi
c00061a7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061aa:	89 fb                	mov    ebx,edi
c00061ac:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061af:	eb 1b                	jmp    c00061cc <ucs2utfn+0x72>
c00061b1:	c1 fb 0c             	sar    ebx,0xc
c00061b4:	83 e6 3f             	and    esi,0x3f
c00061b7:	83 cb e0             	or     ebx,0xffffffe0
c00061ba:	83 ce 80             	or     esi,0xffffff80
c00061bd:	88 18                	mov    BYTE PTR [eax],bl
c00061bf:	89 f3                	mov    ebx,esi
c00061c1:	83 c0 03             	add    eax,0x3
c00061c4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061c7:	89 fb                	mov    ebx,edi
c00061c9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061cc:	39 d1                	cmp    ecx,edx
c00061ce:	75 9a                	jne    c000616a <ucs2utfn+0x10>
c00061d0:	5b                   	pop    ebx
c00061d1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061d4:	5e                   	pop    esi
c00061d5:	5f                   	pop    edi
c00061d6:	c3                   	ret    

c00061d7 <isjoliet>:
c00061d7:	31 d2                	xor    edx,edx
c00061d9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061dc:	75 26                	jne    c0006204 <isjoliet+0x2d>
c00061de:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061e2:	75 20                	jne    c0006204 <isjoliet+0x2d>
c00061e4:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061e8:	ba 02 00 00 00       	mov    edx,0x2
c00061ed:	83 f8 43             	cmp    eax,0x43
c00061f0:	74 12                	je     c0006204 <isjoliet+0x2d>
c00061f2:	83 f8 45             	cmp    eax,0x45
c00061f5:	ba 03 00 00 00       	mov    edx,0x3
c00061fa:	74 08                	je     c0006204 <isjoliet+0x2d>
c00061fc:	31 d2                	xor    edx,edx
c00061fe:	83 f8 40             	cmp    eax,0x40
c0006201:	0f 94 c2             	sete   dl
c0006204:	89 d0                	mov    eax,edx
c0006206:	c3                   	ret    

c0006207 <htohl_32>:
c0006207:	8b 00                	mov    eax,DWORD PTR [eax]
c0006209:	c3                   	ret    

c000620a <iso_733>:
c000620a:	eb fb                	jmp    c0006207 <htohl_32>

c000620c <bgrad_cache>:
c000620c:	83 fa 0e             	cmp    edx,0xe
c000620f:	77 16                	ja     c0006227 <bgrad_cache+0x1b>
c0006211:	53                   	push   ebx
c0006212:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006215:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006219:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000621c:	42                   	inc    edx
c000621d:	83 fa 0f             	cmp    edx,0xf
c0006220:	75 f3                	jne    c0006215 <bgrad_cache+0x9>
c0006222:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006225:	5b                   	pop    ebx
c0006226:	c3                   	ret    
c0006227:	c3                   	ret    

c0006228 <ucscompare>:
c0006228:	55                   	push   ebp
c0006229:	57                   	push   edi
c000622a:	89 c7                	mov    edi,eax
c000622c:	56                   	push   esi
c000622d:	89 d6                	mov    esi,edx
c000622f:	53                   	push   ebx
c0006230:	31 d2                	xor    edx,edx
c0006232:	83 ec 1c             	sub    esp,0x1c
c0006235:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006239:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000623e:	c1 e3 08             	shl    ebx,0x8
c0006241:	09 c3                	or     ebx,eax
c0006243:	39 ca                	cmp    edx,ecx
c0006245:	7d 42                	jge    c0006289 <ucscompare+0x61>
c0006247:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000624b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000624f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006253:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006258:	c1 e0 08             	shl    eax,0x8
c000625b:	09 e8                	or     eax,ebp
c000625d:	83 f8 3b             	cmp    eax,0x3b
c0006260:	74 27                	je     c0006289 <ucscompare+0x61>
c0006262:	83 ec 0c             	sub    esp,0xc
c0006265:	50                   	push   eax
c0006266:	e8 15 a7 ff ff       	call   c0000980 <tolower>
c000626b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000626e:	89 c5                	mov    ebp,eax
c0006270:	e8 0b a7 ff ff       	call   c0000980 <tolower>
c0006275:	83 c4 10             	add    esp,0x10
c0006278:	39 c5                	cmp    ebp,eax
c000627a:	75 20                	jne    c000629c <ucscompare+0x74>
c000627c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006280:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006284:	83 c2 02             	add    edx,0x2
c0006287:	eb ac                	jmp    c0006235 <ucscompare+0xd>
c0006289:	83 fb 2f             	cmp    ebx,0x2f
c000628c:	0f 95 c2             	setne  dl
c000628f:	31 c0                	xor    eax,eax
c0006291:	85 db                	test   ebx,ebx
c0006293:	0f 95 c0             	setne  al
c0006296:	21 d0                	and    eax,edx
c0006298:	f7 d8                	neg    eax
c000629a:	eb 03                	jmp    c000629f <ucscompare+0x77>
c000629c:	83 c8 ff             	or     eax,0xffffffff
c000629f:	83 c4 1c             	add    esp,0x1c
c00062a2:	5b                   	pop    ebx
c00062a3:	5e                   	pop    esi
c00062a4:	5f                   	pop    edi
c00062a5:	5d                   	pop    ebp
c00062a6:	c3                   	ret    

c00062a7 <fncompare>:
c00062a7:	55                   	push   ebp
c00062a8:	57                   	push   edi
c00062a9:	89 c7                	mov    edi,eax
c00062ab:	56                   	push   esi
c00062ac:	89 ce                	mov    esi,ecx
c00062ae:	53                   	push   ebx
c00062af:	31 db                	xor    ebx,ebx
c00062b1:	83 ec 1c             	sub    esp,0x1c
c00062b4:	39 d3                	cmp    ebx,edx
c00062b6:	7d 45                	jge    c00062fd <fncompare+0x56>
c00062b8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00062bc:	83 f8 3b             	cmp    eax,0x3b
c00062bf:	74 3c                	je     c00062fd <fncompare+0x56>
c00062c1:	83 f8 2e             	cmp    eax,0x2e
c00062c4:	75 0e                	jne    c00062d4 <fncompare+0x2d>
c00062c6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062c9:	39 d9                	cmp    ecx,ebx
c00062cb:	74 30                	je     c00062fd <fncompare+0x56>
c00062cd:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062d2:	74 29                	je     c00062fd <fncompare+0x56>
c00062d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062d8:	83 ec 0c             	sub    esp,0xc
c00062db:	50                   	push   eax
c00062dc:	e8 9f a6 ff ff       	call   c0000980 <tolower>
c00062e1:	89 c5                	mov    ebp,eax
c00062e3:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00062ea:	e8 91 a6 ff ff       	call   c0000980 <tolower>
c00062ef:	83 c4 10             	add    esp,0x10
c00062f2:	39 c5                	cmp    ebp,eax
c00062f4:	75 1e                	jne    c0006314 <fncompare+0x6d>
c00062f6:	43                   	inc    ebx
c00062f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062fb:	eb b7                	jmp    c00062b4 <fncompare+0xd>
c00062fd:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006301:	83 fa 2f             	cmp    edx,0x2f
c0006304:	0f 95 c1             	setne  cl
c0006307:	31 c0                	xor    eax,eax
c0006309:	85 d2                	test   edx,edx
c000630b:	0f 95 c0             	setne  al
c000630e:	21 c8                	and    eax,ecx
c0006310:	f7 d8                	neg    eax
c0006312:	eb 03                	jmp    c0006317 <fncompare+0x70>
c0006314:	83 c8 ff             	or     eax,0xffffffff
c0006317:	83 c4 1c             	add    esp,0x1c
c000631a:	5b                   	pop    ebx
c000631b:	5e                   	pop    esi
c000631c:	5f                   	pop    edi
c000631d:	5d                   	pop    ebp
c000631e:	c3                   	ret    

c000631f <bclear_cache>:
c000631f:	83 ec 18             	sub    esp,0x18
c0006322:	68 40 10 02 c0       	push   0xc0021040
c0006327:	e8 3c 48 01 00       	call   c001ab68 <iso_kprintf>
c000632c:	83 c4 10             	add    esp,0x10
c000632f:	31 c0                	xor    eax,eax
c0006331:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006338:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000633e:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006345:	40                   	inc    eax
c0006346:	83 f8 10             	cmp    eax,0x10
c0006349:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000634f:	75 e0                	jne    c0006331 <bclear_cache+0x12>
c0006351:	83 c4 0c             	add    esp,0xc
c0006354:	c3                   	ret    

c0006355 <bclear>:
c0006355:	eb c8                	jmp    c000631f <bclear_cache>

c0006357 <iso_break_all>:
c0006357:	83 ec 18             	sub    esp,0x18
c000635a:	68 4e 10 02 c0       	push   0xc002104e
c000635f:	e8 04 48 01 00       	call   c001ab68 <iso_kprintf>
c0006364:	83 c4 10             	add    esp,0x10
c0006367:	31 c0                	xor    eax,eax
c0006369:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006373:	05 94 00 00 00       	add    eax,0x94
c0006378:	3d 40 09 00 00       	cmp    eax,0x940
c000637d:	75 ea                	jne    c0006369 <iso_break_all+0x12>
c000637f:	83 c4 0c             	add    esp,0xc
c0006382:	c3                   	ret    

c0006383 <isoReadDiscSector>:
c0006383:	83 ec 0c             	sub    esp,0xc
c0006386:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c000638d:	50                   	push   eax
c000638e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000639a:	e8 6d 47 01 00       	call   c001ab0c <isoReadDiscSectorHelper>
c000639f:	83 c4 1c             	add    esp,0x1c
c00063a2:	c3                   	ret    

c00063a3 <bread_cache>:
c00063a3:	55                   	push   ebp
c00063a4:	57                   	push   edi
c00063a5:	89 d7                	mov    edi,edx
c00063a7:	56                   	push   esi
c00063a8:	ba 0f 00 00 00       	mov    edx,0xf
c00063ad:	53                   	push   ebx
c00063ae:	89 c6                	mov    esi,eax
c00063b0:	83 ec 0c             	sub    esp,0xc
c00063b3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00063b6:	39 38                	cmp    DWORD PTR [eax],edi
c00063b8:	74 3c                	je     c00063f6 <bread_cache+0x53>
c00063ba:	4a                   	dec    edx
c00063bb:	83 fa ff             	cmp    edx,0xffffffff
c00063be:	75 f3                	jne    c00063b3 <bread_cache+0x10>
c00063c0:	31 db                	xor    ebx,ebx
c00063c2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063c5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063c8:	74 08                	je     c00063d2 <bread_cache+0x2f>
c00063ca:	43                   	inc    ebx
c00063cb:	83 fb 10             	cmp    ebx,0x10
c00063ce:	75 f2                	jne    c00063c2 <bread_cache+0x1f>
c00063d0:	31 db                	xor    ebx,ebx
c00063d2:	50                   	push   eax
c00063d3:	6a 01                	push   0x1
c00063d5:	57                   	push   edi
c00063d6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063dc:	83 c0 04             	add    eax,0x4
c00063df:	50                   	push   eax
c00063e0:	e8 9e ff ff ff       	call   c0006383 <isoReadDiscSector>
c00063e5:	83 c4 10             	add    esp,0x10
c00063e8:	83 c9 ff             	or     ecx,0xffffffff
c00063eb:	85 c0                	test   eax,eax
c00063ed:	78 13                	js     c0006402 <bread_cache+0x5f>
c00063ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063f2:	89 da                	mov    edx,ebx
c00063f4:	89 38                	mov    DWORD PTR [eax],edi
c00063f6:	89 f0                	mov    eax,esi
c00063f8:	e8 0f fe ff ff       	call   c000620c <bgrad_cache>
c00063fd:	b9 0f 00 00 00       	mov    ecx,0xf
c0006402:	83 c4 0c             	add    esp,0xc
c0006405:	89 c8                	mov    eax,ecx
c0006407:	5b                   	pop    ebx
c0006408:	5e                   	pop    esi
c0006409:	5f                   	pop    edi
c000640a:	5d                   	pop    ebp
c000640b:	c3                   	ret    

c000640c <biread>:
c000640c:	89 c2                	mov    edx,eax
c000640e:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006413:	eb 8e                	jmp    c00063a3 <bread_cache>

c0006415 <bdread>:
c0006415:	89 c2                	mov    edx,eax
c0006417:	b8 20 60 02 c0       	mov    eax,0xc0026020
c000641c:	eb 85                	jmp    c00063a3 <bread_cache>

c000641e <strnicmp>:
c000641e:	55                   	push   ebp
c000641f:	57                   	push   edi
c0006420:	31 ff                	xor    edi,edi
c0006422:	56                   	push   esi
c0006423:	53                   	push   ebx
c0006424:	83 ec 0c             	sub    esp,0xc
c0006427:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000642b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000642f:	74 43                	je     c0006474 <strnicmp+0x56>
c0006431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006435:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006439:	85 c0                	test   eax,eax
c000643b:	74 37                	je     c0006474 <strnicmp+0x56>
c000643d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006441:	85 d2                	test   edx,edx
c0006443:	74 2f                	je     c0006474 <strnicmp+0x56>
c0006445:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006448:	39 d0                	cmp    eax,edx
c000644a:	75 04                	jne    c0006450 <strnicmp+0x32>
c000644c:	89 ef                	mov    edi,ebp
c000644e:	eb db                	jmp    c000642b <strnicmp+0xd>
c0006450:	83 ec 0c             	sub    esp,0xc
c0006453:	50                   	push   eax
c0006454:	e8 27 a5 ff ff       	call   c0000980 <tolower>
c0006459:	89 c3                	mov    ebx,eax
c000645b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000645f:	89 ef                	mov    edi,ebp
c0006461:	89 04 24             	mov    DWORD PTR [esp],eax
c0006464:	e8 17 a5 ff ff       	call   c0000980 <tolower>
c0006469:	83 c4 10             	add    esp,0x10
c000646c:	29 c3                	sub    ebx,eax
c000646e:	89 d8                	mov    eax,ebx
c0006470:	74 b9                	je     c000642b <strnicmp+0xd>
c0006472:	eb 02                	jmp    c0006476 <strnicmp+0x58>
c0006474:	31 c0                	xor    eax,eax
c0006476:	83 c4 0c             	add    esp,0xc
c0006479:	5b                   	pop    ebx
c000647a:	5e                   	pop    esi
c000647b:	5f                   	pop    edi
c000647c:	5d                   	pop    ebp
c000647d:	c3                   	ret    

c000647e <find_object>:
c000647e:	55                   	push   ebp
c000647f:	57                   	push   edi
c0006480:	89 c7                	mov    edi,eax
c0006482:	56                   	push   esi
c0006483:	53                   	push   ebx
c0006484:	89 d3                	mov    ebx,edx
c0006486:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000648c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0006490:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006497:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c000649e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00064a2:	74 0b                	je     c00064af <find_object+0x31>
c00064a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00064a8:	89 fa                	mov    edx,edi
c00064aa:	e8 89 fc ff ff       	call   c0006138 <utf2ucs>
c00064af:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00064b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064b6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00064bb:	7e 11                	jle    c00064ce <find_object+0x50>
c00064bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064c1:	e8 46 ff ff ff       	call   c000640c <biread>
c00064c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00064ca:	85 c0                	test   eax,eax
c00064cc:	79 07                	jns    c00064d5 <find_object+0x57>
c00064ce:	31 db                	xor    ebx,ebx
c00064d0:	e9 47 01 00 00       	jmp    c000661c <find_object+0x19e>
c00064d5:	31 ed                	xor    ebp,ebp
c00064d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064db:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c00064e2:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c00064e6:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064e9:	85 f6                	test   esi,esi
c00064eb:	75 0e                	jne    c00064fb <find_object+0x7d>
c00064ed:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00064f1:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c00064f9:	eb bb                	jmp    c00064b6 <find_object+0x38>
c00064fb:	8b 0d b4 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026eb4
c0006501:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006505:	85 c9                	test   ecx,ecx
c0006507:	89 d0                	mov    eax,edx
c0006509:	74 2b                	je     c0006536 <find_object+0xb8>
c000650b:	8d 43 21             	lea    eax,[ebx+0x21]
c000650e:	89 d1                	mov    ecx,edx
c0006510:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006514:	e8 0f fd ff ff       	call   c0006228 <ucscompare>
c0006519:	85 c0                	test   eax,eax
c000651b:	0f 84 cd 00 00 00    	je     c00065ee <find_object+0x170>
c0006521:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006524:	01 c5                	add    ebp,eax
c0006526:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000652c:	7f bf                	jg     c00064ed <find_object+0x6f>
c000652e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006532:	7f a3                	jg     c00064d7 <find_object+0x59>
c0006534:	eb b7                	jmp    c00064ed <find_object+0x6f>
c0006536:	29 d6                	sub    esi,edx
c0006538:	a8 01                	test   al,0x1
c000653a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000653e:	74 05                	je     c0006545 <find_object+0xc7>
c0006540:	83 ee 21             	sub    esi,0x21
c0006543:	eb 6a                	jmp    c00065af <find_object+0x131>
c0006545:	42                   	inc    edx
c0006546:	83 ee 22             	sub    esi,0x22
c0006549:	eb 64                	jmp    c00065af <find_object+0x131>
c000654b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000654e:	48                   	dec    eax
c000654f:	3c 01                	cmp    al,0x1
c0006551:	77 61                	ja     c00065b4 <find_object+0x136>
c0006553:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006557:	50                   	push   eax
c0006558:	6a 02                	push   0x2
c000655a:	68 5d 10 02 c0       	push   0xc002105d
c000655f:	52                   	push   edx
c0006560:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006564:	e8 a7 a2 ff ff       	call   c0000810 <strncmp>
c0006569:	83 c4 10             	add    esp,0x10
c000656c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006570:	85 c0                	test   eax,eax
c0006572:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006576:	75 2f                	jne    c00065a7 <find_object+0x129>
c0006578:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000657c:	50                   	push   eax
c000657d:	8d 42 05             	lea    eax,[edx+0x5]
c0006580:	83 e9 05             	sub    ecx,0x5
c0006583:	51                   	push   ecx
c0006584:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0006588:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000658c:	50                   	push   eax
c000658d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006591:	50                   	push   eax
c0006592:	e8 f9 a0 ff ff       	call   c0000690 <strncpy>
c0006597:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000659b:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00065a0:	83 c4 10             	add    esp,0x10
c00065a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00065a7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00065ab:	29 c6                	sub    esi,eax
c00065ad:	01 c2                	add    edx,eax
c00065af:	83 fe 03             	cmp    esi,0x3
c00065b2:	7f 97                	jg     c000654b <find_object+0xcd>
c00065b4:	85 c9                	test   ecx,ecx
c00065b6:	7e 40                	jle    c00065f8 <find_object+0x17a>
c00065b8:	51                   	push   ecx
c00065b9:	51                   	push   ecx
c00065ba:	6a 2f                	push   0x2f
c00065bc:	57                   	push   edi
c00065bd:	e8 0e a2 ff ff       	call   c00007d0 <strchr>
c00065c2:	83 c4 10             	add    esp,0x10
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 04                	je     c00065cd <find_object+0x14f>
c00065c9:	29 f8                	sub    eax,edi
c00065cb:	eb 0c                	jmp    c00065d9 <find_object+0x15b>
c00065cd:	83 ec 0c             	sub    esp,0xc
c00065d0:	57                   	push   edi
c00065d1:	e8 aa 9f ff ff       	call   c0000580 <strlen>
c00065d6:	83 c4 10             	add    esp,0x10
c00065d9:	52                   	push   edx
c00065da:	50                   	push   eax
c00065db:	57                   	push   edi
c00065dc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065e0:	50                   	push   eax
c00065e1:	e8 38 fe ff ff       	call   c000641e <strnicmp>
c00065e6:	83 c4 10             	add    esp,0x10
c00065e9:	e9 2b ff ff ff       	jmp    c0006519 <find_object+0x9b>
c00065ee:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065f2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00065f6:	eb 1e                	jmp    c0006616 <find_object+0x198>
c00065f8:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065fc:	8d 43 21             	lea    eax,[ebx+0x21]
c00065ff:	89 f9                	mov    ecx,edi
c0006601:	e8 a1 fc ff ff       	call   c00062a7 <fncompare>
c0006606:	85 c0                	test   eax,eax
c0006608:	0f 85 13 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000660e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006612:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006616:	0f 85 05 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000661c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006622:	89 d8                	mov    eax,ebx
c0006624:	5b                   	pop    ebx
c0006625:	5e                   	pop    esi
c0006626:	5f                   	pop    edi
c0006627:	5d                   	pop    ebp
c0006628:	c3                   	ret    

c0006629 <find_object_path>:
c0006629:	55                   	push   ebp
c000662a:	57                   	push   edi
c000662b:	89 d7                	mov    edi,edx
c000662d:	56                   	push   esi
c000662e:	89 c6                	mov    esi,eax
c0006630:	53                   	push   ebx
c0006631:	89 cb                	mov    ebx,ecx
c0006633:	83 ec 0c             	sub    esp,0xc
c0006636:	50                   	push   eax
c0006637:	50                   	push   eax
c0006638:	6a 2f                	push   0x2f
c000663a:	56                   	push   esi
c000663b:	e8 90 a1 ff ff       	call   c00007d0 <strchr>
c0006640:	83 c4 10             	add    esp,0x10
c0006643:	85 c0                	test   eax,eax
c0006645:	89 c5                	mov    ebp,eax
c0006647:	74 3a                	je     c0006683 <find_object_path+0x5a>
c0006649:	39 ee                	cmp    esi,ebp
c000664b:	74 31                	je     c000667e <find_object_path+0x55>
c000664d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006650:	e8 b5 fb ff ff       	call   c000620a <iso_733>
c0006655:	89 c2                	mov    edx,eax
c0006657:	8d 43 02             	lea    eax,[ebx+0x2]
c000665a:	e8 ab fb ff ff       	call   c000620a <iso_733>
c000665f:	83 ec 0c             	sub    esp,0xc
c0006662:	52                   	push   edx
c0006663:	89 c1                	mov    ecx,eax
c0006665:	ba 01 00 00 00       	mov    edx,0x1
c000666a:	89 f0                	mov    eax,esi
c000666c:	e8 0d fe ff ff       	call   c000647e <find_object>
c0006671:	83 c4 10             	add    esp,0x10
c0006674:	85 c0                	test   eax,eax
c0006676:	89 c3                	mov    ebx,eax
c0006678:	75 04                	jne    c000667e <find_object_path+0x55>
c000667a:	31 db                	xor    ebx,ebx
c000667c:	eb 36                	jmp    c00066b4 <find_object_path+0x8b>
c000667e:	8d 75 01             	lea    esi,[ebp+0x1]
c0006681:	eb b3                	jmp    c0006636 <find_object_path+0xd>
c0006683:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006686:	74 28                	je     c00066b0 <find_object_path+0x87>
c0006688:	8d 43 0a             	lea    eax,[ebx+0xa]
c000668b:	e8 7a fb ff ff       	call   c000620a <iso_733>
c0006690:	89 c2                	mov    edx,eax
c0006692:	8d 43 02             	lea    eax,[ebx+0x2]
c0006695:	e8 70 fb ff ff       	call   c000620a <iso_733>
c000669a:	83 ec 0c             	sub    esp,0xc
c000669d:	52                   	push   edx
c000669e:	89 c1                	mov    ecx,eax
c00066a0:	89 fa                	mov    edx,edi
c00066a2:	89 f0                	mov    eax,esi
c00066a4:	e8 d5 fd ff ff       	call   c000647e <find_object>
c00066a9:	83 c4 10             	add    esp,0x10
c00066ac:	89 c3                	mov    ebx,eax
c00066ae:	eb 04                	jmp    c00066b4 <find_object_path+0x8b>
c00066b0:	85 ff                	test   edi,edi
c00066b2:	74 c6                	je     c000667a <find_object_path+0x51>
c00066b4:	83 c4 0c             	add    esp,0xc
c00066b7:	89 d8                	mov    eax,ebx
c00066b9:	5b                   	pop    ebx
c00066ba:	5e                   	pop    esi
c00066bb:	5f                   	pop    edi
c00066bc:	5d                   	pop    ebp
c00066bd:	c3                   	ret    

c00066be <stricmp>:
c00066be:	57                   	push   edi
c00066bf:	56                   	push   esi
c00066c0:	31 f6                	xor    esi,esi
c00066c2:	53                   	push   ebx
c00066c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c7:	83 ec 0c             	sub    esp,0xc
c00066ca:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066d2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066d6:	46                   	inc    esi
c00066d7:	50                   	push   eax
c00066d8:	e8 83 a2 ff ff       	call   c0000960 <toupper>
c00066dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00066e0:	e8 9b a2 ff ff       	call   c0000980 <tolower>
c00066e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066e8:	89 c3                	mov    ebx,eax
c00066ea:	e8 71 a2 ff ff       	call   c0000960 <toupper>
c00066ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00066f2:	e8 89 a2 ff ff       	call   c0000980 <tolower>
c00066f7:	83 c4 10             	add    esp,0x10
c00066fa:	39 c3                	cmp    ebx,eax
c00066fc:	75 04                	jne    c0006702 <stricmp+0x44>
c00066fe:	85 db                	test   ebx,ebx
c0006700:	75 c1                	jne    c00066c3 <stricmp+0x5>
c0006702:	29 c3                	sub    ebx,eax
c0006704:	89 d8                	mov    eax,ebx
c0006706:	5b                   	pop    ebx
c0006707:	5e                   	pop    esi
c0006708:	5f                   	pop    edi
c0006709:	c3                   	ret    

c000670a <iso_open>:
c000670a:	57                   	push   edi
c000670b:	31 c0                	xor    eax,eax
c000670d:	56                   	push   esi
c000670e:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006713:	53                   	push   ebx
c0006714:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006719:	0f 95 c0             	setne  al
c000671c:	89 c2                	mov    edx,eax
c000671e:	89 c6                	mov    esi,eax
c0006720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006724:	e8 00 ff ff ff       	call   c0006629 <find_object_path>
c0006729:	83 ca ff             	or     edx,0xffffffff
c000672c:	85 c0                	test   eax,eax
c000672e:	74 5e                	je     c000678e <iso_open+0x84>
c0006730:	89 c1                	mov    ecx,eax
c0006732:	31 d2                	xor    edx,edx
c0006734:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000673a:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006741:	75 42                	jne    c0006785 <iso_open+0x7b>
c0006743:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c000674d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006750:	e8 b5 fa ff ff       	call   c000620a <iso_733>
c0006755:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000675b:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c0006765:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c000676b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000676e:	e8 97 fa ff ff       	call   c000620a <iso_733>
c0006773:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c000677d:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c0006783:	eb 09                	jmp    c000678e <iso_open+0x84>
c0006785:	42                   	inc    edx
c0006786:	83 fa 10             	cmp    edx,0x10
c0006789:	75 a9                	jne    c0006734 <iso_open+0x2a>
c000678b:	83 ca ff             	or     edx,0xffffffff
c000678e:	5b                   	pop    ebx
c000678f:	89 d0                	mov    eax,edx
c0006791:	5e                   	pop    esi
c0006792:	5f                   	pop    edi
c0006793:	c3                   	ret    

c0006794 <iso_close>:
c0006794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006798:	83 f8 0f             	cmp    eax,0xf
c000679b:	7f 10                	jg     c00067ad <iso_close+0x19>
c000679d:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00067a3:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00067ad:	e9 6d fb ff ff       	jmp    c000631f <bclear_cache>

c00067b2 <iso_read>:
c00067b2:	55                   	push   ebp
c00067b3:	57                   	push   edi
c00067b4:	56                   	push   esi
c00067b5:	53                   	push   ebx
c00067b6:	83 ec 1c             	sub    esp,0x1c
c00067b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067bd:	83 fd 0f             	cmp    ebp,0xf
c00067c0:	7e 0a                	jle    c00067cc <iso_read+0x1a>
c00067c2:	83 c8 ff             	or     eax,0xffffffff
c00067c5:	89 c2                	mov    edx,eax
c00067c7:	e9 f4 00 00 00       	jmp    c00068c0 <iso_read+0x10e>
c00067cc:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067d2:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00067d9:	74 e7                	je     c00067c2 <iso_read+0x10>
c00067db:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c00067e1:	85 d2                	test   edx,edx
c00067e3:	75 dd                	jne    c00067c2 <iso_read+0x10>
c00067e5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067ea:	0f 84 cd 00 00 00    	je     c00068bd <iso_read+0x10b>
c00067f0:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00067f6:	8b 9d 4c 65 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd9ab4]
c00067fc:	29 c3                	sub    ebx,eax
c00067fe:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006802:	89 d9                	mov    ecx,ebx
c0006804:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006809:	85 c9                	test   ecx,ecx
c000680b:	0f 84 ac 00 00 00    	je     c00068bd <iso_read+0x10b>
c0006811:	89 c6                	mov    esi,eax
c0006813:	bb 00 08 00 00       	mov    ebx,0x800
c0006818:	c1 e8 0b             	shr    eax,0xb
c000681b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006821:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c0006827:	29 f3                	sub    ebx,esi
c0006829:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000682f:	75 3f                	jne    c0006870 <iso_read+0xbe>
c0006831:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006837:	7e 37                	jle    c0006870 <iso_read+0xbe>
c0006839:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000683f:	be 20 00 00 00       	mov    esi,0x20
c0006844:	7f 05                	jg     c000684b <iso_read+0x99>
c0006846:	89 ce                	mov    esi,ecx
c0006848:	c1 fe 0b             	sar    esi,0xb
c000684b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000684f:	89 f3                	mov    ebx,esi
c0006851:	52                   	push   edx
c0006852:	56                   	push   esi
c0006853:	50                   	push   eax
c0006854:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006858:	c1 e3 0b             	shl    ebx,0xb
c000685b:	e8 23 fb ff ff       	call   c0006383 <isoReadDiscSector>
c0006860:	83 c4 10             	add    esp,0x10
c0006863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006867:	85 c0                	test   eax,eax
c0006869:	7f 3d                	jg     c00068a8 <iso_read+0xf6>
c000686b:	e9 52 ff ff ff       	jmp    c00067c2 <iso_read+0x10>
c0006870:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006874:	39 d9                	cmp    ecx,ebx
c0006876:	0f 4e d9             	cmovle ebx,ecx
c0006879:	e8 97 fb ff ff       	call   c0006415 <bdread>
c000687e:	85 c0                	test   eax,eax
c0006880:	0f 88 3c ff ff ff    	js     c00067c2 <iso_read+0x10>
c0006886:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c000688d:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c0006893:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006897:	25 ff 07 00 00       	and    eax,0x7ff
c000689c:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00068a0:	89 d9                	mov    ecx,ebx
c00068a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00068a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00068a8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00068ac:	01 da                	add    edx,ebx
c00068ae:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00068b4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068b8:	e9 28 ff ff ff       	jmp    c00067e5 <iso_read+0x33>
c00068bd:	89 d0                	mov    eax,edx
c00068bf:	99                   	cdq    
c00068c0:	83 c4 1c             	add    esp,0x1c
c00068c3:	5b                   	pop    ebx
c00068c4:	5e                   	pop    esi
c00068c5:	5f                   	pop    edi
c00068c6:	5d                   	pop    ebp
c00068c7:	c3                   	ret    

c00068c8 <iso_seek>:
c00068c8:	55                   	push   ebp
c00068c9:	83 c8 ff             	or     eax,0xffffffff
c00068cc:	57                   	push   edi
c00068cd:	89 c2                	mov    edx,eax
c00068cf:	56                   	push   esi
c00068d0:	53                   	push   ebx
c00068d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068dd:	83 fe 0f             	cmp    esi,0xf
c00068e0:	7f 65                	jg     c0006947 <iso_seek+0x7f>
c00068e2:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068e8:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00068ef:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c00068f5:	74 50                	je     c0006947 <iso_seek+0x7f>
c00068f7:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068fe:	75 47                	jne    c0006947 <iso_seek+0x7f>
c0006900:	83 fb 01             	cmp    ebx,0x1
c0006903:	74 0e                	je     c0006913 <iso_seek+0x4b>
c0006905:	83 fb 02             	cmp    ebx,0x2
c0006908:	74 0e                	je     c0006918 <iso_seek+0x50>
c000690a:	85 db                	test   ebx,ebx
c000690c:	75 39                	jne    c0006947 <iso_seek+0x7f>
c000690e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006911:	eb 0d                	jmp    c0006920 <iso_seek+0x58>
c0006913:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006916:	eb 08                	jmp    c0006920 <iso_seek+0x58>
c0006918:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000691b:	01 f8                	add    eax,edi
c000691d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006920:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006926:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000692c:	05 40 65 02 c0       	add    eax,0xc0026540
c0006931:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006934:	76 03                	jbe    c0006939 <iso_seek+0x71>
c0006936:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006939:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000693f:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006945:	31 d2                	xor    edx,edx
c0006947:	5b                   	pop    ebx
c0006948:	5e                   	pop    esi
c0006949:	5f                   	pop    edi
c000694a:	5d                   	pop    ebp
c000694b:	c3                   	ret    

c000694c <iso_tell>:
c000694c:	53                   	push   ebx
c000694d:	83 c8 ff             	or     eax,0xffffffff
c0006950:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006954:	89 c2                	mov    edx,eax
c0006956:	83 f9 0f             	cmp    ecx,0xf
c0006959:	7f 20                	jg     c000697b <iso_tell+0x2f>
c000695b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006961:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c0006968:	74 11                	je     c000697b <iso_tell+0x2f>
c000696a:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006971:	75 08                	jne    c000697b <iso_tell+0x2f>
c0006973:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c0006979:	31 d2                	xor    edx,edx
c000697b:	5b                   	pop    ebx
c000697c:	c3                   	ret    

c000697d <iso_total>:
c000697d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006981:	83 c8 ff             	or     eax,0xffffffff
c0006984:	83 fa 0f             	cmp    edx,0xf
c0006987:	7f 1e                	jg     c00069a7 <iso_total+0x2a>
c0006989:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000698f:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c0006996:	74 0f                	je     c00069a7 <iso_total+0x2a>
c0006998:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c000699f:	75 06                	jne    c00069a7 <iso_total+0x2a>
c00069a1:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00069a7:	c3                   	ret    

c00069a8 <fn_postprocess>:
c00069a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00069ac:	89 d0                	mov    eax,edx
c00069ae:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00069b1:	85 c9                	test   ecx,ecx
c00069b3:	74 08                	je     c00069bd <fn_postprocess+0x15>
c00069b5:	83 f9 3b             	cmp    ecx,0x3b
c00069b8:	74 03                	je     c00069bd <fn_postprocess+0x15>
c00069ba:	40                   	inc    eax
c00069bb:	eb f1                	jmp    c00069ae <fn_postprocess+0x6>
c00069bd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069c0:	39 d0                	cmp    eax,edx
c00069c2:	76 0a                	jbe    c00069ce <fn_postprocess+0x26>
c00069c4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069c8:	75 04                	jne    c00069ce <fn_postprocess+0x26>
c00069ca:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069ce:	c3                   	ret    

c00069cf <iso_readdir>:
c00069cf:	55                   	push   ebp
c00069d0:	57                   	push   edi
c00069d1:	56                   	push   esi
c00069d2:	53                   	push   ebx
c00069d3:	83 ec 1c             	sub    esp,0x1c
c00069d6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069da:	83 fb 0f             	cmp    ebx,0xf
c00069dd:	7f 28                	jg     c0006a07 <iso_readdir+0x38>
c00069df:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069e5:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c00069ec:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c00069f2:	74 13                	je     c0006a07 <iso_readdir+0x38>
c00069f4:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069f8:	74 0d                	je     c0006a07 <iso_readdir+0x38>
c00069fa:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006a01:	0f 84 b1 00 00 00    	je     c0006ab8 <iso_readdir+0xe9>
c0006a07:	83 ec 0c             	sub    esp,0xc
c0006a0a:	68 60 10 02 c0       	push   0xc0021060
c0006a0f:	e8 54 41 01 00       	call   c001ab68 <iso_kprintf>
c0006a14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a17:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a1d:	e8 62 41 01 00       	call   c001ab84 <iso_kprintfd>
c0006a22:	c7 04 24 65 10 02 c0 	mov    DWORD PTR [esp],0xc0021065
c0006a29:	e8 3a 41 01 00       	call   c001ab68 <iso_kprintf>
c0006a2e:	58                   	pop    eax
c0006a2f:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006a35:	e8 4a 41 01 00       	call   c001ab84 <iso_kprintfd>
c0006a3a:	c7 04 24 6b 10 02 c0 	mov    DWORD PTR [esp],0xc002106b
c0006a41:	e8 22 41 01 00       	call   c001ab68 <iso_kprintf>
c0006a46:	58                   	pop    eax
c0006a47:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c0006a4d:	e8 32 41 01 00       	call   c001ab84 <iso_kprintfd>
c0006a52:	c7 04 24 71 10 02 c0 	mov    DWORD PTR [esp],0xc0021071
c0006a59:	e8 0a 41 01 00       	call   c001ab68 <iso_kprintf>
c0006a5e:	58                   	pop    eax
c0006a5f:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006a65:	e8 1a 41 01 00       	call   c001ab84 <iso_kprintfd>
c0006a6a:	83 c4 10             	add    esp,0x10
c0006a6d:	eb 42                	jmp    c0006ab1 <iso_readdir+0xe2>
c0006a6f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a72:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006a79:	89 d1                	mov    ecx,edx
c0006a7b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a81:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a85:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a88:	75 35                	jne    c0006abf <iso_readdir+0xf0>
c0006a8a:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a90:	81 c2 00 08 00 00    	add    edx,0x800
c0006a96:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a99:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a9c:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a9f:	73 1e                	jae    c0006abf <iso_readdir+0xf0>
c0006aa1:	8b 07                	mov    eax,DWORD PTR [edi]
c0006aa3:	c1 ea 0b             	shr    edx,0xb
c0006aa6:	01 d0                	add    eax,edx
c0006aa8:	e8 5f f9 ff ff       	call   c000640c <biread>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	79 be                	jns    c0006a6f <iso_readdir+0xa0>
c0006ab1:	31 c0                	xor    eax,eax
c0006ab3:	e9 6a 01 00 00       	jmp    c0006c22 <iso_readdir+0x253>
c0006ab8:	31 f6                	xor    esi,esi
c0006aba:	83 c8 ff             	or     eax,0xffffffff
c0006abd:	eb da                	jmp    c0006a99 <iso_readdir+0xca>
c0006abf:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ac5:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c0006acb:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c0006ad1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006ad4:	73 db                	jae    c0006ab1 <iso_readdir+0xe2>
c0006ad6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ada:	75 34                	jne    c0006b10 <iso_readdir+0x141>
c0006adc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006ae0:	75 2e                	jne    c0006b10 <iso_readdir+0x141>
c0006ae2:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ae5:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006aec:	01 f9                	add    ecx,edi
c0006aee:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006af1:	89 c8                	mov    eax,ecx
c0006af3:	25 ff 07 00 00       	and    eax,0x7ff
c0006af8:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006afd:	01 c8                	add    eax,ecx
c0006aff:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006b02:	25 ff 07 00 00       	and    eax,0x7ff
c0006b07:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006b0b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006b0e:	74 a1                	je     c0006ab1 <iso_readdir+0xe2>
c0006b10:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006b16:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b1a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006b21:	8d 56 21             	lea    edx,[esi+0x21]
c0006b24:	8d af 58 65 02 c0    	lea    ebp,[edi-0x3ffd9aa8]
c0006b2a:	74 0c                	je     c0006b38 <iso_readdir+0x169>
c0006b2c:	89 e8                	mov    eax,ebp
c0006b2e:	e8 27 f6 ff ff       	call   c000615a <ucs2utfn>
c0006b33:	e9 b1 00 00 00       	jmp    c0006be9 <iso_readdir+0x21a>
c0006b38:	50                   	push   eax
c0006b39:	51                   	push   ecx
c0006b3a:	52                   	push   edx
c0006b3b:	55                   	push   ebp
c0006b3c:	e8 4f 9b ff ff       	call   c0000690 <strncpy>
c0006b41:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b48:	c6 84 07 58 65 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd9aa8],0x0
c0006b50:	e8 53 fe ff ff       	call   c00069a8 <fn_postprocess>
c0006b55:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b59:	83 c4 10             	add    esp,0x10
c0006b5c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b5f:	89 d1                	mov    ecx,edx
c0006b61:	29 d0                	sub    eax,edx
c0006b63:	80 e1 01             	and    cl,0x1
c0006b66:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006b6a:	74 05                	je     c0006b71 <iso_readdir+0x1a2>
c0006b6c:	83 e8 21             	sub    eax,0x21
c0006b6f:	eb 04                	jmp    c0006b75 <iso_readdir+0x1a6>
c0006b71:	42                   	inc    edx
c0006b72:	83 e8 22             	sub    eax,0x22
c0006b75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b79:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b83:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b88:	7e 5f                	jle    c0006be9 <iso_readdir+0x21a>
c0006b8a:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006b8d:	48                   	dec    eax
c0006b8e:	3c 01                	cmp    al,0x1
c0006b90:	77 57                	ja     c0006be9 <iso_readdir+0x21a>
c0006b92:	51                   	push   ecx
c0006b93:	6a 02                	push   0x2
c0006b95:	68 5d 10 02 c0       	push   0xc002105d
c0006b9a:	52                   	push   edx
c0006b9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006b9f:	e8 6c 9c ff ff       	call   c0000810 <strncmp>
c0006ba4:	83 c4 10             	add    esp,0x10
c0006ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006bab:	85 c0                	test   eax,eax
c0006bad:	75 2e                	jne    c0006bdd <iso_readdir+0x20e>
c0006baf:	50                   	push   eax
c0006bb0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bb4:	83 e8 05             	sub    eax,0x5
c0006bb7:	50                   	push   eax
c0006bb8:	8d 42 05             	lea    eax,[edx+0x5]
c0006bbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006bbf:	50                   	push   eax
c0006bc0:	55                   	push   ebp
c0006bc1:	e8 ca 9a ff ff       	call   c0000690 <strncpy>
c0006bc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006bca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006bce:	83 c4 10             	add    esp,0x10
c0006bd1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bd5:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c0006bdd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006be1:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006be5:	01 c2                	add    edx,eax
c0006be7:	eb 9a                	jmp    c0006b83 <iso_readdir+0x1b4>
c0006be9:	83 c8 ff             	or     eax,0xffffffff
c0006bec:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bf0:	89 c2                	mov    edx,eax
c0006bf2:	75 0a                	jne    c0006bfe <iso_readdir+0x22f>
c0006bf4:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bf7:	e8 0e f6 ff ff       	call   c000620a <iso_733>
c0006bfc:	31 d2                	xor    edx,edx
c0006bfe:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006c04:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006c0a:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006c10:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006c16:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006c19:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c1c:	8d 87 50 65 02 c0    	lea    eax,[edi-0x3ffd9ab0]
c0006c22:	83 c4 1c             	add    esp,0x1c
c0006c25:	5b                   	pop    ebx
c0006c26:	5e                   	pop    esi
c0006c27:	5f                   	pop    edi
c0006c28:	5d                   	pop    ebp
c0006c29:	c3                   	ret    

c0006c2a <iso_reset>:
c0006c2a:	83 ec 18             	sub    esp,0x18
c0006c2d:	68 7a 10 02 c0       	push   0xc002107a
c0006c32:	e8 31 3f 01 00       	call   c001ab68 <iso_kprintf>
c0006c37:	e8 1b f7 ff ff       	call   c0006357 <iso_break_all>
c0006c3c:	e8 14 f7 ff ff       	call   c0006355 <bclear>
c0006c41:	31 c0                	xor    eax,eax
c0006c43:	83 c4 1c             	add    esp,0x1c
c0006c46:	c3                   	ret    

c0006c47 <init_percd>:
c0006c47:	57                   	push   edi
c0006c48:	56                   	push   esi
c0006c49:	53                   	push   ebx
c0006c4a:	bb 01 00 00 00       	mov    ebx,0x1
c0006c4f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006c53:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006c58:	e8 cd ff ff ff       	call   c0006c2a <iso_reset>
c0006c5d:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006c67:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006c6c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c70:	e8 97 f7 ff ff       	call   c000640c <biread>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	89 c6                	mov    esi,eax
c0006c79:	0f 88 ba 00 00 00    	js     c0006d39 <init_percd+0xf2>
c0006c7f:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006c86:	52                   	push   edx
c0006c87:	6a 06                	push   0x6
c0006c89:	68 85 10 02 c0       	push   0xc0021085
c0006c8e:	83 c0 04             	add    eax,0x4
c0006c91:	50                   	push   eax
c0006c92:	e8 e9 96 ff ff       	call   c0000380 <memcmp>
c0006c97:	83 c4 10             	add    esp,0x10
c0006c9a:	85 c0                	test   eax,eax
c0006c9c:	74 08                	je     c0006ca6 <init_percd+0x5f>
c0006c9e:	43                   	inc    ebx
c0006c9f:	83 fb 04             	cmp    ebx,0x4
c0006ca2:	75 c3                	jne    c0006c67 <init_percd+0x20>
c0006ca4:	eb 1a                	jmp    c0006cc0 <init_percd+0x79>
c0006ca6:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006cad:	83 c0 5c             	add    eax,0x5c
c0006cb0:	e8 22 f5 ff ff       	call   c00061d7 <isjoliet>
c0006cb5:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006cba:	85 c0                	test   eax,eax
c0006cbc:	74 e0                	je     c0006c9e <init_percd+0x57>
c0006cbe:	eb 3e                	jmp    c0006cfe <init_percd+0xb7>
c0006cc0:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006cc7:	75 35                	jne    c0006cfe <init_percd+0xb7>
c0006cc9:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006cce:	83 c0 10             	add    eax,0x10
c0006cd1:	e8 36 f7 ff ff       	call   c000640c <biread>
c0006cd6:	85 c0                	test   eax,eax
c0006cd8:	89 c6                	mov    esi,eax
c0006cda:	78 5f                	js     c0006d3b <init_percd+0xf4>
c0006cdc:	50                   	push   eax
c0006cdd:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006ce4:	83 cb ff             	or     ebx,0xffffffff
c0006ce7:	6a 06                	push   0x6
c0006ce9:	68 8c 10 02 c0       	push   0xc002108c
c0006cee:	83 c0 04             	add    eax,0x4
c0006cf1:	50                   	push   eax
c0006cf2:	e8 89 96 ff ff       	call   c0000380 <memcmp>
c0006cf7:	83 c4 10             	add    esp,0x10
c0006cfa:	85 c0                	test   eax,eax
c0006cfc:	75 3d                	jne    c0006d3b <init_percd+0xf4>
c0006cfe:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006d05:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006d0a:	b9 22 00 00 00       	mov    ecx,0x22
c0006d0f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d17:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006d1c:	31 db                	xor    ebx,ebx
c0006d1e:	e8 e7 f4 ff ff       	call   c000620a <iso_733>
c0006d23:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006d28:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006d2d:	e8 d8 f4 ff ff       	call   c000620a <iso_733>
c0006d32:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006d37:	eb 02                	jmp    c0006d3b <init_percd+0xf4>
c0006d39:	89 c3                	mov    ebx,eax
c0006d3b:	89 d8                	mov    eax,ebx
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	5f                   	pop    edi
c0006d40:	c3                   	ret    

c0006d41 <iso_ioctl>:
c0006d41:	83 ec 18             	sub    esp,0x18
c0006d44:	68 93 10 02 c0       	push   0xc0021093
c0006d49:	e8 1a 3e 01 00       	call   c001ab68 <iso_kprintf>
c0006d4e:	e8 d7 fe ff ff       	call   c0006c2a <iso_reset>
c0006d53:	31 c0                	xor    eax,eax
c0006d55:	83 c4 1c             	add    esp,0x1c
c0006d58:	c3                   	ret    

c0006d59 <fs_iso9660_init>:
c0006d59:	53                   	push   ebx
c0006d5a:	31 db                	xor    ebx,ebx
c0006d5c:	83 ec 14             	sub    esp,0x14
c0006d5f:	68 9e 10 02 c0       	push   0xc002109e
c0006d64:	e8 ff 3d 01 00       	call   c001ab68 <iso_kprintf>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	68 40 09 00 00       	push   0x940
c0006d71:	6a 00                	push   0x0
c0006d73:	68 40 65 02 c0       	push   0xc0026540
c0006d78:	e8 73 97 ff ff       	call   c00004f0 <memset>
c0006d7d:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006d87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d8e:	e8 3d 7b 00 00       	call   c000e8d0 <malloc>
c0006d93:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d9a:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006d9f:	e8 2c 7b 00 00       	call   c000e8d0 <malloc>
c0006da4:	83 c4 10             	add    esp,0x10
c0006da7:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006dac:	83 ec 0c             	sub    esp,0xc
c0006daf:	68 04 08 00 00       	push   0x804
c0006db4:	e8 17 7b 00 00       	call   c000e8d0 <malloc>
c0006db9:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006dc0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dc6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006dcd:	e8 fe 7a 00 00       	call   c000e8d0 <malloc>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006ddc:	43                   	inc    ebx
c0006ddd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006de3:	83 fb 10             	cmp    ebx,0x10
c0006de6:	75 c4                	jne    c0006dac <fs_iso9660_init+0x53>
c0006de8:	83 c4 08             	add    esp,0x8
c0006deb:	31 c0                	xor    eax,eax
c0006ded:	5b                   	pop    ebx
c0006dee:	c3                   	ret    

c0006def <fs_iso9660_shutdown>:
c0006def:	53                   	push   ebx
c0006df0:	31 db                	xor    ebx,ebx
c0006df2:	83 ec 08             	sub    esp,0x8
c0006df5:	83 ec 0c             	sub    esp,0xc
c0006df8:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006dff:	e8 dc 7a 00 00       	call   c000e8e0 <free>
c0006e04:	58                   	pop    eax
c0006e05:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006e0c:	43                   	inc    ebx
c0006e0d:	e8 ce 7a 00 00       	call   c000e8e0 <free>
c0006e12:	83 c4 10             	add    esp,0x10
c0006e15:	83 fb 10             	cmp    ebx,0x10
c0006e18:	75 db                	jne    c0006df5 <fs_iso9660_shutdown+0x6>
c0006e1a:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006e1f:	85 c0                	test   eax,eax
c0006e21:	74 0c                	je     c0006e2f <fs_iso9660_shutdown+0x40>
c0006e23:	83 ec 0c             	sub    esp,0xc
c0006e26:	50                   	push   eax
c0006e27:	e8 b4 7a 00 00       	call   c000e8e0 <free>
c0006e2c:	83 c4 10             	add    esp,0x10
c0006e2f:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006e34:	85 c0                	test   eax,eax
c0006e36:	74 0c                	je     c0006e44 <fs_iso9660_shutdown+0x55>
c0006e38:	83 ec 0c             	sub    esp,0xc
c0006e3b:	50                   	push   eax
c0006e3c:	e8 9f 7a 00 00       	call   c000e8e0 <free>
c0006e41:	83 c4 10             	add    esp,0x10
c0006e44:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006e4e:	31 c0                	xor    eax,eax
c0006e50:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006e5a:	83 c4 08             	add    esp,0x8
c0006e5d:	5b                   	pop    ebx
c0006e5e:	c3                   	ret    

c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e5f:	55                   	push   ebp
c0006e60:	57                   	push   edi
c0006e61:	56                   	push   esi
c0006e62:	53                   	push   ebx
c0006e63:	83 ec 20             	sub    esp,0x20
c0006e66:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0006e6a:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c0006e72:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0006e76:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c0006e7e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006e82:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c0006e8a:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c0006e92:	89 f7                	mov    edi,esi
c0006e94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0006e99:	89 eb                	mov    ebx,ebp
c0006e9b:	eb 02                	jmp    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c0006e9d:	89 c7                	mov    edi,eax
c0006e9f:	31 d2                	xor    edx,edx
c0006ea1:	89 f8                	mov    eax,edi
c0006ea3:	f7 f1                	div    ecx
c0006ea5:	83 c3 01             	add    ebx,0x1
c0006ea8:	39 cf                	cmp    edi,ecx
c0006eaa:	73 f1                	jae    c0006e9d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c0006eac:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eaf:	eb 02                	jmp    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c0006eb1:	89 c6                	mov    esi,eax
c0006eb3:	31 d2                	xor    edx,edx
c0006eb5:	89 f0                	mov    eax,esi
c0006eb7:	f7 f1                	div    ecx
c0006eb9:	83 eb 01             	sub    ebx,0x1
c0006ebc:	39 ce                	cmp    esi,ecx
c0006ebe:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec2:	88 13                	mov    BYTE PTR [ebx],dl
c0006ec4:	73 eb                	jae    c0006eb1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c0006ec6:	83 c4 20             	add    esp,0x20
c0006ec9:	89 e8                	mov    eax,ebp
c0006ecb:	5b                   	pop    ebx
c0006ecc:	5e                   	pop    esi
c0006ecd:	5f                   	pop    edi
c0006ece:	5d                   	pop    ebp
c0006ecf:	c3                   	ret    

c0006ed0 <Dbg::logc(char)>:
c0006ed0:	f6 05 90 bd 02 c0 10 	test   BYTE PTR ds:0xc002bd90,0x10
c0006ed7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006edb:	75 12                	jne    c0006eef <Dbg::logc(char)+0x1f>
c0006edd:	ba fd 03 00 00       	mov    edx,0x3fd
c0006ee2:	ec                   	in     al,dx
c0006ee3:	a8 20                	test   al,0x20
c0006ee5:	74 fb                	je     c0006ee2 <Dbg::logc(char)+0x12>
c0006ee7:	ba f8 03 00 00       	mov    edx,0x3f8
c0006eec:	88 c8                	mov    al,cl
c0006eee:	ee                   	out    dx,al
c0006eef:	c3                   	ret    

c0006ef0 <Dbg::logs(char*)>:
c0006ef0:	53                   	push   ebx
c0006ef1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006ef5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006ef8:	85 c0                	test   eax,eax
c0006efa:	74 11                	je     c0006f0d <Dbg::logs(char*)+0x1d>
c0006efc:	50                   	push   eax
c0006efd:	83 c3 01             	add    ebx,0x1
c0006f00:	e8 cb ff ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006f05:	58                   	pop    eax
c0006f06:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f09:	85 c0                	test   eax,eax
c0006f0b:	75 ef                	jne    c0006efc <Dbg::logs(char*)+0xc>
c0006f0d:	5b                   	pop    ebx
c0006f0e:	c3                   	ret    

c0006f0f <Dbg::logWriteInt(unsigned int)>:
c0006f0f:	83 ec 10             	sub    esp,0x10
c0006f12:	6a 0a                	push   0xa
c0006f14:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f18:	50                   	push   eax
c0006f19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006f1d:	50                   	push   eax
c0006f1e:	e8 3c ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f23:	50                   	push   eax
c0006f24:	e8 c7 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006f29:	83 c4 20             	add    esp,0x20
c0006f2c:	c3                   	ret    

c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f2d:	83 ec 10             	sub    esp,0x10
c0006f30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006f34:	50                   	push   eax
c0006f35:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f39:	50                   	push   eax
c0006f3a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006f3e:	52                   	push   edx
c0006f3f:	e8 1b ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f44:	50                   	push   eax
c0006f45:	e8 a6 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006f4a:	83 c4 20             	add    esp,0x20
c0006f4d:	c3                   	ret    

c0006f4e <Dbg::kprintf(char const*, ...)>:
c0006f4e:	55                   	push   ebp
c0006f4f:	57                   	push   edi
c0006f50:	56                   	push   esi
c0006f51:	53                   	push   ebx
c0006f52:	83 ec 0c             	sub    esp,0xc
c0006f55:	f6 05 90 bd 02 c0 10 	test   BYTE PTR ds:0xc002bd90,0x10
c0006f5c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006f60:	74 08                	je     c0006f6a <Dbg::kprintf(char const*, ...)+0x1c>
c0006f62:	83 c4 0c             	add    esp,0xc
c0006f65:	5b                   	pop    ebx
c0006f66:	5e                   	pop    esi
c0006f67:	5f                   	pop    edi
c0006f68:	5d                   	pop    ebp
c0006f69:	c3                   	ret    
c0006f6a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f6e:	31 ff                	xor    edi,edi
c0006f70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f74:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f77:	85 c0                	test   eax,eax
c0006f79:	74 e7                	je     c0006f62 <Dbg::kprintf(char const*, ...)+0x14>
c0006f7b:	8d 77 01             	lea    esi,[edi+0x1]
c0006f7e:	83 f8 25             	cmp    eax,0x25
c0006f81:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006f84:	75 47                	jne    c0006fcd <Dbg::kprintf(char const*, ...)+0x7f>
c0006f86:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006f89:	83 c7 02             	add    edi,0x2
c0006f8c:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006f8f:	83 e8 25             	sub    eax,0x25
c0006f92:	0f b6 c0             	movzx  eax,al
c0006f95:	83 f8 53             	cmp    eax,0x53
c0006f98:	0f 87 ce 00 00 00    	ja     c000706c <Dbg::kprintf(char const*, ...)+0x11e>
c0006f9e:	ff 24 85 b0 10 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdef50]
c0006fa5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fa9:	89 c8                	mov    eax,ecx
c0006fab:	83 c1 04             	add    ecx,0x4
c0006fae:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fb2:	8b 28                	mov    ebp,DWORD PTR [eax]
c0006fb4:	55                   	push   ebp
c0006fb5:	e8 55 ff ff ff       	call   c0006f0f <Dbg::logWriteInt(unsigned int)>
c0006fba:	58                   	pop    eax
c0006fbb:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006fbe:	85 c0                	test   eax,eax
c0006fc0:	74 a0                	je     c0006f62 <Dbg::kprintf(char const*, ...)+0x14>
c0006fc2:	8d 77 01             	lea    esi,[edi+0x1]
c0006fc5:	83 f8 25             	cmp    eax,0x25
c0006fc8:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fcb:	74 b9                	je     c0006f86 <Dbg::kprintf(char const*, ...)+0x38>
c0006fcd:	50                   	push   eax
c0006fce:	89 f7                	mov    edi,esi
c0006fd0:	e8 fb fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006fd5:	89 ee                	mov    esi,ebp
c0006fd7:	58                   	pop    eax
c0006fd8:	eb e1                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0006fda:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fde:	89 c8                	mov    eax,ecx
c0006fe0:	83 c1 04             	add    ecx,0x4
c0006fe3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fe7:	8b 00                	mov    eax,DWORD PTR [eax]
c0006fe9:	50                   	push   eax
c0006fea:	e8 01 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006fef:	58                   	pop    eax
c0006ff0:	eb c9                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0006ff2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006ff6:	89 d0                	mov    eax,edx
c0006ff8:	83 c2 04             	add    edx,0x4
c0006ffb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0006fff:	8b 00                	mov    eax,DWORD PTR [eax]
c0007001:	50                   	push   eax
c0007002:	e8 08 ff ff ff       	call   c0006f0f <Dbg::logWriteInt(unsigned int)>
c0007007:	58                   	pop    eax
c0007008:	eb b1                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000700a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000700e:	89 d0                	mov    eax,edx
c0007010:	83 c2 04             	add    edx,0x4
c0007013:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007017:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000701a:	50                   	push   eax
c000701b:	e8 b0 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007020:	58                   	pop    eax
c0007021:	eb 98                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0007023:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007027:	89 c8                	mov    eax,ecx
c0007029:	83 c1 04             	add    ecx,0x4
c000702c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007030:	6a 10                	push   0x10
c0007032:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007034:	51                   	push   ecx
c0007035:	e8 f3 fe ff ff       	call   c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>
c000703a:	5d                   	pop    ebp
c000703b:	58                   	pop    eax
c000703c:	e9 7a ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0007041:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007045:	89 d0                	mov    eax,edx
c0007047:	83 c2 08             	add    edx,0x8
c000704a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000704e:	6a 10                	push   0x10
c0007050:	8b 00                	mov    eax,DWORD PTR [eax]
c0007052:	50                   	push   eax
c0007053:	e8 d5 fe ff ff       	call   c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>
c0007058:	58                   	pop    eax
c0007059:	5a                   	pop    edx
c000705a:	e9 5c ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000705f:	6a 25                	push   0x25
c0007061:	e8 6a fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007066:	5a                   	pop    edx
c0007067:	e9 4f ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000706c:	6a 25                	push   0x25
c000706e:	e8 5d fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007073:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007077:	50                   	push   eax
c0007078:	e8 53 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000707d:	5a                   	pop    edx
c000707e:	59                   	pop    ecx
c000707f:	e9 37 ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>

c0007084 <KiUbsanPrintDetails(char const*, void*)>:
c0007084:	83 ec 1c             	sub    esp,0x1c
c0007087:	83 ec 08             	sub    esp,0x8
c000708a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000708e:	68 00 12 02 c0       	push   0xc0021200
c0007093:	e8 b6 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007098:	83 c4 10             	add    esp,0x10
c000709b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000709f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00070a9:	83 ec 08             	sub    esp,0x8
c00070ac:	50                   	push   eax
c00070ad:	68 14 12 02 c0       	push   0xc0021214
c00070b2:	e8 97 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070b7:	83 c4 10             	add    esp,0x10
c00070ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00070c1:	83 ec 08             	sub    esp,0x8
c00070c4:	50                   	push   eax
c00070c5:	68 1e 12 02 c0       	push   0xc002121e
c00070ca:	e8 7f fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070cf:	83 c4 10             	add    esp,0x10
c00070d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00070d9:	83 ec 08             	sub    esp,0x8
c00070dc:	50                   	push   eax
c00070dd:	68 28 12 02 c0       	push   0xc0021228
c00070e2:	e8 67 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	90                   	nop
c00070eb:	83 c4 1c             	add    esp,0x1c
c00070ee:	c3                   	ret    
c00070ef:	90                   	nop

c00070f0 <__ubsan_handle_type_mismatch_v1>:
c00070f0:	83 ec 0c             	sub    esp,0xc
c00070f3:	83 ec 08             	sub    esp,0x8
c00070f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070fa:	68 6c 13 02 c0       	push   0xc002136c
c00070ff:	e8 80 ff ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007104:	83 c4 10             	add    esp,0x10
c0007107:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000710c:	75 16                	jne    c0007124 <__ubsan_handle_type_mismatch_v1+0x34>
c000710e:	83 ec 0c             	sub    esp,0xc
c0007111:	68 32 12 02 c0       	push   0xc0021232
c0007116:	e8 33 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000711b:	83 c4 10             	add    esp,0x10
c000711e:	e9 91 00 00 00       	jmp    c00071b4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007123:	90                   	nop
c0007124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007128:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000712b:	85 c0                	test   eax,eax
c000712d:	74 29                	je     c0007158 <__ubsan_handle_type_mismatch_v1+0x68>
c000712f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007133:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007136:	83 e8 01             	sub    eax,0x1
c0007139:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000713d:	75 19                	jne    c0007158 <__ubsan_handle_type_mismatch_v1+0x68>
c000713f:	83 ec 08             	sub    esp,0x8
c0007142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007146:	68 8c 13 02 c0       	push   0xc002138c
c000714b:	e8 fe fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007150:	83 c4 10             	add    esp,0x10
c0007153:	eb 5f                	jmp    c00071b4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007155:	8d 76 00             	lea    esi,[esi+0x0]
c0007158:	83 ec 0c             	sub    esp,0xc
c000715b:	68 47 12 02 c0       	push   0xc0021247
c0007160:	e8 e9 fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007165:	83 c4 10             	add    esp,0x10
c0007168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000716c:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000716f:	0f b6 c0             	movzx  eax,al
c0007172:	83 ec 08             	sub    esp,0x8
c0007175:	50                   	push   eax
c0007176:	68 61 12 02 c0       	push   0xc0021261
c000717b:	e8 ce fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007180:	83 c4 10             	add    esp,0x10
c0007183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007187:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000718a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000718d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007195:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007198:	0f b6 c0             	movzx  eax,al
c000719b:	8b 04 85 e0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc220]
c00071a2:	51                   	push   ecx
c00071a3:	52                   	push   edx
c00071a4:	50                   	push   eax
c00071a5:	68 b4 13 02 c0       	push   0xc00213b4
c00071aa:	e8 9f fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00071af:	83 c4 10             	add    esp,0x10
c00071b2:	66 90                	xchg   ax,ax
c00071b4:	83 ec 0c             	sub    esp,0xc
c00071b7:	68 6c 13 02 c0       	push   0xc002136c
c00071bc:	e8 55 7a 00 00       	call   c000ec16 <KePanic(char const*)>
c00071c1:	83 c4 10             	add    esp,0x10
c00071c4:	90                   	nop
c00071c5:	83 c4 0c             	add    esp,0xc
c00071c8:	c3                   	ret    
c00071c9:	8d 76 00             	lea    esi,[esi+0x0]

c00071cc <__ubsan_handle_pointer_overflow>:
c00071cc:	83 ec 0c             	sub    esp,0xc
c00071cf:	83 ec 08             	sub    esp,0x8
c00071d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071d6:	68 fc 13 02 c0       	push   0xc00213fc
c00071db:	e8 a4 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00071e0:	83 c4 10             	add    esp,0x10
c00071e3:	83 ec 0c             	sub    esp,0xc
c00071e6:	68 fc 13 02 c0       	push   0xc00213fc
c00071eb:	e8 26 7a 00 00       	call   c000ec16 <KePanic(char const*)>
c00071f0:	83 c4 10             	add    esp,0x10
c00071f3:	90                   	nop
c00071f4:	83 c4 0c             	add    esp,0xc
c00071f7:	c3                   	ret    

c00071f8 <__ubsan_handle_out_of_bounds>:
c00071f8:	83 ec 0c             	sub    esp,0xc
c00071fb:	83 ec 08             	sub    esp,0x8
c00071fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007202:	68 6c 12 02 c0       	push   0xc002126c
c0007207:	e8 78 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c000720c:	83 c4 10             	add    esp,0x10
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	68 6c 12 02 c0       	push   0xc002126c
c0007217:	e8 fa 79 00 00       	call   c000ec16 <KePanic(char const*)>
c000721c:	83 c4 10             	add    esp,0x10
c000721f:	90                   	nop
c0007220:	83 c4 0c             	add    esp,0xc
c0007223:	c3                   	ret    

c0007224 <__ubsan_handle_add_overflow>:
c0007224:	83 ec 0c             	sub    esp,0xc
c0007227:	83 ec 08             	sub    esp,0x8
c000722a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000722e:	68 89 12 02 c0       	push   0xc0021289
c0007233:	e8 4c fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007238:	83 c4 10             	add    esp,0x10
c000723b:	83 ec 0c             	sub    esp,0xc
c000723e:	68 89 12 02 c0       	push   0xc0021289
c0007243:	e8 ce 79 00 00       	call   c000ec16 <KePanic(char const*)>
c0007248:	83 c4 10             	add    esp,0x10
c000724b:	90                   	nop
c000724c:	83 c4 0c             	add    esp,0xc
c000724f:	c3                   	ret    

c0007250 <__ubsan_handle_load_invalid_value>:
c0007250:	83 ec 0c             	sub    esp,0xc
c0007253:	83 ec 08             	sub    esp,0x8
c0007256:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000725a:	68 1c 14 02 c0       	push   0xc002141c
c000725f:	e8 20 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007264:	83 c4 10             	add    esp,0x10
c0007267:	83 ec 0c             	sub    esp,0xc
c000726a:	68 1c 14 02 c0       	push   0xc002141c
c000726f:	e8 a2 79 00 00       	call   c000ec16 <KePanic(char const*)>
c0007274:	83 c4 10             	add    esp,0x10
c0007277:	90                   	nop
c0007278:	83 c4 0c             	add    esp,0xc
c000727b:	c3                   	ret    

c000727c <__ubsan_handle_divrem_overflow>:
c000727c:	83 ec 0c             	sub    esp,0xc
c000727f:	83 ec 08             	sub    esp,0x8
c0007282:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007286:	68 40 14 02 c0       	push   0xc0021440
c000728b:	e8 f4 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007290:	83 c4 10             	add    esp,0x10
c0007293:	83 ec 0c             	sub    esp,0xc
c0007296:	68 40 14 02 c0       	push   0xc0021440
c000729b:	e8 76 79 00 00       	call   c000ec16 <KePanic(char const*)>
c00072a0:	83 c4 10             	add    esp,0x10
c00072a3:	90                   	nop
c00072a4:	83 c4 0c             	add    esp,0xc
c00072a7:	c3                   	ret    

c00072a8 <__ubsan_handle_mul_overflow>:
c00072a8:	83 ec 0c             	sub    esp,0xc
c00072ab:	83 ec 08             	sub    esp,0x8
c00072ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b2:	68 a5 12 02 c0       	push   0xc00212a5
c00072b7:	e8 c8 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00072bc:	83 c4 10             	add    esp,0x10
c00072bf:	83 ec 0c             	sub    esp,0xc
c00072c2:	68 a5 12 02 c0       	push   0xc00212a5
c00072c7:	e8 4a 79 00 00       	call   c000ec16 <KePanic(char const*)>
c00072cc:	83 c4 10             	add    esp,0x10
c00072cf:	90                   	nop
c00072d0:	83 c4 0c             	add    esp,0xc
c00072d3:	c3                   	ret    

c00072d4 <__ubsan_handle_sub_overflow>:
c00072d4:	83 ec 0c             	sub    esp,0xc
c00072d7:	83 ec 08             	sub    esp,0x8
c00072da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072de:	68 c1 12 02 c0       	push   0xc00212c1
c00072e3:	e8 9c fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00072e8:	83 c4 10             	add    esp,0x10
c00072eb:	83 ec 0c             	sub    esp,0xc
c00072ee:	68 c1 12 02 c0       	push   0xc00212c1
c00072f3:	e8 1e 79 00 00       	call   c000ec16 <KePanic(char const*)>
c00072f8:	83 c4 10             	add    esp,0x10
c00072fb:	90                   	nop
c00072fc:	83 c4 0c             	add    esp,0xc
c00072ff:	c3                   	ret    

c0007300 <__ubsan_handle_shift_out_of_bounds>:
c0007300:	83 ec 0c             	sub    esp,0xc
c0007303:	83 ec 08             	sub    esp,0x8
c0007306:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000730a:	68 60 14 02 c0       	push   0xc0021460
c000730f:	e8 70 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007314:	83 c4 10             	add    esp,0x10
c0007317:	83 ec 0c             	sub    esp,0xc
c000731a:	68 60 14 02 c0       	push   0xc0021460
c000731f:	e8 f2 78 00 00       	call   c000ec16 <KePanic(char const*)>
c0007324:	83 c4 10             	add    esp,0x10
c0007327:	90                   	nop
c0007328:	83 c4 0c             	add    esp,0xc
c000732b:	c3                   	ret    

c000732c <__ubsan_handle_negate_overflow>:
c000732c:	83 ec 0c             	sub    esp,0xc
c000732f:	83 ec 08             	sub    esp,0x8
c0007332:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007336:	68 84 14 02 c0       	push   0xc0021484
c000733b:	e8 44 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007340:	83 c4 10             	add    esp,0x10
c0007343:	83 ec 0c             	sub    esp,0xc
c0007346:	68 84 14 02 c0       	push   0xc0021484
c000734b:	e8 c6 78 00 00       	call   c000ec16 <KePanic(char const*)>
c0007350:	83 c4 10             	add    esp,0x10
c0007353:	90                   	nop
c0007354:	83 c4 0c             	add    esp,0xc
c0007357:	c3                   	ret    

c0007358 <KiIsHashInTable(unsigned short)>:
c0007358:	0f b7 d0             	movzx  edx,ax
c000735b:	83 e0 07             	and    eax,0x7
c000735e:	c1 fa 03             	sar    edx,0x3
c0007361:	88 c1                	mov    cl,al
c0007363:	0f b6 92 00 73 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8d00]
c000736a:	d3 fa                	sar    edx,cl
c000736c:	89 d0                	mov    eax,edx
c000736e:	83 e0 01             	and    eax,0x1
c0007371:	c3                   	ret    

c0007372 <KiSetHashInTable(unsigned short, bool)>:
c0007372:	56                   	push   esi
c0007373:	53                   	push   ebx
c0007374:	0f b7 d8             	movzx  ebx,ax
c0007377:	c1 fb 03             	sar    ebx,0x3
c000737a:	83 e0 07             	and    eax,0x7
c000737d:	89 c1                	mov    ecx,eax
c000737f:	b8 01 00 00 00       	mov    eax,0x1
c0007384:	0f b6 b3 00 73 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8d00]
c000738b:	d3 e0                	shl    eax,cl
c000738d:	84 d2                	test   dl,dl
c000738f:	74 04                	je     c0007395 <KiSetHashInTable(unsigned short, bool)+0x23>
c0007391:	09 f0                	or     eax,esi
c0007393:	eb 04                	jmp    c0007399 <KiSetHashInTable(unsigned short, bool)+0x27>
c0007395:	f7 d0                	not    eax
c0007397:	21 f0                	and    eax,esi
c0007399:	88 83 00 73 02 c0    	mov    BYTE PTR [ebx-0x3ffd8d00],al
c000739f:	5b                   	pop    ebx
c00073a0:	5e                   	pop    esi
c00073a1:	c3                   	ret    

c00073a2 <KiFlushSymlinkChanges()>:
c00073a2:	57                   	push   edi
c00073a3:	56                   	push   esi
c00073a4:	53                   	push   ebx
c00073a5:	83 ec 1c             	sub    esp,0x1c
c00073a8:	68 14 01 00 00       	push   0x114
c00073ad:	e8 1e 75 00 00       	call   c000e8d0 <malloc>
c00073b2:	83 c4 0c             	add    esp,0xc
c00073b5:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00073bb:	68 a3 14 02 c0       	push   0xc00214a3
c00073c0:	50                   	push   eax
c00073c1:	89 c3                	mov    ebx,eax
c00073c3:	e8 44 0d 00 00       	call   c000810c <File::File(char const*, Process*)>
c00073c8:	83 c4 10             	add    esp,0x10
c00073cb:	85 db                	test   ebx,ebx
c00073cd:	75 10                	jne    c00073df <KiFlushSymlinkChanges()+0x3d>
c00073cf:	83 ec 0c             	sub    esp,0xc
c00073d2:	68 c1 14 02 c0       	push   0xc00214c1
c00073d7:	e8 3a 78 00 00       	call   c000ec16 <KePanic(char const*)>
c00073dc:	83 c4 10             	add    esp,0x10
c00073df:	50                   	push   eax
c00073e0:	50                   	push   eax
c00073e1:	6a 06                	push   0x6
c00073e3:	53                   	push   ebx
c00073e4:	e8 41 0d 00 00       	call   c000812a <File::open(FileOpenMode)>
c00073e9:	83 c4 10             	add    esp,0x10
c00073ec:	85 c0                	test   eax,eax
c00073ee:	74 10                	je     c0007400 <KiFlushSymlinkChanges()+0x5e>
c00073f0:	83 ec 0c             	sub    esp,0xc
c00073f3:	68 db 14 02 c0       	push   0xc00214db
c00073f8:	e8 19 78 00 00       	call   c000ec16 <KePanic(char const*)>
c00073fd:	83 c4 10             	add    esp,0x10
c0007400:	31 f6                	xor    esi,esi
c0007402:	39 35 c0 6e 02 c0    	cmp    DWORD PTR ds:0xc0026ec0,esi
c0007408:	7e 70                	jle    c000747a <KiFlushSymlinkChanges()+0xd8>
c000740a:	83 ec 0c             	sub    esp,0xc
c000740d:	89 f0                	mov    eax,esi
c000740f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007411:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007415:	c1 e0 08             	shl    eax,0x8
c0007418:	57                   	push   edi
c0007419:	05 00 6f 02 c0       	add    eax,0xc0026f00
c000741e:	50                   	push   eax
c000741f:	6a 00                	push   0x0
c0007421:	68 00 01 00 00       	push   0x100
c0007426:	53                   	push   ebx
c0007427:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000742a:	83 c4 20             	add    esp,0x20
c000742d:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0007435:	74 10                	je     c0007447 <KiFlushSymlinkChanges()+0xa5>
c0007437:	83 ec 0c             	sub    esp,0xc
c000743a:	68 f5 14 02 c0       	push   0xc00214f5
c000743f:	e8 d2 77 00 00       	call   c000ec16 <KePanic(char const*)>
c0007444:	83 c4 10             	add    esp,0x10
c0007447:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007449:	8d 14 f5 e0 6e 02 c0 	lea    edx,[esi*8-0x3ffd9120]
c0007450:	83 ec 0c             	sub    esp,0xc
c0007453:	57                   	push   edi
c0007454:	52                   	push   edx
c0007455:	6a 00                	push   0x0
c0007457:	6a 08                	push   0x8
c0007459:	53                   	push   ebx
c000745a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000745d:	83 c4 20             	add    esp,0x20
c0007460:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007465:	74 10                	je     c0007477 <KiFlushSymlinkChanges()+0xd5>
c0007467:	83 ec 0c             	sub    esp,0xc
c000746a:	68 0f 15 02 c0       	push   0xc002150f
c000746f:	e8 a2 77 00 00       	call   c000ec16 <KePanic(char const*)>
c0007474:	83 c4 10             	add    esp,0x10
c0007477:	46                   	inc    esi
c0007478:	eb 88                	jmp    c0007402 <KiFlushSymlinkChanges()+0x60>
c000747a:	83 ec 0c             	sub    esp,0xc
c000747d:	53                   	push   ebx
c000747e:	e8 05 0d 00 00       	call   c0008188 <File::close()>
c0007483:	83 c4 10             	add    esp,0x10
c0007486:	85 db                	test   ebx,ebx
c0007488:	74 0c                	je     c0007496 <KiFlushSymlinkChanges()+0xf4>
c000748a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000748c:	83 ec 0c             	sub    esp,0xc
c000748f:	53                   	push   ebx
c0007490:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	c7 05 c0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ec0,0x0
c00074a0:	83 c4 10             	add    esp,0x10
c00074a3:	5b                   	pop    ebx
c00074a4:	5e                   	pop    esi
c00074a5:	5f                   	pop    edi
c00074a6:	c3                   	ret    

c00074a7 <KiDeinitialiseSymlinks(void*)>:
c00074a7:	e9 f6 fe ff ff       	jmp    c00073a2 <KiFlushSymlinkChanges()>

c00074ac <KiGetSymlinkHash(char const*)>:
c00074ac:	53                   	push   ebx
c00074ad:	89 c3                	mov    ebx,eax
c00074af:	83 ec 14             	sub    esp,0x14
c00074b2:	50                   	push   eax
c00074b3:	e8 c8 90 ff ff       	call   c0000580 <strlen>
c00074b8:	5a                   	pop    edx
c00074b9:	59                   	pop    ecx
c00074ba:	50                   	push   eax
c00074bb:	53                   	push   ebx
c00074bc:	e8 24 62 00 00       	call   c000d6e5 <KeCalculateCRC32(unsigned char*, int)>
c00074c1:	83 c4 18             	add    esp,0x18
c00074c4:	5b                   	pop    ebx
c00074c5:	89 c2                	mov    edx,eax
c00074c7:	c1 ea 10             	shr    edx,0x10
c00074ca:	31 d0                	xor    eax,edx
c00074cc:	c3                   	ret    

c00074cd <KiCreateSymlinkID()>:
c00074cd:	55                   	push   ebp
c00074ce:	57                   	push   edi
c00074cf:	56                   	push   esi
c00074d0:	53                   	push   ebx
c00074d1:	31 db                	xor    ebx,ebx
c00074d3:	83 ec 1c             	sub    esp,0x1c
c00074d6:	e8 1b 81 00 00       	call   c000f5f6 <KeRand()>
c00074db:	8b 2d 00 93 02 c0    	mov    ebp,DWORD PTR ds:0xc0029300
c00074e1:	31 d2                	xor    edx,edx
c00074e3:	43                   	inc    ebx
c00074e4:	31 ff                	xor    edi,edi
c00074e6:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00074e9:	89 ee                	mov    esi,ebp
c00074eb:	89 0d 00 93 02 c0    	mov    DWORD PTR ds:0xc0029300,ecx
c00074f1:	0f a4 c2 1f          	shld   edx,eax,0x1f
c00074f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00074f9:	c1 e0 1f             	shl    eax,0x1f
c00074fc:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007502:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007506:	75 10                	jne    c0007518 <KiCreateSymlinkID()+0x4b>
c0007508:	83 ec 0c             	sub    esp,0xc
c000750b:	68 29 15 02 c0       	push   0xc0021529
c0007510:	e8 01 77 00 00       	call   c000ec16 <KePanic(char const*)>
c0007515:	83 c4 10             	add    esp,0x10
c0007518:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000751c:	75 06                	jne    c0007524 <KiCreateSymlinkID()+0x57>
c000751e:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0007522:	74 b2                	je     c00074d6 <KiCreateSymlinkID()+0x9>
c0007524:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007528:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000752c:	83 c4 1c             	add    esp,0x1c
c000752f:	5b                   	pop    ebx
c0007530:	31 f0                	xor    eax,esi
c0007532:	5e                   	pop    esi
c0007533:	31 fa                	xor    edx,edi
c0007535:	5f                   	pop    edi
c0007536:	5d                   	pop    ebp
c0007537:	c3                   	ret    

c0007538 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007538:	53                   	push   ebx
c0007539:	83 ec 0c             	sub    esp,0xc
c000753c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007540:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007544:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c0007549:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000754d:	68 00 01 00 00       	push   0x100
c0007552:	6a 00                	push   0x0
c0007554:	89 0c c5 e4 6e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd911c],ecx
c000755b:	89 14 c5 e0 6e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9120],edx
c0007562:	c1 e0 08             	shl    eax,0x8
c0007565:	05 00 6f 02 c0       	add    eax,0xc0026f00
c000756a:	50                   	push   eax
c000756b:	e8 80 8f ff ff       	call   c00004f0 <memset>
c0007570:	58                   	pop    eax
c0007571:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c0007576:	5a                   	pop    edx
c0007577:	c1 e0 08             	shl    eax,0x8
c000757a:	53                   	push   ebx
c000757b:	05 00 6f 02 c0       	add    eax,0xc0026f00
c0007580:	50                   	push   eax
c0007581:	e8 ca 90 ff ff       	call   c0000650 <strcpy>
c0007586:	89 d8                	mov    eax,ebx
c0007588:	e8 1f ff ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c000758d:	ba 01 00 00 00       	mov    edx,0x1
c0007592:	0f b7 c0             	movzx  eax,ax
c0007595:	e8 d8 fd ff ff       	call   c0007372 <KiSetHashInTable(unsigned short, bool)>
c000759a:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c000759f:	83 c4 10             	add    esp,0x10
c00075a2:	40                   	inc    eax
c00075a3:	a3 c0 6e 02 c0       	mov    ds:0xc0026ec0,eax
c00075a8:	83 f8 03             	cmp    eax,0x3
c00075ab:	7e 09                	jle    c00075b6 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c00075ad:	83 c4 08             	add    esp,0x8
c00075b0:	5b                   	pop    ebx
c00075b1:	e9 ec fd ff ff       	jmp    c00073a2 <KiFlushSymlinkChanges()>
c00075b6:	83 c4 08             	add    esp,0x8
c00075b9:	5b                   	pop    ebx
c00075ba:	c3                   	ret    

c00075bb <KeInitialiseSymlinks()>:
c00075bb:	57                   	push   edi
c00075bc:	56                   	push   esi
c00075bd:	53                   	push   ebx
c00075be:	81 ec 14 01 00 00    	sub    esp,0x114
c00075c4:	68 00 20 00 00       	push   0x2000
c00075c9:	6a 00                	push   0x0
c00075cb:	68 00 73 02 c0       	push   0xc0027300
c00075d0:	c7 05 00 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029300,0x0
c00075da:	c7 05 c0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ec0,0x0
c00075e4:	e8 07 8f ff ff       	call   c00004f0 <memset>
c00075e9:	59                   	pop    ecx
c00075ea:	5b                   	pop    ebx
c00075eb:	6a 00                	push   0x0
c00075ed:	68 a7 74 00 c0       	push   0xc00074a7
c00075f2:	e8 de 4e 00 00       	call   c000c4d5 <KeRegisterAtexit(void (*)(void*), void*)>
c00075f7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00075fe:	e8 cd 72 00 00       	call   c000e8d0 <malloc>
c0007603:	83 c4 0c             	add    esp,0xc
c0007606:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000760c:	68 a3 14 02 c0       	push   0xc00214a3
c0007611:	50                   	push   eax
c0007612:	89 c3                	mov    ebx,eax
c0007614:	e8 f3 0a 00 00       	call   c000810c <File::File(char const*, Process*)>
c0007619:	83 c4 10             	add    esp,0x10
c000761c:	85 db                	test   ebx,ebx
c000761e:	75 10                	jne    c0007630 <KeInitialiseSymlinks()+0x75>
c0007620:	83 ec 0c             	sub    esp,0xc
c0007623:	68 32 15 02 c0       	push   0xc0021532
c0007628:	e8 e9 75 00 00       	call   c000ec16 <KePanic(char const*)>
c000762d:	83 c4 10             	add    esp,0x10
c0007630:	83 ec 0c             	sub    esp,0xc
c0007633:	53                   	push   ebx
c0007634:	e8 b5 0d 00 00       	call   c00083ee <File::exists()>
c0007639:	83 c4 10             	add    esp,0x10
c000763c:	84 c0                	test   al,al
c000763e:	75 3a                	jne    c000767a <KeInitialiseSymlinks()+0xbf>
c0007640:	52                   	push   edx
c0007641:	52                   	push   edx
c0007642:	6a 12                	push   0x12
c0007644:	53                   	push   ebx
c0007645:	e8 e0 0a 00 00       	call   c000812a <File::open(FileOpenMode)>
c000764a:	83 c4 10             	add    esp,0x10
c000764d:	85 c0                	test   eax,eax
c000764f:	74 10                	je     c0007661 <KeInitialiseSymlinks()+0xa6>
c0007651:	83 ec 0c             	sub    esp,0xc
c0007654:	68 4f 15 02 c0       	push   0xc002154f
c0007659:	e8 b8 75 00 00       	call   c000ec16 <KePanic(char const*)>
c000765e:	83 c4 10             	add    esp,0x10
c0007661:	83 ec 0c             	sub    esp,0xc
c0007664:	53                   	push   ebx
c0007665:	e8 1e 0b 00 00       	call   c0008188 <File::close()>
c000766a:	83 c4 10             	add    esp,0x10
c000766d:	85 db                	test   ebx,ebx
c000766f:	0f 84 9e 00 00 00    	je     c0007713 <KeInitialiseSymlinks()+0x158>
c0007675:	e9 8d 00 00 00       	jmp    c0007707 <KeInitialiseSymlinks()+0x14c>
c000767a:	50                   	push   eax
c000767b:	50                   	push   eax
c000767c:	6a 01                	push   0x1
c000767e:	53                   	push   ebx
c000767f:	e8 a6 0a 00 00       	call   c000812a <File::open(FileOpenMode)>
c0007684:	83 c4 10             	add    esp,0x10
c0007687:	85 c0                	test   eax,eax
c0007689:	74 10                	je     c000769b <KeInitialiseSymlinks()+0xe0>
c000768b:	83 ec 0c             	sub    esp,0xc
c000768e:	68 6c 15 02 c0       	push   0xc002156c
c0007693:	e8 7e 75 00 00       	call   c000ec16 <KePanic(char const*)>
c0007698:	83 c4 10             	add    esp,0x10
c000769b:	ff 05 00 93 02 c0    	inc    DWORD PTR ds:0xc0029300
c00076a1:	83 ec 0c             	sub    esp,0xc
c00076a4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00076a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076aa:	57                   	push   edi
c00076ab:	8d 74 24 20          	lea    esi,[esp+0x20]
c00076af:	56                   	push   esi
c00076b0:	6a 00                	push   0x0
c00076b2:	68 00 01 00 00       	push   0x100
c00076b7:	53                   	push   ebx
c00076b8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076bb:	83 c4 20             	add    esp,0x20
c00076be:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00076c6:	75 33                	jne    c00076fb <KeInitialiseSymlinks()+0x140>
c00076c8:	83 ec 0c             	sub    esp,0xc
c00076cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076cd:	57                   	push   edi
c00076ce:	8d 54 24 18          	lea    edx,[esp+0x18]
c00076d2:	52                   	push   edx
c00076d3:	6a 00                	push   0x0
c00076d5:	6a 08                	push   0x8
c00076d7:	53                   	push   ebx
c00076d8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076db:	83 c4 20             	add    esp,0x20
c00076de:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00076e3:	75 16                	jne    c00076fb <KeInitialiseSymlinks()+0x140>
c00076e5:	89 f0                	mov    eax,esi
c00076e7:	e8 c0 fd ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c00076ec:	ba 01 00 00 00       	mov    edx,0x1
c00076f1:	0f b7 c0             	movzx  eax,ax
c00076f4:	e8 79 fc ff ff       	call   c0007372 <KiSetHashInTable(unsigned short, bool)>
c00076f9:	eb a0                	jmp    c000769b <KeInitialiseSymlinks()+0xe0>
c00076fb:	83 ec 0c             	sub    esp,0xc
c00076fe:	53                   	push   ebx
c00076ff:	e8 84 0a 00 00       	call   c0008188 <File::close()>
c0007704:	83 c4 10             	add    esp,0x10
c0007707:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007709:	83 ec 0c             	sub    esp,0xc
c000770c:	53                   	push   ebx
c000770d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007710:	83 c4 10             	add    esp,0x10
c0007713:	81 c4 10 01 00 00    	add    esp,0x110
c0007719:	5b                   	pop    ebx
c000771a:	5e                   	pop    esi
c000771b:	5f                   	pop    edi
c000771c:	c3                   	ret    

c000771d <KiIsSymlinkRegistered(char const*)>:
c000771d:	55                   	push   ebp
c000771e:	57                   	push   edi
c000771f:	56                   	push   esi
c0007720:	53                   	push   ebx
c0007721:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007727:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000772e:	89 f0                	mov    eax,esi
c0007730:	e8 77 fd ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c0007735:	0f b7 c0             	movzx  eax,ax
c0007738:	e8 1b fc ff ff       	call   c0007358 <KiIsHashInTable(unsigned short)>
c000773d:	31 d2                	xor    edx,edx
c000773f:	88 c1                	mov    cl,al
c0007741:	31 c0                	xor    eax,eax
c0007743:	84 c9                	test   cl,cl
c0007745:	0f 84 31 01 00 00    	je     c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c000774b:	31 db                	xor    ebx,ebx
c000774d:	39 1d c0 6e 02 c0    	cmp    DWORD PTR ds:0xc0026ec0,ebx
c0007753:	7e 30                	jle    c0007785 <KiIsSymlinkRegistered(char const*)+0x68>
c0007755:	89 d8                	mov    eax,ebx
c0007757:	c1 e0 08             	shl    eax,0x8
c000775a:	51                   	push   ecx
c000775b:	05 00 6f 02 c0       	add    eax,0xc0026f00
c0007760:	51                   	push   ecx
c0007761:	50                   	push   eax
c0007762:	56                   	push   esi
c0007763:	e8 18 90 ff ff       	call   c0000780 <strcmp>
c0007768:	83 c4 10             	add    esp,0x10
c000776b:	85 c0                	test   eax,eax
c000776d:	75 13                	jne    c0007782 <KiIsSymlinkRegistered(char const*)+0x65>
c000776f:	8b 04 dd e0 6e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9120]
c0007776:	8b 14 dd e4 6e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd911c]
c000777d:	e9 fa 00 00 00       	jmp    c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c0007782:	43                   	inc    ebx
c0007783:	eb c8                	jmp    c000774d <KiIsSymlinkRegistered(char const*)+0x30>
c0007785:	83 ec 0c             	sub    esp,0xc
c0007788:	68 14 01 00 00       	push   0x114
c000778d:	e8 3e 71 00 00       	call   c000e8d0 <malloc>
c0007792:	83 c4 0c             	add    esp,0xc
c0007795:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000779b:	68 a3 14 02 c0       	push   0xc00214a3
c00077a0:	50                   	push   eax
c00077a1:	89 c3                	mov    ebx,eax
c00077a3:	e8 64 09 00 00       	call   c000810c <File::File(char const*, Process*)>
c00077a8:	83 c4 10             	add    esp,0x10
c00077ab:	85 db                	test   ebx,ebx
c00077ad:	75 12                	jne    c00077c1 <KiIsSymlinkRegistered(char const*)+0xa4>
c00077af:	83 ec 0c             	sub    esp,0xc
c00077b2:	68 87 15 02 c0       	push   0xc0021587
c00077b7:	e8 5a 74 00 00       	call   c000ec16 <KePanic(char const*)>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	eb 10                	jmp    c00077d1 <KiIsSymlinkRegistered(char const*)+0xb4>
c00077c1:	83 ec 0c             	sub    esp,0xc
c00077c4:	53                   	push   ebx
c00077c5:	e8 24 0c 00 00       	call   c00083ee <File::exists()>
c00077ca:	83 c4 10             	add    esp,0x10
c00077cd:	84 c0                	test   al,al
c00077cf:	74 de                	je     c00077af <KiIsSymlinkRegistered(char const*)+0x92>
c00077d1:	52                   	push   edx
c00077d2:	52                   	push   edx
c00077d3:	6a 01                	push   0x1
c00077d5:	53                   	push   ebx
c00077d6:	e8 4f 09 00 00       	call   c000812a <File::open(FileOpenMode)>
c00077db:	83 c4 10             	add    esp,0x10
c00077de:	85 c0                	test   eax,eax
c00077e0:	74 10                	je     c00077f2 <KiIsSymlinkRegistered(char const*)+0xd5>
c00077e2:	83 ec 0c             	sub    esp,0xc
c00077e5:	68 a2 15 02 c0       	push   0xc00215a2
c00077ea:	e8 27 74 00 00       	call   c000ec16 <KePanic(char const*)>
c00077ef:	83 c4 10             	add    esp,0x10
c00077f2:	83 ec 0c             	sub    esp,0xc
c00077f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00077f7:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c00077fb:	55                   	push   ebp
c00077fc:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0007800:	57                   	push   edi
c0007801:	6a 00                	push   0x0
c0007803:	68 00 01 00 00       	push   0x100
c0007808:	53                   	push   ebx
c0007809:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000780c:	83 c4 20             	add    esp,0x20
c000780f:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007817:	75 4b                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0x147>
c0007819:	83 ec 0c             	sub    esp,0xc
c000781c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000781e:	55                   	push   ebp
c000781f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007823:	52                   	push   edx
c0007824:	6a 00                	push   0x0
c0007826:	6a 08                	push   0x8
c0007828:	53                   	push   ebx
c0007829:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000782c:	83 c4 20             	add    esp,0x20
c000782f:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007834:	75 2e                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0x147>
c0007836:	50                   	push   eax
c0007837:	50                   	push   eax
c0007838:	57                   	push   edi
c0007839:	56                   	push   esi
c000783a:	e8 41 8f ff ff       	call   c0000780 <strcmp>
c000783f:	83 c4 10             	add    esp,0x10
c0007842:	85 c0                	test   eax,eax
c0007844:	75 ac                	jne    c00077f2 <KiIsSymlinkRegistered(char const*)+0xd5>
c0007846:	83 ec 0c             	sub    esp,0xc
c0007849:	53                   	push   ebx
c000784a:	e8 39 09 00 00       	call   c0008188 <File::close()>
c000784f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007851:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007854:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007857:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000785b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000785f:	83 c4 10             	add    esp,0x10
c0007862:	eb 18                	jmp    c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c0007864:	83 ec 0c             	sub    esp,0xc
c0007867:	53                   	push   ebx
c0007868:	e8 1b 09 00 00       	call   c0008188 <File::close()>
c000786d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000786f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007872:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007875:	83 c4 10             	add    esp,0x10
c0007878:	31 c0                	xor    eax,eax
c000787a:	31 d2                	xor    edx,edx
c000787c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0007882:	5b                   	pop    ebx
c0007883:	5e                   	pop    esi
c0007884:	5f                   	pop    edi
c0007885:	5d                   	pop    ebp
c0007886:	c3                   	ret    

c0007887 <KeDereferenceSymlink(char const*, char*)>:
c0007887:	55                   	push   ebp
c0007888:	57                   	push   edi
c0007889:	56                   	push   esi
c000788a:	53                   	push   ebx
c000788b:	83 ec 48             	sub    esp,0x48
c000788e:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0007892:	56                   	push   esi
c0007893:	e8 85 fe ff ff       	call   c000771d <KiIsSymlinkRegistered(char const*)>
c0007898:	83 c4 10             	add    esp,0x10
c000789b:	89 c7                	mov    edi,eax
c000789d:	89 d0                	mov    eax,edx
c000789f:	09 f8                	or     eax,edi
c00078a1:	75 07                	jne    c00078aa <KeDereferenceSymlink(char const*, char*)+0x23>
c00078a3:	31 c0                	xor    eax,eax
c00078a5:	e9 7c 01 00 00       	jmp    c0007a26 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00078aa:	83 ec 0c             	sub    esp,0xc
c00078ad:	89 d5                	mov    ebp,edx
c00078af:	68 14 01 00 00       	push   0x114
c00078b4:	e8 17 70 00 00       	call   c000e8d0 <malloc>
c00078b9:	83 c4 0c             	add    esp,0xc
c00078bc:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00078c2:	56                   	push   esi
c00078c3:	50                   	push   eax
c00078c4:	89 c3                	mov    ebx,eax
c00078c6:	e8 41 08 00 00       	call   c000810c <File::File(char const*, Process*)>
c00078cb:	83 c4 10             	add    esp,0x10
c00078ce:	85 db                	test   ebx,ebx
c00078d0:	0f 84 32 01 00 00    	je     c0007a08 <KeDereferenceSymlink(char const*, char*)+0x181>
c00078d6:	56                   	push   esi
c00078d7:	56                   	push   esi
c00078d8:	6a 01                	push   0x1
c00078da:	53                   	push   ebx
c00078db:	e8 4a 08 00 00       	call   c000812a <File::open(FileOpenMode)>
c00078e0:	83 c4 10             	add    esp,0x10
c00078e3:	85 c0                	test   eax,eax
c00078e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078e7:	74 09                	je     c00078f2 <KeDereferenceSymlink(char const*, char*)+0x6b>
c00078e9:	83 ec 0c             	sub    esp,0xc
c00078ec:	53                   	push   ebx
c00078ed:	e9 10 01 00 00       	jmp    c0007a02 <KeDereferenceSymlink(char const*, char*)+0x17b>
c00078f2:	83 ec 0c             	sub    esp,0xc
c00078f5:	8d 74 24 18          	lea    esi,[esp+0x18]
c00078f9:	56                   	push   esi
c00078fa:	8d 54 24 37          	lea    edx,[esp+0x37]
c00078fe:	52                   	push   edx
c00078ff:	6a 00                	push   0x0
c0007901:	6a 08                	push   0x8
c0007903:	53                   	push   ebx
c0007904:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007907:	83 c4 20             	add    esp,0x20
c000790a:	85 c0                	test   eax,eax
c000790c:	0f 85 e2 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007912:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007917:	0f 85 d7 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000791d:	83 ec 0c             	sub    esp,0xc
c0007920:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007922:	56                   	push   esi
c0007923:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007927:	52                   	push   edx
c0007928:	6a 00                	push   0x0
c000792a:	6a 08                	push   0x8
c000792c:	53                   	push   ebx
c000792d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007930:	83 c4 20             	add    esp,0x20
c0007933:	85 c0                	test   eax,eax
c0007935:	0f 85 b9 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000793b:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007940:	0f 85 ae 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007946:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000794a:	0f 85 53 ff ff ff    	jne    c00078a3 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007950:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0007954:	0f 85 49 ff ff ff    	jne    c00078a3 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000795a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0007962:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000796a:	51                   	push   ecx
c000796b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000796f:	50                   	push   eax
c0007970:	8d 44 24 20          	lea    eax,[esp+0x20]
c0007974:	50                   	push   eax
c0007975:	53                   	push   ebx
c0007976:	e8 b1 0a 00 00       	call   c000842c <File::stat(unsigned long long*, bool*)>
c000797b:	83 c4 10             	add    esp,0x10
c000797e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0007983:	75 6f                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007985:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007989:	31 c9                	xor    ecx,ecx
c000798b:	bf 0f 00 00 00       	mov    edi,0xf
c0007990:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007994:	39 c7                	cmp    edi,eax
c0007996:	89 cf                	mov    edi,ecx
c0007998:	19 d7                	sbb    edi,edx
c000799a:	73 58                	jae    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000799c:	83 c0 f0             	add    eax,0xfffffff0
c000799f:	bf ff 00 00 00       	mov    edi,0xff
c00079a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079a8:	83 d2 ff             	adc    edx,0xffffffff
c00079ab:	39 c7                	cmp    edi,eax
c00079ad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079b1:	19 d1                	sbb    ecx,edx
c00079b3:	72 53                	jb     c0007a08 <KeDereferenceSymlink(char const*, char*)+0x181>
c00079b5:	40                   	inc    eax
c00079b6:	52                   	push   edx
c00079b7:	50                   	push   eax
c00079b8:	6a 00                	push   0x0
c00079ba:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00079be:	e8 2d 8b ff ff       	call   c00004f0 <memset>
c00079c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079c5:	89 34 24             	mov    DWORD PTR [esp],esi
c00079c8:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00079cc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079d0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079d4:	53                   	push   ebx
c00079d5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079d8:	83 c4 20             	add    esp,0x20
c00079db:	85 c0                	test   eax,eax
c00079dd:	75 15                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079e3:	89 c7                	mov    edi,eax
c00079e5:	c1 ff 1f             	sar    edi,0x1f
c00079e8:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00079ec:	75 06                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079ee:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00079f2:	74 19                	je     c0007a0d <KeDereferenceSymlink(char const*, char*)+0x186>
c00079f4:	83 ec 0c             	sub    esp,0xc
c00079f7:	53                   	push   ebx
c00079f8:	e8 8b 07 00 00       	call   c0008188 <File::close()>
c00079fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a02:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a05:	83 c4 10             	add    esp,0x10
c0007a08:	83 c8 ff             	or     eax,0xffffffff
c0007a0b:	eb 19                	jmp    c0007a26 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a0d:	83 ec 0c             	sub    esp,0xc
c0007a10:	53                   	push   ebx
c0007a11:	e8 72 07 00 00       	call   c0008188 <File::close()>
c0007a16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a1b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a1e:	83 c4 10             	add    esp,0x10
c0007a21:	b8 01 00 00 00       	mov    eax,0x1
c0007a26:	83 c4 3c             	add    esp,0x3c
c0007a29:	5b                   	pop    ebx
c0007a2a:	5e                   	pop    esi
c0007a2b:	5f                   	pop    edi
c0007a2c:	5d                   	pop    ebp
c0007a2d:	c3                   	ret    

c0007a2e <KeCreateSymlink(char const*, char const*)>:
c0007a2e:	55                   	push   ebp
c0007a2f:	57                   	push   edi
c0007a30:	56                   	push   esi
c0007a31:	53                   	push   ebx
c0007a32:	83 ec 38             	sub    esp,0x38
c0007a35:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a39:	68 14 01 00 00       	push   0x114
c0007a3e:	e8 8d 6e 00 00       	call   c000e8d0 <malloc>
c0007a43:	6a 00                	push   0x0
c0007a45:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0007a4b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a4f:	89 c3                	mov    ebx,eax
c0007a51:	50                   	push   eax
c0007a52:	e8 d7 05 00 00       	call   c000802e <File::File(char const*, Process*, bool)>
c0007a57:	83 c4 20             	add    esp,0x20
c0007a5a:	85 db                	test   ebx,ebx
c0007a5c:	b8 01 00 00 00       	mov    eax,0x1
c0007a61:	0f 84 fb 00 00 00    	je     c0007b62 <KeCreateSymlink(char const*, char const*)+0x134>
c0007a67:	52                   	push   edx
c0007a68:	52                   	push   edx
c0007a69:	6a 12                	push   0x12
c0007a6b:	53                   	push   ebx
c0007a6c:	e8 b9 06 00 00       	call   c000812a <File::open(FileOpenMode)>
c0007a71:	83 c4 10             	add    esp,0x10
c0007a74:	85 c0                	test   eax,eax
c0007a76:	74 0b                	je     c0007a83 <KeCreateSymlink(char const*, char const*)+0x55>
c0007a78:	83 ec 0c             	sub    esp,0xc
c0007a7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a7d:	53                   	push   ebx
c0007a7e:	e9 d4 00 00 00       	jmp    c0007b57 <KeCreateSymlink(char const*, char const*)+0x129>
c0007a83:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007a87:	be bd 15 02 c0       	mov    esi,0xc00215bd
c0007a8c:	b9 09 00 00 00       	mov    ecx,0x9
c0007a91:	fc                   	cld    
c0007a92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007a94:	83 ec 0c             	sub    esp,0xc
c0007a97:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007a9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a9d:	56                   	push   esi
c0007a9e:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007aa2:	52                   	push   edx
c0007aa3:	6a 00                	push   0x0
c0007aa5:	6a 08                	push   0x8
c0007aa7:	53                   	push   ebx
c0007aa8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007aab:	83 c4 20             	add    esp,0x20
c0007aae:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007ab3:	0f 85 90 00 00 00    	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ab9:	85 c0                	test   eax,eax
c0007abb:	0f 85 88 00 00 00    	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ac1:	e8 07 fa ff ff       	call   c00074cd <KiCreateSymlinkID()>
c0007ac6:	83 ec 0c             	sub    esp,0xc
c0007ac9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007acd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007ad1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ad3:	56                   	push   esi
c0007ad4:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007ad8:	52                   	push   edx
c0007ad9:	6a 00                	push   0x0
c0007adb:	6a 08                	push   0x8
c0007add:	53                   	push   ebx
c0007ade:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007ae1:	83 c4 20             	add    esp,0x20
c0007ae4:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007ae9:	75 5e                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007aeb:	85 c0                	test   eax,eax
c0007aed:	75 5a                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007aef:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007af1:	83 ec 0c             	sub    esp,0xc
c0007af4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007af7:	55                   	push   ebp
c0007af8:	e8 83 8a ff ff       	call   c0000580 <strlen>
c0007afd:	31 d2                	xor    edx,edx
c0007aff:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b02:	55                   	push   ebp
c0007b03:	52                   	push   edx
c0007b04:	50                   	push   eax
c0007b05:	53                   	push   ebx
c0007b06:	ff d7                	call   edi
c0007b08:	83 c4 14             	add    esp,0x14
c0007b0b:	55                   	push   ebp
c0007b0c:	89 c6                	mov    esi,eax
c0007b0e:	e8 6d 8a ff ff       	call   c0000580 <strlen>
c0007b13:	83 c4 10             	add    esp,0x10
c0007b16:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b1a:	75 2d                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b1c:	85 f6                	test   esi,esi
c0007b1e:	75 29                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b20:	50                   	push   eax
c0007b21:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b25:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b29:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b2d:	e8 06 fa ff ff       	call   c0007538 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b35:	e8 4e 06 00 00       	call   c0008188 <File::close()>
c0007b3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b3f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b42:	83 c4 10             	add    esp,0x10
c0007b45:	31 c0                	xor    eax,eax
c0007b47:	eb 19                	jmp    c0007b62 <KeCreateSymlink(char const*, char const*)+0x134>
c0007b49:	83 ec 0c             	sub    esp,0xc
c0007b4c:	53                   	push   ebx
c0007b4d:	e8 36 06 00 00       	call   c0008188 <File::close()>
c0007b52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b57:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b5a:	83 c4 10             	add    esp,0x10
c0007b5d:	b8 01 00 00 00       	mov    eax,0x1
c0007b62:	83 c4 2c             	add    esp,0x2c
c0007b65:	5b                   	pop    ebx
c0007b66:	5e                   	pop    esi
c0007b67:	5f                   	pop    edi
c0007b68:	5d                   	pop    ebp
c0007b69:	c3                   	ret    

c0007b6a <File::read(unsigned long long, void*, int*)>:
c0007b6a:	53                   	push   ebx
c0007b6b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007b6f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007b73:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007b7a:	83 f8 19             	cmp    eax,0x19
c0007b7d:	77 35                	ja     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b7f:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0007b86:	85 c0                	test   eax,eax
c0007b88:	74 2a                	je     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b8a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007b90:	85 c0                	test   eax,eax
c0007b92:	74 20                	je     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b94:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007b98:	74 21                	je     c0007bbb <File::read(unsigned long long, void*, int*)+0x51>
c0007b9a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007b9c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007ba0:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007ba6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007baa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007bae:	5b                   	pop    ebx
c0007baf:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007bb2:	ff e0                	jmp    eax
c0007bb4:	b8 0b 00 00 00       	mov    eax,0xb
c0007bb9:	eb 05                	jmp    c0007bc0 <File::read(unsigned long long, void*, int*)+0x56>
c0007bbb:	b8 05 00 00 00       	mov    eax,0x5
c0007bc0:	5b                   	pop    ebx
c0007bc1:	c3                   	ret    

c0007bc2 <File::write(unsigned long long, void*, int*)>:
c0007bc2:	53                   	push   ebx
c0007bc3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007bc7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007bcb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bd2:	83 f8 19             	cmp    eax,0x19
c0007bd5:	77 35                	ja     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007bd7:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0007bde:	85 c0                	test   eax,eax
c0007be0:	74 2a                	je     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007be2:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007be8:	85 c0                	test   eax,eax
c0007bea:	74 20                	je     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007bec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bf0:	74 21                	je     c0007c13 <File::write(unsigned long long, void*, int*)+0x51>
c0007bf2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bf4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bf8:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007bfe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c02:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c06:	5b                   	pop    ebx
c0007c07:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c0a:	ff e0                	jmp    eax
c0007c0c:	b8 0b 00 00 00       	mov    eax,0xb
c0007c11:	eb 05                	jmp    c0007c18 <File::write(unsigned long long, void*, int*)+0x56>
c0007c13:	b8 05 00 00 00       	mov    eax,0x5
c0007c18:	5b                   	pop    ebx
c0007c19:	c3                   	ret    

c0007c1a <Directory::read(unsigned long long, void*, int*)>:
c0007c1a:	53                   	push   ebx
c0007c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c1f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c23:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c2a:	83 f8 19             	cmp    eax,0x19
c0007c2d:	77 35                	ja     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c2f:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0007c36:	85 c0                	test   eax,eax
c0007c38:	74 2a                	je     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c3a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c40:	85 c0                	test   eax,eax
c0007c42:	74 20                	je     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c44:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c48:	74 21                	je     c0007c6b <Directory::read(unsigned long long, void*, int*)+0x51>
c0007c4a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c4c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c50:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c5e:	5b                   	pop    ebx
c0007c5f:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007c62:	ff e0                	jmp    eax
c0007c64:	b8 0b 00 00 00       	mov    eax,0xb
c0007c69:	eb 05                	jmp    c0007c70 <Directory::read(unsigned long long, void*, int*)+0x56>
c0007c6b:	b8 05 00 00 00       	mov    eax,0x5
c0007c70:	5b                   	pop    ebx
c0007c71:	c3                   	ret    

c0007c72 <Directory::write(unsigned long long, void*, int*)>:
c0007c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c76:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007c7d:	b8 0b 00 00 00       	mov    eax,0xb
c0007c82:	83 fa 19             	cmp    edx,0x19
c0007c85:	77 18                	ja     c0007c9f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007c87:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c0007c8e:	85 d2                	test   edx,edx
c0007c90:	74 0d                	je     c0007c9f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007c92:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007c99:	19 c0                	sbb    eax,eax
c0007c9b:	83 e0 0a             	and    eax,0xa
c0007c9e:	40                   	inc    eax
c0007c9f:	c3                   	ret    

c0007ca0 <File::isAtty()>:
c0007ca0:	31 c0                	xor    eax,eax
c0007ca2:	c3                   	ret    
c0007ca3:	90                   	nop

c0007ca4 <Directory::isAtty()>:
c0007ca4:	31 c0                	xor    eax,eax
c0007ca6:	c3                   	ret    
c0007ca7:	90                   	nop

c0007ca8 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007ca8:	b8 0a 00 00 00       	mov    eax,0xa
c0007cad:	c3                   	ret    

c0007cae <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007cae:	b8 0a 00 00 00       	mov    eax,0xa
c0007cb3:	c3                   	ret    

c0007cb4 <Filesystem::allocateSwapfile(char const*, int)>:
c0007cb4:	31 c0                	xor    eax,eax
c0007cb6:	31 d2                	xor    edx,edx
c0007cb8:	c3                   	ret    
c0007cb9:	90                   	nop

c0007cba <File::~File()>:
c0007cba:	83 ec 0c             	sub    esp,0xc
c0007cbd:	ba 7c 16 02 c0       	mov    edx,0xc002167c
c0007cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cc6:	89 10                	mov    DWORD PTR [eax],edx
c0007cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ccc:	83 ec 0c             	sub    esp,0xc
c0007ccf:	50                   	push   eax
c0007cd0:	e8 15 a0 00 00       	call   c0011cea <UnixFile::~UnixFile()>
c0007cd5:	83 c4 10             	add    esp,0x10
c0007cd8:	90                   	nop
c0007cd9:	83 c4 0c             	add    esp,0xc
c0007cdc:	c3                   	ret    
c0007cdd:	90                   	nop

c0007cde <File::~File()>:
c0007cde:	83 ec 0c             	sub    esp,0xc
c0007ce1:	83 ec 0c             	sub    esp,0xc
c0007ce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ce8:	e8 cd ff ff ff       	call   c0007cba <File::~File()>
c0007ced:	83 c4 10             	add    esp,0x10
c0007cf0:	83 ec 08             	sub    esp,0x8
c0007cf3:	68 14 01 00 00       	push   0x114
c0007cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cfc:	e8 5a 49 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c0007d01:	83 c4 10             	add    esp,0x10
c0007d04:	83 c4 0c             	add    esp,0xc
c0007d07:	c3                   	ret    

c0007d08 <Directory::~Directory()>:
c0007d08:	83 ec 0c             	sub    esp,0xc
c0007d0b:	ba 98 16 02 c0       	mov    edx,0xc0021698
c0007d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d14:	89 10                	mov    DWORD PTR [eax],edx
c0007d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d1a:	83 ec 0c             	sub    esp,0xc
c0007d1d:	50                   	push   eax
c0007d1e:	e8 c7 9f 00 00       	call   c0011cea <UnixFile::~UnixFile()>
c0007d23:	83 c4 10             	add    esp,0x10
c0007d26:	90                   	nop
c0007d27:	83 c4 0c             	add    esp,0xc
c0007d2a:	c3                   	ret    
c0007d2b:	90                   	nop

c0007d2c <Directory::~Directory()>:
c0007d2c:	83 ec 0c             	sub    esp,0xc
c0007d2f:	83 ec 0c             	sub    esp,0xc
c0007d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d36:	e8 cd ff ff ff       	call   c0007d08 <Directory::~Directory()>
c0007d3b:	83 c4 10             	add    esp,0x10
c0007d3e:	83 ec 08             	sub    esp,0x8
c0007d41:	68 14 01 00 00       	push   0x114
c0007d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d4a:	e8 0c 49 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c0007d4f:	83 c4 10             	add    esp,0x10
c0007d52:	83 c4 0c             	add    esp,0xc
c0007d55:	c3                   	ret    

c0007d56 <Filesystem::Filesystem()>:
c0007d56:	ba 10 16 02 c0       	mov    edx,0xc0021610
c0007d5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d5f:	89 10                	mov    DWORD PTR [eax],edx
c0007d61:	8b 15 04 93 02 c0    	mov    edx,DWORD PTR ds:0xc0029304
c0007d67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d6b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007d6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d72:	a3 04 93 02 c0       	mov    ds:0xc0029304,eax
c0007d77:	90                   	nop
c0007d78:	c3                   	ret    
c0007d79:	90                   	nop

c0007d7a <Filesystem::~Filesystem()>:
c0007d7a:	ba 10 16 02 c0       	mov    edx,0xc0021610
c0007d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d83:	89 10                	mov    DWORD PTR [eax],edx
c0007d85:	90                   	nop
c0007d86:	c3                   	ret    
c0007d87:	90                   	nop

c0007d88 <Filesystem::~Filesystem()>:
c0007d88:	83 ec 0c             	sub    esp,0xc
c0007d8b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007d8f:	e8 e6 ff ff ff       	call   c0007d7a <Filesystem::~Filesystem()>
c0007d94:	83 c4 04             	add    esp,0x4
c0007d97:	83 ec 08             	sub    esp,0x8
c0007d9a:	6a 08                	push   0x8
c0007d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007da0:	e8 b6 48 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c0007da5:	83 c4 10             	add    esp,0x10
c0007da8:	83 c4 0c             	add    esp,0xc
c0007dab:	c3                   	ret    

c0007dac <Fs::getcwd(Process*, char*, int)>:
c0007dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007db0:	31 c0                	xor    eax,eax
c0007db2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007db6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007db9:	7d 15                	jge    c0007dd0 <Fs::getcwd(Process*, char*, int)+0x24>
c0007dbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007dbf:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007dc6:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007dc9:	84 c9                	test   cl,cl
c0007dcb:	74 06                	je     c0007dd3 <Fs::getcwd(Process*, char*, int)+0x27>
c0007dcd:	40                   	inc    eax
c0007dce:	eb e2                	jmp    c0007db2 <Fs::getcwd(Process*, char*, int)+0x6>
c0007dd0:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007dd3:	31 c0                	xor    eax,eax
c0007dd5:	c3                   	ret    

c0007dd6 <Fs::initVFS()>:
c0007dd6:	83 ec 18             	sub    esp,0x18
c0007dd9:	6a 08                	push   0x8
c0007ddb:	e8 f0 6a 00 00       	call   c000e8d0 <malloc>
c0007de0:	89 04 24             	mov    DWORD PTR [esp],eax
c0007de3:	e8 7c 25 01 00       	call   c001a364 <FAT::FAT()>
c0007de8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007def:	e8 dc 6a 00 00       	call   c000e8d0 <malloc>
c0007df4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007df7:	e8 96 34 01 00       	call   c001b292 <ISO9660::ISO9660()>
c0007dfc:	83 c4 1c             	add    esp,0x1c
c0007dff:	c3                   	ret    

c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e00:	55                   	push   ebp
c0007e01:	57                   	push   edi
c0007e02:	56                   	push   esi
c0007e03:	53                   	push   ebx
c0007e04:	81 ec 20 04 00 00    	sub    esp,0x420
c0007e0a:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c0007e11:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c0007e18:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c0007e1f:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c0007e26:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0007e2a:	68 00 04 00 00       	push   0x400
c0007e2f:	6a 00                	push   0x0
c0007e31:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0007e35:	57                   	push   edi
c0007e36:	e8 b5 86 ff ff       	call   c00004f0 <memset>
c0007e3b:	83 c4 10             	add    esp,0x10
c0007e3e:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c0007e42:	75 0b                	jne    c0007e4f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c0007e44:	50                   	push   eax
c0007e45:	50                   	push   eax
c0007e46:	56                   	push   esi
c0007e47:	57                   	push   edi
c0007e48:	e8 03 88 ff ff       	call   c0000650 <strcpy>
c0007e4d:	eb 45                	jmp    c0007e94 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c0007e4f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007e52:	83 f8 2f             	cmp    eax,0x2f
c0007e55:	74 05                	je     c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c0007e57:	83 f8 5c             	cmp    eax,0x5c
c0007e5a:	75 19                	jne    c0007e75 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c0007e5c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0007e5f:	3c 60                	cmp    al,0x60
c0007e61:	7e 03                	jle    c0007e66 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c0007e63:	83 e8 20             	sub    eax,0x20
c0007e66:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007e6a:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007e71:	50                   	push   eax
c0007e72:	50                   	push   eax
c0007e73:	eb 18                	jmp    c0007e8d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c0007e75:	50                   	push   eax
c0007e76:	50                   	push   eax
c0007e77:	55                   	push   ebp
c0007e78:	57                   	push   edi
c0007e79:	e8 d2 87 ff ff       	call   c0000650 <strcpy>
c0007e7e:	58                   	pop    eax
c0007e7f:	5a                   	pop    edx
c0007e80:	68 24 2d 02 c0       	push   0xc0022d24
c0007e85:	57                   	push   edi
c0007e86:	e8 e5 89 ff ff       	call   c0000870 <strcat>
c0007e8b:	59                   	pop    ecx
c0007e8c:	5d                   	pop    ebp
c0007e8d:	56                   	push   esi
c0007e8e:	57                   	push   edi
c0007e8f:	e8 dc 89 ff ff       	call   c0000870 <strcat>
c0007e94:	83 c4 10             	add    esp,0x10
c0007e97:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0007e9b:	3c 60                	cmp    al,0x60
c0007e9d:	7e 03                	jle    c0007ea2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c0007e9f:	83 e8 20             	sub    eax,0x20
c0007ea2:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007ea6:	be 03 00 00 00       	mov    esi,0x3
c0007eab:	88 03                	mov    BYTE PTR [ebx],al
c0007ead:	b8 03 00 00 00       	mov    eax,0x3
c0007eb2:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007eb9:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0007ebf:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0007ec3:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c0007ec8:	89 fa                	mov    edx,edi
c0007eca:	0f be ea             	movsx  ebp,dl
c0007ecd:	85 ed                	test   ebp,ebp
c0007ecf:	0f 84 a1 00 00 00    	je     c0007f76 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c0007ed5:	8d 56 01             	lea    edx,[esi+0x1]
c0007ed8:	83 fd 2f             	cmp    ebp,0x2f
c0007edb:	74 05                	je     c0007ee2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c0007edd:	83 fd 5c             	cmp    ebp,0x5c
c0007ee0:	75 12                	jne    c0007ef4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007ee2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007ee7:	89 c5                	mov    ebp,eax
c0007ee9:	74 09                	je     c0007ef4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007eeb:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0007eef:	40                   	inc    eax
c0007ef0:	89 d6                	mov    esi,edx
c0007ef2:	eb cf                	jmp    c0007ec3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007ef4:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c0007ef9:	89 f9                	mov    ecx,edi
c0007efb:	0f be e9             	movsx  ebp,cl
c0007efe:	75 61                	jne    c0007f61 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f00:	83 fd 2e             	cmp    ebp,0x2e
c0007f03:	75 5c                	jne    c0007f61 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f05:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c0007f0a:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c0007f0f:	74 19                	je     c0007f2a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c0007f11:	83 fd 2e             	cmp    ebp,0x2e
c0007f14:	74 55                	je     c0007f6b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f16:	89 f2                	mov    edx,esi
c0007f18:	42                   	inc    edx
c0007f19:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f1e:	83 f9 2f             	cmp    ecx,0x2f
c0007f21:	74 f5                	je     c0007f18 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f23:	83 f9 5c             	cmp    ecx,0x5c
c0007f26:	74 f0                	je     c0007f18 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f28:	eb c6                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f2a:	83 fd 2e             	cmp    ebp,0x2e
c0007f2d:	74 3c                	je     c0007f6b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f2f:	83 f8 03             	cmp    eax,0x3
c0007f32:	74 bc                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f34:	42                   	inc    edx
c0007f35:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f3a:	83 f9 2f             	cmp    ecx,0x2f
c0007f3d:	74 f5                	je     c0007f34 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f3f:	83 f9 5c             	cmp    ecx,0x5c
c0007f42:	74 f0                	je     c0007f34 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f44:	48                   	dec    eax
c0007f45:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007f49:	75 06                	jne    c0007f51 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007f4b:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f4f:	eb f3                	jmp    c0007f44 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c0007f51:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007f55:	74 07                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c0007f57:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f5b:	48                   	dec    eax
c0007f5c:	eb f3                	jmp    c0007f51 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007f5e:	40                   	inc    eax
c0007f5f:	eb 8f                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f61:	83 fd 2f             	cmp    ebp,0x2f
c0007f64:	74 8a                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f66:	83 fd 5c             	cmp    ebp,0x5c
c0007f69:	74 85                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f6b:	89 f9                	mov    ecx,edi
c0007f6d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0007f70:	40                   	inc    eax
c0007f71:	e9 7a ff ff ff       	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f76:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f7a:	83 ec 0c             	sub    esp,0xc
c0007f7d:	53                   	push   ebx
c0007f7e:	e8 fd 85 ff ff       	call   c0000580 <strlen>
c0007f83:	83 c4 10             	add    esp,0x10
c0007f86:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0007f8b:	74 1c                	je     c0007fa9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007f8d:	83 ec 0c             	sub    esp,0xc
c0007f90:	53                   	push   ebx
c0007f91:	e8 ea 85 ff ff       	call   c0000580 <strlen>
c0007f96:	83 c4 10             	add    esp,0x10
c0007f99:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007f9e:	74 09                	je     c0007fa9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007fa0:	31 ff                	xor    edi,edi
c0007fa2:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c0007fa7:	eb 5c                	jmp    c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0007fa9:	83 ec 0c             	sub    esp,0xc
c0007fac:	53                   	push   ebx
c0007fad:	e8 ce 85 ff ff       	call   c0000580 <strlen>
c0007fb2:	83 c4 10             	add    esp,0x10
c0007fb5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0007fba:	74 e4                	je     c0007fa0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c0007fbc:	83 ec 0c             	sub    esp,0xc
c0007fbf:	53                   	push   ebx
c0007fc0:	e8 bb 85 ff ff       	call   c0000580 <strlen>
c0007fc5:	83 c4 10             	add    esp,0x10
c0007fc8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0007fcd:	eb ab                	jmp    c0007f7a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c0007fcf:	52                   	push   edx
c0007fd0:	52                   	push   edx
c0007fd1:	53                   	push   ebx
c0007fd2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0007fd6:	55                   	push   ebp
c0007fd7:	e8 74 86 ff ff       	call   c0000650 <strcpy>
c0007fdc:	59                   	pop    ecx
c0007fdd:	58                   	pop    eax
c0007fde:	53                   	push   ebx
c0007fdf:	55                   	push   ebp
c0007fe0:	e8 a2 f8 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c0007fe5:	83 c4 10             	add    esp,0x10
c0007fe8:	48                   	dec    eax
c0007fe9:	75 37                	jne    c0008022 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0007feb:	50                   	push   eax
c0007fec:	53                   	push   ebx
c0007fed:	55                   	push   ebp
c0007fee:	68 c6 15 02 c0       	push   0xc00215c6
c0007ff3:	e8 56 ef ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007ff8:	8d 47 01             	lea    eax,[edi+0x1]
c0007ffb:	83 c4 10             	add    esp,0x10
c0007ffe:	83 ff 14             	cmp    edi,0x14
c0008001:	74 08                	je     c000800b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c0008003:	89 c7                	mov    edi,eax
c0008005:	85 f6                	test   esi,esi
c0008007:	75 c6                	jne    c0007fcf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c0008009:	eb 17                	jmp    c0008022 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000800b:	83 ec 0c             	sub    esp,0xc
c000800e:	bf 15 00 00 00       	mov    edi,0x15
c0008013:	68 e1 15 02 c0       	push   0xc00215e1
c0008018:	e8 f9 6b 00 00       	call   c000ec16 <KePanic(char const*)>
c000801d:	83 c4 10             	add    esp,0x10
c0008020:	eb e3                	jmp    c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0008022:	81 c4 1c 04 00 00    	add    esp,0x41c
c0008028:	5b                   	pop    ebx
c0008029:	5e                   	pop    esi
c000802a:	5f                   	pop    edi
c000802b:	5d                   	pop    ebp
c000802c:	c3                   	ret    
c000802d:	90                   	nop

c000802e <File::File(char const*, Process*, bool)>:
c000802e:	83 ec 1c             	sub    esp,0x1c
c0008031:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008035:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000803d:	83 ec 08             	sub    esp,0x8
c0008040:	6a 00                	push   0x0
c0008042:	50                   	push   eax
c0008043:	e8 bc 9a 00 00       	call   c0011b04 <UnixFile::UnixFile(int)>
c0008048:	83 c4 10             	add    esp,0x10
c000804b:	ba 7c 16 02 c0       	mov    edx,0xc002167c
c0008050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008054:	89 10                	mov    DWORD PTR [eax],edx
c0008056:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000805b:	85 c0                	test   eax,eax
c000805d:	74 0f                	je     c000806e <File::File(char const*, Process*, bool)+0x40>
c000805f:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0008064:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0008068:	74 04                	je     c000806e <File::File(char const*, Process*, bool)+0x40>
c000806a:	b0 01                	mov    al,0x1
c000806c:	eb 02                	jmp    c0008070 <File::File(char const*, Process*, bool)+0x42>
c000806e:	b0 00                	mov    al,0x0
c0008070:	0f b6 c0             	movzx  eax,al
c0008073:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008077:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000807d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008081:	83 c2 0d             	add    edx,0xd
c0008084:	50                   	push   eax
c0008085:	51                   	push   ecx
c0008086:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000808a:	52                   	push   edx
c000808b:	e8 70 fd ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008090:	83 c4 10             	add    esp,0x10
c0008093:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008097:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000809a:	83 e8 41             	sub    eax,0x41
c000809d:	88 c2                	mov    dl,al
c000809f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080a3:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00080a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080ad:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00080b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080bb:	0f b6 c0             	movzx  eax,al
c00080be:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00080c5:	85 c0                	test   eax,eax
c00080c7:	74 3e                	je     c0008107 <File::File(char const*, Process*, bool)+0xd9>
c00080c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080cd:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080d3:	0f b6 c0             	movzx  eax,al
c00080d6:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00080dd:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00080e3:	85 c0                	test   eax,eax
c00080e5:	75 20                	jne    c0008107 <File::File(char const*, Process*, bool)+0xd9>
c00080e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080eb:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080f1:	0f b6 c0             	movzx  eax,al
c00080f4:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00080fb:	83 ec 0c             	sub    esp,0xc
c00080fe:	50                   	push   eax
c00080ff:	e8 0a 1f 00 00       	call   c000a00e <LogicalDisk::mount()>
c0008104:	83 c4 10             	add    esp,0x10
c0008107:	90                   	nop
c0008108:	83 c4 1c             	add    esp,0x1c
c000810b:	c3                   	ret    

c000810c <File::File(char const*, Process*)>:
c000810c:	83 ec 0c             	sub    esp,0xc
c000810f:	6a 01                	push   0x1
c0008111:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008115:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008119:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000811d:	e8 0c ff ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0008122:	83 c4 10             	add    esp,0x10
c0008125:	90                   	nop
c0008126:	83 c4 0c             	add    esp,0xc
c0008129:	c3                   	ret    

c000812a <File::open(FileOpenMode)>:
c000812a:	53                   	push   ebx
c000812b:	b8 0b 00 00 00       	mov    eax,0xb
c0008130:	83 ec 08             	sub    esp,0x8
c0008133:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008137:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000813e:	83 fa 19             	cmp    edx,0x19
c0008141:	77 40                	ja     c0008183 <File::open(FileOpenMode)+0x59>
c0008143:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c000814a:	85 d2                	test   edx,edx
c000814c:	74 35                	je     c0008183 <File::open(FileOpenMode)+0x59>
c000814e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008154:	85 d2                	test   edx,edx
c0008156:	74 2b                	je     c0008183 <File::open(FileOpenMode)+0x59>
c0008158:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000815c:	b8 06 00 00 00       	mov    eax,0x6
c0008161:	75 20                	jne    c0008183 <File::open(FileOpenMode)+0x59>
c0008163:	8b 02                	mov    eax,DWORD PTR [edx]
c0008165:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000816b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000816f:	51                   	push   ecx
c0008170:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008173:	51                   	push   ecx
c0008174:	52                   	push   edx
c0008175:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0008178:	83 c4 10             	add    esp,0x10
c000817b:	85 c0                	test   eax,eax
c000817d:	75 04                	jne    c0008183 <File::open(FileOpenMode)+0x59>
c000817f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008183:	83 c4 08             	add    esp,0x8
c0008186:	5b                   	pop    ebx
c0008187:	c3                   	ret    

c0008188 <File::close()>:
c0008188:	53                   	push   ebx
c0008189:	b8 0b 00 00 00       	mov    eax,0xb
c000818e:	83 ec 08             	sub    esp,0x8
c0008191:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008195:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000819c:	83 f9 19             	cmp    ecx,0x19
c000819f:	77 41                	ja     c00081e2 <File::close()+0x5a>
c00081a1:	8b 1c 8d 80 97 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd6880]
c00081a8:	85 db                	test   ebx,ebx
c00081aa:	74 36                	je     c00081e2 <File::close()+0x5a>
c00081ac:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00081b3:	74 2d                	je     c00081e2 <File::close()+0x5a>
c00081b5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00081b9:	b8 05 00 00 00       	mov    eax,0x5
c00081be:	74 22                	je     c00081e2 <File::close()+0x5a>
c00081c0:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00081c4:	8b 04 8d 80 97 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd6880]
c00081cb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00081d1:	53                   	push   ebx
c00081d2:	53                   	push   ebx
c00081d3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00081d5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00081db:	50                   	push   eax
c00081dc:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c00081df:	83 c4 10             	add    esp,0x10
c00081e2:	83 c4 08             	add    esp,0x8
c00081e5:	5b                   	pop    ebx
c00081e6:	c3                   	ret    
c00081e7:	90                   	nop

c00081e8 <File::seek(unsigned long long)>:
c00081e8:	56                   	push   esi
c00081e9:	b8 0b 00 00 00       	mov    eax,0xb
c00081ee:	53                   	push   ebx
c00081ef:	51                   	push   ecx
c00081f0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00081f4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00081f8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00081fc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008203:	83 fa 19             	cmp    edx,0x19
c0008206:	77 31                	ja     c0008239 <File::seek(unsigned long long)+0x51>
c0008208:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c000820f:	85 d2                	test   edx,edx
c0008211:	74 26                	je     c0008239 <File::seek(unsigned long long)+0x51>
c0008213:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008219:	85 d2                	test   edx,edx
c000821b:	74 1c                	je     c0008239 <File::seek(unsigned long long)+0x51>
c000821d:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008221:	b8 05 00 00 00       	mov    eax,0x5
c0008226:	74 11                	je     c0008239 <File::seek(unsigned long long)+0x51>
c0008228:	8b 02                	mov    eax,DWORD PTR [edx]
c000822a:	53                   	push   ebx
c000822b:	51                   	push   ecx
c000822c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008232:	52                   	push   edx
c0008233:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0008236:	83 c4 10             	add    esp,0x10
c0008239:	5a                   	pop    edx
c000823a:	5b                   	pop    ebx
c000823b:	5e                   	pop    esi
c000823c:	c3                   	ret    
c000823d:	90                   	nop

c000823e <File::truncate(unsigned long long)>:
c000823e:	56                   	push   esi
c000823f:	b8 0b 00 00 00       	mov    eax,0xb
c0008244:	53                   	push   ebx
c0008245:	51                   	push   ecx
c0008246:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000824a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000824e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008252:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008259:	83 fa 19             	cmp    edx,0x19
c000825c:	77 31                	ja     c000828f <File::truncate(unsigned long long)+0x51>
c000825e:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c0008265:	85 d2                	test   edx,edx
c0008267:	74 26                	je     c000828f <File::truncate(unsigned long long)+0x51>
c0008269:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000826f:	85 d2                	test   edx,edx
c0008271:	74 1c                	je     c000828f <File::truncate(unsigned long long)+0x51>
c0008273:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008277:	b8 05 00 00 00       	mov    eax,0x5
c000827c:	74 11                	je     c000828f <File::truncate(unsigned long long)+0x51>
c000827e:	8b 02                	mov    eax,DWORD PTR [edx]
c0008280:	53                   	push   ebx
c0008281:	51                   	push   ecx
c0008282:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008288:	52                   	push   edx
c0008289:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000828c:	83 c4 10             	add    esp,0x10
c000828f:	5a                   	pop    edx
c0008290:	5b                   	pop    ebx
c0008291:	5e                   	pop    esi
c0008292:	c3                   	ret    
c0008293:	90                   	nop

c0008294 <File::tell(unsigned long long*)>:
c0008294:	83 ec 0c             	sub    esp,0xc
c0008297:	b8 0b 00 00 00       	mov    eax,0xb
c000829c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00082a0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00082a7:	83 fa 19             	cmp    edx,0x19
c00082aa:	77 34                	ja     c00082e0 <File::tell(unsigned long long*)+0x4c>
c00082ac:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c00082b3:	85 d2                	test   edx,edx
c00082b5:	74 29                	je     c00082e0 <File::tell(unsigned long long*)+0x4c>
c00082b7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082bd:	85 d2                	test   edx,edx
c00082bf:	74 1f                	je     c00082e0 <File::tell(unsigned long long*)+0x4c>
c00082c1:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00082c5:	b8 05 00 00 00       	mov    eax,0x5
c00082ca:	74 14                	je     c00082e0 <File::tell(unsigned long long*)+0x4c>
c00082cc:	50                   	push   eax
c00082cd:	8b 02                	mov    eax,DWORD PTR [edx]
c00082cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00082d3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00082d9:	52                   	push   edx
c00082da:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00082dd:	83 c4 10             	add    esp,0x10
c00082e0:	83 c4 0c             	add    esp,0xc
c00082e3:	c3                   	ret    

c00082e4 <File::rewind()>:
c00082e4:	83 ec 10             	sub    esp,0x10
c00082e7:	6a 00                	push   0x0
c00082e9:	6a 00                	push   0x0
c00082eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082ef:	e8 f4 fe ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c00082f4:	83 c4 1c             	add    esp,0x1c
c00082f7:	c3                   	ret    

c00082f8 <File::unlink()>:
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	b8 0b 00 00 00       	mov    eax,0xb
c0008300:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008304:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000830b:	83 f9 19             	cmp    ecx,0x19
c000830e:	77 2f                	ja     c000833f <File::unlink()+0x47>
c0008310:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008317:	85 c9                	test   ecx,ecx
c0008319:	74 24                	je     c000833f <File::unlink()+0x47>
c000831b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008321:	85 c9                	test   ecx,ecx
c0008323:	74 1a                	je     c000833f <File::unlink()+0x47>
c0008325:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008329:	b8 06 00 00 00       	mov    eax,0x6
c000832e:	75 0f                	jne    c000833f <File::unlink()+0x47>
c0008330:	50                   	push   eax
c0008331:	83 c2 0d             	add    edx,0xd
c0008334:	50                   	push   eax
c0008335:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008337:	52                   	push   edx
c0008338:	51                   	push   ecx
c0008339:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000833c:	83 c4 10             	add    esp,0x10
c000833f:	83 c4 0c             	add    esp,0xc
c0008342:	c3                   	ret    
c0008343:	90                   	nop

c0008344 <File::rename(char const*)>:
c0008344:	83 ec 0c             	sub    esp,0xc
c0008347:	b8 0b 00 00 00       	mov    eax,0xb
c000834c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008350:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008357:	83 f9 19             	cmp    ecx,0x19
c000835a:	77 32                	ja     c000838e <File::rename(char const*)+0x4a>
c000835c:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008363:	85 c9                	test   ecx,ecx
c0008365:	74 27                	je     c000838e <File::rename(char const*)+0x4a>
c0008367:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000836d:	85 c9                	test   ecx,ecx
c000836f:	74 1d                	je     c000838e <File::rename(char const*)+0x4a>
c0008371:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008375:	b8 06 00 00 00       	mov    eax,0x6
c000837a:	75 12                	jne    c000838e <File::rename(char const*)+0x4a>
c000837c:	50                   	push   eax
c000837d:	83 c2 0d             	add    edx,0xd
c0008380:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008382:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008386:	52                   	push   edx
c0008387:	51                   	push   ecx
c0008388:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000838b:	83 c4 10             	add    esp,0x10
c000838e:	83 c4 0c             	add    esp,0xc
c0008391:	c3                   	ret    

c0008392 <File::chfatattr(unsigned char, unsigned char)>:
c0008392:	57                   	push   edi
c0008393:	b8 0b 00 00 00       	mov    eax,0xb
c0008398:	56                   	push   esi
c0008399:	53                   	push   ebx
c000839a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000839e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00083a2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00083a6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083ad:	83 f9 19             	cmp    ecx,0x19
c00083b0:	77 37                	ja     c00083e9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083b2:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c00083b9:	85 c9                	test   ecx,ecx
c00083bb:	74 2c                	je     c00083e9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083bd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083c3:	85 c9                	test   ecx,ecx
c00083c5:	74 22                	je     c00083e9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083c7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083cb:	b8 06 00 00 00       	mov    eax,0x6
c00083d0:	75 17                	jne    c00083e9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083d2:	89 f0                	mov    eax,esi
c00083d4:	8b 39                	mov    edi,DWORD PTR [ecx]
c00083d6:	0f b6 db             	movzx  ebx,bl
c00083d9:	0f b6 f0             	movzx  esi,al
c00083dc:	83 c2 0d             	add    edx,0xd
c00083df:	56                   	push   esi
c00083e0:	53                   	push   ebx
c00083e1:	52                   	push   edx
c00083e2:	51                   	push   ecx
c00083e3:	ff 57 38             	call   DWORD PTR [edi+0x38]
c00083e6:	83 c4 10             	add    esp,0x10
c00083e9:	5b                   	pop    ebx
c00083ea:	5e                   	pop    esi
c00083eb:	5f                   	pop    edi
c00083ec:	c3                   	ret    
c00083ed:	90                   	nop

c00083ee <File::exists()>:
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	31 c0                	xor    eax,eax
c00083f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083f7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083fe:	83 f9 19             	cmp    ecx,0x19
c0008401:	77 24                	ja     c0008427 <File::exists()+0x39>
c0008403:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c000840a:	85 c9                	test   ecx,ecx
c000840c:	74 19                	je     c0008427 <File::exists()+0x39>
c000840e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008414:	85 c9                	test   ecx,ecx
c0008416:	74 0f                	je     c0008427 <File::exists()+0x39>
c0008418:	50                   	push   eax
c0008419:	83 c2 0d             	add    edx,0xd
c000841c:	50                   	push   eax
c000841d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000841f:	52                   	push   edx
c0008420:	51                   	push   ecx
c0008421:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008424:	83 c4 10             	add    esp,0x10
c0008427:	83 c4 0c             	add    esp,0xc
c000842a:	c3                   	ret    
c000842b:	90                   	nop

c000842c <File::stat(unsigned long long*, bool*)>:
c000842c:	56                   	push   esi
c000842d:	53                   	push   ebx
c000842e:	50                   	push   eax
c000842f:	b8 0b 00 00 00       	mov    eax,0xb
c0008434:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008438:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000843c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008440:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008447:	83 f9 19             	cmp    ecx,0x19
c000844a:	77 3d                	ja     c0008489 <File::stat(unsigned long long*, bool*)+0x5d>
c000844c:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008453:	85 c9                	test   ecx,ecx
c0008455:	74 32                	je     c0008489 <File::stat(unsigned long long*, bool*)+0x5d>
c0008457:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000845d:	85 c9                	test   ecx,ecx
c000845f:	74 28                	je     c0008489 <File::stat(unsigned long long*, bool*)+0x5d>
c0008461:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008465:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008467:	74 13                	je     c000847c <File::stat(unsigned long long*, bool*)+0x50>
c0008469:	83 ec 04             	sub    esp,0x4
c000846c:	56                   	push   esi
c000846d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008473:	51                   	push   ecx
c0008474:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0008477:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000847a:	eb 0a                	jmp    c0008486 <File::stat(unsigned long long*, bool*)+0x5a>
c000847c:	53                   	push   ebx
c000847d:	83 c2 0d             	add    edx,0xd
c0008480:	56                   	push   esi
c0008481:	52                   	push   edx
c0008482:	51                   	push   ecx
c0008483:	ff 50 34             	call   DWORD PTR [eax+0x34]
c0008486:	83 c4 10             	add    esp,0x10
c0008489:	5a                   	pop    edx
c000848a:	5b                   	pop    ebx
c000848b:	5e                   	pop    esi
c000848c:	c3                   	ret    

c000848d <Fs::setcwd(Process*, char*)>:
c000848d:	55                   	push   ebp
c000848e:	57                   	push   edi
c000848f:	56                   	push   esi
c0008490:	53                   	push   ebx
c0008491:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0008497:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000849e:	6a 00                	push   0x0
c00084a0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00084a6:	57                   	push   edi
c00084a7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00084ae:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00084b2:	56                   	push   esi
c00084b3:	e8 48 f9 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00084b8:	89 34 24             	mov    DWORD PTR [esp],esi
c00084bb:	e8 c0 80 ff ff       	call   c0000580 <strlen>
c00084c0:	83 c4 10             	add    esp,0x10
c00084c3:	83 f8 02             	cmp    eax,0x2
c00084c6:	77 15                	ja     c00084dd <Fs::setcwd(Process*, char*)+0x50>
c00084c8:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c00084cd:	83 eb 41             	sub    ebx,0x41
c00084d0:	8b 04 9d 80 97 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6880]
c00084d7:	85 c0                	test   eax,eax
c00084d9:	75 1c                	jne    c00084f7 <Fs::setcwd(Process*, char*)+0x6a>
c00084db:	eb 2f                	jmp    c000850c <Fs::setcwd(Process*, char*)+0x7f>
c00084dd:	83 ec 0c             	sub    esp,0xc
c00084e0:	56                   	push   esi
c00084e1:	e8 9a 80 ff ff       	call   c0000580 <strlen>
c00084e6:	83 c4 10             	add    esp,0x10
c00084e9:	83 f8 03             	cmp    eax,0x3
c00084ec:	75 57                	jne    c0008545 <Fs::setcwd(Process*, char*)+0xb8>
c00084ee:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00084f3:	75 50                	jne    c0008545 <Fs::setcwd(Process*, char*)+0xb8>
c00084f5:	eb d1                	jmp    c00084c8 <Fs::setcwd(Process*, char*)+0x3b>
c00084f7:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c00084fe:	75 0c                	jne    c000850c <Fs::setcwd(Process*, char*)+0x7f>
c0008500:	83 ec 0c             	sub    esp,0xc
c0008503:	50                   	push   eax
c0008504:	e8 05 1b 00 00       	call   c000a00e <LogicalDisk::mount()>
c0008509:	83 c4 10             	add    esp,0x10
c000850c:	83 fb 19             	cmp    ebx,0x19
c000850f:	b8 03 00 00 00       	mov    eax,0x3
c0008514:	0f 87 c6 00 00 00    	ja     c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c000851a:	8b 14 9d 80 97 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd6880]
c0008521:	b8 05 00 00 00       	mov    eax,0x5
c0008526:	85 d2                	test   edx,edx
c0008528:	0f 84 b2 00 00 00    	je     c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c000852e:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008535:	b8 06 00 00 00       	mov    eax,0x6
c000853a:	0f 85 92 00 00 00    	jne    c00085d2 <Fs::setcwd(Process*, char*)+0x145>
c0008540:	e9 9b 00 00 00       	jmp    c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c0008545:	83 ec 0c             	sub    esp,0xc
c0008548:	68 14 01 00 00       	push   0x114
c000854d:	e8 7e 63 00 00       	call   c000e8d0 <malloc>
c0008552:	83 c4 0c             	add    esp,0xc
c0008555:	55                   	push   ebp
c0008556:	56                   	push   esi
c0008557:	50                   	push   eax
c0008558:	89 c3                	mov    ebx,eax
c000855a:	e8 ad fb ff ff       	call   c000810c <File::File(char const*, Process*)>
c000855f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0008564:	83 c4 0c             	add    esp,0xc
c0008567:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000856b:	50                   	push   eax
c000856c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008570:	50                   	push   eax
c0008571:	53                   	push   ebx
c0008572:	e8 b5 fe ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c0008577:	83 c4 10             	add    esp,0x10
c000857a:	83 f8 02             	cmp    eax,0x2
c000857d:	74 27                	je     c00085a6 <Fs::setcwd(Process*, char*)+0x119>
c000857f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0008584:	75 1c                	jne    c00085a2 <Fs::setcwd(Process*, char*)+0x115>
c0008586:	85 db                	test   ebx,ebx
c0008588:	b8 02 00 00 00       	mov    eax,0x2
c000858d:	74 51                	je     c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c000858f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008591:	83 ec 0c             	sub    esp,0xc
c0008594:	53                   	push   ebx
c0008595:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008598:	83 c4 10             	add    esp,0x10
c000859b:	b8 02 00 00 00       	mov    eax,0x2
c00085a0:	eb 3e                	jmp    c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c00085a2:	85 c0                	test   eax,eax
c00085a4:	74 1c                	je     c00085c2 <Fs::setcwd(Process*, char*)+0x135>
c00085a6:	85 db                	test   ebx,ebx
c00085a8:	b8 01 00 00 00       	mov    eax,0x1
c00085ad:	74 31                	je     c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c00085af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085b1:	83 ec 0c             	sub    esp,0xc
c00085b4:	53                   	push   ebx
c00085b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085b8:	83 c4 10             	add    esp,0x10
c00085bb:	b8 01 00 00 00       	mov    eax,0x1
c00085c0:	eb 1e                	jmp    c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c00085c2:	85 db                	test   ebx,ebx
c00085c4:	74 0c                	je     c00085d2 <Fs::setcwd(Process*, char*)+0x145>
c00085c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085c8:	83 ec 0c             	sub    esp,0xc
c00085cb:	53                   	push   ebx
c00085cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085cf:	83 c4 10             	add    esp,0x10
c00085d2:	50                   	push   eax
c00085d3:	50                   	push   eax
c00085d4:	56                   	push   esi
c00085d5:	57                   	push   edi
c00085d6:	e8 75 80 ff ff       	call   c0000650 <strcpy>
c00085db:	83 c4 10             	add    esp,0x10
c00085de:	31 c0                	xor    eax,eax
c00085e0:	81 c4 1c 02 00 00    	add    esp,0x21c
c00085e6:	5b                   	pop    ebx
c00085e7:	5e                   	pop    esi
c00085e8:	5f                   	pop    edi
c00085e9:	5d                   	pop    ebp
c00085ea:	c3                   	ret    
c00085eb:	90                   	nop

c00085ec <Directory::Directory(char const*, Process*)>:
c00085ec:	83 ec 0c             	sub    esp,0xc
c00085ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085f3:	83 ec 08             	sub    esp,0x8
c00085f6:	6a 00                	push   0x0
c00085f8:	50                   	push   eax
c00085f9:	e8 06 95 00 00       	call   c0011b04 <UnixFile::UnixFile(int)>
c00085fe:	83 c4 10             	add    esp,0x10
c0008601:	ba 98 16 02 c0       	mov    edx,0xc0021698
c0008606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000860a:	89 10                	mov    DWORD PTR [eax],edx
c000860c:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0008611:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008615:	0f 95 c0             	setne  al
c0008618:	0f b6 c0             	movzx  eax,al
c000861b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000861f:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008625:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008629:	83 c2 0d             	add    edx,0xd
c000862c:	50                   	push   eax
c000862d:	51                   	push   ecx
c000862e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008632:	52                   	push   edx
c0008633:	e8 c8 f7 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008638:	83 c4 10             	add    esp,0x10
c000863b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000863f:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008642:	83 e8 41             	sub    eax,0x41
c0008645:	88 c2                	mov    dl,al
c0008647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000864b:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008655:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0008659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000865d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008663:	0f b6 c0             	movzx  eax,al
c0008666:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c000866d:	85 c0                	test   eax,eax
c000866f:	74 3e                	je     c00086af <Directory::Directory(char const*, Process*)+0xc3>
c0008671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008675:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000867b:	0f b6 c0             	movzx  eax,al
c000867e:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0008685:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000868b:	85 c0                	test   eax,eax
c000868d:	75 20                	jne    c00086af <Directory::Directory(char const*, Process*)+0xc3>
c000868f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008693:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008699:	0f b6 c0             	movzx  eax,al
c000869c:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00086a3:	83 ec 0c             	sub    esp,0xc
c00086a6:	50                   	push   eax
c00086a7:	e8 62 19 00 00       	call   c000a00e <LogicalDisk::mount()>
c00086ac:	83 c4 10             	add    esp,0x10
c00086af:	90                   	nop
c00086b0:	83 c4 0c             	add    esp,0xc
c00086b3:	c3                   	ret    

c00086b4 <Directory::open()>:
c00086b4:	53                   	push   ebx
c00086b5:	b8 0b 00 00 00       	mov    eax,0xb
c00086ba:	83 ec 08             	sub    esp,0x8
c00086bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086c1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00086c8:	83 fa 19             	cmp    edx,0x19
c00086cb:	77 3d                	ja     c000870a <Directory::open()+0x56>
c00086cd:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c00086d4:	85 d2                	test   edx,edx
c00086d6:	74 32                	je     c000870a <Directory::open()+0x56>
c00086d8:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00086de:	85 d2                	test   edx,edx
c00086e0:	74 28                	je     c000870a <Directory::open()+0x56>
c00086e2:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00086e6:	b8 06 00 00 00       	mov    eax,0x6
c00086eb:	75 1d                	jne    c000870a <Directory::open()+0x56>
c00086ed:	50                   	push   eax
c00086ee:	8b 02                	mov    eax,DWORD PTR [edx]
c00086f0:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00086f6:	51                   	push   ecx
c00086f7:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00086fa:	51                   	push   ecx
c00086fb:	52                   	push   edx
c00086fc:	ff 50 50             	call   DWORD PTR [eax+0x50]
c00086ff:	83 c4 10             	add    esp,0x10
c0008702:	85 c0                	test   eax,eax
c0008704:	75 04                	jne    c000870a <Directory::open()+0x56>
c0008706:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000870a:	83 c4 08             	add    esp,0x8
c000870d:	5b                   	pop    ebx
c000870e:	c3                   	ret    
c000870f:	90                   	nop

c0008710 <Directory::close()>:
c0008710:	53                   	push   ebx
c0008711:	b8 0b 00 00 00       	mov    eax,0xb
c0008716:	83 ec 08             	sub    esp,0x8
c0008719:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000871d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008724:	83 f9 19             	cmp    ecx,0x19
c0008727:	77 41                	ja     c000876a <Directory::close()+0x5a>
c0008729:	8b 1c 8d 80 97 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd6880]
c0008730:	85 db                	test   ebx,ebx
c0008732:	74 36                	je     c000876a <Directory::close()+0x5a>
c0008734:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000873b:	74 2d                	je     c000876a <Directory::close()+0x5a>
c000873d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008741:	b8 05 00 00 00       	mov    eax,0x5
c0008746:	74 22                	je     c000876a <Directory::close()+0x5a>
c0008748:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000874c:	8b 04 8d 80 97 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd6880]
c0008753:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008759:	53                   	push   ebx
c000875a:	53                   	push   ebx
c000875b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000875d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008763:	50                   	push   eax
c0008764:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c0008767:	83 c4 10             	add    esp,0x10
c000876a:	83 c4 08             	add    esp,0x8
c000876d:	5b                   	pop    ebx
c000876e:	c3                   	ret    
c000876f:	90                   	nop

c0008770 <Directory::unlink()>:
c0008770:	83 ec 0c             	sub    esp,0xc
c0008773:	b8 0b 00 00 00       	mov    eax,0xb
c0008778:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000877c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008783:	83 f9 19             	cmp    ecx,0x19
c0008786:	77 2f                	ja     c00087b7 <Directory::unlink()+0x47>
c0008788:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c000878f:	85 c9                	test   ecx,ecx
c0008791:	74 24                	je     c00087b7 <Directory::unlink()+0x47>
c0008793:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008799:	85 c9                	test   ecx,ecx
c000879b:	74 1a                	je     c00087b7 <Directory::unlink()+0x47>
c000879d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087a1:	b8 06 00 00 00       	mov    eax,0x6
c00087a6:	75 0f                	jne    c00087b7 <Directory::unlink()+0x47>
c00087a8:	50                   	push   eax
c00087a9:	83 c2 0d             	add    edx,0xd
c00087ac:	50                   	push   eax
c00087ad:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087af:	52                   	push   edx
c00087b0:	51                   	push   ecx
c00087b1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00087b4:	83 c4 10             	add    esp,0x10
c00087b7:	83 c4 0c             	add    esp,0xc
c00087ba:	c3                   	ret    
c00087bb:	90                   	nop

c00087bc <Directory::rename(char const*)>:
c00087bc:	83 ec 0c             	sub    esp,0xc
c00087bf:	b8 0b 00 00 00       	mov    eax,0xb
c00087c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087cf:	83 f9 19             	cmp    ecx,0x19
c00087d2:	77 32                	ja     c0008806 <Directory::rename(char const*)+0x4a>
c00087d4:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c00087db:	85 c9                	test   ecx,ecx
c00087dd:	74 27                	je     c0008806 <Directory::rename(char const*)+0x4a>
c00087df:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00087e5:	85 c9                	test   ecx,ecx
c00087e7:	74 1d                	je     c0008806 <Directory::rename(char const*)+0x4a>
c00087e9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087ed:	b8 06 00 00 00       	mov    eax,0x6
c00087f2:	75 12                	jne    c0008806 <Directory::rename(char const*)+0x4a>
c00087f4:	50                   	push   eax
c00087f5:	83 c2 0d             	add    edx,0xd
c00087f8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00087fe:	52                   	push   edx
c00087ff:	51                   	push   ecx
c0008800:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008803:	83 c4 10             	add    esp,0x10
c0008806:	83 c4 0c             	add    esp,0xc
c0008809:	c3                   	ret    

c000880a <Directory::exists()>:
c000880a:	83 ec 0c             	sub    esp,0xc
c000880d:	31 c0                	xor    eax,eax
c000880f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008813:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000881a:	83 f9 19             	cmp    ecx,0x19
c000881d:	77 24                	ja     c0008843 <Directory::exists()+0x39>
c000881f:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008826:	85 c9                	test   ecx,ecx
c0008828:	74 19                	je     c0008843 <Directory::exists()+0x39>
c000882a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008830:	85 c9                	test   ecx,ecx
c0008832:	74 0f                	je     c0008843 <Directory::exists()+0x39>
c0008834:	50                   	push   eax
c0008835:	83 c2 0d             	add    edx,0xd
c0008838:	50                   	push   eax
c0008839:	8b 01                	mov    eax,DWORD PTR [ecx]
c000883b:	52                   	push   edx
c000883c:	51                   	push   ecx
c000883d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008840:	83 c4 10             	add    esp,0x10
c0008843:	83 c4 0c             	add    esp,0xc
c0008846:	c3                   	ret    
c0008847:	90                   	nop

c0008848 <Directory::read(dirent*)>:
c0008848:	83 ec 1c             	sub    esp,0x1c
c000884b:	b8 0b 00 00 00       	mov    eax,0xb
c0008850:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008854:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000885b:	83 f9 19             	cmp    ecx,0x19
c000885e:	77 30                	ja     c0008890 <Directory::read(dirent*)+0x48>
c0008860:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008867:	85 c9                	test   ecx,ecx
c0008869:	74 25                	je     c0008890 <Directory::read(dirent*)+0x48>
c000886b:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0008872:	74 1c                	je     c0008890 <Directory::read(dirent*)+0x48>
c0008874:	83 ec 0c             	sub    esp,0xc
c0008877:	8b 02                	mov    eax,DWORD PTR [edx]
c0008879:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000887d:	51                   	push   ecx
c000887e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0008882:	6a 00                	push   0x0
c0008884:	68 10 01 00 00       	push   0x110
c0008889:	52                   	push   edx
c000888a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000888d:	83 c4 20             	add    esp,0x20
c0008890:	83 c4 1c             	add    esp,0x1c
c0008893:	c3                   	ret    

c0008894 <Directory::create()>:
c0008894:	83 ec 0c             	sub    esp,0xc
c0008897:	b8 0b 00 00 00       	mov    eax,0xb
c000889c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088a0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088a7:	83 f9 19             	cmp    ecx,0x19
c00088aa:	77 2f                	ja     c00088db <Directory::create()+0x47>
c00088ac:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c00088b3:	85 c9                	test   ecx,ecx
c00088b5:	74 24                	je     c00088db <Directory::create()+0x47>
c00088b7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088bd:	85 c9                	test   ecx,ecx
c00088bf:	74 1a                	je     c00088db <Directory::create()+0x47>
c00088c1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00088c5:	b8 06 00 00 00       	mov    eax,0x6
c00088ca:	75 0f                	jne    c00088db <Directory::create()+0x47>
c00088cc:	50                   	push   eax
c00088cd:	83 c2 0d             	add    edx,0xd
c00088d0:	50                   	push   eax
c00088d1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088d3:	52                   	push   edx
c00088d4:	51                   	push   ecx
c00088d5:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00088d8:	83 c4 10             	add    esp,0x10
c00088db:	83 c4 0c             	add    esp,0xc
c00088de:	c3                   	ret    
c00088df:	90                   	nop

c00088e0 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00088e0:	b8 0a 00 00 00       	mov    eax,0xa
c00088e5:	c3                   	ret    
c00088e6:	66 90                	xchg   ax,ax

c00088e8 <Bus::Bus(char const*)>:
c00088e8:	83 ec 0c             	sub    esp,0xc
c00088eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088ef:	83 ec 08             	sub    esp,0x8
c00088f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00088f6:	50                   	push   eax
c00088f7:	e8 ac 08 00 00       	call   c00091a8 <Device::Device(char const*)>
c00088fc:	83 c4 10             	add    esp,0x10
c00088ff:	ba b4 16 02 c0       	mov    edx,0xc00216b4
c0008904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008908:	89 10                	mov    DWORD PTR [eax],edx
c000890a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000890e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008918:	90                   	nop
c0008919:	83 c4 0c             	add    esp,0xc
c000891c:	c3                   	ret    
c000891d:	90                   	nop
c000891e:	66 90                	xchg   ax,ax

c0008920 <Bus::~Bus()>:
c0008920:	83 ec 0c             	sub    esp,0xc
c0008923:	ba b4 16 02 c0       	mov    edx,0xc00216b4
c0008928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892c:	89 10                	mov    DWORD PTR [eax],edx
c000892e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008932:	83 ec 0c             	sub    esp,0xc
c0008935:	50                   	push   eax
c0008936:	e8 0d 06 00 00       	call   c0008f48 <Device::~Device()>
c000893b:	83 c4 10             	add    esp,0x10
c000893e:	90                   	nop
c000893f:	83 c4 0c             	add    esp,0xc
c0008942:	c3                   	ret    
c0008943:	90                   	nop

c0008944 <Bus::~Bus()>:
c0008944:	83 ec 0c             	sub    esp,0xc
c0008947:	83 ec 0c             	sub    esp,0xc
c000894a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000894e:	e8 cd ff ff ff       	call   c0008920 <Bus::~Bus()>
c0008953:	83 c4 10             	add    esp,0x10
c0008956:	83 ec 08             	sub    esp,0x8
c0008959:	68 58 01 00 00       	push   0x158
c000895e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008962:	e8 f4 3c 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c0008967:	83 c4 10             	add    esp,0x10
c000896a:	83 c4 0c             	add    esp,0xc
c000896d:	c3                   	ret    

c000896e <KeBeepThread(void*)>:
c000896e:	83 ec 0c             	sub    esp,0xc
c0008971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008975:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000897c:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0008983:	75 01                	jne    c0008986 <KeBeepThread(void*)+0x18>
c0008985:	fb                   	sti    
c0008986:	6b c0 0a             	imul   eax,eax,0xa
c0008989:	83 ec 0c             	sub    esp,0xc
c000898c:	50                   	push   eax
c000898d:	e8 42 cc 00 00       	call   c00155d4 <milliTenthSleep(unsigned int)>
c0008992:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008999:	e8 0d fc 00 00       	call   c00185ab <HalMakeBeep(int)>
c000899e:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00089a6:	83 c4 1c             	add    esp,0x1c
c00089a9:	e9 fe ca 00 00       	jmp    c00154ac <blockTask(TaskState)>

c00089ae <KeBeep(int, int, bool)>:
c00089ae:	56                   	push   esi
c00089af:	53                   	push   ebx
c00089b0:	83 ec 10             	sub    esp,0x10
c00089b3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089b7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bf:	e8 e7 fb 00 00       	call   c00185ab <HalMakeBeep(int)>
c00089c4:	89 f0                	mov    eax,esi
c00089c6:	83 c4 10             	add    esp,0x10
c00089c9:	84 c0                	test   al,al
c00089cb:	74 1e                	je     c00089eb <KeBeep(int, int, bool)+0x3d>
c00089cd:	6b db 0a             	imul   ebx,ebx,0xa
c00089d0:	83 ec 0c             	sub    esp,0xc
c00089d3:	53                   	push   ebx
c00089d4:	e8 fb cb 00 00       	call   c00155d4 <milliTenthSleep(unsigned int)>
c00089d9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00089e1:	83 c4 14             	add    esp,0x14
c00089e4:	5b                   	pop    ebx
c00089e5:	5e                   	pop    esi
c00089e6:	e9 c0 fb 00 00       	jmp    c00185ab <HalMakeBeep(int)>
c00089eb:	68 e6 00 00 00       	push   0xe6
c00089f0:	53                   	push   ebx
c00089f1:	68 6e 89 00 c0       	push   0xc000896e
c00089f6:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00089fc:	e8 9f c7 00 00       	call   c00151a0 <Process::createThread(void (*)(void*), void*, int)>
c0008a01:	83 c4 14             	add    esp,0x14
c0008a04:	5b                   	pop    ebx
c0008a05:	5e                   	pop    esi
c0008a06:	c3                   	ret    
c0008a07:	90                   	nop

c0008a08 <KeLoadClockSettings()>:
c0008a08:	57                   	push   edi
c0008a09:	56                   	push   esi
c0008a0a:	53                   	push   ebx
c0008a0b:	81 ec 6c 02 00 00    	sub    esp,0x26c
c0008a11:	c6 44 24 14 00       	mov    BYTE PTR [esp+0x14],0x0
c0008a16:	68 d8 16 02 c0       	push   0xc00216d8
c0008a1b:	e8 90 3c 00 00       	call   c000c6b0 <CmOpen(char const*)>
c0008a20:	59                   	pop    ecx
c0008a21:	5e                   	pop    esi
c0008a22:	89 c3                	mov    ebx,eax
c0008a24:	68 fd 16 02 c0       	push   0xc00216fd
c0008a29:	50                   	push   eax
c0008a2a:	e8 7c 48 00 00       	call   c000d2ab <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008a2f:	5f                   	pop    edi
c0008a30:	5a                   	pop    edx
c0008a31:	89 c6                	mov    esi,eax
c0008a33:	50                   	push   eax
c0008a34:	68 12 17 02 c0       	push   0xc0021712
c0008a39:	e8 10 e5 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008a3e:	83 c4 10             	add    esp,0x10
c0008a41:	85 f6                	test   esi,esi
c0008a43:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0008a47:	7e 0c                	jle    c0008a55 <KeLoadClockSettings()+0x4d>
c0008a49:	52                   	push   edx
c0008a4a:	57                   	push   edi
c0008a4b:	56                   	push   esi
c0008a4c:	53                   	push   ebx
c0008a4d:	e8 ce 3d 00 00       	call   c000c820 <CmGetString(Reghive_Tag*, int, char*)>
c0008a52:	83 c4 10             	add    esp,0x10
c0008a55:	83 ec 0c             	sub    esp,0xc
c0008a58:	53                   	push   ebx
c0008a59:	e8 70 3d 00 00       	call   c000c7ce <CmClose(Reghive_Tag*)>
c0008a5e:	83 c4 0c             	add    esp,0xc
c0008a61:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0008a66:	50                   	push   eax
c0008a67:	57                   	push   edi
c0008a68:	68 20 17 02 c0       	push   0xc0021720
c0008a6d:	e8 dc e4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008a72:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
c0008a76:	83 c4 10             	add    esp,0x10
c0008a79:	c6 05 08 93 02 c0 00 	mov    BYTE PTR ds:0xc0029308,0x0
c0008a80:	8d 41 d5             	lea    eax,[ecx-0x2b]
c0008a83:	a8 fd                	test   al,0xfd
c0008a85:	75 51                	jne    c0008ad8 <KeLoadClockSettings()+0xd0>
c0008a87:	0f be 5c 24 0a       	movsx  ebx,BYTE PTR [esp+0xa]
c0008a8c:	0f be 54 24 0b       	movsx  edx,BYTE PTR [esp+0xb]
c0008a91:	83 fb 2e             	cmp    ebx,0x2e
c0008a94:	75 07                	jne    c0008a9d <KeLoadClockSettings()+0x95>
c0008a96:	83 fa 35             	cmp    edx,0x35
c0008a99:	b0 01                	mov    al,0x1
c0008a9b:	74 0f                	je     c0008aac <KeLoadClockSettings()+0xa4>
c0008a9d:	31 c0                	xor    eax,eax
c0008a9f:	83 fa 2e             	cmp    edx,0x2e
c0008aa2:	75 08                	jne    c0008aac <KeLoadClockSettings()+0xa4>
c0008aa4:	80 7c 24 0c 35       	cmp    BYTE PTR [esp+0xc],0x35
c0008aa9:	0f 94 c0             	sete   al
c0008aac:	a2 09 93 02 c0       	mov    ds:0xc0029309,al
c0008ab1:	0f be 44 24 09       	movsx  eax,BYTE PTR [esp+0x9]
c0008ab6:	83 e8 30             	sub    eax,0x30
c0008ab9:	6b f0 0a             	imul   esi,eax,0xa
c0008abc:	83 fa 2e             	cmp    edx,0x2e
c0008abf:	8d 5c 33 d0          	lea    ebx,[ebx+esi*1-0x30]
c0008ac3:	0f 44 c3             	cmove  eax,ebx
c0008ac6:	80 f9 2d             	cmp    cl,0x2d
c0008ac9:	a3 0c 93 02 c0       	mov    ds:0xc002930c,eax
c0008ace:	75 19                	jne    c0008ae9 <KeLoadClockSettings()+0xe1>
c0008ad0:	f7 1d 0c 93 02 c0    	neg    DWORD PTR ds:0xc002930c
c0008ad6:	eb 11                	jmp    c0008ae9 <KeLoadClockSettings()+0xe1>
c0008ad8:	c6 05 09 93 02 c0 00 	mov    BYTE PTR ds:0xc0029309,0x0
c0008adf:	c7 05 0c 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002930c,0x0
c0008ae9:	50                   	push   eax
c0008aea:	0f b6 05 09 93 02 c0 	movzx  eax,BYTE PTR ds:0xc0029309
c0008af1:	8d 04 80             	lea    eax,[eax+eax*4]
c0008af4:	50                   	push   eax
c0008af5:	ff 35 0c 93 02 c0    	push   DWORD PTR ds:0xc002930c
c0008afb:	68 37 17 02 c0       	push   0xc0021737
c0008b00:	e8 49 e4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008b05:	81 c4 70 02 00 00    	add    esp,0x270
c0008b0b:	5b                   	pop    ebx
c0008b0c:	5e                   	pop    esi
c0008b0d:	5f                   	pop    edi
c0008b0e:	c3                   	ret    
c0008b0f:	90                   	nop

c0008b10 <Clock::Clock(char const*)>:
c0008b10:	83 ec 0c             	sub    esp,0xc
c0008b13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b17:	83 ec 08             	sub    esp,0x8
c0008b1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b1e:	50                   	push   eax
c0008b1f:	e8 84 06 00 00       	call   c00091a8 <Device::Device(char const*)>
c0008b24:	83 c4 10             	add    esp,0x10
c0008b27:	ba 50 17 02 c0       	mov    edx,0xc0021750
c0008b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b30:	89 10                	mov    DWORD PTR [eax],edx
c0008b32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b36:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0008b40:	90                   	nop
c0008b41:	83 c4 0c             	add    esp,0xc
c0008b44:	c3                   	ret    
c0008b45:	90                   	nop

c0008b46 <Clock::~Clock()>:
c0008b46:	83 ec 0c             	sub    esp,0xc
c0008b49:	ba 50 17 02 c0       	mov    edx,0xc0021750
c0008b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b52:	89 10                	mov    DWORD PTR [eax],edx
c0008b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b58:	83 ec 0c             	sub    esp,0xc
c0008b5b:	50                   	push   eax
c0008b5c:	e8 e7 03 00 00       	call   c0008f48 <Device::~Device()>
c0008b61:	83 c4 10             	add    esp,0x10
c0008b64:	90                   	nop
c0008b65:	83 c4 0c             	add    esp,0xc
c0008b68:	c3                   	ret    
c0008b69:	90                   	nop

c0008b6a <Clock::~Clock()>:
c0008b6a:	83 ec 0c             	sub    esp,0xc
c0008b6d:	83 ec 0c             	sub    esp,0xc
c0008b70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b74:	e8 cd ff ff ff       	call   c0008b46 <Clock::~Clock()>
c0008b79:	83 c4 10             	add    esp,0x10
c0008b7c:	83 ec 08             	sub    esp,0x8
c0008b7f:	68 58 01 00 00       	push   0x158
c0008b84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b88:	e8 ce 3a 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c0008b8d:	83 c4 10             	add    esp,0x10
c0008b90:	83 c4 0c             	add    esp,0xc
c0008b93:	c3                   	ret    

c0008b94 <Clock::timeInSecondsLocal()>:
c0008b94:	53                   	push   ebx
c0008b95:	83 ec 14             	sub    esp,0x14
c0008b98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b9c:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b9e:	50                   	push   eax
c0008b9f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0008ba2:	0f b6 0d 08 93 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029308
c0008ba9:	03 0d 0c 93 02 c0    	add    ecx,DWORD PTR ds:0xc002930c
c0008baf:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008bb5:	89 cb                	mov    ebx,ecx
c0008bb7:	c1 fb 1f             	sar    ebx,0x1f
c0008bba:	01 c8                	add    eax,ecx
c0008bbc:	11 da                	adc    edx,ebx
c0008bbe:	83 c4 10             	add    esp,0x10
c0008bc1:	31 c9                	xor    ecx,ecx
c0008bc3:	80 3d 09 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029309,0x0
c0008bca:	74 05                	je     c0008bd1 <Clock::timeInSecondsLocal()+0x3d>
c0008bcc:	b9 08 07 00 00       	mov    ecx,0x708
c0008bd1:	31 db                	xor    ebx,ebx
c0008bd3:	01 c8                	add    eax,ecx
c0008bd5:	11 da                	adc    edx,ebx
c0008bd7:	83 c4 08             	add    esp,0x8
c0008bda:	5b                   	pop    ebx
c0008bdb:	c3                   	ret    

c0008bdc <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0008bdc:	57                   	push   edi
c0008bdd:	56                   	push   esi
c0008bde:	53                   	push   ebx
c0008bdf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008be3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008be7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008beb:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008bed:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0008bf0:	0f b6 05 08 93 02 c0 	movzx  eax,BYTE PTR ds:0xc0029308
c0008bf7:	03 05 0c 93 02 c0    	add    eax,DWORD PTR ds:0xc002930c
c0008bfd:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0008c03:	99                   	cdq    
c0008c04:	29 c6                	sub    esi,eax
c0008c06:	19 d7                	sbb    edi,edx
c0008c08:	89 f0                	mov    eax,esi
c0008c0a:	31 f6                	xor    esi,esi
c0008c0c:	89 fa                	mov    edx,edi
c0008c0e:	80 3d 09 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029309,0x0
c0008c15:	74 05                	je     c0008c1c <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0008c17:	be 08 07 00 00       	mov    esi,0x708
c0008c1c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008c20:	31 ff                	xor    edi,edi
c0008c22:	29 f0                	sub    eax,esi
c0008c24:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008c28:	19 fa                	sbb    edx,edi
c0008c2a:	89 d8                	mov    eax,ebx
c0008c2c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008c30:	5b                   	pop    ebx
c0008c31:	5e                   	pop    esi
c0008c32:	5f                   	pop    edi
c0008c33:	ff e0                	jmp    eax

c0008c35 <KeDatetimeToSeconds(datetime_t)>:
c0008c35:	55                   	push   ebp
c0008c36:	57                   	push   edi
c0008c37:	56                   	push   esi
c0008c38:	53                   	push   ebx
c0008c39:	83 ec 0c             	sub    esp,0xc
c0008c3c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008c40:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008c44:	89 f7                	mov    edi,esi
c0008c46:	89 f0                	mov    eax,esi
c0008c48:	0f b6 cf             	movzx  ecx,bh
c0008c4b:	0f b6 c4             	movzx  eax,ah
c0008c4e:	c1 ef 10             	shr    edi,0x10
c0008c51:	89 da                	mov    edx,ebx
c0008c53:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0008c56:	89 f9                	mov    ecx,edi
c0008c58:	0f b6 f9             	movzx  edi,cl
c0008c5b:	89 f1                	mov    ecx,esi
c0008c5d:	6b c0 3c             	imul   eax,eax,0x3c
c0008c60:	0f b6 f1             	movzx  esi,cl
c0008c63:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c0008c69:	0f b6 db             	movzx  ebx,bl
c0008c6c:	c1 ea 10             	shr    edx,0x10
c0008c6f:	81 ea 6c 07 00 00    	sub    edx,0x76c
c0008c75:	01 f8                	add    eax,edi
c0008c77:	01 f0                	add    eax,esi
c0008c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0008c7c:	c1 f8 1f             	sar    eax,0x1f
c0008c7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c83:	89 e8                	mov    eax,ebp
c0008c85:	0f b6 c0             	movzx  eax,al
c0008c88:	8b 0c 85 a0 17 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde860]
c0008c8f:	83 f8 01             	cmp    eax,0x1
c0008c92:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c0008c96:	0f b7 da             	movzx  ebx,dx
c0008c99:	76 27                	jbe    c0008cc2 <KeDatetimeToSeconds(datetime_t)+0x8d>
c0008c9b:	80 e2 03             	and    dl,0x3
c0008c9e:	75 22                	jne    c0008cc2 <KeDatetimeToSeconds(datetime_t)+0x8d>
c0008ca0:	31 d2                	xor    edx,edx
c0008ca2:	be 64 00 00 00       	mov    esi,0x64
c0008ca7:	89 d8                	mov    eax,ebx
c0008ca9:	f7 f6                	div    esi
c0008cab:	85 d2                	test   edx,edx
c0008cad:	75 12                	jne    c0008cc1 <KeDatetimeToSeconds(datetime_t)+0x8c>
c0008caf:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0008cb5:	be 90 01 00 00       	mov    esi,0x190
c0008cba:	99                   	cdq    
c0008cbb:	f7 fe                	idiv   esi
c0008cbd:	85 d2                	test   edx,edx
c0008cbf:	75 01                	jne    c0008cc2 <KeDatetimeToSeconds(datetime_t)+0x8d>
c0008cc1:	41                   	inc    ecx
c0008cc2:	83 fb 46             	cmp    ebx,0x46
c0008cc5:	76 48                	jbe    c0008d0f <KeDatetimeToSeconds(datetime_t)+0xda>
c0008cc7:	be 46 00 00 00       	mov    esi,0x46
c0008ccc:	bf 64 00 00 00       	mov    edi,0x64
c0008cd1:	bd 90 01 00 00       	mov    ebp,0x190
c0008cd6:	f7 c6 03 00 00 00    	test   esi,0x3
c0008cdc:	b8 6d 01 00 00       	mov    eax,0x16d
c0008ce1:	75 23                	jne    c0008d06 <KeDatetimeToSeconds(datetime_t)+0xd1>
c0008ce3:	89 f0                	mov    eax,esi
c0008ce5:	99                   	cdq    
c0008ce6:	f7 ff                	idiv   edi
c0008ce8:	b8 6e 01 00 00       	mov    eax,0x16e
c0008ced:	85 d2                	test   edx,edx
c0008cef:	75 15                	jne    c0008d06 <KeDatetimeToSeconds(datetime_t)+0xd1>
c0008cf1:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0008cf7:	99                   	cdq    
c0008cf8:	f7 fd                	idiv   ebp
c0008cfa:	83 fa 01             	cmp    edx,0x1
c0008cfd:	19 c0                	sbb    eax,eax
c0008cff:	f7 d0                	not    eax
c0008d01:	05 6e 01 00 00       	add    eax,0x16e
c0008d06:	46                   	inc    esi
c0008d07:	01 c1                	add    ecx,eax
c0008d09:	39 de                	cmp    esi,ebx
c0008d0b:	7c c9                	jl     c0008cd6 <KeDatetimeToSeconds(datetime_t)+0xa1>
c0008d0d:	eb 34                	jmp    c0008d43 <KeDatetimeToSeconds(datetime_t)+0x10e>
c0008d0f:	74 32                	je     c0008d43 <KeDatetimeToSeconds(datetime_t)+0x10e>
c0008d11:	b8 45 00 00 00       	mov    eax,0x45
c0008d16:	89 c2                	mov    edx,eax
c0008d18:	83 e2 03             	and    edx,0x3
c0008d1b:	39 d8                	cmp    eax,ebx
c0008d1d:	7e 0f                	jle    c0008d2e <KeDatetimeToSeconds(datetime_t)+0xf9>
c0008d1f:	83 fa 01             	cmp    edx,0x1
c0008d22:	19 d2                	sbb    edx,edx
c0008d24:	48                   	dec    eax
c0008d25:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0008d2c:	eb e8                	jmp    c0008d16 <KeDatetimeToSeconds(datetime_t)+0xe1>
c0008d2e:	85 d2                	test   edx,edx
c0008d30:	b8 6d 01 00 00       	mov    eax,0x16d
c0008d35:	75 0a                	jne    c0008d41 <KeDatetimeToSeconds(datetime_t)+0x10c>
c0008d37:	83 fb 01             	cmp    ebx,0x1
c0008d3a:	19 c0                	sbb    eax,eax
c0008d3c:	05 6e 01 00 00       	add    eax,0x16e
c0008d41:	29 c1                	sub    ecx,eax
c0008d43:	b8 80 51 01 00       	mov    eax,0x15180
c0008d48:	f7 e9                	imul   ecx
c0008d4a:	03 04 24             	add    eax,DWORD PTR [esp]
c0008d4d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008d51:	83 c4 0c             	add    esp,0xc
c0008d54:	5b                   	pop    ebx
c0008d55:	5e                   	pop    esi
c0008d56:	5f                   	pop    edi
c0008d57:	5d                   	pop    ebp
c0008d58:	c3                   	ret    
c0008d59:	90                   	nop

c0008d5a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0008d5a:	57                   	push   edi
c0008d5b:	56                   	push   esi
c0008d5c:	53                   	push   ebx
c0008d5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008d61:	8b 06                	mov    eax,DWORD PTR [esi]
c0008d63:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0008d66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008d6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008d6e:	e8 c2 fe ff ff       	call   c0008c35 <KeDatetimeToSeconds(datetime_t)>
c0008d73:	59                   	pop    ecx
c0008d74:	0f b6 0d 08 93 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029308
c0008d7b:	5b                   	pop    ebx
c0008d7c:	03 0d 0c 93 02 c0    	add    ecx,DWORD PTR ds:0xc002930c
c0008d82:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008d88:	89 cb                	mov    ebx,ecx
c0008d8a:	c1 fb 1f             	sar    ebx,0x1f
c0008d8d:	29 c8                	sub    eax,ecx
c0008d8f:	19 da                	sbb    edx,ebx
c0008d91:	31 c9                	xor    ecx,ecx
c0008d93:	80 3d 09 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029309,0x0
c0008d9a:	74 05                	je     c0008da1 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0008d9c:	b9 08 07 00 00       	mov    ecx,0x708
c0008da1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0008da5:	31 db                	xor    ebx,ebx
c0008da7:	29 c8                	sub    eax,ecx
c0008da9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008dad:	19 da                	sbb    edx,ebx
c0008daf:	89 f8                	mov    eax,edi
c0008db1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008db5:	5b                   	pop    ebx
c0008db6:	5e                   	pop    esi
c0008db7:	5f                   	pop    edi
c0008db8:	ff e0                	jmp    eax

c0008dba <KeSecondsToDatetime(unsigned long long)>:
c0008dba:	55                   	push   ebp
c0008dbb:	57                   	push   edi
c0008dbc:	56                   	push   esi
c0008dbd:	53                   	push   ebx
c0008dbe:	83 ec 1c             	sub    esp,0x1c
c0008dc1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0008dc5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008dc9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0008dcd:	6a 00                	push   0x0
c0008dcf:	68 80 51 01 00       	push   0x15180
c0008dd4:	55                   	push   ebp
c0008dd5:	57                   	push   edi
c0008dd6:	e8 09 6f 01 00       	call   c001fce4 <__udivdi3>
c0008ddb:	83 c4 10             	add    esp,0x10
c0008dde:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008de2:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0008de8:	6a 00                	push   0x0
c0008dea:	68 80 51 01 00       	push   0x15180
c0008def:	55                   	push   ebp
c0008df0:	57                   	push   edi
c0008df1:	bf 10 0e 00 00       	mov    edi,0xe10
c0008df6:	e8 e9 6f 01 00       	call   c001fde4 <__umoddi3>
c0008dfb:	83 c4 10             	add    esp,0x10
c0008dfe:	99                   	cdq    
c0008dff:	f7 ff                	idiv   edi
c0008e01:	bf 3c 00 00 00       	mov    edi,0x3c
c0008e06:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0008e09:	89 d0                	mov    eax,edx
c0008e0b:	99                   	cdq    
c0008e0c:	f7 ff                	idiv   edi
c0008e0e:	85 db                	test   ebx,ebx
c0008e10:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0008e13:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0008e16:	79 11                	jns    c0008e29 <KeSecondsToDatetime(unsigned long long)+0x6f>
c0008e18:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008e1c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0008e22:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e27:	eb 07                	jmp    c0008e30 <KeSecondsToDatetime(unsigned long long)+0x76>
c0008e29:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e2e:	89 d8                	mov    eax,ebx
c0008e30:	99                   	cdq    
c0008e31:	bf b4 05 00 00       	mov    edi,0x5b4
c0008e36:	f7 f9                	idiv   ecx
c0008e38:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0008e3d:	31 d2                	xor    edx,edx
c0008e3f:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0008e44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e48:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0008e50:	01 c3                	add    ebx,eax
c0008e52:	89 d8                	mov    eax,ebx
c0008e54:	f7 f1                	div    ecx
c0008e56:	31 d2                	xor    edx,edx
c0008e58:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0008e5b:	89 d8                	mov    eax,ebx
c0008e5d:	f7 f7                	div    edi
c0008e5f:	31 d2                	xor    edx,edx
c0008e61:	29 c1                	sub    ecx,eax
c0008e63:	89 d8                	mov    eax,ebx
c0008e65:	f7 f5                	div    ebp
c0008e67:	bd 6d 01 00 00       	mov    ebp,0x16d
c0008e6c:	31 d2                	xor    edx,edx
c0008e6e:	29 c1                	sub    ecx,eax
c0008e70:	89 c8                	mov    eax,ecx
c0008e72:	f7 f5                	div    ebp
c0008e74:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0008e79:	31 d2                	xor    edx,edx
c0008e7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008e7f:	89 c8                	mov    eax,ecx
c0008e81:	f7 f5                	div    ebp
c0008e83:	31 d2                	xor    edx,edx
c0008e85:	01 c3                	add    ebx,eax
c0008e87:	89 c8                	mov    eax,ecx
c0008e89:	f7 f7                	div    edi
c0008e8b:	bf 99 00 00 00       	mov    edi,0x99
c0008e90:	31 d2                	xor    edx,edx
c0008e92:	29 c3                	sub    ebx,eax
c0008e94:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0008e9c:	29 c3                	sub    ebx,eax
c0008e9e:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0008ea1:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0008ea4:	83 c1 02             	add    ecx,0x2
c0008ea7:	89 c8                	mov    eax,ecx
c0008ea9:	bb 05 00 00 00       	mov    ebx,0x5
c0008eae:	f7 f7                	div    edi
c0008eb0:	31 d2                	xor    edx,edx
c0008eb2:	89 c7                	mov    edi,eax
c0008eb4:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0008eba:	83 c0 02             	add    eax,0x2
c0008ebd:	f7 f3                	div    ebx
c0008ebf:	89 eb                	mov    ebx,ebp
c0008ec1:	29 c3                	sub    ebx,eax
c0008ec3:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0008ec9:	88 1e                	mov    BYTE PTR [esi],bl
c0008ecb:	19 c0                	sbb    eax,eax
c0008ecd:	31 d2                	xor    edx,edx
c0008ecf:	83 e0 0c             	and    eax,0xc
c0008ed2:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0008ed6:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0008ede:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0008ee2:	83 f9 01             	cmp    ecx,0x1
c0008ee5:	0f 96 c2             	setbe  dl
c0008ee8:	41                   	inc    ecx
c0008ee9:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0008eec:	01 d0                	add    eax,edx
c0008eee:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0008ef2:	83 c4 1c             	add    esp,0x1c
c0008ef5:	89 f0                	mov    eax,esi
c0008ef7:	5b                   	pop    ebx
c0008ef8:	5e                   	pop    esi
c0008ef9:	5f                   	pop    edi
c0008efa:	5d                   	pop    ebp
c0008efb:	c2 04 00             	ret    0x4

c0008efe <Clock::timeInDatetimeLocal()>:
c0008efe:	53                   	push   ebx
c0008eff:	83 ec 14             	sub    esp,0x14
c0008f02:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f0a:	e8 85 fc ff ff       	call   c0008b94 <Clock::timeInSecondsLocal()>
c0008f0f:	83 c4 0c             	add    esp,0xc
c0008f12:	52                   	push   edx
c0008f13:	50                   	push   eax
c0008f14:	53                   	push   ebx
c0008f15:	e8 a0 fe ff ff       	call   c0008dba <KeSecondsToDatetime(unsigned long long)>
c0008f1a:	89 d8                	mov    eax,ebx
c0008f1c:	83 c4 14             	add    esp,0x14
c0008f1f:	5b                   	pop    ebx
c0008f20:	c2 04 00             	ret    0x4
c0008f23:	90                   	nop

c0008f24 <Device::hibernate()>:
c0008f24:	c3                   	ret    
c0008f25:	90                   	nop

c0008f26 <Device::wake()>:
c0008f26:	c3                   	ret    
c0008f27:	90                   	nop

c0008f28 <Device::detect()>:
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <Device::disableLegacy()>:
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <Device::powerSaving(PowerSavingLevel)>:
c0008f2c:	c3                   	ret    
c0008f2d:	90                   	nop

c0008f2e <DriverlessDevice::close(int, int, void*)>:
c0008f2e:	31 c0                	xor    eax,eax
c0008f30:	c3                   	ret    
c0008f31:	90                   	nop

c0008f32 <DriverlessDevice::detect()>:
c0008f32:	c3                   	ret    
c0008f33:	90                   	nop

c0008f34 <DriverlessDevice::open(int, int, void*)>:
c0008f34:	83 ec 18             	sub    esp,0x18
c0008f37:	68 d0 17 02 c0       	push   0xc00217d0
c0008f3c:	e8 d5 5c 00 00       	call   c000ec16 <KePanic(char const*)>
c0008f41:	83 c8 ff             	or     eax,0xffffffff
c0008f44:	83 c4 1c             	add    esp,0x1c
c0008f47:	c3                   	ret    

c0008f48 <Device::~Device()>:
c0008f48:	ba 74 18 02 c0       	mov    edx,0xc0021874
c0008f4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f51:	89 10                	mov    DWORD PTR [eax],edx
c0008f53:	90                   	nop
c0008f54:	c3                   	ret    
c0008f55:	90                   	nop

c0008f56 <Device::~Device()>:
c0008f56:	83 ec 0c             	sub    esp,0xc
c0008f59:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f5d:	e8 e6 ff ff ff       	call   c0008f48 <Device::~Device()>
c0008f62:	83 c4 04             	add    esp,0x4
c0008f65:	83 ec 08             	sub    esp,0x8
c0008f68:	68 58 01 00 00       	push   0x158
c0008f6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f71:	e8 e5 36 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c0008f76:	83 c4 10             	add    esp,0x10
c0008f79:	83 c4 0c             	add    esp,0xc
c0008f7c:	c3                   	ret    
c0008f7d:	90                   	nop

c0008f7e <Device::findAndLoadDriver()>:
c0008f7e:	c7 44 24 04 ee 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc00217ee
c0008f86:	e9 c3 df ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c0008f8b:	90                   	nop

c0008f8c <Device::preOpenPCI(PCIDeviceInfo)>:
c0008f8c:	57                   	push   edi
c0008f8d:	b9 09 00 00 00       	mov    ecx,0x9
c0008f92:	56                   	push   esi
c0008f93:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008f97:	8d 74 24 10          	lea    esi,[esp+0x10]
c0008f9b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0008fa5:	81 c7 18 01 00 00    	add    edi,0x118
c0008fab:	fc                   	cld    
c0008fac:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0008fae:	5e                   	pop    esi
c0008faf:	5f                   	pop    edi
c0008fb0:	c3                   	ret    
c0008fb1:	90                   	nop

c0008fb2 <Device::preOpenACPI(void*, char*, char*)>:
c0008fb2:	57                   	push   edi
c0008fb3:	b9 1e 00 00 00       	mov    ecx,0x1e
c0008fb8:	56                   	push   esi
c0008fb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008fbd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008fc1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008fc5:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0008fcf:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0008fd5:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0008fdb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008fdd:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0008fe3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008fe7:	b9 0e 00 00 00       	mov    ecx,0xe
c0008fec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008fee:	5e                   	pop    esi
c0008fef:	5f                   	pop    edi
c0008ff0:	c3                   	ret    
c0008ff1:	90                   	nop

c0008ff2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0008ff2:	53                   	push   ebx
c0008ff3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008ff7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008ffb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008fff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009003:	0f b6 c0             	movzx  eax,al
c0009006:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000900a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000900e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0009012:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009016:	5b                   	pop    ebx
c0009017:	e9 57 f9 00 00       	jmp    c0018973 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000901c <Device::getParent()>:
c000901c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009020:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0009026:	c3                   	ret    
c0009027:	90                   	nop

c0009028 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0009028:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000902c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009030:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0009035:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009039:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000903d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009041:	e9 9e fa 00 00       	jmp    c0018ae4 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c0009046 <Device::addChild(Device*)>:
c0009046:	53                   	push   ebx
c0009047:	83 ec 08             	sub    esp,0x8
c000904a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000904e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009052:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009058:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000905e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009060:	85 d2                	test   edx,edx
c0009062:	74 04                	je     c0009068 <Device::addChild(Device*)+0x22>
c0009064:	89 d3                	mov    ebx,edx
c0009066:	eb f6                	jmp    c000905e <Device::addChild(Device*)+0x18>
c0009068:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000906b:	83 ec 0c             	sub    esp,0xc
c000906e:	6a 08                	push   0x8
c0009070:	e8 5b 58 00 00       	call   c000e8d0 <malloc>
c0009075:	89 03                	mov    DWORD PTR [ebx],eax
c0009077:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000907d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009084:	83 c4 18             	add    esp,0x18
c0009087:	5b                   	pop    ebx
c0009088:	c3                   	ret    
c0009089:	90                   	nop

c000908a <Device::removeAllChildren()>:
c000908a:	56                   	push   esi
c000908b:	53                   	push   ebx
c000908c:	52                   	push   edx
c000908d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009091:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0009097:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000909a:	74 17                	je     c00090b3 <Device::removeAllChildren()+0x29>
c000909c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000909f:	85 c0                	test   eax,eax
c00090a1:	74 0c                	je     c00090af <Device::removeAllChildren()+0x25>
c00090a3:	8b 10                	mov    edx,DWORD PTR [eax]
c00090a5:	83 ec 0c             	sub    esp,0xc
c00090a8:	50                   	push   eax
c00090a9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00090ac:	83 c4 10             	add    esp,0x10
c00090af:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00090b1:	eb e4                	jmp    c0009097 <Device::removeAllChildren()+0xd>
c00090b3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00090b9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00090bf:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00090c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00090cc:	58                   	pop    eax
c00090cd:	5b                   	pop    ebx
c00090ce:	5e                   	pop    esi
c00090cf:	c3                   	ret    

c00090d0 <Device::hibernateAll()>:
c00090d0:	53                   	push   ebx
c00090d1:	83 ec 14             	sub    esp,0x14
c00090d4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00090d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00090da:	53                   	push   ebx
c00090db:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00090de:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00090e4:	83 c4 10             	add    esp,0x10
c00090e7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00090ea:	74 0f                	je     c00090fb <Device::hibernateAll()+0x2b>
c00090ec:	83 ec 0c             	sub    esp,0xc
c00090ef:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090f2:	e8 d9 ff ff ff       	call   c00090d0 <Device::hibernateAll()>
c00090f7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00090f9:	eb e9                	jmp    c00090e4 <Device::hibernateAll()+0x14>
c00090fb:	83 c4 08             	add    esp,0x8
c00090fe:	5b                   	pop    ebx
c00090ff:	c3                   	ret    

c0009100 <Device::wakeAll()>:
c0009100:	53                   	push   ebx
c0009101:	83 ec 14             	sub    esp,0x14
c0009104:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009108:	8b 03                	mov    eax,DWORD PTR [ebx]
c000910a:	53                   	push   ebx
c000910b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000910e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009114:	83 c4 10             	add    esp,0x10
c0009117:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000911a:	74 0f                	je     c000912b <Device::wakeAll()+0x2b>
c000911c:	83 ec 0c             	sub    esp,0xc
c000911f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009122:	e8 d9 ff ff ff       	call   c0009100 <Device::wakeAll()>
c0009127:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009129:	eb e9                	jmp    c0009114 <Device::wakeAll()+0x14>
c000912b:	83 c4 08             	add    esp,0x8
c000912e:	5b                   	pop    ebx
c000912f:	c3                   	ret    

c0009130 <Device::detectAll()>:
c0009130:	53                   	push   ebx
c0009131:	83 ec 14             	sub    esp,0x14
c0009134:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009138:	8b 03                	mov    eax,DWORD PTR [ebx]
c000913a:	53                   	push   ebx
c000913b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000913e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009144:	83 c4 10             	add    esp,0x10
c0009147:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000914a:	74 0f                	je     c000915b <Device::detectAll()+0x2b>
c000914c:	83 ec 0c             	sub    esp,0xc
c000914f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009152:	e8 d9 ff ff ff       	call   c0009130 <Device::detectAll()>
c0009157:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009159:	eb e9                	jmp    c0009144 <Device::detectAll()+0x14>
c000915b:	83 c4 08             	add    esp,0x8
c000915e:	5b                   	pop    ebx
c000915f:	c3                   	ret    

c0009160 <Device::disableLegacyAll()>:
c0009160:	c3                   	ret    
c0009161:	90                   	nop

c0009162 <Device::loadDriversForAll()>:
c0009162:	c3                   	ret    
c0009163:	90                   	nop

c0009164 <Device::powerSavingAll(PowerSavingLevel)>:
c0009164:	56                   	push   esi
c0009165:	53                   	push   ebx
c0009166:	83 ec 0c             	sub    esp,0xc
c0009169:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000916d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009171:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009173:	56                   	push   esi
c0009174:	53                   	push   ebx
c0009175:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009178:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000917e:	83 c4 10             	add    esp,0x10
c0009181:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009184:	74 0f                	je     c0009195 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0009186:	52                   	push   edx
c0009187:	52                   	push   edx
c0009188:	56                   	push   esi
c0009189:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000918c:	e8 d3 ff ff ff       	call   c0009164 <Device::powerSavingAll(PowerSavingLevel)>
c0009191:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009193:	eb e9                	jmp    c000917e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0009195:	58                   	pop    eax
c0009196:	5b                   	pop    ebx
c0009197:	5e                   	pop    esi
c0009198:	c3                   	ret    
c0009199:	90                   	nop

c000919a <Device::setName(char const*)>:
c000919a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00091a2:	e9 a9 74 ff ff       	jmp    c0000650 <strcpy>
c00091a7:	90                   	nop

c00091a8 <Device::Device(char const*)>:
c00091a8:	83 ec 1c             	sub    esp,0x1c
c00091ab:	ba 74 18 02 c0       	mov    edx,0xc0021874
c00091b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091b4:	89 10                	mov    DWORD PTR [eax],edx
c00091b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091ba:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00091c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091c8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00091d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091d6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00091e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091e4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00091ee:	83 ec 08             	sub    esp,0x8
c00091f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00091f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00091f9:	e8 9c ff ff ff       	call   c000919a <Device::setName(char const*)>
c00091fe:	83 c4 10             	add    esp,0x10
c0009201:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009209:	83 ec 0c             	sub    esp,0xc
c000920c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009210:	e8 bb 56 00 00       	call   c000e8d0 <malloc>
c0009215:	83 c4 10             	add    esp,0x10
c0009218:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000921e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009225:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009229:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000922f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009233:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009239:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000923f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009243:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009249:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009250:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009254:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000925b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000925f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000926a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009274:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009278:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009286:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009290:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009294:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000929e:	90                   	nop
c000929f:	83 c4 1c             	add    esp,0x1c
c00092a2:	c3                   	ret    
c00092a3:	90                   	nop

c00092a4 <Device::getName()>:
c00092a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092a8:	05 d0 00 00 00       	add    eax,0xd0
c00092ad:	c3                   	ret    

c00092ae <Device::closeAll()>:
c00092ae:	53                   	push   ebx
c00092af:	83 ec 08             	sub    esp,0x8
c00092b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00092b6:	53                   	push   ebx
c00092b7:	e8 e8 ff ff ff       	call   c00092a4 <Device::getName()>
c00092bc:	52                   	push   edx
c00092bd:	50                   	push   eax
c00092be:	68 28 18 02 c0       	push   0xc0021828
c00092c3:	e8 86 dc ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00092c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00092ca:	6a 00                	push   0x0
c00092cc:	6a 00                	push   0x0
c00092ce:	6a 00                	push   0x0
c00092d0:	53                   	push   ebx
c00092d1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00092d4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00092da:	83 c4 20             	add    esp,0x20
c00092dd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00092e0:	74 12                	je     c00092f4 <Device::closeAll()+0x46>
c00092e2:	83 ec 0c             	sub    esp,0xc
c00092e5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00092e8:	e8 c1 ff ff ff       	call   c00092ae <Device::closeAll()>
c00092ed:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00092ef:	83 c4 10             	add    esp,0x10
c00092f2:	eb e9                	jmp    c00092dd <Device::closeAll()+0x2f>
c00092f4:	83 c4 08             	add    esp,0x8
c00092f7:	5b                   	pop    ebx
c00092f8:	c3                   	ret    
c00092f9:	90                   	nop

c00092fa <DriverlessDevice::DriverlessDevice(char const*)>:
c00092fa:	83 ec 0c             	sub    esp,0xc
c00092fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009301:	83 ec 08             	sub    esp,0x8
c0009304:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009308:	50                   	push   eax
c0009309:	e8 9a fe ff ff       	call   c00091a8 <Device::Device(char const*)>
c000930e:	83 c4 10             	add    esp,0x10
c0009311:	ba a0 18 02 c0       	mov    edx,0xc00218a0
c0009316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000931a:	89 10                	mov    DWORD PTR [eax],edx
c000931c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009320:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000932a:	90                   	nop
c000932b:	83 c4 0c             	add    esp,0xc
c000932e:	c3                   	ret    
c000932f:	90                   	nop

c0009330 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009330:	57                   	push   edi
c0009331:	56                   	push   esi
c0009332:	53                   	push   ebx
c0009333:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009337:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000933b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000933f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009345:	75 0c                	jne    c0009353 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009347:	52                   	push   edx
c0009348:	52                   	push   edx
c0009349:	53                   	push   ebx
c000934a:	56                   	push   esi
c000934b:	e8 0c 6c 01 00       	call   c001ff5c <LinkedList<Device>::addElement(Device*)>
c0009350:	83 c4 10             	add    esp,0x10
c0009353:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009359:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000935c:	74 12                	je     c0009370 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000935e:	50                   	push   eax
c000935f:	57                   	push   edi
c0009360:	56                   	push   esi
c0009361:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009364:	e8 c7 ff ff ff       	call   c0009330 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009369:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	eb e9                	jmp    c0009359 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0009370:	5b                   	pop    ebx
c0009371:	5e                   	pop    esi
c0009372:	5f                   	pop    edi
c0009373:	c3                   	ret    

c0009374 <getDevicesOfType(DeviceType)>:
c0009374:	53                   	push   ebx
c0009375:	83 ec 14             	sub    esp,0x14
c0009378:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000937c:	53                   	push   ebx
c000937d:	e8 b6 6c 01 00       	call   c0020038 <LinkedList<Device>::LinkedList()>
c0009382:	83 c4 0c             	add    esp,0xc
c0009385:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009389:	53                   	push   ebx
c000938a:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c0009390:	e8 9b ff ff ff       	call   c0009330 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009395:	83 c4 18             	add    esp,0x18
c0009398:	89 d8                	mov    eax,ebx
c000939a:	5b                   	pop    ebx
c000939b:	c2 04 00             	ret    0x4
c000939e:	66 90                	xchg   ax,ax

c00093a0 <HardDiskController::HardDiskController(char const*)>:
c00093a0:	83 ec 0c             	sub    esp,0xc
c00093a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093a7:	83 ec 08             	sub    esp,0x8
c00093aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093ae:	50                   	push   eax
c00093af:	e8 f4 fd ff ff       	call   c00091a8 <Device::Device(char const*)>
c00093b4:	83 c4 10             	add    esp,0x10
c00093b7:	ba cc 18 02 c0       	mov    edx,0xc00218cc
c00093bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093c0:	89 10                	mov    DWORD PTR [eax],edx
c00093c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093c6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00093d0:	90                   	nop
c00093d1:	83 c4 0c             	add    esp,0xc
c00093d4:	c3                   	ret    
c00093d5:	90                   	nop
c00093d6:	66 90                	xchg   ax,ax

c00093d8 <HardDiskController::~HardDiskController()>:
c00093d8:	83 ec 0c             	sub    esp,0xc
c00093db:	ba cc 18 02 c0       	mov    edx,0xc00218cc
c00093e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093e4:	89 10                	mov    DWORD PTR [eax],edx
c00093e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093ea:	83 ec 0c             	sub    esp,0xc
c00093ed:	50                   	push   eax
c00093ee:	e8 55 fb ff ff       	call   c0008f48 <Device::~Device()>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	90                   	nop
c00093f7:	83 c4 0c             	add    esp,0xc
c00093fa:	c3                   	ret    
c00093fb:	90                   	nop

c00093fc <HardDiskController::~HardDiskController()>:
c00093fc:	83 ec 0c             	sub    esp,0xc
c00093ff:	83 ec 0c             	sub    esp,0xc
c0009402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009406:	e8 cd ff ff ff       	call   c00093d8 <HardDiskController::~HardDiskController()>
c000940b:	83 c4 10             	add    esp,0x10
c000940e:	83 ec 08             	sub    esp,0x8
c0009411:	68 58 01 00 00       	push   0x158
c0009416:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000941a:	e8 3c 32 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c000941f:	83 c4 10             	add    esp,0x10
c0009422:	83 c4 0c             	add    esp,0xc
c0009425:	c3                   	ret    

c0009426 <PhysicalDisk::eject()>:
c0009426:	83 c8 ff             	or     eax,0xffffffff
c0009429:	c3                   	ret    

c000942a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000942a:	83 ec 0c             	sub    esp,0xc
c000942d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009431:	83 ec 08             	sub    esp,0x8
c0009434:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009438:	50                   	push   eax
c0009439:	e8 6a fd ff ff       	call   c00091a8 <Device::Device(char const*)>
c000943e:	83 c4 10             	add    esp,0x10
c0009441:	ba f8 18 02 c0       	mov    edx,0xc00218f8
c0009446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000944a:	89 10                	mov    DWORD PTR [eax],edx
c000944c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009450:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000945b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0009462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009466:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0009470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009474:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009478:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000947e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009482:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000948c:	90                   	nop
c000948d:	83 c4 0c             	add    esp,0xc
c0009490:	c3                   	ret    
c0009491:	90                   	nop

c0009492 <PhysicalDisk::startCache()>:
c0009492:	56                   	push   esi
c0009493:	53                   	push   ebx
c0009494:	83 ec 10             	sub    esp,0x10
c0009497:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000949b:	6a 44                	push   0x44
c000949d:	e8 2e 54 00 00       	call   c000e8d0 <malloc>
c00094a2:	89 c6                	mov    esi,eax
c00094a4:	58                   	pop    eax
c00094a5:	5a                   	pop    edx
c00094a6:	53                   	push   ebx
c00094a7:	56                   	push   esi
c00094a8:	e8 0f 14 00 00       	call   c000a8bc <VCache::VCache(PhysicalDisk*)>
c00094ad:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00094b3:	83 c4 14             	add    esp,0x14
c00094b6:	5b                   	pop    ebx
c00094b7:	5e                   	pop    esi
c00094b8:	c3                   	ret    
c00094b9:	90                   	nop

c00094ba <PhysicalDisk::~PhysicalDisk()>:
c00094ba:	83 ec 0c             	sub    esp,0xc
c00094bd:	ba f8 18 02 c0       	mov    edx,0xc00218f8
c00094c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094c6:	89 10                	mov    DWORD PTR [eax],edx
c00094c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094cc:	83 ec 0c             	sub    esp,0xc
c00094cf:	50                   	push   eax
c00094d0:	e8 73 fa ff ff       	call   c0008f48 <Device::~Device()>
c00094d5:	83 c4 10             	add    esp,0x10
c00094d8:	90                   	nop
c00094d9:	83 c4 0c             	add    esp,0xc
c00094dc:	c3                   	ret    
c00094dd:	90                   	nop

c00094de <PhysicalDisk::~PhysicalDisk()>:
c00094de:	83 ec 0c             	sub    esp,0xc
c00094e1:	83 ec 0c             	sub    esp,0xc
c00094e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094e8:	e8 cd ff ff ff       	call   c00094ba <PhysicalDisk::~PhysicalDisk()>
c00094ed:	83 c4 10             	add    esp,0x10
c00094f0:	83 ec 08             	sub    esp,0x8
c00094f3:	68 6c 01 00 00       	push   0x16c
c00094f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094fc:	e8 5a 31 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c0009501:	83 c4 10             	add    esp,0x10
c0009504:	83 c4 0c             	add    esp,0xc
c0009507:	c3                   	ret    

c0009508 <startGUI(void*)>:
c0009508:	55                   	push   ebp
c0009509:	89 e5                	mov    ebp,esp
c000950b:	53                   	push   ebx
c000950c:	83 ec 04             	sub    esp,0x4
c000950f:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0009517:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000951c:	85 c0                	test   eax,eax
c000951e:	75 01                	jne    c0009521 <startGUI(void*)+0x19>
c0009520:	fb                   	sti    
c0009521:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c0009527:	83 ec 08             	sub    esp,0x8
c000952a:	6a 01                	push   0x1
c000952c:	68 28 19 02 c0       	push   0xc0021928
c0009531:	e8 c8 b3 00 00       	call   c00148fe <Thr::loadDLL(char const*, bool)>
c0009536:	83 c4 10             	add    esp,0x10
c0009539:	83 ec 08             	sub    esp,0x8
c000953c:	53                   	push   ebx
c000953d:	50                   	push   eax
c000953e:	e8 1c b6 00 00       	call   c0014b5f <Thr::executeDLL(unsigned long, void*)>
c0009543:	83 c4 10             	add    esp,0x10
c0009546:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c000954c:	83 ec 08             	sub    esp,0x8
c000954f:	6a 01                	push   0x1
c0009551:	68 42 19 02 c0       	push   0xc0021942
c0009556:	e8 a3 b3 00 00       	call   c00148fe <Thr::loadDLL(char const*, bool)>
c000955b:	83 c4 10             	add    esp,0x10
c000955e:	83 ec 08             	sub    esp,0x8
c0009561:	53                   	push   ebx
c0009562:	50                   	push   eax
c0009563:	e8 f7 b5 00 00       	call   c0014b5f <Thr::executeDLL(unsigned long, void*)>
c0009568:	83 c4 10             	add    esp,0x10
c000956b:	eb fe                	jmp    c000956b <startGUI(void*)+0x63>

c000956d <startGUIVESA(void*)>:
c000956d:	55                   	push   ebp
c000956e:	89 e5                	mov    ebp,esp
c0009570:	53                   	push   ebx
c0009571:	83 ec 04             	sub    esp,0x4
c0009574:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000957c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009581:	85 c0                	test   eax,eax
c0009583:	75 01                	jne    c0009586 <startGUIVESA(void*)+0x19>
c0009585:	fb                   	sti    
c0009586:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c000958c:	83 ec 08             	sub    esp,0x8
c000958f:	6a 01                	push   0x1
c0009591:	68 60 19 02 c0       	push   0xc0021960
c0009596:	e8 63 b3 00 00       	call   c00148fe <Thr::loadDLL(char const*, bool)>
c000959b:	83 c4 10             	add    esp,0x10
c000959e:	83 ec 08             	sub    esp,0x8
c00095a1:	53                   	push   ebx
c00095a2:	50                   	push   eax
c00095a3:	e8 b7 b5 00 00       	call   c0014b5f <Thr::executeDLL(unsigned long, void*)>
c00095a8:	83 c4 10             	add    esp,0x10
c00095ab:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c00095b1:	83 ec 08             	sub    esp,0x8
c00095b4:	6a 01                	push   0x1
c00095b6:	68 42 19 02 c0       	push   0xc0021942
c00095bb:	e8 3e b3 00 00       	call   c00148fe <Thr::loadDLL(char const*, bool)>
c00095c0:	83 c4 10             	add    esp,0x10
c00095c3:	83 ec 08             	sub    esp,0x8
c00095c6:	53                   	push   ebx
c00095c7:	50                   	push   eax
c00095c8:	e8 92 b5 00 00       	call   c0014b5f <Thr::executeDLL(unsigned long, void*)>
c00095cd:	83 c4 10             	add    esp,0x10
c00095d0:	eb fe                	jmp    c00095d0 <startGUIVESA(void*)+0x63>

c00095d2 <sendKeyToTerminal(unsigned char)>:
c00095d2:	55                   	push   ebp
c00095d3:	89 e5                	mov    ebp,esp
c00095d5:	83 ec 28             	sub    esp,0x28
c00095d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00095db:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00095de:	a1 34 be 02 c0       	mov    eax,ds:0xc002be34
c00095e3:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00095e7:	83 ec 08             	sub    esp,0x8
c00095ea:	52                   	push   edx
c00095eb:	50                   	push   eax
c00095ec:	e8 a5 80 00 00       	call   c0011696 <VgaText::receiveKey(unsigned char)>
c00095f1:	83 c4 10             	add    esp,0x10
c00095f4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00095f8:	83 f8 0a             	cmp    eax,0xa
c00095fb:	74 16                	je     c0009613 <sendKeyToTerminal(unsigned char)+0x41>
c00095fd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009601:	83 f8 03             	cmp    eax,0x3
c0009604:	74 0d                	je     c0009613 <sendKeyToTerminal(unsigned char)+0x41>
c0009606:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000960a:	83 f8 1c             	cmp    eax,0x1c
c000960d:	0f 85 92 00 00 00    	jne    c00096a5 <sendKeyToTerminal(unsigned char)+0xd3>
c0009613:	fa                   	cli    
c0009614:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009619:	83 c0 01             	add    eax,0x1
c000961c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0009621:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0009626:	83 c0 01             	add    eax,0x1
c0009629:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000962e:	a1 20 93 02 c0       	mov    eax,ds:0xc0029320
c0009633:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009636:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c0009640:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009644:	74 1f                	je     c0009665 <sendKeyToTerminal(unsigned char)+0x93>
c0009646:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009649:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000964c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000964f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009652:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009655:	83 ec 0c             	sub    esp,0xc
c0009658:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000965b:	e8 8c c0 00 00       	call   c00156ec <unblockTask(ThreadControlBlock*)>
c0009660:	83 c4 10             	add    esp,0x10
c0009663:	eb db                	jmp    c0009640 <sendKeyToTerminal(unsigned char)+0x6e>
c0009665:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000966a:	83 e8 01             	sub    eax,0x1
c000966d:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0009672:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0009677:	85 c0                	test   eax,eax
c0009679:	75 18                	jne    c0009693 <sendKeyToTerminal(unsigned char)+0xc1>
c000967b:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0009680:	85 c0                	test   eax,eax
c0009682:	74 0f                	je     c0009693 <sendKeyToTerminal(unsigned char)+0xc1>
c0009684:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000968e:	e8 59 bd 00 00       	call   c00153ec <schedule()>
c0009693:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000969b:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00096a0:	85 c0                	test   eax,eax
c00096a2:	75 01                	jne    c00096a5 <sendKeyToTerminal(unsigned char)+0xd3>
c00096a4:	fb                   	sti    
c00096a5:	90                   	nop
c00096a6:	c9                   	leave  
c00096a7:	c3                   	ret    

c00096a8 <sendKeyboardToken(KeyboardToken)>:
c00096a8:	55                   	push   ebp
c00096a9:	89 e5                	mov    ebp,esp
c00096ab:	83 ec 18             	sub    esp,0x18
c00096ae:	e8 7f 5e 00 00       	call   c000f532 <KeUserIOReceived()>
c00096b3:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00096b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096b9:	0f b7 c0             	movzx  eax,ax
c00096bc:	83 f2 01             	xor    edx,0x1
c00096bf:	88 90 40 93 02 c0    	mov    BYTE PTR [eax-0x3ffd6cc0],dl
c00096c5:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c00096ca:	85 c0                	test   eax,eax
c00096cc:	74 24                	je     c00096f2 <sendKeyboardToken(KeyboardToken)+0x4a>
c00096ce:	8b 15 28 93 02 c0    	mov    edx,DWORD PTR ds:0xc0029328
c00096d4:	83 ec 04             	sub    esp,0x4
c00096d7:	68 40 93 02 c0       	push   0xc0029340
c00096dc:	83 ec 08             	sub    esp,0x8
c00096df:	89 e0                	mov    eax,esp
c00096e1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00096e4:	89 08                	mov    DWORD PTR [eax],ecx
c00096e6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00096e9:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c00096ed:	ff d2                	call   edx
c00096ef:	83 c4 10             	add    esp,0x10
c00096f2:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00096f6:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00096f9:	0f b6 c0             	movzx  eax,al
c00096fc:	85 c0                	test   eax,eax
c00096fe:	0f 84 da 00 00 00    	je     c00097de <sendKeyboardToken(KeyboardToken)+0x136>
c0009704:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009707:	0f b7 c0             	movzx  eax,ax
c000970a:	3d 18 03 00 00       	cmp    eax,0x318
c000970f:	75 06                	jne    c0009717 <sendKeyboardToken(KeyboardToken)+0x6f>
c0009711:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0009717:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000971a:	0f b7 c0             	movzx  eax,ax
c000971d:	3d 19 03 00 00       	cmp    eax,0x319
c0009722:	75 06                	jne    c000972a <sendKeyboardToken(KeyboardToken)+0x82>
c0009724:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000972a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000972d:	0f b7 c0             	movzx  eax,ax
c0009730:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009735:	75 06                	jne    c000973d <sendKeyboardToken(KeyboardToken)+0x95>
c0009737:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000973d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009740:	0f b7 c0             	movzx  eax,ax
c0009743:	3d 1b 03 00 00       	cmp    eax,0x31b
c0009748:	75 06                	jne    c0009750 <sendKeyboardToken(KeyboardToken)+0xa8>
c000974a:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0009750:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009753:	0f b7 c0             	movzx  eax,ax
c0009756:	3d 1c 03 00 00       	cmp    eax,0x31c
c000975b:	75 06                	jne    c0009763 <sendKeyboardToken(KeyboardToken)+0xbb>
c000975d:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0009763:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009766:	0f b7 c0             	movzx  eax,ax
c0009769:	3d 1d 03 00 00       	cmp    eax,0x31d
c000976e:	75 06                	jne    c0009776 <sendKeyboardToken(KeyboardToken)+0xce>
c0009770:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0009776:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009779:	0f b7 c0             	movzx  eax,ax
c000977c:	3d 1e 03 00 00       	cmp    eax,0x31e
c0009781:	75 06                	jne    c0009789 <sendKeyboardToken(KeyboardToken)+0xe1>
c0009783:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0009789:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000978c:	0f b7 c0             	movzx  eax,ax
c000978f:	3d 1f 03 00 00       	cmp    eax,0x31f
c0009794:	75 06                	jne    c000979c <sendKeyboardToken(KeyboardToken)+0xf4>
c0009796:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000979c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000979f:	0f b7 c0             	movzx  eax,ax
c00097a2:	3d 20 03 00 00       	cmp    eax,0x320
c00097a7:	75 06                	jne    c00097af <sendKeyboardToken(KeyboardToken)+0x107>
c00097a9:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00097af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097b2:	0f b7 c0             	movzx  eax,ax
c00097b5:	3d 21 03 00 00       	cmp    eax,0x321
c00097ba:	75 06                	jne    c00097c2 <sendKeyboardToken(KeyboardToken)+0x11a>
c00097bc:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00097c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097c5:	0f b7 c0             	movzx  eax,ax
c00097c8:	3d 22 03 00 00       	cmp    eax,0x322
c00097cd:	0f 85 f1 00 00 00    	jne    c00098c4 <sendKeyboardToken(KeyboardToken)+0x21c>
c00097d3:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00097d9:	e9 e6 00 00 00       	jmp    c00098c4 <sendKeyboardToken(KeyboardToken)+0x21c>
c00097de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097e1:	0f b7 c0             	movzx  eax,ax
c00097e4:	3d 18 03 00 00       	cmp    eax,0x318
c00097e9:	75 0a                	jne    c00097f5 <sendKeyboardToken(KeyboardToken)+0x14d>
c00097eb:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00097f1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00097f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097f8:	0f b7 c0             	movzx  eax,ax
c00097fb:	3d 19 03 00 00       	cmp    eax,0x319
c0009800:	75 0a                	jne    c000980c <sendKeyboardToken(KeyboardToken)+0x164>
c0009802:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0009808:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000980c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000980f:	0f b7 c0             	movzx  eax,ax
c0009812:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009817:	75 0a                	jne    c0009823 <sendKeyboardToken(KeyboardToken)+0x17b>
c0009819:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000981f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009823:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009826:	0f b7 c0             	movzx  eax,ax
c0009829:	3d 1b 03 00 00       	cmp    eax,0x31b
c000982e:	75 0a                	jne    c000983a <sendKeyboardToken(KeyboardToken)+0x192>
c0009830:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0009836:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000983a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000983d:	0f b7 c0             	movzx  eax,ax
c0009840:	3d 1c 03 00 00       	cmp    eax,0x31c
c0009845:	75 0a                	jne    c0009851 <sendKeyboardToken(KeyboardToken)+0x1a9>
c0009847:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000984d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009851:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009854:	0f b7 c0             	movzx  eax,ax
c0009857:	3d 1d 03 00 00       	cmp    eax,0x31d
c000985c:	75 0a                	jne    c0009868 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000985e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0009864:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009868:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000986b:	0f b7 c0             	movzx  eax,ax
c000986e:	3d 1e 03 00 00       	cmp    eax,0x31e
c0009873:	75 0a                	jne    c000987f <sendKeyboardToken(KeyboardToken)+0x1d7>
c0009875:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000987b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000987f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009882:	0f b7 c0             	movzx  eax,ax
c0009885:	3d 1f 03 00 00       	cmp    eax,0x31f
c000988a:	75 0a                	jne    c0009896 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000988c:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0009892:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009896:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009899:	0f b7 c0             	movzx  eax,ax
c000989c:	3d 20 03 00 00       	cmp    eax,0x320
c00098a1:	75 0a                	jne    c00098ad <sendKeyboardToken(KeyboardToken)+0x205>
c00098a3:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00098a9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098b0:	0f b7 c0             	movzx  eax,ax
c00098b3:	3d 21 03 00 00       	cmp    eax,0x321
c00098b8:	75 0a                	jne    c00098c4 <sendKeyboardToken(KeyboardToken)+0x21c>
c00098ba:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00098c0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098c7:	0f b7 c0             	movzx  eax,ax
c00098ca:	3d 00 02 00 00       	cmp    eax,0x200
c00098cf:	75 2f                	jne    c0009900 <sendKeyboardToken(KeyboardToken)+0x258>
c00098d1:	a0 40 97 02 c0       	mov    al,ds:0xc0029740
c00098d6:	83 f0 01             	xor    eax,0x1
c00098d9:	0f b6 c0             	movzx  eax,al
c00098dc:	85 c0                	test   eax,eax
c00098de:	74 20                	je     c0009900 <sendKeyboardToken(KeyboardToken)+0x258>
c00098e0:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c00098e5:	6a 01                	push   0x1
c00098e7:	6a 00                	push   0x0
c00098e9:	68 08 95 00 c0       	push   0xc0009508
c00098ee:	50                   	push   eax
c00098ef:	e8 ac b8 00 00       	call   c00151a0 <Process::createThread(void (*)(void*), void*, int)>
c00098f4:	83 c4 10             	add    esp,0x10
c00098f7:	c6 05 40 97 02 c0 01 	mov    BYTE PTR ds:0xc0029740,0x1
c00098fe:	eb 3a                	jmp    c000993a <sendKeyboardToken(KeyboardToken)+0x292>
c0009900:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009903:	0f b7 c0             	movzx  eax,ax
c0009906:	3d 01 02 00 00       	cmp    eax,0x201
c000990b:	75 2d                	jne    c000993a <sendKeyboardToken(KeyboardToken)+0x292>
c000990d:	a0 40 97 02 c0       	mov    al,ds:0xc0029740
c0009912:	83 f0 01             	xor    eax,0x1
c0009915:	0f b6 c0             	movzx  eax,al
c0009918:	85 c0                	test   eax,eax
c000991a:	74 1e                	je     c000993a <sendKeyboardToken(KeyboardToken)+0x292>
c000991c:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0009921:	6a 01                	push   0x1
c0009923:	6a 00                	push   0x0
c0009925:	68 6d 95 00 c0       	push   0xc000956d
c000992a:	50                   	push   eax
c000992b:	e8 70 b8 00 00       	call   c00151a0 <Process::createThread(void (*)(void*), void*, int)>
c0009930:	83 c4 10             	add    esp,0x10
c0009933:	c6 05 40 97 02 c0 01 	mov    BYTE PTR ds:0xc0029740,0x1
c000993a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000993d:	0f b7 c0             	movzx  eax,ax
c0009940:	3d 25 03 00 00       	cmp    eax,0x325
c0009945:	75 06                	jne    c000994d <sendKeyboardToken(KeyboardToken)+0x2a5>
c0009947:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000994d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009950:	0f b7 c0             	movzx  eax,ax
c0009953:	3d 24 03 00 00       	cmp    eax,0x324
c0009958:	75 06                	jne    c0009960 <sendKeyboardToken(KeyboardToken)+0x2b8>
c000995a:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0009960:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009963:	0f b7 c0             	movzx  eax,ax
c0009966:	3d 23 03 00 00       	cmp    eax,0x323
c000996b:	75 06                	jne    c0009973 <sendKeyboardToken(KeyboardToken)+0x2cb>
c000996d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0009973:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009976:	0f b7 c0             	movzx  eax,ax
c0009979:	3d 26 03 00 00       	cmp    eax,0x326
c000997e:	75 06                	jne    c0009986 <sendKeyboardToken(KeyboardToken)+0x2de>
c0009980:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0009986:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009989:	0f b7 c0             	movzx  eax,ax
c000998c:	3d 27 03 00 00       	cmp    eax,0x327
c0009991:	75 06                	jne    c0009999 <sendKeyboardToken(KeyboardToken)+0x2f1>
c0009993:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0009999:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000999c:	0f b7 c0             	movzx  eax,ax
c000999f:	3d 22 03 00 00       	cmp    eax,0x322
c00099a4:	75 06                	jne    c00099ac <sendKeyboardToken(KeyboardToken)+0x304>
c00099a6:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00099ac:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00099b0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00099b3:	83 f0 01             	xor    eax,0x1
c00099b6:	0f b6 c0             	movzx  eax,al
c00099b9:	85 c0                	test   eax,eax
c00099bb:	74 7c                	je     c0009a39 <sendKeyboardToken(KeyboardToken)+0x391>
c00099bd:	a0 41 94 02 c0       	mov    al,ds:0xc0029441
c00099c2:	0f b6 c0             	movzx  eax,al
c00099c5:	85 c0                	test   eax,eax
c00099c7:	74 43                	je     c0009a0c <sendKeyboardToken(KeyboardToken)+0x364>
c00099c9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00099cd:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c00099d1:	85 c0                	test   eax,eax
c00099d3:	74 2b                	je     c0009a00 <sendKeyboardToken(KeyboardToken)+0x358>
c00099d5:	8b 15 44 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029744
c00099db:	89 d0                	mov    eax,edx
c00099dd:	c1 e0 02             	shl    eax,0x2
c00099e0:	01 d0                	add    eax,edx
c00099e2:	d1 e0                	shl    eax,1
c00099e4:	a3 44 97 02 c0       	mov    ds:0xc0029744,eax
c00099e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099ec:	0f b7 c0             	movzx  eax,ax
c00099ef:	8d 50 d0             	lea    edx,[eax-0x30]
c00099f2:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c00099f7:	01 d0                	add    eax,edx
c00099f9:	a3 44 97 02 c0       	mov    ds:0xc0029744,eax
c00099fe:	eb 71                	jmp    c0009a71 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a00:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c0009a0a:	eb 65                	jmp    c0009a71 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a0c:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a11:	85 c0                	test   eax,eax
c0009a13:	74 18                	je     c0009a2d <sendKeyboardToken(KeyboardToken)+0x385>
c0009a15:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a1a:	0f b6 c0             	movzx  eax,al
c0009a1d:	83 ec 0c             	sub    esp,0xc
c0009a20:	50                   	push   eax
c0009a21:	e8 ac fb ff ff       	call   c00095d2 <sendKeyToTerminal(unsigned char)>
c0009a26:	83 c4 10             	add    esp,0x10
c0009a29:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a2d:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c0009a37:	eb 38                	jmp    c0009a71 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a3c:	0f b7 c0             	movzx  eax,ax
c0009a3f:	3d 01 01 00 00       	cmp    eax,0x101
c0009a44:	75 2b                	jne    c0009a71 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a46:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a4b:	85 c0                	test   eax,eax
c0009a4d:	74 18                	je     c0009a67 <sendKeyboardToken(KeyboardToken)+0x3bf>
c0009a4f:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a54:	0f b6 c0             	movzx  eax,al
c0009a57:	83 ec 0c             	sub    esp,0xc
c0009a5a:	50                   	push   eax
c0009a5b:	e8 72 fb ff ff       	call   c00095d2 <sendKeyToTerminal(unsigned char)>
c0009a60:	83 c4 10             	add    esp,0x10
c0009a63:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a67:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c0009a71:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009a74:	83 f0 01             	xor    eax,0x1
c0009a77:	0f b6 c0             	movzx  eax,al
c0009a7a:	85 c0                	test   eax,eax
c0009a7c:	74 5a                	je     c0009ad8 <sendKeyboardToken(KeyboardToken)+0x430>
c0009a7e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009a81:	83 f0 01             	xor    eax,0x1
c0009a84:	0f b6 c0             	movzx  eax,al
c0009a87:	85 c0                	test   eax,eax
c0009a89:	74 4d                	je     c0009ad8 <sendKeyboardToken(KeyboardToken)+0x430>
c0009a8b:	a0 40 94 02 c0       	mov    al,ds:0xc0029440
c0009a90:	83 f0 01             	xor    eax,0x1
c0009a93:	0f b6 c0             	movzx  eax,al
c0009a96:	85 c0                	test   eax,eax
c0009a98:	74 3e                	je     c0009ad8 <sendKeyboardToken(KeyboardToken)+0x430>
c0009a9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a9d:	0f b7 c0             	movzx  eax,ax
c0009aa0:	83 f8 1f             	cmp    eax,0x1f
c0009aa3:	76 0b                	jbe    c0009ab0 <sendKeyboardToken(KeyboardToken)+0x408>
c0009aa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009aa8:	0f b7 c0             	movzx  eax,ax
c0009aab:	83 f8 7e             	cmp    eax,0x7e
c0009aae:	76 16                	jbe    c0009ac6 <sendKeyboardToken(KeyboardToken)+0x41e>
c0009ab0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ab3:	0f b7 c0             	movzx  eax,ax
c0009ab6:	83 f8 0a             	cmp    eax,0xa
c0009ab9:	74 0b                	je     c0009ac6 <sendKeyboardToken(KeyboardToken)+0x41e>
c0009abb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009abe:	0f b7 c0             	movzx  eax,ax
c0009ac1:	83 f8 08             	cmp    eax,0x8
c0009ac4:	75 12                	jne    c0009ad8 <sendKeyboardToken(KeyboardToken)+0x430>
c0009ac6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ac9:	0f b6 c0             	movzx  eax,al
c0009acc:	83 ec 0c             	sub    esp,0xc
c0009acf:	50                   	push   eax
c0009ad0:	e8 fd fa ff ff       	call   c00095d2 <sendKeyToTerminal(unsigned char)>
c0009ad5:	83 c4 10             	add    esp,0x10
c0009ad8:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009adb:	83 f0 01             	xor    eax,0x1
c0009ade:	0f b6 c0             	movzx  eax,al
c0009ae1:	85 c0                	test   eax,eax
c0009ae3:	74 5d                	je     c0009b42 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009ae5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009ae8:	83 f0 01             	xor    eax,0x1
c0009aeb:	0f b6 c0             	movzx  eax,al
c0009aee:	85 c0                	test   eax,eax
c0009af0:	74 50                	je     c0009b42 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009af2:	a0 40 94 02 c0       	mov    al,ds:0xc0029440
c0009af7:	0f b6 c0             	movzx  eax,al
c0009afa:	85 c0                	test   eax,eax
c0009afc:	74 44                	je     c0009b42 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009afe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b01:	0f b7 c0             	movzx  eax,ax
c0009b04:	83 f8 3f             	cmp    eax,0x3f
c0009b07:	76 39                	jbe    c0009b42 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b0c:	0f b7 c0             	movzx  eax,ax
c0009b0f:	83 f8 7f             	cmp    eax,0x7f
c0009b12:	77 2e                	ja     c0009b42 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b17:	88 c2                	mov    dl,al
c0009b19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b1c:	0f b7 c0             	movzx  eax,ax
c0009b1f:	83 f8 5f             	cmp    eax,0x5f
c0009b22:	76 04                	jbe    c0009b28 <sendKeyboardToken(KeyboardToken)+0x480>
c0009b24:	b0 20                	mov    al,0x20
c0009b26:	eb 02                	jmp    c0009b2a <sendKeyboardToken(KeyboardToken)+0x482>
c0009b28:	b0 00                	mov    al,0x0
c0009b2a:	89 d1                	mov    ecx,edx
c0009b2c:	29 c1                	sub    ecx,eax
c0009b2e:	89 c8                	mov    eax,ecx
c0009b30:	83 e8 40             	sub    eax,0x40
c0009b33:	0f b6 c0             	movzx  eax,al
c0009b36:	83 ec 0c             	sub    esp,0xc
c0009b39:	50                   	push   eax
c0009b3a:	e8 93 fa ff ff       	call   c00095d2 <sendKeyToTerminal(unsigned char)>
c0009b3f:	83 c4 10             	add    esp,0x10
c0009b42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b45:	0f b7 c0             	movzx  eax,ax
c0009b48:	3d 00 03 00 00       	cmp    eax,0x300
c0009b4d:	75 12                	jne    c0009b61 <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009b4f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009b52:	83 f0 01             	xor    eax,0x1
c0009b55:	0f b6 c0             	movzx  eax,al
c0009b58:	85 c0                	test   eax,eax
c0009b5a:	74 05                	je     c0009b61 <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009b5c:	e8 92 72 00 00       	call   c0010df3 <doTerminalCycle()>
c0009b61:	90                   	nop
c0009b62:	c9                   	leave  
c0009b63:	c3                   	ret    

c0009b64 <clearInternalKeybuffer(VgaText*)>:
c0009b64:	55                   	push   ebp
c0009b65:	89 e5                	mov    ebp,esp
c0009b67:	83 ec 08             	sub    esp,0x8
c0009b6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b6d:	05 02 01 00 00       	add    eax,0x102
c0009b72:	83 ec 0c             	sub    esp,0xc
c0009b75:	50                   	push   eax
c0009b76:	e8 05 6a ff ff       	call   c0000580 <strlen>
c0009b7b:	83 c4 10             	add    esp,0x10
c0009b7e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009b81:	81 c2 02 01 00 00    	add    edx,0x102
c0009b87:	83 ec 04             	sub    esp,0x4
c0009b8a:	50                   	push   eax
c0009b8b:	6a 00                	push   0x0
c0009b8d:	52                   	push   edx
c0009b8e:	e8 5d 69 ff ff       	call   c00004f0 <memset>
c0009b93:	83 c4 10             	add    esp,0x10
c0009b96:	90                   	nop
c0009b97:	c9                   	leave  
c0009b98:	c3                   	ret    

c0009b99 <readKeyboard(VgaText*, char*, unsigned long)>:
c0009b99:	55                   	push   ebp
c0009b9a:	89 e5                	mov    ebp,esp
c0009b9c:	83 ec 18             	sub    esp,0x18
c0009b9f:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0009ba4:	85 c0                	test   eax,eax
c0009ba6:	74 2a                	je     c0009bd2 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0009ba8:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0009bae:	8b 15 28 93 02 c0    	mov    edx,DWORD PTR ds:0xc0029328
c0009bb4:	83 ec 04             	sub    esp,0x4
c0009bb7:	68 40 93 02 c0       	push   0xc0029340
c0009bbc:	83 ec 08             	sub    esp,0x8
c0009bbf:	89 e0                	mov    eax,esp
c0009bc1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0009bc4:	89 08                	mov    DWORD PTR [eax],ecx
c0009bc6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009bc9:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c0009bcd:	ff d2                	call   edx
c0009bcf:	83 c4 10             	add    esp,0x10
c0009bd2:	a0 2d 93 02 c0       	mov    al,ds:0xc002932d
c0009bd7:	0f b6 c0             	movzx  eax,al
c0009bda:	85 c0                	test   eax,eax
c0009bdc:	74 07                	je     c0009be5 <readKeyboard(VgaText*, char*, unsigned long)+0x4c>
c0009bde:	c6 05 2c 93 02 c0 01 	mov    BYTE PTR ds:0xc002932c,0x1
c0009be5:	fb                   	sti    
c0009be6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009bed:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0009bf1:	0f 84 2a 01 00 00    	je     c0009d21 <readKeyboard(VgaText*, char*, unsigned long)+0x188>
c0009bf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009bfa:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c00:	0f be c0             	movsx  eax,al
c0009c03:	85 c0                	test   eax,eax
c0009c05:	75 27                	jne    c0009c2e <readKeyboard(VgaText*, char*, unsigned long)+0x95>
c0009c07:	fa                   	cli    
c0009c08:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009c0d:	83 c0 01             	add    eax,0x1
c0009c10:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0009c15:	e8 d2 b7 00 00       	call   c00153ec <schedule()>
c0009c1a:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0009c22:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009c27:	85 c0                	test   eax,eax
c0009c29:	75 cc                	jne    c0009bf7 <readKeyboard(VgaText*, char*, unsigned long)+0x5e>
c0009c2b:	fb                   	sti    
c0009c2c:	eb c9                	jmp    c0009bf7 <readKeyboard(VgaText*, char*, unsigned long)+0x5e>
c0009c2e:	a0 2c 93 02 c0       	mov    al,ds:0xc002932c
c0009c33:	0f b6 c0             	movzx  eax,al
c0009c36:	85 c0                	test   eax,eax
c0009c38:	74 0a                	je     c0009c44 <readKeyboard(VgaText*, char*, unsigned long)+0xab>
c0009c3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c3d:	c6 80 02 01 00 00 0a 	mov    BYTE PTR [eax+0x102],0xa
c0009c44:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009c47:	8d 50 01             	lea    edx,[eax+0x1]
c0009c4a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0009c4d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009c50:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c0009c56:	88 10                	mov    BYTE PTR [eax],dl
c0009c58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c5b:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c61:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0009c64:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009c68:	83 f8 03             	cmp    eax,0x3
c0009c6b:	75 1e                	jne    c0009c8b <readKeyboard(VgaText*, char*, unsigned long)+0xf2>
c0009c6d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c74:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c77:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009c7d:	83 ec 08             	sub    esp,0x8
c0009c80:	6a 02                	push   0x2
c0009c82:	50                   	push   eax
c0009c83:	e8 c0 60 00 00       	call   c000fd48 <KeRaiseSignal(SigHandlerBlock*, int)>
c0009c88:	83 c4 10             	add    esp,0x10
c0009c8b:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009c8f:	83 f8 1c             	cmp    eax,0x1c
c0009c92:	75 1e                	jne    c0009cb2 <readKeyboard(VgaText*, char*, unsigned long)+0x119>
c0009c94:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c99:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c9b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c9e:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009ca4:	83 ec 08             	sub    esp,0x8
c0009ca7:	6a 09                	push   0x9
c0009ca9:	50                   	push   eax
c0009caa:	e8 99 60 00 00       	call   c000fd48 <KeRaiseSignal(SigHandlerBlock*, int)>
c0009caf:	83 c4 10             	add    esp,0x10
c0009cb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009cb5:	05 02 01 00 00       	add    eax,0x102
c0009cba:	83 ec 0c             	sub    esp,0xc
c0009cbd:	50                   	push   eax
c0009cbe:	e8 bd 68 ff ff       	call   c0000580 <strlen>
c0009cc3:	83 c4 10             	add    esp,0x10
c0009cc6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009cc9:	81 c2 02 01 00 00    	add    edx,0x102
c0009ccf:	8d 4a 01             	lea    ecx,[edx+0x1]
c0009cd2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009cd5:	81 c2 02 01 00 00    	add    edx,0x102
c0009cdb:	83 ec 04             	sub    esp,0x4
c0009cde:	50                   	push   eax
c0009cdf:	51                   	push   ecx
c0009ce0:	52                   	push   edx
c0009ce1:	e8 ea 66 ff ff       	call   c00003d0 <memmove>
c0009ce6:	83 c4 10             	add    esp,0x10
c0009ce9:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c0009ced:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009cf1:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009cf5:	83 f8 0a             	cmp    eax,0xa
c0009cf8:	74 22                	je     c0009d1c <readKeyboard(VgaText*, char*, unsigned long)+0x183>
c0009cfa:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009cfe:	83 f8 03             	cmp    eax,0x3
c0009d01:	74 19                	je     c0009d1c <readKeyboard(VgaText*, char*, unsigned long)+0x183>
c0009d03:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009d07:	83 f8 1c             	cmp    eax,0x1c
c0009d0a:	74 10                	je     c0009d1c <readKeyboard(VgaText*, char*, unsigned long)+0x183>
c0009d0c:	a0 2d 93 02 c0       	mov    al,ds:0xc002932d
c0009d11:	0f b6 c0             	movzx  eax,al
c0009d14:	85 c0                	test   eax,eax
c0009d16:	0f 84 d1 fe ff ff    	je     c0009bed <readKeyboard(VgaText*, char*, unsigned long)+0x54>
c0009d1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d1f:	eb 03                	jmp    c0009d24 <readKeyboard(VgaText*, char*, unsigned long)+0x18b>
c0009d21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d24:	c9                   	leave  
c0009d25:	c3                   	ret    

c0009d26 <Keyboard::Keyboard(char const*)>:
c0009d26:	83 ec 0c             	sub    esp,0xc
c0009d29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d2d:	83 ec 08             	sub    esp,0x8
c0009d30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d34:	50                   	push   eax
c0009d35:	e8 6e f4 ff ff       	call   c00091a8 <Device::Device(char const*)>
c0009d3a:	83 c4 10             	add    esp,0x10
c0009d3d:	ba 84 19 02 c0       	mov    edx,0xc0021984
c0009d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d46:	89 10                	mov    DWORD PTR [eax],edx
c0009d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d4c:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0009d56:	c6 05 24 93 02 c0 01 	mov    BYTE PTR ds:0xc0029324,0x1
c0009d5d:	90                   	nop
c0009d5e:	83 c4 0c             	add    esp,0xc
c0009d61:	c3                   	ret    

c0009d62 <Keyboard::~Keyboard()>:
c0009d62:	83 ec 0c             	sub    esp,0xc
c0009d65:	ba 84 19 02 c0       	mov    edx,0xc0021984
c0009d6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d6e:	89 10                	mov    DWORD PTR [eax],edx
c0009d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d74:	83 ec 0c             	sub    esp,0xc
c0009d77:	50                   	push   eax
c0009d78:	e8 cb f1 ff ff       	call   c0008f48 <Device::~Device()>
c0009d7d:	83 c4 10             	add    esp,0x10
c0009d80:	90                   	nop
c0009d81:	83 c4 0c             	add    esp,0xc
c0009d84:	c3                   	ret    
c0009d85:	90                   	nop

c0009d86 <Keyboard::~Keyboard()>:
c0009d86:	83 ec 0c             	sub    esp,0xc
c0009d89:	83 ec 0c             	sub    esp,0xc
c0009d8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d90:	e8 cd ff ff ff       	call   c0009d62 <Keyboard::~Keyboard()>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	83 ec 08             	sub    esp,0x8
c0009d9b:	68 5c 01 00 00       	push   0x15c
c0009da0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009da4:	e8 b2 28 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c0009da9:	83 c4 10             	add    esp,0x10
c0009dac:	83 c4 0c             	add    esp,0xc
c0009daf:	c3                   	ret    

c0009db0 <LogicalDisk::close(int, int, void*)>:
c0009db0:	83 c8 ff             	or     eax,0xffffffff
c0009db3:	c3                   	ret    

c0009db4 <LogicalDisk::~LogicalDisk()>:
c0009db4:	83 ec 0c             	sub    esp,0xc
c0009db7:	ba fc 19 02 c0       	mov    edx,0xc00219fc
c0009dbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dc0:	89 10                	mov    DWORD PTR [eax],edx
c0009dc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dc6:	83 ec 0c             	sub    esp,0xc
c0009dc9:	50                   	push   eax
c0009dca:	e8 79 f1 ff ff       	call   c0008f48 <Device::~Device()>
c0009dcf:	83 c4 10             	add    esp,0x10
c0009dd2:	90                   	nop
c0009dd3:	83 c4 0c             	add    esp,0xc
c0009dd6:	c3                   	ret    
c0009dd7:	90                   	nop

c0009dd8 <LogicalDisk::~LogicalDisk()>:
c0009dd8:	83 ec 0c             	sub    esp,0xc
c0009ddb:	83 ec 0c             	sub    esp,0xc
c0009dde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009de2:	e8 cd ff ff ff       	call   c0009db4 <LogicalDisk::~LogicalDisk()>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	83 ec 08             	sub    esp,0x8
c0009ded:	68 78 01 00 00       	push   0x178
c0009df2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009df6:	e8 60 28 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c0009dfb:	83 c4 10             	add    esp,0x10
c0009dfe:	83 c4 0c             	add    esp,0xc
c0009e01:	c3                   	ret    

c0009e02 <LogicalDisk::open(int, int, void*)>:
c0009e02:	83 ec 18             	sub    esp,0x18
c0009e05:	68 b0 19 02 c0       	push   0xc00219b0
c0009e0a:	e8 07 4e 00 00       	call   c000ec16 <KePanic(char const*)>
c0009e0f:	83 c8 ff             	or     eax,0xffffffff
c0009e12:	83 c4 1c             	add    esp,0x1c
c0009e15:	c3                   	ret    

c0009e16 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0009e16:	53                   	push   ebx
c0009e17:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009e1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e1f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009e23:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0009e29:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0009e2f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0009e35:	77 10                	ja     c0009e47 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0009e37:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0009e3d:	89 d3                	mov    ebx,edx
c0009e3f:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0009e45:	72 05                	jb     c0009e4c <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0009e47:	83 c8 ff             	or     eax,0xffffffff
c0009e4a:	89 c2                	mov    edx,eax
c0009e4c:	5b                   	pop    ebx
c0009e4d:	c3                   	ret    

c0009e4e <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0009e4e:	56                   	push   esi
c0009e4f:	83 c8 ff             	or     eax,0xffffffff
c0009e52:	53                   	push   ebx
c0009e53:	89 c2                	mov    edx,eax
c0009e55:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009e59:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0009e5d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009e61:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0009e67:	77 27                	ja     c0009e90 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e69:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0009e6f:	89 d8                	mov    eax,ebx
c0009e71:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0009e77:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009e7c:	89 c2                	mov    edx,eax
c0009e7e:	73 10                	jae    c0009e90 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e80:	89 c8                	mov    eax,ecx
c0009e82:	89 da                	mov    edx,ebx
c0009e84:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0009e8a:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0009e90:	5b                   	pop    ebx
c0009e91:	5e                   	pop    esi
c0009e92:	c3                   	ret    
c0009e93:	90                   	nop

c0009e94 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0009e94:	83 ec 1c             	sub    esp,0x1c
c0009e97:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009e9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ea3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ea7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009eab:	89 04 24             	mov    DWORD PTR [esp],eax
c0009eae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009eb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009eba:	83 ec 08             	sub    esp,0x8
c0009ebd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec1:	50                   	push   eax
c0009ec2:	e8 e1 f2 ff ff       	call   c00091a8 <Device::Device(char const*)>
c0009ec7:	83 c4 10             	add    esp,0x10
c0009eca:	ba fc 19 02 c0       	mov    edx,0xc00219fc
c0009ecf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ed3:	89 10                	mov    DWORD PTR [eax],edx
c0009ed5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ed9:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009ee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ee4:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0009eeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009eef:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009ef6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009efa:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0009f04:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009f08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f0c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f10:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0009f16:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0009f1c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009f20:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009f23:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009f27:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0009f2d:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0009f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f37:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009f3b:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0009f41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f45:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c0009f4f:	90                   	nop
c0009f50:	83 c4 1c             	add    esp,0x1c
c0009f53:	c3                   	ret    

c0009f54 <LogicalDisk::assignDriveLetter()>:
c0009f54:	55                   	push   ebp
c0009f55:	57                   	push   edi
c0009f56:	56                   	push   esi
c0009f57:	53                   	push   ebx
c0009f58:	83 ec 14             	sub    esp,0x14
c0009f5b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f5f:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0009f65:	b0 41                	mov    al,0x41
c0009f67:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c0009f6d:	84 d2                	test   dl,dl
c0009f6f:	75 02                	jne    c0009f73 <LogicalDisk::assignDriveLetter()+0x1f>
c0009f71:	b0 43                	mov    al,0x43
c0009f73:	8b 3d 60 97 02 c0    	mov    edi,DWORD PTR ds:0xc0029760
c0009f79:	0f b6 ca             	movzx  ecx,dl
c0009f7c:	0f be e8             	movsx  ebp,al
c0009f7f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009f83:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0009f87:	8b 3d 64 97 02 c0    	mov    edi,DWORD PTR ds:0xc0029764
c0009f8d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0009f91:	3c 43                	cmp    al,0x43
c0009f93:	75 10                	jne    c0009fa5 <LogicalDisk::assignDriveLetter()+0x51>
c0009f95:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0009f9c:	75 5a                	jne    c0009ff8 <LogicalDisk::assignDriveLetter()+0xa4>
c0009f9e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009fa3:	75 53                	jne    c0009ff8 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fa5:	8d 75 bf             	lea    esi,[ebp-0x41]
c0009fa8:	ba 01 00 00 00       	mov    edx,0x1
c0009fad:	89 34 24             	mov    DWORD PTR [esp],esi
c0009fb0:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c0009fb3:	d3 e2                	shl    edx,cl
c0009fb5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009fb9:	89 d7                	mov    edi,edx
c0009fbb:	89 d6                	mov    esi,edx
c0009fbd:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c0009fc1:	c1 ff 1f             	sar    edi,0x1f
c0009fc4:	21 f9                	and    ecx,edi
c0009fc6:	09 d1                	or     ecx,edx
c0009fc8:	75 2e                	jne    c0009ff8 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009fce:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0009fd2:	09 f2                	or     edx,esi
c0009fd4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0009fd7:	89 15 60 97 02 c0    	mov    DWORD PTR ds:0xc0029760,edx
c0009fdd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009fe1:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0009fe7:	89 1c b5 80 97 02 c0 	mov    DWORD PTR [esi*4-0x3ffd6880],ebx
c0009fee:	09 fa                	or     edx,edi
c0009ff0:	89 15 64 97 02 c0    	mov    DWORD PTR ds:0xc0029764,edx
c0009ff6:	eb 0d                	jmp    c000a005 <LogicalDisk::assignDriveLetter()+0xb1>
c0009ff8:	8d 50 01             	lea    edx,[eax+0x1]
c0009ffb:	45                   	inc    ebp
c0009ffc:	80 fa 5b             	cmp    dl,0x5b
c0009fff:	88 d0                	mov    al,dl
c000a001:	75 8e                	jne    c0009f91 <LogicalDisk::assignDriveLetter()+0x3d>
c000a003:	31 c0                	xor    eax,eax
c000a005:	83 c4 14             	add    esp,0x14
c000a008:	5b                   	pop    ebx
c000a009:	5e                   	pop    esi
c000a00a:	5f                   	pop    edi
c000a00b:	5d                   	pop    ebp
c000a00c:	c3                   	ret    
c000a00d:	90                   	nop

c000a00e <LogicalDisk::mount()>:
c000a00e:	56                   	push   esi
c000a00f:	53                   	push   ebx
c000a010:	53                   	push   ebx
c000a011:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a015:	8b 1d 04 93 02 c0    	mov    ebx,DWORD PTR ds:0xc0029304
c000a01b:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a025:	85 db                	test   ebx,ebx
c000a027:	74 27                	je     c000a050 <LogicalDisk::mount()+0x42>
c000a029:	51                   	push   ecx
c000a02a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a031:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a033:	83 e8 41             	sub    eax,0x41
c000a036:	50                   	push   eax
c000a037:	56                   	push   esi
c000a038:	53                   	push   ebx
c000a039:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a03c:	83 c4 10             	add    esp,0x10
c000a03f:	84 c0                	test   al,al
c000a041:	74 08                	je     c000a04b <LogicalDisk::mount()+0x3d>
c000a043:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a049:	eb 07                	jmp    c000a052 <LogicalDisk::mount()+0x44>
c000a04b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a04e:	eb d5                	jmp    c000a025 <LogicalDisk::mount()+0x17>
c000a050:	31 c0                	xor    eax,eax
c000a052:	5a                   	pop    edx
c000a053:	5b                   	pop    ebx
c000a054:	5e                   	pop    esi
c000a055:	c3                   	ret    

c000a056 <LogicalDisk::unmount()>:
c000a056:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a05a:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a064:	c3                   	ret    
c000a065:	90                   	nop

c000a066 <LogicalDisk::eject()>:
c000a066:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a06a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a070:	8b 10                	mov    edx,DWORD PTR [eax]
c000a072:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a076:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a079:	90                   	nop

c000a07a <LogicalDisk::unassignDriveLetter()>:
c000a07a:	57                   	push   edi
c000a07b:	56                   	push   esi
c000a07c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a080:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000a087:	85 c9                	test   ecx,ecx
c000a089:	75 0f                	jne    c000a09a <LogicalDisk::unassignDriveLetter()+0x20>
c000a08b:	c7 44 24 0c d4 19 02 c0 	mov    DWORD PTR [esp+0xc],0xc00219d4
c000a093:	5e                   	pop    esi
c000a094:	5f                   	pop    edi
c000a095:	e9 7c 4b 00 00       	jmp    c000ec16 <KePanic(char const*)>
c000a09a:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000a0a1:	83 e9 41             	sub    ecx,0x41
c000a0a4:	b8 01 00 00 00       	mov    eax,0x1
c000a0a9:	c7 04 8d 80 97 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd6880],0x0
c000a0b4:	d3 e0                	shl    eax,cl
c000a0b6:	89 c7                	mov    edi,eax
c000a0b8:	f7 d0                	not    eax
c000a0ba:	c1 ff 1f             	sar    edi,0x1f
c000a0bd:	21 05 60 97 02 c0    	and    DWORD PTR ds:0xc0029760,eax
c000a0c3:	89 fe                	mov    esi,edi
c000a0c5:	f7 d6                	not    esi
c000a0c7:	21 35 64 97 02 c0    	and    DWORD PTR ds:0xc0029764,esi
c000a0cd:	5e                   	pop    esi
c000a0ce:	5f                   	pop    edi
c000a0cf:	c3                   	ret    

c000a0d0 <LogicalDisk::read(unsigned long long, int, void*)>:
c000a0d0:	57                   	push   edi
c000a0d1:	56                   	push   esi
c000a0d2:	53                   	push   ebx
c000a0d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a0d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a0db:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a0df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a0e3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a0e9:	77 41                	ja     c000a12c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000a0eb:	99                   	cdq    
c000a0ec:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a0f2:	01 c8                	add    eax,ecx
c000a0f4:	11 da                	adc    edx,ebx
c000a0f6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a0fc:	19 d7                	sbb    edi,edx
c000a0fe:	72 33                	jb     c000a133 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000a100:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a106:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a10c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a110:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a114:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a11a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a120:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a124:	5b                   	pop    ebx
c000a125:	5e                   	pop    esi
c000a126:	5f                   	pop    edi
c000a127:	e9 cc 0a 00 00       	jmp    c000abf8 <VCache::read(unsigned long long, int, void*)>
c000a12c:	b8 05 00 00 00       	mov    eax,0x5
c000a131:	eb 05                	jmp    c000a138 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000a133:	b8 07 00 00 00       	mov    eax,0x7
c000a138:	5b                   	pop    ebx
c000a139:	5e                   	pop    esi
c000a13a:	5f                   	pop    edi
c000a13b:	c3                   	ret    

c000a13c <LogicalDisk::write(unsigned long long, int, void*)>:
c000a13c:	57                   	push   edi
c000a13d:	56                   	push   esi
c000a13e:	53                   	push   ebx
c000a13f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a143:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a147:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a14b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a14f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a155:	77 41                	ja     c000a198 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000a157:	99                   	cdq    
c000a158:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a15e:	01 c8                	add    eax,ecx
c000a160:	11 da                	adc    edx,ebx
c000a162:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a168:	19 d7                	sbb    edi,edx
c000a16a:	72 33                	jb     c000a19f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000a16c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a172:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a178:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a17c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a180:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a186:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a18c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a190:	5b                   	pop    ebx
c000a191:	5e                   	pop    esi
c000a192:	5f                   	pop    edi
c000a193:	e9 70 09 00 00       	jmp    c000ab08 <VCache::write(unsigned long long, int, void*)>
c000a198:	b8 05 00 00 00       	mov    eax,0x5
c000a19d:	eb 05                	jmp    c000a1a4 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000a19f:	b8 07 00 00 00       	mov    eax,0x7
c000a1a4:	5b                   	pop    ebx
c000a1a5:	5e                   	pop    esi
c000a1a6:	5f                   	pop    edi
c000a1a7:	c3                   	ret    

c000a1a8 <Mouse::Mouse(char const*)>:
c000a1a8:	83 ec 0c             	sub    esp,0xc
c000a1ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1af:	83 ec 08             	sub    esp,0x8
c000a1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1b6:	50                   	push   eax
c000a1b7:	e8 ec ef ff ff       	call   c00091a8 <Device::Device(char const*)>
c000a1bc:	83 c4 10             	add    esp,0x10
c000a1bf:	ba 28 1a 02 c0       	mov    edx,0xc0021a28
c000a1c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1c8:	89 10                	mov    DWORD PTR [eax],edx
c000a1ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1ce:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000a1d8:	90                   	nop
c000a1d9:	83 c4 0c             	add    esp,0xc
c000a1dc:	c3                   	ret    
c000a1dd:	90                   	nop
c000a1de:	66 90                	xchg   ax,ax

c000a1e0 <Mouse::~Mouse()>:
c000a1e0:	83 ec 0c             	sub    esp,0xc
c000a1e3:	ba 28 1a 02 c0       	mov    edx,0xc0021a28
c000a1e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1ec:	89 10                	mov    DWORD PTR [eax],edx
c000a1ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1f2:	83 ec 0c             	sub    esp,0xc
c000a1f5:	50                   	push   eax
c000a1f6:	e8 4d ed ff ff       	call   c0008f48 <Device::~Device()>
c000a1fb:	83 c4 10             	add    esp,0x10
c000a1fe:	90                   	nop
c000a1ff:	83 c4 0c             	add    esp,0xc
c000a202:	c3                   	ret    
c000a203:	90                   	nop

c000a204 <Mouse::~Mouse()>:
c000a204:	83 ec 0c             	sub    esp,0xc
c000a207:	83 ec 0c             	sub    esp,0xc
c000a20a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20e:	e8 cd ff ff ff       	call   c000a1e0 <Mouse::~Mouse()>
c000a213:	83 c4 10             	add    esp,0x10
c000a216:	83 ec 08             	sub    esp,0x8
c000a219:	68 58 01 00 00       	push   0x158
c000a21e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a222:	e8 34 24 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c000a227:	83 c4 10             	add    esp,0x10
c000a22a:	83 c4 0c             	add    esp,0xc
c000a22d:	c3                   	ret    

c000a22e <NIC::getMAC()>:
c000a22e:	31 c0                	xor    eax,eax
c000a230:	31 d2                	xor    edx,edx
c000a232:	c3                   	ret    
c000a233:	90                   	nop

c000a234 <NIC::write(int, unsigned char*, int*)>:
c000a234:	b8 01 00 00 00       	mov    eax,0x1
c000a239:	c3                   	ret    

c000a23a <NIC::NIC(char const*)>:
c000a23a:	83 ec 0c             	sub    esp,0xc
c000a23d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a241:	83 ec 08             	sub    esp,0x8
c000a244:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a248:	50                   	push   eax
c000a249:	e8 5a ef ff ff       	call   c00091a8 <Device::Device(char const*)>
c000a24e:	83 c4 10             	add    esp,0x10
c000a251:	ba 54 1a 02 c0       	mov    edx,0xc0021a54
c000a256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a25a:	89 10                	mov    DWORD PTR [eax],edx
c000a25c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a260:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000a26a:	90                   	nop
c000a26b:	83 c4 0c             	add    esp,0xc
c000a26e:	c3                   	ret    
c000a26f:	90                   	nop

c000a270 <NIC::~NIC()>:
c000a270:	83 ec 0c             	sub    esp,0xc
c000a273:	ba 54 1a 02 c0       	mov    edx,0xc0021a54
c000a278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a27c:	89 10                	mov    DWORD PTR [eax],edx
c000a27e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a282:	83 ec 0c             	sub    esp,0xc
c000a285:	50                   	push   eax
c000a286:	e8 bd ec ff ff       	call   c0008f48 <Device::~Device()>
c000a28b:	83 c4 10             	add    esp,0x10
c000a28e:	90                   	nop
c000a28f:	83 c4 0c             	add    esp,0xc
c000a292:	c3                   	ret    
c000a293:	90                   	nop

c000a294 <NIC::~NIC()>:
c000a294:	83 ec 0c             	sub    esp,0xc
c000a297:	83 ec 0c             	sub    esp,0xc
c000a29a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a29e:	e8 cd ff ff ff       	call   c000a270 <NIC::~NIC()>
c000a2a3:	83 c4 10             	add    esp,0x10
c000a2a6:	83 ec 08             	sub    esp,0x8
c000a2a9:	68 58 01 00 00       	push   0x158
c000a2ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b2:	e8 a4 23 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c000a2b7:	83 c4 10             	add    esp,0x10
c000a2ba:	83 c4 0c             	add    esp,0xc
c000a2bd:	c3                   	ret    

c000a2be <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a2be:	55                   	push   ebp
c000a2bf:	57                   	push   edi
c000a2c0:	56                   	push   esi
c000a2c1:	53                   	push   ebx
c000a2c2:	81 ec 28 01 00 00    	sub    esp,0x128
c000a2c8:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000a2cf:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000a2d6:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000a2dd:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000a2e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a2e8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000a2ec:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a2f3:	e8 ac ef ff ff       	call   c00092a4 <Device::getName()>
c000a2f8:	5a                   	pop    edx
c000a2f9:	59                   	pop    ecx
c000a2fa:	50                   	push   eax
c000a2fb:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000a2ff:	55                   	push   ebp
c000a300:	e8 4b 63 ff ff       	call   c0000650 <strcpy>
c000a305:	5b                   	pop    ebx
c000a306:	58                   	pop    eax
c000a307:	68 80 1a 02 c0       	push   0xc0021a80
c000a30c:	55                   	push   ebp
c000a30d:	e8 5e 65 ff ff       	call   c0000870 <strcat>
c000a312:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000a319:	e8 b2 45 00 00       	call   c000e8d0 <malloc>
c000a31e:	83 c4 0c             	add    esp,0xc
c000a321:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a325:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a329:	89 c3                	mov    ebx,eax
c000a32b:	57                   	push   edi
c000a32c:	56                   	push   esi
c000a32d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000a334:	55                   	push   ebp
c000a335:	50                   	push   eax
c000a336:	e8 59 fb ff ff       	call   c0009e94 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000a33b:	83 c4 14             	add    esp,0x14
c000a33e:	53                   	push   ebx
c000a33f:	e8 10 fc ff ff       	call   c0009f54 <LogicalDisk::assignDriveLetter()>
c000a344:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a347:	e8 c2 fc ff ff       	call   c000a00e <LogicalDisk::mount()>
c000a34c:	58                   	pop    eax
c000a34d:	5a                   	pop    edx
c000a34e:	53                   	push   ebx
c000a34f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a356:	e8 eb ec ff ff       	call   c0009046 <Device::addChild(Device*)>
c000a35b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000a361:	5b                   	pop    ebx
c000a362:	5e                   	pop    esi
c000a363:	5f                   	pop    edi
c000a364:	5d                   	pop    ebp
c000a365:	c3                   	ret    

c000a366 <createPartitionsForDisk(PhysicalDisk*)>:
c000a366:	55                   	push   ebp
c000a367:	57                   	push   edi
c000a368:	56                   	push   esi
c000a369:	53                   	push   ebx
c000a36a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000a370:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000a377:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000a37d:	3d 00 02 00 00       	cmp    eax,0x200
c000a382:	74 27                	je     c000a3ab <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000a384:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000a38a:	83 ec 10             	sub    esp,0x10
c000a38d:	99                   	cdq    
c000a38e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000a394:	52                   	push   edx
c000a395:	50                   	push   eax
c000a396:	0f a4 f7 0a          	shld   edi,esi,0xa
c000a39a:	c1 e6 0a             	shl    esi,0xa
c000a39d:	89 fd                	mov    ebp,edi
c000a39f:	55                   	push   ebp
c000a3a0:	56                   	push   esi
c000a3a1:	e8 3e 59 01 00       	call   c001fce4 <__udivdi3>
c000a3a6:	e9 b9 00 00 00       	jmp    c000a464 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a3ab:	83 ec 0c             	sub    esp,0xc
c000a3ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a3b0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000a3b4:	56                   	push   esi
c000a3b5:	6a 01                	push   0x1
c000a3b7:	6a 00                	push   0x0
c000a3b9:	6a 00                	push   0x0
c000a3bb:	53                   	push   ebx
c000a3bc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000a3bf:	83 c4 20             	add    esp,0x20
c000a3c2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000a3ca:	75 0a                	jne    c000a3d6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000a3cc:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000a3d4:	74 2c                	je     c000a402 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000a3d6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a3dc:	83 ec 10             	sub    esp,0x10
c000a3df:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a3e5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a3eb:	89 f7                	mov    edi,esi
c000a3ed:	c1 ff 1f             	sar    edi,0x1f
c000a3f0:	57                   	push   edi
c000a3f1:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a3f5:	56                   	push   esi
c000a3f6:	c1 e0 0a             	shl    eax,0xa
c000a3f9:	52                   	push   edx
c000a3fa:	50                   	push   eax
c000a3fb:	e8 e4 58 01 00       	call   c001fce4 <__udivdi3>
c000a400:	eb 62                	jmp    c000a464 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a402:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000a409:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000a410:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000a417:	89 cf                	mov    edi,ecx
c000a419:	83 e2 7f             	and    edx,0x7f
c000a41c:	83 e7 7f             	and    edi,0x7f
c000a41f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000a422:	83 e0 7f             	and    eax,0x7f
c000a425:	8d 14 01             	lea    edx,[ecx+eax*1]
c000a428:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000a42f:	83 e0 7f             	and    eax,0x7f
c000a432:	01 d0                	add    eax,edx
c000a434:	84 c0                	test   al,al
c000a436:	89 c5                	mov    ebp,eax
c000a438:	74 41                	je     c000a47b <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000a43a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a440:	83 ec 10             	sub    esp,0x10
c000a443:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a449:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a44f:	89 f7                	mov    edi,esi
c000a451:	c1 ff 1f             	sar    edi,0x1f
c000a454:	57                   	push   edi
c000a455:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a459:	56                   	push   esi
c000a45a:	c1 e0 0a             	shl    eax,0xa
c000a45d:	52                   	push   edx
c000a45e:	50                   	push   eax
c000a45f:	e8 80 58 01 00       	call   c001fce4 <__udivdi3>
c000a464:	83 c4 14             	add    esp,0x14
c000a467:	52                   	push   edx
c000a468:	50                   	push   eax
c000a469:	6a 00                	push   0x0
c000a46b:	6a 00                	push   0x0
c000a46d:	53                   	push   ebx
c000a46e:	e8 4b fe ff ff       	call   c000a2be <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a473:	83 c4 20             	add    esp,0x20
c000a476:	e9 73 01 00 00       	jmp    c000a5ee <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000a47b:	89 f0                	mov    eax,esi
c000a47d:	31 c9                	xor    ecx,ecx
c000a47f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000a486:	75 02                	jne    c000a48a <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000a488:	89 cd                	mov    ebp,ecx
c000a48a:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000a492:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000a499:	83 c0 10             	add    eax,0x10
c000a49c:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000a4a4:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000a4ab:	c1 e2 08             	shl    edx,0x8
c000a4ae:	c1 e6 10             	shl    esi,0x10
c000a4b1:	09 f2                	or     edx,esi
c000a4b3:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000a4ba:	09 f2                	or     edx,esi
c000a4bc:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000a4c3:	c1 e6 18             	shl    esi,0x18
c000a4c6:	09 f2                	or     edx,esi
c000a4c8:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000a4cf:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000a4d3:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000a4da:	c1 e6 10             	shl    esi,0x10
c000a4dd:	c1 e2 08             	shl    edx,0x8
c000a4e0:	09 f2                	or     edx,esi
c000a4e2:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000a4e9:	09 f2                	or     edx,esi
c000a4eb:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000a4f2:	c1 e6 18             	shl    esi,0x18
c000a4f5:	09 f2                	or     edx,esi
c000a4f7:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000a4fb:	41                   	inc    ecx
c000a4fc:	83 f9 04             	cmp    ecx,0x4
c000a4ff:	0f 85 7a ff ff ff    	jne    c000a47f <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000a505:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a509:	83 f0 01             	xor    eax,0x1
c000a50c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000a510:	75 4f                	jne    c000a561 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a512:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a516:	83 f0 01             	xor    eax,0x1
c000a519:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000a51d:	75 42                	jne    c000a561 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a51f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a525:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000a52d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a533:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a53b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a541:	89 f7                	mov    edi,esi
c000a543:	c1 ff 1f             	sar    edi,0x1f
c000a546:	57                   	push   edi
c000a547:	56                   	push   esi
c000a548:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a54c:	52                   	push   edx
c000a54d:	c1 e0 0a             	shl    eax,0xa
c000a550:	50                   	push   eax
c000a551:	e8 8e 57 01 00       	call   c001fce4 <__udivdi3>
c000a556:	83 c4 10             	add    esp,0x10
c000a559:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a55d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a561:	89 e8                	mov    eax,ebp
c000a563:	0f b6 e8             	movzx  ebp,al
c000a566:	85 ed                	test   ebp,ebp
c000a568:	74 50                	je     c000a5ba <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000a56a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a56e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a572:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a576:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000a57a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a57e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a582:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a586:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a58a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a58e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a592:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a596:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a59a:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000a59e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a5a2:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000a5a6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a5aa:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000a5ae:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000a5b2:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000a5b6:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000a5ba:	31 ed                	xor    ebp,ebp
c000a5bc:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a5c0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a5c4:	89 f8                	mov    eax,edi
c000a5c6:	09 f0                	or     eax,esi
c000a5c8:	74 1e                	je     c000a5e8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5ca:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a5ce:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a5d2:	89 d1                	mov    ecx,edx
c000a5d4:	09 c1                	or     ecx,eax
c000a5d6:	74 10                	je     c000a5e8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5d8:	83 ec 0c             	sub    esp,0xc
c000a5db:	57                   	push   edi
c000a5dc:	56                   	push   esi
c000a5dd:	52                   	push   edx
c000a5de:	50                   	push   eax
c000a5df:	53                   	push   ebx
c000a5e0:	e8 d9 fc ff ff       	call   c000a2be <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a5e5:	83 c4 20             	add    esp,0x20
c000a5e8:	45                   	inc    ebp
c000a5e9:	83 fd 04             	cmp    ebp,0x4
c000a5ec:	75 ce                	jne    c000a5bc <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000a5ee:	81 c4 5c 02 00 00    	add    esp,0x25c
c000a5f4:	5b                   	pop    ebx
c000a5f5:	5e                   	pop    esi
c000a5f6:	5f                   	pop    edi
c000a5f7:	5d                   	pop    ebp
c000a5f8:	c3                   	ret    
c000a5f9:	66 90                	xchg   ax,ax
c000a5fb:	90                   	nop

c000a5fc <Serial::Serial(char const*)>:
c000a5fc:	83 ec 0c             	sub    esp,0xc
c000a5ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a603:	83 ec 08             	sub    esp,0x8
c000a606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a60a:	50                   	push   eax
c000a60b:	e8 98 eb ff ff       	call   c00091a8 <Device::Device(char const*)>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	ba 94 1a 02 c0       	mov    edx,0xc0021a94
c000a618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a61c:	89 10                	mov    DWORD PTR [eax],edx
c000a61e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a622:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000a62c:	90                   	nop
c000a62d:	83 c4 0c             	add    esp,0xc
c000a630:	c3                   	ret    
c000a631:	90                   	nop
c000a632:	66 90                	xchg   ax,ax

c000a634 <Serial::~Serial()>:
c000a634:	83 ec 0c             	sub    esp,0xc
c000a637:	ba 94 1a 02 c0       	mov    edx,0xc0021a94
c000a63c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a640:	89 10                	mov    DWORD PTR [eax],edx
c000a642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a646:	83 ec 0c             	sub    esp,0xc
c000a649:	50                   	push   eax
c000a64a:	e8 f9 e8 ff ff       	call   c0008f48 <Device::~Device()>
c000a64f:	83 c4 10             	add    esp,0x10
c000a652:	90                   	nop
c000a653:	83 c4 0c             	add    esp,0xc
c000a656:	c3                   	ret    
c000a657:	90                   	nop

c000a658 <Serial::~Serial()>:
c000a658:	83 ec 0c             	sub    esp,0xc
c000a65b:	83 ec 0c             	sub    esp,0xc
c000a65e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a662:	e8 cd ff ff ff       	call   c000a634 <Serial::~Serial()>
c000a667:	83 c4 10             	add    esp,0x10
c000a66a:	83 ec 08             	sub    esp,0x8
c000a66d:	68 58 01 00 00       	push   0x158
c000a672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a676:	e8 e0 1f 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c000a67b:	83 c4 10             	add    esp,0x10
c000a67e:	83 c4 0c             	add    esp,0xc
c000a681:	c3                   	ret    
c000a682:	66 90                	xchg   ax,ax

c000a684 <Timer::Timer(char const*)>:
c000a684:	83 ec 0c             	sub    esp,0xc
c000a687:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a68b:	83 ec 08             	sub    esp,0x8
c000a68e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a692:	50                   	push   eax
c000a693:	e8 10 eb ff ff       	call   c00091a8 <Device::Device(char const*)>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	ba 2c 1b 02 c0       	mov    edx,0xc0021b2c
c000a6a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6a4:	89 10                	mov    DWORD PTR [eax],edx
c000a6a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6aa:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000a6b4:	90                   	nop
c000a6b5:	83 c4 0c             	add    esp,0xc
c000a6b8:	c3                   	ret    
c000a6b9:	90                   	nop
c000a6ba:	66 90                	xchg   ax,ax

c000a6bc <Timer::~Timer()>:
c000a6bc:	83 ec 0c             	sub    esp,0xc
c000a6bf:	ba 2c 1b 02 c0       	mov    edx,0xc0021b2c
c000a6c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6c8:	89 10                	mov    DWORD PTR [eax],edx
c000a6ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ce:	83 ec 0c             	sub    esp,0xc
c000a6d1:	50                   	push   eax
c000a6d2:	e8 71 e8 ff ff       	call   c0008f48 <Device::~Device()>
c000a6d7:	83 c4 10             	add    esp,0x10
c000a6da:	90                   	nop
c000a6db:	83 c4 0c             	add    esp,0xc
c000a6de:	c3                   	ret    
c000a6df:	90                   	nop

c000a6e0 <Timer::~Timer()>:
c000a6e0:	83 ec 0c             	sub    esp,0xc
c000a6e3:	83 ec 0c             	sub    esp,0xc
c000a6e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6ea:	e8 cd ff ff ff       	call   c000a6bc <Timer::~Timer()>
c000a6ef:	83 c4 10             	add    esp,0x10
c000a6f2:	83 ec 08             	sub    esp,0x8
c000a6f5:	68 5c 01 00 00       	push   0x15c
c000a6fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6fe:	e8 58 1f 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c000a703:	83 c4 10             	add    esp,0x10
c000a706:	83 c4 0c             	add    esp,0xc
c000a709:	c3                   	ret    

c000a70a <Timer::read()>:
c000a70a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a70e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a714:	c3                   	ret    

c000a715 <setupTimer(int)>:
c000a715:	53                   	push   ebx
c000a716:	83 ec 14             	sub    esp,0x14
c000a719:	68 5c 01 00 00       	push   0x15c
c000a71e:	e8 ad 41 00 00       	call   c000e8d0 <malloc>
c000a723:	89 04 24             	mov    DWORD PTR [esp],eax
c000a726:	89 c3                	mov    ebx,eax
c000a728:	e8 37 4e 01 00       	call   c001f564 <PIT::PIT()>
c000a72d:	58                   	pop    eax
c000a72e:	5a                   	pop    edx
c000a72f:	53                   	push   ebx
c000a730:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c000a736:	e8 0b e9 ff ff       	call   c0009046 <Device::addChild(Device*)>
c000a73b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a73d:	6a 00                	push   0x0
c000a73f:	6a 00                	push   0x0
c000a741:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a745:	53                   	push   ebx
c000a746:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a749:	83 c4 28             	add    esp,0x28
c000a74c:	89 d8                	mov    eax,ebx
c000a74e:	5b                   	pop    ebx
c000a74f:	c3                   	ret    

c000a750 <timerHandler(unsigned int)>:
c000a750:	57                   	push   edi
c000a751:	56                   	push   esi
c000a752:	53                   	push   ebx
c000a753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000a757:	01 3d ec 97 02 c0    	add    DWORD PTR ds:0xc00297ec,edi
c000a75d:	80 3d 75 9d 02 c0 00 	cmp    BYTE PTR ds:0xc0029d75,0x0
c000a764:	0f 84 4e 01 00 00    	je     c000a8b8 <timerHandler(unsigned int)+0x168>
c000a76a:	fa                   	cli    
c000a76b:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000a771:	83 ec 0c             	sub    esp,0xc
c000a774:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a779:	ff 05 ac c6 02 c0    	inc    DWORD PTR ds:0xc002c6ac
c000a77f:	e8 f8 58 01 00       	call   c002007c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a784:	83 c4 10             	add    esp,0x10
c000a787:	84 c0                	test   al,al
c000a789:	0f 85 a1 00 00 00    	jne    c000a830 <timerHandler(unsigned int)+0xe0>
c000a78f:	83 ec 0c             	sub    esp,0xc
c000a792:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a797:	e8 fc 58 01 00       	call   c0020098 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a79c:	83 c4 10             	add    esp,0x10
c000a79f:	89 c6                	mov    esi,eax
c000a7a1:	8d 76 00             	lea    esi,[esi+0x0]
c000a7a4:	83 ec 0c             	sub    esp,0xc
c000a7a7:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a7ac:	e8 e7 58 01 00       	call   c0020098 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7b1:	c7 04 24 c0 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6c0
c000a7b8:	89 c3                	mov    ebx,eax
c000a7ba:	e8 e1 58 01 00       	call   c00200a0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000a7bf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000a7c2:	83 c4 10             	add    esp,0x10
c000a7c5:	3b 05 ec 97 02 c0    	cmp    eax,DWORD PTR ds:0xc00297ec
c000a7cb:	77 23                	ja     c000a7f0 <timerHandler(unsigned int)+0xa0>
c000a7cd:	83 ec 0c             	sub    esp,0xc
c000a7d0:	53                   	push   ebx
c000a7d1:	e8 16 af 00 00       	call   c00156ec <unblockTask(ThreadControlBlock*)>
c000a7d6:	83 c4 10             	add    esp,0x10
c000a7d9:	39 de                	cmp    esi,ebx
c000a7db:	75 27                	jne    c000a804 <timerHandler(unsigned int)+0xb4>
c000a7dd:	83 ec 0c             	sub    esp,0xc
c000a7e0:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a7e5:	e8 ae 58 01 00       	call   c0020098 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7ea:	89 c6                	mov    esi,eax
c000a7ec:	eb 12                	jmp    c000a800 <timerHandler(unsigned int)+0xb0>
c000a7ee:	66 90                	xchg   ax,ax
c000a7f0:	50                   	push   eax
c000a7f1:	50                   	push   eax
c000a7f2:	53                   	push   ebx
c000a7f3:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a7f8:	e8 5f 59 01 00       	call   c002015c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000a7fd:	8d 76 00             	lea    esi,[esi+0x0]
c000a800:	83 c4 10             	add    esp,0x10
c000a803:	90                   	nop
c000a804:	83 ec 0c             	sub    esp,0xc
c000a807:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a80c:	e8 6b 58 01 00       	call   c002007c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a811:	83 c4 10             	add    esp,0x10
c000a814:	84 c0                	test   al,al
c000a816:	75 18                	jne    c000a830 <timerHandler(unsigned int)+0xe0>
c000a818:	83 ec 0c             	sub    esp,0xc
c000a81b:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a820:	e8 73 58 01 00       	call   c0020098 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a825:	83 c4 10             	add    esp,0x10
c000a828:	39 f0                	cmp    eax,esi
c000a82a:	0f 85 74 ff ff ff    	jne    c000a7a4 <timerHandler(unsigned int)+0x54>
c000a830:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a835:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000a839:	74 41                	je     c000a87c <timerHandler(unsigned int)+0x12c>
c000a83b:	80 3d 74 9d 02 c0 00 	cmp    BYTE PTR ds:0xc0029d74,0x0
c000a842:	74 38                	je     c000a87c <timerHandler(unsigned int)+0x12c>
c000a844:	fa                   	cli    
c000a845:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000a84b:	8b 15 ec 97 02 c0    	mov    edx,DWORD PTR ds:0xc00297ec
c000a851:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a856:	29 78 34             	sub    DWORD PTR [eax+0x34],edi
c000a859:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a85e:	39 50 34             	cmp    DWORD PTR [eax+0x34],edx
c000a861:	77 05                	ja     c000a868 <timerHandler(unsigned int)+0x118>
c000a863:	e8 84 ab 00 00       	call   c00153ec <schedule()>
c000a868:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000a86f:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000a876:	75 04                	jne    c000a87c <timerHandler(unsigned int)+0x12c>
c000a878:	fb                   	sti    
c000a879:	8d 76 00             	lea    esi,[esi+0x0]
c000a87c:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000a881:	48                   	dec    eax
c000a882:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000a887:	75 1b                	jne    c000a8a4 <timerHandler(unsigned int)+0x154>
c000a889:	83 3d a8 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6a8,0x0
c000a890:	74 12                	je     c000a8a4 <timerHandler(unsigned int)+0x154>
c000a892:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000a89c:	e8 4b ab 00 00       	call   c00153ec <schedule()>
c000a8a1:	8d 76 00             	lea    esi,[esi+0x0]
c000a8a4:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000a8ab:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000a8b2:	75 04                	jne    c000a8b8 <timerHandler(unsigned int)+0x168>
c000a8b4:	fb                   	sti    
c000a8b5:	8d 76 00             	lea    esi,[esi+0x0]
c000a8b8:	5b                   	pop    ebx
c000a8b9:	5e                   	pop    esi
c000a8ba:	5f                   	pop    edi
c000a8bb:	c3                   	ret    

c000a8bc <VCache::VCache(PhysicalDisk*)>:
c000a8bc:	53                   	push   ebx
c000a8bd:	83 ec 18             	sub    esp,0x18
c000a8c0:	ba 5c 1b 02 c0       	mov    edx,0xc0021b5c
c000a8c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8c9:	89 10                	mov    DWORD PTR [eax],edx
c000a8cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8cf:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000a8d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8da:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000a8e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8e5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000a8ec:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000a8f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8f7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000a8fe:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000a905:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a909:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000a910:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a914:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000a918:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a91c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000a923:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000a92a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a92e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a932:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a936:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000a93a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a93e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000a942:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a946:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000a94d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000a955:	83 ec 0c             	sub    esp,0xc
c000a958:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a95c:	e8 6f 3f 00 00       	call   c000e8d0 <malloc>
c000a961:	83 c4 10             	add    esp,0x10
c000a964:	89 c3                	mov    ebx,eax
c000a966:	83 ec 0c             	sub    esp,0xc
c000a969:	53                   	push   ebx
c000a96a:	e8 8d 42 00 00       	call   c000ebfc <Mutex::Mutex()>
c000a96f:	83 c4 10             	add    esp,0x10
c000a972:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a976:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000a979:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a97d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000a981:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000a984:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a988:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000a98f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a993:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000a999:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a99d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a9a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9a4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000a9aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a9b0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a9b4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000a9b7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000a9ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9be:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a9c2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9c6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000a9cc:	05 00 01 00 00       	add    eax,0x100
c000a9d1:	c1 e0 04             	shl    eax,0x4
c000a9d4:	83 ec 0c             	sub    esp,0xc
c000a9d7:	50                   	push   eax
c000a9d8:	e8 f3 3e 00 00       	call   c000e8d0 <malloc>
c000a9dd:	83 c4 10             	add    esp,0x10
c000a9e0:	89 c2                	mov    edx,eax
c000a9e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9e6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a9e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9ed:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000a9f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9f8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000a9fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa00:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000aa06:	89 d0                	mov    eax,edx
c000aa08:	c1 e0 02             	shl    eax,0x2
c000aa0b:	01 d0                	add    eax,edx
c000aa0d:	c1 e0 04             	shl    eax,0x4
c000aa10:	83 ec 0c             	sub    esp,0xc
c000aa13:	50                   	push   eax
c000aa14:	e8 b7 3e 00 00       	call   c000e8d0 <malloc>
c000aa19:	83 c4 10             	add    esp,0x10
c000aa1c:	89 c2                	mov    edx,eax
c000aa1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa22:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000aa25:	90                   	nop
c000aa26:	83 c4 18             	add    esp,0x18
c000aa29:	5b                   	pop    ebx
c000aa2a:	c3                   	ret    
c000aa2b:	90                   	nop

c000aa2c <VCache::invalidateReadBuffer()>:
c000aa2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa30:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000aa36:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000aa3a:	c3                   	ret    
c000aa3b:	90                   	nop

c000aa3c <VCache::writeWriteBuffer()>:
c000aa3c:	53                   	push   ebx
c000aa3d:	83 ec 08             	sub    esp,0x8
c000aa40:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aa44:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000aa48:	74 1e                	je     c000aa68 <VCache::writeWriteBuffer()+0x2c>
c000aa4a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000aa4d:	83 ec 0c             	sub    esp,0xc
c000aa50:	8b 10                	mov    edx,DWORD PTR [eax]
c000aa52:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000aa55:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000aa58:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000aa5b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000aa5e:	50                   	push   eax
c000aa5f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000aa62:	83 c4 20             	add    esp,0x20
c000aa65:	8d 76 00             	lea    esi,[esi+0x0]
c000aa68:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000aa6f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000aa76:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000aa7a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000aa81:	83 c4 08             	add    esp,0x8
c000aa84:	5b                   	pop    ebx
c000aa85:	c3                   	ret    
c000aa86:	66 90                	xchg   ax,ax

c000aa88 <VCache::~VCache()>:
c000aa88:	83 ec 0c             	sub    esp,0xc
c000aa8b:	ba 5c 1b 02 c0       	mov    edx,0xc0021b5c
c000aa90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa94:	89 10                	mov    DWORD PTR [eax],edx
c000aa96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa9a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000aa9d:	0f b6 c0             	movzx  eax,al
c000aaa0:	85 c0                	test   eax,eax
c000aaa2:	74 10                	je     c000aab4 <VCache::~VCache()+0x2c>
c000aaa4:	83 ec 0c             	sub    esp,0xc
c000aaa7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aaab:	e8 8c ff ff ff       	call   c000aa3c <VCache::writeWriteBuffer()>
c000aab0:	83 c4 10             	add    esp,0x10
c000aab3:	90                   	nop
c000aab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aab8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000aabb:	83 ec 0c             	sub    esp,0xc
c000aabe:	50                   	push   eax
c000aabf:	e8 1c 3e 00 00       	call   c000e8e0 <free>
c000aac4:	83 c4 10             	add    esp,0x10
c000aac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aacb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000aace:	83 ec 0c             	sub    esp,0xc
c000aad1:	50                   	push   eax
c000aad2:	e8 09 3e 00 00       	call   c000e8e0 <free>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	90                   	nop
c000aadb:	83 c4 0c             	add    esp,0xc
c000aade:	c3                   	ret    
c000aadf:	90                   	nop

c000aae0 <VCache::~VCache()>:
c000aae0:	83 ec 0c             	sub    esp,0xc
c000aae3:	83 ec 0c             	sub    esp,0xc
c000aae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aaea:	e8 99 ff ff ff       	call   c000aa88 <VCache::~VCache()>
c000aaef:	83 c4 10             	add    esp,0x10
c000aaf2:	83 ec 08             	sub    esp,0x8
c000aaf5:	6a 44                	push   0x44
c000aaf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aafb:	e8 5b 1b 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	83 c4 0c             	add    esp,0xc
c000ab06:	c3                   	ret    
c000ab07:	90                   	nop

c000ab08 <VCache::write(unsigned long long, int, void*)>:
c000ab08:	55                   	push   ebp
c000ab09:	57                   	push   edi
c000ab0a:	56                   	push   esi
c000ab0b:	53                   	push   ebx
c000ab0c:	83 ec 1c             	sub    esp,0x1c
c000ab0f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ab13:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000ab17:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ab1b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ab1f:	e8 34 a6 00 00       	call   c0015158 <KeDisablePreemption()>
c000ab24:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ab28:	74 0e                	je     c000ab38 <VCache::write(unsigned long long, int, void*)+0x30>
c000ab2a:	83 ec 0c             	sub    esp,0xc
c000ab2d:	53                   	push   ebx
c000ab2e:	e8 f9 fe ff ff       	call   c000aa2c <VCache::invalidateReadBuffer()>
c000ab33:	83 c4 10             	add    esp,0x10
c000ab36:	66 90                	xchg   ax,ax
c000ab38:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ab3c:	74 5e                	je     c000ab9c <VCache::write(unsigned long long, int, void*)+0x94>
c000ab3e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000ab41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ab45:	99                   	cdq    
c000ab46:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000ab49:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000ab4c:	89 c1                	mov    ecx,eax
c000ab4e:	31 f1                	xor    ecx,esi
c000ab50:	89 d0                	mov    eax,edx
c000ab52:	31 f8                	xor    eax,edi
c000ab54:	09 c1                	or     ecx,eax
c000ab56:	75 38                	jne    c000ab90 <VCache::write(unsigned long long, int, void*)+0x88>
c000ab58:	83 fd 01             	cmp    ebp,0x1
c000ab5b:	75 33                	jne    c000ab90 <VCache::write(unsigned long long, int, void*)+0x88>
c000ab5d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ab60:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ab64:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ab68:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ab6e:	0f af f9             	imul   edi,ecx
c000ab71:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000ab74:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ab76:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000ab79:	40                   	inc    eax
c000ab7a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000ab7d:	83 f8 50             	cmp    eax,0x50
c000ab80:	75 66                	jne    c000abe8 <VCache::write(unsigned long long, int, void*)+0xe0>
c000ab82:	83 ec 0c             	sub    esp,0xc
c000ab85:	53                   	push   ebx
c000ab86:	e8 b1 fe ff ff       	call   c000aa3c <VCache::writeWriteBuffer()>
c000ab8b:	83 c4 10             	add    esp,0x10
c000ab8e:	eb 58                	jmp    c000abe8 <VCache::write(unsigned long long, int, void*)+0xe0>
c000ab90:	83 ec 0c             	sub    esp,0xc
c000ab93:	53                   	push   ebx
c000ab94:	e8 a3 fe ff ff       	call   c000aa3c <VCache::writeWriteBuffer()>
c000ab99:	83 c4 10             	add    esp,0x10
c000ab9c:	83 fd 4f             	cmp    ebp,0x4f
c000ab9f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000aba2:	7f 20                	jg     c000abc4 <VCache::write(unsigned long long, int, void*)+0xbc>
c000aba4:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000aba7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000abab:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000abae:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000abb1:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000abb4:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000abb8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000abbe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000abc0:	eb 26                	jmp    c000abe8 <VCache::write(unsigned long long, int, void*)+0xe0>
c000abc2:	66 90                	xchg   ax,ax
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	8b 10                	mov    edx,DWORD PTR [eax]
c000abc9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000abcd:	55                   	push   ebp
c000abce:	57                   	push   edi
c000abcf:	56                   	push   esi
c000abd0:	50                   	push   eax
c000abd1:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000abd4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000abd8:	83 c4 20             	add    esp,0x20
c000abdb:	e8 a0 a5 00 00       	call   c0015180 <KeRestorePreemption()>
c000abe0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000abe4:	eb 0a                	jmp    c000abf0 <VCache::write(unsigned long long, int, void*)+0xe8>
c000abe6:	66 90                	xchg   ax,ax
c000abe8:	e8 93 a5 00 00       	call   c0015180 <KeRestorePreemption()>
c000abed:	31 c0                	xor    eax,eax
c000abef:	90                   	nop
c000abf0:	83 c4 1c             	add    esp,0x1c
c000abf3:	5b                   	pop    ebx
c000abf4:	5e                   	pop    esi
c000abf5:	5f                   	pop    edi
c000abf6:	5d                   	pop    ebp
c000abf7:	c3                   	ret    

c000abf8 <VCache::read(unsigned long long, int, void*)>:
c000abf8:	55                   	push   ebp
c000abf9:	57                   	push   edi
c000abfa:	56                   	push   esi
c000abfb:	53                   	push   ebx
c000abfc:	83 ec 1c             	sub    esp,0x1c
c000abff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ac03:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ac07:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ac0b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ac0f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000ac13:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac16:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac1a:	e8 39 a5 00 00       	call   c0015158 <KeDisablePreemption()>
c000ac1f:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ac23:	74 0f                	je     c000ac34 <VCache::read(unsigned long long, int, void*)+0x3c>
c000ac25:	83 ec 0c             	sub    esp,0xc
c000ac28:	53                   	push   ebx
c000ac29:	e8 0e fe ff ff       	call   c000aa3c <VCache::writeWriteBuffer()>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	8d 76 00             	lea    esi,[esi+0x0]
c000ac34:	83 fe 01             	cmp    esi,0x1
c000ac37:	0f 85 8b 00 00 00    	jne    c000acc8 <VCache::read(unsigned long long, int, void*)+0xd0>
c000ac3d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ac40:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000ac47:	75 7f                	jne    c000acc8 <VCache::read(unsigned long long, int, void*)+0xd0>
c000ac49:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c000ac4c:	89 d1                	mov    ecx,edx
c000ac4e:	f7 d9                	neg    ecx
c000ac50:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ac54:	89 cf                	mov    edi,ecx
c000ac56:	23 0c 24             	and    ecx,DWORD PTR [esp]
c000ac59:	c1 ff 1f             	sar    edi,0x1f
c000ac5c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ac60:	89 ce                	mov    esi,ecx
c000ac62:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ac66:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c000ac6a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ac6e:	89 cf                	mov    edi,ecx
c000ac70:	74 32                	je     c000aca4 <VCache::read(unsigned long long, int, void*)+0xac>
c000ac72:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000ac75:	75 2d                	jne    c000aca4 <VCache::read(unsigned long long, int, void*)+0xac>
c000ac77:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c000ac7a:	75 28                	jne    c000aca4 <VCache::read(unsigned long long, int, void*)+0xac>
c000ac7c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ac7f:	89 ef                	mov    edi,ebp
c000ac81:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ac87:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ac8a:	8d 70 ff             	lea    esi,[eax-0x1]
c000ac8d:	23 34 24             	and    esi,DWORD PTR [esp]
c000ac90:	0f af f1             	imul   esi,ecx
c000ac93:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000ac96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ac98:	e8 e3 a4 00 00       	call   c0015180 <KeRestorePreemption()>
c000ac9d:	31 c0                	xor    eax,eax
c000ac9f:	eb 57                	jmp    c000acf8 <VCache::read(unsigned long long, int, void*)+0x100>
c000aca1:	8d 76 00             	lea    esi,[esi+0x0]
c000aca4:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000aca8:	83 ec 0c             	sub    esp,0xc
c000acab:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c000acae:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c000acb1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000acb3:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000acb6:	52                   	push   edx
c000acb7:	57                   	push   edi
c000acb8:	56                   	push   esi
c000acb9:	50                   	push   eax
c000acba:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000acbd:	83 c4 20             	add    esp,0x20
c000acc0:	85 c0                	test   eax,eax
c000acc2:	75 34                	jne    c000acf8 <VCache::read(unsigned long long, int, void*)+0x100>
c000acc4:	eb b6                	jmp    c000ac7c <VCache::read(unsigned long long, int, void*)+0x84>
c000acc6:	66 90                	xchg   ax,ax
c000acc8:	83 ec 0c             	sub    esp,0xc
c000accb:	53                   	push   ebx
c000accc:	e8 5b fd ff ff       	call   c000aa2c <VCache::invalidateReadBuffer()>
c000acd1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000acd4:	8b 10                	mov    edx,DWORD PTR [eax]
c000acd6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000acd9:	56                   	push   esi
c000acda:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acde:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ace2:	50                   	push   eax
c000ace3:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000ace6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000acea:	83 c4 20             	add    esp,0x20
c000aced:	e8 8e a4 00 00       	call   c0015180 <KeRestorePreemption()>
c000acf2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acf5:	8d 76 00             	lea    esi,[esi+0x0]
c000acf8:	83 c4 1c             	add    esp,0x1c
c000acfb:	5b                   	pop    ebx
c000acfc:	5e                   	pop    esi
c000acfd:	5f                   	pop    edi
c000acfe:	5d                   	pop    ebp
c000acff:	c3                   	ret    

c000ad00 <Video::putrect(int, int, int, int, unsigned int)>:
c000ad00:	55                   	push   ebp
c000ad01:	57                   	push   edi
c000ad02:	56                   	push   esi
c000ad03:	53                   	push   ebx
c000ad04:	83 ec 1c             	sub    esp,0x1c
c000ad07:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ad0b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ad0f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ad13:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ad17:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ad1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ad1f:	01 df                	add    edi,ebx
c000ad21:	39 fb                	cmp    ebx,edi
c000ad23:	7d 1f                	jge    c000ad44 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ad25:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ad29:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ad2d:	7d 12                	jge    c000ad41 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ad2f:	8b 16                	mov    edx,DWORD PTR [esi]
c000ad31:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad35:	53                   	push   ebx
c000ad36:	55                   	push   ebp
c000ad37:	45                   	inc    ebp
c000ad38:	56                   	push   esi
c000ad39:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ad3c:	83 c4 10             	add    esp,0x10
c000ad3f:	eb e8                	jmp    c000ad29 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ad41:	43                   	inc    ebx
c000ad42:	eb dd                	jmp    c000ad21 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ad44:	83 c4 1c             	add    esp,0x1c
c000ad47:	5b                   	pop    ebx
c000ad48:	5e                   	pop    esi
c000ad49:	5f                   	pop    edi
c000ad4a:	5d                   	pop    ebp
c000ad4b:	c3                   	ret    

c000ad4c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ad4c:	55                   	push   ebp
c000ad4d:	57                   	push   edi
c000ad4e:	31 ff                	xor    edi,edi
c000ad50:	56                   	push   esi
c000ad51:	53                   	push   ebx
c000ad52:	83 ec 1c             	sub    esp,0x1c
c000ad55:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ad59:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ad5d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ad64:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ad69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad6d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ad71:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ad75:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ad78:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ad7c:	01 f9                	add    ecx,edi
c000ad7e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ad82:	7d 2f                	jge    c000adb3 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ad84:	31 f6                	xor    esi,esi
c000ad86:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ad8a:	01 f2                	add    edx,esi
c000ad8c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ad90:	7d 1a                	jge    c000adac <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ad92:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ad95:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ad98:	46                   	inc    esi
c000ad99:	51                   	push   ecx
c000ad9a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ad9e:	52                   	push   edx
c000ad9f:	55                   	push   ebp
c000ada0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ada3:	83 c4 10             	add    esp,0x10
c000ada6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000adaa:	eb da                	jmp    c000ad86 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000adac:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000adb0:	47                   	inc    edi
c000adb1:	eb c5                	jmp    c000ad78 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000adb3:	83 c4 1c             	add    esp,0x1c
c000adb6:	5b                   	pop    ebx
c000adb7:	5e                   	pop    esi
c000adb8:	5f                   	pop    edi
c000adb9:	5d                   	pop    ebp
c000adba:	c3                   	ret    
c000adbb:	90                   	nop

c000adbc <Video::blit(unsigned int*, int, int, int, int)>:
c000adbc:	55                   	push   ebp
c000adbd:	ba 00 00 00 00       	mov    edx,0x0
c000adc2:	57                   	push   edi
c000adc3:	56                   	push   esi
c000adc4:	53                   	push   ebx
c000adc5:	83 ec 1c             	sub    esp,0x1c
c000adc8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000adcc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000add0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000add4:	85 c0                	test   eax,eax
c000add6:	0f 49 d0             	cmovns edx,eax
c000add9:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000ade0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ade4:	89 eb                	mov    ebx,ebp
c000ade6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000adea:	01 ea                	add    edx,ebp
c000adec:	39 da                	cmp    edx,ebx
c000adee:	7e 54                	jle    c000ae44 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000adf0:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000adf6:	7c 4c                	jl     c000ae44 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000adf8:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000adfc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ae00:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ae04:	01 c1                	add    ecx,eax
c000ae06:	39 f9                	cmp    ecx,edi
c000ae08:	7e 2f                	jle    c000ae39 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000ae0a:	83 c2 04             	add    edx,0x4
c000ae0d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ae13:	7c 21                	jl     c000ae36 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000ae15:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ae19:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ae1b:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000ae1e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000ae22:	55                   	push   ebp
c000ae23:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ae27:	56                   	push   esi
c000ae28:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ae2b:	83 c4 10             	add    esp,0x10
c000ae2e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ae32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae36:	47                   	inc    edi
c000ae37:	eb c7                	jmp    c000ae00 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000ae39:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ae3d:	43                   	inc    ebx
c000ae3e:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000ae42:	eb a2                	jmp    c000ade6 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000ae44:	83 c4 1c             	add    esp,0x1c
c000ae47:	5b                   	pop    ebx
c000ae48:	5e                   	pop    esi
c000ae49:	5f                   	pop    edi
c000ae4a:	5d                   	pop    ebp
c000ae4b:	c3                   	ret    

c000ae4c <Video::clearScreen(unsigned int)>:
c000ae4c:	57                   	push   edi
c000ae4d:	56                   	push   esi
c000ae4e:	53                   	push   ebx
c000ae4f:	31 db                	xor    ebx,ebx
c000ae51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ae55:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ae5b:	7e 1f                	jle    c000ae7c <Video::clearScreen(unsigned int)+0x30>
c000ae5d:	31 ff                	xor    edi,edi
c000ae5f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ae65:	7e 12                	jle    c000ae79 <Video::clearScreen(unsigned int)+0x2d>
c000ae67:	8b 06                	mov    eax,DWORD PTR [esi]
c000ae69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6d:	53                   	push   ebx
c000ae6e:	57                   	push   edi
c000ae6f:	47                   	inc    edi
c000ae70:	56                   	push   esi
c000ae71:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ae74:	83 c4 10             	add    esp,0x10
c000ae77:	eb e6                	jmp    c000ae5f <Video::clearScreen(unsigned int)+0x13>
c000ae79:	43                   	inc    ebx
c000ae7a:	eb d9                	jmp    c000ae55 <Video::clearScreen(unsigned int)+0x9>
c000ae7c:	5b                   	pop    ebx
c000ae7d:	5e                   	pop    esi
c000ae7e:	5f                   	pop    edi
c000ae7f:	c3                   	ret    

c000ae80 <Video::putpixel(int, int, unsigned int)>:
c000ae80:	c7 44 24 04 64 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021b64
c000ae88:	e9 89 3d 00 00       	jmp    c000ec16 <KePanic(char const*)>
c000ae8d:	90                   	nop

c000ae8e <Video::readPixelApprox(int, int)>:
c000ae8e:	83 ec 18             	sub    esp,0x18
c000ae91:	68 85 1b 02 c0       	push   0xc0021b85
c000ae96:	e8 7b 3d 00 00       	call   c000ec16 <KePanic(char const*)>
c000ae9b:	31 c0                	xor    eax,eax
c000ae9d:	83 c4 1c             	add    esp,0x1c
c000aea0:	c3                   	ret    
c000aea1:	90                   	nop

c000aea2 <Video::Video(char const*)>:
c000aea2:	83 ec 0c             	sub    esp,0xc
c000aea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea9:	83 ec 08             	sub    esp,0x8
c000aeac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeb0:	50                   	push   eax
c000aeb1:	e8 f2 e2 ff ff       	call   c00091a8 <Device::Device(char const*)>
c000aeb6:	83 c4 10             	add    esp,0x10
c000aeb9:	ba 28 1c 02 c0       	mov    edx,0xc0021c28
c000aebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec2:	89 10                	mov    DWORD PTR [eax],edx
c000aec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000aed2:	90                   	nop
c000aed3:	83 c4 0c             	add    esp,0xc
c000aed6:	c3                   	ret    
c000aed7:	90                   	nop

c000aed8 <Video::~Video()>:
c000aed8:	83 ec 0c             	sub    esp,0xc
c000aedb:	ba 28 1c 02 c0       	mov    edx,0xc0021c28
c000aee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee4:	89 10                	mov    DWORD PTR [eax],edx
c000aee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeea:	83 ec 0c             	sub    esp,0xc
c000aeed:	50                   	push   eax
c000aeee:	e8 55 e0 ff ff       	call   c0008f48 <Device::~Device()>
c000aef3:	83 c4 10             	add    esp,0x10
c000aef6:	90                   	nop
c000aef7:	83 c4 0c             	add    esp,0xc
c000aefa:	c3                   	ret    
c000aefb:	90                   	nop

c000aefc <Video::~Video()>:
c000aefc:	83 ec 0c             	sub    esp,0xc
c000aeff:	83 ec 0c             	sub    esp,0xc
c000af02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af06:	e8 cd ff ff ff       	call   c000aed8 <Video::~Video()>
c000af0b:	83 c4 10             	add    esp,0x10
c000af0e:	83 ec 08             	sub    esp,0x8
c000af11:	68 64 01 00 00       	push   0x164
c000af16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af1a:	e8 3c 17 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c000af1f:	83 c4 10             	add    esp,0x10
c000af22:	83 c4 0c             	add    esp,0xc
c000af25:	c3                   	ret    

c000af26 <Video::isMonochrome()>:
c000af26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af2a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000af30:	c3                   	ret    
c000af31:	90                   	nop

c000af32 <Video::getWidth()>:
c000af32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af36:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000af3c:	c3                   	ret    
c000af3d:	90                   	nop

c000af3e <Video::getHeight()>:
c000af3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af42:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000af48:	c3                   	ret    
c000af49:	90                   	nop

c000af4a <Video::drawCursor(int, int, unsigned int*, int)>:
c000af4a:	55                   	push   ebp
c000af4b:	57                   	push   edi
c000af4c:	56                   	push   esi
c000af4d:	53                   	push   ebx
c000af4e:	83 ec 2c             	sub    esp,0x2c
c000af51:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000af55:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000af59:	83 f8 01             	cmp    eax,0x1
c000af5c:	19 c9                	sbb    ecx,ecx
c000af5e:	31 db                	xor    ebx,ebx
c000af60:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000af64:	89 ce                	mov    esi,ecx
c000af66:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000af6e:	f7 d6                	not    esi
c000af70:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000af76:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000af7a:	01 d8                	add    eax,ebx
c000af7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000af80:	57                   	push   edi
c000af81:	e8 b8 ff ff ff       	call   c000af3e <Video::getHeight()>
c000af86:	59                   	pop    ecx
c000af87:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000af8b:	7e 70                	jle    c000affd <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000af8d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000af91:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000af95:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000af98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000af9c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000afa0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000afa7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afab:	89 e8                	mov    eax,ebp
c000afad:	83 c0 20             	add    eax,0x20
c000afb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000afb4:	57                   	push   edi
c000afb5:	e8 78 ff ff ff       	call   c000af32 <Video::getWidth()>
c000afba:	5a                   	pop    edx
c000afbb:	39 c5                	cmp    ebp,eax
c000afbd:	7d 34                	jge    c000aff3 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000afbf:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000afc4:	74 05                	je     c000afcb <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000afc6:	8b 07                	mov    eax,DWORD PTR [edi]
c000afc8:	56                   	push   esi
c000afc9:	eb 0d                	jmp    c000afd8 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000afcb:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000afd0:	74 12                	je     c000afe4 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000afd2:	8b 07                	mov    eax,DWORD PTR [edi]
c000afd4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000afd8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afdc:	55                   	push   ebp
c000afdd:	57                   	push   edi
c000afde:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000afe1:	83 c4 10             	add    esp,0x10
c000afe4:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000afe8:	45                   	inc    ebp
c000afe9:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000afed:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000aff1:	75 c1                	jne    c000afb4 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000aff3:	43                   	inc    ebx
c000aff4:	83 fb 20             	cmp    ebx,0x20
c000aff7:	0f 85 79 ff ff ff    	jne    c000af76 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000affd:	83 c4 2c             	add    esp,0x2c
c000b000:	5b                   	pop    ebx
c000b001:	5e                   	pop    esi
c000b002:	5f                   	pop    edi
c000b003:	5d                   	pop    ebp
c000b004:	c3                   	ret    
c000b005:	90                   	nop

c000b006 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000b006:	55                   	push   ebp
c000b007:	57                   	push   edi
c000b008:	56                   	push   esi
c000b009:	53                   	push   ebx
c000b00a:	83 ec 48             	sub    esp,0x48
c000b00d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000b011:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000b015:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000b019:	c1 e0 08             	shl    eax,0x8
c000b01c:	01 d0                	add    eax,edx
c000b01e:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000b022:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b026:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000b02a:	c1 e0 08             	shl    eax,0x8
c000b02d:	01 d0                	add    eax,edx
c000b02f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b037:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c000b03c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b040:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b044:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000b04b:	50                   	push   eax
c000b04c:	e8 7f 38 00 00       	call   c000e8d0 <malloc>
c000b051:	83 c4 10             	add    esp,0x10
c000b054:	85 c0                	test   eax,eax
c000b056:	89 c5                	mov    ebp,eax
c000b058:	75 10                	jne    c000b06a <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c000b05a:	83 ec 0c             	sub    esp,0xc
c000b05d:	68 b0 1b 02 c0       	push   0xc0021bb0
c000b062:	e8 af 3b 00 00       	call   c000ec16 <KePanic(char const*)>
c000b067:	83 c4 10             	add    esp,0x10
c000b06a:	52                   	push   edx
c000b06b:	bf 12 00 00 00       	mov    edi,0x12
c000b070:	52                   	push   edx
c000b071:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b075:	50                   	push   eax
c000b076:	68 c0 1b 02 c0       	push   0xc0021bc0
c000b07b:	e8 ce be ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b080:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000b083:	83 e0 20             	and    eax,0x20
c000b086:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000b08a:	85 c0                	test   eax,eax
c000b08c:	59                   	pop    ecx
c000b08d:	0f 94 c0             	sete   al
c000b090:	0f b6 c0             	movzx  eax,al
c000b093:	5e                   	pop    esi
c000b094:	50                   	push   eax
c000b095:	68 ca 1b 02 c0       	push   0xc0021bca
c000b09a:	e8 af be ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b09f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000b0a3:	83 c4 10             	add    esp,0x10
c000b0a6:	85 c0                	test   eax,eax
c000b0a8:	89 c2                	mov    edx,eax
c000b0aa:	74 11                	je     c000b0bd <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c000b0ac:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c000b0b0:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000b0b4:	c1 ff 03             	sar    edi,0x3
c000b0b7:	0f af f9             	imul   edi,ecx
c000b0ba:	83 c7 12             	add    edi,0x12
c000b0bd:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000b0c2:	74 07                	je     c000b0cb <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c000b0c4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b0c9:	75 12                	jne    c000b0dd <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c000b0cb:	83 ec 0c             	sub    esp,0xc
c000b0ce:	68 d8 1b 02 c0       	push   0xc0021bd8
c000b0d3:	e8 76 be ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b0d8:	e9 aa 02 00 00       	jmp    c000b387 <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c000b0dd:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000b0e1:	83 f9 02             	cmp    ecx,0x2
c000b0e4:	74 0e                	je     c000b0f4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c000b0e6:	83 f9 0a             	cmp    ecx,0xa
c000b0e9:	0f 84 d1 00 00 00    	je     c000b1c0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c000b0ef:	e9 7e 02 00 00       	jmp    c000b372 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c000b0f4:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b0f9:	75 0e                	jne    c000b109 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000b0fb:	84 d2                	test   dl,dl
c000b0fd:	75 0a                	jne    c000b109 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000b0ff:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b102:	83 e8 18             	sub    eax,0x18
c000b105:	a8 f7                	test   al,0xf7
c000b107:	74 0d                	je     c000b116 <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c000b109:	83 ec 0c             	sub    esp,0xc
c000b10c:	68 ed 1b 02 c0       	push   0xc0021bed
c000b111:	e9 64 02 00 00       	jmp    c000b37a <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000b116:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b11e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000b123:	31 c0                	xor    eax,eax
c000b125:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000b129:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000b131:	89 c6                	mov    esi,eax
c000b133:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b138:	75 15                	jne    c000b14f <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000b13a:	99                   	cdq    
c000b13b:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000b13f:	85 d2                	test   edx,edx
c000b141:	75 0c                	jne    c000b14f <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000b143:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000b147:	29 c6                	sub    esi,eax
c000b149:	4e                   	dec    esi
c000b14a:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c000b14f:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b153:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b15b:	75 0c                	jne    c000b169 <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c000b15d:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c000b162:	c1 e2 18             	shl    edx,0x18
c000b165:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b169:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c000b16e:	8d 46 01             	lea    eax,[esi+0x1]
c000b171:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000b175:	c1 e1 10             	shl    ecx,0x10
c000b178:	89 ca                	mov    edx,ecx
c000b17a:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c000b17f:	c1 e1 08             	shl    ecx,0x8
c000b182:	09 d1                	or     ecx,edx
c000b184:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000b188:	09 d1                	or     ecx,edx
c000b18a:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000b18e:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c000b192:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000b196:	c1 fa 03             	sar    edx,0x3
c000b199:	01 d7                	add    edi,edx
c000b19b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b19f:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c000b1a3:	7e 04                	jle    c000b1a9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c000b1a5:	89 c6                	mov    esi,eax
c000b1a7:	eb 8a                	jmp    c000b133 <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c000b1a9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000b1ad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b1b1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000b1b5:	0f 8f 6e ff ff ff    	jg     c000b129 <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c000b1bb:	e9 ce 01 00 00       	jmp    c000b38e <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000b1c0:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b1c5:	75 0e                	jne    c000b1d5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000b1c7:	85 c0                	test   eax,eax
c000b1c9:	75 0a                	jne    c000b1d5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000b1cb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b1ce:	83 e8 18             	sub    eax,0x18
c000b1d1:	a8 f7                	test   al,0xf7
c000b1d3:	74 0d                	je     c000b1e2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c000b1d5:	83 ec 0c             	sub    esp,0xc
c000b1d8:	68 fb 1b 02 c0       	push   0xc0021bfb
c000b1dd:	e9 98 01 00 00       	jmp    c000b37a <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000b1e2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000b1ea:	31 c9                	xor    ecx,ecx
c000b1ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b1f4:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c000b1f8:	0f 8d 90 01 00 00    	jge    c000b38e <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000b1fe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b202:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c000b206:	0f 8e 82 01 00 00    	jle    c000b38e <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000b20c:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000b210:	8d 77 01             	lea    esi,[edi+0x1]
c000b213:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b217:	83 fa 7f             	cmp    edx,0x7f
c000b21a:	89 d0                	mov    eax,edx
c000b21c:	0f 8e a3 00 00 00    	jle    c000b2c5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c000b222:	83 e0 7f             	and    eax,0x7f
c000b225:	31 d2                	xor    edx,edx
c000b227:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b22b:	40                   	inc    eax
c000b22c:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b234:	75 08                	jne    c000b23e <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c000b236:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c000b23b:	c1 e2 18             	shl    edx,0x18
c000b23e:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c000b243:	c1 e0 10             	shl    eax,0x10
c000b246:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b24a:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c000b24f:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000b253:	c1 e0 08             	shl    eax,0x8
c000b256:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000b25a:	09 f8                	or     eax,edi
c000b25c:	31 ff                	xor    edi,edi
c000b25e:	09 d0                	or     eax,edx
c000b260:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b264:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000b269:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26d:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b272:	75 1d                	jne    c000b291 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000b274:	89 c8                	mov    eax,ecx
c000b276:	99                   	cdq    
c000b277:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000b27b:	85 d2                	test   edx,edx
c000b27d:	75 12                	jne    c000b291 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000b27f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b283:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000b287:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000b28b:	49                   	dec    ecx
c000b28c:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000b291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b295:	8d 51 01             	lea    edx,[ecx+0x1]
c000b298:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c000b29c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000b2a0:	8d 47 01             	lea    eax,[edi+0x1]
c000b2a3:	7e 06                	jle    c000b2ab <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c000b2a5:	89 c7                	mov    edi,eax
c000b2a7:	89 d1                	mov    ecx,edx
c000b2a9:	eb c2                	jmp    c000b26d <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c000b2ab:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b2af:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b2b3:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000b2b7:	c1 f8 03             	sar    eax,0x3
c000b2ba:	01 c6                	add    esi,eax
c000b2bc:	89 d1                	mov    ecx,edx
c000b2be:	89 f7                	mov    edi,esi
c000b2c0:	e9 2f ff ff ff       	jmp    c000b1f4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c000b2c5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b2cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b2d1:	40                   	inc    eax
c000b2d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2d6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000b2db:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b2df:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000b2e4:	75 1d                	jne    c000b303 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000b2e6:	89 c8                	mov    eax,ecx
c000b2e8:	99                   	cdq    
c000b2e9:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000b2ed:	85 d2                	test   edx,edx
c000b2ef:	75 12                	jne    c000b303 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000b2f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b2f5:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000b2f9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000b2fd:	49                   	dec    ecx
c000b2fe:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000b303:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b307:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000b30f:	75 0c                	jne    c000b31d <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c000b311:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c000b316:	c1 e7 18             	shl    edi,0x18
c000b319:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000b31d:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000b322:	8d 51 01             	lea    edx,[ecx+0x1]
c000b325:	c1 e0 10             	shl    eax,0x10
c000b328:	89 c7                	mov    edi,eax
c000b32a:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c000b32f:	c1 e0 08             	shl    eax,0x8
c000b332:	09 f8                	or     eax,edi
c000b334:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000b338:	09 f8                	or     eax,edi
c000b33a:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000b33e:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000b342:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000b346:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b34a:	c1 f8 03             	sar    eax,0x3
c000b34d:	01 c6                	add    esi,eax
c000b34f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b353:	40                   	inc    eax
c000b354:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c000b358:	7e 0b                	jle    c000b365 <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c000b35a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b35e:	89 d1                	mov    ecx,edx
c000b360:	e9 7a ff ff ff       	jmp    c000b2df <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c000b365:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000b369:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000b36d:	e9 4a ff ff ff       	jmp    c000b2bc <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c000b372:	50                   	push   eax
c000b373:	50                   	push   eax
c000b374:	51                   	push   ecx
c000b375:	68 0a 1c 02 c0       	push   0xc0021c0a
c000b37a:	e8 cf bb ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b37f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b382:	e8 59 35 00 00       	call   c000e8e0 <free>
c000b387:	83 c4 10             	add    esp,0x10
c000b38a:	31 ed                	xor    ebp,ebp
c000b38c:	eb 14                	jmp    c000b3a2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c000b38e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b392:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000b396:	89 18                	mov    DWORD PTR [eax],ebx
c000b398:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b39c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000b3a0:	89 18                	mov    DWORD PTR [eax],ebx
c000b3a2:	83 c4 3c             	add    esp,0x3c
c000b3a5:	89 e8                	mov    eax,ebp
c000b3a7:	5b                   	pop    ebx
c000b3a8:	5e                   	pop    esi
c000b3a9:	5f                   	pop    edi
c000b3aa:	5d                   	pop    ebp
c000b3ab:	c3                   	ret    

c000b3ac <Video::putTGA(int, int, unsigned char*, int)>:
c000b3ac:	55                   	push   ebp
c000b3ad:	57                   	push   edi
c000b3ae:	56                   	push   esi
c000b3af:	53                   	push   ebx
c000b3b0:	83 ec 28             	sub    esp,0x28
c000b3b3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b3b7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000b3bb:	50                   	push   eax
c000b3bc:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b3c0:	50                   	push   eax
c000b3c1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b3c5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b3c9:	55                   	push   ebp
c000b3ca:	e8 37 fc ff ff       	call   c000b006 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000b3cf:	83 c4 20             	add    esp,0x20
c000b3d2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b3d6:	85 c0                	test   eax,eax
c000b3d8:	74 3b                	je     c000b415 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000b3da:	89 c6                	mov    esi,eax
c000b3dc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b3e0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b3e4:	39 d8                	cmp    eax,ebx
c000b3e6:	7e 2d                	jle    c000b415 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000b3e8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b3ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b3f0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b3f4:	39 f8                	cmp    eax,edi
c000b3f6:	7e 1a                	jle    c000b412 <Video::putTGA(int, int, unsigned char*, int)+0x66>
c000b3f8:	83 c6 04             	add    esi,0x4
c000b3fb:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000b3fe:	85 c0                	test   eax,eax
c000b400:	79 0d                	jns    c000b40f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000b402:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000b405:	50                   	push   eax
c000b406:	53                   	push   ebx
c000b407:	57                   	push   edi
c000b408:	55                   	push   ebp
c000b409:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b40c:	83 c4 10             	add    esp,0x10
c000b40f:	47                   	inc    edi
c000b410:	eb da                	jmp    c000b3ec <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000b412:	43                   	inc    ebx
c000b413:	eb c7                	jmp    c000b3dc <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000b415:	83 c4 1c             	add    esp,0x1c
c000b418:	5b                   	pop    ebx
c000b419:	5e                   	pop    esi
c000b41a:	5f                   	pop    edi
c000b41b:	5d                   	pop    ebp
c000b41c:	c3                   	ret    
c000b41d:	66 90                	xchg   ax,ax
c000b41f:	90                   	nop

c000b420 <ACPI::close(int, int, void*)>:
c000b420:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b425:	c3                   	ret    
c000b426:	66 90                	xchg   ax,ax

c000b428 <loadACPITables(unsigned char*)>:
c000b428:	57                   	push   edi
c000b429:	56                   	push   esi
c000b42a:	53                   	push   ebx
c000b42b:	83 ec 60             	sub    esp,0x60
c000b42e:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000b433:	0f 84 43 02 00 00    	je     c000b67c <loadACPITables(unsigned char*)+0x254>
c000b439:	a0 20 9a 02 c0       	mov    al,ds:0xc0029a20
c000b43e:	0f b6 c0             	movzx  eax,al
c000b441:	85 c0                	test   eax,eax
c000b443:	74 7b                	je     c000b4c0 <loadACPITables(unsigned char*)+0x98>
c000b445:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b449:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000b44d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b451:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b454:	83 e8 24             	sub    eax,0x24
c000b457:	c1 e8 03             	shr    eax,0x3
c000b45a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b45e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000b466:	66 90                	xchg   ax,ax
c000b468:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b46c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000b470:	0f 8d ba 00 00 00    	jge    c000b530 <loadACPITables(unsigned char*)+0x108>
c000b476:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b47a:	83 c0 24             	add    eax,0x24
c000b47d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b481:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000b485:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b489:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b48d:	c1 e0 03             	shl    eax,0x3
c000b490:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000b494:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b498:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b49b:	8b 00                	mov    eax,DWORD PTR [eax]
c000b49d:	89 c1                	mov    ecx,eax
c000b49f:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b4a4:	8d 50 01             	lea    edx,[eax+0x1]
c000b4a7:	89 15 00 98 02 c0    	mov    DWORD PTR ds:0xc0029800,edx
c000b4ad:	89 ca                	mov    edx,ecx
c000b4af:	89 14 c5 24 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67dc],edx
c000b4b6:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000b4bb:	eb ab                	jmp    c000b468 <loadACPITables(unsigned char*)+0x40>
c000b4bd:	8d 76 00             	lea    esi,[esi+0x0]
c000b4c0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b4c4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b4c8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b4cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b4cf:	83 e8 24             	sub    eax,0x24
c000b4d2:	c1 e8 02             	shr    eax,0x2
c000b4d5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b4d9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000b4e1:	8d 76 00             	lea    esi,[esi+0x0]
c000b4e4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b4e8:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000b4ec:	7d 42                	jge    c000b530 <loadACPITables(unsigned char*)+0x108>
c000b4ee:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b4f2:	83 c0 24             	add    eax,0x24
c000b4f5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b4f9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b4fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000b501:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b505:	c1 e0 02             	shl    eax,0x2
c000b508:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b50c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b510:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b512:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b517:	8d 50 01             	lea    edx,[eax+0x1]
c000b51a:	89 15 00 98 02 c0    	mov    DWORD PTR ds:0xc0029800,edx
c000b520:	89 ca                	mov    edx,ecx
c000b522:	89 14 c5 24 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67dc],edx
c000b529:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000b52e:	eb b4                	jmp    c000b4e4 <loadACPITables(unsigned char*)+0xbc>
c000b530:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000b538:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b53d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000b541:	0f 8d 39 01 00 00    	jge    c000b680 <loadACPITables(unsigned char*)+0x258>
c000b547:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b54b:	8b 04 c5 24 98 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd67dc]
c000b552:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b556:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b55a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b55e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b562:	25 ff 0f 00 00       	and    eax,0xfff
c000b567:	89 c6                	mov    esi,eax
c000b569:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b56f:	83 ec 0c             	sub    esp,0xc
c000b572:	6a 01                	push   0x1
c000b574:	e8 da 69 00 00       	call   c0011f53 <Virt::allocateKernelVirtualPages(int)>
c000b579:	83 c4 10             	add    esp,0x10
c000b57c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b580:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b586:	83 ec 0c             	sub    esp,0xc
c000b589:	6a 01                	push   0x1
c000b58b:	6a 01                	push   0x1
c000b58d:	50                   	push   eax
c000b58e:	52                   	push   edx
c000b58f:	53                   	push   ebx
c000b590:	e8 91 72 00 00       	call   c0012826 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b595:	83 c4 20             	add    esp,0x20
c000b598:	09 f0                	or     eax,esi
c000b59a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b59e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b5a2:	c1 e0 03             	shl    eax,0x3
c000b5a5:	05 20 98 02 c0       	add    eax,0xc0029820
c000b5aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b5b6:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000b5be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b5ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b5ce:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5d2:	89 c6                	mov    esi,eax
c000b5d4:	89 d7                	mov    edi,edx
c000b5d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b5d8:	89 c8                	mov    eax,ecx
c000b5da:	89 fa                	mov    edx,edi
c000b5dc:	89 f3                	mov    ebx,esi
c000b5de:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000b5e2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b5e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b5ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b5f1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b5f9:	05 00 10 00 00       	add    eax,0x1000
c000b5fe:	c1 e8 0c             	shr    eax,0xc
c000b601:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b605:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b609:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b60d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b611:	25 ff 0f 00 00       	and    eax,0xfff
c000b616:	89 c6                	mov    esi,eax
c000b618:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b61e:	83 ec 0c             	sub    esp,0xc
c000b621:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b625:	e8 29 69 00 00       	call   c0011f53 <Virt::allocateKernelVirtualPages(int)>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b631:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b637:	83 ec 0c             	sub    esp,0xc
c000b63a:	6a 01                	push   0x1
c000b63c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b640:	50                   	push   eax
c000b641:	52                   	push   edx
c000b642:	53                   	push   ebx
c000b643:	e8 de 71 00 00       	call   c0012826 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b648:	83 c4 20             	add    esp,0x20
c000b64b:	09 f0                	or     eax,esi
c000b64d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b651:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b655:	83 ec 0c             	sub    esp,0xc
c000b658:	50                   	push   eax
c000b659:	e8 f3 6b 00 00       	call   c0012251 <Virt::freeKernelVirtualPages(unsigned long)>
c000b65e:	83 c4 10             	add    esp,0x10
c000b661:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b665:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b669:	89 14 c5 24 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67dc],edx
c000b670:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000b675:	e9 be fe ff ff       	jmp    c000b538 <loadACPITables(unsigned char*)+0x110>
c000b67a:	66 90                	xchg   ax,ax
c000b67c:	90                   	nop
c000b67d:	8d 76 00             	lea    esi,[esi+0x0]
c000b680:	83 c4 60             	add    esp,0x60
c000b683:	5b                   	pop    ebx
c000b684:	5e                   	pop    esi
c000b685:	5f                   	pop    edi
c000b686:	c3                   	ret    
c000b687:	90                   	nop

c000b688 <findRSDT(unsigned char*)>:
c000b688:	57                   	push   edi
c000b689:	56                   	push   esi
c000b68a:	53                   	push   ebx
c000b68b:	83 ec 50             	sub    esp,0x50
c000b68e:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000b693:	85 c0                	test   eax,eax
c000b695:	75 0d                	jne    c000b6a4 <findRSDT(unsigned char*)+0x1c>
c000b697:	b8 00 00 00 00       	mov    eax,0x0
c000b69c:	e9 2b 01 00 00       	jmp    c000b7cc <findRSDT(unsigned char*)+0x144>
c000b6a1:	8d 76 00             	lea    esi,[esi+0x0]
c000b6a4:	89 e0                	mov    eax,esp
c000b6a6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b6aa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b6ae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b6b2:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000b6ba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b6be:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b6c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b6c6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b6ca:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000b6ce:	89 c6                	mov    esi,eax
c000b6d0:	89 d7                	mov    edi,edx
c000b6d2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b6d4:	89 c8                	mov    eax,ecx
c000b6d6:	89 fa                	mov    edx,edi
c000b6d8:	89 f3                	mov    ebx,esi
c000b6da:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000b6de:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000b6e2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b6e6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000b6ea:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000b6ee:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000b6f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b6fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b6fe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b706:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b70a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b70e:	25 ff 0f 00 00       	and    eax,0xfff
c000b713:	89 c6                	mov    esi,eax
c000b715:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b71b:	83 ec 0c             	sub    esp,0xc
c000b71e:	6a 02                	push   0x2
c000b720:	e8 2e 68 00 00       	call   c0011f53 <Virt::allocateKernelVirtualPages(int)>
c000b725:	83 c4 10             	add    esp,0x10
c000b728:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000b72c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b732:	83 ec 0c             	sub    esp,0xc
c000b735:	6a 01                	push   0x1
c000b737:	6a 02                	push   0x2
c000b739:	50                   	push   eax
c000b73a:	52                   	push   edx
c000b73b:	53                   	push   ebx
c000b73c:	e8 e5 70 00 00       	call   c0012826 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b741:	83 c4 20             	add    esp,0x20
c000b744:	09 f0                	or     eax,esi
c000b746:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b74a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b74e:	25 ff 0f 00 00       	and    eax,0xfff
c000b753:	89 c6                	mov    esi,eax
c000b755:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b75b:	83 ec 0c             	sub    esp,0xc
c000b75e:	6a 02                	push   0x2
c000b760:	e8 ee 67 00 00       	call   c0011f53 <Virt::allocateKernelVirtualPages(int)>
c000b765:	83 c4 10             	add    esp,0x10
c000b768:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000b76c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b772:	83 ec 0c             	sub    esp,0xc
c000b775:	6a 01                	push   0x1
c000b777:	6a 02                	push   0x2
c000b779:	50                   	push   eax
c000b77a:	52                   	push   edx
c000b77b:	53                   	push   ebx
c000b77c:	e8 a5 70 00 00       	call   c0012826 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b781:	83 c4 20             	add    esp,0x20
c000b784:	09 f0                	or     eax,esi
c000b786:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b78a:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b78f:	85 c0                	test   eax,eax
c000b791:	75 11                	jne    c000b7a4 <findRSDT(unsigned char*)+0x11c>
c000b793:	c6 05 20 9a 02 c0 00 	mov    BYTE PTR ds:0xc0029a20,0x0
c000b79a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b79e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b7a2:	eb 24                	jmp    c000b7c8 <findRSDT(unsigned char*)+0x140>
c000b7a4:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b7a9:	83 f8 02             	cmp    eax,0x2
c000b7ac:	75 12                	jne    c000b7c0 <findRSDT(unsigned char*)+0x138>
c000b7ae:	c6 05 20 9a 02 c0 01 	mov    BYTE PTR ds:0xc0029a20,0x1
c000b7b5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b7b9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b7bd:	eb 09                	jmp    c000b7c8 <findRSDT(unsigned char*)+0x140>
c000b7bf:	90                   	nop
c000b7c0:	b8 00 00 00 00       	mov    eax,0x0
c000b7c5:	eb 05                	jmp    c000b7cc <findRSDT(unsigned char*)+0x144>
c000b7c7:	90                   	nop
c000b7c8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000b7cc:	83 c4 50             	add    esp,0x50
c000b7cf:	5b                   	pop    ebx
c000b7d0:	5e                   	pop    esi
c000b7d1:	5f                   	pop    edi
c000b7d2:	c3                   	ret    
c000b7d3:	90                   	nop

c000b7d4 <findDataTable(unsigned char*, char*)>:
c000b7d4:	83 ec 1c             	sub    esp,0x1c
c000b7d7:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000b7dc:	75 0a                	jne    c000b7e8 <findDataTable(unsigned char*, char*)+0x14>
c000b7de:	b8 00 00 00 00       	mov    eax,0x0
c000b7e3:	eb 5f                	jmp    c000b844 <findDataTable(unsigned char*, char*)+0x70>
c000b7e5:	8d 76 00             	lea    esi,[esi+0x0]
c000b7e8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b7f0:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b7f5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000b7f9:	7d 41                	jge    c000b83c <findDataTable(unsigned char*, char*)+0x68>
c000b7fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b7ff:	c1 e0 03             	shl    eax,0x3
c000b802:	05 20 98 02 c0       	add    eax,0xc0029820
c000b807:	83 ec 04             	sub    esp,0x4
c000b80a:	6a 04                	push   0x4
c000b80c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b810:	50                   	push   eax
c000b811:	e8 6a 4b ff ff       	call   c0000380 <memcmp>
c000b816:	83 c4 10             	add    esp,0x10
c000b819:	85 c0                	test   eax,eax
c000b81b:	0f 94 c0             	sete   al
c000b81e:	0f b6 c0             	movzx  eax,al
c000b821:	85 c0                	test   eax,eax
c000b823:	74 0f                	je     c000b834 <findDataTable(unsigned char*, char*)+0x60>
c000b825:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b829:	8b 04 c5 24 98 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd67dc]
c000b830:	eb 12                	jmp    c000b844 <findDataTable(unsigned char*, char*)+0x70>
c000b832:	66 90                	xchg   ax,ax
c000b834:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000b839:	eb b5                	jmp    c000b7f0 <findDataTable(unsigned char*, char*)+0x1c>
c000b83b:	90                   	nop
c000b83c:	b8 00 00 00 00       	mov    eax,0x0
c000b841:	8d 76 00             	lea    esi,[esi+0x0]
c000b844:	83 c4 1c             	add    esp,0x1c
c000b847:	c3                   	ret    

c000b848 <scanMADT()>:
c000b848:	53                   	push   ebx
c000b849:	83 ec 38             	sub    esp,0x38
c000b84c:	c7 05 28 9a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029a28,0x0
c000b856:	c7 05 24 9a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029a24,0x0
c000b860:	e8 b9 c3 00 00       	call   c0017c1e <HalFindRSDP()>
c000b865:	a3 28 9a 02 c0       	mov    ds:0xc0029a28,eax
c000b86a:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000b86f:	85 c0                	test   eax,eax
c000b871:	0f 84 11 04 00 00    	je     c000bc88 <scanMADT()+0x440>
c000b877:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000b87c:	83 ec 0c             	sub    esp,0xc
c000b87f:	50                   	push   eax
c000b880:	e8 03 fe ff ff       	call   c000b688 <findRSDT(unsigned char*)>
c000b885:	83 c4 10             	add    esp,0x10
c000b888:	a3 24 9a 02 c0       	mov    ds:0xc0029a24,eax
c000b88d:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000b892:	85 c0                	test   eax,eax
c000b894:	0f 84 f2 03 00 00    	je     c000bc8c <scanMADT()+0x444>
c000b89a:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000b89f:	83 ec 0c             	sub    esp,0xc
c000b8a2:	50                   	push   eax
c000b8a3:	e8 80 fb ff ff       	call   c000b428 <loadACPITables(unsigned char*)>
c000b8a8:	83 c4 10             	add    esp,0x10
c000b8ab:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000b8b0:	83 ec 08             	sub    esp,0x8
c000b8b3:	68 6c 1c 02 c0       	push   0xc0021c6c
c000b8b8:	50                   	push   eax
c000b8b9:	e8 16 ff ff ff       	call   c000b7d4 <findDataTable(unsigned char*, char*)>
c000b8be:	83 c4 10             	add    esp,0x10
c000b8c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b8c5:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b8ca:	0f 84 c0 03 00 00    	je     c000bc90 <scanMADT()+0x448>
c000b8d0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b8d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b8dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b8df:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000b8e3:	0f 87 af 03 00 00    	ja     c000bc98 <scanMADT()+0x450>
c000b8e9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000b8f1:	0f 87 a1 03 00 00    	ja     c000bc98 <scanMADT()+0x450>
c000b8f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b8fb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b8ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b903:	8d 50 01             	lea    edx,[eax+0x1]
c000b906:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b90a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b90e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000b912:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000b916:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b91a:	8d 50 01             	lea    edx,[eax+0x1]
c000b91d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b921:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b925:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000b929:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000b92d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000b932:	83 f8 02             	cmp    eax,0x2
c000b935:	0f 86 59 03 00 00    	jbe    c000bc94 <scanMADT()+0x44c>
c000b93b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000b940:	85 c0                	test   eax,eax
c000b942:	75 58                	jne    c000b99c <scanMADT()+0x154>
c000b944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b948:	8d 50 01             	lea    edx,[eax+0x1]
c000b94b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b94f:	8a 15 20 9c 02 c0    	mov    dl,BYTE PTR ds:0xc0029c20
c000b955:	0f b6 d2             	movzx  edx,dl
c000b958:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b95c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b960:	88 82 60 9c 02 c0    	mov    BYTE PTR [edx-0x3ffd63a0],al
c000b966:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b96a:	8d 50 01             	lea    edx,[eax+0x1]
c000b96d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b971:	8a 15 20 9c 02 c0    	mov    dl,BYTE PTR ds:0xc0029c20
c000b977:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b97a:	88 0d 20 9c 02 c0    	mov    BYTE PTR ds:0xc0029c20,cl
c000b980:	0f b6 d2             	movzx  edx,dl
c000b983:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b987:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b98b:	88 82 40 9c 02 c0    	mov    BYTE PTR [edx-0x3ffd63c0],al
c000b991:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000b996:	e9 d9 02 00 00       	jmp    c000bc74 <scanMADT()+0x42c>
c000b99b:	90                   	nop
c000b99c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000b9a1:	83 f8 01             	cmp    eax,0x1
c000b9a4:	0f 85 1a 01 00 00    	jne    c000bac4 <scanMADT()+0x27c>
c000b9aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9ae:	8d 50 01             	lea    edx,[eax+0x1]
c000b9b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9b5:	8a 15 e0 9a 02 c0    	mov    dl,BYTE PTR ds:0xc0029ae0
c000b9bb:	0f b6 d2             	movzx  edx,dl
c000b9be:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b9c2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b9c6:	88 82 00 9b 02 c0    	mov    BYTE PTR [edx-0x3ffd6500],al
c000b9cc:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000b9d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b9d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9d9:	01 d0                	add    eax,edx
c000b9db:	83 c0 2c             	add    eax,0x2c
c000b9de:	8a 00                	mov    al,BYTE PTR [eax]
c000b9e0:	0f b6 d0             	movzx  edx,al
c000b9e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9e7:	8d 48 01             	lea    ecx,[eax+0x1]
c000b9ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b9ee:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000b9f2:	0f b6 c0             	movzx  eax,al
c000b9f5:	c1 e0 08             	shl    eax,0x8
c000b9f8:	89 d1                	mov    ecx,edx
c000b9fa:	09 c1                	or     ecx,eax
c000b9fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba00:	8d 50 02             	lea    edx,[eax+0x2]
c000ba03:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba07:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba0b:	0f b6 c0             	movzx  eax,al
c000ba0e:	c1 e0 10             	shl    eax,0x10
c000ba11:	09 c1                	or     ecx,eax
c000ba13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba17:	8d 50 03             	lea    edx,[eax+0x3]
c000ba1a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba1e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba22:	0f b6 c0             	movzx  eax,al
c000ba25:	c1 e0 18             	shl    eax,0x18
c000ba28:	09 c1                	or     ecx,eax
c000ba2a:	89 ca                	mov    edx,ecx
c000ba2c:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c000ba31:	0f b6 c0             	movzx  eax,al
c000ba34:	89 14 85 20 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd64e0],edx
c000ba3b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ba40:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ba44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba48:	01 d0                	add    eax,edx
c000ba4a:	83 c0 2c             	add    eax,0x2c
c000ba4d:	8a 00                	mov    al,BYTE PTR [eax]
c000ba4f:	0f b6 d0             	movzx  edx,al
c000ba52:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba56:	8d 48 01             	lea    ecx,[eax+0x1]
c000ba59:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba5d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ba61:	0f b6 c0             	movzx  eax,al
c000ba64:	c1 e0 08             	shl    eax,0x8
c000ba67:	89 d1                	mov    ecx,edx
c000ba69:	09 c1                	or     ecx,eax
c000ba6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba6f:	8d 50 02             	lea    edx,[eax+0x2]
c000ba72:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba76:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba7a:	0f b6 c0             	movzx  eax,al
c000ba7d:	c1 e0 10             	shl    eax,0x10
c000ba80:	09 c1                	or     ecx,eax
c000ba82:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba86:	8d 50 03             	lea    edx,[eax+0x3]
c000ba89:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba8d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba91:	0f b6 c0             	movzx  eax,al
c000ba94:	c1 e0 18             	shl    eax,0x18
c000ba97:	09 c1                	or     ecx,eax
c000ba99:	89 ca                	mov    edx,ecx
c000ba9b:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c000baa0:	0f b6 c0             	movzx  eax,al
c000baa3:	89 14 85 a0 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6460],edx
c000baaa:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000baaf:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c000bab4:	83 c0 01             	add    eax,0x1
c000bab7:	a2 e0 9a 02 c0       	mov    ds:0xc0029ae0,al
c000babc:	e9 b3 01 00 00       	jmp    c000bc74 <scanMADT()+0x42c>
c000bac1:	8d 76 00             	lea    esi,[esi+0x0]
c000bac4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bac9:	83 f8 02             	cmp    eax,0x2
c000bacc:	0f 85 ea 00 00 00    	jne    c000bbbc <scanMADT()+0x374>
c000bad2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bad6:	8d 50 01             	lea    edx,[eax+0x1]
c000bad9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000badd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bae1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bae5:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000bae9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000baed:	8d 50 01             	lea    edx,[eax+0x1]
c000baf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000baf4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000baf8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bafc:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000bb00:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb08:	01 d0                	add    eax,edx
c000bb0a:	83 c0 2c             	add    eax,0x2c
c000bb0d:	8a 00                	mov    al,BYTE PTR [eax]
c000bb0f:	0f b6 d0             	movzx  edx,al
c000bb12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb16:	8d 48 01             	lea    ecx,[eax+0x1]
c000bb19:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb1d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bb21:	0f b6 c0             	movzx  eax,al
c000bb24:	c1 e0 08             	shl    eax,0x8
c000bb27:	89 d1                	mov    ecx,edx
c000bb29:	09 c1                	or     ecx,eax
c000bb2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb2f:	8d 50 02             	lea    edx,[eax+0x2]
c000bb32:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb36:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bb3a:	0f b6 c0             	movzx  eax,al
c000bb3d:	c1 e0 10             	shl    eax,0x10
c000bb40:	09 c1                	or     ecx,eax
c000bb42:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb46:	8d 50 03             	lea    edx,[eax+0x3]
c000bb49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb4d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bb51:	0f b6 c0             	movzx  eax,al
c000bb54:	c1 e0 18             	shl    eax,0x18
c000bb57:	09 c8                	or     eax,ecx
c000bb59:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb5d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bb62:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb6a:	01 d0                	add    eax,edx
c000bb6c:	83 c0 2c             	add    eax,0x2c
c000bb6f:	8a 00                	mov    al,BYTE PTR [eax]
c000bb71:	0f b6 d0             	movzx  edx,al
c000bb74:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb78:	8d 48 01             	lea    ecx,[eax+0x1]
c000bb7b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb7f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bb83:	0f b6 c0             	movzx  eax,al
c000bb86:	c1 e0 08             	shl    eax,0x8
c000bb89:	09 d0                	or     eax,edx
c000bb8b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000bb90:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bb95:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000bb9a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bb9e:	88 90 08 3e 02 c0    	mov    BYTE PTR [eax-0x3ffdc1f8],dl
c000bba4:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000bba9:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000bbae:	66 89 94 00 c0 9a 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd6540],dx
c000bbb6:	e9 b9 00 00 00       	jmp    c000bc74 <scanMADT()+0x42c>
c000bbbb:	90                   	nop
c000bbbc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bbc1:	83 f8 04             	cmp    eax,0x4
c000bbc4:	0f 85 9a 00 00 00    	jne    c000bc64 <scanMADT()+0x41c>
c000bbca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbce:	8d 50 01             	lea    edx,[eax+0x1]
c000bbd1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bbd9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bbdd:	0f b6 c0             	movzx  eax,al
c000bbe0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bbe4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bbe8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbec:	01 d0                	add    eax,edx
c000bbee:	83 c0 2c             	add    eax,0x2c
c000bbf1:	8a 00                	mov    al,BYTE PTR [eax]
c000bbf3:	0f b6 d0             	movzx  edx,al
c000bbf6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbfa:	8d 48 01             	lea    ecx,[eax+0x1]
c000bbfd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bc01:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bc05:	0f b6 c0             	movzx  eax,al
c000bc08:	c1 e0 08             	shl    eax,0x8
c000bc0b:	09 d0                	or     eax,edx
c000bc0d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc11:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bc16:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc1a:	8d 50 01             	lea    edx,[eax+0x1]
c000bc1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc21:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc25:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bc29:	0f b6 c0             	movzx  eax,al
c000bc2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc34:	c1 e0 08             	shl    eax,0x8
c000bc37:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000bc3b:	89 c1                	mov    ecx,eax
c000bc3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bc41:	c1 e0 18             	shl    eax,0x18
c000bc44:	89 c3                	mov    ebx,eax
c000bc46:	a1 2c 9a 02 c0       	mov    eax,ds:0xc0029a2c
c000bc4b:	8d 50 01             	lea    edx,[eax+0x1]
c000bc4e:	89 15 2c 9a 02 c0    	mov    DWORD PTR ds:0xc0029a2c,edx
c000bc54:	09 d9                	or     ecx,ebx
c000bc56:	89 ca                	mov    edx,ecx
c000bc58:	89 14 85 40 9a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd65c0],edx
c000bc5f:	eb 13                	jmp    c000bc74 <scanMADT()+0x42c>
c000bc61:	8d 76 00             	lea    esi,[esi+0x0]
c000bc64:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bc69:	83 f8 05             	cmp    eax,0x5
c000bc6c:	75 06                	jne    c000bc74 <scanMADT()+0x42c>
c000bc6e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000bc73:	90                   	nop
c000bc74:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000bc79:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc7d:	01 d0                	add    eax,edx
c000bc7f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc83:	e9 50 fc ff ff       	jmp    c000b8d8 <scanMADT()+0x90>
c000bc88:	90                   	nop
c000bc89:	eb 0d                	jmp    c000bc98 <scanMADT()+0x450>
c000bc8b:	90                   	nop
c000bc8c:	90                   	nop
c000bc8d:	eb 09                	jmp    c000bc98 <scanMADT()+0x450>
c000bc8f:	90                   	nop
c000bc90:	90                   	nop
c000bc91:	eb 05                	jmp    c000bc98 <scanMADT()+0x450>
c000bc93:	90                   	nop
c000bc94:	90                   	nop
c000bc95:	8d 76 00             	lea    esi,[esi+0x0]
c000bc98:	83 c4 38             	add    esp,0x38
c000bc9b:	5b                   	pop    ebx
c000bc9c:	c3                   	ret    
c000bc9d:	90                   	nop
c000bc9e:	66 90                	xchg   ax,ax

c000bca0 <ACPI::ACPI()>:
c000bca0:	83 ec 0c             	sub    esp,0xc
c000bca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bca7:	83 ec 08             	sub    esp,0x8
c000bcaa:	68 71 1c 02 c0       	push   0xc0021c71
c000bcaf:	50                   	push   eax
c000bcb0:	e8 f3 d4 ff ff       	call   c00091a8 <Device::Device(char const*)>
c000bcb5:	83 c4 10             	add    esp,0x10
c000bcb8:	ba 6c 1e 02 c0       	mov    edx,0xc0021e6c
c000bcbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcc1:	89 10                	mov    DWORD PTR [eax],edx
c000bcc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcc7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000bcce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcd2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000bcdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bce0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000bcea:	e8 59 fb ff ff       	call   c000b848 <scanMADT()>
c000bcef:	90                   	nop
c000bcf0:	83 c4 0c             	add    esp,0xc
c000bcf3:	c3                   	ret    

c000bcf4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000bcf4:	83 ec 2c             	sub    esp,0x2c
c000bcf7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000bcfb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bcff:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000bd03:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000bd07:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000bd0c:	88 c8                	mov    al,cl
c000bd0e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000bd12:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	90                   	nop
c000bd20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd24:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000bd2a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000bd2e:	0f 8d b0 00 00 00    	jge    c000bde4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000bd34:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd38:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd3c:	83 c2 2a             	add    edx,0x2a
c000bd3f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000bd43:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000bd48:	0f b7 c0             	movzx  eax,ax
c000bd4b:	39 c2                	cmp    edx,eax
c000bd4d:	0f 85 85 00 00 00    	jne    c000bdd8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000bd53:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd57:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd5b:	83 c2 2a             	add    edx,0x2a
c000bd5e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000bd62:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000bd67:	0f b6 c0             	movzx  eax,al
c000bd6a:	39 c2                	cmp    edx,eax
c000bd6c:	75 6a                	jne    c000bdd8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000bd6e:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bd73:	85 c0                	test   eax,eax
c000bd75:	74 3d                	je     c000bdb4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000bd77:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd7b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd7f:	83 c2 2a             	add    edx,0x2a
c000bd82:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000bd86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bd8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bd8d:	39 c2                	cmp    edx,eax
c000bd8f:	74 13                	je     c000bda4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000bd91:	83 ec 0c             	sub    esp,0xc
c000bd94:	68 ec 1d 02 c0       	push   0xc0021dec
c000bd99:	e8 78 2e 00 00       	call   c000ec16 <KePanic(char const*)>
c000bd9e:	83 c4 10             	add    esp,0x10
c000bda1:	8d 76 00             	lea    esi,[esi+0x0]
c000bda4:	83 ec 0c             	sub    esp,0xc
c000bda7:	68 76 1c 02 c0       	push   0xc0021c76
c000bdac:	e8 65 2e 00 00       	call   c000ec16 <KePanic(char const*)>
c000bdb1:	83 c4 10             	add    esp,0x10
c000bdb4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000bdb8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bdbc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bdc0:	83 c2 2a             	add    edx,0x2a
c000bdc3:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000bdc7:	8b 02                	mov    eax,DWORD PTR [edx]
c000bdc9:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000bdcc:	89 01                	mov    DWORD PTR [ecx],eax
c000bdce:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000bdd1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bdd6:	66 90                	xchg   ax,ax
c000bdd8:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000bddd:	e9 3e ff ff ff       	jmp    c000bd20 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000bde2:	66 90                	xchg   ax,ax
c000bde4:	90                   	nop
c000bde5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bde9:	83 c4 2c             	add    esp,0x2c
c000bdec:	c2 04 00             	ret    0x4
c000bdef:	90                   	nop

c000bdf0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000bdf0:	83 ec 1c             	sub    esp,0x1c
c000bdf3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bdf7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bdfb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000bdff:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000be04:	88 c8                	mov    al,cl
c000be06:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000be0a:	88 d0                	mov    al,dl
c000be0c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000be10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be14:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be1e:	83 c2 2a             	add    edx,0x2a
c000be21:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000be25:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000be29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be2d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be37:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000be3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000be3e:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000be43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be47:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be4d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000be51:	83 c0 01             	add    eax,0x1
c000be54:	88 c1                	mov    cl,al
c000be56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be5a:	83 c2 2a             	add    edx,0x2a
c000be5d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000be61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be65:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be6f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000be72:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000be76:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000be7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be7e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000be84:	8d 50 01             	lea    edx,[eax+0x1]
c000be87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be8b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000be91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be95:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000be9b:	3d 00 02 00 00       	cmp    eax,0x200
c000bea0:	75 12                	jne    c000beb4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000bea2:	83 ec 0c             	sub    esp,0xc
c000bea5:	68 85 1c 02 c0       	push   0xc0021c85
c000beaa:	e8 67 2d 00 00       	call   c000ec16 <KePanic(char const*)>
c000beaf:	83 c4 10             	add    esp,0x10
c000beb2:	66 90                	xchg   ax,ax
c000beb4:	90                   	nop
c000beb5:	83 c4 1c             	add    esp,0x1c
c000beb8:	c3                   	ret    
c000beb9:	90                   	nop
c000beba:	66 90                	xchg   ax,ax

c000bebc <ACPI::setScreenBrightnessLevel(void*, int)>:
c000bebc:	b8 00 00 00 00       	mov    eax,0x0
c000bec1:	c3                   	ret    
c000bec2:	66 90                	xchg   ax,ax

c000bec4 <ACPI::detectPCI()>:
c000bec4:	53                   	push   ebx
c000bec5:	83 ec 28             	sub    esp,0x28
c000bec8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000becd:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000bed2:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000bed7:	83 ec 08             	sub    esp,0x8
c000beda:	68 a2 1c 02 c0       	push   0xc0021ca2
c000bedf:	50                   	push   eax
c000bee0:	e8 ef f8 ff ff       	call   c000b7d4 <findDataTable(unsigned char*, char*)>
c000bee5:	83 c4 10             	add    esp,0x10
c000bee8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000beec:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bef1:	74 0d                	je     c000bf00 <ACPI::detectPCI()+0x3c>
c000bef3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bef8:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000befd:	8d 76 00             	lea    esi,[esi+0x0]
c000bf00:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000bf08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf0c:	8a 00                	mov    al,BYTE PTR [eax]
c000bf0e:	0f b6 c0             	movzx  eax,al
c000bf11:	83 f8 01             	cmp    eax,0x1
c000bf14:	75 0e                	jne    c000bf24 <ACPI::detectPCI()+0x60>
c000bf16:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf1b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bf20:	eb 2e                	jmp    c000bf50 <ACPI::detectPCI()+0x8c>
c000bf22:	66 90                	xchg   ax,ax
c000bf24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf28:	8a 00                	mov    al,BYTE PTR [eax]
c000bf2a:	0f b6 c0             	movzx  eax,al
c000bf2d:	83 f8 02             	cmp    eax,0x2
c000bf30:	75 1e                	jne    c000bf50 <ACPI::detectPCI()+0x8c>
c000bf32:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf37:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000bf3c:	85 c0                	test   eax,eax
c000bf3e:	74 10                	je     c000bf50 <ACPI::detectPCI()+0x8c>
c000bf40:	83 ec 0c             	sub    esp,0xc
c000bf43:	68 1c 1e 02 c0       	push   0xc0021e1c
c000bf48:	e8 c9 2c 00 00       	call   c000ec16 <KePanic(char const*)>
c000bf4d:	83 c4 10             	add    esp,0x10
c000bf50:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000bf54:	83 f0 01             	xor    eax,0x1
c000bf57:	0f b6 c0             	movzx  eax,al
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	74 46                	je     c000bfa4 <ACPI::detectPCI()+0xe0>
c000bf5e:	e8 cd 41 ff ff       	call   c0000130 <manualPCIProbe>
c000bf63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf67:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bf6c:	75 0e                	jne    c000bf7c <ACPI::detectPCI()+0xb8>
c000bf6e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf73:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bf78:	eb 2a                	jmp    c000bfa4 <ACPI::detectPCI()+0xe0>
c000bf7a:	66 90                	xchg   ax,ax
c000bf7c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000bf81:	75 21                	jne    c000bfa4 <ACPI::detectPCI()+0xe0>
c000bf83:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf88:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000bf8d:	85 c0                	test   eax,eax
c000bf8f:	74 13                	je     c000bfa4 <ACPI::detectPCI()+0xe0>
c000bf91:	83 ec 0c             	sub    esp,0xc
c000bf94:	68 1c 1e 02 c0       	push   0xc0021e1c
c000bf99:	e8 78 2c 00 00       	call   c000ec16 <KePanic(char const*)>
c000bf9e:	83 c4 10             	add    esp,0x10
c000bfa1:	8d 76 00             	lea    esi,[esi+0x0]
c000bfa4:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bfa9:	85 c0                	test   eax,eax
c000bfab:	0f 84 87 00 00 00    	je     c000c038 <ACPI::detectPCI()+0x174>
c000bfb1:	83 ec 0c             	sub    esp,0xc
c000bfb4:	68 a7 1c 02 c0       	push   0xc0021ca7
c000bfb9:	e8 dd 05 00 00       	call   c000c59b <KeSetBootMessage(char const*)>
c000bfbe:	83 c4 10             	add    esp,0x10
c000bfc1:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000bfc9:	83 ec 0c             	sub    esp,0xc
c000bfcc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bfd0:	e8 fb 28 00 00       	call   c000e8d0 <malloc>
c000bfd5:	83 c4 10             	add    esp,0x10
c000bfd8:	89 c3                	mov    ebx,eax
c000bfda:	83 ec 0c             	sub    esp,0xc
c000bfdd:	53                   	push   ebx
c000bfde:	e8 97 f9 00 00       	call   c001b97a <PCI::PCI()>
c000bfe3:	83 c4 10             	add    esp,0x10
c000bfe6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000bfea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bfee:	83 ec 08             	sub    esp,0x8
c000bff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff5:	50                   	push   eax
c000bff6:	e8 4b d0 ff ff       	call   c0009046 <Device::addChild(Device*)>
c000bffb:	83 c4 10             	add    esp,0x10
c000bffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c002:	8b 00                	mov    eax,DWORD PTR [eax]
c000c004:	83 c0 08             	add    eax,0x8
c000c007:	8b 00                	mov    eax,DWORD PTR [eax]
c000c009:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000c00e:	85 d2                	test   edx,edx
c000c010:	74 0a                	je     c000c01c <ACPI::detectPCI()+0x158>
c000c012:	ba 01 00 00 00       	mov    edx,0x1
c000c017:	eb 0b                	jmp    c000c024 <ACPI::detectPCI()+0x160>
c000c019:	8d 76 00             	lea    esi,[esi+0x0]
c000c01c:	ba 02 00 00 00       	mov    edx,0x2
c000c021:	8d 76 00             	lea    esi,[esi+0x0]
c000c024:	6a 00                	push   0x0
c000c026:	6a 00                	push   0x0
c000c028:	52                   	push   edx
c000c029:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c02d:	ff d0                	call   eax
c000c02f:	83 c4 10             	add    esp,0x10
c000c032:	e9 91 00 00 00       	jmp    c000c0c8 <ACPI::detectPCI()+0x204>
c000c037:	90                   	nop
c000c038:	83 ec 0c             	sub    esp,0xc
c000c03b:	68 bf 1c 02 c0       	push   0xc0021cbf
c000c040:	e8 56 05 00 00       	call   c000c59b <KeSetBootMessage(char const*)>
c000c045:	83 c4 10             	add    esp,0x10
c000c048:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000c04f:	83 ec 0c             	sub    esp,0xc
c000c052:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c056:	e8 75 28 00 00       	call   c000e8d0 <malloc>
c000c05b:	83 c4 10             	add    esp,0x10
c000c05e:	89 c3                	mov    ebx,eax
c000c060:	83 ec 0c             	sub    esp,0xc
c000c063:	53                   	push   ebx
c000c064:	e8 19 05 01 00       	call   c001c582 <IDE::IDE()>
c000c069:	83 c4 10             	add    esp,0x10
c000c06c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000c070:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c074:	83 ec 08             	sub    esp,0x8
c000c077:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c07b:	50                   	push   eax
c000c07c:	e8 c5 cf ff ff       	call   c0009046 <Device::addChild(Device*)>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c088:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000c092:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c096:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000c09f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c0a3:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000c0ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c0b0:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0b2:	83 c0 08             	add    eax,0x8
c000c0b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0b7:	6a 00                	push   0x0
c000c0b9:	6a 00                	push   0x0
c000c0bb:	6a 00                	push   0x0
c000c0bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0c1:	ff d0                	call   eax
c000c0c3:	83 c4 10             	add    esp,0x10
c000c0c6:	66 90                	xchg   ax,ax
c000c0c8:	90                   	nop
c000c0c9:	83 c4 28             	add    esp,0x28
c000c0cc:	5b                   	pop    ebx
c000c0cd:	c3                   	ret    
c000c0ce:	66 90                	xchg   ax,ax

c000c0d0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000c0d0:	83 ec 0c             	sub    esp,0xc
c000c0d3:	83 ec 0c             	sub    esp,0xc
c000c0d6:	68 d4 1c 02 c0       	push   0xc0021cd4
c000c0db:	e8 36 2b 00 00       	call   c000ec16 <KePanic(char const*)>
c000c0e0:	83 c4 10             	add    esp,0x10
c000c0e3:	90                   	nop
c000c0e4:	83 c4 0c             	add    esp,0xc
c000c0e7:	c3                   	ret    

c000c0e8 <ACPI::open(int, int, void*)>:
c000c0e8:	55                   	push   ebp
c000c0e9:	89 e5                	mov    ebp,esp
c000c0eb:	53                   	push   ebx
c000c0ec:	81 ec 74 01 00 00    	sub    esp,0x174
c000c0f2:	83 ec 0c             	sub    esp,0xc
c000c0f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000c0f8:	e8 c7 fd ff ff       	call   c000bec4 <ACPI::detectPCI()>
c000c0fd:	83 c4 10             	add    esp,0x10
c000c100:	83 ec 0c             	sub    esp,0xc
c000c103:	68 44 1e 02 c0       	push   0xc0021e44
c000c108:	e8 8e 04 00 00       	call   c000c59b <KeSetBootMessage(char const*)>
c000c10d:	83 c4 10             	add    esp,0x10
c000c110:	b8 4c 05 00 00       	mov    eax,0x54c
c000c115:	8a 00                	mov    al,BYTE PTR [eax]
c000c117:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000c11a:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000c11e:	83 f8 01             	cmp    eax,0x1
c000c121:	75 15                	jne    c000c138 <ACPI::open(int, int, void*)+0x50>
c000c123:	83 ec 0c             	sub    esp,0xc
c000c126:	68 e5 1c 02 c0       	push   0xc0021ce5
c000c12b:	e8 4c 7d 00 00       	call   c0013e7c <Thr::loadKernelSymbolTable(char const*)>
c000c130:	83 c4 10             	add    esp,0x10
c000c133:	eb 33                	jmp    c000c168 <ACPI::open(int, int, void*)+0x80>
c000c135:	8d 76 00             	lea    esi,[esi+0x0]
c000c138:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000c13c:	3d bb 00 00 00       	cmp    eax,0xbb
c000c141:	75 15                	jne    c000c158 <ACPI::open(int, int, void*)+0x70>
c000c143:	83 ec 0c             	sub    esp,0xc
c000c146:	68 03 1d 02 c0       	push   0xc0021d03
c000c14b:	e8 2c 7d 00 00       	call   c0013e7c <Thr::loadKernelSymbolTable(char const*)>
c000c150:	83 c4 10             	add    esp,0x10
c000c153:	eb 13                	jmp    c000c168 <ACPI::open(int, int, void*)+0x80>
c000c155:	8d 76 00             	lea    esi,[esi+0x0]
c000c158:	83 ec 0c             	sub    esp,0xc
c000c15b:	68 21 1d 02 c0       	push   0xc0021d21
c000c160:	e8 b1 2a 00 00       	call   c000ec16 <KePanic(char const*)>
c000c165:	83 c4 10             	add    esp,0x10
c000c168:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c16c:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000c173:	83 ec 0c             	sub    esp,0xc
c000c176:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000c179:	e8 52 27 00 00       	call   c000e8d0 <malloc>
c000c17e:	83 c4 10             	add    esp,0x10
c000c181:	89 c3                	mov    ebx,eax
c000c183:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000c188:	83 ec 04             	sub    esp,0x4
c000c18b:	50                   	push   eax
c000c18c:	68 3b 1d 02 c0       	push   0xc0021d3b
c000c191:	53                   	push   ebx
c000c192:	e8 75 bf ff ff       	call   c000810c <File::File(char const*, Process*)>
c000c197:	83 c4 10             	add    esp,0x10
c000c19a:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000c19d:	83 ec 08             	sub    esp,0x8
c000c1a0:	6a 01                	push   0x1
c000c1a2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c1a5:	e8 80 bf ff ff       	call   c000812a <File::open(FileOpenMode)>
c000c1aa:	83 c4 10             	add    esp,0x10
c000c1ad:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000c1b0:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000c1b4:	75 12                	jne    c000c1c8 <ACPI::open(int, int, void*)+0xe0>
c000c1b6:	83 ec 0c             	sub    esp,0xc
c000c1b9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c1bc:	e8 c7 bf ff ff       	call   c0008188 <File::close()>
c000c1c1:	83 c4 10             	add    esp,0x10
c000c1c4:	eb 06                	jmp    c000c1cc <ACPI::open(int, int, void*)+0xe4>
c000c1c6:	66 90                	xchg   ax,ax
c000c1c8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c1cc:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000c1d0:	74 16                	je     c000c1e8 <ACPI::open(int, int, void*)+0x100>
c000c1d2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c1d5:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1d7:	83 c0 08             	add    eax,0x8
c000c1da:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1dc:	83 ec 0c             	sub    esp,0xc
c000c1df:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c1e2:	ff d0                	call   eax
c000c1e4:	83 c4 10             	add    esp,0x10
c000c1e7:	90                   	nop
c000c1e8:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000c1eb:	83 f0 01             	xor    eax,0x1
c000c1ee:	0f b6 c0             	movzx  eax,al
c000c1f1:	85 c0                	test   eax,eax
c000c1f3:	74 27                	je     c000c21c <ACPI::open(int, int, void*)+0x134>
c000c1f5:	83 ec 0c             	sub    esp,0xc
c000c1f8:	68 59 1d 02 c0       	push   0xc0021d59
c000c1fd:	e8 99 03 00 00       	call   c000c59b <KeSetBootMessage(char const*)>
c000c202:	83 c4 10             	add    esp,0x10
c000c205:	c7 45 e8 0c 00 00 00 	mov    DWORD PTR [ebp-0x18],0xc
c000c20c:	83 ec 0c             	sub    esp,0xc
c000c20f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000c212:	e8 61 5f 00 00       	call   c0012178 <Virt::setupPageSwapping(int)>
c000c217:	83 c4 10             	add    esp,0x10
c000c21a:	66 90                	xchg   ax,ax
c000c21c:	83 ec 0c             	sub    esp,0xc
c000c21f:	68 74 1d 02 c0       	push   0xc0021d74
c000c224:	e8 72 03 00 00       	call   c000c59b <KeSetBootMessage(char const*)>
c000c229:	83 c4 10             	add    esp,0x10
c000c22c:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c22f:	83 ec 08             	sub    esp,0x8
c000c232:	6a 13                	push   0x13
c000c234:	50                   	push   eax
c000c235:	e8 3a d1 ff ff       	call   c0009374 <getDevicesOfType(DeviceType)>
c000c23a:	83 c4 0c             	add    esp,0xc
c000c23d:	8d 76 00             	lea    esi,[esi+0x0]
c000c240:	83 ec 0c             	sub    esp,0xc
c000c243:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c246:	50                   	push   eax
c000c247:	e8 40 40 01 00       	call   c002028c <LinkedList<Device>::isEmpty()>
c000c24c:	83 c4 10             	add    esp,0x10
c000c24f:	83 f0 01             	xor    eax,0x1
c000c252:	0f b6 c0             	movzx  eax,al
c000c255:	85 c0                	test   eax,eax
c000c257:	0f 84 1f 01 00 00    	je     c000c37c <ACPI::open(int, int, void*)+0x294>
c000c25d:	83 ec 0c             	sub    esp,0xc
c000c260:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c263:	50                   	push   eax
c000c264:	e8 3f 40 01 00       	call   c00202a8 <LinkedList<Device>::getFirstElement()>
c000c269:	83 c4 10             	add    esp,0x10
c000c26c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000c26f:	83 ec 0c             	sub    esp,0xc
c000c272:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c275:	50                   	push   eax
c000c276:	e8 35 40 01 00       	call   c00202b0 <LinkedList<Device>::removeFirst()>
c000c27b:	83 c4 10             	add    esp,0x10
c000c27e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000c281:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000c284:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000c287:	b8 24 00 00 00       	mov    eax,0x24
c000c28c:	83 e0 fc             	and    eax,0xfffffffc
c000c28f:	89 c3                	mov    ebx,eax
c000c291:	b8 00 00 00 00       	mov    eax,0x0
c000c296:	66 90                	xchg   ax,ax
c000c298:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000c29f:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000c2a6:	83 c0 04             	add    eax,0x4
c000c2a9:	39 d8                	cmp    eax,ebx
c000c2ab:	72 eb                	jb     c000c298 <ACPI::open(int, int, void*)+0x1b0>
c000c2ad:	83 ec 08             	sub    esp,0x8
c000c2b0:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000c2b6:	50                   	push   eax
c000c2b7:	83 ec 24             	sub    esp,0x24
c000c2ba:	89 e1                	mov    ecx,esp
c000c2bc:	b8 24 00 00 00       	mov    eax,0x24
c000c2c1:	83 e0 fc             	and    eax,0xfffffffc
c000c2c4:	89 c3                	mov    ebx,eax
c000c2c6:	b8 00 00 00 00       	mov    eax,0x0
c000c2cb:	90                   	nop
c000c2cc:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000c2d3:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000c2d6:	83 c0 04             	add    eax,0x4
c000c2d9:	39 d8                	cmp    eax,ebx
c000c2db:	72 ef                	jb     c000c2cc <ACPI::open(int, int, void*)+0x1e4>
c000c2dd:	e8 80 fb 00 00       	call   c001be62 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000c2e2:	83 c4 30             	add    esp,0x30
c000c2e5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000c2e8:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000c2ec:	0f 84 4e ff ff ff    	je     c000c240 <ACPI::open(int, int, void*)+0x158>
c000c2f2:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000c2f9:	83 ec 0c             	sub    esp,0xc
c000c2fc:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000c2ff:	e8 cc 25 00 00       	call   c000e8d0 <malloc>
c000c304:	83 c4 10             	add    esp,0x10
c000c307:	89 c3                	mov    ebx,eax
c000c309:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000c30e:	83 ec 04             	sub    esp,0x4
c000c311:	50                   	push   eax
c000c312:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000c315:	53                   	push   ebx
c000c316:	e8 f1 bd ff ff       	call   c000810c <File::File(char const*, Process*)>
c000c31b:	83 c4 10             	add    esp,0x10
c000c31e:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000c321:	83 ec 0c             	sub    esp,0xc
c000c324:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000c327:	e8 c2 c0 ff ff       	call   c00083ee <File::exists()>
c000c32c:	83 c4 10             	add    esp,0x10
c000c32f:	0f b6 c0             	movzx  eax,al
c000c332:	85 c0                	test   eax,eax
c000c334:	74 22                	je     c000c358 <ACPI::open(int, int, void*)+0x270>
c000c336:	83 ec 08             	sub    esp,0x8
c000c339:	6a 01                	push   0x1
c000c33b:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000c33e:	e8 bb 85 00 00       	call   c00148fe <Thr::loadDLL(char const*, bool)>
c000c343:	83 c4 10             	add    esp,0x10
c000c346:	83 ec 08             	sub    esp,0x8
c000c349:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000c34c:	50                   	push   eax
c000c34d:	e8 0d 88 00 00       	call   c0014b5f <Thr::executeDLL(unsigned long, void*)>
c000c352:	83 c4 10             	add    esp,0x10
c000c355:	8d 76 00             	lea    esi,[esi+0x0]
c000c358:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000c35c:	0f 84 de fe ff ff    	je     c000c240 <ACPI::open(int, int, void*)+0x158>
c000c362:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000c365:	8b 00                	mov    eax,DWORD PTR [eax]
c000c367:	83 c0 08             	add    eax,0x8
c000c36a:	8b 00                	mov    eax,DWORD PTR [eax]
c000c36c:	83 ec 0c             	sub    esp,0xc
c000c36f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000c372:	ff d0                	call   eax
c000c374:	83 c4 10             	add    esp,0x10
c000c377:	e9 c4 fe ff ff       	jmp    c000c240 <ACPI::open(int, int, void*)+0x158>
c000c37c:	83 ec 0c             	sub    esp,0xc
c000c37f:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c382:	50                   	push   eax
c000c383:	e8 00 3f 01 00       	call   c0020288 <LinkedList<Device>::~LinkedList()>
c000c388:	83 c4 10             	add    esp,0x10
c000c38b:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c000c391:	83 ec 08             	sub    esp,0x8
c000c394:	6a 01                	push   0x1
c000c396:	68 8e 1d 02 c0       	push   0xc0021d8e
c000c39b:	e8 5e 85 00 00       	call   c00148fe <Thr::loadDLL(char const*, bool)>
c000c3a0:	83 c4 10             	add    esp,0x10
c000c3a3:	83 ec 08             	sub    esp,0x8
c000c3a6:	53                   	push   ebx
c000c3a7:	50                   	push   eax
c000c3a8:	e8 b2 87 00 00       	call   c0014b5f <Thr::executeDLL(unsigned long, void*)>
c000c3ad:	83 c4 10             	add    esp,0x10
c000c3b0:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000c3b5:	85 c0                	test   eax,eax
c000c3b7:	0f 84 ef 00 00 00    	je     c000c4ac <ACPI::open(int, int, void*)+0x3c4>
c000c3bd:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000c3c2:	85 c0                	test   eax,eax
c000c3c4:	0f 84 e2 00 00 00    	je     c000c4ac <ACPI::open(int, int, void*)+0x3c4>
c000c3ca:	83 ec 0c             	sub    esp,0xc
c000c3cd:	68 ab 1d 02 c0       	push   0xc0021dab
c000c3d2:	e8 c4 01 00 00       	call   c000c59b <KeSetBootMessage(char const*)>
c000c3d7:	83 c4 10             	add    esp,0x10
c000c3da:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000c3e1:	83 ec 0c             	sub    esp,0xc
c000c3e4:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000c3e7:	e8 e4 24 00 00       	call   c000e8d0 <malloc>
c000c3ec:	83 c4 10             	add    esp,0x10
c000c3ef:	89 c3                	mov    ebx,eax
c000c3f1:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000c3f6:	83 ec 04             	sub    esp,0x4
c000c3f9:	50                   	push   eax
c000c3fa:	68 c8 1d 02 c0       	push   0xc0021dc8
c000c3ff:	53                   	push   ebx
c000c400:	e8 07 bd ff ff       	call   c000810c <File::File(char const*, Process*)>
c000c405:	83 c4 10             	add    esp,0x10
c000c408:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000c40b:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000c40f:	74 1b                	je     c000c42c <ACPI::open(int, int, void*)+0x344>
c000c411:	83 ec 0c             	sub    esp,0xc
c000c414:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000c417:	e8 d2 bf ff ff       	call   c00083ee <File::exists()>
c000c41c:	83 c4 10             	add    esp,0x10
c000c41f:	0f b6 c0             	movzx  eax,al
c000c422:	85 c0                	test   eax,eax
c000c424:	74 06                	je     c000c42c <ACPI::open(int, int, void*)+0x344>
c000c426:	b0 01                	mov    al,0x1
c000c428:	eb 06                	jmp    c000c430 <ACPI::open(int, int, void*)+0x348>
c000c42a:	66 90                	xchg   ax,ax
c000c42c:	b0 00                	mov    al,0x0
c000c42e:	66 90                	xchg   ax,ax
c000c430:	0f b6 c0             	movzx  eax,al
c000c433:	85 c0                	test   eax,eax
c000c435:	74 21                	je     c000c458 <ACPI::open(int, int, void*)+0x370>
c000c437:	83 ec 08             	sub    esp,0x8
c000c43a:	6a 01                	push   0x1
c000c43c:	68 c8 1d 02 c0       	push   0xc0021dc8
c000c441:	e8 b8 84 00 00       	call   c00148fe <Thr::loadDLL(char const*, bool)>
c000c446:	83 c4 10             	add    esp,0x10
c000c449:	83 ec 08             	sub    esp,0x8
c000c44c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000c44f:	50                   	push   eax
c000c450:	e8 0a 87 00 00       	call   c0014b5f <Thr::executeDLL(unsigned long, void*)>
c000c455:	83 c4 10             	add    esp,0x10
c000c458:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000c45c:	74 1e                	je     c000c47c <ACPI::open(int, int, void*)+0x394>
c000c45e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000c462:	74 18                	je     c000c47c <ACPI::open(int, int, void*)+0x394>
c000c464:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000c467:	8b 00                	mov    eax,DWORD PTR [eax]
c000c469:	83 c0 08             	add    eax,0x8
c000c46c:	8b 00                	mov    eax,DWORD PTR [eax]
c000c46e:	83 ec 0c             	sub    esp,0xc
c000c471:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000c474:	ff d0                	call   eax
c000c476:	83 c4 10             	add    esp,0x10
c000c479:	8d 76 00             	lea    esi,[esi+0x0]
c000c47c:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000c481:	83 ec 08             	sub    esp,0x8
c000c484:	68 e5 1d 02 c0       	push   0xc0021de5
c000c489:	50                   	push   eax
c000c48a:	e8 45 f3 ff ff       	call   c000b7d4 <findDataTable(unsigned char*, char*)>
c000c48f:	83 c4 10             	add    esp,0x10
c000c492:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000c495:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000c499:	74 11                	je     c000c4ac <ACPI::open(int, int, void*)+0x3c4>
c000c49b:	83 ec 08             	sub    esp,0x8
c000c49e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000c4a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000c4a4:	e8 27 fc ff ff       	call   c000c0d0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000c4a9:	83 c4 10             	add    esp,0x10
c000c4ac:	b8 00 00 00 00       	mov    eax,0x0
c000c4b1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c4b4:	c9                   	leave  
c000c4b5:	c3                   	ret    

c000c4b6 <KeInitialiseAtexit()>:
c000c4b6:	83 ec 10             	sub    esp,0x10
c000c4b9:	6a 60                	push   0x60
c000c4bb:	6a 00                	push   0x0
c000c4bd:	68 00 9d 02 c0       	push   0xc0029d00
c000c4c2:	c7 05 80 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c80,0x0
c000c4cc:	e8 1f 40 ff ff       	call   c00004f0 <memset>
c000c4d1:	83 c4 1c             	add    esp,0x1c
c000c4d4:	c3                   	ret    

c000c4d5 <KeRegisterAtexit(void (*)(void*), void*)>:
c000c4d5:	a1 80 9c 02 c0       	mov    eax,ds:0xc0029c80
c000c4da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c4de:	89 14 85 00 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6300],edx
c000c4e5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c4e9:	89 14 85 a0 9c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6360],edx
c000c4f0:	40                   	inc    eax
c000c4f1:	a3 80 9c 02 c0       	mov    ds:0xc0029c80,eax
c000c4f6:	83 f8 17             	cmp    eax,0x17
c000c4f9:	7e 0d                	jle    c000c508 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000c4fb:	c7 44 24 04 90 1e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021e90
c000c503:	e9 0e 27 00 00       	jmp    c000ec16 <KePanic(char const*)>
c000c508:	c3                   	ret    

c000c509 <KeExecuteAtexit()>:
c000c509:	53                   	push   ebx
c000c50a:	31 db                	xor    ebx,ebx
c000c50c:	83 ec 08             	sub    esp,0x8
c000c50f:	39 1d 80 9c 02 c0    	cmp    DWORD PTR ds:0xc0029c80,ebx
c000c515:	7e 50                	jle    c000c567 <KeExecuteAtexit()+0x5e>
c000c517:	8b 04 9d 00 9d 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6300]
c000c51e:	85 c0                	test   eax,eax
c000c520:	74 42                	je     c000c564 <KeExecuteAtexit()+0x5b>
c000c522:	51                   	push   ecx
c000c523:	50                   	push   eax
c000c524:	53                   	push   ebx
c000c525:	68 a9 1e 02 c0       	push   0xc0021ea9
c000c52a:	e8 1f aa ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c52f:	58                   	pop    eax
c000c530:	ff 34 9d a0 9c 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6360]
c000c537:	ff 14 9d 00 9d 02 c0 	call   DWORD PTR [ebx*4-0x3ffd6300]
c000c53e:	c7 04 24 cb 1e 02 c0 	mov    DWORD PTR [esp],0xc0021ecb
c000c545:	e8 04 aa ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c54a:	c7 04 24 4b 22 02 c0 	mov    DWORD PTR [esp],0xc002224b
c000c551:	c7 04 9d 00 9d 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd6300],0x0
c000c55c:	e8 ed a9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c561:	83 c4 10             	add    esp,0x10
c000c564:	43                   	inc    ebx
c000c565:	eb a8                	jmp    c000c50f <KeExecuteAtexit()+0x6>
c000c567:	83 c4 08             	add    esp,0x8
c000c56a:	5b                   	pop    ebx
c000c56b:	c3                   	ret    

c000c56c <KeDisplaySplashScreen()>:
c000c56c:	53                   	push   ebx
c000c56d:	bb 01 00 00 00       	mov    ebx,0x1
c000c572:	83 ec 08             	sub    esp,0x8
c000c575:	43                   	inc    ebx
c000c576:	0f be 83 ce 1e 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffde132]
c000c57d:	85 c0                	test   eax,eax
c000c57f:	74 15                	je     c000c596 <KeDisplaySplashScreen()+0x2a>
c000c581:	83 ec 0c             	sub    esp,0xc
c000c584:	6a 01                	push   0x1
c000c586:	53                   	push   ebx
c000c587:	6a 00                	push   0x0
c000c589:	6a 0f                	push   0xf
c000c58b:	50                   	push   eax
c000c58c:	e8 9b cf 00 00       	call   c001952c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000c591:	83 c4 20             	add    esp,0x20
c000c594:	eb df                	jmp    c000c575 <KeDisplaySplashScreen()+0x9>
c000c596:	83 c4 08             	add    esp,0x8
c000c599:	5b                   	pop    ebx
c000c59a:	c3                   	ret    

c000c59b <KeSetBootMessage(char const*)>:
c000c59b:	57                   	push   edi
c000c59c:	56                   	push   esi
c000c59d:	53                   	push   ebx
c000c59e:	81 ec a4 00 00 00    	sub    esp,0xa4
c000c5a4:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000c5ab:	68 9e 00 00 00       	push   0x9e
c000c5b0:	6a 00                	push   0x0
c000c5b2:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000c5b6:	56                   	push   esi
c000c5b7:	e8 34 3f ff ff       	call   c00004f0 <memset>
c000c5bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c5bf:	e8 bc 3f ff ff       	call   c0000580 <strlen>
c000c5c4:	ba 50 00 00 00       	mov    edx,0x50
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	31 c9                	xor    ecx,ecx
c000c5ce:	29 c2                	sub    edx,eax
c000c5d0:	83 e2 fe             	and    edx,0xfffffffe
c000c5d3:	01 f2                	add    edx,esi
c000c5d5:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000c5da:	84 c0                	test   al,al
c000c5dc:	74 0a                	je     c000c5e8 <KeSetBootMessage(char const*)+0x4d>
c000c5de:	80 cc 07             	or     ah,0x7
c000c5e1:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000c5e5:	41                   	inc    ecx
c000c5e6:	eb ed                	jmp    c000c5d5 <KeSetBootMessage(char const*)+0x3a>
c000c5e8:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000c5ed:	b9 9e 00 00 00       	mov    ecx,0x9e
c000c5f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c5f4:	50                   	push   eax
c000c5f5:	50                   	push   eax
c000c5f6:	53                   	push   ebx
c000c5f7:	68 e3 1e 02 c0       	push   0xc0021ee3
c000c5fc:	e8 4d a9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c601:	81 c4 b0 00 00 00    	add    esp,0xb0
c000c607:	5b                   	pop    ebx
c000c608:	5e                   	pop    esi
c000c609:	5f                   	pop    edi
c000c60a:	c3                   	ret    

c000c60b <__cxa_atexit>:
c000c60b:	31 c0                	xor    eax,eax
c000c60d:	c3                   	ret    

c000c60e <__cxa_finalize>:
c000c60e:	c3                   	ret    

c000c60f <__stack_chk_fail>:
c000c60f:	55                   	push   ebp
c000c610:	89 e5                	mov    ebp,esp
c000c612:	83 ec 10             	sub    esp,0x10
c000c615:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c618:	68 f1 1e 02 c0       	push   0xc0021ef1
c000c61d:	e8 2c a9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c622:	58                   	pop    eax
c000c623:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c626:	5a                   	pop    edx
c000c627:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c62a:	68 f1 1e 02 c0       	push   0xc0021ef1
c000c62f:	e8 1a a9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c634:	c7 04 24 f9 1e 02 c0 	mov    DWORD PTR [esp],0xc0021ef9
c000c63b:	e8 d6 25 00 00       	call   c000ec16 <KePanic(char const*)>
c000c640:	83 c4 10             	add    esp,0x10
c000c643:	c9                   	leave  
c000c644:	c3                   	ret    

c000c645 <__cxa_pure_virtual>:
c000c645:	83 ec 18             	sub    esp,0x18
c000c648:	68 11 1f 02 c0       	push   0xc0021f11
c000c64d:	e8 c4 25 00 00       	call   c000ec16 <KePanic(char const*)>
c000c652:	83 c4 1c             	add    esp,0x1c
c000c655:	c3                   	ret    

c000c656 <operator new[](unsigned long)>:
c000c656:	e9 75 22 00 00       	jmp    c000e8d0 <malloc>

c000c65b <operator delete(void*, unsigned long)>:
c000c65b:	e9 90 22 00 00       	jmp    c000e8f0 <rfree>

c000c660 <operator delete[](void*)>:
c000c660:	e9 8b 22 00 00       	jmp    c000e8f0 <rfree>

c000c665 <operator delete[](void*, unsigned long)>:
c000c665:	e9 86 22 00 00       	jmp    c000e8f0 <rfree>
c000c66a:	66 90                	xchg   ax,ax

c000c66c <CUnlockScheduler>:
c000c66c:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000c674:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000c679:	85 c0                	test   eax,eax
c000c67b:	75 03                	jne    c000c680 <CUnlockScheduler+0x14>
c000c67d:	fb                   	sti    
c000c67e:	66 90                	xchg   ax,ax
c000c680:	90                   	nop
c000c681:	c3                   	ret    
c000c682:	66 90                	xchg   ax,ax

c000c684 <CLockScheduler>:
c000c684:	fa                   	cli    
c000c685:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000c68a:	83 c0 01             	add    eax,0x1
c000c68d:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000c692:	90                   	nop
c000c693:	c3                   	ret    

c000c694 <CPrintf>:
c000c694:	83 ec 0c             	sub    esp,0xc
c000c697:	83 ec 08             	sub    esp,0x8
c000c69a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c69e:	68 24 1f 02 c0       	push   0xc0021f24
c000c6a3:	e8 a6 a8 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c6a8:	83 c4 10             	add    esp,0x10
c000c6ab:	90                   	nop
c000c6ac:	83 c4 0c             	add    esp,0xc
c000c6af:	c3                   	ret    

c000c6b0 <CmOpen(char const*)>:
c000c6b0:	57                   	push   edi
c000c6b1:	56                   	push   esi
c000c6b2:	53                   	push   ebx
c000c6b3:	83 ec 1c             	sub    esp,0x1c
c000c6b6:	6a 30                	push   0x30
c000c6b8:	e8 13 22 00 00       	call   c000e8d0 <malloc>
c000c6bd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000c6c4:	89 c3                	mov    ebx,eax
c000c6c6:	e8 05 22 00 00       	call   c000e8d0 <malloc>
c000c6cb:	83 c4 0c             	add    esp,0xc
c000c6ce:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000c6d4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c6d8:	89 c6                	mov    esi,eax
c000c6da:	50                   	push   eax
c000c6db:	e8 2c ba ff ff       	call   c000810c <File::File(char const*, Process*)>
c000c6e0:	83 c4 0c             	add    esp,0xc
c000c6e3:	89 33                	mov    DWORD PTR [ebx],esi
c000c6e5:	8d 44 24 07          	lea    eax,[esp+0x7]
c000c6e9:	50                   	push   eax
c000c6ea:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c6ee:	50                   	push   eax
c000c6ef:	56                   	push   esi
c000c6f0:	e8 37 bd ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c000c6f5:	5a                   	pop    edx
c000c6f6:	59                   	pop    ecx
c000c6f7:	6a 01                	push   0x1
c000c6f9:	ff 33                	push   DWORD PTR [ebx]
c000c6fb:	e8 2a ba ff ff       	call   c000812a <File::open(FileOpenMode)>
c000c700:	5e                   	pop    esi
c000c701:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c705:	e8 c6 21 00 00       	call   c000e8d0 <malloc>
c000c70a:	5a                   	pop    edx
c000c70b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c70f:	89 c7                	mov    edi,eax
c000c711:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c713:	8b 10                	mov    edx,DWORD PTR [eax]
c000c715:	56                   	push   esi
c000c716:	57                   	push   edi
c000c717:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c71b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c71f:	50                   	push   eax
c000c720:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c723:	83 c4 14             	add    esp,0x14
c000c726:	ff 33                	push   DWORD PTR [ebx]
c000c728:	e8 5b ba ff ff       	call   c0008188 <File::close()>
c000c72d:	59                   	pop    ecx
c000c72e:	58                   	pop    eax
c000c72f:	6a 13                	push   0x13
c000c731:	ff 33                	push   DWORD PTR [ebx]
c000c733:	e8 f2 b9 ff ff       	call   c000812a <File::open(FileOpenMode)>
c000c738:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c73a:	8b 10                	mov    edx,DWORD PTR [eax]
c000c73c:	89 34 24             	mov    DWORD PTR [esp],esi
c000c73f:	57                   	push   edi
c000c740:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c744:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c748:	50                   	push   eax
c000c749:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c74c:	83 c4 14             	add    esp,0x14
c000c74f:	57                   	push   edi
c000c750:	e8 8b 21 00 00       	call   c000e8e0 <free>
c000c755:	83 c4 10             	add    esp,0x10
c000c758:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c75b:	75 10                	jne    c000c76d <CmOpen(char const*)+0xbd>
c000c75d:	83 ec 0c             	sub    esp,0xc
c000c760:	68 27 1f 02 c0       	push   0xc0021f27
c000c765:	e8 ac 24 00 00       	call   c000ec16 <KePanic(char const*)>
c000c76a:	83 c4 10             	add    esp,0x10
c000c76d:	50                   	push   eax
c000c76e:	6a 00                	push   0x0
c000c770:	6a 00                	push   0x0
c000c772:	ff 33                	push   DWORD PTR [ebx]
c000c774:	8d 7b 05             	lea    edi,[ebx+0x5]
c000c777:	e8 6c ba ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000c77c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c77e:	8b 10                	mov    edx,DWORD PTR [eax]
c000c780:	89 34 24             	mov    DWORD PTR [esp],esi
c000c783:	57                   	push   edi
c000c784:	6a 00                	push   0x0
c000c786:	6a 2b                	push   0x2b
c000c788:	50                   	push   eax
c000c789:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c78c:	83 c4 1c             	add    esp,0x1c
c000c78f:	6a 00                	push   0x0
c000c791:	6a 00                	push   0x0
c000c793:	ff 33                	push   DWORD PTR [ebx]
c000c795:	e8 4e ba ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000c79a:	83 c4 0c             	add    esp,0xc
c000c79d:	6a 08                	push   0x8
c000c79f:	68 38 1f 02 c0       	push   0xc0021f38
c000c7a4:	57                   	push   edi
c000c7a5:	e8 d6 3b ff ff       	call   c0000380 <memcmp>
c000c7aa:	83 c4 10             	add    esp,0x10
c000c7ad:	85 c0                	test   eax,eax
c000c7af:	74 10                	je     c000c7c1 <CmOpen(char const*)+0x111>
c000c7b1:	83 ec 0c             	sub    esp,0xc
c000c7b4:	68 41 1f 02 c0       	push   0xc0021f41
c000c7b9:	e8 58 24 00 00       	call   c000ec16 <KePanic(char const*)>
c000c7be:	83 c4 10             	add    esp,0x10
c000c7c1:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000c7c5:	83 c4 10             	add    esp,0x10
c000c7c8:	89 d8                	mov    eax,ebx
c000c7ca:	5b                   	pop    ebx
c000c7cb:	5e                   	pop    esi
c000c7cc:	5f                   	pop    edi
c000c7cd:	c3                   	ret    

c000c7ce <CmClose(Reghive_Tag*)>:
c000c7ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7d2:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000c7d6:	74 0b                	je     c000c7e3 <CmClose(Reghive_Tag*)+0x15>
c000c7d8:	8b 00                	mov    eax,DWORD PTR [eax]
c000c7da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c7de:	e9 a5 b9 ff ff       	jmp    c0008188 <File::close()>
c000c7e3:	c3                   	ret    

c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000c7e4:	53                   	push   ebx
c000c7e5:	83 ec 18             	sub    esp,0x18
c000c7e8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c7ec:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c7f0:	74 29                	je     c000c81b <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000c7f2:	50                   	push   eax
c000c7f3:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000c7f8:	99                   	cdq    
c000c7f9:	52                   	push   edx
c000c7fa:	50                   	push   eax
c000c7fb:	ff 33                	push   DWORD PTR [ebx]
c000c7fd:	e8 e6 b9 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000c802:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c804:	5a                   	pop    edx
c000c805:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c809:	8b 10                	mov    edx,DWORD PTR [eax]
c000c80b:	51                   	push   ecx
c000c80c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c810:	6a 00                	push   0x0
c000c812:	6a 2b                	push   0x2b
c000c814:	50                   	push   eax
c000c815:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c818:	83 c4 20             	add    esp,0x20
c000c81b:	83 c4 18             	add    esp,0x18
c000c81e:	5b                   	pop    ebx
c000c81f:	c3                   	ret    

c000c820 <CmGetString(Reghive_Tag*, int, char*)>:
c000c820:	55                   	push   ebp
c000c821:	57                   	push   edi
c000c822:	56                   	push   esi
c000c823:	53                   	push   ebx
c000c824:	31 db                	xor    ebx,ebx
c000c826:	83 ec 70             	sub    esp,0x70
c000c829:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000c82d:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000c834:	50                   	push   eax
c000c835:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000c83c:	55                   	push   ebp
c000c83d:	e8 a2 ff ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c842:	83 c4 10             	add    esp,0x10
c000c845:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000c84a:	c1 e0 08             	shl    eax,0x8
c000c84d:	89 c2                	mov    edx,eax
c000c84f:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000c854:	09 d0                	or     eax,edx
c000c856:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000c85b:	c1 e0 08             	shl    eax,0x8
c000c85e:	09 d0                	or     eax,edx
c000c860:	74 25                	je     c000c887 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000c862:	52                   	push   edx
c000c863:	8d 54 24 39          	lea    edx,[esp+0x39]
c000c867:	52                   	push   edx
c000c868:	6b fb 0d             	imul   edi,ebx,0xd
c000c86b:	50                   	push   eax
c000c86c:	55                   	push   ebp
c000c86d:	e8 72 ff ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c872:	8d 74 24 49          	lea    esi,[esp+0x49]
c000c876:	b9 27 00 00 00       	mov    ecx,0x27
c000c87b:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000c882:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c884:	83 c4 10             	add    esp,0x10
c000c887:	83 c3 03             	add    ebx,0x3
c000c88a:	83 fb 15             	cmp    ebx,0x15
c000c88d:	75 b6                	jne    c000c845 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000c88f:	83 c4 6c             	add    esp,0x6c
c000c892:	5b                   	pop    ebx
c000c893:	5e                   	pop    esi
c000c894:	5f                   	pop    edi
c000c895:	5d                   	pop    ebp
c000c896:	c3                   	ret    

c000c897 <CmEnterDirectory(Reghive_Tag*, int)>:
c000c897:	83 ec 40             	sub    esp,0x40
c000c89a:	8d 44 24 09          	lea    eax,[esp+0x9]
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c8a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c8a7:	e8 38 ff ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	83 c8 ff             	or     eax,0xffffffff
c000c8b2:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000c8b7:	75 19                	jne    c000c8d2 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000c8b9:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000c8be:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000c8c3:	c1 e0 08             	shl    eax,0x8
c000c8c6:	09 c2                	or     edx,eax
c000c8c8:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000c8cd:	c1 e0 10             	shl    eax,0x10
c000c8d0:	09 d0                	or     eax,edx
c000c8d2:	83 c4 3c             	add    esp,0x3c
c000c8d5:	c3                   	ret    

c000c8d6 <CmGetNext(Reghive_Tag*, int)>:
c000c8d6:	83 ec 40             	sub    esp,0x40
c000c8d9:	8d 44 24 09          	lea    eax,[esp+0x9]
c000c8dd:	50                   	push   eax
c000c8de:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c8e2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c8e6:	e8 f9 fe ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c8eb:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000c8f0:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000c8f5:	c1 e0 08             	shl    eax,0x8
c000c8f8:	09 c2                	or     edx,eax
c000c8fa:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000c8ff:	83 c4 4c             	add    esp,0x4c
c000c902:	c1 e0 10             	shl    eax,0x10
c000c905:	09 d0                	or     eax,edx
c000c907:	c3                   	ret    

c000c908 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000c908:	53                   	push   ebx
c000c909:	83 ec 18             	sub    esp,0x18
c000c90c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c910:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c914:	74 29                	je     c000c93f <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000c916:	50                   	push   eax
c000c917:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000c91c:	99                   	cdq    
c000c91d:	52                   	push   edx
c000c91e:	50                   	push   eax
c000c91f:	ff 33                	push   DWORD PTR [ebx]
c000c921:	e8 c2 b8 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000c926:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c928:	5a                   	pop    edx
c000c929:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c92d:	8b 10                	mov    edx,DWORD PTR [eax]
c000c92f:	51                   	push   ecx
c000c930:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c934:	6a 00                	push   0x0
c000c936:	6a 2b                	push   0x2b
c000c938:	50                   	push   eax
c000c939:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c93c:	83 c4 20             	add    esp,0x20
c000c93f:	83 c4 18             	add    esp,0x18
c000c942:	5b                   	pop    ebx
c000c943:	c3                   	ret    

c000c944 <CmFreeExtent(Reghive_Tag*, int)>:
c000c944:	53                   	push   ebx
c000c945:	83 ec 3c             	sub    esp,0x3c
c000c948:	6a 2b                	push   0x2b
c000c94a:	6a 00                	push   0x0
c000c94c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000c950:	53                   	push   ebx
c000c951:	e8 9a 3b ff ff       	call   c00004f0 <memset>
c000c956:	83 c4 0c             	add    esp,0xc
c000c959:	53                   	push   ebx
c000c95a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c95e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c962:	e8 a1 ff ff ff       	call   c000c908 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000c967:	83 c4 48             	add    esp,0x48
c000c96a:	5b                   	pop    ebx
c000c96b:	c3                   	ret    

c000c96c <CmUpdateHeader(Reghive_Tag*)>:
c000c96c:	83 ec 0c             	sub    esp,0xc
c000c96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c973:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000c977:	74 10                	je     c000c989 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000c979:	52                   	push   edx
c000c97a:	8d 50 05             	lea    edx,[eax+0x5]
c000c97d:	52                   	push   edx
c000c97e:	6a 00                	push   0x0
c000c980:	50                   	push   eax
c000c981:	e8 82 ff ff ff       	call   c000c908 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	83 c4 0c             	add    esp,0xc
c000c98c:	c3                   	ret    

c000c98d <CmExpand(Reghive_Tag*, int)>:
c000c98d:	55                   	push   ebp
c000c98e:	57                   	push   edi
c000c98f:	83 cf ff             	or     edi,0xffffffff
c000c992:	56                   	push   esi
c000c993:	53                   	push   ebx
c000c994:	83 ec 3c             	sub    esp,0x3c
c000c997:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000c99b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000c99f:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c9a3:	74 59                	je     c000c9fe <CmExpand(Reghive_Tag*, int)+0x71>
c000c9a5:	50                   	push   eax
c000c9a6:	31 d2                	xor    edx,edx
c000c9a8:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000c9ac:	31 ff                	xor    edi,edi
c000c9ae:	52                   	push   edx
c000c9af:	50                   	push   eax
c000c9b0:	ff 33                	push   DWORD PTR [ebx]
c000c9b2:	e8 31 b8 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000c9b7:	83 c4 0c             	add    esp,0xc
c000c9ba:	6a 2b                	push   0x2b
c000c9bc:	6a 00                	push   0x0
c000c9be:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c000c9c2:	55                   	push   ebp
c000c9c3:	e8 28 3b ff ff       	call   c00004f0 <memset>
c000c9c8:	83 c4 10             	add    esp,0x10
c000c9cb:	39 f7                	cmp    edi,esi
c000c9cd:	7d 1b                	jge    c000c9ea <CmExpand(Reghive_Tag*, int)+0x5d>
c000c9cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c9d1:	83 ec 0c             	sub    esp,0xc
c000c9d4:	47                   	inc    edi
c000c9d5:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000c9d9:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9db:	51                   	push   ecx
c000c9dc:	55                   	push   ebp
c000c9dd:	6a 00                	push   0x0
c000c9df:	6a 2b                	push   0x2b
c000c9e1:	50                   	push   eax
c000c9e2:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c9e5:	83 c4 20             	add    esp,0x20
c000c9e8:	eb e1                	jmp    c000c9cb <CmExpand(Reghive_Tag*, int)+0x3e>
c000c9ea:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c000c9ed:	83 ec 0c             	sub    esp,0xc
c000c9f0:	01 fe                	add    esi,edi
c000c9f2:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c000c9f5:	53                   	push   ebx
c000c9f6:	e8 71 ff ff ff       	call   c000c96c <CmUpdateHeader(Reghive_Tag*)>
c000c9fb:	83 c4 10             	add    esp,0x10
c000c9fe:	83 c4 3c             	add    esp,0x3c
c000ca01:	89 f8                	mov    eax,edi
c000ca03:	5b                   	pop    ebx
c000ca04:	5e                   	pop    esi
c000ca05:	5f                   	pop    edi
c000ca06:	5d                   	pop    ebp
c000ca07:	c3                   	ret    

c000ca08 <CmFindUnusedExtent(Reghive_Tag*)>:
c000ca08:	55                   	push   ebp
c000ca09:	57                   	push   edi
c000ca0a:	56                   	push   esi
c000ca0b:	53                   	push   ebx
c000ca0c:	83 cb ff             	or     ebx,0xffffffff
c000ca0f:	83 ec 1c             	sub    esp,0x1c
c000ca12:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ca16:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000ca1a:	74 68                	je     c000ca84 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000ca1c:	51                   	push   ecx
c000ca1d:	be 2b 00 00 00       	mov    esi,0x2b
c000ca22:	6a 00                	push   0x0
c000ca24:	31 ff                	xor    edi,edi
c000ca26:	6a 00                	push   0x0
c000ca28:	31 db                	xor    ebx,ebx
c000ca2a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ca2d:	e8 b6 b7 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000ca32:	83 c4 10             	add    esp,0x10
c000ca35:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000ca38:	76 3b                	jbe    c000ca75 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000ca3a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ca3d:	83 ec 0c             	sub    esp,0xc
c000ca40:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000ca44:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca46:	51                   	push   ecx
c000ca47:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000ca4b:	51                   	push   ecx
c000ca4c:	6a 00                	push   0x0
c000ca4e:	6a 01                	push   0x1
c000ca50:	50                   	push   eax
c000ca51:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000ca54:	83 c4 20             	add    esp,0x20
c000ca57:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ca5c:	74 26                	je     c000ca84 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000ca5e:	52                   	push   edx
c000ca5f:	43                   	inc    ebx
c000ca60:	57                   	push   edi
c000ca61:	56                   	push   esi
c000ca62:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ca65:	e8 7e b7 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000ca6a:	83 c6 2b             	add    esi,0x2b
c000ca6d:	83 d7 00             	adc    edi,0x0
c000ca70:	83 c4 10             	add    esp,0x10
c000ca73:	eb c0                	jmp    c000ca35 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000ca75:	50                   	push   eax
c000ca76:	50                   	push   eax
c000ca77:	6a 40                	push   0x40
c000ca79:	55                   	push   ebp
c000ca7a:	e8 0e ff ff ff       	call   c000c98d <CmExpand(Reghive_Tag*, int)>
c000ca7f:	83 c4 10             	add    esp,0x10
c000ca82:	89 c3                	mov    ebx,eax
c000ca84:	83 c4 1c             	add    esp,0x1c
c000ca87:	89 d8                	mov    eax,ebx
c000ca89:	5b                   	pop    ebx
c000ca8a:	5e                   	pop    esi
c000ca8b:	5f                   	pop    edi
c000ca8c:	5d                   	pop    ebp
c000ca8d:	c3                   	ret    

c000ca8e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000ca8e:	55                   	push   ebp
c000ca8f:	57                   	push   edi
c000ca90:	56                   	push   esi
c000ca91:	53                   	push   ebx
c000ca92:	81 ec 88 00 00 00    	sub    esp,0x88
c000ca98:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000ca9f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000caa6:	e8 5d ff ff ff       	call   c000ca08 <CmFindUnusedExtent(Reghive_Tag*)>
c000caab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000caaf:	83 c4 0c             	add    esp,0xc
c000cab2:	6a 2b                	push   0x2b
c000cab4:	6a 00                	push   0x0
c000cab6:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000caba:	55                   	push   ebp
c000cabb:	e8 30 3a ff ff       	call   c00004f0 <memset>
c000cac0:	83 c4 10             	add    esp,0x10
c000cac3:	85 db                	test   ebx,ebx
c000cac5:	74 12                	je     c000cad9 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000cac7:	51                   	push   ecx
c000cac8:	55                   	push   ebp
c000cac9:	53                   	push   ebx
c000caca:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cad1:	e8 0e fd ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cad6:	83 c4 10             	add    esp,0x10
c000cad9:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000cadd:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000cae4:	b9 2b 00 00 00       	mov    ecx,0x2b
c000cae9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000caeb:	85 db                	test   ebx,ebx
c000caed:	74 49                	je     c000cb38 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000caef:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000caf4:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000caf9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cafd:	c1 e0 08             	shl    eax,0x8
c000cb00:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000cb06:	09 c8                	or     eax,ecx
c000cb08:	74 11                	je     c000cb1b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000cb0a:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000cb0e:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000cb12:	c1 e8 10             	shr    eax,0x10
c000cb15:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000cb19:	eb 0f                	jmp    c000cb2a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000cb1b:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cb20:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cb25:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cb2a:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000cb2e:	c1 ea 08             	shr    edx,0x8
c000cb31:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000cb36:	eb 0f                	jmp    c000cb47 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000cb38:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cb3d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cb42:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cb47:	52                   	push   edx
c000cb48:	8d 44 24 49          	lea    eax,[esp+0x49]
c000cb4c:	50                   	push   eax
c000cb4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb51:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cb58:	e8 ab fd ff ff       	call   c000c908 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cb5d:	83 c4 10             	add    esp,0x10
c000cb60:	85 db                	test   ebx,ebx
c000cb62:	74 12                	je     c000cb76 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000cb64:	50                   	push   eax
c000cb65:	55                   	push   ebp
c000cb66:	53                   	push   ebx
c000cb67:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cb6e:	e8 95 fd ff ff       	call   c000c908 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cb73:	83 c4 10             	add    esp,0x10
c000cb76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb7a:	83 c4 7c             	add    esp,0x7c
c000cb7d:	5b                   	pop    ebx
c000cb7e:	5e                   	pop    esi
c000cb7f:	5f                   	pop    edi
c000cb80:	5d                   	pop    ebp
c000cb81:	c3                   	ret    

c000cb82 <CmSetString(Reghive_Tag*, int, char const*)>:
c000cb82:	55                   	push   ebp
c000cb83:	57                   	push   edi
c000cb84:	56                   	push   esi
c000cb85:	53                   	push   ebx
c000cb86:	bb 27 00 00 00       	mov    ebx,0x27
c000cb8b:	81 ec 88 00 00 00    	sub    esp,0x88
c000cb91:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c000cb98:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000cb9f:	e8 dc 39 ff ff       	call   c0000580 <strlen>
c000cba4:	8d 48 26             	lea    ecx,[eax+0x26]
c000cba7:	89 c8                	mov    eax,ecx
c000cba9:	99                   	cdq    
c000cbaa:	f7 fb                	idiv   ebx
c000cbac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cbb0:	83 c4 10             	add    esp,0x10
c000cbb3:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000cbb9:	7e 10                	jle    c000cbcb <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000cbbb:	83 ec 0c             	sub    esp,0xc
c000cbbe:	68 52 1f 02 c0       	push   0xc0021f52
c000cbc3:	e8 4e 20 00 00       	call   c000ec16 <KePanic(char const*)>
c000cbc8:	83 c4 10             	add    esp,0x10
c000cbcb:	53                   	push   ebx
c000cbcc:	31 ed                	xor    ebp,ebp
c000cbce:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000cbd2:	53                   	push   ebx
c000cbd3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cbda:	57                   	push   edi
c000cbdb:	e8 04 fc ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cbe0:	83 c4 10             	add    esp,0x10
c000cbe3:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c000cbe7:	89 f0                	mov    eax,esi
c000cbe9:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c000cbed:	c1 e0 08             	shl    eax,0x8
c000cbf0:	09 c6                	or     esi,eax
c000cbf2:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000cbf6:	c1 e6 08             	shl    esi,0x8
c000cbf9:	09 c6                	or     esi,eax
c000cbfb:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000cbff:	7e 72                	jle    c000cc73 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c000cc01:	85 f6                	test   esi,esi
c000cc03:	75 25                	jne    c000cc2a <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000cc05:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000cc0a:	8d 44 24 45          	lea    eax,[esp+0x45]
c000cc0e:	50                   	push   eax
c000cc0f:	6a 00                	push   0x0
c000cc11:	6a 00                	push   0x0
c000cc13:	57                   	push   edi
c000cc14:	e8 75 fe ff ff       	call   c000ca8e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000cc19:	83 c4 10             	add    esp,0x10
c000cc1c:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000cc1f:	89 c6                	mov    esi,eax
c000cc21:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000cc24:	c1 f8 10             	sar    eax,0x10
c000cc27:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000cc2a:	51                   	push   ecx
c000cc2b:	8d 54 24 49          	lea    edx,[esp+0x49]
c000cc2f:	52                   	push   edx
c000cc30:	56                   	push   esi
c000cc31:	57                   	push   edi
c000cc32:	e8 ad fb ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cc37:	83 c4 0c             	add    esp,0xc
c000cc3a:	6a 27                	push   0x27
c000cc3c:	6a 00                	push   0x0
c000cc3e:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000cc42:	51                   	push   ecx
c000cc43:	e8 a8 38 ff ff       	call   c00004f0 <memset>
c000cc48:	6b c5 27             	imul   eax,ebp,0x27
c000cc4b:	83 c4 0c             	add    esp,0xc
c000cc4e:	6a 27                	push   0x27
c000cc50:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000cc57:	50                   	push   eax
c000cc58:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000cc5c:	51                   	push   ecx
c000cc5d:	e8 2e 3a ff ff       	call   c0000690 <strncpy>
c000cc62:	83 c4 0c             	add    esp,0xc
c000cc65:	8d 54 24 49          	lea    edx,[esp+0x49]
c000cc69:	52                   	push   edx
c000cc6a:	56                   	push   esi
c000cc6b:	57                   	push   edi
c000cc6c:	e8 97 fc ff ff       	call   c000c908 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cc71:	eb 19                	jmp    c000cc8c <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c000cc73:	85 f6                	test   esi,esi
c000cc75:	74 18                	je     c000cc8f <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c000cc77:	52                   	push   edx
c000cc78:	52                   	push   edx
c000cc79:	56                   	push   esi
c000cc7a:	57                   	push   edi
c000cc7b:	e8 c4 fc ff ff       	call   c000c944 <CmFreeExtent(Reghive_Tag*, int)>
c000cc80:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000cc84:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000cc88:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000cc8c:	83 c4 10             	add    esp,0x10
c000cc8f:	45                   	inc    ebp
c000cc90:	83 c3 03             	add    ebx,0x3
c000cc93:	83 fd 07             	cmp    ebp,0x7
c000cc96:	0f 85 47 ff ff ff    	jne    c000cbe3 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000cc9c:	50                   	push   eax
c000cc9d:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000cca1:	50                   	push   eax
c000cca2:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cca9:	57                   	push   edi
c000ccaa:	e8 59 fc ff ff       	call   c000c908 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ccaf:	81 c4 8c 00 00 00    	add    esp,0x8c
c000ccb5:	5b                   	pop    ebx
c000ccb6:	5e                   	pop    esi
c000ccb7:	5f                   	pop    edi
c000ccb8:	5d                   	pop    ebp
c000ccb9:	c3                   	ret    

c000ccba <CmGetMatch(char*, char*, bool, bool*)>:
c000ccba:	56                   	push   esi
c000ccbb:	53                   	push   ebx
c000ccbc:	50                   	push   eax
c000ccbd:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ccc2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ccc6:	74 25                	je     c000cced <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000ccc8:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000cccb:	31 db                	xor    ebx,ebx
c000cccd:	50                   	push   eax
c000ccce:	50                   	push   eax
c000cccf:	8d 04 9d 20 3e 02 c0 	lea    eax,[ebx*4-0x3ffdc1e0]
c000ccd6:	50                   	push   eax
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	e8 a0 3a ff ff       	call   c0000780 <strcmp>
c000cce0:	83 c4 10             	add    esp,0x10
c000cce3:	85 c0                	test   eax,eax
c000cce5:	74 2e                	je     c000cd15 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000cce7:	43                   	inc    ebx
c000cce8:	83 fb 3f             	cmp    ebx,0x3f
c000cceb:	75 e0                	jne    c000cccd <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000cced:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000ccf0:	31 db                	xor    ebx,ebx
c000ccf2:	51                   	push   ecx
c000ccf3:	51                   	push   ecx
c000ccf4:	8d 04 9d 20 3e 02 c0 	lea    eax,[ebx*4-0x3ffdc1e0]
c000ccfb:	50                   	push   eax
c000ccfc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cd00:	e8 7b 3a ff ff       	call   c0000780 <strcmp>
c000cd05:	83 c4 10             	add    esp,0x10
c000cd08:	85 c0                	test   eax,eax
c000cd0a:	74 09                	je     c000cd15 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000cd0c:	43                   	inc    ebx
c000cd0d:	83 fb 3f             	cmp    ebx,0x3f
c000cd10:	75 e0                	jne    c000ccf2 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000cd12:	83 cb ff             	or     ebx,0xffffffff
c000cd15:	5a                   	pop    edx
c000cd16:	89 d8                	mov    eax,ebx
c000cd18:	5b                   	pop    ebx
c000cd19:	5e                   	pop    esi
c000cd1a:	c3                   	ret    

c000cd1b <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000cd1b:	55                   	push   ebp
c000cd1c:	31 c0                	xor    eax,eax
c000cd1e:	57                   	push   edi
c000cd1f:	56                   	push   esi
c000cd20:	53                   	push   ebx
c000cd21:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd25:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cd29:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000cd2d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd31:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000cd33:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000cd36:	83 fd 1f             	cmp    ebp,0x1f
c000cd39:	7f 0b                	jg     c000cd46 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000cd3b:	0f b6 c2             	movzx  eax,dl
c000cd3e:	d3 e0                	shl    eax,cl
c000cd40:	09 07                	or     DWORD PTR [edi],eax
c000cd42:	b0 01                	mov    al,0x1
c000cd44:	01 33                	add    DWORD PTR [ebx],esi
c000cd46:	5b                   	pop    ebx
c000cd47:	5e                   	pop    esi
c000cd48:	5f                   	pop    edi
c000cd49:	5d                   	pop    ebp
c000cd4a:	c3                   	ret    

c000cd4b <CmGetShift(unsigned int*, int*, int, bool*)>:
c000cd4b:	57                   	push   edi
c000cd4c:	56                   	push   esi
c000cd4d:	53                   	push   ebx
c000cd4e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cd52:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000cd56:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000cd5a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cd5e:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000cd60:	7c 17                	jl     c000cd79 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000cd62:	8b 17                	mov    edx,DWORD PTR [edi]
c000cd64:	b8 01 00 00 00       	mov    eax,0x1
c000cd69:	d3 e0                	shl    eax,cl
c000cd6b:	48                   	dec    eax
c000cd6c:	21 d0                	and    eax,edx
c000cd6e:	d3 ea                	shr    edx,cl
c000cd70:	89 17                	mov    DWORD PTR [edi],edx
c000cd72:	29 0b                	sub    DWORD PTR [ebx],ecx
c000cd74:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000cd77:	eb 05                	jmp    c000cd7e <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000cd79:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000cd7c:	31 c0                	xor    eax,eax
c000cd7e:	5b                   	pop    ebx
c000cd7f:	5e                   	pop    esi
c000cd80:	5f                   	pop    edi
c000cd81:	c3                   	ret    

c000cd82 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000cd82:	83 ec 40             	sub    esp,0x40
c000cd85:	8d 44 24 09          	lea    eax,[esp+0x9]
c000cd89:	50                   	push   eax
c000cd8a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cd8e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cd92:	e8 4d fa ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cd97:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000cd9b:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000cd9f:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000cda3:	89 10                	mov    DWORD PTR [eax],edx
c000cda5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000cda8:	83 c4 4c             	add    esp,0x4c
c000cdab:	c3                   	ret    

c000cdac <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000cdac:	55                   	push   ebp
c000cdad:	57                   	push   edi
c000cdae:	56                   	push   esi
c000cdaf:	53                   	push   ebx
c000cdb0:	83 ec 40             	sub    esp,0x40
c000cdb3:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000cdb7:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000cdbb:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000cdbf:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cdc3:	53                   	push   ebx
c000cdc4:	56                   	push   esi
c000cdc5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000cdc9:	e8 16 fa ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cdce:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000cdd2:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000cdd6:	83 c4 0c             	add    esp,0xc
c000cdd9:	53                   	push   ebx
c000cdda:	56                   	push   esi
c000cddb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000cddf:	e8 24 fb ff ff       	call   c000c908 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cde4:	83 c4 4c             	add    esp,0x4c
c000cde7:	5b                   	pop    ebx
c000cde8:	5e                   	pop    esi
c000cde9:	5f                   	pop    edi
c000cdea:	5d                   	pop    ebp
c000cdeb:	c3                   	ret    

c000cdec <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000cdec:	55                   	push   ebp
c000cded:	57                   	push   edi
c000cdee:	56                   	push   esi
c000cdef:	31 f6                	xor    esi,esi
c000cdf1:	53                   	push   ebx
c000cdf2:	31 db                	xor    ebx,ebx
c000cdf4:	83 ec 40             	sub    esp,0x40
c000cdf7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cdff:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ce07:	6a 12                	push   0x12
c000ce09:	68 ee 00 00 00       	push   0xee
c000ce0e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000ce12:	e8 d9 36 ff ff       	call   c00004f0 <memset>
c000ce17:	83 c4 10             	add    esp,0x10
c000ce1a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000ce1e:	6a 08                	push   0x8
c000ce20:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ce24:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000ce28:	50                   	push   eax
c000ce29:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ce2d:	55                   	push   ebp
c000ce2e:	57                   	push   edi
c000ce2f:	e8 e7 fe ff ff       	call   c000cd1b <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000ce34:	83 c4 10             	add    esp,0x10
c000ce37:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000ce3b:	50                   	push   eax
c000ce3c:	6a 06                	push   0x6
c000ce3e:	55                   	push   ebp
c000ce3f:	57                   	push   edi
c000ce40:	e8 06 ff ff ff       	call   c000cd4b <CmGetShift(unsigned int*, int*, int, bool*)>
c000ce45:	83 c4 10             	add    esp,0x10
c000ce48:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000ce4d:	74 07                	je     c000ce56 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000ce4f:	46                   	inc    esi
c000ce50:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000ce54:	eb e1                	jmp    c000ce37 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000ce56:	43                   	inc    ebx
c000ce57:	83 fb 12             	cmp    ebx,0x12
c000ce5a:	75 c2                	jne    c000ce1e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000ce5c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ce60:	31 f6                	xor    esi,esi
c000ce62:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000ce65:	50                   	push   eax
c000ce66:	50                   	push   eax
c000ce67:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c000ce6c:	46                   	inc    esi
c000ce6d:	8d 04 85 20 3e 02 c0 	lea    eax,[eax*4-0x3ffdc1e0]
c000ce74:	50                   	push   eax
c000ce75:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000ce79:	e8 f2 39 ff ff       	call   c0000870 <strcat>
c000ce7e:	83 c4 10             	add    esp,0x10
c000ce81:	83 fe 18             	cmp    esi,0x18
c000ce84:	75 df                	jne    c000ce65 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000ce86:	83 c4 3c             	add    esp,0x3c
c000ce89:	31 c0                	xor    eax,eax
c000ce8b:	5b                   	pop    ebx
c000ce8c:	5e                   	pop    esi
c000ce8d:	5f                   	pop    edi
c000ce8e:	5d                   	pop    ebp
c000ce8f:	c3                   	ret    

c000ce90 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000ce90:	83 ec 40             	sub    esp,0x40
c000ce93:	8d 44 24 09          	lea    eax,[esp+0x9]
c000ce97:	50                   	push   eax
c000ce98:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ce9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cea0:	e8 3f f9 ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cea5:	58                   	pop    eax
c000cea6:	5a                   	pop    edx
c000cea7:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000ceab:	8d 44 24 15          	lea    eax,[esp+0x15]
c000ceaf:	50                   	push   eax
c000ceb0:	e8 37 ff ff ff       	call   c000cdec <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000ceb5:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000ceba:	83 c4 4c             	add    esp,0x4c
c000cebd:	c3                   	ret    

c000cebe <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000cebe:	55                   	push   ebp
c000cebf:	57                   	push   edi
c000cec0:	56                   	push   esi
c000cec1:	53                   	push   ebx
c000cec2:	31 db                	xor    ebx,ebx
c000cec4:	83 ec 70             	sub    esp,0x70
c000cec7:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000cece:	6a 30                	push   0x30
c000ced0:	6a 00                	push   0x0
c000ced2:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000ced6:	56                   	push   esi
c000ced7:	e8 14 36 ff ff       	call   c00004f0 <memset>
c000cedc:	83 c4 10             	add    esp,0x10
c000cedf:	83 ec 0c             	sub    esp,0xc
c000cee2:	57                   	push   edi
c000cee3:	e8 98 36 ff ff       	call   c0000580 <strlen>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	39 d8                	cmp    eax,ebx
c000ceed:	76 16                	jbe    c000cf05 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000ceef:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000cef3:	83 ec 0c             	sub    esp,0xc
c000cef6:	50                   	push   eax
c000cef7:	e8 64 3a ff ff       	call   c0000960 <toupper>
c000cefc:	83 c4 10             	add    esp,0x10
c000ceff:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000cf02:	43                   	inc    ebx
c000cf03:	eb da                	jmp    c000cedf <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000cf05:	52                   	push   edx
c000cf06:	31 db                	xor    ebx,ebx
c000cf08:	6a 18                	push   0x18
c000cf0a:	31 ff                	xor    edi,edi
c000cf0c:	6a 3f                	push   0x3f
c000cf0e:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cf12:	50                   	push   eax
c000cf13:	e8 d8 35 ff ff       	call   c00004f0 <memset>
c000cf18:	83 c4 10             	add    esp,0x10
c000cf1b:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c000cf1f:	8d 74 24 10          	lea    esi,[esp+0x10]
c000cf23:	84 c0                	test   al,al
c000cf25:	0f 84 af 00 00 00    	je     c000cfda <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000cf2b:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000cf2f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cf32:	83 ec 0c             	sub    esp,0xc
c000cf35:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c000cf3a:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000cf3e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000cf42:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000cf47:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000cf4b:	56                   	push   esi
c000cf4c:	e8 2f 36 ff ff       	call   c0000580 <strlen>
c000cf51:	83 c4 10             	add    esp,0x10
c000cf54:	85 c0                	test   eax,eax
c000cf56:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000cf5a:	74 0b                	je     c000cf67 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000cf5c:	50                   	push   eax
c000cf5d:	6a 01                	push   0x1
c000cf5f:	56                   	push   esi
c000cf60:	8d 44 24 20          	lea    eax,[esp+0x20]
c000cf64:	50                   	push   eax
c000cf65:	eb 0a                	jmp    c000cf71 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000cf67:	50                   	push   eax
c000cf68:	6a 00                	push   0x0
c000cf6a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000cf6e:	50                   	push   eax
c000cf6f:	6a 00                	push   0x0
c000cf71:	e8 44 fd ff ff       	call   c000ccba <CmGetMatch(char*, char*, bool, bool*)>
c000cf76:	83 c4 10             	add    esp,0x10
c000cf79:	83 f8 ff             	cmp    eax,0xffffffff
c000cf7c:	75 1a                	jne    c000cf98 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000cf7e:	83 ec 0c             	sub    esp,0xc
c000cf81:	68 67 1f 02 c0       	push   0xc0021f67
c000cf86:	e8 8b 1c 00 00       	call   c000ec16 <KePanic(char const*)>
c000cf8b:	83 c4 10             	add    esp,0x10
c000cf8e:	b8 02 00 00 00       	mov    eax,0x2
c000cf93:	e9 bb 00 00 00       	jmp    c000d053 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000cf98:	83 ff 18             	cmp    edi,0x18
c000cf9b:	75 1a                	jne    c000cfb7 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000cf9d:	83 ec 0c             	sub    esp,0xc
c000cfa0:	68 7c 1f 02 c0       	push   0xc0021f7c
c000cfa5:	e8 6c 1c 00 00       	call   c000ec16 <KePanic(char const*)>
c000cfaa:	83 c4 10             	add    esp,0x10
c000cfad:	b8 01 00 00 00       	mov    eax,0x1
c000cfb2:	e9 9c 00 00 00       	jmp    c000d053 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000cfb7:	47                   	inc    edi
c000cfb8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000cfbd:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000cfc1:	0f 45 dd             	cmovne ebx,ebp
c000cfc4:	83 ec 0c             	sub    esp,0xc
c000cfc7:	56                   	push   esi
c000cfc8:	e8 b3 35 ff ff       	call   c0000580 <strlen>
c000cfcd:	83 c4 10             	add    esp,0x10
c000cfd0:	85 c0                	test   eax,eax
c000cfd2:	74 06                	je     c000cfda <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000cfd4:	43                   	inc    ebx
c000cfd5:	e9 41 ff ff ff       	jmp    c000cf1b <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000cfda:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000cfe2:	31 db                	xor    ebx,ebx
c000cfe4:	31 ff                	xor    edi,edi
c000cfe6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cfee:	50                   	push   eax
c000cfef:	6a 12                	push   0x12
c000cff1:	68 ee 00 00 00       	push   0xee
c000cff6:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000cffd:	e8 ee 34 ff ff       	call   c00004f0 <memset>
c000d002:	83 c4 10             	add    esp,0x10
c000d005:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000d009:	83 fb 17             	cmp    ebx,0x17
c000d00c:	7e 26                	jle    c000d034 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c000d00e:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d012:	50                   	push   eax
c000d013:	6a 08                	push   0x8
c000d015:	55                   	push   ebp
c000d016:	56                   	push   esi
c000d017:	e8 2f fd ff ff       	call   c000cd4b <CmGetShift(unsigned int*, int*, int, bool*)>
c000d01c:	83 c4 10             	add    esp,0x10
c000d01f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d024:	74 26                	je     c000d04c <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c000d026:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000d02d:	4b                   	dec    ebx
c000d02e:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000d031:	47                   	inc    edi
c000d032:	eb 1c                	jmp    c000d050 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000d034:	6a 06                	push   0x6
c000d036:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c000d03b:	50                   	push   eax
c000d03c:	55                   	push   ebp
c000d03d:	56                   	push   esi
c000d03e:	e8 d8 fc ff ff       	call   c000cd1b <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000d043:	83 c4 10             	add    esp,0x10
c000d046:	84 c0                	test   al,al
c000d048:	75 06                	jne    c000d050 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000d04a:	eb c2                	jmp    c000d00e <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c000d04c:	31 c0                	xor    eax,eax
c000d04e:	eb 03                	jmp    c000d053 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000d050:	43                   	inc    ebx
c000d051:	eb b2                	jmp    c000d005 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c000d053:	83 c4 6c             	add    esp,0x6c
c000d056:	5b                   	pop    ebx
c000d057:	5e                   	pop    esi
c000d058:	5f                   	pop    edi
c000d059:	5d                   	pop    ebp
c000d05a:	c3                   	ret    

c000d05b <CmCreateString(Reghive_Tag*, int, char const*)>:
c000d05b:	53                   	push   ebx
c000d05c:	83 ec 3c             	sub    esp,0x3c
c000d05f:	6a 2b                	push   0x2b
c000d061:	6a 00                	push   0x0
c000d063:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d067:	53                   	push   ebx
c000d068:	e8 83 34 ff ff       	call   c00004f0 <memset>
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d073:	50                   	push   eax
c000d074:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d078:	e8 41 fe ff ff       	call   c000cebe <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d07d:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000d082:	83 c4 0c             	add    esp,0xc
c000d085:	6a 15                	push   0x15
c000d087:	6a 00                	push   0x0
c000d089:	8d 44 24 27          	lea    eax,[esp+0x27]
c000d08d:	50                   	push   eax
c000d08e:	e8 5d 34 ff ff       	call   c00004f0 <memset>
c000d093:	53                   	push   ebx
c000d094:	6a 00                	push   0x0
c000d096:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d09a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d09e:	e8 eb f9 ff ff       	call   c000ca8e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d0a3:	83 c4 58             	add    esp,0x58
c000d0a6:	5b                   	pop    ebx
c000d0a7:	c3                   	ret    

c000d0a8 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000d0a8:	56                   	push   esi
c000d0a9:	53                   	push   ebx
c000d0aa:	83 ec 48             	sub    esp,0x48
c000d0ad:	6a 12                	push   0x12
c000d0af:	68 ff 00 00 00       	push   0xff
c000d0b4:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000d0b8:	56                   	push   esi
c000d0b9:	e8 32 34 ff ff       	call   c00004f0 <memset>
c000d0be:	5a                   	pop    edx
c000d0bf:	59                   	pop    ecx
c000d0c0:	56                   	push   esi
c000d0c1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d0c5:	e8 f4 fd ff ff       	call   c000cebe <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d0ca:	83 c4 10             	add    esp,0x10
c000d0cd:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d0d1:	85 db                	test   ebx,ebx
c000d0d3:	74 42                	je     c000d117 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000d0d5:	50                   	push   eax
c000d0d6:	8d 44 24 19          	lea    eax,[esp+0x19]
c000d0da:	50                   	push   eax
c000d0db:	53                   	push   ebx
c000d0dc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d0e0:	e8 ff f6 ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d0e5:	83 c4 0c             	add    esp,0xc
c000d0e8:	6a 12                	push   0x12
c000d0ea:	8d 44 24 21          	lea    eax,[esp+0x21]
c000d0ee:	50                   	push   eax
c000d0ef:	56                   	push   esi
c000d0f0:	e8 8b 32 ff ff       	call   c0000380 <memcmp>
c000d0f5:	83 c4 10             	add    esp,0x10
c000d0f8:	85 c0                	test   eax,eax
c000d0fa:	74 1e                	je     c000d11a <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000d0fc:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000d101:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d106:	c1 e3 08             	shl    ebx,0x8
c000d109:	09 d8                	or     eax,ebx
c000d10b:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000d110:	c1 e3 10             	shl    ebx,0x10
c000d113:	09 c3                	or     ebx,eax
c000d115:	eb ba                	jmp    c000d0d1 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000d117:	83 cb ff             	or     ebx,0xffffffff
c000d11a:	83 c4 44             	add    esp,0x44
c000d11d:	89 d8                	mov    eax,ebx
c000d11f:	5b                   	pop    ebx
c000d120:	5e                   	pop    esi
c000d121:	c3                   	ret    

c000d122 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000d122:	57                   	push   edi
c000d123:	56                   	push   esi
c000d124:	53                   	push   ebx
c000d125:	83 ec 34             	sub    esp,0x34
c000d128:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000d12c:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000d130:	6a 2b                	push   0x2b
c000d132:	6a 00                	push   0x0
c000d134:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d138:	53                   	push   ebx
c000d139:	e8 b2 33 ff ff       	call   c00004f0 <memset>
c000d13e:	58                   	pop    eax
c000d13f:	5a                   	pop    edx
c000d140:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d144:	50                   	push   eax
c000d145:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d149:	e8 70 fd ff ff       	call   c000cebe <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d14e:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c000d152:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000d156:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000d15a:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000d15e:	53                   	push   ebx
c000d15f:	6a 00                	push   0x0
c000d161:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d165:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d169:	e8 20 f9 ff ff       	call   c000ca8e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d16e:	83 c4 50             	add    esp,0x50
c000d171:	5b                   	pop    ebx
c000d172:	5e                   	pop    esi
c000d173:	5f                   	pop    edi
c000d174:	c3                   	ret    

c000d175 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000d175:	55                   	push   ebp
c000d176:	57                   	push   edi
c000d177:	56                   	push   esi
c000d178:	53                   	push   ebx
c000d179:	83 ec 40             	sub    esp,0x40
c000d17c:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000d180:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d184:	6a 2b                	push   0x2b
c000d186:	6a 00                	push   0x0
c000d188:	8d 74 24 11          	lea    esi,[esp+0x11]
c000d18c:	56                   	push   esi
c000d18d:	e8 5e 33 ff ff       	call   c00004f0 <memset>
c000d192:	5f                   	pop    edi
c000d193:	89 ef                	mov    edi,ebp
c000d195:	58                   	pop    eax
c000d196:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d19a:	50                   	push   eax
c000d19b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d19f:	e8 1a fd ff ff       	call   c000cebe <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d1a4:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000d1a9:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000d1ae:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000d1b3:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000d1b8:	83 c4 10             	add    esp,0x10
c000d1bb:	85 ed                	test   ebp,ebp
c000d1bd:	74 14                	je     c000d1d3 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d1bf:	51                   	push   ecx
c000d1c0:	51                   	push   ecx
c000d1c1:	57                   	push   edi
c000d1c2:	53                   	push   ebx
c000d1c3:	e8 0e f7 ff ff       	call   c000c8d6 <CmGetNext(Reghive_Tag*, int)>
c000d1c8:	83 c4 10             	add    esp,0x10
c000d1cb:	85 c0                	test   eax,eax
c000d1cd:	74 04                	je     c000d1d3 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d1cf:	89 c7                	mov    edi,eax
c000d1d1:	eb e8                	jmp    c000d1bb <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000d1d3:	56                   	push   esi
c000d1d4:	6a 00                	push   0x0
c000d1d6:	57                   	push   edi
c000d1d7:	53                   	push   ebx
c000d1d8:	e8 b1 f8 ff ff       	call   c000ca8e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d1dd:	83 c4 0c             	add    esp,0xc
c000d1e0:	56                   	push   esi
c000d1e1:	50                   	push   eax
c000d1e2:	89 c7                	mov    edi,eax
c000d1e4:	53                   	push   ebx
c000d1e5:	e8 fa f5 ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d1ea:	58                   	pop    eax
c000d1eb:	5a                   	pop    edx
c000d1ec:	6a 6c                	push   0x6c
c000d1ee:	6a 00                	push   0x0
c000d1f0:	6a 00                	push   0x0
c000d1f2:	68 8d 1f 02 c0       	push   0xc0021f8d
c000d1f7:	57                   	push   edi
c000d1f8:	53                   	push   ebx
c000d1f9:	e8 24 ff ff ff       	call   c000d122 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000d1fe:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000d202:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000d206:	c1 e8 10             	shr    eax,0x10
c000d209:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000d20d:	83 c4 1c             	add    esp,0x1c
c000d210:	56                   	push   esi
c000d211:	57                   	push   edi
c000d212:	53                   	push   ebx
c000d213:	e8 f0 f6 ff ff       	call   c000c908 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d218:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000d21d:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000d222:	c1 e0 08             	shl    eax,0x8
c000d225:	09 c2                	or     edx,eax
c000d227:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000d22c:	83 c4 4c             	add    esp,0x4c
c000d22f:	5b                   	pop    ebx
c000d230:	5e                   	pop    esi
c000d231:	c1 e0 10             	shl    eax,0x10
c000d234:	09 d0                	or     eax,edx
c000d236:	5f                   	pop    edi
c000d237:	5d                   	pop    ebp
c000d238:	c3                   	ret    

c000d239 <zStrtok(char*, char const*)>:
c000d239:	55                   	push   ebp
c000d23a:	57                   	push   edi
c000d23b:	56                   	push   esi
c000d23c:	53                   	push   ebx
c000d23d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d241:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d245:	85 db                	test   ebx,ebx
c000d247:	74 2f                	je     c000d278 <zStrtok(char*, char const*)+0x3f>
c000d249:	85 c0                	test   eax,eax
c000d24b:	75 09                	jne    c000d256 <zStrtok(char*, char const*)+0x1d>
c000d24d:	a1 60 9d 02 c0       	mov    eax,ds:0xc0029d60
c000d252:	85 c0                	test   eax,eax
c000d254:	74 50                	je     c000d2a6 <zStrtok(char*, char const*)+0x6d>
c000d256:	31 c9                	xor    ecx,ecx
c000d258:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000d25c:	74 03                	je     c000d261 <zStrtok(char*, char const*)+0x28>
c000d25e:	41                   	inc    ecx
c000d25f:	eb f7                	jmp    c000d258 <zStrtok(char*, char const*)+0x1f>
c000d261:	31 d2                	xor    edx,edx
c000d263:	39 ca                	cmp    edx,ecx
c000d265:	74 15                	je     c000d27c <zStrtok(char*, char const*)+0x43>
c000d267:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000d26b:	8d 3c 10             	lea    edi,[eax+edx*1]
c000d26e:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000d271:	39 ee                	cmp    esi,ebp
c000d273:	74 13                	je     c000d288 <zStrtok(char*, char const*)+0x4f>
c000d275:	42                   	inc    edx
c000d276:	eb eb                	jmp    c000d263 <zStrtok(char*, char const*)+0x2a>
c000d278:	31 c0                	xor    eax,eax
c000d27a:	eb 2a                	jmp    c000d2a6 <zStrtok(char*, char const*)+0x6d>
c000d27c:	c7 05 60 9d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029d60,0x0
c000d286:	eb 1e                	jmp    c000d2a6 <zStrtok(char*, char const*)+0x6d>
c000d288:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000d28b:	39 ce                	cmp    esi,ecx
c000d28d:	75 0a                	jne    c000d299 <zStrtok(char*, char const*)+0x60>
c000d28f:	40                   	inc    eax
c000d290:	a3 60 9d 02 c0       	mov    ds:0xc0029d60,eax
c000d295:	89 d8                	mov    eax,ebx
c000d297:	eb 0d                	jmp    c000d2a6 <zStrtok(char*, char const*)+0x6d>
c000d299:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000d29c:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000d2a0:	89 15 60 9d 02 c0    	mov    DWORD PTR ds:0xc0029d60,edx
c000d2a6:	5b                   	pop    ebx
c000d2a7:	5e                   	pop    esi
c000d2a8:	5f                   	pop    edi
c000d2a9:	5d                   	pop    ebp
c000d2aa:	c3                   	ret    

c000d2ab <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000d2ab:	57                   	push   edi
c000d2ac:	56                   	push   esi
c000d2ad:	53                   	push   ebx
c000d2ae:	81 ec 08 01 00 00    	sub    esp,0x108
c000d2b4:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000d2bb:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000d2c2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000d2c6:	53                   	push   ebx
c000d2c7:	e8 84 33 ff ff       	call   c0000650 <strcpy>
c000d2cc:	59                   	pop    ecx
c000d2cd:	5e                   	pop    esi
c000d2ce:	68 24 2d 02 c0       	push   0xc0022d24
c000d2d3:	53                   	push   ebx
c000d2d4:	bb 01 00 00 00       	mov    ebx,0x1
c000d2d9:	e8 5b ff ff ff       	call   c000d239 <zStrtok(char*, char const*)>
c000d2de:	83 c4 10             	add    esp,0x10
c000d2e1:	85 c0                	test   eax,eax
c000d2e3:	74 3b                	je     c000d320 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d2e5:	52                   	push   edx
c000d2e6:	50                   	push   eax
c000d2e7:	6a 01                	push   0x1
c000d2e9:	57                   	push   edi
c000d2ea:	e8 b9 fd ff ff       	call   c000d0a8 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000d2ef:	59                   	pop    ecx
c000d2f0:	5e                   	pop    esi
c000d2f1:	89 c3                	mov    ebx,eax
c000d2f3:	68 24 2d 02 c0       	push   0xc0022d24
c000d2f8:	6a 00                	push   0x0
c000d2fa:	e8 3a ff ff ff       	call   c000d239 <zStrtok(char*, char const*)>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	85 c0                	test   eax,eax
c000d304:	89 c6                	mov    esi,eax
c000d306:	74 18                	je     c000d320 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d308:	52                   	push   edx
c000d309:	52                   	push   edx
c000d30a:	53                   	push   ebx
c000d30b:	57                   	push   edi
c000d30c:	e8 86 f5 ff ff       	call   c000c897 <CmEnterDirectory(Reghive_Tag*, int)>
c000d311:	83 c4 10             	add    esp,0x10
c000d314:	83 f8 ff             	cmp    eax,0xffffffff
c000d317:	89 c3                	mov    ebx,eax
c000d319:	74 05                	je     c000d320 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d31b:	50                   	push   eax
c000d31c:	56                   	push   esi
c000d31d:	53                   	push   ebx
c000d31e:	eb c9                	jmp    c000d2e9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000d320:	81 c4 00 01 00 00    	add    esp,0x100
c000d326:	89 d8                	mov    eax,ebx
c000d328:	5b                   	pop    ebx
c000d329:	5e                   	pop    esi
c000d32a:	5f                   	pop    edi
c000d32b:	c3                   	ret    

c000d32c <CmDisplayTree(Reghive_Tag*, int, int)>:
c000d32c:	55                   	push   ebp
c000d32d:	57                   	push   edi
c000d32e:	56                   	push   esi
c000d32f:	53                   	push   ebx
c000d330:	83 ec 5c             	sub    esp,0x5c
c000d333:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000d337:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000d33b:	85 db                	test   ebx,ebx
c000d33d:	0f 8e 84 00 00 00    	jle    c000d3c7 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000d343:	57                   	push   edi
c000d344:	31 ed                	xor    ebp,ebp
c000d346:	6a 32                	push   0x32
c000d348:	6a 00                	push   0x0
c000d34a:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000d34e:	57                   	push   edi
c000d34f:	e8 9c 31 ff ff       	call   c00004f0 <memset>
c000d354:	83 c4 0c             	add    esp,0xc
c000d357:	57                   	push   edi
c000d358:	53                   	push   ebx
c000d359:	56                   	push   esi
c000d35a:	e8 31 fb ff ff       	call   c000ce90 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000d35f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d363:	83 c4 10             	add    esp,0x10
c000d366:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000d36a:	7d 13                	jge    c000d37f <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000d36c:	83 ec 0c             	sub    esp,0xc
c000d36f:	45                   	inc    ebp
c000d370:	68 c0 31 02 c0       	push   0xc00231c0
c000d375:	e8 d4 9b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d37a:	83 c4 10             	add    esp,0x10
c000d37d:	eb e7                	jmp    c000d366 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000d37f:	51                   	push   ecx
c000d380:	57                   	push   edi
c000d381:	53                   	push   ebx
c000d382:	68 93 1f 02 c0       	push   0xc0021f93
c000d387:	e8 c2 9b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d38c:	83 c4 10             	add    esp,0x10
c000d38f:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000d394:	75 1e                	jne    c000d3b4 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000d396:	52                   	push   edx
c000d397:	52                   	push   edx
c000d398:	53                   	push   ebx
c000d399:	56                   	push   esi
c000d39a:	e8 f8 f4 ff ff       	call   c000c897 <CmEnterDirectory(Reghive_Tag*, int)>
c000d39f:	83 c4 0c             	add    esp,0xc
c000d3a2:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000d3a6:	8d 51 04             	lea    edx,[ecx+0x4]
c000d3a9:	52                   	push   edx
c000d3aa:	50                   	push   eax
c000d3ab:	56                   	push   esi
c000d3ac:	e8 7b ff ff ff       	call   c000d32c <CmDisplayTree(Reghive_Tag*, int, int)>
c000d3b1:	83 c4 10             	add    esp,0x10
c000d3b4:	50                   	push   eax
c000d3b5:	50                   	push   eax
c000d3b6:	53                   	push   ebx
c000d3b7:	56                   	push   esi
c000d3b8:	e8 19 f5 ff ff       	call   c000c8d6 <CmGetNext(Reghive_Tag*, int)>
c000d3bd:	83 c4 10             	add    esp,0x10
c000d3c0:	89 c3                	mov    ebx,eax
c000d3c2:	e9 74 ff ff ff       	jmp    c000d33b <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000d3c7:	83 c4 5c             	add    esp,0x5c
c000d3ca:	5b                   	pop    ebx
c000d3cb:	5e                   	pop    esi
c000d3cc:	5f                   	pop    edi
c000d3cd:	5d                   	pop    ebp
c000d3ce:	c3                   	ret    

c000d3cf <CmSplitFinalSlashInPlace(char*)>:
c000d3cf:	53                   	push   ebx
c000d3d0:	83 ec 14             	sub    esp,0x14
c000d3d3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000d3d7:	53                   	push   ebx
c000d3d8:	e8 a3 31 ff ff       	call   c0000580 <strlen>
c000d3dd:	83 c4 10             	add    esp,0x10
c000d3e0:	48                   	dec    eax
c000d3e1:	85 c0                	test   eax,eax
c000d3e3:	74 15                	je     c000d3fa <CmSplitFinalSlashInPlace(char*)+0x2b>
c000d3e5:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d3e9:	8d 14 03             	lea    edx,[ebx+eax*1]
c000d3ec:	75 09                	jne    c000d3f7 <CmSplitFinalSlashInPlace(char*)+0x28>
c000d3ee:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000d3f1:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000d3f5:	eb 05                	jmp    c000d3fc <CmSplitFinalSlashInPlace(char*)+0x2d>
c000d3f7:	48                   	dec    eax
c000d3f8:	eb e7                	jmp    c000d3e1 <CmSplitFinalSlashInPlace(char*)+0x12>
c000d3fa:	31 c0                	xor    eax,eax
c000d3fc:	83 c4 08             	add    esp,0x8
c000d3ff:	5b                   	pop    ebx
c000d400:	c3                   	ret    
c000d401:	66 90                	xchg   ax,ax
c000d403:	90                   	nop

c000d404 <Krnl::handlePowerButton()>:
c000d404:	83 ec 0c             	sub    esp,0xc
c000d407:	e8 31 21 00 00       	call   c000f53d <KeHandlePowerButton()>
c000d40c:	90                   	nop
c000d40d:	83 c4 0c             	add    esp,0xc
c000d410:	c3                   	ret    
c000d411:	8d 76 00             	lea    esi,[esi+0x0]

c000d414 <Krnl::handleSleepButton()>:
c000d414:	83 ec 0c             	sub    esp,0xc
c000d417:	e8 39 21 00 00       	call   c000f555 <KeHandleSleepButton()>
c000d41c:	90                   	nop
c000d41d:	83 c4 0c             	add    esp,0xc
c000d420:	c3                   	ret    
c000d421:	90                   	nop

c000d422 <Computer::close(int, int, void*)>:
c000d422:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d427:	c3                   	ret    

c000d428 <Computer::open(int, int, void*)>:
c000d428:	56                   	push   esi
c000d429:	53                   	push   ebx
c000d42a:	83 ec 04             	sub    esp,0x4
c000d42d:	f6 05 90 bd 02 c0 04 	test   BYTE PTR ds:0xc002bd90,0x4
c000d434:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d438:	0f 94 05 00 45 02 c0 	sete   BYTE PTR ds:0xc0024500
c000d43f:	39 1d 70 9d 02 c0    	cmp    DWORD PTR ds:0xc0029d70,ebx
c000d445:	74 10                	je     c000d457 <Computer::open(int, int, void*)+0x2f>
c000d447:	83 ec 0c             	sub    esp,0xc
c000d44a:	68 a0 1f 02 c0       	push   0xc0021fa0
c000d44f:	e8 c2 17 00 00       	call   c000ec16 <KePanic(char const*)>
c000d454:	83 c4 10             	add    esp,0x10
c000d457:	83 ec 0c             	sub    esp,0xc
c000d45a:	68 58 20 02 c0       	push   0xc0022058
c000d45f:	e8 37 f1 ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c000d464:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000d46b:	e8 60 14 00 00       	call   c000e8d0 <malloc>
c000d470:	89 04 24             	mov    DWORD PTR [esp],eax
c000d473:	89 c6                	mov    esi,eax
c000d475:	e8 26 e8 ff ff       	call   c000bca0 <ACPI::ACPI()>
c000d47a:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000d480:	58                   	pop    eax
c000d481:	5a                   	pop    edx
c000d482:	56                   	push   esi
c000d483:	53                   	push   ebx
c000d484:	e8 bd bb ff ff       	call   c0009046 <Device::addChild(Device*)>
c000d489:	c7 04 24 70 20 02 c0 	mov    DWORD PTR [esp],0xc0022070
c000d490:	e8 06 f1 ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c000d495:	e8 bf a6 00 00       	call   c0017b59 <HalEnableNMI()>
c000d49a:	e8 ef 98 00 00       	call   c0016d8e <HalDetectFeatures()>
c000d49f:	c7 04 24 78 11 00 00 	mov    DWORD PTR [esp],0x1178
c000d4a6:	e8 25 14 00 00       	call   c000e8d0 <malloc>
c000d4ab:	89 04 24             	mov    DWORD PTR [esp],eax
c000d4ae:	89 c6                	mov    esi,eax
c000d4b0:	e8 61 b1 00 00       	call   c0018616 <CPU::CPU()>
c000d4b5:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000d4bb:	59                   	pop    ecx
c000d4bc:	58                   	pop    eax
c000d4bd:	56                   	push   esi
c000d4be:	53                   	push   ebx
c000d4bf:	e8 82 bb ff ff       	call   c0009046 <Device::addChild(Device*)>
c000d4c4:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000d4c8:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d4ce:	8b 10                	mov    edx,DWORD PTR [eax]
c000d4d0:	51                   	push   ecx
c000d4d1:	6a 00                	push   0x0
c000d4d3:	6a 00                	push   0x0
c000d4d5:	50                   	push   eax
c000d4d6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d4d9:	83 c4 14             	add    esp,0x14
c000d4dc:	68 cc 1f 02 c0       	push   0xc0021fcc
c000d4e1:	e8 b5 f0 ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c000d4e6:	e8 86 ad 00 00       	call   c0018271 <HalInitialiseCoprocessor()>
c000d4eb:	c7 04 24 8a 20 02 c0 	mov    DWORD PTR [esp],0xc002208a
c000d4f2:	e8 a4 f0 ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c000d4f7:	c7 04 24 0e d5 00 c0 	mov    DWORD PTR [esp],0xc000d50e
c000d4fe:	e8 c5 7d 00 00       	call   c00152c8 <setupMultitasking(void (*)())>
c000d503:	83 c4 14             	add    esp,0x14
c000d506:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d50b:	5b                   	pop    ebx
c000d50c:	5e                   	pop    esi
c000d50d:	c3                   	ret    

c000d50e <KeFirstTask()>:
c000d50e:	53                   	push   ebx
c000d50f:	83 ec 14             	sub    esp,0x14
c000d512:	fb                   	sti    
c000d513:	68 a5 20 02 c0       	push   0xc00220a5
c000d518:	e8 7e f0 ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c000d51d:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c000d524:	e8 a7 13 00 00       	call   c000e8d0 <malloc>
c000d529:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000d530:	89 c3                	mov    ebx,eax
c000d532:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000d537:	50                   	push   eax
c000d538:	68 be 20 02 c0       	push   0xc00220be
c000d53d:	6a 01                	push   0x1
c000d53f:	53                   	push   ebx
c000d540:	e8 33 7a 00 00       	call   c0014f78 <Process::Process(bool, char const*, Process*, char**)>
c000d545:	83 c4 20             	add    esp,0x20
c000d548:	68 ff 00 00 00       	push   0xff
c000d54d:	6a 00                	push   0x0
c000d54f:	68 fd e1 00 c0       	push   0xc000e1fd
c000d554:	53                   	push   ebx
c000d555:	e8 46 7c 00 00       	call   c00151a0 <Process::createThread(void (*)(void*), void*, int)>
c000d55a:	8b 15 d8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6d8
c000d560:	6a 7a                	push   0x7a
c000d562:	6a 00                	push   0x0
c000d564:	68 74 5a 01 c0       	push   0xc0015a74
c000d569:	52                   	push   edx
c000d56a:	e8 31 7c 00 00       	call   c00151a0 <Process::createThread(void (*)(void*), void*, int)>
c000d56f:	83 c4 14             	add    esp,0x14
c000d572:	68 f0 1f 02 c0       	push   0xc0021ff0
c000d577:	a3 90 c6 02 c0       	mov    ds:0xc002c690,eax
c000d57c:	e8 1a f0 ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c000d581:	c6 05 75 9d 02 c0 01 	mov    BYTE PTR ds:0xc0029d75,0x1
c000d588:	e8 d2 20 00 00       	call   c000f65f <KeInitRand()>
c000d58d:	e8 b0 88 00 00       	call   c0015e42 <Vm::initialise8086()>
c000d592:	e8 3f a8 ff ff       	call   c0007dd6 <Fs::initVFS()>
c000d597:	c7 04 24 74 1d 02 c0 	mov    DWORD PTR [esp],0xc0021d74
c000d59e:	e8 f8 ef ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c000d5a3:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000d5a8:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d5ae:	8b 10                	mov    edx,DWORD PTR [eax]
c000d5b0:	6a 00                	push   0x0
c000d5b2:	6a 00                	push   0x0
c000d5b4:	6a 00                	push   0x0
c000d5b6:	50                   	push   eax
c000d5b7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d5ba:	83 c4 14             	add    esp,0x14
c000d5bd:	68 f0 1f 02 c0       	push   0xc0021ff0
c000d5c2:	e8 d4 ef ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c000d5c7:	e8 ef 9f ff ff       	call   c00075bb <KeInitialiseSymlinks()>
c000d5cc:	e8 f5 05 00 00       	call   c000dbc6 <KeLoadSystemEnv()>
c000d5d1:	e8 97 1f 00 00       	call   c000f56d <KeSetupPowerManager()>
c000d5d6:	c7 04 24 14 20 02 c0 	mov    DWORD PTR [esp],0xc0022014
c000d5dd:	e8 b9 ef ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c000d5e2:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000d5e7:	59                   	pop    ecx
c000d5e8:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000d5ee:	53                   	push   ebx
c000d5ef:	e8 6e bb ff ff       	call   c0009162 <Device::loadDriversForAll()>
c000d5f4:	c7 04 24 cb 20 02 c0 	mov    DWORD PTR [esp],0xc00220cb
c000d5fb:	e8 9b ef ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c000d600:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c000d606:	58                   	pop    eax
c000d607:	5a                   	pop    edx
c000d608:	6a 01                	push   0x1
c000d60a:	68 dc 20 02 c0       	push   0xc00220dc
c000d60f:	e8 ea 72 00 00       	call   c00148fe <Thr::loadDLL(char const*, bool)>
c000d614:	59                   	pop    ecx
c000d615:	5a                   	pop    edx
c000d616:	53                   	push   ebx
c000d617:	50                   	push   eax
c000d618:	e8 42 75 00 00       	call   c0014b5f <Thr::executeDLL(unsigned long, void*)>
c000d61d:	83 c4 10             	add    esp,0x10
c000d620:	83 ec 0c             	sub    esp,0xc
c000d623:	6a 02                	push   0x2
c000d625:	e8 82 7e 00 00       	call   c00154ac <blockTask(TaskState)>
c000d62a:	83 c4 10             	add    esp,0x10
c000d62d:	eb f1                	jmp    c000d620 <KeFirstTask()+0x112>
c000d62f:	90                   	nop

c000d630 <Computer::Computer()>:
c000d630:	83 ec 0c             	sub    esp,0xc
c000d633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d637:	83 ec 08             	sub    esp,0x8
c000d63a:	68 f8 20 02 c0       	push   0xc00220f8
c000d63f:	50                   	push   eax
c000d640:	e8 63 bb ff ff       	call   c00091a8 <Device::Device(char const*)>
c000d645:	83 c4 10             	add    esp,0x10
c000d648:	ba 0c 21 02 c0       	mov    edx,0xc002210c
c000d64d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d651:	89 10                	mov    DWORD PTR [eax],edx
c000d653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d657:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d665:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000d66f:	90                   	nop
c000d670:	83 c4 0c             	add    esp,0xc
c000d673:	c3                   	ret    

c000d674 <KePrepareShutdown()>:
c000d674:	83 ec 0c             	sub    esp,0xc
c000d677:	e8 8d ee ff ff       	call   c000c509 <KeExecuteAtexit()>
c000d67c:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000d681:	83 ec 0c             	sub    esp,0xc
c000d684:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d68a:	50                   	push   eax
c000d68b:	e8 1e bc ff ff       	call   c00092ae <Device::closeAll()>
c000d690:	83 c4 1c             	add    esp,0x1c
c000d693:	c3                   	ret    

c000d694 <KeShutdown()>:
c000d694:	83 ec 0c             	sub    esp,0xc
c000d697:	e8 d8 ff ff ff       	call   c000d674 <KePrepareShutdown()>
c000d69c:	a1 6c 9d 02 c0       	mov    eax,ds:0xc0029d6c
c000d6a1:	85 c0                	test   eax,eax
c000d6a3:	74 02                	je     c000d6a7 <KeShutdown()+0x13>
c000d6a5:	ff d0                	call   eax
c000d6a7:	83 ec 0c             	sub    esp,0xc
c000d6aa:	68 34 20 02 c0       	push   0xc0022034
c000d6af:	e8 62 15 00 00       	call   c000ec16 <KePanic(char const*)>
c000d6b4:	83 c4 1c             	add    esp,0x1c
c000d6b7:	c3                   	ret    

c000d6b8 <KeSleep()>:
c000d6b8:	a1 64 9d 02 c0       	mov    eax,ds:0xc0029d64
c000d6bd:	85 c0                	test   eax,eax
c000d6bf:	74 02                	je     c000d6c3 <KeSleep()+0xb>
c000d6c1:	ff e0                	jmp    eax
c000d6c3:	c3                   	ret    

c000d6c4 <KeRestart()>:
c000d6c4:	83 ec 0c             	sub    esp,0xc
c000d6c7:	e8 a8 ff ff ff       	call   c000d674 <KePrepareShutdown()>
c000d6cc:	a1 68 9d 02 c0       	mov    eax,ds:0xc0029d68
c000d6d1:	85 c0                	test   eax,eax
c000d6d3:	74 02                	je     c000d6d7 <KeRestart()+0x13>
c000d6d5:	ff d0                	call   eax
c000d6d7:	e4 64                	in     al,0x64
c000d6d9:	a8 02                	test   al,0x2
c000d6db:	75 fa                	jne    c000d6d7 <KeRestart()+0x13>
c000d6dd:	b0 fe                	mov    al,0xfe
c000d6df:	e6 64                	out    0x64,al
c000d6e1:	83 c4 0c             	add    esp,0xc
c000d6e4:	c3                   	ret    

c000d6e5 <KeCalculateCRC32(unsigned char*, int)>:
c000d6e5:	53                   	push   ebx
c000d6e6:	83 c8 ff             	or     eax,0xffffffff
c000d6e9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d6ed:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d6f1:	01 cb                	add    ebx,ecx
c000d6f3:	39 d9                	cmp    ecx,ebx
c000d6f5:	74 15                	je     c000d70c <KeCalculateCRC32(unsigned char*, int)+0x27>
c000d6f7:	41                   	inc    ecx
c000d6f8:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000d6fb:	31 c2                	xor    edx,eax
c000d6fd:	c1 e8 08             	shr    eax,0x8
c000d700:	0f b6 d2             	movzx  edx,dl
c000d703:	33 04 95 20 3f 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc0e0]
c000d70a:	eb e7                	jmp    c000d6f3 <KeCalculateCRC32(unsigned char*, int)+0xe>
c000d70c:	5b                   	pop    ebx
c000d70d:	f7 d0                	not    eax
c000d70f:	c3                   	ret    

c000d710 <EnvVarContainer::getEnv(char const*)>:
c000d710:	57                   	push   edi
c000d711:	56                   	push   esi
c000d712:	53                   	push   ebx
c000d713:	31 db                	xor    ebx,ebx
c000d715:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d719:	39 1e                	cmp    DWORD PTR [esi],ebx
c000d71b:	7e 2b                	jle    c000d748 <EnvVarContainer::getEnv(char const*)+0x38>
c000d71d:	50                   	push   eax
c000d71e:	50                   	push   eax
c000d71f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d722:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000d729:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000d72c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d730:	e8 4b 30 ff ff       	call   c0000780 <strcmp>
c000d735:	83 c4 10             	add    esp,0x10
c000d738:	85 c0                	test   eax,eax
c000d73a:	75 09                	jne    c000d745 <EnvVarContainer::getEnv(char const*)+0x35>
c000d73c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d73f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000d743:	eb 05                	jmp    c000d74a <EnvVarContainer::getEnv(char const*)+0x3a>
c000d745:	43                   	inc    ebx
c000d746:	eb d1                	jmp    c000d719 <EnvVarContainer::getEnv(char const*)+0x9>
c000d748:	31 c0                	xor    eax,eax
c000d74a:	5b                   	pop    ebx
c000d74b:	5e                   	pop    esi
c000d74c:	5f                   	pop    edi
c000d74d:	c3                   	ret    

c000d74e <EnvVarContainer::setEnv(char const*, char const*)>:
c000d74e:	55                   	push   ebp
c000d74f:	57                   	push   edi
c000d750:	56                   	push   esi
c000d751:	53                   	push   ebx
c000d752:	83 ec 28             	sub    esp,0x28
c000d755:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d759:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000d75d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d761:	56                   	push   esi
c000d762:	e8 19 2e ff ff       	call   c0000580 <strlen>
c000d767:	40                   	inc    eax
c000d768:	89 04 24             	mov    DWORD PTR [esp],eax
c000d76b:	e8 60 11 00 00       	call   c000e8d0 <malloc>
c000d770:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d773:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d777:	e8 04 2e ff ff       	call   c0000580 <strlen>
c000d77c:	40                   	inc    eax
c000d77d:	89 04 24             	mov    DWORD PTR [esp],eax
c000d780:	e8 4b 11 00 00       	call   c000e8d0 <malloc>
c000d785:	89 34 24             	mov    DWORD PTR [esp],esi
c000d788:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d78c:	e8 ef 2d ff ff       	call   c0000580 <strlen>
c000d791:	83 c4 0c             	add    esp,0xc
c000d794:	40                   	inc    eax
c000d795:	50                   	push   eax
c000d796:	6a 00                	push   0x0
c000d798:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79c:	e8 4f 2d ff ff       	call   c00004f0 <memset>
c000d7a1:	89 34 24             	mov    DWORD PTR [esp],esi
c000d7a4:	e8 d7 2d ff ff       	call   c0000580 <strlen>
c000d7a9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000d7ad:	8d 48 01             	lea    ecx,[eax+0x1]
c000d7b0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d7b5:	89 de                	mov    esi,ebx
c000d7b7:	e8 c4 2d ff ff       	call   c0000580 <strlen>
c000d7bc:	83 c4 0c             	add    esp,0xc
c000d7bf:	40                   	inc    eax
c000d7c0:	50                   	push   eax
c000d7c1:	6a 00                	push   0x0
c000d7c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d7c7:	e8 24 2d ff ff       	call   c00004f0 <memset>
c000d7cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d7cf:	e8 ac 2d ff ff       	call   c0000580 <strlen>
c000d7d4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d7d8:	8d 48 01             	lea    ecx,[eax+0x1]
c000d7db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d7e0:	40                   	inc    eax
c000d7e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d7e4:	c1 e0 03             	shl    eax,0x3
c000d7e7:	5a                   	pop    edx
c000d7e8:	59                   	pop    ecx
c000d7e9:	50                   	push   eax
c000d7ea:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d7ed:	e8 ca 10 00 00       	call   c000e8bc <realloc>
c000d7f2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d7f5:	8d 74 24 18          	lea    esi,[esp+0x18]
c000d7f9:	b9 08 00 00 00       	mov    ecx,0x8
c000d7fe:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000d801:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000d805:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d807:	83 c4 2c             	add    esp,0x2c
c000d80a:	5b                   	pop    ebx
c000d80b:	5e                   	pop    esi
c000d80c:	5f                   	pop    edi
c000d80d:	5d                   	pop    ebp
c000d80e:	c3                   	ret    
c000d80f:	90                   	nop

c000d810 <EnvVarContainer::deleteEnv(char const*)>:
c000d810:	c3                   	ret    
c000d811:	90                   	nop

c000d812 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000d812:	55                   	push   ebp
c000d813:	57                   	push   edi
c000d814:	56                   	push   esi
c000d815:	53                   	push   ebx
c000d816:	81 ec 38 01 00 00    	sub    esp,0x138
c000d81c:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000d823:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000d82a:	68 14 01 00 00       	push   0x114
c000d82f:	e8 9c 10 00 00       	call   c000e8d0 <malloc>
c000d834:	83 c4 0c             	add    esp,0xc
c000d837:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000d83a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000d841:	89 c3                	mov    ebx,eax
c000d843:	50                   	push   eax
c000d844:	e8 c3 a8 ff ff       	call   c000810c <File::File(char const*, Process*)>
c000d849:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d84c:	e8 9d ab ff ff       	call   c00083ee <File::exists()>
c000d851:	83 c4 10             	add    esp,0x10
c000d854:	84 c0                	test   al,al
c000d856:	75 31                	jne    c000d889 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000d858:	50                   	push   eax
c000d859:	50                   	push   eax
c000d85a:	6a 12                	push   0x12
c000d85c:	53                   	push   ebx
c000d85d:	e8 c8 a8 ff ff       	call   c000812a <File::open(FileOpenMode)>
c000d862:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d864:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000d867:	89 34 24             	mov    DWORD PTR [esp],esi
c000d86a:	e8 11 2d ff ff       	call   c0000580 <strlen>
c000d86f:	5a                   	pop    edx
c000d870:	8d 54 24 20          	lea    edx,[esp+0x20]
c000d874:	52                   	push   edx
c000d875:	31 d2                	xor    edx,edx
c000d877:	56                   	push   esi
c000d878:	52                   	push   edx
c000d879:	50                   	push   eax
c000d87a:	53                   	push   ebx
c000d87b:	ff d7                	call   edi
c000d87d:	83 c4 14             	add    esp,0x14
c000d880:	53                   	push   ebx
c000d881:	e8 02 a9 ff ff       	call   c0008188 <File::close()>
c000d886:	83 c4 10             	add    esp,0x10
c000d889:	56                   	push   esi
c000d88a:	31 f6                	xor    esi,esi
c000d88c:	68 00 01 00 00       	push   0x100
c000d891:	6a 00                	push   0x0
c000d893:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d897:	50                   	push   eax
c000d898:	e8 53 2c ff ff       	call   c00004f0 <memset>
c000d89d:	5f                   	pop    edi
c000d89e:	58                   	pop    eax
c000d89f:	6a 01                	push   0x1
c000d8a1:	53                   	push   ebx
c000d8a2:	e8 83 a8 ff ff       	call   c000812a <File::open(FileOpenMode)>
c000d8a7:	83 c4 10             	add    esp,0x10
c000d8aa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000d8b2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d8ba:	83 ec 0c             	sub    esp,0xc
c000d8bd:	8d 54 24 20          	lea    edx,[esp+0x20]
c000d8c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d8c3:	52                   	push   edx
c000d8c4:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c000d8c8:	51                   	push   ecx
c000d8c9:	6a 00                	push   0x0
c000d8cb:	6a 01                	push   0x1
c000d8cd:	53                   	push   ebx
c000d8ce:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d8d1:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000d8d6:	83 c4 20             	add    esp,0x20
c000d8d9:	85 c0                	test   eax,eax
c000d8db:	89 c1                	mov    ecx,eax
c000d8dd:	0f 84 36 01 00 00    	je     c000da19 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000d8e3:	83 f8 0d             	cmp    eax,0xd
c000d8e6:	0f 84 22 01 00 00    	je     c000da0e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000d8ec:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000d8f1:	0f 84 f0 00 00 00    	je     c000d9e7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000d8f7:	83 f8 0a             	cmp    eax,0xa
c000d8fa:	74 13                	je     c000d90f <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000d8fc:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000d901:	74 0c                	je     c000d90f <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000d903:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000d909:	0f 8e f6 00 00 00    	jle    c000da05 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000d90f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d913:	83 ec 0c             	sub    esp,0xc
c000d916:	8d 78 01             	lea    edi,[eax+0x1]
c000d919:	57                   	push   edi
c000d91a:	e8 b1 0f 00 00       	call   c000e8d0 <malloc>
c000d91f:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000d923:	8d 56 04             	lea    edx,[esi+0x4]
c000d926:	89 14 24             	mov    DWORD PTR [esp],edx
c000d929:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d92d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d931:	e8 9a 0f 00 00       	call   c000e8d0 <malloc>
c000d936:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d93a:	83 c4 0c             	add    esp,0xc
c000d93d:	57                   	push   edi
c000d93e:	6a 00                	push   0x0
c000d940:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d944:	e8 a7 2b ff ff       	call   c00004f0 <memset>
c000d949:	8d 74 24 30          	lea    esi,[esp+0x30]
c000d94d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d951:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000d955:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d957:	83 c4 0c             	add    esp,0xc
c000d95a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d95e:	52                   	push   edx
c000d95f:	6a 00                	push   0x0
c000d961:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d965:	e8 86 2b ff ff       	call   c00004f0 <memset>
c000d96a:	8d 74 24 30          	lea    esi,[esp+0x30]
c000d96e:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000d972:	89 34 24             	mov    DWORD PTR [esp],esi
c000d975:	e8 06 2c ff ff       	call   c0000580 <strlen>
c000d97a:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000d97e:	89 c1                	mov    ecx,eax
c000d980:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d982:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d985:	83 c4 10             	add    esp,0x10
c000d988:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d98b:	40                   	inc    eax
c000d98c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d98f:	85 d2                	test   edx,edx
c000d991:	75 0c                	jne    c000d99f <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000d993:	83 ec 0c             	sub    esp,0xc
c000d996:	6a 08                	push   0x8
c000d998:	e8 33 0f 00 00       	call   c000e8d0 <malloc>
c000d99d:	eb 0c                	jmp    c000d9ab <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000d99f:	51                   	push   ecx
c000d9a0:	51                   	push   ecx
c000d9a1:	c1 e0 03             	shl    eax,0x3
c000d9a4:	50                   	push   eax
c000d9a5:	52                   	push   edx
c000d9a6:	e8 11 0f 00 00       	call   c000e8bc <realloc>
c000d9ab:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000d9ae:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d9b1:	83 c4 10             	add    esp,0x10
c000d9b4:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000d9b7:	8d 74 24 18          	lea    esi,[esp+0x18]
c000d9bb:	b9 08 00 00 00       	mov    ecx,0x8
c000d9c0:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000d9c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d9c6:	50                   	push   eax
c000d9c7:	31 f6                	xor    esi,esi
c000d9c9:	68 00 01 00 00       	push   0x100
c000d9ce:	6a 00                	push   0x0
c000d9d0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d9d4:	50                   	push   eax
c000d9d5:	e8 16 2b ff ff       	call   c00004f0 <memset>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000d9e5:	eb 27                	jmp    c000da0e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000d9e7:	83 f8 3d             	cmp    eax,0x3d
c000d9ea:	74 1e                	je     c000da0a <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000d9ec:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000d9f2:	7f 07                	jg     c000d9fb <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000d9f4:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c000d9f8:	46                   	inc    esi
c000d9f9:	eb 13                	jmp    c000da0e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000d9fb:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000da03:	eb 09                	jmp    c000da0e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000da05:	83 f8 3d             	cmp    eax,0x3d
c000da08:	75 ea                	jne    c000d9f4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000da0a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000da0e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000da13:	0f 85 99 fe ff ff    	jne    c000d8b2 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000da19:	83 ec 0c             	sub    esp,0xc
c000da1c:	53                   	push   ebx
c000da1d:	e8 66 a7 ff ff       	call   c0008188 <File::close()>
c000da22:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000da27:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000da2a:	81 c4 3c 01 00 00    	add    esp,0x13c
c000da30:	5b                   	pop    ebx
c000da31:	5e                   	pop    esi
c000da32:	5f                   	pop    edi
c000da33:	5d                   	pop    ebp
c000da34:	c3                   	ret    
c000da35:	90                   	nop

c000da36 <EnvVarContainer::__loadSystem()>:
c000da36:	83 ec 10             	sub    esp,0x10
c000da39:	68 20 43 02 c0       	push   0xc0024320
c000da3e:	68 30 21 02 c0       	push   0xc0022130
c000da43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da47:	e8 c6 fd ff ff       	call   c000d812 <EnvVarContainer::loadFrom(char const*, char const*)>
c000da4c:	83 c4 1c             	add    esp,0x1c
c000da4f:	c3                   	ret    

c000da50 <EnvVarContainer::__loadUser()>:
c000da50:	c3                   	ret    
c000da51:	90                   	nop

c000da52 <EnvVarContainer::EnvVarContainer(Process*)>:
c000da52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da56:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000da5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000da64:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000da67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da6b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000da72:	90                   	nop
c000da73:	c3                   	ret    

c000da74 <EnvVarContainer::~EnvVarContainer()>:
c000da74:	83 ec 0c             	sub    esp,0xc
c000da77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da7e:	85 c0                	test   eax,eax
c000da80:	74 1d                	je     c000da9f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000da82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da86:	8b 00                	mov    eax,DWORD PTR [eax]
c000da88:	85 c0                	test   eax,eax
c000da8a:	74 13                	je     c000da9f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000da8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da93:	83 ec 0c             	sub    esp,0xc
c000da96:	50                   	push   eax
c000da97:	e8 44 0e 00 00       	call   c000e8e0 <free>
c000da9c:	83 c4 10             	add    esp,0x10
c000da9f:	90                   	nop
c000daa0:	83 c4 0c             	add    esp,0xc
c000daa3:	c3                   	ret    

c000daa4 <KeGetEnv(Process*, char const*)>:
c000daa4:	53                   	push   ebx
c000daa5:	83 ec 08             	sub    esp,0x8
c000daa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daac:	39 05 d8 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6d8,eax
c000dab2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000dab6:	74 04                	je     c000dabc <KeGetEnv(Process*, char const*)+0x18>
c000dab8:	85 c0                	test   eax,eax
c000daba:	75 0b                	jne    c000dac7 <KeGetEnv(Process*, char const*)+0x23>
c000dabc:	a1 78 9d 02 c0       	mov    eax,ds:0xc0029d78
c000dac1:	85 c0                	test   eax,eax
c000dac3:	75 19                	jne    c000dade <KeGetEnv(Process*, char const*)+0x3a>
c000dac5:	eb 27                	jmp    c000daee <KeGetEnv(Process*, char const*)+0x4a>
c000dac7:	52                   	push   edx
c000dac8:	52                   	push   edx
c000dac9:	53                   	push   ebx
c000daca:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000dad0:	e8 3b fc ff ff       	call   c000d710 <EnvVarContainer::getEnv(char const*)>
c000dad5:	83 c4 10             	add    esp,0x10
c000dad8:	85 c0                	test   eax,eax
c000dada:	75 28                	jne    c000db04 <KeGetEnv(Process*, char const*)+0x60>
c000dadc:	eb de                	jmp    c000dabc <KeGetEnv(Process*, char const*)+0x18>
c000dade:	52                   	push   edx
c000dadf:	52                   	push   edx
c000dae0:	53                   	push   ebx
c000dae1:	50                   	push   eax
c000dae2:	e8 29 fc ff ff       	call   c000d710 <EnvVarContainer::getEnv(char const*)>
c000dae7:	83 c4 10             	add    esp,0x10
c000daea:	85 c0                	test   eax,eax
c000daec:	75 16                	jne    c000db04 <KeGetEnv(Process*, char const*)+0x60>
c000daee:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000daf2:	a1 7c 9d 02 c0       	mov    eax,ds:0xc0029d7c
c000daf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dafb:	83 c4 08             	add    esp,0x8
c000dafe:	5b                   	pop    ebx
c000daff:	e9 0c fc ff ff       	jmp    c000d710 <EnvVarContainer::getEnv(char const*)>
c000db04:	83 c4 08             	add    esp,0x8
c000db07:	5b                   	pop    ebx
c000db08:	c3                   	ret    

c000db09 <KeSetEnvSystem(char const*, char const*)>:
c000db09:	83 ec 10             	sub    esp,0x10
c000db0c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db10:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db14:	ff 35 7c 9d 02 c0    	push   DWORD PTR ds:0xc0029d7c
c000db1a:	e8 2f fc ff ff       	call   c000d74e <EnvVarContainer::setEnv(char const*, char const*)>
c000db1f:	83 c4 1c             	add    esp,0x1c
c000db22:	c3                   	ret    

c000db23 <KeSetEnvUser(char const*, char const*)>:
c000db23:	a1 78 9d 02 c0       	mov    eax,ds:0xc0029d78
c000db28:	85 c0                	test   eax,eax
c000db2a:	74 15                	je     c000db41 <KeSetEnvUser(char const*, char const*)+0x1e>
c000db2c:	83 ec 10             	sub    esp,0x10
c000db2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db33:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db37:	50                   	push   eax
c000db38:	e8 11 fc ff ff       	call   c000d74e <EnvVarContainer::setEnv(char const*, char const*)>
c000db3d:	83 c4 1c             	add    esp,0x1c
c000db40:	c3                   	ret    
c000db41:	c3                   	ret    

c000db42 <KeSetEnvProcess(Process*, char const*, char const*)>:
c000db42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db46:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000db4c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000db50:	e9 f9 fb ff ff       	jmp    c000d74e <EnvVarContainer::setEnv(char const*, char const*)>

c000db55 <KeDeleteEnvSystem(char const*)>:
c000db55:	c3                   	ret    

c000db56 <KeDeleteEnvUser(char const*)>:
c000db56:	c3                   	ret    

c000db57 <KeDeleteEnvProcess(Process*, char const*)>:
c000db57:	c3                   	ret    

c000db58 <KeNewProcessEnv(Process*)>:
c000db58:	83 ec 28             	sub    esp,0x28
c000db5b:	6a 0c                	push   0xc
c000db5d:	e8 6e 0d 00 00       	call   c000e8d0 <malloc>
c000db62:	5a                   	pop    edx
c000db63:	59                   	pop    ecx
c000db64:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000db68:	50                   	push   eax
c000db69:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000db6d:	e8 e0 fe ff ff       	call   c000da52 <EnvVarContainer::EnvVarContainer(Process*)>
c000db72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000db76:	83 c4 2c             	add    esp,0x2c
c000db79:	c3                   	ret    

c000db7a <KeCopyProcessEnv(Process*, Process*)>:
c000db7a:	57                   	push   edi
c000db7b:	56                   	push   esi
c000db7c:	53                   	push   ebx
c000db7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db81:	83 ec 0c             	sub    esp,0xc
c000db84:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000db8a:	6a 0c                	push   0xc
c000db8c:	e8 3f 0d 00 00       	call   c000e8d0 <malloc>
c000db91:	89 c3                	mov    ebx,eax
c000db93:	58                   	pop    eax
c000db94:	5a                   	pop    edx
c000db95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db99:	53                   	push   ebx
c000db9a:	e8 b3 fe ff ff       	call   c000da52 <EnvVarContainer::EnvVarContainer(Process*)>
c000db9f:	8b 07                	mov    eax,DWORD PTR [edi]
c000dba1:	89 03                	mov    DWORD PTR [ebx],eax
c000dba3:	c1 e0 03             	shl    eax,0x3
c000dba6:	89 04 24             	mov    DWORD PTR [esp],eax
c000dba9:	e8 22 0d 00 00       	call   c000e8d0 <malloc>
c000dbae:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000dbb1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000dbb3:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000dbb6:	89 c7                	mov    edi,eax
c000dbb8:	c1 e1 03             	shl    ecx,0x3
c000dbbb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	89 d8                	mov    eax,ebx
c000dbc2:	5b                   	pop    ebx
c000dbc3:	5e                   	pop    esi
c000dbc4:	5f                   	pop    edi
c000dbc5:	c3                   	ret    

c000dbc6 <KeLoadSystemEnv()>:
c000dbc6:	53                   	push   ebx
c000dbc7:	83 ec 14             	sub    esp,0x14
c000dbca:	6a 0c                	push   0xc
c000dbcc:	e8 ff 0c 00 00       	call   c000e8d0 <malloc>
c000dbd1:	89 c3                	mov    ebx,eax
c000dbd3:	58                   	pop    eax
c000dbd4:	5a                   	pop    edx
c000dbd5:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000dbdb:	53                   	push   ebx
c000dbdc:	e8 71 fe ff ff       	call   c000da52 <EnvVarContainer::EnvVarContainer(Process*)>
c000dbe1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dbe4:	89 1d 7c 9d 02 c0    	mov    DWORD PTR ds:0xc0029d7c,ebx
c000dbea:	e8 47 fe ff ff       	call   c000da36 <EnvVarContainer::__loadSystem()>
c000dbef:	83 c4 18             	add    esp,0x18
c000dbf2:	5b                   	pop    ebx
c000dbf3:	c3                   	ret    

c000dbf4 <KeLoadUserEnv()>:
c000dbf4:	53                   	push   ebx
c000dbf5:	83 ec 14             	sub    esp,0x14
c000dbf8:	6a 0c                	push   0xc
c000dbfa:	e8 d1 0c 00 00       	call   c000e8d0 <malloc>
c000dbff:	89 c3                	mov    ebx,eax
c000dc01:	58                   	pop    eax
c000dc02:	5a                   	pop    edx
c000dc03:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000dc09:	53                   	push   ebx
c000dc0a:	e8 43 fe ff ff       	call   c000da52 <EnvVarContainer::EnvVarContainer(Process*)>
c000dc0f:	89 1d 78 9d 02 c0    	mov    DWORD PTR ds:0xc0029d78,ebx
c000dc15:	83 c4 18             	add    esp,0x18
c000dc18:	5b                   	pop    ebx
c000dc19:	c3                   	ret    

c000dc1a <KeFlushEnv()>:
c000dc1a:	c3                   	ret    

c000dc1b <KeGetProcessTotalEnvCount(Process*)>:
c000dc1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dc1f:	8b 15 78 9d 02 c0    	mov    edx,DWORD PTR ds:0xc0029d78
c000dc25:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000dc2b:	a1 7c 9d 02 c0       	mov    eax,ds:0xc0029d7c
c000dc30:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc32:	03 01                	add    eax,DWORD PTR [ecx]
c000dc34:	85 d2                	test   edx,edx
c000dc36:	74 02                	je     c000dc3a <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000dc38:	03 02                	add    eax,DWORD PTR [edx]
c000dc3a:	c3                   	ret    

c000dc3b <KeGetProcessEnvPair(Process*, int)>:
c000dc3b:	57                   	push   edi
c000dc3c:	56                   	push   esi
c000dc3d:	8b 35 78 9d 02 c0    	mov    esi,DWORD PTR ds:0xc0029d78
c000dc43:	53                   	push   ebx
c000dc44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dc48:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dc4c:	85 f6                	test   esi,esi
c000dc4e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dc52:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000dc58:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dc5a:	75 16                	jne    c000dc72 <KeGetProcessEnvPair(Process*, int)+0x37>
c000dc5c:	39 c2                	cmp    edx,eax
c000dc5e:	7c 16                	jl     c000dc76 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000dc60:	8b 0d 7c 9d 02 c0    	mov    ecx,DWORD PTR ds:0xc0029d7c
c000dc66:	8b 31                	mov    esi,DWORD PTR [ecx]
c000dc68:	01 c6                	add    esi,eax
c000dc6a:	39 d6                	cmp    esi,edx
c000dc6c:	7e 3c                	jle    c000dcaa <KeGetProcessEnvPair(Process*, int)+0x6f>
c000dc6e:	29 c2                	sub    edx,eax
c000dc70:	eb 04                	jmp    c000dc76 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000dc72:	39 c2                	cmp    edx,eax
c000dc74:	7d 05                	jge    c000dc7b <KeGetProcessEnvPair(Process*, int)+0x40>
c000dc76:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000dc79:	eb 20                	jmp    c000dc9b <KeGetProcessEnvPair(Process*, int)+0x60>
c000dc7b:	8b 3e                	mov    edi,DWORD PTR [esi]
c000dc7d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000dc80:	39 d1                	cmp    ecx,edx
c000dc82:	7e 04                	jle    c000dc88 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000dc84:	29 c2                	sub    edx,eax
c000dc86:	eb 10                	jmp    c000dc98 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000dc88:	8b 35 7c 9d 02 c0    	mov    esi,DWORD PTR ds:0xc0029d7c
c000dc8e:	03 0e                	add    ecx,DWORD PTR [esi]
c000dc90:	39 d1                	cmp    ecx,edx
c000dc92:	7e 16                	jle    c000dcaa <KeGetProcessEnvPair(Process*, int)+0x6f>
c000dc94:	29 c2                	sub    edx,eax
c000dc96:	29 fa                	sub    edx,edi
c000dc98:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000dc9b:	8d 14 d0             	lea    edx,[eax+edx*8]
c000dc9e:	8b 02                	mov    eax,DWORD PTR [edx]
c000dca0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000dca3:	89 03                	mov    DWORD PTR [ebx],eax
c000dca5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000dca8:	eb 1d                	jmp    c000dcc7 <KeGetProcessEnvPair(Process*, int)+0x8c>
c000dcaa:	83 ec 0c             	sub    esp,0xc
c000dcad:	68 52 21 02 c0       	push   0xc0022152
c000dcb2:	e8 5f 0f 00 00       	call   c000ec16 <KePanic(char const*)>
c000dcb7:	83 c4 10             	add    esp,0x10
c000dcba:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dcc0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000dcc7:	89 d8                	mov    eax,ebx
c000dcc9:	5b                   	pop    ebx
c000dcca:	5e                   	pop    esi
c000dccb:	5f                   	pop    edi
c000dccc:	c2 04 00             	ret    0x4
c000dccf:	90                   	nop

c000dcd0 <KeSetupInterrupts()>:
c000dcd0:	83 ec 10             	sub    esp,0x10
c000dcd3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dcdb:	90                   	nop
c000dcdc:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000dce4:	7f 5a                	jg     c000dd40 <KeSetupInterrupts()+0x70>
c000dce6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dcee:	66 90                	xchg   ax,ax
c000dcf0:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000dcf5:	7f 41                	jg     c000dd38 <KeSetupInterrupts()+0x68>
c000dcf7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dcfb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dd02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dd06:	01 d0                	add    eax,edx
c000dd08:	c7 04 85 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd5280],0x0
c000dd13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd17:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dd1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dd22:	01 d0                	add    eax,edx
c000dd24:	c7 04 85 80 9d 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd6280],0x0
c000dd2f:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000dd34:	eb ba                	jmp    c000dcf0 <KeSetupInterrupts()+0x20>
c000dd36:	66 90                	xchg   ax,ax
c000dd38:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000dd3d:	eb 9d                	jmp    c000dcdc <KeSetupInterrupts()+0xc>
c000dd3f:	90                   	nop
c000dd40:	90                   	nop
c000dd41:	83 c4 10             	add    esp,0x10
c000dd44:	c3                   	ret    
c000dd45:	8d 76 00             	lea    esi,[esi+0x0]

c000dd48 <int_handler>:
c000dd48:	83 ec 2c             	sub    esp,0x2c
c000dd4b:	90                   	nop
c000dd4c:	a0 94 bd 02 c0       	mov    al,ds:0xc002bd94
c000dd51:	0f b6 c0             	movzx  eax,al
c000dd54:	85 c0                	test   eax,eax
c000dd56:	74 04                	je     c000dd5c <int_handler+0x14>
c000dd58:	fa                   	cli    
c000dd59:	f4                   	hlt    
c000dd5a:	eb f0                	jmp    c000dd4c <int_handler+0x4>
c000dd5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dd60:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000dd63:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd67:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000dd6c:	7e 1a                	jle    c000dd88 <int_handler+0x40>
c000dd6e:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000dd73:	7f 13                	jg     c000dd88 <int_handler+0x40>
c000dd75:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dd79:	83 e8 20             	sub    eax,0x20
c000dd7c:	83 ec 0c             	sub    esp,0xc
c000dd7f:	50                   	push   eax
c000dd80:	e8 63 a8 00 00       	call   c00185e8 <HalEndOfInterrupt(int)>
c000dd85:	83 c4 10             	add    esp,0x10
c000dd88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dd8c:	c1 e0 04             	shl    eax,0x4
c000dd8f:	05 80 ad 02 c0       	add    eax,0xc002ad80
c000dd94:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dd9c:	c1 e0 04             	shl    eax,0x4
c000dd9f:	05 80 9d 02 c0       	add    eax,0xc0029d80
c000dda4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dda8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ddb0:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000ddb5:	0f 8f ad 00 00 00    	jg     c000de68 <int_handler+0x120>
c000ddbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ddbf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ddc6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ddca:	01 d0                	add    eax,edx
c000ddcc:	8b 00                	mov    eax,DWORD PTR [eax]
c000ddce:	85 c0                	test   eax,eax
c000ddd0:	0f 84 86 00 00 00    	je     c000de5c <int_handler+0x114>
c000ddd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ddda:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000dddd:	83 f8 60             	cmp    eax,0x60
c000dde0:	75 46                	jne    c000de28 <int_handler+0xe0>
c000dde2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dde6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dded:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ddf1:	01 d0                	add    eax,edx
c000ddf3:	8b 00                	mov    eax,DWORD PTR [eax]
c000ddf5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ddf9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000de00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de04:	01 ca                	add    edx,ecx
c000de06:	8b 12                	mov    edx,DWORD PTR [edx]
c000de08:	83 ec 08             	sub    esp,0x8
c000de0b:	52                   	push   edx
c000de0c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000de10:	ff d0                	call   eax
c000de12:	83 c4 10             	add    esp,0x10
c000de15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000de1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000de25:	eb 4d                	jmp    c000de74 <int_handler+0x12c>
c000de27:	90                   	nop
c000de28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de2c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000de33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de37:	01 d0                	add    eax,edx
c000de39:	8b 00                	mov    eax,DWORD PTR [eax]
c000de3b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000de3f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000de46:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de4a:	01 ca                	add    edx,ecx
c000de4c:	8b 12                	mov    edx,DWORD PTR [edx]
c000de4e:	83 ec 08             	sub    esp,0x8
c000de51:	52                   	push   edx
c000de52:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000de56:	ff d0                	call   eax
c000de58:	83 c4 10             	add    esp,0x10
c000de5b:	90                   	nop
c000de5c:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000de61:	e9 4a ff ff ff       	jmp    c000ddb0 <int_handler+0x68>
c000de66:	66 90                	xchg   ax,ax
c000de68:	b8 00 00 00 00       	mov    eax,0x0
c000de6d:	ba 00 00 00 00       	mov    edx,0x0
c000de72:	66 90                	xchg   ax,ax
c000de74:	83 c4 2c             	add    esp,0x2c
c000de77:	c3                   	ret    

c000de78 <KeDisplayProgramFault(char const*)>:
c000de78:	83 ec 0c             	sub    esp,0xc
c000de7b:	83 ec 0c             	sub    esp,0xc
c000de7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de82:	e8 c7 90 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000de87:	83 c4 10             	add    esp,0x10
c000de8a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000de8f:	8b 00                	mov    eax,DWORD PTR [eax]
c000de91:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000de94:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000de9a:	85 c0                	test   eax,eax
c000de9c:	74 22                	je     c000dec0 <KeDisplayProgramFault(char const*)+0x48>
c000de9e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000dea3:	8b 00                	mov    eax,DWORD PTR [eax]
c000dea5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000dea8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000deae:	6a 04                	push   0x4
c000deb0:	6a 0f                	push   0xf
c000deb2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000deb6:	50                   	push   eax
c000deb7:	e8 3c 35 00 00       	call   c00113f8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000debc:	83 c4 10             	add    esp,0x10
c000debf:	90                   	nop
c000dec0:	90                   	nop
c000dec1:	83 c4 0c             	add    esp,0xc
c000dec4:	c3                   	ret    
c000dec5:	8d 76 00             	lea    esi,[esi+0x0]

c000dec8 <KeGeneralProtectionFault(void*, void*)>:
c000dec8:	83 ec 0c             	sub    esp,0xc
c000decb:	83 ec 08             	sub    esp,0x8
c000dece:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ded2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ded6:	e8 2d 9d 00 00       	call   c0017c08 <HalHandleGeneralProtectionFault(void*, void*)>
c000dedb:	83 c4 10             	add    esp,0x10
c000dede:	0f b6 c0             	movzx  eax,al
c000dee1:	85 c0                	test   eax,eax
c000dee3:	75 2f                	jne    c000df14 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000dee5:	83 ec 0c             	sub    esp,0xc
c000dee8:	68 6c 21 02 c0       	push   0xc002216c
c000deed:	e8 86 ff ff ff       	call   c000de78 <KeDisplayProgramFault(char const*)>
c000def2:	83 c4 10             	add    esp,0x10
c000def5:	83 ec 0c             	sub    esp,0xc
c000def8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000defc:	e8 23 9e 00 00       	call   c0017d24 <HalDisplayDebugInfo(void*)>
c000df01:	83 c4 10             	add    esp,0x10
c000df04:	83 ec 0c             	sub    esp,0xc
c000df07:	6a 00                	push   0x0
c000df09:	e8 8e 7d 00 00       	call   c0015c9c <Thr::terminateFromIRQ(int)>
c000df0e:	83 c4 10             	add    esp,0x10
c000df11:	eb 05                	jmp    c000df18 <KeGeneralProtectionFault(void*, void*)+0x50>
c000df13:	90                   	nop
c000df14:	90                   	nop
c000df15:	8d 76 00             	lea    esi,[esi+0x0]
c000df18:	83 c4 0c             	add    esp,0xc
c000df1b:	c3                   	ret    

c000df1c <KePageFault(void*, void*)>:
c000df1c:	83 ec 0c             	sub    esp,0xc
c000df1f:	83 ec 08             	sub    esp,0x8
c000df22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df2a:	e8 84 9d 00 00       	call   c0017cb3 <HalHandlePageFault(void*, void*)>
c000df2f:	83 c4 10             	add    esp,0x10
c000df32:	0f b6 c0             	movzx  eax,al
c000df35:	85 c0                	test   eax,eax
c000df37:	75 2f                	jne    c000df68 <KePageFault(void*, void*)+0x4c>
c000df39:	83 ec 0c             	sub    esp,0xc
c000df3c:	68 85 21 02 c0       	push   0xc0022185
c000df41:	e8 32 ff ff ff       	call   c000de78 <KeDisplayProgramFault(char const*)>
c000df46:	83 c4 10             	add    esp,0x10
c000df49:	83 ec 0c             	sub    esp,0xc
c000df4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df50:	e8 cf 9d 00 00       	call   c0017d24 <HalDisplayDebugInfo(void*)>
c000df55:	83 c4 10             	add    esp,0x10
c000df58:	83 ec 0c             	sub    esp,0xc
c000df5b:	6a 00                	push   0x0
c000df5d:	e8 3a 7d 00 00       	call   c0015c9c <Thr::terminateFromIRQ(int)>
c000df62:	83 c4 10             	add    esp,0x10
c000df65:	eb 05                	jmp    c000df6c <KePageFault(void*, void*)+0x50>
c000df67:	90                   	nop
c000df68:	90                   	nop
c000df69:	8d 76 00             	lea    esi,[esi+0x0]
c000df6c:	83 c4 0c             	add    esp,0xc
c000df6f:	c3                   	ret    

c000df70 <KeNonMaskableInterrupt(void*, void*)>:
c000df70:	83 ec 0c             	sub    esp,0xc
c000df73:	e8 3a a1 00 00       	call   c00180b2 <HalReceivedNMI()>
c000df78:	90                   	nop
c000df79:	83 c4 0c             	add    esp,0xc
c000df7c:	c3                   	ret    
c000df7d:	8d 76 00             	lea    esi,[esi+0x0]

c000df80 <KeOtherFault(void*, void*)>:
c000df80:	83 ec 0c             	sub    esp,0xc
c000df83:	83 ec 0c             	sub    esp,0xc
c000df86:	68 90 21 02 c0       	push   0xc0022190
c000df8b:	e8 e8 fe ff ff       	call   c000de78 <KeDisplayProgramFault(char const*)>
c000df90:	83 c4 10             	add    esp,0x10
c000df93:	83 ec 0c             	sub    esp,0xc
c000df96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df9a:	e8 85 9d 00 00       	call   c0017d24 <HalDisplayDebugInfo(void*)>
c000df9f:	83 c4 10             	add    esp,0x10
c000dfa2:	83 ec 0c             	sub    esp,0xc
c000dfa5:	6a 00                	push   0x0
c000dfa7:	e8 f0 7c 00 00       	call   c0015c9c <Thr::terminateFromIRQ(int)>
c000dfac:	83 c4 10             	add    esp,0x10
c000dfaf:	90                   	nop
c000dfb0:	83 c4 0c             	add    esp,0xc
c000dfb3:	c3                   	ret    

c000dfb4 <KeOpcodeFault(void*, void*)>:
c000dfb4:	55                   	push   ebp
c000dfb5:	89 e5                	mov    ebp,esp
c000dfb7:	83 ec 08             	sub    esp,0x8
c000dfba:	83 ec 08             	sub    esp,0x8
c000dfbd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000dfc0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000dfc3:	e8 1a 9d 00 00       	call   c0017ce2 <HalHandleOpcodeFault(void*, void*)>
c000dfc8:	83 c4 10             	add    esp,0x10
c000dfcb:	0f b6 c0             	movzx  eax,al
c000dfce:	85 c0                	test   eax,eax
c000dfd0:	75 2e                	jne    c000e000 <KeOpcodeFault(void*, void*)+0x4c>
c000dfd2:	83 ec 0c             	sub    esp,0xc
c000dfd5:	68 b8 21 02 c0       	push   0xc00221b8
c000dfda:	e8 99 fe ff ff       	call   c000de78 <KeDisplayProgramFault(char const*)>
c000dfdf:	83 c4 10             	add    esp,0x10
c000dfe2:	83 ec 0c             	sub    esp,0xc
c000dfe5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000dfe8:	e8 37 9d 00 00       	call   c0017d24 <HalDisplayDebugInfo(void*)>
c000dfed:	83 c4 10             	add    esp,0x10
c000dff0:	83 ec 0c             	sub    esp,0xc
c000dff3:	6a 00                	push   0x0
c000dff5:	e8 a2 7c 00 00       	call   c0015c9c <Thr::terminateFromIRQ(int)>
c000dffa:	83 c4 10             	add    esp,0x10
c000dffd:	eb 05                	jmp    c000e004 <KeOpcodeFault(void*, void*)+0x50>
c000dfff:	90                   	nop
c000e000:	90                   	nop
c000e001:	8d 76 00             	lea    esi,[esi+0x0]
c000e004:	c9                   	leave  
c000e005:	c3                   	ret    
c000e006:	66 90                	xchg   ax,ax

c000e008 <KeDoubleFault(void*, void*)>:
c000e008:	55                   	push   ebp
c000e009:	89 e5                	mov    ebp,esp
c000e00b:	83 ec 08             	sub    esp,0x8
c000e00e:	83 ec 0c             	sub    esp,0xc
c000e011:	68 c5 21 02 c0       	push   0xc00221c5
c000e016:	e8 fb 0b 00 00       	call   c000ec16 <KePanic(char const*)>
c000e01b:	83 c4 10             	add    esp,0x10
c000e01e:	90                   	nop
c000e01f:	c9                   	leave  
c000e020:	c3                   	ret    
c000e021:	90                   	nop

c000e022 <GDTEntry::setBase(unsigned int)>:
c000e022:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e026:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e02a:	89 c1                	mov    ecx,eax
c000e02c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e030:	c1 e9 10             	shr    ecx,0x10
c000e033:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e036:	c1 e8 18             	shr    eax,0x18
c000e039:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e03c:	c3                   	ret    
c000e03d:	90                   	nop

c000e03e <GDTEntry::setLimit(unsigned int)>:
c000e03e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e042:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e046:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e049:	66 89 01             	mov    WORD PTR [ecx],ax
c000e04c:	c1 e8 10             	shr    eax,0x10
c000e04f:	83 e0 0f             	and    eax,0xf
c000e052:	83 e2 f0             	and    edx,0xfffffff0
c000e055:	09 d0                	or     eax,edx
c000e057:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e05a:	c3                   	ret    
c000e05b:	90                   	nop

c000e05c <GDT::GDT()>:
c000e05c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e060:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e066:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e06a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e070:	90                   	nop
c000e071:	c3                   	ret    

c000e072 <GDT::addEntry(GDTEntry)>:
c000e072:	53                   	push   ebx
c000e073:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e077:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e07b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e07f:	8b 02                	mov    eax,DWORD PTR [edx]
c000e081:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000e085:	8d 48 01             	lea    ecx,[eax+0x1]
c000e088:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000e08c:	c1 e0 03             	shl    eax,0x3
c000e08f:	89 0a                	mov    DWORD PTR [edx],ecx
c000e091:	5b                   	pop    ebx
c000e092:	c3                   	ret    
c000e093:	90                   	nop

c000e094 <GDT::getNumberOfEntries()>:
c000e094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e098:	8b 00                	mov    eax,DWORD PTR [eax]
c000e09a:	c3                   	ret    
c000e09b:	90                   	nop

c000e09c <GDT::flush()>:
c000e09c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0a0:	8b 10                	mov    edx,DWORD PTR [eax]
c000e0a2:	83 c0 04             	add    eax,0x4
c000e0a5:	a3 82 bd 02 c0       	mov    ds:0xc002bd82,eax
c000e0aa:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e0b1:	66 89 15 80 bd 02 c0 	mov    WORD PTR ds:0xc002bd80,dx
c000e0b8:	e9 9d 22 ff ff       	jmp    c000035a <loadGDT>
c000e0bd:	90                   	nop

c000e0be <GDT::setup()>:
c000e0be:	57                   	push   edi
c000e0bf:	56                   	push   esi
c000e0c0:	53                   	push   ebx
c000e0c1:	83 ec 30             	sub    esp,0x30
c000e0c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e0c8:	6a 00                	push   0x0
c000e0ca:	8d 74 24 14          	lea    esi,[esp+0x14]
c000e0ce:	56                   	push   esi
c000e0cf:	e8 4e ff ff ff       	call   c000e022 <GDTEntry::setBase(unsigned int)>
c000e0d4:	6a 00                	push   0x0
c000e0d6:	56                   	push   esi
c000e0d7:	e8 62 ff ff ff       	call   c000e03e <GDTEntry::setLimit(unsigned int)>
c000e0dc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000e0e4:	6a 00                	push   0x0
c000e0e6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000e0ea:	56                   	push   esi
c000e0eb:	e8 32 ff ff ff       	call   c000e022 <GDTEntry::setBase(unsigned int)>
c000e0f0:	68 ff ff ff 00       	push   0xffffff
c000e0f5:	56                   	push   esi
c000e0f6:	e8 43 ff ff ff       	call   c000e03e <GDTEntry::setLimit(unsigned int)>
c000e0fb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e0ff:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e103:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000e108:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e10c:	0d 00 9a c0 00       	or     eax,0xc09a00
c000e111:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e115:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000e119:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e11d:	89 f8                	mov    eax,edi
c000e11f:	89 fa                	mov    edx,edi
c000e121:	80 e4 f7             	and    ah,0xf7
c000e124:	80 ce 60             	or     dh,0x60
c000e127:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e12b:	89 c7                	mov    edi,eax
c000e12d:	80 cc 60             	or     ah,0x60
c000e130:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e134:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e138:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e13c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000e140:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e144:	83 c4 20             	add    esp,0x20
c000e147:	6a 00                	push   0x0
c000e149:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e14d:	50                   	push   eax
c000e14e:	e8 cf fe ff ff       	call   c000e022 <GDTEntry::setBase(unsigned int)>
c000e153:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000e157:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e15b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e15f:	83 e0 3f             	and    eax,0x3f
c000e162:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000e166:	6a 00                	push   0x0
c000e168:	8d 44 24 34          	lea    eax,[esp+0x34]
c000e16c:	50                   	push   eax
c000e16d:	e8 b0 fe ff ff       	call   c000e022 <GDTEntry::setBase(unsigned int)>
c000e172:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000e176:	83 e0 3f             	and    eax,0x3f
c000e179:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000e17d:	83 c4 0c             	add    esp,0xc
c000e180:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e184:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e188:	53                   	push   ebx
c000e189:	e8 e4 fe ff ff       	call   c000e072 <GDT::addEntry(GDTEntry)>
c000e18e:	83 c4 0c             	add    esp,0xc
c000e191:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e195:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e199:	53                   	push   ebx
c000e19a:	e8 d3 fe ff ff       	call   c000e072 <GDT::addEntry(GDTEntry)>
c000e19f:	83 c4 0c             	add    esp,0xc
c000e1a2:	57                   	push   edi
c000e1a3:	56                   	push   esi
c000e1a4:	53                   	push   ebx
c000e1a5:	e8 c8 fe ff ff       	call   c000e072 <GDT::addEntry(GDTEntry)>
c000e1aa:	83 c4 0c             	add    esp,0xc
c000e1ad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e1b1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e1b5:	53                   	push   ebx
c000e1b6:	e8 b7 fe ff ff       	call   c000e072 <GDT::addEntry(GDTEntry)>
c000e1bb:	83 c4 0c             	add    esp,0xc
c000e1be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e1c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e1c6:	53                   	push   ebx
c000e1c7:	e8 a6 fe ff ff       	call   c000e072 <GDT::addEntry(GDTEntry)>
c000e1cc:	83 c4 0c             	add    esp,0xc
c000e1cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e1d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e1d7:	53                   	push   ebx
c000e1d8:	e8 95 fe ff ff       	call   c000e072 <GDT::addEntry(GDTEntry)>
c000e1dd:	83 c4 0c             	add    esp,0xc
c000e1e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e1e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e1e8:	53                   	push   ebx
c000e1e9:	e8 84 fe ff ff       	call   c000e072 <GDT::addEntry(GDTEntry)>
c000e1ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e1f1:	e8 a6 fe ff ff       	call   c000e09c <GDT::flush()>
c000e1f6:	83 c4 40             	add    esp,0x40
c000e1f9:	5b                   	pop    ebx
c000e1fa:	5e                   	pop    esi
c000e1fb:	5f                   	pop    edi
c000e1fc:	c3                   	ret    

c000e1fd <idleFunction(void*)>:
c000e1fd:	83 ec 0c             	sub    esp,0xc
c000e200:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000e207:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000e20e:	75 01                	jne    c000e211 <idleFunction(void*)+0x14>
c000e210:	fb                   	sti    
c000e211:	e8 37 9f 00 00       	call   c001814d <HalSystemIdle()>
c000e216:	e8 9b 21 01 00       	call   c00203b6 <idleCommon()>
c000e21b:	eb f4                	jmp    c000e211 <idleFunction(void*)+0x14>
c000e21d:	66 90                	xchg   ax,ax
c000e21f:	90                   	nop

c000e220 <IDTEntry::IDTEntry(bool)>:
c000e220:	53                   	push   ebx
c000e221:	83 ec 04             	sub    esp,0x4
c000e224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e228:	88 04 24             	mov    BYTE PTR [esp],al
c000e22b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e22f:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000e235:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e239:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000e23d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e241:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e244:	83 e2 f0             	and    edx,0xfffffff0
c000e247:	83 ca 0e             	or     edx,0xe
c000e24a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e24d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e251:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e254:	83 e2 ef             	and    edx,0xffffffef
c000e257:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e25a:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000e25e:	85 c0                	test   eax,eax
c000e260:	74 06                	je     c000e268 <IDTEntry::IDTEntry(bool)+0x48>
c000e262:	b2 03                	mov    dl,0x3
c000e264:	eb 06                	jmp    c000e26c <IDTEntry::IDTEntry(bool)+0x4c>
c000e266:	66 90                	xchg   ax,ax
c000e268:	b2 00                	mov    dl,0x0
c000e26a:	66 90                	xchg   ax,ax
c000e26c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e270:	83 e2 03             	and    edx,0x3
c000e273:	89 d3                	mov    ebx,edx
c000e275:	c1 e3 05             	shl    ebx,0x5
c000e278:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e27b:	83 e2 9f             	and    edx,0xffffff9f
c000e27e:	88 d1                	mov    cl,dl
c000e280:	88 da                	mov    dl,bl
c000e282:	09 ca                	or     edx,ecx
c000e284:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e287:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e28b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e28e:	83 ca 80             	or     edx,0xffffff80
c000e291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e294:	90                   	nop
c000e295:	83 c4 04             	add    esp,0x4
c000e298:	5b                   	pop    ebx
c000e299:	c3                   	ret    

c000e29a <IDTEntry::setOffset(unsigned int)>:
c000e29a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e29e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e2a2:	66 89 02             	mov    WORD PTR [edx],ax
c000e2a5:	c1 e8 10             	shr    eax,0x10
c000e2a8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000e2ac:	c3                   	ret    
c000e2ad:	90                   	nop
c000e2ae:	66 90                	xchg   ax,ax

c000e2b0 <IDT::IDT()>:
c000e2b0:	90                   	nop
c000e2b1:	c3                   	ret    

c000e2b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000e2b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e2b6:	83 c0 30             	add    eax,0x30
c000e2b9:	c3                   	ret    

c000e2ba <IDT::addEntry(IDTEntry, int)>:
c000e2ba:	53                   	push   ebx
c000e2bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e2bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e2c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e2c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e2cb:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000e2ce:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000e2d2:	5b                   	pop    ebx
c000e2d3:	c3                   	ret    

c000e2d4 <IDT::addEntry(int, void (*)(), bool)>:
c000e2d4:	53                   	push   ebx
c000e2d5:	83 ec 10             	sub    esp,0x10
c000e2d8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000e2dd:	50                   	push   eax
c000e2de:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000e2e2:	53                   	push   ebx
c000e2e3:	e8 38 ff ff ff       	call   c000e220 <IDTEntry::IDTEntry(bool)>
c000e2e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e2ec:	53                   	push   ebx
c000e2ed:	e8 a8 ff ff ff       	call   c000e29a <IDTEntry::setOffset(unsigned int)>
c000e2f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e2fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e2fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e302:	e8 b3 ff ff ff       	call   c000e2ba <IDT::addEntry(IDTEntry, int)>
c000e307:	83 c4 30             	add    esp,0x30
c000e30a:	5b                   	pop    ebx
c000e30b:	c3                   	ret    

c000e30c <IDT::flush()>:
c000e30c:	66 c7 05 88 bd 02 c0 ff 07 	mov    WORD PTR ds:0xc002bd88,0x7ff
c000e315:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e319:	a3 8a bd 02 c0       	mov    ds:0xc002bd8a,eax
c000e31e:	0f 01 1d 88 bd 02 c0 	lidtd  ds:0xc002bd88
c000e325:	c3                   	ret    

c000e326 <IDT::setup()>:
c000e326:	57                   	push   edi
c000e327:	56                   	push   esi
c000e328:	53                   	push   ebx
c000e329:	83 ec 10             	sub    esp,0x10
c000e32c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e330:	6a 00                	push   0x0
c000e332:	68 60 f6 01 c0       	push   0xc001f660
c000e337:	6a 00                	push   0x0
c000e339:	53                   	push   ebx
c000e33a:	e8 95 ff ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e33f:	6a 00                	push   0x0
c000e341:	68 70 f6 01 c0       	push   0xc001f670
c000e346:	6a 01                	push   0x1
c000e348:	53                   	push   ebx
c000e349:	e8 86 ff ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e34e:	83 c4 20             	add    esp,0x20
c000e351:	6a 00                	push   0x0
c000e353:	68 7a f6 01 c0       	push   0xc001f67a
c000e358:	6a 02                	push   0x2
c000e35a:	53                   	push   ebx
c000e35b:	e8 74 ff ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e360:	6a 00                	push   0x0
c000e362:	68 84 f6 01 c0       	push   0xc001f684
c000e367:	6a 03                	push   0x3
c000e369:	53                   	push   ebx
c000e36a:	e8 65 ff ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e36f:	83 c4 20             	add    esp,0x20
c000e372:	6a 00                	push   0x0
c000e374:	68 8e f6 01 c0       	push   0xc001f68e
c000e379:	6a 04                	push   0x4
c000e37b:	53                   	push   ebx
c000e37c:	e8 53 ff ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e381:	6a 00                	push   0x0
c000e383:	68 98 f6 01 c0       	push   0xc001f698
c000e388:	6a 05                	push   0x5
c000e38a:	53                   	push   ebx
c000e38b:	e8 44 ff ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e390:	83 c4 20             	add    esp,0x20
c000e393:	6a 00                	push   0x0
c000e395:	68 a2 f6 01 c0       	push   0xc001f6a2
c000e39a:	6a 06                	push   0x6
c000e39c:	53                   	push   ebx
c000e39d:	e8 32 ff ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e3a2:	6a 00                	push   0x0
c000e3a4:	68 ac f6 01 c0       	push   0xc001f6ac
c000e3a9:	6a 07                	push   0x7
c000e3ab:	53                   	push   ebx
c000e3ac:	e8 23 ff ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e3b1:	83 c4 20             	add    esp,0x20
c000e3b4:	6a 00                	push   0x0
c000e3b6:	68 b6 f6 01 c0       	push   0xc001f6b6
c000e3bb:	6a 08                	push   0x8
c000e3bd:	53                   	push   ebx
c000e3be:	e8 11 ff ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e3c3:	6a 00                	push   0x0
c000e3c5:	68 be f6 01 c0       	push   0xc001f6be
c000e3ca:	6a 09                	push   0x9
c000e3cc:	53                   	push   ebx
c000e3cd:	e8 02 ff ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e3d2:	83 c4 20             	add    esp,0x20
c000e3d5:	6a 00                	push   0x0
c000e3d7:	68 c8 f6 01 c0       	push   0xc001f6c8
c000e3dc:	6a 0a                	push   0xa
c000e3de:	53                   	push   ebx
c000e3df:	e8 f0 fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e3e4:	6a 00                	push   0x0
c000e3e6:	68 d0 f6 01 c0       	push   0xc001f6d0
c000e3eb:	6a 0b                	push   0xb
c000e3ed:	53                   	push   ebx
c000e3ee:	e8 e1 fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e3f3:	83 c4 20             	add    esp,0x20
c000e3f6:	6a 00                	push   0x0
c000e3f8:	68 d8 f6 01 c0       	push   0xc001f6d8
c000e3fd:	6a 0c                	push   0xc
c000e3ff:	53                   	push   ebx
c000e400:	e8 cf fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e405:	6a 00                	push   0x0
c000e407:	68 e0 f6 01 c0       	push   0xc001f6e0
c000e40c:	6a 0d                	push   0xd
c000e40e:	53                   	push   ebx
c000e40f:	e8 c0 fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e414:	83 c4 20             	add    esp,0x20
c000e417:	6a 00                	push   0x0
c000e419:	68 fa f6 01 c0       	push   0xc001f6fa
c000e41e:	6a 0e                	push   0xe
c000e420:	53                   	push   ebx
c000e421:	e8 ae fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e426:	6a 00                	push   0x0
c000e428:	68 02 f7 01 c0       	push   0xc001f702
c000e42d:	6a 0f                	push   0xf
c000e42f:	53                   	push   ebx
c000e430:	e8 9f fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e435:	83 c4 20             	add    esp,0x20
c000e438:	6a 00                	push   0x0
c000e43a:	68 0c f7 01 c0       	push   0xc001f70c
c000e43f:	6a 10                	push   0x10
c000e441:	53                   	push   ebx
c000e442:	e8 8d fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e447:	6a 00                	push   0x0
c000e449:	68 16 f7 01 c0       	push   0xc001f716
c000e44e:	6a 11                	push   0x11
c000e450:	53                   	push   ebx
c000e451:	e8 7e fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e456:	83 c4 20             	add    esp,0x20
c000e459:	6a 00                	push   0x0
c000e45b:	68 20 f7 01 c0       	push   0xc001f720
c000e460:	6a 12                	push   0x12
c000e462:	53                   	push   ebx
c000e463:	e8 6c fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e468:	6a 01                	push   0x1
c000e46a:	68 ba f7 01 c0       	push   0xc001f7ba
c000e46f:	6a 60                	push   0x60
c000e471:	53                   	push   ebx
c000e472:	e8 5d fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e477:	83 c4 20             	add    esp,0x20
c000e47a:	6a 00                	push   0x0
c000e47c:	68 c1 f7 01 c0       	push   0xc001f7c1
c000e481:	6a 20                	push   0x20
c000e483:	53                   	push   ebx
c000e484:	e8 4b fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e489:	6a 00                	push   0x0
c000e48b:	68 ac f7 01 c0       	push   0xc001f7ac
c000e490:	6a 21                	push   0x21
c000e492:	53                   	push   ebx
c000e493:	e8 3c fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e498:	83 c4 20             	add    esp,0x20
c000e49b:	6a 00                	push   0x0
c000e49d:	68 b3 f7 01 c0       	push   0xc001f7b3
c000e4a2:	6a 22                	push   0x22
c000e4a4:	53                   	push   ebx
c000e4a5:	e8 2a fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e4aa:	6a 00                	push   0x0
c000e4ac:	68 2a f7 01 c0       	push   0xc001f72a
c000e4b1:	6a 23                	push   0x23
c000e4b3:	53                   	push   ebx
c000e4b4:	e8 1b fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e4b9:	83 c4 20             	add    esp,0x20
c000e4bc:	6a 00                	push   0x0
c000e4be:	68 34 f7 01 c0       	push   0xc001f734
c000e4c3:	6a 24                	push   0x24
c000e4c5:	53                   	push   ebx
c000e4c6:	e8 09 fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e4cb:	6a 00                	push   0x0
c000e4cd:	68 3e f7 01 c0       	push   0xc001f73e
c000e4d2:	6a 25                	push   0x25
c000e4d4:	53                   	push   ebx
c000e4d5:	e8 fa fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e4da:	83 c4 20             	add    esp,0x20
c000e4dd:	6a 00                	push   0x0
c000e4df:	68 48 f7 01 c0       	push   0xc001f748
c000e4e4:	6a 26                	push   0x26
c000e4e6:	53                   	push   ebx
c000e4e7:	e8 e8 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e4ec:	6a 00                	push   0x0
c000e4ee:	68 52 f7 01 c0       	push   0xc001f752
c000e4f3:	6a 27                	push   0x27
c000e4f5:	53                   	push   ebx
c000e4f6:	e8 d9 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e4fb:	83 c4 20             	add    esp,0x20
c000e4fe:	6a 00                	push   0x0
c000e500:	68 5c f7 01 c0       	push   0xc001f75c
c000e505:	6a 28                	push   0x28
c000e507:	53                   	push   ebx
c000e508:	e8 c7 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e50d:	6a 00                	push   0x0
c000e50f:	68 66 f7 01 c0       	push   0xc001f766
c000e514:	6a 29                	push   0x29
c000e516:	53                   	push   ebx
c000e517:	e8 b8 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e51c:	83 c4 20             	add    esp,0x20
c000e51f:	6a 00                	push   0x0
c000e521:	68 70 f7 01 c0       	push   0xc001f770
c000e526:	6a 2a                	push   0x2a
c000e528:	53                   	push   ebx
c000e529:	e8 a6 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e52e:	6a 00                	push   0x0
c000e530:	68 7a f7 01 c0       	push   0xc001f77a
c000e535:	6a 2b                	push   0x2b
c000e537:	53                   	push   ebx
c000e538:	e8 97 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e53d:	83 c4 20             	add    esp,0x20
c000e540:	6a 00                	push   0x0
c000e542:	68 84 f7 01 c0       	push   0xc001f784
c000e547:	6a 2c                	push   0x2c
c000e549:	53                   	push   ebx
c000e54a:	e8 85 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e54f:	6a 00                	push   0x0
c000e551:	68 8e f7 01 c0       	push   0xc001f78e
c000e556:	6a 2d                	push   0x2d
c000e558:	53                   	push   ebx
c000e559:	e8 76 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e55e:	83 c4 20             	add    esp,0x20
c000e561:	6a 00                	push   0x0
c000e563:	68 98 f7 01 c0       	push   0xc001f798
c000e568:	6a 2e                	push   0x2e
c000e56a:	53                   	push   ebx
c000e56b:	e8 64 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e570:	6a 00                	push   0x0
c000e572:	68 a2 f7 01 c0       	push   0xc001f7a2
c000e577:	6a 2f                	push   0x2f
c000e579:	53                   	push   ebx
c000e57a:	e8 55 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e57f:	83 c4 20             	add    esp,0x20
c000e582:	6a 00                	push   0x0
c000e584:	68 fc f8 01 c0       	push   0xc001f8fc
c000e589:	6a 30                	push   0x30
c000e58b:	53                   	push   ebx
c000e58c:	e8 43 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e591:	6a 00                	push   0x0
c000e593:	68 06 f9 01 c0       	push   0xc001f906
c000e598:	6a 31                	push   0x31
c000e59a:	53                   	push   ebx
c000e59b:	e8 34 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e5a0:	83 c4 20             	add    esp,0x20
c000e5a3:	6a 00                	push   0x0
c000e5a5:	68 10 f9 01 c0       	push   0xc001f910
c000e5aa:	6a 32                	push   0x32
c000e5ac:	53                   	push   ebx
c000e5ad:	e8 22 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e5b2:	6a 00                	push   0x0
c000e5b4:	68 1a f9 01 c0       	push   0xc001f91a
c000e5b9:	6a 33                	push   0x33
c000e5bb:	53                   	push   ebx
c000e5bc:	e8 13 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e5c1:	83 c4 20             	add    esp,0x20
c000e5c4:	6a 00                	push   0x0
c000e5c6:	68 24 f9 01 c0       	push   0xc001f924
c000e5cb:	6a 34                	push   0x34
c000e5cd:	53                   	push   ebx
c000e5ce:	e8 01 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e5d3:	6a 00                	push   0x0
c000e5d5:	68 2e f9 01 c0       	push   0xc001f92e
c000e5da:	6a 35                	push   0x35
c000e5dc:	53                   	push   ebx
c000e5dd:	e8 f2 fc ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e5e2:	83 c4 20             	add    esp,0x20
c000e5e5:	6a 00                	push   0x0
c000e5e7:	68 38 f9 01 c0       	push   0xc001f938
c000e5ec:	6a 36                	push   0x36
c000e5ee:	53                   	push   ebx
c000e5ef:	e8 e0 fc ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e5f4:	6a 00                	push   0x0
c000e5f6:	68 42 f9 01 c0       	push   0xc001f942
c000e5fb:	6a 37                	push   0x37
c000e5fd:	53                   	push   ebx
c000e5fe:	e8 d1 fc ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e603:	83 c4 1c             	add    esp,0x1c
c000e606:	6a 03                	push   0x3
c000e608:	6a 02                	push   0x2
c000e60a:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c000e610:	e8 1f 41 00 00       	call   c0012734 <VAS::allocatePages(int, int)>
c000e615:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000e61c:	89 c6                	mov    esi,eax
c000e61e:	e8 ad 02 00 00       	call   c000e8d0 <malloc>
c000e623:	81 c6 00 20 00 00    	add    esi,0x2000
c000e629:	89 04 24             	mov    DWORD PTR [esp],eax
c000e62c:	89 c7                	mov    edi,eax
c000e62e:	e8 d5 31 00 00       	call   c0011808 <TSS::TSS()>
c000e633:	83 c4 0c             	add    esp,0xc
c000e636:	68 b6 f6 01 c0       	push   0xc001f6b6
c000e63b:	56                   	push   esi
c000e63c:	57                   	push   edi
c000e63d:	e8 0a 32 00 00       	call   c001184c <TSS::setup(unsigned long, unsigned long)>
c000e642:	89 c6                	mov    esi,eax
c000e644:	58                   	pop    eax
c000e645:	5a                   	pop    edx
c000e646:	6a 00                	push   0x0
c000e648:	8d 44 24 14          	lea    eax,[esp+0x14]
c000e64c:	50                   	push   eax
c000e64d:	e8 ce fb ff ff       	call   c000e220 <IDTEntry::IDTEntry(bool)>
c000e652:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e656:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000e65b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000e662:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e666:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000e66c:	80 ce 05             	or     dh,0x5
c000e66f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e673:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000e676:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e67a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000e67d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e680:	e8 87 fc ff ff       	call   c000e30c <IDT::flush()>
c000e685:	83 c4 20             	add    esp,0x20
c000e688:	5b                   	pop    ebx
c000e689:	5e                   	pop    esi
c000e68a:	5f                   	pop    edi
c000e68b:	c3                   	ret    

c000e68c <CPU::current()>:
c000e68c:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000e691:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e697:	c3                   	ret    

c000e698 <operator new(unsigned long)>:
c000e698:	e9 33 02 00 00       	jmp    c000e8d0 <malloc>

c000e69d <operator delete(void*)>:
c000e69d:	e9 4e 02 00 00       	jmp    c000e8f0 <rfree>

c000e6a2 <disableIRQs()>:
c000e6a2:	fa                   	cli    
c000e6a3:	c3                   	ret    

c000e6a4 <enableIRQs()>:
c000e6a4:	fb                   	sti    
c000e6a5:	c3                   	ret    

c000e6a6 <lockScheduler()>:
c000e6a6:	fa                   	cli    
c000e6a7:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000e6ad:	c3                   	ret    

c000e6ae <unlockScheduler()>:
c000e6ae:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000e6b5:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000e6bc:	75 01                	jne    c000e6bf <unlockScheduler()+0x11>
c000e6be:	fb                   	sti    
c000e6bf:	c3                   	ret    

c000e6c0 <lockStuff()>:
c000e6c0:	fa                   	cli    
c000e6c1:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000e6c7:	ff 05 ac c6 02 c0    	inc    DWORD PTR ds:0xc002c6ac
c000e6cd:	c3                   	ret    

c000e6ce <unlockStuff()>:
c000e6ce:	83 ec 0c             	sub    esp,0xc
c000e6d1:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000e6d6:	48                   	dec    eax
c000e6d7:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000e6dc:	75 18                	jne    c000e6f6 <unlockStuff()+0x28>
c000e6de:	83 3d a8 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6a8,0x0
c000e6e5:	74 0f                	je     c000e6f6 <unlockStuff()+0x28>
c000e6e7:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000e6f1:	e8 f6 6c 00 00       	call   c00153ec <schedule()>
c000e6f6:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000e6fd:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000e704:	75 01                	jne    c000e707 <unlockStuff()+0x39>
c000e706:	fb                   	sti    
c000e707:	83 c4 0c             	add    esp,0xc
c000e70a:	c3                   	ret    

c000e70b <Virt::getAKernelVAS()>:
c000e70b:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c000e710:	c3                   	ret    

c000e711 <__not_memcpy>:
c000e711:	57                   	push   edi
c000e712:	56                   	push   esi
c000e713:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e717:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e71b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e71f:	89 c7                	mov    edi,eax
c000e721:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e723:	5e                   	pop    esi
c000e724:	5f                   	pop    edi
c000e725:	c3                   	ret    

c000e726 <sbrk>:
c000e726:	55                   	push   ebp
c000e727:	57                   	push   edi
c000e728:	56                   	push   esi
c000e729:	53                   	push   ebx
c000e72a:	83 ec 1c             	sub    esp,0x1c
c000e72d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e731:	85 c0                	test   eax,eax
c000e733:	74 66                	je     c000e79b <sbrk+0x75>
c000e735:	78 6b                	js     c000e7a2 <sbrk+0x7c>
c000e737:	8b 15 70 43 02 c0    	mov    edx,DWORD PTR ds:0xc0024370
c000e73d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e741:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c000e747:	05 ff 0f 00 00       	add    eax,0xfff
c000e74c:	0f 49 e8             	cmovns ebp,eax
c000e74f:	c1 fd 0c             	sar    ebp,0xc
c000e752:	bb 00 00 00 00       	mov    ebx,0x0
c000e757:	8b 35 d0 be 02 c0    	mov    esi,DWORD PTR ds:0xc002bed0
c000e75d:	8b 3d 70 43 02 c0    	mov    edi,DWORD PTR ds:0xc0024370
c000e763:	e8 a8 06 00 00       	call   c000ee10 <Phys::allocatePage()>
c000e768:	68 01 04 00 00       	push   0x401
c000e76d:	57                   	push   edi
c000e76e:	50                   	push   eax
c000e76f:	56                   	push   esi
c000e770:	e8 b7 3e 00 00       	call   c001262c <VAS::mapPage(unsigned long, unsigned long, int)>
c000e775:	81 05 70 43 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0024370,0x1000
c000e77f:	83 c3 01             	add    ebx,0x1
c000e782:	83 c4 10             	add    esp,0x10
c000e785:	39 dd                	cmp    ebp,ebx
c000e787:	75 ce                	jne    c000e757 <sbrk+0x31>
c000e789:	0f 20 d8             	mov    eax,cr3
c000e78c:	0f 22 d8             	mov    cr3,eax
c000e78f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e793:	83 c4 1c             	add    esp,0x1c
c000e796:	5b                   	pop    ebx
c000e797:	5e                   	pop    esi
c000e798:	5f                   	pop    edi
c000e799:	5d                   	pop    ebp
c000e79a:	c3                   	ret    
c000e79b:	a1 70 43 02 c0       	mov    eax,ds:0xc0024370
c000e7a0:	eb f1                	jmp    c000e793 <sbrk+0x6d>
c000e7a2:	83 ec 08             	sub    esp,0x8
c000e7a5:	50                   	push   eax
c000e7a6:	68 d4 21 02 c0       	push   0xc00221d4
c000e7ab:	e8 9e 87 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000e7b0:	83 c4 10             	add    esp,0x10
c000e7b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e7b8:	eb d9                	jmp    c000e793 <sbrk+0x6d>

c000e7ba <sbrk_thunk>:
c000e7ba:	83 ec 0c             	sub    esp,0xc
c000e7bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c1:	3d ff bf 00 00       	cmp    eax,0xbfff
c000e7c6:	7f 10                	jg     c000e7d8 <sbrk_thunk+0x1e>
c000e7c8:	83 ec 0c             	sub    esp,0xc
c000e7cb:	50                   	push   eax
c000e7cc:	e8 55 ff ff ff       	call   c000e726 <sbrk>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	83 c4 0c             	add    esp,0xc
c000e7d7:	c3                   	ret    
c000e7d8:	83 ec 08             	sub    esp,0x8
c000e7db:	50                   	push   eax
c000e7dc:	68 04 22 02 c0       	push   0xc0022204
c000e7e1:	e8 68 87 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000e7e6:	83 c4 10             	add    esp,0x10
c000e7e9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e7ee:	eb e4                	jmp    c000e7d4 <sbrk_thunk+0x1a>

c000e7f0 <mmap>:
c000e7f0:	55                   	push   ebp
c000e7f1:	57                   	push   edi
c000e7f2:	56                   	push   esi
c000e7f3:	53                   	push   ebx
c000e7f4:	83 ec 18             	sub    esp,0x18
c000e7f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7fb:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000e801:	89 fb                	mov    ebx,edi
c000e803:	c1 eb 0c             	shr    ebx,0xc
c000e806:	53                   	push   ebx
c000e807:	e8 47 37 00 00       	call   c0011f53 <Virt::allocateKernelVirtualPages(int)>
c000e80c:	89 c5                	mov    ebp,eax
c000e80e:	83 c4 10             	add    esp,0x10
c000e811:	85 db                	test   ebx,ebx
c000e813:	7e 2f                	jle    c000e844 <mmap+0x54>
c000e815:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000e81b:	01 c7                	add    edi,eax
c000e81d:	89 c3                	mov    ebx,eax
c000e81f:	8b 35 d0 be 02 c0    	mov    esi,DWORD PTR ds:0xc002bed0
c000e825:	e8 e6 05 00 00       	call   c000ee10 <Phys::allocatePage()>
c000e82a:	68 01 04 00 00       	push   0x401
c000e82f:	53                   	push   ebx
c000e830:	50                   	push   eax
c000e831:	56                   	push   esi
c000e832:	e8 f5 3d 00 00       	call   c001262c <VAS::mapPage(unsigned long, unsigned long, int)>
c000e837:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e83d:	83 c4 10             	add    esp,0x10
c000e840:	39 fb                	cmp    ebx,edi
c000e842:	75 db                	jne    c000e81f <mmap+0x2f>
c000e844:	89 e8                	mov    eax,ebp
c000e846:	83 c4 0c             	add    esp,0xc
c000e849:	5b                   	pop    ebx
c000e84a:	5e                   	pop    esi
c000e84b:	5f                   	pop    edi
c000e84c:	5d                   	pop    ebp
c000e84d:	c3                   	ret    

c000e84e <munmap>:
c000e84e:	83 ec 18             	sub    esp,0x18
c000e851:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e855:	e8 f7 39 00 00       	call   c0012251 <Virt::freeKernelVirtualPages(unsigned long)>
c000e85a:	b8 00 00 00 00       	mov    eax,0x0
c000e85f:	83 c4 1c             	add    esp,0x1c
c000e862:	c3                   	ret    

c000e863 <liballoc_lock()>:
c000e863:	fa                   	cli    
c000e864:	83 05 b0 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6b0,0x1
c000e86b:	b8 00 00 00 00       	mov    eax,0x0
c000e870:	c3                   	ret    

c000e871 <liballoc_unlock()>:
c000e871:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000e879:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000e880:	75 01                	jne    c000e883 <liballoc_unlock()+0x12>
c000e882:	fb                   	sti    
c000e883:	b8 00 00 00 00       	mov    eax,0x0
c000e888:	c3                   	ret    

c000e889 <liballoc_alloc(int)>:
c000e889:	83 ec 10             	sub    esp,0x10
c000e88c:	6a 01                	push   0x1
c000e88e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e892:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c000e898:	e8 97 3e 00 00       	call   c0012734 <VAS::allocatePages(int, int)>
c000e89d:	83 c4 1c             	add    esp,0x1c
c000e8a0:	c3                   	ret    

c000e8a1 <liballoc_free(void*, int)>:
c000e8a1:	83 ec 14             	sub    esp,0x14
c000e8a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e8a8:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c000e8ae:	e8 db 3a 00 00       	call   c001238e <VAS::freeAllocatedPages(unsigned long)>
c000e8b3:	b8 00 00 00 00       	mov    eax,0x0
c000e8b8:	83 c4 1c             	add    esp,0x1c
c000e8bb:	c3                   	ret    

c000e8bc <realloc>:
c000e8bc:	83 ec 14             	sub    esp,0x14
c000e8bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8c7:	e8 b9 2e ff ff       	call   c0001785 <dlrealloc>
c000e8cc:	83 c4 1c             	add    esp,0x1c
c000e8cf:	c3                   	ret    

c000e8d0 <malloc>:
c000e8d0:	83 ec 18             	sub    esp,0x18
c000e8d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8d7:	e8 6c 29 ff ff       	call   c0001248 <dlmalloc>
c000e8dc:	83 c4 1c             	add    esp,0x1c
c000e8df:	c3                   	ret    

c000e8e0 <free>:
c000e8e0:	83 ec 18             	sub    esp,0x18
c000e8e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8e7:	e8 9a 24 ff ff       	call   c0000d86 <dlfree>
c000e8ec:	83 c4 1c             	add    esp,0x1c
c000e8ef:	c3                   	ret    

c000e8f0 <rfree>:
c000e8f0:	83 ec 18             	sub    esp,0x18
c000e8f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8f7:	e8 8a 24 ff ff       	call   c0000d86 <dlfree>
c000e8fc:	83 c4 1c             	add    esp,0x1c
c000e8ff:	c3                   	ret    

c000e900 <calloc>:
c000e900:	56                   	push   esi
c000e901:	53                   	push   ebx
c000e902:	83 ec 10             	sub    esp,0x10
c000e905:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e909:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000e90e:	53                   	push   ebx
c000e90f:	e8 bc ff ff ff       	call   c000e8d0 <malloc>
c000e914:	89 c6                	mov    esi,eax
c000e916:	83 c4 0c             	add    esp,0xc
c000e919:	53                   	push   ebx
c000e91a:	6a 00                	push   0x0
c000e91c:	50                   	push   eax
c000e91d:	e8 ce 1b ff ff       	call   c00004f0 <memset>
c000e922:	89 f0                	mov    eax,esi
c000e924:	83 c4 14             	add    esp,0x14
c000e927:	5b                   	pop    ebx
c000e928:	5e                   	pop    esi
c000e929:	c3                   	ret    
c000e92a:	66 90                	xchg   ax,ax

c000e92c <KeMailboxTryPost(Mailbox*, void*)>:
c000e92c:	83 ec 10             	sub    esp,0x10
c000e92f:	fa                   	cli    
c000e930:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e935:	83 c0 01             	add    eax,0x1
c000e938:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e93d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e942:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e946:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e949:	85 c0                	test   eax,eax
c000e94b:	75 23                	jne    c000e970 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000e94d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e951:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e955:	89 10                	mov    DWORD PTR [eax],edx
c000e957:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e95b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e95e:	8d 50 01             	lea    edx,[eax+0x1]
c000e961:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e965:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000e968:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e96d:	8d 76 00             	lea    esi,[esi+0x0]
c000e970:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000e978:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e97d:	85 c0                	test   eax,eax
c000e97f:	75 03                	jne    c000e984 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000e981:	fb                   	sti    
c000e982:	66 90                	xchg   ax,ax
c000e984:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e988:	83 c4 10             	add    esp,0x10
c000e98b:	c3                   	ret    

c000e98c <KeMailboxTryGet(Mailbox*, void**)>:
c000e98c:	83 ec 10             	sub    esp,0x10
c000e98f:	fa                   	cli    
c000e990:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e995:	83 c0 01             	add    eax,0x1
c000e998:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e99d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e9a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e9a9:	83 f8 01             	cmp    eax,0x1
c000e9ac:	75 22                	jne    c000e9d0 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000e9ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9b2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e9b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e9b8:	89 10                	mov    DWORD PTR [eax],edx
c000e9ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e9c1:	8d 50 ff             	lea    edx,[eax-0x1]
c000e9c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9c8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000e9cb:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e9d0:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000e9d8:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e9dd:	85 c0                	test   eax,eax
c000e9df:	75 03                	jne    c000e9e4 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000e9e1:	fb                   	sti    
c000e9e2:	66 90                	xchg   ax,ax
c000e9e4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e9e8:	83 c4 10             	add    esp,0x10
c000e9eb:	c3                   	ret    

c000e9ec <KeMailboxCreate()>:
c000e9ec:	83 ec 1c             	sub    esp,0x1c
c000e9ef:	83 ec 0c             	sub    esp,0xc
c000e9f2:	6a 08                	push   0x8
c000e9f4:	e8 d7 fe ff ff       	call   c000e8d0 <malloc>
c000e9f9:	83 c4 10             	add    esp,0x10
c000e9fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea04:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ea0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea0e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ea15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea19:	83 c4 1c             	add    esp,0x1c
c000ea1c:	c3                   	ret    
c000ea1d:	8d 76 00             	lea    esi,[esi+0x0]

c000ea20 <KeMailboxPost(Mailbox*, void*)>:
c000ea20:	83 ec 1c             	sub    esp,0x1c
c000ea23:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ea28:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ea2c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ea30:	e8 f7 fe ff ff       	call   c000e92c <KeMailboxTryPost(Mailbox*, void*)>
c000ea35:	83 c4 08             	add    esp,0x8
c000ea38:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ea3c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea40:	83 f0 01             	xor    eax,0x1
c000ea43:	0f b6 c0             	movzx  eax,al
c000ea46:	85 c0                	test   eax,eax
c000ea48:	74 26                	je     c000ea70 <KeMailboxPost(Mailbox*, void*)+0x50>
c000ea4a:	fa                   	cli    
c000ea4b:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ea50:	83 c0 01             	add    eax,0x1
c000ea53:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000ea58:	e8 8f 69 00 00       	call   c00153ec <schedule()>
c000ea5d:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000ea65:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ea6a:	85 c0                	test   eax,eax
c000ea6c:	75 02                	jne    c000ea70 <KeMailboxPost(Mailbox*, void*)+0x50>
c000ea6e:	fb                   	sti    
c000ea6f:	90                   	nop
c000ea70:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ea75:	85 c0                	test   eax,eax
c000ea77:	75 03                	jne    c000ea7c <KeMailboxPost(Mailbox*, void*)+0x5c>
c000ea79:	eb ad                	jmp    c000ea28 <KeMailboxPost(Mailbox*, void*)+0x8>
c000ea7b:	90                   	nop
c000ea7c:	90                   	nop
c000ea7d:	83 c4 1c             	add    esp,0x1c
c000ea80:	c3                   	ret    
c000ea81:	8d 76 00             	lea    esi,[esi+0x0]

c000ea84 <KeMailboxGet(Mailbox*, void**)>:
c000ea84:	83 ec 1c             	sub    esp,0x1c
c000ea87:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ea8c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ea90:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ea94:	e8 f3 fe ff ff       	call   c000e98c <KeMailboxTryGet(Mailbox*, void**)>
c000ea99:	83 c4 08             	add    esp,0x8
c000ea9c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eaa0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eaa4:	83 f0 01             	xor    eax,0x1
c000eaa7:	0f b6 c0             	movzx  eax,al
c000eaaa:	85 c0                	test   eax,eax
c000eaac:	74 26                	je     c000ead4 <KeMailboxGet(Mailbox*, void**)+0x50>
c000eaae:	fa                   	cli    
c000eaaf:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eab4:	83 c0 01             	add    eax,0x1
c000eab7:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000eabc:	e8 2b 69 00 00       	call   c00153ec <schedule()>
c000eac1:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000eac9:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eace:	85 c0                	test   eax,eax
c000ead0:	75 02                	jne    c000ead4 <KeMailboxGet(Mailbox*, void**)+0x50>
c000ead2:	fb                   	sti    
c000ead3:	90                   	nop
c000ead4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ead9:	85 c0                	test   eax,eax
c000eadb:	75 03                	jne    c000eae0 <KeMailboxGet(Mailbox*, void**)+0x5c>
c000eadd:	eb ad                	jmp    c000ea8c <KeMailboxGet(Mailbox*, void**)+0x8>
c000eadf:	90                   	nop
c000eae0:	90                   	nop
c000eae1:	83 c4 1c             	add    esp,0x1c
c000eae4:	c3                   	ret    
c000eae5:	8d 76 00             	lea    esi,[esi+0x0]

c000eae8 <KeMailboxDestroy(Mailbox*)>:
c000eae8:	83 ec 0c             	sub    esp,0xc
c000eaeb:	83 ec 0c             	sub    esp,0xc
c000eaee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eaf2:	e8 e9 fd ff ff       	call   c000e8e0 <free>
c000eaf7:	83 c4 10             	add    esp,0x10
c000eafa:	90                   	nop
c000eafb:	83 c4 0c             	add    esp,0xc
c000eafe:	c3                   	ret    

c000eaff <KeEntryPoint>:
c000eaff:	57                   	push   edi
c000eb00:	bf f9 03 00 00       	mov    edi,0x3f9
c000eb05:	56                   	push   esi
c000eb06:	31 f6                	xor    esi,esi
c000eb08:	53                   	push   ebx
c000eb09:	89 fa                	mov    edx,edi
c000eb0b:	83 ec 2c             	sub    esp,0x2c
c000eb0e:	a1 00 05 00 00       	mov    eax,ds:0x500
c000eb13:	a3 90 bd 02 c0       	mov    ds:0xc002bd90,eax
c000eb18:	89 f0                	mov    eax,esi
c000eb1a:	ee                   	out    dx,al
c000eb1b:	bb fb 03 00 00       	mov    ebx,0x3fb
c000eb20:	b0 80                	mov    al,0x80
c000eb22:	89 da                	mov    edx,ebx
c000eb24:	ee                   	out    dx,al
c000eb25:	b1 03                	mov    cl,0x3
c000eb27:	ba f8 03 00 00       	mov    edx,0x3f8
c000eb2c:	88 c8                	mov    al,cl
c000eb2e:	ee                   	out    dx,al
c000eb2f:	89 f0                	mov    eax,esi
c000eb31:	89 fa                	mov    edx,edi
c000eb33:	ee                   	out    dx,al
c000eb34:	88 c8                	mov    al,cl
c000eb36:	89 da                	mov    edx,ebx
c000eb38:	ee                   	out    dx,al
c000eb39:	b0 c7                	mov    al,0xc7
c000eb3b:	ba fa 03 00 00       	mov    edx,0x3fa
c000eb40:	ee                   	out    dx,al
c000eb41:	b0 0b                	mov    al,0xb
c000eb43:	ba fc 03 00 00       	mov    edx,0x3fc
c000eb48:	ee                   	out    dx,al
c000eb49:	68 13 22 02 c0       	push   0xc0022213
c000eb4e:	e8 fb 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000eb53:	e8 14 da ff ff       	call   c000c56c <KeDisplaySplashScreen()>
c000eb58:	a1 24 05 00 00       	mov    eax,ds:0x524
c000eb5d:	05 ff 0f 00 00       	add    eax,0xfff
c000eb62:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb67:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb6a:	e8 23 04 00 00       	call   c000ef92 <Phys::physicalMemorySetup(unsigned int)>
c000eb6f:	e8 b3 35 00 00       	call   c0012127 <Virt::virtualMemorySetup()>
c000eb74:	e8 3d d9 ff ff       	call   c000c4b6 <KeInitialiseAtexit()>
c000eb79:	c7 04 24 2a 22 02 c0 	mov    DWORD PTR [esp],0xc002222a
c000eb80:	e8 c9 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000eb85:	58                   	pop    eax
c000eb86:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000eb8a:	53                   	push   ebx
c000eb8b:	e8 7e 38 00 00       	call   c001240e <VAS::VAS()>
c000eb90:	c7 04 24 3a 22 02 c0 	mov    DWORD PTR [esp],0xc002223a
c000eb97:	89 1d d0 be 02 c0    	mov    DWORD PTR ds:0xc002bed0,ebx
c000eb9d:	e8 ac 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000eba2:	e8 57 13 01 00       	call   c001fefe <_init>
c000eba7:	c7 04 24 4e 22 02 c0 	mov    DWORD PTR [esp],0xc002224e
c000ebae:	e8 9b 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ebb3:	c7 04 24 6c 01 00 00 	mov    DWORD PTR [esp],0x16c
c000ebba:	e8 11 fd ff ff       	call   c000e8d0 <malloc>
c000ebbf:	89 04 24             	mov    DWORD PTR [esp],eax
c000ebc2:	89 c6                	mov    esi,eax
c000ebc4:	e8 67 ea ff ff       	call   c000d630 <Computer::Computer()>
c000ebc9:	5a                   	pop    edx
c000ebca:	89 35 70 9d 02 c0    	mov    DWORD PTR ds:0xc0029d70,esi
c000ebd0:	59                   	pop    ecx
c000ebd1:	56                   	push   esi
c000ebd2:	68 5d 22 02 c0       	push   0xc002225d
c000ebd7:	e8 72 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ebdc:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000ebe1:	8b 10                	mov    edx,DWORD PTR [eax]
c000ebe3:	53                   	push   ebx
c000ebe4:	6a 00                	push   0x0
c000ebe6:	6a 00                	push   0x0
c000ebe8:	50                   	push   eax
c000ebe9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebec:	83 c4 14             	add    esp,0x14
c000ebef:	53                   	push   ebx
c000ebf0:	e8 cf 38 00 00       	call   c00124c4 <VAS::~VAS()>
c000ebf5:	83 c4 30             	add    esp,0x30
c000ebf8:	5b                   	pop    ebx
c000ebf9:	5e                   	pop    esi
c000ebfa:	5f                   	pop    edi
c000ebfb:	c3                   	ret    

c000ebfc <Mutex::Mutex()>:
c000ebfc:	83 ec 0c             	sub    esp,0xc
c000ebff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec03:	83 ec 08             	sub    esp,0x8
c000ec06:	6a 01                	push   0x1
c000ec08:	50                   	push   eax
c000ec09:	e8 42 0c 00 00       	call   c000f850 <Semaphore::Semaphore(int)>
c000ec0e:	83 c4 10             	add    esp,0x10
c000ec11:	90                   	nop
c000ec12:	83 c4 0c             	add    esp,0xc
c000ec15:	c3                   	ret    

c000ec16 <KePanic(char const*)>:
c000ec16:	c6 05 94 bd 02 c0 01 	mov    BYTE PTR ds:0xc002bd94,0x1
c000ec1d:	e9 d3 96 00 00       	jmp    c00182f5 <HalPanic(char const*)>

c000ec22 <Phys::allocateDMA(unsigned long)>:
c000ec22:	55                   	push   ebp
c000ec23:	31 ed                	xor    ebp,ebp
c000ec25:	57                   	push   edi
c000ec26:	56                   	push   esi
c000ec27:	31 f6                	xor    esi,esi
c000ec29:	53                   	push   ebx
c000ec2a:	31 db                	xor    ebx,ebx
c000ec2c:	83 ec 1c             	sub    esp,0x1c
c000ec2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec33:	05 ff 0f 00 00       	add    eax,0xfff
c000ec38:	c1 e8 0c             	shr    eax,0xc
c000ec3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ec3f:	31 c0                	xor    eax,eax
c000ec41:	eb 1b                	jmp    c000ec5e <Phys::allocateDMA(unsigned long)+0x3c>
c000ec43:	8d 78 01             	lea    edi,[eax+0x1]
c000ec46:	85 c0                	test   eax,eax
c000ec48:	0f 44 eb             	cmove  ebp,ebx
c000ec4b:	0f 44 f3             	cmove  esi,ebx
c000ec4e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000ec52:	74 37                	je     c000ec8b <Phys::allocateDMA(unsigned long)+0x69>
c000ec54:	89 f8                	mov    eax,edi
c000ec56:	83 c3 01             	add    ebx,0x1
c000ec59:	83 fb 0f             	cmp    ebx,0xf
c000ec5c:	7f 13                	jg     c000ec71 <Phys::allocateDMA(unsigned long)+0x4f>
c000ec5e:	80 bb b0 bd 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd4250],0x0
c000ec65:	74 dc                	je     c000ec43 <Phys::allocateDMA(unsigned long)+0x21>
c000ec67:	31 c0                	xor    eax,eax
c000ec69:	83 c3 01             	add    ebx,0x1
c000ec6c:	83 fb 0f             	cmp    ebx,0xf
c000ec6f:	7e ed                	jle    c000ec5e <Phys::allocateDMA(unsigned long)+0x3c>
c000ec71:	83 ec 0c             	sub    esp,0xc
c000ec74:	68 74 22 02 c0       	push   0xc0022274
c000ec79:	e8 98 ff ff ff       	call   c000ec16 <KePanic(char const*)>
c000ec7e:	83 c4 10             	add    esp,0x10
c000ec81:	31 c0                	xor    eax,eax
c000ec83:	83 c4 1c             	add    esp,0x1c
c000ec86:	5b                   	pop    ebx
c000ec87:	5e                   	pop    esi
c000ec88:	5f                   	pop    edi
c000ec89:	5d                   	pop    ebp
c000ec8a:	c3                   	ret    
c000ec8b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ec8f:	89 f2                	mov    edx,esi
c000ec91:	c1 fa 04             	sar    edx,0x4
c000ec94:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ec98:	01 f1                	add    ecx,esi
c000ec9a:	8d 51 0e             	lea    edx,[ecx+0xe]
c000ec9d:	83 e9 01             	sub    ecx,0x1
c000eca0:	0f 48 ca             	cmovs  ecx,edx
c000eca3:	c1 f9 04             	sar    ecx,0x4
c000eca6:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000ecaa:	74 06                	je     c000ecb2 <Phys::allocateDMA(unsigned long)+0x90>
c000ecac:	89 eb                	mov    ebx,ebp
c000ecae:	31 c0                	xor    eax,eax
c000ecb0:	eb b7                	jmp    c000ec69 <Phys::allocateDMA(unsigned long)+0x47>
c000ecb2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ecb6:	85 d2                	test   edx,edx
c000ecb8:	74 17                	je     c000ecd1 <Phys::allocateDMA(unsigned long)+0xaf>
c000ecba:	8d 96 b0 bd 02 c0    	lea    edx,[esi-0x3ffd4250]
c000ecc0:	8d 84 06 b1 bd 02 c0 	lea    eax,[esi+eax*1-0x3ffd424f]
c000ecc7:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000ecca:	83 c2 01             	add    edx,0x1
c000eccd:	39 d0                	cmp    eax,edx
c000eccf:	75 f6                	jne    c000ecc7 <Phys::allocateDMA(unsigned long)+0xa5>
c000ecd1:	8b 15 a8 bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bda8
c000ecd7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecdb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ecdf:	01 c2                	add    edx,eax
c000ece1:	89 15 a8 bd 02 c0    	mov    DWORD PTR ds:0xc002bda8,edx
c000ece7:	85 c9                	test   ecx,ecx
c000ece9:	74 17                	je     c000ed02 <Phys::allocateDMA(unsigned long)+0xe0>
c000eceb:	83 ec 0c             	sub    esp,0xc
c000ecee:	68 74 22 02 c0       	push   0xc0022274
c000ecf3:	e8 1e ff ff ff       	call   c000ec16 <KePanic(char const*)>
c000ecf8:	83 c4 10             	add    esp,0x10
c000ecfb:	89 f8                	mov    eax,edi
c000ecfd:	e9 54 ff ff ff       	jmp    c000ec56 <Phys::allocateDMA(unsigned long)+0x34>
c000ed02:	c1 e6 0c             	shl    esi,0xc
c000ed05:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000ed0b:	e9 73 ff ff ff       	jmp    c000ec83 <Phys::allocateDMA(unsigned long)+0x61>

c000ed10 <Phys::freeDMA(unsigned long, unsigned long)>:
c000ed10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed14:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000ed1a:	a1 a8 bd 02 c0       	mov    eax,ds:0xc002bda8
c000ed1f:	c1 ea 0c             	shr    edx,0xc
c000ed22:	29 d0                	sub    eax,edx
c000ed24:	a3 a8 bd 02 c0       	mov    ds:0xc002bda8,eax
c000ed29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed2d:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000ed32:	c1 e8 0c             	shr    eax,0xc
c000ed35:	85 d2                	test   edx,edx
c000ed37:	74 11                	je     c000ed4a <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000ed39:	05 b0 bd 02 c0       	add    eax,0xc002bdb0
c000ed3e:	01 c2                	add    edx,eax
c000ed40:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000ed43:	83 c0 01             	add    eax,0x1
c000ed46:	39 d0                	cmp    eax,edx
c000ed48:	75 f6                	jne    c000ed40 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000ed4a:	c3                   	ret    

c000ed4b <Phys::setPageState(unsigned long, bool)>:
c000ed4b:	57                   	push   edi
c000ed4c:	56                   	push   esi
c000ed4d:	8b 35 74 43 02 c0    	mov    esi,DWORD PTR ds:0xc0024374
c000ed53:	53                   	push   ebx
c000ed54:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000ed59:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ed5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ed61:	89 ca                	mov    edx,ecx
c000ed63:	83 e1 07             	and    ecx,0x7
c000ed66:	c1 ea 03             	shr    edx,0x3
c000ed69:	0f b6 c0             	movzx  eax,al
c000ed6c:	d3 c3                	rol    ebx,cl
c000ed6e:	01 d6                	add    esi,edx
c000ed70:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000ed73:	d3 e0                	shl    eax,cl
c000ed75:	21 fb                	and    ebx,edi
c000ed77:	88 1e                	mov    BYTE PTR [esi],bl
c000ed79:	8b 1d 74 43 02 c0    	mov    ebx,DWORD PTR ds:0xc0024374
c000ed7f:	01 da                	add    edx,ebx
c000ed81:	8a 0a                	mov    cl,BYTE PTR [edx]
c000ed83:	09 c8                	or     eax,ecx
c000ed85:	88 02                	mov    BYTE PTR [edx],al
c000ed87:	5b                   	pop    ebx
c000ed88:	5e                   	pop    esi
c000ed89:	5f                   	pop    edi
c000ed8a:	c3                   	ret    

c000ed8b <Phys::getPageState(unsigned long)>:
c000ed8b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ed8f:	8b 15 74 43 02 c0    	mov    edx,DWORD PTR ds:0xc0024374
c000ed95:	89 c8                	mov    eax,ecx
c000ed97:	83 e1 07             	and    ecx,0x7
c000ed9a:	c1 e8 03             	shr    eax,0x3
c000ed9d:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000eda1:	d3 f8                	sar    eax,cl
c000eda3:	83 e0 01             	and    eax,0x1
c000eda6:	c3                   	ret    

c000eda7 <Phys::freePage(unsigned long)>:
c000eda7:	53                   	push   ebx
c000eda8:	83 ec 08             	sub    esp,0x8
c000edab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edaf:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000edb5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000edbb:	76 41                	jbe    c000edfe <Phys::freePage(unsigned long)+0x57>
c000edbd:	c1 e8 0c             	shr    eax,0xc
c000edc0:	50                   	push   eax
c000edc1:	89 c3                	mov    ebx,eax
c000edc3:	e8 c3 ff ff ff       	call   c000ed8b <Phys::getPageState(unsigned long)>
c000edc8:	5a                   	pop    edx
c000edc9:	84 c0                	test   al,al
c000edcb:	74 20                	je     c000eded <Phys::freePage(unsigned long)+0x46>
c000edcd:	a1 a8 bd 02 c0       	mov    eax,ds:0xc002bda8
c000edd2:	83 ec 08             	sub    esp,0x8
c000edd5:	6a 00                	push   0x0
c000edd7:	53                   	push   ebx
c000edd8:	83 e8 01             	sub    eax,0x1
c000eddb:	a3 a8 bd 02 c0       	mov    ds:0xc002bda8,eax
c000ede0:	e8 66 ff ff ff       	call   c000ed4b <Phys::setPageState(unsigned long, bool)>
c000ede5:	83 c4 10             	add    esp,0x10
c000ede8:	83 c4 08             	add    esp,0x8
c000edeb:	5b                   	pop    ebx
c000edec:	c3                   	ret    
c000eded:	c7 44 24 10 79 23 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022379
c000edf5:	83 c4 08             	add    esp,0x8
c000edf8:	5b                   	pop    ebx
c000edf9:	e9 18 fe ff ff       	jmp    c000ec16 <KePanic(char const*)>
c000edfe:	68 00 10 00 00       	push   0x1000
c000ee03:	50                   	push   eax
c000ee04:	e8 07 ff ff ff       	call   c000ed10 <Phys::freeDMA(unsigned long, unsigned long)>
c000ee09:	59                   	pop    ecx
c000ee0a:	5b                   	pop    ebx
c000ee0b:	83 c4 08             	add    esp,0x8
c000ee0e:	5b                   	pop    ebx
c000ee0f:	c3                   	ret    

c000ee10 <Phys::allocatePage()>:
c000ee10:	56                   	push   esi
c000ee11:	53                   	push   ebx
c000ee12:	83 ec 14             	sub    esp,0x14
c000ee15:	8b 35 9c bd 02 c0    	mov    esi,DWORD PTR ds:0xc002bd9c
c000ee1b:	89 f3                	mov    ebx,esi
c000ee1d:	eb 0a                	jmp    c000ee29 <Phys::allocatePage()+0x19>
c000ee1f:	89 1d 9c bd 02 c0    	mov    DWORD PTR ds:0xc002bd9c,ebx
c000ee25:	39 de                	cmp    esi,ebx
c000ee27:	74 26                	je     c000ee4f <Phys::allocatePage()+0x3f>
c000ee29:	53                   	push   ebx
c000ee2a:	e8 5c ff ff ff       	call   c000ed8b <Phys::getPageState(unsigned long)>
c000ee2f:	5a                   	pop    edx
c000ee30:	84 c0                	test   al,al
c000ee32:	74 67                	je     c000ee9b <Phys::allocatePage()+0x8b>
c000ee34:	83 c3 01             	add    ebx,0x1
c000ee37:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ee3d:	75 e0                	jne    c000ee1f <Phys::allocatePage()+0xf>
c000ee3f:	c7 05 9c bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd9c,0x0
c000ee49:	31 db                	xor    ebx,ebx
c000ee4b:	39 de                	cmp    esi,ebx
c000ee4d:	75 da                	jne    c000ee29 <Phys::allocatePage()+0x19>
c000ee4f:	a0 c0 bd 02 c0       	mov    al,ds:0xc002bdc0
c000ee54:	83 ec 0c             	sub    esp,0xc
c000ee57:	83 f0 01             	xor    eax,0x1
c000ee5a:	a2 c0 bd 02 c0       	mov    ds:0xc002bdc0,al
c000ee5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee64:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ee67:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000ee6d:	50                   	push   eax
c000ee6e:	e8 1b 40 00 00       	call   c0012e8e <VAS::scanForEviction()>
c000ee73:	83 c4 10             	add    esp,0x10
c000ee76:	85 c0                	test   eax,eax
c000ee78:	75 48                	jne    c000eec2 <Phys::allocatePage()+0xb2>
c000ee7a:	83 ec 0c             	sub    esp,0xc
c000ee7d:	68 9c 22 02 c0       	push   0xc002229c
c000ee82:	e8 8f fd ff ff       	call   c000ec16 <KePanic(char const*)>
c000ee87:	8b 1d 9c bd 02 c0    	mov    ebx,DWORD PTR ds:0xc002bd9c
c000ee8d:	83 c4 10             	add    esp,0x10
c000ee90:	53                   	push   ebx
c000ee91:	e8 f5 fe ff ff       	call   c000ed8b <Phys::getPageState(unsigned long)>
c000ee96:	5a                   	pop    edx
c000ee97:	84 c0                	test   al,al
c000ee99:	75 99                	jne    c000ee34 <Phys::allocatePage()+0x24>
c000ee9b:	6a 01                	push   0x1
c000ee9d:	53                   	push   ebx
c000ee9e:	e8 a8 fe ff ff       	call   c000ed4b <Phys::setPageState(unsigned long, bool)>
c000eea3:	8b 15 a8 bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bda8
c000eea9:	59                   	pop    ecx
c000eeaa:	a1 9c bd 02 c0       	mov    eax,ds:0xc002bd9c
c000eeaf:	5b                   	pop    ebx
c000eeb0:	83 c2 01             	add    edx,0x1
c000eeb3:	89 15 a8 bd 02 c0    	mov    DWORD PTR ds:0xc002bda8,edx
c000eeb9:	c1 e0 0c             	shl    eax,0xc
c000eebc:	83 c4 14             	add    esp,0x14
c000eebf:	5b                   	pop    ebx
c000eec0:	5e                   	pop    esi
c000eec1:	c3                   	ret    
c000eec2:	83 ec 08             	sub    esp,0x8
c000eec5:	89 c2                	mov    edx,eax
c000eec7:	6a 01                	push   0x1
c000eec9:	c1 ea 0c             	shr    edx,0xc
c000eecc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eed0:	52                   	push   edx
c000eed1:	e8 75 fe ff ff       	call   c000ed4b <Phys::setPageState(unsigned long, bool)>
c000eed6:	83 c4 10             	add    esp,0x10
c000eed9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eedd:	eb dd                	jmp    c000eebc <Phys::allocatePage()+0xac>

c000eedf <Phys::allocateContiguousPages(int)>:
c000eedf:	57                   	push   edi
c000eee0:	56                   	push   esi
c000eee1:	53                   	push   ebx
c000eee2:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000eee6:	fa                   	cli    
c000eee7:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c000eeed:	83 ec 0c             	sub    esp,0xc
c000eef0:	31 db                	xor    ebx,ebx
c000eef2:	68 cc 22 02 c0       	push   0xc00222cc
c000eef7:	83 c2 01             	add    edx,0x1
c000eefa:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c000ef00:	e8 49 80 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ef05:	83 c4 10             	add    esp,0x10
c000ef08:	85 db                	test   ebx,ebx
c000ef0a:	75 11                	jne    c000ef1d <Phys::allocateContiguousPages(int)+0x3e>
c000ef0c:	e8 ff fe ff ff       	call   c000ee10 <Phys::allocatePage()>
c000ef11:	83 ff 01             	cmp    edi,0x1
c000ef14:	89 c6                	mov    esi,eax
c000ef16:	74 21                	je     c000ef39 <Phys::allocateContiguousPages(int)+0x5a>
c000ef18:	bb 01 00 00 00       	mov    ebx,0x1
c000ef1d:	e8 ee fe ff ff       	call   c000ee10 <Phys::allocatePage()>
c000ef22:	89 da                	mov    edx,ebx
c000ef24:	c1 e2 0c             	shl    edx,0xc
c000ef27:	01 f2                	add    edx,esi
c000ef29:	39 c2                	cmp    edx,eax
c000ef2b:	74 24                	je     c000ef51 <Phys::allocateContiguousPages(int)+0x72>
c000ef2d:	83 ff 01             	cmp    edi,0x1
c000ef30:	bb 01 00 00 00       	mov    ebx,0x1
c000ef35:	89 c6                	mov    esi,eax
c000ef37:	75 e4                	jne    c000ef1d <Phys::allocateContiguousPages(int)+0x3e>
c000ef39:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000ef41:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ef46:	85 c0                	test   eax,eax
c000ef48:	75 01                	jne    c000ef4b <Phys::allocateContiguousPages(int)+0x6c>
c000ef4a:	fb                   	sti    
c000ef4b:	5b                   	pop    ebx
c000ef4c:	89 f0                	mov    eax,esi
c000ef4e:	5e                   	pop    esi
c000ef4f:	5f                   	pop    edi
c000ef50:	c3                   	ret    
c000ef51:	83 c3 01             	add    ebx,0x1
c000ef54:	39 fb                	cmp    ebx,edi
c000ef56:	75 b0                	jne    c000ef08 <Phys::allocateContiguousPages(int)+0x29>
c000ef58:	eb df                	jmp    c000ef39 <Phys::allocateContiguousPages(int)+0x5a>

c000ef5a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000ef5a:	56                   	push   esi
c000ef5b:	53                   	push   ebx
c000ef5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef60:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c000ef66:	73 06                	jae    c000ef6e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000ef68:	89 1d a0 bd 02 c0    	mov    DWORD PTR ds:0xc002bda0,ebx
c000ef6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef72:	c1 eb 0c             	shr    ebx,0xc
c000ef75:	c1 e8 0c             	shr    eax,0xc
c000ef78:	39 d8                	cmp    eax,ebx
c000ef7a:	73 13                	jae    c000ef8f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000ef7c:	6a 00                	push   0x0
c000ef7e:	50                   	push   eax
c000ef7f:	8d 70 01             	lea    esi,[eax+0x1]
c000ef82:	e8 c4 fd ff ff       	call   c000ed4b <Phys::setPageState(unsigned long, bool)>
c000ef87:	39 f3                	cmp    ebx,esi
c000ef89:	89 f0                	mov    eax,esi
c000ef8b:	5a                   	pop    edx
c000ef8c:	59                   	pop    ecx
c000ef8d:	75 ed                	jne    c000ef7c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000ef8f:	5b                   	pop    ebx
c000ef90:	5e                   	pop    esi
c000ef91:	c3                   	ret    

c000ef92 <Phys::physicalMemorySetup(unsigned int)>:
c000ef92:	55                   	push   ebp
c000ef93:	57                   	push   edi
c000ef94:	56                   	push   esi
c000ef95:	53                   	push   ebx
c000ef96:	31 db                	xor    ebx,ebx
c000ef98:	83 ec 40             	sub    esp,0x40
c000ef9b:	6a 10                	push   0x10
c000ef9d:	6a 00                	push   0x0
c000ef9f:	68 b0 bd 02 c0       	push   0xc002bdb0
c000efa4:	e8 47 15 ff ff       	call   c00004f0 <memset>
c000efa9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000efad:	25 00 f0 ff ff       	and    eax,0xfffff000
c000efb2:	05 00 10 00 00       	add    eax,0x1000
c000efb7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000efbb:	5a                   	pop    edx
c000efbc:	59                   	pop    ecx
c000efbd:	50                   	push   eax
c000efbe:	68 8f 23 02 c0       	push   0xc002238f
c000efc3:	e8 86 7f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000efc8:	83 c4 10             	add    esp,0x10
c000efcb:	83 ec 08             	sub    esp,0x8
c000efce:	6a 01                	push   0x1
c000efd0:	53                   	push   ebx
c000efd1:	83 c3 01             	add    ebx,0x1
c000efd4:	e8 72 fd ff ff       	call   c000ed4b <Phys::setPageState(unsigned long, bool)>
c000efd9:	83 c4 10             	add    esp,0x10
c000efdc:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000efe2:	75 e7                	jne    c000efcb <Phys::physicalMemorySetup(unsigned int)+0x39>
c000efe4:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c000efeb:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c000eff2:	c1 e0 08             	shl    eax,0x8
c000eff5:	09 c2                	or     edx,eax
c000eff7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000effb:	0f 84 43 01 00 00    	je     c000f144 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c000f001:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f009:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000f00e:	e9 82 00 00 00       	jmp    c000f095 <Phys::physicalMemorySetup(unsigned int)+0x103>
c000f013:	ba 00 00 08 00       	mov    edx,0x80000
c000f018:	89 c1                	mov    ecx,eax
c000f01a:	39 f2                	cmp    edx,esi
c000f01c:	19 f9                	sbb    ecx,edi
c000f01e:	0f 82 c0 00 00 00    	jb     c000f0e4 <Phys::physicalMemorySetup(unsigned int)+0x152>
c000f024:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f028:	89 c5                	mov    ebp,eax
c000f02a:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000f02e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f032:	19 cd                	sbb    ebp,ecx
c000f034:	0f 83 af 00 00 00    	jae    c000f0e9 <Phys::physicalMemorySetup(unsigned int)+0x157>
c000f03a:	89 d6                	mov    esi,edx
c000f03c:	ba 00 00 0a 00       	mov    edx,0xa0000
c000f041:	39 f2                	cmp    edx,esi
c000f043:	89 cf                	mov    edi,ecx
c000f045:	19 c8                	sbb    eax,ecx
c000f047:	73 07                	jae    c000f050 <Phys::physicalMemorySetup(unsigned int)+0xbe>
c000f049:	be 00 00 0a 00       	mov    esi,0xa0000
c000f04e:	31 ff                	xor    edi,edi
c000f050:	89 f2                	mov    edx,esi
c000f052:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000f057:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000f05d:	89 f9                	mov    ecx,edi
c000f05f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000f063:	83 d1 ff             	adc    ecx,0xffffffff
c000f066:	39 d0                	cmp    eax,edx
c000f068:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000f06c:	b8 00 00 00 00       	mov    eax,0x0
c000f071:	19 c8                	sbb    eax,ecx
c000f073:	0f 82 9d 01 00 00    	jb     c000f216 <Phys::physicalMemorySetup(unsigned int)+0x284>
c000f079:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f07d:	83 c3 18             	add    ebx,0x18
c000f080:	83 c6 01             	add    esi,0x1
c000f083:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000f087:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f08b:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000f08f:	0f 84 bf 00 00 00    	je     c000f154 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c000f095:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f097:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f09a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000f09d:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000f0a0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000f0a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000f0a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f0ab:	01 f0                	add    eax,esi
c000f0ad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f0b1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f0b5:	55                   	push   ebp
c000f0b6:	11 fa                	adc    edx,edi
c000f0b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f0bc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f0c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0c4:	50                   	push   eax
c000f0c5:	56                   	push   esi
c000f0c6:	68 2c 23 02 c0       	push   0xc002232c
c000f0cb:	e8 7e 7e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f0d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f0d4:	83 c4 10             	add    esp,0x10
c000f0d7:	09 f8                	or     eax,edi
c000f0d9:	75 79                	jne    c000f154 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c000f0db:	83 fd 01             	cmp    ebp,0x1
c000f0de:	0f 84 2f ff ff ff    	je     c000f013 <Phys::physicalMemorySetup(unsigned int)+0x81>
c000f0e4:	83 fd 01             	cmp    ebp,0x1
c000f0e7:	75 90                	jne    c000f079 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f0e9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f0ed:	31 d2                	xor    edx,edx
c000f0ef:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000f0f3:	89 c8                	mov    eax,ecx
c000f0f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f0f9:	19 d1                	sbb    ecx,edx
c000f0fb:	0f 82 78 ff ff ff    	jb     c000f079 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f101:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000f106:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c000f10a:	b9 00 00 00 00       	mov    ecx,0x0
c000f10f:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000f113:	0f 83 60 ff ff ff    	jae    c000f079 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f119:	39 c6                	cmp    esi,eax
c000f11b:	19 d7                	sbb    edi,edx
c000f11d:	0f 83 ff 00 00 00    	jae    c000f222 <Phys::physicalMemorySetup(unsigned int)+0x290>
c000f123:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f127:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f12b:	29 c7                	sub    edi,eax
c000f12d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f131:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000f135:	19 d5                	sbb    ebp,edx
c000f137:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000f13b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f13f:	e9 de 00 00 00       	jmp    c000f222 <Phys::physicalMemorySetup(unsigned int)+0x290>
c000f144:	83 ec 0c             	sub    esp,0xc
c000f147:	68 a7 23 02 c0       	push   0xc00223a7
c000f14c:	e8 c5 fa ff ff       	call   c000ec16 <KePanic(char const*)>
c000f151:	83 c4 10             	add    esp,0x10
c000f154:	83 ec 08             	sub    esp,0x8
c000f157:	bb 60 00 00 00       	mov    ebx,0x60
c000f15c:	6a 00                	push   0x0
c000f15e:	6a 06                	push   0x6
c000f160:	e8 e6 fb ff ff       	call   c000ed4b <Phys::setPageState(unsigned long, bool)>
c000f165:	58                   	pop    eax
c000f166:	5a                   	pop    edx
c000f167:	6a 00                	push   0x0
c000f169:	6a 07                	push   0x7
c000f16b:	e8 db fb ff ff       	call   c000ed4b <Phys::setPageState(unsigned long, bool)>
c000f170:	8b 0d ac bd 02 c0    	mov    ecx,DWORD PTR ds:0xc002bdac
c000f176:	83 c4 10             	add    esp,0x10
c000f179:	83 c1 02             	add    ecx,0x2
c000f17c:	89 0d ac bd 02 c0    	mov    DWORD PTR ds:0xc002bdac,ecx
c000f182:	83 ec 08             	sub    esp,0x8
c000f185:	6a 00                	push   0x0
c000f187:	53                   	push   ebx
c000f188:	83 c3 01             	add    ebx,0x1
c000f18b:	e8 bb fb ff ff       	call   c000ed4b <Phys::setPageState(unsigned long, bool)>
c000f190:	83 c4 10             	add    esp,0x10
c000f193:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000f199:	75 e7                	jne    c000f182 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c000f19b:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c000f1a0:	bb 40 01 00 00       	mov    ebx,0x140
c000f1a5:	83 c0 20             	add    eax,0x20
c000f1a8:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f1ad:	eb 26                	jmp    c000f1d5 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000f1af:	83 ec 08             	sub    esp,0x8
c000f1b2:	6a 00                	push   0x0
c000f1b4:	53                   	push   ebx
c000f1b5:	83 c3 01             	add    ebx,0x1
c000f1b8:	e8 8e fb ff ff       	call   c000ed4b <Phys::setPageState(unsigned long, bool)>
c000f1bd:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c000f1c2:	83 c4 10             	add    esp,0x10
c000f1c5:	83 c0 01             	add    eax,0x1
c000f1c8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000f1ce:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f1d3:	74 07                	je     c000f1dc <Phys::physicalMemorySetup(unsigned int)+0x24a>
c000f1d5:	3d ff 03 00 00       	cmp    eax,0x3ff
c000f1da:	7e d3                	jle    c000f1af <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000f1dc:	bb d0 01 00 00       	mov    ebx,0x1d0
c000f1e1:	3d ff 07 00 00       	cmp    eax,0x7ff
c000f1e6:	7f 26                	jg     c000f20e <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000f1e8:	83 ec 08             	sub    esp,0x8
c000f1eb:	6a 00                	push   0x0
c000f1ed:	53                   	push   ebx
c000f1ee:	83 c3 01             	add    ebx,0x1
c000f1f1:	e8 55 fb ff ff       	call   c000ed4b <Phys::setPageState(unsigned long, bool)>
c000f1f6:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c000f1fb:	83 c4 10             	add    esp,0x10
c000f1fe:	83 c0 01             	add    eax,0x1
c000f201:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000f207:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f20c:	75 d3                	jne    c000f1e1 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000f20e:	83 c4 3c             	add    esp,0x3c
c000f211:	5b                   	pop    ebx
c000f212:	5e                   	pop    esi
c000f213:	5f                   	pop    edi
c000f214:	5d                   	pop    ebp
c000f215:	c3                   	ret    
c000f216:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c000f21a:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c000f222:	83 ec 04             	sub    esp,0x4
c000f225:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000f229:	56                   	push   esi
c000f22a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000f22e:	57                   	push   edi
c000f22f:	68 50 23 02 c0       	push   0xc0022350
c000f234:	e8 15 7d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f239:	5d                   	pop    ebp
c000f23a:	58                   	pop    eax
c000f23b:	56                   	push   esi
c000f23c:	57                   	push   edi
c000f23d:	e8 18 fd ff ff       	call   c000ef5a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000f242:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f246:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f24a:	83 c4 0c             	add    esp,0xc
c000f24d:	8b 35 ac bd 02 c0    	mov    esi,DWORD PTR ds:0xc002bdac
c000f253:	0f ac d0 0c          	shrd   eax,edx,0xc
c000f257:	01 f0                	add    eax,esi
c000f259:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f25e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f265:	52                   	push   edx
c000f266:	50                   	push   eax
c000f267:	68 b5 23 02 c0       	push   0xc00223b5
c000f26c:	e8 dd 7c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f271:	83 c4 10             	add    esp,0x10
c000f274:	e9 00 fe ff ff       	jmp    c000f079 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f279:	90                   	nop

c000f27a <Pipe::isAtty()>:
c000f27a:	31 c0                	xor    eax,eax
c000f27c:	c3                   	ret    
c000f27d:	90                   	nop

c000f27e <Pipe::~Pipe()>:
c000f27e:	83 ec 0c             	sub    esp,0xc
c000f281:	ba 14 24 02 c0       	mov    edx,0xc0022414
c000f286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f28a:	89 10                	mov    DWORD PTR [eax],edx
c000f28c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f290:	83 ec 0c             	sub    esp,0xc
c000f293:	50                   	push   eax
c000f294:	e8 51 2a 00 00       	call   c0011cea <UnixFile::~UnixFile()>
c000f299:	83 c4 10             	add    esp,0x10
c000f29c:	90                   	nop
c000f29d:	83 c4 0c             	add    esp,0xc
c000f2a0:	c3                   	ret    
c000f2a1:	90                   	nop

c000f2a2 <Pipe::~Pipe()>:
c000f2a2:	83 ec 0c             	sub    esp,0xc
c000f2a5:	83 ec 0c             	sub    esp,0xc
c000f2a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2ac:	e8 cd ff ff ff       	call   c000f27e <Pipe::~Pipe()>
c000f2b1:	83 c4 10             	add    esp,0x10
c000f2b4:	83 ec 08             	sub    esp,0x8
c000f2b7:	6a 20                	push   0x20
c000f2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2bd:	e8 99 d3 ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c000f2c2:	83 c4 10             	add    esp,0x10
c000f2c5:	83 c4 0c             	add    esp,0xc
c000f2c8:	c3                   	ret    
c000f2c9:	90                   	nop

c000f2ca <Pipe::write(unsigned long long, void*, int*)>:
c000f2ca:	55                   	push   ebp
c000f2cb:	57                   	push   edi
c000f2cc:	56                   	push   esi
c000f2cd:	53                   	push   ebx
c000f2ce:	83 ec 1c             	sub    esp,0x1c
c000f2d1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000f2d5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f2d9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f2dd:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000f2e0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f2e4:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000f2e7:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2ea:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f2ee:	89 d8                	mov    eax,ebx
c000f2f0:	89 d6                	mov    esi,edx
c000f2f2:	89 d7                	mov    edi,edx
c000f2f4:	c1 ff 1f             	sar    edi,0x1f
c000f2f7:	03 34 24             	add    esi,DWORD PTR [esp]
c000f2fa:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000f2fe:	c1 f8 1f             	sar    eax,0x1f
c000f301:	39 f3                	cmp    ebx,esi
c000f303:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f307:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f30b:	19 f8                	sbb    eax,edi
c000f30d:	b8 01 00 00 00       	mov    eax,0x1
c000f312:	72 72                	jb     c000f386 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c000f314:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000f317:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000f31b:	01 d0                	add    eax,edx
c000f31d:	99                   	cdq    
c000f31e:	f7 fb                	idiv   ebx
c000f320:	89 d8                	mov    eax,ebx
c000f322:	29 d0                	sub    eax,edx
c000f324:	89 d6                	mov    esi,edx
c000f326:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000f329:	89 c3                	mov    ebx,eax
c000f32b:	c1 fb 1f             	sar    ebx,0x1f
c000f32e:	39 c2                	cmp    edx,eax
c000f330:	19 df                	sbb    edi,ebx
c000f332:	bb 00 00 00 00       	mov    ebx,0x0
c000f337:	72 04                	jb     c000f33d <Pipe::write(unsigned long long, void*, int*)+0x73>
c000f339:	89 d3                	mov    ebx,edx
c000f33b:	29 c3                	sub    ebx,eax
c000f33d:	89 d0                	mov    eax,edx
c000f33f:	29 d8                	sub    eax,ebx
c000f341:	74 0d                	je     c000f350 <Pipe::write(unsigned long long, void*, int*)+0x86>
c000f343:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000f346:	89 c1                	mov    ecx,eax
c000f348:	01 f7                	add    edi,esi
c000f34a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000f34e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f350:	85 db                	test   ebx,ebx
c000f352:	74 0d                	je     c000f361 <Pipe::write(unsigned long long, void*, int*)+0x97>
c000f354:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000f358:	89 d9                	mov    ecx,ebx
c000f35a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000f35d:	89 c6                	mov    esi,eax
c000f35f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f361:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000f364:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f369:	75 10                	jne    c000f37b <Pipe::write(unsigned long long, void*, int*)+0xb1>
c000f36b:	83 ec 0c             	sub    esp,0xc
c000f36e:	68 d1 23 02 c0       	push   0xc00223d1
c000f373:	e8 9e f8 ff ff       	call   c000ec16 <KePanic(char const*)>
c000f378:	83 c4 10             	add    esp,0x10
c000f37b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f37f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000f382:	89 08                	mov    DWORD PTR [eax],ecx
c000f384:	31 c0                	xor    eax,eax
c000f386:	83 c4 1c             	add    esp,0x1c
c000f389:	5b                   	pop    ebx
c000f38a:	5e                   	pop    esi
c000f38b:	5f                   	pop    edi
c000f38c:	5d                   	pop    ebp
c000f38d:	c3                   	ret    

c000f38e <Pipe::read(unsigned long long, void*, int*)>:
c000f38e:	55                   	push   ebp
c000f38f:	57                   	push   edi
c000f390:	56                   	push   esi
c000f391:	53                   	push   ebx
c000f392:	83 ec 1c             	sub    esp,0x1c
c000f395:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000f399:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000f39d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f3a1:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000f3a4:	89 c8                	mov    eax,ecx
c000f3a6:	99                   	cdq    
c000f3a7:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000f3ab:	74 27                	je     c000f3d4 <Pipe::read(unsigned long long, void*, int*)+0x46>
c000f3ad:	39 f9                	cmp    ecx,edi
c000f3af:	89 d1                	mov    ecx,edx
c000f3b1:	19 f1                	sbb    ecx,esi
c000f3b3:	73 1f                	jae    c000f3d4 <Pipe::read(unsigned long long, void*, int*)+0x46>
c000f3b5:	fa                   	cli    
c000f3b6:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000f3bc:	e8 2b 60 00 00       	call   c00153ec <schedule()>
c000f3c1:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000f3c8:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000f3cf:	75 d0                	jne    c000f3a1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000f3d1:	fb                   	sti    
c000f3d2:	eb cd                	jmp    c000f3a1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000f3d4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000f3d8:	39 f8                	cmp    eax,edi
c000f3da:	89 d1                	mov    ecx,edx
c000f3dc:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000f3e0:	19 f1                	sbb    ecx,esi
c000f3e2:	73 08                	jae    c000f3ec <Pipe::read(unsigned long long, void*, int*)+0x5e>
c000f3e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f3e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f3ec:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000f3ef:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000f3f2:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c000f3f6:	29 f7                	sub    edi,esi
c000f3f8:	89 f8                	mov    eax,edi
c000f3fa:	99                   	cdq    
c000f3fb:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000f3ff:	89 d0                	mov    eax,edx
c000f401:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f405:	19 c2                	sbb    edx,eax
c000f407:	89 f8                	mov    eax,edi
c000f409:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c000f40e:	89 ea                	mov    edx,ebp
c000f410:	29 c2                	sub    edx,eax
c000f412:	85 c0                	test   eax,eax
c000f414:	74 0b                	je     c000f421 <Pipe::read(unsigned long long, void*, int*)+0x93>
c000f416:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000f419:	89 c1                	mov    ecx,eax
c000f41b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f41f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f421:	85 d2                	test   edx,edx
c000f423:	74 0d                	je     c000f432 <Pipe::read(unsigned long long, void*, int*)+0xa4>
c000f425:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000f429:	89 d1                	mov    ecx,edx
c000f42b:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000f42e:	89 c7                	mov    edi,eax
c000f430:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f432:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000f435:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000f438:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000f43b:	99                   	cdq    
c000f43c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000f440:	89 f7                	mov    edi,esi
c000f442:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000f446:	c1 ff 1f             	sar    edi,0x1f
c000f449:	57                   	push   edi
c000f44a:	56                   	push   esi
c000f44b:	52                   	push   edx
c000f44c:	50                   	push   eax
c000f44d:	e8 92 09 01 00       	call   c001fde4 <__umoddi3>
c000f452:	83 c4 10             	add    esp,0x10
c000f455:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f45a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000f45d:	75 10                	jne    c000f46f <Pipe::read(unsigned long long, void*, int*)+0xe1>
c000f45f:	83 ec 0c             	sub    esp,0xc
c000f462:	68 ee 23 02 c0       	push   0xc00223ee
c000f467:	e8 aa f7 ff ff       	call   c000ec16 <KePanic(char const*)>
c000f46c:	83 c4 10             	add    esp,0x10
c000f46f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f473:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f477:	89 10                	mov    DWORD PTR [eax],edx
c000f479:	83 c4 1c             	add    esp,0x1c
c000f47c:	31 c0                	xor    eax,eax
c000f47e:	5b                   	pop    ebx
c000f47f:	5e                   	pop    esi
c000f480:	5f                   	pop    edi
c000f481:	5d                   	pop    ebp
c000f482:	c3                   	ret    
c000f483:	90                   	nop

c000f484 <Pipe::Pipe(int)>:
c000f484:	83 ec 0c             	sub    esp,0xc
c000f487:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f48b:	83 ec 08             	sub    esp,0x8
c000f48e:	6a 00                	push   0x0
c000f490:	50                   	push   eax
c000f491:	e8 6e 26 00 00       	call   c0011b04 <UnixFile::UnixFile(int)>
c000f496:	83 c4 10             	add    esp,0x10
c000f499:	ba 14 24 02 c0       	mov    edx,0xc0022414
c000f49e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4a2:	89 10                	mov    DWORD PTR [eax],edx
c000f4a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f4ac:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000f4af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4b3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000f4ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4be:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000f4c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f4c9:	83 ec 0c             	sub    esp,0xc
c000f4cc:	50                   	push   eax
c000f4cd:	e8 fe f3 ff ff       	call   c000e8d0 <malloc>
c000f4d2:	83 c4 10             	add    esp,0x10
c000f4d5:	89 c2                	mov    edx,eax
c000f4d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4db:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f4de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4e2:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000f4e6:	90                   	nop
c000f4e7:	83 c4 0c             	add    esp,0xc
c000f4ea:	c3                   	ret    

c000f4eb <KePowerThread(void*)>:
c000f4eb:	83 ec 0c             	sub    esp,0xc
c000f4ee:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000f4f5:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000f4fc:	75 01                	jne    c000f4ff <KePowerThread(void*)+0x14>
c000f4fe:	fb                   	sti    
c000f4ff:	c6 05 e0 bd 02 c0 00 	mov    BYTE PTR ds:0xc002bde0,0x0
c000f506:	83 ec 0c             	sub    esp,0xc
c000f509:	6a 0a                	push   0xa
c000f50b:	e8 d8 60 00 00       	call   c00155e8 <sleep(unsigned int)>
c000f510:	83 c4 10             	add    esp,0x10
c000f513:	83 05 24 be 02 c0 0a 	add    DWORD PTR ds:0xc002be24,0xa
c000f51a:	eb e3                	jmp    c000f4ff <KePowerThread(void*)+0x14>

c000f51c <KeChangePowerSettings(PowerSettings)>:
c000f51c:	57                   	push   edi
c000f51d:	b9 09 00 00 00       	mov    ecx,0x9
c000f522:	56                   	push   esi
c000f523:	bf 00 be 02 c0       	mov    edi,0xc002be00
c000f528:	fc                   	cld    
c000f529:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f52d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f52f:	5e                   	pop    esi
c000f530:	5f                   	pop    edi
c000f531:	c3                   	ret    

c000f532 <KeUserIOReceived()>:
c000f532:	c7 05 24 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be24,0x0
c000f53c:	c3                   	ret    

c000f53d <KeHandlePowerButton()>:
c000f53d:	a1 00 be 02 c0       	mov    eax,ds:0xc002be00
c000f542:	83 f8 02             	cmp    eax,0x2
c000f545:	75 05                	jne    c000f54c <KeHandlePowerButton()+0xf>
c000f547:	e9 48 e1 ff ff       	jmp    c000d694 <KeShutdown()>
c000f54c:	48                   	dec    eax
c000f54d:	75 05                	jne    c000f554 <KeHandlePowerButton()+0x17>
c000f54f:	e9 64 e1 ff ff       	jmp    c000d6b8 <KeSleep()>
c000f554:	c3                   	ret    

c000f555 <KeHandleSleepButton()>:
c000f555:	a1 04 be 02 c0       	mov    eax,ds:0xc002be04
c000f55a:	83 f8 02             	cmp    eax,0x2
c000f55d:	75 05                	jne    c000f564 <KeHandleSleepButton()+0xf>
c000f55f:	e9 30 e1 ff ff       	jmp    c000d694 <KeShutdown()>
c000f564:	48                   	dec    eax
c000f565:	75 05                	jne    c000f56c <KeHandleSleepButton()+0x17>
c000f567:	e9 4c e1 ff ff       	jmp    c000d6b8 <KeSleep()>
c000f56c:	c3                   	ret    

c000f56d <KeSetupPowerManager()>:
c000f56d:	83 ec 0c             	sub    esp,0xc
c000f570:	68 f0 00 00 00       	push   0xf0
c000f575:	6a 00                	push   0x0
c000f577:	68 eb f4 00 c0       	push   0xc000f4eb
c000f57c:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000f582:	c7 05 24 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be24,0x0
c000f58c:	c6 05 e0 bd 02 c0 00 	mov    BYTE PTR ds:0xc002bde0,0x0
c000f593:	e8 08 5c 00 00       	call   c00151a0 <Process::createThread(void (*)(void*), void*, int)>
c000f598:	c7 05 00 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002be00,0x2
c000f5a2:	c7 05 04 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002be04,0x1
c000f5ac:	c7 05 08 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002be08,0x3
c000f5b6:	c7 05 0c be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be0c,0x0
c000f5c0:	c7 05 18 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be18,0x0
c000f5ca:	c7 05 10 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be10,0x0
c000f5d4:	c7 05 1c be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be1c,0x0
c000f5de:	c7 05 14 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002be14,0x3c
c000f5e8:	c7 05 20 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002be20,0x3c
c000f5f2:	83 c4 1c             	add    esp,0x1c
c000f5f5:	c3                   	ret    

c000f5f6 <KeRand()>:
c000f5f6:	69 05 28 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002be28,0x2875
c000f600:	69 0d 2c be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002be2c,0xa2e7b175
c000f60a:	53                   	push   ebx
c000f60b:	01 c1                	add    ecx,eax
c000f60d:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c000f612:	f7 25 28 be 02 c0    	mul    DWORD PTR ds:0xc002be28
c000f618:	01 ca                	add    edx,ecx
c000f61a:	05 ef 04 b5 00       	add    eax,0xb504ef
c000f61f:	a3 28 be 02 c0       	mov    ds:0xc002be28,eax
c000f624:	83 d2 00             	adc    edx,0x0
c000f627:	0f b7 da             	movzx  ebx,dx
c000f62a:	89 1d 2c be 02 c0    	mov    DWORD PTR ds:0xc002be2c,ebx
c000f630:	0f ac d8 0e          	shrd   eax,ebx,0xe
c000f634:	5b                   	pop    ebx
c000f635:	c3                   	ret    

c000f636 <KeSeedRand(unsigned int)>:
c000f636:	53                   	push   ebx
c000f637:	83 ec 08             	sub    esp,0x8
c000f63a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f63e:	e8 a2 8f 00 00       	call   c00185e5 <HalGetRand()>
c000f643:	c7 05 2c be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be2c,0x0
c000f64d:	31 d8                	xor    eax,ebx
c000f64f:	a3 28 be 02 c0       	mov    ds:0xc002be28,eax
c000f654:	e8 9d ff ff ff       	call   c000f5f6 <KeRand()>
c000f659:	83 c4 08             	add    esp,0x8
c000f65c:	5b                   	pop    ebx
c000f65d:	eb 97                	jmp    c000f5f6 <KeRand()>

c000f65f <KeInitRand()>:
c000f65f:	83 ec 0c             	sub    esp,0xc
c000f662:	e8 a2 8d 00 00       	call   c0018409 <HalQueryPerformanceCounter()>
c000f667:	0f 20 da             	mov    edx,cr3
c000f66a:	0f 22 da             	mov    cr3,edx
c000f66d:	0f 20 da             	mov    edx,cr3
c000f670:	0f 22 da             	mov    cr3,edx
c000f673:	0f 20 da             	mov    edx,cr3
c000f676:	0f 22 da             	mov    cr3,edx
c000f679:	0f 20 da             	mov    edx,cr3
c000f67c:	0f 22 da             	mov    cr3,edx
c000f67f:	83 ec 0c             	sub    esp,0xc
c000f682:	35 03 8a 95 38       	xor    eax,0x38958a03
c000f687:	50                   	push   eax
c000f688:	e8 a9 ff ff ff       	call   c000f636 <KeSeedRand(unsigned int)>
c000f68d:	83 c4 1c             	add    esp,0x1c
c000f690:	c3                   	ret    
c000f691:	66 90                	xchg   ax,ax
c000f693:	90                   	nop

c000f694 <KeResolveCompatibilitySymbol(char*)>:
c000f694:	83 ec 0c             	sub    esp,0xc
c000f697:	83 ec 08             	sub    esp,0x8
c000f69a:	68 28 24 02 c0       	push   0xc0022428
c000f69f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6a3:	e8 d8 10 ff ff       	call   c0000780 <strcmp>
c000f6a8:	83 c4 10             	add    esp,0x10
c000f6ab:	85 c0                	test   eax,eax
c000f6ad:	0f 94 c0             	sete   al
c000f6b0:	0f b6 c0             	movzx  eax,al
c000f6b3:	85 c0                	test   eax,eax
c000f6b5:	74 0d                	je     c000f6c4 <KeResolveCompatibilitySymbol(char*)+0x30>
c000f6b7:	b8 70 9d 02 c0       	mov    eax,0xc0029d70
c000f6bc:	e9 8b 01 00 00       	jmp    c000f84c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f6c1:	8d 76 00             	lea    esi,[esi+0x0]
c000f6c4:	83 ec 08             	sub    esp,0x8
c000f6c7:	68 31 24 02 c0       	push   0xc0022431
c000f6cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6d0:	e8 ab 10 ff ff       	call   c0000780 <strcmp>
c000f6d5:	83 c4 10             	add    esp,0x10
c000f6d8:	85 c0                	test   eax,eax
c000f6da:	0f 94 c0             	sete   al
c000f6dd:	0f b6 c0             	movzx  eax,al
c000f6e0:	85 c0                	test   eax,eax
c000f6e2:	74 0c                	je     c000f6f0 <KeResolveCompatibilitySymbol(char*)+0x5c>
c000f6e4:	b8 e4 fc 01 c0       	mov    eax,0xc001fce4
c000f6e9:	e9 5e 01 00 00       	jmp    c000f84c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f6ee:	66 90                	xchg   ax,ax
c000f6f0:	83 ec 08             	sub    esp,0x8
c000f6f3:	68 3b 24 02 c0       	push   0xc002243b
c000f6f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6fc:	e8 7f 10 ff ff       	call   c0000780 <strcmp>
c000f701:	83 c4 10             	add    esp,0x10
c000f704:	85 c0                	test   eax,eax
c000f706:	0f 94 c0             	sete   al
c000f709:	0f b6 c0             	movzx  eax,al
c000f70c:	85 c0                	test   eax,eax
c000f70e:	74 0c                	je     c000f71c <KeResolveCompatibilitySymbol(char*)+0x88>
c000f710:	b8 18 fa 01 c0       	mov    eax,0xc001fa18
c000f715:	e9 32 01 00 00       	jmp    c000f84c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f71a:	66 90                	xchg   ax,ax
c000f71c:	83 ec 08             	sub    esp,0x8
c000f71f:	68 44 24 02 c0       	push   0xc0022444
c000f724:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f728:	e8 53 10 ff ff       	call   c0000780 <strcmp>
c000f72d:	83 c4 10             	add    esp,0x10
c000f730:	85 c0                	test   eax,eax
c000f732:	0f 94 c0             	sete   al
c000f735:	0f b6 c0             	movzx  eax,al
c000f738:	85 c0                	test   eax,eax
c000f73a:	74 0c                	je     c000f748 <KeResolveCompatibilitySymbol(char*)+0xb4>
c000f73c:	b8 16 ec 00 c0       	mov    eax,0xc000ec16
c000f741:	e9 06 01 00 00       	jmp    c000f84c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f746:	66 90                	xchg   ax,ax
c000f748:	83 ec 08             	sub    esp,0x8
c000f74b:	68 57 24 02 c0       	push   0xc0022457
c000f750:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f754:	e8 27 10 ff ff       	call   c0000780 <strcmp>
c000f759:	83 c4 10             	add    esp,0x10
c000f75c:	85 c0                	test   eax,eax
c000f75e:	0f 94 c0             	sete   al
c000f761:	0f b6 c0             	movzx  eax,al
c000f764:	85 c0                	test   eax,eax
c000f766:	74 0c                	je     c000f774 <KeResolveCompatibilitySymbol(char*)+0xe0>
c000f768:	b8 9b c5 00 c0       	mov    eax,0xc000c59b
c000f76d:	e9 da 00 00 00       	jmp    c000f84c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f772:	66 90                	xchg   ax,ax
c000f774:	83 ec 08             	sub    esp,0x8
c000f777:	68 74 24 02 c0       	push   0xc0022474
c000f77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f780:	e8 fb 0f ff ff       	call   c0000780 <strcmp>
c000f785:	83 c4 10             	add    esp,0x10
c000f788:	85 c0                	test   eax,eax
c000f78a:	0f 94 c0             	sete   al
c000f78d:	0f b6 c0             	movzx  eax,al
c000f790:	85 c0                	test   eax,eax
c000f792:	74 0c                	je     c000f7a0 <KeResolveCompatibilitySymbol(char*)+0x10c>
c000f794:	b8 e4 fd 01 c0       	mov    eax,0xc001fde4
c000f799:	e9 ae 00 00 00       	jmp    c000f84c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f79e:	66 90                	xchg   ax,ax
c000f7a0:	83 ec 08             	sub    esp,0x8
c000f7a3:	68 7e 24 02 c0       	push   0xc002247e
c000f7a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7ac:	e8 cf 0f ff ff       	call   c0000780 <strcmp>
c000f7b1:	83 c4 10             	add    esp,0x10
c000f7b4:	85 c0                	test   eax,eax
c000f7b6:	0f 94 c0             	sete   al
c000f7b9:	0f b6 c0             	movzx  eax,al
c000f7bc:	85 c0                	test   eax,eax
c000f7be:	74 0c                	je     c000f7cc <KeResolveCompatibilitySymbol(char*)+0x138>
c000f7c0:	b8 64 fb 01 c0       	mov    eax,0xc001fb64
c000f7c5:	e9 82 00 00 00       	jmp    c000f84c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f7ca:	66 90                	xchg   ax,ax
c000f7cc:	83 ec 08             	sub    esp,0x8
c000f7cf:	68 87 24 02 c0       	push   0xc0022487
c000f7d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7d8:	e8 a3 0f ff ff       	call   c0000780 <strcmp>
c000f7dd:	83 c4 10             	add    esp,0x10
c000f7e0:	85 c0                	test   eax,eax
c000f7e2:	0f 94 c0             	sete   al
c000f7e5:	0f b6 c0             	movzx  eax,al
c000f7e8:	85 c0                	test   eax,eax
c000f7ea:	74 08                	je     c000f7f4 <KeResolveCompatibilitySymbol(char*)+0x160>
c000f7ec:	b8 74 9d 02 c0       	mov    eax,0xc0029d74
c000f7f1:	eb 59                	jmp    c000f84c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f7f3:	90                   	nop
c000f7f4:	83 ec 08             	sub    esp,0x8
c000f7f7:	68 9f 24 02 c0       	push   0xc002249f
c000f7fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f800:	e8 7b 0f ff ff       	call   c0000780 <strcmp>
c000f805:	83 c4 10             	add    esp,0x10
c000f808:	85 c0                	test   eax,eax
c000f80a:	0f 94 c0             	sete   al
c000f80d:	0f b6 c0             	movzx  eax,al
c000f810:	85 c0                	test   eax,eax
c000f812:	74 08                	je     c000f81c <KeResolveCompatibilitySymbol(char*)+0x188>
c000f814:	b8 74 9d 02 c0       	mov    eax,0xc0029d74
c000f819:	eb 31                	jmp    c000f84c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f81b:	90                   	nop
c000f81c:	83 ec 08             	sub    esp,0x8
c000f81f:	68 ac 24 02 c0       	push   0xc00224ac
c000f824:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f828:	e8 53 0f ff ff       	call   c0000780 <strcmp>
c000f82d:	83 c4 10             	add    esp,0x10
c000f830:	85 c0                	test   eax,eax
c000f832:	0f 94 c0             	sete   al
c000f835:	0f b6 c0             	movzx  eax,al
c000f838:	85 c0                	test   eax,eax
c000f83a:	74 08                	je     c000f844 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c000f83c:	b8 75 9d 02 c0       	mov    eax,0xc0029d75
c000f841:	eb 09                	jmp    c000f84c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f843:	90                   	nop
c000f844:	b8 00 00 00 00       	mov    eax,0x0
c000f849:	8d 76 00             	lea    esi,[esi+0x0]
c000f84c:	83 c4 0c             	add    esp,0xc
c000f84f:	c3                   	ret    

c000f850 <Semaphore::Semaphore(int)>:
c000f850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f854:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f858:	89 10                	mov    DWORD PTR [eax],edx
c000f85a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f85e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000f865:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f869:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f870:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f874:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000f87b:	90                   	nop
c000f87c:	c3                   	ret    
c000f87d:	90                   	nop
c000f87e:	66 90                	xchg   ax,ax

c000f880 <Semaphore::tryAcquire()>:
c000f880:	83 ec 0c             	sub    esp,0xc
c000f883:	fa                   	cli    
c000f884:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f889:	83 c0 01             	add    eax,0x1
c000f88c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f891:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f896:	83 c0 01             	add    eax,0x1
c000f899:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f89e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8a2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000f8a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8a9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8ab:	39 c2                	cmp    edx,eax
c000f8ad:	7d 59                	jge    c000f908 <Semaphore::tryAcquire()+0x88>
c000f8af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8b3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f8b6:	8d 50 01             	lea    edx,[eax+0x1]
c000f8b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8bd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f8c0:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f8c5:	83 e8 01             	sub    eax,0x1
c000f8c8:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f8cd:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f8d2:	85 c0                	test   eax,eax
c000f8d4:	75 1a                	jne    c000f8f0 <Semaphore::tryAcquire()+0x70>
c000f8d6:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000f8db:	85 c0                	test   eax,eax
c000f8dd:	74 11                	je     c000f8f0 <Semaphore::tryAcquire()+0x70>
c000f8df:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000f8e9:	e8 fe 5a 00 00       	call   c00153ec <schedule()>
c000f8ee:	66 90                	xchg   ax,ax
c000f8f0:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000f8f8:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f8fd:	85 c0                	test   eax,eax
c000f8ff:	75 03                	jne    c000f904 <Semaphore::tryAcquire()+0x84>
c000f901:	fb                   	sti    
c000f902:	66 90                	xchg   ax,ax
c000f904:	b0 01                	mov    al,0x1
c000f906:	eb 48                	jmp    c000f950 <Semaphore::tryAcquire()+0xd0>
c000f908:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f90d:	83 e8 01             	sub    eax,0x1
c000f910:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f915:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f91a:	85 c0                	test   eax,eax
c000f91c:	75 1a                	jne    c000f938 <Semaphore::tryAcquire()+0xb8>
c000f91e:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000f923:	85 c0                	test   eax,eax
c000f925:	74 11                	je     c000f938 <Semaphore::tryAcquire()+0xb8>
c000f927:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000f931:	e8 b6 5a 00 00       	call   c00153ec <schedule()>
c000f936:	66 90                	xchg   ax,ax
c000f938:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000f940:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f945:	85 c0                	test   eax,eax
c000f947:	75 03                	jne    c000f94c <Semaphore::tryAcquire()+0xcc>
c000f949:	fb                   	sti    
c000f94a:	66 90                	xchg   ax,ax
c000f94c:	b0 00                	mov    al,0x0
c000f94e:	66 90                	xchg   ax,ax
c000f950:	83 c4 0c             	add    esp,0xc
c000f953:	c3                   	ret    

c000f954 <Semaphore::assertLocked(char const*)>:
c000f954:	83 ec 0c             	sub    esp,0xc
c000f957:	fa                   	cli    
c000f958:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f95d:	83 c0 01             	add    eax,0x1
c000f960:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f965:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f96a:	83 c0 01             	add    eax,0x1
c000f96d:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f976:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000f979:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f97d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f97f:	39 c2                	cmp    edx,eax
c000f981:	7d 11                	jge    c000f994 <Semaphore::assertLocked(char const*)+0x40>
c000f983:	83 ec 0c             	sub    esp,0xc
c000f986:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f98a:	e8 87 f2 ff ff       	call   c000ec16 <KePanic(char const*)>
c000f98f:	83 c4 10             	add    esp,0x10
c000f992:	66 90                	xchg   ax,ax
c000f994:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f999:	83 e8 01             	sub    eax,0x1
c000f99c:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f9a1:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f9a6:	85 c0                	test   eax,eax
c000f9a8:	75 1a                	jne    c000f9c4 <Semaphore::assertLocked(char const*)+0x70>
c000f9aa:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000f9af:	85 c0                	test   eax,eax
c000f9b1:	74 11                	je     c000f9c4 <Semaphore::assertLocked(char const*)+0x70>
c000f9b3:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000f9bd:	e8 2a 5a 00 00       	call   c00153ec <schedule()>
c000f9c2:	66 90                	xchg   ax,ax
c000f9c4:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000f9cc:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f9d1:	85 c0                	test   eax,eax
c000f9d3:	75 03                	jne    c000f9d8 <Semaphore::assertLocked(char const*)+0x84>
c000f9d5:	fb                   	sti    
c000f9d6:	66 90                	xchg   ax,ax
c000f9d8:	90                   	nop
c000f9d9:	83 c4 0c             	add    esp,0xc
c000f9dc:	c3                   	ret    
c000f9dd:	90                   	nop
c000f9de:	66 90                	xchg   ax,ax

c000f9e0 <Semaphore::acquire(int)>:
c000f9e0:	83 ec 1c             	sub    esp,0x1c
c000f9e3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000f9e8:	0f 84 9a 00 00 00    	je     c000fa88 <Semaphore::acquire(int)+0xa8>
c000f9ee:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f9f6:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000f9fb:	90                   	nop
c000f9fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000fa01:	85 c0                	test   eax,eax
c000fa03:	74 77                	je     c000fa7c <Semaphore::acquire(int)+0x9c>
c000fa05:	83 ec 0c             	sub    esp,0xc
c000fa08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fa0c:	e8 6f fe ff ff       	call   c000f880 <Semaphore::tryAcquire()>
c000fa11:	83 c4 10             	add    esp,0x10
c000fa14:	83 f0 01             	xor    eax,0x1
c000fa17:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000fa1b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000fa1f:	83 f0 01             	xor    eax,0x1
c000fa22:	0f b6 c0             	movzx  eax,al
c000fa25:	85 c0                	test   eax,eax
c000fa27:	75 4f                	jne    c000fa78 <Semaphore::acquire(int)+0x98>
c000fa29:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c000fa2e:	7f 2c                	jg     c000fa5c <Semaphore::acquire(int)+0x7c>
c000fa30:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fa34:	89 d0                	mov    eax,edx
c000fa36:	c1 e0 02             	shl    eax,0x2
c000fa39:	01 d0                	add    eax,edx
c000fa3b:	d1 e0                	shl    eax,1
c000fa3d:	83 ec 0c             	sub    esp,0xc
c000fa40:	50                   	push   eax
c000fa41:	e8 8e 5b 00 00       	call   c00155d4 <milliTenthSleep(unsigned int)>
c000fa46:	83 c4 10             	add    esp,0x10
c000fa49:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fa4d:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000fa51:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000fa59:	eb a1                	jmp    c000f9fc <Semaphore::acquire(int)+0x1c>
c000fa5b:	90                   	nop
c000fa5c:	83 ec 0c             	sub    esp,0xc
c000fa5f:	68 90 01 00 00       	push   0x190
c000fa64:	e8 6b 5b 00 00       	call   c00155d4 <milliTenthSleep(unsigned int)>
c000fa69:	83 c4 10             	add    esp,0x10
c000fa6c:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c000fa71:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c000fa76:	eb 84                	jmp    c000f9fc <Semaphore::acquire(int)+0x1c>
c000fa78:	90                   	nop
c000fa79:	8d 76 00             	lea    esi,[esi+0x0]
c000fa7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa80:	e9 fb 00 00 00       	jmp    c000fb80 <Semaphore::acquire(int)+0x1a0>
c000fa85:	8d 76 00             	lea    esi,[esi+0x0]
c000fa88:	fa                   	cli    
c000fa89:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fa8e:	83 c0 01             	add    eax,0x1
c000fa91:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fa96:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fa9b:	83 c0 01             	add    eax,0x1
c000fa9e:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000faa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faa7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000faaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faae:	8b 00                	mov    eax,DWORD PTR [eax]
c000fab0:	39 c2                	cmp    edx,eax
c000fab2:	7d 14                	jge    c000fac8 <Semaphore::acquire(int)+0xe8>
c000fab4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fab8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fabb:	8d 50 01             	lea    edx,[eax+0x1]
c000fabe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fac2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fac5:	eb 6d                	jmp    c000fb34 <Semaphore::acquire(int)+0x154>
c000fac7:	90                   	nop
c000fac8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000facd:	8b 00                	mov    eax,DWORD PTR [eax]
c000facf:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000fad6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fada:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fadd:	85 c0                	test   eax,eax
c000fadf:	75 13                	jne    c000faf4 <Semaphore::acquire(int)+0x114>
c000fae1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fae6:	8b 10                	mov    edx,DWORD PTR [eax]
c000fae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000faef:	eb 17                	jmp    c000fb08 <Semaphore::acquire(int)+0x128>
c000faf1:	8d 76 00             	lea    esi,[esi+0x0]
c000faf4:	ba 00 20 00 c2       	mov    edx,0xc2002000
c000faf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fafd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fb00:	8b 12                	mov    edx,DWORD PTR [edx]
c000fb02:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000fb05:	8d 76 00             	lea    esi,[esi+0x0]
c000fb08:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fb0d:	8b 10                	mov    edx,DWORD PTR [eax]
c000fb0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb13:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fb16:	83 ec 0c             	sub    esp,0xc
c000fb19:	68 bc 24 02 c0       	push   0xc00224bc
c000fb1e:	e8 2b 74 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fb23:	83 c4 10             	add    esp,0x10
c000fb26:	83 ec 0c             	sub    esp,0xc
c000fb29:	6a 05                	push   0x5
c000fb2b:	e8 7c 59 00 00       	call   c00154ac <blockTask(TaskState)>
c000fb30:	83 c4 10             	add    esp,0x10
c000fb33:	90                   	nop
c000fb34:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fb39:	83 e8 01             	sub    eax,0x1
c000fb3c:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fb41:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fb46:	85 c0                	test   eax,eax
c000fb48:	75 1a                	jne    c000fb64 <Semaphore::acquire(int)+0x184>
c000fb4a:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000fb4f:	85 c0                	test   eax,eax
c000fb51:	74 11                	je     c000fb64 <Semaphore::acquire(int)+0x184>
c000fb53:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000fb5d:	e8 8a 58 00 00       	call   c00153ec <schedule()>
c000fb62:	66 90                	xchg   ax,ax
c000fb64:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000fb6c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fb71:	85 c0                	test   eax,eax
c000fb73:	75 03                	jne    c000fb78 <Semaphore::acquire(int)+0x198>
c000fb75:	fb                   	sti    
c000fb76:	66 90                	xchg   ax,ax
c000fb78:	b8 00 00 00 00       	mov    eax,0x0
c000fb7d:	8d 76 00             	lea    esi,[esi+0x0]
c000fb80:	83 c4 1c             	add    esp,0x1c
c000fb83:	c3                   	ret    

c000fb84 <Semaphore::acquire()>:
c000fb84:	83 ec 0c             	sub    esp,0xc
c000fb87:	83 ec 08             	sub    esp,0x8
c000fb8a:	6a 00                	push   0x0
c000fb8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb90:	e8 4b fe ff ff       	call   c000f9e0 <Semaphore::acquire(int)>
c000fb95:	83 c4 10             	add    esp,0x10
c000fb98:	90                   	nop
c000fb99:	83 c4 0c             	add    esp,0xc
c000fb9c:	c3                   	ret    
c000fb9d:	90                   	nop
c000fb9e:	66 90                	xchg   ax,ax

c000fba0 <Semaphore::release()>:
c000fba0:	83 ec 1c             	sub    esp,0x1c
c000fba3:	fa                   	cli    
c000fba4:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fba9:	83 c0 01             	add    eax,0x1
c000fbac:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fbb1:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fbb6:	83 c0 01             	add    eax,0x1
c000fbb9:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fbbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbc2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fbc5:	85 c0                	test   eax,eax
c000fbc7:	74 2b                	je     c000fbf4 <Semaphore::release()+0x54>
c000fbc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbcd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fbd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fbd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbd8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000fbdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbdf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fbe2:	83 ec 0c             	sub    esp,0xc
c000fbe5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fbe9:	e8 fe 5a 00 00       	call   c00156ec <unblockTask(ThreadControlBlock*)>
c000fbee:	83 c4 10             	add    esp,0x10
c000fbf1:	eb 15                	jmp    c000fc08 <Semaphore::release()+0x68>
c000fbf3:	90                   	nop
c000fbf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbf8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fbfb:	8d 50 ff             	lea    edx,[eax-0x1]
c000fbfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc02:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fc05:	8d 76 00             	lea    esi,[esi+0x0]
c000fc08:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fc0d:	83 e8 01             	sub    eax,0x1
c000fc10:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fc15:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fc1a:	85 c0                	test   eax,eax
c000fc1c:	75 1a                	jne    c000fc38 <Semaphore::release()+0x98>
c000fc1e:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000fc23:	85 c0                	test   eax,eax
c000fc25:	74 11                	je     c000fc38 <Semaphore::release()+0x98>
c000fc27:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000fc31:	e8 b6 57 00 00       	call   c00153ec <schedule()>
c000fc36:	66 90                	xchg   ax,ax
c000fc38:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000fc40:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fc45:	85 c0                	test   eax,eax
c000fc47:	75 03                	jne    c000fc4c <Semaphore::release()+0xac>
c000fc49:	fb                   	sti    
c000fc4a:	66 90                	xchg   ax,ax
c000fc4c:	90                   	nop
c000fc4d:	83 c4 1c             	add    esp,0x1c
c000fc50:	c3                   	ret    

c000fc51 <KiSigKill(int)>:
c000fc51:	83 ec 0c             	sub    esp,0xc
c000fc54:	6a 00                	push   0x0
c000fc56:	6a 00                	push   0x0
c000fc58:	6a ff                	push   0xffffffff
c000fc5a:	6a 01                	push   0x1
c000fc5c:	e8 f1 53 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fc61:	83 c4 1c             	add    esp,0x1c
c000fc64:	c3                   	ret    

c000fc65 <KiDefaultSignalHandlerIgnore(int)>:
c000fc65:	c3                   	ret    

c000fc66 <KiDefaultSignalHandlerPause(int)>:
c000fc66:	57                   	push   edi
c000fc67:	b9 07 00 00 00       	mov    ecx,0x7
c000fc6c:	56                   	push   esi
c000fc6d:	be 17 25 02 c0       	mov    esi,0xc0022517
c000fc72:	83 ec 24             	sub    esp,0x24
c000fc75:	8d 7c 24 04          	lea    edi,[esp+0x4]
c000fc79:	fc                   	cld    
c000fc7a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fc7c:	8d 44 24 04          	lea    eax,[esp+0x4]
c000fc80:	50                   	push   eax
c000fc81:	6a 00                	push   0x0
c000fc83:	6a 00                	push   0x0
c000fc85:	6a 27                	push   0x27
c000fc87:	e8 c6 53 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fc8c:	83 c4 34             	add    esp,0x34
c000fc8f:	5e                   	pop    esi
c000fc90:	5f                   	pop    edi
c000fc91:	c3                   	ret    

c000fc92 <KiDefaultSignalHandlerResume(int)>:
c000fc92:	57                   	push   edi
c000fc93:	b9 1d 00 00 00       	mov    ecx,0x1d
c000fc98:	56                   	push   esi
c000fc99:	be 33 25 02 c0       	mov    esi,0xc0022533
c000fc9e:	83 ec 24             	sub    esp,0x24
c000fca1:	8d 7c 24 03          	lea    edi,[esp+0x3]
c000fca5:	fc                   	cld    
c000fca6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fca8:	8d 44 24 03          	lea    eax,[esp+0x3]
c000fcac:	50                   	push   eax
c000fcad:	6a 00                	push   0x0
c000fcaf:	6a 00                	push   0x0
c000fcb1:	6a 27                	push   0x27
c000fcb3:	e8 9a 53 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fcb8:	83 c4 34             	add    esp,0x34
c000fcbb:	5e                   	pop    esi
c000fcbc:	5f                   	pop    edi
c000fcbd:	c3                   	ret    

c000fcbe <KeDeinitSignals(SigHandlerBlock*)>:
c000fcbe:	e9 1d ec ff ff       	jmp    c000e8e0 <free>

c000fcc3 <KeInitSignals()>:
c000fcc3:	53                   	push   ebx
c000fcc4:	83 ec 14             	sub    esp,0x14
c000fcc7:	68 c8 00 00 00       	push   0xc8
c000fccc:	e8 ff eb ff ff       	call   c000e8d0 <malloc>
c000fcd1:	83 c4 0c             	add    esp,0xc
c000fcd4:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c000fcde:	89 c3                	mov    ebx,eax
c000fce0:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c000fcea:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c000fcf0:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c000fcf4:	6a 20                	push   0x20
c000fcf6:	6a 00                	push   0x0
c000fcf8:	50                   	push   eax
c000fcf9:	e8 f2 07 ff ff       	call   c00004f0 <memset>
c000fcfe:	83 c4 0c             	add    esp,0xc
c000fd01:	6a 44                	push   0x44
c000fd03:	6a 00                	push   0x0
c000fd05:	53                   	push   ebx
c000fd06:	e8 e5 07 ff ff       	call   c00004f0 <memset>
c000fd0b:	83 c4 18             	add    esp,0x18
c000fd0e:	89 d8                	mov    eax,ebx
c000fd10:	5b                   	pop    ebx
c000fd11:	c3                   	ret    

c000fd12 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c000fd12:	53                   	push   ebx
c000fd13:	b8 01 00 00 00       	mov    eax,0x1
c000fd18:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fd1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fd20:	83 f9 10             	cmp    ecx,0x10
c000fd23:	7f 21                	jg     c000fd46 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c000fd25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd29:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c000fd2c:	89 03                	mov    DWORD PTR [ebx],eax
c000fd2e:	b8 01 00 00 00       	mov    eax,0x1
c000fd33:	d3 e0                	shl    eax,cl
c000fd35:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000fd39:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c000fd3c:	31 c0                	xor    eax,eax
c000fd3e:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c000fd46:	5b                   	pop    ebx
c000fd47:	c3                   	ret    

c000fd48 <KeRaiseSignal(SigHandlerBlock*, int)>:
c000fd48:	55                   	push   ebp
c000fd49:	57                   	push   edi
c000fd4a:	bf 08 00 00 00       	mov    edi,0x8
c000fd4f:	56                   	push   esi
c000fd50:	53                   	push   ebx
c000fd51:	83 ec 18             	sub    esp,0x18
c000fd54:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000fd58:	68 50 25 02 c0       	push   0xc0022550
c000fd5d:	e8 ec 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fd62:	83 c4 10             	add    esp,0x10
c000fd65:	31 c9                	xor    ecx,ecx
c000fd67:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c000fd6e:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c000fd74:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000fd78:	99                   	cdq    
c000fd79:	f7 ff                	idiv   edi
c000fd7b:	8d 42 24             	lea    eax,[edx+0x24]
c000fd7e:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c000fd82:	85 f6                	test   esi,esi
c000fd84:	75 1a                	jne    c000fda0 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c000fd86:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000fd8a:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c000fd8e:	50                   	push   eax
c000fd8f:	50                   	push   eax
c000fd90:	52                   	push   edx
c000fd91:	68 61 25 02 c0       	push   0xc0022561
c000fd96:	e8 b3 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fd9b:	83 c4 10             	add    esp,0x10
c000fd9e:	eb 1b                	jmp    c000fdbb <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c000fda0:	41                   	inc    ecx
c000fda1:	83 f9 08             	cmp    ecx,0x8
c000fda4:	75 ce                	jne    c000fd74 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c000fda6:	83 ec 0c             	sub    esp,0xc
c000fda9:	be 01 00 00 00       	mov    esi,0x1
c000fdae:	68 82 25 02 c0       	push   0xc0022582
c000fdb3:	e8 96 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fdb8:	83 c4 10             	add    esp,0x10
c000fdbb:	83 c4 0c             	add    esp,0xc
c000fdbe:	89 f0                	mov    eax,esi
c000fdc0:	5b                   	pop    ebx
c000fdc1:	5e                   	pop    esi
c000fdc2:	5f                   	pop    edi
c000fdc3:	5d                   	pop    ebp
c000fdc4:	c3                   	ret    

c000fdc5 <KeCheckSignal(SigHandlerBlock*, int*)>:
c000fdc5:	55                   	push   ebp
c000fdc6:	57                   	push   edi
c000fdc7:	56                   	push   esi
c000fdc8:	53                   	push   ebx
c000fdc9:	51                   	push   ecx
c000fdca:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fdce:	85 db                	test   ebx,ebx
c000fdd0:	0f 84 bc 00 00 00    	je     c000fe92 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fdd6:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c000fddd:	0f 84 af 00 00 00    	je     c000fe92 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fde3:	31 c9                	xor    ecx,ecx
c000fde5:	bf 08 00 00 00       	mov    edi,0x8
c000fdea:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c000fdf0:	8d 04 0e             	lea    eax,[esi+ecx*1]
c000fdf3:	99                   	cdq    
c000fdf4:	f7 ff                	idiv   edi
c000fdf6:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c000fdfd:	85 ed                	test   ebp,ebp
c000fdff:	0f 84 9e 00 00 00    	je     c000fea3 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c000fe05:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c000fe0b:	89 e9                	mov    ecx,ebp
c000fe0d:	bf 01 00 00 00       	mov    edi,0x1
c000fe12:	d3 e7                	shl    edi,cl
c000fe14:	31 c9                	xor    ecx,ecx
c000fe16:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe19:	b8 01 00 00 00       	mov    eax,0x1
c000fe1e:	d3 e0                	shl    eax,cl
c000fe20:	85 04 24             	test   DWORD PTR [esp],eax
c000fe23:	74 06                	je     c000fe2b <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c000fe25:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c000fe29:	75 67                	jne    c000fe92 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fe2b:	41                   	inc    ecx
c000fe2c:	83 f9 11             	cmp    ecx,0x11
c000fe2f:	75 e8                	jne    c000fe19 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c000fe31:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fe34:	46                   	inc    esi
c000fe35:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c000fe3b:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c000fe46:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c000fe4d:	09 f8                	or     eax,edi
c000fe4f:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c000fe55:	31 c0                	xor    eax,eax
c000fe57:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c000fe5f:	74 09                	je     c000fe6a <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c000fe61:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c000fe68:	eb 06                	jmp    c000fe70 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c000fe6a:	40                   	inc    eax
c000fe6b:	83 f8 08             	cmp    eax,0x8
c000fe6e:	75 e7                	jne    c000fe57 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c000fe70:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fe74:	83 fd 09             	cmp    ebp,0x9
c000fe77:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c000fe7a:	89 2a                	mov    DWORD PTR [edx],ebp
c000fe7c:	75 07                	jne    c000fe85 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c000fe7e:	b8 51 fc 00 c0       	mov    eax,0xc000fc51
c000fe83:	eb 31                	jmp    c000feb6 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000fe85:	83 f8 01             	cmp    eax,0x1
c000fe88:	75 0c                	jne    c000fe96 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c000fe8a:	f7 d7                	not    edi
c000fe8c:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c000fe92:	31 c0                	xor    eax,eax
c000fe94:	eb 20                	jmp    c000feb6 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000fe96:	85 c0                	test   eax,eax
c000fe98:	75 1c                	jne    c000feb6 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000fe9a:	8b 04 ad 80 43 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdbc80]
c000fea1:	eb 13                	jmp    c000feb6 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000fea3:	41                   	inc    ecx
c000fea4:	46                   	inc    esi
c000fea5:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c000feab:	83 f9 08             	cmp    ecx,0x8
c000feae:	0f 85 36 ff ff ff    	jne    c000fdea <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c000feb4:	eb dc                	jmp    c000fe92 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000feb6:	5a                   	pop    edx
c000feb7:	5b                   	pop    ebx
c000feb8:	5e                   	pop    esi
c000feb9:	5f                   	pop    edi
c000feba:	5d                   	pop    ebp
c000febb:	c3                   	ret    

c000febc <KiCheckSignalZ>:
c000febc:	83 ec 10             	sub    esp,0x10
c000febf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fec3:	50                   	push   eax
c000fec4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fec9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fecc:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c000fed2:	e8 ee fe ff ff       	call   c000fdc5 <KeCheckSignal(SigHandlerBlock*, int*)>
c000fed7:	5a                   	pop    edx
c000fed8:	31 d2                	xor    edx,edx
c000feda:	59                   	pop    ecx
c000fedb:	85 c0                	test   eax,eax
c000fedd:	74 19                	je     c000fef8 <KiCheckSignalZ+0x3c>
c000fedf:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000fee5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000fee8:	89 02                	mov    DWORD PTR [edx],eax
c000feea:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c000fef1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fef5:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000fef8:	89 d0                	mov    eax,edx
c000fefa:	83 c4 10             	add    esp,0x10
c000fefd:	c3                   	ret    

c000fefe <KeCompleteSignal(SigHandlerBlock*, int)>:
c000fefe:	56                   	push   esi
c000feff:	53                   	push   ebx
c000ff00:	bb 01 00 00 00       	mov    ebx,0x1
c000ff05:	52                   	push   edx
c000ff06:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ff0a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ff0e:	d3 e3                	shl    ebx,cl
c000ff10:	83 f9 10             	cmp    ecx,0x10
c000ff13:	7f 08                	jg     c000ff1d <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c000ff15:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c000ff1b:	75 10                	jne    c000ff2d <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c000ff1d:	83 ec 0c             	sub    esp,0xc
c000ff20:	68 93 25 02 c0       	push   0xc0022593
c000ff25:	e8 ec ec ff ff       	call   c000ec16 <KePanic(char const*)>
c000ff2a:	83 c4 10             	add    esp,0x10
c000ff2d:	f7 d3                	not    ebx
c000ff2f:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c000ff35:	58                   	pop    eax
c000ff36:	5b                   	pop    ebx
c000ff37:	5e                   	pop    esi
c000ff38:	c3                   	ret    

c000ff39 <KiFinishSignalZ>:
c000ff39:	53                   	push   ebx
c000ff3a:	83 ec 10             	sub    esp,0x10
c000ff3d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ff41:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c000ff44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff49:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ff4c:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c000ff52:	e8 a7 ff ff ff       	call   c000fefe <KeCompleteSignal(SigHandlerBlock*, int)>
c000ff57:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000ff5d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000ff64:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ff6b:	83 c4 18             	add    esp,0x18
c000ff6e:	5b                   	pop    ebx
c000ff6f:	c3                   	ret    

c000ff70 <SysSeekDir(regs*)>:
c000ff70:	31 c0                	xor    eax,eax
c000ff72:	31 d2                	xor    edx,edx
c000ff74:	c3                   	ret    

c000ff75 <SysTellDir(regs*)>:
c000ff75:	31 c0                	xor    eax,eax
c000ff77:	31 d2                	xor    edx,edx
c000ff79:	c3                   	ret    

c000ff7a <SysVerify(regs*)>:
c000ff7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff7e:	31 d2                	xor    edx,edx
c000ff80:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ff83:	c3                   	ret    

c000ff84 <SysGetArgc(regs*)>:
c000ff84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff89:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ff8c:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c000ff92:	89 c2                	mov    edx,eax
c000ff94:	c1 fa 1f             	sar    edx,0x1f
c000ff97:	c3                   	ret    

c000ff98 <SysTTYName(regs*)>:
c000ff98:	b8 01 00 00 00       	mov    eax,0x1
c000ff9d:	31 d2                	xor    edx,edx
c000ff9f:	c3                   	ret    

c000ffa0 <SysFormatDisk(regs*)>:
c000ffa0:	56                   	push   esi
c000ffa1:	53                   	push   ebx
c000ffa2:	83 ec 04             	sub    esp,0x4
c000ffa5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ffa9:	8b 1d 04 93 02 c0    	mov    ebx,DWORD PTR ds:0xc0029304
c000ffaf:	eb 2a                	jmp    c000ffdb <SysFormatDisk(regs*)+0x3b>
c000ffb1:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c000ffb4:	83 ec 0c             	sub    esp,0xc
c000ffb7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000ffba:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ffbc:	51                   	push   ecx
c000ffbd:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c000ffc0:	51                   	push   ecx
c000ffc1:	50                   	push   eax
c000ffc2:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c000ffc9:	50                   	push   eax
c000ffca:	53                   	push   ebx
c000ffcb:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c000ffce:	83 c4 20             	add    esp,0x20
c000ffd1:	83 f8 08             	cmp    eax,0x8
c000ffd4:	89 c1                	mov    ecx,eax
c000ffd6:	75 14                	jne    c000ffec <SysFormatDisk(regs*)+0x4c>
c000ffd8:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000ffdb:	85 db                	test   ebx,ebx
c000ffdd:	75 d2                	jne    c000ffb1 <SysFormatDisk(regs*)+0x11>
c000ffdf:	b8 03 00 00 00       	mov    eax,0x3
c000ffe4:	31 d2                	xor    edx,edx
c000ffe6:	83 c4 04             	add    esp,0x4
c000ffe9:	5b                   	pop    ebx
c000ffea:	5e                   	pop    esi
c000ffeb:	c3                   	ret    
c000ffec:	85 c0                	test   eax,eax
c000ffee:	74 13                	je     c0010003 <SysFormatDisk(regs*)+0x63>
c000fff0:	31 d2                	xor    edx,edx
c000fff2:	83 f9 09             	cmp    ecx,0x9
c000fff5:	b8 01 00 00 00       	mov    eax,0x1
c000fffa:	74 ea                	je     c000ffe6 <SysFormatDisk(regs*)+0x46>
c000fffc:	b8 02 00 00 00       	mov    eax,0x2
c0010001:	eb e1                	jmp    c000ffe4 <SysFormatDisk(regs*)+0x44>
c0010003:	31 c0                	xor    eax,eax
c0010005:	eb dd                	jmp    c000ffe4 <SysFormatDisk(regs*)+0x44>

c0010007 <SysSetDiskVolumeLabel(regs*)>:
c0010007:	56                   	push   esi
c0010008:	53                   	push   ebx
c0010009:	83 ec 04             	sub    esp,0x4
c001000c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010010:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010013:	83 f8 19             	cmp    eax,0x19
c0010016:	77 33                	ja     c001004b <SysSetDiskVolumeLabel(regs*)+0x44>
c0010018:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001001f:	85 c9                	test   ecx,ecx
c0010021:	74 28                	je     c001004b <SysSetDiskVolumeLabel(regs*)+0x44>
c0010023:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010026:	85 db                	test   ebx,ebx
c0010028:	74 21                	je     c001004b <SysSetDiskVolumeLabel(regs*)+0x44>
c001002a:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010030:	85 d2                	test   edx,edx
c0010032:	74 17                	je     c001004b <SysSetDiskVolumeLabel(regs*)+0x44>
c0010034:	8b 32                	mov    esi,DWORD PTR [edx]
c0010036:	53                   	push   ebx
c0010037:	50                   	push   eax
c0010038:	51                   	push   ecx
c0010039:	52                   	push   edx
c001003a:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c001003d:	83 c4 10             	add    esp,0x10
c0010040:	83 c4 04             	add    esp,0x4
c0010043:	5b                   	pop    ebx
c0010044:	5e                   	pop    esi
c0010045:	89 c2                	mov    edx,eax
c0010047:	c1 fa 1f             	sar    edx,0x1f
c001004a:	c3                   	ret    
c001004b:	83 c4 04             	add    esp,0x4
c001004e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010053:	5b                   	pop    ebx
c0010054:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010059:	5e                   	pop    esi
c001005a:	c3                   	ret    

c001005b <SysGetDiskVolumeLabel(regs*)>:
c001005b:	57                   	push   edi
c001005c:	56                   	push   esi
c001005d:	53                   	push   ebx
c001005e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010062:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010065:	83 fa 19             	cmp    edx,0x19
c0010068:	77 3c                	ja     c00100a6 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001006a:	8b 0c 95 80 97 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd6880]
c0010071:	85 c9                	test   ecx,ecx
c0010073:	74 31                	je     c00100a6 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010075:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010078:	85 db                	test   ebx,ebx
c001007a:	74 2a                	je     c00100a6 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001007c:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001007f:	85 f6                	test   esi,esi
c0010081:	74 23                	je     c00100a6 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010083:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0010089:	85 c0                	test   eax,eax
c001008b:	74 19                	je     c00100a6 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001008d:	83 ec 0c             	sub    esp,0xc
c0010090:	8b 38                	mov    edi,DWORD PTR [eax]
c0010092:	56                   	push   esi
c0010093:	53                   	push   ebx
c0010094:	52                   	push   edx
c0010095:	51                   	push   ecx
c0010096:	50                   	push   eax
c0010097:	ff 57 58             	call   DWORD PTR [edi+0x58]
c001009a:	83 c4 20             	add    esp,0x20
c001009d:	5b                   	pop    ebx
c001009e:	5e                   	pop    esi
c001009f:	89 c2                	mov    edx,eax
c00100a1:	c1 fa 1f             	sar    edx,0x1f
c00100a4:	5f                   	pop    edi
c00100a5:	c3                   	ret    
c00100a6:	5b                   	pop    ebx
c00100a7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00100ac:	ba ff ff ff ff       	mov    edx,0xffffffff
c00100b1:	5e                   	pop    esi
c00100b2:	5f                   	pop    edi
c00100b3:	c3                   	ret    

c00100b4 <SysRealpath(regs*)>:
c00100b4:	53                   	push   ebx
c00100b5:	83 ec 08             	sub    esp,0x8
c00100b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100bc:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00100bf:	85 c9                	test   ecx,ecx
c00100c1:	74 36                	je     c00100f9 <SysRealpath(regs*)+0x45>
c00100c3:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00100c6:	31 d2                	xor    edx,edx
c00100c8:	b8 01 00 00 00       	mov    eax,0x1
c00100cd:	85 db                	test   ebx,ebx
c00100cf:	75 05                	jne    c00100d6 <SysRealpath(regs*)+0x22>
c00100d1:	83 c4 08             	add    esp,0x8
c00100d4:	5b                   	pop    ebx
c00100d5:	c3                   	ret    
c00100d6:	6a 00                	push   0x0
c00100d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00100dd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00100e0:	05 0c 01 00 00       	add    eax,0x10c
c00100e5:	50                   	push   eax
c00100e6:	51                   	push   ecx
c00100e7:	53                   	push   ebx
c00100e8:	e8 13 7d ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00100ed:	83 c4 10             	add    esp,0x10
c00100f0:	31 c0                	xor    eax,eax
c00100f2:	31 d2                	xor    edx,edx
c00100f4:	83 c4 08             	add    esp,0x8
c00100f7:	5b                   	pop    ebx
c00100f8:	c3                   	ret    
c00100f9:	b8 01 00 00 00       	mov    eax,0x1
c00100fe:	31 d2                	xor    edx,edx
c0010100:	eb f2                	jmp    c00100f4 <SysRealpath(regs*)+0x40>

c0010102 <SysReadDir(regs*)>:
c0010102:	53                   	push   ebx
c0010103:	83 ec 18             	sub    esp,0x18
c0010106:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001010a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001010d:	83 f8 02             	cmp    eax,0x2
c0010110:	76 4f                	jbe    c0010161 <SysReadDir(regs*)+0x5f>
c0010112:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010119:	77 52                	ja     c001016d <SysReadDir(regs*)+0x6b>
c001011b:	83 ec 0c             	sub    esp,0xc
c001011e:	50                   	push   eax
c001011f:	e8 d5 1c 00 00       	call   c0011df9 <KeGetFileFromDescriptor(int)>
c0010124:	83 c4 10             	add    esp,0x10
c0010127:	85 c0                	test   eax,eax
c0010129:	74 42                	je     c001016d <SysReadDir(regs*)+0x6b>
c001012b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010133:	83 ec 0c             	sub    esp,0xc
c0010136:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001013a:	8b 10                	mov    edx,DWORD PTR [eax]
c001013c:	51                   	push   ecx
c001013d:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010140:	51                   	push   ecx
c0010141:	6a 00                	push   0x0
c0010143:	68 10 01 00 00       	push   0x110
c0010148:	50                   	push   eax
c0010149:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001014c:	83 c4 20             	add    esp,0x20
c001014f:	85 c0                	test   eax,eax
c0010151:	89 c1                	mov    ecx,eax
c0010153:	74 27                	je     c001017c <SysReadDir(regs*)+0x7a>
c0010155:	31 d2                	xor    edx,edx
c0010157:	83 f9 07             	cmp    ecx,0x7
c001015a:	b8 02 00 00 00       	mov    eax,0x2
c001015f:	75 16                	jne    c0010177 <SysReadDir(regs*)+0x75>
c0010161:	b8 01 00 00 00       	mov    eax,0x1
c0010166:	31 d2                	xor    edx,edx
c0010168:	83 c4 18             	add    esp,0x18
c001016b:	5b                   	pop    ebx
c001016c:	c3                   	ret    
c001016d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010172:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010177:	83 c4 18             	add    esp,0x18
c001017a:	5b                   	pop    ebx
c001017b:	c3                   	ret    
c001017c:	31 c0                	xor    eax,eax
c001017e:	31 d2                	xor    edx,edx
c0010180:	eb e6                	jmp    c0010168 <SysReadDir(regs*)+0x66>

c0010182 <SysIsATTY(regs*)>:
c0010182:	83 ec 0c             	sub    esp,0xc
c0010185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010189:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001018c:	83 f8 02             	cmp    eax,0x2
c001018f:	76 07                	jbe    c0010198 <SysIsATTY(regs*)+0x16>
c0010191:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010196:	75 26                	jne    c00101be <SysIsATTY(regs*)+0x3c>
c0010198:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001019d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00101a0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00101a6:	85 c0                	test   eax,eax
c00101a8:	74 24                	je     c00101ce <SysIsATTY(regs*)+0x4c>
c00101aa:	8b 10                	mov    edx,DWORD PTR [eax]
c00101ac:	83 ec 0c             	sub    esp,0xc
c00101af:	50                   	push   eax
c00101b0:	ff 12                	call   DWORD PTR [edx]
c00101b2:	83 c4 10             	add    esp,0x10
c00101b5:	31 d2                	xor    edx,edx
c00101b7:	83 c4 0c             	add    esp,0xc
c00101ba:	0f b6 c0             	movzx  eax,al
c00101bd:	c3                   	ret    
c00101be:	83 ec 0c             	sub    esp,0xc
c00101c1:	50                   	push   eax
c00101c2:	e8 32 1c 00 00       	call   c0011df9 <KeGetFileFromDescriptor(int)>
c00101c7:	83 c4 10             	add    esp,0x10
c00101ca:	85 c0                	test   eax,eax
c00101cc:	75 dc                	jne    c00101aa <SysIsATTY(regs*)+0x28>
c00101ce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00101d3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00101d8:	83 c4 0c             	add    esp,0xc
c00101db:	c3                   	ret    

c00101dc <SysSeek(regs*)>:
c00101dc:	56                   	push   esi
c00101dd:	53                   	push   ebx
c00101de:	83 ec 04             	sub    esp,0x4
c00101e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00101e5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00101e8:	8d 71 fd             	lea    esi,[ecx-0x3]
c00101eb:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c00101f1:	77 33                	ja     c0010226 <SysSeek(regs*)+0x4a>
c00101f3:	83 ec 0c             	sub    esp,0xc
c00101f6:	51                   	push   ecx
c00101f7:	e8 fd 1b 00 00       	call   c0011df9 <KeGetFileFromDescriptor(int)>
c00101fc:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00101ff:	83 c4 0c             	add    esp,0xc
c0010202:	31 db                	xor    ebx,ebx
c0010204:	53                   	push   ebx
c0010205:	51                   	push   ecx
c0010206:	50                   	push   eax
c0010207:	e8 dc 7f ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c001020c:	83 c4 10             	add    esp,0x10
c001020f:	85 c0                	test   eax,eax
c0010211:	0f 95 c0             	setne  al
c0010214:	31 d2                	xor    edx,edx
c0010216:	0f b6 c0             	movzx  eax,al
c0010219:	f7 d8                	neg    eax
c001021b:	83 d2 00             	adc    edx,0x0
c001021e:	83 c4 04             	add    esp,0x4
c0010221:	5b                   	pop    ebx
c0010222:	f7 da                	neg    edx
c0010224:	5e                   	pop    esi
c0010225:	c3                   	ret    
c0010226:	83 c4 04             	add    esp,0x4
c0010229:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001022e:	5b                   	pop    ebx
c001022f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010234:	5e                   	pop    esi
c0010235:	c3                   	ret    

c0010236 <SysTell(regs*)>:
c0010236:	53                   	push   ebx
c0010237:	83 ec 08             	sub    esp,0x8
c001023a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001023e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010241:	83 f8 02             	cmp    eax,0x2
c0010244:	76 4e                	jbe    c0010294 <SysTell(regs*)+0x5e>
c0010246:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001024b:	76 19                	jbe    c0010266 <SysTell(regs*)+0x30>
c001024d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010250:	31 d2                	xor    edx,edx
c0010252:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010258:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001025f:	83 c4 08             	add    esp,0x8
c0010262:	31 c0                	xor    eax,eax
c0010264:	5b                   	pop    ebx
c0010265:	c3                   	ret    
c0010266:	83 ec 0c             	sub    esp,0xc
c0010269:	50                   	push   eax
c001026a:	e8 8a 1b 00 00       	call   c0011df9 <KeGetFileFromDescriptor(int)>
c001026f:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010272:	5a                   	pop    edx
c0010273:	59                   	pop    ecx
c0010274:	53                   	push   ebx
c0010275:	50                   	push   eax
c0010276:	e8 19 80 ff ff       	call   c0008294 <File::tell(unsigned long long*)>
c001027b:	83 c4 10             	add    esp,0x10
c001027e:	85 c0                	test   eax,eax
c0010280:	0f 95 c0             	setne  al
c0010283:	31 d2                	xor    edx,edx
c0010285:	0f b6 c0             	movzx  eax,al
c0010288:	f7 d8                	neg    eax
c001028a:	83 d2 00             	adc    edx,0x0
c001028d:	83 c4 08             	add    esp,0x8
c0010290:	5b                   	pop    ebx
c0010291:	f7 da                	neg    edx
c0010293:	c3                   	ret    
c0010294:	83 c4 08             	add    esp,0x8
c0010297:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001029c:	5b                   	pop    ebx
c001029d:	ba ff ff ff ff       	mov    edx,0xffffffff
c00102a2:	c3                   	ret    

c00102a3 <SysSize(regs*)>:
c00102a3:	53                   	push   ebx
c00102a4:	83 ec 18             	sub    esp,0x18
c00102a7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00102ab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00102ae:	83 f8 02             	cmp    eax,0x2
c00102b1:	76 54                	jbe    c0010307 <SysSize(regs*)+0x64>
c00102b3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00102b8:	76 19                	jbe    c00102d3 <SysSize(regs*)+0x30>
c00102ba:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00102bd:	31 d2                	xor    edx,edx
c00102bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00102c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00102cc:	83 c4 18             	add    esp,0x18
c00102cf:	31 c0                	xor    eax,eax
c00102d1:	5b                   	pop    ebx
c00102d2:	c3                   	ret    
c00102d3:	83 ec 0c             	sub    esp,0xc
c00102d6:	50                   	push   eax
c00102d7:	e8 1d 1b 00 00       	call   c0011df9 <KeGetFileFromDescriptor(int)>
c00102dc:	83 c4 0c             	add    esp,0xc
c00102df:	8d 54 24 13          	lea    edx,[esp+0x13]
c00102e3:	52                   	push   edx
c00102e4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00102e7:	52                   	push   edx
c00102e8:	50                   	push   eax
c00102e9:	e8 3e 81 ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c00102ee:	83 c4 10             	add    esp,0x10
c00102f1:	85 c0                	test   eax,eax
c00102f3:	0f 95 c0             	setne  al
c00102f6:	31 d2                	xor    edx,edx
c00102f8:	0f b6 c0             	movzx  eax,al
c00102fb:	f7 d8                	neg    eax
c00102fd:	83 d2 00             	adc    edx,0x0
c0010300:	83 c4 18             	add    esp,0x18
c0010303:	5b                   	pop    ebx
c0010304:	f7 da                	neg    edx
c0010306:	c3                   	ret    
c0010307:	83 c4 18             	add    esp,0x18
c001030a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001030f:	5b                   	pop    ebx
c0010310:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010315:	c3                   	ret    

c0010316 <SysSizeFromFilename(regs*)>:
c0010316:	55                   	push   ebp
c0010317:	57                   	push   edi
c0010318:	56                   	push   esi
c0010319:	53                   	push   ebx
c001031a:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0010320:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0010327:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001032a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001032d:	85 f6                	test   esi,esi
c001032f:	89 f8                	mov    eax,edi
c0010331:	74 09                	je     c001033c <SysSizeFromFilename(regs*)+0x26>
c0010333:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010339:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001033c:	83 f8 02             	cmp    eax,0x2
c001033f:	0f 86 ca 00 00 00    	jbe    c001040f <SysSizeFromFilename(regs*)+0xf9>
c0010345:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001034a:	76 1f                	jbe    c001036b <SysSizeFromFilename(regs*)+0x55>
c001034c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001034f:	31 d2                	xor    edx,edx
c0010351:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010357:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001035e:	31 c0                	xor    eax,eax
c0010360:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010366:	5b                   	pop    ebx
c0010367:	5e                   	pop    esi
c0010368:	5f                   	pop    edi
c0010369:	5d                   	pop    ebp
c001036a:	c3                   	ret    
c001036b:	83 ec 0c             	sub    esp,0xc
c001036e:	68 14 01 00 00       	push   0x114
c0010373:	e8 58 e5 ff ff       	call   c000e8d0 <malloc>
c0010378:	6a 01                	push   0x1
c001037a:	89 c5                	mov    ebp,eax
c001037c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010381:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0010384:	51                   	push   ecx
c0010385:	57                   	push   edi
c0010386:	55                   	push   ebp
c0010387:	e8 a2 7c ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c001038c:	83 c4 1c             	add    esp,0x1c
c001038f:	8d 44 24 13          	lea    eax,[esp+0x13]
c0010393:	50                   	push   eax
c0010394:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010397:	53                   	push   ebx
c0010398:	55                   	push   ebp
c0010399:	e8 8e 80 ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c001039e:	83 c4 10             	add    esp,0x10
c00103a1:	85 ed                	test   ebp,ebp
c00103a3:	89 c3                	mov    ebx,eax
c00103a5:	74 0d                	je     c00103b4 <SysSizeFromFilename(regs*)+0x9e>
c00103a7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00103aa:	83 ec 0c             	sub    esp,0xc
c00103ad:	55                   	push   ebp
c00103ae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00103b1:	83 c4 10             	add    esp,0x10
c00103b4:	85 db                	test   ebx,ebx
c00103b6:	75 57                	jne    c001040f <SysSizeFromFilename(regs*)+0xf9>
c00103b8:	6a 00                	push   0x0
c00103ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00103bf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00103c2:	05 0c 01 00 00       	add    eax,0x10c
c00103c7:	50                   	push   eax
c00103c8:	57                   	push   edi
c00103c9:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00103d0:	53                   	push   ebx
c00103d1:	e8 2a 7a ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00103d6:	58                   	pop    eax
c00103d7:	5a                   	pop    edx
c00103d8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00103dc:	50                   	push   eax
c00103dd:	53                   	push   ebx
c00103de:	e8 a4 74 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c00103e3:	83 c4 10             	add    esp,0x10
c00103e6:	ba 00 00 00 00       	mov    edx,0x0
c00103eb:	83 f8 01             	cmp    eax,0x1
c00103ee:	b8 00 00 00 00       	mov    eax,0x0
c00103f3:	74 2f                	je     c0010424 <SysSizeFromFilename(regs*)+0x10e>
c00103f5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00103fa:	74 3b                	je     c0010437 <SysSizeFromFilename(regs*)+0x121>
c00103fc:	85 f6                	test   esi,esi
c00103fe:	0f 84 5c ff ff ff    	je     c0010360 <SysSizeFromFilename(regs*)+0x4a>
c0010404:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c001040a:	e9 51 ff ff ff       	jmp    c0010360 <SysSizeFromFilename(regs*)+0x4a>
c001040f:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010415:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001041a:	5b                   	pop    ebx
c001041b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010420:	5e                   	pop    esi
c0010421:	5f                   	pop    edi
c0010422:	5d                   	pop    ebp
c0010423:	c3                   	ret    
c0010424:	85 f6                	test   esi,esi
c0010426:	0f 84 34 ff ff ff    	je     c0010360 <SysSizeFromFilename(regs*)+0x4a>
c001042c:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0010432:	e9 29 ff ff ff       	jmp    c0010360 <SysSizeFromFilename(regs*)+0x4a>
c0010437:	85 f6                	test   esi,esi
c0010439:	0f 84 21 ff ff ff    	je     c0010360 <SysSizeFromFilename(regs*)+0x4a>
c001043f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010445:	e9 16 ff ff ff       	jmp    c0010360 <SysSizeFromFilename(regs*)+0x4a>

c001044a <SysSizeFromFilenameNoSymlink(regs*)>:
c001044a:	55                   	push   ebp
c001044b:	57                   	push   edi
c001044c:	56                   	push   esi
c001044d:	53                   	push   ebx
c001044e:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0010454:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c001045b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001045e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010461:	85 f6                	test   esi,esi
c0010463:	89 f8                	mov    eax,edi
c0010465:	74 09                	je     c0010470 <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c0010467:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001046d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010470:	83 f8 02             	cmp    eax,0x2
c0010473:	0f 86 ca 00 00 00    	jbe    c0010543 <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c0010479:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001047e:	76 1f                	jbe    c001049f <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c0010480:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010483:	31 d2                	xor    edx,edx
c0010485:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001048b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010492:	31 c0                	xor    eax,eax
c0010494:	81 c4 4c 02 00 00    	add    esp,0x24c
c001049a:	5b                   	pop    ebx
c001049b:	5e                   	pop    esi
c001049c:	5f                   	pop    edi
c001049d:	5d                   	pop    ebp
c001049e:	c3                   	ret    
c001049f:	83 ec 0c             	sub    esp,0xc
c00104a2:	68 14 01 00 00       	push   0x114
c00104a7:	e8 24 e4 ff ff       	call   c000e8d0 <malloc>
c00104ac:	6a 00                	push   0x0
c00104ae:	89 c5                	mov    ebp,eax
c00104b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00104b5:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00104b8:	51                   	push   ecx
c00104b9:	57                   	push   edi
c00104ba:	55                   	push   ebp
c00104bb:	e8 6e 7b ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c00104c0:	83 c4 1c             	add    esp,0x1c
c00104c3:	8d 44 24 13          	lea    eax,[esp+0x13]
c00104c7:	50                   	push   eax
c00104c8:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00104cb:	53                   	push   ebx
c00104cc:	55                   	push   ebp
c00104cd:	e8 5a 7f ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c00104d2:	83 c4 10             	add    esp,0x10
c00104d5:	85 ed                	test   ebp,ebp
c00104d7:	89 c3                	mov    ebx,eax
c00104d9:	74 0d                	je     c00104e8 <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c00104db:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00104de:	83 ec 0c             	sub    esp,0xc
c00104e1:	55                   	push   ebp
c00104e2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00104e5:	83 c4 10             	add    esp,0x10
c00104e8:	85 db                	test   ebx,ebx
c00104ea:	75 57                	jne    c0010543 <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c00104ec:	6a 00                	push   0x0
c00104ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00104f3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00104f6:	05 0c 01 00 00       	add    eax,0x10c
c00104fb:	50                   	push   eax
c00104fc:	57                   	push   edi
c00104fd:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0010504:	53                   	push   ebx
c0010505:	e8 f6 78 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001050a:	58                   	pop    eax
c001050b:	5a                   	pop    edx
c001050c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0010510:	50                   	push   eax
c0010511:	53                   	push   ebx
c0010512:	e8 70 73 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c0010517:	83 c4 10             	add    esp,0x10
c001051a:	ba 00 00 00 00       	mov    edx,0x0
c001051f:	83 f8 01             	cmp    eax,0x1
c0010522:	b8 00 00 00 00       	mov    eax,0x0
c0010527:	74 2f                	je     c0010558 <SysSizeFromFilenameNoSymlink(regs*)+0x10e>
c0010529:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001052e:	74 3b                	je     c001056b <SysSizeFromFilenameNoSymlink(regs*)+0x121>
c0010530:	85 f6                	test   esi,esi
c0010532:	0f 84 5c ff ff ff    	je     c0010494 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0010538:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c001053e:	e9 51 ff ff ff       	jmp    c0010494 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0010543:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010549:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001054e:	5b                   	pop    ebx
c001054f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010554:	5e                   	pop    esi
c0010555:	5f                   	pop    edi
c0010556:	5d                   	pop    ebp
c0010557:	c3                   	ret    
c0010558:	85 f6                	test   esi,esi
c001055a:	0f 84 34 ff ff ff    	je     c0010494 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0010560:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0010566:	e9 29 ff ff ff       	jmp    c0010494 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001056b:	85 f6                	test   esi,esi
c001056d:	0f 84 21 ff ff ff    	je     c0010494 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0010573:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010579:	e9 16 ff ff ff       	jmp    c0010494 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c001057e <SysClose(regs*)>:
c001057e:	53                   	push   ebx
c001057f:	83 ec 08             	sub    esp,0x8
c0010582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010586:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010589:	83 f8 02             	cmp    eax,0x2
c001058c:	76 41                	jbe    c00105cf <SysClose(regs*)+0x51>
c001058e:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010594:	83 fa 01             	cmp    edx,0x1
c0010597:	76 2d                	jbe    c00105c6 <SysClose(regs*)+0x48>
c0010599:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001059e:	77 2f                	ja     c00105cf <SysClose(regs*)+0x51>
c00105a0:	83 ec 0c             	sub    esp,0xc
c00105a3:	50                   	push   eax
c00105a4:	e8 50 18 00 00       	call   c0011df9 <KeGetFileFromDescriptor(int)>
c00105a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00105ac:	89 c3                	mov    ebx,eax
c00105ae:	e8 d5 7b ff ff       	call   c0008188 <File::close()>
c00105b3:	83 c4 10             	add    esp,0x10
c00105b6:	85 db                	test   ebx,ebx
c00105b8:	74 0c                	je     c00105c6 <SysClose(regs*)+0x48>
c00105ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00105bc:	83 ec 0c             	sub    esp,0xc
c00105bf:	53                   	push   ebx
c00105c0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00105c3:	83 c4 10             	add    esp,0x10
c00105c6:	83 c4 08             	add    esp,0x8
c00105c9:	31 c0                	xor    eax,eax
c00105cb:	5b                   	pop    ebx
c00105cc:	31 d2                	xor    edx,edx
c00105ce:	c3                   	ret    
c00105cf:	83 c4 08             	add    esp,0x8
c00105d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00105d7:	5b                   	pop    ebx
c00105d8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00105dd:	c3                   	ret    

c00105de <SysOpenDir(regs*)>:
c00105de:	56                   	push   esi
c00105df:	53                   	push   ebx
c00105e0:	83 ec 04             	sub    esp,0x4
c00105e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00105e7:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00105ea:	85 c9                	test   ecx,ecx
c00105ec:	74 5d                	je     c001064b <SysOpenDir(regs*)+0x6d>
c00105ee:	83 ec 0c             	sub    esp,0xc
c00105f1:	68 14 01 00 00       	push   0x114
c00105f6:	e8 d5 e2 ff ff       	call   c000e8d0 <malloc>
c00105fb:	83 c4 0c             	add    esp,0xc
c00105fe:	89 c6                	mov    esi,eax
c0010600:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010605:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010608:	50                   	push   eax
c0010609:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001060c:	52                   	push   edx
c001060d:	56                   	push   esi
c001060e:	e8 d9 7f ff ff       	call   c00085ec <Directory::Directory(char const*, Process*)>
c0010613:	83 c4 10             	add    esp,0x10
c0010616:	85 f6                	test   esi,esi
c0010618:	74 31                	je     c001064b <SysOpenDir(regs*)+0x6d>
c001061a:	83 ec 0c             	sub    esp,0xc
c001061d:	56                   	push   esi
c001061e:	e8 91 80 ff ff       	call   c00086b4 <Directory::open()>
c0010623:	83 c4 10             	add    esp,0x10
c0010626:	85 c0                	test   eax,eax
c0010628:	75 21                	jne    c001064b <SysOpenDir(regs*)+0x6d>
c001062a:	83 ec 0c             	sub    esp,0xc
c001062d:	56                   	push   esi
c001062e:	e8 c9 14 00 00       	call   c0011afc <UnixFile::getFileDescriptor()>
c0010633:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010636:	83 c4 10             	add    esp,0x10
c0010639:	89 02                	mov    DWORD PTR [edx],eax
c001063b:	c1 f8 1f             	sar    eax,0x1f
c001063e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010641:	83 c4 04             	add    esp,0x4
c0010644:	31 c0                	xor    eax,eax
c0010646:	5b                   	pop    ebx
c0010647:	31 d2                	xor    edx,edx
c0010649:	5e                   	pop    esi
c001064a:	c3                   	ret    
c001064b:	83 c4 04             	add    esp,0x4
c001064e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010653:	5b                   	pop    ebx
c0010654:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010659:	5e                   	pop    esi
c001065a:	c3                   	ret    

c001065b <SysMakeDir(regs*)>:
c001065b:	56                   	push   esi
c001065c:	53                   	push   ebx
c001065d:	83 ec 10             	sub    esp,0x10
c0010660:	68 14 01 00 00       	push   0x114
c0010665:	e8 66 e2 ff ff       	call   c000e8d0 <malloc>
c001066a:	83 c4 0c             	add    esp,0xc
c001066d:	89 c3                	mov    ebx,eax
c001066f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010674:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010677:	50                   	push   eax
c0010678:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001067c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001067f:	52                   	push   edx
c0010680:	53                   	push   ebx
c0010681:	e8 66 7f ff ff       	call   c00085ec <Directory::Directory(char const*, Process*)>
c0010686:	83 c4 10             	add    esp,0x10
c0010689:	85 db                	test   ebx,ebx
c001068b:	74 2c                	je     c00106b9 <SysMakeDir(regs*)+0x5e>
c001068d:	83 ec 0c             	sub    esp,0xc
c0010690:	53                   	push   ebx
c0010691:	e8 fe 81 ff ff       	call   c0008894 <Directory::create()>
c0010696:	89 c6                	mov    esi,eax
c0010698:	8b 03                	mov    eax,DWORD PTR [ebx]
c001069a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001069d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00106a0:	83 c4 10             	add    esp,0x10
c00106a3:	31 c0                	xor    eax,eax
c00106a5:	85 f6                	test   esi,esi
c00106a7:	0f 95 c0             	setne  al
c00106aa:	31 d2                	xor    edx,edx
c00106ac:	f7 d8                	neg    eax
c00106ae:	83 d2 00             	adc    edx,0x0
c00106b1:	83 c4 04             	add    esp,0x4
c00106b4:	5b                   	pop    ebx
c00106b5:	f7 da                	neg    edx
c00106b7:	5e                   	pop    esi
c00106b8:	c3                   	ret    
c00106b9:	83 c4 04             	add    esp,0x4
c00106bc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00106c1:	5b                   	pop    ebx
c00106c2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00106c7:	5e                   	pop    esi
c00106c8:	c3                   	ret    

c00106c9 <SysCloseDir(regs*)>:
c00106c9:	53                   	push   ebx
c00106ca:	ba ff ff ff ff       	mov    edx,0xffffffff
c00106cf:	83 ec 08             	sub    esp,0x8
c00106d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106d6:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00106d9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00106de:	8d 59 fd             	lea    ebx,[ecx-0x3]
c00106e1:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c00106e7:	77 2a                	ja     c0010713 <SysCloseDir(regs*)+0x4a>
c00106e9:	83 ec 0c             	sub    esp,0xc
c00106ec:	51                   	push   ecx
c00106ed:	e8 07 17 00 00       	call   c0011df9 <KeGetFileFromDescriptor(int)>
c00106f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00106f5:	89 c3                	mov    ebx,eax
c00106f7:	e8 14 80 ff ff       	call   c0008710 <Directory::close()>
c00106fc:	83 c4 10             	add    esp,0x10
c00106ff:	85 db                	test   ebx,ebx
c0010701:	74 0c                	je     c001070f <SysCloseDir(regs*)+0x46>
c0010703:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010705:	83 ec 0c             	sub    esp,0xc
c0010708:	53                   	push   ebx
c0010709:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001070c:	83 c4 10             	add    esp,0x10
c001070f:	31 c0                	xor    eax,eax
c0010711:	31 d2                	xor    edx,edx
c0010713:	83 c4 08             	add    esp,0x8
c0010716:	5b                   	pop    ebx
c0010717:	c3                   	ret    

c0010718 <SysWait(regs*)>:
c0010718:	83 ec 10             	sub    esp,0x10
c001071b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001071f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010722:	52                   	push   edx
c0010723:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010726:	51                   	push   ecx
c0010727:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001072a:	50                   	push   eax
c001072b:	e8 b8 4d 00 00       	call   c00154e8 <waitTask(int, int*, int)>
c0010730:	83 c4 1c             	add    esp,0x1c
c0010733:	89 c2                	mov    edx,eax
c0010735:	c1 fa 1f             	sar    edx,0x1f
c0010738:	c3                   	ret    

c0010739 <SysNotImpl(regs*)>:
c0010739:	83 ec 18             	sub    esp,0x18
c001073c:	68 a4 25 02 c0       	push   0xc00225a4
c0010741:	e8 d0 e4 ff ff       	call   c000ec16 <KePanic(char const*)>
c0010746:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001074b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010750:	83 c4 1c             	add    esp,0x1c
c0010753:	c3                   	ret    

c0010754 <SysPanic(regs*)>:
c0010754:	83 ec 18             	sub    esp,0x18
c0010757:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001075b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001075e:	50                   	push   eax
c001075f:	e8 b2 e4 ff ff       	call   c000ec16 <KePanic(char const*)>
c0010764:	b8 01 00 00 00       	mov    eax,0x1
c0010769:	31 d2                	xor    edx,edx
c001076b:	83 c4 1c             	add    esp,0x1c
c001076e:	c3                   	ret    

c001076f <SysRmdir(regs*)>:
c001076f:	56                   	push   esi
c0010770:	53                   	push   ebx
c0010771:	83 ec 10             	sub    esp,0x10
c0010774:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010778:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001077b:	68 14 01 00 00       	push   0x114
c0010780:	e8 4b e1 ff ff       	call   c000e8d0 <malloc>
c0010785:	6a 00                	push   0x0
c0010787:	89 c3                	mov    ebx,eax
c0010789:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001078e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010791:	50                   	push   eax
c0010792:	56                   	push   esi
c0010793:	53                   	push   ebx
c0010794:	e8 95 78 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0010799:	83 c4 14             	add    esp,0x14
c001079c:	53                   	push   ebx
c001079d:	e8 56 7b ff ff       	call   c00082f8 <File::unlink()>
c00107a2:	83 c4 10             	add    esp,0x10
c00107a5:	85 db                	test   ebx,ebx
c00107a7:	89 c6                	mov    esi,eax
c00107a9:	74 0c                	je     c00107b7 <SysRmdir(regs*)+0x48>
c00107ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107ad:	83 ec 0c             	sub    esp,0xc
c00107b0:	53                   	push   ebx
c00107b1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00107b4:	83 c4 10             	add    esp,0x10
c00107b7:	31 c0                	xor    eax,eax
c00107b9:	85 f6                	test   esi,esi
c00107bb:	0f 95 c0             	setne  al
c00107be:	31 d2                	xor    edx,edx
c00107c0:	f7 d8                	neg    eax
c00107c2:	83 d2 00             	adc    edx,0x0
c00107c5:	83 c4 04             	add    esp,0x4
c00107c8:	5b                   	pop    ebx
c00107c9:	f7 da                	neg    edx
c00107cb:	5e                   	pop    esi
c00107cc:	c3                   	ret    

c00107cd <SysUnlink(regs*)>:
c00107cd:	56                   	push   esi
c00107ce:	53                   	push   ebx
c00107cf:	83 ec 10             	sub    esp,0x10
c00107d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00107d6:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00107d9:	68 14 01 00 00       	push   0x114
c00107de:	e8 ed e0 ff ff       	call   c000e8d0 <malloc>
c00107e3:	6a 00                	push   0x0
c00107e5:	89 c3                	mov    ebx,eax
c00107e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00107ec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00107ef:	50                   	push   eax
c00107f0:	56                   	push   esi
c00107f1:	53                   	push   ebx
c00107f2:	e8 37 78 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c00107f7:	83 c4 14             	add    esp,0x14
c00107fa:	53                   	push   ebx
c00107fb:	e8 f8 7a ff ff       	call   c00082f8 <File::unlink()>
c0010800:	83 c4 10             	add    esp,0x10
c0010803:	85 db                	test   ebx,ebx
c0010805:	89 c6                	mov    esi,eax
c0010807:	74 0c                	je     c0010815 <SysUnlink(regs*)+0x48>
c0010809:	8b 03                	mov    eax,DWORD PTR [ebx]
c001080b:	83 ec 0c             	sub    esp,0xc
c001080e:	53                   	push   ebx
c001080f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010812:	83 c4 10             	add    esp,0x10
c0010815:	31 c0                	xor    eax,eax
c0010817:	85 f6                	test   esi,esi
c0010819:	0f 95 c0             	setne  al
c001081c:	31 d2                	xor    edx,edx
c001081e:	f7 d8                	neg    eax
c0010820:	83 d2 00             	adc    edx,0x0
c0010823:	83 c4 04             	add    esp,0x4
c0010826:	5b                   	pop    ebx
c0010827:	f7 da                	neg    edx
c0010829:	5e                   	pop    esi
c001082a:	c3                   	ret    

c001082b <SysGetArgv(regs*)>:
c001082b:	83 ec 0c             	sub    esp,0xc
c001082e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010832:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010835:	85 c0                	test   eax,eax
c0010837:	78 2c                	js     c0010865 <SysGetArgv(regs*)+0x3a>
c0010839:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001083f:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010842:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010848:	7d 1b                	jge    c0010865 <SysGetArgv(regs*)+0x3a>
c001084a:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010851:	85 c0                	test   eax,eax
c0010853:	74 18                	je     c001086d <SysGetArgv(regs*)+0x42>
c0010855:	83 ec 08             	sub    esp,0x8
c0010858:	50                   	push   eax
c0010859:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001085c:	50                   	push   eax
c001085d:	e8 ee fd fe ff       	call   c0000650 <strcpy>
c0010862:	83 c4 10             	add    esp,0x10
c0010865:	31 c0                	xor    eax,eax
c0010867:	31 d2                	xor    edx,edx
c0010869:	83 c4 0c             	add    esp,0xc
c001086c:	c3                   	ret    
c001086d:	b8 01 00 00 00       	mov    eax,0x1
c0010872:	31 d2                	xor    edx,edx
c0010874:	83 c4 0c             	add    esp,0xc
c0010877:	c3                   	ret    

c0010878 <SysUSleep(regs*)>:
c0010878:	83 ec 1c             	sub    esp,0x1c
c001087b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001087f:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010882:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010885:	6a 00                	push   0x0
c0010887:	6a 64                	push   0x64
c0010889:	52                   	push   edx
c001088a:	50                   	push   eax
c001088b:	e8 54 f4 00 00       	call   c001fce4 <__udivdi3>
c0010890:	83 c4 14             	add    esp,0x14
c0010893:	50                   	push   eax
c0010894:	e8 3b 4d 00 00       	call   c00155d4 <milliTenthSleep(unsigned int)>
c0010899:	31 c0                	xor    eax,eax
c001089b:	31 d2                	xor    edx,edx
c001089d:	83 c4 1c             	add    esp,0x1c
c00108a0:	c3                   	ret    

c00108a1 <SysSpawn(regs*)>:
c00108a1:	56                   	push   esi
c00108a2:	53                   	push   ebx
c00108a3:	83 ec 04             	sub    esp,0x4
c00108a6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108aa:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00108ad:	85 f6                	test   esi,esi
c00108af:	75 0a                	jne    c00108bb <SysSpawn(regs*)+0x1a>
c00108b1:	83 c4 04             	add    esp,0x4
c00108b4:	31 c0                	xor    eax,eax
c00108b6:	5b                   	pop    ebx
c00108b7:	31 d2                	xor    edx,edx
c00108b9:	5e                   	pop    esi
c00108ba:	c3                   	ret    
c00108bb:	83 ec 0c             	sub    esp,0xc
c00108be:	68 24 07 00 00       	push   0x724
c00108c3:	e8 08 e0 ff ff       	call   c000e8d0 <malloc>
c00108c8:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00108cb:	83 c4 10             	add    esp,0x10
c00108ce:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00108d1:	89 c6                	mov    esi,eax
c00108d3:	31 c0                	xor    eax,eax
c00108d5:	85 c9                	test   ecx,ecx
c00108d7:	75 08                	jne    c00108e1 <SysSpawn(regs*)+0x40>
c00108d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00108de:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00108e1:	52                   	push   edx
c00108e2:	50                   	push   eax
c00108e3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00108e6:	50                   	push   eax
c00108e7:	56                   	push   esi
c00108e8:	e8 7f 44 00 00       	call   c0014d6c <Process::Process(char const*, Process*, char**)>
c00108ed:	83 c4 10             	add    esp,0x10
c00108f0:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00108f7:	75 b8                	jne    c00108b1 <SysSpawn(regs*)+0x10>
c00108f9:	83 ec 0c             	sub    esp,0xc
c00108fc:	56                   	push   esi
c00108fd:	e8 a6 49 00 00       	call   c00152a8 <Process::createUserThread()>
c0010902:	8b 06                	mov    eax,DWORD PTR [esi]
c0010904:	83 c4 10             	add    esp,0x10
c0010907:	83 c4 04             	add    esp,0x4
c001090a:	5b                   	pop    ebx
c001090b:	89 c2                	mov    edx,eax
c001090d:	c1 fa 1f             	sar    edx,0x1f
c0010910:	5e                   	pop    esi
c0010911:	c3                   	ret    

c0010912 <SysGetEnv(regs*)>:
c0010912:	57                   	push   edi
c0010913:	56                   	push   esi
c0010914:	53                   	push   ebx
c0010915:	83 ec 1c             	sub    esp,0x1c
c0010918:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001091d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010921:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0010924:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010927:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001092a:	51                   	push   ecx
c001092b:	e8 eb d2 ff ff       	call   c000dc1b <KeGetProcessTotalEnvCount(Process*)>
c0010930:	83 c4 10             	add    esp,0x10
c0010933:	39 c7                	cmp    edi,eax
c0010935:	7c 12                	jl     c0010949 <SysGetEnv(regs*)+0x37>
c0010937:	31 c0                	xor    eax,eax
c0010939:	31 d2                	xor    edx,edx
c001093b:	85 f6                	test   esi,esi
c001093d:	74 03                	je     c0010942 <SysGetEnv(regs*)+0x30>
c001093f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010942:	83 c4 10             	add    esp,0x10
c0010945:	5b                   	pop    ebx
c0010946:	5e                   	pop    esi
c0010947:	5f                   	pop    edi
c0010948:	c3                   	ret    
c0010949:	8d 44 24 08          	lea    eax,[esp+0x8]
c001094d:	83 ec 04             	sub    esp,0x4
c0010950:	57                   	push   edi
c0010951:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010957:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c001095a:	57                   	push   edi
c001095b:	50                   	push   eax
c001095c:	e8 da d2 ff ff       	call   c000dc3b <KeGetProcessEnvPair(Process*, int)>
c0010961:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010964:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010968:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001096c:	83 c4 0c             	add    esp,0xc
c001096f:	85 d2                	test   edx,edx
c0010971:	75 23                	jne    c0010996 <SysGetEnv(regs*)+0x84>
c0010973:	83 ec 0c             	sub    esp,0xc
c0010976:	50                   	push   eax
c0010977:	e8 04 fc fe ff       	call   c0000580 <strlen>
c001097c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001097f:	89 c3                	mov    ebx,eax
c0010981:	e8 fa fb fe ff       	call   c0000580 <strlen>
c0010986:	83 c4 10             	add    esp,0x10
c0010989:	31 d2                	xor    edx,edx
c001098b:	83 c4 10             	add    esp,0x10
c001098e:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010992:	5b                   	pop    ebx
c0010993:	5e                   	pop    esi
c0010994:	5f                   	pop    edi
c0010995:	c3                   	ret    
c0010996:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010999:	83 ec 08             	sub    esp,0x8
c001099c:	50                   	push   eax
c001099d:	56                   	push   esi
c001099e:	e8 ad fc fe ff       	call   c0000650 <strcpy>
c00109a3:	58                   	pop    eax
c00109a4:	5a                   	pop    edx
c00109a5:	68 be 25 02 c0       	push   0xc00225be
c00109aa:	56                   	push   esi
c00109ab:	e8 c0 fe fe ff       	call   c0000870 <strcat>
c00109b0:	59                   	pop    ecx
c00109b1:	5b                   	pop    ebx
c00109b2:	57                   	push   edi
c00109b3:	56                   	push   esi
c00109b4:	e8 b7 fe fe ff       	call   c0000870 <strcat>
c00109b9:	83 c4 10             	add    esp,0x10
c00109bc:	31 c0                	xor    eax,eax
c00109be:	83 c4 10             	add    esp,0x10
c00109c1:	31 d2                	xor    edx,edx
c00109c3:	5b                   	pop    ebx
c00109c4:	5e                   	pop    esi
c00109c5:	5f                   	pop    edi
c00109c6:	c3                   	ret    

c00109c7 <SysSetFatAttrib(regs*)>:
c00109c7:	57                   	push   edi
c00109c8:	56                   	push   esi
c00109c9:	53                   	push   ebx
c00109ca:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00109ce:	83 ec 0c             	sub    esp,0xc
c00109d1:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00109d4:	68 14 01 00 00       	push   0x114
c00109d9:	e8 f2 de ff ff       	call   c000e8d0 <malloc>
c00109de:	83 c4 0c             	add    esp,0xc
c00109e1:	89 c3                	mov    ebx,eax
c00109e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109e8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00109eb:	50                   	push   eax
c00109ec:	57                   	push   edi
c00109ed:	53                   	push   ebx
c00109ee:	e8 19 77 ff ff       	call   c000810c <File::File(char const*, Process*)>
c00109f3:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00109f6:	83 c4 0c             	add    esp,0xc
c00109f9:	0f b6 d4             	movzx  edx,ah
c00109fc:	0f b6 c0             	movzx  eax,al
c00109ff:	52                   	push   edx
c0010a00:	50                   	push   eax
c0010a01:	53                   	push   ebx
c0010a02:	e8 8b 79 ff ff       	call   c0008392 <File::chfatattr(unsigned char, unsigned char)>
c0010a07:	83 c4 10             	add    esp,0x10
c0010a0a:	85 db                	test   ebx,ebx
c0010a0c:	89 c6                	mov    esi,eax
c0010a0e:	74 0c                	je     c0010a1c <SysSetFatAttrib(regs*)+0x55>
c0010a10:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010a12:	83 ec 0c             	sub    esp,0xc
c0010a15:	53                   	push   ebx
c0010a16:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010a19:	83 c4 10             	add    esp,0x10
c0010a1c:	5b                   	pop    ebx
c0010a1d:	31 c0                	xor    eax,eax
c0010a1f:	85 f6                	test   esi,esi
c0010a21:	0f 95 c0             	setne  al
c0010a24:	31 d2                	xor    edx,edx
c0010a26:	5e                   	pop    esi
c0010a27:	f7 d8                	neg    eax
c0010a29:	83 d2 00             	adc    edx,0x0
c0010a2c:	f7 da                	neg    edx
c0010a2e:	5f                   	pop    edi
c0010a2f:	c3                   	ret    

c0010a30 <SysShutdown(regs*)>:
c0010a30:	83 ec 1c             	sub    esp,0x1c
c0010a33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a37:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0010a3a:	85 c9                	test   ecx,ecx
c0010a3c:	74 18                	je     c0010a56 <SysShutdown(regs*)+0x26>
c0010a3e:	83 f9 01             	cmp    ecx,0x1
c0010a41:	74 26                	je     c0010a69 <SysShutdown(regs*)+0x39>
c0010a43:	83 f9 02             	cmp    ecx,0x2
c0010a46:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a4b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a50:	74 24                	je     c0010a76 <SysShutdown(regs*)+0x46>
c0010a52:	83 c4 1c             	add    esp,0x1c
c0010a55:	c3                   	ret    
c0010a56:	e8 39 cc ff ff       	call   c000d694 <KeShutdown()>
c0010a5b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a60:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a65:	83 c4 1c             	add    esp,0x1c
c0010a68:	c3                   	ret    
c0010a69:	e8 4a cc ff ff       	call   c000d6b8 <KeSleep()>
c0010a6e:	31 c0                	xor    eax,eax
c0010a70:	31 d2                	xor    edx,edx
c0010a72:	83 c4 1c             	add    esp,0x1c
c0010a75:	c3                   	ret    
c0010a76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010a7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010a7e:	e8 41 cc ff ff       	call   c000d6c4 <KeRestart()>
c0010a83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a87:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010a8b:	eb c5                	jmp    c0010a52 <SysShutdown(regs*)+0x22>

c0010a8d <SysPipe(regs*)>:
c0010a8d:	57                   	push   edi
c0010a8e:	56                   	push   esi
c0010a8f:	53                   	push   ebx
c0010a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a94:	83 ec 0c             	sub    esp,0xc
c0010a97:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010a9a:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010a9d:	6a 20                	push   0x20
c0010a9f:	e8 2c de ff ff       	call   c000e8d0 <malloc>
c0010aa4:	89 c3                	mov    ebx,eax
c0010aa6:	58                   	pop    eax
c0010aa7:	5a                   	pop    edx
c0010aa8:	68 00 50 00 00       	push   0x5000
c0010aad:	53                   	push   ebx
c0010aae:	e8 d1 e9 ff ff       	call   c000f484 <Pipe::Pipe(int)>
c0010ab3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ab6:	e8 41 10 00 00       	call   c0011afc <UnixFile::getFileDescriptor()>
c0010abb:	89 07                	mov    DWORD PTR [edi],eax
c0010abd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ac0:	e8 37 10 00 00       	call   c0011afc <UnixFile::getFileDescriptor()>
c0010ac5:	83 c4 10             	add    esp,0x10
c0010ac8:	31 d2                	xor    edx,edx
c0010aca:	89 06                	mov    DWORD PTR [esi],eax
c0010acc:	31 c0                	xor    eax,eax
c0010ace:	5b                   	pop    ebx
c0010acf:	5e                   	pop    esi
c0010ad0:	5f                   	pop    edi
c0010ad1:	c3                   	ret    

c0010ad2 <SysGetUnixTime(regs*)>:
c0010ad2:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0010ad7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010add:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010ae1:	e9 ae 80 ff ff       	jmp    c0008b94 <Clock::timeInSecondsLocal()>

c0010ae6 <string_ends_with(char const*, char const*)>:
c0010ae6:	57                   	push   edi
c0010ae7:	56                   	push   esi
c0010ae8:	53                   	push   ebx
c0010ae9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010aed:	83 ec 0c             	sub    esp,0xc
c0010af0:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0010af4:	53                   	push   ebx
c0010af5:	e8 86 fa fe ff       	call   c0000580 <strlen>
c0010afa:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010afd:	89 c6                	mov    esi,eax
c0010aff:	e8 7c fa fe ff       	call   c0000580 <strlen>
c0010b04:	83 c4 10             	add    esp,0x10
c0010b07:	31 d2                	xor    edx,edx
c0010b09:	39 c6                	cmp    esi,eax
c0010b0b:	7d 06                	jge    c0010b13 <string_ends_with(char const*, char const*)+0x2d>
c0010b0d:	5b                   	pop    ebx
c0010b0e:	89 d0                	mov    eax,edx
c0010b10:	5e                   	pop    esi
c0010b11:	5f                   	pop    edi
c0010b12:	c3                   	ret    
c0010b13:	83 ec 08             	sub    esp,0x8
c0010b16:	29 c6                	sub    esi,eax
c0010b18:	57                   	push   edi
c0010b19:	01 f3                	add    ebx,esi
c0010b1b:	53                   	push   ebx
c0010b1c:	e8 5f fc fe ff       	call   c0000780 <strcmp>
c0010b21:	83 c4 10             	add    esp,0x10
c0010b24:	31 d2                	xor    edx,edx
c0010b26:	5b                   	pop    ebx
c0010b27:	5e                   	pop    esi
c0010b28:	85 c0                	test   eax,eax
c0010b2a:	5f                   	pop    edi
c0010b2b:	0f 94 c2             	sete   dl
c0010b2e:	89 d0                	mov    eax,edx
c0010b30:	c3                   	ret    

c0010b31 <SysOpen(regs*)>:
c0010b31:	56                   	push   esi
c0010b32:	53                   	push   ebx
c0010b33:	81 ec 04 01 00 00    	sub    esp,0x104
c0010b39:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010b40:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b43:	85 c0                	test   eax,eax
c0010b45:	0f 84 c4 01 00 00    	je     c0010d0f <SysOpen(regs*)+0x1de>
c0010b4b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010b4e:	85 c0                	test   eax,eax
c0010b50:	0f 84 b9 01 00 00    	je     c0010d0f <SysOpen(regs*)+0x1de>
c0010b56:	6a 00                	push   0x0
c0010b58:	68 c0 25 02 c0       	push   0xc00225c0
c0010b5d:	50                   	push   eax
c0010b5e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010b62:	56                   	push   esi
c0010b63:	e8 98 72 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010b68:	89 34 24             	mov    DWORD PTR [esp],esi
c0010b6b:	e8 10 fa fe ff       	call   c0000580 <strlen>
c0010b70:	83 c4 10             	add    esp,0x10
c0010b73:	83 e8 01             	sub    eax,0x1
c0010b76:	74 29                	je     c0010ba1 <SysOpen(regs*)+0x70>
c0010b78:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0010b7c:	83 fa 2e             	cmp    edx,0x2e
c0010b7f:	74 1c                	je     c0010b9d <SysOpen(regs*)+0x6c>
c0010b81:	83 fa 3a             	cmp    edx,0x3a
c0010b84:	74 17                	je     c0010b9d <SysOpen(regs*)+0x6c>
c0010b86:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010b8a:	83 e8 01             	sub    eax,0x1
c0010b8d:	74 12                	je     c0010ba1 <SysOpen(regs*)+0x70>
c0010b8f:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0010b93:	83 fa 3a             	cmp    edx,0x3a
c0010b96:	74 05                	je     c0010b9d <SysOpen(regs*)+0x6c>
c0010b98:	83 fa 2e             	cmp    edx,0x2e
c0010b9b:	75 e9                	jne    c0010b86 <SysOpen(regs*)+0x55>
c0010b9d:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010ba1:	83 ec 08             	sub    esp,0x8
c0010ba4:	68 c4 25 02 c0       	push   0xc00225c4
c0010ba9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010bac:	50                   	push   eax
c0010bad:	e8 34 ff ff ff       	call   c0010ae6 <string_ends_with(char const*, char const*)>
c0010bb2:	83 c4 10             	add    esp,0x10
c0010bb5:	85 c0                	test   eax,eax
c0010bb7:	74 1d                	je     c0010bd6 <SysOpen(regs*)+0xa5>
c0010bb9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010bbc:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010bc2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010bc9:	81 c4 04 01 00 00    	add    esp,0x104
c0010bcf:	31 c0                	xor    eax,eax
c0010bd1:	5b                   	pop    ebx
c0010bd2:	31 d2                	xor    edx,edx
c0010bd4:	5e                   	pop    esi
c0010bd5:	c3                   	ret    
c0010bd6:	83 ec 08             	sub    esp,0x8
c0010bd9:	68 c9 25 02 c0       	push   0xc00225c9
c0010bde:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010be1:	50                   	push   eax
c0010be2:	e8 ff fe ff ff       	call   c0010ae6 <string_ends_with(char const*, char const*)>
c0010be7:	83 c4 10             	add    esp,0x10
c0010bea:	85 c0                	test   eax,eax
c0010bec:	75 cb                	jne    c0010bb9 <SysOpen(regs*)+0x88>
c0010bee:	83 ec 08             	sub    esp,0x8
c0010bf1:	68 c5 25 02 c0       	push   0xc00225c5
c0010bf6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010bf9:	50                   	push   eax
c0010bfa:	e8 81 fb fe ff       	call   c0000780 <strcmp>
c0010bff:	83 c4 10             	add    esp,0x10
c0010c02:	85 c0                	test   eax,eax
c0010c04:	74 b3                	je     c0010bb9 <SysOpen(regs*)+0x88>
c0010c06:	83 ec 08             	sub    esp,0x8
c0010c09:	68 c4 25 02 c0       	push   0xc00225c4
c0010c0e:	56                   	push   esi
c0010c0f:	e8 d2 fe ff ff       	call   c0010ae6 <string_ends_with(char const*, char const*)>
c0010c14:	83 c4 10             	add    esp,0x10
c0010c17:	85 c0                	test   eax,eax
c0010c19:	75 9e                	jne    c0010bb9 <SysOpen(regs*)+0x88>
c0010c1b:	83 ec 08             	sub    esp,0x8
c0010c1e:	68 ce 25 02 c0       	push   0xc00225ce
c0010c23:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c26:	50                   	push   eax
c0010c27:	e8 ba fe ff ff       	call   c0010ae6 <string_ends_with(char const*, char const*)>
c0010c2c:	83 c4 10             	add    esp,0x10
c0010c2f:	85 c0                	test   eax,eax
c0010c31:	0f 85 eb 00 00 00    	jne    c0010d22 <SysOpen(regs*)+0x1f1>
c0010c37:	83 ec 08             	sub    esp,0x8
c0010c3a:	68 d3 25 02 c0       	push   0xc00225d3
c0010c3f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c42:	50                   	push   eax
c0010c43:	e8 9e fe ff ff       	call   c0010ae6 <string_ends_with(char const*, char const*)>
c0010c48:	83 c4 10             	add    esp,0x10
c0010c4b:	85 c0                	test   eax,eax
c0010c4d:	0f 85 cf 00 00 00    	jne    c0010d22 <SysOpen(regs*)+0x1f1>
c0010c53:	83 ec 08             	sub    esp,0x8
c0010c56:	68 cf 25 02 c0       	push   0xc00225cf
c0010c5b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010c5e:	51                   	push   ecx
c0010c5f:	e8 1c fb fe ff       	call   c0000780 <strcmp>
c0010c64:	83 c4 10             	add    esp,0x10
c0010c67:	85 c0                	test   eax,eax
c0010c69:	0f 84 b3 00 00 00    	je     c0010d22 <SysOpen(regs*)+0x1f1>
c0010c6f:	83 ec 08             	sub    esp,0x8
c0010c72:	68 ce 25 02 c0       	push   0xc00225ce
c0010c77:	56                   	push   esi
c0010c78:	e8 69 fe ff ff       	call   c0010ae6 <string_ends_with(char const*, char const*)>
c0010c7d:	83 c4 10             	add    esp,0x10
c0010c80:	85 c0                	test   eax,eax
c0010c82:	0f 85 9a 00 00 00    	jne    c0010d22 <SysOpen(regs*)+0x1f1>
c0010c88:	83 ec 0c             	sub    esp,0xc
c0010c8b:	68 14 01 00 00       	push   0x114
c0010c90:	e8 3b dc ff ff       	call   c000e8d0 <malloc>
c0010c95:	83 c4 0c             	add    esp,0xc
c0010c98:	89 c6                	mov    esi,eax
c0010c9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c9f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ca2:	50                   	push   eax
c0010ca3:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010ca6:	52                   	push   edx
c0010ca7:	56                   	push   esi
c0010ca8:	e8 5f 74 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0010cad:	83 c4 10             	add    esp,0x10
c0010cb0:	85 f6                	test   esi,esi
c0010cb2:	74 5b                	je     c0010d0f <SysOpen(regs*)+0x1de>
c0010cb4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010cb7:	0f b6 c2             	movzx  eax,dl
c0010cba:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010cbd:	89 d0                	mov    eax,edx
c0010cbf:	83 e0 01             	and    eax,0x1
c0010cc2:	f6 c2 02             	test   dl,0x2
c0010cc5:	74 03                	je     c0010cca <SysOpen(regs*)+0x199>
c0010cc7:	83 c8 02             	or     eax,0x2
c0010cca:	f6 c2 04             	test   dl,0x4
c0010ccd:	74 03                	je     c0010cd2 <SysOpen(regs*)+0x1a1>
c0010ccf:	83 c8 04             	or     eax,0x4
c0010cd2:	f6 c2 08             	test   dl,0x8
c0010cd5:	74 03                	je     c0010cda <SysOpen(regs*)+0x1a9>
c0010cd7:	83 c8 0a             	or     eax,0xa
c0010cda:	80 e2 10             	and    dl,0x10
c0010cdd:	74 03                	je     c0010ce2 <SysOpen(regs*)+0x1b1>
c0010cdf:	83 c8 12             	or     eax,0x12
c0010ce2:	83 ec 08             	sub    esp,0x8
c0010ce5:	50                   	push   eax
c0010ce6:	56                   	push   esi
c0010ce7:	e8 3e 74 ff ff       	call   c000812a <File::open(FileOpenMode)>
c0010cec:	83 c4 10             	add    esp,0x10
c0010cef:	85 c0                	test   eax,eax
c0010cf1:	75 1c                	jne    c0010d0f <SysOpen(regs*)+0x1de>
c0010cf3:	83 ec 0c             	sub    esp,0xc
c0010cf6:	56                   	push   esi
c0010cf7:	e8 00 0e 00 00       	call   c0011afc <UnixFile::getFileDescriptor()>
c0010cfc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010cff:	83 c4 10             	add    esp,0x10
c0010d02:	89 02                	mov    DWORD PTR [edx],eax
c0010d04:	c1 f8 1f             	sar    eax,0x1f
c0010d07:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010d0a:	e9 ba fe ff ff       	jmp    c0010bc9 <SysOpen(regs*)+0x98>
c0010d0f:	81 c4 04 01 00 00    	add    esp,0x104
c0010d15:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d1a:	5b                   	pop    ebx
c0010d1b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d20:	5e                   	pop    esi
c0010d21:	c3                   	ret    
c0010d22:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d25:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0010d2b:	e9 92 fe ff ff       	jmp    c0010bc2 <SysOpen(regs*)+0x91>

c0010d30 <KeSystemCall(regs*, void*)>:
c0010d30:	56                   	push   esi
c0010d31:	53                   	push   ebx
c0010d32:	50                   	push   eax
c0010d33:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010d37:	8b 5e 2c             	mov    ebx,DWORD PTR [esi+0x2c]
c0010d3a:	83 fb 40             	cmp    ebx,0x40
c0010d3d:	77 25                	ja     c0010d64 <KeSystemCall(regs*, void*)+0x34>
c0010d3f:	8b 04 9d e0 43 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbc20]
c0010d46:	85 c0                	test   eax,eax
c0010d48:	74 1a                	je     c0010d64 <KeSystemCall(regs*, void*)+0x34>
c0010d4a:	83 ec 0c             	sub    esp,0xc
c0010d4d:	56                   	push   esi
c0010d4e:	ff d0                	call   eax
c0010d50:	83 c4 10             	add    esp,0x10
c0010d53:	83 fb 2f             	cmp    ebx,0x2f
c0010d56:	89 46 2c             	mov    DWORD PTR [esi+0x2c],eax
c0010d59:	75 19                	jne    c0010d74 <KeSystemCall(regs*, void*)+0x44>
c0010d5b:	c6 05 2d 93 02 c0 01 	mov    BYTE PTR ds:0xc002932d,0x1
c0010d62:	eb 10                	jmp    c0010d74 <KeSystemCall(regs*, void*)+0x44>
c0010d64:	56                   	push   esi
c0010d65:	56                   	push   esi
c0010d66:	53                   	push   ebx
c0010d67:	68 d8 25 02 c0       	push   0xc00225d8
c0010d6c:	e8 dd 61 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010d71:	83 c4 10             	add    esp,0x10
c0010d74:	59                   	pop    ecx
c0010d75:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0010d7a:	31 d2                	xor    edx,edx
c0010d7c:	5b                   	pop    ebx
c0010d7d:	5e                   	pop    esi
c0010d7e:	c3                   	ret    
c0010d7f:	90                   	nop

c0010d80 <VgaText::isAtty()>:
c0010d80:	b0 01                	mov    al,0x1
c0010d82:	c3                   	ret    
c0010d83:	90                   	nop

c0010d84 <VgaText::~VgaText()>:
c0010d84:	83 ec 0c             	sub    esp,0xc
c0010d87:	ba 20 26 02 c0       	mov    edx,0xc0022620
c0010d8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d90:	89 10                	mov    DWORD PTR [eax],edx
c0010d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d96:	83 ec 0c             	sub    esp,0xc
c0010d99:	50                   	push   eax
c0010d9a:	e8 4b 0f 00 00       	call   c0011cea <UnixFile::~UnixFile()>
c0010d9f:	83 c4 10             	add    esp,0x10
c0010da2:	90                   	nop
c0010da3:	83 c4 0c             	add    esp,0xc
c0010da6:	c3                   	ret    
c0010da7:	90                   	nop

c0010da8 <VgaText::~VgaText()>:
c0010da8:	83 ec 0c             	sub    esp,0xc
c0010dab:	83 ec 0c             	sub    esp,0xc
c0010dae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010db2:	e8 cd ff ff ff       	call   c0010d84 <VgaText::~VgaText()>
c0010db7:	83 c4 10             	add    esp,0x10
c0010dba:	83 ec 08             	sub    esp,0x8
c0010dbd:	68 84 01 00 00       	push   0x184
c0010dc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dc6:	e8 90 b8 ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0010dcb:	83 c4 10             	add    esp,0x10
c0010dce:	83 c4 0c             	add    esp,0xc
c0010dd1:	c3                   	ret    

c0010dd2 <VgaText::read(unsigned long long, void*, int*)>:
c0010dd2:	83 ec 10             	sub    esp,0x10
c0010dd5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010dd9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010ddd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010de1:	e8 b3 8d ff ff       	call   c0009b99 <readKeyboard(VgaText*, char*, unsigned long)>
c0010de6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010dea:	89 02                	mov    DWORD PTR [edx],eax
c0010dec:	31 c0                	xor    eax,eax
c0010dee:	83 c4 1c             	add    esp,0x1c
c0010df1:	c3                   	ret    

c0010df2 <setTerminalScrollLock(bool)>:
c0010df2:	c3                   	ret    

c0010df3 <doTerminalCycle()>:
c0010df3:	c3                   	ret    

c0010df4 <addToTerminalCycle(VgaText*)>:
c0010df4:	c3                   	ret    

c0010df5 <scrollTerminalScrollLock(int)>:
c0010df5:	c3                   	ret    

c0010df6 <VgaText::updateTitle()>:
c0010df6:	c3                   	ret    
c0010df7:	90                   	nop

c0010df8 <VgaText::load()>:
c0010df8:	c3                   	ret    
c0010df9:	90                   	nop

c0010dfa <VgaText::updateCursor()>:
c0010dfa:	83 ec 14             	sub    esp,0x14
c0010dfd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010e01:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010e04:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010e07:	e8 84 87 00 00       	call   c0019590 <HalConsoleCursorUpdate(int, int)>
c0010e0c:	83 c4 1c             	add    esp,0x1c
c0010e0f:	c3                   	ret    

c0010e10 <VgaText::doANSI_SGR(int)>:
c0010e10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e18:	85 d2                	test   edx,edx
c0010e1a:	75 0b                	jne    c0010e27 <VgaText::doANSI_SGR(int)+0x17>
c0010e1c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010e1f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010e22:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010e25:	eb 59                	jmp    c0010e80 <VgaText::doANSI_SGR(int)+0x70>
c0010e27:	83 fa 07             	cmp    edx,0x7
c0010e2a:	75 0b                	jne    c0010e37 <VgaText::doANSI_SGR(int)+0x27>
c0010e2c:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010e2f:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010e32:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010e35:	eb 49                	jmp    c0010e80 <VgaText::doANSI_SGR(int)+0x70>
c0010e37:	83 fa 1b             	cmp    edx,0x1b
c0010e3a:	74 e0                	je     c0010e1c <VgaText::doANSI_SGR(int)+0xc>
c0010e3c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010e3f:	83 f9 07             	cmp    ecx,0x7
c0010e42:	77 09                	ja     c0010e4d <VgaText::doANSI_SGR(int)+0x3d>
c0010e44:	8b 14 8d 20 45 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdbae0]
c0010e4b:	eb 20                	jmp    c0010e6d <VgaText::doANSI_SGR(int)+0x5d>
c0010e4d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010e50:	83 f9 07             	cmp    ecx,0x7
c0010e53:	77 09                	ja     c0010e5e <VgaText::doANSI_SGR(int)+0x4e>
c0010e55:	8b 14 8d 20 45 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdbae0]
c0010e5c:	eb 22                	jmp    c0010e80 <VgaText::doANSI_SGR(int)+0x70>
c0010e5e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010e61:	83 f9 07             	cmp    ecx,0x7
c0010e64:	77 0b                	ja     c0010e71 <VgaText::doANSI_SGR(int)+0x61>
c0010e66:	8b 14 95 d8 43 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbc28]
c0010e6d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010e70:	c3                   	ret    
c0010e71:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010e74:	83 f9 07             	cmp    ecx,0x7
c0010e77:	77 0a                	ja     c0010e83 <VgaText::doANSI_SGR(int)+0x73>
c0010e79:	8b 14 95 b0 43 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbc50]
c0010e80:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010e83:	c3                   	ret    

c0010e84 <VgaText::setDefaultBgColour(VgaColour)>:
c0010e84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e8c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010e8f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010e92:	c3                   	ret    
c0010e93:	90                   	nop

c0010e94 <VgaText::setDefaultFgColour(VgaColour)>:
c0010e94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e9c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010e9f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010ea2:	c3                   	ret    
c0010ea3:	90                   	nop

c0010ea4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010ea4:	53                   	push   ebx
c0010ea5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010ea9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010ead:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010eb1:	51                   	push   ecx
c0010eb2:	e8 cd ff ff ff       	call   c0010e84 <VgaText::setDefaultBgColour(VgaColour)>
c0010eb7:	58                   	pop    eax
c0010eb8:	5a                   	pop    edx
c0010eb9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010ebd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010ec1:	5b                   	pop    ebx
c0010ec2:	eb d0                	jmp    c0010e94 <VgaText::setDefaultFgColour(VgaColour)>

c0010ec4 <VgaText::setTitleTextColour(VgaColour)>:
c0010ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ec8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ecc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010ecf:	c3                   	ret    

c0010ed0 <VgaText::setTitleColour(VgaColour)>:
c0010ed0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ed4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ed8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010edb:	c3                   	ret    

c0010edc <VgaText::setTitle(char*)>:
c0010edc:	c3                   	ret    
c0010edd:	90                   	nop

c0010ede <VgaText::combineColours(unsigned char, unsigned char)>:
c0010ede:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ee2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010ee7:	83 e0 0f             	and    eax,0xf
c0010eea:	c1 e2 04             	shl    edx,0x4
c0010eed:	09 d0                	or     eax,edx
c0010eef:	c3                   	ret    

c0010ef0 <VgaText::scrollScreen()>:
c0010ef0:	55                   	push   ebp
c0010ef1:	57                   	push   edi
c0010ef2:	56                   	push   esi
c0010ef3:	be 01 00 00 00       	mov    esi,0x1
c0010ef8:	53                   	push   ebx
c0010ef9:	83 ec 0c             	sub    esp,0xc
c0010efc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010f00:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010f03:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010f09:	31 ff                	xor    edi,edi
c0010f0b:	01 e9                	add    ecx,ebp
c0010f0d:	8a 01                	mov    al,BYTE PTR [ecx]
c0010f0f:	83 fe 18             	cmp    esi,0x18
c0010f12:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0010f18:	75 20                	jne    c0010f3a <VgaText::scrollScreen()+0x4a>
c0010f1a:	f7 c7 01 00 00 00    	test   edi,0x1
c0010f20:	74 15                	je     c0010f37 <VgaText::scrollScreen()+0x47>
c0010f22:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010f26:	50                   	push   eax
c0010f27:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010f2b:	50                   	push   eax
c0010f2c:	e8 ad ff ff ff       	call   c0010ede <VgaText::combineColours(unsigned char, unsigned char)>
c0010f31:	5a                   	pop    edx
c0010f32:	5a                   	pop    edx
c0010f33:	88 01                	mov    BYTE PTR [ecx],al
c0010f35:	eb 03                	jmp    c0010f3a <VgaText::scrollScreen()+0x4a>
c0010f37:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0010f3a:	47                   	inc    edi
c0010f3b:	41                   	inc    ecx
c0010f3c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010f42:	75 c9                	jne    c0010f0d <VgaText::scrollScreen()+0x1d>
c0010f44:	46                   	inc    esi
c0010f45:	83 fe 19             	cmp    esi,0x19
c0010f48:	75 b9                	jne    c0010f03 <VgaText::scrollScreen()+0x13>
c0010f4a:	39 1d 34 be 02 c0    	cmp    DWORD PTR ds:0xc002be34,ebx
c0010f50:	75 1f                	jne    c0010f71 <VgaText::scrollScreen()+0x81>
c0010f52:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010f56:	74 05                	je     c0010f5d <VgaText::scrollScreen()+0x6d>
c0010f58:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010f5b:	eb 14                	jmp    c0010f71 <VgaText::scrollScreen()+0x81>
c0010f5d:	50                   	push   eax
c0010f5e:	50                   	push   eax
c0010f5f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010f63:	50                   	push   eax
c0010f64:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010f68:	50                   	push   eax
c0010f69:	e8 b6 84 00 00       	call   c0019424 <HalConsoleScroll(int, int)>
c0010f6e:	83 c4 10             	add    esp,0x10
c0010f71:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010f75:	83 c4 0c             	add    esp,0xc
c0010f78:	5b                   	pop    ebx
c0010f79:	5e                   	pop    esi
c0010f7a:	5f                   	pop    edi
c0010f7b:	5d                   	pop    ebp
c0010f7c:	e9 79 fe ff ff       	jmp    c0010dfa <VgaText::updateCursor()>
c0010f81:	90                   	nop

c0010f82 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010f82:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010f87:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0010f8c:	c1 e0 08             	shl    eax,0x8
c0010f8f:	09 d0                	or     eax,edx
c0010f91:	c3                   	ret    

c0010f92 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010f92:	55                   	push   ebp
c0010f93:	57                   	push   edi
c0010f94:	56                   	push   esi
c0010f95:	53                   	push   ebx
c0010f96:	83 ec 1c             	sub    esp,0x1c
c0010f99:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010f9d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0010fa1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010fa5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010fa9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010fad:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0010fb1:	0f b6 c3             	movzx  eax,bl
c0010fb4:	50                   	push   eax
c0010fb5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0010fba:	50                   	push   eax
c0010fbb:	e8 1e ff ff ff       	call   c0010ede <VgaText::combineColours(unsigned char, unsigned char)>
c0010fc0:	5a                   	pop    edx
c0010fc1:	59                   	pop    ecx
c0010fc2:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0010fc7:	0f b6 c0             	movzx  eax,al
c0010fca:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010fce:	50                   	push   eax
c0010fcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010fd3:	e8 aa ff ff ff       	call   c0010f82 <VgaText::combineCharAndColour(char, unsigned char)>
c0010fd8:	5a                   	pop    edx
c0010fd9:	6b d7 50             	imul   edx,edi,0x50
c0010fdc:	59                   	pop    ecx
c0010fdd:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0010fe0:	01 f2                	add    edx,esi
c0010fe2:	0f b7 d2             	movzx  edx,dx
c0010fe5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0010fe9:	39 2d 34 be 02 c0    	cmp    DWORD PTR ds:0xc002be34,ebp
c0010fef:	75 28                	jne    c0011019 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0010ff1:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0010ff5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ff9:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0010ffd:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0011001:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0011005:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011009:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001100d:	83 c4 1c             	add    esp,0x1c
c0011010:	5b                   	pop    ebx
c0011011:	5e                   	pop    esi
c0011012:	5f                   	pop    edi
c0011013:	5d                   	pop    ebp
c0011014:	e9 13 85 00 00       	jmp    c001952c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0011019:	83 c4 1c             	add    esp,0x1c
c001101c:	5b                   	pop    ebx
c001101d:	5e                   	pop    esi
c001101e:	5f                   	pop    edi
c001101f:	5d                   	pop    ebp
c0011020:	c3                   	ret    
c0011021:	90                   	nop

c0011022 <VgaText::getCursorX()>:
c0011022:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011026:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011029:	c3                   	ret    

c001102a <VgaText::getCursorY()>:
c001102a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001102e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011031:	c3                   	ret    

c0011032 <VgaText::setCursor(int, int)>:
c0011032:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011036:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001103a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001103d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011041:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0011044:	e9 b1 fd ff ff       	jmp    c0010dfa <VgaText::updateCursor()>

c0011049 <setActiveTerminal(VgaText*)>:
c0011049:	53                   	push   ebx
c001104a:	83 ec 08             	sub    esp,0x8
c001104d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011051:	85 db                	test   ebx,ebx
c0011053:	75 11                	jne    c0011066 <setActiveTerminal(VgaText*)+0x1d>
c0011055:	c7 44 24 10 ec 25 02 c0 	mov    DWORD PTR [esp+0x10],0xc00225ec
c001105d:	83 c4 08             	add    esp,0x8
c0011060:	5b                   	pop    ebx
c0011061:	e9 b0 db ff ff       	jmp    c000ec16 <KePanic(char const*)>
c0011066:	a1 34 be 02 c0       	mov    eax,ds:0xc002be34
c001106b:	85 c0                	test   eax,eax
c001106d:	74 0c                	je     c001107b <setActiveTerminal(VgaText*)+0x32>
c001106f:	83 ec 0c             	sub    esp,0xc
c0011072:	50                   	push   eax
c0011073:	e8 82 fd ff ff       	call   c0010dfa <VgaText::updateCursor()>
c0011078:	83 c4 10             	add    esp,0x10
c001107b:	50                   	push   eax
c001107c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001107f:	89 1d 34 be 02 c0    	mov    DWORD PTR ds:0xc002be34,ebx
c0011085:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011088:	53                   	push   ebx
c0011089:	e8 a4 ff ff ff       	call   c0011032 <VgaText::setCursor(int, int)>
c001108e:	83 c4 18             	add    esp,0x18
c0011091:	5b                   	pop    ebx
c0011092:	c3                   	ret    
c0011093:	90                   	nop

c0011094 <VgaText::clearScreen()>:
c0011094:	57                   	push   edi
c0011095:	56                   	push   esi
c0011096:	31 f6                	xor    esi,esi
c0011098:	53                   	push   ebx
c0011099:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001109d:	52                   	push   edx
c001109e:	6a 00                	push   0x0
c00110a0:	6a 00                	push   0x0
c00110a2:	53                   	push   ebx
c00110a3:	e8 8a ff ff ff       	call   c0011032 <VgaText::setCursor(int, int)>
c00110a8:	83 c4 10             	add    esp,0x10
c00110ab:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00110b2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00110b5:	7e 20                	jle    c00110d7 <VgaText::clearScreen()+0x43>
c00110b7:	31 ff                	xor    edi,edi
c00110b9:	50                   	push   eax
c00110ba:	50                   	push   eax
c00110bb:	56                   	push   esi
c00110bc:	57                   	push   edi
c00110bd:	47                   	inc    edi
c00110be:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00110c1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00110c4:	6a 20                	push   0x20
c00110c6:	53                   	push   ebx
c00110c7:	e8 c6 fe ff ff       	call   c0010f92 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00110cc:	83 c4 20             	add    esp,0x20
c00110cf:	83 ff 50             	cmp    edi,0x50
c00110d2:	75 e5                	jne    c00110b9 <VgaText::clearScreen()+0x25>
c00110d4:	46                   	inc    esi
c00110d5:	eb db                	jmp    c00110b2 <VgaText::clearScreen()+0x1e>
c00110d7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00110de:	5b                   	pop    ebx
c00110df:	5e                   	pop    esi
c00110e0:	5f                   	pop    edi
c00110e1:	c3                   	ret    

c00110e2 <VgaText::setCursorX(int)>:
c00110e2:	83 ec 10             	sub    esp,0x10
c00110e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00110e9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00110ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110f0:	50                   	push   eax
c00110f1:	e8 3c ff ff ff       	call   c0011032 <VgaText::setCursor(int, int)>
c00110f6:	83 c4 1c             	add    esp,0x1c
c00110f9:	c3                   	ret    

c00110fa <VgaText::setCursorY(int)>:
c00110fa:	83 ec 10             	sub    esp,0x10
c00110fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011101:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011105:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0011108:	50                   	push   eax
c0011109:	e8 24 ff ff ff       	call   c0011032 <VgaText::setCursor(int, int)>
c001110e:	83 c4 1c             	add    esp,0x1c
c0011111:	c3                   	ret    

c0011112 <VgaText::incrementCursor(bool)>:
c0011112:	56                   	push   esi
c0011113:	53                   	push   ebx
c0011114:	51                   	push   ecx
c0011115:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011119:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001111d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0011120:	40                   	inc    eax
c0011121:	83 f8 50             	cmp    eax,0x50
c0011124:	74 05                	je     c001112b <VgaText::incrementCursor(bool)+0x19>
c0011126:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0011129:	eb 24                	jmp    c001114f <VgaText::incrementCursor(bool)+0x3d>
c001112b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011132:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011135:	8d 50 01             	lea    edx,[eax+0x1]
c0011138:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001113b:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001113e:	75 0f                	jne    c001114f <VgaText::incrementCursor(bool)+0x3d>
c0011140:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0011143:	83 ec 0c             	sub    esp,0xc
c0011146:	53                   	push   ebx
c0011147:	e8 a4 fd ff ff       	call   c0010ef0 <VgaText::scrollScreen()>
c001114c:	83 c4 10             	add    esp,0x10
c001114f:	89 f0                	mov    eax,esi
c0011151:	84 c0                	test   al,al
c0011153:	74 0c                	je     c0011161 <VgaText::incrementCursor(bool)+0x4f>
c0011155:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0011159:	5a                   	pop    edx
c001115a:	5b                   	pop    ebx
c001115b:	5e                   	pop    esi
c001115c:	e9 99 fc ff ff       	jmp    c0010dfa <VgaText::updateCursor()>
c0011161:	58                   	pop    eax
c0011162:	5b                   	pop    ebx
c0011163:	5e                   	pop    esi
c0011164:	c3                   	ret    
c0011165:	90                   	nop

c0011166 <VgaText::decrementCursor(bool)>:
c0011166:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001116a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001116e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0011171:	85 c0                	test   eax,eax
c0011173:	74 04                	je     c0011179 <VgaText::decrementCursor(bool)+0x13>
c0011175:	48                   	dec    eax
c0011176:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0011179:	84 c9                	test   cl,cl
c001117b:	74 09                	je     c0011186 <VgaText::decrementCursor(bool)+0x20>
c001117d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011181:	e9 74 fc ff ff       	jmp    c0010dfa <VgaText::updateCursor()>
c0011186:	c3                   	ret    
c0011187:	90                   	nop

c0011188 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0011188:	53                   	push   ebx
c0011189:	83 ec 08             	sub    esp,0x8
c001118c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0011191:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011195:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011199:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001119d:	83 f8 07             	cmp    eax,0x7
c00111a0:	75 21                	jne    c00111c3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00111a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00111aa:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00111b2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00111ba:	83 c4 08             	add    esp,0x8
c00111bd:	5b                   	pop    ebx
c00111be:	e9 eb 77 ff ff       	jmp    c00089ae <KeBeep(int, int, bool)>
c00111c3:	83 f8 0d             	cmp    eax,0xd
c00111c6:	75 09                	jne    c00111d1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00111c8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00111cf:	eb 2d                	jmp    c00111fe <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00111d1:	83 f8 0a             	cmp    eax,0xa
c00111d4:	75 31                	jne    c0011207 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00111d6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00111dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00111e0:	8d 50 01             	lea    edx,[eax+0x1]
c00111e3:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00111e6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00111e9:	75 0f                	jne    c00111fa <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00111eb:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00111ee:	83 ec 0c             	sub    esp,0xc
c00111f1:	53                   	push   ebx
c00111f2:	e8 f9 fc ff ff       	call   c0010ef0 <VgaText::scrollScreen()>
c00111f7:	83 c4 10             	add    esp,0x10
c00111fa:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00111fe:	83 c4 08             	add    esp,0x8
c0011201:	5b                   	pop    ebx
c0011202:	e9 f3 fb ff ff       	jmp    c0010dfa <VgaText::updateCursor()>
c0011207:	83 f8 08             	cmp    eax,0x8
c001120a:	75 25                	jne    c0011231 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c001120c:	50                   	push   eax
c001120d:	50                   	push   eax
c001120e:	6a 01                	push   0x1
c0011210:	53                   	push   ebx
c0011211:	e8 50 ff ff ff       	call   c0011166 <VgaText::decrementCursor(bool)>
c0011216:	5a                   	pop    edx
c0011217:	59                   	pop    ecx
c0011218:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001121b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001121e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011221:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011224:	6a 20                	push   0x20
c0011226:	53                   	push   ebx
c0011227:	e8 66 fd ff ff       	call   c0010f92 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001122c:	83 c4 28             	add    esp,0x28
c001122f:	5b                   	pop    ebx
c0011230:	c3                   	ret    
c0011231:	83 ec 08             	sub    esp,0x8
c0011234:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011237:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001123a:	51                   	push   ecx
c001123b:	52                   	push   edx
c001123c:	50                   	push   eax
c001123d:	53                   	push   ebx
c001123e:	e8 4f fd ff ff       	call   c0010f92 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011243:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0011247:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001124f:	83 c4 28             	add    esp,0x28
c0011252:	5b                   	pop    ebx
c0011253:	e9 ba fe ff ff       	jmp    c0011112 <VgaText::incrementCursor(bool)>

c0011258 <VgaText::putchar(char)>:
c0011258:	57                   	push   edi
c0011259:	56                   	push   esi
c001125a:	53                   	push   ebx
c001125b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001125f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011263:	0f be c2             	movsx  eax,dl
c0011266:	83 f8 5b             	cmp    eax,0x5b
c0011269:	75 18                	jne    c0011283 <VgaText::putchar(char)+0x2b>
c001126b:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c001126f:	74 20                	je     c0011291 <VgaText::putchar(char)+0x39>
c0011271:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0011277:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c001127e:	e9 b8 00 00 00       	jmp    c001133b <VgaText::putchar(char)+0xe3>
c0011283:	83 f8 1b             	cmp    eax,0x1b
c0011286:	75 09                	jne    c0011291 <VgaText::putchar(char)+0x39>
c0011288:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001128c:	e9 aa 00 00 00       	jmp    c001133b <VgaText::putchar(char)+0xe3>
c0011291:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c0011295:	89 f9                	mov    ecx,edi
c0011297:	84 c9                	test   cl,cl
c0011299:	0f 84 8c 00 00 00    	je     c001132b <VgaText::putchar(char)+0xd3>
c001129f:	8d 4a c0             	lea    ecx,[edx-0x40]
c00112a2:	80 f9 3e             	cmp    cl,0x3e
c00112a5:	77 70                	ja     c0011317 <VgaText::putchar(char)+0xbf>
c00112a7:	83 f8 6d             	cmp    eax,0x6d
c00112aa:	75 3f                	jne    c00112eb <VgaText::putchar(char)+0x93>
c00112ac:	31 f6                	xor    esi,esi
c00112ae:	31 d2                	xor    edx,edx
c00112b0:	31 c0                	xor    eax,eax
c00112b2:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00112b5:	7e 25                	jle    c00112dc <VgaText::putchar(char)+0x84>
c00112b7:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00112bc:	83 fa 3b             	cmp    edx,0x3b
c00112bf:	75 0f                	jne    c00112d0 <VgaText::putchar(char)+0x78>
c00112c1:	50                   	push   eax
c00112c2:	53                   	push   ebx
c00112c3:	e8 48 fb ff ff       	call   c0010e10 <VgaText::doANSI_SGR(int)>
c00112c8:	31 d2                	xor    edx,edx
c00112ca:	59                   	pop    ecx
c00112cb:	58                   	pop    eax
c00112cc:	31 c0                	xor    eax,eax
c00112ce:	eb 09                	jmp    c00112d9 <VgaText::putchar(char)+0x81>
c00112d0:	6b c0 0a             	imul   eax,eax,0xa
c00112d3:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00112d7:	89 fa                	mov    edx,edi
c00112d9:	46                   	inc    esi
c00112da:	eb d6                	jmp    c00112b2 <VgaText::putchar(char)+0x5a>
c00112dc:	84 d2                	test   dl,dl
c00112de:	74 2f                	je     c001130f <VgaText::putchar(char)+0xb7>
c00112e0:	50                   	push   eax
c00112e1:	53                   	push   ebx
c00112e2:	e8 29 fb ff ff       	call   c0010e10 <VgaText::doANSI_SGR(int)>
c00112e7:	58                   	pop    eax
c00112e8:	5a                   	pop    edx
c00112e9:	eb 24                	jmp    c001130f <VgaText::putchar(char)+0xb7>
c00112eb:	83 f8 4a             	cmp    eax,0x4a
c00112ee:	75 1f                	jne    c001130f <VgaText::putchar(char)+0xb7>
c00112f0:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00112f4:	75 19                	jne    c001130f <VgaText::putchar(char)+0xb7>
c00112f6:	83 ec 0c             	sub    esp,0xc
c00112f9:	53                   	push   ebx
c00112fa:	e8 95 fd ff ff       	call   c0011094 <VgaText::clearScreen()>
c00112ff:	83 c4 0c             	add    esp,0xc
c0011302:	6a 00                	push   0x0
c0011304:	6a 00                	push   0x0
c0011306:	53                   	push   ebx
c0011307:	e8 26 fd ff ff       	call   c0011032 <VgaText::setCursor(int, int)>
c001130c:	83 c4 10             	add    esp,0x10
c001130f:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0011315:	eb 24                	jmp    c001133b <VgaText::putchar(char)+0xe3>
c0011317:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c001131a:	83 f8 0e             	cmp    eax,0xe
c001131d:	7f 1c                	jg     c001133b <VgaText::putchar(char)+0xe3>
c001131f:	8d 48 01             	lea    ecx,[eax+0x1]
c0011322:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0011325:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0011329:	eb 10                	jmp    c001133b <VgaText::putchar(char)+0xe3>
c001132b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001132e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011331:	50                   	push   eax
c0011332:	53                   	push   ebx
c0011333:	e8 50 fe ff ff       	call   c0011188 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011338:	83 c4 10             	add    esp,0x10
c001133b:	5b                   	pop    ebx
c001133c:	5e                   	pop    esi
c001133d:	5f                   	pop    edi
c001133e:	c3                   	ret    
c001133f:	90                   	nop

c0011340 <VgaText::putx(unsigned int)>:
c0011340:	57                   	push   edi
c0011341:	b9 11 00 00 00       	mov    ecx,0x11
c0011346:	56                   	push   esi
c0011347:	be fa 25 02 c0       	mov    esi,0xc00225fa
c001134c:	53                   	push   ebx
c001134d:	83 ec 20             	sub    esp,0x20
c0011350:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011354:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011358:	fc                   	cld    
c0011359:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001135b:	be 08 00 00 00       	mov    esi,0x8
c0011360:	50                   	push   eax
c0011361:	50                   	push   eax
c0011362:	89 d8                	mov    eax,ebx
c0011364:	c1 e8 1c             	shr    eax,0x1c
c0011367:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001136c:	c1 e3 04             	shl    ebx,0x4
c001136f:	50                   	push   eax
c0011370:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011374:	e8 df fe ff ff       	call   c0011258 <VgaText::putchar(char)>
c0011379:	83 c4 10             	add    esp,0x10
c001137c:	4e                   	dec    esi
c001137d:	75 e1                	jne    c0011360 <VgaText::putx(unsigned int)+0x20>
c001137f:	83 c4 20             	add    esp,0x20
c0011382:	5b                   	pop    ebx
c0011383:	5e                   	pop    esi
c0011384:	5f                   	pop    edi
c0011385:	c3                   	ret    

c0011386 <VgaText::puts(char const*)>:
c0011386:	53                   	push   ebx
c0011387:	83 ec 08             	sub    esp,0x8
c001138a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001138e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011391:	85 c0                	test   eax,eax
c0011393:	74 12                	je     c00113a7 <VgaText::puts(char const*)+0x21>
c0011395:	51                   	push   ecx
c0011396:	43                   	inc    ebx
c0011397:	51                   	push   ecx
c0011398:	50                   	push   eax
c0011399:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001139d:	e8 b6 fe ff ff       	call   c0011258 <VgaText::putchar(char)>
c00113a2:	83 c4 10             	add    esp,0x10
c00113a5:	eb e7                	jmp    c001138e <VgaText::puts(char const*)+0x8>
c00113a7:	83 c4 08             	add    esp,0x8
c00113aa:	5b                   	pop    ebx
c00113ab:	c3                   	ret    

c00113ac <VgaText::write(unsigned long long, void*, int*)>:
c00113ac:	55                   	push   ebp
c00113ad:	57                   	push   edi
c00113ae:	56                   	push   esi
c00113af:	53                   	push   ebx
c00113b0:	83 ec 0c             	sub    esp,0xc
c00113b3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00113b7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00113bb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00113bf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00113c6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00113c9:	39 eb                	cmp    ebx,ebp
c00113cb:	74 13                	je     c00113e0 <VgaText::write(unsigned long long, void*, int*)+0x34>
c00113cd:	50                   	push   eax
c00113ce:	43                   	inc    ebx
c00113cf:	50                   	push   eax
c00113d0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00113d4:	50                   	push   eax
c00113d5:	56                   	push   esi
c00113d6:	e8 7d fe ff ff       	call   c0011258 <VgaText::putchar(char)>
c00113db:	83 c4 10             	add    esp,0x10
c00113de:	eb e9                	jmp    c00113c9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00113e0:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00113e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113eb:	89 38                	mov    DWORD PTR [eax],edi
c00113ed:	83 c4 0c             	add    esp,0xc
c00113f0:	31 c0                	xor    eax,eax
c00113f2:	5b                   	pop    ebx
c00113f3:	5e                   	pop    esi
c00113f4:	5f                   	pop    edi
c00113f5:	5d                   	pop    ebp
c00113f6:	c3                   	ret    
c00113f7:	90                   	nop

c00113f8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00113f8:	55                   	push   ebp
c00113f9:	57                   	push   edi
c00113fa:	56                   	push   esi
c00113fb:	53                   	push   ebx
c00113fc:	83 ec 0c             	sub    esp,0xc
c00113ff:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0011403:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0011408:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c001140f:	50                   	push   eax
c0011410:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0011415:	50                   	push   eax
c0011416:	e8 c3 fa ff ff       	call   c0010ede <VgaText::combineColours(unsigned char, unsigned char)>
c001141b:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c001141f:	5a                   	pop    edx
c0011420:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0011423:	59                   	pop    ecx
c0011424:	0f b6 f8             	movzx  edi,al
c0011427:	0f b7 db             	movzx  ebx,bx
c001142a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001142e:	01 db                	add    ebx,ebx
c0011430:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0011433:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0011436:	85 c0                	test   eax,eax
c0011438:	0f 84 ef 00 00 00    	je     c001152d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c001143e:	83 f8 0d             	cmp    eax,0xd
c0011441:	75 0c                	jne    c001144f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0011443:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c001144a:	e9 d8 00 00 00       	jmp    c0011527 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c001144f:	83 f8 0a             	cmp    eax,0xa
c0011452:	75 44                	jne    c0011498 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0011454:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c001145b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001145e:	8d 48 01             	lea    ecx,[eax+0x1]
c0011461:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0011464:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0011467:	75 0f                	jne    c0011478 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0011469:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c001146c:	83 ec 0c             	sub    esp,0xc
c001146f:	55                   	push   ebp
c0011470:	e8 7b fa ff ff       	call   c0010ef0 <VgaText::scrollScreen()>
c0011475:	83 c4 10             	add    esp,0x10
c0011478:	83 ec 0c             	sub    esp,0xc
c001147b:	55                   	push   ebp
c001147c:	e8 79 f9 ff ff       	call   c0010dfa <VgaText::updateCursor()>
c0011481:	83 c4 10             	add    esp,0x10
c0011484:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0011488:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c001148b:	0f b7 db             	movzx  ebx,bx
c001148e:	01 db                	add    ebx,ebx
c0011490:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0011493:	e9 8f 00 00 00       	jmp    c0011527 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0011498:	83 f8 08             	cmp    eax,0x8
c001149b:	75 34                	jne    c00114d1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c001149d:	51                   	push   ecx
c001149e:	51                   	push   ecx
c001149f:	6a 01                	push   0x1
c00114a1:	55                   	push   ebp
c00114a2:	e8 bf fc ff ff       	call   c0011166 <VgaText::decrementCursor(bool)>
c00114a7:	5b                   	pop    ebx
c00114a8:	58                   	pop    eax
c00114a9:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c00114ac:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00114af:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c00114b2:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c00114b5:	6a 20                	push   0x20
c00114b7:	55                   	push   ebp
c00114b8:	e8 d5 fa ff ff       	call   c0010f92 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00114bd:	83 c4 20             	add    esp,0x20
c00114c0:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c00114c4:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c00114c7:	0f b7 db             	movzx  ebx,bx
c00114ca:	01 db                	add    ebx,ebx
c00114cc:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c00114cf:	eb 56                	jmp    c0011527 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00114d1:	52                   	push   edx
c00114d2:	52                   	push   edx
c00114d3:	57                   	push   edi
c00114d4:	50                   	push   eax
c00114d5:	e8 a8 fa ff ff       	call   c0010f82 <VgaText::combineCharAndColour(char, unsigned char)>
c00114da:	83 c4 10             	add    esp,0x10
c00114dd:	66 89 03             	mov    WORD PTR [ebx],ax
c00114e0:	39 2d 34 be 02 c0    	cmp    DWORD PTR ds:0xc002be34,ebp
c00114e6:	75 1d                	jne    c0011505 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c00114e8:	83 ec 0c             	sub    esp,0xc
c00114eb:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c00114ee:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00114f1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00114f5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00114f9:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00114fc:	50                   	push   eax
c00114fd:	e8 2a 80 00 00       	call   c001952c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0011502:	83 c4 20             	add    esp,0x20
c0011505:	50                   	push   eax
c0011506:	83 c3 02             	add    ebx,0x2
c0011509:	50                   	push   eax
c001150a:	6a 00                	push   0x0
c001150c:	55                   	push   ebp
c001150d:	e8 00 fc ff ff       	call   c0011112 <VgaText::incrementCursor(bool)>
c0011512:	83 c4 10             	add    esp,0x10
c0011515:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0011519:	75 0c                	jne    c0011527 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c001151b:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c001151f:	0f b7 db             	movzx  ebx,bx
c0011522:	01 db                	add    ebx,ebx
c0011524:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0011527:	46                   	inc    esi
c0011528:	e9 06 ff ff ff       	jmp    c0011433 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c001152d:	83 ec 0c             	sub    esp,0xc
c0011530:	55                   	push   ebp
c0011531:	e8 c4 f8 ff ff       	call   c0010dfa <VgaText::updateCursor()>
c0011536:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c001153d:	83 c4 1c             	add    esp,0x1c
c0011540:	5b                   	pop    ebx
c0011541:	5e                   	pop    esi
c0011542:	5f                   	pop    edi
c0011543:	5d                   	pop    ebp
c0011544:	c3                   	ret    
c0011545:	90                   	nop

c0011546 <VgaText::VgaText(char const*)>:
c0011546:	56                   	push   esi
c0011547:	53                   	push   ebx
c0011548:	83 ec 04             	sub    esp,0x4
c001154b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001154f:	83 ec 08             	sub    esp,0x8
c0011552:	6a 00                	push   0x0
c0011554:	50                   	push   eax
c0011555:	e8 aa 05 00 00       	call   c0011b04 <UnixFile::UnixFile(int)>
c001155a:	83 c4 10             	add    esp,0x10
c001155d:	ba 20 26 02 c0       	mov    edx,0xc0022620
c0011562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011566:	89 10                	mov    DWORD PTR [eax],edx
c0011568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001156c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0011573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011577:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c001157e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011582:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0011586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001158a:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c001158e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011592:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0011599:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001159d:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00115a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115a8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00115af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115b3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00115ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115be:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00115c5:	83 ec 0c             	sub    esp,0xc
c00115c8:	6a 01                	push   0x1
c00115ca:	e8 84 09 00 00       	call   c0011f53 <Virt::allocateKernelVirtualPages(int)>
c00115cf:	83 c4 10             	add    esp,0x10
c00115d2:	89 c2                	mov    edx,eax
c00115d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115d8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00115db:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c00115e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115e5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00115e8:	89 c6                	mov    esi,eax
c00115ea:	e8 21 d8 ff ff       	call   c000ee10 <Phys::allocatePage()>
c00115ef:	68 05 0c 00 00       	push   0xc05
c00115f4:	56                   	push   esi
c00115f5:	50                   	push   eax
c00115f6:	53                   	push   ebx
c00115f7:	e8 30 10 00 00       	call   c001262c <VAS::mapPage(unsigned long, unsigned long, int)>
c00115fc:	83 c4 10             	add    esp,0x10
c00115ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011603:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011606:	83 ec 04             	sub    esp,0x4
c0011609:	68 a0 0f 00 00       	push   0xfa0
c001160e:	6a 00                	push   0x0
c0011610:	50                   	push   eax
c0011611:	e8 da ee fe ff       	call   c00004f0 <memset>
c0011616:	83 c4 10             	add    esp,0x10
c0011619:	83 ec 04             	sub    esp,0x4
c001161c:	6a 00                	push   0x0
c001161e:	6a 07                	push   0x7
c0011620:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011624:	e8 7b f8 ff ff       	call   c0010ea4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011629:	83 c4 10             	add    esp,0x10
c001162c:	83 ec 04             	sub    esp,0x4
c001162f:	6a 00                	push   0x0
c0011631:	6a 00                	push   0x0
c0011633:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011637:	e8 f6 f9 ff ff       	call   c0011032 <VgaText::setCursor(int, int)>
c001163c:	83 c4 10             	add    esp,0x10
c001163f:	83 ec 0c             	sub    esp,0xc
c0011642:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011646:	e8 49 fa ff ff       	call   c0011094 <VgaText::clearScreen()>
c001164b:	83 c4 10             	add    esp,0x10
c001164e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011652:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0011656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001165a:	05 82 00 00 00       	add    eax,0x82
c001165f:	83 ec 04             	sub    esp,0x4
c0011662:	68 80 00 00 00       	push   0x80
c0011667:	6a 00                	push   0x0
c0011669:	50                   	push   eax
c001166a:	e8 81 ee fe ff       	call   c00004f0 <memset>
c001166f:	83 c4 10             	add    esp,0x10
c0011672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011676:	05 02 01 00 00       	add    eax,0x102
c001167b:	83 ec 04             	sub    esp,0x4
c001167e:	68 80 00 00 00       	push   0x80
c0011683:	6a 00                	push   0x0
c0011685:	50                   	push   eax
c0011686:	e8 65 ee fe ff       	call   c00004f0 <memset>
c001168b:	83 c4 10             	add    esp,0x10
c001168e:	90                   	nop
c001168f:	83 c4 04             	add    esp,0x4
c0011692:	5b                   	pop    ebx
c0011693:	5e                   	pop    esi
c0011694:	c3                   	ret    
c0011695:	90                   	nop

c0011696 <VgaText::receiveKey(unsigned char)>:
c0011696:	55                   	push   ebp
c0011697:	57                   	push   edi
c0011698:	56                   	push   esi
c0011699:	53                   	push   ebx
c001169a:	83 ec 2c             	sub    esp,0x2c
c001169d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00116a1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00116a5:	89 fd                	mov    ebp,edi
c00116a7:	81 e5 ff 00 00 00    	and    ebp,0xff
c00116ad:	0f 84 48 01 00 00    	je     c00117fb <VgaText::receiveKey(unsigned char)+0x165>
c00116b3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c00116b9:	83 fd 08             	cmp    ebp,0x8
c00116bc:	75 6a                	jne    c0011728 <VgaText::receiveKey(unsigned char)+0x92>
c00116be:	83 ec 0c             	sub    esp,0xc
c00116c1:	56                   	push   esi
c00116c2:	e8 b9 ee fe ff       	call   c0000580 <strlen>
c00116c7:	83 c4 10             	add    esp,0x10
c00116ca:	85 c0                	test   eax,eax
c00116cc:	0f 84 ef 00 00 00    	je     c00117c1 <VgaText::receiveKey(unsigned char)+0x12b>
c00116d2:	50                   	push   eax
c00116d3:	50                   	push   eax
c00116d4:	6a 08                	push   0x8
c00116d6:	53                   	push   ebx
c00116d7:	e8 7c fb ff ff       	call   c0011258 <VgaText::putchar(char)>
c00116dc:	89 34 24             	mov    DWORD PTR [esp],esi
c00116df:	e8 9c ee fe ff       	call   c0000580 <strlen>
c00116e4:	83 c4 10             	add    esp,0x10
c00116e7:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c00116ef:	83 fa 1f             	cmp    edx,0x1f
c00116f2:	89 d0                	mov    eax,edx
c00116f4:	7f 1c                	jg     c0011712 <VgaText::receiveKey(unsigned char)+0x7c>
c00116f6:	83 e8 08             	sub    eax,0x8
c00116f9:	3c 02                	cmp    al,0x2
c00116fb:	76 15                	jbe    c0011712 <VgaText::receiveKey(unsigned char)+0x7c>
c00116fd:	83 fa 0d             	cmp    edx,0xd
c0011700:	74 10                	je     c0011712 <VgaText::receiveKey(unsigned char)+0x7c>
c0011702:	57                   	push   edi
c0011703:	57                   	push   edi
c0011704:	68 0b 26 02 c0       	push   0xc002260b
c0011709:	53                   	push   ebx
c001170a:	e8 77 fc ff ff       	call   c0011386 <VgaText::puts(char const*)>
c001170f:	83 c4 10             	add    esp,0x10
c0011712:	83 ec 0c             	sub    esp,0xc
c0011715:	56                   	push   esi
c0011716:	e8 65 ee fe ff       	call   c0000580 <strlen>
c001171b:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0011723:	e9 96 00 00 00       	jmp    c00117be <VgaText::receiveKey(unsigned char)+0x128>
c0011728:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c001172e:	83 ec 0c             	sub    esp,0xc
c0011731:	50                   	push   eax
c0011732:	e8 49 ee fe ff       	call   c0000580 <strlen>
c0011737:	89 34 24             	mov    DWORD PTR [esp],esi
c001173a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001173e:	e8 3d ee fe ff       	call   c0000580 <strlen>
c0011743:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011747:	83 c4 10             	add    esp,0x10
c001174a:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c001174e:	3d 80 00 00 00       	cmp    eax,0x80
c0011753:	0f 87 a2 00 00 00    	ja     c00117fb <VgaText::receiveKey(unsigned char)+0x165>
c0011759:	8d 47 ff             	lea    eax,[edi-0x1]
c001175c:	3c 1e                	cmp    al,0x1e
c001175e:	77 35                	ja     c0011795 <VgaText::receiveKey(unsigned char)+0xff>
c0011760:	8d 47 f7             	lea    eax,[edi-0x9]
c0011763:	3c 01                	cmp    al,0x1
c0011765:	76 2e                	jbe    c0011795 <VgaText::receiveKey(unsigned char)+0xff>
c0011767:	83 fd 0d             	cmp    ebp,0xd
c001176a:	74 29                	je     c0011795 <VgaText::receiveKey(unsigned char)+0xff>
c001176c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001176f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011772:	68 11 26 02 c0       	push   0xc0022611
c0011777:	53                   	push   ebx
c0011778:	e8 7b fc ff ff       	call   c00113f8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001177d:	8d 47 40             	lea    eax,[edi+0x40]
c0011780:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011783:	0f b6 c0             	movzx  eax,al
c0011786:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011789:	50                   	push   eax
c001178a:	53                   	push   ebx
c001178b:	e8 f8 f9 ff ff       	call   c0011188 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011790:	83 c4 20             	add    esp,0x20
c0011793:	eb 11                	jmp    c00117a6 <VgaText::receiveKey(unsigned char)+0x110>
c0011795:	51                   	push   ecx
c0011796:	89 f8                	mov    eax,edi
c0011798:	51                   	push   ecx
c0011799:	0f be c0             	movsx  eax,al
c001179c:	50                   	push   eax
c001179d:	53                   	push   ebx
c001179e:	e8 b5 fa ff ff       	call   c0011258 <VgaText::putchar(char)>
c00117a3:	83 c4 10             	add    esp,0x10
c00117a6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00117ab:	89 f8                	mov    eax,edi
c00117ad:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00117b1:	52                   	push   edx
c00117b2:	52                   	push   edx
c00117b3:	8d 44 24 26          	lea    eax,[esp+0x26]
c00117b7:	50                   	push   eax
c00117b8:	56                   	push   esi
c00117b9:	e8 b2 f0 fe ff       	call   c0000870 <strcat>
c00117be:	83 c4 10             	add    esp,0x10
c00117c1:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c00117c8:	75 0f                	jne    c00117d9 <VgaText::receiveKey(unsigned char)+0x143>
c00117ca:	83 fd 1c             	cmp    ebp,0x1c
c00117cd:	77 2c                	ja     c00117fb <VgaText::receiveKey(unsigned char)+0x165>
c00117cf:	b8 08 04 00 10       	mov    eax,0x10000408
c00117d4:	0f a3 e8             	bt     eax,ebp
c00117d7:	73 22                	jae    c00117fb <VgaText::receiveKey(unsigned char)+0x165>
c00117d9:	50                   	push   eax
c00117da:	81 c3 02 01 00 00    	add    ebx,0x102
c00117e0:	50                   	push   eax
c00117e1:	56                   	push   esi
c00117e2:	53                   	push   ebx
c00117e3:	e8 88 f0 fe ff       	call   c0000870 <strcat>
c00117e8:	83 c4 0c             	add    esp,0xc
c00117eb:	68 80 00 00 00       	push   0x80
c00117f0:	6a 00                	push   0x0
c00117f2:	56                   	push   esi
c00117f3:	e8 f8 ec fe ff       	call   c00004f0 <memset>
c00117f8:	83 c4 10             	add    esp,0x10
c00117fb:	83 c4 2c             	add    esp,0x2c
c00117fe:	5b                   	pop    ebx
c00117ff:	5e                   	pop    esi
c0011800:	5f                   	pop    edi
c0011801:	5d                   	pop    ebp
c0011802:	c3                   	ret    
c0011803:	90                   	nop

c0011804 <VgaText::doUpdate()>:
c0011804:	c3                   	ret    
c0011805:	66 90                	xchg   ax,ax
c0011807:	90                   	nop

c0011808 <TSS::TSS()>:
c0011808:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001180c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011813:	90                   	nop
c0011814:	c3                   	ret    
c0011815:	90                   	nop
c0011816:	66 90                	xchg   ax,ax

c0011818 <TSS::setESP(unsigned long)>:
c0011818:	55                   	push   ebp
c0011819:	89 e5                	mov    ebp,esp
c001181b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001181e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011821:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011824:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011827:	90                   	nop
c0011828:	5d                   	pop    ebp
c0011829:	c3                   	ret    
c001182a:	66 90                	xchg   ax,ax

c001182c <TSS::flush()>:
c001182c:	55                   	push   ebp
c001182d:	89 e5                	mov    ebp,esp
c001182f:	83 ec 10             	sub    esp,0x10
c0011832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011835:	8b 00                	mov    eax,DWORD PTR [eax]
c0011837:	83 c8 03             	or     eax,0x3
c001183a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001183e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011842:	66 89 d0             	mov    ax,dx
c0011845:	0f 00 d8             	ltr    ax
c0011848:	90                   	nop
c0011849:	c9                   	leave  
c001184a:	c3                   	ret    
c001184b:	90                   	nop

c001184c <TSS::setup(unsigned long, unsigned long)>:
c001184c:	55                   	push   ebp
c001184d:	89 e5                	mov    ebp,esp
c001184f:	83 ec 18             	sub    esp,0x18
c0011852:	83 ec 0c             	sub    esp,0xc
c0011855:	6a 68                	push   0x68
c0011857:	e8 74 d0 ff ff       	call   c000e8d0 <malloc>
c001185c:	83 c4 10             	add    esp,0x10
c001185f:	89 c2                	mov    edx,eax
c0011861:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011864:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011867:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001186a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001186d:	83 ec 08             	sub    esp,0x8
c0011870:	50                   	push   eax
c0011871:	68 34 26 02 c0       	push   0xc0022634
c0011876:	e8 d3 56 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001187b:	83 c4 10             	add    esp,0x10
c001187e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011881:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011884:	83 ec 04             	sub    esp,0x4
c0011887:	6a 68                	push   0x68
c0011889:	6a 00                	push   0x0
c001188b:	50                   	push   eax
c001188c:	e8 5f ec fe ff       	call   c00004f0 <memset>
c0011891:	83 c4 10             	add    esp,0x10
c0011894:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011897:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001189a:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00118a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118a6:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00118ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00118b5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00118b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118be:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00118c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118ca:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00118d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118d6:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00118dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118e2:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00118e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118ee:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00118f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118fa:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011900:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011903:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011906:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011909:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001190c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001190f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011912:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011915:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011918:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001191b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001191e:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011925:	83 ec 0c             	sub    esp,0xc
c0011928:	68 4b 26 02 c0       	push   0xc002264b
c001192d:	e8 1c 56 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011932:	83 c4 10             	add    esp,0x10
c0011935:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011938:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001193b:	0f 20 da             	mov    edx,cr3
c001193e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011941:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011944:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011947:	83 ec 0c             	sub    esp,0xc
c001194a:	68 4e 26 02 c0       	push   0xc002264e
c001194f:	e8 fa 55 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011954:	83 c4 10             	add    esp,0x10
c0011957:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001195a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001195d:	83 ec 08             	sub    esp,0x8
c0011960:	50                   	push   eax
c0011961:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011964:	50                   	push   eax
c0011965:	e8 b8 c6 ff ff       	call   c000e022 <GDTEntry::setBase(unsigned int)>
c001196a:	83 c4 10             	add    esp,0x10
c001196d:	83 ec 08             	sub    esp,0x8
c0011970:	6a 68                	push   0x68
c0011972:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011975:	50                   	push   eax
c0011976:	e8 c3 c6 ff ff       	call   c000e03e <GDTEntry::setLimit(unsigned int)>
c001197b:	83 c4 10             	add    esp,0x10
c001197e:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011982:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011985:	83 e0 0f             	and    eax,0xf
c0011988:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001198b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001198e:	83 c8 40             	or     eax,0x40
c0011991:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011994:	83 ec 0c             	sub    esp,0xc
c0011997:	68 51 26 02 c0       	push   0xc0022651
c001199c:	e8 ad 55 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00119a1:	83 c4 10             	add    esp,0x10
c00119a4:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c00119a9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00119af:	83 ec 08             	sub    esp,0x8
c00119b2:	50                   	push   eax
c00119b3:	68 54 26 02 c0       	push   0xc0022654
c00119b8:	e8 91 55 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00119bd:	83 c4 10             	add    esp,0x10
c00119c0:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c00119c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00119cb:	05 64 01 00 00       	add    eax,0x164
c00119d0:	83 ec 04             	sub    esp,0x4
c00119d3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00119d6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00119d9:	50                   	push   eax
c00119da:	e8 93 c6 ff ff       	call   c000e072 <GDT::addEntry(GDTEntry)>
c00119df:	83 c4 10             	add    esp,0x10
c00119e2:	89 c2                	mov    edx,eax
c00119e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119e7:	89 10                	mov    DWORD PTR [eax],edx
c00119e9:	83 ec 0c             	sub    esp,0xc
c00119ec:	68 69 26 02 c0       	push   0xc0022669
c00119f1:	e8 58 55 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00119f6:	83 c4 10             	add    esp,0x10
c00119f9:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c00119fe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011a04:	05 64 01 00 00       	add    eax,0x164
c0011a09:	83 ec 0c             	sub    esp,0xc
c0011a0c:	50                   	push   eax
c0011a0d:	e8 8a c6 ff ff       	call   c000e09c <GDT::flush()>
c0011a12:	83 c4 10             	add    esp,0x10
c0011a15:	83 ec 0c             	sub    esp,0xc
c0011a18:	68 6c 26 02 c0       	push   0xc002266c
c0011a1d:	e8 2c 55 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011a22:	83 c4 10             	add    esp,0x10
c0011a25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a28:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a2a:	c9                   	leave  
c0011a2b:	c3                   	ret    

c0011a2c <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011a2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a30:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011a34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a37:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011a3c:	75 08                	jne    c0011a46 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011a3e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011a44:	eb 38                	jmp    c0011a7e <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011a46:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011a4b:	75 17                	jne    c0011a64 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011a4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a55:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011a5b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a61:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011a64:	89 c1                	mov    ecx,eax
c0011a66:	83 e1 fd             	and    ecx,0xfffffffd
c0011a69:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011a6f:	74 cd                	je     c0011a3e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011a71:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011a76:	83 e0 ef             	and    eax,0xffffffef
c0011a79:	83 f8 08             	cmp    eax,0x8
c0011a7c:	76 c0                	jbe    c0011a3e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011a7e:	31 c0                	xor    eax,eax
c0011a80:	c3                   	ret    
c0011a81:	90                   	nop

c0011a82 <ReservedFilename::isAtty()>:
c0011a82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a86:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011a89:	31 c0                	xor    eax,eax
c0011a8b:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011a91:	74 09                	je     c0011a9c <ReservedFilename::isAtty()+0x1a>
c0011a93:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011a99:	0f 94 c0             	sete   al
c0011a9c:	c3                   	ret    
c0011a9d:	90                   	nop

c0011a9e <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011a9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011aa2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011aa6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011aaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011aad:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011ab2:	75 08                	jne    c0011abc <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011ab4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011aba:	eb 3d                	jmp    c0011af9 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011abc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011ac1:	75 17                	jne    c0011ada <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011ac3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ac8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011acb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011ad1:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ad7:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011ada:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011adf:	75 04                	jne    c0011ae5 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011ae1:	89 0a                	mov    DWORD PTR [edx],ecx
c0011ae3:	eb 14                	jmp    c0011af9 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011ae5:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011aea:	74 c8                	je     c0011ab4 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011aec:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011af1:	83 e0 ef             	and    eax,0xffffffef
c0011af4:	83 f8 08             	cmp    eax,0x8
c0011af7:	76 bb                	jbe    c0011ab4 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011af9:	31 c0                	xor    eax,eax
c0011afb:	c3                   	ret    

c0011afc <UnixFile::getFileDescriptor()>:
c0011afc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b03:	c3                   	ret    

c0011b04 <UnixFile::UnixFile(int)>:
c0011b04:	53                   	push   ebx
c0011b05:	83 ec 28             	sub    esp,0x28
c0011b08:	ba 98 26 02 c0       	mov    edx,0xc0022698
c0011b0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011b11:	89 10                	mov    DWORD PTR [eax],edx
c0011b13:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011b1b:	0f 8f 90 01 00 00    	jg     c0011cb1 <UnixFile::UnixFile(int)+0x1ad>
c0011b21:	a1 60 45 02 c0       	mov    eax,ds:0xc0024560
c0011b26:	8d 50 01             	lea    edx,[eax+0x1]
c0011b29:	89 15 60 45 02 c0    	mov    DWORD PTR ds:0xc0024560,edx
c0011b2f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011b33:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011b36:	83 ec 08             	sub    esp,0x8
c0011b39:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011b3d:	68 b8 be 02 c0       	push   0xc002beb8
c0011b42:	e8 d7 e8 00 00       	call   c002041e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011b47:	83 c4 10             	add    esp,0x10
c0011b4a:	a0 b4 be 02 c0       	mov    al,ds:0xc002beb4
c0011b4f:	83 f0 01             	xor    eax,0x1
c0011b52:	0f b6 c0             	movzx  eax,al
c0011b55:	85 c0                	test   eax,eax
c0011b57:	0f 84 55 01 00 00    	je     c0011cb2 <UnixFile::UnixFile(int)+0x1ae>
c0011b5d:	c6 05 b4 be 02 c0 01 	mov    BYTE PTR ds:0xc002beb4,0x1
c0011b64:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011b6c:	83 ec 0c             	sub    esp,0xc
c0011b6f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011b73:	e8 58 cd ff ff       	call   c000e8d0 <malloc>
c0011b78:	83 c4 10             	add    esp,0x10
c0011b7b:	89 c3                	mov    ebx,eax
c0011b7d:	83 ec 08             	sub    esp,0x8
c0011b80:	68 03 ff ff 0f       	push   0xfffff03
c0011b85:	53                   	push   ebx
c0011b86:	e8 2d 01 00 00       	call   c0011cb8 <ReservedFilename::ReservedFilename(int)>
c0011b8b:	83 c4 10             	add    esp,0x10
c0011b8e:	89 1d ac be 02 c0    	mov    DWORD PTR ds:0xc002beac,ebx
c0011b94:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011b9c:	83 ec 0c             	sub    esp,0xc
c0011b9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ba3:	e8 28 cd ff ff       	call   c000e8d0 <malloc>
c0011ba8:	83 c4 10             	add    esp,0x10
c0011bab:	89 c3                	mov    ebx,eax
c0011bad:	83 ec 08             	sub    esp,0x8
c0011bb0:	68 01 ff ff 0f       	push   0xfffff01
c0011bb5:	53                   	push   ebx
c0011bb6:	e8 fd 00 00 00       	call   c0011cb8 <ReservedFilename::ReservedFilename(int)>
c0011bbb:	83 c4 10             	add    esp,0x10
c0011bbe:	89 1d b0 be 02 c0    	mov    DWORD PTR ds:0xc002beb0,ebx
c0011bc4:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011bcc:	83 ec 0c             	sub    esp,0xc
c0011bcf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011bd3:	e8 f8 cc ff ff       	call   c000e8d0 <malloc>
c0011bd8:	83 c4 10             	add    esp,0x10
c0011bdb:	89 c3                	mov    ebx,eax
c0011bdd:	83 ec 08             	sub    esp,0x8
c0011be0:	68 00 ff ff 0f       	push   0xfffff00
c0011be5:	53                   	push   ebx
c0011be6:	e8 cd 00 00 00       	call   c0011cb8 <ReservedFilename::ReservedFilename(int)>
c0011beb:	83 c4 10             	add    esp,0x10
c0011bee:	89 1d a4 be 02 c0    	mov    DWORD PTR ds:0xc002bea4,ebx
c0011bf4:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011bfc:	83 ec 0c             	sub    esp,0xc
c0011bff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011c03:	e8 c8 cc ff ff       	call   c000e8d0 <malloc>
c0011c08:	83 c4 10             	add    esp,0x10
c0011c0b:	89 c3                	mov    ebx,eax
c0011c0d:	83 ec 08             	sub    esp,0x8
c0011c10:	68 02 ff ff 0f       	push   0xfffff02
c0011c15:	53                   	push   ebx
c0011c16:	e8 9d 00 00 00       	call   c0011cb8 <ReservedFilename::ReservedFilename(int)>
c0011c1b:	83 c4 10             	add    esp,0x10
c0011c1e:	89 1d a8 be 02 c0    	mov    DWORD PTR ds:0xc002bea8,ebx
c0011c24:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011c2c:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011c31:	7f 7f                	jg     c0011cb2 <UnixFile::UnixFile(int)+0x1ae>
c0011c33:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011c3b:	83 ec 0c             	sub    esp,0xc
c0011c3e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011c42:	e8 89 cc ff ff       	call   c000e8d0 <malloc>
c0011c47:	83 c4 10             	add    esp,0x10
c0011c4a:	89 c3                	mov    ebx,eax
c0011c4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c50:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011c55:	83 ec 08             	sub    esp,0x8
c0011c58:	50                   	push   eax
c0011c59:	53                   	push   ebx
c0011c5a:	e8 59 00 00 00       	call   c0011cb8 <ReservedFilename::ReservedFilename(int)>
c0011c5f:	83 c4 10             	add    esp,0x10
c0011c62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c66:	89 1c 85 80 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4180],ebx
c0011c6d:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011c75:	83 ec 0c             	sub    esp,0xc
c0011c78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011c7c:	e8 4f cc ff ff       	call   c000e8d0 <malloc>
c0011c81:	83 c4 10             	add    esp,0x10
c0011c84:	89 c3                	mov    ebx,eax
c0011c86:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c8a:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011c8f:	83 ec 08             	sub    esp,0x8
c0011c92:	50                   	push   eax
c0011c93:	53                   	push   ebx
c0011c94:	e8 1f 00 00 00       	call   c0011cb8 <ReservedFilename::ReservedFilename(int)>
c0011c99:	83 c4 10             	add    esp,0x10
c0011c9c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011ca0:	89 1c 85 40 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41c0],ebx
c0011ca7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0011cac:	e9 7b ff ff ff       	jmp    c0011c2c <UnixFile::UnixFile(int)+0x128>
c0011cb1:	90                   	nop
c0011cb2:	83 c4 28             	add    esp,0x28
c0011cb5:	5b                   	pop    ebx
c0011cb6:	c3                   	ret    
c0011cb7:	90                   	nop

c0011cb8 <ReservedFilename::ReservedFilename(int)>:
c0011cb8:	83 ec 0c             	sub    esp,0xc
c0011cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011cbf:	83 ec 08             	sub    esp,0x8
c0011cc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cc6:	50                   	push   eax
c0011cc7:	e8 38 fe ff ff       	call   c0011b04 <UnixFile::UnixFile(int)>
c0011ccc:	83 c4 10             	add    esp,0x10
c0011ccf:	ba b4 26 02 c0       	mov    edx,0xc00226b4
c0011cd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011cd8:	89 10                	mov    DWORD PTR [eax],edx
c0011cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011cde:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011ce2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011ce5:	90                   	nop
c0011ce6:	83 c4 0c             	add    esp,0xc
c0011ce9:	c3                   	ret    

c0011cea <UnixFile::~UnixFile()>:
c0011cea:	83 ec 1c             	sub    esp,0x1c
c0011ced:	ba 98 26 02 c0       	mov    edx,0xc0022698
c0011cf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011cf6:	89 10                	mov    DWORD PTR [eax],edx
c0011cf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011cfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011cff:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011d04:	7f 76                	jg     c0011d7c <UnixFile::~UnixFile()+0x92>
c0011d06:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d0e:	83 ec 0c             	sub    esp,0xc
c0011d11:	68 b8 be 02 c0       	push   0xc002beb8
c0011d16:	e8 d7 e7 00 00       	call   c00204f2 <LinkedList<UnixFile>::getFirstElement()>
c0011d1b:	83 c4 10             	add    esp,0x10
c0011d1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011d22:	83 ec 0c             	sub    esp,0xc
c0011d25:	68 b8 be 02 c0       	push   0xc002beb8
c0011d2a:	e8 cb e7 00 00       	call   c00204fa <LinkedList<UnixFile>::removeFirst()>
c0011d2f:	83 c4 10             	add    esp,0x10
c0011d32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011d36:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011d3a:	74 43                	je     c0011d7f <UnixFile::~UnixFile()+0x95>
c0011d3c:	83 ec 08             	sub    esp,0x8
c0011d3f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011d43:	68 b8 be 02 c0       	push   0xc002beb8
c0011d48:	e8 d1 e6 00 00       	call   c002041e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011d4d:	83 c4 10             	add    esp,0x10
c0011d50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d54:	8d 50 01             	lea    edx,[eax+0x1]
c0011d57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011d5b:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0011d60:	0f 94 c0             	sete   al
c0011d63:	0f b6 c0             	movzx  eax,al
c0011d66:	85 c0                	test   eax,eax
c0011d68:	74 a4                	je     c0011d0e <UnixFile::~UnixFile()+0x24>
c0011d6a:	83 ec 0c             	sub    esp,0xc
c0011d6d:	68 70 26 02 c0       	push   0xc0022670
c0011d72:	e8 9f ce ff ff       	call   c000ec16 <KePanic(char const*)>
c0011d77:	83 c4 10             	add    esp,0x10
c0011d7a:	eb 92                	jmp    c0011d0e <UnixFile::~UnixFile()+0x24>
c0011d7c:	90                   	nop
c0011d7d:	eb 01                	jmp    c0011d80 <UnixFile::~UnixFile()+0x96>
c0011d7f:	90                   	nop
c0011d80:	90                   	nop
c0011d81:	83 c4 1c             	add    esp,0x1c
c0011d84:	c3                   	ret    
c0011d85:	90                   	nop

c0011d86 <UnixFile::~UnixFile()>:
c0011d86:	83 ec 0c             	sub    esp,0xc
c0011d89:	83 ec 0c             	sub    esp,0xc
c0011d8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d90:	e8 55 ff ff ff       	call   c0011cea <UnixFile::~UnixFile()>
c0011d95:	83 c4 10             	add    esp,0x10
c0011d98:	83 ec 08             	sub    esp,0x8
c0011d9b:	6a 0c                	push   0xc
c0011d9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011da1:	e8 b5 a8 ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0011da6:	83 c4 10             	add    esp,0x10
c0011da9:	83 c4 0c             	add    esp,0xc
c0011dac:	c3                   	ret    
c0011dad:	90                   	nop

c0011dae <ReservedFilename::~ReservedFilename()>:
c0011dae:	83 ec 0c             	sub    esp,0xc
c0011db1:	ba b4 26 02 c0       	mov    edx,0xc00226b4
c0011db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dba:	89 10                	mov    DWORD PTR [eax],edx
c0011dbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dc0:	83 ec 0c             	sub    esp,0xc
c0011dc3:	50                   	push   eax
c0011dc4:	e8 21 ff ff ff       	call   c0011cea <UnixFile::~UnixFile()>
c0011dc9:	83 c4 10             	add    esp,0x10
c0011dcc:	90                   	nop
c0011dcd:	83 c4 0c             	add    esp,0xc
c0011dd0:	c3                   	ret    
c0011dd1:	90                   	nop

c0011dd2 <ReservedFilename::~ReservedFilename()>:
c0011dd2:	83 ec 0c             	sub    esp,0xc
c0011dd5:	83 ec 0c             	sub    esp,0xc
c0011dd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ddc:	e8 cd ff ff ff       	call   c0011dae <ReservedFilename::~ReservedFilename()>
c0011de1:	83 c4 10             	add    esp,0x10
c0011de4:	83 ec 08             	sub    esp,0x8
c0011de7:	6a 0c                	push   0xc
c0011de9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ded:	e8 69 a8 ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0011df2:	83 c4 10             	add    esp,0x10
c0011df5:	83 c4 0c             	add    esp,0xc
c0011df8:	c3                   	ret    

c0011df9 <KeGetFileFromDescriptor(int)>:
c0011df9:	53                   	push   ebx
c0011dfa:	83 ec 08             	sub    esp,0x8
c0011dfd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011e01:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011e07:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011e0d:	7f 2c                	jg     c0011e3b <KeGetFileFromDescriptor(int)+0x42>
c0011e0f:	83 ec 0c             	sub    esp,0xc
c0011e12:	68 b8 be 02 c0       	push   0xc002beb8
c0011e17:	e8 d6 e6 00 00       	call   c00204f2 <LinkedList<UnixFile>::getFirstElement()>
c0011e1c:	83 c4 10             	add    esp,0x10
c0011e1f:	85 c0                	test   eax,eax
c0011e21:	75 04                	jne    c0011e27 <KeGetFileFromDescriptor(int)+0x2e>
c0011e23:	31 c0                	xor    eax,eax
c0011e25:	eb 6e                	jmp    c0011e95 <KeGetFileFromDescriptor(int)+0x9c>
c0011e27:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011e2a:	74 69                	je     c0011e95 <KeGetFileFromDescriptor(int)+0x9c>
c0011e2c:	52                   	push   edx
c0011e2d:	52                   	push   edx
c0011e2e:	50                   	push   eax
c0011e2f:	68 b8 be 02 c0       	push   0xc002beb8
c0011e34:	e8 63 e7 00 00       	call   c002059c <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011e39:	eb e1                	jmp    c0011e1c <KeGetFileFromDescriptor(int)+0x23>
c0011e3b:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011e41:	a1 ac be 02 c0       	mov    eax,ds:0xc002beac
c0011e46:	74 4d                	je     c0011e95 <KeGetFileFromDescriptor(int)+0x9c>
c0011e48:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011e4e:	a1 b0 be 02 c0       	mov    eax,ds:0xc002beb0
c0011e53:	74 40                	je     c0011e95 <KeGetFileFromDescriptor(int)+0x9c>
c0011e55:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011e5b:	a1 a8 be 02 c0       	mov    eax,ds:0xc002bea8
c0011e60:	74 33                	je     c0011e95 <KeGetFileFromDescriptor(int)+0x9c>
c0011e62:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011e68:	a1 a4 be 02 c0       	mov    eax,ds:0xc002bea4
c0011e6d:	74 26                	je     c0011e95 <KeGetFileFromDescriptor(int)+0x9c>
c0011e6f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011e75:	83 f8 08             	cmp    eax,0x8
c0011e78:	77 09                	ja     c0011e83 <KeGetFileFromDescriptor(int)+0x8a>
c0011e7a:	8b 04 85 80 be 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4180]
c0011e81:	eb 12                	jmp    c0011e95 <KeGetFileFromDescriptor(int)+0x9c>
c0011e83:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011e89:	83 fb 08             	cmp    ebx,0x8
c0011e8c:	77 95                	ja     c0011e23 <KeGetFileFromDescriptor(int)+0x2a>
c0011e8e:	8b 04 9d 40 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41c0]
c0011e95:	83 c4 08             	add    esp,0x8
c0011e98:	5b                   	pop    ebx
c0011e99:	c3                   	ret    

c0011e9a <__static_initialization_and_destruction_0(int, int)>:
c0011e9a:	83 ec 0c             	sub    esp,0xc
c0011e9d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011ea2:	75 34                	jne    c0011ed8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011ea4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011eac:	75 2a                	jne    c0011ed8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011eae:	83 ec 0c             	sub    esp,0xc
c0011eb1:	68 b8 be 02 c0       	push   0xc002beb8
c0011eb6:	e8 21 e5 00 00       	call   c00203dc <LinkedList<UnixFile>::LinkedList()>
c0011ebb:	83 c4 10             	add    esp,0x10
c0011ebe:	83 ec 04             	sub    esp,0x4
c0011ec1:	68 dc 3d 02 c0       	push   0xc0023ddc
c0011ec6:	68 b8 be 02 c0       	push   0xc002beb8
c0011ecb:	68 da 03 02 c0       	push   0xc00203da
c0011ed0:	e8 36 a7 ff ff       	call   c000c60b <__cxa_atexit>
c0011ed5:	83 c4 10             	add    esp,0x10
c0011ed8:	90                   	nop
c0011ed9:	83 c4 0c             	add    esp,0xc
c0011edc:	c3                   	ret    

c0011edd <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011edd:	83 ec 0c             	sub    esp,0xc
c0011ee0:	83 ec 08             	sub    esp,0x8
c0011ee3:	68 ff ff 00 00       	push   0xffff
c0011ee8:	6a 01                	push   0x1
c0011eea:	e8 ab ff ff ff       	call   c0011e9a <__static_initialization_and_destruction_0(int, int)>
c0011eef:	83 c4 10             	add    esp,0x10
c0011ef2:	83 c4 0c             	add    esp,0xc
c0011ef5:	c3                   	ret    

c0011ef6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011ef6:	53                   	push   ebx
c0011ef7:	8b 15 68 45 02 c0    	mov    edx,DWORD PTR ds:0xc0024568
c0011efd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011f01:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011f05:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0011f0b:	89 d8                	mov    eax,ebx
c0011f0d:	d1 e8                	shr    eax,1
c0011f0f:	01 d0                	add    eax,edx
c0011f11:	80 e3 01             	and    bl,0x1
c0011f14:	8a 10                	mov    dl,BYTE PTR [eax]
c0011f16:	75 09                	jne    c0011f21 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0011f18:	83 e2 f0             	and    edx,0xfffffff0
c0011f1b:	09 ca                	or     edx,ecx
c0011f1d:	88 10                	mov    BYTE PTR [eax],dl
c0011f1f:	5b                   	pop    ebx
c0011f20:	c3                   	ret    
c0011f21:	0f b6 c9             	movzx  ecx,cl
c0011f24:	83 e2 0f             	and    edx,0xf
c0011f27:	c1 e1 04             	shl    ecx,0x4
c0011f2a:	09 ca                	or     edx,ecx
c0011f2c:	88 10                	mov    BYTE PTR [eax],dl
c0011f2e:	5b                   	pop    ebx
c0011f2f:	c3                   	ret    

c0011f30 <Virt::getPageState(unsigned long)>:
c0011f30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f34:	8b 0d 68 45 02 c0    	mov    ecx,DWORD PTR ds:0xc0024568
c0011f3a:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011f40:	89 d0                	mov    eax,edx
c0011f42:	d1 e8                	shr    eax,1
c0011f44:	80 e2 01             	and    dl,0x1
c0011f47:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011f4a:	74 03                	je     c0011f4f <Virt::getPageState(unsigned long)+0x1f>
c0011f4c:	c1 e8 04             	shr    eax,0x4
c0011f4f:	83 e0 0f             	and    eax,0xf
c0011f52:	c3                   	ret    

c0011f53 <Virt::allocateKernelVirtualPages(int)>:
c0011f53:	55                   	push   ebp
c0011f54:	57                   	push   edi
c0011f55:	56                   	push   esi
c0011f56:	31 f6                	xor    esi,esi
c0011f58:	53                   	push   ebx
c0011f59:	31 db                	xor    ebx,ebx
c0011f5b:	83 ec 1c             	sub    esp,0x1c
c0011f5e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011f63:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011f67:	8b 2d 64 45 02 c0    	mov    ebp,DWORD PTR ds:0xc0024564
c0011f6d:	55                   	push   ebp
c0011f6e:	e8 bd ff ff ff       	call   c0011f30 <Virt::getPageState(unsigned long)>
c0011f73:	5a                   	pop    edx
c0011f74:	84 c0                	test   al,al
c0011f76:	75 3d                	jne    c0011fb5 <Virt::allocateKernelVirtualPages(int)+0x62>
c0011f78:	85 db                	test   ebx,ebx
c0011f7a:	0f 44 f5             	cmove  esi,ebp
c0011f7d:	83 c3 01             	add    ebx,0x1
c0011f80:	39 fb                	cmp    ebx,edi
c0011f82:	74 5e                	je     c0011fe2 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0011f84:	83 c5 01             	add    ebp,0x1
c0011f87:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0011f8d:	76 33                	jbe    c0011fc2 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0011f8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0011f94:	c7 05 64 45 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0024564,0xc8000
c0011f9e:	75 2a                	jne    c0011fca <Virt::allocateKernelVirtualPages(int)+0x77>
c0011fa0:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011fa5:	bd 00 80 0c 00       	mov    ebp,0xc8000
c0011faa:	55                   	push   ebp
c0011fab:	e8 80 ff ff ff       	call   c0011f30 <Virt::getPageState(unsigned long)>
c0011fb0:	5a                   	pop    edx
c0011fb1:	84 c0                	test   al,al
c0011fb3:	74 c3                	je     c0011f78 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011fb5:	83 c5 01             	add    ebp,0x1
c0011fb8:	31 db                	xor    ebx,ebx
c0011fba:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0011fc0:	77 cd                	ja     c0011f8f <Virt::allocateKernelVirtualPages(int)+0x3c>
c0011fc2:	89 2d 64 45 02 c0    	mov    DWORD PTR ds:0xc0024564,ebp
c0011fc8:	eb a3                	jmp    c0011f6d <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011fca:	83 ec 0c             	sub    esp,0xc
c0011fcd:	68 c8 26 02 c0       	push   0xc00226c8
c0011fd2:	e8 3f cc ff ff       	call   c000ec16 <KePanic(char const*)>
c0011fd7:	8b 2d 64 45 02 c0    	mov    ebp,DWORD PTR ds:0xc0024564
c0011fdd:	83 c4 10             	add    esp,0x10
c0011fe0:	eb 8b                	jmp    c0011f6d <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011fe2:	89 35 64 45 02 c0    	mov    DWORD PTR ds:0xc0024564,esi
c0011fe8:	83 fb 01             	cmp    ebx,0x1
c0011feb:	74 63                	je     c0012050 <Virt::allocateKernelVirtualPages(int)+0xfd>
c0011fed:	85 ff                	test   edi,edi
c0011fef:	74 41                	je     c0012032 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0011ff1:	89 f0                	mov    eax,esi
c0011ff3:	31 db                	xor    ebx,ebx
c0011ff5:	8d 6f ff             	lea    ebp,[edi-0x1]
c0011ff8:	eb 16                	jmp    c0012010 <Virt::allocateKernelVirtualPages(int)+0xbd>
c0011ffa:	6a 01                	push   0x1
c0011ffc:	83 c3 01             	add    ebx,0x1
c0011fff:	50                   	push   eax
c0012000:	e8 f1 fe ff ff       	call   c0011ef6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012005:	39 fb                	cmp    ebx,edi
c0012007:	58                   	pop    eax
c0012008:	5a                   	pop    edx
c0012009:	74 27                	je     c0012032 <Virt::allocateKernelVirtualPages(int)+0xdf>
c001200b:	a1 64 45 02 c0       	mov    eax,ds:0xc0024564
c0012010:	8d 50 01             	lea    edx,[eax+0x1]
c0012013:	85 db                	test   ebx,ebx
c0012015:	89 15 64 45 02 c0    	mov    DWORD PTR ds:0xc0024564,edx
c001201b:	74 22                	je     c001203f <Virt::allocateKernelVirtualPages(int)+0xec>
c001201d:	39 dd                	cmp    ebp,ebx
c001201f:	75 d9                	jne    c0011ffa <Virt::allocateKernelVirtualPages(int)+0xa7>
c0012021:	6a 03                	push   0x3
c0012023:	83 c3 01             	add    ebx,0x1
c0012026:	50                   	push   eax
c0012027:	e8 ca fe ff ff       	call   c0011ef6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001202c:	39 fb                	cmp    ebx,edi
c001202e:	59                   	pop    ecx
c001202f:	58                   	pop    eax
c0012030:	75 d9                	jne    c001200b <Virt::allocateKernelVirtualPages(int)+0xb8>
c0012032:	83 c4 1c             	add    esp,0x1c
c0012035:	89 f0                	mov    eax,esi
c0012037:	5b                   	pop    ebx
c0012038:	c1 e0 0c             	shl    eax,0xc
c001203b:	5e                   	pop    esi
c001203c:	5f                   	pop    edi
c001203d:	5d                   	pop    ebp
c001203e:	c3                   	ret    
c001203f:	6a 02                	push   0x2
c0012041:	bb 01 00 00 00       	mov    ebx,0x1
c0012046:	50                   	push   eax
c0012047:	e8 aa fe ff ff       	call   c0011ef6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001204c:	58                   	pop    eax
c001204d:	5a                   	pop    edx
c001204e:	eb bb                	jmp    c001200b <Virt::allocateKernelVirtualPages(int)+0xb8>
c0012050:	6a 04                	push   0x4
c0012052:	56                   	push   esi
c0012053:	8d 46 01             	lea    eax,[esi+0x1]
c0012056:	a3 64 45 02 c0       	mov    ds:0xc0024564,eax
c001205b:	e8 96 fe ff ff       	call   c0011ef6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012060:	89 f0                	mov    eax,esi
c0012062:	59                   	pop    ecx
c0012063:	c1 e0 0c             	shl    eax,0xc
c0012066:	5b                   	pop    ebx
c0012067:	83 c4 1c             	add    esp,0x1c
c001206a:	5b                   	pop    ebx
c001206b:	5e                   	pop    esi
c001206c:	5f                   	pop    edi
c001206d:	5d                   	pop    ebp
c001206e:	c3                   	ret    

c001206f <Virt::freeSwapfilePage(unsigned long)>:
c001206f:	53                   	push   ebx
c0012070:	8b 15 cc be 02 c0    	mov    edx,DWORD PTR ds:0xc002becc
c0012076:	b8 01 00 00 00       	mov    eax,0x1
c001207b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001207f:	d3 e0                	shl    eax,cl
c0012081:	89 cb                	mov    ebx,ecx
c0012083:	c1 eb 05             	shr    ebx,0x5
c0012086:	f7 d0                	not    eax
c0012088:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c001208b:	21 c1                	and    ecx,eax
c001208d:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0012090:	5b                   	pop    ebx
c0012091:	c3                   	ret    

c0012092 <Virt::swapIDToSector(unsigned long)>:
c0012092:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012096:	8b 15 6c 45 02 c0    	mov    edx,DWORD PTR ds:0xc002456c
c001209c:	8b 0d 74 45 02 c0    	mov    ecx,DWORD PTR ds:0xc0024574
c00120a2:	0f af c2             	imul   eax,edx
c00120a5:	01 c8                	add    eax,ecx
c00120a7:	c3                   	ret    

c00120a8 <Virt::allocateSwapfilePage()>:
c00120a8:	55                   	push   ebp
c00120a9:	31 d2                	xor    edx,edx
c00120ab:	57                   	push   edi
c00120ac:	56                   	push   esi
c00120ad:	53                   	push   ebx
c00120ae:	83 ec 0c             	sub    esp,0xc
c00120b1:	8b 1d 70 45 02 c0    	mov    ebx,DWORD PTR ds:0xc0024570
c00120b7:	8b 0d 6c 45 02 c0    	mov    ecx,DWORD PTR ds:0xc002456c
c00120bd:	89 d8                	mov    eax,ebx
c00120bf:	f7 f1                	div    ecx
c00120c1:	39 cb                	cmp    ebx,ecx
c00120c3:	72 2f                	jb     c00120f4 <Virt::allocateSwapfilePage()+0x4c>
c00120c5:	8b 35 cc be 02 c0    	mov    esi,DWORD PTR ds:0xc002becc
c00120cb:	8b 16                	mov    edx,DWORD PTR [esi]
c00120cd:	f6 c2 01             	test   dl,0x1
c00120d0:	74 3e                	je     c0012110 <Virt::allocateSwapfilePage()+0x68>
c00120d2:	31 c9                	xor    ecx,ecx
c00120d4:	bf 01 00 00 00       	mov    edi,0x1
c00120d9:	eb 12                	jmp    c00120ed <Virt::allocateSwapfilePage()+0x45>
c00120db:	89 ca                	mov    edx,ecx
c00120dd:	89 fd                	mov    ebp,edi
c00120df:	c1 ea 05             	shr    edx,0x5
c00120e2:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00120e5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00120e7:	d3 e5                	shl    ebp,cl
c00120e9:	85 ea                	test   edx,ebp
c00120eb:	74 2c                	je     c0012119 <Virt::allocateSwapfilePage()+0x71>
c00120ed:	83 c1 01             	add    ecx,0x1
c00120f0:	39 c8                	cmp    eax,ecx
c00120f2:	77 e7                	ja     c00120db <Virt::allocateSwapfilePage()+0x33>
c00120f4:	83 ec 0c             	sub    esp,0xc
c00120f7:	68 38 29 02 c0       	push   0xc0022938
c00120fc:	e8 15 cb ff ff       	call   c000ec16 <KePanic(char const*)>
c0012101:	83 c4 10             	add    esp,0x10
c0012104:	31 c9                	xor    ecx,ecx
c0012106:	83 c4 0c             	add    esp,0xc
c0012109:	89 c8                	mov    eax,ecx
c001210b:	5b                   	pop    ebx
c001210c:	5e                   	pop    esi
c001210d:	5f                   	pop    edi
c001210e:	5d                   	pop    ebp
c001210f:	c3                   	ret    
c0012110:	89 f3                	mov    ebx,esi
c0012112:	bd 01 00 00 00       	mov    ebp,0x1
c0012117:	31 c9                	xor    ecx,ecx
c0012119:	09 ea                	or     edx,ebp
c001211b:	89 c8                	mov    eax,ecx
c001211d:	89 13                	mov    DWORD PTR [ebx],edx
c001211f:	83 c4 0c             	add    esp,0xc
c0012122:	5b                   	pop    ebx
c0012123:	5e                   	pop    esi
c0012124:	5f                   	pop    edi
c0012125:	5d                   	pop    ebp
c0012126:	c3                   	ret    

c0012127 <Virt::virtualMemorySetup()>:
c0012127:	53                   	push   ebx
c0012128:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001212d:	6a 0f                	push   0xf
c001212f:	53                   	push   ebx
c0012130:	83 c3 01             	add    ebx,0x1
c0012133:	e8 be fd ff ff       	call   c0011ef6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012138:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001213e:	58                   	pop    eax
c001213f:	5a                   	pop    edx
c0012140:	75 eb                	jne    c001212d <Virt::virtualMemorySetup()+0x6>
c0012142:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0012147:	6a 00                	push   0x0
c0012149:	53                   	push   ebx
c001214a:	83 c3 01             	add    ebx,0x1
c001214d:	e8 a4 fd ff ff       	call   c0011ef6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012152:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0012158:	59                   	pop    ecx
c0012159:	58                   	pop    eax
c001215a:	75 eb                	jne    c0012147 <Virt::virtualMemorySetup()+0x20>
c001215c:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0012161:	6a 0f                	push   0xf
c0012163:	53                   	push   ebx
c0012164:	83 c3 01             	add    ebx,0x1
c0012167:	e8 8a fd ff ff       	call   c0011ef6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001216c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0012172:	58                   	pop    eax
c0012173:	5a                   	pop    edx
c0012174:	75 eb                	jne    c0012161 <Virt::virtualMemorySetup()+0x3a>
c0012176:	5b                   	pop    ebx
c0012177:	c3                   	ret    

c0012178 <Virt::setupPageSwapping(int)>:
c0012178:	53                   	push   ebx
c0012179:	83 ec 0c             	sub    esp,0xc
c001217c:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c0012181:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012185:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001218b:	8b 10                	mov    edx,DWORD PTR [eax]
c001218d:	53                   	push   ebx
c001218e:	68 4f 29 02 c0       	push   0xc002294f
c0012193:	50                   	push   eax
c0012194:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0012197:	c1 e3 0b             	shl    ebx,0xb
c001219a:	89 1d 70 45 02 c0    	mov    DWORD PTR ds:0xc0024570,ebx
c00121a0:	c1 eb 08             	shr    ebx,0x8
c00121a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00121a6:	c6 05 78 45 02 c0 43 	mov    BYTE PTR ds:0xc0024578,0x43
c00121ad:	c7 05 6c 45 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002456c,0x8
c00121b7:	a3 74 45 02 c0       	mov    ds:0xc0024574,eax
c00121bc:	e8 0f c7 ff ff       	call   c000e8d0 <malloc>
c00121c1:	31 d2                	xor    edx,edx
c00121c3:	83 c4 0c             	add    esp,0xc
c00121c6:	a3 cc be 02 c0       	mov    ds:0xc002becc,eax
c00121cb:	89 c1                	mov    ecx,eax
c00121cd:	a1 70 45 02 c0       	mov    eax,ds:0xc0024570
c00121d2:	f7 35 6c 45 02 c0    	div    DWORD PTR ds:0xc002456c
c00121d8:	c1 e8 05             	shr    eax,0x5
c00121db:	50                   	push   eax
c00121dc:	6a 00                	push   0x0
c00121de:	51                   	push   ecx
c00121df:	e8 0c e3 fe ff       	call   c00004f0 <memset>
c00121e4:	83 c4 18             	add    esp,0x18
c00121e7:	5b                   	pop    ebx
c00121e8:	c3                   	ret    
c00121e9:	90                   	nop

c00121ea <VAS::setCPUSpecific(unsigned long)>:
c00121ea:	c3                   	ret    
c00121eb:	90                   	nop

c00121ec <VAS::VAS(VAS*)>:
c00121ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00121f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121fb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012202:	90                   	nop
c0012203:	c3                   	ret    

c0012204 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0012204:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012208:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001220d:	89 c2                	mov    edx,eax
c001220f:	c1 ea 16             	shr    edx,0x16
c0012212:	c1 e8 0a             	shr    eax,0xa
c0012215:	83 f9 01             	cmp    ecx,0x1
c0012218:	19 c9                	sbb    ecx,ecx
c001221a:	25 fc 0f 00 00       	and    eax,0xffc
c001221f:	c1 e2 0c             	shl    edx,0xc
c0012222:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0012228:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c001222f:	01 d0                	add    eax,edx
c0012231:	c3                   	ret    

c0012232 <VAS::getPageTableEntry(unsigned long)>:
c0012232:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012236:	89 ca                	mov    edx,ecx
c0012238:	c1 ea 16             	shr    edx,0x16
c001223b:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0012241:	c1 e9 0a             	shr    ecx,0xa
c0012244:	c1 e0 0c             	shl    eax,0xc
c0012247:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c001224d:	8d 04 08             	lea    eax,[eax+ecx*1]
c0012250:	c3                   	ret    

c0012251 <Virt::freeKernelVirtualPages(unsigned long)>:
c0012251:	55                   	push   ebp
c0012252:	57                   	push   edi
c0012253:	bf 01 00 00 00       	mov    edi,0x1
c0012258:	56                   	push   esi
c0012259:	53                   	push   ebx
c001225a:	83 ec 1c             	sub    esp,0x1c
c001225d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012261:	c1 ee 0c             	shr    esi,0xc
c0012264:	eb 48                	jmp    c00122ae <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0012266:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c001226b:	83 ec 08             	sub    esp,0x8
c001226e:	55                   	push   ebp
c001226f:	50                   	push   eax
c0012270:	e8 bd ff ff ff       	call   c0012232 <VAS::getPageTableEntry(unsigned long)>
c0012275:	83 c4 10             	add    esp,0x10
c0012278:	8b 10                	mov    edx,DWORD PTR [eax]
c001227a:	f6 c6 04             	test   dh,0x4
c001227d:	75 70                	jne    c00122ef <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001227f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012285:	83 fb 04             	cmp    ebx,0x4
c0012288:	0f 84 8a 00 00 00    	je     c0012318 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001228e:	83 fb 02             	cmp    ebx,0x2
c0012291:	0f 84 9a 00 00 00    	je     c0012331 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0012297:	83 fb 03             	cmp    ebx,0x3
c001229a:	0f 84 be 00 00 00    	je     c001235e <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c00122a0:	83 fb 01             	cmp    ebx,0x1
c00122a3:	0f 84 a2 00 00 00    	je     c001234b <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00122a9:	83 c6 01             	add    esi,0x1
c00122ac:	31 ff                	xor    edi,edi
c00122ae:	56                   	push   esi
c00122af:	89 f5                	mov    ebp,esi
c00122b1:	e8 7a fc ff ff       	call   c0011f30 <Virt::getPageState(unsigned long)>
c00122b6:	c1 e5 0c             	shl    ebp,0xc
c00122b9:	5a                   	pop    edx
c00122ba:	0f b6 d8             	movzx  ebx,al
c00122bd:	85 db                	test   ebx,ebx
c00122bf:	75 a5                	jne    c0012266 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00122c1:	83 ec 0c             	sub    esp,0xc
c00122c4:	68 66 29 02 c0       	push   0xc0022966
c00122c9:	e8 48 c9 ff ff       	call   c000ec16 <KePanic(char const*)>
c00122ce:	5a                   	pop    edx
c00122cf:	59                   	pop    ecx
c00122d0:	55                   	push   ebp
c00122d1:	8b 2d d0 be 02 c0    	mov    ebp,DWORD PTR ds:0xc002bed0
c00122d7:	55                   	push   ebp
c00122d8:	e8 55 ff ff ff       	call   c0012232 <VAS::getPageTableEntry(unsigned long)>
c00122dd:	83 c4 10             	add    esp,0x10
c00122e0:	8b 10                	mov    edx,DWORD PTR [eax]
c00122e2:	f6 c6 04             	test   dh,0x4
c00122e5:	75 08                	jne    c00122ef <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00122e7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00122ed:	eb ba                	jmp    c00122a9 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00122ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00122f3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00122f9:	83 ec 0c             	sub    esp,0xc
c00122fc:	52                   	push   edx
c00122fd:	e8 a5 ca ff ff       	call   c000eda7 <Phys::freePage(unsigned long)>
c0012302:	83 c4 10             	add    esp,0x10
c0012305:	83 fb 04             	cmp    ebx,0x4
c0012308:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001230c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012312:	0f 85 76 ff ff ff    	jne    c001228e <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0012318:	83 e7 01             	and    edi,0x1
c001231b:	75 46                	jne    c0012363 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c001231d:	c7 44 24 30 e8 26 02 c0 	mov    DWORD PTR [esp+0x30],0xc00226e8
c0012325:	83 c4 1c             	add    esp,0x1c
c0012328:	5b                   	pop    ebx
c0012329:	5e                   	pop    esi
c001232a:	5f                   	pop    edi
c001232b:	5d                   	pop    ebp
c001232c:	e9 e5 c8 ff ff       	jmp    c000ec16 <KePanic(char const*)>
c0012331:	83 e7 01             	and    edi,0x1
c0012334:	75 15                	jne    c001234b <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0012336:	83 ec 0c             	sub    esp,0xc
c0012339:	68 82 29 02 c0       	push   0xc0022982
c001233e:	e8 d3 c8 ff ff       	call   c000ec16 <KePanic(char const*)>
c0012343:	83 c4 10             	add    esp,0x10
c0012346:	e9 5e ff ff ff       	jmp    c00122a9 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001234b:	83 ec 08             	sub    esp,0x8
c001234e:	6a 00                	push   0x0
c0012350:	56                   	push   esi
c0012351:	e8 a0 fb ff ff       	call   c0011ef6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012356:	83 c4 10             	add    esp,0x10
c0012359:	e9 4b ff ff ff       	jmp    c00122a9 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001235e:	83 e7 01             	and    edi,0x1
c0012361:	75 16                	jne    c0012379 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0012363:	83 ec 08             	sub    esp,0x8
c0012366:	6a 00                	push   0x0
c0012368:	56                   	push   esi
c0012369:	e8 88 fb ff ff       	call   c0011ef6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001236e:	83 c4 10             	add    esp,0x10
c0012371:	83 c4 1c             	add    esp,0x1c
c0012374:	5b                   	pop    ebx
c0012375:	5e                   	pop    esi
c0012376:	5f                   	pop    edi
c0012377:	5d                   	pop    ebp
c0012378:	c3                   	ret    
c0012379:	c7 44 24 30 9e 29 02 c0 	mov    DWORD PTR [esp+0x30],0xc002299e
c0012381:	83 c4 1c             	add    esp,0x1c
c0012384:	5b                   	pop    ebx
c0012385:	5e                   	pop    esi
c0012386:	5f                   	pop    edi
c0012387:	5d                   	pop    ebp
c0012388:	e9 89 c8 ff ff       	jmp    c000ec16 <KePanic(char const*)>
c001238d:	90                   	nop

c001238e <VAS::freeAllocatedPages(unsigned long)>:
c001238e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012392:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012396:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001239a:	74 09                	je     c00123a5 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001239c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00123a0:	e9 ac fe ff ff       	jmp    c0012251 <Virt::freeKernelVirtualPages(unsigned long)>
c00123a5:	c7 44 24 04 0c 27 02 c0 	mov    DWORD PTR [esp+0x4],0xc002270c
c00123ad:	e9 9c 4b ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>

c00123b2 <VAS::virtualToPhysical(unsigned long)>:
c00123b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00123b6:	50                   	push   eax
c00123b7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123bb:	52                   	push   edx
c00123bc:	e8 71 fe ff ff       	call   c0012232 <VAS::getPageTableEntry(unsigned long)>
c00123c1:	59                   	pop    ecx
c00123c2:	5a                   	pop    edx
c00123c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00123c5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00123ca:	c3                   	ret    
c00123cb:	90                   	nop

c00123cc <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c00123cc:	55                   	push   ebp
c00123cd:	57                   	push   edi
c00123ce:	56                   	push   esi
c00123cf:	53                   	push   ebx
c00123d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00123d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00123d8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00123dc:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00123e0:	85 db                	test   ebx,ebx
c00123e2:	7e 24                	jle    c0012408 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c00123e4:	c1 e3 0c             	shl    ebx,0xc
c00123e7:	01 f3                	add    ebx,esi
c00123e9:	56                   	push   esi
c00123ea:	81 c6 00 10 00 00    	add    esi,0x1000
c00123f0:	55                   	push   ebp
c00123f1:	e8 3c fe ff ff       	call   c0012232 <VAS::getPageTableEntry(unsigned long)>
c00123f6:	5a                   	pop    edx
c00123f7:	59                   	pop    ecx
c00123f8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00123fa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00123fe:	21 f9                	and    ecx,edi
c0012400:	09 d1                	or     ecx,edx
c0012402:	39 f3                	cmp    ebx,esi
c0012404:	89 08                	mov    DWORD PTR [eax],ecx
c0012406:	75 e1                	jne    c00123e9 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0012408:	5b                   	pop    ebx
c0012409:	5e                   	pop    esi
c001240a:	5f                   	pop    edi
c001240b:	5d                   	pop    ebp
c001240c:	c3                   	ret    
c001240d:	90                   	nop

c001240e <VAS::VAS()>:
c001240e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012412:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012419:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001241d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012424:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012428:	a3 d0 be 02 c0       	mov    ds:0xc002bed0,eax
c001242d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012431:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0012435:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012439:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001243c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012440:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0012447:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c001244c:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0012451:	29 c2                	sub    edx,eax
c0012453:	89 d0                	mov    eax,edx
c0012455:	05 ff 0f 00 00       	add    eax,0xfff
c001245a:	c1 e8 0c             	shr    eax,0xc
c001245d:	89 c2                	mov    edx,eax
c001245f:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0012464:	6a 04                	push   0x4
c0012466:	6a ff                	push   0xffffffff
c0012468:	52                   	push   edx
c0012469:	50                   	push   eax
c001246a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001246e:	e8 59 ff ff ff       	call   c00123cc <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0012473:	83 c4 14             	add    esp,0x14
c0012476:	90                   	nop
c0012477:	c3                   	ret    

c0012478 <VAS::setToWriteCombining(unsigned long, int)>:
c0012478:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c001247d:	50                   	push   eax
c001247e:	6a ff                	push   0xffffffff
c0012480:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012484:	52                   	push   edx
c0012485:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012489:	51                   	push   ecx
c001248a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001248e:	50                   	push   eax
c001248f:	e8 38 ff ff ff       	call   c00123cc <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0012494:	83 c4 14             	add    esp,0x14
c0012497:	c3                   	ret    

c0012498 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012498:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001249c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001249f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124a3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00124a6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00124ab:	83 f8 01             	cmp    eax,0x1
c00124ae:	19 c0                	sbb    eax,eax
c00124b0:	83 ca 03             	or     edx,0x3
c00124b3:	83 e0 fc             	and    eax,0xfffffffc
c00124b6:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00124bd:	0f 20 d8             	mov    eax,cr3
c00124c0:	0f 22 d8             	mov    cr3,eax
c00124c3:	c3                   	ret    

c00124c4 <VAS::~VAS()>:
c00124c4:	83 ec 2c             	sub    esp,0x2c
c00124c7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00124cf:	fa                   	cli    
c00124d0:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00124d5:	83 c0 01             	add    eax,0x1
c00124d8:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00124dd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00124e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00124e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00124e7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00124ed:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00124f1:	6a 01                	push   0x1
c00124f3:	50                   	push   eax
c00124f4:	e8 9f ff ff ff       	call   c0012498 <VAS::mapOtherVASIn(bool, VAS*)>
c00124f9:	83 c4 0c             	add    esp,0xc
c00124fc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012504:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001250c:	0f 8f d8 00 00 00    	jg     c00125ea <VAS::~VAS()+0x126>
c0012512:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012516:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012519:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001251d:	c1 e2 02             	shl    edx,0x2
c0012520:	01 d0                	add    eax,edx
c0012522:	8b 00                	mov    eax,DWORD PTR [eax]
c0012524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001252c:	83 e0 01             	and    eax,0x1
c001252f:	0f 84 ab 00 00 00    	je     c00125e0 <VAS::~VAS()+0x11c>
c0012535:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001253d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012545:	7f 74                	jg     c00125bb <VAS::~VAS()+0xf7>
c0012547:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001254b:	c1 e0 0a             	shl    eax,0xa
c001254e:	89 c2                	mov    edx,eax
c0012550:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012554:	01 d0                	add    eax,edx
c0012556:	c1 e0 0c             	shl    eax,0xc
c0012559:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001255d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012562:	8b 00                	mov    eax,DWORD PTR [eax]
c0012564:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012567:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001256d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012571:	6a 01                	push   0x1
c0012573:	50                   	push   eax
c0012574:	e8 8b fc ff ff       	call   c0012204 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012579:	83 c4 0c             	add    esp,0xc
c001257c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012580:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012584:	8b 00                	mov    eax,DWORD PTR [eax]
c0012586:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001258a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001258e:	25 01 04 00 00       	and    eax,0x401
c0012593:	3d 01 04 00 00       	cmp    eax,0x401
c0012598:	75 1a                	jne    c00125b4 <VAS::~VAS()+0xf0>
c001259a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001259e:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125a3:	83 ec 0c             	sub    esp,0xc
c00125a6:	50                   	push   eax
c00125a7:	e8 fb c7 ff ff       	call   c000eda7 <Phys::freePage(unsigned long)>
c00125ac:	83 c4 10             	add    esp,0x10
c00125af:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00125b4:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c00125b9:	eb 82                	jmp    c001253d <VAS::~VAS()+0x79>
c00125bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125bf:	25 00 04 00 00       	and    eax,0x400
c00125c4:	74 1a                	je     c00125e0 <VAS::~VAS()+0x11c>
c00125c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125ca:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125cf:	83 ec 0c             	sub    esp,0xc
c00125d2:	50                   	push   eax
c00125d3:	e8 cf c7 ff ff       	call   c000eda7 <Phys::freePage(unsigned long)>
c00125d8:	83 c4 10             	add    esp,0x10
c00125db:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00125e0:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00125e5:	e9 1a ff ff ff       	jmp    c0012504 <VAS::~VAS()+0x40>
c00125ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125ee:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00125f1:	83 ec 0c             	sub    esp,0xc
c00125f4:	50                   	push   eax
c00125f5:	e8 57 fc ff ff       	call   c0012251 <Virt::freeKernelVirtualPages(unsigned long)>
c00125fa:	83 c4 10             	add    esp,0x10
c00125fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012601:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012604:	83 ec 0c             	sub    esp,0xc
c0012607:	50                   	push   eax
c0012608:	e8 9a c7 ff ff       	call   c000eda7 <Phys::freePage(unsigned long)>
c001260d:	83 c4 10             	add    esp,0x10
c0012610:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012615:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c001261d:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0012622:	85 c0                	test   eax,eax
c0012624:	75 01                	jne    c0012627 <VAS::~VAS()+0x163>
c0012626:	fb                   	sti    
c0012627:	90                   	nop
c0012628:	83 c4 2c             	add    esp,0x2c
c001262b:	c3                   	ret    

c001262c <VAS::mapPage(unsigned long, unsigned long, int)>:
c001262c:	55                   	push   ebp
c001262d:	57                   	push   edi
c001262e:	56                   	push   esi
c001262f:	53                   	push   ebx
c0012630:	83 ec 1c             	sub    esp,0x1c
c0012633:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012637:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001263b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001263f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012645:	77 08                	ja     c001264f <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0012647:	0f 20 d8             	mov    eax,cr3
c001264a:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c001264d:	75 43                	jne    c0012692 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001264f:	89 d8                	mov    eax,ebx
c0012651:	09 f8                	or     eax,edi
c0012653:	a9 ff 0f 00 00       	test   eax,0xfff
c0012658:	75 53                	jne    c00126ad <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c001265a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001265d:	89 de                	mov    esi,ebx
c001265f:	c1 ee 16             	shr    esi,0x16
c0012662:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012669:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001266d:	74 50                	je     c00126bf <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c001266f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012673:	c1 eb 0a             	shr    ebx,0xa
c0012676:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001267c:	c1 e6 0c             	shl    esi,0xc
c001267f:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012685:	09 c7                	or     edi,eax
c0012687:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c001268a:	83 c4 1c             	add    esp,0x1c
c001268d:	5b                   	pop    ebx
c001268e:	5e                   	pop    esi
c001268f:	5f                   	pop    edi
c0012690:	5d                   	pop    ebp
c0012691:	c3                   	ret    
c0012692:	83 ec 0c             	sub    esp,0xc
c0012695:	68 30 27 02 c0       	push   0xc0022730
c001269a:	e8 af 48 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001269f:	89 d8                	mov    eax,ebx
c00126a1:	83 c4 10             	add    esp,0x10
c00126a4:	09 f8                	or     eax,edi
c00126a6:	a9 ff 0f 00 00       	test   eax,0xfff
c00126ab:	74 ad                	je     c001265a <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c00126ad:	83 ec 0c             	sub    esp,0xc
c00126b0:	68 98 27 02 c0       	push   0xc0022798
c00126b5:	e8 5c c5 ff ff       	call   c000ec16 <KePanic(char const*)>
c00126ba:	83 c4 10             	add    esp,0x10
c00126bd:	eb 9b                	jmp    c001265a <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c00126bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00126c3:	e8 48 c7 ff ff       	call   c000ee10 <Phys::allocatePage()>
c00126c8:	8b 0d d0 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002bed0
c00126ce:	83 ec 0c             	sub    esp,0xc
c00126d1:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00126d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00126d9:	6a 01                	push   0x1
c00126db:	e8 73 f8 ff ff       	call   c0011f53 <Virt::allocateKernelVirtualPages(int)>
c00126e0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00126e7:	6a 01                	push   0x1
c00126e9:	50                   	push   eax
c00126ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00126ee:	52                   	push   edx
c00126ef:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00126f3:	51                   	push   ecx
c00126f4:	e8 2d 01 00 00       	call   c0012826 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126f9:	83 c4 1c             	add    esp,0x1c
c00126fc:	68 00 10 00 00       	push   0x1000
c0012701:	6a 00                	push   0x0
c0012703:	50                   	push   eax
c0012704:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012708:	e8 e3 dd fe ff       	call   c00004f0 <memset>
c001270d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012711:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012714:	e8 38 fb ff ff       	call   c0012251 <Virt::freeKernelVirtualPages(unsigned long)>
c0012719:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001271d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012721:	83 c4 10             	add    esp,0x10
c0012724:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0012727:	0d 07 04 00 00       	or     eax,0x407
c001272c:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c001272f:	e9 3b ff ff ff       	jmp    c001266f <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0012734 <VAS::allocatePages(int, int)>:
c0012734:	55                   	push   ebp
c0012735:	57                   	push   edi
c0012736:	56                   	push   esi
c0012737:	53                   	push   ebx
c0012738:	83 ec 1c             	sub    esp,0x1c
c001273b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001273f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012743:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0012747:	75 75                	jne    c00127be <VAS::allocatePages(int, int)+0x8a>
c0012749:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001274c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012750:	85 c0                	test   eax,eax
c0012752:	74 49                	je     c001279d <VAS::allocatePages(int, int)+0x69>
c0012754:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012758:	89 d5                	mov    ebp,edx
c001275a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001275e:	c1 e5 0c             	shl    ebp,0xc
c0012761:	01 dd                	add    ebp,ebx
c0012763:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0012766:	81 cf 00 04 00 00    	or     edi,0x400
c001276c:	85 d2                	test   edx,edx
c001276e:	7e 1b                	jle    c001278b <VAS::allocatePages(int, int)+0x57>
c0012770:	e8 9b c6 ff ff       	call   c000ee10 <Phys::allocatePage()>
c0012775:	57                   	push   edi
c0012776:	53                   	push   ebx
c0012777:	81 c3 00 10 00 00    	add    ebx,0x1000
c001277d:	50                   	push   eax
c001277e:	56                   	push   esi
c001277f:	e8 a8 fe ff ff       	call   c001262c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012784:	83 c4 10             	add    esp,0x10
c0012787:	39 dd                	cmp    ebp,ebx
c0012789:	75 e5                	jne    c0012770 <VAS::allocatePages(int, int)+0x3c>
c001278b:	0f 20 d8             	mov    eax,cr3
c001278e:	0f 22 d8             	mov    cr3,eax
c0012791:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012795:	83 c4 1c             	add    esp,0x1c
c0012798:	5b                   	pop    ebx
c0012799:	5e                   	pop    esi
c001279a:	5f                   	pop    edi
c001279b:	5d                   	pop    ebp
c001279c:	c3                   	ret    
c001279d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00127a1:	83 ec 0c             	sub    esp,0xc
c00127a4:	68 bc 27 02 c0       	push   0xc00227bc
c00127a9:	e8 68 c4 ff ff       	call   c000ec16 <KePanic(char const*)>
c00127ae:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00127b1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00127b5:	83 c4 10             	add    esp,0x10
c00127b8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00127bc:	eb 96                	jmp    c0012754 <VAS::allocatePages(int, int)+0x20>
c00127be:	83 ec 0c             	sub    esp,0xc
c00127c1:	52                   	push   edx
c00127c2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00127c6:	e8 88 f7 ff ff       	call   c0011f53 <Virt::allocateKernelVirtualPages(int)>
c00127cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00127cf:	83 c4 10             	add    esp,0x10
c00127d2:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00127d7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00127db:	77 38                	ja     c0012815 <VAS::allocatePages(int, int)+0xe1>
c00127dd:	85 d2                	test   edx,edx
c00127df:	7e aa                	jle    c001278b <VAS::allocatePages(int, int)+0x57>
c00127e1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00127e5:	c1 e2 0c             	shl    edx,0xc
c00127e8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00127ec:	81 cf 00 04 00 00    	or     edi,0x400
c00127f2:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c00127f5:	e8 16 c6 ff ff       	call   c000ee10 <Phys::allocatePage()>
c00127fa:	57                   	push   edi
c00127fb:	53                   	push   ebx
c00127fc:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012802:	50                   	push   eax
c0012803:	56                   	push   esi
c0012804:	e8 23 fe ff ff       	call   c001262c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012809:	83 c4 10             	add    esp,0x10
c001280c:	39 dd                	cmp    ebp,ebx
c001280e:	75 e5                	jne    c00127f5 <VAS::allocatePages(int, int)+0xc1>
c0012810:	e9 76 ff ff ff       	jmp    c001278b <VAS::allocatePages(int, int)+0x57>
c0012815:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012819:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c001281e:	09 c1                	or     ecx,eax
c0012820:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0012824:	eb b7                	jmp    c00127dd <VAS::allocatePages(int, int)+0xa9>

c0012826 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012826:	55                   	push   ebp
c0012827:	57                   	push   edi
c0012828:	56                   	push   esi
c0012829:	53                   	push   ebx
c001282a:	83 ec 1c             	sub    esp,0x1c
c001282d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012831:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012835:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012839:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001283d:	85 db                	test   ebx,ebx
c001283f:	7e 2c                	jle    c001286d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0012841:	c1 e3 0c             	shl    ebx,0xc
c0012844:	8d 04 33             	lea    eax,[ebx+esi*1]
c0012847:	89 f3                	mov    ebx,esi
c0012849:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001284d:	55                   	push   ebp
c001284e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012852:	29 f2                	sub    edx,esi
c0012854:	01 da                	add    edx,ebx
c0012856:	52                   	push   edx
c0012857:	53                   	push   ebx
c0012858:	81 c3 00 10 00 00    	add    ebx,0x1000
c001285e:	57                   	push   edi
c001285f:	e8 c8 fd ff ff       	call   c001262c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012864:	83 c4 10             	add    esp,0x10
c0012867:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c001286b:	75 e0                	jne    c001284d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c001286d:	0f 20 d8             	mov    eax,cr3
c0012870:	0f 22 d8             	mov    cr3,eax
c0012873:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012877:	83 c4 1c             	add    esp,0x1c
c001287a:	5b                   	pop    ebx
c001287b:	5e                   	pop    esi
c001287c:	5f                   	pop    edi
c001287d:	5d                   	pop    ebp
c001287e:	c3                   	ret    
c001287f:	90                   	nop

c0012880 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012880:	55                   	push   ebp
c0012881:	57                   	push   edi
c0012882:	56                   	push   esi
c0012883:	53                   	push   ebx
c0012884:	83 ec 1c             	sub    esp,0x1c
c0012887:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001288b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001288f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012893:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012897:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001289b:	09 d8                	or     eax,ebx
c001289d:	a9 ff 0f 00 00       	test   eax,0xfff
c00128a2:	75 4b                	jne    c00128ef <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c00128a4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00128a7:	89 de                	mov    esi,ebx
c00128a9:	c1 ee 16             	shr    esi,0x16
c00128ac:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c00128b3:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c00128b7:	74 48                	je     c0012901 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c00128b9:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c00128be:	c1 eb 0a             	shr    ebx,0xa
c00128c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00128c5:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00128c9:	83 ff 01             	cmp    edi,0x1
c00128cc:	19 c0                	sbb    eax,eax
c00128ce:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00128d4:	c1 e6 0c             	shl    esi,0xc
c00128d7:	25 00 00 c0 ff       	and    eax,0xffc00000
c00128dc:	01 f3                	add    ebx,esi
c00128de:	09 ca                	or     edx,ecx
c00128e0:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c00128e7:	83 c4 1c             	add    esp,0x1c
c00128ea:	5b                   	pop    ebx
c00128eb:	5e                   	pop    esi
c00128ec:	5f                   	pop    edi
c00128ed:	5d                   	pop    ebp
c00128ee:	c3                   	ret    
c00128ef:	83 ec 0c             	sub    esp,0xc
c00128f2:	68 e8 27 02 c0       	push   0xc00227e8
c00128f7:	e8 1a c3 ff ff       	call   c000ec16 <KePanic(char const*)>
c00128fc:	83 c4 10             	add    esp,0x10
c00128ff:	eb a3                	jmp    c00128a4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0012901:	e8 0a c5 ff ff       	call   c000ee10 <Phys::allocatePage()>
c0012906:	8b 0d d0 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002bed0
c001290c:	83 ec 0c             	sub    esp,0xc
c001290f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0012913:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012917:	6a 01                	push   0x1
c0012919:	e8 35 f6 ff ff       	call   c0011f53 <Virt::allocateKernelVirtualPages(int)>
c001291e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012925:	6a 01                	push   0x1
c0012927:	50                   	push   eax
c0012928:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001292c:	50                   	push   eax
c001292d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012931:	51                   	push   ecx
c0012932:	e8 ef fe ff ff       	call   c0012826 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012937:	83 c4 1c             	add    esp,0x1c
c001293a:	68 00 10 00 00       	push   0x1000
c001293f:	6a 00                	push   0x0
c0012941:	50                   	push   eax
c0012942:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012946:	e8 a5 db fe ff       	call   c00004f0 <memset>
c001294b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001294f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012952:	e8 fa f8 ff ff       	call   c0012251 <Virt::freeKernelVirtualPages(unsigned long)>
c0012957:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001295b:	83 c4 10             	add    esp,0x10
c001295e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012961:	81 ca 07 04 00 00    	or     edx,0x407
c0012967:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c001296a:	e9 4a ff ff ff       	jmp    c00128b9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c001296f:	90                   	nop

c0012970 <VAS::VAS(bool)>:
c0012970:	53                   	push   ebx
c0012971:	83 ec 28             	sub    esp,0x28
c0012974:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012978:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001297c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012980:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012987:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001298b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012992:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012996:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001299a:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001299d:	e8 6e c4 ff ff       	call   c000ee10 <Phys::allocatePage()>
c00129a2:	89 c2                	mov    edx,eax
c00129a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129a8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00129ab:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c00129b1:	83 ec 0c             	sub    esp,0xc
c00129b4:	6a 01                	push   0x1
c00129b6:	e8 98 f5 ff ff       	call   c0011f53 <Virt::allocateKernelVirtualPages(int)>
c00129bb:	83 c4 10             	add    esp,0x10
c00129be:	89 c2                	mov    edx,eax
c00129c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129c4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00129c7:	83 ec 0c             	sub    esp,0xc
c00129ca:	6a 03                	push   0x3
c00129cc:	6a 01                	push   0x1
c00129ce:	52                   	push   edx
c00129cf:	50                   	push   eax
c00129d0:	53                   	push   ebx
c00129d1:	e8 50 fe ff ff       	call   c0012826 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00129d6:	83 c4 20             	add    esp,0x20
c00129d9:	89 c2                	mov    edx,eax
c00129db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129df:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00129e2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00129ea:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00129f2:	7f 1d                	jg     c0012a11 <VAS::VAS(bool)+0xa1>
c00129f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129f8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00129fb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00129ff:	c1 e2 02             	shl    edx,0x2
c0012a02:	01 d0                	add    eax,edx
c0012a04:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012a0a:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012a0f:	eb d9                	jmp    c00129ea <VAS::VAS(bool)+0x7a>
c0012a11:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012a19:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012a21:	7f 59                	jg     c0012a7c <VAS::VAS(bool)+0x10c>
c0012a23:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012a27:	2d 00 02 00 00       	sub    eax,0x200
c0012a2c:	c1 e0 0c             	shl    eax,0xc
c0012a2f:	89 c2                	mov    edx,eax
c0012a31:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0012a36:	89 d1                	mov    ecx,edx
c0012a38:	09 c1                	or     ecx,eax
c0012a3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a3e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012a41:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012a45:	c1 e2 02             	shl    edx,0x2
c0012a48:	01 d0                	add    eax,edx
c0012a4a:	83 c9 05             	or     ecx,0x5
c0012a4d:	89 ca                	mov    edx,ecx
c0012a4f:	89 10                	mov    DWORD PTR [eax],edx
c0012a51:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012a55:	2d 40 03 00 00       	sub    eax,0x340
c0012a5a:	83 f8 7f             	cmp    eax,0x7f
c0012a5d:	77 16                	ja     c0012a75 <VAS::VAS(bool)+0x105>
c0012a5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a63:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012a66:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012a6a:	c1 e2 02             	shl    edx,0x2
c0012a6d:	01 d0                	add    eax,edx
c0012a6f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012a75:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0012a7a:	eb 9d                	jmp    c0012a19 <VAS::VAS(bool)+0xa9>
c0012a7c:	8b 15 68 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c768
c0012a82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a86:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012a89:	05 20 0c 00 00       	add    eax,0xc20
c0012a8e:	81 ca 03 40 00 00    	or     edx,0x4003
c0012a94:	89 10                	mov    DWORD PTR [eax],edx
c0012a96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a9a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012a9d:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0012aa2:	09 c2                	or     edx,eax
c0012aa4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012aa8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012aab:	05 fc 0f 00 00       	add    eax,0xffc
c0012ab0:	83 ca 03             	or     edx,0x3
c0012ab3:	89 10                	mov    DWORD PTR [eax],edx
c0012ab5:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012aba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012ac0:	83 ec 0c             	sub    esp,0xc
c0012ac3:	50                   	push   eax
c0012ac4:	e8 db 67 ff ff       	call   c00092a4 <Device::getName()>
c0012ac9:	83 c4 10             	add    esp,0x10
c0012acc:	83 ec 08             	sub    esp,0x8
c0012acf:	68 b8 29 02 c0       	push   0xc00229b8
c0012ad4:	50                   	push   eax
c0012ad5:	e8 a6 dc fe ff       	call   c0000780 <strcmp>
c0012ada:	83 c4 10             	add    esp,0x10
c0012add:	85 c0                	test   eax,eax
c0012adf:	0f 94 c0             	sete   al
c0012ae2:	0f b6 c0             	movzx  eax,al
c0012ae5:	85 c0                	test   eax,eax
c0012ae7:	74 68                	je     c0012b51 <VAS::VAS(bool)+0x1e1>
c0012ae9:	fa                   	cli    
c0012aea:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012aef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012af5:	05 68 09 00 00       	add    eax,0x968
c0012afa:	83 ec 0c             	sub    esp,0xc
c0012afd:	50                   	push   eax
c0012afe:	e8 af b7 ff ff       	call   c000e2b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012b03:	83 c4 10             	add    esp,0x10
c0012b06:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b0b:	89 c3                	mov    ebx,eax
c0012b0d:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012b12:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012b18:	05 68 09 00 00       	add    eax,0x968
c0012b1d:	83 ec 0c             	sub    esp,0xc
c0012b20:	50                   	push   eax
c0012b21:	e8 8c b7 ff ff       	call   c000e2b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012b26:	83 c4 10             	add    esp,0x10
c0012b29:	83 ec 08             	sub    esp,0x8
c0012b2c:	50                   	push   eax
c0012b2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b31:	e8 fc f6 ff ff       	call   c0012232 <VAS::getPageTableEntry(unsigned long)>
c0012b36:	83 c4 10             	add    esp,0x10
c0012b39:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b3b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b40:	6a 11                	push   0x11
c0012b42:	53                   	push   ebx
c0012b43:	50                   	push   eax
c0012b44:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b48:	e8 df fa ff ff       	call   c001262c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012b4d:	83 c4 10             	add    esp,0x10
c0012b50:	fb                   	sti    
c0012b51:	90                   	nop
c0012b52:	83 c4 28             	add    esp,0x28
c0012b55:	5b                   	pop    ebx
c0012b56:	c3                   	ret    
c0012b57:	90                   	nop

c0012b58 <VAS::evict(unsigned long)>:
c0012b58:	55                   	push   ebp
c0012b59:	57                   	push   edi
c0012b5a:	56                   	push   esi
c0012b5b:	53                   	push   ebx
c0012b5c:	83 ec 1c             	sub    esp,0x1c
c0012b5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b63:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012b67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012b6b:	e8 38 f5 ff ff       	call   c00120a8 <Virt::allocateSwapfilePage()>
c0012b70:	89 c7                	mov    edi,eax
c0012b72:	a1 6c 45 02 c0       	mov    eax,ds:0xc002456c
c0012b77:	85 c0                	test   eax,eax
c0012b79:	7e 40                	jle    c0012bbb <VAS::evict(unsigned long)+0x63>
c0012b7b:	89 ee                	mov    esi,ebp
c0012b7d:	31 db                	xor    ebx,ebx
c0012b7f:	83 ec 0c             	sub    esp,0xc
c0012b82:	57                   	push   edi
c0012b83:	e8 0a f5 ff ff       	call   c0012092 <Virt::swapIDToSector(unsigned long)>
c0012b88:	31 d2                	xor    edx,edx
c0012b8a:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b8d:	81 c6 00 02 00 00    	add    esi,0x200
c0012b93:	6a 01                	push   0x1
c0012b95:	52                   	push   edx
c0012b96:	01 d8                	add    eax,ebx
c0012b98:	83 c3 01             	add    ebx,0x1
c0012b9b:	50                   	push   eax
c0012b9c:	0f be 05 78 45 02 c0 	movsx  eax,BYTE PTR ds:0xc0024578
c0012ba3:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c0012baa:	50                   	push   eax
c0012bab:	e8 8c 75 ff ff       	call   c000a13c <LogicalDisk::write(unsigned long long, int, void*)>
c0012bb0:	83 c4 20             	add    esp,0x20
c0012bb3:	39 1d 6c 45 02 c0    	cmp    DWORD PTR ds:0xc002456c,ebx
c0012bb9:	7f c4                	jg     c0012b7f <VAS::evict(unsigned long)+0x27>
c0012bbb:	c1 e7 0c             	shl    edi,0xc
c0012bbe:	83 ec 08             	sub    esp,0x8
c0012bc1:	55                   	push   ebp
c0012bc2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012bc6:	50                   	push   eax
c0012bc7:	e8 66 f6 ff ff       	call   c0012232 <VAS::getPageTableEntry(unsigned long)>
c0012bcc:	8b 10                	mov    edx,DWORD PTR [eax]
c0012bce:	89 d3                	mov    ebx,edx
c0012bd0:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012bd6:	09 d7                	or     edi,edx
c0012bd8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012bde:	89 38                	mov    DWORD PTR [eax],edi
c0012be0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012be3:	8b 15 c8 be 02 c0    	mov    edx,DWORD PTR ds:0xc002bec8
c0012be9:	83 c2 01             	add    edx,0x1
c0012bec:	89 15 c8 be 02 c0    	mov    DWORD PTR ds:0xc002bec8,edx
c0012bf2:	e8 b0 c1 ff ff       	call   c000eda7 <Phys::freePage(unsigned long)>
c0012bf7:	0f 20 d8             	mov    eax,cr3
c0012bfa:	0f 22 d8             	mov    cr3,eax
c0012bfd:	8b 0d c8 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002bec8
c0012c03:	51                   	push   ecx
c0012c04:	55                   	push   ebp
c0012c05:	53                   	push   ebx
c0012c06:	68 0c 28 02 c0       	push   0xc002280c
c0012c0b:	e8 3e 43 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012c10:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c0012c15:	c7 44 24 50 c6 29 02 c0 	mov    DWORD PTR [esp+0x50],0xc00229c6
c0012c1d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0012c21:	8d 50 01             	lea    edx,[eax+0x1]
c0012c24:	89 15 c4 be 02 c0    	mov    DWORD PTR ds:0xc002bec4,edx
c0012c2a:	83 c4 3c             	add    esp,0x3c
c0012c2d:	5b                   	pop    ebx
c0012c2e:	5e                   	pop    esi
c0012c2f:	5f                   	pop    edi
c0012c30:	5d                   	pop    ebp
c0012c31:	e9 18 43 ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>

c0012c36 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012c36:	55                   	push   ebp
c0012c37:	57                   	push   edi
c0012c38:	56                   	push   esi
c0012c39:	53                   	push   ebx
c0012c3a:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0012c40:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c0012c47:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012c4d:	77 7c                	ja     c0012ccb <VAS::tryLoadBackOffDisk(unsigned long)+0x95>
c0012c4f:	83 ec 08             	sub    esp,0x8
c0012c52:	53                   	push   ebx
c0012c53:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012c59:	68 e9 29 02 c0       	push   0xc00229e9
c0012c5e:	e8 eb 42 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012c63:	59                   	pop    ecx
c0012c64:	5e                   	pop    esi
c0012c65:	53                   	push   ebx
c0012c66:	8b bc 24 3c 10 00 00 	mov    edi,DWORD PTR [esp+0x103c]
c0012c6d:	57                   	push   edi
c0012c6e:	e8 bf f5 ff ff       	call   c0012232 <VAS::getPageTableEntry(unsigned long)>
c0012c73:	83 c4 10             	add    esp,0x10
c0012c76:	85 c0                	test   eax,eax
c0012c78:	89 c5                	mov    ebp,eax
c0012c7a:	0f 95 c0             	setne  al
c0012c7d:	85 db                	test   ebx,ebx
c0012c7f:	0f 95 c2             	setne  dl
c0012c82:	21 d0                	and    eax,edx
c0012c84:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012c88:	a8 01                	test   al,0x1
c0012c8a:	75 0f                	jne    c0012c9b <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c0012c8c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0012c90:	81 c4 1c 10 00 00    	add    esp,0x101c
c0012c96:	5b                   	pop    ebx
c0012c97:	5e                   	pop    esi
c0012c98:	5f                   	pop    edi
c0012c99:	5d                   	pop    ebp
c0012c9a:	c3                   	ret    
c0012c9b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c9e:	f6 c4 02             	test   ah,0x2
c0012ca1:	75 3d                	jne    c0012ce0 <VAS::tryLoadBackOffDisk(unsigned long)+0xaa>
c0012ca3:	89 c2                	mov    edx,eax
c0012ca5:	81 e2 01 04 00 00    	and    edx,0x401
c0012cab:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012cb1:	0f 84 82 00 00 00    	je     c0012d39 <VAS::tryLoadBackOffDisk(unsigned long)+0x103>
c0012cb7:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0012cbc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0012cc0:	81 c4 1c 10 00 00    	add    esp,0x101c
c0012cc6:	5b                   	pop    ebx
c0012cc7:	5e                   	pop    esi
c0012cc8:	5f                   	pop    edi
c0012cc9:	5d                   	pop    ebp
c0012cca:	c3                   	ret    
c0012ccb:	83 ec 0c             	sub    esp,0xc
c0012cce:	68 d7 29 02 c0       	push   0xc00229d7
c0012cd3:	e8 3e bf ff ff       	call   c000ec16 <KePanic(char const*)>
c0012cd8:	83 c4 10             	add    esp,0x10
c0012cdb:	e9 6f ff ff ff       	jmp    c0012c4f <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c0012ce0:	83 ec 0c             	sub    esp,0xc
c0012ce3:	68 3c 28 02 c0       	push   0xc002283c
c0012ce8:	e8 61 42 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012ced:	e8 1e c1 ff ff       	call   c000ee10 <Phys::allocatePage()>
c0012cf2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012cf5:	83 ca 01             	or     edx,0x1
c0012cf8:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0012cfb:	0f 20 da             	mov    edx,cr3
c0012cfe:	0f 22 da             	mov    cr3,edx
c0012d01:	ba 00 10 00 00       	mov    edx,0x1000
c0012d06:	89 de                	mov    esi,ebx
c0012d08:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0012d0c:	89 d1                	mov    ecx,edx
c0012d0e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d10:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012d13:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0012d19:	09 c8                	or     eax,ecx
c0012d1b:	83 c8 02             	or     eax,0x2
c0012d1e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012d21:	0f 20 d8             	mov    eax,cr3
c0012d24:	0f 22 d8             	mov    cr3,eax
c0012d27:	8d 74 24 20          	lea    esi,[esp+0x20]
c0012d2b:	89 df                	mov    edi,ebx
c0012d2d:	89 d1                	mov    ecx,edx
c0012d2f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d31:	83 c4 10             	add    esp,0x10
c0012d34:	e9 53 ff ff ff       	jmp    c0012c8c <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c0012d39:	c1 e8 0c             	shr    eax,0xc
c0012d3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012d40:	e8 cb c0 ff ff       	call   c000ee10 <Phys::allocatePage()>
c0012d45:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012d48:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012d4e:	09 c2                	or     edx,eax
c0012d50:	81 ca 01 08 00 00    	or     edx,0x801
c0012d56:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0012d59:	a1 6c 45 02 c0       	mov    eax,ds:0xc002456c
c0012d5e:	85 c0                	test   eax,eax
c0012d60:	7e 44                	jle    c0012da6 <VAS::tryLoadBackOffDisk(unsigned long)+0x170>
c0012d62:	89 df                	mov    edi,ebx
c0012d64:	31 f6                	xor    esi,esi
c0012d66:	83 ec 0c             	sub    esp,0xc
c0012d69:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0012d6d:	55                   	push   ebp
c0012d6e:	e8 1f f3 ff ff       	call   c0012092 <Virt::swapIDToSector(unsigned long)>
c0012d73:	31 d2                	xor    edx,edx
c0012d75:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012d78:	81 c7 00 02 00 00    	add    edi,0x200
c0012d7e:	6a 01                	push   0x1
c0012d80:	52                   	push   edx
c0012d81:	01 f0                	add    eax,esi
c0012d83:	83 c6 01             	add    esi,0x1
c0012d86:	50                   	push   eax
c0012d87:	0f be 05 78 45 02 c0 	movsx  eax,BYTE PTR ds:0xc0024578
c0012d8e:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c0012d95:	50                   	push   eax
c0012d96:	e8 35 73 ff ff       	call   c000a0d0 <LogicalDisk::read(unsigned long long, int, void*)>
c0012d9b:	83 c4 20             	add    esp,0x20
c0012d9e:	39 35 6c 45 02 c0    	cmp    DWORD PTR ds:0xc002456c,esi
c0012da4:	7f c0                	jg     c0012d66 <VAS::tryLoadBackOffDisk(unsigned long)+0x130>
c0012da6:	a1 c8 be 02 c0       	mov    eax,ds:0xc002bec8
c0012dab:	83 ec 04             	sub    esp,0x4
c0012dae:	83 e8 01             	sub    eax,0x1
c0012db1:	50                   	push   eax
c0012db2:	53                   	push   ebx
c0012db3:	68 fc 29 02 c0       	push   0xc00229fc
c0012db8:	a3 c8 be 02 c0       	mov    ds:0xc002bec8,eax
c0012dbd:	e8 8c 41 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012dc2:	58                   	pop    eax
c0012dc3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012dc7:	52                   	push   edx
c0012dc8:	e8 a2 f2 ff ff       	call   c001206f <Virt::freeSwapfilePage(unsigned long)>
c0012dcd:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0012dd5:	8b 0d b0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6b0
c0012ddb:	83 c4 10             	add    esp,0x10
c0012dde:	85 c9                	test   ecx,ecx
c0012de0:	75 01                	jne    c0012de3 <VAS::tryLoadBackOffDisk(unsigned long)+0x1ad>
c0012de2:	fb                   	sti    
c0012de3:	0f 20 d8             	mov    eax,cr3
c0012de6:	0f 22 d8             	mov    cr3,eax
c0012de9:	e9 9e fe ff ff       	jmp    c0012c8c <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c0012dee <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0012dee:	55                   	push   ebp
c0012def:	57                   	push   edi
c0012df0:	56                   	push   esi
c0012df1:	53                   	push   ebx
c0012df2:	83 ec 28             	sub    esp,0x28
c0012df5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012df9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012dfd:	50                   	push   eax
c0012dfe:	e8 50 f1 ff ff       	call   c0011f53 <Virt::allocateKernelVirtualPages(int)>
c0012e03:	83 c4 0c             	add    esp,0xc
c0012e06:	6a 07                	push   0x7
c0012e08:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012e0c:	52                   	push   edx
c0012e0d:	89 c5                	mov    ebp,eax
c0012e0f:	53                   	push   ebx
c0012e10:	e8 1f f9 ff ff       	call   c0012734 <VAS::allocatePages(int, int)>
c0012e15:	83 c4 10             	add    esp,0x10
c0012e18:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012e1c:	89 c7                	mov    edi,eax
c0012e1e:	85 c9                	test   ecx,ecx
c0012e20:	74 2f                	je     c0012e51 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0012e22:	31 f6                	xor    esi,esi
c0012e24:	e8 e7 bf ff ff       	call   c000ee10 <Phys::allocatePage()>
c0012e29:	83 c6 01             	add    esi,0x1
c0012e2c:	6a 03                	push   0x3
c0012e2e:	55                   	push   ebp
c0012e2f:	50                   	push   eax
c0012e30:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012e34:	53                   	push   ebx
c0012e35:	e8 f2 f7 ff ff       	call   c001262c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012e3a:	6a 07                	push   0x7
c0012e3c:	57                   	push   edi
c0012e3d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012e41:	50                   	push   eax
c0012e42:	53                   	push   ebx
c0012e43:	e8 e4 f7 ff ff       	call   c001262c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012e48:	83 c4 20             	add    esp,0x20
c0012e4b:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c0012e4f:	75 d3                	jne    c0012e24 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0012e51:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012e55:	89 28                	mov    DWORD PTR [eax],ebp
c0012e57:	83 c4 1c             	add    esp,0x1c
c0012e5a:	89 f8                	mov    eax,edi
c0012e5c:	5b                   	pop    ebx
c0012e5d:	5e                   	pop    esi
c0012e5e:	5f                   	pop    edi
c0012e5f:	5d                   	pop    ebp
c0012e60:	c3                   	ret    
c0012e61:	90                   	nop

c0012e62 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0012e62:	53                   	push   ebx
c0012e63:	83 ec 14             	sub    esp,0x14
c0012e66:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0012e6a:	68 5c 28 02 c0       	push   0xc002285c
c0012e6f:	e8 da 40 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012e74:	c7 04 24 bc 28 02 c0 	mov    DWORD PTR [esp],0xc00228bc
c0012e7b:	e8 ce 40 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012e80:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0012e84:	83 c4 18             	add    esp,0x18
c0012e87:	5b                   	pop    ebx
c0012e88:	e9 c4 f3 ff ff       	jmp    c0012251 <Virt::freeKernelVirtualPages(unsigned long)>
c0012e8d:	90                   	nop

c0012e8e <VAS::scanForEviction()>:
c0012e8e:	57                   	push   edi
c0012e8f:	56                   	push   esi
c0012e90:	31 f6                	xor    esi,esi
c0012e92:	53                   	push   ebx
c0012e93:	83 ec 10             	sub    esp,0x10
c0012e96:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012e9a:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0012e9d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012ea3:	75 0e                	jne    c0012eb3 <VAS::scanForEviction()+0x25>
c0012ea5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012ea8:	89 da                	mov    edx,ebx
c0012eaa:	c1 ea 16             	shr    edx,0x16
c0012ead:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012eb1:	74 57                	je     c0012f0a <VAS::scanForEviction()+0x7c>
c0012eb3:	53                   	push   ebx
c0012eb4:	57                   	push   edi
c0012eb5:	e8 78 f3 ff ff       	call   c0012232 <VAS::getPageTableEntry(unsigned long)>
c0012eba:	5a                   	pop    edx
c0012ebb:	59                   	pop    ecx
c0012ebc:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ebe:	89 d1                	mov    ecx,edx
c0012ec0:	c1 e9 0c             	shr    ecx,0xc
c0012ec3:	74 10                	je     c0012ed5 <VAS::scanForEviction()+0x47>
c0012ec5:	89 d1                	mov    ecx,edx
c0012ec7:	81 e1 01 08 00 00    	and    ecx,0x801
c0012ecd:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0012ed3:	74 40                	je     c0012f15 <VAS::scanForEviction()+0x87>
c0012ed5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012edb:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0012ee1:	76 2d                	jbe    c0012f10 <VAS::scanForEviction()+0x82>
c0012ee3:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0012eea:	83 c6 01             	add    esi,0x1
c0012eed:	83 fe 03             	cmp    esi,0x3
c0012ef0:	74 32                	je     c0012f24 <VAS::scanForEviction()+0x96>
c0012ef2:	31 db                	xor    ebx,ebx
c0012ef4:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012efa:	75 b7                	jne    c0012eb3 <VAS::scanForEviction()+0x25>
c0012efc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012eff:	89 da                	mov    edx,ebx
c0012f01:	c1 ea 16             	shr    edx,0x16
c0012f04:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012f08:	75 a9                	jne    c0012eb3 <VAS::scanForEviction()+0x25>
c0012f0a:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012f10:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0012f13:	eb 88                	jmp    c0012e9d <VAS::scanForEviction()+0xf>
c0012f15:	f6 c2 20             	test   dl,0x20
c0012f18:	74 13                	je     c0012f2d <VAS::scanForEviction()+0x9f>
c0012f1a:	83 e2 df             	and    edx,0xffffffdf
c0012f1d:	89 10                	mov    DWORD PTR [eax],edx
c0012f1f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0012f22:	eb b1                	jmp    c0012ed5 <VAS::scanForEviction()+0x47>
c0012f24:	83 c4 10             	add    esp,0x10
c0012f27:	31 c0                	xor    eax,eax
c0012f29:	5b                   	pop    ebx
c0012f2a:	5e                   	pop    esi
c0012f2b:	5f                   	pop    edi
c0012f2c:	c3                   	ret    
c0012f2d:	89 d0                	mov    eax,edx
c0012f2f:	83 ec 08             	sub    esp,0x8
c0012f32:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012f37:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012f3b:	53                   	push   ebx
c0012f3c:	68 11 2a 02 c0       	push   0xc0022a11
c0012f41:	e8 08 40 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012f46:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0012f49:	58                   	pop    eax
c0012f4a:	5a                   	pop    edx
c0012f4b:	51                   	push   ecx
c0012f4c:	57                   	push   edi
c0012f4d:	e8 06 fc ff ff       	call   c0012b58 <VAS::evict(unsigned long)>
c0012f52:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012f55:	5b                   	pop    ebx
c0012f56:	5e                   	pop    esi
c0012f57:	50                   	push   eax
c0012f58:	68 25 2a 02 c0       	push   0xc0022a25
c0012f5d:	e8 ec 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012f62:	58                   	pop    eax
c0012f63:	5a                   	pop    edx
c0012f64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f68:	50                   	push   eax
c0012f69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012f6d:	68 38 2a 02 c0       	push   0xc0022a38
c0012f72:	e8 d7 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012f77:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0012f7a:	83 c4 10             	add    esp,0x10
c0012f7d:	81 c1 00 10 00 00    	add    ecx,0x1000
c0012f83:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0012f86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012f8a:	83 c4 10             	add    esp,0x10
c0012f8d:	5b                   	pop    ebx
c0012f8e:	5e                   	pop    esi
c0012f8f:	5f                   	pop    edi
c0012f90:	c3                   	ret    

c0012f91 <mapVASFirstTime>:
c0012f91:	55                   	push   ebp
c0012f92:	57                   	push   edi
c0012f93:	56                   	push   esi
c0012f94:	53                   	push   ebx
c0012f95:	83 ec 0c             	sub    esp,0xc
c0012f98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f9d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012fa0:	83 fa 01             	cmp    edx,0x1
c0012fa3:	0f 84 cb 00 00 00    	je     c0013074 <mapVASFirstTime+0xe3>
c0012fa9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0012fac:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012fb1:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0012fb6:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c0012fb9:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c0012fbf:	c1 e5 15             	shl    ebp,0x15
c0012fc2:	29 eb                	sub    ebx,ebp
c0012fc4:	29 ef                	sub    edi,ebp
c0012fc6:	e8 45 be ff ff       	call   c000ee10 <Phys::allocatePage()>
c0012fcb:	83 ec 0c             	sub    esp,0xc
c0012fce:	68 03 04 00 00       	push   0x403
c0012fd3:	6a 01                	push   0x1
c0012fd5:	53                   	push   ebx
c0012fd6:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012fdc:	50                   	push   eax
c0012fdd:	56                   	push   esi
c0012fde:	e8 43 f8 ff ff       	call   c0012826 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012fe3:	83 c4 20             	add    esp,0x20
c0012fe6:	39 fb                	cmp    ebx,edi
c0012fe8:	75 dc                	jne    c0012fc6 <mapVASFirstTime+0x35>
c0012fea:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0012fef:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0012ff4:	29 eb                	sub    ebx,ebp
c0012ff6:	29 ef                	sub    edi,ebp
c0012ff8:	e8 13 be ff ff       	call   c000ee10 <Phys::allocatePage()>
c0012ffd:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0013001:	83 fa 01             	cmp    edx,0x1
c0013004:	19 d2                	sbb    edx,edx
c0013006:	83 ec 0c             	sub    esp,0xc
c0013009:	83 e2 04             	and    edx,0x4
c001300c:	81 c2 03 04 00 00    	add    edx,0x403
c0013012:	52                   	push   edx
c0013013:	6a 01                	push   0x1
c0013015:	53                   	push   ebx
c0013016:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001301c:	50                   	push   eax
c001301d:	56                   	push   esi
c001301e:	e8 03 f8 ff ff       	call   c0012826 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013023:	83 c4 20             	add    esp,0x20
c0013026:	39 df                	cmp    edi,ebx
c0013028:	75 ce                	jne    c0012ff8 <mapVASFirstTime+0x67>
c001302a:	83 ec 0c             	sub    esp,0xc
c001302d:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c0013032:	6a 04                	push   0x4
c0013034:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c001303a:	6a ff                	push   0xffffffff
c001303c:	c1 eb 0c             	shr    ebx,0xc
c001303f:	53                   	push   ebx
c0013040:	68 00 50 02 c0       	push   0xc0025000
c0013045:	56                   	push   esi
c0013046:	e8 81 f3 ff ff       	call   c00123cc <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001304b:	83 c4 14             	add    esp,0x14
c001304e:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c0013053:	6a 04                	push   0x4
c0013055:	6a ff                	push   0xffffffff
c0013057:	53                   	push   ebx
c0013058:	68 00 50 02 c0       	push   0xc0025000
c001305d:	50                   	push   eax
c001305e:	e8 69 f3 ff ff       	call   c00123cc <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013063:	0f 20 d8             	mov    eax,cr3
c0013066:	0f 22 d8             	mov    cr3,eax
c0013069:	83 c4 20             	add    esp,0x20
c001306c:	83 c4 0c             	add    esp,0xc
c001306f:	5b                   	pop    ebx
c0013070:	5e                   	pop    esi
c0013071:	5f                   	pop    edi
c0013072:	5d                   	pop    ebp
c0013073:	c3                   	ret    
c0013074:	83 ec 0c             	sub    esp,0xc
c0013077:	68 45 2a 02 c0       	push   0xc0022a45
c001307c:	e8 cd 3e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013081:	83 c4 10             	add    esp,0x10
c0013084:	83 c4 0c             	add    esp,0xc
c0013087:	5b                   	pop    ebx
c0013088:	5e                   	pop    esi
c0013089:	5f                   	pop    edi
c001308a:	5d                   	pop    ebp
c001308b:	c3                   	ret    

c001308c <SysEject(regs*)>:
c001308c:	83 ec 0c             	sub    esp,0xc
c001308f:	83 ca ff             	or     edx,0xffffffff
c0013092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013096:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013099:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001309e:	83 e9 41             	sub    ecx,0x41
c00130a1:	83 f9 19             	cmp    ecx,0x19
c00130a4:	77 18                	ja     c00130be <SysEject(regs*)+0x32>
c00130a6:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c00130ad:	85 c9                	test   ecx,ecx
c00130af:	74 0d                	je     c00130be <SysEject(regs*)+0x32>
c00130b1:	83 ec 0c             	sub    esp,0xc
c00130b4:	51                   	push   ecx
c00130b5:	e8 ac 6f ff ff       	call   c000a066 <LogicalDisk::eject()>
c00130ba:	83 c4 10             	add    esp,0x10
c00130bd:	99                   	cdq    
c00130be:	83 c4 0c             	add    esp,0xc
c00130c1:	c3                   	ret    

c00130c2 <SysExit(regs*)>:
c00130c2:	83 ec 18             	sub    esp,0x18
c00130c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130c9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00130cc:	e8 bb 2a 00 00       	call   c0015b8c <terminateTask(int)>
c00130d1:	83 c8 ff             	or     eax,0xffffffff
c00130d4:	83 c4 1c             	add    esp,0x1c
c00130d7:	89 c2                	mov    edx,eax
c00130d9:	c3                   	ret    

c00130da <SysGetCwd(regs*)>:
c00130da:	83 ec 10             	sub    esp,0x10
c00130dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00130e1:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00130e4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00130e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130ec:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00130ef:	e8 b8 4c ff ff       	call   c0007dac <Fs::getcwd(Process*, char*, int)>
c00130f4:	83 c4 1c             	add    esp,0x1c
c00130f7:	99                   	cdq    
c00130f8:	c3                   	ret    

c00130f9 <SysGetPID(regs*)>:
c00130f9:	83 ec 14             	sub    esp,0x14
c00130fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013101:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013104:	ff 30                	push   DWORD PTR [eax]
c0013106:	68 5e 2a 02 c0       	push   0xc0022a5e
c001310b:	e8 3e 3e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013110:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013115:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013118:	8b 00                	mov    eax,DWORD PTR [eax]
c001311a:	83 c4 1c             	add    esp,0x1c
c001311d:	99                   	cdq    
c001311e:	c3                   	ret    

c001311f <SysGetRAMData(regs*)>:
c001311f:	69 05 a8 bd 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc002bda8,0xc8
c0013129:	8b 0d ac bd 02 c0    	mov    ecx,DWORD PTR ds:0xc002bdac
c001312f:	99                   	cdq    
c0013130:	f7 f9                	idiv   ecx
c0013132:	c1 e0 18             	shl    eax,0x18
c0013135:	09 c8                	or     eax,ecx
c0013137:	99                   	cdq    
c0013138:	c3                   	ret    

c0013139 <SysGetVGAPtr(regs*)>:
c0013139:	55                   	push   ebp
c001313a:	57                   	push   edi
c001313b:	56                   	push   esi
c001313c:	53                   	push   ebx
c001313d:	83 ec 0c             	sub    esp,0xc
c0013140:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013144:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0013147:	83 f8 ff             	cmp    eax,0xffffffff
c001314a:	74 1b                	je     c0013167 <SysGetVGAPtr(regs*)+0x2e>
c001314c:	83 ec 0c             	sub    esp,0xc
c001314f:	50                   	push   eax
c0013150:	e8 eb 24 00 00       	call   c0015640 <Thr::processFromPID(int)>
c0013155:	83 c4 10             	add    esp,0x10
c0013158:	31 d2                	xor    edx,edx
c001315a:	89 c1                	mov    ecx,eax
c001315c:	b8 01 00 00 00       	mov    eax,0x1
c0013161:	85 c9                	test   ecx,ecx
c0013163:	75 0a                	jne    c001316f <SysGetVGAPtr(regs*)+0x36>
c0013165:	eb 61                	jmp    c00131c8 <SysGetVGAPtr(regs*)+0x8f>
c0013167:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001316c:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001316f:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013173:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013179:	74 0c                	je     c0013187 <SysGetVGAPtr(regs*)+0x4e>
c001317b:	83 ec 0c             	sub    esp,0xc
c001317e:	55                   	push   ebp
c001317f:	e8 c5 de ff ff       	call   c0011049 <setActiveTerminal(VgaText*)>
c0013184:	83 c4 10             	add    esp,0x10
c0013187:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c001318a:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001318f:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013192:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013194:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013197:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001319a:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00131a0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00131a3:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00131a6:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00131ac:	50                   	push   eax
c00131ad:	50                   	push   eax
c00131ae:	68 6d 2a 02 c0       	push   0xc0022a6d
c00131b3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00131b6:	05 a8 0f 00 00       	add    eax,0xfa8
c00131bb:	50                   	push   eax
c00131bc:	e8 8f d4 fe ff       	call   c0000650 <strcpy>
c00131c1:	83 c4 10             	add    esp,0x10
c00131c4:	31 c0                	xor    eax,eax
c00131c6:	31 d2                	xor    edx,edx
c00131c8:	83 c4 0c             	add    esp,0xc
c00131cb:	5b                   	pop    ebx
c00131cc:	5e                   	pop    esi
c00131cd:	5f                   	pop    edi
c00131ce:	5d                   	pop    ebp
c00131cf:	c3                   	ret    

c00131d0 <SysKill(regs*)>:
c00131d0:	53                   	push   ebx
c00131d1:	83 ec 08             	sub    esp,0x8
c00131d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00131d8:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00131dc:	75 16                	jne    c00131f4 <SysKill(regs*)+0x24>
c00131de:	83 ec 0c             	sub    esp,0xc
c00131e1:	68 77 2a 02 c0       	push   0xc0022a77
c00131e6:	e8 2b ba ff ff       	call   c000ec16 <KePanic(char const*)>
c00131eb:	83 c4 10             	add    esp,0x10
c00131ee:	e9 89 00 00 00       	jmp    c001327c <SysKill(regs*)+0xac>
c00131f3:	90                   	nop
c00131f4:	83 ec 0c             	sub    esp,0xc
c00131f7:	68 cc c6 02 c0       	push   0xc002c6cc
c00131fc:	e8 97 ce 00 00       	call   c0020098 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013201:	8d 76 00             	lea    esi,[esi+0x0]
c0013204:	83 c4 10             	add    esp,0x10
c0013207:	85 c0                	test   eax,eax
c0013209:	74 19                	je     c0013224 <SysKill(regs*)+0x54>
c001320b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001320e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013211:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013213:	74 33                	je     c0013248 <SysKill(regs*)+0x78>
c0013215:	52                   	push   edx
c0013216:	52                   	push   edx
c0013217:	50                   	push   eax
c0013218:	68 cc c6 02 c0       	push   0xc002c6cc
c001321d:	e8 82 d3 00 00       	call   c00205a4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013222:	eb e0                	jmp    c0013204 <SysKill(regs*)+0x34>
c0013224:	83 ec 0c             	sub    esp,0xc
c0013227:	68 c0 c6 02 c0       	push   0xc002c6c0
c001322c:	e8 67 ce 00 00       	call   c0020098 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013231:	8d 76 00             	lea    esi,[esi+0x0]
c0013234:	83 c4 10             	add    esp,0x10
c0013237:	85 c0                	test   eax,eax
c0013239:	74 41                	je     c001327c <SysKill(regs*)+0xac>
c001323b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001323e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013241:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013243:	75 27                	jne    c001326c <SysKill(regs*)+0x9c>
c0013245:	8d 76 00             	lea    esi,[esi+0x0]
c0013248:	51                   	push   ecx
c0013249:	51                   	push   ecx
c001324a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001324d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013252:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013255:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001325b:	e8 e8 ca ff ff       	call   c000fd48 <KeRaiseSignal(SigHandlerBlock*, int)>
c0013260:	83 c4 10             	add    esp,0x10
c0013263:	31 c0                	xor    eax,eax
c0013265:	31 d2                	xor    edx,edx
c0013267:	eb 1b                	jmp    c0013284 <SysKill(regs*)+0xb4>
c0013269:	8d 76 00             	lea    esi,[esi+0x0]
c001326c:	52                   	push   edx
c001326d:	52                   	push   edx
c001326e:	50                   	push   eax
c001326f:	68 c0 c6 02 c0       	push   0xc002c6c0
c0013274:	e8 2b d3 00 00       	call   c00205a4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013279:	eb b9                	jmp    c0013234 <SysKill(regs*)+0x64>
c001327b:	90                   	nop
c001327c:	83 c8 ff             	or     eax,0xffffffff
c001327f:	89 c2                	mov    edx,eax
c0013281:	8d 76 00             	lea    esi,[esi+0x0]
c0013284:	83 c4 08             	add    esp,0x8
c0013287:	5b                   	pop    ebx
c0013288:	c3                   	ret    

c0013289 <SysLoadDLL(regs*)>:
c0013289:	56                   	push   esi
c001328a:	31 d2                	xor    edx,edx
c001328c:	53                   	push   ebx
c001328d:	b8 01 00 00 00       	mov    eax,0x1
c0013292:	51                   	push   ecx
c0013293:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013297:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001329b:	0f 84 8c 00 00 00    	je     c001332d <SysLoadDLL(regs*)+0xa4>
c00132a1:	83 ec 0c             	sub    esp,0xc
c00132a4:	68 14 01 00 00       	push   0x114
c00132a9:	e8 22 b6 ff ff       	call   c000e8d0 <malloc>
c00132ae:	83 c4 0c             	add    esp,0xc
c00132b1:	89 c3                	mov    ebx,eax
c00132b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132b8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00132bb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00132be:	53                   	push   ebx
c00132bf:	e8 48 4e ff ff       	call   c000810c <File::File(char const*, Process*)>
c00132c4:	83 c4 10             	add    esp,0x10
c00132c7:	31 d2                	xor    edx,edx
c00132c9:	85 db                	test   ebx,ebx
c00132cb:	b8 02 00 00 00       	mov    eax,0x2
c00132d0:	74 5b                	je     c001332d <SysLoadDLL(regs*)+0xa4>
c00132d2:	83 ec 0c             	sub    esp,0xc
c00132d5:	53                   	push   ebx
c00132d6:	e8 13 51 ff ff       	call   c00083ee <File::exists()>
c00132db:	83 c4 10             	add    esp,0x10
c00132de:	84 c0                	test   al,al
c00132e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132e2:	75 11                	jne    c00132f5 <SysLoadDLL(regs*)+0x6c>
c00132e4:	83 ec 0c             	sub    esp,0xc
c00132e7:	53                   	push   ebx
c00132e8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132eb:	83 c4 10             	add    esp,0x10
c00132ee:	b8 03 00 00 00       	mov    eax,0x3
c00132f3:	eb 36                	jmp    c001332b <SysLoadDLL(regs*)+0xa2>
c00132f5:	83 ec 0c             	sub    esp,0xc
c00132f8:	53                   	push   ebx
c00132f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132fc:	58                   	pop    eax
c00132fd:	5a                   	pop    edx
c00132fe:	6a 00                	push   0x0
c0013300:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013303:	e8 f6 15 00 00       	call   c00148fe <Thr::loadDLL(char const*, bool)>
c0013308:	83 c4 10             	add    esp,0x10
c001330b:	31 d2                	xor    edx,edx
c001330d:	89 c1                	mov    ecx,eax
c001330f:	b8 04 00 00 00       	mov    eax,0x4
c0013314:	85 c9                	test   ecx,ecx
c0013316:	74 15                	je     c001332d <SysLoadDLL(regs*)+0xa4>
c0013318:	53                   	push   ebx
c0013319:	53                   	push   ebx
c001331a:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c0013320:	51                   	push   ecx
c0013321:	e8 39 18 00 00       	call   c0014b5f <Thr::executeDLL(unsigned long, void*)>
c0013326:	83 c4 10             	add    esp,0x10
c0013329:	31 c0                	xor    eax,eax
c001332b:	31 d2                	xor    edx,edx
c001332d:	59                   	pop    ecx
c001332e:	5b                   	pop    ebx
c001332f:	5e                   	pop    esi
c0013330:	c3                   	ret    

c0013331 <SysRead(regs*)>:
c0013331:	57                   	push   edi
c0013332:	56                   	push   esi
c0013333:	53                   	push   ebx
c0013334:	83 ec 10             	sub    esp,0x10
c0013337:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001333b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001333e:	83 f8 02             	cmp    eax,0x2
c0013341:	77 10                	ja     c0013353 <SysRead(regs*)+0x22>
c0013343:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013348:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001334b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013351:	eb 0e                	jmp    c0013361 <SysRead(regs*)+0x30>
c0013353:	83 ec 0c             	sub    esp,0xc
c0013356:	50                   	push   eax
c0013357:	e8 9d ea ff ff       	call   c0011df9 <KeGetFileFromDescriptor(int)>
c001335c:	83 c4 10             	add    esp,0x10
c001335f:	89 c1                	mov    ecx,eax
c0013361:	83 c8 ff             	or     eax,0xffffffff
c0013364:	85 c9                	test   ecx,ecx
c0013366:	89 c2                	mov    edx,eax
c0013368:	74 28                	je     c0013392 <SysRead(regs*)+0x61>
c001336a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013372:	83 ec 0c             	sub    esp,0xc
c0013375:	31 ff                	xor    edi,edi
c0013377:	8d 54 24 18          	lea    edx,[esp+0x18]
c001337b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001337d:	52                   	push   edx
c001337e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013381:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013384:	57                   	push   edi
c0013385:	56                   	push   esi
c0013386:	51                   	push   ecx
c0013387:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001338a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001338e:	83 c4 20             	add    esp,0x20
c0013391:	99                   	cdq    
c0013392:	83 c4 10             	add    esp,0x10
c0013395:	5b                   	pop    ebx
c0013396:	5e                   	pop    esi
c0013397:	5f                   	pop    edi
c0013398:	c3                   	ret    

c0013399 <SysRegisterSignal(regs*)>:
c0013399:	83 ec 18             	sub    esp,0x18
c001339c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133a0:	6a 00                	push   0x0
c00133a2:	6a 00                	push   0x0
c00133a4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00133a7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00133aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133af:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00133b2:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00133b8:	e8 55 c9 ff ff       	call   c000fd12 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00133bd:	83 c4 2c             	add    esp,0x2c
c00133c0:	99                   	cdq    
c00133c1:	c3                   	ret    

c00133c2 <SysRegistryGetTypeFromPath(regs*)>:
c00133c2:	53                   	push   ebx
c00133c3:	81 ec 40 01 00 00    	sub    esp,0x140
c00133c9:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00133d0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00133d3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00133d6:	e8 d0 9e ff ff       	call   c000d2ab <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00133db:	83 c4 10             	add    esp,0x10
c00133de:	85 c0                	test   eax,eax
c00133e0:	89 c1                	mov    ecx,eax
c00133e2:	74 15                	je     c00133f9 <SysRegistryGetTypeFromPath(regs*)+0x37>
c00133e4:	50                   	push   eax
c00133e5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00133e9:	50                   	push   eax
c00133ea:	51                   	push   ecx
c00133eb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00133ee:	e8 9d 9a ff ff       	call   c000ce90 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00133f3:	83 c4 10             	add    esp,0x10
c00133f6:	99                   	cdq    
c00133f7:	eb 05                	jmp    c00133fe <SysRegistryGetTypeFromPath(regs*)+0x3c>
c00133f9:	83 c8 ff             	or     eax,0xffffffff
c00133fc:	89 c2                	mov    edx,eax
c00133fe:	81 c4 38 01 00 00    	add    esp,0x138
c0013404:	5b                   	pop    ebx
c0013405:	c3                   	ret    

c0013406 <SysRegistryReadExtent(regs*)>:
c0013406:	83 ec 1c             	sub    esp,0x1c
c0013409:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001340d:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013410:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013413:	85 c0                	test   eax,eax
c0013415:	79 1f                	jns    c0013436 <SysRegistryReadExtent(regs*)+0x30>
c0013417:	52                   	push   edx
c0013418:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001341d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013421:	52                   	push   edx
c0013422:	50                   	push   eax
c0013423:	51                   	push   ecx
c0013424:	e8 59 99 ff ff       	call   c000cd82 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013429:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001342d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013431:	83 c4 10             	add    esp,0x10
c0013434:	eb 14                	jmp    c001344a <SysRegistryReadExtent(regs*)+0x44>
c0013436:	83 ec 04             	sub    esp,0x4
c0013439:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001343c:	50                   	push   eax
c001343d:	51                   	push   ecx
c001343e:	e8 dd 93 ff ff       	call   c000c820 <CmGetString(Reghive_Tag*, int, char*)>
c0013443:	83 c4 10             	add    esp,0x10
c0013446:	31 c0                	xor    eax,eax
c0013448:	31 d2                	xor    edx,edx
c001344a:	83 c4 1c             	add    esp,0x1c
c001344d:	c3                   	ret    

c001344e <SysRegistryPathToExtentLookup(regs*)>:
c001344e:	83 ec 14             	sub    esp,0x14
c0013451:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013455:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013458:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001345b:	e8 4b 9e ff ff       	call   c000d2ab <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013460:	83 c4 1c             	add    esp,0x1c
c0013463:	99                   	cdq    
c0013464:	c3                   	ret    

c0013465 <SysRegistryEnterDirectory(regs*)>:
c0013465:	83 ec 14             	sub    esp,0x14
c0013468:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001346c:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001346f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013472:	e8 20 94 ff ff       	call   c000c897 <CmEnterDirectory(Reghive_Tag*, int)>
c0013477:	83 c4 1c             	add    esp,0x1c
c001347a:	99                   	cdq    
c001347b:	c3                   	ret    

c001347c <SysRegistryGetNext(regs*)>:
c001347c:	83 ec 14             	sub    esp,0x14
c001347f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013483:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013486:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013489:	e8 48 94 ff ff       	call   c000c8d6 <CmGetNext(Reghive_Tag*, int)>
c001348e:	83 c4 1c             	add    esp,0x1c
c0013491:	99                   	cdq    
c0013492:	c3                   	ret    

c0013493 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013493:	57                   	push   edi
c0013494:	56                   	push   esi
c0013495:	53                   	push   ebx
c0013496:	81 ec 34 01 00 00    	sub    esp,0x134
c001349c:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00134a3:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00134a7:	57                   	push   edi
c00134a8:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00134ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00134ae:	e8 dd 99 ff ff       	call   c000ce90 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00134b3:	89 c3                	mov    ebx,eax
c00134b5:	58                   	pop    eax
c00134b6:	5a                   	pop    edx
c00134b7:	57                   	push   edi
c00134b8:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00134bb:	e8 90 d1 fe ff       	call   c0000650 <strcpy>
c00134c0:	81 c4 40 01 00 00    	add    esp,0x140
c00134c6:	89 d8                	mov    eax,ebx
c00134c8:	5b                   	pop    ebx
c00134c9:	99                   	cdq    
c00134ca:	5e                   	pop    esi
c00134cb:	5f                   	pop    edi
c00134cc:	c3                   	ret    

c00134cd <SysRegistryOpen(regs*)>:
c00134cd:	83 ec 18             	sub    esp,0x18
c00134d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134d4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00134d7:	e8 d4 91 ff ff       	call   c000c6b0 <CmOpen(char const*)>
c00134dc:	83 c4 1c             	add    esp,0x1c
c00134df:	99                   	cdq    
c00134e0:	c3                   	ret    

c00134e1 <SysRegistryClose(regs*)>:
c00134e1:	83 ec 18             	sub    esp,0x18
c00134e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134e8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00134eb:	e8 de 92 ff ff       	call   c000c7ce <CmClose(Reghive_Tag*)>
c00134f0:	31 c0                	xor    eax,eax
c00134f2:	31 d2                	xor    edx,edx
c00134f4:	83 c4 1c             	add    esp,0x1c
c00134f7:	c3                   	ret    

c00134f8 <SysRegistryEasyReadString(regs*)>:
c00134f8:	57                   	push   edi
c00134f9:	56                   	push   esi
c00134fa:	53                   	push   ebx
c00134fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134ff:	83 ec 0c             	sub    esp,0xc
c0013502:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013505:	e8 a6 91 ff ff       	call   c000c6b0 <CmOpen(char const*)>
c001350a:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001350d:	5a                   	pop    edx
c001350e:	59                   	pop    ecx
c001350f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013512:	89 c3                	mov    ebx,eax
c0013514:	50                   	push   eax
c0013515:	e8 91 9d ff ff       	call   c000d2ab <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001351a:	83 c4 10             	add    esp,0x10
c001351d:	89 c1                	mov    ecx,eax
c001351f:	b8 01 00 00 00       	mov    eax,0x1
c0013524:	85 c9                	test   ecx,ecx
c0013526:	7e 16                	jle    c001353e <SysRegistryEasyReadString(regs*)+0x46>
c0013528:	50                   	push   eax
c0013529:	57                   	push   edi
c001352a:	51                   	push   ecx
c001352b:	53                   	push   ebx
c001352c:	e8 ef 92 ff ff       	call   c000c820 <CmGetString(Reghive_Tag*, int, char*)>
c0013531:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013534:	e8 95 92 ff ff       	call   c000c7ce <CmClose(Reghive_Tag*)>
c0013539:	83 c4 10             	add    esp,0x10
c001353c:	31 c0                	xor    eax,eax
c001353e:	5b                   	pop    ebx
c001353f:	31 d2                	xor    edx,edx
c0013541:	5e                   	pop    esi
c0013542:	5f                   	pop    edi
c0013543:	c3                   	ret    

c0013544 <SysRegistryEasyReadInteger(regs*)>:
c0013544:	56                   	push   esi
c0013545:	53                   	push   ebx
c0013546:	83 ec 10             	sub    esp,0x10
c0013549:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001354d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013550:	e8 5b 91 ff ff       	call   c000c6b0 <CmOpen(char const*)>
c0013555:	5a                   	pop    edx
c0013556:	59                   	pop    ecx
c0013557:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001355a:	89 c3                	mov    ebx,eax
c001355c:	50                   	push   eax
c001355d:	e8 49 9d ff ff       	call   c000d2ab <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013562:	83 c4 10             	add    esp,0x10
c0013565:	89 c1                	mov    ecx,eax
c0013567:	b8 01 00 00 00       	mov    eax,0x1
c001356c:	85 c9                	test   ecx,ecx
c001356e:	7e 18                	jle    c0013588 <SysRegistryEasyReadInteger(regs*)+0x44>
c0013570:	50                   	push   eax
c0013571:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013574:	51                   	push   ecx
c0013575:	53                   	push   ebx
c0013576:	e8 07 98 ff ff       	call   c000cd82 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c001357b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001357e:	e8 4b 92 ff ff       	call   c000c7ce <CmClose(Reghive_Tag*)>
c0013583:	83 c4 10             	add    esp,0x10
c0013586:	31 c0                	xor    eax,eax
c0013588:	59                   	pop    ecx
c0013589:	31 d2                	xor    edx,edx
c001358b:	5b                   	pop    ebx
c001358c:	5e                   	pop    esi
c001358d:	c3                   	ret    

c001358e <SysSbrk(regs*)>:
c001358e:	56                   	push   esi
c001358f:	53                   	push   ebx
c0013590:	50                   	push   eax
c0013591:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013596:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001359a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001359d:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00135a0:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00135a6:	85 db                	test   ebx,ebx
c00135a8:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00135ab:	74 02                	je     c00135af <SysSbrk(regs*)+0x21>
c00135ad:	79 06                	jns    c00135b5 <SysSbrk(regs*)+0x27>
c00135af:	89 f0                	mov    eax,esi
c00135b1:	31 d2                	xor    edx,edx
c00135b3:	eb 2a                	jmp    c00135df <SysSbrk(regs*)+0x51>
c00135b5:	83 c8 ff             	or     eax,0xffffffff
c00135b8:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00135be:	89 c2                	mov    edx,eax
c00135c0:	77 1d                	ja     c00135df <SysSbrk(regs*)+0x51>
c00135c2:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00135c8:	50                   	push   eax
c00135c9:	68 07 0c 00 00       	push   0xc07
c00135ce:	c1 ea 0c             	shr    edx,0xc
c00135d1:	52                   	push   edx
c00135d2:	51                   	push   ecx
c00135d3:	e8 5c f1 ff ff       	call   c0012734 <VAS::allocatePages(int, int)>
c00135d8:	89 f0                	mov    eax,esi
c00135da:	31 d2                	xor    edx,edx
c00135dc:	83 c4 10             	add    esp,0x10
c00135df:	59                   	pop    ecx
c00135e0:	5b                   	pop    ebx
c00135e1:	5e                   	pop    esi
c00135e2:	c3                   	ret    

c00135e3 <SysSetCwd(regs*)>:
c00135e3:	83 ec 14             	sub    esp,0x14
c00135e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00135ea:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00135ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135f2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00135f5:	e8 93 4e ff ff       	call   c000848d <Fs::setcwd(Process*, char*)>
c00135fa:	83 c4 1c             	add    esp,0x1c
c00135fd:	99                   	cdq    
c00135fe:	c3                   	ret    

c00135ff <SysSetTime(regs*)>:
c00135ff:	55                   	push   ebp
c0013600:	31 c9                	xor    ecx,ecx
c0013602:	57                   	push   edi
c0013603:	bd 0c 00 00 00       	mov    ebp,0xc
c0013608:	56                   	push   esi
c0013609:	53                   	push   ebx
c001360a:	31 db                	xor    ebx,ebx
c001360c:	83 ec 10             	sub    esp,0x10
c001360f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013613:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013616:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013619:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001361c:	89 c2                	mov    edx,eax
c001361e:	c1 e8 05             	shr    eax,0x5
c0013621:	83 e2 1f             	and    edx,0x1f
c0013624:	42                   	inc    edx
c0013625:	81 ef 6c 07 00 00    	sub    edi,0x76c
c001362b:	c1 e7 10             	shl    edi,0x10
c001362e:	88 d1                	mov    cl,dl
c0013630:	31 d2                	xor    edx,edx
c0013632:	f7 f5                	div    ebp
c0013634:	89 dd                	mov    ebp,ebx
c0013636:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001363c:	88 d5                	mov    ch,dl
c001363e:	31 d2                	xor    edx,edx
c0013640:	0f b7 c1             	movzx  eax,cx
c0013643:	09 f8                	or     eax,edi
c0013645:	bf 3c 00 00 00       	mov    edi,0x3c
c001364a:	89 c1                	mov    ecx,eax
c001364c:	89 f0                	mov    eax,esi
c001364e:	f7 f7                	div    edi
c0013650:	c1 e2 10             	shl    edx,0x10
c0013653:	09 d5                	or     ebp,edx
c0013655:	31 d2                	xor    edx,edx
c0013657:	f7 f7                	div    edi
c0013659:	89 eb                	mov    ebx,ebp
c001365b:	bf 10 0e 00 00       	mov    edi,0xe10
c0013660:	89 f0                	mov    eax,esi
c0013662:	88 d7                	mov    bh,dl
c0013664:	31 d2                	xor    edx,edx
c0013666:	f7 f7                	div    edi
c0013668:	bf 18 00 00 00       	mov    edi,0x18
c001366d:	31 d2                	xor    edx,edx
c001366f:	f7 f7                	div    edi
c0013671:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0013676:	88 d3                	mov    bl,dl
c0013678:	53                   	push   ebx
c0013679:	51                   	push   ecx
c001367a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013680:	e8 d5 56 ff ff       	call   c0008d5a <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013685:	83 c4 1c             	add    esp,0x1c
c0013688:	31 d2                	xor    edx,edx
c001368a:	5b                   	pop    ebx
c001368b:	5e                   	pop    esi
c001368c:	83 f0 01             	xor    eax,0x1
c001368f:	5f                   	pop    edi
c0013690:	0f b6 c0             	movzx  eax,al
c0013693:	5d                   	pop    ebp
c0013694:	c3                   	ret    

c0013695 <SysSymlink(regs*)>:
c0013695:	56                   	push   esi
c0013696:	83 c8 ff             	or     eax,0xffffffff
c0013699:	53                   	push   ebx
c001369a:	89 c2                	mov    edx,eax
c001369c:	81 ec 34 02 00 00    	sub    esp,0x234
c00136a2:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c00136a9:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00136ad:	74 50                	je     c00136ff <SysSymlink(regs*)+0x6a>
c00136af:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00136b2:	85 c9                	test   ecx,ecx
c00136b4:	74 49                	je     c00136ff <SysSymlink(regs*)+0x6a>
c00136b6:	6a 01                	push   0x1
c00136b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136bd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00136c0:	05 0c 01 00 00       	add    eax,0x10c
c00136c5:	50                   	push   eax
c00136c6:	51                   	push   ecx
c00136c7:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00136cb:	56                   	push   esi
c00136cc:	e8 2f 47 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00136d1:	6a 01                	push   0x1
c00136d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136d8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00136db:	05 0c 01 00 00       	add    eax,0x10c
c00136e0:	50                   	push   eax
c00136e1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00136e4:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00136eb:	53                   	push   ebx
c00136ec:	e8 0f 47 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00136f1:	83 c4 18             	add    esp,0x18
c00136f4:	56                   	push   esi
c00136f5:	53                   	push   ebx
c00136f6:	e8 33 43 ff ff       	call   c0007a2e <KeCreateSymlink(char const*, char const*)>
c00136fb:	83 c4 10             	add    esp,0x10
c00136fe:	99                   	cdq    
c00136ff:	81 c4 34 02 00 00    	add    esp,0x234
c0013705:	5b                   	pop    ebx
c0013706:	5e                   	pop    esi
c0013707:	c3                   	ret    

c0013708 <SysTimezone(regs*)>:
c0013708:	83 ec 0c             	sub    esp,0xc
c001370b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001370f:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0013713:	75 17                	jne    c001372c <SysTimezone(regs*)+0x24>
c0013715:	83 ec 0c             	sub    esp,0xc
c0013718:	68 98 2a 02 c0       	push   0xc0022a98
c001371d:	e8 2c 38 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013722:	83 c8 ff             	or     eax,0xffffffff
c0013725:	83 c4 10             	add    esp,0x10
c0013728:	89 c2                	mov    edx,eax
c001372a:	eb 17                	jmp    c0013743 <SysTimezone(regs*)+0x3b>
c001372c:	83 ec 0c             	sub    esp,0xc
c001372f:	68 ad 2a 02 c0       	push   0xc0022aad
c0013734:	e8 15 38 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013739:	83 c4 10             	add    esp,0x10
c001373c:	b8 01 00 00 00       	mov    eax,0x1
c0013741:	31 d2                	xor    edx,edx
c0013743:	83 c4 0c             	add    esp,0xc
c0013746:	c3                   	ret    

c0013747 <SysTruncate(regs*)>:
c0013747:	55                   	push   ebp
c0013748:	57                   	push   edi
c0013749:	31 ff                	xor    edi,edi
c001374b:	56                   	push   esi
c001374c:	53                   	push   ebx
c001374d:	83 ec 0c             	sub    esp,0xc
c0013750:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013754:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013757:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c001375b:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c001375e:	89 ce                	mov    esi,ecx
c0013760:	0f 84 9a 00 00 00    	je     c0013800 <SysTruncate(regs*)+0xb9>
c0013766:	83 ec 0c             	sub    esp,0xc
c0013769:	68 14 01 00 00       	push   0x114
c001376e:	e8 5d b1 ff ff       	call   c000e8d0 <malloc>
c0013773:	83 c4 0c             	add    esp,0xc
c0013776:	89 c3                	mov    ebx,eax
c0013778:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001377d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013780:	55                   	push   ebp
c0013781:	53                   	push   ebx
c0013782:	e8 85 49 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0013787:	83 c4 10             	add    esp,0x10
c001378a:	31 d2                	xor    edx,edx
c001378c:	85 db                	test   ebx,ebx
c001378e:	b8 03 00 00 00       	mov    eax,0x3
c0013793:	0f 84 a2 00 00 00    	je     c001383b <SysTruncate(regs*)+0xf4>
c0013799:	51                   	push   ecx
c001379a:	51                   	push   ecx
c001379b:	6a 02                	push   0x2
c001379d:	53                   	push   ebx
c001379e:	e8 87 49 ff ff       	call   c000812a <File::open(FileOpenMode)>
c00137a3:	83 c4 10             	add    esp,0x10
c00137a6:	85 c0                	test   eax,eax
c00137a8:	74 13                	je     c00137bd <SysTruncate(regs*)+0x76>
c00137aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137ac:	83 ec 0c             	sub    esp,0xc
c00137af:	53                   	push   ebx
c00137b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137b3:	83 c4 10             	add    esp,0x10
c00137b6:	b8 04 00 00 00       	mov    eax,0x4
c00137bb:	eb 7c                	jmp    c0013839 <SysTruncate(regs*)+0xf2>
c00137bd:	52                   	push   edx
c00137be:	57                   	push   edi
c00137bf:	56                   	push   esi
c00137c0:	53                   	push   ebx
c00137c1:	e8 78 4a ff ff       	call   c000823e <File::truncate(unsigned long long)>
c00137c6:	83 c4 10             	add    esp,0x10
c00137c9:	85 c0                	test   eax,eax
c00137cb:	74 1b                	je     c00137e8 <SysTruncate(regs*)+0xa1>
c00137cd:	83 ec 0c             	sub    esp,0xc
c00137d0:	53                   	push   ebx
c00137d1:	e8 b2 49 ff ff       	call   c0008188 <File::close()>
c00137d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00137db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137de:	83 c4 10             	add    esp,0x10
c00137e1:	b8 05 00 00 00       	mov    eax,0x5
c00137e6:	eb 51                	jmp    c0013839 <SysTruncate(regs*)+0xf2>
c00137e8:	83 ec 0c             	sub    esp,0xc
c00137eb:	53                   	push   ebx
c00137ec:	e8 97 49 ff ff       	call   c0008188 <File::close()>
c00137f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00137f6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137f9:	83 c4 10             	add    esp,0x10
c00137fc:	31 c0                	xor    eax,eax
c00137fe:	eb 39                	jmp    c0013839 <SysTruncate(regs*)+0xf2>
c0013800:	31 d2                	xor    edx,edx
c0013802:	83 fd 02             	cmp    ebp,0x2
c0013805:	b8 01 00 00 00       	mov    eax,0x1
c001380a:	7e 2f                	jle    c001383b <SysTruncate(regs*)+0xf4>
c001380c:	83 ec 0c             	sub    esp,0xc
c001380f:	51                   	push   ecx
c0013810:	e8 e4 e5 ff ff       	call   c0011df9 <KeGetFileFromDescriptor(int)>
c0013815:	83 c4 10             	add    esp,0x10
c0013818:	31 d2                	xor    edx,edx
c001381a:	89 c1                	mov    ecx,eax
c001381c:	b8 02 00 00 00       	mov    eax,0x2
c0013821:	85 c9                	test   ecx,ecx
c0013823:	74 16                	je     c001383b <SysTruncate(regs*)+0xf4>
c0013825:	50                   	push   eax
c0013826:	57                   	push   edi
c0013827:	56                   	push   esi
c0013828:	51                   	push   ecx
c0013829:	e8 10 4a ff ff       	call   c000823e <File::truncate(unsigned long long)>
c001382e:	83 c4 10             	add    esp,0x10
c0013831:	85 c0                	test   eax,eax
c0013833:	0f 95 c0             	setne  al
c0013836:	0f b6 c0             	movzx  eax,al
c0013839:	31 d2                	xor    edx,edx
c001383b:	83 c4 0c             	add    esp,0xc
c001383e:	5b                   	pop    ebx
c001383f:	5e                   	pop    esi
c0013840:	5f                   	pop    edi
c0013841:	5d                   	pop    ebp
c0013842:	c3                   	ret    

c0013843 <SysWrite(regs*)>:
c0013843:	57                   	push   edi
c0013844:	56                   	push   esi
c0013845:	53                   	push   ebx
c0013846:	83 ec 10             	sub    esp,0x10
c0013849:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001384d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013850:	83 f8 02             	cmp    eax,0x2
c0013853:	77 10                	ja     c0013865 <SysWrite(regs*)+0x22>
c0013855:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001385a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001385d:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013863:	eb 0e                	jmp    c0013873 <SysWrite(regs*)+0x30>
c0013865:	83 ec 0c             	sub    esp,0xc
c0013868:	50                   	push   eax
c0013869:	e8 8b e5 ff ff       	call   c0011df9 <KeGetFileFromDescriptor(int)>
c001386e:	83 c4 10             	add    esp,0x10
c0013871:	89 c1                	mov    ecx,eax
c0013873:	83 c8 ff             	or     eax,0xffffffff
c0013876:	85 c9                	test   ecx,ecx
c0013878:	89 c2                	mov    edx,eax
c001387a:	74 28                	je     c00138a4 <SysWrite(regs*)+0x61>
c001387c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013884:	83 ec 0c             	sub    esp,0xc
c0013887:	31 ff                	xor    edi,edi
c0013889:	8d 54 24 18          	lea    edx,[esp+0x18]
c001388d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001388f:	52                   	push   edx
c0013890:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013893:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013896:	57                   	push   edi
c0013897:	56                   	push   esi
c0013898:	51                   	push   ecx
c0013899:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001389c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00138a0:	83 c4 20             	add    esp,0x20
c00138a3:	99                   	cdq    
c00138a4:	83 c4 10             	add    esp,0x10
c00138a7:	5b                   	pop    ebx
c00138a8:	5e                   	pop    esi
c00138a9:	5f                   	pop    edi
c00138aa:	c3                   	ret    

c00138ab <SysWsbe(regs*)>:
c00138ab:	55                   	push   ebp
c00138ac:	57                   	push   edi
c00138ad:	56                   	push   esi
c00138ae:	53                   	push   ebx
c00138af:	83 ec 3c             	sub    esp,0x3c
c00138b2:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00138b6:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c00138bd:	75 2d                	jne    c00138ec <SysWsbe(regs*)+0x41>
c00138bf:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c00138c6:	75 24                	jne    c00138ec <SysWsbe(regs*)+0x41>
c00138c8:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c00138cf:	75 1b                	jne    c00138ec <SysWsbe(regs*)+0x41>
c00138d1:	6a 01                	push   0x1
c00138d3:	6a 00                	push   0x0
c00138d5:	68 6d 95 00 c0       	push   0xc000956d
c00138da:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00138e0:	e8 bb 18 00 00       	call   c00151a0 <Process::createThread(void (*)(void*), void*, int)>
c00138e5:	83 c4 10             	add    esp,0x10
c00138e8:	31 c0                	xor    eax,eax
c00138ea:	eb 52                	jmp    c001393e <SysWsbe(regs*)+0x93>
c00138ec:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00138f0:	be ec 2a 02 c0       	mov    esi,0xc0022aec
c00138f5:	b9 0b 00 00 00       	mov    ecx,0xb
c00138fa:	fc                   	cld    
c00138fb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00138fd:	83 ec 0c             	sub    esp,0xc
c0013900:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013904:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013909:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001390c:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0013912:	8b 06                	mov    eax,DWORD PTR [esi]
c0013914:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0013917:	57                   	push   edi
c0013918:	e8 63 cc fe ff       	call   c0000580 <strlen>
c001391d:	5a                   	pop    edx
c001391e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013922:	52                   	push   edx
c0013923:	31 d2                	xor    edx,edx
c0013925:	57                   	push   edi
c0013926:	52                   	push   edx
c0013927:	50                   	push   eax
c0013928:	56                   	push   esi
c0013929:	ff d5                	call   ebp
c001392b:	83 c4 14             	add    esp,0x14
c001392e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013931:	e8 56 22 00 00       	call   c0015b8c <terminateTask(int)>
c0013936:	83 c4 10             	add    esp,0x10
c0013939:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001393e:	83 c4 3c             	add    esp,0x3c
c0013941:	31 d2                	xor    edx,edx
c0013943:	5b                   	pop    ebx
c0013944:	5e                   	pop    esi
c0013945:	5f                   	pop    edi
c0013946:	5d                   	pop    ebp
c0013947:	c3                   	ret    

c0013948 <SysYield(regs*)>:
c0013948:	83 ec 0c             	sub    esp,0xc
c001394b:	fa                   	cli    
c001394c:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0013952:	e8 95 1a 00 00       	call   c00153ec <schedule()>
c0013957:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001395e:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0013965:	75 01                	jne    c0013968 <SysYield(regs*)+0x20>
c0013967:	fb                   	sti    
c0013968:	31 c0                	xor    eax,eax
c001396a:	31 d2                	xor    edx,edx
c001396c:	83 c4 0c             	add    esp,0xc
c001396f:	c3                   	ret    

c0013970 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0013970:	55                   	push   ebp
c0013971:	57                   	push   edi
c0013972:	56                   	push   esi
c0013973:	53                   	push   ebx
c0013974:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001397a:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013985:	74 3b                	je     c00139c2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013987:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001398f:	74 31                	je     c00139c2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013991:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0013999:	75 27                	jne    c00139c2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001399b:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00139a2:	05 00 10 00 00       	add    eax,0x1000
c00139a7:	89 c2                	mov    edx,eax
c00139a9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00139ae:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00139b5:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00139bb:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00139c2:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00139c9:	83 ec 0c             	sub    esp,0xc
c00139cc:	6a 01                	push   0x1
c00139ce:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00139d4:	e8 7a e5 ff ff       	call   c0011f53 <Virt::allocateKernelVirtualPages(int)>
c00139d9:	83 c4 10             	add    esp,0x10
c00139dc:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00139e2:	89 c3                	mov    ebx,eax
c00139e4:	0f 86 27 01 00 00    	jbe    c0013b11 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a1>
c00139ea:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00139f2:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00139f9:	c1 ee 0c             	shr    esi,0xc
c00139fc:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0013a00:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0013a07:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0013a0e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013a12:	29 ef                	sub    edi,ebp
c0013a14:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0013a18:	0f 83 fa 00 00 00    	jae    c0013b18 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c0013a1e:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0013a24:	b8 00 10 00 00       	mov    eax,0x1000
c0013a29:	0f 47 f8             	cmova  edi,eax
c0013a2c:	83 ec 0c             	sub    esp,0xc
c0013a2f:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013a36:	31 d2                	xor    edx,edx
c0013a38:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a3a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013a3e:	50                   	push   eax
c0013a3f:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013a43:	56                   	push   esi
c0013a44:	52                   	push   edx
c0013a45:	57                   	push   edi
c0013a46:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013a4d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013a50:	83 c4 20             	add    esp,0x20
c0013a53:	85 c0                	test   eax,eax
c0013a55:	75 06                	jne    c0013a5d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0013a57:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013a5b:	74 13                	je     c0013a70 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0013a5d:	83 ec 0c             	sub    esp,0xc
c0013a60:	53                   	push   ebx
c0013a61:	e8 eb e7 ff ff       	call   c0012251 <Virt::freeKernelVirtualPages(unsigned long)>
c0013a66:	83 c4 10             	add    esp,0x10
c0013a69:	31 c0                	xor    eax,eax
c0013a6b:	e9 80 01 00 00       	jmp    c0013bf0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x280>
c0013a70:	fa                   	cli    
c0013a71:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0013a77:	e8 94 b3 ff ff       	call   c000ee10 <Phys::allocatePage()>
c0013a7c:	6a 07                	push   0x7
c0013a7e:	53                   	push   ebx
c0013a7f:	50                   	push   eax
c0013a80:	89 c7                	mov    edi,eax
c0013a82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a87:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a8a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013a90:	e8 97 eb ff ff       	call   c001262c <VAS::mapPage(unsigned long, unsigned long, int)>
c0013a95:	83 c4 0c             	add    esp,0xc
c0013a98:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013a9f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013aa5:	6a 00                	push   0x0
c0013aa7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013aac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013aaf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013ab5:	e8 de e9 ff ff       	call   c0012498 <VAS::mapOtherVASIn(bool, VAS*)>
c0013aba:	58                   	pop    eax
c0013abb:	5a                   	pop    edx
c0013abc:	68 07 0c 00 00       	push   0xc07
c0013ac1:	55                   	push   ebp
c0013ac2:	57                   	push   edi
c0013ac3:	89 df                	mov    edi,ebx
c0013ac5:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013acc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013ad2:	6a 00                	push   0x0
c0013ad4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ad9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013adc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013ae2:	e8 99 ed ff ff       	call   c0012880 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013ae7:	b9 00 10 00 00       	mov    ecx,0x1000
c0013aec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013aee:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0013af5:	83 c4 20             	add    esp,0x20
c0013af8:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0013aff:	75 01                	jne    c0013b02 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c0013b01:	fb                   	sti    
c0013b02:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013b06:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013b0c:	e9 ef fe ff ff       	jmp    c0013a00 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0013b11:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013b18:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013b1f:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013b25:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013b2b:	0f 86 b1 00 00 00    	jbe    c0013be2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c0013b31:	fa                   	cli    
c0013b32:	51                   	push   ecx
c0013b33:	31 ff                	xor    edi,edi
c0013b35:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013b3c:	c1 ee 0c             	shr    esi,0xc
c0013b3f:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0013b45:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b4b:	6a 00                	push   0x0
c0013b4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b55:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b5b:	e8 38 e9 ff ff       	call   c0012498 <VAS::mapOtherVASIn(bool, VAS*)>
c0013b60:	83 c4 10             	add    esp,0x10
c0013b63:	e8 a8 b2 ff ff       	call   c000ee10 <Phys::allocatePage()>
c0013b68:	47                   	inc    edi
c0013b69:	6a 07                	push   0x7
c0013b6b:	53                   	push   ebx
c0013b6c:	50                   	push   eax
c0013b6d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b71:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013b77:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013b7a:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013b80:	e8 a7 ea ff ff       	call   c001262c <VAS::mapPage(unsigned long, unsigned long, int)>
c0013b85:	58                   	pop    eax
c0013b86:	5a                   	pop    edx
c0013b87:	68 07 0c 00 00       	push   0xc07
c0013b8c:	55                   	push   ebp
c0013b8d:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013b93:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b97:	50                   	push   eax
c0013b98:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013b9f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013ba5:	6a 00                	push   0x0
c0013ba7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013baf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013bb5:	e8 c6 ec ff ff       	call   c0012880 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013bba:	83 c4 1c             	add    esp,0x1c
c0013bbd:	68 00 10 00 00       	push   0x1000
c0013bc2:	6a 00                	push   0x0
c0013bc4:	53                   	push   ebx
c0013bc5:	e8 26 c9 fe ff       	call   c00004f0 <memset>
c0013bca:	83 c4 10             	add    esp,0x10
c0013bcd:	39 fe                	cmp    esi,edi
c0013bcf:	77 92                	ja     c0013b63 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f3>
c0013bd1:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0013bd8:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0013bdf:	75 01                	jne    c0013be2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c0013be1:	fb                   	sti    
c0013be2:	83 ec 0c             	sub    esp,0xc
c0013be5:	53                   	push   ebx
c0013be6:	e8 66 e6 ff ff       	call   c0012251 <Virt::freeKernelVirtualPages(unsigned long)>
c0013beb:	83 c4 10             	add    esp,0x10
c0013bee:	b0 01                	mov    al,0x1
c0013bf0:	81 c4 2c 10 00 00    	add    esp,0x102c
c0013bf6:	5b                   	pop    ebx
c0013bf7:	5e                   	pop    esi
c0013bf8:	5f                   	pop    edi
c0013bf9:	5d                   	pop    ebp
c0013bfa:	c3                   	ret    

c0013bfb <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0013bfb:	55                   	push   ebp
c0013bfc:	57                   	push   edi
c0013bfd:	56                   	push   esi
c0013bfe:	53                   	push   ebx
c0013bff:	83 ec 48             	sub    esp,0x48
c0013c02:	68 14 01 00 00       	push   0x114
c0013c07:	e8 c4 ac ff ff       	call   c000e8d0 <malloc>
c0013c0c:	83 c4 0c             	add    esp,0xc
c0013c0f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013c13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013c17:	89 c7                	mov    edi,eax
c0013c19:	50                   	push   eax
c0013c1a:	e8 ed 44 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0013c1f:	58                   	pop    eax
c0013c20:	5a                   	pop    edx
c0013c21:	6a 01                	push   0x1
c0013c23:	57                   	push   edi
c0013c24:	e8 01 45 ff ff       	call   c000812a <File::open(FileOpenMode)>
c0013c29:	83 c4 10             	add    esp,0x10
c0013c2c:	85 c0                	test   eax,eax
c0013c2e:	0f 85 4c 01 00 00    	jne    c0013d80 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013c34:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0013c3c:	83 ec 0c             	sub    esp,0xc
c0013c3f:	6a 34                	push   0x34
c0013c41:	e8 8a ac ff ff       	call   c000e8d0 <malloc>
c0013c46:	89 c3                	mov    ebx,eax
c0013c48:	58                   	pop    eax
c0013c49:	8b 07                	mov    eax,DWORD PTR [edi]
c0013c4b:	8d 74 24 38          	lea    esi,[esp+0x38]
c0013c4f:	56                   	push   esi
c0013c50:	53                   	push   ebx
c0013c51:	6a 00                	push   0x0
c0013c53:	6a 34                	push   0x34
c0013c55:	57                   	push   edi
c0013c56:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c59:	83 c4 20             	add    esp,0x20
c0013c5c:	85 c0                	test   eax,eax
c0013c5e:	0f 85 1c 01 00 00    	jne    c0013d80 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013c64:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013c6a:	0f 85 10 01 00 00    	jne    c0013d80 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013c70:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013c73:	85 c0                	test   eax,eax
c0013c75:	0f 84 05 01 00 00    	je     c0013d80 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013c7b:	31 d2                	xor    edx,edx
c0013c7d:	55                   	push   ebp
c0013c7e:	52                   	push   edx
c0013c7f:	50                   	push   eax
c0013c80:	57                   	push   edi
c0013c81:	e8 62 45 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0013c86:	83 c4 10             	add    esp,0x10
c0013c89:	85 c0                	test   eax,eax
c0013c8b:	0f 85 ef 00 00 00    	jne    c0013d80 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013c91:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013c94:	83 ec 0c             	sub    esp,0xc
c0013c97:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013c9b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0013c9f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013ca3:	0f af c2             	imul   eax,edx
c0013ca6:	50                   	push   eax
c0013ca7:	e8 24 ac ff ff       	call   c000e8d0 <malloc>
c0013cac:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013cae:	89 34 24             	mov    DWORD PTR [esp],esi
c0013cb1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013cb5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013cb9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013cbd:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013cc1:	0f af c2             	imul   eax,edx
c0013cc4:	99                   	cdq    
c0013cc5:	52                   	push   edx
c0013cc6:	50                   	push   eax
c0013cc7:	57                   	push   edi
c0013cc8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013ccb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0013cce:	83 c4 20             	add    esp,0x20
c0013cd1:	85 c0                	test   eax,eax
c0013cd3:	0f 84 a7 00 00 00    	je     c0013d80 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013cd9:	31 d2                	xor    edx,edx
c0013cdb:	51                   	push   ecx
c0013cdc:	52                   	push   edx
c0013cdd:	50                   	push   eax
c0013cde:	57                   	push   edi
c0013cdf:	e8 04 45 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0013ce4:	83 c4 10             	add    esp,0x10
c0013ce7:	85 c0                	test   eax,eax
c0013ce9:	0f 85 91 00 00 00    	jne    c0013d80 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013cef:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013cf3:	83 ec 0c             	sub    esp,0xc
c0013cf6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013cfa:	0f af c2             	imul   eax,edx
c0013cfd:	50                   	push   eax
c0013cfe:	e8 cd ab ff ff       	call   c000e8d0 <malloc>
c0013d03:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013d05:	89 34 24             	mov    DWORD PTR [esp],esi
c0013d08:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d10:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013d14:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013d18:	0f af c2             	imul   eax,edx
c0013d1b:	99                   	cdq    
c0013d1c:	52                   	push   edx
c0013d1d:	50                   	push   eax
c0013d1e:	57                   	push   edi
c0013d1f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013d22:	83 c4 20             	add    esp,0x20
c0013d25:	31 c9                	xor    ecx,ecx
c0013d27:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013d2f:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0013d33:	0f b7 e9             	movzx  ebp,cx
c0013d36:	0f 83 86 00 00 00    	jae    c0013dc2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0013d3c:	c1 e5 05             	shl    ebp,0x5
c0013d3f:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0013d43:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0013d47:	75 73                	jne    c0013dbc <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0013d49:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013d4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013d50:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0013d53:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d57:	52                   	push   edx
c0013d58:	31 d2                	xor    edx,edx
c0013d5a:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0013d5d:	52                   	push   edx
c0013d5e:	50                   	push   eax
c0013d5f:	57                   	push   edi
c0013d60:	e8 83 44 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0013d65:	83 c4 10             	add    esp,0x10
c0013d68:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013d6c:	85 c0                	test   eax,eax
c0013d6e:	74 17                	je     c0013d87 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0013d70:	83 ec 0c             	sub    esp,0xc
c0013d73:	68 18 2b 02 c0       	push   0xc0022b18
c0013d78:	e8 d1 31 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013d7d:	83 c4 10             	add    esp,0x10
c0013d80:	31 c0                	xor    eax,eax
c0013d82:	e9 8b 00 00 00       	jmp    c0013e12 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0013d87:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013d8b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0013d8e:	83 ec 0c             	sub    esp,0xc
c0013d91:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0013d94:	50                   	push   eax
c0013d95:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013d99:	56                   	push   esi
c0013d9a:	57                   	push   edi
c0013d9b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013d9f:	e8 cc fb ff ff       	call   c0013970 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013da4:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0013da8:	83 c4 20             	add    esp,0x20
c0013dab:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0013daf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013db3:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0013db8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0013dbc:	41                   	inc    ecx
c0013dbd:	e9 6d ff ff ff       	jmp    c0013d2f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013dc2:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0013dc6:	83 ec 0c             	sub    esp,0xc
c0013dc9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013dcd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013dd1:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0013dd7:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0013ddd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013de2:	05 00 10 00 00       	add    eax,0x1000
c0013de7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013dea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dee:	e8 ed aa ff ff       	call   c000e8e0 <free>
c0013df3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013df6:	e8 e5 aa ff ff       	call   c000e8e0 <free>
c0013dfb:	58                   	pop    eax
c0013dfc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e00:	e8 db aa ff ff       	call   c000e8e0 <free>
c0013e05:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013e08:	e8 7b 43 ff ff       	call   c0008188 <File::close()>
c0013e0d:	83 c4 10             	add    esp,0x10
c0013e10:	b0 01                	mov    al,0x1
c0013e12:	83 c4 3c             	add    esp,0x3c
c0013e15:	5b                   	pop    ebx
c0013e16:	5e                   	pop    esi
c0013e17:	5f                   	pop    edi
c0013e18:	5d                   	pop    ebp
c0013e19:	c3                   	ret    

c0013e1a <Thr::runtimeReferenceHelper()>:
c0013e1a:	83 ec 18             	sub    esp,0x18
c0013e1d:	68 20 2b 02 c0       	push   0xc0022b20
c0013e22:	e8 27 31 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013e27:	fa                   	cli    
c0013e28:	83 c4 10             	add    esp,0x10
c0013e2b:	eb fe                	jmp    c0013e2b <Thr::runtimeReferenceHelper()+0x11>

c0013e2d <Thr::getAddressOfKernelSymbol(char const*)>:
c0013e2d:	57                   	push   edi
c0013e2e:	56                   	push   esi
c0013e2f:	53                   	push   ebx
c0013e30:	31 db                	xor    ebx,ebx
c0013e32:	39 1d 80 c6 02 c0    	cmp    DWORD PTR ds:0xc002c680,ebx
c0013e38:	7e 3c                	jle    c0013e76 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013e3a:	8b 34 9d 00 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd3a00]
c0013e41:	31 ff                	xor    edi,edi
c0013e43:	39 3c 9d 00 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3b00],edi
c0013e4a:	7e 27                	jle    c0013e73 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013e4c:	50                   	push   eax
c0013e4d:	50                   	push   eax
c0013e4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e52:	8b 06                	mov    eax,DWORD PTR [esi]
c0013e54:	03 04 9d 80 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a80]
c0013e5b:	50                   	push   eax
c0013e5c:	e8 1f c9 fe ff       	call   c0000780 <strcmp>
c0013e61:	83 c4 10             	add    esp,0x10
c0013e64:	85 c0                	test   eax,eax
c0013e66:	75 05                	jne    c0013e6d <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013e68:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013e6b:	eb 0b                	jmp    c0013e78 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013e6d:	83 c6 10             	add    esi,0x10
c0013e70:	47                   	inc    edi
c0013e71:	eb d0                	jmp    c0013e43 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013e73:	43                   	inc    ebx
c0013e74:	eb bc                	jmp    c0013e32 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013e76:	31 c0                	xor    eax,eax
c0013e78:	5b                   	pop    ebx
c0013e79:	5e                   	pop    esi
c0013e7a:	5f                   	pop    edi
c0013e7b:	c3                   	ret    

c0013e7c <Thr::loadKernelSymbolTable(char const*)>:
c0013e7c:	55                   	push   ebp
c0013e7d:	57                   	push   edi
c0013e7e:	56                   	push   esi
c0013e7f:	53                   	push   ebx
c0013e80:	83 ec 68             	sub    esp,0x68
c0013e83:	68 14 01 00 00       	push   0x114
c0013e88:	8b 35 d8 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6d8
c0013e8e:	e8 3d aa ff ff       	call   c000e8d0 <malloc>
c0013e93:	83 c4 0c             	add    esp,0xc
c0013e96:	56                   	push   esi
c0013e97:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013e9b:	89 c3                	mov    ebx,eax
c0013e9d:	50                   	push   eax
c0013e9e:	e8 69 42 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0013ea3:	5e                   	pop    esi
c0013ea4:	5f                   	pop    edi
c0013ea5:	6a 01                	push   0x1
c0013ea7:	53                   	push   ebx
c0013ea8:	e8 7d 42 ff ff       	call   c000812a <File::open(FileOpenMode)>
c0013ead:	83 c4 10             	add    esp,0x10
c0013eb0:	85 c0                	test   eax,eax
c0013eb2:	74 0a                	je     c0013ebe <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013eb4:	83 ec 0c             	sub    esp,0xc
c0013eb7:	68 42 2b 02 c0       	push   0xc0022b42
c0013ebc:	eb 34                	jmp    c0013ef2 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013ebe:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013ec6:	83 ec 0c             	sub    esp,0xc
c0013ec9:	6a 34                	push   0x34
c0013ecb:	e8 00 aa ff ff       	call   c000e8d0 <malloc>
c0013ed0:	59                   	pop    ecx
c0013ed1:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013ed5:	89 c7                	mov    edi,eax
c0013ed7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ed9:	56                   	push   esi
c0013eda:	57                   	push   edi
c0013edb:	6a 00                	push   0x0
c0013edd:	6a 34                	push   0x34
c0013edf:	53                   	push   ebx
c0013ee0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ee3:	83 c4 20             	add    esp,0x20
c0013ee6:	85 c0                	test   eax,eax
c0013ee8:	74 17                	je     c0013f01 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013eea:	83 ec 0c             	sub    esp,0xc
c0013eed:	68 59 2b 02 c0       	push   0xc0022b59
c0013ef2:	e8 1f ad ff ff       	call   c000ec16 <KePanic(char const*)>
c0013ef7:	83 c4 10             	add    esp,0x10
c0013efa:	31 c0                	xor    eax,eax
c0013efc:	e9 31 02 00 00       	jmp    c0014132 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013f01:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013f07:	75 e1                	jne    c0013eea <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013f09:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013f0c:	85 c0                	test   eax,eax
c0013f0e:	74 da                	je     c0013eea <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013f10:	52                   	push   edx
c0013f11:	31 d2                	xor    edx,edx
c0013f13:	52                   	push   edx
c0013f14:	50                   	push   eax
c0013f15:	53                   	push   ebx
c0013f16:	e8 cd 42 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0013f1b:	83 c4 10             	add    esp,0x10
c0013f1e:	85 c0                	test   eax,eax
c0013f20:	75 c8                	jne    c0013eea <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013f22:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013f26:	83 ec 0c             	sub    esp,0xc
c0013f29:	31 ed                	xor    ebp,ebp
c0013f2b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013f2f:	0f af c2             	imul   eax,edx
c0013f32:	50                   	push   eax
c0013f33:	e8 98 a9 ff ff       	call   c000e8d0 <malloc>
c0013f38:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013f3a:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f3d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013f41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f45:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013f49:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013f4d:	0f af c2             	imul   eax,edx
c0013f50:	99                   	cdq    
c0013f51:	52                   	push   edx
c0013f52:	50                   	push   eax
c0013f53:	53                   	push   ebx
c0013f54:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f57:	83 c4 20             	add    esp,0x20
c0013f5a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013f62:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013f6a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013f72:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013f7a:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0013f7e:	0f b7 f5             	movzx  esi,bp
c0013f81:	0f 83 a7 00 00 00    	jae    c001402e <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0013f87:	6b f6 28             	imul   esi,esi,0x28
c0013f8a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013f8e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013f91:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013f95:	50                   	push   eax
c0013f96:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013f9a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013f9e:	8b 16                	mov    edx,DWORD PTR [esi]
c0013fa0:	6b c0 28             	imul   eax,eax,0x28
c0013fa3:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013fa7:	89 d0                	mov    eax,edx
c0013fa9:	31 d2                	xor    edx,edx
c0013fab:	52                   	push   edx
c0013fac:	50                   	push   eax
c0013fad:	53                   	push   ebx
c0013fae:	e8 35 42 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0013fb3:	83 c4 0c             	add    esp,0xc
c0013fb6:	6a 20                	push   0x20
c0013fb8:	6a 00                	push   0x0
c0013fba:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013fbe:	52                   	push   edx
c0013fbf:	e8 2c c5 fe ff       	call   c00004f0 <memset>
c0013fc4:	58                   	pop    eax
c0013fc5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fc7:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013fcb:	51                   	push   ecx
c0013fcc:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013fd0:	52                   	push   edx
c0013fd1:	6a 00                	push   0x0
c0013fd3:	6a 1f                	push   0x1f
c0013fd5:	53                   	push   ebx
c0013fd6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013fd9:	83 c4 18             	add    esp,0x18
c0013fdc:	68 70 2b 02 c0       	push   0xc0022b70
c0013fe1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013fe5:	52                   	push   edx
c0013fe6:	e8 95 c7 fe ff       	call   c0000780 <strcmp>
c0013feb:	83 c4 10             	add    esp,0x10
c0013fee:	85 c0                	test   eax,eax
c0013ff0:	75 0f                	jne    c0014001 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013ff2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013ff5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ff9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ffd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014001:	50                   	push   eax
c0014002:	50                   	push   eax
c0014003:	68 78 2b 02 c0       	push   0xc0022b78
c0014008:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001400c:	50                   	push   eax
c001400d:	e8 6e c7 fe ff       	call   c0000780 <strcmp>
c0014012:	83 c4 10             	add    esp,0x10
c0014015:	85 c0                	test   eax,eax
c0014017:	75 0f                	jne    c0014028 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014019:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001401c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014020:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014024:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014028:	45                   	inc    ebp
c0014029:	e9 4c ff ff ff       	jmp    c0013f7a <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001402e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014033:	75 10                	jne    c0014045 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014035:	83 ec 0c             	sub    esp,0xc
c0014038:	68 80 2b 02 c0       	push   0xc0022b80
c001403d:	e8 d4 ab ff ff       	call   c000ec16 <KePanic(char const*)>
c0014042:	83 c4 10             	add    esp,0x10
c0014045:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001404a:	75 10                	jne    c001405c <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001404c:	83 ec 0c             	sub    esp,0xc
c001404f:	68 80 2b 02 c0       	push   0xc0022b80
c0014054:	e8 bd ab ff ff       	call   c000ec16 <KePanic(char const*)>
c0014059:	83 c4 10             	add    esp,0x10
c001405c:	50                   	push   eax
c001405d:	31 d2                	xor    edx,edx
c001405f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014063:	52                   	push   edx
c0014064:	50                   	push   eax
c0014065:	53                   	push   ebx
c0014066:	e8 7d 41 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c001406b:	5a                   	pop    edx
c001406c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014070:	e8 5b a8 ff ff       	call   c000e8d0 <malloc>
c0014075:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014079:	31 c9                	xor    ecx,ecx
c001407b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001407f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014081:	5e                   	pop    esi
c0014082:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014086:	55                   	push   ebp
c0014087:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001408b:	51                   	push   ecx
c001408c:	52                   	push   edx
c001408d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014091:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014095:	53                   	push   ebx
c0014096:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014099:	83 c4 14             	add    esp,0x14
c001409c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00140a0:	e8 2b a8 ff ff       	call   c000e8d0 <malloc>
c00140a5:	89 c6                	mov    esi,eax
c00140a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140a9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00140ac:	56                   	push   esi
c00140ad:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00140b1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00140b5:	51                   	push   ecx
c00140b6:	52                   	push   edx
c00140b7:	53                   	push   ebx
c00140b8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00140bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00140bf:	83 c4 1c             	add    esp,0x1c
c00140c2:	8b 15 80 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c680
c00140c8:	c1 e8 04             	shr    eax,0x4
c00140cb:	89 04 95 00 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3b00],eax
c00140d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00140d6:	31 d2                	xor    edx,edx
c00140d8:	52                   	push   edx
c00140d9:	50                   	push   eax
c00140da:	53                   	push   ebx
c00140db:	e8 08 41 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c00140e0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00140e2:	31 d2                	xor    edx,edx
c00140e4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00140e7:	56                   	push   esi
c00140e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00140ec:	52                   	push   edx
c00140ed:	50                   	push   eax
c00140ee:	53                   	push   ebx
c00140ef:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00140f2:	83 c4 14             	add    esp,0x14
c00140f5:	53                   	push   ebx
c00140f6:	e8 8d 40 ff ff       	call   c0008188 <File::close()>
c00140fb:	5d                   	pop    ebp
c00140fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014100:	e8 db a7 ff ff       	call   c000e8e0 <free>
c0014105:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014108:	e8 d3 a7 ff ff       	call   c000e8e0 <free>
c001410d:	a1 80 c6 02 c0       	mov    eax,ds:0xc002c680
c0014112:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014116:	83 c4 10             	add    esp,0x10
c0014119:	89 34 85 80 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a80],esi
c0014120:	8d 50 01             	lea    edx,[eax+0x1]
c0014123:	89 0c 85 00 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a00],ecx
c001412a:	b0 01                	mov    al,0x1
c001412c:	89 15 80 c6 02 c0    	mov    DWORD PTR ds:0xc002c680,edx
c0014132:	83 c4 5c             	add    esp,0x5c
c0014135:	5b                   	pop    ebx
c0014136:	5e                   	pop    esi
c0014137:	5f                   	pop    edi
c0014138:	5d                   	pop    ebp
c0014139:	c3                   	ret    

c001413a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001413a:	55                   	push   ebp
c001413b:	57                   	push   edi
c001413c:	56                   	push   esi
c001413d:	53                   	push   ebx
c001413e:	81 ec 68 03 00 00    	sub    esp,0x368
c0014144:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001414b:	8b 35 d8 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6d8
c0014151:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0014155:	68 14 01 00 00       	push   0x114
c001415a:	e8 71 a7 ff ff       	call   c000e8d0 <malloc>
c001415f:	83 c4 0c             	add    esp,0xc
c0014162:	56                   	push   esi
c0014163:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001416a:	50                   	push   eax
c001416b:	89 c3                	mov    ebx,eax
c001416d:	e8 9a 3f ff ff       	call   c000810c <File::File(char const*, Process*)>
c0014172:	5f                   	pop    edi
c0014173:	5d                   	pop    ebp
c0014174:	6a 01                	push   0x1
c0014176:	53                   	push   ebx
c0014177:	e8 ae 3f ff ff       	call   c000812a <File::open(FileOpenMode)>
c001417c:	83 c4 10             	add    esp,0x10
c001417f:	85 c0                	test   eax,eax
c0014181:	0f 85 b3 06 00 00    	jne    c001483a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014187:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001418f:	83 ec 0c             	sub    esp,0xc
c0014192:	6a 34                	push   0x34
c0014194:	e8 37 a7 ff ff       	call   c000e8d0 <malloc>
c0014199:	5e                   	pop    esi
c001419a:	8d 74 24 54          	lea    esi,[esp+0x54]
c001419e:	89 c5                	mov    ebp,eax
c00141a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00141a2:	56                   	push   esi
c00141a3:	55                   	push   ebp
c00141a4:	6a 00                	push   0x0
c00141a6:	6a 34                	push   0x34
c00141a8:	53                   	push   ebx
c00141a9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00141ac:	83 c4 20             	add    esp,0x20
c00141af:	85 c0                	test   eax,eax
c00141b1:	0f 85 83 06 00 00    	jne    c001483a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00141b7:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c00141be:	0f 85 76 06 00 00    	jne    c001483a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00141c4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00141c7:	85 c0                	test   eax,eax
c00141c9:	0f 84 6b 06 00 00    	je     c001483a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00141cf:	31 d2                	xor    edx,edx
c00141d1:	51                   	push   ecx
c00141d2:	52                   	push   edx
c00141d3:	50                   	push   eax
c00141d4:	53                   	push   ebx
c00141d5:	e8 0e 40 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c00141da:	83 c4 10             	add    esp,0x10
c00141dd:	85 c0                	test   eax,eax
c00141df:	0f 85 55 06 00 00    	jne    c001483a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00141e5:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00141e8:	83 ec 0c             	sub    esp,0xc
c00141eb:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00141ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00141f3:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00141f7:	0f af c2             	imul   eax,edx
c00141fa:	50                   	push   eax
c00141fb:	e8 d0 a6 ff ff       	call   c000e8d0 <malloc>
c0014200:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014202:	89 34 24             	mov    DWORD PTR [esp],esi
c0014205:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014209:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001420d:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014211:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014215:	0f af c2             	imul   eax,edx
c0014218:	99                   	cdq    
c0014219:	52                   	push   edx
c001421a:	50                   	push   eax
c001421b:	53                   	push   ebx
c001421c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001421f:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0014222:	83 c4 20             	add    esp,0x20
c0014225:	85 c0                	test   eax,eax
c0014227:	0f 84 0d 06 00 00    	je     c001483a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001422d:	52                   	push   edx
c001422e:	31 d2                	xor    edx,edx
c0014230:	52                   	push   edx
c0014231:	50                   	push   eax
c0014232:	53                   	push   ebx
c0014233:	e8 b0 3f ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0014238:	83 c4 10             	add    esp,0x10
c001423b:	85 c0                	test   eax,eax
c001423d:	0f 85 f7 05 00 00    	jne    c001483a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014243:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014247:	83 ec 0c             	sub    esp,0xc
c001424a:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001424e:	0f af c2             	imul   eax,edx
c0014251:	50                   	push   eax
c0014252:	e8 79 a6 ff ff       	call   c000e8d0 <malloc>
c0014257:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014259:	89 34 24             	mov    DWORD PTR [esp],esi
c001425c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014260:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014264:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014268:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001426c:	0f af c2             	imul   eax,edx
c001426f:	99                   	cdq    
c0014270:	52                   	push   edx
c0014271:	50                   	push   eax
c0014272:	53                   	push   ebx
c0014273:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014276:	83 c4 20             	add    esp,0x20
c0014279:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001427f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014282:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0014286:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c001428a:	73 78                	jae    c0014304 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c001428c:	c1 e7 05             	shl    edi,0x5
c001428f:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0014293:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014296:	75 63                	jne    c00142fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0014298:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001429b:	31 d2                	xor    edx,edx
c001429d:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c00142a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00142a4:	50                   	push   eax
c00142a5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00142a8:	52                   	push   edx
c00142a9:	50                   	push   eax
c00142aa:	53                   	push   ebx
c00142ab:	e8 38 3f ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c00142b0:	83 c4 10             	add    esp,0x10
c00142b3:	85 c0                	test   eax,eax
c00142b5:	0f 85 7f 05 00 00    	jne    c001483a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00142bb:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00142c2:	83 ec 0c             	sub    esp,0xc
c00142c5:	31 d2                	xor    edx,edx
c00142c7:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00142cb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00142cd:	01 c6                	add    esi,eax
c00142cf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00142d6:	50                   	push   eax
c00142d7:	56                   	push   esi
c00142d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142dc:	52                   	push   edx
c00142dd:	50                   	push   eax
c00142de:	53                   	push   ebx
c00142df:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00142e2:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00142e5:	83 c4 1c             	add    esp,0x1c
c00142e8:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00142eb:	50                   	push   eax
c00142ec:	6a 00                	push   0x0
c00142ee:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00142f2:	56                   	push   esi
c00142f3:	e8 f8 c1 fe ff       	call   c00004f0 <memset>
c00142f8:	83 c4 10             	add    esp,0x10
c00142fb:	66 ff 04 24          	inc    WORD PTR [esp]
c00142ff:	e9 7b ff ff ff       	jmp    c001427f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0014304:	50                   	push   eax
c0014305:	68 00 01 00 00       	push   0x100
c001430a:	6a 00                	push   0x0
c001430c:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014310:	50                   	push   eax
c0014311:	e8 da c1 fe ff       	call   c00004f0 <memset>
c0014316:	83 c4 0c             	add    esp,0xc
c0014319:	68 00 01 00 00       	push   0x100
c001431e:	6a 00                	push   0x0
c0014320:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014327:	50                   	push   eax
c0014328:	e8 c3 c1 fe ff       	call   c00004f0 <memset>
c001432d:	83 c4 10             	add    esp,0x10
c0014330:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0014337:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001433e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014346:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001434e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014356:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001435e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014362:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0014366:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c001436b:	0f 83 16 01 00 00    	jae    c0014487 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0014371:	6b ff 28             	imul   edi,edi,0x28
c0014374:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0014378:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001437b:	51                   	push   ecx
c001437c:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0014380:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014384:	8b 07                	mov    eax,DWORD PTR [edi]
c0014386:	6b d2 28             	imul   edx,edx,0x28
c0014389:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001438d:	31 d2                	xor    edx,edx
c001438f:	52                   	push   edx
c0014390:	50                   	push   eax
c0014391:	53                   	push   ebx
c0014392:	e8 51 3e ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0014397:	83 c4 0c             	add    esp,0xc
c001439a:	6a 20                	push   0x20
c001439c:	6a 00                	push   0x0
c001439e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00143a5:	51                   	push   ecx
c00143a6:	e8 45 c1 fe ff       	call   c00004f0 <memset>
c00143ab:	58                   	pop    eax
c00143ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143ae:	8d 54 24 58          	lea    edx,[esp+0x58]
c00143b2:	52                   	push   edx
c00143b3:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00143ba:	51                   	push   ecx
c00143bb:	6a 00                	push   0x0
c00143bd:	6a 1f                	push   0x1f
c00143bf:	53                   	push   ebx
c00143c0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00143c3:	83 c4 1c             	add    esp,0x1c
c00143c6:	6a 09                	push   0x9
c00143c8:	68 9a 2b 02 c0       	push   0xc0022b9a
c00143cd:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00143d4:	51                   	push   ecx
c00143d5:	e8 a6 bf fe ff       	call   c0000380 <memcmp>
c00143da:	83 c4 10             	add    esp,0x10
c00143dd:	85 c0                	test   eax,eax
c00143df:	75 1a                	jne    c00143fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c00143e1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00143e4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00143e7:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00143eb:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00143ee:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00143f5:	89 d0                	mov    eax,edx
c00143f7:	40                   	inc    eax
c00143f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00143fb:	52                   	push   edx
c00143fc:	6a 09                	push   0x9
c00143fe:	68 a4 2b 02 c0       	push   0xc0022ba4
c0014403:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001440a:	50                   	push   eax
c001440b:	e8 70 bf fe ff       	call   c0000380 <memcmp>
c0014410:	83 c4 10             	add    esp,0x10
c0014413:	85 c0                	test   eax,eax
c0014415:	75 1a                	jne    c0014431 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0014417:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001441a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001441d:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014421:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014424:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001442b:	89 c8                	mov    eax,ecx
c001442d:	40                   	inc    eax
c001442e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014431:	50                   	push   eax
c0014432:	50                   	push   eax
c0014433:	68 70 2b 02 c0       	push   0xc0022b70
c0014438:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001443f:	50                   	push   eax
c0014440:	e8 3b c3 fe ff       	call   c0000780 <strcmp>
c0014445:	83 c4 10             	add    esp,0x10
c0014448:	85 c0                	test   eax,eax
c001444a:	75 0b                	jne    c0014457 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c001444c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0014450:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014453:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014457:	50                   	push   eax
c0014458:	50                   	push   eax
c0014459:	68 78 2b 02 c0       	push   0xc0022b78
c001445e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014465:	50                   	push   eax
c0014466:	e8 15 c3 fe ff       	call   c0000780 <strcmp>
c001446b:	83 c4 10             	add    esp,0x10
c001446e:	85 c0                	test   eax,eax
c0014470:	75 0b                	jne    c001447d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0014472:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0014476:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014479:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001447d:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0014482:	e9 d7 fe ff ff       	jmp    c001435e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0014487:	50                   	push   eax
c0014488:	31 d2                	xor    edx,edx
c001448a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001448e:	52                   	push   edx
c001448f:	50                   	push   eax
c0014490:	53                   	push   ebx
c0014491:	e8 52 3d ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0014496:	58                   	pop    eax
c0014497:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001449b:	e8 30 a4 ff ff       	call   c000e8d0 <malloc>
c00144a0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00144a2:	31 d2                	xor    edx,edx
c00144a4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00144a8:	58                   	pop    eax
c00144a9:	8d 74 24 54          	lea    esi,[esp+0x54]
c00144ad:	56                   	push   esi
c00144ae:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00144b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144b6:	52                   	push   edx
c00144b7:	50                   	push   eax
c00144b8:	53                   	push   ebx
c00144b9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00144bc:	83 c4 14             	add    esp,0x14
c00144bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144c3:	e8 08 a4 ff ff       	call   c000e8d0 <malloc>
c00144c8:	31 d2                	xor    edx,edx
c00144ca:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00144ce:	83 c4 0c             	add    esp,0xc
c00144d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144d5:	52                   	push   edx
c00144d6:	50                   	push   eax
c00144d7:	53                   	push   ebx
c00144d8:	e8 0b 3d ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c00144dd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00144df:	31 d2                	xor    edx,edx
c00144e1:	89 34 24             	mov    DWORD PTR [esp],esi
c00144e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00144e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00144ec:	52                   	push   edx
c00144ed:	50                   	push   eax
c00144ee:	53                   	push   ebx
c00144ef:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00144f2:	83 c4 20             	add    esp,0x20
c00144f5:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c00144fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014502:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014506:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001450a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001450d:	0f 84 2b 03 00 00    	je     c001483e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0014513:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c001451a:	31 d2                	xor    edx,edx
c001451c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014520:	c1 e8 03             	shr    eax,0x3
c0014523:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014527:	51                   	push   ecx
c0014528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001452c:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014530:	52                   	push   edx
c0014531:	50                   	push   eax
c0014532:	53                   	push   ebx
c0014533:	e8 b0 3c ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0014538:	5e                   	pop    esi
c0014539:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001453d:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014544:	e8 87 a3 ff ff       	call   c000e8d0 <malloc>
c0014549:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001454b:	31 d2                	xor    edx,edx
c001454d:	89 c7                	mov    edi,eax
c001454f:	58                   	pop    eax
c0014550:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014554:	50                   	push   eax
c0014555:	57                   	push   edi
c0014556:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001455a:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014561:	52                   	push   edx
c0014562:	50                   	push   eax
c0014563:	53                   	push   ebx
c0014564:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014567:	83 c4 20             	add    esp,0x20
c001456a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014572:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0014576:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c001457a:	0f 8d a5 02 00 00    	jge    c0014825 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014580:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0014585:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014589:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c001458c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014590:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014594:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c0014598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001459c:	c1 e8 08             	shr    eax,0x8
c001459f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00145a3:	89 c2                	mov    edx,eax
c00145a5:	c1 e2 04             	shl    edx,0x4
c00145a8:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c00145ac:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00145af:	85 f6                	test   esi,esi
c00145b1:	0f 85 cf 00 00 00    	jne    c0014686 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00145b7:	83 ec 0c             	sub    esp,0xc
c00145ba:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00145be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145c2:	03 02                	add    eax,DWORD PTR [edx]
c00145c4:	50                   	push   eax
c00145c5:	e8 63 f8 ff ff       	call   c0013e2d <Thr::getAddressOfKernelSymbol(char const*)>
c00145ca:	83 c4 10             	add    esp,0x10
c00145cd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00145d1:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c00145d6:	85 c0                	test   eax,eax
c00145d8:	89 c6                	mov    esi,eax
c00145da:	0f 85 a6 00 00 00    	jne    c0014686 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00145e0:	83 ec 0c             	sub    esp,0xc
c00145e3:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00145e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145eb:	03 02                	add    eax,DWORD PTR [edx]
c00145ed:	50                   	push   eax
c00145ee:	e8 a1 b0 ff ff       	call   c000f694 <KeResolveCompatibilitySymbol(char*)>
c00145f3:	83 c4 10             	add    esp,0x10
c00145f6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00145fa:	85 c0                	test   eax,eax
c00145fc:	89 c6                	mov    esi,eax
c00145fe:	0f 85 82 00 00 00    	jne    c0014686 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014604:	50                   	push   eax
c0014605:	50                   	push   eax
c0014606:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001460a:	03 02                	add    eax,DWORD PTR [edx]
c001460c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0014610:	50                   	push   eax
c0014611:	68 ae 2b 02 c0       	push   0xc0022bae
c0014616:	e8 33 29 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001461b:	58                   	pop    eax
c001461c:	5a                   	pop    edx
c001461d:	68 c8 2b 02 c0       	push   0xc0022bc8
c0014622:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014629:	51                   	push   ecx
c001462a:	e8 21 c0 fe ff       	call   c0000650 <strcpy>
c001462f:	59                   	pop    ecx
c0014630:	58                   	pop    eax
c0014631:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014635:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014639:	03 02                	add    eax,DWORD PTR [edx]
c001463b:	50                   	push   eax
c001463c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014643:	51                   	push   ecx
c0014644:	e8 27 c2 fe ff       	call   c0000870 <strcat>
c0014649:	58                   	pop    eax
c001464a:	5a                   	pop    edx
c001464b:	68 62 2c 02 c0       	push   0xc0022c62
c0014650:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014657:	51                   	push   ecx
c0014658:	e8 13 c2 fe ff       	call   c0000870 <strcat>
c001465d:	83 c4 10             	add    esp,0x10
c0014660:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014665:	0f 84 77 01 00 00    	je     c00147e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c001466b:	83 ec 0c             	sub    esp,0xc
c001466e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014675:	51                   	push   ecx
c0014676:	e8 9b a5 ff ff       	call   c000ec16 <KePanic(char const*)>
c001467b:	83 c4 10             	add    esp,0x10
c001467e:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0014682:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014686:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001468b:	83 f8 01             	cmp    eax,0x1
c001468e:	0f 85 9b 00 00 00    	jne    c001472f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0014694:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014698:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c001469f:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c00146a3:	01 d0                	add    eax,edx
c00146a5:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00146ad:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00146b1:	0f 94 c0             	sete   al
c00146b4:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c00146bc:	0f 94 c1             	sete   cl
c00146bf:	09 c1                	or     ecx,eax
c00146c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00146c5:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00146ca:	0f b6 c9             	movzx  ecx,cl
c00146cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00146cf:	74 41                	je     c0014712 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c00146d1:	8d 14 06             	lea    edx,[esi+eax*1]
c00146d4:	85 c9                	test   ecx,ecx
c00146d6:	75 15                	jne    c00146ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c00146d8:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00146dc:	66 83 f8 0c          	cmp    ax,0xc
c00146e0:	76 05                	jbe    c00146e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00146e2:	b8 0c 00 00 00       	mov    eax,0xc
c00146e7:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00146eb:	76 37                	jbe    c0014724 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00146ed:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00146f2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00146f6:	0f 84 e6 00 00 00    	je     c00147e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00146fc:	83 ec 0c             	sub    esp,0xc
c00146ff:	68 df 2b 02 c0       	push   0xc0022bdf
c0014704:	e8 0d a5 ff ff       	call   c000ec16 <KePanic(char const*)>
c0014709:	83 c4 10             	add    esp,0x10
c001470c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014710:	eb 12                	jmp    c0014724 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014712:	01 c2                	add    edx,eax
c0014714:	85 c9                	test   ecx,ecx
c0014716:	75 0c                	jne    c0014724 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014718:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001471c:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014720:	77 02                	ja     c0014724 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014722:	01 f2                	add    edx,esi
c0014724:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014728:	89 10                	mov    DWORD PTR [eax],edx
c001472a:	e9 ed 00 00 00       	jmp    c001481c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c001472f:	83 f8 02             	cmp    eax,0x2
c0014732:	0f 85 81 00 00 00    	jne    c00147b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0014738:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001473f:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0014743:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0014747:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c001474f:	74 21                	je     c0014772 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014751:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014759:	74 17                	je     c0014772 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c001475b:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c001475f:	ba 0a 00 00 00       	mov    edx,0xa
c0014764:	83 f9 0e             	cmp    ecx,0xe
c0014767:	77 03                	ja     c001476c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0014769:	8d 51 fc             	lea    edx,[ecx-0x4]
c001476c:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0014770:	76 1f                	jbe    c0014791 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0014772:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014777:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001477b:	74 65                	je     c00147e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c001477d:	83 ec 0c             	sub    esp,0xc
c0014780:	68 fb 2b 02 c0       	push   0xc0022bfb
c0014785:	e8 8c a4 ff ff       	call   c000ec16 <KePanic(char const*)>
c001478a:	83 c4 10             	add    esp,0x10
c001478d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014791:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014796:	8b 10                	mov    edx,DWORD PTR [eax]
c0014798:	74 15                	je     c00147af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001479a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001479e:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00147a5:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00147a9:	01 d1                	add    ecx,edx
c00147ab:	01 ce                	add    esi,ecx
c00147ad:	eb 06                	jmp    c00147b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c00147af:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c00147b3:	01 d6                	add    esi,edx
c00147b5:	89 30                	mov    DWORD PTR [eax],esi
c00147b7:	eb 63                	jmp    c001481c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00147b9:	56                   	push   esi
c00147ba:	56                   	push   esi
c00147bb:	50                   	push   eax
c00147bc:	68 17 2c 02 c0       	push   0xc0022c17
c00147c1:	e8 88 27 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00147c6:	83 c4 10             	add    esp,0x10
c00147c9:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00147ce:	74 12                	je     c00147e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00147d0:	83 ec 0c             	sub    esp,0xc
c00147d3:	68 22 2c 02 c0       	push   0xc0022c22
c00147d8:	e8 39 a4 ff ff       	call   c000ec16 <KePanic(char const*)>
c00147dd:	83 c4 10             	add    esp,0x10
c00147e0:	eb 3a                	jmp    c001481c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00147e2:	83 ec 0c             	sub    esp,0xc
c00147e5:	53                   	push   ebx
c00147e6:	e8 9d 39 ff ff       	call   c0008188 <File::close()>
c00147eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00147f0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00147f3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00147f6:	e8 e5 a0 ff ff       	call   c000e8e0 <free>
c00147fb:	59                   	pop    ecx
c00147fc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014800:	e8 db a0 ff ff       	call   c000e8e0 <free>
c0014805:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014808:	e8 d3 a0 ff ff       	call   c000e8e0 <free>
c001480d:	5b                   	pop    ebx
c001480e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014812:	e8 c9 a0 ff ff       	call   c000e8e0 <free>
c0014817:	83 c4 10             	add    esp,0x10
c001481a:	eb 1e                	jmp    c001483a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001481c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0014820:	e9 4d fd ff ff       	jmp    c0014572 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c0014825:	83 ec 0c             	sub    esp,0xc
c0014828:	57                   	push   edi
c0014829:	e8 b2 a0 ff ff       	call   c000e8e0 <free>
c001482e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0014832:	83 c4 10             	add    esp,0x10
c0014835:	e9 cc fc ff ff       	jmp    c0014506 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c001483a:	31 c0                	xor    eax,eax
c001483c:	eb 32                	jmp    c0014870 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c001483e:	83 ec 0c             	sub    esp,0xc
c0014841:	53                   	push   ebx
c0014842:	e8 41 39 ff ff       	call   c0008188 <File::close()>
c0014847:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014849:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001484c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001484f:	58                   	pop    eax
c0014850:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014854:	e8 87 a0 ff ff       	call   c000e8e0 <free>
c0014859:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001485c:	e8 7f a0 ff ff       	call   c000e8e0 <free>
c0014861:	5a                   	pop    edx
c0014862:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014866:	e8 75 a0 ff ff       	call   c000e8e0 <free>
c001486b:	83 c4 10             	add    esp,0x10
c001486e:	b0 01                	mov    al,0x1
c0014870:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014876:	5b                   	pop    ebx
c0014877:	5e                   	pop    esi
c0014878:	5f                   	pop    edi
c0014879:	5d                   	pop    ebp
c001487a:	c3                   	ret    

c001487b <Thr::getDriverBaseFromAddress(unsigned long)>:
c001487b:	56                   	push   esi
c001487c:	31 d2                	xor    edx,edx
c001487e:	53                   	push   ebx
c001487f:	8b 1d e0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bee0
c0014885:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014889:	39 d3                	cmp    ebx,edx
c001488b:	7e 1b                	jle    c00148a8 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001488d:	8b 04 95 00 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3f00]
c0014894:	39 c8                	cmp    eax,ecx
c0014896:	77 0d                	ja     c00148a5 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014898:	8b 34 95 00 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd4100]
c001489f:	01 c6                	add    esi,eax
c00148a1:	39 ce                	cmp    esi,ecx
c00148a3:	77 05                	ja     c00148aa <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00148a5:	42                   	inc    edx
c00148a6:	eb e1                	jmp    c0014889 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00148a8:	31 c0                	xor    eax,eax
c00148aa:	5b                   	pop    ebx
c00148ab:	5e                   	pop    esi
c00148ac:	c3                   	ret    

c00148ad <Thr::getDriverNameFromAddress(unsigned long)>:
c00148ad:	53                   	push   ebx
c00148ae:	8b 1d e0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bee0
c00148b4:	31 c0                	xor    eax,eax
c00148b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00148ba:	39 c3                	cmp    ebx,eax
c00148bc:	7e 22                	jle    c00148e0 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00148be:	8b 14 85 00 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3f00]
c00148c5:	39 ca                	cmp    edx,ecx
c00148c7:	77 14                	ja     c00148dd <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00148c9:	03 14 85 00 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd4100]
c00148d0:	39 ca                	cmp    edx,ecx
c00148d2:	76 09                	jbe    c00148dd <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00148d4:	8b 04 85 00 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3d00]
c00148db:	eb 05                	jmp    c00148e2 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00148dd:	40                   	inc    eax
c00148de:	eb da                	jmp    c00148ba <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00148e0:	31 c0                	xor    eax,eax
c00148e2:	5b                   	pop    ebx
c00148e3:	c3                   	ret    

c00148e4 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00148e4:	53                   	push   ebx
c00148e5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00148e9:	53                   	push   ebx
c00148ea:	e8 8c ff ff ff       	call   c001487b <Thr::getDriverBaseFromAddress(unsigned long)>
c00148ef:	5a                   	pop    edx
c00148f0:	31 d2                	xor    edx,edx
c00148f2:	85 c0                	test   eax,eax
c00148f4:	74 04                	je     c00148fa <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00148f6:	89 da                	mov    edx,ebx
c00148f8:	29 c2                	sub    edx,eax
c00148fa:	5b                   	pop    ebx
c00148fb:	89 d0                	mov    eax,edx
c00148fd:	c3                   	ret    

c00148fe <Thr::loadDLL(char const*, bool)>:
c00148fe:	55                   	push   ebp
c00148ff:	57                   	push   edi
c0014900:	56                   	push   esi
c0014901:	53                   	push   ebx
c0014902:	81 ec 34 01 00 00    	sub    esp,0x134
c0014908:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001490f:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014916:	56                   	push   esi
c0014917:	68 3a 2c 02 c0       	push   0xc0022c3a
c001491c:	e8 2d 26 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014921:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014928:	e8 a3 9f ff ff       	call   c000e8d0 <malloc>
c001492d:	83 c4 0c             	add    esp,0xc
c0014930:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0014936:	56                   	push   esi
c0014937:	50                   	push   eax
c0014938:	89 c3                	mov    ebx,eax
c001493a:	e8 cd 37 ff ff       	call   c000810c <File::File(char const*, Process*)>
c001493f:	83 c4 10             	add    esp,0x10
c0014942:	85 db                	test   ebx,ebx
c0014944:	75 3c                	jne    c0014982 <Thr::loadDLL(char const*, bool)+0x84>
c0014946:	89 e8                	mov    eax,ebp
c0014948:	84 c0                	test   al,al
c001494a:	0f 84 02 02 00 00    	je     c0014b52 <Thr::loadDLL(char const*, bool)+0x254>
c0014950:	50                   	push   eax
c0014951:	50                   	push   eax
c0014952:	68 4b 2c 02 c0       	push   0xc0022c4b
c0014957:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001495b:	57                   	push   edi
c001495c:	e8 ef bc fe ff       	call   c0000650 <strcpy>
c0014961:	58                   	pop    eax
c0014962:	5a                   	pop    edx
c0014963:	56                   	push   esi
c0014964:	57                   	push   edi
c0014965:	e8 06 bf fe ff       	call   c0000870 <strcat>
c001496a:	59                   	pop    ecx
c001496b:	58                   	pop    eax
c001496c:	68 62 2c 02 c0       	push   0xc0022c62
c0014971:	57                   	push   edi
c0014972:	e8 f9 be fe ff       	call   c0000870 <strcat>
c0014977:	89 3c 24             	mov    DWORD PTR [esp],edi
c001497a:	e8 97 a2 ff ff       	call   c000ec16 <KePanic(char const*)>
c001497f:	83 c4 10             	add    esp,0x10
c0014982:	50                   	push   eax
c0014983:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014987:	50                   	push   eax
c0014988:	8d 44 24 20          	lea    eax,[esp+0x20]
c001498c:	50                   	push   eax
c001498d:	53                   	push   ebx
c001498e:	e8 99 3a ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c0014993:	83 c4 10             	add    esp,0x10
c0014996:	85 db                	test   ebx,ebx
c0014998:	89 c7                	mov    edi,eax
c001499a:	74 0c                	je     c00149a8 <Thr::loadDLL(char const*, bool)+0xaa>
c001499c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001499e:	83 ec 0c             	sub    esp,0xc
c00149a1:	53                   	push   ebx
c00149a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00149a5:	83 c4 10             	add    esp,0x10
c00149a8:	83 ec 0c             	sub    esp,0xc
c00149ab:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c00149b0:	50                   	push   eax
c00149b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00149b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00149b9:	57                   	push   edi
c00149ba:	68 64 2c 02 c0       	push   0xc0022c64
c00149bf:	e8 8a 25 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00149c4:	83 c4 20             	add    esp,0x20
c00149c7:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00149cc:	75 0a                	jne    c00149d8 <Thr::loadDLL(char const*, bool)+0xda>
c00149ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149d2:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00149d6:	75 3e                	jne    c0014a16 <Thr::loadDLL(char const*, bool)+0x118>
c00149d8:	89 e8                	mov    eax,ebp
c00149da:	31 db                	xor    ebx,ebx
c00149dc:	84 c0                	test   al,al
c00149de:	0f 84 6e 01 00 00    	je     c0014b52 <Thr::loadDLL(char const*, bool)+0x254>
c00149e4:	50                   	push   eax
c00149e5:	50                   	push   eax
c00149e6:	68 85 2c 02 c0       	push   0xc0022c85
c00149eb:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00149ef:	53                   	push   ebx
c00149f0:	e8 5b bc fe ff       	call   c0000650 <strcpy>
c00149f5:	58                   	pop    eax
c00149f6:	5a                   	pop    edx
c00149f7:	56                   	push   esi
c00149f8:	53                   	push   ebx
c00149f9:	e8 72 be fe ff       	call   c0000870 <strcat>
c00149fe:	59                   	pop    ecx
c00149ff:	5f                   	pop    edi
c0014a00:	68 62 2c 02 c0       	push   0xc0022c62
c0014a05:	53                   	push   ebx
c0014a06:	e8 65 be fe ff       	call   c0000870 <strcat>
c0014a0b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a0e:	e8 03 a2 ff ff       	call   c000ec16 <KePanic(char const*)>
c0014a13:	83 c4 10             	add    esp,0x10
c0014a16:	53                   	push   ebx
c0014a17:	6a 03                	push   0x3
c0014a19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a1d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014a21:	05 ff 0f 00 00       	add    eax,0xfff
c0014a26:	83 d2 00             	adc    edx,0x0
c0014a29:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014a2d:	50                   	push   eax
c0014a2e:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c0014a34:	e8 fb dc ff ff       	call   c0012734 <VAS::allocatePages(int, int)>
c0014a39:	89 c3                	mov    ebx,eax
c0014a3b:	58                   	pop    eax
c0014a3c:	5a                   	pop    edx
c0014a3d:	53                   	push   ebx
c0014a3e:	68 9a 23 02 c0       	push   0xc002239a
c0014a43:	e8 06 25 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014a48:	89 34 24             	mov    DWORD PTR [esp],esi
c0014a4b:	e8 30 bb fe ff       	call   c0000580 <strlen>
c0014a50:	8b 3d e0 be 02 c0    	mov    edi,DWORD PTR ds:0xc002bee0
c0014a56:	40                   	inc    eax
c0014a57:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a5a:	e8 71 9e ff ff       	call   c000e8d0 <malloc>
c0014a5f:	59                   	pop    ecx
c0014a60:	89 04 bd 00 c3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3d00],eax
c0014a67:	a1 e0 be 02 c0       	mov    eax,ds:0xc002bee0
c0014a6c:	5f                   	pop    edi
c0014a6d:	56                   	push   esi
c0014a6e:	ff 34 85 00 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3d00]
c0014a75:	e8 d6 bb fe ff       	call   c0000650 <strcpy>
c0014a7a:	a1 e0 be 02 c0       	mov    eax,ds:0xc002bee0
c0014a7f:	89 1c 85 00 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f00],ebx
c0014a86:	8d 50 01             	lea    edx,[eax+0x1]
c0014a89:	89 15 e0 be 02 c0    	mov    DWORD PTR ds:0xc002bee0,edx
c0014a8f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014a93:	83 c4 0c             	add    esp,0xc
c0014a96:	6a 01                	push   0x1
c0014a98:	53                   	push   ebx
c0014a99:	56                   	push   esi
c0014a9a:	89 14 85 00 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4100],edx
c0014aa1:	e8 94 f6 ff ff       	call   c001413a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014aa6:	83 c4 10             	add    esp,0x10
c0014aa9:	89 c7                	mov    edi,eax
c0014aab:	89 f8                	mov    eax,edi
c0014aad:	83 f0 01             	xor    eax,0x1
c0014ab0:	84 c0                	test   al,al
c0014ab2:	74 18                	je     c0014acc <Thr::loadDLL(char const*, bool)+0x1ce>
c0014ab4:	89 e8                	mov    eax,ebp
c0014ab6:	84 c0                	test   al,al
c0014ab8:	74 12                	je     c0014acc <Thr::loadDLL(char const*, bool)+0x1ce>
c0014aba:	83 ec 0c             	sub    esp,0xc
c0014abd:	68 9e 2c 02 c0       	push   0xc0022c9e
c0014ac2:	e8 4f a1 ff ff       	call   c000ec16 <KePanic(char const*)>
c0014ac7:	83 c4 10             	add    esp,0x10
c0014aca:	eb 06                	jmp    c0014ad2 <Thr::loadDLL(char const*, bool)+0x1d4>
c0014acc:	89 f8                	mov    eax,edi
c0014ace:	84 c0                	test   al,al
c0014ad0:	75 10                	jne    c0014ae2 <Thr::loadDLL(char const*, bool)+0x1e4>
c0014ad2:	83 ec 0c             	sub    esp,0xc
c0014ad5:	68 bd 2c 02 c0       	push   0xc0022cbd
c0014ada:	e8 37 a1 ff ff       	call   c000ec16 <KePanic(char const*)>
c0014adf:	83 c4 10             	add    esp,0x10
c0014ae2:	31 f6                	xor    esi,esi
c0014ae4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ae8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014aec:	05 ff 0f 00 00       	add    eax,0xfff
c0014af1:	83 d2 00             	adc    edx,0x0
c0014af4:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014af8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014afc:	c1 ea 0c             	shr    edx,0xc
c0014aff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014b03:	ba 00 00 00 00       	mov    edx,0x0
c0014b08:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0014b0c:	89 d0                	mov    eax,edx
c0014b0e:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0014b12:	73 32                	jae    c0014b46 <Thr::loadDLL(char const*, bool)+0x248>
c0014b14:	50                   	push   eax
c0014b15:	50                   	push   eax
c0014b16:	89 f0                	mov    eax,esi
c0014b18:	c1 e0 0c             	shl    eax,0xc
c0014b1b:	01 d8                	add    eax,ebx
c0014b1d:	50                   	push   eax
c0014b1e:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c0014b24:	e8 09 d7 ff ff       	call   c0012232 <VAS::getPageTableEntry(unsigned long)>
c0014b29:	83 c4 10             	add    esp,0x10
c0014b2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b2e:	a8 60                	test   al,0x60
c0014b30:	75 11                	jne    c0014b43 <Thr::loadDLL(char const*, bool)+0x245>
c0014b32:	83 ec 0c             	sub    esp,0xc
c0014b35:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014b3a:	50                   	push   eax
c0014b3b:	e8 67 a2 ff ff       	call   c000eda7 <Phys::freePage(unsigned long)>
c0014b40:	83 c4 10             	add    esp,0x10
c0014b43:	46                   	inc    esi
c0014b44:	eb 9e                	jmp    c0014ae4 <Thr::loadDLL(char const*, bool)+0x1e6>
c0014b46:	89 f8                	mov    eax,edi
c0014b48:	84 c0                	test   al,al
c0014b4a:	b8 00 00 00 00       	mov    eax,0x0
c0014b4f:	0f 44 d8             	cmove  ebx,eax
c0014b52:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014b58:	89 d8                	mov    eax,ebx
c0014b5a:	5b                   	pop    ebx
c0014b5b:	5e                   	pop    esi
c0014b5c:	5f                   	pop    edi
c0014b5d:	5d                   	pop    ebp
c0014b5e:	c3                   	ret    

c0014b5f <Thr::executeDLL(unsigned long, void*)>:
c0014b5f:	56                   	push   esi
c0014b60:	53                   	push   ebx
c0014b61:	52                   	push   edx
c0014b62:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b66:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014b6a:	85 db                	test   ebx,ebx
c0014b6c:	75 10                	jne    c0014b7e <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014b6e:	83 ec 0c             	sub    esp,0xc
c0014b71:	68 d9 2c 02 c0       	push   0xc0022cd9
c0014b76:	e8 9b a0 ff ff       	call   c000ec16 <KePanic(char const*)>
c0014b7b:	83 c4 10             	add    esp,0x10
c0014b7e:	50                   	push   eax
c0014b7f:	50                   	push   eax
c0014b80:	53                   	push   ebx
c0014b81:	68 03 2d 02 c0       	push   0xc0022d03
c0014b86:	e8 c3 23 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014b8b:	89 d8                	mov    eax,ebx
c0014b8d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014b91:	83 c4 14             	add    esp,0x14
c0014b94:	5b                   	pop    ebx
c0014b95:	5e                   	pop    esi
c0014b96:	ff e0                	jmp    eax

c0014b98 <KeProcessExec(Process*, char const*)>:
c0014b98:	56                   	push   esi
c0014b99:	53                   	push   ebx
c0014b9a:	83 ec 04             	sub    esp,0x4
c0014b9d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014ba1:	8b b3 12 05 00 00    	mov    esi,DWORD PTR [ebx+0x512]
c0014ba7:	85 f6                	test   esi,esi
c0014ba9:	74 16                	je     c0014bc1 <KeProcessExec(Process*, char const*)+0x29>
c0014bab:	83 ec 0c             	sub    esp,0xc
c0014bae:	56                   	push   esi
c0014baf:	e8 10 d9 ff ff       	call   c00124c4 <VAS::~VAS()>
c0014bb4:	58                   	pop    eax
c0014bb5:	5a                   	pop    edx
c0014bb6:	6a 14                	push   0x14
c0014bb8:	56                   	push   esi
c0014bb9:	e8 9d 7a ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0014bbe:	83 c4 10             	add    esp,0x10
c0014bc1:	83 ec 0c             	sub    esp,0xc
c0014bc4:	6a 14                	push   0x14
c0014bc6:	e8 05 9d ff ff       	call   c000e8d0 <malloc>
c0014bcb:	89 c6                	mov    esi,eax
c0014bcd:	58                   	pop    eax
c0014bce:	5a                   	pop    edx
c0014bcf:	6a 00                	push   0x0
c0014bd1:	56                   	push   esi
c0014bd2:	e8 99 dd ff ff       	call   c0012970 <VAS::VAS(bool)>
c0014bd7:	89 b3 12 05 00 00    	mov    DWORD PTR [ebx+0x512],esi
c0014bdd:	59                   	pop    ecx
c0014bde:	5e                   	pop    esi
c0014bdf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014be3:	50                   	push   eax
c0014be4:	53                   	push   ebx
c0014be5:	e8 11 f0 ff ff       	call   c0013bfb <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014bea:	83 c4 14             	add    esp,0x14
c0014bed:	31 c0                	xor    eax,eax
c0014bef:	5b                   	pop    ebx
c0014bf0:	5e                   	pop    esi
c0014bf1:	c3                   	ret    
c0014bf2:	66 90                	xchg   ax,ax

c0014bf4 <userModeEntryPoint(void*)>:
c0014bf4:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0014bfc:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0014c01:	85 c0                	test   eax,eax
c0014c03:	75 03                	jne    c0014c08 <userModeEntryPoint(void*)+0x14>
c0014c05:	fb                   	sti    
c0014c06:	66 90                	xchg   ax,ax
c0014c08:	fb                   	sti    
c0014c09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c0e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014c11:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014c17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c1b:	e9 1f b6 fe ff       	jmp    c000023f <goToUsermode>

c0014c20 <changeTSS>:
c0014c20:	83 ec 14             	sub    esp,0x14
c0014c23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c28:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014c2b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014c30:	c1 e2 15             	shl    edx,0x15
c0014c33:	29 d0                	sub    eax,edx
c0014c35:	50                   	push   eax
c0014c36:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0014c3b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c41:	05 68 11 00 00       	add    eax,0x1168
c0014c46:	50                   	push   eax
c0014c47:	e8 cc cb ff ff       	call   c0011818 <TSS::setESP(unsigned long)>
c0014c4c:	83 c4 1c             	add    esp,0x1c
c0014c4f:	c3                   	ret    

c0014c50 <switchToThread(ThreadControlBlock*)>:
c0014c50:	57                   	push   edi
c0014c51:	8b 0d ac c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6ac
c0014c57:	56                   	push   esi
c0014c58:	53                   	push   ebx
c0014c59:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014c5d:	85 c9                	test   ecx,ecx
c0014c5f:	0f 85 8b 00 00 00    	jne    c0014cf0 <switchToThread(ThreadControlBlock*)+0xa0>
c0014c65:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0014c69:	81 fa ff 00 00 00    	cmp    edx,0xff
c0014c6f:	74 7b                	je     c0014cec <switchToThread(ThreadControlBlock*)+0x9c>
c0014c71:	b8 00 04 00 00       	mov    eax,0x400
c0014c76:	29 d0                	sub    eax,edx
c0014c78:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0014c7b:	d1 f8                	sar    eax,1
c0014c7d:	01 d0                	add    eax,edx
c0014c7f:	90                   	nop
c0014c80:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0014c83:	e8 81 37 00 00       	call   c0018409 <HalQueryPerformanceCounter()>
c0014c88:	a3 f0 c6 02 c0       	mov    ds:0xc002c6f0,eax
c0014c8d:	89 c6                	mov    esi,eax
c0014c8f:	89 d7                	mov    edi,edx
c0014c91:	2b 35 e0 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6e0
c0014c97:	a3 e0 c6 02 c0       	mov    ds:0xc002c6e0,eax
c0014c9c:	1b 3d e4 c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6e4
c0014ca2:	89 35 e8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6e8,esi
c0014ca8:	89 15 f4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f4,edx
c0014cae:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014cb4:	89 15 e4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6e4,edx
c0014cba:	89 3d ec c6 02 c0    	mov    DWORD PTR ds:0xc002c6ec,edi
c0014cc0:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014cc3:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014cc6:	01 c6                	add    esi,eax
c0014cc8:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0014ccb:	11 d7                	adc    edi,edx
c0014ccd:	83 ec 0c             	sub    esp,0xc
c0014cd0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0014cd3:	53                   	push   ebx
c0014cd4:	e8 9e b5 fe ff       	call   c0000277 <switchToThreadASM>
c0014cd9:	0f 20 c0             	mov    eax,cr0
c0014cdc:	83 c8 08             	or     eax,0x8
c0014cdf:	0f 22 c0             	mov    cr0,eax
c0014ce2:	83 c4 10             	add    esp,0x10
c0014ce5:	5b                   	pop    ebx
c0014ce6:	5e                   	pop    esi
c0014ce7:	5f                   	pop    edi
c0014ce8:	c3                   	ret    
c0014ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0014cec:	31 c0                	xor    eax,eax
c0014cee:	eb 90                	jmp    c0014c80 <switchToThread(ThreadControlBlock*)+0x30>
c0014cf0:	5b                   	pop    ebx
c0014cf1:	c7 05 a8 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x1
c0014cfb:	5e                   	pop    esi
c0014cfc:	5f                   	pop    edi
c0014cfd:	c3                   	ret    
c0014cfe:	66 90                	xchg   ax,ax

c0014d00 <Process::addArgs(char**)>:
c0014d00:	57                   	push   edi
c0014d01:	56                   	push   esi
c0014d02:	53                   	push   ebx
c0014d03:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014d07:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0014d0b:	85 f6                	test   esi,esi
c0014d0d:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c0014d17:	74 4f                	je     c0014d68 <Process::addArgs(char**)+0x68>
c0014d19:	8b 06                	mov    eax,DWORD PTR [esi]
c0014d1b:	85 c0                	test   eax,eax
c0014d1d:	74 49                	je     c0014d68 <Process::addArgs(char**)+0x68>
c0014d1f:	31 db                	xor    ebx,ebx
c0014d21:	8d 76 00             	lea    esi,[esi+0x0]
c0014d24:	83 ec 0c             	sub    esp,0xc
c0014d27:	50                   	push   eax
c0014d28:	e8 53 b8 fe ff       	call   c0000580 <strlen>
c0014d2d:	83 c0 01             	add    eax,0x1
c0014d30:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d33:	e8 98 9b ff ff       	call   c000e8d0 <malloc>
c0014d38:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0014d3f:	5a                   	pop    edx
c0014d40:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0014d43:	83 c3 01             	add    ebx,0x1
c0014d46:	59                   	pop    ecx
c0014d47:	52                   	push   edx
c0014d48:	50                   	push   eax
c0014d49:	e8 02 b9 fe ff       	call   c0000650 <strcpy>
c0014d4e:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0014d54:	83 c4 10             	add    esp,0x10
c0014d57:	83 c1 01             	add    ecx,0x1
c0014d5a:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0014d60:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0014d63:	85 c0                	test   eax,eax
c0014d65:	75 bd                	jne    c0014d24 <Process::addArgs(char**)+0x24>
c0014d67:	90                   	nop
c0014d68:	5b                   	pop    ebx
c0014d69:	5e                   	pop    esi
c0014d6a:	5f                   	pop    edi
c0014d6b:	c3                   	ret    

c0014d6c <Process::Process(char const*, Process*, char**)>:
c0014d6c:	56                   	push   esi
c0014d6d:	53                   	push   ebx
c0014d6e:	83 ec 14             	sub    esp,0x14
c0014d71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d75:	05 0c 02 00 00       	add    eax,0x20c
c0014d7a:	bb 07 00 00 00       	mov    ebx,0x7
c0014d7f:	89 c6                	mov    esi,eax
c0014d81:	8d 76 00             	lea    esi,[esi+0x0]
c0014d84:	85 db                	test   ebx,ebx
c0014d86:	78 14                	js     c0014d9c <Process::Process(char const*, Process*, char**)+0x30>
c0014d88:	83 ec 0c             	sub    esp,0xc
c0014d8b:	56                   	push   esi
c0014d8c:	e8 1f b8 00 00       	call   c00205b0 <ThreadControlBlock::ThreadControlBlock()>
c0014d91:	83 c4 10             	add    esp,0x10
c0014d94:	83 c6 5f             	add    esi,0x5f
c0014d97:	83 eb 01             	sub    ebx,0x1
c0014d9a:	eb e8                	jmp    c0014d84 <Process::Process(char const*, Process*, char**)+0x18>
c0014d9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014da0:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014da7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dab:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014db2:	83 ec 0c             	sub    esp,0xc
c0014db5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014db9:	e8 9a 8d ff ff       	call   c000db58 <KeNewProcessEnv(Process*)>
c0014dbe:	83 c4 10             	add    esp,0x10
c0014dc1:	89 c2                	mov    edx,eax
c0014dc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dc7:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014dcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dd1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014dda:	a1 7c 45 02 c0       	mov    eax,ds:0xc002457c
c0014ddf:	8d 50 01             	lea    edx,[eax+0x1]
c0014de2:	89 15 7c 45 02 c0    	mov    DWORD PTR ds:0xc002457c,edx
c0014de8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014dec:	89 02                	mov    DWORD PTR [edx],eax
c0014dee:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0014df6:	83 ec 0c             	sub    esp,0xc
c0014df9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014dfd:	e8 ce 9a ff ff       	call   c000e8d0 <malloc>
c0014e02:	83 c4 10             	add    esp,0x10
c0014e05:	89 c3                	mov    ebx,eax
c0014e07:	83 ec 08             	sub    esp,0x8
c0014e0a:	6a 00                	push   0x0
c0014e0c:	53                   	push   ebx
c0014e0d:	e8 5e db ff ff       	call   c0012970 <VAS::VAS(bool)>
c0014e12:	83 c4 10             	add    esp,0x10
c0014e15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e19:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014e1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e23:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014e2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e31:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014e35:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014e3b:	e8 83 ae ff ff       	call   c000fcc3 <KeInitSignals()>
c0014e40:	89 c2                	mov    edx,eax
c0014e42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e46:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014e4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e50:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014e56:	85 c0                	test   eax,eax
c0014e58:	74 42                	je     c0014e9c <Process::Process(char const*, Process*, char**)+0x130>
c0014e5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e5e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014e64:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014e6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e6e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014e74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e78:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014e7e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014e84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e88:	05 0c 01 00 00       	add    eax,0x10c
c0014e8d:	83 ec 08             	sub    esp,0x8
c0014e90:	52                   	push   edx
c0014e91:	50                   	push   eax
c0014e92:	e8 b9 b7 fe ff       	call   c0000650 <strcpy>
c0014e97:	83 c4 10             	add    esp,0x10
c0014e9a:	eb 64                	jmp    c0014f00 <Process::Process(char const*, Process*, char**)+0x194>
c0014e9c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014ea4:	83 ec 0c             	sub    esp,0xc
c0014ea7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014eab:	e8 20 9a ff ff       	call   c000e8d0 <malloc>
c0014eb0:	83 c4 10             	add    esp,0x10
c0014eb3:	89 c3                	mov    ebx,eax
c0014eb5:	83 ec 08             	sub    esp,0x8
c0014eb8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ebc:	53                   	push   ebx
c0014ebd:	e8 84 c6 ff ff       	call   c0011546 <VgaText::VgaText(char const*)>
c0014ec2:	83 c4 10             	add    esp,0x10
c0014ec5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ec9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014ecf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ed3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ed9:	83 ec 0c             	sub    esp,0xc
c0014edc:	50                   	push   eax
c0014edd:	e8 12 bf ff ff       	call   c0010df4 <addToTerminalCycle(VgaText*)>
c0014ee2:	83 c4 10             	add    esp,0x10
c0014ee5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ee9:	05 0c 01 00 00       	add    eax,0x10c
c0014eee:	83 ec 08             	sub    esp,0x8
c0014ef1:	68 22 2d 02 c0       	push   0xc0022d22
c0014ef6:	50                   	push   eax
c0014ef7:	e8 54 b7 fe ff       	call   c0000650 <strcpy>
c0014efc:	83 c4 10             	add    esp,0x10
c0014eff:	90                   	nop
c0014f00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f04:	83 c0 0c             	add    eax,0xc
c0014f07:	83 ec 08             	sub    esp,0x8
c0014f0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f0e:	50                   	push   eax
c0014f0f:	e8 3c b7 fe ff       	call   c0000650 <strcpy>
c0014f14:	83 c4 10             	add    esp,0x10
c0014f17:	83 ec 08             	sub    esp,0x8
c0014f1a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014f1e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f22:	e8 d9 fd ff ff       	call   c0014d00 <Process::addArgs(char**)>
c0014f27:	83 c4 10             	add    esp,0x10
c0014f2a:	83 ec 08             	sub    esp,0x8
c0014f2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f35:	e8 c1 ec ff ff       	call   c0013bfb <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014f3a:	83 c4 10             	add    esp,0x10
c0014f3d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014f41:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014f45:	83 f0 01             	xor    eax,0x1
c0014f48:	88 c2                	mov    dl,al
c0014f4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f4e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014f54:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0014f59:	83 ec 04             	sub    esp,0x4
c0014f5c:	50                   	push   eax
c0014f5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f61:	68 7c 2d 02 c0       	push   0xc0022d7c
c0014f66:	e8 e3 1f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014f6b:	83 c4 10             	add    esp,0x10
c0014f6e:	90                   	nop
c0014f6f:	83 c4 14             	add    esp,0x14
c0014f72:	5b                   	pop    ebx
c0014f73:	5e                   	pop    esi
c0014f74:	c3                   	ret    
c0014f75:	90                   	nop
c0014f76:	66 90                	xchg   ax,ax

c0014f78 <Process::Process(bool, char const*, Process*, char**)>:
c0014f78:	56                   	push   esi
c0014f79:	53                   	push   ebx
c0014f7a:	83 ec 24             	sub    esp,0x24
c0014f7d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014f81:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014f85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f89:	05 0c 02 00 00       	add    eax,0x20c
c0014f8e:	bb 07 00 00 00       	mov    ebx,0x7
c0014f93:	89 c6                	mov    esi,eax
c0014f95:	8d 76 00             	lea    esi,[esi+0x0]
c0014f98:	85 db                	test   ebx,ebx
c0014f9a:	78 14                	js     c0014fb0 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014f9c:	83 ec 0c             	sub    esp,0xc
c0014f9f:	56                   	push   esi
c0014fa0:	e8 0b b6 00 00       	call   c00205b0 <ThreadControlBlock::ThreadControlBlock()>
c0014fa5:	83 c4 10             	add    esp,0x10
c0014fa8:	83 c6 5f             	add    esi,0x5f
c0014fab:	83 eb 01             	sub    ebx,0x1
c0014fae:	eb e8                	jmp    c0014f98 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014fb0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fb4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014fbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fbf:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014fc6:	83 ec 0c             	sub    esp,0xc
c0014fc9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014fcd:	e8 86 8b ff ff       	call   c000db58 <KeNewProcessEnv(Process*)>
c0014fd2:	83 c4 10             	add    esp,0x10
c0014fd5:	89 c2                	mov    edx,eax
c0014fd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fdb:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014fe1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fe5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014fee:	a1 7c 45 02 c0       	mov    eax,ds:0xc002457c
c0014ff3:	8d 50 01             	lea    edx,[eax+0x1]
c0014ff6:	89 15 7c 45 02 c0    	mov    DWORD PTR ds:0xc002457c,edx
c0014ffc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015000:	89 02                	mov    DWORD PTR [edx],eax
c0015002:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001500a:	83 ec 0c             	sub    esp,0xc
c001500d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015011:	e8 ba 98 ff ff       	call   c000e8d0 <malloc>
c0015016:	83 c4 10             	add    esp,0x10
c0015019:	89 c3                	mov    ebx,eax
c001501b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015020:	83 ec 08             	sub    esp,0x8
c0015023:	50                   	push   eax
c0015024:	53                   	push   ebx
c0015025:	e8 46 d9 ff ff       	call   c0012970 <VAS::VAS(bool)>
c001502a:	83 c4 10             	add    esp,0x10
c001502d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015031:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015037:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001503b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015045:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015049:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001504d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015053:	e8 6b ac ff ff       	call   c000fcc3 <KeInitSignals()>
c0015058:	89 c2                	mov    edx,eax
c001505a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001505e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015064:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015068:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001506e:	85 c0                	test   eax,eax
c0015070:	74 42                	je     c00150b4 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015072:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015076:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001507c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015082:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015086:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001508c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015090:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015096:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001509c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150a0:	05 0c 01 00 00       	add    eax,0x10c
c00150a5:	83 ec 08             	sub    esp,0x8
c00150a8:	52                   	push   edx
c00150a9:	50                   	push   eax
c00150aa:	e8 a1 b5 fe ff       	call   c0000650 <strcpy>
c00150af:	83 c4 10             	add    esp,0x10
c00150b2:	eb 64                	jmp    c0015118 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c00150b4:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c00150bc:	83 ec 0c             	sub    esp,0xc
c00150bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00150c3:	e8 08 98 ff ff       	call   c000e8d0 <malloc>
c00150c8:	83 c4 10             	add    esp,0x10
c00150cb:	89 c3                	mov    ebx,eax
c00150cd:	83 ec 08             	sub    esp,0x8
c00150d0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00150d4:	53                   	push   ebx
c00150d5:	e8 6c c4 ff ff       	call   c0011546 <VgaText::VgaText(char const*)>
c00150da:	83 c4 10             	add    esp,0x10
c00150dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150e1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00150e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150eb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150f1:	83 ec 0c             	sub    esp,0xc
c00150f4:	50                   	push   eax
c00150f5:	e8 fa bc ff ff       	call   c0010df4 <addToTerminalCycle(VgaText*)>
c00150fa:	83 c4 10             	add    esp,0x10
c00150fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015101:	05 0c 01 00 00       	add    eax,0x10c
c0015106:	83 ec 08             	sub    esp,0x8
c0015109:	68 22 2d 02 c0       	push   0xc0022d22
c001510e:	50                   	push   eax
c001510f:	e8 3c b5 fe ff       	call   c0000650 <strcpy>
c0015114:	83 c4 10             	add    esp,0x10
c0015117:	90                   	nop
c0015118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001511c:	83 c0 0c             	add    eax,0xc
c001511f:	83 ec 08             	sub    esp,0x8
c0015122:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015126:	50                   	push   eax
c0015127:	e8 24 b5 fe ff       	call   c0000650 <strcpy>
c001512c:	83 c4 10             	add    esp,0x10
c001512f:	83 ec 08             	sub    esp,0x8
c0015132:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015136:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001513a:	e8 c1 fb ff ff       	call   c0014d00 <Process::addArgs(char**)>
c001513f:	83 c4 10             	add    esp,0x10
c0015142:	90                   	nop
c0015143:	83 c4 24             	add    esp,0x24
c0015146:	5b                   	pop    ebx
c0015147:	5e                   	pop    esi
c0015148:	c3                   	ret    
c0015149:	8d 76 00             	lea    esi,[esi+0x0]

c001514c <taskStartupFunction>:
c001514c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015151:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015154:	c3                   	ret    
c0015155:	8d 76 00             	lea    esi,[esi+0x0]

c0015158 <KeDisablePreemption()>:
c0015158:	a1 8c c6 02 c0       	mov    eax,ds:0xc002c68c
c001515d:	85 c0                	test   eax,eax
c001515f:	75 13                	jne    c0015174 <KeDisablePreemption()+0x1c>
c0015161:	8a 15 74 9d 02 c0    	mov    dl,BYTE PTR ds:0xc0029d74
c0015167:	c6 05 74 9d 02 c0 00 	mov    BYTE PTR ds:0xc0029d74,0x0
c001516e:	88 15 88 c6 02 c0    	mov    BYTE PTR ds:0xc002c688,dl
c0015174:	83 c0 01             	add    eax,0x1
c0015177:	a3 8c c6 02 c0       	mov    ds:0xc002c68c,eax
c001517c:	c3                   	ret    
c001517d:	8d 76 00             	lea    esi,[esi+0x0]

c0015180 <KeRestorePreemption()>:
c0015180:	a1 8c c6 02 c0       	mov    eax,ds:0xc002c68c
c0015185:	83 e8 01             	sub    eax,0x1
c0015188:	a3 8c c6 02 c0       	mov    ds:0xc002c68c,eax
c001518d:	75 0d                	jne    c001519c <KeRestorePreemption()+0x1c>
c001518f:	a0 88 c6 02 c0       	mov    al,ds:0xc002c688
c0015194:	a2 74 9d 02 c0       	mov    ds:0xc0029d74,al
c0015199:	8d 76 00             	lea    esi,[esi+0x0]
c001519c:	c3                   	ret    
c001519d:	90                   	nop
c001519e:	66 90                	xchg   ax,ax

c00151a0 <Process::createThread(void (*)(void*), void*, int)>:
c00151a0:	57                   	push   edi
c00151a1:	31 c9                	xor    ecx,ecx
c00151a3:	56                   	push   esi
c00151a4:	53                   	push   ebx
c00151a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00151a9:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00151b0:	89 f2                	mov    edx,esi
c00151b2:	66 90                	xchg   ax,ax
c00151b4:	0f b7 c2             	movzx  eax,dx
c00151b7:	80 e2 01             	and    dl,0x1
c00151ba:	74 14                	je     c00151d0 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00151bc:	d1 f8                	sar    eax,1
c00151be:	83 c1 01             	add    ecx,0x1
c00151c1:	83 f9 10             	cmp    ecx,0x10
c00151c4:	89 c2                	mov    edx,eax
c00151c6:	75 ec                	jne    c00151b4 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00151c8:	31 db                	xor    ebx,ebx
c00151ca:	89 d8                	mov    eax,ebx
c00151cc:	5b                   	pop    ebx
c00151cd:	5e                   	pop    esi
c00151ce:	5f                   	pop    edi
c00151cf:	c3                   	ret    
c00151d0:	b8 01 00 00 00       	mov    eax,0x1
c00151d5:	d3 e0                	shl    eax,cl
c00151d7:	09 c6                	or     esi,eax
c00151d9:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00151e0:	8d 04 49             	lea    eax,[ecx+ecx*2]
c00151e3:	c1 e0 05             	shl    eax,0x5
c00151e6:	29 c8                	sub    eax,ecx
c00151e8:	01 d8                	add    eax,ebx
c00151ea:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00151f1:	75 0d                	jne    c0015200 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00151f3:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00151fd:	8d 76 00             	lea    esi,[esi+0x0]
c0015200:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015206:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0015209:	83 ec 0c             	sub    esp,0xc
c001520c:	c1 e6 05             	shl    esi,0x5
c001520f:	29 ce                	sub    esi,ecx
c0015211:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0015217:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001521d:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015223:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015229:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015230:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015236:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001523a:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015240:	89 ca                	mov    edx,ecx
c0015242:	f7 da                	neg    edx
c0015244:	c1 e2 15             	shl    edx,0x15
c0015247:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001524d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015253:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0015257:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015261:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015267:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001526b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015271:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001527b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015285:	68 00 01 00 00       	push   0x100
c001528a:	e8 41 96 ff ff       	call   c000e8d0 <malloc>
c001528f:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0015292:	58                   	pop    eax
c0015293:	5a                   	pop    edx
c0015294:	53                   	push   ebx
c0015295:	68 cc c6 02 c0       	push   0xc002c6cc
c001529a:	e8 bd ae 00 00       	call   c002015c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001529f:	83 c4 10             	add    esp,0x10
c00152a2:	89 d8                	mov    eax,ebx
c00152a4:	5b                   	pop    ebx
c00152a5:	5e                   	pop    esi
c00152a6:	5f                   	pop    edi
c00152a7:	c3                   	ret    

c00152a8 <Process::createUserThread()>:
c00152a8:	83 ec 0c             	sub    esp,0xc
c00152ab:	68 80 00 00 00       	push   0x80
c00152b0:	6a 00                	push   0x0
c00152b2:	68 f4 4b 01 c0       	push   0xc0014bf4
c00152b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152bb:	50                   	push   eax
c00152bc:	e8 df fe ff ff       	call   c00151a0 <Process::createThread(void (*)(void*), void*, int)>
c00152c1:	83 c4 1c             	add    esp,0x1c
c00152c4:	c3                   	ret    
c00152c5:	8d 76 00             	lea    esi,[esi+0x0]

c00152c8 <setupMultitasking(void (*)())>:
c00152c8:	56                   	push   esi
c00152c9:	53                   	push   ebx
c00152ca:	83 ec 04             	sub    esp,0x4
c00152cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00152d1:	eb 11                	jmp    c00152e4 <setupMultitasking(void (*)())+0x1c>
c00152d3:	90                   	nop
c00152d4:	83 ec 0c             	sub    esp,0xc
c00152d7:	68 cc c6 02 c0       	push   0xc002c6cc
c00152dc:	e8 bf ad 00 00       	call   c00200a0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00152e1:	83 c4 10             	add    esp,0x10
c00152e4:	83 ec 0c             	sub    esp,0xc
c00152e7:	68 cc c6 02 c0       	push   0xc002c6cc
c00152ec:	e8 8b ad 00 00       	call   c002007c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00152f1:	83 c4 10             	add    esp,0x10
c00152f4:	84 c0                	test   al,al
c00152f6:	74 dc                	je     c00152d4 <setupMultitasking(void (*)())+0xc>
c00152f8:	83 ec 0c             	sub    esp,0xc
c00152fb:	68 24 07 00 00       	push   0x724
c0015300:	e8 cb 95 ff ff       	call   c000e8d0 <malloc>
c0015305:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001530c:	6a 00                	push   0x0
c001530e:	68 26 2d 02 c0       	push   0xc0022d26
c0015313:	6a 01                	push   0x1
c0015315:	50                   	push   eax
c0015316:	89 c3                	mov    ebx,eax
c0015318:	e8 5b fc ff ff       	call   c0014f78 <Process::Process(bool, char const*, Process*, char**)>
c001531d:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015323:	83 c4 14             	add    esp,0x14
c0015326:	89 1d d8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6d8,ebx
c001532c:	50                   	push   eax
c001532d:	e8 17 bd ff ff       	call   c0011049 <setActiveTerminal(VgaText*)>
c0015332:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015339:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015343:	83 c8 01             	or     eax,0x1
c0015346:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c001534d:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015353:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015356:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015360:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015366:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015370:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015376:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015380:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001538a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015390:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015396:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00153a0:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00153aa:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00153b1:	e8 1a 95 ff ff       	call   c000e8d0 <malloc>
c00153b6:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00153bc:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00153c2:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00153c8:	5a                   	pop    edx
c00153c9:	59                   	pop    ecx
c00153ca:	68 22 2d 02 c0       	push   0xc0022d22
c00153cf:	50                   	push   eax
c00153d0:	e8 7b b2 fe ff       	call   c0000650 <strcpy>
c00153d5:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00153dc:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00153e0:	83 c4 14             	add    esp,0x14
c00153e3:	5b                   	pop    ebx
c00153e4:	5e                   	pop    esi
c00153e5:	e9 7f ae fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00153ea:	66 90                	xchg   ax,ax

c00153ec <schedule()>:
c00153ec:	8b 15 ac c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6ac
c00153f2:	85 d2                	test   edx,edx
c00153f4:	74 0e                	je     c0015404 <schedule()+0x18>
c00153f6:	c7 05 a8 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x1
c0015400:	c3                   	ret    
c0015401:	8d 76 00             	lea    esi,[esi+0x0]
c0015404:	53                   	push   ebx
c0015405:	83 ec 14             	sub    esp,0x14
c0015408:	68 cc c6 02 c0       	push   0xc002c6cc
c001540d:	e8 6a ac 00 00       	call   c002007c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015412:	83 c4 10             	add    esp,0x10
c0015415:	84 c0                	test   al,al
c0015417:	75 3f                	jne    c0015458 <schedule()+0x6c>
c0015419:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001541e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015421:	83 fa 01             	cmp    edx,0x1
c0015424:	74 3a                	je     c0015460 <schedule()+0x74>
c0015426:	66 90                	xchg   ax,ax
c0015428:	83 ec 0c             	sub    esp,0xc
c001542b:	68 cc c6 02 c0       	push   0xc002c6cc
c0015430:	e8 63 ac 00 00       	call   c0020098 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015435:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c001543c:	89 c3                	mov    ebx,eax
c001543e:	e8 5d ac 00 00       	call   c00200a0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015443:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001544a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001544d:	e8 fe f7 ff ff       	call   c0014c50 <switchToThread(ThreadControlBlock*)>
c0015452:	83 c4 10             	add    esp,0x10
c0015455:	8d 76 00             	lea    esi,[esi+0x0]
c0015458:	83 c4 08             	add    esp,0x8
c001545b:	5b                   	pop    ebx
c001545c:	c3                   	ret    
c001545d:	8d 76 00             	lea    esi,[esi+0x0]
c0015460:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015467:	83 ec 08             	sub    esp,0x8
c001546a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001546f:	50                   	push   eax
c0015470:	68 cc c6 02 c0       	push   0xc002c6cc
c0015475:	e8 e2 ac 00 00       	call   c002015c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001547a:	83 c4 10             	add    esp,0x10
c001547d:	eb a9                	jmp    c0015428 <schedule()+0x3c>
c001547f:	90                   	nop

c0015480 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015480:	83 ec 0c             	sub    esp,0xc
c0015483:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015488:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001548c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001548f:	e8 58 ff ff ff       	call   c00153ec <schedule()>
c0015494:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c001549c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00154a1:	85 c0                	test   eax,eax
c00154a3:	75 03                	jne    c00154a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c00154a5:	fb                   	sti    
c00154a6:	66 90                	xchg   ax,ax
c00154a8:	83 c4 0c             	add    esp,0xc
c00154ab:	c3                   	ret    

c00154ac <blockTask(TaskState)>:
c00154ac:	83 ec 0c             	sub    esp,0xc
c00154af:	fa                   	cli    
c00154b0:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00154b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00154b9:	83 c0 01             	add    eax,0x1
c00154bc:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00154c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154c6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00154c9:	e8 1e ff ff ff       	call   c00153ec <schedule()>
c00154ce:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c00154d6:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c00154dc:	85 d2                	test   edx,edx
c00154de:	75 04                	jne    c00154e4 <blockTask(TaskState)+0x38>
c00154e0:	fb                   	sti    
c00154e1:	8d 76 00             	lea    esi,[esi+0x0]
c00154e4:	83 c4 0c             	add    esp,0xc
c00154e7:	c3                   	ret    

c00154e8 <waitTask(int, int*, int)>:
c00154e8:	83 ec 18             	sub    esp,0x18
c00154eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154f0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00154f4:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00154f7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00154fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015500:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015503:	6a 07                	push   0x7
c0015505:	e8 a2 ff ff ff       	call   c00154ac <blockTask(TaskState)>
c001550a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001550f:	83 c4 10             	add    esp,0x10
c0015512:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015515:	85 d2                	test   edx,edx
c0015517:	74 0b                	je     c0015524 <waitTask(int, int*, int)+0x3c>
c0015519:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001551c:	89 02                	mov    DWORD PTR [edx],eax
c001551e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015523:	90                   	nop
c0015524:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015527:	83 c4 0c             	add    esp,0xc
c001552a:	c3                   	ret    
c001552b:	90                   	nop

c001552c <milliTenthSleepUntil(unsigned int)>:
c001552c:	83 ec 0c             	sub    esp,0xc
c001552f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015533:	39 05 ec 97 02 c0    	cmp    DWORD PTR ds:0xc00297ec,eax
c0015539:	76 05                	jbe    c0015540 <milliTenthSleepUntil(unsigned int)+0x14>
c001553b:	90                   	nop
c001553c:	83 c4 0c             	add    esp,0xc
c001553f:	c3                   	ret    
c0015540:	fa                   	cli    
c0015541:	8b 0d b0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6b0
c0015547:	83 ec 08             	sub    esp,0x8
c001554a:	8b 15 ac c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6ac
c0015550:	83 c1 01             	add    ecx,0x1
c0015553:	89 0d b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,ecx
c0015559:	83 c2 01             	add    edx,0x1
c001555c:	89 15 ac c6 02 c0    	mov    DWORD PTR ds:0xc002c6ac,edx
c0015562:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015568:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001556b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015571:	51                   	push   ecx
c0015572:	68 c0 c6 02 c0       	push   0xc002c6c0
c0015577:	e8 e0 ab 00 00       	call   c002015c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001557c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015583:	e8 24 ff ff ff       	call   c00154ac <blockTask(TaskState)>
c0015588:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c001558d:	83 c4 10             	add    esp,0x10
c0015590:	83 e8 01             	sub    eax,0x1
c0015593:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0015598:	85 c0                	test   eax,eax
c001559a:	75 0c                	jne    c00155a8 <milliTenthSleepUntil(unsigned int)+0x7c>
c001559c:	8b 15 a8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a8
c00155a2:	85 d2                	test   edx,edx
c00155a4:	75 1a                	jne    c00155c0 <milliTenthSleepUntil(unsigned int)+0x94>
c00155a6:	66 90                	xchg   ax,ax
c00155a8:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c00155b0:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00155b5:	85 c0                	test   eax,eax
c00155b7:	75 83                	jne    c001553c <milliTenthSleepUntil(unsigned int)+0x10>
c00155b9:	fb                   	sti    
c00155ba:	83 c4 0c             	add    esp,0xc
c00155bd:	c3                   	ret    
c00155be:	66 90                	xchg   ax,ax
c00155c0:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c00155ca:	e8 1d fe ff ff       	call   c00153ec <schedule()>
c00155cf:	eb d7                	jmp    c00155a8 <milliTenthSleepUntil(unsigned int)+0x7c>
c00155d1:	8d 76 00             	lea    esi,[esi+0x0]

c00155d4 <milliTenthSleep(unsigned int)>:
c00155d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00155d8:	a1 ec 97 02 c0       	mov    eax,ds:0xc00297ec
c00155dd:	01 c2                	add    edx,eax
c00155df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00155e3:	e9 44 ff ff ff       	jmp    c001552c <milliTenthSleepUntil(unsigned int)>

c00155e8 <sleep(unsigned int)>:
c00155e8:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c00155f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00155f4:	eb de                	jmp    c00155d4 <milliTenthSleep(unsigned int)>
c00155f6:	66 90                	xchg   ax,ax

c00155f8 <taskReturned>:
c00155f8:	83 ec 18             	sub    esp,0x18
c00155fb:	68 a8 2d 02 c0       	push   0xc0022da8
c0015600:	e8 11 96 ff ff       	call   c000ec16 <KePanic(char const*)>
c0015605:	83 c4 10             	add    esp,0x10
c0015608:	83 ec 0c             	sub    esp,0xc
c001560b:	6a 02                	push   0x2
c001560d:	e8 9a fe ff ff       	call   c00154ac <blockTask(TaskState)>
c0015612:	fa                   	cli    
c0015613:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015618:	83 c0 01             	add    eax,0x1
c001561b:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015620:	e8 c7 fd ff ff       	call   c00153ec <schedule()>
c0015625:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c001562d:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c0015633:	83 c4 10             	add    esp,0x10
c0015636:	85 d2                	test   edx,edx
c0015638:	75 ce                	jne    c0015608 <taskReturned+0x10>
c001563a:	fb                   	sti    
c001563b:	eb cb                	jmp    c0015608 <taskReturned+0x10>
c001563d:	8d 76 00             	lea    esi,[esi+0x0]

c0015640 <Thr::processFromPID(int)>:
c0015640:	57                   	push   edi
c0015641:	56                   	push   esi
c0015642:	53                   	push   ebx
c0015643:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015647:	fa                   	cli    
c0015648:	8b 0d b0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6b0
c001564e:	83 ec 0c             	sub    esp,0xc
c0015651:	68 cc c6 02 c0       	push   0xc002c6cc
c0015656:	83 c1 01             	add    ecx,0x1
c0015659:	89 0d b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,ecx
c001565f:	e8 34 aa 00 00       	call   c0020098 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015664:	83 c4 10             	add    esp,0x10
c0015667:	89 c7                	mov    edi,eax
c0015669:	eb 15                	jmp    c0015680 <Thr::processFromPID(int)+0x40>
c001566b:	90                   	nop
c001566c:	83 ec 0c             	sub    esp,0xc
c001566f:	68 cc c6 02 c0       	push   0xc002c6cc
c0015674:	e8 1f aa 00 00       	call   c0020098 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015679:	83 c4 10             	add    esp,0x10
c001567c:	39 f8                	cmp    eax,edi
c001567e:	74 50                	je     c00156d0 <Thr::processFromPID(int)+0x90>
c0015680:	83 ec 0c             	sub    esp,0xc
c0015683:	68 cc c6 02 c0       	push   0xc002c6cc
c0015688:	e8 0b aa 00 00       	call   c0020098 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001568d:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0015694:	89 c3                	mov    ebx,eax
c0015696:	e8 05 aa 00 00       	call   c00200a0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001569b:	58                   	pop    eax
c001569c:	5a                   	pop    edx
c001569d:	53                   	push   ebx
c001569e:	68 cc c6 02 c0       	push   0xc002c6cc
c00156a3:	e8 b4 aa 00 00       	call   c002015c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00156a8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00156ab:	83 c4 10             	add    esp,0x10
c00156ae:	39 30                	cmp    DWORD PTR [eax],esi
c00156b0:	75 ba                	jne    c001566c <Thr::processFromPID(int)+0x2c>
c00156b2:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c00156ba:	8b 0d b0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6b0
c00156c0:	85 c9                	test   ecx,ecx
c00156c2:	74 08                	je     c00156cc <Thr::processFromPID(int)+0x8c>
c00156c4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00156c7:	90                   	nop
c00156c8:	5b                   	pop    ebx
c00156c9:	5e                   	pop    esi
c00156ca:	5f                   	pop    edi
c00156cb:	c3                   	ret    
c00156cc:	fb                   	sti    
c00156cd:	eb f5                	jmp    c00156c4 <Thr::processFromPID(int)+0x84>
c00156cf:	90                   	nop
c00156d0:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c00156d8:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c00156de:	31 c0                	xor    eax,eax
c00156e0:	85 d2                	test   edx,edx
c00156e2:	75 e4                	jne    c00156c8 <Thr::processFromPID(int)+0x88>
c00156e4:	fb                   	sti    
c00156e5:	5b                   	pop    ebx
c00156e6:	5e                   	pop    esi
c00156e7:	5f                   	pop    edi
c00156e8:	c3                   	ret    
c00156e9:	8d 76 00             	lea    esi,[esi+0x0]

c00156ec <unblockTask(ThreadControlBlock*)>:
c00156ec:	53                   	push   ebx
c00156ed:	83 ec 08             	sub    esp,0x8
c00156f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156f4:	fa                   	cli    
c00156f5:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c00156fb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00156fe:	83 c2 01             	add    edx,0x1
c0015701:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c0015707:	85 c0                	test   eax,eax
c0015709:	74 6d                	je     c0015778 <unblockTask(ThreadControlBlock*)+0x8c>
c001570b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001570e:	83 f8 01             	cmp    eax,0x1
c0015711:	74 39                	je     c001574c <unblockTask(ThreadControlBlock*)+0x60>
c0015713:	83 ec 0c             	sub    esp,0xc
c0015716:	68 cc c6 02 c0       	push   0xc002c6cc
c001571b:	e8 78 a9 00 00       	call   c0020098 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015720:	83 c4 10             	add    esp,0x10
c0015723:	85 c0                	test   eax,eax
c0015725:	75 1d                	jne    c0015744 <unblockTask(ThreadControlBlock*)+0x58>
c0015727:	eb 63                	jmp    c001578c <unblockTask(ThreadControlBlock*)+0xa0>
c0015729:	8d 76 00             	lea    esi,[esi+0x0]
c001572c:	83 ec 08             	sub    esp,0x8
c001572f:	50                   	push   eax
c0015730:	68 cc c6 02 c0       	push   0xc002c6cc
c0015735:	e8 6a ae 00 00       	call   c00205a4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001573a:	83 c4 10             	add    esp,0x10
c001573d:	85 c0                	test   eax,eax
c001573f:	74 4b                	je     c001578c <unblockTask(ThreadControlBlock*)+0xa0>
c0015741:	8d 76 00             	lea    esi,[esi+0x0]
c0015744:	39 c3                	cmp    ebx,eax
c0015746:	75 e4                	jne    c001572c <unblockTask(ThreadControlBlock*)+0x40>
c0015748:	eb 12                	jmp    c001575c <unblockTask(ThreadControlBlock*)+0x70>
c001574a:	66 90                	xchg   ax,ax
c001574c:	83 ec 0c             	sub    esp,0xc
c001574f:	68 44 2d 02 c0       	push   0xc0022d44
c0015754:	e8 f5 17 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015759:	83 c4 10             	add    esp,0x10
c001575c:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015764:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015769:	85 c0                	test   eax,eax
c001576b:	75 03                	jne    c0015770 <unblockTask(ThreadControlBlock*)+0x84>
c001576d:	fb                   	sti    
c001576e:	66 90                	xchg   ax,ax
c0015770:	83 c4 08             	add    esp,0x8
c0015773:	5b                   	pop    ebx
c0015774:	c3                   	ret    
c0015775:	8d 76 00             	lea    esi,[esi+0x0]
c0015778:	83 ec 0c             	sub    esp,0xc
c001577b:	68 2d 2d 02 c0       	push   0xc0022d2d
c0015780:	e8 c9 17 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015785:	83 c4 10             	add    esp,0x10
c0015788:	eb d2                	jmp    c001575c <unblockTask(ThreadControlBlock*)+0x70>
c001578a:	66 90                	xchg   ax,ax
c001578c:	83 ec 08             	sub    esp,0x8
c001578f:	53                   	push   ebx
c0015790:	68 cc c6 02 c0       	push   0xc002c6cc
c0015795:	e8 c2 a9 00 00       	call   c002015c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001579a:	83 c4 10             	add    esp,0x10
c001579d:	eb bd                	jmp    c001575c <unblockTask(ThreadControlBlock*)+0x70>
c001579f:	90                   	nop

c00157a0 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00157a0:	55                   	push   ebp
c00157a1:	57                   	push   edi
c00157a2:	56                   	push   esi
c00157a3:	53                   	push   ebx
c00157a4:	83 ec 1c             	sub    esp,0x1c
c00157a7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00157ab:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00157ae:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00157b4:	85 ed                	test   ebp,ebp
c00157b6:	7e 28                	jle    c00157e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00157b8:	31 f6                	xor    esi,esi
c00157ba:	66 90                	xchg   ax,ax
c00157bc:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00157c3:	83 ec 0c             	sub    esp,0xc
c00157c6:	83 c6 01             	add    esi,0x1
c00157c9:	57                   	push   edi
c00157ca:	e8 11 91 ff ff       	call   c000e8e0 <free>
c00157cf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00157d2:	83 c4 10             	add    esp,0x10
c00157d5:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00157db:	7f df                	jg     c00157bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00157dd:	8d 76 00             	lea    esi,[esi+0x0]
c00157e0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00157ea:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00157ef:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00157f2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00157f5:	d3 c0                	rol    eax,cl
c00157f7:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00157fe:	21 c8                	and    eax,ecx
c0015800:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0015807:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001580a:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0015812:	89 f7                	mov    edi,esi
c0015814:	0f 85 72 01 00 00    	jne    c001598c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001581a:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0015820:	85 ed                	test   ebp,ebp
c0015822:	74 1c                	je     c0015840 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0015824:	83 ec 0c             	sub    esp,0xc
c0015827:	55                   	push   ebp
c0015828:	e8 47 82 ff ff       	call   c000da74 <EnvVarContainer::~EnvVarContainer()>
c001582d:	59                   	pop    ecx
c001582e:	5e                   	pop    esi
c001582f:	6a 0c                	push   0xc
c0015831:	55                   	push   ebp
c0015832:	e8 24 6e ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0015837:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001583a:	83 c4 10             	add    esp,0x10
c001583d:	89 f7                	mov    edi,esi
c001583f:	90                   	nop
c0015840:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015846:	85 c0                	test   eax,eax
c0015848:	0f 84 b2 00 00 00    	je     c0015900 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001584e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015851:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0015855:	31 c9                	xor    ecx,ecx
c0015857:	eb 17                	jmp    c0015870 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0015859:	8d 76 00             	lea    esi,[esi+0x0]
c001585c:	83 c1 01             	add    ecx,0x1
c001585f:	83 f9 10             	cmp    ecx,0x10
c0015862:	0f 84 98 00 00 00    	je     c0015900 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015868:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001586e:	66 90                	xchg   ax,ax
c0015870:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0015877:	d3 fa                	sar    edx,cl
c0015879:	80 e2 01             	and    dl,0x1
c001587c:	74 de                	je     c001585c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001587e:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0015881:	c1 e2 05             	shl    edx,0x5
c0015884:	29 ca                	sub    edx,ecx
c0015886:	01 d0                	add    eax,edx
c0015888:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001588e:	83 fd 07             	cmp    ebp,0x7
c0015891:	75 c9                	jne    c001585c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015893:	05 40 02 00 00       	add    eax,0x240
c0015898:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001589b:	83 fd ff             	cmp    ebp,0xffffffff
c001589e:	0f 8c f0 00 00 00    	jl     c0015994 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00158a4:	0f 84 ae 01 00 00    	je     c0015a58 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00158aa:	85 ed                	test   ebp,ebp
c00158ac:	0f 84 92 01 00 00    	je     c0015a44 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00158b2:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00158b4:	75 a6                	jne    c001585c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00158b6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00158ba:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00158c0:	01 d0                	add    eax,edx
c00158c2:	66 90                	xchg   ax,ax
c00158c4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00158c8:	83 ec 0c             	sub    esp,0xc
c00158cb:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00158d1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00158d4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00158da:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00158e1:	50                   	push   eax
c00158e2:	e8 05 fe ff ff       	call   c00156ec <unblockTask(ThreadControlBlock*)>
c00158e7:	83 c4 10             	add    esp,0x10
c00158ea:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00158ed:	89 f7                	mov    edi,esi
c00158ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00158f3:	83 c1 01             	add    ecx,0x1
c00158f6:	83 f9 10             	cmp    ecx,0x10
c00158f9:	0f 85 69 ff ff ff    	jne    c0015868 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00158ff:	90                   	nop
c0015900:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0015906:	85 c0                	test   eax,eax
c0015908:	74 62                	je     c001596c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001590a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0015910:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0015916:	74 54                	je     c001596c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015918:	83 ec 0c             	sub    esp,0xc
c001591b:	68 cc c6 02 c0       	push   0xc002c6cc
c0015920:	e8 73 a7 00 00       	call   c0020098 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015925:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c001592c:	89 c7                	mov    edi,eax
c001592e:	e8 49 a7 00 00       	call   c002007c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015933:	83 c4 10             	add    esp,0x10
c0015936:	84 c0                	test   al,al
c0015938:	0f 84 ce 00 00 00    	je     c0015a0c <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c001593e:	66 90                	xchg   ax,ax
c0015940:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015943:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015949:	85 d2                	test   edx,edx
c001594b:	74 0f                	je     c001595c <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c001594d:	8b 02                	mov    eax,DWORD PTR [edx]
c001594f:	83 ec 0c             	sub    esp,0xc
c0015952:	52                   	push   edx
c0015953:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015956:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015959:	83 c4 10             	add    esp,0x10
c001595c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0015966:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015969:	8d 76 00             	lea    esi,[esi+0x0]
c001596c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0015972:	85 db                	test   ebx,ebx
c0015974:	74 16                	je     c001598c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015976:	83 ec 0c             	sub    esp,0xc
c0015979:	53                   	push   ebx
c001597a:	e8 45 cb ff ff       	call   c00124c4 <VAS::~VAS()>
c001597f:	58                   	pop    eax
c0015980:	5a                   	pop    edx
c0015981:	6a 14                	push   0x14
c0015983:	53                   	push   ebx
c0015984:	e8 d2 6c ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0015989:	83 c4 10             	add    esp,0x10
c001598c:	83 c4 1c             	add    esp,0x1c
c001598f:	5b                   	pop    ebx
c0015990:	5e                   	pop    esi
c0015991:	5f                   	pop    edi
c0015992:	5d                   	pop    ebp
c0015993:	c3                   	ret    
c0015994:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015998:	83 ec 0c             	sub    esp,0xc
c001599b:	68 dc 2d 02 c0       	push   0xc0022ddc
c00159a0:	e8 71 92 ff ff       	call   c000ec16 <KePanic(char const*)>
c00159a5:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00159a8:	83 c4 10             	add    esp,0x10
c00159ab:	89 f7                	mov    edi,esi
c00159ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00159b1:	e9 a6 fe ff ff       	jmp    c001585c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00159b6:	66 90                	xchg   ax,ax
c00159b8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00159be:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00159c4:	75 1e                	jne    c00159e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00159c6:	83 ec 0c             	sub    esp,0xc
c00159c9:	68 44 2e 02 c0       	push   0xc0022e44
c00159ce:	e8 7b 15 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00159d3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00159da:	e8 cd fa ff ff       	call   c00154ac <blockTask(TaskState)>
c00159df:	83 c4 10             	add    esp,0x10
c00159e2:	66 90                	xchg   ax,ax
c00159e4:	83 ec 08             	sub    esp,0x8
c00159e7:	56                   	push   esi
c00159e8:	68 cc c6 02 c0       	push   0xc002c6cc
c00159ed:	e8 6a a7 00 00       	call   c002015c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00159f2:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c00159f9:	e8 9a a6 00 00       	call   c0020098 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00159fe:	83 c4 10             	add    esp,0x10
c0015a01:	39 f8                	cmp    eax,edi
c0015a03:	0f 84 37 ff ff ff    	je     c0015940 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0015a09:	8d 76 00             	lea    esi,[esi+0x0]
c0015a0c:	83 ec 0c             	sub    esp,0xc
c0015a0f:	68 cc c6 02 c0       	push   0xc002c6cc
c0015a14:	e8 7f a6 00 00       	call   c0020098 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015a19:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0015a20:	89 c6                	mov    esi,eax
c0015a22:	e8 79 a6 00 00       	call   c00200a0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015a27:	83 c4 10             	add    esp,0x10
c0015a2a:	39 f3                	cmp    ebx,esi
c0015a2c:	74 b6                	je     c00159e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015a2e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015a31:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015a34:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015a3a:	75 a8                	jne    c00159e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015a3c:	e9 77 ff ff ff       	jmp    c00159b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0015a41:	8d 76 00             	lea    esi,[esi+0x0]
c0015a44:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015a48:	83 ec 0c             	sub    esp,0xc
c0015a4b:	68 10 2e 02 c0       	push   0xc0022e10
c0015a50:	e9 4b ff ff ff       	jmp    c00159a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0015a55:	8d 76 00             	lea    esi,[esi+0x0]
c0015a58:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015a5c:	8b 36                	mov    esi,DWORD PTR [esi]
c0015a5e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015a61:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015a64:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0015a6a:	01 d7                	add    edi,edx
c0015a6c:	89 f8                	mov    eax,edi
c0015a6e:	e9 51 fe ff ff       	jmp    c00158c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0015a73:	90                   	nop

c0015a74 <cleanerTaskFunction(void*)>:
c0015a74:	53                   	push   ebx
c0015a75:	83 ec 08             	sub    esp,0x8
c0015a78:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015a80:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015a85:	85 c0                	test   eax,eax
c0015a87:	75 03                	jne    c0015a8c <cleanerTaskFunction(void*)+0x18>
c0015a89:	fb                   	sti    
c0015a8a:	66 90                	xchg   ax,ax
c0015a8c:	fa                   	cli    
c0015a8d:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015a92:	83 c0 01             	add    eax,0x1
c0015a95:	80 3d 94 c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c694,0x0
c0015a9c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015aa1:	0f 85 c9 00 00 00    	jne    c0015b70 <cleanerTaskFunction(void*)+0xfc>
c0015aa7:	83 ec 0c             	sub    esp,0xc
c0015aaa:	6a 02                	push   0x2
c0015aac:	e8 cf f9 ff ff       	call   c0015480 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015ab1:	83 c4 10             	add    esp,0x10
c0015ab4:	c6 05 94 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c694,0x0
c0015abb:	fa                   	cli    
c0015abc:	8b 0d b0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6b0
c0015ac2:	8b 1d ac c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6ac
c0015ac8:	83 c1 01             	add    ecx,0x1
c0015acb:	89 0d b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,ecx
c0015ad1:	83 c3 01             	add    ebx,0x1
c0015ad4:	89 1d ac c6 02 c0    	mov    DWORD PTR ds:0xc002c6ac,ebx
c0015ada:	fa                   	cli    
c0015adb:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015ae0:	83 c0 01             	add    eax,0x1
c0015ae3:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015ae8:	eb 2a                	jmp    c0015b14 <cleanerTaskFunction(void*)+0xa0>
c0015aea:	66 90                	xchg   ax,ax
c0015aec:	83 ec 0c             	sub    esp,0xc
c0015aef:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015af4:	e8 9f a5 00 00       	call   c0020098 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015af9:	c7 04 24 b4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6b4
c0015b00:	89 c3                	mov    ebx,eax
c0015b02:	e8 99 a5 00 00       	call   c00200a0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015b07:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b0a:	e8 91 fc ff ff       	call   c00157a0 <cleanupTerminatedTask(ThreadControlBlock*)>
c0015b0f:	83 c4 10             	add    esp,0x10
c0015b12:	66 90                	xchg   ax,ax
c0015b14:	83 ec 0c             	sub    esp,0xc
c0015b17:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015b1c:	e8 5b a5 00 00       	call   c002007c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015b21:	83 c4 10             	add    esp,0x10
c0015b24:	84 c0                	test   al,al
c0015b26:	74 c4                	je     c0015aec <cleanerTaskFunction(void*)+0x78>
c0015b28:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015b30:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c0015b36:	85 d2                	test   edx,edx
c0015b38:	75 02                	jne    c0015b3c <cleanerTaskFunction(void*)+0xc8>
c0015b3a:	fb                   	sti    
c0015b3b:	90                   	nop
c0015b3c:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0015b41:	83 e8 01             	sub    eax,0x1
c0015b44:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0015b49:	0f 85 29 ff ff ff    	jne    c0015a78 <cleanerTaskFunction(void*)+0x4>
c0015b4f:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0015b54:	85 c0                	test   eax,eax
c0015b56:	0f 84 1c ff ff ff    	je     c0015a78 <cleanerTaskFunction(void*)+0x4>
c0015b5c:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c0015b66:	e8 81 f8 ff ff       	call   c00153ec <schedule()>
c0015b6b:	e9 08 ff ff ff       	jmp    c0015a78 <cleanerTaskFunction(void*)+0x4>
c0015b70:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015b78:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015b7d:	85 c0                	test   eax,eax
c0015b7f:	0f 85 2f ff ff ff    	jne    c0015ab4 <cleanerTaskFunction(void*)+0x40>
c0015b85:	fb                   	sti    
c0015b86:	e9 29 ff ff ff       	jmp    c0015ab4 <cleanerTaskFunction(void*)+0x40>
c0015b8b:	90                   	nop

c0015b8c <terminateTask(int)>:
c0015b8c:	83 ec 14             	sub    esp,0x14
c0015b8f:	fa                   	cli    
c0015b90:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015b95:	83 c0 01             	add    eax,0x1
c0015b98:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015b9d:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0015ba2:	83 c0 01             	add    eax,0x1
c0015ba5:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0015baa:	fa                   	cli    
c0015bab:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015bb0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015bb4:	83 c0 01             	add    eax,0x1
c0015bb7:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015bbc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015bc1:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015bc4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015bc9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015bcc:	50                   	push   eax
c0015bcd:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015bd2:	e8 85 a5 00 00       	call   c002015c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015bd7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015bdc:	83 c4 10             	add    esp,0x10
c0015bdf:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015be6:	a1 90 c6 02 c0       	mov    eax,ds:0xc002c690
c0015beb:	85 c0                	test   eax,eax
c0015bed:	0f 84 81 00 00 00    	je     c0015c74 <terminateTask(int)+0xe8>
c0015bf3:	c6 05 94 c6 02 c0 01 	mov    BYTE PTR ds:0xc002c694,0x1
c0015bfa:	83 ec 0c             	sub    esp,0xc
c0015bfd:	50                   	push   eax
c0015bfe:	e8 e9 fa ff ff       	call   c00156ec <unblockTask(ThreadControlBlock*)>
c0015c03:	83 c4 10             	add    esp,0x10
c0015c06:	66 90                	xchg   ax,ax
c0015c08:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015c10:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015c15:	85 c0                	test   eax,eax
c0015c17:	75 03                	jne    c0015c1c <terminateTask(int)+0x90>
c0015c19:	fb                   	sti    
c0015c1a:	66 90                	xchg   ax,ax
c0015c1c:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0015c21:	83 e8 01             	sub    eax,0x1
c0015c24:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0015c29:	75 09                	jne    c0015c34 <terminateTask(int)+0xa8>
c0015c2b:	83 3d a8 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6a8,0x0
c0015c32:	75 54                	jne    c0015c88 <terminateTask(int)+0xfc>
c0015c34:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015c3c:	8b 0d b0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6b0
c0015c42:	85 c9                	test   ecx,ecx
c0015c44:	75 06                	jne    c0015c4c <terminateTask(int)+0xc0>
c0015c46:	66 90                	xchg   ax,ax
c0015c48:	fb                   	sti    
c0015c49:	8d 76 00             	lea    esi,[esi+0x0]
c0015c4c:	fa                   	cli    
c0015c4d:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015c52:	83 c0 01             	add    eax,0x1
c0015c55:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015c5a:	e8 8d f7 ff ff       	call   c00153ec <schedule()>
c0015c5f:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015c67:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c0015c6d:	85 d2                	test   edx,edx
c0015c6f:	75 db                	jne    c0015c4c <terminateTask(int)+0xc0>
c0015c71:	eb d5                	jmp    c0015c48 <terminateTask(int)+0xbc>
c0015c73:	90                   	nop
c0015c74:	83 ec 0c             	sub    esp,0xc
c0015c77:	68 5b 2d 02 c0       	push   0xc0022d5b
c0015c7c:	e8 cd 12 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015c81:	83 c4 10             	add    esp,0x10
c0015c84:	eb 82                	jmp    c0015c08 <terminateTask(int)+0x7c>
c0015c86:	66 90                	xchg   ax,ax
c0015c88:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c0015c92:	e8 55 f7 ff ff       	call   c00153ec <schedule()>
c0015c97:	eb 9b                	jmp    c0015c34 <terminateTask(int)+0xa8>
c0015c99:	8d 76 00             	lea    esi,[esi+0x0]

c0015c9c <Thr::terminateFromIRQ(int)>:
c0015c9c:	83 ec 18             	sub    esp,0x18
c0015c9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ca3:	50                   	push   eax
c0015ca4:	e8 e3 fe ff ff       	call   c0015b8c <terminateTask(int)>
c0015ca9:	8d 76 00             	lea    esi,[esi+0x0]

c0015cac <__static_initialization_and_destruction_0(int, int)>:
c0015cac:	83 ec 0c             	sub    esp,0xc
c0015caf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015cb4:	0f 85 8e 00 00 00    	jne    c0015d48 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015cba:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015cc2:	0f 85 80 00 00 00    	jne    c0015d48 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015cc8:	83 ec 0c             	sub    esp,0xc
c0015ccb:	68 cc c6 02 c0       	push   0xc002c6cc
c0015cd0:	e8 27 a9 00 00       	call   c00205fc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015cd5:	83 c4 10             	add    esp,0x10
c0015cd8:	83 ec 04             	sub    esp,0x4
c0015cdb:	68 dc 3d 02 c0       	push   0xc0023ddc
c0015ce0:	68 cc c6 02 c0       	push   0xc002c6cc
c0015ce5:	68 ac 05 02 c0       	push   0xc00205ac
c0015cea:	e8 1c 69 ff ff       	call   c000c60b <__cxa_atexit>
c0015cef:	83 c4 10             	add    esp,0x10
c0015cf2:	83 ec 0c             	sub    esp,0xc
c0015cf5:	68 c0 c6 02 c0       	push   0xc002c6c0
c0015cfa:	e8 fd a8 00 00       	call   c00205fc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015cff:	83 c4 10             	add    esp,0x10
c0015d02:	83 ec 04             	sub    esp,0x4
c0015d05:	68 dc 3d 02 c0       	push   0xc0023ddc
c0015d0a:	68 c0 c6 02 c0       	push   0xc002c6c0
c0015d0f:	68 ac 05 02 c0       	push   0xc00205ac
c0015d14:	e8 f2 68 ff ff       	call   c000c60b <__cxa_atexit>
c0015d19:	83 c4 10             	add    esp,0x10
c0015d1c:	83 ec 0c             	sub    esp,0xc
c0015d1f:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015d24:	e8 d3 a8 00 00       	call   c00205fc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015d29:	83 c4 10             	add    esp,0x10
c0015d2c:	83 ec 04             	sub    esp,0x4
c0015d2f:	68 dc 3d 02 c0       	push   0xc0023ddc
c0015d34:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015d39:	68 ac 05 02 c0       	push   0xc00205ac
c0015d3e:	e8 c8 68 ff ff       	call   c000c60b <__cxa_atexit>
c0015d43:	83 c4 10             	add    esp,0x10
c0015d46:	66 90                	xchg   ax,ax
c0015d48:	90                   	nop
c0015d49:	83 c4 0c             	add    esp,0xc
c0015d4c:	c3                   	ret    
c0015d4d:	8d 76 00             	lea    esi,[esi+0x0]

c0015d50 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015d50:	83 ec 0c             	sub    esp,0xc
c0015d53:	83 ec 08             	sub    esp,0x8
c0015d56:	68 ff ff 00 00       	push   0xffff
c0015d5b:	6a 01                	push   0x1
c0015d5d:	e8 4a ff ff ff       	call   c0015cac <__static_initialization_and_destruction_0(int, int)>
c0015d62:	83 c4 10             	add    esp,0x10
c0015d65:	83 c4 0c             	add    esp,0xc
c0015d68:	c3                   	ret    

c0015d69 <Vm::inbv(unsigned short)>:
c0015d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015d6d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015d72:	75 06                	jne    c0015d7a <Vm::inbv(unsigned short)+0x11>
c0015d74:	a0 10 c7 02 c0       	mov    al,ds:0xc002c710
c0015d79:	c3                   	ret    
c0015d7a:	ec                   	in     al,dx
c0015d7b:	c3                   	ret    

c0015d7c <Vm::outbv(unsigned short, unsigned char)>:
c0015d7c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015d80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d84:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015d89:	75 25                	jne    c0015db0 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015d8b:	8b 0d 10 c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c710
c0015d91:	88 81 20 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38e0],al
c0015d97:	8d 51 01             	lea    edx,[ecx+0x1]
c0015d9a:	89 15 10 c7 02 c0    	mov    DWORD PTR ds:0xc002c710,edx
c0015da0:	83 fa 20             	cmp    edx,0x20
c0015da3:	75 0c                	jne    c0015db1 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015da5:	c7 05 10 c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x1f
c0015daf:	c3                   	ret    
c0015db0:	ee                   	out    dx,al
c0015db1:	c3                   	ret    

c0015db2 <Vm::realToLinear(unsigned short, unsigned short)>:
c0015db2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015db7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015dbc:	c1 e0 04             	shl    eax,0x4
c0015dbf:	01 d0                	add    eax,edx
c0015dc1:	c3                   	ret    

c0015dc2 <Vm::getSegment(unsigned int)>:
c0015dc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dc6:	c1 e8 10             	shr    eax,0x10
c0015dc9:	c3                   	ret    

c0015dca <Vm::getOffset(unsigned int)>:
c0015dca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dce:	c3                   	ret    

c0015dcf <Vm::mainloop2()>:
c0015dcf:	83 ec 18             	sub    esp,0x18
c0015dd2:	fa                   	cli    
c0015dd3:	6a 02                	push   0x2
c0015dd5:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015ddb:	c6 05 09 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c709,0x1
c0015de2:	e8 99 f6 ff ff       	call   c0015480 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015de7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015dec:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015df0:	52                   	push   edx
c0015df1:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015df5:	52                   	push   edx
c0015df6:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015dfa:	52                   	push   edx
c0015dfb:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015dff:	50                   	push   eax
c0015e00:	e8 0a a4 fe ff       	call   c000020f <goToVM86>
c0015e05:	83 c4 2c             	add    esp,0x2c
c0015e08:	c3                   	ret    

c0015e09 <Vm::mainVm8086Loop(void*)>:
c0015e09:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0015e10:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0015e17:	75 01                	jne    c0015e1a <Vm::mainVm8086Loop(void*)+0x11>
c0015e19:	fb                   	sti    
c0015e1a:	eb b3                	jmp    c0015dcf <Vm::mainloop2()>

c0015e1c <Vm::mainloop3(unsigned long)>:
c0015e1c:	83 ec 18             	sub    esp,0x18
c0015e1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e23:	fa                   	cli    
c0015e24:	6a 02                	push   0x2
c0015e26:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015e2c:	c6 05 08 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c708,0x1
c0015e33:	a3 04 c7 02 c0       	mov    ds:0xc002c704,eax
c0015e38:	e8 43 f6 ff ff       	call   c0015480 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015e3d:	83 c4 1c             	add    esp,0x1c
c0015e40:	eb 8d                	jmp    c0015dcf <Vm::mainloop2()>

c0015e42 <Vm::initialise8086()>:
c0015e42:	83 ec 0c             	sub    esp,0xc
c0015e45:	68 80 00 00 00       	push   0x80
c0015e4a:	6a 00                	push   0x0
c0015e4c:	68 09 5e 01 c0       	push   0xc0015e09
c0015e51:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0015e57:	e8 44 f3 ff ff       	call   c00151a0 <Process::createThread(void (*)(void*), void*, int)>
c0015e5c:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015e63:	68 10 01 00 00       	push   0x110
c0015e68:	6a 00                	push   0x0
c0015e6a:	6a 00                	push   0x0
c0015e6c:	a3 0c c7 02 c0       	mov    ds:0xc002c70c,eax
c0015e71:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0015e76:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015e7c:	e8 a5 c9 ff ff       	call   c0012826 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015e81:	83 c4 2c             	add    esp,0x2c
c0015e84:	c3                   	ret    

c0015e85 <Vm::resetConventionalMemory8086()>:
c0015e85:	c3                   	ret    

c0015e86 <Vm::finish8086()>:
c0015e86:	53                   	push   ebx
c0015e87:	83 ec 08             	sub    esp,0x8
c0015e8a:	fa                   	cli    
c0015e8b:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015e91:	80 3d 08 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c708,0x0
c0015e98:	75 18                	jne    c0015eb2 <Vm::finish8086()+0x2c>
c0015e9a:	e8 4d f5 ff ff       	call   c00153ec <schedule()>
c0015e9f:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0015ea6:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0015ead:	75 db                	jne    c0015e8a <Vm::finish8086()+0x4>
c0015eaf:	fb                   	sti    
c0015eb0:	eb d8                	jmp    c0015e8a <Vm::finish8086()+0x4>
c0015eb2:	c6 05 08 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c708,0x0
c0015eb9:	83 ec 0c             	sub    esp,0xc
c0015ebc:	8b 1d 04 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c704
c0015ec2:	ff 35 0c c7 02 c0    	push   DWORD PTR ds:0xc002c70c
c0015ec8:	e8 1f f8 ff ff       	call   c00156ec <unblockTask(ThreadControlBlock*)>
c0015ecd:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0015ed4:	83 c4 10             	add    esp,0x10
c0015ed7:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0015ede:	75 01                	jne    c0015ee1 <Vm::finish8086()+0x5b>
c0015ee0:	fb                   	sti    
c0015ee1:	83 c4 08             	add    esp,0x8
c0015ee4:	89 d8                	mov    eax,ebx
c0015ee6:	5b                   	pop    ebx
c0015ee7:	c3                   	ret    

c0015ee8 <Vm::getOutput8086(unsigned char*)>:
c0015ee8:	57                   	push   edi
c0015ee9:	8b 0d 10 c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c710
c0015eef:	56                   	push   esi
c0015ef0:	be 20 c7 02 c0       	mov    esi,0xc002c720
c0015ef5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015ef9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015efb:	5e                   	pop    esi
c0015efc:	a1 10 c7 02 c0       	mov    eax,ds:0xc002c710
c0015f01:	c7 05 10 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x0
c0015f0b:	5f                   	pop    edi
c0015f0c:	c3                   	ret    

c0015f0d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015f0d:	55                   	push   ebp
c0015f0e:	57                   	push   edi
c0015f0f:	56                   	push   esi
c0015f10:	53                   	push   ebx
c0015f11:	83 ec 2c             	sub    esp,0x2c
c0015f14:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015f18:	80 3d 00 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c700,0x0
c0015f1f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015f23:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0015f27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015f2b:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0015f2f:	75 5d                	jne    c0015f8e <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0015f31:	83 ec 0c             	sub    esp,0xc
c0015f34:	68 14 01 00 00       	push   0x114
c0015f39:	e8 92 89 ff ff       	call   c000e8d0 <malloc>
c0015f3e:	83 c4 0c             	add    esp,0xc
c0015f41:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0015f47:	68 6c 2e 02 c0       	push   0xc0022e6c
c0015f4c:	50                   	push   eax
c0015f4d:	89 c7                	mov    edi,eax
c0015f4f:	e8 b8 21 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0015f54:	58                   	pop    eax
c0015f55:	5a                   	pop    edx
c0015f56:	6a 12                	push   0x12
c0015f58:	57                   	push   edi
c0015f59:	e8 cc 21 ff ff       	call   c000812a <File::open(FileOpenMode)>
c0015f5e:	8b 07                	mov    eax,DWORD PTR [edi]
c0015f60:	59                   	pop    ecx
c0015f61:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0015f65:	51                   	push   ecx
c0015f66:	6a 00                	push   0x0
c0015f68:	6a 00                	push   0x0
c0015f6a:	68 00 00 11 00       	push   0x110000
c0015f6f:	57                   	push   edi
c0015f70:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015f73:	83 c4 14             	add    esp,0x14
c0015f76:	57                   	push   edi
c0015f77:	e8 0c 22 ff ff       	call   c0008188 <File::close()>
c0015f7c:	8b 07                	mov    eax,DWORD PTR [edi]
c0015f7e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015f81:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f84:	83 c4 10             	add    esp,0x10
c0015f87:	c6 05 00 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c700,0x1
c0015f8e:	fa                   	cli    
c0015f8f:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015f95:	80 3d 09 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c709,0x0
c0015f9c:	75 18                	jne    c0015fb6 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa9>
c0015f9e:	e8 49 f4 ff ff       	call   c00153ec <schedule()>
c0015fa3:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0015faa:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0015fb1:	75 db                	jne    c0015f8e <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0015fb3:	fb                   	sti    
c0015fb4:	eb d8                	jmp    c0015f8e <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0015fb6:	c7 05 10 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x0
c0015fc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015fc4:	a1 0c c7 02 c0       	mov    eax,ds:0xc002c70c
c0015fc9:	66 89 70 55          	mov    WORD PTR [eax+0x55],si
c0015fcd:	0f b7 f6             	movzx  esi,si
c0015fd0:	66 89 58 57          	mov    WORD PTR [eax+0x57],bx
c0015fd4:	0f b7 db             	movzx  ebx,bx
c0015fd7:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015fdb:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0015fdf:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015fe3:	50                   	push   eax
c0015fe4:	6a 20                	push   0x20
c0015fe6:	6a 00                	push   0x0
c0015fe8:	68 20 c7 02 c0       	push   0xc002c720
c0015fed:	e8 fe a4 fe ff       	call   c00004f0 <memset>
c0015ff2:	5a                   	pop    edx
c0015ff3:	59                   	pop    ecx
c0015ff4:	56                   	push   esi
c0015ff5:	53                   	push   ebx
c0015ff6:	e8 b7 fd ff ff       	call   c0015db2 <Vm::realToLinear(unsigned short, unsigned short)>
c0015ffb:	83 c4 10             	add    esp,0x10
c0015ffe:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016002:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0016006:	89 c7                	mov    edi,eax
c0016008:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001600a:	c6 05 09 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c709,0x0
c0016011:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0016018:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c001601f:	75 01                	jne    c0016022 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x115>
c0016021:	fb                   	sti    
c0016022:	83 ec 0c             	sub    esp,0xc
c0016025:	ff 35 0c c7 02 c0    	push   DWORD PTR ds:0xc002c70c
c001602b:	e8 bc f6 ff ff       	call   c00156ec <unblockTask(ThreadControlBlock*)>
c0016030:	83 c4 3c             	add    esp,0x3c
c0016033:	b0 01                	mov    al,0x1
c0016035:	5b                   	pop    ebx
c0016036:	5e                   	pop    esi
c0016037:	5f                   	pop    edi
c0016038:	5d                   	pop    ebp
c0016039:	c3                   	ret    

c001603a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001603a:	55                   	push   ebp
c001603b:	57                   	push   edi
c001603c:	56                   	push   esi
c001603d:	53                   	push   ebx
c001603e:	83 ec 2c             	sub    esp,0x2c
c0016041:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016045:	80 3d 00 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c700,0x0
c001604c:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016050:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016054:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016058:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001605c:	75 5d                	jne    c00160bb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c001605e:	83 ec 0c             	sub    esp,0xc
c0016061:	68 14 01 00 00       	push   0x114
c0016066:	e8 65 88 ff ff       	call   c000e8d0 <malloc>
c001606b:	83 c4 0c             	add    esp,0xc
c001606e:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0016074:	68 6c 2e 02 c0       	push   0xc0022e6c
c0016079:	50                   	push   eax
c001607a:	89 c3                	mov    ebx,eax
c001607c:	e8 8b 20 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0016081:	58                   	pop    eax
c0016082:	5a                   	pop    edx
c0016083:	6a 12                	push   0x12
c0016085:	53                   	push   ebx
c0016086:	e8 9f 20 ff ff       	call   c000812a <File::open(FileOpenMode)>
c001608b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001608d:	59                   	pop    ecx
c001608e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016092:	52                   	push   edx
c0016093:	6a 00                	push   0x0
c0016095:	6a 00                	push   0x0
c0016097:	68 00 00 11 00       	push   0x110000
c001609c:	53                   	push   ebx
c001609d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00160a0:	83 c4 14             	add    esp,0x14
c00160a3:	53                   	push   ebx
c00160a4:	e8 df 20 ff ff       	call   c0008188 <File::close()>
c00160a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00160ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160ae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00160b1:	83 c4 10             	add    esp,0x10
c00160b4:	c6 05 00 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c700,0x1
c00160bb:	50                   	push   eax
c00160bc:	50                   	push   eax
c00160bd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00160c1:	68 87 2e 02 c0       	push   0xc0022e87
c00160c6:	e8 83 0e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00160cb:	83 c4 10             	add    esp,0x10
c00160ce:	fa                   	cli    
c00160cf:	8a 1d 09 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c709
c00160d5:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c00160db:	84 db                	test   bl,bl
c00160dd:	75 18                	jne    c00160f7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xbd>
c00160df:	e8 08 f3 ff ff       	call   c00153ec <schedule()>
c00160e4:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c00160eb:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c00160f2:	75 da                	jne    c00160ce <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c00160f4:	fb                   	sti    
c00160f5:	eb d7                	jmp    c00160ce <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c00160f7:	c7 05 10 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x0
c0016101:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016105:	a1 0c c7 02 c0       	mov    eax,ds:0xc002c70c
c001610a:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c001610e:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016112:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016116:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001611a:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001611e:	50                   	push   eax
c001611f:	6a 20                	push   0x20
c0016121:	6a 00                	push   0x0
c0016123:	68 20 c7 02 c0       	push   0xc002c720
c0016128:	e8 c3 a3 fe ff       	call   c00004f0 <memset>
c001612d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016134:	e8 97 87 ff ff       	call   c000e8d0 <malloc>
c0016139:	83 c4 0c             	add    esp,0xc
c001613c:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0016142:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016146:	89 c5                	mov    ebp,eax
c0016148:	50                   	push   eax
c0016149:	e8 be 1f ff ff       	call   c000810c <File::File(char const*, Process*)>
c001614e:	83 c4 10             	add    esp,0x10
c0016151:	85 ed                	test   ebp,ebp
c0016153:	75 0a                	jne    c001615f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0016155:	83 ec 0c             	sub    esp,0xc
c0016158:	68 a9 2e 02 c0       	push   0xc0022ea9
c001615d:	eb 2b                	jmp    c001618a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x150>
c001615f:	50                   	push   eax
c0016160:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016164:	50                   	push   eax
c0016165:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016169:	50                   	push   eax
c001616a:	55                   	push   ebp
c001616b:	e8 bc 22 ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c0016170:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016174:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016178:	83 c4 10             	add    esp,0x10
c001617b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016180:	74 28                	je     c00161aa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x170>
c0016182:	83 ec 0c             	sub    esp,0xc
c0016185:	68 bd 2e 02 c0       	push   0xc0022ebd
c001618a:	e8 87 8a ff ff       	call   c000ec16 <KePanic(char const*)>
c001618f:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0016196:	83 c4 10             	add    esp,0x10
c0016199:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c00161a0:	75 01                	jne    c00161a3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x169>
c00161a2:	fb                   	sti    
c00161a3:	31 db                	xor    ebx,ebx
c00161a5:	e9 92 00 00 00       	jmp    c001623c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x202>
c00161aa:	51                   	push   ecx
c00161ab:	51                   	push   ecx
c00161ac:	6a 01                	push   0x1
c00161ae:	55                   	push   ebp
c00161af:	e8 76 1f ff ff       	call   c000812a <File::open(FileOpenMode)>
c00161b4:	83 c4 10             	add    esp,0x10
c00161b7:	85 c0                	test   eax,eax
c00161b9:	74 27                	je     c00161e2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1a8>
c00161bb:	83 ec 0c             	sub    esp,0xc
c00161be:	68 d6 2e 02 c0       	push   0xc0022ed6
c00161c3:	e8 4e 8a ff ff       	call   c000ec16 <KePanic(char const*)>
c00161c8:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c00161cf:	83 c4 10             	add    esp,0x10
c00161d2:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c00161d9:	75 c8                	jne    c00161a3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x169>
c00161db:	fb                   	sti    
c00161dc:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00161e0:	eb 5a                	jmp    c001623c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x202>
c00161e2:	50                   	push   eax
c00161e3:	0f b7 ff             	movzx  edi,di
c00161e6:	50                   	push   eax
c00161e7:	0f b7 f6             	movzx  esi,si
c00161ea:	57                   	push   edi
c00161eb:	56                   	push   esi
c00161ec:	e8 c1 fb ff ff       	call   c0015db2 <Vm::realToLinear(unsigned short, unsigned short)>
c00161f1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00161f4:	5a                   	pop    edx
c00161f5:	8d 74 24 20          	lea    esi,[esp+0x20]
c00161f9:	56                   	push   esi
c00161fa:	50                   	push   eax
c00161fb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00161ff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016203:	55                   	push   ebp
c0016204:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016207:	83 c4 14             	add    esp,0x14
c001620a:	55                   	push   ebp
c001620b:	e8 78 1f ff ff       	call   c0008188 <File::close()>
c0016210:	c6 05 09 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c709,0x0
c0016217:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001621e:	83 c4 10             	add    esp,0x10
c0016221:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0016228:	75 01                	jne    c001622b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1f1>
c001622a:	fb                   	sti    
c001622b:	83 ec 0c             	sub    esp,0xc
c001622e:	ff 35 0c c7 02 c0    	push   DWORD PTR ds:0xc002c70c
c0016234:	e8 b3 f4 ff ff       	call   c00156ec <unblockTask(ThreadControlBlock*)>
c0016239:	83 c4 10             	add    esp,0x10
c001623c:	83 c4 2c             	add    esp,0x2c
c001623f:	88 d8                	mov    al,bl
c0016241:	5b                   	pop    ebx
c0016242:	5e                   	pop    esi
c0016243:	5f                   	pop    edi
c0016244:	5d                   	pop    ebp
c0016245:	c3                   	ret    

c0016246 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016246:	57                   	push   edi
c0016247:	56                   	push   esi
c0016248:	53                   	push   ebx
c0016249:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001624d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016251:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016255:	83 e8 06             	sub    eax,0x6
c0016258:	0f b7 c0             	movzx  eax,ax
c001625b:	50                   	push   eax
c001625c:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016261:	50                   	push   eax
c0016262:	e8 4b fb ff ff       	call   c0015db2 <Vm::realToLinear(unsigned short, unsigned short)>
c0016267:	5a                   	pop    edx
c0016268:	59                   	pop    ecx
c0016269:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c001626c:	8d 51 fa             	lea    edx,[ecx-0x6]
c001626f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016272:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016278:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c001627b:	8d 51 02             	lea    edx,[ecx+0x2]
c001627e:	66 89 10             	mov    WORD PTR [eax],dx
c0016281:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016285:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016289:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c001628d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016290:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016294:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001629a:	89 f1                	mov    ecx,esi
c001629c:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c00162a0:	89 f2                	mov    edx,esi
c00162a2:	0f b6 d6             	movzx  edx,dh
c00162a5:	0f b6 f1             	movzx  esi,cl
c00162a8:	74 0a                	je     c00162b4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c00162aa:	c1 e2 08             	shl    edx,0x8
c00162ad:	09 f2                	or     edx,esi
c00162af:	80 ce 02             	or     dh,0x2
c00162b2:	eb 08                	jmp    c00162bc <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c00162b4:	c1 e2 08             	shl    edx,0x8
c00162b7:	09 f2                	or     edx,esi
c00162b9:	80 e6 fd             	and    dh,0xfd
c00162bc:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00162c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162c5:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00162c9:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c00162d1:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c00162d4:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c00162dc:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00162df:	5b                   	pop    ebx
c00162e0:	5e                   	pop    esi
c00162e1:	5f                   	pop    edi
c00162e2:	c3                   	ret    

c00162e3 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00162e3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00162e8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00162ed:	c1 e0 04             	shl    eax,0x4
c00162f0:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00162f3:	c3                   	ret    

c00162f4 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00162f4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00162f9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00162fe:	c1 e0 04             	shl    eax,0x4
c0016301:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016305:	c3                   	ret    

c0016306 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016306:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001630b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016310:	c1 e0 04             	shl    eax,0x4
c0016313:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016316:	c3                   	ret    

c0016317 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016317:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001631c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016321:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016325:	c1 e0 04             	shl    eax,0x4
c0016328:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001632b:	c3                   	ret    

c001632c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001632c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016331:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016336:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001633a:	c1 e0 04             	shl    eax,0x4
c001633d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016341:	c3                   	ret    

c0016342 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016342:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016347:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001634c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016350:	c1 e0 04             	shl    eax,0x4
c0016353:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016356:	c3                   	ret    

c0016357 <Vm::faultHandler(regs*)>:
c0016357:	55                   	push   ebp
c0016358:	57                   	push   edi
c0016359:	56                   	push   esi
c001635a:	53                   	push   ebx
c001635b:	83 ec 2c             	sub    esp,0x2c
c001635e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016362:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016365:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016369:	0f b7 f8             	movzx  edi,ax
c001636c:	0f b7 c0             	movzx  eax,ax
c001636f:	52                   	push   edx
c0016370:	50                   	push   eax
c0016371:	e8 3c fa ff ff       	call   c0015db2 <Vm::realToLinear(unsigned short, unsigned short)>
c0016376:	5a                   	pop    edx
c0016377:	59                   	pop    ecx
c0016378:	89 c1                	mov    ecx,eax
c001637a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001637d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016381:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016386:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001638a:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c001638d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016391:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016396:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001639a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001639e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00163a2:	e8 0b fa ff ff       	call   c0015db2 <Vm::realToLinear(unsigned short, unsigned short)>
c00163a7:	5e                   	pop    esi
c00163a8:	be 06 00 00 00       	mov    esi,0x6
c00163ad:	5d                   	pop    ebp
c00163ae:	31 ed                	xor    ebp,ebp
c00163b0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00163b5:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00163b8:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c00163be:	0f 84 74 02 00 00    	je     c0016638 <Vm::faultHandler(regs*)+0x2e1>
c00163c4:	0f 87 94 00 00 00    	ja     c001645e <Vm::faultHandler(regs*)+0x107>
c00163ca:	83 fa 66             	cmp    edx,0x66
c00163cd:	0f 84 e2 01 00 00    	je     c00165b5 <Vm::faultHandler(regs*)+0x25e>
c00163d3:	77 47                	ja     c001641c <Vm::faultHandler(regs*)+0xc5>
c00163d5:	83 fa 36             	cmp    edx,0x36
c00163d8:	0f 84 ca 01 00 00    	je     c00165a8 <Vm::faultHandler(regs*)+0x251>
c00163de:	77 1a                	ja     c00163fa <Vm::faultHandler(regs*)+0xa3>
c00163e0:	83 fa 26             	cmp    edx,0x26
c00163e3:	0f 84 98 01 00 00    	je     c0016581 <Vm::faultHandler(regs*)+0x22a>
c00163e9:	83 fa 2e             	cmp    edx,0x2e
c00163ec:	0f 85 27 06 00 00    	jne    c0016a19 <Vm::faultHandler(regs*)+0x6c2>
c00163f2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00163f5:	31 f6                	xor    esi,esi
c00163f7:	41                   	inc    ecx
c00163f8:	eb bb                	jmp    c00163b5 <Vm::faultHandler(regs*)+0x5e>
c00163fa:	83 fa 64             	cmp    edx,0x64
c00163fd:	0f 84 8b 01 00 00    	je     c001658e <Vm::faultHandler(regs*)+0x237>
c0016403:	0f 87 92 01 00 00    	ja     c001659b <Vm::faultHandler(regs*)+0x244>
c0016409:	83 fa 3e             	cmp    edx,0x3e
c001640c:	0f 85 07 06 00 00    	jne    c0016a19 <Vm::faultHandler(regs*)+0x6c2>
c0016412:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016415:	be 01 00 00 00       	mov    esi,0x1
c001641a:	eb db                	jmp    c00163f7 <Vm::faultHandler(regs*)+0xa0>
c001641c:	83 fa 6d             	cmp    edx,0x6d
c001641f:	0f 84 34 03 00 00    	je     c0016759 <Vm::faultHandler(regs*)+0x402>
c0016425:	77 17                	ja     c001643e <Vm::faultHandler(regs*)+0xe7>
c0016427:	83 fa 67             	cmp    edx,0x67
c001642a:	0f 84 92 01 00 00    	je     c00165c2 <Vm::faultHandler(regs*)+0x26b>
c0016430:	83 fa 6c             	cmp    edx,0x6c
c0016433:	0f 84 b1 02 00 00    	je     c00166ea <Vm::faultHandler(regs*)+0x393>
c0016439:	e9 db 05 00 00       	jmp    c0016a19 <Vm::faultHandler(regs*)+0x6c2>
c001643e:	83 fa 6f             	cmp    edx,0x6f
c0016441:	0f 84 40 04 00 00    	je     c0016887 <Vm::faultHandler(regs*)+0x530>
c0016447:	0f 82 a2 03 00 00    	jb     c00167ef <Vm::faultHandler(regs*)+0x498>
c001644d:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016453:	0f 84 76 01 00 00    	je     c00165cf <Vm::faultHandler(regs*)+0x278>
c0016459:	e9 bb 05 00 00       	jmp    c0016a19 <Vm::faultHandler(regs*)+0x6c2>
c001645e:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016464:	0f 84 57 05 00 00    	je     c00169c1 <Vm::faultHandler(regs*)+0x66a>
c001646a:	0f 87 a9 00 00 00    	ja     c0016519 <Vm::faultHandler(regs*)+0x1c2>
c0016470:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016476:	0f 84 d6 04 00 00    	je     c0016952 <Vm::faultHandler(regs*)+0x5fb>
c001647c:	77 78                	ja     c00164f6 <Vm::faultHandler(regs*)+0x19f>
c001647e:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016484:	0f 84 0e 02 00 00    	je     c0016698 <Vm::faultHandler(regs*)+0x341>
c001648a:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016490:	0f 85 83 05 00 00    	jne    c0016a19 <Vm::faultHandler(regs*)+0x6c2>
c0016496:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001649a:	89 d1                	mov    ecx,edx
c001649c:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c001649f:	c1 e1 08             	shl    ecx,0x8
c00164a2:	09 ca                	or     edx,ecx
c00164a4:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00164a7:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00164ab:	89 d1                	mov    ecx,edx
c00164ad:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00164b1:	c1 e1 08             	shl    ecx,0x8
c00164b4:	09 ca                	or     edx,ecx
c00164b6:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00164b9:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00164bd:	89 d1                	mov    ecx,edx
c00164bf:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00164c3:	c1 e1 08             	shl    ecx,0x8
c00164c6:	09 ca                	or     edx,ecx
c00164c8:	81 ca 00 02 02 00    	or     edx,0x20200
c00164ce:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00164d1:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00164d5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00164db:	d1 e8                	shr    eax,1
c00164dd:	83 e0 01             	and    eax,0x1
c00164e0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00164e3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00164e6:	83 c0 06             	add    eax,0x6
c00164e9:	25 ff ff 00 00       	and    eax,0xffff
c00164ee:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00164f1:	e9 1f 05 00 00       	jmp    c0016a15 <Vm::faultHandler(regs*)+0x6be>
c00164f6:	81 fa e6 00 00 00    	cmp    edx,0xe6
c00164fc:	0f 84 95 04 00 00    	je     c0016997 <Vm::faultHandler(regs*)+0x640>
c0016502:	0f 82 66 04 00 00    	jb     c001696e <Vm::faultHandler(regs*)+0x617>
c0016508:	81 fa e7 00 00 00    	cmp    edx,0xe7
c001650e:	0f 84 9a 04 00 00    	je     c00169ae <Vm::faultHandler(regs*)+0x657>
c0016514:	e9 00 05 00 00       	jmp    c0016a19 <Vm::faultHandler(regs*)+0x6c2>
c0016519:	81 fa ef 00 00 00    	cmp    edx,0xef
c001651f:	0f 84 dd 04 00 00    	je     c0016a02 <Vm::faultHandler(regs*)+0x6ab>
c0016525:	77 2e                	ja     c0016555 <Vm::faultHandler(regs*)+0x1fe>
c0016527:	81 fa ed 00 00 00    	cmp    edx,0xed
c001652d:	0f 84 aa 04 00 00    	je     c00169dd <Vm::faultHandler(regs*)+0x686>
c0016533:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016539:	0f 85 da 04 00 00    	jne    c0016a19 <Vm::faultHandler(regs*)+0x6c2>
c001653f:	50                   	push   eax
c0016540:	50                   	push   eax
c0016541:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016545:	50                   	push   eax
c0016546:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001654a:	50                   	push   eax
c001654b:	e8 2c f8 ff ff       	call   c0015d7c <Vm::outbv(unsigned short, unsigned char)>
c0016550:	e9 a5 04 00 00       	jmp    c00169fa <Vm::faultHandler(regs*)+0x6a3>
c0016555:	81 fa fa 00 00 00    	cmp    edx,0xfa
c001655b:	0f 84 6d 01 00 00    	je     c00166ce <Vm::faultHandler(regs*)+0x377>
c0016561:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016567:	0f 84 6f 01 00 00    	je     c00166dc <Vm::faultHandler(regs*)+0x385>
c001656d:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016573:	0f 85 a0 04 00 00    	jne    c0016a19 <Vm::faultHandler(regs*)+0x6c2>
c0016579:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001657c:	e9 76 fe ff ff       	jmp    c00163f7 <Vm::faultHandler(regs*)+0xa0>
c0016581:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016584:	be 02 00 00 00       	mov    esi,0x2
c0016589:	e9 69 fe ff ff       	jmp    c00163f7 <Vm::faultHandler(regs*)+0xa0>
c001658e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016591:	be 03 00 00 00       	mov    esi,0x3
c0016596:	e9 5c fe ff ff       	jmp    c00163f7 <Vm::faultHandler(regs*)+0xa0>
c001659b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001659e:	be 04 00 00 00       	mov    esi,0x4
c00165a3:	e9 4f fe ff ff       	jmp    c00163f7 <Vm::faultHandler(regs*)+0xa0>
c00165a8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00165ab:	be 05 00 00 00       	mov    esi,0x5
c00165b0:	e9 42 fe ff ff       	jmp    c00163f7 <Vm::faultHandler(regs*)+0xa0>
c00165b5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00165b8:	bd 01 00 00 00       	mov    ebp,0x1
c00165bd:	e9 35 fe ff ff       	jmp    c00163f7 <Vm::faultHandler(regs*)+0xa0>
c00165c2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00165c5:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00165ca:	e9 28 fe ff ff       	jmp    c00163f7 <Vm::faultHandler(regs*)+0xa0>
c00165cf:	83 e5 01             	and    ebp,0x1
c00165d2:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00165d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00165d9:	74 30                	je     c001660b <Vm::faultHandler(regs*)+0x2b4>
c00165db:	83 e9 04             	sub    ecx,0x4
c00165de:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00165e4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00165ea:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00165ed:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00165f0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00165f6:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00165fa:	0f 84 12 04 00 00    	je     c0016a12 <Vm::faultHandler(regs*)+0x6bb>
c0016600:	80 ce 02             	or     dh,0x2
c0016603:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016606:	e9 07 04 00 00       	jmp    c0016a12 <Vm::faultHandler(regs*)+0x6bb>
c001660b:	83 e9 02             	sub    ecx,0x2
c001660e:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016614:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016617:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001661b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016621:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016625:	74 05                	je     c001662c <Vm::faultHandler(regs*)+0x2d5>
c0016627:	80 ce 02             	or     dh,0x2
c001662a:	eb 03                	jmp    c001662f <Vm::faultHandler(regs*)+0x2d8>
c001662c:	80 e6 fd             	and    dh,0xfd
c001662f:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016633:	e9 da 03 00 00       	jmp    c0016a12 <Vm::faultHandler(regs*)+0x6bb>
c0016638:	83 e5 01             	and    ebp,0x1
c001663b:	74 2a                	je     c0016667 <Vm::faultHandler(regs*)+0x310>
c001663d:	8b 10                	mov    edx,DWORD PTR [eax]
c001663f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016645:	81 ca 00 02 02 00    	or     edx,0x20200
c001664b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001664e:	8b 00                	mov    eax,DWORD PTR [eax]
c0016650:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016656:	c1 e8 09             	shr    eax,0x9
c0016659:	83 e0 01             	and    eax,0x1
c001665c:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001665f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016662:	83 c0 04             	add    eax,0x4
c0016665:	eb 24                	jmp    c001668b <Vm::faultHandler(regs*)+0x334>
c0016667:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001666a:	81 ca 00 02 02 00    	or     edx,0x20200
c0016670:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016673:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016676:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001667c:	c1 e8 09             	shr    eax,0x9
c001667f:	83 e0 01             	and    eax,0x1
c0016682:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016685:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016688:	83 c0 02             	add    eax,0x2
c001668b:	25 ff ff 00 00       	and    eax,0xffff
c0016690:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016693:	e9 7a 03 00 00       	jmp    c0016a12 <Vm::faultHandler(regs*)+0x6bb>
c0016698:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001669c:	3d ee 00 00 00       	cmp    eax,0xee
c00166a1:	75 10                	jne    c00166b3 <Vm::faultHandler(regs*)+0x35c>
c00166a3:	83 ec 0c             	sub    esp,0xc
c00166a6:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00166a9:	e8 6e f7 ff ff       	call   c0015e1c <Vm::mainloop3(unsigned long)>
c00166ae:	e9 4a 03 00 00       	jmp    c00169fd <Vm::faultHandler(regs*)+0x6a6>
c00166b3:	83 ec 0c             	sub    esp,0xc
c00166b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00166ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00166be:	51                   	push   ecx
c00166bf:	50                   	push   eax
c00166c0:	53                   	push   ebx
c00166c1:	e8 80 fb ff ff       	call   c0016246 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00166c6:	83 c4 20             	add    esp,0x20
c00166c9:	e9 47 03 00 00       	jmp    c0016a15 <Vm::faultHandler(regs*)+0x6be>
c00166ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166d3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00166d7:	e9 36 03 00 00       	jmp    c0016a12 <Vm::faultHandler(regs*)+0x6bb>
c00166dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166e1:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00166e5:	e9 28 03 00 00       	jmp    c0016a12 <Vm::faultHandler(regs*)+0x6bb>
c00166ea:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00166ef:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00166f2:	74 2b                	je     c001671f <Vm::faultHandler(regs*)+0x3c8>
c00166f4:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00166fb:	76 22                	jbe    c001671f <Vm::faultHandler(regs*)+0x3c8>
c00166fd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016701:	50                   	push   eax
c0016702:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016706:	50                   	push   eax
c0016707:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001670b:	50                   	push   eax
c001670c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016710:	50                   	push   eax
c0016711:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016715:	50                   	push   eax
c0016716:	6a 6c                	push   0x6c
c0016718:	6a 6c                	push   0x6c
c001671a:	e9 c0 01 00 00       	jmp    c00168df <Vm::faultHandler(regs*)+0x588>
c001671f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016723:	83 ec 0c             	sub    esp,0xc
c0016726:	0f b7 f6             	movzx  esi,si
c0016729:	50                   	push   eax
c001672a:	e8 3a f6 ff ff       	call   c0015d69 <Vm::inbv(unsigned short)>
c001672f:	83 c4 0c             	add    esp,0xc
c0016732:	0f b6 c0             	movzx  eax,al
c0016735:	50                   	push   eax
c0016736:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001673a:	50                   	push   eax
c001673b:	56                   	push   esi
c001673c:	e8 d6 fb ff ff       	call   c0016317 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016741:	83 c4 10             	add    esp,0x10
c0016744:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016747:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001674b:	74 03                	je     c0016750 <Vm::faultHandler(regs*)+0x3f9>
c001674d:	48                   	dec    eax
c001674e:	eb 01                	jmp    c0016751 <Vm::faultHandler(regs*)+0x3fa>
c0016750:	40                   	inc    eax
c0016751:	0f b7 c0             	movzx  eax,ax
c0016754:	e9 8e 00 00 00       	jmp    c00167e7 <Vm::faultHandler(regs*)+0x490>
c0016759:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001675e:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016761:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016764:	74 29                	je     c001678f <Vm::faultHandler(regs*)+0x438>
c0016766:	3d ff ff 00 00       	cmp    eax,0xffff
c001676b:	76 22                	jbe    c001678f <Vm::faultHandler(regs*)+0x438>
c001676d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016771:	50                   	push   eax
c0016772:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016776:	50                   	push   eax
c0016777:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001677b:	50                   	push   eax
c001677c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016780:	50                   	push   eax
c0016781:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016785:	50                   	push   eax
c0016786:	6a 6d                	push   0x6d
c0016788:	6a 6d                	push   0x6d
c001678a:	e9 50 01 00 00       	jmp    c00168df <Vm::faultHandler(regs*)+0x588>
c001678f:	83 e5 01             	and    ebp,0x1
c0016792:	0f b7 c8             	movzx  ecx,ax
c0016795:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016798:	0f b7 f6             	movzx  esi,si
c001679b:	74 1e                	je     c00167bb <Vm::faultHandler(regs*)+0x464>
c001679d:	ed                   	in     eax,dx
c001679e:	55                   	push   ebp
c001679f:	50                   	push   eax
c00167a0:	51                   	push   ecx
c00167a1:	56                   	push   esi
c00167a2:	e8 9b fb ff ff       	call   c0016342 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00167a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00167aa:	83 c4 10             	add    esp,0x10
c00167ad:	8d 50 04             	lea    edx,[eax+0x4]
c00167b0:	83 e8 04             	sub    eax,0x4
c00167b3:	81 e2 ff ff 00 00    	and    edx,0xffff
c00167b9:	eb 20                	jmp    c00167db <Vm::faultHandler(regs*)+0x484>
c00167bb:	66 ed                	in     ax,dx
c00167bd:	57                   	push   edi
c00167be:	0f b7 c0             	movzx  eax,ax
c00167c1:	50                   	push   eax
c00167c2:	51                   	push   ecx
c00167c3:	56                   	push   esi
c00167c4:	e8 63 fb ff ff       	call   c001632c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00167c9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00167cc:	83 c4 10             	add    esp,0x10
c00167cf:	8d 50 02             	lea    edx,[eax+0x2]
c00167d2:	83 e8 02             	sub    eax,0x2
c00167d5:	81 e2 ff ff 00 00    	and    edx,0xffff
c00167db:	25 ff ff 00 00       	and    eax,0xffff
c00167e0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00167e4:	0f 44 c2             	cmove  eax,edx
c00167e7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00167ea:	e9 23 02 00 00       	jmp    c0016a12 <Vm::faultHandler(regs*)+0x6bb>
c00167ef:	8d 46 ff             	lea    eax,[esi-0x1]
c00167f2:	0f b6 f0             	movzx  esi,al
c00167f5:	83 fe 05             	cmp    esi,0x5
c00167f8:	77 23                	ja     c001681d <Vm::faultHandler(regs*)+0x4c6>
c00167fa:	ff 24 b5 4c 2f 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd0b4]
c0016801:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0016806:	eb 15                	jmp    c001681d <Vm::faultHandler(regs*)+0x4c6>
c0016808:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001680c:	eb 0f                	jmp    c001681d <Vm::faultHandler(regs*)+0x4c6>
c001680e:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016812:	eb 09                	jmp    c001681d <Vm::faultHandler(regs*)+0x4c6>
c0016814:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016818:	eb 03                	jmp    c001681d <Vm::faultHandler(regs*)+0x4c6>
c001681a:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001681d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016822:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016825:	74 29                	je     c0016850 <Vm::faultHandler(regs*)+0x4f9>
c0016827:	3d ff ff 00 00       	cmp    eax,0xffff
c001682c:	76 22                	jbe    c0016850 <Vm::faultHandler(regs*)+0x4f9>
c001682e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016832:	50                   	push   eax
c0016833:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016837:	50                   	push   eax
c0016838:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001683c:	50                   	push   eax
c001683d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016841:	50                   	push   eax
c0016842:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016846:	50                   	push   eax
c0016847:	6a 6e                	push   0x6e
c0016849:	6a 6e                	push   0x6e
c001684b:	e9 8f 00 00 00       	jmp    c00168df <Vm::faultHandler(regs*)+0x588>
c0016850:	52                   	push   edx
c0016851:	0f b7 c0             	movzx  eax,ax
c0016854:	52                   	push   edx
c0016855:	50                   	push   eax
c0016856:	57                   	push   edi
c0016857:	e8 87 fa ff ff       	call   c00162e3 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001685c:	59                   	pop    ecx
c001685d:	5e                   	pop    esi
c001685e:	0f b6 c0             	movzx  eax,al
c0016861:	50                   	push   eax
c0016862:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016866:	50                   	push   eax
c0016867:	e8 10 f5 ff ff       	call   c0015d7c <Vm::outbv(unsigned short, unsigned char)>
c001686c:	83 c4 10             	add    esp,0x10
c001686f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016872:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016876:	74 03                	je     c001687b <Vm::faultHandler(regs*)+0x524>
c0016878:	48                   	dec    eax
c0016879:	eb 01                	jmp    c001687c <Vm::faultHandler(regs*)+0x525>
c001687b:	40                   	inc    eax
c001687c:	0f b7 c0             	movzx  eax,ax
c001687f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016882:	e9 8b 01 00 00       	jmp    c0016a12 <Vm::faultHandler(regs*)+0x6bb>
c0016887:	8d 46 ff             	lea    eax,[esi-0x1]
c001688a:	0f b6 f0             	movzx  esi,al
c001688d:	83 fe 05             	cmp    esi,0x5
c0016890:	77 1e                	ja     c00168b0 <Vm::faultHandler(regs*)+0x559>
c0016892:	ff 24 b5 64 2f 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd09c]
c0016899:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001689d:	eb 11                	jmp    c00168b0 <Vm::faultHandler(regs*)+0x559>
c001689f:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00168a2:	eb 0c                	jmp    c00168b0 <Vm::faultHandler(regs*)+0x559>
c00168a4:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00168a7:	eb 07                	jmp    c00168b0 <Vm::faultHandler(regs*)+0x559>
c00168a9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00168ac:	eb 02                	jmp    c00168b0 <Vm::faultHandler(regs*)+0x559>
c00168ae:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00168b0:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00168b5:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00168b8:	74 37                	je     c00168f1 <Vm::faultHandler(regs*)+0x59a>
c00168ba:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00168c0:	76 2f                	jbe    c00168f1 <Vm::faultHandler(regs*)+0x59a>
c00168c2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00168c6:	50                   	push   eax
c00168c7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00168cb:	50                   	push   eax
c00168cc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00168d0:	50                   	push   eax
c00168d1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00168d5:	50                   	push   eax
c00168d6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00168da:	50                   	push   eax
c00168db:	6a 6f                	push   0x6f
c00168dd:	6a 6f                	push   0x6f
c00168df:	68 ef 2e 02 c0       	push   0xc0022eef
c00168e4:	e8 65 06 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00168e9:	83 c4 20             	add    esp,0x20
c00168ec:	e9 86 01 00 00       	jmp    c0016a77 <Vm::faultHandler(regs*)+0x720>
c00168f1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00168f4:	0f b7 d7             	movzx  edx,di
c00168f7:	0f b7 c6             	movzx  eax,si
c00168fa:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00168fd:	81 e1 00 04 00 00    	and    ecx,0x400
c0016903:	83 e5 01             	and    ebp,0x1
c0016906:	74 1c                	je     c0016924 <Vm::faultHandler(regs*)+0x5cd>
c0016908:	55                   	push   ebp
c0016909:	55                   	push   ebp
c001690a:	50                   	push   eax
c001690b:	52                   	push   edx
c001690c:	e8 f5 f9 ff ff       	call   c0016306 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0016911:	83 c4 10             	add    esp,0x10
c0016914:	89 fa                	mov    edx,edi
c0016916:	ef                   	out    dx,eax
c0016917:	8d 46 04             	lea    eax,[esi+0x4]
c001691a:	83 ee 04             	sub    esi,0x4
c001691d:	25 ff ff 00 00       	and    eax,0xffff
c0016922:	eb 1b                	jmp    c001693f <Vm::faultHandler(regs*)+0x5e8>
c0016924:	55                   	push   ebp
c0016925:	55                   	push   ebp
c0016926:	50                   	push   eax
c0016927:	52                   	push   edx
c0016928:	e8 c7 f9 ff ff       	call   c00162f4 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001692d:	83 c4 10             	add    esp,0x10
c0016930:	89 fa                	mov    edx,edi
c0016932:	66 ef                	out    dx,ax
c0016934:	8d 46 02             	lea    eax,[esi+0x2]
c0016937:	83 ee 02             	sub    esi,0x2
c001693a:	25 ff ff 00 00       	and    eax,0xffff
c001693f:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016945:	85 c9                	test   ecx,ecx
c0016947:	0f 44 f0             	cmove  esi,eax
c001694a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001694d:	e9 c0 00 00 00       	jmp    c0016a12 <Vm::faultHandler(regs*)+0x6bb>
c0016952:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016959:	83 ec 0c             	sub    esp,0xc
c001695c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016960:	50                   	push   eax
c0016961:	e8 03 f4 ff ff       	call   c0015d69 <Vm::inbv(unsigned short)>
c0016966:	0f b6 c0             	movzx  eax,al
c0016969:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001696c:	eb 3a                	jmp    c00169a8 <Vm::faultHandler(regs*)+0x651>
c001696e:	83 e5 01             	and    ebp,0x1
c0016971:	74 07                	je     c001697a <Vm::faultHandler(regs*)+0x623>
c0016973:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016977:	ed                   	in     eax,dx
c0016978:	eb 14                	jmp    c001698e <Vm::faultHandler(regs*)+0x637>
c001697a:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001697d:	66 31 f6             	xor    si,si
c0016980:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016983:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016987:	66 ed                	in     ax,dx
c0016989:	0f b7 c0             	movzx  eax,ax
c001698c:	09 f0                	or     eax,esi
c001698e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016991:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016995:	eb 7e                	jmp    c0016a15 <Vm::faultHandler(regs*)+0x6be>
c0016997:	52                   	push   edx
c0016998:	52                   	push   edx
c0016999:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001699d:	50                   	push   eax
c001699e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00169a2:	50                   	push   eax
c00169a3:	e8 d4 f3 ff ff       	call   c0015d7c <Vm::outbv(unsigned short, unsigned char)>
c00169a8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00169ac:	eb 4f                	jmp    c00169fd <Vm::faultHandler(regs*)+0x6a6>
c00169ae:	83 e5 01             	and    ebp,0x1
c00169b1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00169b4:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00169b8:	74 03                	je     c00169bd <Vm::faultHandler(regs*)+0x666>
c00169ba:	ef                   	out    dx,eax
c00169bb:	eb d4                	jmp    c0016991 <Vm::faultHandler(regs*)+0x63a>
c00169bd:	66 ef                	out    dx,ax
c00169bf:	eb d0                	jmp    c0016991 <Vm::faultHandler(regs*)+0x63a>
c00169c1:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00169c5:	83 ec 0c             	sub    esp,0xc
c00169c8:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00169cf:	50                   	push   eax
c00169d0:	e8 94 f3 ff ff       	call   c0015d69 <Vm::inbv(unsigned short)>
c00169d5:	0f b6 c0             	movzx  eax,al
c00169d8:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00169db:	eb 1d                	jmp    c00169fa <Vm::faultHandler(regs*)+0x6a3>
c00169dd:	83 e5 01             	and    ebp,0x1
c00169e0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00169e3:	74 03                	je     c00169e8 <Vm::faultHandler(regs*)+0x691>
c00169e5:	ed                   	in     eax,dx
c00169e6:	eb 0d                	jmp    c00169f5 <Vm::faultHandler(regs*)+0x69e>
c00169e8:	66 ed                	in     ax,dx
c00169ea:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00169ed:	0f b7 c0             	movzx  eax,ax
c00169f0:	66 31 d2             	xor    dx,dx
c00169f3:	09 d0                	or     eax,edx
c00169f5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00169f8:	eb 18                	jmp    c0016a12 <Vm::faultHandler(regs*)+0x6bb>
c00169fa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00169fd:	83 c4 10             	add    esp,0x10
c0016a00:	eb 13                	jmp    c0016a15 <Vm::faultHandler(regs*)+0x6be>
c0016a02:	83 e5 01             	and    ebp,0x1
c0016a05:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016a08:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016a0b:	74 03                	je     c0016a10 <Vm::faultHandler(regs*)+0x6b9>
c0016a0d:	ef                   	out    dx,eax
c0016a0e:	eb 02                	jmp    c0016a12 <Vm::faultHandler(regs*)+0x6bb>
c0016a10:	66 ef                	out    dx,ax
c0016a12:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016a15:	b0 01                	mov    al,0x1
c0016a17:	eb 60                	jmp    c0016a79 <Vm::faultHandler(regs*)+0x722>
c0016a19:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016a1d:	50                   	push   eax
c0016a1e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016a22:	50                   	push   eax
c0016a23:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016a27:	50                   	push   eax
c0016a28:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016a2c:	50                   	push   eax
c0016a2d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016a31:	50                   	push   eax
c0016a32:	52                   	push   edx
c0016a33:	52                   	push   edx
c0016a34:	68 1c 2f 02 c0       	push   0xc0022f1c
c0016a39:	e8 10 05 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016a3e:	83 c4 20             	add    esp,0x20
c0016a41:	83 ec 0c             	sub    esp,0xc
c0016a44:	6a 60                	push   0x60
c0016a46:	e8 1e f3 ff ff       	call   c0015d69 <Vm::inbv(unsigned short)>
c0016a4b:	83 c4 10             	add    esp,0x10
c0016a4e:	0f b6 d0             	movzx  edx,al
c0016a51:	83 fa 1c             	cmp    edx,0x1c
c0016a54:	74 05                	je     c0016a5b <Vm::faultHandler(regs*)+0x704>
c0016a56:	83 fa 5a             	cmp    edx,0x5a
c0016a59:	75 e6                	jne    c0016a41 <Vm::faultHandler(regs*)+0x6ea>
c0016a5b:	0f b6 c0             	movzx  eax,al
c0016a5e:	83 f8 1c             	cmp    eax,0x1c
c0016a61:	74 05                	je     c0016a68 <Vm::faultHandler(regs*)+0x711>
c0016a63:	83 f8 5a             	cmp    eax,0x5a
c0016a66:	75 0f                	jne    c0016a77 <Vm::faultHandler(regs*)+0x720>
c0016a68:	83 ec 0c             	sub    esp,0xc
c0016a6b:	6a 60                	push   0x60
c0016a6d:	e8 f7 f2 ff ff       	call   c0015d69 <Vm::inbv(unsigned short)>
c0016a72:	83 c4 10             	add    esp,0x10
c0016a75:	eb e4                	jmp    c0016a5b <Vm::faultHandler(regs*)+0x704>
c0016a77:	31 c0                	xor    eax,eax
c0016a79:	83 c4 2c             	add    esp,0x2c
c0016a7c:	5b                   	pop    ebx
c0016a7d:	5e                   	pop    esi
c0016a7e:	5f                   	pop    edi
c0016a7f:	5d                   	pop    ebp
c0016a80:	c3                   	ret    
c0016a81:	90                   	nop

c0016a82 <noCopro(unsigned long)>:
c0016a82:	c3                   	ret    
c0016a83:	90                   	nop

c0016a84 <CPU::close(int, int, void*)>:
c0016a84:	31 c0                	xor    eax,eax
c0016a86:	c3                   	ret    

c0016a87 <x86ReadCMOS(unsigned char)>:
c0016a87:	83 ec 14             	sub    esp,0x14
c0016a8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016a8e:	88 04 24             	mov    BYTE PTR [esp],al
c0016a91:	a0 6c c7 02 c0       	mov    al,ds:0xc002c76c
c0016a96:	0f b6 c0             	movzx  eax,al
c0016a99:	85 c0                	test   eax,eax
c0016a9b:	74 04                	je     c0016aa1 <x86ReadCMOS(unsigned char)+0x1a>
c0016a9d:	b2 00                	mov    dl,0x0
c0016a9f:	eb 02                	jmp    c0016aa3 <x86ReadCMOS(unsigned char)+0x1c>
c0016aa1:	b2 80                	mov    dl,0x80
c0016aa3:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016aa6:	09 d0                	or     eax,edx
c0016aa8:	0f b6 c0             	movzx  eax,al
c0016aab:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0016ab2:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0016ab6:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0016aba:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0016abf:	ee                   	out    dx,al
c0016ac0:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0016ac7:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016acc:	89 c2                	mov    edx,eax
c0016ace:	ec                   	in     al,dx
c0016acf:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016ad3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016ad7:	83 c4 14             	add    esp,0x14
c0016ada:	c3                   	ret    

c0016adb <x86WriteCMOS(unsigned char, unsigned char)>:
c0016adb:	83 ec 18             	sub    esp,0x18
c0016ade:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ae2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016ae6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016aea:	88 d0                	mov    al,dl
c0016aec:	88 04 24             	mov    BYTE PTR [esp],al
c0016aef:	a0 6c c7 02 c0       	mov    al,ds:0xc002c76c
c0016af4:	0f b6 c0             	movzx  eax,al
c0016af7:	85 c0                	test   eax,eax
c0016af9:	74 04                	je     c0016aff <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0016afb:	b2 00                	mov    dl,0x0
c0016afd:	eb 02                	jmp    c0016b01 <x86WriteCMOS(unsigned char, unsigned char)+0x26>
c0016aff:	b2 80                	mov    dl,0x80
c0016b01:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0016b05:	09 d0                	or     eax,edx
c0016b07:	0f b6 c0             	movzx  eax,al
c0016b0a:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0016b11:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016b15:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016b19:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0016b1e:	ee                   	out    dx,al
c0016b1f:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0016b23:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0016b2a:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0016b2e:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0016b32:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0016b37:	ee                   	out    dx,al
c0016b38:	90                   	nop
c0016b39:	83 c4 18             	add    esp,0x18
c0016b3c:	c3                   	ret    

c0016b3d <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0016b3d:	60                   	pusha  
c0016b3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016b42:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016b46:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016b4a:	9c                   	pushf  
c0016b4b:	fa                   	cli    
c0016b4c:	0f 09                	wbinvd 
c0016b4e:	0f 30                	wrmsr  
c0016b50:	9d                   	popf   
c0016b51:	89 c2                	mov    edx,eax
c0016b53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b57:	89 10                	mov    DWORD PTR [eax],edx
c0016b59:	61                   	popa   
c0016b5a:	90                   	nop
c0016b5b:	c3                   	ret    

c0016b5c <AMD_K6_read_msr(unsigned int, REGS*)>:
c0016b5c:	60                   	pusha  
c0016b5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b61:	89 c1                	mov    ecx,eax
c0016b63:	9c                   	pushf  
c0016b64:	fa                   	cli    
c0016b65:	0f 09                	wbinvd 
c0016b67:	31 c0                	xor    eax,eax
c0016b69:	31 d2                	xor    edx,edx
c0016b6b:	0f 32                	rdmsr  
c0016b6d:	9d                   	popf   
c0016b6e:	89 c2                	mov    edx,eax
c0016b70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016b74:	89 10                	mov    DWORD PTR [eax],edx
c0016b76:	61                   	popa   
c0016b77:	90                   	nop
c0016b78:	c3                   	ret    

c0016b79 <AMD_K6_writeback(int, int, int)>:
c0016b79:	83 ec 20             	sub    esp,0x20
c0016b7c:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0016b81:	c1 e8 14             	shr    eax,0x14
c0016b84:	c1 e8 02             	shr    eax,0x2
c0016b87:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b8b:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0016b90:	0f 85 9e 00 00 00    	jne    c0016c34 <AMD_K6_writeback(int, int, int)+0xbb>
c0016b96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016b9a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016b9e:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0016ba3:	75 19                	jne    c0016bbe <AMD_K6_writeback(int, int, int)+0x45>
c0016ba5:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0016baa:	7f 0a                	jg     c0016bb6 <AMD_K6_writeback(int, int, int)+0x3d>
c0016bac:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0016bb4:	eb 08                	jmp    c0016bbe <AMD_K6_writeback(int, int, int)+0x45>
c0016bb6:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0016bbe:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0016bc3:	7c 6e                	jl     c0016c33 <AMD_K6_writeback(int, int, int)+0xba>
c0016bc5:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0016bca:	7e 09                	jle    c0016bd5 <AMD_K6_writeback(int, int, int)+0x5c>
c0016bcc:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0016bd1:	74 36                	je     c0016c09 <AMD_K6_writeback(int, int, int)+0x90>
c0016bd3:	eb 5e                	jmp    c0016c33 <AMD_K6_writeback(int, int, int)+0xba>
c0016bd5:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016bd9:	50                   	push   eax
c0016bda:	68 82 00 00 c0       	push   0xc0000082
c0016bdf:	e8 78 ff ff ff       	call   c0016b5c <AMD_K6_read_msr(unsigned int, REGS*)>
c0016be4:	83 c4 08             	add    esp,0x8
c0016be7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016beb:	d1 e0                	shl    eax,1
c0016bed:	83 e0 7f             	and    eax,0x7f
c0016bf0:	89 c2                	mov    edx,eax
c0016bf2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016bf6:	50                   	push   eax
c0016bf7:	6a 00                	push   0x0
c0016bf9:	52                   	push   edx
c0016bfa:	68 82 00 00 c0       	push   0xc0000082
c0016bff:	e8 39 ff ff ff       	call   c0016b3d <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0016c04:	83 c4 10             	add    esp,0x10
c0016c07:	eb 2b                	jmp    c0016c34 <AMD_K6_writeback(int, int, int)+0xbb>
c0016c09:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016c0d:	50                   	push   eax
c0016c0e:	68 82 00 00 c0       	push   0xc0000082
c0016c13:	e8 44 ff ff ff       	call   c0016b5c <AMD_K6_read_msr(unsigned int, REGS*)>
c0016c18:	83 c4 08             	add    esp,0x8
c0016c1b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016c1f:	50                   	push   eax
c0016c20:	6a 00                	push   0x0
c0016c22:	6a 00                	push   0x0
c0016c24:	68 82 00 00 c0       	push   0xc0000082
c0016c29:	e8 0f ff ff ff       	call   c0016b3d <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0016c2e:	83 c4 10             	add    esp,0x10
c0016c31:	eb 01                	jmp    c0016c34 <AMD_K6_writeback(int, int, int)+0xbb>
c0016c33:	90                   	nop
c0016c34:	90                   	nop
c0016c35:	83 c4 20             	add    esp,0x20
c0016c38:	c3                   	ret    

c0016c39 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0016c39:	56                   	push   esi
c0016c3a:	53                   	push   ebx
c0016c3b:	a1 20 48 02 c0       	mov    eax,ds:0xc0024820
c0016c40:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0016c44:	75 32                	jne    c0016c78 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0016c46:	8b 15 60 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c760
c0016c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c50:	89 10                	mov    DWORD PTR [eax],edx
c0016c52:	8b 15 5c c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c75c
c0016c58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c5c:	89 10                	mov    DWORD PTR [eax],edx
c0016c5e:	8b 15 58 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c758
c0016c64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c68:	89 10                	mov    DWORD PTR [eax],edx
c0016c6a:	8b 15 54 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c754
c0016c70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c74:	89 10                	mov    DWORD PTR [eax],edx
c0016c76:	eb 5c                	jmp    c0016cd4 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0016c78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c7c:	ba 00 00 00 00       	mov    edx,0x0
c0016c81:	89 d1                	mov    ecx,edx
c0016c83:	0f a2                	cpuid  
c0016c85:	89 c6                	mov    esi,eax
c0016c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c8b:	89 30                	mov    DWORD PTR [eax],esi
c0016c8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c91:	89 18                	mov    DWORD PTR [eax],ebx
c0016c93:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c97:	89 08                	mov    DWORD PTR [eax],ecx
c0016c99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c9d:	89 10                	mov    DWORD PTR [eax],edx
c0016c9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ca3:	a3 20 48 02 c0       	mov    ds:0xc0024820,eax
c0016ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cac:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cae:	a3 60 c7 02 c0       	mov    ds:0xc002c760,eax
c0016cb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016cb7:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cb9:	a3 5c c7 02 c0       	mov    ds:0xc002c75c,eax
c0016cbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016cc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cc4:	a3 58 c7 02 c0       	mov    ds:0xc002c758,eax
c0016cc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ccd:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ccf:	a3 54 c7 02 c0       	mov    ds:0xc002c754,eax
c0016cd4:	5b                   	pop    ebx
c0016cd5:	5e                   	pop    esi
c0016cd6:	c3                   	ret    

c0016cd7 <cpuidCheckEDX(unsigned int)>:
c0016cd7:	83 ec 10             	sub    esp,0x10
c0016cda:	89 e0                	mov    eax,esp
c0016cdc:	50                   	push   eax
c0016cdd:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016ce1:	50                   	push   eax
c0016ce2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016ce6:	50                   	push   eax
c0016ce7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016ceb:	50                   	push   eax
c0016cec:	6a 01                	push   0x1
c0016cee:	e8 46 ff ff ff       	call   c0016c39 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016cf3:	83 c4 14             	add    esp,0x14
c0016cf6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016cf9:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016cfd:	0f 95 c0             	setne  al
c0016d00:	83 c4 10             	add    esp,0x10
c0016d03:	c3                   	ret    

c0016d04 <cpuidCheckECX(unsigned int)>:
c0016d04:	83 ec 10             	sub    esp,0x10
c0016d07:	89 e0                	mov    eax,esp
c0016d09:	50                   	push   eax
c0016d0a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d0e:	50                   	push   eax
c0016d0f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016d13:	50                   	push   eax
c0016d14:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016d18:	50                   	push   eax
c0016d19:	6a 01                	push   0x1
c0016d1b:	e8 19 ff ff ff       	call   c0016c39 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016d20:	83 c4 14             	add    esp,0x14
c0016d23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d27:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016d2b:	0f 95 c0             	setne  al
c0016d2e:	83 c4 10             	add    esp,0x10
c0016d31:	c3                   	ret    

c0016d32 <cpuidCheckExtendedEBX(unsigned int)>:
c0016d32:	83 ec 10             	sub    esp,0x10
c0016d35:	89 e0                	mov    eax,esp
c0016d37:	50                   	push   eax
c0016d38:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d3c:	50                   	push   eax
c0016d3d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016d41:	50                   	push   eax
c0016d42:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016d46:	50                   	push   eax
c0016d47:	6a 07                	push   0x7
c0016d49:	e8 eb fe ff ff       	call   c0016c39 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016d4e:	83 c4 14             	add    esp,0x14
c0016d51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d55:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016d59:	0f 95 c0             	setne  al
c0016d5c:	83 c4 10             	add    esp,0x10
c0016d5f:	c3                   	ret    

c0016d60 <cpuidCheckExtendedECX(unsigned int)>:
c0016d60:	83 ec 10             	sub    esp,0x10
c0016d63:	89 e0                	mov    eax,esp
c0016d65:	50                   	push   eax
c0016d66:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d6a:	50                   	push   eax
c0016d6b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016d6f:	50                   	push   eax
c0016d70:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016d74:	50                   	push   eax
c0016d75:	6a 07                	push   0x7
c0016d77:	e8 bd fe ff ff       	call   c0016c39 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016d7c:	83 c4 14             	add    esp,0x14
c0016d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d83:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016d87:	0f 95 c0             	setne  al
c0016d8a:	83 c4 10             	add    esp,0x10
c0016d8d:	c3                   	ret    

c0016d8e <HalDetectFeatures()>:
c0016d8e:	57                   	push   edi
c0016d8f:	56                   	push   esi
c0016d90:	53                   	push   ebx
c0016d91:	81 ec 90 00 00 00    	sub    esp,0x90
c0016d97:	83 ec 04             	sub    esp,0x4
c0016d9a:	6a 08                	push   0x8
c0016d9c:	6a 00                	push   0x0
c0016d9e:	68 8c c7 02 c0       	push   0xc002c78c
c0016da3:	e8 48 97 fe ff       	call   c00004f0 <memset>
c0016da8:	83 c4 10             	add    esp,0x10
c0016dab:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016db0:	83 c8 04             	or     eax,0x4
c0016db3:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016db8:	e8 3c 94 fe ff       	call   c00001f9 <detectCPUID>
c0016dbd:	85 c0                	test   eax,eax
c0016dbf:	0f 95 c0             	setne  al
c0016dc2:	83 e0 01             	and    eax,0x1
c0016dc5:	83 e0 01             	and    eax,0x1
c0016dc8:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0016dcb:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016dd0:	83 e0 fd             	and    eax,0xfffffffd
c0016dd3:	88 c2                	mov    dl,al
c0016dd5:	88 c8                	mov    al,cl
c0016dd7:	09 d0                	or     eax,edx
c0016dd9:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016dde:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016de3:	83 e0 02             	and    eax,0x2
c0016de6:	0f b6 c0             	movzx  eax,al
c0016de9:	85 c0                	test   eax,eax
c0016deb:	0f 84 7f 02 00 00    	je     c0017070 <HalDetectFeatures()+0x2e2>
c0016df1:	83 ec 0c             	sub    esp,0xc
c0016df4:	6a 20                	push   0x20
c0016df6:	e8 dc fe ff ff       	call   c0016cd7 <cpuidCheckEDX(unsigned int)>
c0016dfb:	83 c4 10             	add    esp,0x10
c0016dfe:	83 e0 01             	and    eax,0x1
c0016e01:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0016e08:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016e0d:	83 e0 f7             	and    eax,0xfffffff7
c0016e10:	88 c2                	mov    dl,al
c0016e12:	88 c8                	mov    al,cl
c0016e14:	09 d0                	or     eax,edx
c0016e16:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016e1b:	83 ec 0c             	sub    esp,0xc
c0016e1e:	68 00 00 00 04       	push   0x4000000
c0016e23:	e8 af fe ff ff       	call   c0016cd7 <cpuidCheckEDX(unsigned int)>
c0016e28:	83 c4 10             	add    esp,0x10
c0016e2b:	89 c1                	mov    ecx,eax
c0016e2d:	83 e1 01             	and    ecx,0x1
c0016e30:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016e35:	83 e0 fe             	and    eax,0xfffffffe
c0016e38:	88 c2                	mov    dl,al
c0016e3a:	88 c8                	mov    al,cl
c0016e3c:	09 d0                	or     eax,edx
c0016e3e:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016e43:	83 ec 0c             	sub    esp,0xc
c0016e46:	68 80 00 00 00       	push   0x80
c0016e4b:	e8 87 fe ff ff       	call   c0016cd7 <cpuidCheckEDX(unsigned int)>
c0016e50:	83 c4 10             	add    esp,0x10
c0016e53:	89 c1                	mov    ecx,eax
c0016e55:	c1 e1 07             	shl    ecx,0x7
c0016e58:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016e5d:	83 e0 7f             	and    eax,0x7f
c0016e60:	88 c2                	mov    dl,al
c0016e62:	88 c8                	mov    al,cl
c0016e64:	09 d0                	or     eax,edx
c0016e66:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016e6b:	83 ec 0c             	sub    esp,0xc
c0016e6e:	68 00 00 80 00       	push   0x800000
c0016e73:	e8 5f fe ff ff       	call   c0016cd7 <cpuidCheckEDX(unsigned int)>
c0016e78:	83 c4 10             	add    esp,0x10
c0016e7b:	83 e0 01             	and    eax,0x1
c0016e7e:	89 c1                	mov    ecx,eax
c0016e80:	c1 e1 05             	shl    ecx,0x5
c0016e83:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016e88:	83 e0 df             	and    eax,0xffffffdf
c0016e8b:	88 c2                	mov    dl,al
c0016e8d:	88 c8                	mov    al,cl
c0016e8f:	09 d0                	or     eax,edx
c0016e91:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016e96:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0016e9b:	83 e0 01             	and    eax,0x1
c0016e9e:	75 0c                	jne    c0016eac <HalDetectFeatures()+0x11e>
c0016ea0:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0016ea5:	25 00 04 00 00       	and    eax,0x400
c0016eaa:	74 0f                	je     c0016ebb <HalDetectFeatures()+0x12d>
c0016eac:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016eb1:	83 e0 fe             	and    eax,0xfffffffe
c0016eb4:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016eb9:	eb 28                	jmp    c0016ee3 <HalDetectFeatures()+0x155>
c0016ebb:	83 ec 0c             	sub    esp,0xc
c0016ebe:	68 00 02 00 00       	push   0x200
c0016ec3:	e8 0f fe ff ff       	call   c0016cd7 <cpuidCheckEDX(unsigned int)>
c0016ec8:	83 c4 10             	add    esp,0x10
c0016ecb:	89 c1                	mov    ecx,eax
c0016ecd:	83 e1 01             	and    ecx,0x1
c0016ed0:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016ed5:	83 e0 fe             	and    eax,0xfffffffe
c0016ed8:	88 c2                	mov    dl,al
c0016eda:	88 c8                	mov    al,cl
c0016edc:	09 d0                	or     eax,edx
c0016ede:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016ee3:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016ee8:	83 e0 01             	and    eax,0x1
c0016eeb:	0f b6 c0             	movzx  eax,al
c0016eee:	85 c0                	test   eax,eax
c0016ef0:	74 1c                	je     c0016f0e <HalDetectFeatures()+0x180>
c0016ef2:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016ef7:	83 e0 08             	and    eax,0x8
c0016efa:	0f b6 c0             	movzx  eax,al
c0016efd:	85 c0                	test   eax,eax
c0016eff:	75 0d                	jne    c0016f0e <HalDetectFeatures()+0x180>
c0016f01:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016f06:	83 e0 fe             	and    eax,0xfffffffe
c0016f09:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016f0e:	83 ec 0c             	sub    esp,0xc
c0016f11:	68 7c 2f 02 c0       	push   0xc0022f7c
c0016f16:	e8 33 00 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016f1b:	83 c4 10             	add    esp,0x10
c0016f1e:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016f23:	83 e0 fe             	and    eax,0xfffffffe
c0016f26:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016f2b:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0016f33:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0016f3b:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c0016f43:	85 c0                	test   eax,eax
c0016f45:	0f 84 ab 00 00 00    	je     c0016ff6 <HalDetectFeatures()+0x268>
c0016f4b:	83 ec 0c             	sub    esp,0xc
c0016f4e:	6a 01                	push   0x1
c0016f50:	e8 af fd ff ff       	call   c0016d04 <cpuidCheckECX(unsigned int)>
c0016f55:	83 c4 10             	add    esp,0x10
c0016f58:	83 e0 01             	and    eax,0x1
c0016f5b:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0016f5e:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016f63:	83 e0 fd             	and    eax,0xfffffffd
c0016f66:	88 c2                	mov    dl,al
c0016f68:	88 c8                	mov    al,cl
c0016f6a:	09 d0                	or     eax,edx
c0016f6c:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016f71:	83 ec 0c             	sub    esp,0xc
c0016f74:	68 00 02 00 00       	push   0x200
c0016f79:	e8 86 fd ff ff       	call   c0016d04 <cpuidCheckECX(unsigned int)>
c0016f7e:	83 c4 10             	add    esp,0x10
c0016f81:	83 e0 01             	and    eax,0x1
c0016f84:	89 c1                	mov    ecx,eax
c0016f86:	c1 e1 04             	shl    ecx,0x4
c0016f89:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016f8e:	83 e0 ef             	and    eax,0xffffffef
c0016f91:	88 c2                	mov    dl,al
c0016f93:	88 c8                	mov    al,cl
c0016f95:	09 d0                	or     eax,edx
c0016f97:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016f9c:	83 ec 0c             	sub    esp,0xc
c0016f9f:	68 00 00 08 00       	push   0x80000
c0016fa4:	e8 5b fd ff ff       	call   c0016d04 <cpuidCheckECX(unsigned int)>
c0016fa9:	83 c4 10             	add    esp,0x10
c0016fac:	83 e0 01             	and    eax,0x1
c0016faf:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0016fb6:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016fbb:	83 e0 fb             	and    eax,0xfffffffb
c0016fbe:	88 c2                	mov    dl,al
c0016fc0:	88 c8                	mov    al,cl
c0016fc2:	09 d0                	or     eax,edx
c0016fc4:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016fc9:	83 ec 0c             	sub    esp,0xc
c0016fcc:	68 00 00 10 00       	push   0x100000
c0016fd1:	e8 2e fd ff ff       	call   c0016d04 <cpuidCheckECX(unsigned int)>
c0016fd6:	83 c4 10             	add    esp,0x10
c0016fd9:	83 e0 01             	and    eax,0x1
c0016fdc:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0016fe3:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016fe8:	83 e0 f7             	and    eax,0xfffffff7
c0016feb:	88 c2                	mov    dl,al
c0016fed:	88 c8                	mov    al,cl
c0016fef:	09 d0                	or     eax,edx
c0016ff1:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016ff6:	83 ec 0c             	sub    esp,0xc
c0016ff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0016ffd:	50                   	push   eax
c0016ffe:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017002:	50                   	push   eax
c0017003:	8d 44 24 34          	lea    eax,[esp+0x34]
c0017007:	50                   	push   eax
c0017008:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001700c:	50                   	push   eax
c001700d:	68 00 00 00 80       	push   0x80000000
c0017012:	e8 22 fc ff ff       	call   c0016c39 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017017:	83 c4 20             	add    esp,0x20
c001701a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001701e:	3d 00 00 00 80       	cmp    eax,0x80000000
c0017023:	76 4b                	jbe    c0017070 <HalDetectFeatures()+0x2e2>
c0017025:	83 ec 0c             	sub    esp,0xc
c0017028:	8d 44 24 24          	lea    eax,[esp+0x24]
c001702c:	50                   	push   eax
c001702d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017031:	50                   	push   eax
c0017032:	8d 44 24 34          	lea    eax,[esp+0x34]
c0017036:	50                   	push   eax
c0017037:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001703b:	50                   	push   eax
c001703c:	68 01 00 00 80       	push   0x80000001
c0017041:	e8 f3 fb ff ff       	call   c0016c39 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017046:	83 c4 20             	add    esp,0x20
c0017049:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c001704e:	83 e0 bf             	and    eax,0xffffffbf
c0017051:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017056:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c001705b:	83 e0 fd             	and    eax,0xfffffffd
c001705e:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017063:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017068:	83 e0 fe             	and    eax,0xfffffffe
c001706b:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017070:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0017075:	25 00 04 00 00       	and    eax,0x400
c001707a:	74 0d                	je     c0017089 <HalDetectFeatures()+0x2fb>
c001707c:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017081:	83 e0 fb             	and    eax,0xfffffffb
c0017084:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017089:	c6 05 88 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c788,0x1
c0017090:	83 ec 04             	sub    esp,0x4
c0017093:	6a 0d                	push   0xd
c0017095:	6a 00                	push   0x0
c0017097:	68 70 c7 02 c0       	push   0xc002c770
c001709c:	e8 4f 94 fe ff       	call   c00004f0 <memset>
c00170a1:	83 c4 10             	add    esp,0x10
c00170a4:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c00170a9:	83 e0 02             	and    eax,0x2
c00170ac:	0f b6 c0             	movzx  eax,al
c00170af:	85 c0                	test   eax,eax
c00170b1:	0f 84 16 08 00 00    	je     c00178cd <HalDetectFeatures()+0xb3f>
c00170b7:	83 ec 0c             	sub    esp,0xc
c00170ba:	6a 10                	push   0x10
c00170bc:	e8 16 fc ff ff       	call   c0016cd7 <cpuidCheckEDX(unsigned int)>
c00170c1:	83 c4 10             	add    esp,0x10
c00170c4:	83 e0 01             	and    eax,0x1
c00170c7:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00170ce:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00170d3:	83 e0 f7             	and    eax,0xfffffff7
c00170d6:	88 c2                	mov    dl,al
c00170d8:	88 c8                	mov    al,cl
c00170da:	09 d0                	or     eax,edx
c00170dc:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c00170e1:	83 ec 0c             	sub    esp,0xc
c00170e4:	6a 40                	push   0x40
c00170e6:	e8 ec fb ff ff       	call   c0016cd7 <cpuidCheckEDX(unsigned int)>
c00170eb:	83 c4 10             	add    esp,0x10
c00170ee:	83 e0 01             	and    eax,0x1
c00170f1:	89 c1                	mov    ecx,eax
c00170f3:	c1 e1 04             	shl    ecx,0x4
c00170f6:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00170fb:	83 e0 ef             	and    eax,0xffffffef
c00170fe:	88 c2                	mov    dl,al
c0017100:	88 c8                	mov    al,cl
c0017102:	09 d0                	or     eax,edx
c0017104:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017109:	83 ec 0c             	sub    esp,0xc
c001710c:	6a 08                	push   0x8
c001710e:	e8 c4 fb ff ff       	call   c0016cd7 <cpuidCheckEDX(unsigned int)>
c0017113:	83 c4 10             	add    esp,0x10
c0017116:	83 e0 01             	and    eax,0x1
c0017119:	89 c1                	mov    ecx,eax
c001711b:	c1 e1 05             	shl    ecx,0x5
c001711e:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017123:	83 e0 df             	and    eax,0xffffffdf
c0017126:	88 c2                	mov    dl,al
c0017128:	88 c8                	mov    al,cl
c001712a:	09 d0                	or     eax,edx
c001712c:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017131:	83 ec 0c             	sub    esp,0xc
c0017134:	68 00 20 00 00       	push   0x2000
c0017139:	e8 99 fb ff ff       	call   c0016cd7 <cpuidCheckEDX(unsigned int)>
c001713e:	83 c4 10             	add    esp,0x10
c0017141:	83 e0 01             	and    eax,0x1
c0017144:	89 c1                	mov    ecx,eax
c0017146:	c1 e1 06             	shl    ecx,0x6
c0017149:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c001714e:	83 e0 bf             	and    eax,0xffffffbf
c0017151:	88 c2                	mov    dl,al
c0017153:	88 c8                	mov    al,cl
c0017155:	09 d0                	or     eax,edx
c0017157:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c001715c:	83 ec 0c             	sub    esp,0xc
c001715f:	68 00 00 01 00       	push   0x10000
c0017164:	e8 6e fb ff ff       	call   c0016cd7 <cpuidCheckEDX(unsigned int)>
c0017169:	83 c4 10             	add    esp,0x10
c001716c:	89 c1                	mov    ecx,eax
c001716e:	c1 e1 07             	shl    ecx,0x7
c0017171:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017176:	83 e0 7f             	and    eax,0x7f
c0017179:	88 c2                	mov    dl,al
c001717b:	88 c8                	mov    al,cl
c001717d:	09 d0                	or     eax,edx
c001717f:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017184:	83 ec 0c             	sub    esp,0xc
c0017187:	6a 01                	push   0x1
c0017189:	e8 49 fb ff ff       	call   c0016cd7 <cpuidCheckEDX(unsigned int)>
c001718e:	83 c4 10             	add    esp,0x10
c0017191:	83 e0 01             	and    eax,0x1
c0017194:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001719b:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00171a0:	83 e0 f7             	and    eax,0xfffffff7
c00171a3:	88 c2                	mov    dl,al
c00171a5:	88 c8                	mov    al,cl
c00171a7:	09 d0                	or     eax,edx
c00171a9:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c00171ae:	83 ec 0c             	sub    esp,0xc
c00171b1:	68 00 08 00 00       	push   0x800
c00171b6:	e8 1c fb ff ff       	call   c0016cd7 <cpuidCheckEDX(unsigned int)>
c00171bb:	83 c4 10             	add    esp,0x10
c00171be:	89 c1                	mov    ecx,eax
c00171c0:	83 e1 01             	and    ecx,0x1
c00171c3:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00171c8:	83 e0 fe             	and    eax,0xfffffffe
c00171cb:	88 c2                	mov    dl,al
c00171cd:	88 c8                	mov    al,cl
c00171cf:	09 d0                	or     eax,edx
c00171d1:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c00171d6:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00171db:	83 e0 40             	and    eax,0x40
c00171de:	0f b6 c0             	movzx  eax,al
c00171e1:	85 c0                	test   eax,eax
c00171e3:	74 0a                	je     c00171ef <HalDetectFeatures()+0x461>
c00171e5:	c7 05 68 c7 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002c768,0x100
c00171ef:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00171f4:	83 e0 80             	and    eax,0xffffff80
c00171f7:	0f b6 c0             	movzx  eax,al
c00171fa:	85 c0                	test   eax,eax
c00171fc:	74 0a                	je     c0017208 <HalDetectFeatures()+0x47a>
c00171fe:	c7 05 64 c7 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002c764,0x80
c0017208:	83 ec 0c             	sub    esp,0xc
c001720b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001720f:	50                   	push   eax
c0017210:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017214:	50                   	push   eax
c0017215:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017219:	50                   	push   eax
c001721a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001721e:	50                   	push   eax
c001721f:	6a 00                	push   0x0
c0017221:	e8 13 fa ff ff       	call   c0016c39 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017226:	83 c4 20             	add    esp,0x20
c0017229:	c7 44 24 48 70 c7 02 c0 	mov    DWORD PTR [esp+0x48],0xc002c770
c0017231:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017235:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017239:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c0017241:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017245:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017249:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001724d:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0017251:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0017255:	89 c6                	mov    esi,eax
c0017257:	89 d7                	mov    edi,edx
c0017259:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001725b:	89 c8                	mov    eax,ecx
c001725d:	89 fa                	mov    edx,edi
c001725f:	89 f3                	mov    ebx,esi
c0017261:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0017265:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017269:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001726d:	b8 74 c7 02 c0       	mov    eax,0xc002c774
c0017272:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0017276:	8d 44 24 08          	lea    eax,[esp+0x8]
c001727a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001727e:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c0017286:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001728a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001728e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017292:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0017296:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001729a:	89 c6                	mov    esi,eax
c001729c:	89 d7                	mov    edi,edx
c001729e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172a0:	89 c8                	mov    eax,ecx
c00172a2:	89 fa                	mov    edx,edi
c00172a4:	89 f3                	mov    ebx,esi
c00172a6:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c00172aa:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c00172ae:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00172b2:	b8 78 c7 02 c0       	mov    eax,0xc002c778
c00172b7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00172be:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00172c2:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c00172c6:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c00172ce:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00172d5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00172d9:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00172dd:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00172e4:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c00172e8:	89 c6                	mov    esi,eax
c00172ea:	89 d7                	mov    edi,edx
c00172ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172ee:	89 c8                	mov    eax,ecx
c00172f0:	89 fa                	mov    edx,edi
c00172f2:	89 f3                	mov    ebx,esi
c00172f4:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c00172f8:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c00172fc:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0017300:	83 ec 08             	sub    esp,0x8
c0017303:	68 8e 2f 02 c0       	push   0xc0022f8e
c0017308:	68 70 c7 02 c0       	push   0xc002c770
c001730d:	e8 6e 94 fe ff       	call   c0000780 <strcmp>
c0017312:	83 c4 10             	add    esp,0x10
c0017315:	85 c0                	test   eax,eax
c0017317:	74 19                	je     c0017332 <HalDetectFeatures()+0x5a4>
c0017319:	83 ec 08             	sub    esp,0x8
c001731c:	68 9b 2f 02 c0       	push   0xc0022f9b
c0017321:	68 70 c7 02 c0       	push   0xc002c770
c0017326:	e8 55 94 fe ff       	call   c0000780 <strcmp>
c001732b:	83 c4 10             	add    esp,0x10
c001732e:	85 c0                	test   eax,eax
c0017330:	75 04                	jne    c0017336 <HalDetectFeatures()+0x5a8>
c0017332:	b0 01                	mov    al,0x1
c0017334:	eb 02                	jmp    c0017338 <HalDetectFeatures()+0x5aa>
c0017336:	b0 00                	mov    al,0x0
c0017338:	0f b6 c0             	movzx  eax,al
c001733b:	85 c0                	test   eax,eax
c001733d:	74 0f                	je     c001734e <HalDetectFeatures()+0x5c0>
c001733f:	c7 05 84 c7 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x2
c0017349:	e9 0d 03 00 00       	jmp    c001765b <HalDetectFeatures()+0x8cd>
c001734e:	83 ec 08             	sub    esp,0x8
c0017351:	68 a8 2f 02 c0       	push   0xc0022fa8
c0017356:	68 70 c7 02 c0       	push   0xc002c770
c001735b:	e8 20 94 fe ff       	call   c0000780 <strcmp>
c0017360:	83 c4 10             	add    esp,0x10
c0017363:	85 c0                	test   eax,eax
c0017365:	74 19                	je     c0017380 <HalDetectFeatures()+0x5f2>
c0017367:	83 ec 08             	sub    esp,0x8
c001736a:	68 b5 2f 02 c0       	push   0xc0022fb5
c001736f:	68 70 c7 02 c0       	push   0xc002c770
c0017374:	e8 07 94 fe ff       	call   c0000780 <strcmp>
c0017379:	83 c4 10             	add    esp,0x10
c001737c:	85 c0                	test   eax,eax
c001737e:	75 04                	jne    c0017384 <HalDetectFeatures()+0x5f6>
c0017380:	b0 01                	mov    al,0x1
c0017382:	eb 02                	jmp    c0017386 <HalDetectFeatures()+0x5f8>
c0017384:	b0 00                	mov    al,0x0
c0017386:	0f b6 c0             	movzx  eax,al
c0017389:	85 c0                	test   eax,eax
c001738b:	74 0f                	je     c001739c <HalDetectFeatures()+0x60e>
c001738d:	c7 05 84 c7 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x4
c0017397:	e9 bf 02 00 00       	jmp    c001765b <HalDetectFeatures()+0x8cd>
c001739c:	83 ec 08             	sub    esp,0x8
c001739f:	68 c2 2f 02 c0       	push   0xc0022fc2
c00173a4:	68 70 c7 02 c0       	push   0xc002c770
c00173a9:	e8 d2 93 fe ff       	call   c0000780 <strcmp>
c00173ae:	83 c4 10             	add    esp,0x10
c00173b1:	85 c0                	test   eax,eax
c00173b3:	74 19                	je     c00173ce <HalDetectFeatures()+0x640>
c00173b5:	83 ec 08             	sub    esp,0x8
c00173b8:	68 cf 2f 02 c0       	push   0xc0022fcf
c00173bd:	68 70 c7 02 c0       	push   0xc002c770
c00173c2:	e8 b9 93 fe ff       	call   c0000780 <strcmp>
c00173c7:	83 c4 10             	add    esp,0x10
c00173ca:	85 c0                	test   eax,eax
c00173cc:	75 04                	jne    c00173d2 <HalDetectFeatures()+0x644>
c00173ce:	b0 01                	mov    al,0x1
c00173d0:	eb 02                	jmp    c00173d4 <HalDetectFeatures()+0x646>
c00173d2:	b0 00                	mov    al,0x0
c00173d4:	0f b6 c0             	movzx  eax,al
c00173d7:	85 c0                	test   eax,eax
c00173d9:	74 0f                	je     c00173ea <HalDetectFeatures()+0x65c>
c00173db:	c7 05 84 c7 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x5
c00173e5:	e9 71 02 00 00       	jmp    c001765b <HalDetectFeatures()+0x8cd>
c00173ea:	83 ec 08             	sub    esp,0x8
c00173ed:	68 dc 2f 02 c0       	push   0xc0022fdc
c00173f2:	68 70 c7 02 c0       	push   0xc002c770
c00173f7:	e8 84 93 fe ff       	call   c0000780 <strcmp>
c00173fc:	83 c4 10             	add    esp,0x10
c00173ff:	85 c0                	test   eax,eax
c0017401:	0f 94 c0             	sete   al
c0017404:	0f b6 c0             	movzx  eax,al
c0017407:	85 c0                	test   eax,eax
c0017409:	74 0f                	je     c001741a <HalDetectFeatures()+0x68c>
c001740b:	c7 05 84 c7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x1
c0017415:	e9 41 02 00 00       	jmp    c001765b <HalDetectFeatures()+0x8cd>
c001741a:	83 ec 08             	sub    esp,0x8
c001741d:	68 e9 2f 02 c0       	push   0xc0022fe9
c0017422:	68 70 c7 02 c0       	push   0xc002c770
c0017427:	e8 54 93 fe ff       	call   c0000780 <strcmp>
c001742c:	83 c4 10             	add    esp,0x10
c001742f:	85 c0                	test   eax,eax
c0017431:	0f 94 c0             	sete   al
c0017434:	0f b6 c0             	movzx  eax,al
c0017437:	85 c0                	test   eax,eax
c0017439:	74 0f                	je     c001744a <HalDetectFeatures()+0x6bc>
c001743b:	c7 05 84 c7 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x3
c0017445:	e9 11 02 00 00       	jmp    c001765b <HalDetectFeatures()+0x8cd>
c001744a:	83 ec 08             	sub    esp,0x8
c001744d:	68 a8 2f 02 c0       	push   0xc0022fa8
c0017452:	68 70 c7 02 c0       	push   0xc002c770
c0017457:	e8 24 93 fe ff       	call   c0000780 <strcmp>
c001745c:	83 c4 10             	add    esp,0x10
c001745f:	85 c0                	test   eax,eax
c0017461:	0f 94 c0             	sete   al
c0017464:	0f b6 c0             	movzx  eax,al
c0017467:	85 c0                	test   eax,eax
c0017469:	74 0f                	je     c001747a <HalDetectFeatures()+0x6ec>
c001746b:	c7 05 84 c7 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x6
c0017475:	e9 e1 01 00 00       	jmp    c001765b <HalDetectFeatures()+0x8cd>
c001747a:	83 ec 08             	sub    esp,0x8
c001747d:	68 f6 2f 02 c0       	push   0xc0022ff6
c0017482:	68 70 c7 02 c0       	push   0xc002c770
c0017487:	e8 f4 92 fe ff       	call   c0000780 <strcmp>
c001748c:	83 c4 10             	add    esp,0x10
c001748f:	85 c0                	test   eax,eax
c0017491:	0f 94 c0             	sete   al
c0017494:	0f b6 c0             	movzx  eax,al
c0017497:	85 c0                	test   eax,eax
c0017499:	74 0f                	je     c00174aa <HalDetectFeatures()+0x71c>
c001749b:	c7 05 84 c7 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x7
c00174a5:	e9 b1 01 00 00       	jmp    c001765b <HalDetectFeatures()+0x8cd>
c00174aa:	83 ec 08             	sub    esp,0x8
c00174ad:	68 03 30 02 c0       	push   0xc0023003
c00174b2:	68 70 c7 02 c0       	push   0xc002c770
c00174b7:	e8 c4 92 fe ff       	call   c0000780 <strcmp>
c00174bc:	83 c4 10             	add    esp,0x10
c00174bf:	85 c0                	test   eax,eax
c00174c1:	0f 94 c0             	sete   al
c00174c4:	0f b6 c0             	movzx  eax,al
c00174c7:	85 c0                	test   eax,eax
c00174c9:	74 0f                	je     c00174da <HalDetectFeatures()+0x74c>
c00174cb:	c7 05 84 c7 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x8
c00174d5:	e9 81 01 00 00       	jmp    c001765b <HalDetectFeatures()+0x8cd>
c00174da:	83 ec 08             	sub    esp,0x8
c00174dd:	68 10 30 02 c0       	push   0xc0023010
c00174e2:	68 70 c7 02 c0       	push   0xc002c770
c00174e7:	e8 94 92 fe ff       	call   c0000780 <strcmp>
c00174ec:	83 c4 10             	add    esp,0x10
c00174ef:	85 c0                	test   eax,eax
c00174f1:	0f 94 c0             	sete   al
c00174f4:	0f b6 c0             	movzx  eax,al
c00174f7:	85 c0                	test   eax,eax
c00174f9:	74 0f                	je     c001750a <HalDetectFeatures()+0x77c>
c00174fb:	c7 05 84 c7 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x9
c0017505:	e9 51 01 00 00       	jmp    c001765b <HalDetectFeatures()+0x8cd>
c001750a:	83 ec 08             	sub    esp,0x8
c001750d:	68 1d 30 02 c0       	push   0xc002301d
c0017512:	68 70 c7 02 c0       	push   0xc002c770
c0017517:	e8 64 92 fe ff       	call   c0000780 <strcmp>
c001751c:	83 c4 10             	add    esp,0x10
c001751f:	85 c0                	test   eax,eax
c0017521:	0f 94 c0             	sete   al
c0017524:	0f b6 c0             	movzx  eax,al
c0017527:	85 c0                	test   eax,eax
c0017529:	74 0f                	je     c001753a <HalDetectFeatures()+0x7ac>
c001752b:	c7 05 84 c7 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xa
c0017535:	e9 21 01 00 00       	jmp    c001765b <HalDetectFeatures()+0x8cd>
c001753a:	83 ec 08             	sub    esp,0x8
c001753d:	68 2a 30 02 c0       	push   0xc002302a
c0017542:	68 70 c7 02 c0       	push   0xc002c770
c0017547:	e8 34 92 fe ff       	call   c0000780 <strcmp>
c001754c:	83 c4 10             	add    esp,0x10
c001754f:	85 c0                	test   eax,eax
c0017551:	0f 94 c0             	sete   al
c0017554:	0f b6 c0             	movzx  eax,al
c0017557:	85 c0                	test   eax,eax
c0017559:	74 0f                	je     c001756a <HalDetectFeatures()+0x7dc>
c001755b:	c7 05 84 c7 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xb
c0017565:	e9 f1 00 00 00       	jmp    c001765b <HalDetectFeatures()+0x8cd>
c001756a:	83 ec 08             	sub    esp,0x8
c001756d:	68 37 30 02 c0       	push   0xc0023037
c0017572:	68 70 c7 02 c0       	push   0xc002c770
c0017577:	e8 04 92 fe ff       	call   c0000780 <strcmp>
c001757c:	83 c4 10             	add    esp,0x10
c001757f:	85 c0                	test   eax,eax
c0017581:	0f 94 c0             	sete   al
c0017584:	0f b6 c0             	movzx  eax,al
c0017587:	85 c0                	test   eax,eax
c0017589:	74 0f                	je     c001759a <HalDetectFeatures()+0x80c>
c001758b:	c7 05 84 c7 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xc
c0017595:	e9 c1 00 00 00       	jmp    c001765b <HalDetectFeatures()+0x8cd>
c001759a:	83 ec 08             	sub    esp,0x8
c001759d:	68 44 30 02 c0       	push   0xc0023044
c00175a2:	68 70 c7 02 c0       	push   0xc002c770
c00175a7:	e8 d4 91 fe ff       	call   c0000780 <strcmp>
c00175ac:	83 c4 10             	add    esp,0x10
c00175af:	85 c0                	test   eax,eax
c00175b1:	0f 94 c0             	sete   al
c00175b4:	0f b6 c0             	movzx  eax,al
c00175b7:	85 c0                	test   eax,eax
c00175b9:	74 0f                	je     c00175ca <HalDetectFeatures()+0x83c>
c00175bb:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c00175c5:	e9 91 00 00 00       	jmp    c001765b <HalDetectFeatures()+0x8cd>
c00175ca:	83 ec 08             	sub    esp,0x8
c00175cd:	68 51 30 02 c0       	push   0xc0023051
c00175d2:	68 70 c7 02 c0       	push   0xc002c770
c00175d7:	e8 a4 91 fe ff       	call   c0000780 <strcmp>
c00175dc:	83 c4 10             	add    esp,0x10
c00175df:	85 c0                	test   eax,eax
c00175e1:	0f 94 c0             	sete   al
c00175e4:	0f b6 c0             	movzx  eax,al
c00175e7:	85 c0                	test   eax,eax
c00175e9:	74 0c                	je     c00175f7 <HalDetectFeatures()+0x869>
c00175eb:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c00175f5:	eb 64                	jmp    c001765b <HalDetectFeatures()+0x8cd>
c00175f7:	83 ec 08             	sub    esp,0x8
c00175fa:	68 5e 30 02 c0       	push   0xc002305e
c00175ff:	68 70 c7 02 c0       	push   0xc002c770
c0017604:	e8 77 91 fe ff       	call   c0000780 <strcmp>
c0017609:	83 c4 10             	add    esp,0x10
c001760c:	85 c0                	test   eax,eax
c001760e:	0f 94 c0             	sete   al
c0017611:	0f b6 c0             	movzx  eax,al
c0017614:	85 c0                	test   eax,eax
c0017616:	74 0c                	je     c0017624 <HalDetectFeatures()+0x896>
c0017618:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c0017622:	eb 37                	jmp    c001765b <HalDetectFeatures()+0x8cd>
c0017624:	83 ec 08             	sub    esp,0x8
c0017627:	68 6b 30 02 c0       	push   0xc002306b
c001762c:	68 70 c7 02 c0       	push   0xc002c770
c0017631:	e8 4a 91 fe ff       	call   c0000780 <strcmp>
c0017636:	83 c4 10             	add    esp,0x10
c0017639:	85 c0                	test   eax,eax
c001763b:	0f 94 c0             	sete   al
c001763e:	0f b6 c0             	movzx  eax,al
c0017641:	85 c0                	test   eax,eax
c0017643:	74 0c                	je     c0017651 <HalDetectFeatures()+0x8c3>
c0017645:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c001764f:	eb 0a                	jmp    c001765b <HalDetectFeatures()+0x8cd>
c0017651:	c7 05 84 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x0
c001765b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001765f:	83 f8 06             	cmp    eax,0x6
c0017662:	0f 86 cc 00 00 00    	jbe    c0017734 <HalDetectFeatures()+0x9a6>
c0017668:	83 ec 0c             	sub    esp,0xc
c001766b:	68 80 00 00 00       	push   0x80
c0017670:	e8 bd f6 ff ff       	call   c0016d32 <cpuidCheckExtendedEBX(unsigned int)>
c0017675:	83 c4 10             	add    esp,0x10
c0017678:	89 c1                	mov    ecx,eax
c001767a:	83 e1 01             	and    ecx,0x1
c001767d:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017682:	83 e0 fe             	and    eax,0xfffffffe
c0017685:	88 c2                	mov    dl,al
c0017687:	88 c8                	mov    al,cl
c0017689:	09 d0                	or     eax,edx
c001768b:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017690:	83 ec 0c             	sub    esp,0xc
c0017693:	68 00 00 10 00       	push   0x100000
c0017698:	e8 95 f6 ff ff       	call   c0016d32 <cpuidCheckExtendedEBX(unsigned int)>
c001769d:	83 c4 10             	add    esp,0x10
c00176a0:	83 e0 01             	and    eax,0x1
c00176a3:	89 c1                	mov    ecx,eax
c00176a5:	c1 e1 06             	shl    ecx,0x6
c00176a8:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00176ad:	83 e0 bf             	and    eax,0xffffffbf
c00176b0:	88 c2                	mov    dl,al
c00176b2:	88 c8                	mov    al,cl
c00176b4:	09 d0                	or     eax,edx
c00176b6:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00176bb:	83 ec 0c             	sub    esp,0xc
c00176be:	68 00 00 04 00       	push   0x40000
c00176c3:	e8 6a f6 ff ff       	call   c0016d32 <cpuidCheckExtendedEBX(unsigned int)>
c00176c8:	83 c4 10             	add    esp,0x10
c00176cb:	83 e0 01             	and    eax,0x1
c00176ce:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00176d1:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00176d6:	83 e0 fd             	and    eax,0xfffffffd
c00176d9:	88 c2                	mov    dl,al
c00176db:	88 c8                	mov    al,cl
c00176dd:	09 d0                	or     eax,edx
c00176df:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00176e4:	83 ec 0c             	sub    esp,0xc
c00176e7:	6a 04                	push   0x4
c00176e9:	e8 72 f6 ff ff       	call   c0016d60 <cpuidCheckExtendedECX(unsigned int)>
c00176ee:	83 c4 10             	add    esp,0x10
c00176f1:	83 e0 01             	and    eax,0x1
c00176f4:	89 c1                	mov    ecx,eax
c00176f6:	c1 e1 05             	shl    ecx,0x5
c00176f9:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00176fe:	83 e0 df             	and    eax,0xffffffdf
c0017701:	88 c2                	mov    dl,al
c0017703:	88 c8                	mov    al,cl
c0017705:	09 d0                	or     eax,edx
c0017707:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c001770c:	83 ec 0c             	sub    esp,0xc
c001770f:	6a 20                	push   0x20
c0017711:	e8 4a f6 ff ff       	call   c0016d60 <cpuidCheckExtendedECX(unsigned int)>
c0017716:	83 c4 10             	add    esp,0x10
c0017719:	83 e0 01             	and    eax,0x1
c001771c:	89 c1                	mov    ecx,eax
c001771e:	c1 e1 04             	shl    ecx,0x4
c0017721:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017726:	83 e0 ef             	and    eax,0xffffffef
c0017729:	88 c2                	mov    dl,al
c001772b:	88 c8                	mov    al,cl
c001772d:	09 d0                	or     eax,edx
c001772f:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017734:	83 ec 0c             	sub    esp,0xc
c0017737:	8d 44 24 14          	lea    eax,[esp+0x14]
c001773b:	50                   	push   eax
c001773c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017740:	50                   	push   eax
c0017741:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017745:	50                   	push   eax
c0017746:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001774a:	50                   	push   eax
c001774b:	6a 01                	push   0x1
c001774d:	e8 e7 f4 ff ff       	call   c0016c39 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017752:	83 c4 20             	add    esp,0x20
c0017755:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017759:	83 e0 0f             	and    eax,0xf
c001775c:	a2 80 c7 02 c0       	mov    ds:0xc002c780,al
c0017761:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017765:	c1 e8 04             	shr    eax,0x4
c0017768:	83 e0 0f             	and    eax,0xf
c001776b:	a2 7e c7 02 c0       	mov    ds:0xc002c77e,al
c0017770:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017774:	c1 e8 08             	shr    eax,0x8
c0017777:	83 e0 0f             	and    eax,0xf
c001777a:	a2 7d c7 02 c0       	mov    ds:0xc002c77d,al
c001777f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017783:	c1 e8 0c             	shr    eax,0xc
c0017786:	83 e0 03             	and    eax,0x3
c0017789:	a2 7f c7 02 c0       	mov    ds:0xc002c77f,al
c001778e:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c0017793:	0f b6 c0             	movzx  eax,al
c0017796:	83 f8 06             	cmp    eax,0x6
c0017799:	74 0d                	je     c00177a8 <HalDetectFeatures()+0xa1a>
c001779b:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c00177a0:	0f b6 c0             	movzx  eax,al
c00177a3:	83 f8 0f             	cmp    eax,0xf
c00177a6:	75 18                	jne    c00177c0 <HalDetectFeatures()+0xa32>
c00177a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00177ac:	c1 e8 10             	shr    eax,0x10
c00177af:	c1 e0 04             	shl    eax,0x4
c00177b2:	88 c2                	mov    dl,al
c00177b4:	a0 7e c7 02 c0       	mov    al,ds:0xc002c77e
c00177b9:	09 d0                	or     eax,edx
c00177bb:	a2 7e c7 02 c0       	mov    ds:0xc002c77e,al
c00177c0:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c00177c5:	0f b6 c0             	movzx  eax,al
c00177c8:	83 f8 0f             	cmp    eax,0xf
c00177cb:	75 15                	jne    c00177e2 <HalDetectFeatures()+0xa54>
c00177cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00177d1:	c1 e8 14             	shr    eax,0x14
c00177d4:	88 c2                	mov    dl,al
c00177d6:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c00177db:	01 d0                	add    eax,edx
c00177dd:	a2 7d c7 02 c0       	mov    ds:0xc002c77d,al
c00177e2:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c00177ea:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c00177f2:	85 c0                	test   eax,eax
c00177f4:	74 2d                	je     c0017823 <HalDetectFeatures()+0xa95>
c00177f6:	83 ec 0c             	sub    esp,0xc
c00177f9:	68 00 00 00 40       	push   0x40000000
c00177fe:	e8 01 f5 ff ff       	call   c0016d04 <cpuidCheckECX(unsigned int)>
c0017803:	83 c4 10             	add    esp,0x10
c0017806:	83 e0 01             	and    eax,0x1
c0017809:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0017810:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017815:	83 e0 fb             	and    eax,0xfffffffb
c0017818:	88 c2                	mov    dl,al
c001781a:	88 c8                	mov    al,cl
c001781c:	09 d0                	or     eax,edx
c001781e:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017823:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017828:	83 c8 04             	or     eax,0x4
c001782b:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017830:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017835:	83 c8 08             	or     eax,0x8
c0017838:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c001783d:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017842:	83 c8 10             	or     eax,0x10
c0017845:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c001784a:	83 ec 0c             	sub    esp,0xc
c001784d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017851:	50                   	push   eax
c0017852:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017856:	50                   	push   eax
c0017857:	8d 44 24 24          	lea    eax,[esp+0x24]
c001785b:	50                   	push   eax
c001785c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017860:	50                   	push   eax
c0017861:	68 00 00 00 80       	push   0x80000000
c0017866:	e8 ce f3 ff ff       	call   c0016c39 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001786b:	83 c4 20             	add    esp,0x20
c001786e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017872:	3d 00 00 00 80       	cmp    eax,0x80000000
c0017877:	0f 86 96 01 00 00    	jbe    c0017a13 <HalDetectFeatures()+0xc85>
c001787d:	83 ec 0c             	sub    esp,0xc
c0017880:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017884:	50                   	push   eax
c0017885:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017889:	50                   	push   eax
c001788a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001788e:	50                   	push   eax
c001788f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017893:	50                   	push   eax
c0017894:	68 01 00 00 80       	push   0x80000001
c0017899:	e8 9b f3 ff ff       	call   c0016c39 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001789e:	83 c4 20             	add    esp,0x20
c00178a1:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00178a6:	83 e0 7f             	and    eax,0x7f
c00178a9:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00178ae:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00178b3:	83 e0 fb             	and    eax,0xfffffffb
c00178b6:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c00178bb:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00178c0:	83 e0 fd             	and    eax,0xfffffffd
c00178c3:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c00178c8:	e9 46 01 00 00       	jmp    c0017a13 <HalDetectFeatures()+0xc85>
c00178cd:	83 ec 08             	sub    esp,0x8
c00178d0:	68 dc 2f 02 c0       	push   0xc0022fdc
c00178d5:	68 70 c7 02 c0       	push   0xc002c770
c00178da:	e8 71 8d fe ff       	call   c0000650 <strcpy>
c00178df:	83 c4 10             	add    esp,0x10
c00178e2:	c7 05 84 c7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x1
c00178ec:	e8 d2 88 fe ff       	call   c00001c3 <is486>
c00178f1:	85 c0                	test   eax,eax
c00178f3:	0f 95 c0             	setne  al
c00178f6:	0f b6 c0             	movzx  eax,al
c00178f9:	85 c0                	test   eax,eax
c00178fb:	0f 84 8d 00 00 00    	je     c001798e <HalDetectFeatures()+0xc00>
c0017901:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017906:	83 c8 04             	or     eax,0x4
c0017909:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c001790e:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017913:	83 c8 08             	or     eax,0x8
c0017916:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c001791b:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017920:	83 c8 10             	or     eax,0x10
c0017923:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017928:	0f 20 c0             	mov    eax,cr0
c001792b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001792f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017933:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001793a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0017941:	83 e0 04             	and    eax,0x4
c0017944:	74 1e                	je     c0017964 <HalDetectFeatures()+0xbd6>
c0017946:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001794d:	83 e0 10             	and    eax,0x10
c0017950:	75 12                	jne    c0017964 <HalDetectFeatures()+0xbd6>
c0017952:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017957:	83 e0 f7             	and    eax,0xfffffff7
c001795a:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c001795f:	e9 af 00 00 00       	jmp    c0017a13 <HalDetectFeatures()+0xc85>
c0017964:	e8 35 88 fe ff       	call   c000019e <hasLegacyFPU>
c0017969:	83 e0 01             	and    eax,0x1
c001796c:	83 e0 01             	and    eax,0x1
c001796f:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017976:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c001797b:	83 e0 f7             	and    eax,0xfffffff7
c001797e:	88 c2                	mov    dl,al
c0017980:	88 c8                	mov    al,cl
c0017982:	09 d0                	or     eax,edx
c0017984:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017989:	e9 85 00 00 00       	jmp    c0017a13 <HalDetectFeatures()+0xc85>
c001798e:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017993:	83 e0 fb             	and    eax,0xfffffffb
c0017996:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c001799b:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00179a0:	83 e0 f7             	and    eax,0xfffffff7
c00179a3:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00179a8:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00179ad:	83 e0 ef             	and    eax,0xffffffef
c00179b0:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00179b5:	0f 20 c0             	mov    eax,cr0
c00179b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00179bc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179c0:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00179c7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00179ce:	83 e0 04             	and    eax,0x4
c00179d1:	74 1b                	je     c00179ee <HalDetectFeatures()+0xc60>
c00179d3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00179da:	83 e0 10             	and    eax,0x10
c00179dd:	75 0f                	jne    c00179ee <HalDetectFeatures()+0xc60>
c00179df:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00179e4:	83 e0 f7             	and    eax,0xfffffff7
c00179e7:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c00179ec:	eb 25                	jmp    c0017a13 <HalDetectFeatures()+0xc85>
c00179ee:	e8 ab 87 fe ff       	call   c000019e <hasLegacyFPU>
c00179f3:	83 e0 01             	and    eax,0x1
c00179f6:	83 e0 01             	and    eax,0x1
c00179f9:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017a00:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017a05:	83 e0 f7             	and    eax,0xfffffff7
c0017a08:	88 c2                	mov    dl,al
c0017a0a:	88 c8                	mov    al,cl
c0017a0c:	09 d0                	or     eax,edx
c0017a0e:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017a13:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017a18:	83 e0 08             	and    eax,0x8
c0017a1b:	0f b6 c0             	movzx  eax,al
c0017a1e:	85 c0                	test   eax,eax
c0017a20:	75 25                	jne    c0017a47 <HalDetectFeatures()+0xcb9>
c0017a22:	e8 77 87 fe ff       	call   c000019e <hasLegacyFPU>
c0017a27:	83 e0 01             	and    eax,0x1
c0017a2a:	83 e0 01             	and    eax,0x1
c0017a2d:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017a34:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017a39:	83 e0 f7             	and    eax,0xfffffff7
c0017a3c:	88 c2                	mov    dl,al
c0017a3e:	88 c8                	mov    al,cl
c0017a40:	09 d0                	or     eax,edx
c0017a42:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017a47:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017a4c:	83 e0 08             	and    eax,0x8
c0017a4f:	0f b6 c0             	movzx  eax,al
c0017a52:	85 c0                	test   eax,eax
c0017a54:	74 0d                	je     c0017a63 <HalDetectFeatures()+0xcd5>
c0017a56:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017a5b:	83 c8 10             	or     eax,0x10
c0017a5e:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017a63:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017a68:	83 e0 10             	and    eax,0x10
c0017a6b:	0f b6 c0             	movzx  eax,al
c0017a6e:	85 c0                	test   eax,eax
c0017a70:	75 23                	jne    c0017a95 <HalDetectFeatures()+0xd07>
c0017a72:	e8 2f 7f 00 00       	call   c001f9a6 <x87Detect>
c0017a77:	83 e0 01             	and    eax,0x1
c0017a7a:	83 e0 01             	and    eax,0x1
c0017a7d:	89 c1                	mov    ecx,eax
c0017a7f:	c1 e1 04             	shl    ecx,0x4
c0017a82:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017a87:	83 e0 ef             	and    eax,0xffffffef
c0017a8a:	88 c2                	mov    dl,al
c0017a8c:	88 c8                	mov    al,cl
c0017a8e:	09 d0                	or     eax,edx
c0017a90:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017a95:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017a9a:	83 e0 01             	and    eax,0x1
c0017a9d:	0f b6 c0             	movzx  eax,al
c0017aa0:	85 c0                	test   eax,eax
c0017aa2:	75 2d                	jne    c0017ad1 <HalDetectFeatures()+0xd43>
c0017aa4:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017aa9:	83 e0 02             	and    eax,0x2
c0017aac:	0f b6 c0             	movzx  eax,al
c0017aaf:	85 c0                	test   eax,eax
c0017ab1:	75 1e                	jne    c0017ad1 <HalDetectFeatures()+0xd43>
c0017ab3:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017ab8:	83 e0 04             	and    eax,0x4
c0017abb:	0f b6 c0             	movzx  eax,al
c0017abe:	85 c0                	test   eax,eax
c0017ac0:	75 0f                	jne    c0017ad1 <HalDetectFeatures()+0xd43>
c0017ac2:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017ac7:	83 e0 08             	and    eax,0x8
c0017aca:	0f b6 c0             	movzx  eax,al
c0017acd:	85 c0                	test   eax,eax
c0017acf:	74 0d                	je     c0017ade <HalDetectFeatures()+0xd50>
c0017ad1:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017ad6:	83 c8 80             	or     eax,0xffffff80
c0017ad9:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017ade:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017ae3:	83 e0 10             	and    eax,0x10
c0017ae6:	0f b6 c0             	movzx  eax,al
c0017ae9:	85 c0                	test   eax,eax
c0017aeb:	74 2f                	je     c0017b1c <HalDetectFeatures()+0xd8e>
c0017aed:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017af2:	83 e0 80             	and    eax,0xffffff80
c0017af5:	0f b6 c0             	movzx  eax,al
c0017af8:	85 c0                	test   eax,eax
c0017afa:	75 20                	jne    c0017b1c <HalDetectFeatures()+0xd8e>
c0017afc:	e8 5f 7e 00 00       	call   c001f960 <sseDetect>
c0017b01:	83 e0 01             	and    eax,0x1
c0017b04:	89 c1                	mov    ecx,eax
c0017b06:	c1 e1 07             	shl    ecx,0x7
c0017b09:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017b0e:	83 e0 7f             	and    eax,0x7f
c0017b11:	88 c2                	mov    dl,al
c0017b13:	88 c8                	mov    al,cl
c0017b15:	09 d0                	or     eax,edx
c0017b17:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017b1c:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017b21:	83 e0 80             	and    eax,0xffffff80
c0017b24:	0f b6 c0             	movzx  eax,al
c0017b27:	85 c0                	test   eax,eax
c0017b29:	74 1c                	je     c0017b47 <HalDetectFeatures()+0xdb9>
c0017b2b:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017b30:	83 e0 20             	and    eax,0x20
c0017b33:	0f b6 c0             	movzx  eax,al
c0017b36:	85 c0                	test   eax,eax
c0017b38:	75 0d                	jne    c0017b47 <HalDetectFeatures()+0xdb9>
c0017b3a:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017b3f:	83 e0 df             	and    eax,0xffffffdf
c0017b42:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0017b47:	c6 05 88 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c788,0x0
c0017b4e:	90                   	nop
c0017b4f:	81 c4 90 00 00 00    	add    esp,0x90
c0017b55:	5b                   	pop    ebx
c0017b56:	5e                   	pop    esi
c0017b57:	5f                   	pop    edi
c0017b58:	c3                   	ret    

c0017b59 <HalEnableNMI()>:
c0017b59:	c6 05 6c c7 02 c0 01 	mov    BYTE PTR ds:0xc002c76c,0x1
c0017b60:	6a 10                	push   0x10
c0017b62:	e8 20 ef ff ff       	call   c0016a87 <x86ReadCMOS(unsigned char)>
c0017b67:	83 c4 04             	add    esp,0x4
c0017b6a:	90                   	nop
c0017b6b:	c3                   	ret    

c0017b6c <HalDisableNMI()>:
c0017b6c:	c6 05 6c c7 02 c0 00 	mov    BYTE PTR ds:0xc002c76c,0x0
c0017b73:	6a 10                	push   0x10
c0017b75:	e8 0d ef ff ff       	call   c0016a87 <x86ReadCMOS(unsigned char)>
c0017b7a:	83 c4 04             	add    esp,0x4
c0017b7d:	90                   	nop
c0017b7e:	c3                   	ret    

c0017b7f <HalGetNMIState()>:
c0017b7f:	a0 6c c7 02 c0       	mov    al,ds:0xc002c76c
c0017b84:	c3                   	ret    

c0017b85 <x86rdmsr(unsigned int)>:
c0017b85:	83 ec 1c             	sub    esp,0x1c
c0017b88:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017b8d:	83 e0 08             	and    eax,0x8
c0017b90:	0f b6 c0             	movzx  eax,al
c0017b93:	85 c0                	test   eax,eax
c0017b95:	75 10                	jne    c0017ba7 <x86rdmsr(unsigned int)+0x22>
c0017b97:	83 ec 0c             	sub    esp,0xc
c0017b9a:	68 77 30 02 c0       	push   0xc0023077
c0017b9f:	e8 72 70 ff ff       	call   c000ec16 <KePanic(char const*)>
c0017ba4:	83 c4 10             	add    esp,0x10
c0017ba7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bab:	89 c1                	mov    ecx,eax
c0017bad:	0f 32                	rdmsr  
c0017baf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017bb3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017bb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017bbb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017bbf:	83 c4 1c             	add    esp,0x1c
c0017bc2:	c3                   	ret    

c0017bc3 <x86wrmsr(unsigned int, unsigned long long)>:
c0017bc3:	83 ec 1c             	sub    esp,0x1c
c0017bc6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017bca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017bce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bd2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017bd6:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017bdb:	83 e0 08             	and    eax,0x8
c0017bde:	0f b6 c0             	movzx  eax,al
c0017be1:	85 c0                	test   eax,eax
c0017be3:	75 10                	jne    c0017bf5 <x86wrmsr(unsigned int, unsigned long long)+0x32>
c0017be5:	83 ec 0c             	sub    esp,0xc
c0017be8:	68 7d 30 02 c0       	push   0xc002307d
c0017bed:	e8 24 70 ff ff       	call   c000ec16 <KePanic(char const*)>
c0017bf2:	83 c4 10             	add    esp,0x10
c0017bf5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017bf9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017bfd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c01:	0f 30                	wrmsr  
c0017c03:	90                   	nop
c0017c04:	83 c4 1c             	add    esp,0x1c
c0017c07:	c3                   	ret    

c0017c08 <HalHandleGeneralProtectionFault(void*, void*)>:
c0017c08:	83 ec 0c             	sub    esp,0xc
c0017c0b:	83 ec 0c             	sub    esp,0xc
c0017c0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c12:	e8 40 e7 ff ff       	call   c0016357 <Vm::faultHandler(regs*)>
c0017c17:	83 c4 10             	add    esp,0x10
c0017c1a:	83 c4 0c             	add    esp,0xc
c0017c1d:	c3                   	ret    

c0017c1e <HalFindRSDP()>:
c0017c1e:	83 ec 1c             	sub    esp,0x1c
c0017c21:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c0017c26:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017c2b:	7e 0c                	jle    c0017c39 <HalFindRSDP()+0x1b>
c0017c2d:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0017c32:	25 00 04 00 00       	and    eax,0x400
c0017c37:	74 0d                	je     c0017c46 <HalFindRSDP()+0x28>
c0017c39:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017c3e:	83 e0 fb             	and    eax,0xfffffffb
c0017c41:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017c46:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017c4b:	83 e0 04             	and    eax,0x4
c0017c4e:	0f b6 c0             	movzx  eax,al
c0017c51:	85 c0                	test   eax,eax
c0017c53:	75 07                	jne    c0017c5c <HalFindRSDP()+0x3e>
c0017c55:	b8 00 00 00 00       	mov    eax,0x0
c0017c5a:	eb 53                	jmp    c0017caf <HalFindRSDP()+0x91>
c0017c5c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017c64:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017c6c:	77 2f                	ja     c0017c9d <HalFindRSDP()+0x7f>
c0017c6e:	83 ec 04             	sub    esp,0x4
c0017c71:	6a 08                	push   0x8
c0017c73:	68 83 30 02 c0       	push   0xc0023083
c0017c78:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c7c:	e8 ff 86 fe ff       	call   c0000380 <memcmp>
c0017c81:	83 c4 10             	add    esp,0x10
c0017c84:	85 c0                	test   eax,eax
c0017c86:	0f 94 c0             	sete   al
c0017c89:	0f b6 c0             	movzx  eax,al
c0017c8c:	85 c0                	test   eax,eax
c0017c8e:	74 06                	je     c0017c96 <HalFindRSDP()+0x78>
c0017c90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c94:	eb 19                	jmp    c0017caf <HalFindRSDP()+0x91>
c0017c96:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017c9b:	eb c7                	jmp    c0017c64 <HalFindRSDP()+0x46>
c0017c9d:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017ca2:	83 e0 fb             	and    eax,0xfffffffb
c0017ca5:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017caa:	b8 00 00 00 00       	mov    eax,0x0
c0017caf:	83 c4 1c             	add    esp,0x1c
c0017cb2:	c3                   	ret    

c0017cb3 <HalHandlePageFault(void*, void*)>:
c0017cb3:	83 ec 1c             	sub    esp,0x1c
c0017cb6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017cbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0017cbd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017cc0:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017cc6:	0f 20 d2             	mov    edx,cr2
c0017cc9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017ccd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017cd1:	83 ec 08             	sub    esp,0x8
c0017cd4:	52                   	push   edx
c0017cd5:	50                   	push   eax
c0017cd6:	e8 5b af ff ff       	call   c0012c36 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017cdb:	83 c4 10             	add    esp,0x10
c0017cde:	83 c4 1c             	add    esp,0x1c
c0017ce1:	c3                   	ret    

c0017ce2 <HalHandleOpcodeFault(void*, void*)>:
c0017ce2:	83 ec 1c             	sub    esp,0x1c
c0017ce5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ce9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ced:	a0 88 c7 02 c0       	mov    al,ds:0xc002c788
c0017cf2:	0f b6 c0             	movzx  eax,al
c0017cf5:	85 c0                	test   eax,eax
c0017cf7:	74 25                	je     c0017d1e <HalHandleOpcodeFault(void*, void*)+0x3c>
c0017cf9:	83 ec 0c             	sub    esp,0xc
c0017cfc:	68 78 32 02 c0       	push   0xc0023278
c0017d01:	e8 48 f2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017d06:	83 c4 10             	add    esp,0x10
c0017d09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d0d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017d10:	8d 50 19             	lea    edx,[eax+0x19]
c0017d13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d17:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017d1a:	b0 01                	mov    al,0x1
c0017d1c:	eb 02                	jmp    c0017d20 <HalHandleOpcodeFault(void*, void*)+0x3e>
c0017d1e:	b0 00                	mov    al,0x0
c0017d20:	83 c4 1c             	add    esp,0x1c
c0017d23:	c3                   	ret    

c0017d24 <HalDisplayDebugInfo(void*)>:
c0017d24:	83 ec 2c             	sub    esp,0x2c
c0017d27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017d2f:	0f 20 c0             	mov    eax,cr0
c0017d32:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017d36:	0f 20 d0             	mov    eax,cr2
c0017d39:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d3d:	0f 20 d8             	mov    eax,cr3
c0017d40:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d44:	0f 20 e0             	mov    eax,cr4
c0017d47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d4f:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017d52:	83 ec 08             	sub    esp,0x8
c0017d55:	50                   	push   eax
c0017d56:	68 9b 30 02 c0       	push   0xc002309b
c0017d5b:	e8 ee f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017d60:	83 c4 10             	add    esp,0x10
c0017d63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d67:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017d6a:	83 ec 08             	sub    esp,0x8
c0017d6d:	50                   	push   eax
c0017d6e:	68 8c 30 02 c0       	push   0xc002308c
c0017d73:	e8 d6 f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017d78:	83 c4 10             	add    esp,0x10
c0017d7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d7f:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017d82:	83 ec 08             	sub    esp,0x8
c0017d85:	50                   	push   eax
c0017d86:	68 97 30 02 c0       	push   0xc0023097
c0017d8b:	e8 be f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017d90:	83 c4 10             	add    esp,0x10
c0017d93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d97:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017d9a:	83 ec 08             	sub    esp,0x8
c0017d9d:	50                   	push   eax
c0017d9e:	68 a6 30 02 c0       	push   0xc00230a6
c0017da3:	e8 a6 f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017da8:	83 c4 10             	add    esp,0x10
c0017dab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017daf:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017db2:	83 ec 08             	sub    esp,0x8
c0017db5:	50                   	push   eax
c0017db6:	68 b1 30 02 c0       	push   0xc00230b1
c0017dbb:	e8 8e f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017dc0:	83 c4 10             	add    esp,0x10
c0017dc3:	83 ec 08             	sub    esp,0x8
c0017dc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017dca:	68 bc 30 02 c0       	push   0xc00230bc
c0017dcf:	e8 7a f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017dd4:	83 c4 10             	add    esp,0x10
c0017dd7:	83 ec 08             	sub    esp,0x8
c0017dda:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017dde:	68 c7 30 02 c0       	push   0xc00230c7
c0017de3:	e8 66 f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017de8:	83 c4 10             	add    esp,0x10
c0017deb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017def:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017df2:	c1 e0 05             	shl    eax,0x5
c0017df5:	8d 90 80 45 02 c0    	lea    edx,[eax-0x3ffdba80]
c0017dfb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017dff:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017e02:	83 ec 04             	sub    esp,0x4
c0017e05:	52                   	push   edx
c0017e06:	50                   	push   eax
c0017e07:	68 d2 30 02 c0       	push   0xc00230d2
c0017e0c:	e8 3d f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017e11:	83 c4 10             	add    esp,0x10
c0017e14:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017e19:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e1f:	83 ec 0c             	sub    esp,0xc
c0017e22:	50                   	push   eax
c0017e23:	e8 21 92 ff ff       	call   c0011049 <setActiveTerminal(VgaText*)>
c0017e28:	83 c4 10             	add    esp,0x10
c0017e2b:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017e30:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e36:	83 ec 08             	sub    esp,0x8
c0017e39:	68 e1 30 02 c0       	push   0xc00230e1
c0017e3e:	50                   	push   eax
c0017e3f:	e8 42 95 ff ff       	call   c0011386 <VgaText::puts(char const*)>
c0017e44:	83 c4 10             	add    esp,0x10
c0017e47:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017e4c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e52:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017e56:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017e59:	83 ec 08             	sub    esp,0x8
c0017e5c:	52                   	push   edx
c0017e5d:	50                   	push   eax
c0017e5e:	e8 dd 94 ff ff       	call   c0011340 <VgaText::putx(unsigned int)>
c0017e63:	83 c4 10             	add    esp,0x10
c0017e66:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017e6b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e71:	83 ec 08             	sub    esp,0x8
c0017e74:	68 ef 30 02 c0       	push   0xc00230ef
c0017e79:	50                   	push   eax
c0017e7a:	e8 07 95 ff ff       	call   c0011386 <VgaText::puts(char const*)>
c0017e7f:	83 c4 10             	add    esp,0x10
c0017e82:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017e87:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e8d:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017e92:	8b 12                	mov    edx,DWORD PTR [edx]
c0017e94:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017e97:	83 c2 0c             	add    edx,0xc
c0017e9a:	83 ec 08             	sub    esp,0x8
c0017e9d:	52                   	push   edx
c0017e9e:	50                   	push   eax
c0017e9f:	e8 e2 94 ff ff       	call   c0011386 <VgaText::puts(char const*)>
c0017ea4:	83 c4 10             	add    esp,0x10
c0017ea7:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017eac:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017eb2:	83 ec 08             	sub    esp,0x8
c0017eb5:	68 f8 30 02 c0       	push   0xc00230f8
c0017eba:	50                   	push   eax
c0017ebb:	e8 c6 94 ff ff       	call   c0011386 <VgaText::puts(char const*)>
c0017ec0:	83 c4 10             	add    esp,0x10
c0017ec3:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017ec8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ece:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017ed2:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017ed5:	83 ec 08             	sub    esp,0x8
c0017ed8:	52                   	push   edx
c0017ed9:	50                   	push   eax
c0017eda:	e8 61 94 ff ff       	call   c0011340 <VgaText::putx(unsigned int)>
c0017edf:	83 c4 10             	add    esp,0x10
c0017ee2:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017ee7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017eed:	83 ec 08             	sub    esp,0x8
c0017ef0:	68 00 31 02 c0       	push   0xc0023100
c0017ef5:	50                   	push   eax
c0017ef6:	e8 8b 94 ff ff       	call   c0011386 <VgaText::puts(char const*)>
c0017efb:	83 c4 10             	add    esp,0x10
c0017efe:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f03:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f0d:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017f10:	83 ec 08             	sub    esp,0x8
c0017f13:	52                   	push   edx
c0017f14:	50                   	push   eax
c0017f15:	e8 26 94 ff ff       	call   c0011340 <VgaText::putx(unsigned int)>
c0017f1a:	83 c4 10             	add    esp,0x10
c0017f1d:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f22:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f28:	83 ec 08             	sub    esp,0x8
c0017f2b:	68 08 31 02 c0       	push   0xc0023108
c0017f30:	50                   	push   eax
c0017f31:	e8 50 94 ff ff       	call   c0011386 <VgaText::puts(char const*)>
c0017f36:	83 c4 10             	add    esp,0x10
c0017f39:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f3e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f44:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f48:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017f4b:	83 ec 08             	sub    esp,0x8
c0017f4e:	52                   	push   edx
c0017f4f:	50                   	push   eax
c0017f50:	e8 eb 93 ff ff       	call   c0011340 <VgaText::putx(unsigned int)>
c0017f55:	83 c4 10             	add    esp,0x10
c0017f58:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f5d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f63:	83 ec 08             	sub    esp,0x8
c0017f66:	68 10 31 02 c0       	push   0xc0023110
c0017f6b:	50                   	push   eax
c0017f6c:	e8 15 94 ff ff       	call   c0011386 <VgaText::puts(char const*)>
c0017f71:	83 c4 10             	add    esp,0x10
c0017f74:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f79:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f7f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f83:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017f86:	83 ec 08             	sub    esp,0x8
c0017f89:	52                   	push   edx
c0017f8a:	50                   	push   eax
c0017f8b:	e8 b0 93 ff ff       	call   c0011340 <VgaText::putx(unsigned int)>
c0017f90:	83 c4 10             	add    esp,0x10
c0017f93:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f98:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f9e:	83 ec 08             	sub    esp,0x8
c0017fa1:	68 18 31 02 c0       	push   0xc0023118
c0017fa6:	50                   	push   eax
c0017fa7:	e8 da 93 ff ff       	call   c0011386 <VgaText::puts(char const*)>
c0017fac:	83 c4 10             	add    esp,0x10
c0017faf:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017fb4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017fba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017fbe:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017fc1:	83 ec 08             	sub    esp,0x8
c0017fc4:	52                   	push   edx
c0017fc5:	50                   	push   eax
c0017fc6:	e8 75 93 ff ff       	call   c0011340 <VgaText::putx(unsigned int)>
c0017fcb:	83 c4 10             	add    esp,0x10
c0017fce:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017fd3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017fd9:	83 ec 08             	sub    esp,0x8
c0017fdc:	68 20 31 02 c0       	push   0xc0023120
c0017fe1:	50                   	push   eax
c0017fe2:	e8 9f 93 ff ff       	call   c0011386 <VgaText::puts(char const*)>
c0017fe7:	83 c4 10             	add    esp,0x10
c0017fea:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017fef:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ff5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017ff9:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017ffc:	83 ec 08             	sub    esp,0x8
c0017fff:	52                   	push   edx
c0018000:	50                   	push   eax
c0018001:	e8 3a 93 ff ff       	call   c0011340 <VgaText::putx(unsigned int)>
c0018006:	83 c4 10             	add    esp,0x10
c0018009:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001800e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018014:	83 ec 08             	sub    esp,0x8
c0018017:	68 28 31 02 c0       	push   0xc0023128
c001801c:	50                   	push   eax
c001801d:	e8 64 93 ff ff       	call   c0011386 <VgaText::puts(char const*)>
c0018022:	83 c4 10             	add    esp,0x10
c0018025:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001802a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018030:	83 ec 08             	sub    esp,0x8
c0018033:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018037:	50                   	push   eax
c0018038:	e8 03 93 ff ff       	call   c0011340 <VgaText::putx(unsigned int)>
c001803d:	83 c4 10             	add    esp,0x10
c0018040:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018045:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001804b:	83 ec 08             	sub    esp,0x8
c001804e:	68 31 31 02 c0       	push   0xc0023131
c0018053:	50                   	push   eax
c0018054:	e8 2d 93 ff ff       	call   c0011386 <VgaText::puts(char const*)>
c0018059:	83 c4 10             	add    esp,0x10
c001805c:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018061:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018067:	83 ec 08             	sub    esp,0x8
c001806a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001806e:	50                   	push   eax
c001806f:	e8 cc 92 ff ff       	call   c0011340 <VgaText::putx(unsigned int)>
c0018074:	83 c4 10             	add    esp,0x10
c0018077:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001807c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018082:	83 ec 08             	sub    esp,0x8
c0018085:	68 39 31 02 c0       	push   0xc0023139
c001808a:	50                   	push   eax
c001808b:	e8 f6 92 ff ff       	call   c0011386 <VgaText::puts(char const*)>
c0018090:	83 c4 10             	add    esp,0x10
c0018093:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018098:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001809e:	83 ec 08             	sub    esp,0x8
c00180a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00180a5:	50                   	push   eax
c00180a6:	e8 95 92 ff ff       	call   c0011340 <VgaText::putx(unsigned int)>
c00180ab:	83 c4 10             	add    esp,0x10
c00180ae:	fa                   	cli    
c00180af:	f4                   	hlt    
c00180b0:	eb fe                	jmp    c00180b0 <HalDisplayDebugInfo(void*)+0x38c>

c00180b2 <HalReceivedNMI()>:
c00180b2:	83 ec 1c             	sub    esp,0x1c
c00180b5:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c00180bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00180c0:	89 c2                	mov    edx,eax
c00180c2:	ec                   	in     al,dx
c00180c3:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00180c7:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00180cb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00180cf:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c00180d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180da:	89 c2                	mov    edx,eax
c00180dc:	ec                   	in     al,dx
c00180dd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00180e1:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00180e5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00180e9:	83 ec 0c             	sub    esp,0xc
c00180ec:	68 41 31 02 c0       	push   0xc0023141
c00180f1:	e8 58 ee fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00180f6:	83 c4 10             	add    esp,0x10
c00180f9:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00180fe:	83 e0 10             	and    eax,0x10
c0018101:	74 10                	je     c0018113 <HalReceivedNMI()+0x61>
c0018103:	83 ec 0c             	sub    esp,0xc
c0018106:	68 52 31 02 c0       	push   0xc0023152
c001810b:	e8 06 6b ff ff       	call   c000ec16 <KePanic(char const*)>
c0018110:	83 c4 10             	add    esp,0x10
c0018113:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0018118:	83 e0 40             	and    eax,0x40
c001811b:	74 10                	je     c001812d <HalReceivedNMI()+0x7b>
c001811d:	83 ec 0c             	sub    esp,0xc
c0018120:	68 5f 31 02 c0       	push   0xc002315f
c0018125:	e8 ec 6a ff ff       	call   c000ec16 <KePanic(char const*)>
c001812a:	83 c4 10             	add    esp,0x10
c001812d:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0018131:	0f be c0             	movsx  eax,al
c0018134:	85 c0                	test   eax,eax
c0018136:	79 10                	jns    c0018148 <HalReceivedNMI()+0x96>
c0018138:	83 ec 0c             	sub    esp,0xc
c001813b:	68 69 31 02 c0       	push   0xc0023169
c0018140:	e8 d1 6a ff ff       	call   c000ec16 <KePanic(char const*)>
c0018145:	83 c4 10             	add    esp,0x10
c0018148:	90                   	nop
c0018149:	83 c4 1c             	add    esp,0x1c
c001814c:	c3                   	ret    

c001814d <HalSystemIdle()>:
c001814d:	56                   	push   esi
c001814e:	53                   	push   ebx
c001814f:	83 ec 14             	sub    esp,0x14
c0018152:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0018157:	83 e0 10             	and    eax,0x10
c001815a:	0f b6 c0             	movzx  eax,al
c001815d:	85 c0                	test   eax,eax
c001815f:	74 43                	je     c00181a4 <HalSystemIdle()+0x57>
c0018161:	83 ec 0c             	sub    esp,0xc
c0018164:	68 e1 00 00 00       	push   0xe1
c0018169:	e8 17 fa ff ff       	call   c0017b85 <x86rdmsr(unsigned int)>
c001816e:	83 c4 10             	add    esp,0x10
c0018171:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018175:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018179:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001817d:	83 e0 02             	and    eax,0x2
c0018180:	89 c3                	mov    ebx,eax
c0018182:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018186:	83 e0 00             	and    eax,0x0
c0018189:	89 c6                	mov    esi,eax
c001818b:	83 ec 04             	sub    esp,0x4
c001818e:	56                   	push   esi
c001818f:	53                   	push   ebx
c0018190:	68 e1 00 00 00       	push   0xe1
c0018195:	e8 29 fa ff ff       	call   c0017bc3 <x86wrmsr(unsigned int, unsigned long long)>
c001819a:	83 c4 10             	add    esp,0x10
c001819d:	e8 f2 7f fe ff       	call   c0000194 <doTPAUSE>
c00181a2:	eb 01                	jmp    c00181a5 <HalSystemIdle()+0x58>
c00181a4:	f4                   	hlt    
c00181a5:	90                   	nop
c00181a6:	83 c4 14             	add    esp,0x14
c00181a9:	5b                   	pop    ebx
c00181aa:	5e                   	pop    esi
c00181ab:	c3                   	ret    

c00181ac <i386SaveCoprocessor(void*)>:
c00181ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181b0:	83 c0 3f             	add    eax,0x3f
c00181b3:	83 e0 c0             	and    eax,0xffffffc0
c00181b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00181ba:	ff 25 50 c7 02 c0    	jmp    DWORD PTR ds:0xc002c750

c00181c0 <i386LoadCoprocessor(void*)>:
c00181c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181c4:	83 c0 3f             	add    eax,0x3f
c00181c7:	83 e0 c0             	and    eax,0xffffffc0
c00181ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00181ce:	ff 25 4c c7 02 c0    	jmp    DWORD PTR ds:0xc002c74c

c00181d4 <x87EmulHandler(regs*, void*)>:
c00181d4:	53                   	push   ebx
c00181d5:	83 ec 08             	sub    esp,0x8
c00181d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181dd:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00181e1:	74 10                	je     c00181f3 <x87EmulHandler(regs*, void*)+0x1f>
c00181e3:	83 ec 0c             	sub    esp,0xc
c00181e6:	68 76 31 02 c0       	push   0xc0023176
c00181eb:	e8 26 6a ff ff       	call   c000ec16 <KePanic(char const*)>
c00181f0:	83 c4 10             	add    esp,0x10
c00181f3:	0f 20 c0             	mov    eax,cr0
c00181f6:	a8 08                	test   al,0x8
c00181f8:	74 59                	je     c0018253 <x87EmulHandler(regs*, void*)+0x7f>
c00181fa:	0f 06                	clts   
c00181fc:	a1 48 c7 02 c0       	mov    eax,ds:0xc002c748
c0018201:	85 c0                	test   eax,eax
c0018203:	74 0e                	je     c0018213 <x87EmulHandler(regs*, void*)+0x3f>
c0018205:	83 ec 0c             	sub    esp,0xc
c0018208:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001820b:	e8 9c ff ff ff       	call   c00181ac <i386SaveCoprocessor(void*)>
c0018210:	83 c4 10             	add    esp,0x10
c0018213:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018219:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001821d:	75 12                	jne    c0018231 <x87EmulHandler(regs*, void*)+0x5d>
c001821f:	83 ec 0c             	sub    esp,0xc
c0018222:	68 40 02 00 00       	push   0x240
c0018227:	e8 a4 66 ff ff       	call   c000e8d0 <malloc>
c001822c:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001822f:	eb 10                	jmp    c0018241 <x87EmulHandler(regs*, void*)+0x6d>
c0018231:	a1 48 c7 02 c0       	mov    eax,ds:0xc002c748
c0018236:	83 ec 0c             	sub    esp,0xc
c0018239:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001823c:	e8 7f ff ff ff       	call   c00181c0 <i386LoadCoprocessor(void*)>
c0018241:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018246:	83 c4 10             	add    esp,0x10
c0018249:	a3 48 c7 02 c0       	mov    ds:0xc002c748,eax
c001824e:	83 c4 08             	add    esp,0x8
c0018251:	5b                   	pop    ebx
c0018252:	c3                   	ret    
c0018253:	83 ec 0c             	sub    esp,0xc
c0018256:	68 8a 31 02 c0       	push   0xc002318a
c001825b:	e8 ee ec fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018260:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0018268:	83 c4 18             	add    esp,0x18
c001826b:	5b                   	pop    ebx
c001826c:	e9 2b da ff ff       	jmp    c0015c9c <Thr::terminateFromIRQ(int)>

c0018271 <HalInitialiseCoprocessor()>:
c0018271:	83 ec 10             	sub    esp,0x10
c0018274:	6a 00                	push   0x0
c0018276:	68 d4 81 01 c0       	push   0xc00181d4
c001827b:	6a 07                	push   0x7
c001827d:	c7 05 48 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c748,0x0
c0018287:	e8 9d 06 00 00       	call   c0018929 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001828c:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0018291:	83 c4 10             	add    esp,0x10
c0018294:	a8 80                	test   al,0x80
c0018296:	74 1c                	je     c00182b4 <HalInitialiseCoprocessor()+0x43>
c0018298:	c7 05 50 c7 02 c0 78 f9 01 c0 	mov    DWORD PTR ds:0xc002c750,0xc001f978
c00182a2:	c7 05 4c c7 02 c0 80 f9 01 c0 	mov    DWORD PTR ds:0xc002c74c,0xc001f980
c00182ac:	83 c4 0c             	add    esp,0xc
c00182af:	e9 d4 76 00 00       	jmp    c001f988 <sseInit>
c00182b4:	a8 10                	test   al,0x10
c00182b6:	74 1c                	je     c00182d4 <HalInitialiseCoprocessor()+0x63>
c00182b8:	c7 05 50 c7 02 c0 c7 f9 01 c0 	mov    DWORD PTR ds:0xc002c750,0xc001f9c7
c00182c2:	c7 05 4c c7 02 c0 ce f9 01 c0 	mov    DWORD PTR ds:0xc002c74c,0xc001f9ce
c00182cc:	83 c4 0c             	add    esp,0xc
c00182cf:	e9 01 77 00 00       	jmp    c001f9d5 <x87Init>
c00182d4:	c7 05 50 c7 02 c0 82 6a 01 c0 	mov    DWORD PTR ds:0xc002c750,0xc0016a82
c00182de:	c7 05 4c c7 02 c0 82 6a 01 c0 	mov    DWORD PTR ds:0xc002c74c,0xc0016a82
c00182e8:	0f 20 c0             	mov    eax,cr0
c00182eb:	83 c8 04             	or     eax,0x4
c00182ee:	0f 22 c0             	mov    cr0,eax
c00182f1:	83 c4 0c             	add    esp,0xc
c00182f4:	c3                   	ret    

c00182f5 <HalPanic(char const*)>:
c00182f5:	53                   	push   ebx
c00182f6:	83 ec 10             	sub    esp,0x10
c00182f9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00182fd:	fa                   	cli    
c00182fe:	53                   	push   ebx
c00182ff:	68 a0 31 02 c0       	push   0xc00231a0
c0018304:	e8 45 ec fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018309:	a1 44 c7 02 c0       	mov    eax,ds:0xc002c744
c001830e:	83 c4 10             	add    esp,0x10
c0018311:	85 c0                	test   eax,eax
c0018313:	74 09                	je     c001831e <HalPanic(char const*)+0x29>
c0018315:	83 ec 0c             	sub    esp,0xc
c0018318:	53                   	push   ebx
c0018319:	ff d0                	call   eax
c001831b:	83 c4 10             	add    esp,0x10
c001831e:	a1 34 be 02 c0       	mov    eax,ds:0xc002be34
c0018323:	85 c0                	test   eax,eax
c0018325:	0f 84 dc 00 00 00    	je     c0018407 <HalPanic(char const*)+0x112>
c001832b:	52                   	push   edx
c001832c:	6a 01                	push   0x1
c001832e:	6a 0f                	push   0xf
c0018330:	50                   	push   eax
c0018331:	e8 6e 8b ff ff       	call   c0010ea4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018336:	59                   	pop    ecx
c0018337:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001833d:	e8 52 8d ff ff       	call   c0011094 <VgaText::clearScreen()>
c0018342:	58                   	pop    eax
c0018343:	5a                   	pop    edx
c0018344:	68 10 26 02 c0       	push   0xc0022610
c0018349:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001834f:	e8 88 8b ff ff       	call   c0010edc <VgaText::setTitle(char*)>
c0018354:	83 c4 0c             	add    esp,0xc
c0018357:	6a 01                	push   0x1
c0018359:	6a 0f                	push   0xf
c001835b:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018361:	e8 3e 8b ff ff       	call   c0010ea4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018366:	59                   	pop    ecx
c0018367:	58                   	pop    eax
c0018368:	68 b9 31 02 c0       	push   0xc00231b9
c001836d:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018373:	e8 0e 90 ff ff       	call   c0011386 <VgaText::puts(char const*)>
c0018378:	83 c4 0c             	add    esp,0xc
c001837b:	6a 0f                	push   0xf
c001837d:	6a 01                	push   0x1
c001837f:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018385:	e8 1a 8b ff ff       	call   c0010ea4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001838a:	58                   	pop    eax
c001838b:	5a                   	pop    edx
c001838c:	68 c2 31 02 c0       	push   0xc00231c2
c0018391:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018397:	e8 ea 8f ff ff       	call   c0011386 <VgaText::puts(char const*)>
c001839c:	83 c4 0c             	add    esp,0xc
c001839f:	6a 01                	push   0x1
c00183a1:	6a 0f                	push   0xf
c00183a3:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00183a9:	e8 f6 8a ff ff       	call   c0010ea4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00183ae:	59                   	pop    ecx
c00183af:	58                   	pop    eax
c00183b0:	68 06 32 02 c0       	push   0xc0023206
c00183b5:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00183bb:	e8 c6 8f ff ff       	call   c0011386 <VgaText::puts(char const*)>
c00183c0:	58                   	pop    eax
c00183c1:	5a                   	pop    edx
c00183c2:	68 cf 31 02 c0       	push   0xc00231cf
c00183c7:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00183cd:	e8 b4 8f ff ff       	call   c0011386 <VgaText::puts(char const*)>
c00183d2:	59                   	pop    ecx
c00183d3:	58                   	pop    eax
c00183d4:	68 09 32 02 c0       	push   0xc0023209
c00183d9:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00183df:	e8 a2 8f ff ff       	call   c0011386 <VgaText::puts(char const*)>
c00183e4:	58                   	pop    eax
c00183e5:	5a                   	pop    edx
c00183e6:	53                   	push   ebx
c00183e7:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00183ed:	e8 94 8f ff ff       	call   c0011386 <VgaText::puts(char const*)>
c00183f2:	59                   	pop    ecx
c00183f3:	5b                   	pop    ebx
c00183f4:	68 06 32 02 c0       	push   0xc0023206
c00183f9:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00183ff:	e8 82 8f ff ff       	call   c0011386 <VgaText::puts(char const*)>
c0018404:	83 c4 10             	add    esp,0x10
c0018407:	eb fe                	jmp    c0018407 <HalPanic(char const*)+0x112>

c0018409 <HalQueryPerformanceCounter()>:
c0018409:	31 c0                	xor    eax,eax
c001840b:	31 d2                	xor    edx,edx
c001840d:	f6 05 8e c7 02 c0 08 	test   BYTE PTR ds:0xc002c78e,0x8
c0018414:	75 02                	jne    c0018418 <HalQueryPerformanceCounter()+0xf>
c0018416:	0f 31                	rdtsc  
c0018418:	c3                   	ret    

c0018419 <HalInitialise()>:
c0018419:	53                   	push   ebx
c001841a:	83 ec 08             	sub    esp,0x8
c001841d:	c6 05 40 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c740,0x0
c0018424:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0018429:	83 e0 fe             	and    eax,0xfffffffe
c001842c:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0018431:	e8 da 07 00 00       	call   c0018c10 <picOpen()>
c0018436:	80 3d 40 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c740,0x0
c001843d:	74 0a                	je     c0018449 <HalInitialise()+0x30>
c001843f:	e8 1c 07 00 00       	call   c0018b60 <picDisable()>
c0018444:	e8 07 6b 00 00       	call   c001ef50 <apicOpen()>
c0018449:	50                   	push   eax
c001844a:	bb 0f 00 00 00       	mov    ebx,0xf
c001844f:	6a 00                	push   0x0
c0018451:	68 80 df 00 c0       	push   0xc000df80
c0018456:	6a 00                	push   0x0
c0018458:	e8 cc 04 00 00       	call   c0018929 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001845d:	83 c4 0c             	add    esp,0xc
c0018460:	6a 00                	push   0x0
c0018462:	68 80 df 00 c0       	push   0xc000df80
c0018467:	6a 01                	push   0x1
c0018469:	e8 bb 04 00 00       	call   c0018929 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001846e:	83 c4 0c             	add    esp,0xc
c0018471:	6a 00                	push   0x0
c0018473:	68 70 df 00 c0       	push   0xc000df70
c0018478:	6a 02                	push   0x2
c001847a:	e8 aa 04 00 00       	call   c0018929 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001847f:	83 c4 0c             	add    esp,0xc
c0018482:	6a 00                	push   0x0
c0018484:	68 80 df 00 c0       	push   0xc000df80
c0018489:	6a 03                	push   0x3
c001848b:	e8 99 04 00 00       	call   c0018929 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018490:	83 c4 0c             	add    esp,0xc
c0018493:	6a 00                	push   0x0
c0018495:	68 80 df 00 c0       	push   0xc000df80
c001849a:	6a 04                	push   0x4
c001849c:	e8 88 04 00 00       	call   c0018929 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00184a1:	83 c4 0c             	add    esp,0xc
c00184a4:	6a 00                	push   0x0
c00184a6:	68 80 df 00 c0       	push   0xc000df80
c00184ab:	6a 05                	push   0x5
c00184ad:	e8 77 04 00 00       	call   c0018929 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00184b2:	83 c4 0c             	add    esp,0xc
c00184b5:	6a 00                	push   0x0
c00184b7:	68 b4 df 00 c0       	push   0xc000dfb4
c00184bc:	6a 06                	push   0x6
c00184be:	e8 66 04 00 00       	call   c0018929 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00184c3:	83 c4 0c             	add    esp,0xc
c00184c6:	6a 00                	push   0x0
c00184c8:	68 08 e0 00 c0       	push   0xc000e008
c00184cd:	6a 08                	push   0x8
c00184cf:	e8 55 04 00 00       	call   c0018929 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00184d4:	83 c4 0c             	add    esp,0xc
c00184d7:	6a 00                	push   0x0
c00184d9:	68 80 df 00 c0       	push   0xc000df80
c00184de:	6a 09                	push   0x9
c00184e0:	e8 44 04 00 00       	call   c0018929 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00184e5:	83 c4 0c             	add    esp,0xc
c00184e8:	6a 00                	push   0x0
c00184ea:	68 80 df 00 c0       	push   0xc000df80
c00184ef:	6a 0a                	push   0xa
c00184f1:	e8 33 04 00 00       	call   c0018929 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00184f6:	83 c4 0c             	add    esp,0xc
c00184f9:	6a 00                	push   0x0
c00184fb:	68 80 df 00 c0       	push   0xc000df80
c0018500:	6a 0b                	push   0xb
c0018502:	e8 22 04 00 00       	call   c0018929 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018507:	83 c4 0c             	add    esp,0xc
c001850a:	6a 00                	push   0x0
c001850c:	68 c8 de 00 c0       	push   0xc000dec8
c0018511:	6a 0d                	push   0xd
c0018513:	e8 11 04 00 00       	call   c0018929 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018518:	83 c4 0c             	add    esp,0xc
c001851b:	6a 00                	push   0x0
c001851d:	68 1c df 00 c0       	push   0xc000df1c
c0018522:	6a 0e                	push   0xe
c0018524:	e8 00 04 00 00       	call   c0018929 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018529:	83 c4 10             	add    esp,0x10
c001852c:	50                   	push   eax
c001852d:	6a 00                	push   0x0
c001852f:	68 80 df 00 c0       	push   0xc000df80
c0018534:	53                   	push   ebx
c0018535:	43                   	inc    ebx
c0018536:	e8 ee 03 00 00       	call   c0018929 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001853b:	83 c4 10             	add    esp,0x10
c001853e:	83 fb 1e             	cmp    ebx,0x1e
c0018541:	75 e9                	jne    c001852c <HalInitialise()+0x113>
c0018543:	50                   	push   eax
c0018544:	6a 00                	push   0x0
c0018546:	68 30 0d 01 c0       	push   0xc0010d30
c001854b:	6a 60                	push   0x60
c001854d:	e8 d7 03 00 00       	call   c0018929 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018552:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0018557:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0018561:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0018568:	e8 63 63 ff ff       	call   c000e8d0 <malloc>
c001856d:	89 04 24             	mov    DWORD PTR [esp],eax
c0018570:	89 c3                	mov    ebx,eax
c0018572:	e8 01 0e 00 00       	call   c0019378 <RTC::RTC()>
c0018577:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0018581:	5a                   	pop    edx
c0018582:	59                   	pop    ecx
c0018583:	53                   	push   ebx
c0018584:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c001858a:	e8 b7 0a ff ff       	call   c0009046 <Device::addChild(Device*)>
c001858f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018591:	6a 00                	push   0x0
c0018593:	6a 00                	push   0x0
c0018595:	6a 00                	push   0x0
c0018597:	53                   	push   ebx
c0018598:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001859b:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c00185a0:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00185a6:	83 c4 28             	add    esp,0x28
c00185a9:	5b                   	pop    ebx
c00185aa:	c3                   	ret    

c00185ab <HalMakeBeep(int)>:
c00185ab:	53                   	push   ebx
c00185ac:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00185b0:	85 db                	test   ebx,ebx
c00185b2:	75 07                	jne    c00185bb <HalMakeBeep(int)+0x10>
c00185b4:	e4 61                	in     al,0x61
c00185b6:	83 e0 fc             	and    eax,0xfffffffc
c00185b9:	eb 26                	jmp    c00185e1 <HalMakeBeep(int)+0x36>
c00185bb:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00185c0:	99                   	cdq    
c00185c1:	f7 fb                	idiv   ebx
c00185c3:	89 c1                	mov    ecx,eax
c00185c5:	b0 b6                	mov    al,0xb6
c00185c7:	e6 43                	out    0x43,al
c00185c9:	88 c8                	mov    al,cl
c00185cb:	e6 42                	out    0x42,al
c00185cd:	89 c8                	mov    eax,ecx
c00185cf:	c1 e8 08             	shr    eax,0x8
c00185d2:	e6 42                	out    0x42,al
c00185d4:	e4 61                	in     al,0x61
c00185d6:	89 c2                	mov    edx,eax
c00185d8:	83 ca 03             	or     edx,0x3
c00185db:	38 d0                	cmp    al,dl
c00185dd:	74 04                	je     c00185e3 <HalMakeBeep(int)+0x38>
c00185df:	88 d0                	mov    al,dl
c00185e1:	e6 61                	out    0x61,al
c00185e3:	5b                   	pop    ebx
c00185e4:	c3                   	ret    

c00185e5 <HalGetRand()>:
c00185e5:	31 c0                	xor    eax,eax
c00185e7:	c3                   	ret    

c00185e8 <HalEndOfInterrupt(int)>:
c00185e8:	80 3d 40 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c740,0x0
c00185ef:	74 1d                	je     c001860e <HalEndOfInterrupt(int)+0x26>
c00185f1:	83 ec 18             	sub    esp,0x18
c00185f4:	6a 1b                	push   0x1b
c00185f6:	e8 8a f5 ff ff       	call   c0017b85 <x86rdmsr(unsigned int)>
c00185fb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018600:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001860a:	83 c4 1c             	add    esp,0x1c
c001860d:	c3                   	ret    
c001860e:	e9 81 07 00 00       	jmp    c0018d94 <picEOI(int)>

c0018613 <HalRestart()>:
c0018613:	c3                   	ret    

c0018614 <HalShutdown()>:
c0018614:	c3                   	ret    

c0018615 <HalSleep()>:
c0018615:	c3                   	ret    

c0018616 <CPU::CPU()>:
c0018616:	83 ec 0c             	sub    esp,0xc
c0018619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001861d:	83 ec 08             	sub    esp,0x8
c0018620:	68 cb 2f 02 c0       	push   0xc0022fcb
c0018625:	50                   	push   eax
c0018626:	e8 7d 0b ff ff       	call   c00091a8 <Device::Device(char const*)>
c001862b:	83 c4 10             	add    esp,0x10
c001862e:	ba a4 32 02 c0       	mov    edx,0xc00232a4
c0018633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018637:	89 10                	mov    DWORD PTR [eax],edx
c0018639:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001863d:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0018647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001864b:	05 64 01 00 00       	add    eax,0x164
c0018650:	83 ec 0c             	sub    esp,0xc
c0018653:	50                   	push   eax
c0018654:	e8 03 5a ff ff       	call   c000e05c <GDT::GDT()>
c0018659:	83 c4 10             	add    esp,0x10
c001865c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018660:	05 68 09 00 00       	add    eax,0x968
c0018665:	83 ec 0c             	sub    esp,0xc
c0018668:	50                   	push   eax
c0018669:	e8 42 5c ff ff       	call   c000e2b0 <IDT::IDT()>
c001866e:	83 c4 10             	add    esp,0x10
c0018671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018675:	05 68 11 00 00       	add    eax,0x1168
c001867a:	83 ec 0c             	sub    esp,0xc
c001867d:	50                   	push   eax
c001867e:	e8 85 91 ff ff       	call   c0011808 <TSS::TSS()>
c0018683:	83 c4 10             	add    esp,0x10
c0018686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001868a:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0018694:	90                   	nop
c0018695:	83 c4 0c             	add    esp,0xc
c0018698:	c3                   	ret    
c0018699:	90                   	nop

c001869a <CPU::setupSMEP()>:
c001869a:	0f 20 e0             	mov    eax,cr4
c001869d:	0d 00 00 10 00       	or     eax,0x100000
c00186a2:	0f 22 e0             	mov    cr4,eax
c00186a5:	c3                   	ret    

c00186a6 <CPU::setupUMIP()>:
c00186a6:	0f 20 e0             	mov    eax,cr4
c00186a9:	80 cc 08             	or     ah,0x8
c00186ac:	0f 22 e0             	mov    cr4,eax
c00186af:	c3                   	ret    

c00186b0 <CPU::setupTSC()>:
c00186b0:	0f 20 e0             	mov    eax,cr4
c00186b3:	83 c8 04             	or     eax,0x4
c00186b6:	0f 22 e0             	mov    cr4,eax
c00186b9:	c3                   	ret    

c00186ba <CPU::setupLargePages()>:
c00186ba:	0f 20 e0             	mov    eax,cr4
c00186bd:	83 c8 10             	or     eax,0x10
c00186c0:	0f 22 e0             	mov    cr4,eax
c00186c3:	c3                   	ret    

c00186c4 <CPU::setupPAT()>:
c00186c4:	f6 05 8c c7 02 c0 08 	test   BYTE PTR ds:0xc002c78c,0x8
c00186cb:	74 28                	je     c00186f5 <CPU::setupPAT()+0x31>
c00186cd:	53                   	push   ebx
c00186ce:	83 ec 14             	sub    esp,0x14
c00186d1:	68 77 02 00 00       	push   0x277
c00186d6:	e8 aa f4 ff ff       	call   c0017b85 <x86rdmsr(unsigned int)>
c00186db:	83 c4 0c             	add    esp,0xc
c00186de:	83 e2 f8             	and    edx,0xfffffff8
c00186e1:	83 ca 01             	or     edx,0x1
c00186e4:	52                   	push   edx
c00186e5:	50                   	push   eax
c00186e6:	68 77 02 00 00       	push   0x277
c00186eb:	e8 d3 f4 ff ff       	call   c0017bc3 <x86wrmsr(unsigned int, unsigned long long)>
c00186f0:	83 c4 18             	add    esp,0x18
c00186f3:	5b                   	pop    ebx
c00186f4:	c3                   	ret    
c00186f5:	c3                   	ret    

c00186f6 <CPU::setupMTRR()>:
c00186f6:	c3                   	ret    
c00186f7:	90                   	nop

c00186f8 <CPU::setupGlobalPages()>:
c00186f8:	0f 20 e0             	mov    eax,cr4
c00186fb:	0c 80                	or     al,0x80
c00186fd:	0f 22 e0             	mov    cr4,eax
c0018700:	c3                   	ret    
c0018701:	90                   	nop

c0018702 <CPU::allowUsermodeDataAccess()>:
c0018702:	f6 05 8f c7 02 c0 40 	test   BYTE PTR ds:0xc002c78f,0x40
c0018709:	74 03                	je     c001870e <CPU::allowUsermodeDataAccess()+0xc>
c001870b:	0f 01 cb             	stac   
c001870e:	c3                   	ret    
c001870f:	90                   	nop

c0018710 <CPU::prohibitUsermodeDataAccess()>:
c0018710:	f6 05 8f c7 02 c0 40 	test   BYTE PTR ds:0xc002c78f,0x40
c0018717:	74 03                	je     c001871c <CPU::prohibitUsermodeDataAccess()+0xc>
c0018719:	0f 01 ca             	clac   
c001871c:	c3                   	ret    
c001871d:	90                   	nop

c001871e <CPU::setupSMAP()>:
c001871e:	0f 20 e0             	mov    eax,cr4
c0018721:	0d 00 00 20 00       	or     eax,0x200000
c0018726:	0f 22 e0             	mov    cr4,eax
c0018729:	eb e5                	jmp    c0018710 <CPU::prohibitUsermodeDataAccess()>
c001872b:	90                   	nop

c001872c <CPU::setupFeatures()>:
c001872c:	53                   	push   ebx
c001872d:	83 ec 08             	sub    esp,0x8
c0018730:	f6 05 8f c7 02 c0 20 	test   BYTE PTR ds:0xc002c78f,0x20
c0018737:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001873b:	74 18                	je     c0018755 <CPU::setupFeatures()+0x29>
c001873d:	83 ec 0c             	sub    esp,0xc
c0018740:	68 14 32 02 c0       	push   0xc0023214
c0018745:	e8 04 e8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001874a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001874d:	e8 54 ff ff ff       	call   c00186a6 <CPU::setupUMIP()>
c0018752:	83 c4 10             	add    esp,0x10
c0018755:	f6 05 8e c7 02 c0 08 	test   BYTE PTR ds:0xc002c78e,0x8
c001875c:	74 18                	je     c0018776 <CPU::setupFeatures()+0x4a>
c001875e:	83 ec 0c             	sub    esp,0xc
c0018761:	68 1e 32 02 c0       	push   0xc002321e
c0018766:	e8 e3 e7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001876b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001876e:	e8 3d ff ff ff       	call   c00186b0 <CPU::setupTSC()>
c0018773:	83 c4 10             	add    esp,0x10
c0018776:	f6 05 8e c7 02 c0 20 	test   BYTE PTR ds:0xc002c78e,0x20
c001877d:	74 18                	je     c0018797 <CPU::setupFeatures()+0x6b>
c001877f:	83 ec 0c             	sub    esp,0xc
c0018782:	68 27 32 02 c0       	push   0xc0023227
c0018787:	e8 c2 e7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001878c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001878f:	e8 26 ff ff ff       	call   c00186ba <CPU::setupLargePages()>
c0018794:	83 c4 10             	add    esp,0x10
c0018797:	f6 05 8e c7 02 c0 40 	test   BYTE PTR ds:0xc002c78e,0x40
c001879e:	74 18                	je     c00187b8 <CPU::setupFeatures()+0x8c>
c00187a0:	83 ec 0c             	sub    esp,0xc
c00187a3:	68 30 32 02 c0       	push   0xc0023230
c00187a8:	e8 a1 e7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00187ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187b0:	e8 43 ff ff ff       	call   c00186f8 <CPU::setupGlobalPages()>
c00187b5:	83 c4 10             	add    esp,0x10
c00187b8:	f6 05 8e c7 02 c0 80 	test   BYTE PTR ds:0xc002c78e,0x80
c00187bf:	74 18                	je     c00187d9 <CPU::setupFeatures()+0xad>
c00187c1:	83 ec 0c             	sub    esp,0xc
c00187c4:	68 42 32 02 c0       	push   0xc0023242
c00187c9:	e8 80 e7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00187ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187d1:	e8 ee fe ff ff       	call   c00186c4 <CPU::setupPAT()>
c00187d6:	83 c4 10             	add    esp,0x10
c00187d9:	f6 05 90 c7 02 c0 04 	test   BYTE PTR ds:0xc002c790,0x4
c00187e0:	74 11                	je     c00187f3 <CPU::setupFeatures()+0xc7>
c00187e2:	c7 44 24 10 4b 32 02 c0 	mov    DWORD PTR [esp+0x10],0xc002324b
c00187ea:	83 c4 08             	add    esp,0x8
c00187ed:	5b                   	pop    ebx
c00187ee:	e9 5b e7 fe ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c00187f3:	83 c4 08             	add    esp,0x8
c00187f6:	5b                   	pop    ebx
c00187f7:	c3                   	ret    

c00187f8 <CPU::open(int, int, void*)>:
c00187f8:	55                   	push   ebp
c00187f9:	57                   	push   edi
c00187fa:	56                   	push   esi
c00187fb:	53                   	push   ebx
c00187fc:	83 ec 18             	sub    esp,0x18
c00187ff:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018803:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018807:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001880b:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c0018811:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c0018817:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001881d:	50                   	push   eax
c001881e:	e8 9b 58 ff ff       	call   c000e0be <GDT::setup()>
c0018823:	83 c4 0c             	add    esp,0xc
c0018826:	6a 00                	push   0x0
c0018828:	68 ef be ad de       	push   0xdeadbeef
c001882d:	55                   	push   ebp
c001882e:	e8 19 90 ff ff       	call   c001184c <TSS::setup(unsigned long, unsigned long)>
c0018833:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018836:	e8 f1 8f ff ff       	call   c001182c <TSS::flush()>
c001883b:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c0018841:	89 04 24             	mov    DWORD PTR [esp],eax
c0018844:	e8 dd 5a ff ff       	call   c000e326 <IDT::setup()>
c0018849:	b8 00 04 00 00       	mov    eax,0x400
c001884e:	0f 23 f8             	mov    dr7,eax
c0018851:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001885b:	e8 b0 65 ff ff       	call   c000ee10 <Phys::allocatePage()>
c0018860:	83 c4 10             	add    esp,0x10
c0018863:	85 f6                	test   esi,esi
c0018865:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001886b:	89 38                	mov    DWORD PTR [eax],edi
c001886d:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018873:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0018876:	74 10                	je     c0018888 <CPU::open(int, int, void*)+0x90>
c0018878:	50                   	push   eax
c0018879:	50                   	push   eax
c001887a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0018880:	56                   	push   esi
c0018881:	e8 64 99 ff ff       	call   c00121ea <VAS::setCPUSpecific(unsigned long)>
c0018886:	eb 0d                	jmp    c0018895 <CPU::open(int, int, void*)+0x9d>
c0018888:	83 ec 0c             	sub    esp,0xc
c001888b:	68 55 32 02 c0       	push   0xc0023255
c0018890:	e8 81 63 ff ff       	call   c000ec16 <KePanic(char const*)>
c0018895:	83 c4 10             	add    esp,0x10
c0018898:	83 ec 0c             	sub    esp,0xc
c001889b:	68 63 32 02 c0       	push   0xc0023263
c00188a0:	e8 f6 3c ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c00188a5:	e8 6f fb ff ff       	call   c0018419 <HalInitialise()>
c00188aa:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c00188af:	83 e0 10             	and    eax,0x10
c00188b2:	83 f8 01             	cmp    eax,0x1
c00188b5:	19 c0                	sbb    eax,eax
c00188b7:	83 e0 46             	and    eax,0x46
c00188ba:	83 c0 1e             	add    eax,0x1e
c00188bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00188c0:	e8 50 1e ff ff       	call   c000a715 <setupTimer(int)>
c00188c5:	83 c4 10             	add    esp,0x10
c00188c8:	f6 05 90 bd 02 c0 20 	test   BYTE PTR ds:0xc002bd90,0x20
c00188cf:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c00188d5:	74 0c                	je     c00188e3 <CPU::open(int, int, void*)+0xeb>
c00188d7:	83 ec 0c             	sub    esp,0xc
c00188da:	53                   	push   ebx
c00188db:	e8 4c fe ff ff       	call   c001872c <CPU::setupFeatures()>
c00188e0:	83 c4 10             	add    esp,0x10
c00188e3:	83 c4 0c             	add    esp,0xc
c00188e6:	31 c0                	xor    eax,eax
c00188e8:	5b                   	pop    ebx
c00188e9:	5e                   	pop    esi
c00188ea:	5f                   	pop    edi
c00188eb:	5d                   	pop    ebp
c00188ec:	c3                   	ret    

c00188ed <convertLegacyIRQNumber(int)>:
c00188ed:	83 ec 0c             	sub    esp,0xc
c00188f0:	f6 05 8c c7 02 c0 01 	test   BYTE PTR ds:0xc002c78c,0x1
c00188f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188fb:	74 0c                	je     c0018909 <convertLegacyIRQNumber(int)+0x1c>
c00188fd:	83 f8 0f             	cmp    eax,0xf
c0018900:	7f 0b                	jg     c001890d <convertLegacyIRQNumber(int)+0x20>
c0018902:	0f b6 80 08 3e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc1f8]
c0018909:	83 c4 0c             	add    esp,0xc
c001890c:	c3                   	ret    
c001890d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018911:	83 ec 0c             	sub    esp,0xc
c0018914:	68 c8 32 02 c0       	push   0xc00232c8
c0018919:	e8 f8 62 ff ff       	call   c000ec16 <KePanic(char const*)>
c001891e:	83 c4 10             	add    esp,0x10
c0018921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018925:	83 c4 0c             	add    esp,0xc
c0018928:	c3                   	ret    

c0018929 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c0018929:	56                   	push   esi
c001892a:	31 c0                	xor    eax,eax
c001892c:	53                   	push   ebx
c001892d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018931:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018935:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018939:	89 ca                	mov    edx,ecx
c001893b:	c1 e2 04             	shl    edx,0x4
c001893e:	83 bc 82 80 ad 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5280],0x0
c0018946:	74 17                	je     c001895f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c0018948:	83 c0 01             	add    eax,0x1
c001894b:	83 f8 04             	cmp    eax,0x4
c001894e:	75 ee                	jne    c001893e <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c0018950:	c7 44 24 0c 29 33 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023329
c0018958:	5b                   	pop    ebx
c0018959:	5e                   	pop    esi
c001895a:	e9 b7 62 ff ff       	jmp    c000ec16 <KePanic(char const*)>
c001895f:	8d 04 88             	lea    eax,[eax+ecx*4]
c0018962:	89 1c 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],ebx
c0018969:	5b                   	pop    ebx
c001896a:	89 34 85 80 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6280],esi
c0018971:	5e                   	pop    esi
c0018972:	c3                   	ret    

c0018973 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0018973:	55                   	push   ebp
c0018974:	57                   	push   edi
c0018975:	56                   	push   esi
c0018976:	53                   	push   ebx
c0018977:	83 ec 0c             	sub    esp,0xc
c001897a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001897e:	f6 05 8c c7 02 c0 01 	test   BYTE PTR ds:0xc002c78c,0x1
c0018985:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018989:	8d 6e 20             	lea    ebp,[esi+0x20]
c001898c:	74 57                	je     c00189e5 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001898e:	84 c0                	test   al,al
c0018990:	89 c7                	mov    edi,eax
c0018992:	74 1d                	je     c00189b1 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c0018994:	83 fe 0f             	cmp    esi,0xf
c0018997:	0f 8f d9 00 00 00    	jg     c0018a76 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x103>
c001899d:	0f b6 b6 08 3e 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc1f8]
c00189a4:	0f b7 bc 36 c0 9a 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd6540]
c00189ac:	d1 ef                	shr    edi,1
c00189ae:	83 e7 01             	and    edi,0x1
c00189b1:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c00189b6:	83 ec 08             	sub    esp,0x8
c00189b9:	31 db                	xor    ebx,ebx
c00189bb:	50                   	push   eax
c00189bc:	68 36 33 02 c0       	push   0xc0023336
c00189c1:	e8 88 e5 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00189c6:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c00189cb:	83 c4 10             	add    esp,0x10
c00189ce:	85 c0                	test   eax,eax
c00189d0:	7f 59                	jg     c0018a2b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb8>
c00189d2:	8d 6e 20             	lea    ebp,[esi+0x20]
c00189d5:	83 ec 0c             	sub    esp,0xc
c00189d8:	68 4d 33 02 c0       	push   0xc002334d
c00189dd:	e8 34 62 ff ff       	call   c000ec16 <KePanic(char const*)>
c00189e2:	83 c4 10             	add    esp,0x10
c00189e5:	89 e8                	mov    eax,ebp
c00189e7:	31 d2                	xor    edx,edx
c00189e9:	c1 e0 04             	shl    eax,0x4
c00189ec:	8b 8c 90 80 ad 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5280]
c00189f3:	85 c9                	test   ecx,ecx
c00189f5:	0f 84 92 00 00 00    	je     c0018a8d <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x11a>
c00189fb:	83 c2 01             	add    edx,0x1
c00189fe:	83 fa 04             	cmp    edx,0x4
c0018a01:	75 e9                	jne    c00189ec <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c0018a03:	83 ec 0c             	sub    esp,0xc
c0018a06:	68 04 33 02 c0       	push   0xc0023304
c0018a0b:	e8 06 62 ff ff       	call   c000ec16 <KePanic(char const*)>
c0018a10:	83 c4 10             	add    esp,0x10
c0018a13:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0018a18:	83 c4 0c             	add    esp,0xc
c0018a1b:	5b                   	pop    ebx
c0018a1c:	5e                   	pop    esi
c0018a1d:	5f                   	pop    edi
c0018a1e:	5d                   	pop    ebp
c0018a1f:	c3                   	ret    
c0018a20:	83 c3 01             	add    ebx,0x1
c0018a23:	39 1d e0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0e0,ebx
c0018a29:	7e a7                	jle    c00189d2 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c0018a2b:	8b 2c 9d 00 d1 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd2f00]
c0018a32:	83 ec 08             	sub    esp,0x8
c0018a35:	56                   	push   esi
c0018a36:	55                   	push   ebp
c0018a37:	e8 a0 66 00 00       	call   c001f0dc <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0018a3c:	83 c4 10             	add    esp,0x10
c0018a3f:	84 c0                	test   al,al
c0018a41:	74 dd                	je     c0018a20 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c0018a43:	89 f8                	mov    eax,edi
c0018a45:	83 ec 04             	sub    esp,0x4
c0018a48:	8b 1c 9d 00 d1 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f00]
c0018a4f:	8d 6e 20             	lea    ebp,[esi+0x20]
c0018a52:	0f b6 f8             	movzx  edi,al
c0018a55:	57                   	push   edi
c0018a56:	89 e8                	mov    eax,ebp
c0018a58:	6a 00                	push   0x0
c0018a5a:	0f b6 c0             	movzx  eax,al
c0018a5d:	50                   	push   eax
c0018a5e:	89 f0                	mov    eax,esi
c0018a60:	6a 00                	push   0x0
c0018a62:	0f b6 c0             	movzx  eax,al
c0018a65:	6a 00                	push   0x0
c0018a67:	50                   	push   eax
c0018a68:	53                   	push   ebx
c0018a69:	e8 da 67 00 00       	call   c001f248 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0018a6e:	83 c4 20             	add    esp,0x20
c0018a71:	e9 6f ff ff ff       	jmp    c00189e5 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c0018a76:	83 ec 0c             	sub    esp,0xc
c0018a79:	31 ff                	xor    edi,edi
c0018a7b:	68 c8 32 02 c0       	push   0xc00232c8
c0018a80:	e8 91 61 ff ff       	call   c000ec16 <KePanic(char const*)>
c0018a85:	83 c4 10             	add    esp,0x10
c0018a88:	e9 24 ff ff ff       	jmp    c00189b1 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c0018a8d:	8d 04 aa             	lea    eax,[edx+ebp*4]
c0018a90:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018a94:	89 14 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],edx
c0018a9b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018a9f:	89 14 85 80 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6280],edx
c0018aa6:	83 c4 0c             	add    esp,0xc
c0018aa9:	89 f0                	mov    eax,esi
c0018aab:	5b                   	pop    ebx
c0018aac:	5e                   	pop    esi
c0018aad:	5f                   	pop    edi
c0018aae:	5d                   	pop    ebp
c0018aaf:	c3                   	ret    

c0018ab0 <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c0018ab0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ab4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018ab8:	c1 e0 04             	shl    eax,0x4
c0018abb:	8d 50 10             	lea    edx,[eax+0x10]
c0018abe:	39 88 80 ad 02 c0    	cmp    DWORD PTR [eax-0x3ffd5280],ecx
c0018ac4:	74 08                	je     c0018ace <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c0018ac6:	83 c0 04             	add    eax,0x4
c0018ac9:	39 d0                	cmp    eax,edx
c0018acb:	75 f1                	jne    c0018abe <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c0018acd:	c3                   	ret    
c0018ace:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c0018ad8:	c7 80 80 9d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6280],0x0
c0018ae2:	eb e2                	jmp    c0018ac6 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c0018ae4 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0018ae4:	56                   	push   esi
c0018ae5:	53                   	push   ebx
c0018ae6:	83 ec 04             	sub    esp,0x4
c0018ae9:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0018aee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018af2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018af6:	74 09                	je     c0018b01 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0018af8:	f6 05 8c c7 02 c0 01 	test   BYTE PTR ds:0xc002c78c,0x1
c0018aff:	75 34                	jne    c0018b35 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x51>
c0018b01:	8d 43 20             	lea    eax,[ebx+0x20]
c0018b04:	c1 e0 04             	shl    eax,0x4
c0018b07:	8d 50 10             	lea    edx,[eax+0x10]
c0018b0a:	39 b0 80 ad 02 c0    	cmp    DWORD PTR [eax-0x3ffd5280],esi
c0018b10:	74 0d                	je     c0018b1f <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0018b12:	83 c0 04             	add    eax,0x4
c0018b15:	39 d0                	cmp    eax,edx
c0018b17:	75 f1                	jne    c0018b0a <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x26>
c0018b19:	83 c4 04             	add    esp,0x4
c0018b1c:	5b                   	pop    ebx
c0018b1d:	5e                   	pop    esi
c0018b1e:	c3                   	ret    
c0018b1f:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c0018b29:	c7 80 80 9d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6280],0x0
c0018b33:	eb dd                	jmp    c0018b12 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2e>
c0018b35:	83 fb 0f             	cmp    ebx,0xf
c0018b38:	7f 09                	jg     c0018b43 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x5f>
c0018b3a:	0f b6 9b 08 3e 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc1f8]
c0018b41:	eb be                	jmp    c0018b01 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0018b43:	83 ec 0c             	sub    esp,0xc
c0018b46:	68 5a 33 02 c0       	push   0xc002335a
c0018b4b:	e8 c6 60 ff ff       	call   c000ec16 <KePanic(char const*)>
c0018b50:	83 c4 10             	add    esp,0x10
c0018b53:	eb ac                	jmp    c0018b01 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0018b55:	66 90                	xchg   ax,ax
c0018b57:	90                   	nop

c0018b58 <picIoWait()>:
c0018b58:	eb 00                	jmp    c0018b5a <picIoWait()+0x2>
c0018b5a:	eb 00                	jmp    c0018b5c <picIoWait()+0x4>
c0018b5c:	90                   	nop
c0018b5d:	c3                   	ret    
c0018b5e:	66 90                	xchg   ax,ax

c0018b60 <picDisable()>:
c0018b60:	83 ec 10             	sub    esp,0x10
c0018b63:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0018b6a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0018b6f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018b73:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018b78:	ee                   	out    dx,al
c0018b79:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0018b80:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018b85:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018b89:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018b8e:	ee                   	out    dx,al
c0018b8f:	90                   	nop
c0018b90:	83 c4 10             	add    esp,0x10
c0018b93:	c3                   	ret    

c0018b94 <picGetIRQReg(int)>:
c0018b94:	83 ec 10             	sub    esp,0x10
c0018b97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b9b:	0f b6 c0             	movzx  eax,al
c0018b9e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018ba5:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0018ba9:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018bad:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018bb2:	ee                   	out    dx,al
c0018bb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018bb7:	0f b6 c0             	movzx  eax,al
c0018bba:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018bc1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018bc5:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018bc9:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018bce:	ee                   	out    dx,al
c0018bcf:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0018bd6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0018bdb:	89 c2                	mov    edx,eax
c0018bdd:	ec                   	in     al,dx
c0018bde:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018be2:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018be6:	0f b6 c0             	movzx  eax,al
c0018be9:	c1 e0 08             	shl    eax,0x8
c0018bec:	89 c1                	mov    ecx,eax
c0018bee:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018bf5:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0018bfa:	89 c2                	mov    edx,eax
c0018bfc:	ec                   	in     al,dx
c0018bfd:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018c01:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018c05:	0f b6 c0             	movzx  eax,al
c0018c08:	09 c8                	or     eax,ecx
c0018c0a:	83 c4 10             	add    esp,0x10
c0018c0d:	c3                   	ret    
c0018c0e:	66 90                	xchg   ax,ax

c0018c10 <picOpen()>:
c0018c10:	83 ec 50             	sub    esp,0x50
c0018c13:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0018c1a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0018c1f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018c23:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018c27:	ee                   	out    dx,al
c0018c28:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0018c2f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018c34:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018c38:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018c3c:	ee                   	out    dx,al
c0018c3d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018c45:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018c4d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018c54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c58:	89 c2                	mov    edx,eax
c0018c5a:	ec                   	in     al,dx
c0018c5b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0018c5f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018c63:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0018c67:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0018c6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c72:	89 c2                	mov    edx,eax
c0018c74:	ec                   	in     al,dx
c0018c75:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018c79:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018c7d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0018c81:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0018c88:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018c8d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018c91:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018c95:	ee                   	out    dx,al
c0018c96:	e8 bd fe ff ff       	call   c0018b58 <picIoWait()>
c0018c9b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0018ca2:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0018ca7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0018cab:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018caf:	ee                   	out    dx,al
c0018cb0:	e8 a3 fe ff ff       	call   c0018b58 <picIoWait()>
c0018cb5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018cb9:	0f b6 c0             	movzx  eax,al
c0018cbc:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0018cc3:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0018cc7:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0018ccb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018ccf:	ee                   	out    dx,al
c0018cd0:	e8 83 fe ff ff       	call   c0018b58 <picIoWait()>
c0018cd5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018cd9:	0f b6 c0             	movzx  eax,al
c0018cdc:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018ce3:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0018ce7:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0018ceb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018cef:	ee                   	out    dx,al
c0018cf0:	e8 63 fe ff ff       	call   c0018b58 <picIoWait()>
c0018cf5:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018cfc:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018d01:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018d05:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018d09:	ee                   	out    dx,al
c0018d0a:	e8 49 fe ff ff       	call   c0018b58 <picIoWait()>
c0018d0f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0018d16:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0018d1b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0018d1f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018d23:	ee                   	out    dx,al
c0018d24:	e8 2f fe ff ff       	call   c0018b58 <picIoWait()>
c0018d29:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018d30:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018d35:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0018d39:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018d3d:	ee                   	out    dx,al
c0018d3e:	e8 15 fe ff ff       	call   c0018b58 <picIoWait()>
c0018d43:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0018d4a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0018d4f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0018d53:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018d57:	ee                   	out    dx,al
c0018d58:	e8 fb fd ff ff       	call   c0018b58 <picIoWait()>
c0018d5d:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0018d62:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018d69:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018d6d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018d71:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018d75:	ee                   	out    dx,al
c0018d76:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0018d7b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0018d82:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018d86:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0018d8a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018d8e:	ee                   	out    dx,al
c0018d8f:	90                   	nop
c0018d90:	83 c4 50             	add    esp,0x50
c0018d93:	c3                   	ret    

c0018d94 <picEOI(int)>:
c0018d94:	83 ec 10             	sub    esp,0x10
c0018d97:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018d9c:	75 1e                	jne    c0018dbc <picEOI(int)+0x28>
c0018d9e:	6a 0b                	push   0xb
c0018da0:	e8 ef fd ff ff       	call   c0018b94 <picGetIRQReg(int)>
c0018da5:	83 c4 04             	add    esp,0x4
c0018da8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018dad:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018db2:	25 80 00 00 00       	and    eax,0x80
c0018db7:	74 73                	je     c0018e2c <picEOI(int)+0x98>
c0018db9:	8d 76 00             	lea    esi,[esi+0x0]
c0018dbc:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018dc1:	75 31                	jne    c0018df4 <picEOI(int)+0x60>
c0018dc3:	6a 0b                	push   0xb
c0018dc5:	e8 ca fd ff ff       	call   c0018b94 <picGetIRQReg(int)>
c0018dca:	83 c4 04             	add    esp,0x4
c0018dcd:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018dd6:	98                   	cwde   
c0018dd7:	85 c0                	test   eax,eax
c0018dd9:	78 19                	js     c0018df4 <picEOI(int)+0x60>
c0018ddb:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018de2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018de7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018deb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018df0:	ee                   	out    dx,al
c0018df1:	eb 3d                	jmp    c0018e30 <picEOI(int)+0x9c>
c0018df3:	90                   	nop
c0018df4:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018df9:	7e 19                	jle    c0018e14 <picEOI(int)+0x80>
c0018dfb:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018e02:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0018e07:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018e0b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018e10:	ee                   	out    dx,al
c0018e11:	8d 76 00             	lea    esi,[esi+0x0]
c0018e14:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018e1b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018e20:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018e24:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018e29:	ee                   	out    dx,al
c0018e2a:	eb 04                	jmp    c0018e30 <picEOI(int)+0x9c>
c0018e2c:	90                   	nop
c0018e2d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e30:	83 c4 10             	add    esp,0x10
c0018e33:	c3                   	ret    

c0018e34 <RTC::open(int, int, void*)>:
c0018e34:	31 c0                	xor    eax,eax
c0018e36:	c3                   	ret    
c0018e37:	90                   	nop

c0018e38 <RTC::close(int, int, void*)>:
c0018e38:	31 c0                	xor    eax,eax
c0018e3a:	c3                   	ret    
c0018e3b:	90                   	nop

c0018e3c <RTC::timeInSecondsUTC()>:
c0018e3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e40:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018e46:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018e4c:	c3                   	ret    
c0018e4d:	90                   	nop

c0018e4e <RTC::timeInDatetimeUTC()>:
c0018e4e:	53                   	push   ebx
c0018e4f:	83 ec 14             	sub    esp,0x14
c0018e52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e56:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018e5a:	8b 10                	mov    edx,DWORD PTR [eax]
c0018e5c:	50                   	push   eax
c0018e5d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018e60:	83 c4 0c             	add    esp,0xc
c0018e63:	52                   	push   edx
c0018e64:	50                   	push   eax
c0018e65:	53                   	push   ebx
c0018e66:	e8 4f ff fe ff       	call   c0008dba <KeSecondsToDatetime(unsigned long long)>
c0018e6b:	89 d8                	mov    eax,ebx
c0018e6d:	83 c4 14             	add    esp,0x14
c0018e70:	5b                   	pop    ebx
c0018e71:	c2 04 00             	ret    0x4

c0018e74 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018e74:	56                   	push   esi
c0018e75:	53                   	push   ebx
c0018e76:	83 ec 14             	sub    esp,0x14
c0018e79:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018e7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018e7f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0018e82:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018e86:	52                   	push   edx
c0018e87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018e8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018e8f:	50                   	push   eax
c0018e90:	e8 25 ff fe ff       	call   c0008dba <KeSecondsToDatetime(unsigned long long)>
c0018e95:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018e99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018e9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018ea1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018ea5:	89 f0                	mov    eax,esi
c0018ea7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018eab:	83 c4 20             	add    esp,0x20
c0018eae:	5b                   	pop    ebx
c0018eaf:	5e                   	pop    esi
c0018eb0:	ff e0                	jmp    eax

c0018eb2 <RTC::~RTC()>:
c0018eb2:	83 ec 0c             	sub    esp,0xc
c0018eb5:	ba 84 33 02 c0       	mov    edx,0xc0023384
c0018eba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ebe:	89 10                	mov    DWORD PTR [eax],edx
c0018ec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ec4:	83 ec 0c             	sub    esp,0xc
c0018ec7:	50                   	push   eax
c0018ec8:	e8 79 fc fe ff       	call   c0008b46 <Clock::~Clock()>
c0018ecd:	83 c4 10             	add    esp,0x10
c0018ed0:	90                   	nop
c0018ed1:	83 c4 0c             	add    esp,0xc
c0018ed4:	c3                   	ret    
c0018ed5:	90                   	nop

c0018ed6 <RTC::~RTC()>:
c0018ed6:	83 ec 0c             	sub    esp,0xc
c0018ed9:	83 ec 0c             	sub    esp,0xc
c0018edc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ee0:	e8 cd ff ff ff       	call   c0018eb2 <RTC::~RTC()>
c0018ee5:	83 c4 10             	add    esp,0x10
c0018ee8:	83 ec 08             	sub    esp,0x8
c0018eeb:	68 60 01 00 00       	push   0x160
c0018ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ef4:	e8 62 37 ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0018ef9:	83 c4 10             	add    esp,0x10
c0018efc:	83 c4 0c             	add    esp,0xc
c0018eff:	c3                   	ret    

c0018f00 <RTC::get_update_in_progress_flag()>:
c0018f00:	83 ec 18             	sub    esp,0x18
c0018f03:	6a 0a                	push   0xa
c0018f05:	e8 7d db ff ff       	call   c0016a87 <x86ReadCMOS(unsigned char)>
c0018f0a:	83 c4 1c             	add    esp,0x1c
c0018f0d:	0f b6 c0             	movzx  eax,al
c0018f10:	c1 e8 07             	shr    eax,0x7
c0018f13:	c3                   	ret    

c0018f14 <RTC::completeRTCRefresh()>:
c0018f14:	55                   	push   ebp
c0018f15:	57                   	push   edi
c0018f16:	56                   	push   esi
c0018f17:	53                   	push   ebx
c0018f18:	83 ec 3c             	sub    esp,0x3c
c0018f1b:	8b 1d ec 97 02 c0    	mov    ebx,DWORD PTR ds:0xc00297ec
c0018f21:	83 ec 0c             	sub    esp,0xc
c0018f24:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018f28:	e8 d3 ff ff ff       	call   c0018f00 <RTC::get_update_in_progress_flag()>
c0018f2d:	83 c4 10             	add    esp,0x10
c0018f30:	84 c0                	test   al,al
c0018f32:	74 0e                	je     c0018f42 <RTC::completeRTCRefresh()+0x2e>
c0018f34:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018f3a:	3b 05 ec 97 02 c0    	cmp    eax,DWORD PTR ds:0xc00297ec
c0018f40:	73 df                	jae    c0018f21 <RTC::completeRTCRefresh()+0xd>
c0018f42:	83 ec 0c             	sub    esp,0xc
c0018f45:	6a 00                	push   0x0
c0018f47:	e8 3b db ff ff       	call   c0016a87 <x86ReadCMOS(unsigned char)>
c0018f4c:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0018f53:	89 c7                	mov    edi,eax
c0018f55:	e8 2d db ff ff       	call   c0016a87 <x86ReadCMOS(unsigned char)>
c0018f5a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018f61:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018f65:	e8 1d db ff ff       	call   c0016a87 <x86ReadCMOS(unsigned char)>
c0018f6a:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0018f71:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0018f75:	e8 0d db ff ff       	call   c0016a87 <x86ReadCMOS(unsigned char)>
c0018f7a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018f81:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0018f85:	e8 fd da ff ff       	call   c0016a87 <x86ReadCMOS(unsigned char)>
c0018f8a:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c0018f91:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018f95:	e8 ed da ff ff       	call   c0016a87 <x86ReadCMOS(unsigned char)>
c0018f9a:	0f b6 c0             	movzx  eax,al
c0018f9d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0018fa1:	83 c4 10             	add    esp,0x10
c0018fa4:	8b 1d ec 97 02 c0    	mov    ebx,DWORD PTR ds:0xc00297ec
c0018faa:	83 ec 0c             	sub    esp,0xc
c0018fad:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018fb1:	e8 4a ff ff ff       	call   c0018f00 <RTC::get_update_in_progress_flag()>
c0018fb6:	83 c4 10             	add    esp,0x10
c0018fb9:	84 c0                	test   al,al
c0018fbb:	74 0e                	je     c0018fcb <RTC::completeRTCRefresh()+0xb7>
c0018fbd:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018fc3:	3b 05 ec 97 02 c0    	cmp    eax,DWORD PTR ds:0xc00297ec
c0018fc9:	73 df                	jae    c0018faa <RTC::completeRTCRefresh()+0x96>
c0018fcb:	83 ec 0c             	sub    esp,0xc
c0018fce:	6a 00                	push   0x0
c0018fd0:	e8 b2 da ff ff       	call   c0016a87 <x86ReadCMOS(unsigned char)>
c0018fd5:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0018fdc:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018fe0:	e8 a2 da ff ff       	call   c0016a87 <x86ReadCMOS(unsigned char)>
c0018fe5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018fec:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0018ff0:	e8 92 da ff ff       	call   c0016a87 <x86ReadCMOS(unsigned char)>
c0018ff5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0018ffc:	88 c3                	mov    bl,al
c0018ffe:	e8 84 da ff ff       	call   c0016a87 <x86ReadCMOS(unsigned char)>
c0019003:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001900a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001900e:	e8 74 da ff ff       	call   c0016a87 <x86ReadCMOS(unsigned char)>
c0019013:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001901a:	89 c6                	mov    esi,eax
c001901c:	e8 66 da ff ff       	call   c0016a87 <x86ReadCMOS(unsigned char)>
c0019021:	89 f9                	mov    ecx,edi
c0019023:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0019027:	83 c4 10             	add    esp,0x10
c001902a:	0f b6 e8             	movzx  ebp,al
c001902d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019032:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0019036:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001903a:	74 27                	je     c0019063 <RTC::completeRTCRefresh()+0x14f>
c001903c:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0019040:	89 f0                	mov    eax,esi
c0019042:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0019046:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001904a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001904e:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0019052:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0019056:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001905a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001905e:	e9 41 ff ff ff       	jmp    c0018fa4 <RTC::completeRTCRefresh()+0x90>
c0019063:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019068:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001906c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019070:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0019074:	75 c6                	jne    c001903c <RTC::completeRTCRefresh()+0x128>
c0019076:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001907b:	89 f1                	mov    ecx,esi
c001907d:	0f b6 fb             	movzx  edi,bl
c0019080:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0019084:	0f b6 c9             	movzx  ecx,cl
c0019087:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001908b:	89 f1                	mov    ecx,esi
c001908d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019091:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019095:	0f 94 c2             	sete   dl
c0019098:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001909c:	0f 94 c0             	sete   al
c001909f:	21 d0                	and    eax,edx
c00190a1:	31 d2                	xor    edx,edx
c00190a3:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00190a7:	0f 94 c2             	sete   dl
c00190aa:	85 c2                	test   edx,eax
c00190ac:	74 8e                	je     c001903c <RTC::completeRTCRefresh()+0x128>
c00190ae:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00190b2:	75 88                	jne    c001903c <RTC::completeRTCRefresh()+0x128>
c00190b4:	83 ec 0c             	sub    esp,0xc
c00190b7:	6a 0b                	push   0xb
c00190b9:	e8 c9 d9 ff ff       	call   c0016a87 <x86ReadCMOS(unsigned char)>
c00190be:	83 c4 10             	add    esp,0x10
c00190c1:	a8 04                	test   al,0x4
c00190c3:	75 7a                	jne    c001913f <RTC::completeRTCRefresh()+0x22b>
c00190c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00190c9:	c1 ef 04             	shr    edi,0x4
c00190cc:	83 e6 0f             	and    esi,0xf
c00190cf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00190d3:	c1 ed 04             	shr    ebp,0x4
c00190d6:	6b ed 0a             	imul   ebp,ebp,0xa
c00190d9:	c1 ea 04             	shr    edx,0x4
c00190dc:	6b d2 0a             	imul   edx,edx,0xa
c00190df:	83 e1 0f             	and    ecx,0xf
c00190e2:	01 d1                	add    ecx,edx
c00190e4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00190e8:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00190ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00190f0:	c1 ea 04             	shr    edx,0x4
c00190f3:	6b d2 0a             	imul   edx,edx,0xa
c00190f6:	83 e1 0f             	and    ecx,0xf
c00190f9:	01 d1                	add    ecx,edx
c00190fb:	89 fa                	mov    edx,edi
c00190fd:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0019101:	83 e2 07             	and    edx,0x7
c0019104:	89 d9                	mov    ecx,ebx
c0019106:	6b d2 0a             	imul   edx,edx,0xa
c0019109:	83 e1 0f             	and    ecx,0xf
c001910c:	83 e3 80             	and    ebx,0xffffff80
c001910f:	01 d1                	add    ecx,edx
c0019111:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019115:	09 cb                	or     ebx,ecx
c0019117:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001911b:	c1 ea 04             	shr    edx,0x4
c001911e:	6b d2 0a             	imul   edx,edx,0xa
c0019121:	83 e1 0f             	and    ecx,0xf
c0019124:	01 d1                	add    ecx,edx
c0019126:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001912a:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001912e:	c1 ea 04             	shr    edx,0x4
c0019131:	6b d2 0a             	imul   edx,edx,0xa
c0019134:	01 d6                	add    esi,edx
c0019136:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001913a:	83 e2 0f             	and    edx,0xf
c001913d:	01 d5                	add    ebp,edx
c001913f:	a8 02                	test   al,0x2
c0019141:	75 15                	jne    c0019158 <RTC::completeRTCRefresh()+0x244>
c0019143:	f6 c3 80             	test   bl,0x80
c0019146:	74 10                	je     c0019158 <RTC::completeRTCRefresh()+0x244>
c0019148:	83 e3 7f             	and    ebx,0x7f
c001914b:	b9 18 00 00 00       	mov    ecx,0x18
c0019150:	8d 43 0c             	lea    eax,[ebx+0xc]
c0019153:	99                   	cdq    
c0019154:	f7 f9                	idiv   ecx
c0019156:	88 d3                	mov    bl,dl
c0019158:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c001915e:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0019164:	77 06                	ja     c001916c <RTC::completeRTCRefresh()+0x258>
c0019166:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c001916c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019171:	31 c9                	xor    ecx,ecx
c0019173:	31 d2                	xor    edx,edx
c0019175:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019179:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001917d:	89 cd                	mov    ebp,ecx
c001917f:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0019183:	c1 e7 10             	shl    edi,0x10
c0019186:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001918c:	c1 e0 10             	shl    eax,0x10
c001918f:	09 c5                	or     ebp,eax
c0019191:	89 e9                	mov    ecx,ebp
c0019193:	0f b7 c2             	movzx  eax,dx
c0019196:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001919a:	09 f8                	or     eax,edi
c001919c:	89 c2                	mov    edx,eax
c001919e:	50                   	push   eax
c001919f:	50                   	push   eax
c00191a0:	88 d9                	mov    cl,bl
c00191a2:	51                   	push   ecx
c00191a3:	52                   	push   edx
c00191a4:	e8 8c fa fe ff       	call   c0008c35 <KeDatetimeToSeconds(datetime_t)>
c00191a9:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c00191ad:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00191b3:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00191b9:	83 c4 4c             	add    esp,0x4c
c00191bc:	5b                   	pop    ebx
c00191bd:	5e                   	pop    esi
c00191be:	5f                   	pop    edi
c00191bf:	5d                   	pop    ebp
c00191c0:	c3                   	ret    
c00191c1:	90                   	nop

c00191c2 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00191c2:	55                   	push   ebp
c00191c3:	57                   	push   edi
c00191c4:	56                   	push   esi
c00191c5:	53                   	push   ebx
c00191c6:	83 ec 34             	sub    esp,0x34
c00191c9:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00191cd:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00191d1:	6a 00                	push   0x0
c00191d3:	6a 00                	push   0x0
c00191d5:	e8 01 d9 ff ff       	call   c0016adb <x86WriteCMOS(unsigned char, unsigned char)>
c00191da:	5d                   	pop    ebp
c00191db:	89 fb                	mov    ebx,edi
c00191dd:	58                   	pop    eax
c00191de:	6a 00                	push   0x0
c00191e0:	6a 02                	push   0x2
c00191e2:	e8 f4 d8 ff ff       	call   c0016adb <x86WriteCMOS(unsigned char, unsigned char)>
c00191e7:	89 f8                	mov    eax,edi
c00191e9:	89 f9                	mov    ecx,edi
c00191eb:	0f b6 c4             	movzx  eax,ah
c00191ee:	31 d2                	xor    edx,edx
c00191f0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00191f4:	c1 e9 10             	shr    ecx,0x10
c00191f7:	89 f0                	mov    eax,esi
c00191f9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00191fd:	89 f0                	mov    eax,esi
c00191ff:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0019203:	0f b6 c4             	movzx  eax,ah
c0019206:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001920a:	89 f0                	mov    eax,esi
c001920c:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0019210:	c1 e8 10             	shr    eax,0x10
c0019213:	b9 64 00 00 00       	mov    ecx,0x64
c0019218:	f7 f1                	div    ecx
c001921a:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c0019221:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019225:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0019229:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001922d:	e8 55 d8 ff ff       	call   c0016a87 <x86ReadCMOS(unsigned char)>
c0019232:	83 c4 10             	add    esp,0x10
c0019235:	a8 04                	test   al,0x4
c0019237:	89 c5                	mov    ebp,eax
c0019239:	75 6e                	jne    c00192a9 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001923b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001923f:	31 d2                	xor    edx,edx
c0019241:	0f b6 c1             	movzx  eax,cl
c0019244:	b9 0a 00 00 00       	mov    ecx,0xa
c0019249:	f7 f1                	div    ecx
c001924b:	c1 e0 04             	shl    eax,0x4
c001924e:	09 d0                	or     eax,edx
c0019250:	31 d2                	xor    edx,edx
c0019252:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019256:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001925b:	f7 f1                	div    ecx
c001925d:	c1 e0 04             	shl    eax,0x4
c0019260:	09 d0                	or     eax,edx
c0019262:	31 d2                	xor    edx,edx
c0019264:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019268:	0f b6 c3             	movzx  eax,bl
c001926b:	f7 f1                	div    ecx
c001926d:	c1 e0 04             	shl    eax,0x4
c0019270:	09 d0                	or     eax,edx
c0019272:	31 d2                	xor    edx,edx
c0019274:	89 c3                	mov    ebx,eax
c0019276:	89 f0                	mov    eax,esi
c0019278:	0f b6 c0             	movzx  eax,al
c001927b:	f7 f1                	div    ecx
c001927d:	c1 e0 04             	shl    eax,0x4
c0019280:	09 d0                	or     eax,edx
c0019282:	31 d2                	xor    edx,edx
c0019284:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019288:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001928d:	f7 f1                	div    ecx
c001928f:	c1 e0 04             	shl    eax,0x4
c0019292:	09 d0                	or     eax,edx
c0019294:	31 d2                	xor    edx,edx
c0019296:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001929a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001929e:	f7 f1                	div    ecx
c00192a0:	c1 e0 04             	shl    eax,0x4
c00192a3:	09 d0                	or     eax,edx
c00192a5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00192a9:	83 e5 02             	and    ebp,0x2
c00192ac:	75 1e                	jne    c00192cc <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c00192ae:	0f b6 c3             	movzx  eax,bl
c00192b1:	83 f8 0b             	cmp    eax,0xb
c00192b4:	76 10                	jbe    c00192c6 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c00192b6:	8d 53 f4             	lea    edx,[ebx-0xc]
c00192b9:	84 d2                	test   dl,dl
c00192bb:	88 d3                	mov    bl,dl
c00192bd:	75 02                	jne    c00192c1 <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c00192bf:	b3 0c                	mov    bl,0xc
c00192c1:	83 cb 80             	or     ebx,0xffffff80
c00192c4:	eb 06                	jmp    c00192cc <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c00192c6:	85 c0                	test   eax,eax
c00192c8:	75 02                	jne    c00192cc <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c00192ca:	b3 0c                	mov    bl,0xc
c00192cc:	50                   	push   eax
c00192cd:	0f b6 db             	movzx  ebx,bl
c00192d0:	50                   	push   eax
c00192d1:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c00192d6:	52                   	push   edx
c00192d7:	6a 00                	push   0x0
c00192d9:	e8 fd d7 ff ff       	call   c0016adb <x86WriteCMOS(unsigned char, unsigned char)>
c00192de:	5a                   	pop    edx
c00192df:	59                   	pop    ecx
c00192e0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00192e5:	50                   	push   eax
c00192e6:	6a 02                	push   0x2
c00192e8:	e8 ee d7 ff ff       	call   c0016adb <x86WriteCMOS(unsigned char, unsigned char)>
c00192ed:	5e                   	pop    esi
c00192ee:	5f                   	pop    edi
c00192ef:	53                   	push   ebx
c00192f0:	6a 04                	push   0x4
c00192f2:	e8 e4 d7 ff ff       	call   c0016adb <x86WriteCMOS(unsigned char, unsigned char)>
c00192f7:	5d                   	pop    ebp
c00192f8:	58                   	pop    eax
c00192f9:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00192fe:	52                   	push   edx
c00192ff:	6a 07                	push   0x7
c0019301:	e8 d5 d7 ff ff       	call   c0016adb <x86WriteCMOS(unsigned char, unsigned char)>
c0019306:	58                   	pop    eax
c0019307:	5a                   	pop    edx
c0019308:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001930d:	50                   	push   eax
c001930e:	6a 08                	push   0x8
c0019310:	e8 c6 d7 ff ff       	call   c0016adb <x86WriteCMOS(unsigned char, unsigned char)>
c0019315:	59                   	pop    ecx
c0019316:	5b                   	pop    ebx
c0019317:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001931c:	55                   	push   ebp
c001931d:	6a 09                	push   0x9
c001931f:	e8 b7 d7 ff ff       	call   c0016adb <x86WriteCMOS(unsigned char, unsigned char)>
c0019324:	5e                   	pop    esi
c0019325:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019329:	e8 e6 fb ff ff       	call   c0018f14 <RTC::completeRTCRefresh()>
c001932e:	83 c4 3c             	add    esp,0x3c
c0019331:	b0 01                	mov    al,0x1
c0019333:	5b                   	pop    ebx
c0019334:	5e                   	pop    esi
c0019335:	5f                   	pop    edi
c0019336:	5d                   	pop    ebp
c0019337:	c3                   	ret    

c0019338 <rtcIRQHandler(regs*, void*)>:
c0019338:	53                   	push   ebx
c0019339:	83 ec 14             	sub    esp,0x14
c001933c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019340:	6a 0c                	push   0xc
c0019342:	e8 40 d7 ff ff       	call   c0016a87 <x86ReadCMOS(unsigned char)>
c0019347:	83 c4 10             	add    esp,0x10
c001934a:	a8 80                	test   al,0x80
c001934c:	74 24                	je     c0019372 <rtcIRQHandler(regs*, void*)+0x3a>
c001934e:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0019355:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001935c:	66 ff 05 94 c7 02 c0 	inc    WORD PTR ds:0xc002c794
c0019363:	75 0d                	jne    c0019372 <rtcIRQHandler(regs*, void*)+0x3a>
c0019365:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019369:	83 c4 08             	add    esp,0x8
c001936c:	5b                   	pop    ebx
c001936d:	e9 a2 fb ff ff       	jmp    c0018f14 <RTC::completeRTCRefresh()>
c0019372:	83 c4 08             	add    esp,0x8
c0019375:	5b                   	pop    ebx
c0019376:	c3                   	ret    
c0019377:	90                   	nop

c0019378 <RTC::RTC()>:
c0019378:	83 ec 1c             	sub    esp,0x1c
c001937b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001937f:	83 ec 08             	sub    esp,0x8
c0019382:	68 67 33 02 c0       	push   0xc0023367
c0019387:	50                   	push   eax
c0019388:	e8 83 f7 fe ff       	call   c0008b10 <Clock::Clock(char const*)>
c001938d:	83 c4 10             	add    esp,0x10
c0019390:	ba 84 33 02 c0       	mov    edx,0xc0023384
c0019395:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019399:	89 10                	mov    DWORD PTR [eax],edx
c001939b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001939f:	83 ec 0c             	sub    esp,0xc
c00193a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00193a6:	6a 01                	push   0x1
c00193a8:	68 38 93 01 c0       	push   0xc0019338
c00193ad:	6a 08                	push   0x8
c00193af:	50                   	push   eax
c00193b0:	e8 3d fc fe ff       	call   c0008ff2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00193b5:	83 c4 20             	add    esp,0x20
c00193b8:	89 c2                	mov    edx,eax
c00193ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00193be:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00193c4:	fa                   	cli    
c00193c5:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00193ca:	83 c0 01             	add    eax,0x1
c00193cd:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00193d2:	83 ec 0c             	sub    esp,0xc
c00193d5:	6a 0b                	push   0xb
c00193d7:	e8 ab d6 ff ff       	call   c0016a87 <x86ReadCMOS(unsigned char)>
c00193dc:	83 c4 10             	add    esp,0x10
c00193df:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00193e3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00193e7:	83 c8 10             	or     eax,0x10
c00193ea:	0f b6 c0             	movzx  eax,al
c00193ed:	83 ec 08             	sub    esp,0x8
c00193f0:	50                   	push   eax
c00193f1:	6a 0b                	push   0xb
c00193f3:	e8 e3 d6 ff ff       	call   c0016adb <x86WriteCMOS(unsigned char, unsigned char)>
c00193f8:	83 c4 10             	add    esp,0x10
c00193fb:	83 ec 0c             	sub    esp,0xc
c00193fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019402:	e8 0d fb ff ff       	call   c0018f14 <RTC::completeRTCRefresh()>
c0019407:	83 c4 10             	add    esp,0x10
c001940a:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0019412:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0019417:	85 c0                	test   eax,eax
c0019419:	75 01                	jne    c001941c <RTC::RTC()+0xa4>
c001941b:	fb                   	sti    
c001941c:	90                   	nop
c001941d:	83 c4 1c             	add    esp,0x1c
c0019420:	c3                   	ret    
c0019421:	66 90                	xchg   ax,ax
c0019423:	90                   	nop

c0019424 <HalConsoleScroll(int, int)>:
c0019424:	83 ec 10             	sub    esp,0x10
c0019427:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001942f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0019437:	90                   	nop
c0019438:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001943d:	0f 8f e1 00 00 00    	jg     c0019524 <HalConsoleScroll(int, int)+0x100>
c0019443:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001944b:	90                   	nop
c001944c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0019454:	0f 8f be 00 00 00    	jg     c0019518 <HalConsoleScroll(int, int)+0xf4>
c001945a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001945e:	89 d0                	mov    eax,edx
c0019460:	c1 e0 02             	shl    eax,0x2
c0019463:	01 d0                	add    eax,edx
c0019465:	c1 e0 05             	shl    eax,0x5
c0019468:	89 c2                	mov    edx,eax
c001946a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001946e:	01 d0                	add    eax,edx
c0019470:	89 c2                	mov    edx,eax
c0019472:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019476:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0019479:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001947d:	89 d0                	mov    eax,edx
c001947f:	c1 e0 02             	shl    eax,0x2
c0019482:	01 d0                	add    eax,edx
c0019484:	c1 e0 05             	shl    eax,0x5
c0019487:	89 c2                	mov    edx,eax
c0019489:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001948d:	01 d0                	add    eax,edx
c001948f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0019495:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019499:	01 d0                	add    eax,edx
c001949b:	8a 11                	mov    dl,BYTE PTR [ecx]
c001949d:	88 10                	mov    BYTE PTR [eax],dl
c001949f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00194a4:	75 66                	jne    c001950c <HalConsoleScroll(int, int)+0xe8>
c00194a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194aa:	83 e0 01             	and    eax,0x1
c00194ad:	74 39                	je     c00194e8 <HalConsoleScroll(int, int)+0xc4>
c00194af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00194b3:	83 e0 0f             	and    eax,0xf
c00194b6:	88 c2                	mov    dl,al
c00194b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00194bc:	c1 e0 04             	shl    eax,0x4
c00194bf:	09 d0                	or     eax,edx
c00194c1:	88 c1                	mov    cl,al
c00194c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00194c7:	89 d0                	mov    eax,edx
c00194c9:	c1 e0 02             	shl    eax,0x2
c00194cc:	01 d0                	add    eax,edx
c00194ce:	c1 e0 05             	shl    eax,0x5
c00194d1:	89 c2                	mov    edx,eax
c00194d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194d7:	01 d0                	add    eax,edx
c00194d9:	89 c2                	mov    edx,eax
c00194db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00194df:	01 d0                	add    eax,edx
c00194e1:	88 ca                	mov    dl,cl
c00194e3:	88 10                	mov    BYTE PTR [eax],dl
c00194e5:	eb 25                	jmp    c001950c <HalConsoleScroll(int, int)+0xe8>
c00194e7:	90                   	nop
c00194e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00194ec:	89 d0                	mov    eax,edx
c00194ee:	c1 e0 02             	shl    eax,0x2
c00194f1:	01 d0                	add    eax,edx
c00194f3:	c1 e0 05             	shl    eax,0x5
c00194f6:	89 c2                	mov    edx,eax
c00194f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194fc:	01 d0                	add    eax,edx
c00194fe:	89 c2                	mov    edx,eax
c0019500:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019504:	01 d0                	add    eax,edx
c0019506:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0019509:	8d 76 00             	lea    esi,[esi+0x0]
c001950c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0019511:	e9 36 ff ff ff       	jmp    c001944c <HalConsoleScroll(int, int)+0x28>
c0019516:	66 90                	xchg   ax,ax
c0019518:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001951d:	e9 16 ff ff ff       	jmp    c0019438 <HalConsoleScroll(int, int)+0x14>
c0019522:	66 90                	xchg   ax,ax
c0019524:	90                   	nop
c0019525:	83 c4 10             	add    esp,0x10
c0019528:	c3                   	ret    
c0019529:	8d 76 00             	lea    esi,[esi+0x0]

c001952c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001952c:	83 ec 14             	sub    esp,0x14
c001952f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019533:	88 04 24             	mov    BYTE PTR [esp],al
c0019536:	8a 04 24             	mov    al,BYTE PTR [esp]
c0019539:	0f b6 c0             	movzx  eax,al
c001953c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019540:	89 d1                	mov    ecx,edx
c0019542:	83 e1 0f             	and    ecx,0xf
c0019545:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019549:	c1 e2 04             	shl    edx,0x4
c001954c:	0f b6 d2             	movzx  edx,dl
c001954f:	09 ca                	or     edx,ecx
c0019551:	c1 e2 08             	shl    edx,0x8
c0019554:	09 d0                	or     eax,edx
c0019556:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001955b:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0019563:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019567:	89 d0                	mov    eax,edx
c0019569:	c1 e0 02             	shl    eax,0x2
c001956c:	01 d0                	add    eax,edx
c001956e:	c1 e0 04             	shl    eax,0x4
c0019571:	89 c2                	mov    edx,eax
c0019573:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019577:	01 d0                	add    eax,edx
c0019579:	d1 e0                	shl    eax,1
c001957b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001957f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019583:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0019588:	66 89 10             	mov    WORD PTR [eax],dx
c001958b:	90                   	nop
c001958c:	83 c4 14             	add    esp,0x14
c001958f:	c3                   	ret    

c0019590 <HalConsoleCursorUpdate(int, int)>:
c0019590:	83 ec 20             	sub    esp,0x20
c0019593:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019597:	89 c2                	mov    edx,eax
c0019599:	c1 e2 02             	shl    edx,0x2
c001959c:	01 d0                	add    eax,edx
c001959e:	c1 e0 04             	shl    eax,0x4
c00195a1:	89 c2                	mov    edx,eax
c00195a3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00195a7:	01 d0                	add    eax,edx
c00195a9:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00195ae:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00195b5:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00195ba:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00195be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00195c2:	ee                   	out    dx,al
c00195c3:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00195c8:	0f b6 c0             	movzx  eax,al
c00195cb:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00195d2:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00195d6:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00195da:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00195de:	ee                   	out    dx,al
c00195df:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00195e6:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00195eb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00195ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00195f3:	ee                   	out    dx,al
c00195f4:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00195f9:	c1 e8 08             	shr    eax,0x8
c00195fc:	0f b6 c0             	movzx  eax,al
c00195ff:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0019606:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001960a:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001960e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019612:	ee                   	out    dx,al
c0019613:	90                   	nop
c0019614:	83 c4 20             	add    esp,0x20
c0019617:	c3                   	ret    

c0019618 <FAT::getName()>:
c0019618:	b8 b8 33 02 c0       	mov    eax,0xc00233b8
c001961d:	c3                   	ret    
c001961e:	66 90                	xchg   ax,ax

c0019620 <FAT::tell(void*, unsigned long long*)>:
c0019620:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019625:	75 09                	jne    c0019630 <FAT::tell(void*, unsigned long long*)+0x10>
c0019627:	b8 04 00 00 00       	mov    eax,0x4
c001962c:	c3                   	ret    
c001962d:	8d 76 00             	lea    esi,[esi+0x0]
c0019630:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019635:	75 09                	jne    c0019640 <FAT::tell(void*, unsigned long long*)+0x20>
c0019637:	b8 04 00 00 00       	mov    eax,0x4
c001963c:	c3                   	ret    
c001963d:	8d 76 00             	lea    esi,[esi+0x0]
c0019640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019644:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019647:	ba 00 00 00 00       	mov    edx,0x0
c001964c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019650:	89 01                	mov    DWORD PTR [ecx],eax
c0019652:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019655:	b8 00 00 00 00       	mov    eax,0x0
c001965a:	c3                   	ret    
c001965b:	90                   	nop

c001965c <FAT::stat(void*, unsigned long long*)>:
c001965c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019661:	75 09                	jne    c001966c <FAT::stat(void*, unsigned long long*)+0x10>
c0019663:	b8 04 00 00 00       	mov    eax,0x4
c0019668:	c3                   	ret    
c0019669:	8d 76 00             	lea    esi,[esi+0x0]
c001966c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019671:	75 09                	jne    c001967c <FAT::stat(void*, unsigned long long*)+0x20>
c0019673:	b8 04 00 00 00       	mov    eax,0x4
c0019678:	c3                   	ret    
c0019679:	8d 76 00             	lea    esi,[esi+0x0]
c001967c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019680:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019683:	ba 00 00 00 00       	mov    edx,0x0
c0019688:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001968c:	89 01                	mov    DWORD PTR [ecx],eax
c001968e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019691:	b8 00 00 00 00       	mov    eax,0x0
c0019696:	c3                   	ret    
c0019697:	90                   	nop

c0019698 <FAT::~FAT()>:
c0019698:	83 ec 0c             	sub    esp,0xc
c001969b:	ba 04 34 02 c0       	mov    edx,0xc0023404
c00196a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196a4:	89 10                	mov    DWORD PTR [eax],edx
c00196a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196aa:	83 ec 0c             	sub    esp,0xc
c00196ad:	50                   	push   eax
c00196ae:	e8 c7 e6 fe ff       	call   c0007d7a <Filesystem::~Filesystem()>
c00196b3:	83 c4 10             	add    esp,0x10
c00196b6:	90                   	nop
c00196b7:	83 c4 0c             	add    esp,0xc
c00196ba:	c3                   	ret    
c00196bb:	90                   	nop

c00196bc <FAT::~FAT()>:
c00196bc:	83 ec 0c             	sub    esp,0xc
c00196bf:	83 ec 0c             	sub    esp,0xc
c00196c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00196c6:	e8 cd ff ff ff       	call   c0019698 <FAT::~FAT()>
c00196cb:	83 c4 10             	add    esp,0x10
c00196ce:	83 ec 08             	sub    esp,0x8
c00196d1:	6a 08                	push   0x8
c00196d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00196d7:	e8 7f 2f ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c00196dc:	83 c4 10             	add    esp,0x10
c00196df:	83 c4 0c             	add    esp,0xc
c00196e2:	c3                   	ret    
c00196e3:	90                   	nop

c00196e4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00196e4:	83 ec 1c             	sub    esp,0x1c
c00196e7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00196ee:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00196f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00196f7:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c00196fe:	83 f8 ff             	cmp    eax,0xffffffff
c0019701:	75 35                	jne    c0019738 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0019703:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019707:	88 c2                	mov    dl,al
c0019709:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c001970e:	01 d0                	add    eax,edx
c0019710:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019714:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c001971a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001971e:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c0019725:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c001972a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001972e:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c0019735:	eb 19                	jmp    c0019750 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0019737:	90                   	nop
c0019738:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001973c:	88 c2                	mov    dl,al
c001973e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019742:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019749:	01 d0                	add    eax,edx
c001974b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001974f:	90                   	nop
c0019750:	83 ec 04             	sub    esp,0x4
c0019753:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019757:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001975b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001975f:	50                   	push   eax
c0019760:	e8 6f ba fe ff       	call   c00051d4 <f_getlabel>
c0019765:	83 c4 10             	add    esp,0x10
c0019768:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001976c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019771:	75 09                	jne    c001977c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0019773:	b8 00 00 00 00       	mov    eax,0x0
c0019778:	eb 0a                	jmp    c0019784 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001977a:	66 90                	xchg   ax,ax
c001977c:	b8 01 00 00 00       	mov    eax,0x1
c0019781:	8d 76 00             	lea    esi,[esi+0x0]
c0019784:	83 c4 1c             	add    esp,0x1c
c0019787:	c3                   	ret    

c0019788 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019788:	53                   	push   ebx
c0019789:	83 ec 58             	sub    esp,0x58
c001978c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019794:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019798:	b9 00 00 00 00       	mov    ecx,0x0
c001979d:	b8 3c 00 00 00       	mov    eax,0x3c
c00197a2:	83 e0 f8             	and    eax,0xfffffff8
c00197a5:	89 c3                	mov    ebx,eax
c00197a7:	b8 00 00 00 00       	mov    eax,0x0
c00197ac:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c00197b0:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c00197b4:	83 c0 08             	add    eax,0x8
c00197b7:	39 d8                	cmp    eax,ebx
c00197b9:	72 f1                	jb     c00197ac <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c00197bb:	01 c2                	add    edx,eax
c00197bd:	89 0a                	mov    DWORD PTR [edx],ecx
c00197bf:	83 c2 04             	add    edx,0x4
c00197c2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00197c6:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c00197cd:	83 f8 ff             	cmp    eax,0xffffffff
c00197d0:	75 36                	jne    c0019808 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c00197d2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00197d6:	88 c2                	mov    dl,al
c00197d8:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c00197dd:	01 d0                	add    eax,edx
c00197df:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00197e3:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c00197e9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00197ed:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c00197f4:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c00197f9:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00197fd:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c0019804:	eb 1a                	jmp    c0019820 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0019806:	66 90                	xchg   ax,ax
c0019808:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001980c:	88 c2                	mov    dl,al
c001980e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019812:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019819:	01 d0                	add    eax,edx
c001981b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001981f:	90                   	nop
c0019820:	83 ec 08             	sub    esp,0x8
c0019823:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019827:	8d 44 24 18          	lea    eax,[esp+0x18]
c001982b:	50                   	push   eax
c001982c:	e8 3f 70 fe ff       	call   c0000870 <strcat>
c0019831:	83 c4 10             	add    esp,0x10
c0019834:	83 ec 0c             	sub    esp,0xc
c0019837:	8d 44 24 18          	lea    eax,[esp+0x18]
c001983b:	50                   	push   eax
c001983c:	e8 e7 ba fe ff       	call   c0005328 <f_setlabel>
c0019841:	83 c4 10             	add    esp,0x10
c0019844:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019848:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001984d:	75 09                	jne    c0019858 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c001984f:	b8 00 00 00 00       	mov    eax,0x0
c0019854:	eb 0a                	jmp    c0019860 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0019856:	66 90                	xchg   ax,ax
c0019858:	b8 01 00 00 00       	mov    eax,0x1
c001985d:	8d 76 00             	lea    esi,[esi+0x0]
c0019860:	83 c4 58             	add    esp,0x58
c0019863:	5b                   	pop    ebx
c0019864:	c3                   	ret    
c0019865:	90                   	nop
c0019866:	66 90                	xchg   ax,ax

c0019868 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019868:	83 ec 2c             	sub    esp,0x2c
c001986b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019873:	83 ec 08             	sub    esp,0x8
c0019876:	68 dc 33 02 c0       	push   0xc00233dc
c001987b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001987f:	e8 fc 6e fe ff       	call   c0000780 <strcmp>
c0019884:	83 c4 10             	add    esp,0x10
c0019887:	85 c0                	test   eax,eax
c0019889:	0f 94 c0             	sete   al
c001988c:	0f b6 c0             	movzx  eax,al
c001988f:	85 c0                	test   eax,eax
c0019891:	74 0d                	je     c00198a0 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0019893:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001989b:	e9 c0 00 00 00       	jmp    c0019960 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00198a0:	83 ec 08             	sub    esp,0x8
c00198a3:	68 ce 33 02 c0       	push   0xc00233ce
c00198a8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00198ac:	e8 cf 6e fe ff       	call   c0000780 <strcmp>
c00198b1:	83 c4 10             	add    esp,0x10
c00198b4:	85 c0                	test   eax,eax
c00198b6:	0f 94 c0             	sete   al
c00198b9:	0f b6 c0             	movzx  eax,al
c00198bc:	85 c0                	test   eax,eax
c00198be:	74 10                	je     c00198d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c00198c0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00198c8:	e9 93 00 00 00       	jmp    c0019960 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00198cd:	8d 76 00             	lea    esi,[esi+0x0]
c00198d0:	83 ec 08             	sub    esp,0x8
c00198d3:	68 d4 33 02 c0       	push   0xc00233d4
c00198d8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00198dc:	e8 9f 6e fe ff       	call   c0000780 <strcmp>
c00198e1:	83 c4 10             	add    esp,0x10
c00198e4:	85 c0                	test   eax,eax
c00198e6:	0f 94 c0             	sete   al
c00198e9:	0f b6 c0             	movzx  eax,al
c00198ec:	85 c0                	test   eax,eax
c00198ee:	74 0c                	je     c00198fc <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c00198f0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00198f8:	eb 66                	jmp    c0019960 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00198fa:	66 90                	xchg   ax,ax
c00198fc:	83 ec 08             	sub    esp,0x8
c00198ff:	68 dc 0a 02 c0       	push   0xc0020adc
c0019904:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019908:	e8 73 6e fe ff       	call   c0000780 <strcmp>
c001990d:	83 c4 10             	add    esp,0x10
c0019910:	85 c0                	test   eax,eax
c0019912:	0f 94 c0             	sete   al
c0019915:	0f b6 c0             	movzx  eax,al
c0019918:	85 c0                	test   eax,eax
c001991a:	74 0c                	je     c0019928 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001991c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019924:	eb 3a                	jmp    c0019960 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019926:	66 90                	xchg   ax,ax
c0019928:	83 ec 08             	sub    esp,0x8
c001992b:	68 da 33 02 c0       	push   0xc00233da
c0019930:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019934:	e8 47 6e fe ff       	call   c0000780 <strcmp>
c0019939:	83 c4 10             	add    esp,0x10
c001993c:	85 c0                	test   eax,eax
c001993e:	0f 94 c0             	sete   al
c0019941:	0f b6 c0             	movzx  eax,al
c0019944:	85 c0                	test   eax,eax
c0019946:	74 0c                	je     c0019954 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0019948:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019950:	eb 0e                	jmp    c0019960 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019952:	66 90                	xchg   ax,ax
c0019954:	b8 08 00 00 00       	mov    eax,0x8
c0019959:	e9 ea 00 00 00       	jmp    c0019a48 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001995e:	66 90                	xchg   ax,ax
c0019960:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019967:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001996c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019970:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019977:	83 f8 ff             	cmp    eax,0xffffffff
c001997a:	75 34                	jne    c00199b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001997c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019980:	88 c2                	mov    dl,al
c0019982:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019987:	01 d0                	add    eax,edx
c0019989:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001998d:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c0019993:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019997:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c001999e:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c00199a3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00199a7:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c00199ae:	eb 18                	jmp    c00199c8 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c00199b0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00199b4:	88 c2                	mov    dl,al
c00199b6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00199ba:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c00199c1:	01 d0                	add    eax,edx
c00199c3:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00199c7:	90                   	nop
c00199c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00199cc:	88 04 24             	mov    BYTE PTR [esp],al
c00199cf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00199d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199d7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00199df:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00199e4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00199ec:	83 ec 0c             	sub    esp,0xc
c00199ef:	68 00 20 00 00       	push   0x2000
c00199f4:	e8 d7 4e ff ff       	call   c000e8d0 <malloc>
c00199f9:	83 c4 10             	add    esp,0x10
c00199fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019a00:	68 00 20 00 00       	push   0x2000
c0019a05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019a09:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019a0d:	50                   	push   eax
c0019a0e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019a12:	50                   	push   eax
c0019a13:	e8 0d bc fe ff       	call   c0005625 <f_mkfs>
c0019a18:	83 c4 10             	add    esp,0x10
c0019a1b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019a1f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019a24:	75 0a                	jne    c0019a30 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0019a26:	b8 00 00 00 00       	mov    eax,0x0
c0019a2b:	eb 1b                	jmp    c0019a48 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a30:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019a35:	75 09                	jne    c0019a40 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0019a37:	b8 09 00 00 00       	mov    eax,0x9
c0019a3c:	eb 0a                	jmp    c0019a48 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019a3e:	66 90                	xchg   ax,ax
c0019a40:	b8 01 00 00 00       	mov    eax,0x1
c0019a45:	8d 76 00             	lea    esi,[esi+0x0]
c0019a48:	83 c4 2c             	add    esp,0x2c
c0019a4b:	c3                   	ret    

c0019a4c <FAT::tryMount(LogicalDisk*, int)>:
c0019a4c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0019a52:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019a57:	83 f8 14             	cmp    eax,0x14
c0019a5a:	75 18                	jne    c0019a74 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0019a5c:	83 ec 0c             	sub    esp,0xc
c0019a5f:	68 e0 33 02 c0       	push   0xc00233e0
c0019a64:	e8 ad 51 ff ff       	call   c000ec16 <KePanic(char const*)>
c0019a69:	83 c4 10             	add    esp,0x10
c0019a6c:	b0 00                	mov    al,0x0
c0019a6e:	e9 ed 01 00 00       	jmp    c0019c60 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019a73:	90                   	nop
c0019a74:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019a7b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019a81:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019a87:	3d 00 02 00 00       	cmp    eax,0x200
c0019a8c:	74 0a                	je     c0019a98 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0019a8e:	b0 00                	mov    al,0x0
c0019a90:	e9 cb 01 00 00       	jmp    c0019c60 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019a95:	8d 76 00             	lea    esi,[esi+0x0]
c0019a98:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0019aa0:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019aa7:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019aae:	83 f8 ff             	cmp    eax,0xffffffff
c0019ab1:	74 09                	je     c0019abc <FAT::tryMount(LogicalDisk*, int)+0x70>
c0019ab3:	b0 01                	mov    al,0x1
c0019ab5:	e9 a6 01 00 00       	jmp    c0019c60 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019aba:	66 90                	xchg   ax,ax
c0019abc:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0019ac6:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0019ace:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0019ad5:	88 c2                	mov    dl,al
c0019ad7:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019adc:	01 d0                	add    eax,edx
c0019ade:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0019ae5:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c0019aeb:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019af2:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c0019af9:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019afe:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019b05:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c0019b0c:	83 ec 0c             	sub    esp,0xc
c0019b0f:	68 34 02 00 00       	push   0x234
c0019b14:	e8 b7 4d ff ff       	call   c000e8d0 <malloc>
c0019b19:	83 c4 10             	add    esp,0x10
c0019b1c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0019b23:	83 ec 04             	sub    esp,0x4
c0019b26:	6a 00                	push   0x0
c0019b28:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019b2f:	50                   	push   eax
c0019b30:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019b37:	e8 e3 a2 fe ff       	call   c0003e1f <f_mount>
c0019b3c:	83 c4 10             	add    esp,0x10
c0019b3f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019b46:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0019b4e:	74 1c                	je     c0019b6c <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019b50:	83 ec 0c             	sub    esp,0xc
c0019b53:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019b5a:	e8 91 4d ff ff       	call   c000e8f0 <rfree>
c0019b5f:	83 c4 10             	add    esp,0x10
c0019b62:	b0 00                	mov    al,0x0
c0019b64:	e9 f7 00 00 00       	jmp    c0019c60 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019b69:	8d 76 00             	lea    esi,[esi+0x0]
c0019b6c:	83 ec 04             	sub    esp,0x4
c0019b6f:	68 00 01 00 00       	push   0x100
c0019b74:	6a 00                	push   0x0
c0019b76:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019b7d:	50                   	push   eax
c0019b7e:	e8 6d 69 fe ff       	call   c00004f0 <memset>
c0019b83:	83 c4 10             	add    esp,0x10
c0019b86:	83 ec 08             	sub    esp,0x8
c0019b89:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019b90:	50                   	push   eax
c0019b91:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019b98:	50                   	push   eax
c0019b99:	e8 d2 6c fe ff       	call   c0000870 <strcat>
c0019b9e:	83 c4 10             	add    esp,0x10
c0019ba1:	83 ec 08             	sub    esp,0x8
c0019ba4:	68 ee 33 02 c0       	push   0xc00233ee
c0019ba9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019bb0:	50                   	push   eax
c0019bb1:	e8 ba 6c fe ff       	call   c0000870 <strcat>
c0019bb6:	83 c4 10             	add    esp,0x10
c0019bb9:	83 ec 04             	sub    esp,0x4
c0019bbc:	6a 01                	push   0x1
c0019bbe:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0019bc5:	50                   	push   eax
c0019bc6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019bca:	50                   	push   eax
c0019bcb:	e8 b1 a2 fe ff       	call   c0003e81 <f_open>
c0019bd0:	83 c4 10             	add    esp,0x10
c0019bd3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019bda:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0019be1:	85 c0                	test   eax,eax
c0019be3:	74 0b                	je     c0019bf0 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019be5:	78 31                	js     c0019c18 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019be7:	83 e8 04             	sub    eax,0x4
c0019bea:	83 f8 01             	cmp    eax,0x1
c0019bed:	77 29                	ja     c0019c18 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019bef:	90                   	nop
c0019bf0:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019bf8:	83 ec 0c             	sub    esp,0xc
c0019bfb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019bff:	50                   	push   eax
c0019c00:	e8 2c aa fe ff       	call   c0004631 <f_close>
c0019c05:	83 c4 10             	add    esp,0x10
c0019c08:	90                   	nop
c0019c09:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019c11:	85 c0                	test   eax,eax
c0019c13:	74 43                	je     c0019c58 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019c15:	eb 31                	jmp    c0019c48 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0019c17:	90                   	nop
c0019c18:	83 ec 0c             	sub    esp,0xc
c0019c1b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019c22:	e8 c9 4c ff ff       	call   c000e8f0 <rfree>
c0019c27:	83 c4 10             	add    esp,0x10
c0019c2a:	83 ec 04             	sub    esp,0x4
c0019c2d:	6a 00                	push   0x0
c0019c2f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019c36:	50                   	push   eax
c0019c37:	6a 00                	push   0x0
c0019c39:	e8 e1 a1 fe ff       	call   c0003e1f <f_mount>
c0019c3e:	83 c4 10             	add    esp,0x10
c0019c41:	b0 00                	mov    al,0x0
c0019c43:	eb 1b                	jmp    c0019c60 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019c45:	8d 76 00             	lea    esi,[esi+0x0]
c0019c48:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019c4d:	83 c0 01             	add    eax,0x1
c0019c50:	a3 a0 c7 02 c0       	mov    ds:0xc002c7a0,eax
c0019c55:	8d 76 00             	lea    esi,[esi+0x0]
c0019c58:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0019c5f:	90                   	nop
c0019c60:	81 c4 4c 03 00 00    	add    esp,0x34c
c0019c66:	c3                   	ret    
c0019c67:	90                   	nop

c0019c68 <FAT::allocateSwapfile(char const*, int)>:
c0019c68:	55                   	push   ebp
c0019c69:	57                   	push   edi
c0019c6a:	56                   	push   esi
c0019c6b:	53                   	push   ebx
c0019c6c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0019c72:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019c7d:	83 ec 0c             	sub    esp,0xc
c0019c80:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0019c87:	e8 44 4c ff ff       	call   c000e8d0 <malloc>
c0019c8c:	83 c4 10             	add    esp,0x10
c0019c8f:	89 c7                	mov    edi,eax
c0019c91:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0019c96:	83 ec 04             	sub    esp,0x4
c0019c99:	50                   	push   eax
c0019c9a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019ca1:	57                   	push   edi
c0019ca2:	e8 65 e4 fe ff       	call   c000810c <File::File(char const*, Process*)>
c0019ca7:	83 c4 10             	add    esp,0x10
c0019caa:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0019cb1:	83 ec 04             	sub    esp,0x4
c0019cb4:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019cb8:	50                   	push   eax
c0019cb9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019cbd:	50                   	push   eax
c0019cbe:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019cc5:	e8 62 e7 fe ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c0019cca:	83 c4 10             	add    esp,0x10
c0019ccd:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019cd4:	c1 e0 14             	shl    eax,0x14
c0019cd7:	89 c7                	mov    edi,eax
c0019cd9:	89 c5                	mov    ebp,eax
c0019cdb:	c1 fd 1f             	sar    ebp,0x1f
c0019cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ce2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019ce6:	89 f9                	mov    ecx,edi
c0019ce8:	31 c1                	xor    ecx,eax
c0019cea:	89 cb                	mov    ebx,ecx
c0019cec:	89 e9                	mov    ecx,ebp
c0019cee:	31 d1                	xor    ecx,edx
c0019cf0:	89 ce                	mov    esi,ecx
c0019cf2:	89 f0                	mov    eax,esi
c0019cf4:	09 d8                	or     eax,ebx
c0019cf6:	0f 84 9c 00 00 00    	je     c0019d98 <FAT::allocateSwapfile(char const*, int)+0x130>
c0019cfc:	83 ec 0c             	sub    esp,0xc
c0019cff:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019d06:	e8 ed e5 fe ff       	call   c00082f8 <File::unlink()>
c0019d0b:	83 c4 10             	add    esp,0x10
c0019d0e:	83 ec 08             	sub    esp,0x8
c0019d11:	6a 12                	push   0x12
c0019d13:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019d1a:	e8 0b e4 fe ff       	call   c000812a <File::open(FileOpenMode)>
c0019d1f:	83 c4 10             	add    esp,0x10
c0019d22:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019d29:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019d2f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019d36:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019d3d:	c1 e0 14             	shl    eax,0x14
c0019d40:	83 ec 04             	sub    esp,0x4
c0019d43:	6a 01                	push   0x1
c0019d45:	50                   	push   eax
c0019d46:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019d4d:	e8 66 b7 fe ff       	call   c00054b8 <f_expand>
c0019d52:	83 c4 10             	add    esp,0x10
c0019d55:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019d5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d5e:	83 c0 10             	add    eax,0x10
c0019d61:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d63:	83 ec 0c             	sub    esp,0xc
c0019d66:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019d6a:	52                   	push   edx
c0019d6b:	8d 54 24 30          	lea    edx,[esp+0x30]
c0019d6f:	52                   	push   edx
c0019d70:	6a 00                	push   0x0
c0019d72:	68 00 04 00 00       	push   0x400
c0019d77:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019d7e:	ff d0                	call   eax
c0019d80:	83 c4 20             	add    esp,0x20
c0019d83:	83 ec 0c             	sub    esp,0xc
c0019d86:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019d8d:	e8 f6 e3 fe ff       	call   c0008188 <File::close()>
c0019d92:	83 c4 10             	add    esp,0x10
c0019d95:	8d 76 00             	lea    esi,[esi+0x0]
c0019d98:	83 ec 08             	sub    esp,0x8
c0019d9b:	6a 01                	push   0x1
c0019d9d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019da4:	e8 81 e3 fe ff       	call   c000812a <File::open(FileOpenMode)>
c0019da9:	83 c4 10             	add    esp,0x10
c0019dac:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019db3:	8b 00                	mov    eax,DWORD PTR [eax]
c0019db5:	83 c0 0c             	add    eax,0xc
c0019db8:	8b 00                	mov    eax,DWORD PTR [eax]
c0019dba:	83 ec 0c             	sub    esp,0xc
c0019dbd:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019dc1:	52                   	push   edx
c0019dc2:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0019dc6:	52                   	push   edx
c0019dc7:	6a 00                	push   0x0
c0019dc9:	6a 04                	push   0x4
c0019dcb:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019dd2:	ff d0                	call   eax
c0019dd4:	83 c4 20             	add    esp,0x20
c0019dd7:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019dde:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019de4:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019deb:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0019df2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019df5:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019dfc:	83 ec 0c             	sub    esp,0xc
c0019dff:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019e06:	e8 7d e3 fe ff       	call   c0008188 <File::close()>
c0019e0b:	83 c4 10             	add    esp,0x10
c0019e0e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019e15:	ba 00 00 00 00       	mov    edx,0x0
c0019e1a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019e20:	5b                   	pop    ebx
c0019e21:	5e                   	pop    esi
c0019e22:	5f                   	pop    edi
c0019e23:	5d                   	pop    ebp
c0019e24:	c3                   	ret    
c0019e25:	90                   	nop
c0019e26:	66 90                	xchg   ax,ax

c0019e28 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019e28:	57                   	push   edi
c0019e29:	56                   	push   esi
c0019e2a:	53                   	push   ebx
c0019e2b:	81 ec 50 02 00 00    	sub    esp,0x250
c0019e31:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019e39:	74 0d                	je     c0019e48 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0019e3b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0019e43:	75 0f                	jne    c0019e54 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019e45:	8d 76 00             	lea    esi,[esi+0x0]
c0019e48:	b8 04 00 00 00       	mov    eax,0x4
c0019e4d:	e9 3a 01 00 00       	jmp    c0019f8c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019e52:	66 90                	xchg   ax,ax
c0019e54:	83 ec 08             	sub    esp,0x8
c0019e57:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019e5e:	50                   	push   eax
c0019e5f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0019e66:	e8 92 aa fe ff       	call   c00048fd <f_readdir>
c0019e6b:	83 c4 10             	add    esp,0x10
c0019e6e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019e75:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019e7c:	83 ec 0c             	sub    esp,0xc
c0019e7f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019e86:	83 c0 16             	add    eax,0x16
c0019e89:	50                   	push   eax
c0019e8a:	e8 f1 66 fe ff       	call   c0000580 <strlen>
c0019e8f:	83 c4 10             	add    esp,0x10
c0019e92:	ba 00 00 00 00       	mov    edx,0x0
c0019e97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019e9b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019e9f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019ea6:	0f b6 c0             	movzx  eax,al
c0019ea9:	83 e0 10             	and    eax,0x10
c0019eac:	74 0a                	je     c0019eb8 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0019eae:	b8 02 00 00 00       	mov    eax,0x2
c0019eb3:	eb 0b                	jmp    c0019ec0 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019eb5:	8d 76 00             	lea    esi,[esi+0x0]
c0019eb8:	b8 01 00 00 00       	mov    eax,0x1
c0019ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0019ec0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019ec4:	83 ec 08             	sub    esp,0x8
c0019ec7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019ece:	83 c0 16             	add    eax,0x16
c0019ed1:	50                   	push   eax
c0019ed2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ed6:	83 c0 10             	add    eax,0x10
c0019ed9:	50                   	push   eax
c0019eda:	e8 71 67 fe ff       	call   c0000650 <strcpy>
c0019edf:	83 c4 10             	add    esp,0x10
c0019ee2:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019ee9:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019ef0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019ef4:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0019efb:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0019f02:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019f09:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019f10:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0019f17:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0019f1e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019f25:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019f2c:	89 c6                	mov    esi,eax
c0019f2e:	89 d7                	mov    edi,edx
c0019f30:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019f32:	89 c8                	mov    eax,ecx
c0019f34:	89 fa                	mov    edx,edi
c0019f36:	89 f3                	mov    ebx,esi
c0019f38:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0019f3f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0019f46:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019f4d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019f54:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019f5a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019f61:	0f be c0             	movsx  eax,al
c0019f64:	85 c0                	test   eax,eax
c0019f66:	75 08                	jne    c0019f70 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019f68:	b8 07 00 00 00       	mov    eax,0x7
c0019f6d:	eb 1d                	jmp    c0019f8c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019f6f:	90                   	nop
c0019f70:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0019f77:	85 c0                	test   eax,eax
c0019f79:	75 09                	jne    c0019f84 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0019f7b:	b8 00 00 00 00       	mov    eax,0x0
c0019f80:	eb 0a                	jmp    c0019f8c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019f82:	66 90                	xchg   ax,ax
c0019f84:	b8 01 00 00 00       	mov    eax,0x1
c0019f89:	8d 76 00             	lea    esi,[esi+0x0]
c0019f8c:	81 c4 50 02 00 00    	add    esp,0x250
c0019f92:	5b                   	pop    ebx
c0019f93:	5e                   	pop    esi
c0019f94:	5f                   	pop    edi
c0019f95:	c3                   	ret    
c0019f96:	66 90                	xchg   ax,ax

c0019f98 <FAT::read(void*, unsigned long, void*, int*)>:
c0019f98:	83 ec 1c             	sub    esp,0x1c
c0019f9b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019fa0:	74 0a                	je     c0019fac <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0019fa2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019fa7:	75 0b                	jne    c0019fb4 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0019fac:	b8 04 00 00 00       	mov    eax,0x4
c0019fb1:	eb 41                	jmp    c0019ff4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019fb3:	90                   	nop
c0019fb4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019fb8:	50                   	push   eax
c0019fb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019fbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019fc1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019fc5:	e8 7a a1 fe ff       	call   c0004144 <f_read>
c0019fca:	83 c4 10             	add    esp,0x10
c0019fcd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019fd1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019fd5:	89 c2                	mov    edx,eax
c0019fd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019fdb:	89 10                	mov    DWORD PTR [eax],edx
c0019fdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019fe1:	85 c0                	test   eax,eax
c0019fe3:	75 07                	jne    c0019fec <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019fe5:	b8 00 00 00 00       	mov    eax,0x0
c0019fea:	eb 08                	jmp    c0019ff4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019fec:	b8 01 00 00 00       	mov    eax,0x1
c0019ff1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ff4:	83 c4 1c             	add    esp,0x1c
c0019ff7:	c3                   	ret    

c0019ff8 <FAT::write(void*, unsigned long, void*, int*)>:
c0019ff8:	83 ec 1c             	sub    esp,0x1c
c0019ffb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a000:	74 0a                	je     c001a00c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001a002:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a007:	75 0b                	jne    c001a014 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001a009:	8d 76 00             	lea    esi,[esi+0x0]
c001a00c:	b8 04 00 00 00       	mov    eax,0x4
c001a011:	eb 41                	jmp    c001a054 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001a013:	90                   	nop
c001a014:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a018:	50                   	push   eax
c001a019:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a01d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a021:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a025:	e8 fb a2 fe ff       	call   c0004325 <f_write>
c001a02a:	83 c4 10             	add    esp,0x10
c001a02d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a031:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a035:	89 c2                	mov    edx,eax
c001a037:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a03b:	89 10                	mov    DWORD PTR [eax],edx
c001a03d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a041:	85 c0                	test   eax,eax
c001a043:	75 07                	jne    c001a04c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001a045:	b8 00 00 00 00       	mov    eax,0x0
c001a04a:	eb 08                	jmp    c001a054 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001a04c:	b8 01 00 00 00       	mov    eax,0x1
c001a051:	8d 76 00             	lea    esi,[esi+0x0]
c001a054:	83 c4 1c             	add    esp,0x1c
c001a057:	c3                   	ret    

c001a058 <FAT::close(void*)>:
c001a058:	83 ec 1c             	sub    esp,0x1c
c001a05b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a060:	75 0a                	jne    c001a06c <FAT::close(void*)+0x14>
c001a062:	b8 04 00 00 00       	mov    eax,0x4
c001a067:	eb 3f                	jmp    c001a0a8 <FAT::close(void*)+0x50>
c001a069:	8d 76 00             	lea    esi,[esi+0x0]
c001a06c:	83 ec 0c             	sub    esp,0xc
c001a06f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a073:	e8 b9 a5 fe ff       	call   c0004631 <f_close>
c001a078:	83 c4 10             	add    esp,0x10
c001a07b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a07f:	83 ec 0c             	sub    esp,0xc
c001a082:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a086:	e8 55 48 ff ff       	call   c000e8e0 <free>
c001a08b:	83 c4 10             	add    esp,0x10
c001a08e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a092:	85 c0                	test   eax,eax
c001a094:	75 0a                	jne    c001a0a0 <FAT::close(void*)+0x48>
c001a096:	b8 00 00 00 00       	mov    eax,0x0
c001a09b:	eb 0b                	jmp    c001a0a8 <FAT::close(void*)+0x50>
c001a09d:	8d 76 00             	lea    esi,[esi+0x0]
c001a0a0:	b8 01 00 00 00       	mov    eax,0x1
c001a0a5:	8d 76 00             	lea    esi,[esi+0x0]
c001a0a8:	83 c4 1c             	add    esp,0x1c
c001a0ab:	c3                   	ret    

c001a0ac <FAT::closeDir(void*)>:
c001a0ac:	83 ec 1c             	sub    esp,0x1c
c001a0af:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a0b4:	75 0a                	jne    c001a0c0 <FAT::closeDir(void*)+0x14>
c001a0b6:	b8 04 00 00 00       	mov    eax,0x4
c001a0bb:	eb 3f                	jmp    c001a0fc <FAT::closeDir(void*)+0x50>
c001a0bd:	8d 76 00             	lea    esi,[esi+0x0]
c001a0c0:	83 ec 0c             	sub    esp,0xc
c001a0c3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a0c7:	e8 0f a8 fe ff       	call   c00048db <f_closedir>
c001a0cc:	83 c4 10             	add    esp,0x10
c001a0cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a0d3:	83 ec 0c             	sub    esp,0xc
c001a0d6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a0da:	e8 01 48 ff ff       	call   c000e8e0 <free>
c001a0df:	83 c4 10             	add    esp,0x10
c001a0e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0e6:	85 c0                	test   eax,eax
c001a0e8:	75 0a                	jne    c001a0f4 <FAT::closeDir(void*)+0x48>
c001a0ea:	b8 00 00 00 00       	mov    eax,0x0
c001a0ef:	eb 0b                	jmp    c001a0fc <FAT::closeDir(void*)+0x50>
c001a0f1:	8d 76 00             	lea    esi,[esi+0x0]
c001a0f4:	b8 01 00 00 00       	mov    eax,0x1
c001a0f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a0fc:	83 c4 1c             	add    esp,0x1c
c001a0ff:	c3                   	ret    

c001a100 <FAT::truncate(void*, unsigned long long)>:
c001a100:	83 ec 2c             	sub    esp,0x2c
c001a103:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a107:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a10b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a10f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a113:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a118:	75 0a                	jne    c001a124 <FAT::truncate(void*, unsigned long long)+0x24>
c001a11a:	b8 04 00 00 00       	mov    eax,0x4
c001a11f:	eb 47                	jmp    c001a168 <FAT::truncate(void*, unsigned long long)+0x68>
c001a121:	8d 76 00             	lea    esi,[esi+0x0]
c001a124:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a128:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a12b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a12f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a137:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a13b:	83 ec 08             	sub    esp,0x8
c001a13e:	50                   	push   eax
c001a13f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a143:	e8 18 a5 fe ff       	call   c0004660 <f_lseek>
c001a148:	83 c4 10             	add    esp,0x10
c001a14b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a14f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a153:	85 c0                	test   eax,eax
c001a155:	75 09                	jne    c001a160 <FAT::truncate(void*, unsigned long long)+0x60>
c001a157:	b8 00 00 00 00       	mov    eax,0x0
c001a15c:	eb 0a                	jmp    c001a168 <FAT::truncate(void*, unsigned long long)+0x68>
c001a15e:	66 90                	xchg   ax,ax
c001a160:	b8 01 00 00 00       	mov    eax,0x1
c001a165:	8d 76 00             	lea    esi,[esi+0x0]
c001a168:	83 c4 2c             	add    esp,0x2c
c001a16b:	c3                   	ret    

c001a16c <FAT::seek(void*, unsigned long long)>:
c001a16c:	83 ec 2c             	sub    esp,0x2c
c001a16f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a173:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a177:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a17b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a17f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a184:	75 0a                	jne    c001a190 <FAT::seek(void*, unsigned long long)+0x24>
c001a186:	b8 04 00 00 00       	mov    eax,0x4
c001a18b:	eb 33                	jmp    c001a1c0 <FAT::seek(void*, unsigned long long)+0x54>
c001a18d:	8d 76 00             	lea    esi,[esi+0x0]
c001a190:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a194:	83 ec 08             	sub    esp,0x8
c001a197:	50                   	push   eax
c001a198:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a19c:	e8 bf a4 fe ff       	call   c0004660 <f_lseek>
c001a1a1:	83 c4 10             	add    esp,0x10
c001a1a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a1a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a1ac:	85 c0                	test   eax,eax
c001a1ae:	75 08                	jne    c001a1b8 <FAT::seek(void*, unsigned long long)+0x4c>
c001a1b0:	b8 00 00 00 00       	mov    eax,0x0
c001a1b5:	eb 09                	jmp    c001a1c0 <FAT::seek(void*, unsigned long long)+0x54>
c001a1b7:	90                   	nop
c001a1b8:	b8 01 00 00 00       	mov    eax,0x1
c001a1bd:	8d 76 00             	lea    esi,[esi+0x0]
c001a1c0:	83 c4 2c             	add    esp,0x2c
c001a1c3:	c3                   	ret    

c001a1c4 <fatWrapperReadDisk>:
c001a1c4:	53                   	push   ebx
c001a1c5:	83 ec 18             	sub    esp,0x18
c001a1c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a1cc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a1d0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a1d5:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001a1dc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a1e0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a1e4:	ba 00 00 00 00       	mov    edx,0x0
c001a1e9:	83 ec 0c             	sub    esp,0xc
c001a1ec:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a1f0:	53                   	push   ebx
c001a1f1:	52                   	push   edx
c001a1f2:	50                   	push   eax
c001a1f3:	51                   	push   ecx
c001a1f4:	e8 d7 fe fe ff       	call   c000a0d0 <LogicalDisk::read(unsigned long long, int, void*)>
c001a1f9:	83 c4 20             	add    esp,0x20
c001a1fc:	83 c4 18             	add    esp,0x18
c001a1ff:	5b                   	pop    ebx
c001a200:	c3                   	ret    
c001a201:	8d 76 00             	lea    esi,[esi+0x0]

c001a204 <fatWrapperWriteDisk>:
c001a204:	53                   	push   ebx
c001a205:	83 ec 18             	sub    esp,0x18
c001a208:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a20c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a210:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a215:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001a21c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a220:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a224:	ba 00 00 00 00       	mov    edx,0x0
c001a229:	83 ec 0c             	sub    esp,0xc
c001a22c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a230:	53                   	push   ebx
c001a231:	52                   	push   edx
c001a232:	50                   	push   eax
c001a233:	51                   	push   ecx
c001a234:	e8 03 ff fe ff       	call   c000a13c <LogicalDisk::write(unsigned long long, int, void*)>
c001a239:	83 c4 20             	add    esp,0x20
c001a23c:	83 c4 18             	add    esp,0x18
c001a23f:	5b                   	pop    ebx
c001a240:	c3                   	ret    
c001a241:	8d 76 00             	lea    esi,[esi+0x0]

c001a244 <fatWrapperIoctl>:
c001a244:	53                   	push   ebx
c001a245:	83 ec 28             	sub    esp,0x28
c001a248:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a24c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a250:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a254:	88 d0                	mov    al,dl
c001a256:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a25a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a25f:	83 f8 02             	cmp    eax,0x2
c001a262:	75 34                	jne    c001a298 <fatWrapperIoctl+0x54>
c001a264:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a268:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a26c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a271:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c001a278:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a27e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a284:	89 c2                	mov    edx,eax
c001a286:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a28a:	66 89 10             	mov    WORD PTR [eax],dx
c001a28d:	b8 00 00 00 00       	mov    eax,0x0
c001a292:	e9 c5 00 00 00       	jmp    c001a35c <fatWrapperIoctl+0x118>
c001a297:	90                   	nop
c001a298:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a29d:	83 f8 01             	cmp    eax,0x1
c001a2a0:	75 6a                	jne    c001a30c <fatWrapperIoctl+0xc8>
c001a2a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a2a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a2aa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a2af:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c001a2b6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a2bc:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a2c2:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a2c8:	89 c8                	mov    eax,ecx
c001a2ca:	89 da                	mov    edx,ebx
c001a2cc:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a2d0:	c1 e0 0a             	shl    eax,0xa
c001a2d3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001a2d8:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c001a2df:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a2e5:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a2eb:	89 cb                	mov    ebx,ecx
c001a2ed:	c1 fb 1f             	sar    ebx,0x1f
c001a2f0:	53                   	push   ebx
c001a2f1:	51                   	push   ecx
c001a2f2:	52                   	push   edx
c001a2f3:	50                   	push   eax
c001a2f4:	e8 eb 59 00 00       	call   c001fce4 <__udivdi3>
c001a2f9:	83 c4 10             	add    esp,0x10
c001a2fc:	89 c2                	mov    edx,eax
c001a2fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a302:	89 10                	mov    DWORD PTR [eax],edx
c001a304:	b8 00 00 00 00       	mov    eax,0x0
c001a309:	eb 51                	jmp    c001a35c <fatWrapperIoctl+0x118>
c001a30b:	90                   	nop
c001a30c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a311:	85 c0                	test   eax,eax
c001a313:	75 07                	jne    c001a31c <fatWrapperIoctl+0xd8>
c001a315:	b8 00 00 00 00       	mov    eax,0x0
c001a31a:	eb 40                	jmp    c001a35c <fatWrapperIoctl+0x118>
c001a31c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a321:	83 f8 03             	cmp    eax,0x3
c001a324:	75 1a                	jne    c001a340 <fatWrapperIoctl+0xfc>
c001a326:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a32a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a32e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a332:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a338:	b8 00 00 00 00       	mov    eax,0x0
c001a33d:	eb 1d                	jmp    c001a35c <fatWrapperIoctl+0x118>
c001a33f:	90                   	nop
c001a340:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a345:	83 f8 04             	cmp    eax,0x4
c001a348:	75 0a                	jne    c001a354 <fatWrapperIoctl+0x110>
c001a34a:	b8 00 00 00 00       	mov    eax,0x0
c001a34f:	eb 0b                	jmp    c001a35c <fatWrapperIoctl+0x118>
c001a351:	8d 76 00             	lea    esi,[esi+0x0]
c001a354:	b8 04 00 00 00       	mov    eax,0x4
c001a359:	8d 76 00             	lea    esi,[esi+0x0]
c001a35c:	83 c4 28             	add    esp,0x28
c001a35f:	5b                   	pop    ebx
c001a360:	c3                   	ret    
c001a361:	90                   	nop
c001a362:	66 90                	xchg   ax,ax

c001a364 <FAT::FAT()>:
c001a364:	83 ec 1c             	sub    esp,0x1c
c001a367:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a36b:	83 ec 0c             	sub    esp,0xc
c001a36e:	50                   	push   eax
c001a36f:	e8 e2 d9 fe ff       	call   c0007d56 <Filesystem::Filesystem()>
c001a374:	83 c4 10             	add    esp,0x10
c001a377:	ba 04 34 02 c0       	mov    edx,0xc0023404
c001a37c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a380:	89 10                	mov    DWORD PTR [eax],edx
c001a382:	c7 05 a0 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c7a0,0x0
c001a38c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a394:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a399:	7f 19                	jg     c001a3b4 <FAT::FAT()+0x50>
c001a39b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a39f:	c7 04 85 c0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3840],0xffffffff
c001a3aa:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a3af:	eb e3                	jmp    c001a394 <FAT::FAT()+0x30>
c001a3b1:	8d 76 00             	lea    esi,[esi+0x0]
c001a3b4:	90                   	nop
c001a3b5:	83 c4 1c             	add    esp,0x1c
c001a3b8:	c3                   	ret    
c001a3b9:	90                   	nop
c001a3ba:	66 90                	xchg   ax,ax

c001a3bc <FAT::fixFilepath(char*)>:
c001a3bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3c0:	8a 00                	mov    al,BYTE PTR [eax]
c001a3c2:	0f be c0             	movsx  eax,al
c001a3c5:	83 f8 40             	cmp    eax,0x40
c001a3c8:	7e 2e                	jle    c001a3f8 <FAT::fixFilepath(char*)+0x3c>
c001a3ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3ce:	8a 00                	mov    al,BYTE PTR [eax]
c001a3d0:	83 e8 41             	sub    eax,0x41
c001a3d3:	88 c2                	mov    dl,al
c001a3d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3d9:	88 10                	mov    BYTE PTR [eax],dl
c001a3db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3df:	8a 00                	mov    al,BYTE PTR [eax]
c001a3e1:	0f be c0             	movsx  eax,al
c001a3e4:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c001a3eb:	83 c0 30             	add    eax,0x30
c001a3ee:	88 c2                	mov    dl,al
c001a3f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3f4:	88 10                	mov    BYTE PTR [eax],dl
c001a3f6:	66 90                	xchg   ax,ax
c001a3f8:	90                   	nop
c001a3f9:	c3                   	ret    
c001a3fa:	66 90                	xchg   ax,ax

c001a3fc <FAT::open(char const*, void**, FileOpenMode)>:
c001a3fc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a402:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a40a:	74 0c                	je     c001a418 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001a40c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a414:	75 0e                	jne    c001a424 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001a416:	66 90                	xchg   ax,ax
c001a418:	b8 04 00 00 00       	mov    eax,0x4
c001a41d:	e9 46 01 00 00       	jmp    c001a568 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001a422:	66 90                	xchg   ax,ax
c001a424:	83 ec 08             	sub    esp,0x8
c001a427:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a42e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a432:	50                   	push   eax
c001a433:	e8 18 62 fe ff       	call   c0000650 <strcpy>
c001a438:	83 c4 10             	add    esp,0x10
c001a43b:	83 ec 08             	sub    esp,0x8
c001a43e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a442:	50                   	push   eax
c001a443:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a44a:	e8 6d ff ff ff       	call   c001a3bc <FAT::fixFilepath(char*)>
c001a44f:	83 c4 10             	add    esp,0x10
c001a452:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001a45a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a461:	83 e0 01             	and    eax,0x1
c001a464:	74 12                	je     c001a478 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001a466:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a46d:	83 c8 01             	or     eax,0x1
c001a470:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a477:	90                   	nop
c001a478:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a47f:	83 e0 04             	and    eax,0x4
c001a482:	74 24                	je     c001a4a8 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001a484:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a48b:	83 c8 30             	or     eax,0x30
c001a48e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a495:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a49c:	83 c8 02             	or     eax,0x2
c001a49f:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a4a6:	66 90                	xchg   ax,ax
c001a4a8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a4af:	83 e0 02             	and    eax,0x2
c001a4b2:	74 14                	je     c001a4c8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001a4b4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a4bb:	83 c8 02             	or     eax,0x2
c001a4be:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a4c5:	8d 76 00             	lea    esi,[esi+0x0]
c001a4c8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a4cf:	83 e0 08             	and    eax,0x8
c001a4d2:	74 14                	je     c001a4e8 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001a4d4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a4db:	83 c8 04             	or     eax,0x4
c001a4de:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a4e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a4e8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a4ef:	83 e0 10             	and    eax,0x10
c001a4f2:	74 14                	je     c001a508 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001a4f4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a4fb:	83 c8 08             	or     eax,0x8
c001a4fe:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a505:	8d 76 00             	lea    esi,[esi+0x0]
c001a508:	83 ec 0c             	sub    esp,0xc
c001a50b:	68 28 02 00 00       	push   0x228
c001a510:	e8 bb 43 ff ff       	call   c000e8d0 <malloc>
c001a515:	83 c4 10             	add    esp,0x10
c001a518:	89 c2                	mov    edx,eax
c001a51a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a521:	89 10                	mov    DWORD PTR [eax],edx
c001a523:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001a52b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a532:	8b 00                	mov    eax,DWORD PTR [eax]
c001a534:	83 ec 04             	sub    esp,0x4
c001a537:	52                   	push   edx
c001a538:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a53c:	52                   	push   edx
c001a53d:	50                   	push   eax
c001a53e:	e8 3e 99 fe ff       	call   c0003e81 <f_open>
c001a543:	83 c4 10             	add    esp,0x10
c001a546:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001a54d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001a555:	74 09                	je     c001a560 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001a557:	b8 01 00 00 00       	mov    eax,0x1
c001a55c:	eb 0a                	jmp    c001a568 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001a55e:	66 90                	xchg   ax,ax
c001a560:	b8 00 00 00 00       	mov    eax,0x0
c001a565:	8d 76 00             	lea    esi,[esi+0x0]
c001a568:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a56e:	c3                   	ret    
c001a56f:	90                   	nop

c001a570 <FAT::openDir(char const*, void**)>:
c001a570:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a576:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a57e:	74 0c                	je     c001a58c <FAT::openDir(char const*, void**)+0x1c>
c001a580:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a588:	75 0e                	jne    c001a598 <FAT::openDir(char const*, void**)+0x28>
c001a58a:	66 90                	xchg   ax,ax
c001a58c:	b8 04 00 00 00       	mov    eax,0x4
c001a591:	e9 82 00 00 00       	jmp    c001a618 <FAT::openDir(char const*, void**)+0xa8>
c001a596:	66 90                	xchg   ax,ax
c001a598:	83 ec 08             	sub    esp,0x8
c001a59b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a5a2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a5a6:	50                   	push   eax
c001a5a7:	e8 a4 60 fe ff       	call   c0000650 <strcpy>
c001a5ac:	83 c4 10             	add    esp,0x10
c001a5af:	83 ec 08             	sub    esp,0x8
c001a5b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a5b6:	50                   	push   eax
c001a5b7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a5be:	e8 f9 fd ff ff       	call   c001a3bc <FAT::fixFilepath(char*)>
c001a5c3:	83 c4 10             	add    esp,0x10
c001a5c6:	83 ec 0c             	sub    esp,0xc
c001a5c9:	6a 30                	push   0x30
c001a5cb:	e8 00 43 ff ff       	call   c000e8d0 <malloc>
c001a5d0:	83 c4 10             	add    esp,0x10
c001a5d3:	89 c2                	mov    edx,eax
c001a5d5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a5dc:	89 10                	mov    DWORD PTR [eax],edx
c001a5de:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a5e5:	8b 00                	mov    eax,DWORD PTR [eax]
c001a5e7:	83 ec 08             	sub    esp,0x8
c001a5ea:	8d 54 24 14          	lea    edx,[esp+0x14]
c001a5ee:	52                   	push   edx
c001a5ef:	50                   	push   eax
c001a5f0:	e8 1b a2 fe ff       	call   c0004810 <f_opendir>
c001a5f5:	83 c4 10             	add    esp,0x10
c001a5f8:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a5ff:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001a607:	74 07                	je     c001a610 <FAT::openDir(char const*, void**)+0xa0>
c001a609:	b8 01 00 00 00       	mov    eax,0x1
c001a60e:	eb 08                	jmp    c001a618 <FAT::openDir(char const*, void**)+0xa8>
c001a610:	b8 00 00 00 00       	mov    eax,0x0
c001a615:	8d 76 00             	lea    esi,[esi+0x0]
c001a618:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a61e:	c3                   	ret    
c001a61f:	90                   	nop

c001a620 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001a620:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a626:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001a62e:	75 0c                	jne    c001a63c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001a630:	b8 04 00 00 00       	mov    eax,0x4
c001a635:	e9 d6 00 00 00       	jmp    c001a710 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a63a:	66 90                	xchg   ax,ax
c001a63c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001a644:	75 0a                	jne    c001a650 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001a646:	b8 04 00 00 00       	mov    eax,0x4
c001a64b:	e9 c0 00 00 00       	jmp    c001a710 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a650:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001a658:	75 0a                	jne    c001a664 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001a65a:	b8 04 00 00 00       	mov    eax,0x4
c001a65f:	e9 ac 00 00 00       	jmp    c001a710 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a664:	83 ec 08             	sub    esp,0x8
c001a667:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a66e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a675:	50                   	push   eax
c001a676:	e8 d5 5f fe ff       	call   c0000650 <strcpy>
c001a67b:	83 c4 10             	add    esp,0x10
c001a67e:	83 ec 08             	sub    esp,0x8
c001a681:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a688:	50                   	push   eax
c001a689:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a690:	e8 27 fd ff ff       	call   c001a3bc <FAT::fixFilepath(char*)>
c001a695:	83 c4 10             	add    esp,0x10
c001a698:	83 ec 08             	sub    esp,0x8
c001a69b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a69f:	50                   	push   eax
c001a6a0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a6a7:	50                   	push   eax
c001a6a8:	e8 e2 a2 fe ff       	call   c000498f <f_stat>
c001a6ad:	83 c4 10             	add    esp,0x10
c001a6b0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a6b7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a6be:	85 c0                	test   eax,eax
c001a6c0:	74 0a                	je     c001a6cc <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001a6c2:	83 f8 04             	cmp    eax,0x4
c001a6c5:	74 39                	je     c001a700 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a6c7:	eb 3f                	jmp    c001a708 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001a6c9:	8d 76 00             	lea    esi,[esi+0x0]
c001a6cc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a6d0:	0f b6 c0             	movzx  eax,al
c001a6d3:	83 e0 10             	and    eax,0x10
c001a6d6:	0f 95 c2             	setne  dl
c001a6d9:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001a6e0:	88 10                	mov    BYTE PTR [eax],dl
c001a6e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6e6:	ba 00 00 00 00       	mov    edx,0x0
c001a6eb:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a6f2:	89 01                	mov    DWORD PTR [ecx],eax
c001a6f4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a6f7:	b8 00 00 00 00       	mov    eax,0x0
c001a6fc:	eb 12                	jmp    c001a710 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a6fe:	66 90                	xchg   ax,ax
c001a700:	b8 02 00 00 00       	mov    eax,0x2
c001a705:	eb 09                	jmp    c001a710 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a707:	90                   	nop
c001a708:	b8 01 00 00 00       	mov    eax,0x1
c001a70d:	8d 76 00             	lea    esi,[esi+0x0]
c001a710:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a716:	c3                   	ret    
c001a717:	90                   	nop

c001a718 <FAT::unlink(char const*)>:
c001a718:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a71e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a726:	75 08                	jne    c001a730 <FAT::unlink(char const*)+0x18>
c001a728:	b8 04 00 00 00       	mov    eax,0x4
c001a72d:	eb 61                	jmp    c001a790 <FAT::unlink(char const*)+0x78>
c001a72f:	90                   	nop
c001a730:	83 ec 08             	sub    esp,0x8
c001a733:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a73a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a73e:	50                   	push   eax
c001a73f:	e8 0c 5f fe ff       	call   c0000650 <strcpy>
c001a744:	83 c4 10             	add    esp,0x10
c001a747:	83 ec 08             	sub    esp,0x8
c001a74a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a74e:	50                   	push   eax
c001a74f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a756:	e8 61 fc ff ff       	call   c001a3bc <FAT::fixFilepath(char*)>
c001a75b:	83 c4 10             	add    esp,0x10
c001a75e:	83 ec 0c             	sub    esp,0xc
c001a761:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a765:	50                   	push   eax
c001a766:	e8 96 a4 fe ff       	call   c0004c01 <f_unlink>
c001a76b:	83 c4 10             	add    esp,0x10
c001a76e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a775:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a77c:	85 c0                	test   eax,eax
c001a77e:	75 08                	jne    c001a788 <FAT::unlink(char const*)+0x70>
c001a780:	b8 00 00 00 00       	mov    eax,0x0
c001a785:	eb 09                	jmp    c001a790 <FAT::unlink(char const*)+0x78>
c001a787:	90                   	nop
c001a788:	b8 01 00 00 00       	mov    eax,0x1
c001a78d:	8d 76 00             	lea    esi,[esi+0x0]
c001a790:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a796:	c3                   	ret    
c001a797:	90                   	nop

c001a798 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a798:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a79e:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001a7a5:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001a7ac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a7b0:	88 d0                	mov    al,dl
c001a7b2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a7b6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a7be:	75 0c                	jne    c001a7cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001a7c0:	b8 04 00 00 00       	mov    eax,0x4
c001a7c5:	e9 7e 01 00 00       	jmp    c001a948 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a7ca:	66 90                	xchg   ax,ax
c001a7cc:	83 ec 08             	sub    esp,0x8
c001a7cf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a7d6:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a7da:	50                   	push   eax
c001a7db:	e8 70 5e fe ff       	call   c0000650 <strcpy>
c001a7e0:	83 c4 10             	add    esp,0x10
c001a7e3:	83 ec 08             	sub    esp,0x8
c001a7e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a7ea:	50                   	push   eax
c001a7eb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a7f2:	e8 c5 fb ff ff       	call   c001a3bc <FAT::fixFilepath(char*)>
c001a7f7:	83 c4 10             	add    esp,0x10
c001a7fa:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a802:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a80a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a80f:	83 e0 01             	and    eax,0x1
c001a812:	74 14                	je     c001a828 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001a814:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a81b:	83 c8 01             	or     eax,0x1
c001a81e:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a825:	8d 76 00             	lea    esi,[esi+0x0]
c001a828:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a82d:	83 e0 02             	and    eax,0x2
c001a830:	74 12                	je     c001a844 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001a832:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a839:	83 c8 20             	or     eax,0x20
c001a83c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a843:	90                   	nop
c001a844:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a849:	83 e0 04             	and    eax,0x4
c001a84c:	74 12                	je     c001a860 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001a84e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a855:	83 c8 04             	or     eax,0x4
c001a858:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a85f:	90                   	nop
c001a860:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a865:	83 e0 08             	and    eax,0x8
c001a868:	74 12                	je     c001a87c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001a86a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a871:	83 c8 02             	or     eax,0x2
c001a874:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a87b:	90                   	nop
c001a87c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a881:	83 e0 01             	and    eax,0x1
c001a884:	74 12                	je     c001a898 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001a886:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a88d:	83 c8 01             	or     eax,0x1
c001a890:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a897:	90                   	nop
c001a898:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a89d:	83 e0 02             	and    eax,0x2
c001a8a0:	74 12                	je     c001a8b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001a8a2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a8a9:	83 c8 20             	or     eax,0x20
c001a8ac:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a8b3:	90                   	nop
c001a8b4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a8b9:	83 e0 04             	and    eax,0x4
c001a8bc:	74 12                	je     c001a8d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001a8be:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a8c5:	83 c8 04             	or     eax,0x4
c001a8c8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a8cf:	90                   	nop
c001a8d0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a8d5:	83 e0 08             	and    eax,0x8
c001a8d8:	74 12                	je     c001a8ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001a8da:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a8e1:	83 c8 02             	or     eax,0x2
c001a8e4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a8eb:	90                   	nop
c001a8ec:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a8f3:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a8fa:	09 d0                	or     eax,edx
c001a8fc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a903:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a90b:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a913:	83 ec 04             	sub    esp,0x4
c001a916:	52                   	push   edx
c001a917:	50                   	push   eax
c001a918:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a91c:	50                   	push   eax
c001a91d:	e8 52 a7 fe ff       	call   c0005074 <f_chmod>
c001a922:	83 c4 10             	add    esp,0x10
c001a925:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a92c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a933:	85 c0                	test   eax,eax
c001a935:	75 09                	jne    c001a940 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001a937:	b8 00 00 00 00       	mov    eax,0x0
c001a93c:	eb 0a                	jmp    c001a948 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a93e:	66 90                	xchg   ax,ax
c001a940:	b8 01 00 00 00       	mov    eax,0x1
c001a945:	8d 76 00             	lea    esi,[esi+0x0]
c001a948:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a94e:	c3                   	ret    
c001a94f:	90                   	nop

c001a950 <FAT::rename(char const*, char const*)>:
c001a950:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a956:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a95e:	74 0c                	je     c001a96c <FAT::rename(char const*, char const*)+0x1c>
c001a960:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a968:	75 0e                	jne    c001a978 <FAT::rename(char const*, char const*)+0x28>
c001a96a:	66 90                	xchg   ax,ax
c001a96c:	b8 04 00 00 00       	mov    eax,0x4
c001a971:	e9 9e 00 00 00       	jmp    c001aa14 <FAT::rename(char const*, char const*)+0xc4>
c001a976:	66 90                	xchg   ax,ax
c001a978:	83 ec 08             	sub    esp,0x8
c001a97b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a982:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a989:	50                   	push   eax
c001a98a:	e8 c1 5c fe ff       	call   c0000650 <strcpy>
c001a98f:	83 c4 10             	add    esp,0x10
c001a992:	83 ec 08             	sub    esp,0x8
c001a995:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a99c:	50                   	push   eax
c001a99d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a9a4:	e8 13 fa ff ff       	call   c001a3bc <FAT::fixFilepath(char*)>
c001a9a9:	83 c4 10             	add    esp,0x10
c001a9ac:	83 ec 08             	sub    esp,0x8
c001a9af:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a9b6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a9ba:	50                   	push   eax
c001a9bb:	e8 90 5c fe ff       	call   c0000650 <strcpy>
c001a9c0:	83 c4 10             	add    esp,0x10
c001a9c3:	83 ec 08             	sub    esp,0x8
c001a9c6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a9ca:	50                   	push   eax
c001a9cb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a9d2:	e8 e5 f9 ff ff       	call   c001a3bc <FAT::fixFilepath(char*)>
c001a9d7:	83 c4 10             	add    esp,0x10
c001a9da:	83 ec 08             	sub    esp,0x8
c001a9dd:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a9e1:	50                   	push   eax
c001a9e2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a9e9:	50                   	push   eax
c001a9ea:	e8 cd a4 fe ff       	call   c0004ebc <f_rename>
c001a9ef:	83 c4 10             	add    esp,0x10
c001a9f2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a9f9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001aa00:	85 c0                	test   eax,eax
c001aa02:	75 08                	jne    c001aa0c <FAT::rename(char const*, char const*)+0xbc>
c001aa04:	b8 00 00 00 00       	mov    eax,0x0
c001aa09:	eb 09                	jmp    c001aa14 <FAT::rename(char const*, char const*)+0xc4>
c001aa0b:	90                   	nop
c001aa0c:	b8 01 00 00 00       	mov    eax,0x1
c001aa11:	8d 76 00             	lea    esi,[esi+0x0]
c001aa14:	81 c4 1c 02 00 00    	add    esp,0x21c
c001aa1a:	c3                   	ret    
c001aa1b:	90                   	nop

c001aa1c <FAT::mkdir(char const*)>:
c001aa1c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aa22:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001aa2a:	75 08                	jne    c001aa34 <FAT::mkdir(char const*)+0x18>
c001aa2c:	b8 04 00 00 00       	mov    eax,0x4
c001aa31:	eb 61                	jmp    c001aa94 <FAT::mkdir(char const*)+0x78>
c001aa33:	90                   	nop
c001aa34:	83 ec 08             	sub    esp,0x8
c001aa37:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa3e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa42:	50                   	push   eax
c001aa43:	e8 08 5c fe ff       	call   c0000650 <strcpy>
c001aa48:	83 c4 10             	add    esp,0x10
c001aa4b:	83 ec 08             	sub    esp,0x8
c001aa4e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa52:	50                   	push   eax
c001aa53:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa5a:	e8 5d f9 ff ff       	call   c001a3bc <FAT::fixFilepath(char*)>
c001aa5f:	83 c4 10             	add    esp,0x10
c001aa62:	83 ec 0c             	sub    esp,0xc
c001aa65:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa69:	50                   	push   eax
c001aa6a:	e8 b2 a2 fe ff       	call   c0004d21 <f_mkdir>
c001aa6f:	83 c4 10             	add    esp,0x10
c001aa72:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001aa79:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001aa80:	85 c0                	test   eax,eax
c001aa82:	75 08                	jne    c001aa8c <FAT::mkdir(char const*)+0x70>
c001aa84:	b8 00 00 00 00       	mov    eax,0x0
c001aa89:	eb 09                	jmp    c001aa94 <FAT::mkdir(char const*)+0x78>
c001aa8b:	90                   	nop
c001aa8c:	b8 01 00 00 00       	mov    eax,0x1
c001aa91:	8d 76 00             	lea    esi,[esi+0x0]
c001aa94:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aa9a:	c3                   	ret    
c001aa9b:	90                   	nop

c001aa9c <FAT::exists(char const*)>:
c001aa9c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001aaa2:	83 ec 08             	sub    esp,0x8
c001aaa5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aaac:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aab0:	50                   	push   eax
c001aab1:	e8 9a 5b fe ff       	call   c0000650 <strcpy>
c001aab6:	83 c4 10             	add    esp,0x10
c001aab9:	83 ec 08             	sub    esp,0x8
c001aabc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aac0:	50                   	push   eax
c001aac1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aac8:	e8 ef f8 ff ff       	call   c001a3bc <FAT::fixFilepath(char*)>
c001aacd:	83 c4 10             	add    esp,0x10
c001aad0:	83 ec 08             	sub    esp,0x8
c001aad3:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001aada:	50                   	push   eax
c001aadb:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aadf:	50                   	push   eax
c001aae0:	e8 aa 9e fe ff       	call   c000498f <f_stat>
c001aae5:	83 c4 10             	add    esp,0x10
c001aae8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001aaef:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001aaf6:	85 c0                	test   eax,eax
c001aaf8:	75 06                	jne    c001ab00 <FAT::exists(char const*)+0x64>
c001aafa:	b0 01                	mov    al,0x1
c001aafc:	eb 06                	jmp    c001ab04 <FAT::exists(char const*)+0x68>
c001aafe:	66 90                	xchg   ax,ax
c001ab00:	b0 00                	mov    al,0x0
c001ab02:	66 90                	xchg   ax,ax
c001ab04:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ab0a:	c3                   	ret    
c001ab0b:	90                   	nop

c001ab0c <isoReadDiscSectorHelper>:
c001ab0c:	83 ec 2c             	sub    esp,0x2c
c001ab0f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ab13:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ab17:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001ab1c:	83 e8 41             	sub    eax,0x41
c001ab1f:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001ab26:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab2a:	ba 00 00 00 00       	mov    edx,0x0
c001ab2f:	83 ec 0c             	sub    esp,0xc
c001ab32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab36:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ab3a:	52                   	push   edx
c001ab3b:	50                   	push   eax
c001ab3c:	51                   	push   ecx
c001ab3d:	e8 8e f5 fe ff       	call   c000a0d0 <LogicalDisk::read(unsigned long long, int, void*)>
c001ab42:	83 c4 20             	add    esp,0x20
c001ab45:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ab49:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ab4e:	74 0c                	je     c001ab5c <isoReadDiscSectorHelper+0x50>
c001ab50:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab54:	c1 e0 0b             	shl    eax,0xb
c001ab57:	eb 0b                	jmp    c001ab64 <isoReadDiscSectorHelper+0x58>
c001ab59:	8d 76 00             	lea    esi,[esi+0x0]
c001ab5c:	b8 00 00 00 00       	mov    eax,0x0
c001ab61:	8d 76 00             	lea    esi,[esi+0x0]
c001ab64:	83 c4 2c             	add    esp,0x2c
c001ab67:	c3                   	ret    

c001ab68 <iso_kprintf>:
c001ab68:	83 ec 0c             	sub    esp,0xc
c001ab6b:	83 ec 08             	sub    esp,0x8
c001ab6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ab72:	68 dd 30 02 c0       	push   0xc00230dd
c001ab77:	e8 d2 c3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ab7c:	83 c4 10             	add    esp,0x10
c001ab7f:	90                   	nop
c001ab80:	83 c4 0c             	add    esp,0xc
c001ab83:	c3                   	ret    

c001ab84 <iso_kprintfd>:
c001ab84:	83 ec 0c             	sub    esp,0xc
c001ab87:	83 ec 08             	sub    esp,0x8
c001ab8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ab8e:	68 31 17 02 c0       	push   0xc0021731
c001ab93:	e8 b6 c3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ab98:	83 c4 10             	add    esp,0x10
c001ab9b:	90                   	nop
c001ab9c:	83 c4 0c             	add    esp,0xc
c001ab9f:	c3                   	ret    

c001aba0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001aba0:	b8 08 00 00 00       	mov    eax,0x8
c001aba5:	c3                   	ret    

c001aba6 <ISO9660::truncate(void*, unsigned long long)>:
c001aba6:	b8 01 00 00 00       	mov    eax,0x1
c001abab:	c3                   	ret    

c001abac <ISO9660::getName()>:
c001abac:	b8 68 34 02 c0       	mov    eax,0xc0023468
c001abb1:	c3                   	ret    

c001abb2 <ISO9660::closeDir(void*)>:
c001abb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abb6:	8b 00                	mov    eax,DWORD PTR [eax]
c001abb8:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001abbb:	90                   	nop

c001abbc <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001abbc:	b8 01 00 00 00       	mov    eax,0x1
c001abc1:	c3                   	ret    

c001abc2 <ISO9660::unlink(char const*)>:
c001abc2:	b8 01 00 00 00       	mov    eax,0x1
c001abc7:	c3                   	ret    

c001abc8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001abc8:	b8 03 00 00 00       	mov    eax,0x3
c001abcd:	c3                   	ret    

c001abce <ISO9660::rename(char const*, char const*)>:
c001abce:	b8 01 00 00 00       	mov    eax,0x1
c001abd3:	c3                   	ret    

c001abd4 <ISO9660::mkdir(char const*)>:
c001abd4:	b8 01 00 00 00       	mov    eax,0x1
c001abd9:	c3                   	ret    

c001abda <ISO9660::~ISO9660()>:
c001abda:	83 ec 0c             	sub    esp,0xc
c001abdd:	ba a8 35 02 c0       	mov    edx,0xc00235a8
c001abe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abe6:	89 10                	mov    DWORD PTR [eax],edx
c001abe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abec:	83 ec 0c             	sub    esp,0xc
c001abef:	50                   	push   eax
c001abf0:	e8 85 d1 fe ff       	call   c0007d7a <Filesystem::~Filesystem()>
c001abf5:	83 c4 10             	add    esp,0x10
c001abf8:	90                   	nop
c001abf9:	83 c4 0c             	add    esp,0xc
c001abfc:	c3                   	ret    
c001abfd:	90                   	nop

c001abfe <ISO9660::~ISO9660()>:
c001abfe:	83 ec 0c             	sub    esp,0xc
c001ac01:	83 ec 0c             	sub    esp,0xc
c001ac04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac08:	e8 cd ff ff ff       	call   c001abda <ISO9660::~ISO9660()>
c001ac0d:	83 c4 10             	add    esp,0x10
c001ac10:	83 ec 08             	sub    esp,0x8
c001ac13:	6a 08                	push   0x8
c001ac15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac19:	e8 3d 1a ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c001ac1e:	83 c4 10             	add    esp,0x10
c001ac21:	83 c4 0c             	add    esp,0xc
c001ac24:	c3                   	ret    
c001ac25:	90                   	nop

c001ac26 <ISO9660::exists(char const*)>:
c001ac26:	83 ec 18             	sub    esp,0x18
c001ac29:	68 83 34 02 c0       	push   0xc0023483
c001ac2e:	e8 e3 3f ff ff       	call   c000ec16 <KePanic(char const*)>
c001ac33:	31 c0                	xor    eax,eax
c001ac35:	83 c4 1c             	add    esp,0x1c
c001ac38:	c3                   	ret    
c001ac39:	90                   	nop

c001ac3a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001ac3a:	56                   	push   esi
c001ac3b:	53                   	push   ebx
c001ac3c:	53                   	push   ebx
c001ac3d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ac41:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ac45:	85 db                	test   ebx,ebx
c001ac47:	0f 84 ca 00 00 00    	je     c001ad17 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001ac4d:	85 f6                	test   esi,esi
c001ac4f:	0f 84 c2 00 00 00    	je     c001ad17 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001ac55:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001ac5a:	b8 03 00 00 00       	mov    eax,0x3
c001ac5f:	0f 85 b7 00 00 00    	jne    c001ad1c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001ac65:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001ac67:	38 0d a0 c8 02 c0    	cmp    BYTE PTR ds:0xc002c8a0,cl
c001ac6d:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001ac74:	74 1b                	je     c001ac91 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001ac76:	85 c0                	test   eax,eax
c001ac78:	74 10                	je     c001ac8a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001ac7a:	83 ec 0c             	sub    esp,0xc
c001ac7d:	68 a1 34 02 c0       	push   0xc00234a1
c001ac82:	e8 8f 3f ff ff       	call   c000ec16 <KePanic(char const*)>
c001ac87:	83 c4 10             	add    esp,0x10
c001ac8a:	8a 03                	mov    al,BYTE PTR [ebx]
c001ac8c:	a2 a0 c8 02 c0       	mov    ds:0xc002c8a0,al
c001ac91:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ac94:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001ac9b:	85 c0                	test   eax,eax
c001ac9d:	74 09                	je     c001aca8 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001ac9f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001aca6:	74 48                	je     c001acf0 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001aca8:	83 ec 0c             	sub    esp,0xc
c001acab:	68 b1 34 02 c0       	push   0xc00234b1
c001acb0:	e8 99 c2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001acb5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001acb8:	83 c4 10             	add    esp,0x10
c001acbb:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001acc2:	85 c0                	test   eax,eax
c001acc4:	74 17                	je     c001acdd <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001acc6:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001accd:	83 ec 0c             	sub    esp,0xc
c001acd0:	68 d1 34 02 c0       	push   0xc00234d1
c001acd5:	e8 74 c2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001acda:	83 c4 10             	add    esp,0x10
c001acdd:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001ace4:	83 ec 0c             	sub    esp,0xc
c001ace7:	50                   	push   eax
c001ace8:	e8 5a bf fe ff       	call   c0006c47 <init_percd>
c001aced:	83 c4 10             	add    esp,0x10
c001acf0:	51                   	push   ecx
c001acf1:	83 c3 03             	add    ebx,0x3
c001acf4:	51                   	push   ecx
c001acf5:	6a 00                	push   0x0
c001acf7:	53                   	push   ebx
c001acf8:	e8 0d ba fe ff       	call   c000670a <iso_open>
c001acfd:	83 c4 10             	add    esp,0x10
c001ad00:	89 c2                	mov    edx,eax
c001ad02:	b8 01 00 00 00       	mov    eax,0x1
c001ad07:	83 fa ff             	cmp    edx,0xffffffff
c001ad0a:	74 10                	je     c001ad1c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001ad0c:	83 c2 32             	add    edx,0x32
c001ad0f:	31 c0                	xor    eax,eax
c001ad11:	01 d2                	add    edx,edx
c001ad13:	89 16                	mov    DWORD PTR [esi],edx
c001ad15:	eb 05                	jmp    c001ad1c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001ad17:	b8 04 00 00 00       	mov    eax,0x4
c001ad1c:	5a                   	pop    edx
c001ad1d:	5b                   	pop    ebx
c001ad1e:	5e                   	pop    esi
c001ad1f:	c3                   	ret    

c001ad20 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001ad20:	53                   	push   ebx
c001ad21:	83 ec 08             	sub    esp,0x8
c001ad24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad28:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ad2c:	85 c0                	test   eax,eax
c001ad2e:	74 2d                	je     c001ad5d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001ad30:	85 db                	test   ebx,ebx
c001ad32:	74 29                	je     c001ad5d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001ad34:	52                   	push   edx
c001ad35:	b9 02 00 00 00       	mov    ecx,0x2
c001ad3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad3e:	99                   	cdq    
c001ad3f:	f7 f9                	idiv   ecx
c001ad41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ad45:	83 e8 32             	sub    eax,0x32
c001ad48:	50                   	push   eax
c001ad49:	e8 64 ba fe ff       	call   c00067b2 <iso_read>
c001ad4e:	83 c4 10             	add    esp,0x10
c001ad51:	89 03                	mov    DWORD PTR [ebx],eax
c001ad53:	09 d0                	or     eax,edx
c001ad55:	0f 94 c0             	sete   al
c001ad58:	0f b6 c0             	movzx  eax,al
c001ad5b:	eb 05                	jmp    c001ad62 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001ad5d:	b8 04 00 00 00       	mov    eax,0x4
c001ad62:	83 c4 08             	add    esp,0x8
c001ad65:	5b                   	pop    ebx
c001ad66:	c3                   	ret    
c001ad67:	90                   	nop

c001ad68 <ISO9660::seek(void*, unsigned long long)>:
c001ad68:	57                   	push   edi
c001ad69:	b8 04 00 00 00       	mov    eax,0x4
c001ad6e:	56                   	push   esi
c001ad6f:	51                   	push   ecx
c001ad70:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ad74:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ad78:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ad7c:	85 d2                	test   edx,edx
c001ad7e:	74 26                	je     c001ada6 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001ad80:	89 d0                	mov    eax,edx
c001ad82:	b9 02 00 00 00       	mov    ecx,0x2
c001ad87:	6a 00                	push   0x0
c001ad89:	99                   	cdq    
c001ad8a:	f7 f9                	idiv   ecx
c001ad8c:	57                   	push   edi
c001ad8d:	56                   	push   esi
c001ad8e:	83 e8 32             	sub    eax,0x32
c001ad91:	50                   	push   eax
c001ad92:	e8 31 bb fe ff       	call   c00068c8 <iso_seek>
c001ad97:	83 c4 10             	add    esp,0x10
c001ad9a:	31 f0                	xor    eax,esi
c001ad9c:	31 fa                	xor    edx,edi
c001ad9e:	09 d0                	or     eax,edx
c001ada0:	0f 95 c0             	setne  al
c001ada3:	0f b6 c0             	movzx  eax,al
c001ada6:	5a                   	pop    edx
c001ada7:	5e                   	pop    esi
c001ada8:	5f                   	pop    edi
c001ada9:	c3                   	ret    

c001adaa <ISO9660::tell(void*, unsigned long long*)>:
c001adaa:	53                   	push   ebx
c001adab:	83 ec 08             	sub    esp,0x8
c001adae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001adb2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001adb6:	85 c0                	test   eax,eax
c001adb8:	74 24                	je     c001adde <ISO9660::tell(void*, unsigned long long*)+0x34>
c001adba:	85 db                	test   ebx,ebx
c001adbc:	74 20                	je     c001adde <ISO9660::tell(void*, unsigned long long*)+0x34>
c001adbe:	b9 02 00 00 00       	mov    ecx,0x2
c001adc3:	99                   	cdq    
c001adc4:	f7 f9                	idiv   ecx
c001adc6:	83 ec 0c             	sub    esp,0xc
c001adc9:	83 e8 32             	sub    eax,0x32
c001adcc:	50                   	push   eax
c001adcd:	e8 7a bb fe ff       	call   c000694c <iso_tell>
c001add2:	83 c4 10             	add    esp,0x10
c001add5:	89 03                	mov    DWORD PTR [ebx],eax
c001add7:	31 c0                	xor    eax,eax
c001add9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001addc:	eb 05                	jmp    c001ade3 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001adde:	b8 04 00 00 00       	mov    eax,0x4
c001ade3:	83 c4 08             	add    esp,0x8
c001ade6:	5b                   	pop    ebx
c001ade7:	c3                   	ret    

c001ade8 <ISO9660::stat(void*, unsigned long long*)>:
c001ade8:	56                   	push   esi
c001ade9:	53                   	push   ebx
c001adea:	83 ec 10             	sub    esp,0x10
c001aded:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001adf1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001adf5:	68 f5 34 02 c0       	push   0xc00234f5
c001adfa:	e8 4f c1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001adff:	83 c4 10             	add    esp,0x10
c001ae02:	85 db                	test   ebx,ebx
c001ae04:	74 2a                	je     c001ae30 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001ae06:	85 f6                	test   esi,esi
c001ae08:	74 26                	je     c001ae30 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001ae0a:	89 d8                	mov    eax,ebx
c001ae0c:	b9 02 00 00 00       	mov    ecx,0x2
c001ae11:	99                   	cdq    
c001ae12:	83 ec 0c             	sub    esp,0xc
c001ae15:	f7 f9                	idiv   ecx
c001ae17:	83 e8 32             	sub    eax,0x32
c001ae1a:	50                   	push   eax
c001ae1b:	e8 5d bb fe ff       	call   c000697d <iso_total>
c001ae20:	83 c4 10             	add    esp,0x10
c001ae23:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001ae2a:	89 06                	mov    DWORD PTR [esi],eax
c001ae2c:	31 c0                	xor    eax,eax
c001ae2e:	eb 05                	jmp    c001ae35 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001ae30:	b8 04 00 00 00       	mov    eax,0x4
c001ae35:	5a                   	pop    edx
c001ae36:	5b                   	pop    ebx
c001ae37:	5e                   	pop    esi
c001ae38:	c3                   	ret    
c001ae39:	90                   	nop

c001ae3a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001ae3a:	55                   	push   ebp
c001ae3b:	57                   	push   edi
c001ae3c:	56                   	push   esi
c001ae3d:	53                   	push   ebx
c001ae3e:	83 ec 18             	sub    esp,0x18
c001ae41:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ae45:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ae49:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ae4d:	68 fd 34 02 c0       	push   0xc00234fd
c001ae52:	e8 f7 c0 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ae57:	83 c4 10             	add    esp,0x10
c001ae5a:	85 ff                	test   edi,edi
c001ae5c:	0f 94 c0             	sete   al
c001ae5f:	85 f6                	test   esi,esi
c001ae61:	0f 94 c2             	sete   dl
c001ae64:	09 d0                	or     eax,edx
c001ae66:	a8 01                	test   al,0x1
c001ae68:	0f 85 dd 00 00 00    	jne    c001af4b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001ae6e:	85 db                	test   ebx,ebx
c001ae70:	0f 84 d5 00 00 00    	je     c001af4b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001ae76:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ae79:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001ae7f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001ae86:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001ae8d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001ae8f:	38 0d a0 c8 02 c0    	cmp    BYTE PTR ds:0xc002c8a0,cl
c001ae95:	74 1b                	je     c001aeb2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001ae97:	85 c0                	test   eax,eax
c001ae99:	74 10                	je     c001aeab <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001ae9b:	83 ec 0c             	sub    esp,0xc
c001ae9e:	68 a1 34 02 c0       	push   0xc00234a1
c001aea3:	e8 6e 3d ff ff       	call   c000ec16 <KePanic(char const*)>
c001aea8:	83 c4 10             	add    esp,0x10
c001aeab:	8a 03                	mov    al,BYTE PTR [ebx]
c001aead:	a2 a0 c8 02 c0       	mov    ds:0xc002c8a0,al
c001aeb2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001aeb5:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001aebc:	85 c0                	test   eax,eax
c001aebe:	74 09                	je     c001aec9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001aec0:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001aec7:	74 51                	je     c001af1a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001aec9:	83 ec 0c             	sub    esp,0xc
c001aecc:	68 05 35 02 c0       	push   0xc0023505
c001aed1:	e8 78 c0 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001aed6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001aed9:	83 c4 10             	add    esp,0x10
c001aedc:	83 3c 85 7c 96 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd6984],0x0
c001aee4:	74 21                	je     c001af07 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001aee6:	83 ec 0c             	sub    esp,0xc
c001aee9:	68 25 35 02 c0       	push   0xc0023525
c001aeee:	e8 5b c0 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001aef3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001aef6:	83 c4 10             	add    esp,0x10
c001aef9:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001af00:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001af07:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001af0e:	83 ec 0c             	sub    esp,0xc
c001af11:	50                   	push   eax
c001af12:	e8 30 bd fe ff       	call   c0006c47 <init_percd>
c001af17:	83 c4 10             	add    esp,0x10
c001af1a:	52                   	push   edx
c001af1b:	83 c3 03             	add    ebx,0x3
c001af1e:	52                   	push   edx
c001af1f:	6a 00                	push   0x0
c001af21:	53                   	push   ebx
c001af22:	e8 e3 b7 fe ff       	call   c000670a <iso_open>
c001af27:	83 c4 10             	add    esp,0x10
c001af2a:	83 f8 ff             	cmp    eax,0xffffffff
c001af2d:	89 c5                	mov    ebp,eax
c001af2f:	75 21                	jne    c001af52 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001af31:	50                   	push   eax
c001af32:	50                   	push   eax
c001af33:	6a 01                	push   0x1
c001af35:	53                   	push   ebx
c001af36:	e8 cf b7 fe ff       	call   c000670a <iso_open>
c001af3b:	83 c4 10             	add    esp,0x10
c001af3e:	ba 02 00 00 00       	mov    edx,0x2
c001af43:	40                   	inc    eax
c001af44:	74 2b                	je     c001af71 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001af46:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001af49:	eb 24                	jmp    c001af6f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001af4b:	ba 04 00 00 00       	mov    edx,0x4
c001af50:	eb 1f                	jmp    c001af71 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001af52:	83 ec 0c             	sub    esp,0xc
c001af55:	50                   	push   eax
c001af56:	e8 22 ba fe ff       	call   c000697d <iso_total>
c001af5b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001af62:	89 07                	mov    DWORD PTR [edi],eax
c001af64:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001af67:	e8 28 b8 fe ff       	call   c0006794 <iso_close>
c001af6c:	83 c4 10             	add    esp,0x10
c001af6f:	31 d2                	xor    edx,edx
c001af71:	83 c4 0c             	add    esp,0xc
c001af74:	89 d0                	mov    eax,edx
c001af76:	5b                   	pop    ebx
c001af77:	5e                   	pop    esi
c001af78:	5f                   	pop    edi
c001af79:	5d                   	pop    ebp
c001af7a:	c3                   	ret    
c001af7b:	90                   	nop

c001af7c <ISO9660::close(void*)>:
c001af7c:	83 ec 0c             	sub    esp,0xc
c001af7f:	b8 04 00 00 00       	mov    eax,0x4
c001af84:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001af88:	85 d2                	test   edx,edx
c001af8a:	74 1b                	je     c001afa7 <ISO9660::close(void*)+0x2b>
c001af8c:	89 d0                	mov    eax,edx
c001af8e:	b9 02 00 00 00       	mov    ecx,0x2
c001af93:	99                   	cdq    
c001af94:	83 ec 0c             	sub    esp,0xc
c001af97:	f7 f9                	idiv   ecx
c001af99:	83 e8 32             	sub    eax,0x32
c001af9c:	50                   	push   eax
c001af9d:	e8 f2 b7 fe ff       	call   c0006794 <iso_close>
c001afa2:	83 c4 10             	add    esp,0x10
c001afa5:	31 c0                	xor    eax,eax
c001afa7:	83 c4 0c             	add    esp,0xc
c001afaa:	c3                   	ret    
c001afab:	90                   	nop

c001afac <ISO9660::openDir(char const*, void**)>:
c001afac:	56                   	push   esi
c001afad:	53                   	push   ebx
c001afae:	50                   	push   eax
c001afaf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001afb3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001afb7:	85 db                	test   ebx,ebx
c001afb9:	0f 84 bd 00 00 00    	je     c001b07c <ISO9660::openDir(char const*, void**)+0xd0>
c001afbf:	85 f6                	test   esi,esi
c001afc1:	0f 84 b5 00 00 00    	je     c001b07c <ISO9660::openDir(char const*, void**)+0xd0>
c001afc7:	8a 13                	mov    dl,BYTE PTR [ebx]
c001afc9:	38 15 a0 c8 02 c0    	cmp    BYTE PTR ds:0xc002c8a0,dl
c001afcf:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001afd6:	74 1b                	je     c001aff3 <ISO9660::openDir(char const*, void**)+0x47>
c001afd8:	85 c0                	test   eax,eax
c001afda:	74 10                	je     c001afec <ISO9660::openDir(char const*, void**)+0x40>
c001afdc:	83 ec 0c             	sub    esp,0xc
c001afdf:	68 a1 34 02 c0       	push   0xc00234a1
c001afe4:	e8 2d 3c ff ff       	call   c000ec16 <KePanic(char const*)>
c001afe9:	83 c4 10             	add    esp,0x10
c001afec:	8a 03                	mov    al,BYTE PTR [ebx]
c001afee:	a2 a0 c8 02 c0       	mov    ds:0xc002c8a0,al
c001aff3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001aff6:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001affd:	85 c0                	test   eax,eax
c001afff:	74 10                	je     c001b011 <ISO9660::openDir(char const*, void**)+0x65>
c001b001:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001b008:	74 1a                	je     c001b024 <ISO9660::openDir(char const*, void**)+0x78>
c001b00a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001b011:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001b018:	83 ec 0c             	sub    esp,0xc
c001b01b:	50                   	push   eax
c001b01c:	e8 26 bc fe ff       	call   c0006c47 <init_percd>
c001b021:	83 c4 10             	add    esp,0x10
c001b024:	50                   	push   eax
c001b025:	83 c3 03             	add    ebx,0x3
c001b028:	50                   	push   eax
c001b029:	6a 01                	push   0x1
c001b02b:	53                   	push   ebx
c001b02c:	e8 d9 b6 fe ff       	call   c000670a <iso_open>
c001b031:	83 c4 10             	add    esp,0x10
c001b034:	83 f8 ff             	cmp    eax,0xffffffff
c001b037:	89 c3                	mov    ebx,eax
c001b039:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001b03e:	75 1c                	jne    c001b05c <ISO9660::openDir(char const*, void**)+0xb0>
c001b040:	53                   	push   ebx
c001b041:	53                   	push   ebx
c001b042:	68 49 35 02 c0       	push   0xc0023549
c001b047:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b04d:	e8 34 63 ff ff       	call   c0011386 <VgaText::puts(char const*)>
c001b052:	83 c4 10             	add    esp,0x10
c001b055:	b8 01 00 00 00       	mov    eax,0x1
c001b05a:	eb 25                	jmp    c001b081 <ISO9660::openDir(char const*, void**)+0xd5>
c001b05c:	51                   	push   ecx
c001b05d:	01 db                	add    ebx,ebx
c001b05f:	51                   	push   ecx
c001b060:	83 c3 65             	add    ebx,0x65
c001b063:	68 5c 35 02 c0       	push   0xc002355c
c001b068:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b06e:	e8 13 63 ff ff       	call   c0011386 <VgaText::puts(char const*)>
c001b073:	83 c4 10             	add    esp,0x10
c001b076:	31 c0                	xor    eax,eax
c001b078:	89 1e                	mov    DWORD PTR [esi],ebx
c001b07a:	eb 05                	jmp    c001b081 <ISO9660::openDir(char const*, void**)+0xd5>
c001b07c:	b8 04 00 00 00       	mov    eax,0x4
c001b081:	5a                   	pop    edx
c001b082:	5b                   	pop    ebx
c001b083:	5e                   	pop    esi
c001b084:	c3                   	ret    
c001b085:	90                   	nop

c001b086 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b086:	55                   	push   ebp
c001b087:	57                   	push   edi
c001b088:	56                   	push   esi
c001b089:	53                   	push   ebx
c001b08a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b090:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001b097:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001b09e:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001b0a5:	85 db                	test   ebx,ebx
c001b0a7:	0f 84 e4 00 00 00    	je     c001b191 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001b0ad:	85 ed                	test   ebp,ebp
c001b0af:	0f 84 dc 00 00 00    	je     c001b191 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001b0b5:	83 ec 0c             	sub    esp,0xc
c001b0b8:	68 6f 35 02 c0       	push   0xc002356f
c001b0bd:	e8 8c be fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001b0c2:	89 d8                	mov    eax,ebx
c001b0c4:	b9 02 00 00 00       	mov    ecx,0x2
c001b0c9:	99                   	cdq    
c001b0ca:	f7 f9                	idiv   ecx
c001b0cc:	83 e8 32             	sub    eax,0x32
c001b0cf:	89 04 24             	mov    DWORD PTR [esp],eax
c001b0d2:	e8 f8 b8 fe ff       	call   c00069cf <iso_readdir>
c001b0d7:	83 c4 10             	add    esp,0x10
c001b0da:	85 c0                	test   eax,eax
c001b0dc:	89 c3                	mov    ebx,eax
c001b0de:	75 38                	jne    c001b118 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001b0e0:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001b0e5:	53                   	push   ebx
c001b0e6:	53                   	push   ebx
c001b0e7:	68 7a 35 02 c0       	push   0xc002357a
c001b0ec:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b0f2:	e8 8f 62 ff ff       	call   c0011386 <VgaText::puts(char const*)>
c001b0f7:	83 c4 0c             	add    esp,0xc
c001b0fa:	68 10 01 00 00       	push   0x110
c001b0ff:	6a 00                	push   0x0
c001b101:	57                   	push   edi
c001b102:	e8 e9 53 fe ff       	call   c00004f0 <memset>
c001b107:	83 c4 10             	add    esp,0x10
c001b10a:	b8 01 00 00 00       	mov    eax,0x1
c001b10f:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001b116:	eb 7e                	jmp    c001b196 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001b118:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001b11e:	8d 70 08             	lea    esi,[eax+0x8]
c001b121:	83 ec 0c             	sub    esp,0xc
c001b124:	56                   	push   esi
c001b125:	e8 56 54 fe ff       	call   c0000580 <strlen>
c001b12a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001b132:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b136:	83 c4 10             	add    esp,0x10
c001b139:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001b13d:	75 0a                	jne    c001b149 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001b13f:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001b142:	b8 02 00 00 00       	mov    eax,0x2
c001b147:	74 05                	je     c001b14e <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001b149:	b8 01 00 00 00       	mov    eax,0x1
c001b14e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b152:	50                   	push   eax
c001b153:	50                   	push   eax
c001b154:	56                   	push   esi
c001b155:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b159:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b15d:	50                   	push   eax
c001b15e:	e8 ed 54 fe ff       	call   c0000650 <strcpy>
c001b163:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b16a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b16c:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001b173:	5a                   	pop    edx
c001b174:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001b179:	59                   	pop    ecx
c001b17a:	68 8d 35 02 c0       	push   0xc002358d
c001b17f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b185:	e8 fc 61 ff ff       	call   c0011386 <VgaText::puts(char const*)>
c001b18a:	83 c4 10             	add    esp,0x10
c001b18d:	31 c0                	xor    eax,eax
c001b18f:	eb 05                	jmp    c001b196 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001b191:	b8 04 00 00 00       	mov    eax,0x4
c001b196:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b19c:	5b                   	pop    ebx
c001b19d:	5e                   	pop    esi
c001b19e:	5f                   	pop    edi
c001b19f:	5d                   	pop    ebp
c001b1a0:	c3                   	ret    

c001b1a1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b1a1:	57                   	push   edi
c001b1a2:	56                   	push   esi
c001b1a3:	53                   	push   ebx
c001b1a4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b1a8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b1ac:	39 35 a4 c8 02 c0    	cmp    DWORD PTR ds:0xc002c8a4,esi
c001b1b2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b1b6:	0f be cb             	movsx  ecx,bl
c001b1b9:	75 0b                	jne    c001b1c6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001b1bb:	0f be 05 24 48 02 c0 	movsx  eax,BYTE PTR ds:0xc0024824
c001b1c2:	39 c8                	cmp    eax,ecx
c001b1c4:	74 47                	je     c001b20d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001b1c6:	83 ec 0c             	sub    esp,0xc
c001b1c9:	31 d2                	xor    edx,edx
c001b1cb:	68 c0 c8 02 c0       	push   0xc002c8c0
c001b1d0:	6a 01                	push   0x1
c001b1d2:	52                   	push   edx
c001b1d3:	56                   	push   esi
c001b1d4:	ff 34 8d 7c 96 02 c0 	push   DWORD PTR [ecx*4-0x3ffd6984]
c001b1db:	e8 f0 ee fe ff       	call   c000a0d0 <LogicalDisk::read(unsigned long long, int, void*)>
c001b1e0:	83 c4 20             	add    esp,0x20
c001b1e3:	85 c0                	test   eax,eax
c001b1e5:	75 0e                	jne    c001b1f5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001b1e7:	89 35 a4 c8 02 c0    	mov    DWORD PTR ds:0xc002c8a4,esi
c001b1ed:	88 1d 24 48 02 c0    	mov    BYTE PTR ds:0xc0024824,bl
c001b1f3:	eb 18                	jmp    c001b20d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001b1f5:	50                   	push   eax
c001b1f6:	68 00 08 00 00       	push   0x800
c001b1fb:	6a 00                	push   0x0
c001b1fd:	57                   	push   edi
c001b1fe:	e8 ed 52 fe ff       	call   c00004f0 <memset>
c001b203:	83 c4 10             	add    esp,0x10
c001b206:	b8 01 00 00 00       	mov    eax,0x1
c001b20b:	eb 0e                	jmp    c001b21b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001b20d:	be c0 c8 02 c0       	mov    esi,0xc002c8c0
c001b212:	b9 00 08 00 00       	mov    ecx,0x800
c001b217:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b219:	31 c0                	xor    eax,eax
c001b21b:	5b                   	pop    ebx
c001b21c:	5e                   	pop    esi
c001b21d:	5f                   	pop    edi
c001b21e:	c3                   	ret    
c001b21f:	90                   	nop

c001b220 <ISO9660::tryMount(LogicalDisk*, int)>:
c001b220:	53                   	push   ebx
c001b221:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001b227:	c7 05 a4 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c8a4,0xdeadbeef
c001b231:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001b238:	8d 58 41             	lea    ebx,[eax+0x41]
c001b23b:	0f be db             	movsx  ebx,bl
c001b23e:	53                   	push   ebx
c001b23f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b243:	50                   	push   eax
c001b244:	6a 10                	push   0x10
c001b246:	e8 56 ff ff ff       	call   c001b1a1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b24b:	83 c4 10             	add    esp,0x10
c001b24e:	31 d2                	xor    edx,edx
c001b250:	85 c0                	test   eax,eax
c001b252:	75 33                	jne    c001b287 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b254:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b259:	75 2c                	jne    c001b287 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b25b:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b260:	75 25                	jne    c001b287 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b262:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b267:	75 1e                	jne    c001b287 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b269:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b26e:	75 17                	jne    c001b287 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b270:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b275:	75 10                	jne    c001b287 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b277:	83 ec 0c             	sub    esp,0xc
c001b27a:	53                   	push   ebx
c001b27b:	e8 c7 b9 fe ff       	call   c0006c47 <init_percd>
c001b280:	83 c4 10             	add    esp,0x10
c001b283:	40                   	inc    eax
c001b284:	0f 95 c2             	setne  dl
c001b287:	81 c4 08 08 00 00    	add    esp,0x808
c001b28d:	88 d0                	mov    al,dl
c001b28f:	5b                   	pop    ebx
c001b290:	c3                   	ret    
c001b291:	90                   	nop

c001b292 <ISO9660::ISO9660()>:
c001b292:	83 ec 0c             	sub    esp,0xc
c001b295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b299:	83 ec 0c             	sub    esp,0xc
c001b29c:	50                   	push   eax
c001b29d:	e8 b4 ca fe ff       	call   c0007d56 <Filesystem::Filesystem()>
c001b2a2:	83 c4 10             	add    esp,0x10
c001b2a5:	ba a8 35 02 c0       	mov    edx,0xc00235a8
c001b2aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2ae:	89 10                	mov    DWORD PTR [eax],edx
c001b2b0:	e8 a4 ba fe ff       	call   c0006d59 <fs_iso9660_init>
c001b2b5:	90                   	nop
c001b2b6:	83 c4 0c             	add    esp,0xc
c001b2b9:	c3                   	ret    

c001b2ba <SoundCard::beginPlayback()>:
c001b2ba:	c7 44 24 04 0c 36 02 c0 	mov    DWORD PTR [esp+0x4],0xc002360c
c001b2c2:	e9 4f 39 ff ff       	jmp    c000ec16 <KePanic(char const*)>
c001b2c7:	90                   	nop

c001b2c8 <SoundCard::stopPlayback()>:
c001b2c8:	c7 44 24 04 0c 36 02 c0 	mov    DWORD PTR [esp+0x4],0xc002360c
c001b2d0:	e9 41 39 ff ff       	jmp    c000ec16 <KePanic(char const*)>
c001b2d5:	90                   	nop

c001b2d6 <SoundCard::SoundCard(char const*)>:
c001b2d6:	83 ec 1c             	sub    esp,0x1c
c001b2d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b2dd:	83 ec 08             	sub    esp,0x8
c001b2e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b2e4:	50                   	push   eax
c001b2e5:	e8 be de fe ff       	call   c00091a8 <Device::Device(char const*)>
c001b2ea:	83 c4 10             	add    esp,0x10
c001b2ed:	ba 58 36 02 c0       	mov    edx,0xc0023658
c001b2f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b2f6:	89 10                	mov    DWORD PTR [eax],edx
c001b2f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b2fc:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b303:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b307:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001b311:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b315:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001b31f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b323:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001b32d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b331:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001b33b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b343:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b348:	7f 1a                	jg     c001b364 <SoundCard::SoundCard(char const*)+0x8e>
c001b34a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b34e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b352:	83 c2 54             	add    edx,0x54
c001b355:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001b35d:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b362:	eb df                	jmp    c001b343 <SoundCard::SoundCard(char const*)+0x6d>
c001b364:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b368:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b36f:	90                   	nop
c001b370:	83 c4 1c             	add    esp,0x1c
c001b373:	c3                   	ret    

c001b374 <SoundCard::~SoundCard()>:
c001b374:	83 ec 0c             	sub    esp,0xc
c001b377:	ba 58 36 02 c0       	mov    edx,0xc0023658
c001b37c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b380:	89 10                	mov    DWORD PTR [eax],edx
c001b382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b386:	83 ec 0c             	sub    esp,0xc
c001b389:	50                   	push   eax
c001b38a:	e8 b9 db fe ff       	call   c0008f48 <Device::~Device()>
c001b38f:	83 c4 10             	add    esp,0x10
c001b392:	90                   	nop
c001b393:	83 c4 0c             	add    esp,0xc
c001b396:	c3                   	ret    
c001b397:	90                   	nop

c001b398 <SoundCard::~SoundCard()>:
c001b398:	83 ec 0c             	sub    esp,0xc
c001b39b:	83 ec 0c             	sub    esp,0xc
c001b39e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b3a2:	e8 cd ff ff ff       	call   c001b374 <SoundCard::~SoundCard()>
c001b3a7:	83 c4 10             	add    esp,0x10
c001b3aa:	83 ec 08             	sub    esp,0x8
c001b3ad:	68 e8 01 00 00       	push   0x1e8
c001b3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b3b6:	e8 a0 12 ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c001b3bb:	83 c4 10             	add    esp,0x10
c001b3be:	83 c4 0c             	add    esp,0xc
c001b3c1:	c3                   	ret    

c001b3c2 <SoundCard::configureRates(int, int, int)>:
c001b3c2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b3c6:	31 c0                	xor    eax,eax
c001b3c8:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001b3cf:	75 20                	jne    c001b3f1 <SoundCard::configureRates(int, int, int)+0x2f>
c001b3d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b3d5:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001b3db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b3df:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001b3e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3e9:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001b3ef:	b0 01                	mov    al,0x1
c001b3f1:	c3                   	ret    

c001b3f2 <SoundCard::getSamples16(int, short*)>:
c001b3f2:	55                   	push   ebp
c001b3f3:	57                   	push   edi
c001b3f4:	31 ff                	xor    edi,edi
c001b3f6:	56                   	push   esi
c001b3f7:	53                   	push   ebx
c001b3f8:	31 db                	xor    ebx,ebx
c001b3fa:	83 ec 10             	sub    esp,0x10
c001b3fd:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b401:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b405:	8d 04 36             	lea    eax,[esi+esi*1]
c001b408:	50                   	push   eax
c001b409:	6a 00                	push   0x0
c001b40b:	55                   	push   ebp
c001b40c:	e8 df 50 fe ff       	call   c00004f0 <memset>
c001b411:	83 c4 10             	add    esp,0x10
c001b414:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b418:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001b41f:	85 c0                	test   eax,eax
c001b421:	74 1a                	je     c001b43d <SoundCard::getSamples16(int, short*)+0x4b>
c001b423:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001b427:	75 14                	jne    c001b43d <SoundCard::getSamples16(int, short*)+0x4b>
c001b429:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b42d:	55                   	push   ebp
c001b42e:	56                   	push   esi
c001b42f:	50                   	push   eax
c001b430:	e8 8f 03 00 00       	call   c001b7c4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001b435:	83 c4 10             	add    esp,0x10
c001b438:	39 c3                	cmp    ebx,eax
c001b43a:	0f 4c d8             	cmovl  ebx,eax
c001b43d:	47                   	inc    edi
c001b43e:	83 ff 20             	cmp    edi,0x20
c001b441:	75 d1                	jne    c001b414 <SoundCard::getSamples16(int, short*)+0x22>
c001b443:	83 c4 0c             	add    esp,0xc
c001b446:	89 d8                	mov    eax,ebx
c001b448:	5b                   	pop    ebx
c001b449:	5e                   	pop    esi
c001b44a:	5f                   	pop    edi
c001b44b:	5d                   	pop    ebp
c001b44c:	c3                   	ret    
c001b44d:	90                   	nop

c001b44e <SoundCard::getSamples32(int, int*)>:
c001b44e:	55                   	push   ebp
c001b44f:	57                   	push   edi
c001b450:	31 ff                	xor    edi,edi
c001b452:	56                   	push   esi
c001b453:	31 f6                	xor    esi,esi
c001b455:	53                   	push   ebx
c001b456:	83 ec 10             	sub    esp,0x10
c001b459:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b45d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b461:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b465:	c1 e0 02             	shl    eax,0x2
c001b468:	50                   	push   eax
c001b469:	6a 00                	push   0x0
c001b46b:	55                   	push   ebp
c001b46c:	e8 7f 50 fe ff       	call   c00004f0 <memset>
c001b471:	83 c4 10             	add    esp,0x10
c001b474:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001b47b:	85 c0                	test   eax,eax
c001b47d:	74 1a                	je     c001b499 <SoundCard::getSamples32(int, int*)+0x4b>
c001b47f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001b483:	75 14                	jne    c001b499 <SoundCard::getSamples32(int, int*)+0x4b>
c001b485:	53                   	push   ebx
c001b486:	55                   	push   ebp
c001b487:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b48b:	50                   	push   eax
c001b48c:	e8 03 04 00 00       	call   c001b894 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001b491:	83 c4 10             	add    esp,0x10
c001b494:	39 c6                	cmp    esi,eax
c001b496:	0f 4c f0             	cmovl  esi,eax
c001b499:	47                   	inc    edi
c001b49a:	83 ff 20             	cmp    edi,0x20
c001b49d:	75 d5                	jne    c001b474 <SoundCard::getSamples32(int, int*)+0x26>
c001b49f:	85 f6                	test   esi,esi
c001b4a1:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001b4a8:	75 0f                	jne    c001b4b9 <SoundCard::getSamples32(int, int*)+0x6b>
c001b4aa:	85 c0                	test   eax,eax
c001b4ac:	74 1b                	je     c001b4c9 <SoundCard::getSamples32(int, int*)+0x7b>
c001b4ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b4b0:	83 ec 0c             	sub    esp,0xc
c001b4b3:	53                   	push   ebx
c001b4b4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001b4b7:	eb 0d                	jmp    c001b4c6 <SoundCard::getSamples32(int, int*)+0x78>
c001b4b9:	85 c0                	test   eax,eax
c001b4bb:	75 0c                	jne    c001b4c9 <SoundCard::getSamples32(int, int*)+0x7b>
c001b4bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b4bf:	83 ec 0c             	sub    esp,0xc
c001b4c2:	53                   	push   ebx
c001b4c3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001b4c6:	83 c4 10             	add    esp,0x10
c001b4c9:	83 c4 0c             	add    esp,0xc
c001b4cc:	89 f0                	mov    eax,esi
c001b4ce:	5b                   	pop    ebx
c001b4cf:	5e                   	pop    esi
c001b4d0:	5f                   	pop    edi
c001b4d1:	5d                   	pop    ebp
c001b4d2:	c3                   	ret    
c001b4d3:	90                   	nop

c001b4d4 <SoundCard::addChannel(SoundPort*)>:
c001b4d4:	83 ec 0c             	sub    esp,0xc
c001b4d7:	31 c0                	xor    eax,eax
c001b4d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b4dd:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001b4e5:	74 1b                	je     c001b502 <SoundCard::addChannel(SoundPort*)+0x2e>
c001b4e7:	40                   	inc    eax
c001b4e8:	83 f8 20             	cmp    eax,0x20
c001b4eb:	75 f0                	jne    c001b4dd <SoundCard::addChannel(SoundPort*)+0x9>
c001b4ed:	83 ec 0c             	sub    esp,0xc
c001b4f0:	68 31 36 02 c0       	push   0xc0023631
c001b4f5:	e8 1c 37 ff ff       	call   c000ec16 <KePanic(char const*)>
c001b4fa:	83 c4 10             	add    esp,0x10
c001b4fd:	83 c8 ff             	or     eax,0xffffffff
c001b500:	eb 0b                	jmp    c001b50d <SoundCard::addChannel(SoundPort*)+0x39>
c001b502:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b506:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001b50d:	83 c4 0c             	add    esp,0xc
c001b510:	c3                   	ret    
c001b511:	90                   	nop

c001b512 <SoundCard::removeChannel(int)>:
c001b512:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b516:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b51a:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001b525:	c3                   	ret    
c001b526:	66 90                	xchg   ax,ax

c001b528 <SoundPort::SoundPort(int, int, int, int)>:
c001b528:	83 ec 0c             	sub    esp,0xc
c001b52b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b52f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001b536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b53a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001b53e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b542:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b546:	89 10                	mov    DWORD PTR [eax],edx
c001b548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b54c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b550:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b55b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001b55e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001b563:	75 13                	jne    c001b578 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001b565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b569:	8b 00                	mov    eax,DWORD PTR [eax]
c001b56b:	05 a0 0f 00 00       	add    eax,0xfa0
c001b570:	d1 e0                	shl    eax,1
c001b572:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b576:	66 90                	xchg   ax,ax
c001b578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b57c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b580:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001b583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b587:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001b58e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b592:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b595:	c1 e0 02             	shl    eax,0x2
c001b598:	83 ec 0c             	sub    esp,0xc
c001b59b:	50                   	push   eax
c001b59c:	e8 2f 33 ff ff       	call   c000e8d0 <malloc>
c001b5a1:	83 c4 10             	add    esp,0x10
c001b5a4:	89 c2                	mov    edx,eax
c001b5a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5aa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001b5ad:	90                   	nop
c001b5ae:	83 c4 0c             	add    esp,0xc
c001b5b1:	c3                   	ret    
c001b5b2:	66 90                	xchg   ax,ax

c001b5b4 <SoundPort::~SoundPort()>:
c001b5b4:	83 ec 0c             	sub    esp,0xc
c001b5b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5bb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b5be:	85 c0                	test   eax,eax
c001b5c0:	74 1e                	je     c001b5e0 <SoundPort::~SoundPort()+0x2c>
c001b5c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5c6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b5c9:	83 ec 0c             	sub    esp,0xc
c001b5cc:	50                   	push   eax
c001b5cd:	e8 0e 33 ff ff       	call   c000e8e0 <free>
c001b5d2:	83 c4 10             	add    esp,0x10
c001b5d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5d9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001b5e0:	90                   	nop
c001b5e1:	83 c4 0c             	add    esp,0xc
c001b5e4:	c3                   	ret    
c001b5e5:	90                   	nop
c001b5e6:	66 90                	xchg   ax,ax

c001b5e8 <SoundPort::unpause()>:
c001b5e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5ec:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001b5f0:	c3                   	ret    
c001b5f1:	90                   	nop
c001b5f2:	66 90                	xchg   ax,ax

c001b5f4 <SoundPort::pause()>:
c001b5f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5f8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001b5fc:	c3                   	ret    
c001b5fd:	90                   	nop
c001b5fe:	66 90                	xchg   ax,ax

c001b600 <SoundPort::getBufferUsed()>:
c001b600:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b604:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b607:	c3                   	ret    

c001b608 <SoundPort::getBufferSize()>:
c001b608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b60c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b60f:	c3                   	ret    

c001b610 <SoundPort::buffer8(signed char*, int)>:
c001b610:	55                   	push   ebp
c001b611:	57                   	push   edi
c001b612:	56                   	push   esi
c001b613:	53                   	push   ebx
c001b614:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b618:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001b61c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001b61f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001b622:	74 70                	je     c001b694 <SoundPort::buffer8(signed char*, int)+0x84>
c001b624:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b628:	85 c9                	test   ecx,ecx
c001b62a:	7e 68                	jle    c001b694 <SoundPort::buffer8(signed char*, int)+0x84>
c001b62c:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001b630:	8d 48 01             	lea    ecx,[eax+0x1]
c001b633:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b636:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b639:	89 f1                	mov    ecx,esi
c001b63b:	c1 e1 18             	shl    ecx,0x18
c001b63e:	29 f1                	sub    ecx,esi
c001b640:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001b643:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b646:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b649:	74 51                	je     c001b69c <SoundPort::buffer8(signed char*, int)+0x8c>
c001b64b:	31 ff                	xor    edi,edi
c001b64d:	eb 25                	jmp    c001b674 <SoundPort::buffer8(signed char*, int)+0x64>
c001b64f:	90                   	nop
c001b650:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001b655:	8d 59 01             	lea    ebx,[ecx+0x1]
c001b658:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001b65b:	89 f3                	mov    ebx,esi
c001b65d:	c1 e3 18             	shl    ebx,0x18
c001b660:	29 f3                	sub    ebx,esi
c001b662:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001b665:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001b668:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b66b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b66e:	74 1c                	je     c001b68c <SoundPort::buffer8(signed char*, int)+0x7c>
c001b670:	89 c7                	mov    edi,eax
c001b672:	66 90                	xchg   ax,ax
c001b674:	8d 47 01             	lea    eax,[edi+0x1]
c001b677:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001b67b:	75 d3                	jne    c001b650 <SoundPort::buffer8(signed char*, int)+0x40>
c001b67d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b681:	8d 76 00             	lea    esi,[esi+0x0]
c001b684:	5b                   	pop    ebx
c001b685:	5e                   	pop    esi
c001b686:	5f                   	pop    edi
c001b687:	5d                   	pop    ebp
c001b688:	c3                   	ret    
c001b689:	8d 76 00             	lea    esi,[esi+0x0]
c001b68c:	5b                   	pop    ebx
c001b68d:	8d 47 02             	lea    eax,[edi+0x2]
c001b690:	5e                   	pop    esi
c001b691:	5f                   	pop    edi
c001b692:	5d                   	pop    ebp
c001b693:	c3                   	ret    
c001b694:	5b                   	pop    ebx
c001b695:	31 c0                	xor    eax,eax
c001b697:	5e                   	pop    esi
c001b698:	5f                   	pop    edi
c001b699:	5d                   	pop    ebp
c001b69a:	c3                   	ret    
c001b69b:	90                   	nop
c001b69c:	b8 01 00 00 00       	mov    eax,0x1
c001b6a1:	eb e1                	jmp    c001b684 <SoundPort::buffer8(signed char*, int)+0x74>
c001b6a3:	90                   	nop

c001b6a4 <SoundPort::buffer16(short*, int)>:
c001b6a4:	55                   	push   ebp
c001b6a5:	57                   	push   edi
c001b6a6:	56                   	push   esi
c001b6a7:	53                   	push   ebx
c001b6a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b6ac:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001b6b0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001b6b3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001b6b6:	74 70                	je     c001b728 <SoundPort::buffer16(short*, int)+0x84>
c001b6b8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b6bc:	85 c9                	test   ecx,ecx
c001b6be:	7e 68                	jle    c001b728 <SoundPort::buffer16(short*, int)+0x84>
c001b6c0:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001b6c4:	8d 48 01             	lea    ecx,[eax+0x1]
c001b6c7:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b6ca:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b6cd:	89 f1                	mov    ecx,esi
c001b6cf:	c1 e1 10             	shl    ecx,0x10
c001b6d2:	29 f1                	sub    ecx,esi
c001b6d4:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001b6d7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b6da:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b6dd:	74 51                	je     c001b730 <SoundPort::buffer16(short*, int)+0x8c>
c001b6df:	31 ff                	xor    edi,edi
c001b6e1:	eb 25                	jmp    c001b708 <SoundPort::buffer16(short*, int)+0x64>
c001b6e3:	90                   	nop
c001b6e4:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001b6e9:	8d 59 01             	lea    ebx,[ecx+0x1]
c001b6ec:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001b6ef:	89 f3                	mov    ebx,esi
c001b6f1:	c1 e3 10             	shl    ebx,0x10
c001b6f4:	29 f3                	sub    ebx,esi
c001b6f6:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001b6f9:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001b6fc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b6ff:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b702:	74 1c                	je     c001b720 <SoundPort::buffer16(short*, int)+0x7c>
c001b704:	89 c7                	mov    edi,eax
c001b706:	66 90                	xchg   ax,ax
c001b708:	8d 47 01             	lea    eax,[edi+0x1]
c001b70b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001b70f:	75 d3                	jne    c001b6e4 <SoundPort::buffer16(short*, int)+0x40>
c001b711:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b715:	8d 76 00             	lea    esi,[esi+0x0]
c001b718:	5b                   	pop    ebx
c001b719:	5e                   	pop    esi
c001b71a:	5f                   	pop    edi
c001b71b:	5d                   	pop    ebp
c001b71c:	c3                   	ret    
c001b71d:	8d 76 00             	lea    esi,[esi+0x0]
c001b720:	5b                   	pop    ebx
c001b721:	8d 47 02             	lea    eax,[edi+0x2]
c001b724:	5e                   	pop    esi
c001b725:	5f                   	pop    edi
c001b726:	5d                   	pop    ebp
c001b727:	c3                   	ret    
c001b728:	5b                   	pop    ebx
c001b729:	31 c0                	xor    eax,eax
c001b72b:	5e                   	pop    esi
c001b72c:	5f                   	pop    edi
c001b72d:	5d                   	pop    ebp
c001b72e:	c3                   	ret    
c001b72f:	90                   	nop
c001b730:	b8 01 00 00 00       	mov    eax,0x1
c001b735:	eb e1                	jmp    c001b718 <SoundPort::buffer16(short*, int)+0x74>
c001b737:	90                   	nop

c001b738 <SoundPort::buffer32(int*, int)>:
c001b738:	55                   	push   ebp
c001b739:	57                   	push   edi
c001b73a:	56                   	push   esi
c001b73b:	53                   	push   ebx
c001b73c:	83 ec 04             	sub    esp,0x4
c001b73f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b743:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b747:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b74b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b74e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b751:	89 04 24             	mov    DWORD PTR [esp],eax
c001b754:	74 5a                	je     c001b7b0 <SoundPort::buffer32(int*, int)+0x78>
c001b756:	85 c0                	test   eax,eax
c001b758:	7e 56                	jle    c001b7b0 <SoundPort::buffer32(int*, int)+0x78>
c001b75a:	8d 71 01             	lea    esi,[ecx+0x1]
c001b75d:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b760:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b763:	8b 37                	mov    esi,DWORD PTR [edi]
c001b765:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001b768:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b76b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b76e:	74 4c                	je     c001b7bc <SoundPort::buffer32(int*, int)+0x84>
c001b770:	31 f6                	xor    esi,esi
c001b772:	eb 1c                	jmp    c001b790 <SoundPort::buffer32(int*, int)+0x58>
c001b774:	8d 69 01             	lea    ebp,[ecx+0x1]
c001b777:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001b77a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001b77d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b780:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001b784:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b787:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b78a:	74 18                	je     c001b7a4 <SoundPort::buffer32(int*, int)+0x6c>
c001b78c:	89 de                	mov    esi,ebx
c001b78e:	66 90                	xchg   ax,ax
c001b790:	8d 5e 01             	lea    ebx,[esi+0x1]
c001b793:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001b796:	75 dc                	jne    c001b774 <SoundPort::buffer32(int*, int)+0x3c>
c001b798:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b79b:	90                   	nop
c001b79c:	83 c4 04             	add    esp,0x4
c001b79f:	5b                   	pop    ebx
c001b7a0:	5e                   	pop    esi
c001b7a1:	5f                   	pop    edi
c001b7a2:	5d                   	pop    ebp
c001b7a3:	c3                   	ret    
c001b7a4:	8d 46 02             	lea    eax,[esi+0x2]
c001b7a7:	83 c4 04             	add    esp,0x4
c001b7aa:	5b                   	pop    ebx
c001b7ab:	5e                   	pop    esi
c001b7ac:	5f                   	pop    edi
c001b7ad:	5d                   	pop    ebp
c001b7ae:	c3                   	ret    
c001b7af:	90                   	nop
c001b7b0:	83 c4 04             	add    esp,0x4
c001b7b3:	31 c0                	xor    eax,eax
c001b7b5:	5b                   	pop    ebx
c001b7b6:	5e                   	pop    esi
c001b7b7:	5f                   	pop    edi
c001b7b8:	5d                   	pop    ebp
c001b7b9:	c3                   	ret    
c001b7ba:	66 90                	xchg   ax,ax
c001b7bc:	b8 01 00 00 00       	mov    eax,0x1
c001b7c1:	eb d9                	jmp    c001b79c <SoundPort::buffer32(int*, int)+0x64>
c001b7c3:	90                   	nop

c001b7c4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001b7c4:	55                   	push   ebp
c001b7c5:	57                   	push   edi
c001b7c6:	56                   	push   esi
c001b7c7:	53                   	push   ebx
c001b7c8:	83 ec 0c             	sub    esp,0xc
c001b7cb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b7cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b7d3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b7d7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b7db:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001b7e1:	39 03                	cmp    DWORD PTR [ebx],eax
c001b7e3:	74 13                	je     c001b7f8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001b7e5:	83 ec 0c             	sub    esp,0xc
c001b7e8:	68 84 36 02 c0       	push   0xc0023684
c001b7ed:	e8 24 34 ff ff       	call   c000ec16 <KePanic(char const*)>
c001b7f2:	83 c4 10             	add    esp,0x10
c001b7f5:	8d 76 00             	lea    esi,[esi+0x0]
c001b7f8:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b7fe:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b801:	74 11                	je     c001b814 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001b803:	83 ec 0c             	sub    esp,0xc
c001b806:	68 c3 36 02 c0       	push   0xc00236c3
c001b80b:	e8 06 34 ff ff       	call   c000ec16 <KePanic(char const*)>
c001b810:	83 c4 10             	add    esp,0x10
c001b813:	90                   	nop
c001b814:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b81a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b81d:	74 11                	je     c001b830 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001b81f:	83 ec 0c             	sub    esp,0xc
c001b822:	68 c3 36 02 c0       	push   0xc00236c3
c001b827:	e8 ea 33 ff ff       	call   c000ec16 <KePanic(char const*)>
c001b82c:	83 c4 10             	add    esp,0x10
c001b82f:	90                   	nop
c001b830:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001b833:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001b837:	85 f6                	test   esi,esi
c001b839:	7e 2d                	jle    c001b868 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001b83b:	31 c0                	xor    eax,eax
c001b83d:	8d 76 00             	lea    esi,[esi+0x0]
c001b840:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b843:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001b846:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001b84c:	85 c9                	test   ecx,ecx
c001b84e:	0f 49 d1             	cmovns edx,ecx
c001b851:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001b855:	c1 fa 0f             	sar    edx,0xf
c001b858:	01 d1                	add    ecx,edx
c001b85a:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001b85e:	83 c0 01             	add    eax,0x1
c001b861:	39 f0                	cmp    eax,esi
c001b863:	75 db                	jne    c001b840 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001b865:	8d 76 00             	lea    esi,[esi+0x0]
c001b868:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b86b:	83 ec 04             	sub    esp,0x4
c001b86e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b871:	29 f0                	sub    eax,esi
c001b873:	c1 e0 02             	shl    eax,0x2
c001b876:	50                   	push   eax
c001b877:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b87a:	50                   	push   eax
c001b87b:	52                   	push   edx
c001b87c:	e8 4f 4b fe ff       	call   c00003d0 <memmove>
c001b881:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b884:	29 f0                	sub    eax,esi
c001b886:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b889:	83 c4 1c             	add    esp,0x1c
c001b88c:	89 f0                	mov    eax,esi
c001b88e:	5b                   	pop    ebx
c001b88f:	5e                   	pop    esi
c001b890:	5f                   	pop    edi
c001b891:	5d                   	pop    ebp
c001b892:	c3                   	ret    
c001b893:	90                   	nop

c001b894 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b894:	55                   	push   ebp
c001b895:	57                   	push   edi
c001b896:	56                   	push   esi
c001b897:	53                   	push   ebx
c001b898:	83 ec 0c             	sub    esp,0xc
c001b89b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b89f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b8a3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b8a7:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b8ab:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001b8b1:	39 03                	cmp    DWORD PTR [ebx],eax
c001b8b3:	74 13                	je     c001b8c8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001b8b5:	83 ec 0c             	sub    esp,0xc
c001b8b8:	68 a4 36 02 c0       	push   0xc00236a4
c001b8bd:	e8 54 33 ff ff       	call   c000ec16 <KePanic(char const*)>
c001b8c2:	83 c4 10             	add    esp,0x10
c001b8c5:	8d 76 00             	lea    esi,[esi+0x0]
c001b8c8:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b8ce:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b8d1:	74 11                	je     c001b8e4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001b8d3:	83 ec 0c             	sub    esp,0xc
c001b8d6:	68 df 36 02 c0       	push   0xc00236df
c001b8db:	e8 36 33 ff ff       	call   c000ec16 <KePanic(char const*)>
c001b8e0:	83 c4 10             	add    esp,0x10
c001b8e3:	90                   	nop
c001b8e4:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b8ea:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b8ed:	74 11                	je     c001b900 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001b8ef:	83 ec 0c             	sub    esp,0xc
c001b8f2:	68 df 36 02 c0       	push   0xc00236df
c001b8f7:	e8 1a 33 ff ff       	call   c000ec16 <KePanic(char const*)>
c001b8fc:	83 c4 10             	add    esp,0x10
c001b8ff:	90                   	nop
c001b900:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001b903:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001b907:	85 ff                	test   edi,edi
c001b909:	7e 21                	jle    c001b92c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001b90b:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b912:	31 c0                	xor    eax,eax
c001b914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b917:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001b91a:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b91d:	01 d5                	add    ebp,edx
c001b91f:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001b922:	83 c0 04             	add    eax,0x4
c001b925:	39 c1                	cmp    ecx,eax
c001b927:	75 eb                	jne    c001b914 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001b929:	8d 76 00             	lea    esi,[esi+0x0]
c001b92c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b92f:	83 ec 04             	sub    esp,0x4
c001b932:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b935:	29 f8                	sub    eax,edi
c001b937:	c1 e0 02             	shl    eax,0x2
c001b93a:	50                   	push   eax
c001b93b:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b93e:	50                   	push   eax
c001b93f:	52                   	push   edx
c001b940:	e8 8b 4a fe ff       	call   c00003d0 <memmove>
c001b945:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b948:	29 f8                	sub    eax,edi
c001b94a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b94d:	83 c4 1c             	add    esp,0x1c
c001b950:	89 f8                	mov    eax,edi
c001b952:	5b                   	pop    ebx
c001b953:	5e                   	pop    esi
c001b954:	5f                   	pop    edi
c001b955:	5d                   	pop    ebp
c001b956:	c3                   	ret    
c001b957:	90                   	nop

c001b958 <PCI::open(int, int, void*)>:
c001b958:	83 ec 18             	sub    esp,0x18
c001b95b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b95f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b963:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b969:	8b 10                	mov    edx,DWORD PTR [eax]
c001b96b:	50                   	push   eax
c001b96c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b96f:	31 c0                	xor    eax,eax
c001b971:	83 c4 1c             	add    esp,0x1c
c001b974:	c3                   	ret    
c001b975:	90                   	nop

c001b976 <PCI::close(int, int, void*)>:
c001b976:	31 c0                	xor    eax,eax
c001b978:	c3                   	ret    
c001b979:	90                   	nop

c001b97a <PCI::PCI()>:
c001b97a:	83 ec 0c             	sub    esp,0xc
c001b97d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b981:	83 ec 08             	sub    esp,0x8
c001b984:	68 fb 36 02 c0       	push   0xc00236fb
c001b989:	50                   	push   eax
c001b98a:	e8 59 cf fe ff       	call   c00088e8 <Bus::Bus(char const*)>
c001b98f:	83 c4 10             	add    esp,0x10
c001b992:	ba 08 38 02 c0       	mov    edx,0xc0023808
c001b997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b99b:	89 10                	mov    DWORD PTR [eax],edx
c001b99d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9a1:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b9ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9af:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001b9b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9b8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b9be:	0f b6 d0             	movzx  edx,al
c001b9c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9c5:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9d0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b9d6:	0f b6 d0             	movzx  edx,al
c001b9d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9dd:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b9e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9e6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b9ec:	8d 50 01             	lea    edx,[eax+0x1]
c001b9ef:	88 d1                	mov    cl,dl
c001b9f1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b9f5:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b9fb:	0f b6 d0             	movzx  edx,al
c001b9fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba02:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ba06:	83 c9 c0             	or     ecx,0xffffffc0
c001ba09:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ba0d:	90                   	nop
c001ba0e:	83 c4 0c             	add    esp,0xc
c001ba11:	c3                   	ret    

c001ba12 <PCI::readBAR8(unsigned int, int)>:
c001ba12:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ba16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba1a:	f6 c2 01             	test   dl,0x1
c001ba1d:	74 07                	je     c001ba26 <PCI::readBAR8(unsigned int, int)+0x14>
c001ba1f:	83 e2 fc             	and    edx,0xfffffffc
c001ba22:	01 c2                	add    edx,eax
c001ba24:	ec                   	in     al,dx
c001ba25:	c3                   	ret    
c001ba26:	83 e2 f0             	and    edx,0xfffffff0
c001ba29:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001ba2c:	c3                   	ret    
c001ba2d:	90                   	nop

c001ba2e <PCI::readBAR16(unsigned int, int)>:
c001ba2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ba32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba36:	f6 c2 01             	test   dl,0x1
c001ba39:	74 08                	je     c001ba43 <PCI::readBAR16(unsigned int, int)+0x15>
c001ba3b:	83 e2 fc             	and    edx,0xfffffffc
c001ba3e:	01 c2                	add    edx,eax
c001ba40:	66 ed                	in     ax,dx
c001ba42:	c3                   	ret    
c001ba43:	83 e2 f0             	and    edx,0xfffffff0
c001ba46:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001ba4a:	c3                   	ret    
c001ba4b:	90                   	nop

c001ba4c <PCI::readBAR32(unsigned int, int)>:
c001ba4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ba50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba54:	f6 c2 01             	test   dl,0x1
c001ba57:	74 07                	je     c001ba60 <PCI::readBAR32(unsigned int, int)+0x14>
c001ba59:	83 e2 fc             	and    edx,0xfffffffc
c001ba5c:	01 c2                	add    edx,eax
c001ba5e:	ed                   	in     eax,dx
c001ba5f:	c3                   	ret    
c001ba60:	83 e2 f0             	and    edx,0xfffffff0
c001ba63:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001ba66:	c3                   	ret    
c001ba67:	90                   	nop

c001ba68 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001ba68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ba6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba70:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba74:	f6 c2 01             	test   dl,0x1
c001ba77:	74 07                	je     c001ba80 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001ba79:	83 e2 fc             	and    edx,0xfffffffc
c001ba7c:	01 ca                	add    edx,ecx
c001ba7e:	ee                   	out    dx,al
c001ba7f:	c3                   	ret    
c001ba80:	83 e2 f0             	and    edx,0xfffffff0
c001ba83:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001ba86:	c3                   	ret    
c001ba87:	90                   	nop

c001ba88 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001ba88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ba8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba90:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba94:	f6 c2 01             	test   dl,0x1
c001ba97:	74 08                	je     c001baa1 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001ba99:	83 e2 fc             	and    edx,0xfffffffc
c001ba9c:	01 ca                	add    edx,ecx
c001ba9e:	66 ef                	out    dx,ax
c001baa0:	c3                   	ret    
c001baa1:	83 e2 f0             	and    edx,0xfffffff0
c001baa4:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001baa8:	c3                   	ret    
c001baa9:	90                   	nop

c001baaa <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001baaa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001baae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bab2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bab6:	f6 c2 01             	test   dl,0x1
c001bab9:	74 07                	je     c001bac2 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001babb:	83 e2 fc             	and    edx,0xfffffffc
c001babe:	01 ca                	add    edx,ecx
c001bac0:	ef                   	out    dx,eax
c001bac1:	c3                   	ret    
c001bac2:	83 e2 f0             	and    edx,0xfffffff0
c001bac5:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001bac8:	c3                   	ret    
c001bac9:	90                   	nop

c001baca <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001baca:	55                   	push   ebp
c001bacb:	57                   	push   edi
c001bacc:	56                   	push   esi
c001bacd:	53                   	push   ebx
c001bace:	83 ec 0c             	sub    esp,0xc
c001bad1:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001bad6:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001bada:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001bade:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bae2:	83 fe 07             	cmp    esi,0x7
c001bae5:	76 10                	jbe    c001baf7 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001bae7:	83 ec 0c             	sub    esp,0xc
c001baea:	68 03 37 02 c0       	push   0xc0023703
c001baef:	e8 22 31 ff ff       	call   c000ec16 <KePanic(char const*)>
c001baf4:	83 c4 10             	add    esp,0x10
c001baf7:	0f b6 db             	movzx  ebx,bl
c001bafa:	83 fb 0f             	cmp    ebx,0xf
c001bafd:	76 10                	jbe    c001bb0f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001baff:	83 ec 0c             	sub    esp,0xc
c001bb02:	68 33 37 02 c0       	push   0xc0023733
c001bb07:	e8 0a 31 ff ff       	call   c000ec16 <KePanic(char const*)>
c001bb0c:	83 c4 10             	add    esp,0x10
c001bb0f:	8d 04 36             	lea    eax,[esi+esi*1]
c001bb12:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bb17:	83 c8 f0             	or     eax,0xfffffff0
c001bb1a:	ee                   	out    dx,al
c001bb1b:	ba fa 0c 00 00       	mov    edx,0xcfa
c001bb20:	89 e8                	mov    eax,ebp
c001bb22:	ee                   	out    dx,al
c001bb23:	89 f9                	mov    ecx,edi
c001bb25:	89 d8                	mov    eax,ebx
c001bb27:	0f b6 d9             	movzx  ebx,cl
c001bb2a:	83 c4 0c             	add    esp,0xc
c001bb2d:	c1 e0 08             	shl    eax,0x8
c001bb30:	83 e3 fc             	and    ebx,0xfffffffc
c001bb33:	09 d8                	or     eax,ebx
c001bb35:	5b                   	pop    ebx
c001bb36:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001bb3b:	5e                   	pop    esi
c001bb3c:	5f                   	pop    edi
c001bb3d:	5d                   	pop    ebp
c001bb3e:	c3                   	ret    
c001bb3f:	90                   	nop

c001bb40 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bb40:	57                   	push   edi
c001bb41:	56                   	push   esi
c001bb42:	53                   	push   ebx
c001bb43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bb4b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bb4f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bb53:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001bb59:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bb5d:	83 ff 01             	cmp    edi,0x1
c001bb60:	75 3f                	jne    c001bba1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001bb62:	89 de                	mov    esi,ebx
c001bb64:	0f b6 c0             	movzx  eax,al
c001bb67:	c1 e0 10             	shl    eax,0x10
c001bb6a:	81 e6 fc 00 00 00    	and    esi,0xfc
c001bb70:	0f b6 c9             	movzx  ecx,cl
c001bb73:	09 f0                	or     eax,esi
c001bb75:	c1 e1 08             	shl    ecx,0x8
c001bb78:	0f b6 d2             	movzx  edx,dl
c001bb7b:	c1 e2 0b             	shl    edx,0xb
c001bb7e:	09 c8                	or     eax,ecx
c001bb80:	09 d0                	or     eax,edx
c001bb82:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bb87:	0d 00 00 00 80       	or     eax,0x80000000
c001bb8c:	ef                   	out    dx,eax
c001bb8d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bb92:	ed                   	in     eax,dx
c001bb93:	83 e3 02             	and    ebx,0x2
c001bb96:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001bb9d:	d3 e8                	shr    eax,cl
c001bb9f:	eb 44                	jmp    c001bbe5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001bba1:	83 ff 02             	cmp    edi,0x2
c001bba4:	75 2d                	jne    c001bbd3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001bba6:	83 ec 0c             	sub    esp,0xc
c001bba9:	0f b6 fb             	movzx  edi,bl
c001bbac:	57                   	push   edi
c001bbad:	0f b6 c9             	movzx  ecx,cl
c001bbb0:	51                   	push   ecx
c001bbb1:	0f b6 d2             	movzx  edx,dl
c001bbb4:	52                   	push   edx
c001bbb5:	0f b6 c0             	movzx  eax,al
c001bbb8:	50                   	push   eax
c001bbb9:	56                   	push   esi
c001bbba:	e8 0b ff ff ff       	call   c001baca <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbbf:	89 c2                	mov    edx,eax
c001bbc1:	ed                   	in     eax,dx
c001bbc2:	83 e3 02             	and    ebx,0x2
c001bbc5:	83 c4 20             	add    esp,0x20
c001bbc8:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001bbcf:	d3 e8                	shr    eax,cl
c001bbd1:	eb 12                	jmp    c001bbe5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001bbd3:	83 ec 0c             	sub    esp,0xc
c001bbd6:	68 63 37 02 c0       	push   0xc0023763
c001bbdb:	e8 36 30 ff ff       	call   c000ec16 <KePanic(char const*)>
c001bbe0:	83 c4 10             	add    esp,0x10
c001bbe3:	31 c0                	xor    eax,eax
c001bbe5:	5b                   	pop    ebx
c001bbe6:	5e                   	pop    esi
c001bbe7:	5f                   	pop    edi
c001bbe8:	c3                   	ret    
c001bbe9:	90                   	nop

c001bbea <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001bbea:	83 ec 18             	sub    esp,0x18
c001bbed:	6a 00                	push   0x0
c001bbef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bbf4:	50                   	push   eax
c001bbf5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bbfa:	50                   	push   eax
c001bbfb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc00:	50                   	push   eax
c001bc01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc05:	e8 36 ff ff ff       	call   c001bb40 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc0a:	83 c4 2c             	add    esp,0x2c
c001bc0d:	c3                   	ret    

c001bc0e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001bc0e:	83 ec 18             	sub    esp,0x18
c001bc11:	6a 0e                	push   0xe
c001bc13:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc18:	50                   	push   eax
c001bc19:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc1e:	50                   	push   eax
c001bc1f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc24:	50                   	push   eax
c001bc25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc29:	e8 12 ff ff ff       	call   c001bb40 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc2e:	83 c4 2c             	add    esp,0x2c
c001bc31:	0f b6 c0             	movzx  eax,al
c001bc34:	c3                   	ret    
c001bc35:	90                   	nop

c001bc36 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001bc36:	55                   	push   ebp
c001bc37:	57                   	push   edi
c001bc38:	56                   	push   esi
c001bc39:	53                   	push   ebx
c001bc3a:	83 ec 18             	sub    esp,0x18
c001bc3d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001bc42:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001bc47:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001bc4c:	6a 0a                	push   0xa
c001bc4e:	56                   	push   esi
c001bc4f:	55                   	push   ebp
c001bc50:	57                   	push   edi
c001bc51:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bc55:	e8 e6 fe ff ff       	call   c001bb40 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc5a:	83 c4 14             	add    esp,0x14
c001bc5d:	6a 0a                	push   0xa
c001bc5f:	56                   	push   esi
c001bc60:	55                   	push   ebp
c001bc61:	57                   	push   edi
c001bc62:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bc66:	89 c3                	mov    ebx,eax
c001bc68:	0f b6 db             	movzx  ebx,bl
c001bc6b:	e8 d0 fe ff ff       	call   c001bb40 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc70:	83 c4 2c             	add    esp,0x2c
c001bc73:	25 00 ff 00 00       	and    eax,0xff00
c001bc78:	09 d8                	or     eax,ebx
c001bc7a:	5b                   	pop    ebx
c001bc7b:	5e                   	pop    esi
c001bc7c:	5f                   	pop    edi
c001bc7d:	5d                   	pop    ebp
c001bc7e:	c3                   	ret    
c001bc7f:	90                   	nop

c001bc80 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001bc80:	83 ec 18             	sub    esp,0x18
c001bc83:	6a 08                	push   0x8
c001bc85:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc8a:	50                   	push   eax
c001bc8b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc90:	50                   	push   eax
c001bc91:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc96:	50                   	push   eax
c001bc97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc9b:	e8 a0 fe ff ff       	call   c001bb40 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bca0:	83 c4 2c             	add    esp,0x2c
c001bca3:	0f b6 c4             	movzx  eax,ah
c001bca6:	c3                   	ret    
c001bca7:	90                   	nop

c001bca8 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001bca8:	83 ec 18             	sub    esp,0x18
c001bcab:	6a 08                	push   0x8
c001bcad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bcb2:	50                   	push   eax
c001bcb3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bcb8:	50                   	push   eax
c001bcb9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bcbe:	50                   	push   eax
c001bcbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bcc3:	e8 78 fe ff ff       	call   c001bb40 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bcc8:	83 c4 2c             	add    esp,0x2c
c001bccb:	c3                   	ret    

c001bccc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001bccc:	83 ec 18             	sub    esp,0x18
c001bccf:	6a 3c                	push   0x3c
c001bcd1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bcd6:	50                   	push   eax
c001bcd7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bcdc:	50                   	push   eax
c001bcdd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bce2:	50                   	push   eax
c001bce3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bce7:	e8 54 fe ff ff       	call   c001bb40 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bcec:	83 c4 2c             	add    esp,0x2c
c001bcef:	c3                   	ret    

c001bcf0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001bcf0:	83 ec 18             	sub    esp,0x18
c001bcf3:	6a 18                	push   0x18
c001bcf5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bcfa:	50                   	push   eax
c001bcfb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd00:	50                   	push   eax
c001bd01:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd06:	50                   	push   eax
c001bd07:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bd0b:	e8 30 fe ff ff       	call   c001bb40 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bd10:	83 c4 2c             	add    esp,0x2c
c001bd13:	0f b6 c4             	movzx  eax,ah
c001bd16:	c3                   	ret    
c001bd17:	90                   	nop

c001bd18 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bd18:	55                   	push   ebp
c001bd19:	57                   	push   edi
c001bd1a:	56                   	push   esi
c001bd1b:	53                   	push   ebx
c001bd1c:	83 ec 28             	sub    esp,0x28
c001bd1f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001bd23:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001bd28:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001bd2d:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001bd32:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001bd39:	8d 43 12             	lea    eax,[ebx+0x12]
c001bd3c:	83 c3 10             	add    ebx,0x10
c001bd3f:	0f b6 c0             	movzx  eax,al
c001bd42:	0f b6 db             	movzx  ebx,bl
c001bd45:	50                   	push   eax
c001bd46:	51                   	push   ecx
c001bd47:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001bd4b:	57                   	push   edi
c001bd4c:	55                   	push   ebp
c001bd4d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001bd51:	e8 ea fd ff ff       	call   c001bb40 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bd56:	83 c4 14             	add    esp,0x14
c001bd59:	53                   	push   ebx
c001bd5a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bd5e:	51                   	push   ecx
c001bd5f:	89 c6                	mov    esi,eax
c001bd61:	57                   	push   edi
c001bd62:	55                   	push   ebp
c001bd63:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001bd67:	c1 e6 10             	shl    esi,0x10
c001bd6a:	e8 d1 fd ff ff       	call   c001bb40 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bd6f:	83 c4 3c             	add    esp,0x3c
c001bd72:	5b                   	pop    ebx
c001bd73:	0f b7 c0             	movzx  eax,ax
c001bd76:	09 f0                	or     eax,esi
c001bd78:	5e                   	pop    esi
c001bd79:	5f                   	pop    edi
c001bd7a:	5d                   	pop    ebp
c001bd7b:	c3                   	ret    

c001bd7c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001bd7c:	55                   	push   ebp
c001bd7d:	57                   	push   edi
c001bd7e:	56                   	push   esi
c001bd7f:	53                   	push   ebx
c001bd80:	83 ec 0c             	sub    esp,0xc
c001bd83:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bd87:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bd8b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bd8f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001bd93:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001bd99:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bd9d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bda1:	83 f9 01             	cmp    ecx,0x1
c001bda4:	75 5d                	jne    c001be03 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001bda6:	0f b6 c8             	movzx  ecx,al
c001bda9:	89 f0                	mov    eax,esi
c001bdab:	25 fc 00 00 00       	and    eax,0xfc
c001bdb0:	0f b6 d2             	movzx  edx,dl
c001bdb3:	c1 e1 10             	shl    ecx,0x10
c001bdb6:	c1 e2 0b             	shl    edx,0xb
c001bdb9:	09 c1                	or     ecx,eax
c001bdbb:	89 f8                	mov    eax,edi
c001bdbd:	0f b6 f8             	movzx  edi,al
c001bdc0:	c1 e7 08             	shl    edi,0x8
c001bdc3:	09 f9                	or     ecx,edi
c001bdc5:	09 d1                	or     ecx,edx
c001bdc7:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bdcc:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001bdd2:	89 c8                	mov    eax,ecx
c001bdd4:	ef                   	out    dx,eax
c001bdd5:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bdda:	ed                   	in     eax,dx
c001bddb:	83 e6 02             	and    esi,0x2
c001bdde:	0f b7 db             	movzx  ebx,bx
c001bde1:	74 0a                	je     c001bded <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001bde3:	c1 e3 10             	shl    ebx,0x10
c001bde6:	0f b7 d0             	movzx  edx,ax
c001bde9:	09 d3                	or     ebx,edx
c001bdeb:	eb 05                	jmp    c001bdf2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001bded:	66 31 c0             	xor    ax,ax
c001bdf0:	09 c3                	or     ebx,eax
c001bdf2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bdf7:	89 c8                	mov    eax,ecx
c001bdf9:	ef                   	out    dx,eax
c001bdfa:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bdff:	89 d8                	mov    eax,ebx
c001be01:	eb 41                	jmp    c001be44 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001be03:	83 f9 02             	cmp    ecx,0x2
c001be06:	75 45                	jne    c001be4d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001be08:	89 f1                	mov    ecx,esi
c001be0a:	83 ec 0c             	sub    esp,0xc
c001be0d:	0f b6 f1             	movzx  esi,cl
c001be10:	89 f9                	mov    ecx,edi
c001be12:	56                   	push   esi
c001be13:	0f b6 f9             	movzx  edi,cl
c001be16:	57                   	push   edi
c001be17:	0f b6 d2             	movzx  edx,dl
c001be1a:	52                   	push   edx
c001be1b:	0f b6 c0             	movzx  eax,al
c001be1e:	50                   	push   eax
c001be1f:	55                   	push   ebp
c001be20:	e8 a5 fc ff ff       	call   c001baca <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001be25:	89 c2                	mov    edx,eax
c001be27:	ed                   	in     eax,dx
c001be28:	83 c4 20             	add    esp,0x20
c001be2b:	f6 c2 02             	test   dl,0x2
c001be2e:	0f b7 db             	movzx  ebx,bx
c001be31:	74 0c                	je     c001be3f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001be33:	0f b7 c8             	movzx  ecx,ax
c001be36:	89 d8                	mov    eax,ebx
c001be38:	c1 e0 10             	shl    eax,0x10
c001be3b:	09 c8                	or     eax,ecx
c001be3d:	eb 05                	jmp    c001be44 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001be3f:	66 31 c0             	xor    ax,ax
c001be42:	09 d8                	or     eax,ebx
c001be44:	ef                   	out    dx,eax
c001be45:	83 c4 0c             	add    esp,0xc
c001be48:	5b                   	pop    ebx
c001be49:	5e                   	pop    esi
c001be4a:	5f                   	pop    edi
c001be4b:	5d                   	pop    ebp
c001be4c:	c3                   	ret    
c001be4d:	c7 44 24 20 63 37 02 c0 	mov    DWORD PTR [esp+0x20],0xc0023763
c001be55:	83 c4 0c             	add    esp,0xc
c001be58:	5b                   	pop    ebx
c001be59:	5e                   	pop    esi
c001be5a:	5f                   	pop    edi
c001be5b:	5d                   	pop    ebp
c001be5c:	e9 b5 2d ff ff       	jmp    c000ec16 <KePanic(char const*)>
c001be61:	90                   	nop

c001be62 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001be62:	55                   	push   ebp
c001be63:	57                   	push   edi
c001be64:	56                   	push   esi
c001be65:	53                   	push   ebx
c001be66:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001be6c:	80 3d cc d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0cc,0x0
c001be73:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001be7a:	0f 85 bd 00 00 00    	jne    c001bf3d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001be80:	83 ec 0c             	sub    esp,0xc
c001be83:	68 14 01 00 00       	push   0x114
c001be88:	e8 43 2a ff ff       	call   c000e8d0 <malloc>
c001be8d:	83 c4 0c             	add    esp,0xc
c001be90:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c001be96:	68 69 37 02 c0       	push   0xc0023769
c001be9b:	50                   	push   eax
c001be9c:	89 c3                	mov    ebx,eax
c001be9e:	e8 69 c2 fe ff       	call   c000810c <File::File(char const*, Process*)>
c001bea3:	83 c4 10             	add    esp,0x10
c001bea6:	85 db                	test   ebx,ebx
c001bea8:	0f 84 6b 02 00 00    	je     c001c119 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001beae:	57                   	push   edi
c001beaf:	57                   	push   edi
c001beb0:	6a 01                	push   0x1
c001beb2:	53                   	push   ebx
c001beb3:	e8 72 c2 fe ff       	call   c000812a <File::open(FileOpenMode)>
c001beb8:	83 c4 10             	add    esp,0x10
c001bebb:	85 c0                	test   eax,eax
c001bebd:	0f 85 56 02 00 00    	jne    c001c119 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001bec3:	52                   	push   edx
c001bec4:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001bec8:	50                   	push   eax
c001bec9:	8d 44 24 48          	lea    eax,[esp+0x48]
c001becd:	50                   	push   eax
c001bece:	53                   	push   ebx
c001becf:	e8 58 c5 fe ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c001bed4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001bed8:	40                   	inc    eax
c001bed9:	89 04 24             	mov    DWORD PTR [esp],eax
c001bedc:	e8 ef 29 ff ff       	call   c000e8d0 <malloc>
c001bee1:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001bee5:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001bee9:	59                   	pop    ecx
c001beea:	a3 c8 d0 02 c0       	mov    ds:0xc002d0c8,eax
c001beef:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bef1:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001bef5:	51                   	push   ecx
c001bef6:	50                   	push   eax
c001bef7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001befb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001beff:	53                   	push   ebx
c001bf00:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bf03:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001bf07:	83 c4 20             	add    esp,0x20
c001bf0a:	89 c8                	mov    eax,ecx
c001bf0c:	99                   	cdq    
c001bf0d:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001bf11:	0f 85 02 02 00 00    	jne    c001c119 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001bf17:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001bf1b:	0f 85 f8 01 00 00    	jne    c001c119 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001bf21:	83 ec 0c             	sub    esp,0xc
c001bf24:	53                   	push   ebx
c001bf25:	e8 5e c2 fe ff       	call   c0008188 <File::close()>
c001bf2a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001bf2e:	83 c4 10             	add    esp,0x10
c001bf31:	c6 05 cc d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0cc,0x1
c001bf38:	a3 c4 d0 02 c0       	mov    ds:0xc002d0c4,eax
c001bf3d:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001bf45:	31 c9                	xor    ecx,ecx
c001bf47:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001bf4e:	8b 2d c4 d0 02 c0    	mov    ebp,DWORD PTR ds:0xc002d0c4
c001bf54:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001bf5b:	8b 15 c8 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0c8
c001bf61:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001bf66:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001bf6e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001bf73:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001bf7b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bf7f:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001bf87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001bf8b:	39 cd                	cmp    ebp,ecx
c001bf8d:	0f 8e 86 01 00 00    	jle    c001c119 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001bf93:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001bf96:	d4 40                	aam    0x40
c001bf98:	d5 39                	aad    0x39
c001bf9a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001bf9e:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001bfa2:	d4 40                	aam    0x40
c001bfa4:	d5 39                	aad    0x39
c001bfa6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bfaa:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001bfae:	d4 40                	aam    0x40
c001bfb0:	d5 39                	aad    0x39
c001bfb2:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001bfb6:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001bfba:	d4 40                	aam    0x40
c001bfbc:	d5 39                	aad    0x39
c001bfbe:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001bfc2:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001bfc6:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001bfca:	3c 56                	cmp    al,0x56
c001bfcc:	74 47                	je     c001c015 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001bfce:	d4 40                	aam    0x40
c001bfd0:	d5 39                	aad    0x39
c001bfd2:	8d 58 d0             	lea    ebx,[eax-0x30]
c001bfd5:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001bfd9:	0f b6 db             	movzx  ebx,bl
c001bfdc:	c1 e3 04             	shl    ebx,0x4
c001bfdf:	d4 40                	aam    0x40
c001bfe1:	d5 39                	aad    0x39
c001bfe3:	83 e8 30             	sub    eax,0x30
c001bfe6:	0f b6 c0             	movzx  eax,al
c001bfe9:	09 c3                	or     ebx,eax
c001bfeb:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001bfef:	c1 e3 04             	shl    ebx,0x4
c001bff2:	d4 40                	aam    0x40
c001bff4:	d5 39                	aad    0x39
c001bff6:	83 e8 30             	sub    eax,0x30
c001bff9:	0f b6 c0             	movzx  eax,al
c001bffc:	09 c3                	or     ebx,eax
c001bffe:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001c002:	c1 e3 04             	shl    ebx,0x4
c001c005:	d4 40                	aam    0x40
c001c007:	d5 39                	aad    0x39
c001c009:	83 e8 30             	sub    eax,0x30
c001c00c:	0f b6 c0             	movzx  eax,al
c001c00f:	09 c3                	or     ebx,eax
c001c011:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001c015:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001c019:	80 fb 58             	cmp    bl,0x58
c001c01c:	74 49                	je     c001c067 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001c01e:	88 d8                	mov    al,bl
c001c020:	d4 40                	aam    0x40
c001c022:	d5 39                	aad    0x39
c001c024:	83 e8 30             	sub    eax,0x30
c001c027:	0f b6 f8             	movzx  edi,al
c001c02a:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001c02e:	c1 e7 04             	shl    edi,0x4
c001c031:	d4 40                	aam    0x40
c001c033:	d5 39                	aad    0x39
c001c035:	83 e8 30             	sub    eax,0x30
c001c038:	0f b6 c0             	movzx  eax,al
c001c03b:	09 c7                	or     edi,eax
c001c03d:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001c041:	c1 e7 04             	shl    edi,0x4
c001c044:	d4 40                	aam    0x40
c001c046:	d5 39                	aad    0x39
c001c048:	83 e8 30             	sub    eax,0x30
c001c04b:	0f b6 c0             	movzx  eax,al
c001c04e:	09 c7                	or     edi,eax
c001c050:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001c054:	c1 e7 04             	shl    edi,0x4
c001c057:	d4 40                	aam    0x40
c001c059:	d5 39                	aad    0x39
c001c05b:	83 e8 30             	sub    eax,0x30
c001c05e:	0f b6 c0             	movzx  eax,al
c001c061:	09 c7                	or     edi,eax
c001c063:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001c067:	8d 41 10             	lea    eax,[ecx+0x10]
c001c06a:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001c06e:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001c072:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001c076:	83 f9 0a             	cmp    ecx,0xa
c001c079:	74 07                	je     c001c082 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001c07b:	47                   	inc    edi
c001c07c:	39 c5                	cmp    ebp,eax
c001c07e:	75 16                	jne    c001c096 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001c080:	89 e8                	mov    eax,ebp
c001c082:	83 f9 0a             	cmp    ecx,0xa
c001c085:	0f 94 c1             	sete   cl
c001c088:	0f b6 c9             	movzx  ecx,cl
c001c08b:	01 c1                	add    ecx,eax
c001c08d:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001c092:	75 0f                	jne    c001c0a3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001c094:	eb 1c                	jmp    c001c0b2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001c096:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001c099:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001c09d:	40                   	inc    eax
c001c09e:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001c0a1:	eb cb                	jmp    c001c06e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001c0a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c0a7:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001c0ac:	0f 85 d9 fe ff ff    	jne    c001bf8b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001c0b2:	80 fb 58             	cmp    bl,0x58
c001c0b5:	74 10                	je     c001c0c7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001c0b7:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001c0bc:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001c0c1:	0f 85 c4 fe ff ff    	jne    c001bf8b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001c0c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c0cb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c0cf:	83 e8 30             	sub    eax,0x30
c001c0d2:	c1 e0 04             	shl    eax,0x4
c001c0d5:	83 eb 30             	sub    ebx,0x30
c001c0d8:	09 d8                	or     eax,ebx
c001c0da:	0f b6 c0             	movzx  eax,al
c001c0dd:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001c0e1:	0f 85 a4 fe ff ff    	jne    c001bf8b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001c0e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c0eb:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c0ef:	83 e8 30             	sub    eax,0x30
c001c0f2:	c1 e0 04             	shl    eax,0x4
c001c0f5:	83 eb 30             	sub    ebx,0x30
c001c0f8:	09 d8                	or     eax,ebx
c001c0fa:	0f b6 c0             	movzx  eax,al
c001c0fd:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001c101:	0f 85 84 fe ff ff    	jne    c001bf8b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001c107:	50                   	push   eax
c001c108:	50                   	push   eax
c001c109:	8d 44 24 48          	lea    eax,[esp+0x48]
c001c10d:	50                   	push   eax
c001c10e:	56                   	push   esi
c001c10f:	e8 3c 45 fe ff       	call   c0000650 <strcpy>
c001c114:	83 c4 10             	add    esp,0x10
c001c117:	eb 05                	jmp    c001c11e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001c119:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c11c:	31 f6                	xor    esi,esi
c001c11e:	81 c4 4c 01 00 00    	add    esp,0x14c
c001c124:	89 f0                	mov    eax,esi
c001c126:	5b                   	pop    ebx
c001c127:	5e                   	pop    esi
c001c128:	5f                   	pop    edi
c001c129:	5d                   	pop    ebp
c001c12a:	c3                   	ret    
c001c12b:	90                   	nop

c001c12c <PCI::checkBus(unsigned char)>:
c001c12c:	56                   	push   esi
c001c12d:	53                   	push   ebx
c001c12e:	31 db                	xor    ebx,ebx
c001c130:	51                   	push   ecx
c001c131:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c136:	52                   	push   edx
c001c137:	53                   	push   ebx
c001c138:	43                   	inc    ebx
c001c139:	56                   	push   esi
c001c13a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c13e:	e8 6f 03 00 00       	call   c001c4b2 <PCI::checkDevice(unsigned char, unsigned char)>
c001c143:	83 c4 10             	add    esp,0x10
c001c146:	83 fb 20             	cmp    ebx,0x20
c001c149:	75 eb                	jne    c001c136 <PCI::checkBus(unsigned char)+0xa>
c001c14b:	58                   	pop    eax
c001c14c:	5b                   	pop    ebx
c001c14d:	5e                   	pop    esi
c001c14e:	c3                   	ret    
c001c14f:	90                   	nop

c001c150 <PCI::foundDevice(PCIDeviceInfo)>:
c001c150:	55                   	push   ebp
c001c151:	57                   	push   edi
c001c152:	56                   	push   esi
c001c153:	53                   	push   ebx
c001c154:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001c15a:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001c162:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001c169:	3d ff ff 00 00       	cmp    eax,0xffff
c001c16e:	0f 84 b6 01 00 00    	je     c001c32a <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001c174:	0f b7 ac 24 a4 00 00 00 	movzx  ebp,WORD PTR [esp+0xa4]
c001c17c:	66 81 fd 06 04       	cmp    bp,0x406
c001c181:	75 32                	jne    c001c1b5 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001c183:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001c18b:	50                   	push   eax
c001c18c:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001c194:	50                   	push   eax
c001c195:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001c19d:	50                   	push   eax
c001c19e:	53                   	push   ebx
c001c19f:	e8 4c fb ff ff       	call   c001bcf0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c1a4:	59                   	pop    ecx
c001c1a5:	5e                   	pop    esi
c001c1a6:	0f b6 c0             	movzx  eax,al
c001c1a9:	50                   	push   eax
c001c1aa:	53                   	push   ebx
c001c1ab:	e8 7c ff ff ff       	call   c001c12c <PCI::checkBus(unsigned char)>
c001c1b0:	e9 15 01 00 00       	jmp    c001c2ca <PCI::foundDevice(PCIDeviceInfo)+0x17a>
c001c1b5:	0f b6 94 24 c4 00 00 00 	movzx  edx,BYTE PTR [esp+0xc4]
c001c1bd:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001c1c3:	8b 8c 24 a4 00 00 00 	mov    ecx,DWORD PTR [esp+0xa4]
c001c1ca:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001c1d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c1d5:	85 c0                	test   eax,eax
c001c1d7:	74 34                	je     c001c20d <PCI::foundDevice(PCIDeviceInfo)+0xbd>
c001c1d9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c1dc:	85 d2                	test   edx,edx
c001c1de:	74 29                	je     c001c209 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001c1e0:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001c1e6:	31 cf                	xor    edi,ecx
c001c1e8:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001c1ee:	75 19                	jne    c001c209 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001c1f0:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001c1f6:	75 11                	jne    c001c209 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001c1f8:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001c1ff:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001c203:	0f 84 21 01 00 00    	je     c001c32a <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001c209:	8b 00                	mov    eax,DWORD PTR [eax]
c001c20b:	eb c8                	jmp    c001c1d5 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001c20d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c211:	be 9c 37 02 c0       	mov    esi,0xc002379c
c001c216:	b9 07 00 00 00       	mov    ecx,0x7
c001c21b:	fc                   	cld    
c001c21c:	31 d2                	xor    edx,edx
c001c21e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c220:	b9 12 00 00 00       	mov    ecx,0x12
c001c225:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001c22c:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c230:	83 ec 0c             	sub    esp,0xc
c001c233:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c235:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001c23d:	b9 0a 00 00 00       	mov    ecx,0xa
c001c242:	f7 f1                	div    ecx
c001c244:	83 c0 30             	add    eax,0x30
c001c247:	83 c2 30             	add    edx,0x30
c001c24a:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001c24e:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001c256:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001c25a:	31 d2                	xor    edx,edx
c001c25c:	f7 f1                	div    ecx
c001c25e:	83 c0 30             	add    eax,0x30
c001c261:	83 c2 30             	add    edx,0x30
c001c264:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001c268:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001c26c:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c270:	50                   	push   eax
c001c271:	e8 25 03 ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001c276:	83 c4 10             	add    esp,0x10
c001c279:	81 fd 01 06 00 00    	cmp    ebp,0x601
c001c27f:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001c286:	75 47                	jne    c001c2cf <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c001c288:	83 ec 0c             	sub    esp,0xc
c001c28b:	68 64 01 00 00       	push   0x164
c001c290:	e8 3b 26 ff ff       	call   c000e8d0 <malloc>
c001c295:	89 04 24             	mov    DWORD PTR [esp],eax
c001c298:	89 c5                	mov    ebp,eax
c001c29a:	e8 35 11 00 00       	call   c001d3d4 <SATABus::SATABus()>
c001c29f:	58                   	pop    eax
c001c2a0:	5a                   	pop    edx
c001c2a1:	55                   	push   ebp
c001c2a2:	53                   	push   ebx
c001c2a3:	e8 9e cd fe ff       	call   c0009046 <Device::addChild(Device*)>
c001c2a8:	83 ec 1c             	sub    esp,0x1c
c001c2ab:	b9 09 00 00 00       	mov    ecx,0x9
c001c2b0:	89 e7                	mov    edi,esp
c001c2b2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c2b4:	55                   	push   ebp
c001c2b5:	e8 d2 cc fe ff       	call   c0008f8c <Device::preOpenPCI(PCIDeviceInfo)>
c001c2ba:	83 c4 30             	add    esp,0x30
c001c2bd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c2c0:	6a 00                	push   0x0
c001c2c2:	6a 00                	push   0x0
c001c2c4:	6a 00                	push   0x0
c001c2c6:	55                   	push   ebp
c001c2c7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c2ca:	83 c4 10             	add    esp,0x10
c001c2cd:	eb 5b                	jmp    c001c32a <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001c2cf:	81 fd 01 01 00 00    	cmp    ebp,0x101
c001c2d5:	75 19                	jne    c001c2f0 <PCI::foundDevice(PCIDeviceInfo)+0x1a0>
c001c2d7:	83 ec 0c             	sub    esp,0xc
c001c2da:	68 70 02 00 00       	push   0x270
c001c2df:	e8 ec 25 ff ff       	call   c000e8d0 <malloc>
c001c2e4:	89 04 24             	mov    DWORD PTR [esp],eax
c001c2e7:	89 c5                	mov    ebp,eax
c001c2e9:	e8 94 02 00 00       	call   c001c582 <IDE::IDE()>
c001c2ee:	eb af                	jmp    c001c29f <PCI::foundDevice(PCIDeviceInfo)+0x14f>
c001c2f0:	83 ec 0c             	sub    esp,0xc
c001c2f3:	68 58 01 00 00       	push   0x158
c001c2f8:	e8 d3 25 ff ff       	call   c000e8d0 <malloc>
c001c2fd:	89 c5                	mov    ebp,eax
c001c2ff:	58                   	pop    eax
c001c300:	5a                   	pop    edx
c001c301:	68 82 37 02 c0       	push   0xc0023782
c001c306:	55                   	push   ebp
c001c307:	e8 ee cf fe ff       	call   c00092fa <DriverlessDevice::DriverlessDevice(char const*)>
c001c30c:	59                   	pop    ecx
c001c30d:	5f                   	pop    edi
c001c30e:	55                   	push   ebp
c001c30f:	53                   	push   ebx
c001c310:	e8 31 cd fe ff       	call   c0009046 <Device::addChild(Device*)>
c001c315:	83 ec 1c             	sub    esp,0x1c
c001c318:	b9 09 00 00 00       	mov    ecx,0x9
c001c31d:	89 e7                	mov    edi,esp
c001c31f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c321:	55                   	push   ebp
c001c322:	e8 65 cc fe ff       	call   c0008f8c <Device::preOpenPCI(PCIDeviceInfo)>
c001c327:	83 c4 30             	add    esp,0x30
c001c32a:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c330:	5b                   	pop    ebx
c001c331:	5e                   	pop    esi
c001c332:	5f                   	pop    edi
c001c333:	5d                   	pop    ebp
c001c334:	c3                   	ret    
c001c335:	90                   	nop

c001c336 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c336:	55                   	push   ebp
c001c337:	57                   	push   edi
c001c338:	56                   	push   esi
c001c339:	53                   	push   ebx
c001c33a:	83 ec 68             	sub    esp,0x68
c001c33d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001c344:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001c348:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c34c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001c353:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c358:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c35c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001c363:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001c368:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c36c:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001c371:	6a 0c                	push   0xc
c001c373:	57                   	push   edi
c001c374:	53                   	push   ebx
c001c375:	56                   	push   esi
c001c376:	55                   	push   ebp
c001c377:	e8 c4 f7 ff ff       	call   c001bb40 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c37c:	83 c4 20             	add    esp,0x20
c001c37f:	57                   	push   edi
c001c380:	53                   	push   ebx
c001c381:	56                   	push   esi
c001c382:	55                   	push   ebp
c001c383:	e8 ae f8 ff ff       	call   c001bc36 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c388:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001c38d:	57                   	push   edi
c001c38e:	53                   	push   ebx
c001c38f:	56                   	push   esi
c001c390:	55                   	push   ebp
c001c391:	e8 36 f9 ff ff       	call   c001bccc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c396:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c39a:	83 c4 14             	add    esp,0x14
c001c39d:	6a 3c                	push   0x3c
c001c39f:	57                   	push   edi
c001c3a0:	53                   	push   ebx
c001c3a1:	56                   	push   esi
c001c3a2:	55                   	push   ebp
c001c3a3:	e8 98 f7 ff ff       	call   c001bb40 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3a8:	0f b6 c4             	movzx  eax,ah
c001c3ab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c3af:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001c3b3:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001c3b7:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c001c3bc:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001c3c2:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001c3c8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c3cc:	83 c4 20             	add    esp,0x20
c001c3cf:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001c3d4:	74 30                	je     c001c406 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001c3d6:	31 c0                	xor    eax,eax
c001c3d8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001c3dc:	7e 28                	jle    c001c406 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001c3de:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001c3e6:	39 cb                	cmp    ebx,ecx
c001c3e8:	75 19                	jne    c001c403 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001c3ea:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001c3f2:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001c3f6:	75 0b                	jne    c001c403 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001c3f8:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001c3ff:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001c403:	40                   	inc    eax
c001c404:	eb d2                	jmp    c001c3d8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001c406:	31 d2                	xor    edx,edx
c001c408:	83 ec 0c             	sub    esp,0xc
c001c40b:	57                   	push   edi
c001c40c:	53                   	push   ebx
c001c40d:	56                   	push   esi
c001c40e:	52                   	push   edx
c001c40f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001c413:	55                   	push   ebp
c001c414:	e8 ff f8 ff ff       	call   c001bd18 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c419:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001c41d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c421:	42                   	inc    edx
c001c422:	83 c4 20             	add    esp,0x20
c001c425:	83 fa 06             	cmp    edx,0x6
c001c428:	75 de                	jne    c001c408 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001c42a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c42e:	83 ec 0c             	sub    esp,0xc
c001c431:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c435:	c1 e2 08             	shl    edx,0x8
c001c438:	0f b6 c4             	movzx  eax,ah
c001c43b:	09 d0                	or     eax,edx
c001c43d:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001c442:	6a 02                	push   0x2
c001c444:	57                   	push   edi
c001c445:	53                   	push   ebx
c001c446:	56                   	push   esi
c001c447:	55                   	push   ebp
c001c448:	e8 f3 f6 ff ff       	call   c001bb40 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c44d:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001c452:	83 c4 20             	add    esp,0x20
c001c455:	57                   	push   edi
c001c456:	53                   	push   ebx
c001c457:	56                   	push   esi
c001c458:	55                   	push   ebp
c001c459:	e8 22 f8 ff ff       	call   c001bc80 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c45e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c462:	57                   	push   edi
c001c463:	53                   	push   ebx
c001c464:	56                   	push   esi
c001c465:	55                   	push   ebp
c001c466:	e8 7f f7 ff ff       	call   c001bbea <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c46b:	b9 09 00 00 00       	mov    ecx,0x9
c001c470:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001c475:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001c479:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001c47d:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001c481:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001c485:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001c489:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001c48d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001c491:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001c495:	83 ec 0c             	sub    esp,0xc
c001c498:	fc                   	cld    
c001c499:	8d 74 24 58          	lea    esi,[esp+0x58]
c001c49d:	89 e7                	mov    edi,esp
c001c49f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c4a1:	55                   	push   ebp
c001c4a2:	e8 a9 fc ff ff       	call   c001c150 <PCI::foundDevice(PCIDeviceInfo)>
c001c4a7:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c4ad:	5b                   	pop    ebx
c001c4ae:	5e                   	pop    esi
c001c4af:	5f                   	pop    edi
c001c4b0:	5d                   	pop    ebp
c001c4b1:	c3                   	ret    

c001c4b2 <PCI::checkDevice(unsigned char, unsigned char)>:
c001c4b2:	55                   	push   ebp
c001c4b3:	57                   	push   edi
c001c4b4:	56                   	push   esi
c001c4b5:	53                   	push   ebx
c001c4b6:	83 ec 0c             	sub    esp,0xc
c001c4b9:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c4be:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c4c3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c4c7:	6a 00                	push   0x0
c001c4c9:	56                   	push   esi
c001c4ca:	57                   	push   edi
c001c4cb:	55                   	push   ebp
c001c4cc:	e8 19 f7 ff ff       	call   c001bbea <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c4d1:	6a 00                	push   0x0
c001c4d3:	56                   	push   esi
c001c4d4:	57                   	push   edi
c001c4d5:	55                   	push   ebp
c001c4d6:	e8 5b fe ff ff       	call   c001c336 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c4db:	83 c4 20             	add    esp,0x20
c001c4de:	6a 00                	push   0x0
c001c4e0:	56                   	push   esi
c001c4e1:	57                   	push   edi
c001c4e2:	55                   	push   ebp
c001c4e3:	e8 26 f7 ff ff       	call   c001bc0e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c4e8:	83 c4 10             	add    esp,0x10
c001c4eb:	a8 80                	test   al,0x80
c001c4ed:	74 2d                	je     c001c51c <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001c4ef:	bb 01 00 00 00       	mov    ebx,0x1
c001c4f4:	53                   	push   ebx
c001c4f5:	56                   	push   esi
c001c4f6:	57                   	push   edi
c001c4f7:	55                   	push   ebp
c001c4f8:	e8 ed f6 ff ff       	call   c001bbea <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c4fd:	83 c4 10             	add    esp,0x10
c001c500:	0f b7 c0             	movzx  eax,ax
c001c503:	3d ff ff 00 00       	cmp    eax,0xffff
c001c508:	74 0c                	je     c001c516 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c50a:	53                   	push   ebx
c001c50b:	56                   	push   esi
c001c50c:	57                   	push   edi
c001c50d:	55                   	push   ebp
c001c50e:	e8 23 fe ff ff       	call   c001c336 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c513:	83 c4 10             	add    esp,0x10
c001c516:	43                   	inc    ebx
c001c517:	83 fb 08             	cmp    ebx,0x8
c001c51a:	75 d8                	jne    c001c4f4 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c51c:	83 c4 0c             	add    esp,0xc
c001c51f:	5b                   	pop    ebx
c001c520:	5e                   	pop    esi
c001c521:	5f                   	pop    edi
c001c522:	5d                   	pop    ebp
c001c523:	c3                   	ret    

c001c524 <PCI::detect()>:
c001c524:	56                   	push   esi
c001c525:	53                   	push   ebx
c001c526:	53                   	push   ebx
c001c527:	31 db                	xor    ebx,ebx
c001c529:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c52d:	6a 00                	push   0x0
c001c52f:	6a 00                	push   0x0
c001c531:	6a 00                	push   0x0
c001c533:	56                   	push   esi
c001c534:	e8 d5 f6 ff ff       	call   c001bc0e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c539:	83 c4 10             	add    esp,0x10
c001c53c:	a8 80                	test   al,0x80
c001c53e:	75 21                	jne    c001c561 <PCI::detect()+0x3d>
c001c540:	51                   	push   ecx
c001c541:	51                   	push   ecx
c001c542:	6a 00                	push   0x0
c001c544:	56                   	push   esi
c001c545:	e8 e2 fb ff ff       	call   c001c12c <PCI::checkBus(unsigned char)>
c001c54a:	83 c4 10             	add    esp,0x10
c001c54d:	eb 2a                	jmp    c001c579 <PCI::detect()+0x55>
c001c54f:	52                   	push   edx
c001c550:	52                   	push   edx
c001c551:	53                   	push   ebx
c001c552:	43                   	inc    ebx
c001c553:	56                   	push   esi
c001c554:	e8 d3 fb ff ff       	call   c001c12c <PCI::checkBus(unsigned char)>
c001c559:	83 c4 10             	add    esp,0x10
c001c55c:	83 fb 08             	cmp    ebx,0x8
c001c55f:	74 18                	je     c001c579 <PCI::detect()+0x55>
c001c561:	53                   	push   ebx
c001c562:	6a 00                	push   0x0
c001c564:	6a 00                	push   0x0
c001c566:	56                   	push   esi
c001c567:	e8 7e f6 ff ff       	call   c001bbea <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c56c:	83 c4 10             	add    esp,0x10
c001c56f:	0f b7 c0             	movzx  eax,ax
c001c572:	3d ff ff 00 00       	cmp    eax,0xffff
c001c577:	74 d6                	je     c001c54f <PCI::detect()+0x2b>
c001c579:	58                   	pop    eax
c001c57a:	5b                   	pop    ebx
c001c57b:	5e                   	pop    esi
c001c57c:	c3                   	ret    
c001c57d:	90                   	nop

c001c57e <IDE::close(int, int, void*)>:
c001c57e:	83 c8 ff             	or     eax,0xffffffff
c001c581:	c3                   	ret    

c001c582 <IDE::IDE()>:
c001c582:	83 ec 0c             	sub    esp,0xc
c001c585:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c589:	83 ec 08             	sub    esp,0x8
c001c58c:	68 2c 38 02 c0       	push   0xc002382c
c001c591:	50                   	push   eax
c001c592:	e8 09 ce fe ff       	call   c00093a0 <HardDiskController::HardDiskController(char const*)>
c001c597:	83 c4 10             	add    esp,0x10
c001c59a:	ba 58 39 02 c0       	mov    edx,0xc0023958
c001c59f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5a3:	89 10                	mov    DWORD PTR [eax],edx
c001c5a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5a9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c5b0:	90                   	nop
c001c5b1:	83 c4 0c             	add    esp,0xc
c001c5b4:	c3                   	ret    
c001c5b5:	90                   	nop

c001c5b6 <IDE::prepareInterrupt(unsigned char)>:
c001c5b6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c5bb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c5bf:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c5c7:	c3                   	ret    

c001c5c8 <selectDrive(unsigned char, unsigned char)>:
c001c5c8:	c3                   	ret    
c001c5c9:	90                   	nop

c001c5ca <IDE::getBase(unsigned char)>:
c001c5ca:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c5cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5d3:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c5db:	c3                   	ret    

c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c5dc:	55                   	push   ebp
c001c5dd:	57                   	push   edi
c001c5de:	56                   	push   esi
c001c5df:	53                   	push   ebx
c001c5e0:	83 ec 1c             	sub    esp,0x1c
c001c5e3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c5e7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c5eb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c5ef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c5f3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c5f6:	80 f9 03             	cmp    cl,0x3
c001c5f9:	77 4f                	ja     c001c64a <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001c5fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c5ff:	0f b6 f2             	movzx  esi,dl
c001c602:	0f b6 db             	movzx  ebx,bl
c001c605:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c608:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c60d:	80 ca 80             	or     dl,0x80
c001c610:	52                   	push   edx
c001c611:	6a 0c                	push   0xc
c001c613:	56                   	push   esi
c001c614:	57                   	push   edi
c001c615:	e8 c2 ff ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c61a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001c61f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c623:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c627:	ee                   	out    dx,al
c001c628:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001c62d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001c631:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001c635:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c63d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c641:	83 c4 2c             	add    esp,0x2c
c001c644:	5b                   	pop    ebx
c001c645:	5e                   	pop    esi
c001c646:	5f                   	pop    edi
c001c647:	5d                   	pop    ebp
c001c648:	eb 92                	jmp    c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c64a:	0f b6 cb             	movzx  ecx,bl
c001c64d:	83 f9 07             	cmp    ecx,0x7
c001c650:	77 12                	ja     c001c664 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001c652:	0f b6 d2             	movzx  edx,dl
c001c655:	0f b6 db             	movzx  ebx,bl
c001c658:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001c660:	01 da                	add    edx,ebx
c001c662:	eb 2f                	jmp    c001c693 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c664:	83 f9 0d             	cmp    ecx,0xd
c001c667:	77 13                	ja     c001c67c <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001c669:	0f b6 d2             	movzx  edx,dl
c001c66c:	0f b6 db             	movzx  ebx,bl
c001c66f:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001c676:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c67a:	eb 17                	jmp    c001c693 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c67c:	83 f9 15             	cmp    ecx,0x15
c001c67f:	77 13                	ja     c001c694 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001c681:	0f b6 d2             	movzx  edx,dl
c001c684:	0f b6 db             	movzx  ebx,bl
c001c687:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001c68f:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c693:	ee                   	out    dx,al
c001c694:	83 c4 1c             	add    esp,0x1c
c001c697:	5b                   	pop    ebx
c001c698:	5e                   	pop    esi
c001c699:	5f                   	pop    edi
c001c69a:	5d                   	pop    ebp
c001c69b:	c3                   	ret    

c001c69c <IDE::read(unsigned char, unsigned char)>:
c001c69c:	57                   	push   edi
c001c69d:	56                   	push   esi
c001c69e:	53                   	push   ebx
c001c69f:	83 ec 10             	sub    esp,0x10
c001c6a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c6a6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c6aa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c6ae:	8d 42 f8             	lea    eax,[edx-0x8]
c001c6b1:	3c 03                	cmp    al,0x3
c001c6b3:	77 48                	ja     c001c6fd <IDE::read(unsigned char, unsigned char)+0x61>
c001c6b5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c6b9:	0f b6 f1             	movzx  esi,cl
c001c6bc:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001c6bf:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001c6c4:	0c 80                	or     al,0x80
c001c6c6:	50                   	push   eax
c001c6c7:	6a 0c                	push   0xc
c001c6c9:	56                   	push   esi
c001c6ca:	53                   	push   ebx
c001c6cb:	e8 0c ff ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6d0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c6d4:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001c6d9:	0f b6 d2             	movzx  edx,dl
c001c6dc:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c6e0:	ec                   	in     al,dx
c001c6e1:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c6e5:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001c6ea:	52                   	push   edx
c001c6eb:	6a 0c                	push   0xc
c001c6ed:	56                   	push   esi
c001c6ee:	53                   	push   ebx
c001c6ef:	e8 e8 fe ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6f4:	83 c4 20             	add    esp,0x20
c001c6f7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c6fb:	eb 4c                	jmp    c001c749 <IDE::read(unsigned char, unsigned char)+0xad>
c001c6fd:	0f b6 f2             	movzx  esi,dl
c001c700:	83 fe 07             	cmp    esi,0x7
c001c703:	77 12                	ja     c001c717 <IDE::read(unsigned char, unsigned char)+0x7b>
c001c705:	0f b6 c9             	movzx  ecx,cl
c001c708:	0f b6 d2             	movzx  edx,dl
c001c70b:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001c713:	01 c2                	add    edx,eax
c001c715:	eb 31                	jmp    c001c748 <IDE::read(unsigned char, unsigned char)+0xac>
c001c717:	83 fe 0d             	cmp    esi,0xd
c001c71a:	77 13                	ja     c001c72f <IDE::read(unsigned char, unsigned char)+0x93>
c001c71c:	0f b6 c9             	movzx  ecx,cl
c001c71f:	0f b6 d2             	movzx  edx,dl
c001c722:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001c729:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c72d:	eb 19                	jmp    c001c748 <IDE::read(unsigned char, unsigned char)+0xac>
c001c72f:	31 c0                	xor    eax,eax
c001c731:	83 fe 15             	cmp    esi,0x15
c001c734:	77 13                	ja     c001c749 <IDE::read(unsigned char, unsigned char)+0xad>
c001c736:	0f b6 c9             	movzx  ecx,cl
c001c739:	0f b6 d2             	movzx  edx,dl
c001c73c:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001c744:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c748:	ec                   	in     al,dx
c001c749:	83 c4 10             	add    esp,0x10
c001c74c:	5b                   	pop    ebx
c001c74d:	5e                   	pop    esi
c001c74e:	5f                   	pop    edi
c001c74f:	c3                   	ret    

c001c750 <IDE::waitInterrupt(unsigned char)>:
c001c750:	55                   	push   ebp
c001c751:	57                   	push   edi
c001c752:	56                   	push   esi
c001c753:	53                   	push   ebx
c001c754:	31 db                	xor    ebx,ebx
c001c756:	83 ec 0c             	sub    esp,0xc
c001c759:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001c75d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001c762:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001c76a:	89 e8                	mov    eax,ebp
c001c76c:	84 c0                	test   al,al
c001c76e:	75 30                	jne    c001c7a0 <IDE::waitInterrupt(unsigned char)+0x50>
c001c770:	50                   	push   eax
c001c771:	6a 0c                	push   0xc
c001c773:	56                   	push   esi
c001c774:	57                   	push   edi
c001c775:	e8 22 ff ff ff       	call   c001c69c <IDE::read(unsigned char, unsigned char)>
c001c77a:	83 c4 10             	add    esp,0x10
c001c77d:	a8 01                	test   al,0x1
c001c77f:	75 27                	jne    c001c7a8 <IDE::waitInterrupt(unsigned char)+0x58>
c001c781:	f6 c3 04             	test   bl,0x4
c001c784:	75 12                	jne    c001c798 <IDE::waitInterrupt(unsigned char)+0x48>
c001c786:	83 fb 32             	cmp    ebx,0x32
c001c789:	7e 0d                	jle    c001c798 <IDE::waitInterrupt(unsigned char)+0x48>
c001c78b:	83 ec 0c             	sub    esp,0xc
c001c78e:	6a 64                	push   0x64
c001c790:	e8 3f 8e ff ff       	call   c00155d4 <milliTenthSleep(unsigned int)>
c001c795:	83 c4 10             	add    esp,0x10
c001c798:	83 fb 3c             	cmp    ebx,0x3c
c001c79b:	74 0b                	je     c001c7a8 <IDE::waitInterrupt(unsigned char)+0x58>
c001c79d:	43                   	inc    ebx
c001c79e:	eb c2                	jmp    c001c762 <IDE::waitInterrupt(unsigned char)+0x12>
c001c7a0:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001c7a8:	83 c4 0c             	add    esp,0xc
c001c7ab:	89 e8                	mov    eax,ebp
c001c7ad:	5b                   	pop    ebx
c001c7ae:	5e                   	pop    esi
c001c7af:	5f                   	pop    edi
c001c7b0:	5d                   	pop    ebp
c001c7b1:	c3                   	ret    

c001c7b2 <ideChannel0IRQHandler(regs*, void*)>:
c001c7b2:	83 ec 10             	sub    esp,0x10
c001c7b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c7b9:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c7c0:	6a 07                	push   0x7
c001c7c2:	6a 00                	push   0x0
c001c7c4:	50                   	push   eax
c001c7c5:	e8 d2 fe ff ff       	call   c001c69c <IDE::read(unsigned char, unsigned char)>
c001c7ca:	83 c4 1c             	add    esp,0x1c
c001c7cd:	c3                   	ret    

c001c7ce <ideChannel1IRQHandler(regs*, void*)>:
c001c7ce:	83 ec 10             	sub    esp,0x10
c001c7d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c7d5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c7dc:	6a 07                	push   0x7
c001c7de:	6a 01                	push   0x1
c001c7e0:	50                   	push   eax
c001c7e1:	e8 b6 fe ff ff       	call   c001c69c <IDE::read(unsigned char, unsigned char)>
c001c7e6:	83 c4 1c             	add    esp,0x1c
c001c7e9:	c3                   	ret    

c001c7ea <IDE::enableIRQs(unsigned char, bool)>:
c001c7ea:	57                   	push   edi
c001c7eb:	b8 02 00 00 00       	mov    eax,0x2
c001c7f0:	56                   	push   esi
c001c7f1:	53                   	push   ebx
c001c7f2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c7f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c7fb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c7ff:	74 02                	je     c001c803 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001c801:	31 c0                	xor    eax,eax
c001c803:	0f b6 db             	movzx  ebx,bl
c001c806:	bf 04 00 00 00       	mov    edi,0x4
c001c80b:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001c812:	50                   	push   eax
c001c813:	6a 0c                	push   0xc
c001c815:	53                   	push   ebx
c001c816:	56                   	push   esi
c001c817:	e8 c0 fd ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c81c:	83 c4 10             	add    esp,0x10
c001c81f:	50                   	push   eax
c001c820:	6a 0c                	push   0xc
c001c822:	53                   	push   ebx
c001c823:	56                   	push   esi
c001c824:	e8 73 fe ff ff       	call   c001c69c <IDE::read(unsigned char, unsigned char)>
c001c829:	83 c4 10             	add    esp,0x10
c001c82c:	4f                   	dec    edi
c001c82d:	75 f0                	jne    c001c81f <IDE::enableIRQs(unsigned char, bool)+0x35>
c001c82f:	5b                   	pop    ebx
c001c830:	5e                   	pop    esi
c001c831:	5f                   	pop    edi
c001c832:	c3                   	ret    
c001c833:	90                   	nop

c001c834 <IDE::open(int, int, void*)>:
c001c834:	55                   	push   ebp
c001c835:	57                   	push   edi
c001c836:	56                   	push   esi
c001c837:	53                   	push   ebx
c001c838:	83 ec 1c             	sub    esp,0x1c
c001c83b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c83f:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c846:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c84f:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c858:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c85f:	0f 85 80 02 00 00    	jne    c001cae5 <IDE::open(int, int, void*)+0x2b1>
c001c865:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c86b:	a8 70                	test   al,0x70
c001c86d:	75 44                	jne    c001c8b3 <IDE::open(int, int, void*)+0x7f>
c001c86f:	ba 20 84 00 00       	mov    edx,0x8420
c001c874:	0f a3 c2             	bt     edx,eax
c001c877:	73 3a                	jae    c001c8b3 <IDE::open(int, int, void*)+0x7f>
c001c879:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c87f:	83 ec 0c             	sub    esp,0xc
c001c882:	83 e0 fc             	and    eax,0xfffffffc
c001c885:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c88c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c892:	83 e0 fc             	and    eax,0xfffffffc
c001c895:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c89c:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c8a2:	83 e0 fc             	and    eax,0xfffffffc
c001c8a5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c8ac:	68 85 15 02 c0       	push   0xc0021585
c001c8b1:	eb 60                	jmp    c001c913 <IDE::open(int, int, void*)+0xdf>
c001c8b3:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c8bd:	be 64 00 00 00       	mov    esi,0x64
c001c8c2:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c8cc:	57                   	push   edi
c001c8cd:	57                   	push   edi
c001c8ce:	68 44 38 02 c0       	push   0xc0023844
c001c8d3:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001c8d7:	57                   	push   edi
c001c8d8:	e8 73 3d fe ff       	call   c0000650 <strcpy>
c001c8dd:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001c8e4:	31 d2                	xor    edx,edx
c001c8e6:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c8e9:	89 c8                	mov    eax,ecx
c001c8eb:	f7 f6                	div    esi
c001c8ed:	be 0a 00 00 00       	mov    esi,0xa
c001c8f2:	31 d2                	xor    edx,edx
c001c8f4:	83 c0 30             	add    eax,0x30
c001c8f7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001c8fb:	89 c8                	mov    eax,ecx
c001c8fd:	f7 f6                	div    esi
c001c8ff:	89 d1                	mov    ecx,edx
c001c901:	31 d2                	xor    edx,edx
c001c903:	f7 f6                	div    esi
c001c905:	83 c1 30             	add    ecx,0x30
c001c908:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001c90c:	83 c2 30             	add    edx,0x30
c001c90f:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001c913:	e8 83 fc fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001c918:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c91f:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c924:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c92b:	83 c4 10             	add    esp,0x10
c001c92e:	89 fa                	mov    edx,edi
c001c930:	c1 e1 10             	shl    ecx,0x10
c001c933:	c1 e0 0b             	shl    eax,0xb
c001c936:	09 c1                	or     ecx,eax
c001c938:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c93f:	c1 e0 08             	shl    eax,0x8
c001c942:	09 c1                	or     ecx,eax
c001c944:	89 c8                	mov    eax,ecx
c001c946:	0d 08 00 00 80       	or     eax,0x80000008
c001c94b:	ef                   	out    dx,eax
c001c94c:	be fc 0c 00 00       	mov    esi,0xcfc
c001c951:	89 f2                	mov    edx,esi
c001c953:	ed                   	in     eax,dx
c001c954:	c1 e8 10             	shr    eax,0x10
c001c957:	3d ff ff 00 00       	cmp    eax,0xffff
c001c95c:	0f 84 e1 00 00 00    	je     c001ca43 <IDE::open(int, int, void*)+0x20f>
c001c962:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c968:	89 fa                	mov    edx,edi
c001c96a:	89 c8                	mov    eax,ecx
c001c96c:	ef                   	out    dx,eax
c001c96d:	b0 fe                	mov    al,0xfe
c001c96f:	89 f2                	mov    edx,esi
c001c971:	ee                   	out    dx,al
c001c972:	89 c8                	mov    eax,ecx
c001c974:	89 fa                	mov    edx,edi
c001c976:	ef                   	out    dx,eax
c001c977:	89 f2                	mov    edx,esi
c001c979:	ed                   	in     eax,dx
c001c97a:	3c fe                	cmp    al,0xfe
c001c97c:	0f 85 83 00 00 00    	jne    c001ca05 <IDE::open(int, int, void*)+0x1d1>
c001c982:	83 ec 0c             	sub    esp,0xc
c001c985:	68 bb 15 02 c0       	push   0xc00215bb
c001c98a:	e8 0c fc fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001c98f:	c7 04 24 4a 38 02 c0 	mov    DWORD PTR [esp],0xc002384a
c001c996:	e8 b3 a5 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c99b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c9a5:	c7 04 24 ec 17 02 c0 	mov    DWORD PTR [esp],0xc00217ec
c001c9ac:	e8 ea fb fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001c9b1:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c9b8:	89 fa                	mov    edx,edi
c001c9ba:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c9c1:	c1 e1 10             	shl    ecx,0x10
c001c9c4:	c1 e0 08             	shl    eax,0x8
c001c9c7:	09 c1                	or     ecx,eax
c001c9c9:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c9d0:	c1 e0 0b             	shl    eax,0xb
c001c9d3:	09 c1                	or     ecx,eax
c001c9d5:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c9db:	89 c8                	mov    eax,ecx
c001c9dd:	ef                   	out    dx,eax
c001c9de:	8b ab 50 01 00 00    	mov    ebp,DWORD PTR [ebx+0x150]
c001c9e4:	89 f2                	mov    edx,esi
c001c9e6:	89 e8                	mov    eax,ebp
c001c9e8:	ee                   	out    dx,al
c001c9e9:	89 c8                	mov    eax,ecx
c001c9eb:	89 fa                	mov    edx,edi
c001c9ed:	ef                   	out    dx,eax
c001c9ee:	89 f2                	mov    edx,esi
c001c9f0:	ed                   	in     eax,dx
c001c9f1:	0f b6 c0             	movzx  eax,al
c001c9f4:	83 c4 10             	add    esp,0x10
c001c9f7:	39 e8                	cmp    eax,ebp
c001c9f9:	74 58                	je     c001ca53 <IDE::open(int, int, void*)+0x21f>
c001c9fb:	83 ec 0c             	sub    esp,0xc
c001c9fe:	68 5f 38 02 c0       	push   0xc002385f
c001ca03:	eb 46                	jmp    c001ca4b <IDE::open(int, int, void*)+0x217>
c001ca05:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ca0e:	75 29                	jne    c001ca39 <IDE::open(int, int, void*)+0x205>
c001ca10:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001ca17:	3d 8a 00 00 00       	cmp    eax,0x8a
c001ca1c:	74 05                	je     c001ca23 <IDE::open(int, int, void*)+0x1ef>
c001ca1e:	83 c0 80             	add    eax,0xffffff80
c001ca21:	75 16                	jne    c001ca39 <IDE::open(int, int, void*)+0x205>
c001ca23:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ca2a:	83 ec 0c             	sub    esp,0xc
c001ca2d:	68 09 26 02 c0       	push   0xc0022609
c001ca32:	e8 64 fb fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001ca37:	eb 17                	jmp    c001ca50 <IDE::open(int, int, void*)+0x21c>
c001ca39:	83 ec 0c             	sub    esp,0xc
c001ca3c:	68 67 38 02 c0       	push   0xc0023867
c001ca41:	eb 08                	jmp    c001ca4b <IDE::open(int, int, void*)+0x217>
c001ca43:	83 ec 0c             	sub    esp,0xc
c001ca46:	68 98 38 02 c0       	push   0xc0023898
c001ca4b:	e8 c6 21 ff ff       	call   c000ec16 <KePanic(char const*)>
c001ca50:	83 c4 10             	add    esp,0x10
c001ca53:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001ca5a:	0f 84 bf 00 00 00    	je     c001cb1f <IDE::open(int, int, void*)+0x2eb>
c001ca60:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001ca66:	83 ec 0c             	sub    esp,0xc
c001ca69:	83 e0 fc             	and    eax,0xfffffffc
c001ca6c:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001ca73:	83 c0 08             	add    eax,0x8
c001ca76:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001ca7d:	68 c2 38 02 c0       	push   0xc00238c2
c001ca82:	e8 c7 a4 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ca87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ca8e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ca95:	50                   	push   eax
c001ca96:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ca9d:	50                   	push   eax
c001ca9e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001caa5:	50                   	push   eax
c001caa6:	ff 35 c0 d0 02 c0    	push   DWORD PTR ds:0xc002d0c0
c001caac:	e8 8f f0 ff ff       	call   c001bb40 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cab1:	83 c4 18             	add    esp,0x18
c001cab4:	83 c8 07             	or     eax,0x7
c001cab7:	0f b7 c0             	movzx  eax,ax
c001caba:	50                   	push   eax
c001cabb:	6a 04                	push   0x4
c001cabd:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001cac4:	50                   	push   eax
c001cac5:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001cacc:	50                   	push   eax
c001cacd:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001cad4:	50                   	push   eax
c001cad5:	ff 35 c0 d0 02 c0    	push   DWORD PTR ds:0xc002d0c0
c001cadb:	e8 9c f2 ff ff       	call   c001bd7c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001cae0:	83 c4 20             	add    esp,0x20
c001cae3:	eb 3a                	jmp    c001cb1f <IDE::open(int, int, void*)+0x2eb>
c001cae5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001caec:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001caf2:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001caf9:	05 06 02 00 00       	add    eax,0x206
c001cafe:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cb05:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001cb0c:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001cb13:	05 06 02 00 00       	add    eax,0x206
c001cb18:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001cb1f:	83 ec 0c             	sub    esp,0xc
c001cb22:	68 e3 1c 02 c0       	push   0xc0021ce3
c001cb27:	e8 6f fa fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cb2c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001cb32:	83 c4 10             	add    esp,0x10
c001cb35:	89 c2                	mov    edx,eax
c001cb37:	83 e2 0f             	and    edx,0xf
c001cb3a:	83 fa 08             	cmp    edx,0x8
c001cb3d:	75 0a                	jne    c001cb49 <IDE::open(int, int, void*)+0x315>
c001cb3f:	83 e8 02             	sub    eax,0x2
c001cb42:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cb49:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001cb4f:	89 c2                	mov    edx,eax
c001cb51:	83 e2 0f             	and    edx,0xf
c001cb54:	83 fa 08             	cmp    edx,0x8
c001cb57:	75 0a                	jne    c001cb63 <IDE::open(int, int, void*)+0x32f>
c001cb59:	83 e8 02             	sub    eax,0x2
c001cb5c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001cb63:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001cb6a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001cb71:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cb74:	89 d0                	mov    eax,edx
c001cb76:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cb7a:	8d 7a 01             	lea    edi,[edx+0x1]
c001cb7d:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001cb81:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001cb85:	83 e1 3f             	and    ecx,0x3f
c001cb88:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001cb8c:	89 f9                	mov    ecx,edi
c001cb8e:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001cb95:	8d 78 02             	lea    edi,[eax+0x2]
c001cb98:	0f b6 c9             	movzx  ecx,cl
c001cb9b:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cb9e:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001cba2:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cba6:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001cbaa:	83 e2 3f             	and    edx,0x3f
c001cbad:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001cbb1:	89 f9                	mov    ecx,edi
c001cbb3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cbb9:	8d 78 03             	lea    edi,[eax+0x3]
c001cbbc:	0f b6 d1             	movzx  edx,cl
c001cbbf:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cbc2:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001cbc6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cbca:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001cbce:	83 e1 3f             	and    ecx,0x3f
c001cbd1:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001cbd5:	89 fa                	mov    edx,edi
c001cbd7:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001cbdd:	8d 78 04             	lea    edi,[eax+0x4]
c001cbe0:	0f b6 ca             	movzx  ecx,dl
c001cbe3:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cbe6:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001cbea:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cbee:	89 fa                	mov    edx,edi
c001cbf0:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001cbf6:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001cbfa:	83 e2 3f             	and    edx,0x3f
c001cbfd:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001cc01:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001cc08:	66 85 f6             	test   si,si
c001cc0b:	74 24                	je     c001cc31 <IDE::open(int, int, void*)+0x3fd>
c001cc0d:	89 f9                	mov    ecx,edi
c001cc0f:	83 c0 05             	add    eax,0x5
c001cc12:	0f b6 d1             	movzx  edx,cl
c001cc15:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cc18:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cc1c:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001cc20:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001cc26:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001cc2a:	83 e0 3f             	and    eax,0x3f
c001cc2d:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001cc31:	83 ec 0c             	sub    esp,0xc
c001cc34:	68 da 38 02 c0       	push   0xc00238da
c001cc39:	e8 5d f9 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cc3e:	58                   	pop    eax
c001cc3f:	5a                   	pop    edx
c001cc40:	6a 00                	push   0x0
c001cc42:	53                   	push   ebx
c001cc43:	e8 6e f9 ff ff       	call   c001c5b6 <IDE::prepareInterrupt(unsigned char)>
c001cc48:	59                   	pop    ecx
c001cc49:	5e                   	pop    esi
c001cc4a:	6a 01                	push   0x1
c001cc4c:	53                   	push   ebx
c001cc4d:	e8 64 f9 ff ff       	call   c001c5b6 <IDE::prepareInterrupt(unsigned char)>
c001cc52:	c7 04 24 5d 31 02 c0 	mov    DWORD PTR [esp],0xc002315d
c001cc59:	e8 3d f9 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cc5e:	83 c4 0c             	add    esp,0xc
c001cc61:	6a 00                	push   0x0
c001cc63:	6a 00                	push   0x0
c001cc65:	53                   	push   ebx
c001cc66:	e8 7f fb ff ff       	call   c001c7ea <IDE::enableIRQs(unsigned char, bool)>
c001cc6b:	83 c4 0c             	add    esp,0xc
c001cc6e:	6a 00                	push   0x0
c001cc70:	6a 01                	push   0x1
c001cc72:	53                   	push   ebx
c001cc73:	e8 72 fb ff ff       	call   c001c7ea <IDE::enableIRQs(unsigned char, bool)>
c001cc78:	c7 04 24 dc 38 02 c0 	mov    DWORD PTR [esp],0xc00238dc
c001cc7f:	e8 17 f9 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cc84:	83 c4 10             	add    esp,0x10
c001cc87:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001cc8e:	74 3c                	je     c001cccc <IDE::open(int, int, void*)+0x498>
c001cc90:	83 ec 0c             	sub    esp,0xc
c001cc93:	53                   	push   ebx
c001cc94:	6a 01                	push   0x1
c001cc96:	68 b2 c7 01 c0       	push   0xc001c7b2
c001cc9b:	6a 0e                	push   0xe
c001cc9d:	53                   	push   ebx
c001cc9e:	e8 4f c3 fe ff       	call   c0008ff2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cca3:	83 c4 14             	add    esp,0x14
c001cca6:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ccac:	53                   	push   ebx
c001ccad:	6a 01                	push   0x1
c001ccaf:	68 ce c7 01 c0       	push   0xc001c7ce
c001ccb4:	6a 0f                	push   0xf
c001ccb6:	53                   	push   ebx
c001ccb7:	e8 36 c3 fe ff       	call   c0008ff2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ccbc:	83 c4 14             	add    esp,0x14
c001ccbf:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001ccc5:	68 f2 19 02 c0       	push   0xc00219f2
c001ccca:	eb 40                	jmp    c001cd0c <IDE::open(int, int, void*)+0x4d8>
c001cccc:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001ccd6:	83 ec 0c             	sub    esp,0xc
c001ccd9:	53                   	push   ebx
c001ccda:	6a 00                	push   0x0
c001ccdc:	68 b2 c7 01 c0       	push   0xc001c7b2
c001cce1:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cce7:	53                   	push   ebx
c001cce8:	e8 05 c3 fe ff       	call   c0008ff2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cced:	83 c4 14             	add    esp,0x14
c001ccf0:	53                   	push   ebx
c001ccf1:	6a 00                	push   0x0
c001ccf3:	68 ce c7 01 c0       	push   0xc001c7ce
c001ccf8:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001ccfe:	53                   	push   ebx
c001ccff:	e8 ee c2 fe ff       	call   c0008ff2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cd04:	83 c4 14             	add    esp,0x14
c001cd07:	68 f8 25 02 c0       	push   0xc00225f8
c001cd0c:	e8 8a f8 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cd11:	83 c4 10             	add    esp,0x10
c001cd14:	83 ec 0c             	sub    esp,0xc
c001cd17:	68 de 38 02 c0       	push   0xc00238de
c001cd1c:	e8 7a f8 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cd21:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd23:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd26:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001cd29:	c7 04 24 b6 29 02 c0 	mov    DWORD PTR [esp],0xc00229b6
c001cd30:	e8 66 f8 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cd35:	83 c4 0c             	add    esp,0xc
c001cd38:	6a 07                	push   0x7
c001cd3a:	6a 00                	push   0x0
c001cd3c:	53                   	push   ebx
c001cd3d:	e8 5a f9 ff ff       	call   c001c69c <IDE::read(unsigned char, unsigned char)>
c001cd42:	83 c4 0c             	add    esp,0xc
c001cd45:	6a 07                	push   0x7
c001cd47:	6a 01                	push   0x1
c001cd49:	53                   	push   ebx
c001cd4a:	e8 4d f9 ff ff       	call   c001c69c <IDE::read(unsigned char, unsigned char)>
c001cd4f:	c7 04 24 08 24 02 c0 	mov    DWORD PTR [esp],0xc0022408
c001cd56:	e8 40 f8 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cd5b:	83 c4 0c             	add    esp,0xc
c001cd5e:	6a 01                	push   0x1
c001cd60:	6a 00                	push   0x0
c001cd62:	53                   	push   ebx
c001cd63:	e8 82 fa ff ff       	call   c001c7ea <IDE::enableIRQs(unsigned char, bool)>
c001cd68:	83 c4 0c             	add    esp,0xc
c001cd6b:	6a 01                	push   0x1
c001cd6d:	6a 01                	push   0x1
c001cd6f:	53                   	push   ebx
c001cd70:	e8 75 fa ff ff       	call   c001c7ea <IDE::enableIRQs(unsigned char, bool)>
c001cd75:	c7 04 24 e1 38 02 c0 	mov    DWORD PTR [esp],0xc00238e1
c001cd7c:	e8 1a f8 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cd81:	83 c4 2c             	add    esp,0x2c
c001cd84:	31 c0                	xor    eax,eax
c001cd86:	5b                   	pop    ebx
c001cd87:	5e                   	pop    esi
c001cd88:	5f                   	pop    edi
c001cd89:	5d                   	pop    ebp
c001cd8a:	c3                   	ret    
c001cd8b:	90                   	nop

c001cd8c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001cd8c:	55                   	push   ebp
c001cd8d:	57                   	push   edi
c001cd8e:	56                   	push   esi
c001cd8f:	53                   	push   ebx
c001cd90:	83 ec 1c             	sub    esp,0x1c
c001cd93:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001cd97:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cd9b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cd9f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001cda3:	8d 42 f8             	lea    eax,[edx-0x8]
c001cda6:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001cdaa:	3c 03                	cmp    al,0x3
c001cdac:	77 5a                	ja     c001ce08 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001cdae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cdb2:	0f b6 db             	movzx  ebx,bl
c001cdb5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001cdb9:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001cdbc:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001cdc1:	0c 80                	or     al,0x80
c001cdc3:	50                   	push   eax
c001cdc4:	6a 0c                	push   0xc
c001cdc6:	53                   	push   ebx
c001cdc7:	56                   	push   esi
c001cdc8:	e8 0f f8 ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdcd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cdd1:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001cdd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cdda:	0f b6 d2             	movzx  edx,dl
c001cddd:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001cde1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cde3:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001cde8:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001cdec:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001cdf0:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001cdf8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001cdfc:	83 c4 2c             	add    esp,0x2c
c001cdff:	5b                   	pop    ebx
c001ce00:	5e                   	pop    esi
c001ce01:	5f                   	pop    edi
c001ce02:	5d                   	pop    ebp
c001ce03:	e9 d4 f7 ff ff       	jmp    c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce08:	0f b6 c2             	movzx  eax,dl
c001ce0b:	83 f8 07             	cmp    eax,0x7
c001ce0e:	77 12                	ja     c001ce22 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001ce10:	0f b6 db             	movzx  ebx,bl
c001ce13:	0f b6 c2             	movzx  eax,dl
c001ce16:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001ce1e:	01 c2                	add    edx,eax
c001ce20:	eb 2f                	jmp    c001ce51 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001ce22:	83 f8 0d             	cmp    eax,0xd
c001ce25:	77 13                	ja     c001ce3a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001ce27:	0f b6 db             	movzx  ebx,bl
c001ce2a:	0f b6 d2             	movzx  edx,dl
c001ce2d:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001ce34:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ce38:	eb 17                	jmp    c001ce51 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001ce3a:	83 f8 15             	cmp    eax,0x15
c001ce3d:	77 14                	ja     c001ce53 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001ce3f:	0f b6 db             	movzx  ebx,bl
c001ce42:	0f b6 d2             	movzx  edx,dl
c001ce45:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001ce4d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ce51:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ce53:	83 c4 1c             	add    esp,0x1c
c001ce56:	5b                   	pop    ebx
c001ce57:	5e                   	pop    esi
c001ce58:	5f                   	pop    edi
c001ce59:	5d                   	pop    ebp
c001ce5a:	c3                   	ret    
c001ce5b:	90                   	nop

c001ce5c <IDE::detect()>:
c001ce5c:	55                   	push   ebp
c001ce5d:	57                   	push   edi
c001ce5e:	56                   	push   esi
c001ce5f:	53                   	push   ebx
c001ce60:	81 ec 28 02 00 00    	sub    esp,0x228
c001ce66:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001ce6d:	68 e3 38 02 c0       	push   0xc00238e3
c001ce72:	e8 24 f7 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001ce77:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001ce7d:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001ce81:	83 c4 10             	add    esp,0x10
c001ce84:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001ce89:	0f 85 26 04 00 00    	jne    c001d2b5 <IDE::detect()+0x459>
c001ce8f:	83 ec 0c             	sub    esp,0xc
c001ce92:	31 f6                	xor    esi,esi
c001ce94:	68 e6 38 02 c0       	push   0xc00238e6
c001ce99:	31 ff                	xor    edi,edi
c001ce9b:	e8 fb f6 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cea0:	83 c4 10             	add    esp,0x10
c001cea3:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001ceaa:	83 ec 0c             	sub    esp,0xc
c001cead:	68 e9 38 02 c0       	push   0xc00238e9
c001ceb2:	e8 e4 f6 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001ceb7:	83 c4 10             	add    esp,0x10
c001ceba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001cec1:	83 ec 0c             	sub    esp,0xc
c001cec4:	31 ed                	xor    ebp,ebp
c001cec6:	68 ec 38 02 c0       	push   0xc00238ec
c001cecb:	e8 cb f6 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001ced0:	89 f8                	mov    eax,edi
c001ced2:	c1 e0 06             	shl    eax,0x6
c001ced5:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001cedd:	c7 04 24 ef 38 02 c0 	mov    DWORD PTR [esp],0xc00238ef
c001cee4:	e8 b2 f6 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cee9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ceed:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001cef1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cef5:	c1 e0 04             	shl    eax,0x4
c001cef8:	83 c8 a0             	or     eax,0xffffffa0
c001cefb:	0f b6 c0             	movzx  eax,al
c001cefe:	50                   	push   eax
c001ceff:	6a 06                	push   0x6
c001cf01:	56                   	push   esi
c001cf02:	53                   	push   ebx
c001cf03:	e8 d4 f6 ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf08:	83 c4 1c             	add    esp,0x1c
c001cf0b:	6a 0c                	push   0xc
c001cf0d:	56                   	push   esi
c001cf0e:	53                   	push   ebx
c001cf0f:	e8 88 f7 ff ff       	call   c001c69c <IDE::read(unsigned char, unsigned char)>
c001cf14:	83 c4 0c             	add    esp,0xc
c001cf17:	6a 0c                	push   0xc
c001cf19:	56                   	push   esi
c001cf1a:	53                   	push   ebx
c001cf1b:	e8 7c f7 ff ff       	call   c001c69c <IDE::read(unsigned char, unsigned char)>
c001cf20:	83 c4 0c             	add    esp,0xc
c001cf23:	6a 0c                	push   0xc
c001cf25:	56                   	push   esi
c001cf26:	53                   	push   ebx
c001cf27:	e8 70 f7 ff ff       	call   c001c69c <IDE::read(unsigned char, unsigned char)>
c001cf2c:	83 c4 0c             	add    esp,0xc
c001cf2f:	6a 0c                	push   0xc
c001cf31:	56                   	push   esi
c001cf32:	53                   	push   ebx
c001cf33:	e8 64 f7 ff ff       	call   c001c69c <IDE::read(unsigned char, unsigned char)>
c001cf38:	c7 04 24 f2 38 02 c0 	mov    DWORD PTR [esp],0xc00238f2
c001cf3f:	e8 57 f6 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cf44:	68 ec 00 00 00       	push   0xec
c001cf49:	6a 07                	push   0x7
c001cf4b:	56                   	push   esi
c001cf4c:	53                   	push   ebx
c001cf4d:	e8 8a f6 ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf52:	83 c4 1c             	add    esp,0x1c
c001cf55:	6a 0c                	push   0xc
c001cf57:	56                   	push   esi
c001cf58:	53                   	push   ebx
c001cf59:	e8 3e f7 ff ff       	call   c001c69c <IDE::read(unsigned char, unsigned char)>
c001cf5e:	83 c4 0c             	add    esp,0xc
c001cf61:	6a 0c                	push   0xc
c001cf63:	56                   	push   esi
c001cf64:	53                   	push   ebx
c001cf65:	e8 32 f7 ff ff       	call   c001c69c <IDE::read(unsigned char, unsigned char)>
c001cf6a:	83 c4 0c             	add    esp,0xc
c001cf6d:	6a 0c                	push   0xc
c001cf6f:	56                   	push   esi
c001cf70:	53                   	push   ebx
c001cf71:	e8 26 f7 ff ff       	call   c001c69c <IDE::read(unsigned char, unsigned char)>
c001cf76:	83 c4 0c             	add    esp,0xc
c001cf79:	6a 0c                	push   0xc
c001cf7b:	56                   	push   esi
c001cf7c:	53                   	push   ebx
c001cf7d:	e8 1a f7 ff ff       	call   c001c69c <IDE::read(unsigned char, unsigned char)>
c001cf82:	c7 04 24 f5 38 02 c0 	mov    DWORD PTR [esp],0xc00238f5
c001cf89:	e8 0d f6 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cf8e:	83 c4 0c             	add    esp,0xc
c001cf91:	6a 0c                	push   0xc
c001cf93:	56                   	push   esi
c001cf94:	53                   	push   ebx
c001cf95:	e8 02 f7 ff ff       	call   c001c69c <IDE::read(unsigned char, unsigned char)>
c001cf9a:	83 c4 10             	add    esp,0x10
c001cf9d:	84 c0                	test   al,al
c001cf9f:	75 1f                	jne    c001cfc0 <IDE::detect()+0x164>
c001cfa1:	83 ec 0c             	sub    esp,0xc
c001cfa4:	68 f8 38 02 c0       	push   0xc00238f8
c001cfa9:	e8 ed f5 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cfae:	e9 e0 02 00 00       	jmp    c001d293 <IDE::detect()+0x437>
c001cfb3:	a8 80                	test   al,0x80
c001cfb5:	74 21                	je     c001cfd8 <IDE::detect()+0x17c>
c001cfb7:	45                   	inc    ebp
c001cfb8:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001cfbe:	7f 1e                	jg     c001cfde <IDE::detect()+0x182>
c001cfc0:	50                   	push   eax
c001cfc1:	6a 0c                	push   0xc
c001cfc3:	56                   	push   esi
c001cfc4:	53                   	push   ebx
c001cfc5:	e8 d2 f6 ff ff       	call   c001c69c <IDE::read(unsigned char, unsigned char)>
c001cfca:	83 c4 10             	add    esp,0x10
c001cfcd:	a8 01                	test   al,0x1
c001cfcf:	74 e2                	je     c001cfb3 <IDE::detect()+0x157>
c001cfd1:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001cfd6:	eb 22                	jmp    c001cffa <IDE::detect()+0x19e>
c001cfd8:	a8 08                	test   al,0x8
c001cfda:	74 db                	je     c001cfb7 <IDE::detect()+0x15b>
c001cfdc:	eb 17                	jmp    c001cff5 <IDE::detect()+0x199>
c001cfde:	83 ec 0c             	sub    esp,0xc
c001cfe1:	6a 32                	push   0x32
c001cfe3:	e8 ec 85 ff ff       	call   c00155d4 <milliTenthSleep(unsigned int)>
c001cfe8:	83 c4 10             	add    esp,0x10
c001cfeb:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001cff1:	75 cd                	jne    c001cfc0 <IDE::detect()+0x164>
c001cff3:	eb dc                	jmp    c001cfd1 <IDE::detect()+0x175>
c001cff5:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001cffa:	83 ec 0c             	sub    esp,0xc
c001cffd:	68 fb 38 02 c0       	push   0xc00238fb
c001d002:	e8 94 f5 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d007:	83 c4 10             	add    esp,0x10
c001d00a:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001d00f:	74 57                	je     c001d068 <IDE::detect()+0x20c>
c001d011:	50                   	push   eax
c001d012:	6a 04                	push   0x4
c001d014:	56                   	push   esi
c001d015:	53                   	push   ebx
c001d016:	e8 81 f6 ff ff       	call   c001c69c <IDE::read(unsigned char, unsigned char)>
c001d01b:	83 c4 0c             	add    esp,0xc
c001d01e:	6a 05                	push   0x5
c001d020:	56                   	push   esi
c001d021:	53                   	push   ebx
c001d022:	89 c5                	mov    ebp,eax
c001d024:	e8 73 f6 ff ff       	call   c001c69c <IDE::read(unsigned char, unsigned char)>
c001d029:	89 e9                	mov    ecx,ebp
c001d02b:	83 c4 10             	add    esp,0x10
c001d02e:	0f b6 e9             	movzx  ebp,cl
c001d031:	83 fd 14             	cmp    ebp,0x14
c001d034:	75 04                	jne    c001d03a <IDE::detect()+0x1de>
c001d036:	3c eb                	cmp    al,0xeb
c001d038:	74 11                	je     c001d04b <IDE::detect()+0x1ef>
c001d03a:	83 fd 69             	cmp    ebp,0x69
c001d03d:	0f 85 53 02 00 00    	jne    c001d296 <IDE::detect()+0x43a>
c001d043:	3c 96                	cmp    al,0x96
c001d045:	0f 85 4b 02 00 00    	jne    c001d296 <IDE::detect()+0x43a>
c001d04b:	68 a1 00 00 00       	push   0xa1
c001d050:	6a 07                	push   0x7
c001d052:	56                   	push   esi
c001d053:	53                   	push   ebx
c001d054:	e8 83 f5 ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d059:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001d060:	e8 6f 85 ff ff       	call   c00155d4 <milliTenthSleep(unsigned int)>
c001d065:	83 c4 10             	add    esp,0x10
c001d068:	83 ec 0c             	sub    esp,0xc
c001d06b:	89 fd                	mov    ebp,edi
c001d06d:	68 fe 38 02 c0       	push   0xc00238fe
c001d072:	e8 24 f5 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d077:	8d 54 24 20          	lea    edx,[esp+0x20]
c001d07b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001d082:	c1 e5 06             	shl    ebp,0x6
c001d085:	52                   	push   edx
c001d086:	01 dd                	add    ebp,ebx
c001d088:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001d08c:	6a 00                	push   0x0
c001d08e:	56                   	push   esi
c001d08f:	53                   	push   ebx
c001d090:	e8 f7 fc ff ff       	call   c001cd8c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001d095:	83 c4 14             	add    esp,0x14
c001d098:	68 02 39 02 c0       	push   0xc0023902
c001d09d:	e8 f9 f4 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d0a2:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001d0a7:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001d0ae:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001d0b5:	89 f0                	mov    eax,esi
c001d0b7:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001d0bd:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d0c1:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001d0c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0cb:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001d0d2:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001d0da:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001d0e1:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001d0e9:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001d0ef:	c7 04 24 06 39 02 c0 	mov    DWORD PTR [esp],0xc0023906
c001d0f6:	e8 a0 f4 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d0fb:	83 c4 10             	add    esp,0x10
c001d0fe:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001d105:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d109:	74 09                	je     c001d114 <IDE::detect()+0x2b8>
c001d10b:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001d112:	eb 07                	jmp    c001d11b <IDE::detect()+0x2bf>
c001d114:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001d11b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d11f:	89 f8                	mov    eax,edi
c001d121:	83 ec 0c             	sub    esp,0xc
c001d124:	c1 e0 06             	shl    eax,0x6
c001d127:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001d12a:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001d130:	68 0a 39 02 c0       	push   0xc002390a
c001d135:	e8 61 f4 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d13a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d13e:	89 e8                	mov    eax,ebp
c001d140:	83 c4 10             	add    esp,0x10
c001d143:	8d 6a 28             	lea    ebp,[edx+0x28]
c001d146:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001d149:	83 c2 02             	add    edx,0x2
c001d14c:	83 c0 02             	add    eax,0x2
c001d14f:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001d155:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001d158:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001d15e:	39 d5                	cmp    ebp,edx
c001d160:	75 e4                	jne    c001d146 <IDE::detect()+0x2ea>
c001d162:	89 f8                	mov    eax,edi
c001d164:	c1 e0 06             	shl    eax,0x6
c001d167:	01 d8                	add    eax,ebx
c001d169:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001d170:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001d177:	c1 ea 09             	shr    edx,0x9
c001d17a:	83 e2 01             	and    edx,0x1
c001d17d:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001d184:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001d18a:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001d18e:	74 0c                	je     c001d19c <IDE::detect()+0x340>
c001d190:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001d199:	0f 95 c2             	setne  dl
c001d19c:	89 fd                	mov    ebp,edi
c001d19e:	83 ec 0c             	sub    esp,0xc
c001d1a1:	c1 e5 06             	shl    ebp,0x6
c001d1a4:	01 dd                	add    ebp,ebx
c001d1a6:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001d1ac:	68 0e 39 02 c0       	push   0xc002390e
c001d1b1:	e8 e5 f3 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d1b6:	83 c4 10             	add    esp,0x10
c001d1b9:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001d1be:	75 66                	jne    c001d226 <IDE::detect()+0x3ca>
c001d1c0:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001d1c7:	0f 84 b8 00 00 00    	je     c001d285 <IDE::detect()+0x429>
c001d1cd:	83 ec 0c             	sub    esp,0xc
c001d1d0:	68 12 39 02 c0       	push   0xc0023912
c001d1d5:	e8 c1 f3 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d1da:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001d1e1:	e8 ea 16 ff ff       	call   c000e8d0 <malloc>
c001d1e6:	89 04 24             	mov    DWORD PTR [esp],eax
c001d1e9:	89 c5                	mov    ebp,eax
c001d1eb:	e8 44 05 00 00       	call   c001d734 <ATA::ATA()>
c001d1f0:	c7 04 24 16 39 02 c0 	mov    DWORD PTR [esp],0xc0023916
c001d1f7:	e8 9f f3 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d1fc:	59                   	pop    ecx
c001d1fd:	58                   	pop    eax
c001d1fe:	55                   	push   ebp
c001d1ff:	53                   	push   ebx
c001d200:	e8 41 be fe ff       	call   c0009046 <Device::addChild(Device*)>
c001d205:	c7 04 24 1b 39 02 c0 	mov    DWORD PTR [esp],0xc002391b
c001d20c:	e8 8a f3 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d211:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d214:	53                   	push   ebx
c001d215:	57                   	push   edi
c001d216:	6a 00                	push   0x0
c001d218:	55                   	push   ebp
c001d219:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d21c:	83 c4 14             	add    esp,0x14
c001d21f:	68 20 39 02 c0       	push   0xc0023920
c001d224:	eb 57                	jmp    c001d27d <IDE::detect()+0x421>
c001d226:	83 ec 0c             	sub    esp,0xc
c001d229:	68 25 39 02 c0       	push   0xc0023925
c001d22e:	e8 68 f3 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d233:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001d23a:	e8 91 16 ff ff       	call   c000e8d0 <malloc>
c001d23f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d242:	89 c5                	mov    ebp,eax
c001d244:	e8 b1 0c 00 00       	call   c001defa <ATAPI::ATAPI()>
c001d249:	c7 04 24 2b 39 02 c0 	mov    DWORD PTR [esp],0xc002392b
c001d250:	e8 46 f3 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d255:	58                   	pop    eax
c001d256:	5a                   	pop    edx
c001d257:	55                   	push   ebp
c001d258:	53                   	push   ebx
c001d259:	e8 e8 bd fe ff       	call   c0009046 <Device::addChild(Device*)>
c001d25e:	c7 04 24 32 39 02 c0 	mov    DWORD PTR [esp],0xc0023932
c001d265:	e8 31 f3 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d26a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d26d:	53                   	push   ebx
c001d26e:	57                   	push   edi
c001d26f:	6a 00                	push   0x0
c001d271:	55                   	push   ebp
c001d272:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d275:	83 c4 14             	add    esp,0x14
c001d278:	68 39 39 02 c0       	push   0xc0023939
c001d27d:	e8 19 f3 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d282:	83 c4 10             	add    esp,0x10
c001d285:	83 ec 0c             	sub    esp,0xc
c001d288:	47                   	inc    edi
c001d289:	68 40 39 02 c0       	push   0xc0023940
c001d28e:	e8 08 f3 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d293:	83 c4 10             	add    esp,0x10
c001d296:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001d29a:	74 0c                	je     c001d2a8 <IDE::detect()+0x44c>
c001d29c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001d2a3:	e9 19 fc ff ff       	jmp    c001cec1 <IDE::detect()+0x65>
c001d2a8:	4e                   	dec    esi
c001d2a9:	74 0a                	je     c001d2b5 <IDE::detect()+0x459>
c001d2ab:	be 01 00 00 00       	mov    esi,0x1
c001d2b0:	e9 f5 fb ff ff       	jmp    c001ceaa <IDE::detect()+0x4e>
c001d2b5:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d2bb:	5b                   	pop    ebx
c001d2bc:	5e                   	pop    esi
c001d2bd:	5f                   	pop    edi
c001d2be:	5d                   	pop    ebp
c001d2bf:	c3                   	ret    

c001d2c0 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d2c0:	55                   	push   ebp
c001d2c1:	57                   	push   edi
c001d2c2:	56                   	push   esi
c001d2c3:	53                   	push   ebx
c001d2c4:	83 ec 1c             	sub    esp,0x1c
c001d2c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d2cb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d2cf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d2d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d2db:	88 c3                	mov    bl,al
c001d2dd:	25 ff 00 00 00       	and    eax,0xff
c001d2e2:	0f 84 88 00 00 00    	je     c001d370 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d2e8:	83 ec 0c             	sub    esp,0xc
c001d2eb:	89 c7                	mov    edi,eax
c001d2ed:	68 44 39 02 c0       	push   0xc0023944
c001d2f2:	e8 57 9c fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001d2f7:	83 c4 10             	add    esp,0x10
c001d2fa:	83 ff 01             	cmp    edi,0x1
c001d2fd:	74 6b                	je     c001d36a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001d2ff:	83 ff 02             	cmp    edi,0x2
c001d302:	75 58                	jne    c001d35c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001d304:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001d309:	50                   	push   eax
c001d30a:	6a 01                	push   0x1
c001d30c:	01 ff                	add    edi,edi
c001d30e:	09 fe                	or     esi,edi
c001d310:	89 f0                	mov    eax,esi
c001d312:	0f b6 f0             	movzx  esi,al
c001d315:	c1 e6 06             	shl    esi,0x6
c001d318:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001d320:	50                   	push   eax
c001d321:	55                   	push   ebp
c001d322:	e8 75 f3 ff ff       	call   c001c69c <IDE::read(unsigned char, unsigned char)>
c001d327:	83 c4 10             	add    esp,0x10
c001d32a:	a8 01                	test   al,0x1
c001d32c:	74 02                	je     c001d330 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001d32e:	b3 07                	mov    bl,0x7
c001d330:	a8 02                	test   al,0x2
c001d332:	74 02                	je     c001d336 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001d334:	b3 03                	mov    bl,0x3
c001d336:	a8 04                	test   al,0x4
c001d338:	74 02                	je     c001d33c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001d33a:	b3 14                	mov    bl,0x14
c001d33c:	a8 08                	test   al,0x8
c001d33e:	74 02                	je     c001d342 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001d340:	b3 03                	mov    bl,0x3
c001d342:	a8 10                	test   al,0x10
c001d344:	74 02                	je     c001d348 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001d346:	b3 15                	mov    bl,0x15
c001d348:	a8 20                	test   al,0x20
c001d34a:	74 02                	je     c001d34e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001d34c:	b3 03                	mov    bl,0x3
c001d34e:	a8 40                	test   al,0x40
c001d350:	74 02                	je     c001d354 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001d352:	b3 16                	mov    bl,0x16
c001d354:	a8 80                	test   al,0x80
c001d356:	74 18                	je     c001d370 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d358:	b3 0d                	mov    bl,0xd
c001d35a:	eb 14                	jmp    c001d370 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d35c:	83 ff 03             	cmp    edi,0x3
c001d35f:	74 0d                	je     c001d36e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001d361:	83 ff 04             	cmp    edi,0x4
c001d364:	75 0a                	jne    c001d370 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d366:	b3 08                	mov    bl,0x8
c001d368:	eb 06                	jmp    c001d370 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d36a:	b3 13                	mov    bl,0x13
c001d36c:	eb 02                	jmp    c001d370 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d36e:	b3 17                	mov    bl,0x17
c001d370:	83 c4 1c             	add    esp,0x1c
c001d373:	88 d8                	mov    al,bl
c001d375:	5b                   	pop    ebx
c001d376:	5e                   	pop    esi
c001d377:	5f                   	pop    edi
c001d378:	5d                   	pop    ebp
c001d379:	c3                   	ret    

c001d37a <IDE::polling(unsigned char, unsigned int)>:
c001d37a:	57                   	push   edi
c001d37b:	56                   	push   esi
c001d37c:	53                   	push   ebx
c001d37d:	bb 04 00 00 00       	mov    ebx,0x4
c001d382:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d386:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d38b:	52                   	push   edx
c001d38c:	6a 0c                	push   0xc
c001d38e:	56                   	push   esi
c001d38f:	57                   	push   edi
c001d390:	e8 07 f3 ff ff       	call   c001c69c <IDE::read(unsigned char, unsigned char)>
c001d395:	83 c4 10             	add    esp,0x10
c001d398:	4b                   	dec    ebx
c001d399:	75 f0                	jne    c001d38b <IDE::polling(unsigned char, unsigned int)+0x11>
c001d39b:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d3a0:	50                   	push   eax
c001d3a1:	6a 0c                	push   0xc
c001d3a3:	56                   	push   esi
c001d3a4:	57                   	push   edi
c001d3a5:	e8 f2 f2 ff ff       	call   c001c69c <IDE::read(unsigned char, unsigned char)>
c001d3aa:	83 c4 10             	add    esp,0x10
c001d3ad:	a8 01                	test   al,0x1
c001d3af:	75 17                	jne    c001d3c8 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001d3b1:	a8 20                	test   al,0x20
c001d3b3:	75 0f                	jne    c001d3c4 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001d3b5:	4b                   	dec    ebx
c001d3b6:	74 10                	je     c001d3c8 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001d3b8:	a8 80                	test   al,0x80
c001d3ba:	75 e4                	jne    c001d3a0 <IDE::polling(unsigned char, unsigned int)+0x26>
c001d3bc:	a8 08                	test   al,0x8
c001d3be:	74 e0                	je     c001d3a0 <IDE::polling(unsigned char, unsigned int)+0x26>
c001d3c0:	31 c0                	xor    eax,eax
c001d3c2:	eb 06                	jmp    c001d3ca <IDE::polling(unsigned char, unsigned int)+0x50>
c001d3c4:	b0 01                	mov    al,0x1
c001d3c6:	eb 02                	jmp    c001d3ca <IDE::polling(unsigned char, unsigned int)+0x50>
c001d3c8:	b0 02                	mov    al,0x2
c001d3ca:	5b                   	pop    ebx
c001d3cb:	5e                   	pop    esi
c001d3cc:	5f                   	pop    edi
c001d3cd:	c3                   	ret    

c001d3ce <SATABus::close(int, int, void*)>:
c001d3ce:	31 c0                	xor    eax,eax
c001d3d0:	c3                   	ret    
c001d3d1:	90                   	nop

c001d3d2 <SATABus::detect()>:
c001d3d2:	c3                   	ret    
c001d3d3:	90                   	nop

c001d3d4 <SATABus::SATABus()>:
c001d3d4:	83 ec 0c             	sub    esp,0xc
c001d3d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3db:	83 ec 08             	sub    esp,0x8
c001d3de:	68 7c 39 02 c0       	push   0xc002397c
c001d3e3:	50                   	push   eax
c001d3e4:	e8 b7 bf fe ff       	call   c00093a0 <HardDiskController::HardDiskController(char const*)>
c001d3e9:	83 c4 10             	add    esp,0x10
c001d3ec:	ba a8 39 02 c0       	mov    edx,0xc00239a8
c001d3f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3f5:	89 10                	mov    DWORD PTR [eax],edx
c001d3f7:	83 ec 0c             	sub    esp,0xc
c001d3fa:	6a 50                	push   0x50
c001d3fc:	e8 de 1a ff ff       	call   c000eedf <Phys::allocateContiguousPages(int)>
c001d401:	83 c4 10             	add    esp,0x10
c001d404:	89 c2                	mov    edx,eax
c001d406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d40a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d410:	83 ec 0c             	sub    esp,0xc
c001d413:	6a 50                	push   0x50
c001d415:	e8 39 4b ff ff       	call   c0011f53 <Virt::allocateKernelVirtualPages(int)>
c001d41a:	83 c4 10             	add    esp,0x10
c001d41d:	89 c2                	mov    edx,eax
c001d41f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d423:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d429:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c001d42e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d432:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001d438:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d43c:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001d442:	83 ec 0c             	sub    esp,0xc
c001d445:	6a 03                	push   0x3
c001d447:	6a 50                	push   0x50
c001d449:	51                   	push   ecx
c001d44a:	52                   	push   edx
c001d44b:	50                   	push   eax
c001d44c:	e8 d5 53 ff ff       	call   c0012826 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001d451:	83 c4 20             	add    esp,0x20
c001d454:	90                   	nop
c001d455:	83 c4 0c             	add    esp,0xc
c001d458:	c3                   	ret    
c001d459:	90                   	nop

c001d45a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001d45a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d45e:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001d461:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001d464:	09 c2                	or     edx,eax
c001d466:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d46a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d470:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d472:	31 c0                	xor    eax,eax
c001d474:	c1 e9 08             	shr    ecx,0x8
c001d477:	83 e1 0f             	and    ecx,0xf
c001d47a:	39 c8                	cmp    eax,ecx
c001d47c:	74 0a                	je     c001d488 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001d47e:	f6 c2 01             	test   dl,0x1
c001d481:	74 08                	je     c001d48b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001d483:	d1 ea                	shr    edx,1
c001d485:	40                   	inc    eax
c001d486:	eb f2                	jmp    c001d47a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001d488:	83 c8 ff             	or     eax,0xffffffff
c001d48b:	c3                   	ret    

c001d48c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001d48c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d490:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001d493:	89 c2                	mov    edx,eax
c001d495:	c1 ea 08             	shr    edx,0x8
c001d498:	83 e2 0f             	and    edx,0xf
c001d49b:	4a                   	dec    edx
c001d49c:	75 32                	jne    c001d4d0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001d49e:	83 e0 0f             	and    eax,0xf
c001d4a1:	83 f8 03             	cmp    eax,0x3
c001d4a4:	75 2a                	jne    c001d4d0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001d4a6:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001d4a9:	b8 02 00 00 00       	mov    eax,0x2
c001d4ae:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001d4b4:	74 1c                	je     c001d4d2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001d4b6:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001d4bc:	b8 04 00 00 00       	mov    eax,0x4
c001d4c1:	74 0f                	je     c001d4d2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001d4c3:	31 c0                	xor    eax,eax
c001d4c5:	83 fa 03             	cmp    edx,0x3
c001d4c8:	0f 94 c0             	sete   al
c001d4cb:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001d4cf:	c3                   	ret    
c001d4d0:	31 c0                	xor    eax,eax
c001d4d2:	c3                   	ret    
c001d4d3:	90                   	nop

c001d4d4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001d4d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d4d8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d4db:	0f ba e2 0f          	bt     edx,0xf
c001d4df:	72 f7                	jb     c001d4d8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001d4e1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d4e4:	83 ca 10             	or     edx,0x10
c001d4e7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d4ea:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d4ed:	83 ca 01             	or     edx,0x1
c001d4f0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d4f3:	c3                   	ret    

c001d4f4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001d4f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d4f8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d4fb:	83 e2 fe             	and    edx,0xfffffffe
c001d4fe:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d501:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d504:	83 e2 ef             	and    edx,0xffffffef
c001d507:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d50a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d50d:	0f ba e2 0e          	bt     edx,0xe
c001d511:	72 f7                	jb     c001d50a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001d513:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d516:	0f ba e2 0f          	bt     edx,0xf
c001d51a:	72 ee                	jb     c001d50a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001d51c:	c3                   	ret    
c001d51d:	90                   	nop

c001d51e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001d51e:	55                   	push   ebp
c001d51f:	57                   	push   edi
c001d520:	56                   	push   esi
c001d521:	53                   	push   ebx
c001d522:	83 ec 1c             	sub    esp,0x1c
c001d525:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d529:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d52d:	53                   	push   ebx
c001d52e:	57                   	push   edi
c001d52f:	e8 c0 ff ff ff       	call   c001d4f4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d534:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d538:	83 ec 0c             	sub    esp,0xc
c001d53b:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001d541:	c1 e5 0a             	shl    ebp,0xa
c001d544:	01 e8                	add    eax,ebp
c001d546:	89 03                	mov    DWORD PTR [ebx],eax
c001d548:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d54a:	68 00 04 00 00       	push   0x400
c001d54f:	6a 00                	push   0x0
c001d551:	50                   	push   eax
c001d552:	e8 99 2f fe ff       	call   c00004f0 <memset>
c001d557:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001d55d:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001d561:	83 c4 1c             	add    esp,0x1c
c001d564:	01 e8                	add    eax,ebp
c001d566:	89 03                	mov    DWORD PTR [ebx],eax
c001d568:	c1 e6 08             	shl    esi,0x8
c001d56b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d572:	81 c6 00 80 00 00    	add    esi,0x8000
c001d578:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001d57e:	01 f0                	add    eax,esi
c001d580:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d583:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d586:	68 00 01 00 00       	push   0x100
c001d58b:	6a 00                	push   0x0
c001d58d:	50                   	push   eax
c001d58e:	e8 5d 2f fe ff       	call   c00004f0 <memset>
c001d593:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001d599:	31 d2                	xor    edx,edx
c001d59b:	01 f0                	add    eax,esi
c001d59d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d5a0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d5a7:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001d5ad:	01 ee                	add    esi,ebp
c001d5af:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d5b3:	83 c4 10             	add    esp,0x10
c001d5b6:	c1 e5 0d             	shl    ebp,0xd
c001d5b9:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001d5bf:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001d5c5:	83 c6 20             	add    esi,0x20
c001d5c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d5cc:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001d5d2:	01 e8                	add    eax,ebp
c001d5d4:	01 d0                	add    eax,edx
c001d5d6:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001d5d9:	52                   	push   edx
c001d5da:	68 00 01 00 00       	push   0x100
c001d5df:	6a 00                	push   0x0
c001d5e1:	50                   	push   eax
c001d5e2:	e8 09 2f fe ff       	call   c00004f0 <memset>
c001d5e7:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001d5ed:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001d5f4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d5f8:	83 c4 10             	add    esp,0x10
c001d5fb:	01 e8                	add    eax,ebp
c001d5fd:	01 d0                	add    eax,edx
c001d5ff:	81 c2 00 01 00 00    	add    edx,0x100
c001d605:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001d608:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001d60e:	75 af                	jne    c001d5bf <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001d610:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001d617:	50                   	push   eax
c001d618:	50                   	push   eax
c001d619:	53                   	push   ebx
c001d61a:	57                   	push   edi
c001d61b:	e8 b4 fe ff ff       	call   c001d4d4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d620:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001d627:	83 c4 2c             	add    esp,0x2c
c001d62a:	5b                   	pop    ebx
c001d62b:	5e                   	pop    esi
c001d62c:	5f                   	pop    edi
c001d62d:	5d                   	pop    ebp
c001d62e:	c3                   	ret    
c001d62f:	90                   	nop

c001d630 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001d630:	55                   	push   ebp
c001d631:	57                   	push   edi
c001d632:	56                   	push   esi
c001d633:	53                   	push   ebx
c001d634:	31 db                	xor    ebx,ebx
c001d636:	83 ec 0c             	sub    esp,0xc
c001d639:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d63d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001d641:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001d644:	f7 c7 01 00 00 00    	test   edi,0x1
c001d64a:	74 7a                	je     c001d6c6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001d64c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d650:	89 d8                	mov    eax,ebx
c001d652:	c1 e0 07             	shl    eax,0x7
c001d655:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001d65c:	55                   	push   ebp
c001d65d:	56                   	push   esi
c001d65e:	e8 29 fe ff ff       	call   c001d48c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001d663:	5a                   	pop    edx
c001d664:	59                   	pop    ecx
c001d665:	83 f8 01             	cmp    eax,0x1
c001d668:	75 21                	jne    c001d68b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001d66a:	50                   	push   eax
c001d66b:	53                   	push   ebx
c001d66c:	55                   	push   ebp
c001d66d:	56                   	push   esi
c001d66e:	e8 ab fe ff ff       	call   c001d51e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d673:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d67a:	e8 51 12 ff ff       	call   c000e8d0 <malloc>
c001d67f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d682:	89 c5                	mov    ebp,eax
c001d684:	e8 37 0f 00 00       	call   c001e5c0 <SATA::SATA()>
c001d689:	eb 24                	jmp    c001d6af <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001d68b:	83 f8 04             	cmp    eax,0x4
c001d68e:	75 36                	jne    c001d6c6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001d690:	51                   	push   ecx
c001d691:	53                   	push   ebx
c001d692:	55                   	push   ebp
c001d693:	56                   	push   esi
c001d694:	e8 85 fe ff ff       	call   c001d51e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d699:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001d6a0:	e8 2b 12 ff ff       	call   c000e8d0 <malloc>
c001d6a5:	89 04 24             	mov    DWORD PTR [esp],eax
c001d6a8:	89 c5                	mov    ebp,eax
c001d6aa:	e8 a7 12 00 00       	call   c001e956 <SATAPI::SATAPI()>
c001d6af:	58                   	pop    eax
c001d6b0:	5a                   	pop    edx
c001d6b1:	55                   	push   ebp
c001d6b2:	56                   	push   esi
c001d6b3:	e8 8e b9 fe ff       	call   c0009046 <Device::addChild(Device*)>
c001d6b8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001d6bb:	56                   	push   esi
c001d6bc:	6a 00                	push   0x0
c001d6be:	53                   	push   ebx
c001d6bf:	55                   	push   ebp
c001d6c0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001d6c3:	83 c4 20             	add    esp,0x20
c001d6c6:	d1 ef                	shr    edi,1
c001d6c8:	43                   	inc    ebx
c001d6c9:	83 fb 20             	cmp    ebx,0x20
c001d6cc:	0f 85 72 ff ff ff    	jne    c001d644 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001d6d2:	83 c4 0c             	add    esp,0xc
c001d6d5:	5b                   	pop    ebx
c001d6d6:	5e                   	pop    esi
c001d6d7:	5f                   	pop    edi
c001d6d8:	5d                   	pop    ebp
c001d6d9:	c3                   	ret    

c001d6da <SATABus::open(int, int, void*)>:
c001d6da:	53                   	push   ebx
c001d6db:	83 ec 08             	sub    esp,0x8
c001d6de:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d6e2:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001d6e8:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d6ee:	e8 65 7a ff ff       	call   c0015158 <KeDisablePreemption()>
c001d6f3:	52                   	push   edx
c001d6f4:	52                   	push   edx
c001d6f5:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001d6fb:	53                   	push   ebx
c001d6fc:	e8 2f ff ff ff       	call   c001d630 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001d701:	e8 7a 7a ff ff       	call   c0015180 <KeRestorePreemption()>
c001d706:	83 c4 18             	add    esp,0x18
c001d709:	31 c0                	xor    eax,eax
c001d70b:	5b                   	pop    ebx
c001d70c:	c3                   	ret    
c001d70d:	90                   	nop

c001d70e <ATA::close(int, int, void*)>:
c001d70e:	83 ec 0c             	sub    esp,0xc
c001d711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d715:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d71b:	85 c0                	test   eax,eax
c001d71d:	74 0c                	je     c001d72b <ATA::close(int, int, void*)+0x1d>
c001d71f:	8b 10                	mov    edx,DWORD PTR [eax]
c001d721:	83 ec 0c             	sub    esp,0xc
c001d724:	50                   	push   eax
c001d725:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d728:	83 c4 10             	add    esp,0x10
c001d72b:	31 c0                	xor    eax,eax
c001d72d:	83 c4 0c             	add    esp,0xc
c001d730:	c3                   	ret    
c001d731:	90                   	nop

c001d732 <ATA::powerSaving(PowerSavingLevel)>:
c001d732:	c3                   	ret    
c001d733:	90                   	nop

c001d734 <ATA::ATA()>:
c001d734:	83 ec 0c             	sub    esp,0xc
c001d737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d73b:	83 ec 04             	sub    esp,0x4
c001d73e:	68 00 02 00 00       	push   0x200
c001d743:	68 29 3b 02 c0       	push   0xc0023b29
c001d748:	50                   	push   eax
c001d749:	e8 dc bc fe ff       	call   c000942a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d74e:	83 c4 10             	add    esp,0x10
c001d751:	ba 90 3a 02 c0       	mov    edx,0xc0023a90
c001d756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d75a:	89 10                	mov    DWORD PTR [eax],edx
c001d75c:	90                   	nop
c001d75d:	83 c4 0c             	add    esp,0xc
c001d760:	c3                   	ret    
c001d761:	90                   	nop

c001d762 <ATA::flush(bool)>:
c001d762:	53                   	push   ebx
c001d763:	83 ec 08             	sub    esp,0x8
c001d766:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001d76b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d76f:	83 f8 01             	cmp    eax,0x1
c001d772:	19 c0                	sbb    eax,eax
c001d774:	83 e0 fd             	and    eax,0xfffffffd
c001d777:	05 ea 00 00 00       	add    eax,0xea
c001d77c:	50                   	push   eax
c001d77d:	6a 07                	push   0x7
c001d77f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d786:	50                   	push   eax
c001d787:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d78d:	e8 4a ee ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d792:	83 c4 0c             	add    esp,0xc
c001d795:	6a 00                	push   0x0
c001d797:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d79e:	50                   	push   eax
c001d79f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7a5:	e8 d0 fb ff ff       	call   c001d37a <IDE::polling(unsigned char, unsigned int)>
c001d7aa:	83 c4 18             	add    esp,0x18
c001d7ad:	5b                   	pop    ebx
c001d7ae:	c3                   	ret    
c001d7af:	90                   	nop

c001d7b0 <ATA::readyForCommand()>:
c001d7b0:	56                   	push   esi
c001d7b1:	53                   	push   ebx
c001d7b2:	53                   	push   ebx
c001d7b3:	31 db                	xor    ebx,ebx
c001d7b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d7b9:	51                   	push   ecx
c001d7ba:	6a 0c                	push   0xc
c001d7bc:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d7c3:	50                   	push   eax
c001d7c4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d7ca:	e8 cd ee ff ff       	call   c001c69c <IDE::read(unsigned char, unsigned char)>
c001d7cf:	83 c4 10             	add    esp,0x10
c001d7d2:	a8 88                	test   al,0x88
c001d7d4:	74 1f                	je     c001d7f5 <ATA::readyForCommand()+0x45>
c001d7d6:	43                   	inc    ebx
c001d7d7:	83 fb 63             	cmp    ebx,0x63
c001d7da:	7e dd                	jle    c001d7b9 <ATA::readyForCommand()+0x9>
c001d7dc:	83 ec 0c             	sub    esp,0xc
c001d7df:	6a 0a                	push   0xa
c001d7e1:	e8 ee 7d ff ff       	call   c00155d4 <milliTenthSleep(unsigned int)>
c001d7e6:	83 c4 10             	add    esp,0x10
c001d7e9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d7ef:	75 c8                	jne    c001d7b9 <ATA::readyForCommand()+0x9>
c001d7f1:	31 c0                	xor    eax,eax
c001d7f3:	eb 02                	jmp    c001d7f7 <ATA::readyForCommand()+0x47>
c001d7f5:	b0 01                	mov    al,0x1
c001d7f7:	5a                   	pop    edx
c001d7f8:	5b                   	pop    ebx
c001d7f9:	5e                   	pop    esi
c001d7fa:	c3                   	ret    
c001d7fb:	90                   	nop

c001d7fc <ATA::access(unsigned long long, int, void*, bool)>:
c001d7fc:	55                   	push   ebp
c001d7fd:	57                   	push   edi
c001d7fe:	56                   	push   esi
c001d7ff:	53                   	push   ebx
c001d800:	83 ec 2c             	sub    esp,0x2c
c001d803:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d807:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d80b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d80f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d813:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d817:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001d81b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d81f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d825:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d829:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d82f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d833:	c1 e0 06             	shl    eax,0x6
c001d836:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001d83e:	74 5b                	je     c001d89b <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001d840:	89 fa                	mov    edx,edi
c001d842:	89 f0                	mov    eax,esi
c001d844:	c1 ea 1c             	shr    edx,0x1c
c001d847:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001d84b:	89 d1                	mov    ecx,edx
c001d84d:	09 c1                	or     ecx,eax
c001d84f:	74 25                	je     c001d876 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001d851:	31 ed                	xor    ebp,ebp
c001d853:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001d85a:	89 fa                	mov    edx,edi
c001d85c:	89 f0                	mov    eax,esi
c001d85e:	0f ad d0             	shrd   eax,edx,cl
c001d861:	d3 ea                	shr    edx,cl
c001d863:	f6 c1 20             	test   cl,0x20
c001d866:	74 02                	je     c001d86a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001d868:	89 d0                	mov    eax,edx
c001d86a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001d86e:	45                   	inc    ebp
c001d86f:	83 fd 06             	cmp    ebp,0x6
c001d872:	75 df                	jne    c001d853 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001d874:	eb 71                	jmp    c001d8e7 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001d876:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d87b:	89 f0                	mov    eax,esi
c001d87d:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d884:	0f ac f8 10          	shrd   eax,edi,0x10
c001d888:	bf 01 00 00 00       	mov    edi,0x1
c001d88d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d891:	c1 ee 18             	shr    esi,0x18
c001d894:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d899:	eb 53                	jmp    c001d8ee <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d89b:	6a 00                	push   0x0
c001d89d:	6a 3f                	push   0x3f
c001d89f:	57                   	push   edi
c001d8a0:	56                   	push   esi
c001d8a1:	e8 3e 25 00 00       	call   c001fde4 <__umoddi3>
c001d8a6:	83 c4 10             	add    esp,0x10
c001d8a9:	40                   	inc    eax
c001d8aa:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d8ae:	6a 00                	push   0x0
c001d8b0:	68 f0 03 00 00       	push   0x3f0
c001d8b5:	57                   	push   edi
c001d8b6:	56                   	push   esi
c001d8b7:	e8 28 24 00 00       	call   c001fce4 <__udivdi3>
c001d8bc:	83 c4 10             	add    esp,0x10
c001d8bf:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d8c4:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d8cb:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d8d0:	6a 00                	push   0x0
c001d8d2:	6a 3f                	push   0x3f
c001d8d4:	57                   	push   edi
c001d8d5:	31 ff                	xor    edi,edi
c001d8d7:	56                   	push   esi
c001d8d8:	e8 07 24 00 00       	call   c001fce4 <__udivdi3>
c001d8dd:	83 c4 10             	add    esp,0x10
c001d8e0:	83 e0 0f             	and    eax,0xf
c001d8e3:	89 c6                	mov    esi,eax
c001d8e5:	eb 07                	jmp    c001d8ee <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d8e7:	31 f6                	xor    esi,esi
c001d8e9:	bf 02 00 00 00       	mov    edi,0x2
c001d8ee:	55                   	push   ebp
c001d8ef:	6a 00                	push   0x0
c001d8f1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8f8:	50                   	push   eax
c001d8f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d8fd:	e8 e8 ee ff ff       	call   c001c7ea <IDE::enableIRQs(unsigned char, bool)>
c001d902:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d905:	e8 a6 fe ff ff       	call   c001d7b0 <ATA::readyForCommand()>
c001d90a:	83 c4 10             	add    esp,0x10
c001d90d:	84 c0                	test   al,al
c001d90f:	75 0a                	jne    c001d91b <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001d911:	be 01 00 00 00       	mov    esi,0x1
c001d916:	e9 df 02 00 00       	jmp    c001dbfa <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c001d91b:	fa                   	cli    
c001d91c:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001d922:	f7 c7 03 00 00 00    	test   edi,0x3
c001d928:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d92e:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d934:	75 0a                	jne    c001d940 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001d936:	c1 e0 04             	shl    eax,0x4
c001d939:	09 c6                	or     esi,eax
c001d93b:	83 ce a0             	or     esi,0xffffffa0
c001d93e:	eb 08                	jmp    c001d948 <ATA::access(unsigned long long, int, void*, bool)+0x14c>
c001d940:	c1 e0 04             	shl    eax,0x4
c001d943:	09 c6                	or     esi,eax
c001d945:	83 ce e0             	or     esi,0xffffffe0
c001d948:	89 f0                	mov    eax,esi
c001d94a:	0f b6 d2             	movzx  edx,dl
c001d94d:	0f b6 f0             	movzx  esi,al
c001d950:	56                   	push   esi
c001d951:	6a 06                	push   0x6
c001d953:	52                   	push   edx
c001d954:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d95a:	e8 7d ec ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d95f:	83 c4 10             	add    esp,0x10
c001d962:	6a 00                	push   0x0
c001d964:	6a 01                	push   0x1
c001d966:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d96d:	50                   	push   eax
c001d96e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d974:	e8 63 ec ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d979:	89 f8                	mov    eax,edi
c001d97b:	83 c4 10             	add    esp,0x10
c001d97e:	0f b6 f0             	movzx  esi,al
c001d981:	83 fe 02             	cmp    esi,0x2
c001d984:	75 6e                	jne    c001d9f4 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001d986:	6a 00                	push   0x0
c001d988:	6a 08                	push   0x8
c001d98a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d991:	50                   	push   eax
c001d992:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d998:	e8 3f ec ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d99d:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d9a2:	50                   	push   eax
c001d9a3:	6a 09                	push   0x9
c001d9a5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9ac:	50                   	push   eax
c001d9ad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d9b3:	e8 24 ec ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9b8:	83 c4 20             	add    esp,0x20
c001d9bb:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d9c0:	50                   	push   eax
c001d9c1:	6a 0a                	push   0xa
c001d9c3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9ca:	50                   	push   eax
c001d9cb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d9d1:	e8 06 ec ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9d6:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d9db:	50                   	push   eax
c001d9dc:	6a 0b                	push   0xb
c001d9de:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9e5:	50                   	push   eax
c001d9e6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d9ec:	e8 eb eb ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9f1:	83 c4 20             	add    esp,0x20
c001d9f4:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d9f9:	50                   	push   eax
c001d9fa:	6a 02                	push   0x2
c001d9fc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da03:	50                   	push   eax
c001da04:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da0a:	e8 cd eb ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da0f:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001da14:	50                   	push   eax
c001da15:	6a 03                	push   0x3
c001da17:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da1e:	50                   	push   eax
c001da1f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da25:	e8 b2 eb ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da2a:	83 c4 20             	add    esp,0x20
c001da2d:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001da32:	50                   	push   eax
c001da33:	6a 04                	push   0x4
c001da35:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da3c:	50                   	push   eax
c001da3d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da43:	e8 94 eb ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da48:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001da4d:	50                   	push   eax
c001da4e:	6a 05                	push   0x5
c001da50:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da57:	50                   	push   eax
c001da58:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da5e:	e8 79 eb ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da63:	83 c4 20             	add    esp,0x20
c001da66:	83 fe 02             	cmp    esi,0x2
c001da69:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001da6e:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001da73:	85 c9                	test   ecx,ecx
c001da75:	74 07                	je     c001da7e <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001da77:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001da7c:	75 45                	jne    c001dac3 <ATA::access(unsigned long long, int, void*, bool)+0x2c7>
c001da7e:	89 f8                	mov    eax,edi
c001da80:	0f b6 f8             	movzx  edi,al
c001da83:	31 c0                	xor    eax,eax
c001da85:	4f                   	dec    edi
c001da86:	0f 94 c0             	sete   al
c001da89:	89 c6                	mov    esi,eax
c001da8b:	75 0c                	jne    c001da99 <ATA::access(unsigned long long, int, void*, bool)+0x29d>
c001da8d:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001da92:	b8 30 00 00 00       	mov    eax,0x30
c001da97:	75 2f                	jne    c001dac8 <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001da99:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001da9d:	83 f2 01             	xor    edx,0x1
c001daa0:	85 c9                	test   ecx,ecx
c001daa2:	74 09                	je     c001daad <ATA::access(unsigned long long, int, void*, bool)+0x2b1>
c001daa4:	84 d2                	test   dl,dl
c001daa6:	b8 24 00 00 00       	mov    eax,0x24
c001daab:	75 1b                	jne    c001dac8 <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001daad:	85 f6                	test   esi,esi
c001daaf:	0f 84 5c fe ff ff    	je     c001d911 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001dab5:	84 d2                	test   dl,dl
c001dab7:	b8 20 00 00 00       	mov    eax,0x20
c001dabc:	75 0a                	jne    c001dac8 <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001dabe:	e9 4e fe ff ff       	jmp    c001d911 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001dac3:	b8 34 00 00 00       	mov    eax,0x34
c001dac8:	50                   	push   eax
c001dac9:	6a 07                	push   0x7
c001dacb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dad2:	50                   	push   eax
c001dad3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dad9:	e8 fe ea ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dade:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001dae5:	83 c4 10             	add    esp,0x10
c001dae8:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c001daef:	75 01                	jne    c001daf2 <ATA::access(unsigned long long, int, void*, bool)+0x2f6>
c001daf1:	fb                   	sti    
c001daf2:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001daf6:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001dafb:	85 f6                	test   esi,esi
c001dafd:	0f 84 dd 00 00 00    	je     c001dbe0 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001db03:	57                   	push   edi
c001db04:	6a 01                	push   0x1
c001db06:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db0d:	50                   	push   eax
c001db0e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db14:	e8 61 f8 ff ff       	call   c001d37a <IDE::polling(unsigned char, unsigned int)>
c001db19:	83 c4 10             	add    esp,0x10
c001db1c:	0f b6 c0             	movzx  eax,al
c001db1f:	85 c0                	test   eax,eax
c001db21:	74 23                	je     c001db46 <ATA::access(unsigned long long, int, void*, bool)+0x34a>
c001db23:	50                   	push   eax
c001db24:	89 c6                	mov    esi,eax
c001db26:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001db2d:	50                   	push   eax
c001db2e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db35:	50                   	push   eax
c001db36:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db3c:	e8 7f f7 ff ff       	call   c001d2c0 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001db41:	e9 b1 00 00 00       	jmp    c001dbf7 <ATA::access(unsigned long long, int, void*, bool)+0x3fb>
c001db46:	85 ed                	test   ebp,ebp
c001db48:	74 49                	je     c001db93 <ATA::access(unsigned long long, int, void*, bool)+0x397>
c001db4a:	fa                   	cli    
c001db4b:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001db51:	31 ff                	xor    edi,edi
c001db53:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001db57:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001db5b:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001db60:	51                   	push   ecx
c001db61:	51                   	push   ecx
c001db62:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db69:	50                   	push   eax
c001db6a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db70:	e8 55 ea ff ff       	call   c001c5ca <IDE::getBase(unsigned char)>
c001db75:	89 c2                	mov    edx,eax
c001db77:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001db7c:	66 ef                	out    dx,ax
c001db7e:	47                   	inc    edi
c001db7f:	83 c4 10             	add    esp,0x10
c001db82:	81 ff 00 01 00 00    	cmp    edi,0x100
c001db88:	75 c9                	jne    c001db53 <ATA::access(unsigned long long, int, void*, bool)+0x357>
c001db8a:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001db91:	eb 35                	jmp    c001dbc8 <ATA::access(unsigned long long, int, void*, bool)+0x3cc>
c001db93:	fa                   	cli    
c001db94:	52                   	push   edx
c001db95:	52                   	push   edx
c001db96:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db9d:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001dba3:	50                   	push   eax
c001dba4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dbaa:	e8 1b ea ff ff       	call   c001c5ca <IDE::getBase(unsigned char)>
c001dbaf:	b9 00 01 00 00       	mov    ecx,0x100
c001dbb4:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001dbb8:	89 c2                	mov    edx,eax
c001dbba:	fc                   	cld    
c001dbbb:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001dbbe:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001dbc5:	83 c4 10             	add    esp,0x10
c001dbc8:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c001dbcf:	75 01                	jne    c001dbd2 <ATA::access(unsigned long long, int, void*, bool)+0x3d6>
c001dbd1:	fb                   	sti    
c001dbd2:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001dbda:	4e                   	dec    esi
c001dbdb:	e9 1b ff ff ff       	jmp    c001dafb <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001dbe0:	31 f6                	xor    esi,esi
c001dbe2:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001dbe7:	74 11                	je     c001dbfa <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c001dbe9:	50                   	push   eax
c001dbea:	50                   	push   eax
c001dbeb:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001dbf0:	50                   	push   eax
c001dbf1:	53                   	push   ebx
c001dbf2:	e8 6b fb ff ff       	call   c001d762 <ATA::flush(bool)>
c001dbf7:	83 c4 10             	add    esp,0x10
c001dbfa:	83 c4 2c             	add    esp,0x2c
c001dbfd:	89 f0                	mov    eax,esi
c001dbff:	5b                   	pop    ebx
c001dc00:	5e                   	pop    esi
c001dc01:	5f                   	pop    edi
c001dc02:	5d                   	pop    ebp
c001dc03:	c3                   	ret    

c001dc04 <ATA::read(unsigned long long, int, void*)>:
c001dc04:	57                   	push   edi
c001dc05:	b8 04 00 00 00       	mov    eax,0x4
c001dc0a:	56                   	push   esi
c001dc0b:	53                   	push   ebx
c001dc0c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dc10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001dc14:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001dc18:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001dc1c:	8d 7a ff             	lea    edi,[edx-0x1]
c001dc1f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001dc25:	77 25                	ja     c001dc4c <ATA::read(unsigned long long, int, void*)+0x48>
c001dc27:	85 f6                	test   esi,esi
c001dc29:	b8 06 00 00 00       	mov    eax,0x6
c001dc2e:	74 1c                	je     c001dc4c <ATA::read(unsigned long long, int, void*)+0x48>
c001dc30:	50                   	push   eax
c001dc31:	50                   	push   eax
c001dc32:	6a 00                	push   0x0
c001dc34:	56                   	push   esi
c001dc35:	52                   	push   edx
c001dc36:	53                   	push   ebx
c001dc37:	51                   	push   ecx
c001dc38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc3c:	e8 bb fb ff ff       	call   c001d7fc <ATA::access(unsigned long long, int, void*, bool)>
c001dc41:	83 c4 20             	add    esp,0x20
c001dc44:	85 c0                	test   eax,eax
c001dc46:	0f 95 c0             	setne  al
c001dc49:	0f b6 c0             	movzx  eax,al
c001dc4c:	5b                   	pop    ebx
c001dc4d:	5e                   	pop    esi
c001dc4e:	5f                   	pop    edi
c001dc4f:	c3                   	ret    

c001dc50 <ATA::write(unsigned long long, int, void*)>:
c001dc50:	57                   	push   edi
c001dc51:	b8 04 00 00 00       	mov    eax,0x4
c001dc56:	56                   	push   esi
c001dc57:	53                   	push   ebx
c001dc58:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dc5c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001dc60:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001dc64:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001dc68:	8d 7a ff             	lea    edi,[edx-0x1]
c001dc6b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001dc71:	77 25                	ja     c001dc98 <ATA::write(unsigned long long, int, void*)+0x48>
c001dc73:	85 f6                	test   esi,esi
c001dc75:	b8 06 00 00 00       	mov    eax,0x6
c001dc7a:	74 1c                	je     c001dc98 <ATA::write(unsigned long long, int, void*)+0x48>
c001dc7c:	50                   	push   eax
c001dc7d:	50                   	push   eax
c001dc7e:	6a 01                	push   0x1
c001dc80:	56                   	push   esi
c001dc81:	52                   	push   edx
c001dc82:	53                   	push   ebx
c001dc83:	51                   	push   ecx
c001dc84:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc88:	e8 6f fb ff ff       	call   c001d7fc <ATA::access(unsigned long long, int, void*, bool)>
c001dc8d:	83 c4 20             	add    esp,0x20
c001dc90:	85 c0                	test   eax,eax
c001dc92:	0f 95 c0             	setne  al
c001dc95:	0f b6 c0             	movzx  eax,al
c001dc98:	5b                   	pop    ebx
c001dc99:	5e                   	pop    esi
c001dc9a:	5f                   	pop    edi
c001dc9b:	c3                   	ret    

c001dc9c <ATA::detectCHS()>:
c001dc9c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001dca0:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001dca6:	c1 e0 06             	shl    eax,0x6
c001dca9:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001dcaf:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001dcb9:	c7 44 24 04 cc 39 02 c0 	mov    DWORD PTR [esp+0x4],0xc00239cc
c001dcc1:	e9 50 0f ff ff       	jmp    c000ec16 <KePanic(char const*)>

c001dcc6 <ATA::open(int, int, void*)>:
c001dcc6:	53                   	push   ebx
c001dcc7:	83 ec 08             	sub    esp,0x8
c001dcca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dcce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dcd2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dcd6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dcdc:	c1 e0 06             	shl    eax,0x6
c001dcdf:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001dce5:	01 d0                	add    eax,edx
c001dce7:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001dcee:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001dcf4:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001dcfb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dd05:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dd0c:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001dd12:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001dd19:	75 0c                	jne    c001dd27 <ATA::open(int, int, void*)+0x61>
c001dd1b:	83 ec 0c             	sub    esp,0xc
c001dd1e:	53                   	push   ebx
c001dd1f:	e8 78 ff ff ff       	call   c001dc9c <ATA::detectCHS()>
c001dd24:	83 c4 10             	add    esp,0x10
c001dd27:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001dd2d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dd33:	c1 e0 06             	shl    eax,0x6
c001dd36:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001dd3d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dd47:	d1 e8                	shr    eax,1
c001dd49:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001dd4f:	6a 04                	push   0x4
c001dd51:	6a 0c                	push   0xc
c001dd53:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dd5a:	50                   	push   eax
c001dd5b:	52                   	push   edx
c001dd5c:	e8 7b e8 ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd61:	90                   	nop
c001dd62:	90                   	nop
c001dd63:	6a 00                	push   0x0
c001dd65:	6a 0c                	push   0xc
c001dd67:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dd6e:	50                   	push   eax
c001dd6f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dd75:	e8 62 e8 ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd7a:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001dd80:	83 c4 20             	add    esp,0x20
c001dd83:	c1 e0 06             	shl    eax,0x6
c001dd86:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c001dd8c:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c001dd93:	0f 84 00 01 00 00    	je     c001de99 <ATA::open(int, int, void*)+0x1d3>
c001dd99:	83 ec 0c             	sub    esp,0xc
c001dd9c:	6a 08                	push   0x8
c001dd9e:	e8 3c 11 ff ff       	call   c000eedf <Phys::allocateContiguousPages(int)>
c001dda3:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001dda9:	c7 04 24 de 39 02 c0 	mov    DWORD PTR [esp],0xc00239de
c001ddb0:	e8 99 91 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ddb5:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001ddbc:	e8 92 41 ff ff       	call   c0011f53 <Virt::allocateKernelVirtualPages(int)>
c001ddc1:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001ddc7:	6a 03                	push   0x3
c001ddc9:	50                   	push   eax
c001ddca:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001ddd0:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c001ddd6:	e8 51 48 ff ff       	call   c001262c <VAS::mapPage(unsigned long, unsigned long, int)>
c001dddb:	83 c4 20             	add    esp,0x20
c001ddde:	e8 2d 10 ff ff       	call   c000ee10 <Phys::allocatePage()>
c001dde3:	83 ec 0c             	sub    esp,0xc
c001dde6:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c001ddec:	6a 01                	push   0x1
c001ddee:	e8 60 41 ff ff       	call   c0011f53 <Virt::allocateKernelVirtualPages(int)>
c001ddf3:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c001ddf9:	6a 03                	push   0x3
c001ddfb:	50                   	push   eax
c001ddfc:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c001de02:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c001de08:	e8 1f 48 ff ff       	call   c001262c <VAS::mapPage(unsigned long, unsigned long, int)>
c001de0d:	83 c4 14             	add    esp,0x14
c001de10:	68 17 3a 02 c0       	push   0xc0023a17
c001de15:	e8 34 91 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001de1a:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c001de21:	50                   	push   eax
c001de22:	6a 12                	push   0x12
c001de24:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001de2b:	50                   	push   eax
c001de2c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001de32:	e8 a5 e7 ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de37:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c001de3d:	83 c4 20             	add    esp,0x20
c001de40:	0f b6 c4             	movzx  eax,ah
c001de43:	50                   	push   eax
c001de44:	6a 13                	push   0x13
c001de46:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001de4d:	50                   	push   eax
c001de4e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001de54:	e8 83 e7 ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de59:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c001de60:	50                   	push   eax
c001de61:	6a 14                	push   0x14
c001de63:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001de6a:	50                   	push   eax
c001de6b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001de71:	e8 66 e7 ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de76:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c001de7d:	83 c4 20             	add    esp,0x20
c001de80:	50                   	push   eax
c001de81:	6a 15                	push   0x15
c001de83:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001de8a:	50                   	push   eax
c001de8b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001de91:	e8 46 e7 ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de96:	83 c4 10             	add    esp,0x10
c001de99:	83 ec 0c             	sub    esp,0xc
c001de9c:	53                   	push   ebx
c001de9d:	e8 f0 b5 fe ff       	call   c0009492 <PhysicalDisk::startCache()>
c001dea2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dea5:	e8 bc c4 fe ff       	call   c000a366 <createPartitionsForDisk(PhysicalDisk*)>
c001deaa:	83 c4 18             	add    esp,0x18
c001dead:	31 c0                	xor    eax,eax
c001deaf:	5b                   	pop    ebx
c001deb0:	c3                   	ret    

c001deb1 <combineCharAndColour(char, unsigned char)>:
c001deb1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001deb6:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001debc:	c1 e0 08             	shl    eax,0x8
c001debf:	09 d0                	or     eax,edx
c001dec1:	c3                   	ret    

c001dec2 <combineColours(unsigned char, unsigned char)>:
c001dec2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001dec7:	c1 e0 04             	shl    eax,0x4
c001deca:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001dece:	c3                   	ret    
c001decf:	90                   	nop

c001ded0 <ATAPI::write(unsigned long long, int, void*)>:
c001ded0:	b8 03 00 00 00       	mov    eax,0x3
c001ded5:	c3                   	ret    

c001ded6 <ATAPI::close(int, int, void*)>:
c001ded6:	83 ec 0c             	sub    esp,0xc
c001ded9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dedd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dee3:	85 c0                	test   eax,eax
c001dee5:	74 0c                	je     c001def3 <ATAPI::close(int, int, void*)+0x1d>
c001dee7:	8b 10                	mov    edx,DWORD PTR [eax]
c001dee9:	83 ec 0c             	sub    esp,0xc
c001deec:	50                   	push   eax
c001deed:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001def0:	83 c4 10             	add    esp,0x10
c001def3:	31 c0                	xor    eax,eax
c001def5:	83 c4 0c             	add    esp,0xc
c001def8:	c3                   	ret    
c001def9:	90                   	nop

c001defa <ATAPI::ATAPI()>:
c001defa:	83 ec 0c             	sub    esp,0xc
c001defd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df01:	83 ec 04             	sub    esp,0x4
c001df04:	68 00 08 00 00       	push   0x800
c001df09:	68 c9 3b 02 c0       	push   0xc0023bc9
c001df0e:	50                   	push   eax
c001df0f:	e8 16 b5 fe ff       	call   c000942a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001df14:	83 c4 10             	add    esp,0x10
c001df17:	ba d8 3a 02 c0       	mov    edx,0xc0023ad8
c001df1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df20:	89 10                	mov    DWORD PTR [eax],edx
c001df22:	90                   	nop
c001df23:	83 c4 0c             	add    esp,0xc
c001df26:	c3                   	ret    
c001df27:	90                   	nop

c001df28 <ATAPI::readyForCommand()>:
c001df28:	56                   	push   esi
c001df29:	53                   	push   ebx
c001df2a:	53                   	push   ebx
c001df2b:	31 db                	xor    ebx,ebx
c001df2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001df31:	51                   	push   ecx
c001df32:	6a 0c                	push   0xc
c001df34:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001df3b:	50                   	push   eax
c001df3c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001df42:	e8 55 e7 ff ff       	call   c001c69c <IDE::read(unsigned char, unsigned char)>
c001df47:	83 c4 10             	add    esp,0x10
c001df4a:	a8 88                	test   al,0x88
c001df4c:	74 25                	je     c001df73 <ATAPI::readyForCommand()+0x4b>
c001df4e:	43                   	inc    ebx
c001df4f:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001df55:	7e da                	jle    c001df31 <ATAPI::readyForCommand()+0x9>
c001df57:	83 ec 0c             	sub    esp,0xc
c001df5a:	68 5e 01 00 00       	push   0x15e
c001df5f:	e8 70 76 ff ff       	call   c00155d4 <milliTenthSleep(unsigned int)>
c001df64:	83 c4 10             	add    esp,0x10
c001df67:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001df6d:	75 c2                	jne    c001df31 <ATAPI::readyForCommand()+0x9>
c001df6f:	31 c0                	xor    eax,eax
c001df71:	eb 02                	jmp    c001df75 <ATAPI::readyForCommand()+0x4d>
c001df73:	b0 01                	mov    al,0x1
c001df75:	5a                   	pop    edx
c001df76:	5b                   	pop    ebx
c001df77:	5e                   	pop    esi
c001df78:	c3                   	ret    
c001df79:	90                   	nop

c001df7a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001df7a:	55                   	push   ebp
c001df7b:	57                   	push   edi
c001df7c:	56                   	push   esi
c001df7d:	53                   	push   ebx
c001df7e:	83 ec 20             	sub    esp,0x20
c001df81:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001df85:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001df89:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001df8d:	6a 01                	push   0x1
c001df8f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001df96:	50                   	push   eax
c001df97:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001df9d:	e8 48 e8 ff ff       	call   c001c7ea <IDE::enableIRQs(unsigned char, bool)>
c001dfa2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dfa9:	59                   	pop    ecx
c001dfaa:	5e                   	pop    esi
c001dfab:	50                   	push   eax
c001dfac:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dfb2:	e8 ff e5 ff ff       	call   c001c5b6 <IDE::prepareInterrupt(unsigned char)>
c001dfb7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dfba:	e8 69 ff ff ff       	call   c001df28 <ATAPI::readyForCommand()>
c001dfbf:	83 c4 10             	add    esp,0x10
c001dfc2:	84 c0                	test   al,al
c001dfc4:	75 0a                	jne    c001dfd0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001dfc6:	bb 01 00 00 00       	mov    ebx,0x1
c001dfcb:	e9 5f 02 00 00       	jmp    c001e22f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dfd0:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001dfd6:	c1 e0 04             	shl    eax,0x4
c001dfd9:	0f b6 c0             	movzx  eax,al
c001dfdc:	50                   	push   eax
c001dfdd:	6a 06                	push   0x6
c001dfdf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dfe6:	50                   	push   eax
c001dfe7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dfed:	e8 ea e5 ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dff2:	6a 00                	push   0x0
c001dff4:	6a 01                	push   0x1
c001dff6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dffd:	50                   	push   eax
c001dffe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e004:	e8 d3 e5 ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e009:	83 c4 20             	add    esp,0x20
c001e00c:	0f b6 c3             	movzx  eax,bl
c001e00f:	50                   	push   eax
c001e010:	0f b6 df             	movzx  ebx,bh
c001e013:	6a 04                	push   0x4
c001e015:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e01c:	50                   	push   eax
c001e01d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e023:	e8 b4 e5 ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e028:	53                   	push   ebx
c001e029:	6a 05                	push   0x5
c001e02b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e032:	50                   	push   eax
c001e033:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e039:	e8 9e e5 ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e03e:	83 c4 20             	add    esp,0x20
c001e041:	68 a0 00 00 00       	push   0xa0
c001e046:	6a 07                	push   0x7
c001e048:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e04f:	50                   	push   eax
c001e050:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e056:	e8 81 e5 ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e05b:	83 c4 0c             	add    esp,0xc
c001e05e:	6a 01                	push   0x1
c001e060:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e067:	50                   	push   eax
c001e068:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e06e:	e8 07 f3 ff ff       	call   c001d37a <IDE::polling(unsigned char, unsigned int)>
c001e073:	83 c4 10             	add    esp,0x10
c001e076:	0f b6 d8             	movzx  ebx,al
c001e079:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001e07f:	85 db                	test   ebx,ebx
c001e081:	74 20                	je     c001e0a3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001e083:	53                   	push   ebx
c001e084:	0f b6 c0             	movzx  eax,al
c001e087:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001e08e:	52                   	push   edx
c001e08f:	50                   	push   eax
c001e090:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e096:	e8 25 f2 ff ff       	call   c001d2c0 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001e09b:	83 c4 10             	add    esp,0x10
c001e09e:	e9 8c 01 00 00       	jmp    c001e22f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001e0a3:	52                   	push   edx
c001e0a4:	0f b6 c0             	movzx  eax,al
c001e0a7:	52                   	push   edx
c001e0a8:	50                   	push   eax
c001e0a9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e0af:	e8 16 e5 ff ff       	call   c001c5ca <IDE::getBase(unsigned char)>
c001e0b4:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001e0b8:	b9 06 00 00 00       	mov    ecx,0x6
c001e0bd:	89 c2                	mov    edx,eax
c001e0bf:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001e0c2:	89 e8                	mov    eax,ebp
c001e0c4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001e0c8:	83 c4 10             	add    esp,0x10
c001e0cb:	0f b6 c0             	movzx  eax,al
c001e0ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e0d2:	85 db                	test   ebx,ebx
c001e0d4:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001e0da:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001e0e1:	0f 84 eb 00 00 00    	je     c001e1d2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001e0e7:	55                   	push   ebp
c001e0e8:	55                   	push   ebp
c001e0e9:	52                   	push   edx
c001e0ea:	50                   	push   eax
c001e0eb:	e8 60 e6 ff ff       	call   c001c750 <IDE::waitInterrupt(unsigned char)>
c001e0f0:	83 c4 10             	add    esp,0x10
c001e0f3:	84 c0                	test   al,al
c001e0f5:	0f 84 cb fe ff ff    	je     c001dfc6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001e0fb:	56                   	push   esi
c001e0fc:	56                   	push   esi
c001e0fd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e104:	50                   	push   eax
c001e105:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e10b:	e8 a6 e4 ff ff       	call   c001c5b6 <IDE::prepareInterrupt(unsigned char)>
c001e110:	83 c4 0c             	add    esp,0xc
c001e113:	6a 04                	push   0x4
c001e115:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e11c:	50                   	push   eax
c001e11d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e123:	e8 74 e5 ff ff       	call   c001c69c <IDE::read(unsigned char, unsigned char)>
c001e128:	83 c4 0c             	add    esp,0xc
c001e12b:	6a 05                	push   0x5
c001e12d:	89 c6                	mov    esi,eax
c001e12f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e136:	50                   	push   eax
c001e137:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e13d:	e8 5a e5 ff ff       	call   c001c69c <IDE::read(unsigned char, unsigned char)>
c001e142:	83 c4 10             	add    esp,0x10
c001e145:	0f b6 e8             	movzx  ebp,al
c001e148:	89 f0                	mov    eax,esi
c001e14a:	c1 e5 08             	shl    ebp,0x8
c001e14d:	0f b6 f0             	movzx  esi,al
c001e150:	09 f5                	or     ebp,esi
c001e152:	31 f6                	xor    esi,esi
c001e154:	d1 fd                	sar    ebp,1
c001e156:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e15b:	74 5c                	je     c001e1b9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001e15d:	39 ee                	cmp    esi,ebp
c001e15f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001e165:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001e16c:	75 0d                	jne    c001e17b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001e16e:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001e171:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001e175:	4b                   	dec    ebx
c001e176:	e9 57 ff ff ff       	jmp    c001e0d2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001e17b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e17f:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001e183:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001e188:	51                   	push   ecx
c001e189:	51                   	push   ecx
c001e18a:	52                   	push   edx
c001e18b:	50                   	push   eax
c001e18c:	e8 39 e4 ff ff       	call   c001c5ca <IDE::getBase(unsigned char)>
c001e191:	89 c2                	mov    edx,eax
c001e193:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001e198:	66 ef                	out    dx,ax
c001e19a:	46                   	inc    esi
c001e19b:	83 c4 10             	add    esp,0x10
c001e19e:	eb bd                	jmp    c001e15d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001e1a0:	51                   	push   ecx
c001e1a1:	51                   	push   ecx
c001e1a2:	52                   	push   edx
c001e1a3:	50                   	push   eax
c001e1a4:	e8 21 e4 ff ff       	call   c001c5ca <IDE::getBase(unsigned char)>
c001e1a9:	89 c2                	mov    edx,eax
c001e1ab:	66 ed                	in     ax,dx
c001e1ad:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001e1b1:	83 c4 10             	add    esp,0x10
c001e1b4:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001e1b8:	46                   	inc    esi
c001e1b9:	39 ee                	cmp    esi,ebp
c001e1bb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001e1c1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001e1c8:	75 d6                	jne    c001e1a0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001e1ca:	01 f6                	add    esi,esi
c001e1cc:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001e1d0:	eb a3                	jmp    c001e175 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001e1d2:	51                   	push   ecx
c001e1d3:	51                   	push   ecx
c001e1d4:	52                   	push   edx
c001e1d5:	50                   	push   eax
c001e1d6:	e8 75 e5 ff ff       	call   c001c750 <IDE::waitInterrupt(unsigned char)>
c001e1db:	83 c4 10             	add    esp,0x10
c001e1de:	84 c0                	test   al,al
c001e1e0:	0f 84 e0 fd ff ff    	je     c001dfc6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001e1e6:	52                   	push   edx
c001e1e7:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e1ec:	52                   	push   edx
c001e1ed:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e1f4:	50                   	push   eax
c001e1f5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e1fb:	e8 b6 e3 ff ff       	call   c001c5b6 <IDE::prepareInterrupt(unsigned char)>
c001e200:	83 c4 10             	add    esp,0x10
c001e203:	50                   	push   eax
c001e204:	50                   	push   eax
c001e205:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e20c:	50                   	push   eax
c001e20d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e213:	e8 b2 e3 ff ff       	call   c001c5ca <IDE::getBase(unsigned char)>
c001e218:	8d 50 07             	lea    edx,[eax+0x7]
c001e21b:	ec                   	in     al,dx
c001e21c:	83 c4 10             	add    esp,0x10
c001e21f:	a8 88                	test   al,0x88
c001e221:	74 0a                	je     c001e22d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001e223:	4b                   	dec    ebx
c001e224:	75 dd                	jne    c001e203 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001e226:	bb 02 00 00 00       	mov    ebx,0x2
c001e22b:	eb 02                	jmp    c001e22f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001e22d:	31 db                	xor    ebx,ebx
c001e22f:	83 c4 1c             	add    esp,0x1c
c001e232:	89 d8                	mov    eax,ebx
c001e234:	5b                   	pop    ebx
c001e235:	5e                   	pop    esi
c001e236:	5f                   	pop    edi
c001e237:	5d                   	pop    ebp
c001e238:	c3                   	ret    
c001e239:	90                   	nop

c001e23a <ATAPI::diskRemoved()>:
c001e23a:	53                   	push   ebx
c001e23b:	83 ec 14             	sub    esp,0x14
c001e23e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e242:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e249:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001e24f:	e8 02 be fe ff       	call   c000a056 <LogicalDisk::unmount()>
c001e254:	58                   	pop    eax
c001e255:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e25b:	e8 dc c7 fe ff       	call   c000aa3c <VCache::writeWriteBuffer()>
c001e260:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001e266:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e26a:	83 c4 18             	add    esp,0x18
c001e26d:	5b                   	pop    ebx
c001e26e:	e9 b9 c7 fe ff       	jmp    c000aa2c <VCache::invalidateReadBuffer()>
c001e273:	90                   	nop

c001e274 <ATAPI::eject()>:
c001e274:	57                   	push   edi
c001e275:	b9 03 00 00 00       	mov    ecx,0x3
c001e27a:	53                   	push   ebx
c001e27b:	83 ec 14             	sub    esp,0x14
c001e27e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e282:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e286:	fc                   	cld    
c001e287:	31 c0                	xor    eax,eax
c001e289:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e28b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e290:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e295:	50                   	push   eax
c001e296:	50                   	push   eax
c001e297:	6a 00                	push   0x0
c001e299:	6a 00                	push   0x0
c001e29b:	6a 00                	push   0x0
c001e29d:	6a 02                	push   0x2
c001e29f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e2a3:	50                   	push   eax
c001e2a4:	53                   	push   ebx
c001e2a5:	e8 d0 fc ff ff       	call   c001df7a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e2aa:	83 c4 14             	add    esp,0x14
c001e2ad:	53                   	push   ebx
c001e2ae:	e8 87 ff ff ff       	call   c001e23a <ATAPI::diskRemoved()>
c001e2b3:	83 c4 24             	add    esp,0x24
c001e2b6:	31 c0                	xor    eax,eax
c001e2b8:	5b                   	pop    ebx
c001e2b9:	5f                   	pop    edi
c001e2ba:	c3                   	ret    
c001e2bb:	90                   	nop

c001e2bc <ATAPI::diskInserted()>:
c001e2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2c0:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001e2c7:	c3                   	ret    

c001e2c8 <ATAPI::detectMedia()>:
c001e2c8:	56                   	push   esi
c001e2c9:	53                   	push   ebx
c001e2ca:	83 ec 28             	sub    esp,0x28
c001e2cd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e2d1:	6a 0c                	push   0xc
c001e2d3:	6a 00                	push   0x0
c001e2d5:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001e2d9:	56                   	push   esi
c001e2da:	e8 11 22 fe ff       	call   c00004f0 <memset>
c001e2df:	58                   	pop    eax
c001e2e0:	5a                   	pop    edx
c001e2e1:	6a 00                	push   0x0
c001e2e3:	6a 00                	push   0x0
c001e2e5:	6a 00                	push   0x0
c001e2e7:	6a 00                	push   0x0
c001e2e9:	56                   	push   esi
c001e2ea:	53                   	push   ebx
c001e2eb:	e8 8a fc ff ff       	call   c001df7a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e2f0:	83 c4 1c             	add    esp,0x1c
c001e2f3:	6a 0c                	push   0xc
c001e2f5:	6a 00                	push   0x0
c001e2f7:	56                   	push   esi
c001e2f8:	e8 f3 21 fe ff       	call   c00004f0 <memset>
c001e2fd:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001e302:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001e307:	59                   	pop    ecx
c001e308:	58                   	pop    eax
c001e309:	6a 01                	push   0x1
c001e30b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001e30f:	50                   	push   eax
c001e310:	6a 00                	push   0x0
c001e312:	6a 12                	push   0x12
c001e314:	56                   	push   esi
c001e315:	53                   	push   ebx
c001e316:	e8 5f fc ff ff       	call   c001df7a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e31b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001e31f:	83 c4 20             	add    esp,0x20
c001e322:	83 e0 7f             	and    eax,0x7f
c001e325:	83 f8 70             	cmp    eax,0x70
c001e328:	74 15                	je     c001e33f <ATAPI::detectMedia()+0x77>
c001e32a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e331:	75 0c                	jne    c001e33f <ATAPI::detectMedia()+0x77>
c001e333:	83 ec 0c             	sub    esp,0xc
c001e336:	53                   	push   ebx
c001e337:	e8 80 ff ff ff       	call   c001e2bc <ATAPI::diskInserted()>
c001e33c:	83 c4 10             	add    esp,0x10
c001e33f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e343:	83 e0 0f             	and    eax,0xf
c001e346:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001e34b:	0f b6 c0             	movzx  eax,al
c001e34e:	75 19                	jne    c001e369 <ATAPI::detectMedia()+0xa1>
c001e350:	83 f8 02             	cmp    eax,0x2
c001e353:	75 14                	jne    c001e369 <ATAPI::detectMedia()+0xa1>
c001e355:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e35c:	74 24                	je     c001e382 <ATAPI::detectMedia()+0xba>
c001e35e:	83 ec 0c             	sub    esp,0xc
c001e361:	53                   	push   ebx
c001e362:	e8 d3 fe ff ff       	call   c001e23a <ATAPI::diskRemoved()>
c001e367:	eb 16                	jmp    c001e37f <ATAPI::detectMedia()+0xb7>
c001e369:	85 c0                	test   eax,eax
c001e36b:	75 15                	jne    c001e382 <ATAPI::detectMedia()+0xba>
c001e36d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e374:	75 0c                	jne    c001e382 <ATAPI::detectMedia()+0xba>
c001e376:	83 ec 0c             	sub    esp,0xc
c001e379:	53                   	push   ebx
c001e37a:	e8 3d ff ff ff       	call   c001e2bc <ATAPI::diskInserted()>
c001e37f:	83 c4 10             	add    esp,0x10
c001e382:	83 c4 24             	add    esp,0x24
c001e385:	5b                   	pop    ebx
c001e386:	5e                   	pop    esi
c001e387:	c3                   	ret    

c001e388 <ATAPI::open(int, int, void*)>:
c001e388:	56                   	push   esi
c001e389:	53                   	push   ebx
c001e38a:	50                   	push   eax
c001e38b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e38f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e393:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e397:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e39d:	c1 e0 06             	shl    eax,0x6
c001e3a0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001e3a6:	01 d0                	add    eax,edx
c001e3a8:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001e3af:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001e3b5:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001e3bc:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e3c6:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e3cd:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e3d3:	6a 04                	push   0x4
c001e3d5:	6a 0c                	push   0xc
c001e3d7:	51                   	push   ecx
c001e3d8:	52                   	push   edx
c001e3d9:	e8 fe e1 ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e3de:	90                   	nop
c001e3df:	90                   	nop
c001e3e0:	6a 00                	push   0x0
c001e3e2:	6a 0c                	push   0xc
c001e3e4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e3eb:	50                   	push   eax
c001e3ec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e3f2:	e8 e5 e1 ff ff       	call   c001c5dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e3f7:	83 c4 14             	add    esp,0x14
c001e3fa:	68 78 01 00 00       	push   0x178
c001e3ff:	e8 cc 04 ff ff       	call   c000e8d0 <malloc>
c001e404:	83 c4 0c             	add    esp,0xc
c001e407:	6a 00                	push   0x0
c001e409:	68 ff ff ff 7f       	push   0x7fffffff
c001e40e:	6a 00                	push   0x0
c001e410:	6a 00                	push   0x0
c001e412:	53                   	push   ebx
c001e413:	68 7b 3c 02 c0       	push   0xc0023c7b
c001e418:	89 c6                	mov    esi,eax
c001e41a:	50                   	push   eax
c001e41b:	e8 74 ba fe ff       	call   c0009e94 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e420:	83 c4 14             	add    esp,0x14
c001e423:	56                   	push   esi
c001e424:	e8 2b bb fe ff       	call   c0009f54 <LogicalDisk::assignDriveLetter()>
c001e429:	5a                   	pop    edx
c001e42a:	59                   	pop    ecx
c001e42b:	0f be c0             	movsx  eax,al
c001e42e:	50                   	push   eax
c001e42f:	68 c0 3a 02 c0       	push   0xc0023ac0
c001e434:	e8 15 8b fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e439:	58                   	pop    eax
c001e43a:	5a                   	pop    edx
c001e43b:	56                   	push   esi
c001e43c:	53                   	push   ebx
c001e43d:	e8 04 ac fe ff       	call   c0009046 <Device::addChild(Device*)>
c001e442:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001e448:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e44b:	e8 42 b0 fe ff       	call   c0009492 <PhysicalDisk::startCache()>
c001e450:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e457:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e45a:	e8 69 fe ff ff       	call   c001e2c8 <ATAPI::detectMedia()>
c001e45f:	83 c4 14             	add    esp,0x14
c001e462:	31 c0                	xor    eax,eax
c001e464:	5b                   	pop    ebx
c001e465:	5e                   	pop    esi
c001e466:	c3                   	ret    
c001e467:	90                   	nop

c001e468 <ATAPI::read(unsigned long long, int, void*)>:
c001e468:	55                   	push   ebp
c001e469:	57                   	push   edi
c001e46a:	56                   	push   esi
c001e46b:	53                   	push   ebx
c001e46c:	83 ec 1c             	sub    esp,0x1c
c001e46f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e473:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e477:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e47b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e482:	74 3c                	je     c001e4c0 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001e484:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e488:	b9 03 00 00 00       	mov    ecx,0x3
c001e48d:	fc                   	cld    
c001e48e:	31 c0                	xor    eax,eax
c001e490:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e492:	89 e8                	mov    eax,ebp
c001e494:	0f ce                	bswap  esi
c001e496:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e49a:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001e49f:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001e4a3:	50                   	push   eax
c001e4a4:	50                   	push   eax
c001e4a5:	55                   	push   ebp
c001e4a6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e4aa:	c1 e5 0b             	shl    ebp,0xb
c001e4ad:	6a 00                	push   0x0
c001e4af:	55                   	push   ebp
c001e4b0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e4b4:	50                   	push   eax
c001e4b5:	53                   	push   ebx
c001e4b6:	e8 bf fa ff ff       	call   c001df7a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e4bb:	83 c4 20             	add    esp,0x20
c001e4be:	eb 1a                	jmp    c001e4da <ATAPI::read(unsigned long long, int, void*)+0x72>
c001e4c0:	83 ec 0c             	sub    esp,0xc
c001e4c3:	53                   	push   ebx
c001e4c4:	e8 ff fd ff ff       	call   c001e2c8 <ATAPI::detectMedia()>
c001e4c9:	83 c4 10             	add    esp,0x10
c001e4cc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e4d3:	75 af                	jne    c001e484 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001e4d5:	b8 02 00 00 00       	mov    eax,0x2
c001e4da:	83 c4 1c             	add    esp,0x1c
c001e4dd:	5b                   	pop    ebx
c001e4de:	5e                   	pop    esi
c001e4df:	5f                   	pop    edi
c001e4e0:	5d                   	pop    ebp
c001e4e1:	c3                   	ret    

c001e4e2 <SATA::close(int, int, void*)>:
c001e4e2:	83 ec 0c             	sub    esp,0xc
c001e4e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4e9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e4ef:	85 c0                	test   eax,eax
c001e4f1:	74 0c                	je     c001e4ff <SATA::close(int, int, void*)+0x1d>
c001e4f3:	8b 10                	mov    edx,DWORD PTR [eax]
c001e4f5:	83 ec 0c             	sub    esp,0xc
c001e4f8:	50                   	push   eax
c001e4f9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e4fc:	83 c4 10             	add    esp,0x10
c001e4ff:	31 c0                	xor    eax,eax
c001e501:	83 c4 0c             	add    esp,0xc
c001e504:	c3                   	ret    
c001e505:	90                   	nop

c001e506 <SATA::powerSaving(PowerSavingLevel)>:
c001e506:	c3                   	ret    
c001e507:	90                   	nop

c001e508 <SATA::open(int, int, void*)>:
c001e508:	56                   	push   esi
c001e509:	53                   	push   ebx
c001e50a:	83 ec 10             	sub    esp,0x10
c001e50d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e511:	68 08 3b 02 c0       	push   0xc0023b08
c001e516:	e8 33 8a fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e51b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e51f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001e529:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e533:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e539:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e53d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e547:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001e54e:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e554:	e8 b7 08 ff ff       	call   c000ee10 <Phys::allocatePage()>
c001e559:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e55f:	89 c6                	mov    esi,eax
c001e561:	e8 aa 08 ff ff       	call   c000ee10 <Phys::allocatePage()>
c001e566:	81 c6 00 10 00 00    	add    esi,0x1000
c001e56c:	83 c4 10             	add    esp,0x10
c001e56f:	39 c6                	cmp    esi,eax
c001e571:	74 10                	je     c001e583 <SATA::open(int, int, void*)+0x7b>
c001e573:	83 ec 0c             	sub    esp,0xc
c001e576:	68 14 3b 02 c0       	push   0xc0023b14
c001e57b:	e8 96 06 ff ff       	call   c000ec16 <KePanic(char const*)>
c001e580:	83 c4 10             	add    esp,0x10
c001e583:	83 ec 0c             	sub    esp,0xc
c001e586:	6a 02                	push   0x2
c001e588:	e8 c6 39 ff ff       	call   c0011f53 <Virt::allocateKernelVirtualPages(int)>
c001e58d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e593:	6a 03                	push   0x3
c001e595:	50                   	push   eax
c001e596:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001e59c:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c001e5a2:	e8 85 40 ff ff       	call   c001262c <VAS::mapPage(unsigned long, unsigned long, int)>
c001e5a7:	83 c4 14             	add    esp,0x14
c001e5aa:	53                   	push   ebx
c001e5ab:	e8 e2 ae fe ff       	call   c0009492 <PhysicalDisk::startCache()>
c001e5b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e5b3:	e8 ae bd fe ff       	call   c000a366 <createPartitionsForDisk(PhysicalDisk*)>
c001e5b8:	83 c4 14             	add    esp,0x14
c001e5bb:	31 c0                	xor    eax,eax
c001e5bd:	5b                   	pop    ebx
c001e5be:	5e                   	pop    esi
c001e5bf:	c3                   	ret    

c001e5c0 <SATA::SATA()>:
c001e5c0:	83 ec 0c             	sub    esp,0xc
c001e5c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5c7:	83 ec 04             	sub    esp,0x4
c001e5ca:	68 00 02 00 00       	push   0x200
c001e5cf:	68 28 3b 02 c0       	push   0xc0023b28
c001e5d4:	50                   	push   eax
c001e5d5:	e8 50 ae fe ff       	call   c000942a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e5da:	83 c4 10             	add    esp,0x10
c001e5dd:	ba 98 3b 02 c0       	mov    edx,0xc0023b98
c001e5e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5e6:	89 10                	mov    DWORD PTR [eax],edx
c001e5e8:	90                   	nop
c001e5e9:	83 c4 0c             	add    esp,0xc
c001e5ec:	c3                   	ret    
c001e5ed:	90                   	nop

c001e5ee <SATA::access(unsigned long long, int, void*, bool)>:
c001e5ee:	55                   	push   ebp
c001e5ef:	57                   	push   edi
c001e5f0:	56                   	push   esi
c001e5f1:	53                   	push   ebx
c001e5f2:	83 ec 2c             	sub    esp,0x2c
c001e5f5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e5f9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e5fd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e601:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e605:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e609:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e60d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e611:	fa                   	cli    
c001e612:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001e618:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001e61d:	7e 10                	jle    c001e62f <SATA::access(unsigned long long, int, void*, bool)+0x41>
c001e61f:	83 ec 0c             	sub    esp,0xc
c001e622:	68 38 3b 02 c0       	push   0xc0023b38
c001e627:	e8 ea 05 ff ff       	call   c000ec16 <KePanic(char const*)>
c001e62c:	83 c4 10             	add    esp,0x10
c001e62f:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001e635:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001e63b:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e641:	89 e8                	mov    eax,ebp
c001e643:	c1 e0 07             	shl    eax,0x7
c001e646:	01 d0                	add    eax,edx
c001e648:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e652:	8d 45 02             	lea    eax,[ebp+0x2]
c001e655:	51                   	push   ecx
c001e656:	c1 e0 07             	shl    eax,0x7
c001e659:	51                   	push   ecx
c001e65a:	01 d0                	add    eax,edx
c001e65c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001e660:	50                   	push   eax
c001e661:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001e667:	e8 ee ed ff ff       	call   c001d45a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e66c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e670:	83 c4 10             	add    esp,0x10
c001e673:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001e678:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e67c:	0f 84 a6 01 00 00    	je     c001e828 <SATA::access(unsigned long long, int, void*, bool)+0x23a>
c001e682:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e686:	c1 e0 09             	shl    eax,0x9
c001e689:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e68e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e692:	74 0e                	je     c001e6a2 <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c001e694:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001e69a:	89 c1                	mov    ecx,eax
c001e69c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001e6a0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e6a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e6a6:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001e6ac:	8d 45 02             	lea    eax,[ebp+0x2]
c001e6af:	c1 e0 07             	shl    eax,0x7
c001e6b2:	01 d0                	add    eax,edx
c001e6b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6b6:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e6bc:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e6c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6c6:	c1 e1 05             	shl    ecx,0x5
c001e6c9:	01 c8                	add    eax,ecx
c001e6cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e6cf:	83 e1 01             	and    ecx,0x1
c001e6d2:	89 ce                	mov    esi,ecx
c001e6d4:	8a 08                	mov    cl,BYTE PTR [eax]
c001e6d6:	c1 e6 06             	shl    esi,0x6
c001e6d9:	83 e1 bf             	and    ecx,0xffffffbf
c001e6dc:	09 f1                	or     ecx,esi
c001e6de:	88 08                	mov    BYTE PTR [eax],cl
c001e6e0:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e6e2:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001e6e8:	81 c9 05 00 01 00    	or     ecx,0x10005
c001e6ee:	89 08                	mov    DWORD PTR [eax],ecx
c001e6f0:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001e6f6:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001e6fc:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001e702:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001e705:	50                   	push   eax
c001e706:	68 90 00 00 00       	push   0x90
c001e70b:	6a 00                	push   0x0
c001e70d:	56                   	push   esi
c001e70e:	e8 dd 1d fe ff       	call   c00004f0 <memset>
c001e713:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001e719:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001e71f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e723:	83 c4 10             	add    esp,0x10
c001e726:	48                   	dec    eax
c001e727:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e72c:	89 c1                	mov    ecx,eax
c001e72e:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001e734:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e739:	09 c8                	or     eax,ecx
c001e73b:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001e741:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001e747:	83 c8 80             	or     eax,0xffffff80
c001e74a:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001e750:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e753:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e757:	25 00 7f 00 00       	and    eax,0x7f00
c001e75c:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e761:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e766:	66 89 06             	mov    WORD PTR [esi],ax
c001e769:	b0 35                	mov    al,0x35
c001e76b:	75 02                	jne    c001e76f <SATA::access(unsigned long long, int, void*, bool)+0x181>
c001e76d:	b0 25                	mov    al,0x25
c001e76f:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001e772:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e776:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001e77a:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001e77e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e782:	c1 e8 10             	shr    eax,0x10
c001e785:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001e788:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e78c:	c1 e8 18             	shr    eax,0x18
c001e78f:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001e792:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001e796:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001e799:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e79d:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001e7a0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e7a4:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001e7a8:	89 ee                	mov    esi,ebp
c001e7aa:	31 c0                	xor    eax,eax
c001e7ac:	c1 e6 07             	shl    esi,0x7
c001e7af:	01 d6                	add    esi,edx
c001e7b1:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001e7b7:	80 e1 88             	and    cl,0x88
c001e7ba:	74 0a                	je     c001e7c6 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001e7bc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e7c1:	74 0a                	je     c001e7cd <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001e7c3:	40                   	inc    eax
c001e7c4:	eb eb                	jmp    c001e7b1 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c001e7c6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e7cb:	75 0a                	jne    c001e7d7 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c001e7cd:	83 ec 0c             	sub    esp,0xc
c001e7d0:	68 71 3b 02 c0       	push   0xc0023b71
c001e7d5:	eb 34                	jmp    c001e80b <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c001e7d7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001e7db:	c1 e5 07             	shl    ebp,0x7
c001e7de:	b8 01 00 00 00       	mov    eax,0x1
c001e7e3:	01 ea                	add    edx,ebp
c001e7e5:	d3 e0                	shl    eax,cl
c001e7e7:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001e7ed:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001e7f3:	85 c8                	test   eax,ecx
c001e7f5:	74 25                	je     c001e81c <SATA::access(unsigned long long, int, void*, bool)+0x22e>
c001e7f7:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001e7fd:	0f ba e1 1e          	bt     ecx,0x1e
c001e801:	73 ea                	jae    c001e7ed <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001e803:	83 ec 0c             	sub    esp,0xc
c001e806:	68 7f 3b 02 c0       	push   0xc0023b7f
c001e80b:	e8 3e 87 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e810:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001e817:	83 c4 10             	add    esp,0x10
c001e81a:	eb 13                	jmp    c001e82f <SATA::access(unsigned long long, int, void*, bool)+0x241>
c001e81c:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001e822:	0f ba e0 1e          	bt     eax,0x1e
c001e826:	73 18                	jae    c001e840 <SATA::access(unsigned long long, int, void*, bool)+0x252>
c001e828:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001e82f:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c001e836:	75 01                	jne    c001e839 <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c001e838:	fb                   	sti    
c001e839:	b8 01 00 00 00       	mov    eax,0x1
c001e83e:	eb 2c                	jmp    c001e86c <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001e840:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e845:	75 10                	jne    c001e857 <SATA::access(unsigned long long, int, void*, bool)+0x269>
c001e847:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001e84d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001e851:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e857:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001e85e:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001e863:	85 c0                	test   eax,eax
c001e865:	75 03                	jne    c001e86a <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c001e867:	fb                   	sti    
c001e868:	eb 02                	jmp    c001e86c <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001e86a:	31 c0                	xor    eax,eax
c001e86c:	83 c4 2c             	add    esp,0x2c
c001e86f:	5b                   	pop    ebx
c001e870:	5e                   	pop    esi
c001e871:	5f                   	pop    edi
c001e872:	5d                   	pop    ebp
c001e873:	c3                   	ret    

c001e874 <SATA::read(unsigned long long, int, void*)>:
c001e874:	57                   	push   edi
c001e875:	b8 04 00 00 00       	mov    eax,0x4
c001e87a:	56                   	push   esi
c001e87b:	53                   	push   ebx
c001e87c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e880:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e884:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e888:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e88c:	8d 7a ff             	lea    edi,[edx-0x1]
c001e88f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001e895:	77 25                	ja     c001e8bc <SATA::read(unsigned long long, int, void*)+0x48>
c001e897:	85 f6                	test   esi,esi
c001e899:	b8 06 00 00 00       	mov    eax,0x6
c001e89e:	74 1c                	je     c001e8bc <SATA::read(unsigned long long, int, void*)+0x48>
c001e8a0:	50                   	push   eax
c001e8a1:	50                   	push   eax
c001e8a2:	6a 00                	push   0x0
c001e8a4:	56                   	push   esi
c001e8a5:	52                   	push   edx
c001e8a6:	53                   	push   ebx
c001e8a7:	51                   	push   ecx
c001e8a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e8ac:	e8 3d fd ff ff       	call   c001e5ee <SATA::access(unsigned long long, int, void*, bool)>
c001e8b1:	83 c4 20             	add    esp,0x20
c001e8b4:	85 c0                	test   eax,eax
c001e8b6:	0f 95 c0             	setne  al
c001e8b9:	0f b6 c0             	movzx  eax,al
c001e8bc:	5b                   	pop    ebx
c001e8bd:	5e                   	pop    esi
c001e8be:	5f                   	pop    edi
c001e8bf:	c3                   	ret    

c001e8c0 <SATA::write(unsigned long long, int, void*)>:
c001e8c0:	55                   	push   ebp
c001e8c1:	b8 04 00 00 00       	mov    eax,0x4
c001e8c6:	57                   	push   edi
c001e8c7:	56                   	push   esi
c001e8c8:	53                   	push   ebx
c001e8c9:	83 ec 0c             	sub    esp,0xc
c001e8cc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001e8d0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e8d4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e8d8:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e8dc:	8d 73 ff             	lea    esi,[ebx-0x1]
c001e8df:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e8e5:	77 3d                	ja     c001e924 <SATA::write(unsigned long long, int, void*)+0x64>
c001e8e7:	85 ed                	test   ebp,ebp
c001e8e9:	b8 06 00 00 00       	mov    eax,0x6
c001e8ee:	74 34                	je     c001e924 <SATA::write(unsigned long long, int, void*)+0x64>
c001e8f0:	c1 e3 09             	shl    ebx,0x9
c001e8f3:	01 eb                	add    ebx,ebp
c001e8f5:	50                   	push   eax
c001e8f6:	89 d6                	mov    esi,edx
c001e8f8:	50                   	push   eax
c001e8f9:	83 c6 01             	add    esi,0x1
c001e8fc:	6a 01                	push   0x1
c001e8fe:	89 cf                	mov    edi,ecx
c001e900:	55                   	push   ebp
c001e901:	83 d7 00             	adc    edi,0x0
c001e904:	6a 01                	push   0x1
c001e906:	81 c5 00 02 00 00    	add    ebp,0x200
c001e90c:	51                   	push   ecx
c001e90d:	52                   	push   edx
c001e90e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e912:	e8 d7 fc ff ff       	call   c001e5ee <SATA::access(unsigned long long, int, void*, bool)>
c001e917:	83 c4 20             	add    esp,0x20
c001e91a:	39 dd                	cmp    ebp,ebx
c001e91c:	89 f2                	mov    edx,esi
c001e91e:	89 f9                	mov    ecx,edi
c001e920:	75 d3                	jne    c001e8f5 <SATA::write(unsigned long long, int, void*)+0x35>
c001e922:	31 c0                	xor    eax,eax
c001e924:	83 c4 0c             	add    esp,0xc
c001e927:	5b                   	pop    ebx
c001e928:	5e                   	pop    esi
c001e929:	5f                   	pop    edi
c001e92a:	5d                   	pop    ebp
c001e92b:	c3                   	ret    

c001e92c <SATAPI::write(unsigned long long, int, void*)>:
c001e92c:	b8 03 00 00 00       	mov    eax,0x3
c001e931:	c3                   	ret    

c001e932 <SATAPI::close(int, int, void*)>:
c001e932:	83 ec 0c             	sub    esp,0xc
c001e935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e939:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e93f:	85 c0                	test   eax,eax
c001e941:	74 0c                	je     c001e94f <SATAPI::close(int, int, void*)+0x1d>
c001e943:	8b 10                	mov    edx,DWORD PTR [eax]
c001e945:	83 ec 0c             	sub    esp,0xc
c001e948:	50                   	push   eax
c001e949:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e94c:	83 c4 10             	add    esp,0x10
c001e94f:	31 c0                	xor    eax,eax
c001e951:	83 c4 0c             	add    esp,0xc
c001e954:	c3                   	ret    
c001e955:	90                   	nop

c001e956 <SATAPI::SATAPI()>:
c001e956:	83 ec 0c             	sub    esp,0xc
c001e959:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e95d:	83 ec 04             	sub    esp,0x4
c001e960:	68 00 08 00 00       	push   0x800
c001e965:	68 c8 3b 02 c0       	push   0xc0023bc8
c001e96a:	50                   	push   eax
c001e96b:	e8 ba aa fe ff       	call   c000942a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e970:	83 c4 10             	add    esp,0x10
c001e973:	ba bc 3c 02 c0       	mov    edx,0xc0023cbc
c001e978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e97c:	89 10                	mov    DWORD PTR [eax],edx
c001e97e:	90                   	nop
c001e97f:	83 c4 0c             	add    esp,0xc
c001e982:	c3                   	ret    
c001e983:	90                   	nop

c001e984 <SATAPI::diskRemoved()>:
c001e984:	c3                   	ret    
c001e985:	90                   	nop

c001e986 <SATAPI::diskInserted()>:
c001e986:	83 ec 18             	sub    esp,0x18
c001e989:	68 d4 3b 02 c0       	push   0xc0023bd4
c001e98e:	e8 bb 85 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e993:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e997:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e99e:	83 c4 1c             	add    esp,0x1c
c001e9a1:	c3                   	ret    

c001e9a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e9a2:	55                   	push   ebp
c001e9a3:	57                   	push   edi
c001e9a4:	56                   	push   esi
c001e9a5:	53                   	push   ebx
c001e9a6:	83 ec 34             	sub    esp,0x34
c001e9a9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e9ad:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e9b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e9b5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e9b9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e9bd:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e9c3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e9c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e9cd:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e9d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e9d7:	83 c0 02             	add    eax,0x2
c001e9da:	c1 e0 07             	shl    eax,0x7
c001e9dd:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e9e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e9e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e9e9:	c1 e0 07             	shl    eax,0x7
c001e9ec:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e9f0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e9f4:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e9fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ea02:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001ea08:	e8 4d ea ff ff       	call   c001d45a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ea0d:	83 c4 10             	add    esp,0x10
c001ea10:	89 c2                	mov    edx,eax
c001ea12:	b8 01 00 00 00       	mov    eax,0x1
c001ea17:	83 fa ff             	cmp    edx,0xffffffff
c001ea1a:	0f 84 5f 02 00 00    	je     c001ec7f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001ea20:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ea24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea28:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001ea2e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea30:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ea36:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ea3c:	89 d1                	mov    ecx,edx
c001ea3e:	c1 e1 05             	shl    ecx,0x5
c001ea41:	01 c8                	add    eax,ecx
c001ea43:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ea45:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001ea4b:	81 c9 25 00 01 00    	or     ecx,0x10025
c001ea51:	89 08                	mov    DWORD PTR [eax],ecx
c001ea53:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001ea59:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001ea5f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001ea65:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001ea68:	50                   	push   eax
c001ea69:	68 90 00 00 00       	push   0x90
c001ea6e:	6a 00                	push   0x0
c001ea70:	53                   	push   ebx
c001ea71:	e8 7a 1a fe ff       	call   c00004f0 <memset>
c001ea76:	8d 7b 40             	lea    edi,[ebx+0x40]
c001ea79:	b9 0c 00 00 00       	mov    ecx,0xc
c001ea7e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001ea82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ea84:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001ea8a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001ea8e:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001ea92:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001ea98:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ea9c:	48                   	dec    eax
c001ea9d:	25 ff ff 3f 00       	and    eax,0x3fffff
c001eaa2:	89 c1                	mov    ecx,eax
c001eaa4:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001eaaa:	25 00 00 c0 ff       	and    eax,0xffc00000
c001eaaf:	09 c8                	or     eax,ecx
c001eab1:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001eab7:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001eabd:	83 c8 80             	or     eax,0xffffff80
c001eac0:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001eac6:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001eac9:	25 00 7f 00 00       	and    eax,0x7f00
c001eace:	0d 27 80 ff ff       	or     eax,0xffff8027
c001ead3:	66 89 03             	mov    WORD PTR [ebx],ax
c001ead6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eada:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001eade:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eae2:	c1 e8 10             	shr    eax,0x10
c001eae5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001eae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eaec:	c1 e8 18             	shr    eax,0x18
c001eaef:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001eaf2:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001eaf6:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001eaf9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001eafd:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001eb00:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001eb04:	83 c4 10             	add    esp,0x10
c001eb07:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001eb0b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001eb0f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eb13:	31 c0                	xor    eax,eax
c001eb15:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001eb1b:	80 e1 88             	and    cl,0x88
c001eb1e:	74 0a                	je     c001eb2a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001eb20:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001eb25:	74 0a                	je     c001eb31 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001eb27:	40                   	inc    eax
c001eb28:	eb eb                	jmp    c001eb15 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001eb2a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001eb2f:	75 43                	jne    c001eb74 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001eb31:	83 ec 0c             	sub    esp,0xc
c001eb34:	68 ec 3b 02 c0       	push   0xc0023bec
c001eb39:	e8 10 84 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001eb3e:	58                   	pop    eax
c001eb3f:	5a                   	pop    edx
c001eb40:	68 01 3c 02 c0       	push   0xc0023c01
c001eb45:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001eb4b:	e8 36 28 ff ff       	call   c0011386 <VgaText::puts(char const*)>
c001eb50:	59                   	pop    ecx
c001eb51:	5b                   	pop    ebx
c001eb52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001eb56:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001eb5c:	e8 93 e9 ff ff       	call   c001d4f4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001eb61:	5e                   	pop    esi
c001eb62:	5f                   	pop    edi
c001eb63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001eb67:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001eb6d:	e8 62 e9 ff ff       	call   c001d4d4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001eb72:	eb 48                	jmp    c001ebbc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001eb74:	b8 01 00 00 00       	mov    eax,0x1
c001eb79:	88 d1                	mov    cl,dl
c001eb7b:	d3 e0                	shl    eax,cl
c001eb7d:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001eb82:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001eb88:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eb8c:	89 c7                	mov    edi,eax
c001eb8e:	c1 e3 07             	shl    ebx,0x7
c001eb91:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001eb95:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001eb9b:	85 c7                	test   edi,eax
c001eb9d:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001eba3:	0f 84 a3 00 00 00    	je     c001ec4c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001eba9:	0f ba e0 1e          	bt     eax,0x1e
c001ebad:	73 1a                	jae    c001ebc9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001ebaf:	83 ec 0c             	sub    esp,0xc
c001ebb2:	68 13 3c 02 c0       	push   0xc0023c13
c001ebb7:	e8 92 83 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ebbc:	83 c4 10             	add    esp,0x10
c001ebbf:	b8 01 00 00 00       	mov    eax,0x1
c001ebc4:	e9 b6 00 00 00       	jmp    c001ec7f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001ebc9:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001ebcf:	83 f8 0d             	cmp    eax,0xd
c001ebd2:	77 0a                	ja     c001ebde <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001ebd4:	83 ec 0c             	sub    esp,0xc
c001ebd7:	68 c8 00 00 00       	push   0xc8
c001ebdc:	eb 28                	jmp    c001ec06 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001ebde:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001ebe4:	83 f8 0d             	cmp    eax,0xd
c001ebe7:	77 0a                	ja     c001ebf3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001ebe9:	83 ec 0c             	sub    esp,0xc
c001ebec:	68 58 02 00 00       	push   0x258
c001ebf1:	eb 13                	jmp    c001ec06 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001ebf3:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001ebf9:	83 f8 06             	cmp    eax,0x6
c001ebfc:	77 10                	ja     c001ec0e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001ebfe:	83 ec 0c             	sub    esp,0xc
c001ec01:	68 dc 05 00 00       	push   0x5dc
c001ec06:	e8 c9 69 ff ff       	call   c00155d4 <milliTenthSleep(unsigned int)>
c001ec0b:	83 c4 10             	add    esp,0x10
c001ec0e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001ec12:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001ec15:	75 06                	jne    c001ec1d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001ec17:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001ec1b:	74 15                	je     c001ec32 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001ec1d:	83 fe 06             	cmp    esi,0x6
c001ec20:	77 10                	ja     c001ec32 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001ec22:	83 ec 0c             	sub    esp,0xc
c001ec25:	68 c4 09 00 00       	push   0x9c4
c001ec2a:	e8 a5 69 ff ff       	call   c00155d4 <milliTenthSleep(unsigned int)>
c001ec2f:	83 c4 10             	add    esp,0x10
c001ec32:	46                   	inc    esi
c001ec33:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001ec39:	0f 85 56 ff ff ff    	jne    c001eb95 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001ec3f:	83 ec 0c             	sub    esp,0xc
c001ec42:	68 26 3c 02 c0       	push   0xc0023c26
c001ec47:	e9 6b ff ff ff       	jmp    c001ebb7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001ec4c:	0f ba e0 1e          	bt     eax,0x1e
c001ec50:	73 0d                	jae    c001ec5f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001ec52:	83 ec 0c             	sub    esp,0xc
c001ec55:	68 3a 3c 02 c0       	push   0xc0023c3a
c001ec5a:	e9 58 ff ff ff       	jmp    c001ebb7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001ec5f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001ec64:	74 17                	je     c001ec7d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001ec66:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001ec6b:	74 10                	je     c001ec7d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001ec6d:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001ec73:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001ec77:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001ec7b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ec7d:	31 c0                	xor    eax,eax
c001ec7f:	83 c4 2c             	add    esp,0x2c
c001ec82:	5b                   	pop    ebx
c001ec83:	5e                   	pop    esi
c001ec84:	5f                   	pop    edi
c001ec85:	5d                   	pop    ebp
c001ec86:	c3                   	ret    
c001ec87:	90                   	nop

c001ec88 <SATAPI::eject()>:
c001ec88:	57                   	push   edi
c001ec89:	b9 03 00 00 00       	mov    ecx,0x3
c001ec8e:	83 ec 18             	sub    esp,0x18
c001ec91:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ec95:	fc                   	cld    
c001ec96:	31 c0                	xor    eax,eax
c001ec98:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ec9a:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ec9f:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001eca4:	50                   	push   eax
c001eca5:	6a 00                	push   0x0
c001eca7:	6a 00                	push   0x0
c001eca9:	6a 00                	push   0x0
c001ecab:	6a 00                	push   0x0
c001ecad:	6a 02                	push   0x2
c001ecaf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ecb3:	50                   	push   eax
c001ecb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ecb8:	e8 e5 fc ff ff       	call   c001e9a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ecbd:	83 c4 38             	add    esp,0x38
c001ecc0:	31 c0                	xor    eax,eax
c001ecc2:	5f                   	pop    edi
c001ecc3:	c3                   	ret    

c001ecc4 <SATAPI::detectMedia()>:
c001ecc4:	53                   	push   ebx
c001ecc5:	83 ec 14             	sub    esp,0x14
c001ecc8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001eccc:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ecd2:	e8 65 bd fe ff       	call   c000aa3c <VCache::writeWriteBuffer()>
c001ecd7:	59                   	pop    ecx
c001ecd8:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ecde:	e8 49 bd fe ff       	call   c000aa2c <VCache::invalidateReadBuffer()>
c001ece3:	c7 04 24 4f 3c 02 c0 	mov    DWORD PTR [esp],0xc0023c4f
c001ecea:	e8 5f 82 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ecef:	83 c4 10             	add    esp,0x10
c001ecf2:	31 c0                	xor    eax,eax
c001ecf4:	8b 14 85 80 97 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6880]
c001ecfb:	85 d2                	test   edx,edx
c001ecfd:	74 0f                	je     c001ed0e <SATAPI::detectMedia()+0x4a>
c001ecff:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001ed05:	75 07                	jne    c001ed0e <SATAPI::detectMedia()+0x4a>
c001ed07:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001ed0e:	40                   	inc    eax
c001ed0f:	83 f8 1a             	cmp    eax,0x1a
c001ed12:	75 e0                	jne    c001ecf4 <SATAPI::detectMedia()+0x30>
c001ed14:	83 c4 08             	add    esp,0x8
c001ed17:	5b                   	pop    ebx
c001ed18:	c3                   	ret    
c001ed19:	90                   	nop

c001ed1a <SATAPI::open(int, int, void*)>:
c001ed1a:	56                   	push   esi
c001ed1b:	53                   	push   ebx
c001ed1c:	51                   	push   ecx
c001ed1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ed21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ed25:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ed2f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ed35:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ed39:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ed43:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ed4d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ed54:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ed5a:	e8 b1 00 ff ff       	call   c000ee10 <Phys::allocatePage()>
c001ed5f:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001ed65:	89 c6                	mov    esi,eax
c001ed67:	e8 a4 00 ff ff       	call   c000ee10 <Phys::allocatePage()>
c001ed6c:	81 c6 00 10 00 00    	add    esi,0x1000
c001ed72:	39 c6                	cmp    esi,eax
c001ed74:	74 10                	je     c001ed86 <SATAPI::open(int, int, void*)+0x6c>
c001ed76:	83 ec 0c             	sub    esp,0xc
c001ed79:	68 64 3c 02 c0       	push   0xc0023c64
c001ed7e:	e8 93 fe fe ff       	call   c000ec16 <KePanic(char const*)>
c001ed83:	83 c4 10             	add    esp,0x10
c001ed86:	83 ec 0c             	sub    esp,0xc
c001ed89:	6a 02                	push   0x2
c001ed8b:	e8 c3 31 ff ff       	call   c0011f53 <Virt::allocateKernelVirtualPages(int)>
c001ed90:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001ed96:	6a 03                	push   0x3
c001ed98:	50                   	push   eax
c001ed99:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001ed9f:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c001eda5:	e8 82 38 ff ff       	call   c001262c <VAS::mapPage(unsigned long, unsigned long, int)>
c001edaa:	83 c4 14             	add    esp,0x14
c001edad:	68 78 01 00 00       	push   0x178
c001edb2:	e8 19 fb fe ff       	call   c000e8d0 <malloc>
c001edb7:	83 c4 0c             	add    esp,0xc
c001edba:	6a 00                	push   0x0
c001edbc:	68 ff ff ff 7f       	push   0x7fffffff
c001edc1:	6a 00                	push   0x0
c001edc3:	6a 00                	push   0x0
c001edc5:	53                   	push   ebx
c001edc6:	68 7a 3c 02 c0       	push   0xc0023c7a
c001edcb:	89 c6                	mov    esi,eax
c001edcd:	50                   	push   eax
c001edce:	e8 c1 b0 fe ff       	call   c0009e94 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001edd3:	83 c4 14             	add    esp,0x14
c001edd6:	56                   	push   esi
c001edd7:	e8 78 b1 fe ff       	call   c0009f54 <LogicalDisk::assignDriveLetter()>
c001eddc:	5a                   	pop    edx
c001eddd:	59                   	pop    ecx
c001edde:	0f be c0             	movsx  eax,al
c001ede1:	50                   	push   eax
c001ede2:	68 c0 3a 02 c0       	push   0xc0023ac0
c001ede7:	e8 62 81 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001edec:	58                   	pop    eax
c001eded:	5a                   	pop    edx
c001edee:	56                   	push   esi
c001edef:	53                   	push   ebx
c001edf0:	e8 51 a2 fe ff       	call   c0009046 <Device::addChild(Device*)>
c001edf5:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001edfb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001edfe:	e8 8f a6 fe ff       	call   c0009492 <PhysicalDisk::startCache()>
c001ee03:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001ee0a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ee0d:	e8 b2 fe ff ff       	call   c001ecc4 <SATAPI::detectMedia()>
c001ee12:	83 c4 14             	add    esp,0x14
c001ee15:	31 c0                	xor    eax,eax
c001ee17:	5b                   	pop    ebx
c001ee18:	5e                   	pop    esi
c001ee19:	c3                   	ret    

c001ee1a <SATAPI::read(unsigned long long, int, void*)>:
c001ee1a:	55                   	push   ebp
c001ee1b:	57                   	push   edi
c001ee1c:	56                   	push   esi
c001ee1d:	53                   	push   ebx
c001ee1e:	83 ec 3c             	sub    esp,0x3c
c001ee21:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001ee25:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ee29:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001ee2d:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001ee31:	83 fd 04             	cmp    ebp,0x4
c001ee34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ee38:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ee3c:	7e 10                	jle    c001ee4e <SATAPI::read(unsigned long long, int, void*)+0x34>
c001ee3e:	83 ec 0c             	sub    esp,0xc
c001ee41:	68 88 3c 02 c0       	push   0xc0023c88
c001ee46:	e8 cb fd fe ff       	call   c000ec16 <KePanic(char const*)>
c001ee4b:	83 c4 10             	add    esp,0x10
c001ee4e:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ee54:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001ee5a:	51                   	push   ecx
c001ee5b:	50                   	push   eax
c001ee5c:	83 c0 02             	add    eax,0x2
c001ee5f:	c1 e0 07             	shl    eax,0x7
c001ee62:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001ee68:	50                   	push   eax
c001ee69:	52                   	push   edx
c001ee6a:	e8 af e6 ff ff       	call   c001d51e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ee6f:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001ee73:	b9 03 00 00 00       	mov    ecx,0x3
c001ee78:	fc                   	cld    
c001ee79:	31 c0                	xor    eax,eax
c001ee7b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ee7d:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001ee82:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001ee87:	83 c4 0c             	add    esp,0xc
c001ee8a:	6a 00                	push   0x0
c001ee8c:	6a 00                	push   0x0
c001ee8e:	6a 00                	push   0x0
c001ee90:	6a 00                	push   0x0
c001ee92:	6a 02                	push   0x2
c001ee94:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ee98:	50                   	push   eax
c001ee99:	53                   	push   ebx
c001ee9a:	e8 03 fb ff ff       	call   c001e9a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ee9f:	83 c4 20             	add    esp,0x20
c001eea2:	85 c0                	test   eax,eax
c001eea4:	89 c6                	mov    esi,eax
c001eea6:	75 46                	jne    c001eeee <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001eea8:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001eeac:	b9 03 00 00 00       	mov    ecx,0x3
c001eeb1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001eeb3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eeb7:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001eebc:	0f c8                	bswap  eax
c001eebe:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001eec2:	89 e8                	mov    eax,ebp
c001eec4:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001eec8:	50                   	push   eax
c001eec9:	55                   	push   ebp
c001eeca:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001eece:	c1 e5 0b             	shl    ebp,0xb
c001eed1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001eed5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001eed9:	55                   	push   ebp
c001eeda:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001eede:	50                   	push   eax
c001eedf:	53                   	push   ebx
c001eee0:	e8 bd fa ff ff       	call   c001e9a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001eee5:	83 c4 20             	add    esp,0x20
c001eee8:	85 c0                	test   eax,eax
c001eeea:	89 c6                	mov    esi,eax
c001eeec:	74 0c                	je     c001eefa <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001eeee:	83 ec 0c             	sub    esp,0xc
c001eef1:	53                   	push   ebx
c001eef2:	e8 cd fd ff ff       	call   c001ecc4 <SATAPI::detectMedia()>
c001eef7:	83 c4 10             	add    esp,0x10
c001eefa:	83 c4 3c             	add    esp,0x3c
c001eefd:	89 f0                	mov    eax,esi
c001eeff:	5b                   	pop    ebx
c001ef00:	5e                   	pop    esi
c001ef01:	5f                   	pop    edi
c001ef02:	5d                   	pop    ebp
c001ef03:	c3                   	ret    

c001ef04 <IOAPIC::close(int, int, void*)>:
c001ef04:	b8 00 00 00 00       	mov    eax,0x0
c001ef09:	c3                   	ret    

c001ef0a <apicGetBase()>:
c001ef0a:	55                   	push   ebp
c001ef0b:	89 e5                	mov    ebp,esp
c001ef0d:	83 ec 08             	sub    esp,0x8
c001ef10:	83 ec 0c             	sub    esp,0xc
c001ef13:	68 ec 3c 02 c0       	push   0xc0023cec
c001ef18:	e8 f9 fc fe ff       	call   c000ec16 <KePanic(char const*)>
c001ef1d:	83 c4 10             	add    esp,0x10
c001ef20:	b8 00 00 00 00       	mov    eax,0x0
c001ef25:	c9                   	leave  
c001ef26:	c3                   	ret    
c001ef27:	90                   	nop

c001ef28 <IOAPIC::IOAPIC()>:
c001ef28:	83 ec 0c             	sub    esp,0xc
c001ef2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef2f:	83 ec 08             	sub    esp,0x8
c001ef32:	68 fb 3c 02 c0       	push   0xc0023cfb
c001ef37:	50                   	push   eax
c001ef38:	e8 6b a2 fe ff       	call   c00091a8 <Device::Device(char const*)>
c001ef3d:	83 c4 10             	add    esp,0x10
c001ef40:	ba 1c 3d 02 c0       	mov    edx,0xc0023d1c
c001ef45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef49:	89 10                	mov    DWORD PTR [eax],edx
c001ef4b:	90                   	nop
c001ef4c:	83 c4 0c             	add    esp,0xc
c001ef4f:	c3                   	ret    

c001ef50 <apicOpen()>:
c001ef50:	55                   	push   ebp
c001ef51:	89 e5                	mov    ebp,esp
c001ef53:	53                   	push   ebx
c001ef54:	83 ec 34             	sub    esp,0x34
c001ef57:	83 ec 0c             	sub    esp,0xc
c001ef5a:	68 03 3d 02 c0       	push   0xc0023d03
c001ef5f:	e8 ea 7f fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ef64:	83 c4 10             	add    esp,0x10
c001ef67:	a0 20 d1 02 c0       	mov    al,ds:0xc002d120
c001ef6c:	83 f0 01             	xor    eax,0x1
c001ef6f:	0f b6 c0             	movzx  eax,al
c001ef72:	85 c0                	test   eax,eax
c001ef74:	0f 84 a3 00 00 00    	je     c001f01d <apicOpen()+0xcd>
c001ef7a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001ef7e:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c001ef83:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ef87:	0f b6 c0             	movzx  eax,al
c001ef8a:	39 c2                	cmp    edx,eax
c001ef8c:	0f 83 84 00 00 00    	jae    c001f016 <apicOpen()+0xc6>
c001ef92:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001ef99:	83 ec 0c             	sub    esp,0xc
c001ef9c:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001ef9f:	e8 2c f9 fe ff       	call   c000e8d0 <malloc>
c001efa4:	83 c4 10             	add    esp,0x10
c001efa7:	89 c3                	mov    ebx,eax
c001efa9:	83 ec 0c             	sub    esp,0xc
c001efac:	53                   	push   ebx
c001efad:	e8 76 ff ff ff       	call   c001ef28 <IOAPIC::IOAPIC()>
c001efb2:	83 c4 10             	add    esp,0x10
c001efb5:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001efb8:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001efbc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001efbf:	89 14 85 00 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f00],edx
c001efc6:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c001efcb:	83 c0 01             	add    eax,0x1
c001efce:	a3 e0 d0 02 c0       	mov    ds:0xc002d0e0,eax
c001efd3:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c001efd8:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001efde:	83 ec 08             	sub    esp,0x8
c001efe1:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001efe4:	50                   	push   eax
c001efe5:	e8 5c a0 fe ff       	call   c0009046 <Device::addChild(Device*)>
c001efea:	83 c4 10             	add    esp,0x10
c001efed:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001eff0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eff2:	83 c0 08             	add    eax,0x8
c001eff5:	8b 00                	mov    eax,DWORD PTR [eax]
c001eff7:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001effb:	6a 00                	push   0x0
c001effd:	6a 00                	push   0x0
c001efff:	52                   	push   edx
c001f000:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001f003:	ff d0                	call   eax
c001f005:	83 c4 10             	add    esp,0x10
c001f008:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001f00b:	83 c0 01             	add    eax,0x1
c001f00e:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001f011:	e9 68 ff ff ff       	jmp    c001ef7e <apicOpen()+0x2e>
c001f016:	c6 05 20 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d120,0x1
c001f01d:	e8 e8 fe ff ff       	call   c001ef0a <apicGetBase()>
c001f022:	05 f0 00 00 00       	add    eax,0xf0
c001f027:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f02a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001f02d:	8b 00                	mov    eax,DWORD PTR [eax]
c001f02f:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001f032:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001f039:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001f040:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001f043:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001f046:	89 10                	mov    DWORD PTR [eax],edx
c001f048:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001f04f:	a1 2c 9a 02 c0       	mov    eax,ds:0xc0029a2c
c001f054:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001f057:	7d 7c                	jge    c001f0d5 <apicOpen()+0x185>
c001f059:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f05c:	8b 04 85 40 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65c0]
c001f063:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001f066:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f069:	8b 04 85 40 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65c0]
c001f070:	c1 e8 08             	shr    eax,0x8
c001f073:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001f077:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f07a:	8b 04 85 40 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65c0]
c001f081:	c1 e8 18             	shr    eax,0x18
c001f084:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001f087:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001f08b:	3d ff 00 00 00       	cmp    eax,0xff
c001f090:	75 3a                	jne    c001f0cc <apicOpen()+0x17c>
c001f092:	e8 73 fe ff ff       	call   c001ef0a <apicGetBase()>
c001f097:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001f09b:	83 fa 01             	cmp    edx,0x1
c001f09e:	75 07                	jne    c001f0a7 <apicOpen()+0x157>
c001f0a0:	ba 60 03 00 00       	mov    edx,0x360
c001f0a5:	eb 05                	jmp    c001f0ac <apicOpen()+0x15c>
c001f0a7:	ba 50 03 00 00       	mov    edx,0x350
c001f0ac:	01 d0                	add    eax,edx
c001f0ae:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001f0b1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f0b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f0b6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001f0b9:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001f0c0:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001f0c4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f0c7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001f0ca:	89 10                	mov    DWORD PTR [eax],edx
c001f0cc:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001f0d0:	e9 7a ff ff ff       	jmp    c001f04f <apicOpen()+0xff>
c001f0d5:	90                   	nop
c001f0d6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001f0d9:	c9                   	leave  
c001f0da:	c3                   	ret    
c001f0db:	90                   	nop

c001f0dc <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001f0dc:	55                   	push   ebp
c001f0dd:	89 e5                	mov    ebp,esp
c001f0df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f0e2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f0e8:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001f0eb:	72 1d                	jb     c001f10a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001f0ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f0f0:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001f0f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f0f9:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001f0ff:	01 d0                	add    eax,edx
c001f101:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001f104:	73 04                	jae    c001f10a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001f106:	b0 01                	mov    al,0x1
c001f108:	eb 02                	jmp    c001f10c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001f10a:	b0 00                	mov    al,0x0
c001f10c:	5d                   	pop    ebp
c001f10d:	c3                   	ret    

c001f10e <IOAPIC::read(int)>:
c001f10e:	55                   	push   ebp
c001f10f:	89 e5                	mov    ebp,esp
c001f111:	83 ec 10             	sub    esp,0x10
c001f114:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f117:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f11d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001f120:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f123:	0f b6 d0             	movzx  edx,al
c001f126:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f129:	89 10                	mov    DWORD PTR [eax],edx
c001f12b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f12e:	83 c0 10             	add    eax,0x10
c001f131:	8b 00                	mov    eax,DWORD PTR [eax]
c001f133:	c9                   	leave  
c001f134:	c3                   	ret    
c001f135:	90                   	nop

c001f136 <IOAPIC::open(int, int, void*)>:
c001f136:	55                   	push   ebp
c001f137:	89 e5                	mov    ebp,esp
c001f139:	57                   	push   edi
c001f13a:	56                   	push   esi
c001f13b:	53                   	push   ebx
c001f13c:	83 ec 04             	sub    esp,0x4
c001f13f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f142:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001f145:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f14b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f14e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f154:	8b 14 85 20 9b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd64e0]
c001f15b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f15e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f164:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f167:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f16d:	8b 14 85 a0 9b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6460]
c001f174:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f177:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001f17d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f180:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001f186:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f189:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001f18f:	0f b6 f0             	movzx  esi,al
c001f192:	89 d0                	mov    eax,edx
c001f194:	ba 00 00 00 00       	mov    edx,0x0
c001f199:	89 c7                	mov    edi,eax
c001f19b:	83 e7 ff             	and    edi,0xffffffff
c001f19e:	89 f9                	mov    ecx,edi
c001f1a0:	0f b6 da             	movzx  ebx,dl
c001f1a3:	89 c8                	mov    eax,ecx
c001f1a5:	89 da                	mov    edx,ebx
c001f1a7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001f1aa:	8d 5e 08             	lea    ebx,[esi+0x8]
c001f1ad:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001f1b1:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001f1b5:	83 e0 00             	and    eax,0x0
c001f1b8:	09 d0                	or     eax,edx
c001f1ba:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001f1be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f1c1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001f1c7:	8d 50 01             	lea    edx,[eax+0x1]
c001f1ca:	88 d1                	mov    cl,dl
c001f1cc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001f1cf:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001f1d5:	0f b6 d0             	movzx  edx,al
c001f1d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f1db:	83 c2 08             	add    edx,0x8
c001f1de:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001f1e2:	0f b6 c9             	movzx  ecx,cl
c001f1e5:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001f1eb:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001f1ef:	6a 01                	push   0x1
c001f1f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f1f4:	e8 15 ff ff ff       	call   c001f10e <IOAPIC::read(int)>
c001f1f9:	83 c4 08             	add    esp,0x8
c001f1fc:	c1 f8 10             	sar    eax,0x10
c001f1ff:	0f b6 c0             	movzx  eax,al
c001f202:	8d 50 01             	lea    edx,[eax+0x1]
c001f205:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f208:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001f20e:	b8 00 00 00 00       	mov    eax,0x0
c001f213:	8d 65 f4             	lea    esp,[ebp-0xc]
c001f216:	5b                   	pop    ebx
c001f217:	5e                   	pop    esi
c001f218:	5f                   	pop    edi
c001f219:	5d                   	pop    ebp
c001f21a:	c3                   	ret    
c001f21b:	90                   	nop

c001f21c <IOAPIC::write(int, int)>:
c001f21c:	55                   	push   ebp
c001f21d:	89 e5                	mov    ebp,esp
c001f21f:	83 ec 10             	sub    esp,0x10
c001f222:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f225:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f22b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001f22e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f231:	0f b6 d0             	movzx  edx,al
c001f234:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f237:	89 10                	mov    DWORD PTR [eax],edx
c001f239:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f23c:	8d 50 10             	lea    edx,[eax+0x10]
c001f23f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001f242:	89 02                	mov    DWORD PTR [edx],eax
c001f244:	90                   	nop
c001f245:	c9                   	leave  
c001f246:	c3                   	ret    
c001f247:	90                   	nop

c001f248 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001f248:	55                   	push   ebp
c001f249:	89 e5                	mov    ebp,esp
c001f24b:	53                   	push   ebx
c001f24c:	83 ec 2c             	sub    esp,0x2c
c001f24f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f252:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001f255:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001f258:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001f25b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001f25e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001f261:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001f264:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001f267:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001f26a:	88 d8                	mov    al,bl
c001f26c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001f26f:	88 c8                	mov    al,cl
c001f271:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001f274:	88 d0                	mov    al,dl
c001f276:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001f279:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001f27d:	83 c0 08             	add    eax,0x8
c001f280:	d1 e0                	shl    eax,1
c001f282:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001f285:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001f289:	83 c0 08             	add    eax,0x8
c001f28c:	d1 e0                	shl    eax,1
c001f28e:	83 c0 01             	add    eax,0x1
c001f291:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001f294:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f297:	50                   	push   eax
c001f298:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f29b:	e8 6e fe ff ff       	call   c001f10e <IOAPIC::read(int)>
c001f2a0:	83 c4 08             	add    esp,0x8
c001f2a3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f2a6:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001f2ad:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f2b0:	c1 e0 18             	shl    eax,0x18
c001f2b3:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001f2b6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001f2b9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f2bc:	52                   	push   edx
c001f2bd:	50                   	push   eax
c001f2be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f2c1:	e8 56 ff ff ff       	call   c001f21c <IOAPIC::write(int, int)>
c001f2c6:	83 c4 0c             	add    esp,0xc
c001f2c9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f2cc:	50                   	push   eax
c001f2cd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f2d0:	e8 39 fe ff ff       	call   c001f10e <IOAPIC::read(int)>
c001f2d5:	83 c4 08             	add    esp,0x8
c001f2d8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001f2db:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001f2e2:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001f2e9:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001f2f0:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001f2f4:	85 c0                	test   eax,eax
c001f2f6:	74 09                	je     c001f301 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001f2f8:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001f2ff:	eb 07                	jmp    c001f308 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001f301:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001f308:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001f30c:	85 c0                	test   eax,eax
c001f30e:	74 09                	je     c001f319 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001f310:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001f317:	eb 07                	jmp    c001f320 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001f319:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001f320:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001f327:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001f32b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001f32e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001f331:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f334:	52                   	push   edx
c001f335:	50                   	push   eax
c001f336:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f339:	e8 de fe ff ff       	call   c001f21c <IOAPIC::write(int, int)>
c001f33e:	83 c4 0c             	add    esp,0xc
c001f341:	90                   	nop
c001f342:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001f345:	c9                   	leave  
c001f346:	c3                   	ret    
c001f347:	90                   	nop

c001f348 <APICTimer::close(int, int, void*)>:
c001f348:	b8 00 00 00 00       	mov    eax,0x0
c001f34d:	c3                   	ret    
c001f34e:	66 90                	xchg   ax,ax

c001f350 <apicTimerHandler(regs*, void*)>:
c001f350:	83 ec 0c             	sub    esp,0xc
c001f353:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f357:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f359:	b8 10 27 00 00       	mov    eax,0x2710
c001f35e:	ba 00 00 00 00       	mov    edx,0x0
c001f363:	f7 f1                	div    ecx
c001f365:	83 ec 0c             	sub    esp,0xc
c001f368:	50                   	push   eax
c001f369:	e8 e2 b3 fe ff       	call   c000a750 <timerHandler(unsigned int)>
c001f36e:	83 c4 10             	add    esp,0x10
c001f371:	90                   	nop
c001f372:	83 c4 0c             	add    esp,0xc
c001f375:	c3                   	ret    
c001f376:	66 90                	xchg   ax,ax

c001f378 <APICTimer::open(int, int, void*)>:
c001f378:	83 ec 0c             	sub    esp,0xc
c001f37b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f37f:	8b 00                	mov    eax,DWORD PTR [eax]
c001f381:	83 c0 24             	add    eax,0x24
c001f384:	8b 00                	mov    eax,DWORD PTR [eax]
c001f386:	83 ec 08             	sub    esp,0x8
c001f389:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f38d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f391:	ff d0                	call   eax
c001f393:	83 c4 10             	add    esp,0x10
c001f396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f39a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f39e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f3a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f3ac:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001f3b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f3b6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f3bc:	83 ec 0c             	sub    esp,0xc
c001f3bf:	51                   	push   ecx
c001f3c0:	6a 01                	push   0x1
c001f3c2:	68 50 f3 01 c0       	push   0xc001f350
c001f3c7:	52                   	push   edx
c001f3c8:	50                   	push   eax
c001f3c9:	e8 24 9c fe ff       	call   c0008ff2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f3ce:	83 c4 20             	add    esp,0x20
c001f3d1:	89 c2                	mov    edx,eax
c001f3d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3d7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f3dd:	b8 00 00 00 00       	mov    eax,0x0
c001f3e2:	83 c4 0c             	add    esp,0xc
c001f3e5:	c3                   	ret    
c001f3e6:	66 90                	xchg   ax,ax

c001f3e8 <APICTimer::write(int)>:
c001f3e8:	83 ec 0c             	sub    esp,0xc
c001f3eb:	83 ec 0c             	sub    esp,0xc
c001f3ee:	68 40 3d 02 c0       	push   0xc0023d40
c001f3f3:	e8 1e f8 fe ff       	call   c000ec16 <KePanic(char const*)>
c001f3f8:	83 c4 10             	add    esp,0x10
c001f3fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f403:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f409:	90                   	nop
c001f40a:	83 c4 0c             	add    esp,0xc
c001f40d:	c3                   	ret    
c001f40e:	66 90                	xchg   ax,ax

c001f410 <APICTimer::APICTimer()>:
c001f410:	83 ec 0c             	sub    esp,0xc
c001f413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f417:	83 ec 08             	sub    esp,0x8
c001f41a:	68 50 3d 02 c0       	push   0xc0023d50
c001f41f:	50                   	push   eax
c001f420:	e8 5f b2 fe ff       	call   c000a684 <Timer::Timer(char const*)>
c001f425:	83 c4 10             	add    esp,0x10
c001f428:	ba 64 3d 02 c0       	mov    edx,0xc0023d64
c001f42d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f431:	89 10                	mov    DWORD PTR [eax],edx
c001f433:	90                   	nop
c001f434:	83 c4 0c             	add    esp,0xc
c001f437:	c3                   	ret    

c001f438 <PIT::write(int)>:
c001f438:	83 ec 10             	sub    esp,0x10
c001f43b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f43f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f443:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f449:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f44d:	a3 24 d1 02 c0       	mov    ds:0xc002d124,eax
c001f452:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001f457:	89 c2                	mov    edx,eax
c001f459:	c1 fa 1f             	sar    edx,0x1f
c001f45c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001f460:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f464:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001f46b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001f470:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001f474:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001f479:	ee                   	out    dx,al
c001f47a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f47e:	0f b6 c0             	movzx  eax,al
c001f481:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001f488:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001f48c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001f490:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001f495:	ee                   	out    dx,al
c001f496:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f49a:	c1 f8 08             	sar    eax,0x8
c001f49d:	0f b6 c0             	movzx  eax,al
c001f4a0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001f4a7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f4ab:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f4af:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001f4b4:	ee                   	out    dx,al
c001f4b5:	90                   	nop
c001f4b6:	83 c4 10             	add    esp,0x10
c001f4b9:	c3                   	ret    
c001f4ba:	66 90                	xchg   ax,ax

c001f4bc <pitHandler(regs*, void*)>:
c001f4bc:	83 ec 0c             	sub    esp,0xc
c001f4bf:	8b 0d 24 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d124
c001f4c5:	b8 10 27 00 00       	mov    eax,0x2710
c001f4ca:	89 c2                	mov    edx,eax
c001f4cc:	c1 fa 1f             	sar    edx,0x1f
c001f4cf:	f7 f9                	idiv   ecx
c001f4d1:	83 ec 0c             	sub    esp,0xc
c001f4d4:	50                   	push   eax
c001f4d5:	e8 76 b2 fe ff       	call   c000a750 <timerHandler(unsigned int)>
c001f4da:	83 c4 10             	add    esp,0x10
c001f4dd:	90                   	nop
c001f4de:	83 c4 0c             	add    esp,0xc
c001f4e1:	c3                   	ret    
c001f4e2:	66 90                	xchg   ax,ax

c001f4e4 <PIT::open(int, int, void*)>:
c001f4e4:	83 ec 0c             	sub    esp,0xc
c001f4e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4eb:	8b 00                	mov    eax,DWORD PTR [eax]
c001f4ed:	83 c0 24             	add    eax,0x24
c001f4f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f4f2:	83 ec 08             	sub    esp,0x8
c001f4f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4fd:	ff d0                	call   eax
c001f4ff:	83 c4 10             	add    esp,0x10
c001f502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f506:	83 ec 0c             	sub    esp,0xc
c001f509:	6a 00                	push   0x0
c001f50b:	6a 01                	push   0x1
c001f50d:	68 bc f4 01 c0       	push   0xc001f4bc
c001f512:	6a 00                	push   0x0
c001f514:	50                   	push   eax
c001f515:	e8 d8 9a fe ff       	call   c0008ff2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f51a:	83 c4 20             	add    esp,0x20
c001f51d:	89 c2                	mov    edx,eax
c001f51f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f523:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f529:	b8 00 00 00 00       	mov    eax,0x0
c001f52e:	83 c4 0c             	add    esp,0xc
c001f531:	c3                   	ret    
c001f532:	66 90                	xchg   ax,ax

c001f534 <PIT::close(int, int, void*)>:
c001f534:	83 ec 0c             	sub    esp,0xc
c001f537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f53b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f549:	6a 01                	push   0x1
c001f54b:	68 bc f4 01 c0       	push   0xc001f4bc
c001f550:	6a 00                	push   0x0
c001f552:	50                   	push   eax
c001f553:	e8 d0 9a fe ff       	call   c0009028 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f558:	83 c4 10             	add    esp,0x10
c001f55b:	b8 00 00 00 00       	mov    eax,0x0
c001f560:	83 c4 0c             	add    esp,0xc
c001f563:	c3                   	ret    

c001f564 <PIT::PIT()>:
c001f564:	83 ec 0c             	sub    esp,0xc
c001f567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f56b:	83 ec 08             	sub    esp,0x8
c001f56e:	68 8c 3d 02 c0       	push   0xc0023d8c
c001f573:	50                   	push   eax
c001f574:	e8 0b b1 fe ff       	call   c000a684 <Timer::Timer(char const*)>
c001f579:	83 c4 10             	add    esp,0x10
c001f57c:	ba b4 3d 02 c0       	mov    edx,0xc0023db4
c001f581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f585:	89 10                	mov    DWORD PTR [eax],edx
c001f587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f58b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f591:	0f b6 d0             	movzx  edx,al
c001f594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f598:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f59f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5a3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f5a9:	0f b6 d0             	movzx  edx,al
c001f5ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5b0:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f5b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f5bf:	8d 50 01             	lea    edx,[eax+0x1]
c001f5c2:	88 d1                	mov    cl,dl
c001f5c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f5c8:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f5ce:	0f b6 d0             	movzx  edx,al
c001f5d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5d5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f5d9:	83 e1 3f             	and    ecx,0x3f
c001f5dc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f5e0:	90                   	nop
c001f5e1:	83 c4 0c             	add    esp,0xc
c001f5e4:	c3                   	ret    
c001f5e5:	66 90                	xchg   ax,ax
c001f5e7:	66 90                	xchg   ax,ax
c001f5e9:	66 90                	xchg   ax,ax
c001f5eb:	66 90                	xchg   ax,ax
c001f5ed:	66 90                	xchg   ax,ax
c001f5ef:	90                   	nop

c001f5f0 <avxDetect>:
c001f5f0:	b8 01 00 00 00       	mov    eax,0x1
c001f5f5:	0f a2                	cpuid  
c001f5f7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f5fd:	74 15                	je     c001f614 <avxDetect.noAVX>
c001f5ff:	b8 01 00 00 00       	mov    eax,0x1
c001f604:	0f a2                	cpuid  
c001f606:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f60c:	74 06                	je     c001f614 <avxDetect.noAVX>
c001f60e:	b8 01 00 00 00       	mov    eax,0x1
c001f613:	c3                   	ret    

c001f614 <avxDetect.noAVX>:
c001f614:	b8 00 00 00 00       	mov    eax,0x0
c001f619:	c3                   	ret    

c001f61a <avxSave>:
c001f61a:	53                   	push   ebx
c001f61b:	52                   	push   edx
c001f61c:	31 c0                	xor    eax,eax
c001f61e:	48                   	dec    eax
c001f61f:	89 c2                	mov    edx,eax
c001f621:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f625:	0f ae 23             	xsave  [ebx]
c001f628:	5a                   	pop    edx
c001f629:	5b                   	pop    ebx
c001f62a:	c3                   	ret    

c001f62b <avxLoad>:
c001f62b:	53                   	push   ebx
c001f62c:	52                   	push   edx
c001f62d:	31 c0                	xor    eax,eax
c001f62f:	48                   	dec    eax
c001f630:	89 c2                	mov    edx,eax
c001f632:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f636:	0f ae 2b             	xrstor [ebx]
c001f639:	5a                   	pop    edx
c001f63a:	5b                   	pop    ebx
c001f63b:	c3                   	ret    

c001f63c <avxInit>:
c001f63c:	e8 47 03 00 00       	call   c001f988 <sseInit>
c001f641:	50                   	push   eax
c001f642:	51                   	push   ecx
c001f643:	0f 20 e0             	mov    eax,cr4
c001f646:	0d 00 00 04 00       	or     eax,0x40000
c001f64b:	0f 22 e0             	mov    cr4,eax
c001f64e:	31 c9                	xor    ecx,ecx
c001f650:	0f 01 d0             	xgetbv 
c001f653:	0d 07 00 00 00       	or     eax,0x7
c001f658:	0f 01 d1             	xsetbv 
c001f65b:	59                   	pop    ecx
c001f65c:	58                   	pop    eax
c001f65d:	c3                   	ret    

c001f65e <avxClose>:
c001f65e:	c3                   	ret    
c001f65f:	90                   	nop

c001f660 <isr0>:
c001f660:	fa                   	cli    
c001f661:	68 00 00 00 00       	push   0x0
c001f666:	68 00 00 00 00       	push   0x0
c001f66b:	e9 56 01 00 00       	jmp    c001f7c6 <int_common_stub>

c001f670 <isr1>:
c001f670:	fa                   	cli    
c001f671:	6a 00                	push   0x0
c001f673:	6a 01                	push   0x1
c001f675:	e9 4c 01 00 00       	jmp    c001f7c6 <int_common_stub>

c001f67a <isr2>:
c001f67a:	fa                   	cli    
c001f67b:	6a 00                	push   0x0
c001f67d:	6a 02                	push   0x2
c001f67f:	e9 42 01 00 00       	jmp    c001f7c6 <int_common_stub>

c001f684 <isr3>:
c001f684:	fa                   	cli    
c001f685:	6a 00                	push   0x0
c001f687:	6a 03                	push   0x3
c001f689:	e9 38 01 00 00       	jmp    c001f7c6 <int_common_stub>

c001f68e <isr4>:
c001f68e:	fa                   	cli    
c001f68f:	6a 00                	push   0x0
c001f691:	6a 04                	push   0x4
c001f693:	e9 2e 01 00 00       	jmp    c001f7c6 <int_common_stub>

c001f698 <isr5>:
c001f698:	fa                   	cli    
c001f699:	6a 00                	push   0x0
c001f69b:	6a 05                	push   0x5
c001f69d:	e9 24 01 00 00       	jmp    c001f7c6 <int_common_stub>

c001f6a2 <isr6>:
c001f6a2:	fa                   	cli    
c001f6a3:	6a 00                	push   0x0
c001f6a5:	6a 06                	push   0x6
c001f6a7:	e9 1a 01 00 00       	jmp    c001f7c6 <int_common_stub>

c001f6ac <isr7>:
c001f6ac:	fa                   	cli    
c001f6ad:	6a 00                	push   0x0
c001f6af:	6a 07                	push   0x7
c001f6b1:	e9 10 01 00 00       	jmp    c001f7c6 <int_common_stub>

c001f6b6 <isr8>:
c001f6b6:	fa                   	cli    
c001f6b7:	6a 08                	push   0x8
c001f6b9:	e9 08 01 00 00       	jmp    c001f7c6 <int_common_stub>

c001f6be <isr9>:
c001f6be:	fa                   	cli    
c001f6bf:	6a 00                	push   0x0
c001f6c1:	6a 09                	push   0x9
c001f6c3:	e9 fe 00 00 00       	jmp    c001f7c6 <int_common_stub>

c001f6c8 <isr10>:
c001f6c8:	fa                   	cli    
c001f6c9:	6a 0a                	push   0xa
c001f6cb:	e9 f6 00 00 00       	jmp    c001f7c6 <int_common_stub>

c001f6d0 <isr11>:
c001f6d0:	fa                   	cli    
c001f6d1:	6a 0b                	push   0xb
c001f6d3:	e9 ee 00 00 00       	jmp    c001f7c6 <int_common_stub>

c001f6d8 <isr12>:
c001f6d8:	fa                   	cli    
c001f6d9:	6a 0c                	push   0xc
c001f6db:	e9 e6 00 00 00       	jmp    c001f7c6 <int_common_stub>

c001f6e0 <isr13>:
c001f6e0:	fa                   	cli    
c001f6e1:	6a 0d                	push   0xd
c001f6e3:	53                   	push   ebx
c001f6e4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f6e8:	81 fb b6 f8 01 c0    	cmp    ebx,0xc001f8b6
c001f6ee:	5b                   	pop    ebx
c001f6ef:	0f 84 c3 01 00 00    	je     c001f8b8 <finishSignal2>
c001f6f5:	e9 cc 00 00 00       	jmp    c001f7c6 <int_common_stub>

c001f6fa <isr14>:
c001f6fa:	fa                   	cli    
c001f6fb:	6a 0e                	push   0xe
c001f6fd:	e9 c4 00 00 00       	jmp    c001f7c6 <int_common_stub>

c001f702 <isr15>:
c001f702:	fa                   	cli    
c001f703:	6a 00                	push   0x0
c001f705:	6a 0f                	push   0xf
c001f707:	e9 ba 00 00 00       	jmp    c001f7c6 <int_common_stub>

c001f70c <isr16>:
c001f70c:	fa                   	cli    
c001f70d:	6a 00                	push   0x0
c001f70f:	6a 10                	push   0x10
c001f711:	e9 b0 00 00 00       	jmp    c001f7c6 <int_common_stub>

c001f716 <isr17>:
c001f716:	fa                   	cli    
c001f717:	6a 00                	push   0x0
c001f719:	6a 11                	push   0x11
c001f71b:	e9 a6 00 00 00       	jmp    c001f7c6 <int_common_stub>

c001f720 <isr18>:
c001f720:	fa                   	cli    
c001f721:	6a 00                	push   0x0
c001f723:	6a 12                	push   0x12
c001f725:	e9 9c 00 00 00       	jmp    c001f7c6 <int_common_stub>

c001f72a <irq3>:
c001f72a:	fa                   	cli    
c001f72b:	6a 00                	push   0x0
c001f72d:	6a 23                	push   0x23
c001f72f:	e9 92 00 00 00       	jmp    c001f7c6 <int_common_stub>

c001f734 <irq4>:
c001f734:	fa                   	cli    
c001f735:	6a 00                	push   0x0
c001f737:	6a 24                	push   0x24
c001f739:	e9 88 00 00 00       	jmp    c001f7c6 <int_common_stub>

c001f73e <irq5>:
c001f73e:	fa                   	cli    
c001f73f:	6a 00                	push   0x0
c001f741:	6a 25                	push   0x25
c001f743:	e9 7e 00 00 00       	jmp    c001f7c6 <int_common_stub>

c001f748 <irq6>:
c001f748:	fa                   	cli    
c001f749:	6a 00                	push   0x0
c001f74b:	6a 26                	push   0x26
c001f74d:	e9 74 00 00 00       	jmp    c001f7c6 <int_common_stub>

c001f752 <irq7>:
c001f752:	fa                   	cli    
c001f753:	6a 00                	push   0x0
c001f755:	6a 27                	push   0x27
c001f757:	e9 6a 00 00 00       	jmp    c001f7c6 <int_common_stub>

c001f75c <irq8>:
c001f75c:	fa                   	cli    
c001f75d:	6a 00                	push   0x0
c001f75f:	6a 28                	push   0x28
c001f761:	e9 60 00 00 00       	jmp    c001f7c6 <int_common_stub>

c001f766 <irq9>:
c001f766:	fa                   	cli    
c001f767:	6a 00                	push   0x0
c001f769:	6a 29                	push   0x29
c001f76b:	e9 56 00 00 00       	jmp    c001f7c6 <int_common_stub>

c001f770 <irq10>:
c001f770:	fa                   	cli    
c001f771:	6a 00                	push   0x0
c001f773:	6a 2a                	push   0x2a
c001f775:	e9 4c 00 00 00       	jmp    c001f7c6 <int_common_stub>

c001f77a <irq11>:
c001f77a:	fa                   	cli    
c001f77b:	6a 00                	push   0x0
c001f77d:	6a 2b                	push   0x2b
c001f77f:	e9 42 00 00 00       	jmp    c001f7c6 <int_common_stub>

c001f784 <irq12>:
c001f784:	fa                   	cli    
c001f785:	6a 00                	push   0x0
c001f787:	6a 2c                	push   0x2c
c001f789:	e9 38 00 00 00       	jmp    c001f7c6 <int_common_stub>

c001f78e <irq13>:
c001f78e:	fa                   	cli    
c001f78f:	6a 00                	push   0x0
c001f791:	6a 2d                	push   0x2d
c001f793:	e9 2e 00 00 00       	jmp    c001f7c6 <int_common_stub>

c001f798 <irq14>:
c001f798:	fa                   	cli    
c001f799:	6a 00                	push   0x0
c001f79b:	6a 2e                	push   0x2e
c001f79d:	e9 24 00 00 00       	jmp    c001f7c6 <int_common_stub>

c001f7a2 <irq15>:
c001f7a2:	fa                   	cli    
c001f7a3:	6a 00                	push   0x0
c001f7a5:	6a 2f                	push   0x2f
c001f7a7:	e9 1a 00 00 00       	jmp    c001f7c6 <int_common_stub>

c001f7ac <irq1>:
c001f7ac:	fa                   	cli    
c001f7ad:	6a 00                	push   0x0
c001f7af:	6a 21                	push   0x21
c001f7b1:	eb 13                	jmp    c001f7c6 <int_common_stub>

c001f7b3 <irq2>:
c001f7b3:	fa                   	cli    
c001f7b4:	6a 00                	push   0x0
c001f7b6:	6a 22                	push   0x22
c001f7b8:	eb 0c                	jmp    c001f7c6 <int_common_stub>

c001f7ba <isr96>:
c001f7ba:	6a 00                	push   0x0
c001f7bc:	6a 60                	push   0x60
c001f7be:	fb                   	sti    
c001f7bf:	eb 37                	jmp    c001f7f8 <syscall_common_stub>

c001f7c1 <irq0>:
c001f7c1:	fa                   	cli    
c001f7c2:	6a 00                	push   0x0
c001f7c4:	6a 20                	push   0x20

c001f7c6 <int_common_stub>:
c001f7c6:	60                   	pusha  
c001f7c7:	1e                   	push   ds
c001f7c8:	06                   	push   es
c001f7c9:	0f a0                	push   fs
c001f7cb:	0f a8                	push   gs
c001f7cd:	66 b8 10 00          	mov    ax,0x10
c001f7d1:	66 8e d8             	mov    ds,ax
c001f7d4:	66 8e c0             	mov    es,ax
c001f7d7:	66 8e e0             	mov    fs,ax
c001f7da:	66 8e e8             	mov    gs,ax
c001f7dd:	54                   	push   esp
c001f7de:	fc                   	cld    
c001f7df:	e8 64 e5 fe ff       	call   c000dd48 <int_handler>
c001f7e4:	81 c4 04 00 00 00    	add    esp,0x4
c001f7ea:	0f a9                	pop    gs
c001f7ec:	0f a1                	pop    fs
c001f7ee:	07                   	pop    es
c001f7ef:	1f                   	pop    ds
c001f7f0:	61                   	popa   
c001f7f1:	81 c4 08 00 00 00    	add    esp,0x8
c001f7f7:	cf                   	iret   

c001f7f8 <syscall_common_stub>:
c001f7f8:	60                   	pusha  
c001f7f9:	1e                   	push   ds
c001f7fa:	06                   	push   es
c001f7fb:	0f a0                	push   fs
c001f7fd:	0f a8                	push   gs
c001f7ff:	66 b8 10 00          	mov    ax,0x10
c001f803:	66 8e d8             	mov    ds,ax
c001f806:	66 8e c0             	mov    es,ax
c001f809:	66 8e e0             	mov    fs,ax
c001f80c:	66 8e e8             	mov    gs,ax
c001f80f:	54                   	push   esp
c001f810:	fc                   	cld    
c001f811:	e8 32 e5 fe ff       	call   c000dd48 <int_handler>
c001f816:	81 c4 04 00 00 00    	add    esp,0x4
c001f81c:	0f a9                	pop    gs
c001f81e:	0f a1                	pop    fs
c001f820:	07                   	pop    es
c001f821:	1f                   	pop    ds
c001f822:	e8 95 06 ff ff       	call   c000febc <KiCheckSignalZ>
c001f827:	3d 00 00 00 00       	cmp    eax,0x0
c001f82c:	0f 84 c0 00 00 00    	je     c001f8f2 <skipSignals>
c001f832:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f837:	61                   	popa   
c001f838:	53                   	push   ebx
c001f839:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f83f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f842:	5b                   	pop    ebx
c001f843:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f848:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f84b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f84e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f851:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f854:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f857:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f85a:	81 c4 08 00 00 00    	add    esp,0x8
c001f860:	5e                   	pop    esi
c001f861:	5b                   	pop    ebx
c001f862:	59                   	pop    ecx
c001f863:	5a                   	pop    edx
c001f864:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f867:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f86a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f86d:	52                   	push   edx
c001f86e:	51                   	push   ecx
c001f86f:	53                   	push   ebx
c001f870:	56                   	push   esi
c001f871:	81 ec 08 00 00 00    	sub    esp,0x8
c001f877:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f87a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f87d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f880:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f883:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f886:	60                   	pusha  
c001f887:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f88d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f890:	89 e3                	mov    ebx,esp
c001f892:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f895:	52                   	push   edx
c001f896:	68 b6 f8 01 c0       	push   0xc001f8b6
c001f89b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f89e:	89 dc                	mov    esp,ebx
c001f8a0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f8a3:	68 23 00 00 00       	push   0x23
c001f8a8:	51                   	push   ecx
c001f8a9:	68 02 02 00 00       	push   0x202
c001f8ae:	68 1b 00 00 00       	push   0x1b
c001f8b3:	ff 36                	push   DWORD PTR [esi]
c001f8b5:	cf                   	iret   

c001f8b6 <finishSignal>:
c001f8b6:	cd 0f                	int    0xf

c001f8b8 <finishSignal2>:
c001f8b8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f8be:	e8 76 06 ff ff       	call   c000ff39 <KiFinishSignalZ>
c001f8c3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f8c9:	68 23 00 00 00       	push   0x23
c001f8ce:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f8d1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f8d4:	68 1b 00 00 00       	push   0x1b
c001f8d9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f8dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f8df:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f8e2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f8e5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f8e8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f8eb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f8ee:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f8f1:	cf                   	iret   

c001f8f2 <skipSignals>:
c001f8f2:	61                   	popa   
c001f8f3:	81 c4 08 00 00 00    	add    esp,0x8
c001f8f9:	cf                   	iret   
c001f8fa:	90                   	nop
c001f8fb:	90                   	nop

c001f8fc <irq16>:
c001f8fc:	fa                   	cli    
c001f8fd:	6a 00                	push   0x0
c001f8ff:	6a 30                	push   0x30
c001f901:	e9 c0 fe ff ff       	jmp    c001f7c6 <int_common_stub>

c001f906 <irq17>:
c001f906:	fa                   	cli    
c001f907:	6a 00                	push   0x0
c001f909:	6a 31                	push   0x31
c001f90b:	e9 b6 fe ff ff       	jmp    c001f7c6 <int_common_stub>

c001f910 <irq18>:
c001f910:	fa                   	cli    
c001f911:	6a 00                	push   0x0
c001f913:	6a 32                	push   0x32
c001f915:	e9 ac fe ff ff       	jmp    c001f7c6 <int_common_stub>

c001f91a <irq19>:
c001f91a:	fa                   	cli    
c001f91b:	6a 00                	push   0x0
c001f91d:	6a 33                	push   0x33
c001f91f:	e9 a2 fe ff ff       	jmp    c001f7c6 <int_common_stub>

c001f924 <irq20>:
c001f924:	fa                   	cli    
c001f925:	6a 00                	push   0x0
c001f927:	6a 34                	push   0x34
c001f929:	e9 98 fe ff ff       	jmp    c001f7c6 <int_common_stub>

c001f92e <irq21>:
c001f92e:	fa                   	cli    
c001f92f:	6a 00                	push   0x0
c001f931:	6a 35                	push   0x35
c001f933:	e9 8e fe ff ff       	jmp    c001f7c6 <int_common_stub>

c001f938 <irq22>:
c001f938:	fa                   	cli    
c001f939:	6a 00                	push   0x0
c001f93b:	6a 36                	push   0x36
c001f93d:	e9 84 fe ff ff       	jmp    c001f7c6 <int_common_stub>

c001f942 <irq23>:
c001f942:	fa                   	cli    
c001f943:	6a 00                	push   0x0
c001f945:	6a 37                	push   0x37
c001f947:	e9 7a fe ff ff       	jmp    c001f7c6 <int_common_stub>
c001f94c:	66 90                	xchg   ax,ax
c001f94e:	66 90                	xchg   ax,ax

c001f950 <i386GetRDRAND>:
c001f950:	b9 64 00 00 00       	mov    ecx,0x64

c001f955 <retry>:
c001f955:	0f c7 f0             	rdrand eax
c001f958:	72 05                	jb     c001f95f <retry.done>
c001f95a:	e2 f9                	loop   c001f955 <retry>

c001f95c <retry.fail>:
c001f95c:	31 c0                	xor    eax,eax
c001f95e:	c3                   	ret    

c001f95f <retry.done>:
c001f95f:	c3                   	ret    

c001f960 <sseDetect>:
c001f960:	b8 01 00 00 00       	mov    eax,0x1
c001f965:	0f a2                	cpuid  
c001f967:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f96d:	74 06                	je     c001f975 <sseDetect.noSSE>
c001f96f:	b8 01 00 00 00       	mov    eax,0x1
c001f974:	c3                   	ret    

c001f975 <sseDetect.noSSE>:
c001f975:	31 c0                	xor    eax,eax
c001f977:	c3                   	ret    

c001f978 <sseSave>:
c001f978:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f97c:	0f ae 00             	fxsave [eax]
c001f97f:	c3                   	ret    

c001f980 <sseLoad>:
c001f980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f984:	0f ae 08             	fxrstor [eax]
c001f987:	c3                   	ret    

c001f988 <sseInit>:
c001f988:	e8 48 00 00 00       	call   c001f9d5 <x87Init>
c001f98d:	0f 20 e0             	mov    eax,cr4
c001f990:	66 0d 00 06          	or     ax,0x600
c001f994:	0f 22 e0             	mov    cr4,eax
c001f997:	c3                   	ret    

c001f998 <sseClose>:
c001f998:	c3                   	ret    
c001f999:	66 90                	xchg   ax,ax
c001f99b:	66 90                	xchg   ax,ax
c001f99d:	66 90                	xchg   ax,ax
c001f99f:	90                   	nop

c001f9a0 <value_37F>:
c001f9a0:	7f 03                	jg     c001f9a5 <value_37A+0x1>

c001f9a2 <value_37E>:
c001f9a2:	7e 03                	jle    c001f9a7 <x87Detect+0x1>

c001f9a4 <value_37A>:
c001f9a4:	7a 03                	jp     c001f9a9 <x87Detect+0x3>

c001f9a6 <x87Detect>:
c001f9a6:	53                   	push   ebx
c001f9a7:	51                   	push   ecx
c001f9a8:	52                   	push   edx
c001f9a9:	b8 01 00 00 00       	mov    eax,0x1
c001f9ae:	0f a2                	cpuid  
c001f9b0:	f7 c2 01 00 00 00    	test   edx,0x1
c001f9b6:	74 06                	je     c001f9be <x87Detect.nox87>
c001f9b8:	b8 01 00 00 00       	mov    eax,0x1
c001f9bd:	c3                   	ret    

c001f9be <x87Detect.nox87>:
c001f9be:	b8 00 00 00 00       	mov    eax,0x0
c001f9c3:	5a                   	pop    edx
c001f9c4:	59                   	pop    ecx
c001f9c5:	5b                   	pop    ebx
c001f9c6:	c3                   	ret    

c001f9c7 <x87Save>:
c001f9c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9cb:	dd 30                	fnsave [eax]
c001f9cd:	c3                   	ret    

c001f9ce <x87Load>:
c001f9ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9d2:	dd 20                	frstor [eax]
c001f9d4:	c3                   	ret    

c001f9d5 <x87Init>:
c001f9d5:	0f 20 c0             	mov    eax,cr0
c001f9d8:	66 25 fb ff          	and    ax,0xfffb
c001f9dc:	66 0d 22 00          	or     ax,0x22
c001f9e0:	0f 22 c0             	mov    cr0,eax
c001f9e3:	db e3                	fninit 
c001f9e5:	0f 06                	clts   
c001f9e7:	d9 2d a4 f9 01 c0    	fldcw  WORD PTR ds:0xc001f9a4
c001f9ed:	c3                   	ret    

c001f9ee <x87Close>:
c001f9ee:	c3                   	ret    
c001f9ef:	90                   	nop

c001f9f0 <__do_global_ctors_aux>:
c001f9f0:	a1 a4 09 02 c0       	mov    eax,ds:0xc00209a4
c001f9f5:	83 f8 ff             	cmp    eax,0xffffffff
c001f9f8:	74 1a                	je     c001fa14 <__do_global_ctors_aux+0x24>
c001f9fa:	55                   	push   ebp
c001f9fb:	89 e5                	mov    ebp,esp
c001f9fd:	53                   	push   ebx
c001f9fe:	52                   	push   edx
c001f9ff:	bb a4 09 02 c0       	mov    ebx,0xc00209a4
c001fa04:	ff d0                	call   eax
c001fa06:	83 eb 04             	sub    ebx,0x4
c001fa09:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fa0b:	83 f8 ff             	cmp    eax,0xffffffff
c001fa0e:	75 f4                	jne    c001fa04 <__do_global_ctors_aux+0x14>
c001fa10:	58                   	pop    eax
c001fa11:	5b                   	pop    ebx
c001fa12:	5d                   	pop    ebp
c001fa13:	c3                   	ret    
c001fa14:	c3                   	ret    
c001fa15:	66 90                	xchg   ax,ax
c001fa17:	90                   	nop

c001fa18 <__divdi3>:
c001fa18:	55                   	push   ebp
c001fa19:	57                   	push   edi
c001fa1a:	56                   	push   esi
c001fa1b:	53                   	push   ebx
c001fa1c:	83 ec 1c             	sub    esp,0x1c
c001fa1f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001fa23:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fa27:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001fa2a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001fa2e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fa32:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001fa36:	85 db                	test   ebx,ebx
c001fa38:	0f 88 8e 00 00 00    	js     c001facc <__divdi3+0xb4>
c001fa3e:	89 dd                	mov    ebp,ebx
c001fa40:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fa48:	89 d3                	mov    ebx,edx
c001fa4a:	85 d2                	test   edx,edx
c001fa4c:	79 0d                	jns    c001fa5b <__divdi3+0x43>
c001fa4e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001fa52:	f7 d8                	neg    eax
c001fa54:	83 d2 00             	adc    edx,0x0
c001fa57:	f7 da                	neg    edx
c001fa59:	89 d3                	mov    ebx,edx
c001fa5b:	89 c7                	mov    edi,eax
c001fa5d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001fa60:	85 db                	test   ebx,ebx
c001fa62:	75 48                	jne    c001faac <__divdi3+0x94>
c001fa64:	39 ef                	cmp    edi,ebp
c001fa66:	76 24                	jbe    c001fa8c <__divdi3+0x74>
c001fa68:	89 ea                	mov    edx,ebp
c001fa6a:	f7 f7                	div    edi
c001fa6c:	89 c1                	mov    ecx,eax
c001fa6e:	31 f6                	xor    esi,esi
c001fa70:	89 c8                	mov    eax,ecx
c001fa72:	89 f2                	mov    edx,esi
c001fa74:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fa78:	85 c9                	test   ecx,ecx
c001fa7a:	74 07                	je     c001fa83 <__divdi3+0x6b>
c001fa7c:	f7 d8                	neg    eax
c001fa7e:	83 d2 00             	adc    edx,0x0
c001fa81:	f7 da                	neg    edx
c001fa83:	83 c4 1c             	add    esp,0x1c
c001fa86:	5b                   	pop    ebx
c001fa87:	5e                   	pop    esi
c001fa88:	5f                   	pop    edi
c001fa89:	5d                   	pop    ebp
c001fa8a:	c3                   	ret    
c001fa8b:	90                   	nop
c001fa8c:	85 ff                	test   edi,edi
c001fa8e:	75 0b                	jne    c001fa9b <__divdi3+0x83>
c001fa90:	b8 01 00 00 00       	mov    eax,0x1
c001fa95:	31 d2                	xor    edx,edx
c001fa97:	f7 f3                	div    ebx
c001fa99:	89 c7                	mov    edi,eax
c001fa9b:	31 d2                	xor    edx,edx
c001fa9d:	89 e8                	mov    eax,ebp
c001fa9f:	f7 f7                	div    edi
c001faa1:	89 c6                	mov    esi,eax
c001faa3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001faa6:	f7 f7                	div    edi
c001faa8:	89 c1                	mov    ecx,eax
c001faaa:	eb c4                	jmp    c001fa70 <__divdi3+0x58>
c001faac:	39 eb                	cmp    ebx,ebp
c001faae:	77 3c                	ja     c001faec <__divdi3+0xd4>
c001fab0:	0f bd f3             	bsr    esi,ebx
c001fab3:	83 f6 1f             	xor    esi,0x1f
c001fab6:	75 40                	jne    c001faf8 <__divdi3+0xe0>
c001fab8:	39 eb                	cmp    ebx,ebp
c001faba:	72 09                	jb     c001fac5 <__divdi3+0xad>
c001fabc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001fabf:	0f 87 97 00 00 00    	ja     c001fb5c <__divdi3+0x144>
c001fac5:	b9 01 00 00 00       	mov    ecx,0x1
c001faca:	eb a4                	jmp    c001fa70 <__divdi3+0x58>
c001facc:	f7 d9                	neg    ecx
c001face:	83 d3 00             	adc    ebx,0x0
c001fad1:	f7 db                	neg    ebx
c001fad3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001fad6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001fada:	89 dd                	mov    ebp,ebx
c001fadc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001fae4:	e9 5f ff ff ff       	jmp    c001fa48 <__divdi3+0x30>
c001fae9:	8d 76 00             	lea    esi,[esi+0x0]
c001faec:	31 f6                	xor    esi,esi
c001faee:	31 c9                	xor    ecx,ecx
c001faf0:	e9 7b ff ff ff       	jmp    c001fa70 <__divdi3+0x58>
c001faf5:	8d 76 00             	lea    esi,[esi+0x0]
c001faf8:	b8 20 00 00 00       	mov    eax,0x20
c001fafd:	29 f0                	sub    eax,esi
c001faff:	89 f1                	mov    ecx,esi
c001fb01:	d3 e3                	shl    ebx,cl
c001fb03:	89 fa                	mov    edx,edi
c001fb05:	88 c1                	mov    cl,al
c001fb07:	d3 ea                	shr    edx,cl
c001fb09:	09 da                	or     edx,ebx
c001fb0b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001fb0f:	89 f1                	mov    ecx,esi
c001fb11:	d3 e7                	shl    edi,cl
c001fb13:	89 eb                	mov    ebx,ebp
c001fb15:	88 c1                	mov    cl,al
c001fb17:	d3 eb                	shr    ebx,cl
c001fb19:	89 f1                	mov    ecx,esi
c001fb1b:	d3 e5                	shl    ebp,cl
c001fb1d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001fb20:	88 c1                	mov    cl,al
c001fb22:	d3 ea                	shr    edx,cl
c001fb24:	09 d5                	or     ebp,edx
c001fb26:	89 e8                	mov    eax,ebp
c001fb28:	89 da                	mov    edx,ebx
c001fb2a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001fb2e:	89 d3                	mov    ebx,edx
c001fb30:	89 c5                	mov    ebp,eax
c001fb32:	f7 e7                	mul    edi
c001fb34:	39 d3                	cmp    ebx,edx
c001fb36:	72 18                	jb     c001fb50 <__divdi3+0x138>
c001fb38:	74 0a                	je     c001fb44 <__divdi3+0x12c>
c001fb3a:	89 e9                	mov    ecx,ebp
c001fb3c:	31 f6                	xor    esi,esi
c001fb3e:	e9 2d ff ff ff       	jmp    c001fa70 <__divdi3+0x58>
c001fb43:	90                   	nop
c001fb44:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001fb47:	89 f1                	mov    ecx,esi
c001fb49:	d3 e7                	shl    edi,cl
c001fb4b:	39 c7                	cmp    edi,eax
c001fb4d:	73 eb                	jae    c001fb3a <__divdi3+0x122>
c001fb4f:	90                   	nop
c001fb50:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001fb53:	31 f6                	xor    esi,esi
c001fb55:	e9 16 ff ff ff       	jmp    c001fa70 <__divdi3+0x58>
c001fb5a:	66 90                	xchg   ax,ax
c001fb5c:	31 c9                	xor    ecx,ecx
c001fb5e:	e9 0d ff ff ff       	jmp    c001fa70 <__divdi3+0x58>
c001fb63:	90                   	nop

c001fb64 <__moddi3>:
c001fb64:	55                   	push   ebp
c001fb65:	57                   	push   edi
c001fb66:	56                   	push   esi
c001fb67:	53                   	push   ebx
c001fb68:	83 ec 2c             	sub    esp,0x2c
c001fb6b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001fb6f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001fb73:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001fb77:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001fb7b:	85 db                	test   ebx,ebx
c001fb7d:	0f 88 85 00 00 00    	js     c001fc08 <__moddi3+0xa4>
c001fb83:	89 de                	mov    esi,ebx
c001fb85:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001fb8d:	89 d7                	mov    edi,edx
c001fb8f:	85 d2                	test   edx,edx
c001fb91:	79 09                	jns    c001fb9c <__moddi3+0x38>
c001fb93:	f7 d8                	neg    eax
c001fb95:	83 d2 00             	adc    edx,0x0
c001fb98:	f7 da                	neg    edx
c001fb9a:	89 d7                	mov    edi,edx
c001fb9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fba0:	89 cd                	mov    ebp,ecx
c001fba2:	85 ff                	test   edi,edi
c001fba4:	75 52                	jne    c001fbf8 <__moddi3+0x94>
c001fba6:	89 c3                	mov    ebx,eax
c001fba8:	39 f0                	cmp    eax,esi
c001fbaa:	76 24                	jbe    c001fbd0 <__moddi3+0x6c>
c001fbac:	89 c8                	mov    eax,ecx
c001fbae:	89 f2                	mov    edx,esi
c001fbb0:	f7 f3                	div    ebx
c001fbb2:	89 d6                	mov    esi,edx
c001fbb4:	89 f0                	mov    eax,esi
c001fbb6:	31 d2                	xor    edx,edx
c001fbb8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fbbc:	85 c9                	test   ecx,ecx
c001fbbe:	74 07                	je     c001fbc7 <__moddi3+0x63>
c001fbc0:	f7 d8                	neg    eax
c001fbc2:	83 d2 00             	adc    edx,0x0
c001fbc5:	f7 da                	neg    edx
c001fbc7:	83 c4 2c             	add    esp,0x2c
c001fbca:	5b                   	pop    ebx
c001fbcb:	5e                   	pop    esi
c001fbcc:	5f                   	pop    edi
c001fbcd:	5d                   	pop    ebp
c001fbce:	c3                   	ret    
c001fbcf:	90                   	nop
c001fbd0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fbd4:	85 db                	test   ebx,ebx
c001fbd6:	75 0d                	jne    c001fbe5 <__moddi3+0x81>
c001fbd8:	b8 01 00 00 00       	mov    eax,0x1
c001fbdd:	31 d2                	xor    edx,edx
c001fbdf:	f7 f7                	div    edi
c001fbe1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbe5:	89 f0                	mov    eax,esi
c001fbe7:	31 d2                	xor    edx,edx
c001fbe9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001fbed:	f7 f7                	div    edi
c001fbef:	89 e8                	mov    eax,ebp
c001fbf1:	f7 f7                	div    edi
c001fbf3:	89 d6                	mov    esi,edx
c001fbf5:	eb bd                	jmp    c001fbb4 <__moddi3+0x50>
c001fbf7:	90                   	nop
c001fbf8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001fbfc:	39 f7                	cmp    edi,esi
c001fbfe:	76 20                	jbe    c001fc20 <__moddi3+0xbc>
c001fc00:	89 c8                	mov    eax,ecx
c001fc02:	89 f2                	mov    edx,esi
c001fc04:	eb b2                	jmp    c001fbb8 <__moddi3+0x54>
c001fc06:	66 90                	xchg   ax,ax
c001fc08:	f7 d9                	neg    ecx
c001fc0a:	83 d3 00             	adc    ebx,0x0
c001fc0d:	f7 db                	neg    ebx
c001fc0f:	89 de                	mov    esi,ebx
c001fc11:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001fc19:	e9 6f ff ff ff       	jmp    c001fb8d <__moddi3+0x29>
c001fc1e:	66 90                	xchg   ax,ax
c001fc20:	0f bd c7             	bsr    eax,edi
c001fc23:	83 f0 1f             	xor    eax,0x1f
c001fc26:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fc2a:	75 24                	jne    c001fc50 <__moddi3+0xec>
c001fc2c:	39 f7                	cmp    edi,esi
c001fc2e:	72 06                	jb     c001fc36 <__moddi3+0xd2>
c001fc30:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001fc34:	77 0c                	ja     c001fc42 <__moddi3+0xde>
c001fc36:	89 e9                	mov    ecx,ebp
c001fc38:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001fc3c:	19 fe                	sbb    esi,edi
c001fc3e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001fc42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fc46:	89 f2                	mov    edx,esi
c001fc48:	e9 6b ff ff ff       	jmp    c001fbb8 <__moddi3+0x54>
c001fc4d:	8d 76 00             	lea    esi,[esi+0x0]
c001fc50:	b8 20 00 00 00       	mov    eax,0x20
c001fc55:	89 c2                	mov    edx,eax
c001fc57:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fc5b:	29 da                	sub    edx,ebx
c001fc5d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001fc61:	88 d9                	mov    cl,bl
c001fc63:	d3 e7                	shl    edi,cl
c001fc65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fc69:	88 d1                	mov    cl,dl
c001fc6b:	d3 e8                	shr    eax,cl
c001fc6d:	09 c7                	or     edi,eax
c001fc6f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001fc73:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001fc77:	89 d8                	mov    eax,ebx
c001fc79:	88 d9                	mov    cl,bl
c001fc7b:	d3 e7                	shl    edi,cl
c001fc7d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001fc81:	89 f3                	mov    ebx,esi
c001fc83:	88 d1                	mov    cl,dl
c001fc85:	d3 eb                	shr    ebx,cl
c001fc87:	89 c7                	mov    edi,eax
c001fc89:	88 c1                	mov    cl,al
c001fc8b:	d3 e6                	shl    esi,cl
c001fc8d:	89 e8                	mov    eax,ebp
c001fc8f:	88 d1                	mov    cl,dl
c001fc91:	d3 e8                	shr    eax,cl
c001fc93:	09 f0                	or     eax,esi
c001fc95:	89 f9                	mov    ecx,edi
c001fc97:	d3 e5                	shl    ebp,cl
c001fc99:	89 da                	mov    edx,ebx
c001fc9b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001fc9f:	89 d3                	mov    ebx,edx
c001fca1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fca5:	89 c6                	mov    esi,eax
c001fca7:	89 d1                	mov    ecx,edx
c001fca9:	39 d3                	cmp    ebx,edx
c001fcab:	72 27                	jb     c001fcd4 <__moddi3+0x170>
c001fcad:	74 21                	je     c001fcd0 <__moddi3+0x16c>
c001fcaf:	29 f5                	sub    ebp,esi
c001fcb1:	19 cb                	sbb    ebx,ecx
c001fcb3:	89 de                	mov    esi,ebx
c001fcb5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001fcb9:	d3 e6                	shl    esi,cl
c001fcbb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fcbf:	89 f9                	mov    ecx,edi
c001fcc1:	d3 ed                	shr    ebp,cl
c001fcc3:	09 ee                	or     esi,ebp
c001fcc5:	89 f0                	mov    eax,esi
c001fcc7:	d3 eb                	shr    ebx,cl
c001fcc9:	89 da                	mov    edx,ebx
c001fccb:	e9 e8 fe ff ff       	jmp    c001fbb8 <__moddi3+0x54>
c001fcd0:	39 c5                	cmp    ebp,eax
c001fcd2:	73 db                	jae    c001fcaf <__moddi3+0x14b>
c001fcd4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001fcd8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001fcdc:	89 d1                	mov    ecx,edx
c001fcde:	89 c6                	mov    esi,eax
c001fce0:	eb cd                	jmp    c001fcaf <__moddi3+0x14b>
c001fce2:	66 90                	xchg   ax,ax

c001fce4 <__udivdi3>:
c001fce4:	55                   	push   ebp
c001fce5:	57                   	push   edi
c001fce6:	56                   	push   esi
c001fce7:	53                   	push   ebx
c001fce8:	83 ec 1c             	sub    esp,0x1c
c001fceb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001fcef:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001fcf3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001fcf7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001fcfb:	85 d2                	test   edx,edx
c001fcfd:	75 41                	jne    c001fd40 <__udivdi3+0x5c>
c001fcff:	39 f7                	cmp    edi,esi
c001fd01:	76 15                	jbe    c001fd18 <__udivdi3+0x34>
c001fd03:	89 e8                	mov    eax,ebp
c001fd05:	89 f2                	mov    edx,esi
c001fd07:	f7 f7                	div    edi
c001fd09:	31 db                	xor    ebx,ebx
c001fd0b:	89 da                	mov    edx,ebx
c001fd0d:	83 c4 1c             	add    esp,0x1c
c001fd10:	5b                   	pop    ebx
c001fd11:	5e                   	pop    esi
c001fd12:	5f                   	pop    edi
c001fd13:	5d                   	pop    ebp
c001fd14:	c3                   	ret    
c001fd15:	8d 76 00             	lea    esi,[esi+0x0]
c001fd18:	89 f9                	mov    ecx,edi
c001fd1a:	85 ff                	test   edi,edi
c001fd1c:	75 0b                	jne    c001fd29 <__udivdi3+0x45>
c001fd1e:	b8 01 00 00 00       	mov    eax,0x1
c001fd23:	31 d2                	xor    edx,edx
c001fd25:	f7 f7                	div    edi
c001fd27:	89 c1                	mov    ecx,eax
c001fd29:	31 d2                	xor    edx,edx
c001fd2b:	89 f0                	mov    eax,esi
c001fd2d:	f7 f1                	div    ecx
c001fd2f:	89 c3                	mov    ebx,eax
c001fd31:	89 e8                	mov    eax,ebp
c001fd33:	f7 f1                	div    ecx
c001fd35:	89 da                	mov    edx,ebx
c001fd37:	83 c4 1c             	add    esp,0x1c
c001fd3a:	5b                   	pop    ebx
c001fd3b:	5e                   	pop    esi
c001fd3c:	5f                   	pop    edi
c001fd3d:	5d                   	pop    ebp
c001fd3e:	c3                   	ret    
c001fd3f:	90                   	nop
c001fd40:	39 f2                	cmp    edx,esi
c001fd42:	77 1c                	ja     c001fd60 <__udivdi3+0x7c>
c001fd44:	0f bd da             	bsr    ebx,edx
c001fd47:	83 f3 1f             	xor    ebx,0x1f
c001fd4a:	75 24                	jne    c001fd70 <__udivdi3+0x8c>
c001fd4c:	39 f2                	cmp    edx,esi
c001fd4e:	72 08                	jb     c001fd58 <__udivdi3+0x74>
c001fd50:	39 ef                	cmp    edi,ebp
c001fd52:	0f 87 84 00 00 00    	ja     c001fddc <__udivdi3+0xf8>
c001fd58:	b8 01 00 00 00       	mov    eax,0x1
c001fd5d:	eb ac                	jmp    c001fd0b <__udivdi3+0x27>
c001fd5f:	90                   	nop
c001fd60:	31 db                	xor    ebx,ebx
c001fd62:	31 c0                	xor    eax,eax
c001fd64:	89 da                	mov    edx,ebx
c001fd66:	83 c4 1c             	add    esp,0x1c
c001fd69:	5b                   	pop    ebx
c001fd6a:	5e                   	pop    esi
c001fd6b:	5f                   	pop    edi
c001fd6c:	5d                   	pop    ebp
c001fd6d:	c3                   	ret    
c001fd6e:	66 90                	xchg   ax,ax
c001fd70:	b8 20 00 00 00       	mov    eax,0x20
c001fd75:	29 d8                	sub    eax,ebx
c001fd77:	88 d9                	mov    cl,bl
c001fd79:	d3 e2                	shl    edx,cl
c001fd7b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001fd7f:	89 fa                	mov    edx,edi
c001fd81:	88 c1                	mov    cl,al
c001fd83:	d3 ea                	shr    edx,cl
c001fd85:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fd89:	09 d1                	or     ecx,edx
c001fd8b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001fd8f:	88 d9                	mov    cl,bl
c001fd91:	d3 e7                	shl    edi,cl
c001fd93:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001fd97:	89 f7                	mov    edi,esi
c001fd99:	88 c1                	mov    cl,al
c001fd9b:	d3 ef                	shr    edi,cl
c001fd9d:	88 d9                	mov    cl,bl
c001fd9f:	d3 e6                	shl    esi,cl
c001fda1:	89 ea                	mov    edx,ebp
c001fda3:	88 c1                	mov    cl,al
c001fda5:	d3 ea                	shr    edx,cl
c001fda7:	09 d6                	or     esi,edx
c001fda9:	89 f0                	mov    eax,esi
c001fdab:	89 fa                	mov    edx,edi
c001fdad:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001fdb1:	89 d7                	mov    edi,edx
c001fdb3:	89 c6                	mov    esi,eax
c001fdb5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fdb9:	39 d7                	cmp    edi,edx
c001fdbb:	72 13                	jb     c001fdd0 <__udivdi3+0xec>
c001fdbd:	74 09                	je     c001fdc8 <__udivdi3+0xe4>
c001fdbf:	89 f0                	mov    eax,esi
c001fdc1:	31 db                	xor    ebx,ebx
c001fdc3:	e9 43 ff ff ff       	jmp    c001fd0b <__udivdi3+0x27>
c001fdc8:	88 d9                	mov    cl,bl
c001fdca:	d3 e5                	shl    ebp,cl
c001fdcc:	39 c5                	cmp    ebp,eax
c001fdce:	73 ef                	jae    c001fdbf <__udivdi3+0xdb>
c001fdd0:	8d 46 ff             	lea    eax,[esi-0x1]
c001fdd3:	31 db                	xor    ebx,ebx
c001fdd5:	e9 31 ff ff ff       	jmp    c001fd0b <__udivdi3+0x27>
c001fdda:	66 90                	xchg   ax,ax
c001fddc:	31 c0                	xor    eax,eax
c001fdde:	e9 28 ff ff ff       	jmp    c001fd0b <__udivdi3+0x27>
c001fde3:	90                   	nop

c001fde4 <__umoddi3>:
c001fde4:	55                   	push   ebp
c001fde5:	57                   	push   edi
c001fde6:	56                   	push   esi
c001fde7:	53                   	push   ebx
c001fde8:	83 ec 1c             	sub    esp,0x1c
c001fdeb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001fdef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fdf3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001fdf7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001fdfb:	89 da                	mov    edx,ebx
c001fdfd:	85 c0                	test   eax,eax
c001fdff:	75 37                	jne    c001fe38 <__umoddi3+0x54>
c001fe01:	39 df                	cmp    edi,ebx
c001fe03:	76 13                	jbe    c001fe18 <__umoddi3+0x34>
c001fe05:	89 f0                	mov    eax,esi
c001fe07:	f7 f7                	div    edi
c001fe09:	89 d0                	mov    eax,edx
c001fe0b:	31 d2                	xor    edx,edx
c001fe0d:	83 c4 1c             	add    esp,0x1c
c001fe10:	5b                   	pop    ebx
c001fe11:	5e                   	pop    esi
c001fe12:	5f                   	pop    edi
c001fe13:	5d                   	pop    ebp
c001fe14:	c3                   	ret    
c001fe15:	8d 76 00             	lea    esi,[esi+0x0]
c001fe18:	89 fd                	mov    ebp,edi
c001fe1a:	85 ff                	test   edi,edi
c001fe1c:	75 0b                	jne    c001fe29 <__umoddi3+0x45>
c001fe1e:	b8 01 00 00 00       	mov    eax,0x1
c001fe23:	31 d2                	xor    edx,edx
c001fe25:	f7 f7                	div    edi
c001fe27:	89 c5                	mov    ebp,eax
c001fe29:	89 d8                	mov    eax,ebx
c001fe2b:	31 d2                	xor    edx,edx
c001fe2d:	f7 f5                	div    ebp
c001fe2f:	89 f0                	mov    eax,esi
c001fe31:	f7 f5                	div    ebp
c001fe33:	89 d0                	mov    eax,edx
c001fe35:	eb d4                	jmp    c001fe0b <__umoddi3+0x27>
c001fe37:	90                   	nop
c001fe38:	89 f1                	mov    ecx,esi
c001fe3a:	39 d8                	cmp    eax,ebx
c001fe3c:	76 0a                	jbe    c001fe48 <__umoddi3+0x64>
c001fe3e:	89 f0                	mov    eax,esi
c001fe40:	83 c4 1c             	add    esp,0x1c
c001fe43:	5b                   	pop    ebx
c001fe44:	5e                   	pop    esi
c001fe45:	5f                   	pop    edi
c001fe46:	5d                   	pop    ebp
c001fe47:	c3                   	ret    
c001fe48:	0f bd e8             	bsr    ebp,eax
c001fe4b:	83 f5 1f             	xor    ebp,0x1f
c001fe4e:	75 1c                	jne    c001fe6c <__umoddi3+0x88>
c001fe50:	39 d8                	cmp    eax,ebx
c001fe52:	72 04                	jb     c001fe58 <__umoddi3+0x74>
c001fe54:	39 f7                	cmp    edi,esi
c001fe56:	77 08                	ja     c001fe60 <__umoddi3+0x7c>
c001fe58:	89 da                	mov    edx,ebx
c001fe5a:	29 fe                	sub    esi,edi
c001fe5c:	19 c2                	sbb    edx,eax
c001fe5e:	89 f1                	mov    ecx,esi
c001fe60:	89 c8                	mov    eax,ecx
c001fe62:	83 c4 1c             	add    esp,0x1c
c001fe65:	5b                   	pop    ebx
c001fe66:	5e                   	pop    esi
c001fe67:	5f                   	pop    edi
c001fe68:	5d                   	pop    ebp
c001fe69:	c3                   	ret    
c001fe6a:	66 90                	xchg   ax,ax
c001fe6c:	ba 20 00 00 00       	mov    edx,0x20
c001fe71:	29 ea                	sub    edx,ebp
c001fe73:	89 e9                	mov    ecx,ebp
c001fe75:	d3 e0                	shl    eax,cl
c001fe77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fe7b:	89 f8                	mov    eax,edi
c001fe7d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001fe81:	88 d1                	mov    cl,dl
c001fe83:	d3 e8                	shr    eax,cl
c001fe85:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fe89:	09 c1                	or     ecx,eax
c001fe8b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001fe8f:	89 e9                	mov    ecx,ebp
c001fe91:	d3 e7                	shl    edi,cl
c001fe93:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001fe97:	89 d8                	mov    eax,ebx
c001fe99:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fe9d:	88 d1                	mov    cl,dl
c001fe9f:	d3 e8                	shr    eax,cl
c001fea1:	89 c7                	mov    edi,eax
c001fea3:	89 e9                	mov    ecx,ebp
c001fea5:	d3 e3                	shl    ebx,cl
c001fea7:	89 f0                	mov    eax,esi
c001fea9:	88 d1                	mov    cl,dl
c001feab:	d3 e8                	shr    eax,cl
c001fead:	09 d8                	or     eax,ebx
c001feaf:	89 e9                	mov    ecx,ebp
c001feb1:	d3 e6                	shl    esi,cl
c001feb3:	89 f3                	mov    ebx,esi
c001feb5:	89 fa                	mov    edx,edi
c001feb7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001febb:	89 d1                	mov    ecx,edx
c001febd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fec1:	89 c6                	mov    esi,eax
c001fec3:	89 d7                	mov    edi,edx
c001fec5:	39 d1                	cmp    ecx,edx
c001fec7:	72 27                	jb     c001fef0 <__umoddi3+0x10c>
c001fec9:	74 21                	je     c001feec <__umoddi3+0x108>
c001fecb:	89 ca                	mov    edx,ecx
c001fecd:	29 f3                	sub    ebx,esi
c001fecf:	19 fa                	sbb    edx,edi
c001fed1:	89 d0                	mov    eax,edx
c001fed3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001fed7:	d3 e0                	shl    eax,cl
c001fed9:	89 e9                	mov    ecx,ebp
c001fedb:	d3 eb                	shr    ebx,cl
c001fedd:	09 d8                	or     eax,ebx
c001fedf:	d3 ea                	shr    edx,cl
c001fee1:	83 c4 1c             	add    esp,0x1c
c001fee4:	5b                   	pop    ebx
c001fee5:	5e                   	pop    esi
c001fee6:	5f                   	pop    edi
c001fee7:	5d                   	pop    ebp
c001fee8:	c3                   	ret    
c001fee9:	8d 76 00             	lea    esi,[esi+0x0]
c001feec:	39 c3                	cmp    ebx,eax
c001feee:	73 db                	jae    c001fecb <__umoddi3+0xe7>
c001fef0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001fef4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001fef8:	89 d7                	mov    edi,edx
c001fefa:	89 c6                	mov    esi,eax
c001fefc:	eb cd                	jmp    c001fecb <__umoddi3+0xe7>

Disassembly of section .init:

c001fefe <_init>:
c001fefe:	55                   	push   ebp
c001feff:	89 e5                	mov    ebp,esp
c001ff01:	e8 ee 01 fe ff       	call   c00000f4 <frame_dummy>
c001ff06:	e8 e5 fa ff ff       	call   c001f9f0 <__do_global_ctors_aux>
c001ff0b:	5d                   	pop    ebp
c001ff0c:	c3                   	ret    

Disassembly of section .fini:

c001ff0d <_fini>:
c001ff0d:	55                   	push   ebp
c001ff0e:	89 e5                	mov    ebp,esp
c001ff10:	e8 6f 01 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001ff15:	5d                   	pop    ebp
c001ff16:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001ff18 <DriverlessDevice::~DriverlessDevice()>:
c001ff18:	ba a0 18 02 c0       	mov    edx,0xc00218a0
c001ff1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff21:	89 10                	mov    DWORD PTR [eax],edx
c001ff23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff27:	50                   	push   eax
c001ff28:	e8 1b 90 fe ff       	call   c0008f48 <Device::~Device()>
c001ff2d:	83 c4 04             	add    esp,0x4
c001ff30:	90                   	nop
c001ff31:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001ff32 <DriverlessDevice::~DriverlessDevice()>:
c001ff32:	83 ec 0c             	sub    esp,0xc
c001ff35:	83 ec 0c             	sub    esp,0xc
c001ff38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff3c:	e8 d7 ff ff ff       	call   c001ff18 <DriverlessDevice::~DriverlessDevice()>
c001ff41:	83 c4 10             	add    esp,0x10
c001ff44:	83 ec 08             	sub    esp,0x8
c001ff47:	68 58 01 00 00       	push   0x158
c001ff4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff50:	e8 06 c7 fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c001ff55:	83 c4 10             	add    esp,0x10
c001ff58:	83 c4 0c             	add    esp,0xc
c001ff5b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001ff5c <LinkedList<Device>::addElement(Device*)>:
c001ff5c:	83 ec 0c             	sub    esp,0xc
c001ff5f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ff64:	75 10                	jne    c001ff76 <LinkedList<Device>::addElement(Device*)+0x1a>
c001ff66:	83 ec 0c             	sub    esp,0xc
c001ff69:	68 34 18 02 c0       	push   0xc0021834
c001ff6e:	e8 a3 ec fe ff       	call   c000ec16 <KePanic(char const*)>
c001ff73:	83 c4 10             	add    esp,0x10
c001ff76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff7a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff7c:	85 c0                	test   eax,eax
c001ff7e:	74 3a                	je     c001ffba <LinkedList<Device>::addElement(Device*)+0x5e>
c001ff80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff87:	85 c0                	test   eax,eax
c001ff89:	74 2f                	je     c001ffba <LinkedList<Device>::addElement(Device*)+0x5e>
c001ff8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff8f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff92:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff96:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001ff9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ffa4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ffa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ffae:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ffb8:	eb 68                	jmp    c0020022 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ffba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffbe:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffc0:	85 c0                	test   eax,eax
c001ffc2:	75 4e                	jne    c0020012 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ffc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ffcb:	85 c0                	test   eax,eax
c001ffcd:	75 43                	jne    c0020012 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ffcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffd3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ffd7:	89 10                	mov    DWORD PTR [eax],edx
c001ffd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffdd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ffe1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ffe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffe8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ffeb:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fff9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fffc:	85 c0                	test   eax,eax
c001fffe:	74 22                	je     c0020022 <LinkedList<Device>::addElement(Device*)+0xc6>
c0020000:	83 ec 0c             	sub    esp,0xc
c0020003:	68 56 18 02 c0       	push   0xc0021856
c0020008:	e8 09 ec fe ff       	call   c000ec16 <KePanic(char const*)>
c002000d:	83 c4 10             	add    esp,0x10
c0020010:	eb 10                	jmp    c0020022 <LinkedList<Device>::addElement(Device*)+0xc6>
c0020012:	83 ec 0c             	sub    esp,0xc
c0020015:	68 60 18 02 c0       	push   0xc0021860
c002001a:	e8 f7 eb fe ff       	call   c000ec16 <KePanic(char const*)>
c002001f:	83 c4 10             	add    esp,0x10
c0020022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020026:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020029:	8d 50 01             	lea    edx,[eax+0x1]
c002002c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020030:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020033:	90                   	nop
c0020034:	83 c4 0c             	add    esp,0xc
c0020037:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0020038 <LinkedList<Device>::LinkedList()>:
c0020038:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002003c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020042:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020046:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002004d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020051:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002005c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020066:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002006d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020071:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020078:	90                   	nop
c0020079:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002007c <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002007c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020080:	8b 00                	mov    eax,DWORD PTR [eax]
c0020082:	85 c0                	test   eax,eax
c0020084:	75 0e                	jne    c0020094 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0020086:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002008a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002008d:	85 c0                	test   eax,eax
c002008f:	75 03                	jne    c0020094 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0020091:	b0 01                	mov    al,0x1
c0020093:	c3                   	ret    
c0020094:	b0 00                	mov    al,0x0
c0020096:	90                   	nop
c0020097:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0020098 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0020098:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002009c:	8b 00                	mov    eax,DWORD PTR [eax]
c002009e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00200a0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00200a0:	83 ec 0c             	sub    esp,0xc
c00200a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00200a9:	85 c0                	test   eax,eax
c00200ab:	75 17                	jne    c00200c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c00200ad:	83 ec 0c             	sub    esp,0xc
c00200b0:	68 d0 1a 02 c0       	push   0xc0021ad0
c00200b5:	e8 5c eb fe ff       	call   c000ec16 <KePanic(char const*)>
c00200ba:	83 c4 10             	add    esp,0x10
c00200bd:	e9 96 00 00 00       	jmp    c0020158 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c00200c2:	66 90                	xchg   ax,ax
c00200c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00200cb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00200ce:	85 c0                	test   eax,eax
c00200d0:	0f 95 c0             	setne  al
c00200d3:	0f b6 c0             	movzx  eax,al
c00200d6:	85 c0                	test   eax,eax
c00200d8:	74 12                	je     c00200ec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c00200da:	83 ec 0c             	sub    esp,0xc
c00200dd:	68 1b 1b 02 c0       	push   0xc0021b1b
c00200e2:	e8 2f eb fe ff       	call   c000ec16 <KePanic(char const*)>
c00200e7:	83 c4 10             	add    esp,0x10
c00200ea:	66 90                	xchg   ax,ax
c00200ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00200f2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00200f5:	85 c0                	test   eax,eax
c00200f7:	0f 94 c0             	sete   al
c00200fa:	0f b6 c0             	movzx  eax,al
c00200fd:	85 c0                	test   eax,eax
c00200ff:	74 33                	je     c0020134 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0020101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020105:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002010b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002010f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002011a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002011d:	83 f8 01             	cmp    eax,0x1
c0020120:	74 22                	je     c0020144 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0020122:	83 ec 0c             	sub    esp,0xc
c0020125:	68 f4 1a 02 c0       	push   0xc0021af4
c002012a:	e8 e7 ea fe ff       	call   c000ec16 <KePanic(char const*)>
c002012f:	83 c4 10             	add    esp,0x10
c0020132:	eb 10                	jmp    c0020144 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0020134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020138:	8b 00                	mov    eax,DWORD PTR [eax]
c002013a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002013d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020141:	89 10                	mov    DWORD PTR [eax],edx
c0020143:	90                   	nop
c0020144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020148:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002014b:	8d 50 ff             	lea    edx,[eax-0x1]
c002014e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020152:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020155:	8d 76 00             	lea    esi,[esi+0x0]
c0020158:	83 c4 0c             	add    esp,0xc
c002015b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002015c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002015c:	83 ec 0c             	sub    esp,0xc
c002015f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020164:	75 12                	jne    c0020178 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0020166:	83 ec 0c             	sub    esp,0xc
c0020169:	68 34 18 02 c0       	push   0xc0021834
c002016e:	e8 a3 ea fe ff       	call   c000ec16 <KePanic(char const*)>
c0020173:	83 c4 10             	add    esp,0x10
c0020176:	66 90                	xchg   ax,ax
c0020178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002017c:	8b 00                	mov    eax,DWORD PTR [eax]
c002017e:	85 c0                	test   eax,eax
c0020180:	74 36                	je     c00201b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0020182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020186:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020189:	85 c0                	test   eax,eax
c002018b:	74 2b                	je     c00201b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002018d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020191:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020194:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020198:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002019b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002019f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00201a3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00201a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00201ad:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00201b4:	eb 6a                	jmp    c0020220 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00201b6:	66 90                	xchg   ax,ax
c00201b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00201be:	85 c0                	test   eax,eax
c00201c0:	75 4e                	jne    c0020210 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00201c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00201c9:	85 c0                	test   eax,eax
c00201cb:	75 43                	jne    c0020210 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00201cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00201d5:	89 10                	mov    DWORD PTR [eax],edx
c00201d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00201df:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00201e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00201e9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00201f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00201f7:	85 c0                	test   eax,eax
c00201f9:	74 25                	je     c0020220 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00201fb:	83 ec 0c             	sub    esp,0xc
c00201fe:	68 56 18 02 c0       	push   0xc0021856
c0020203:	e8 0e ea fe ff       	call   c000ec16 <KePanic(char const*)>
c0020208:	83 c4 10             	add    esp,0x10
c002020b:	eb 13                	jmp    c0020220 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002020d:	8d 76 00             	lea    esi,[esi+0x0]
c0020210:	83 ec 0c             	sub    esp,0xc
c0020213:	68 60 18 02 c0       	push   0xc0021860
c0020218:	e8 f9 e9 fe ff       	call   c000ec16 <KePanic(char const*)>
c002021d:	83 c4 10             	add    esp,0x10
c0020220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020224:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020227:	8d 50 01             	lea    edx,[eax+0x1]
c002022a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002022e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020231:	90                   	nop
c0020232:	83 c4 0c             	add    esp,0xc
c0020235:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0020238 <ACPI::~ACPI()>:
c0020238:	83 ec 0c             	sub    esp,0xc
c002023b:	ba 6c 1e 02 c0       	mov    edx,0xc0021e6c
c0020240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020244:	89 10                	mov    DWORD PTR [eax],edx
c0020246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002024a:	83 ec 0c             	sub    esp,0xc
c002024d:	50                   	push   eax
c002024e:	e8 f5 8c fe ff       	call   c0008f48 <Device::~Device()>
c0020253:	83 c4 10             	add    esp,0x10
c0020256:	90                   	nop
c0020257:	83 c4 0c             	add    esp,0xc
c002025a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002025c <ACPI::~ACPI()>:
c002025c:	83 ec 0c             	sub    esp,0xc
c002025f:	83 ec 0c             	sub    esp,0xc
c0020262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020266:	e8 cd ff ff ff       	call   c0020238 <ACPI::~ACPI()>
c002026b:	83 c4 10             	add    esp,0x10
c002026e:	83 ec 08             	sub    esp,0x8
c0020271:	68 64 12 00 00       	push   0x1264
c0020276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002027a:	e8 dc c3 fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c002027f:	83 c4 10             	add    esp,0x10
c0020282:	83 c4 0c             	add    esp,0xc
c0020285:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0020288 <LinkedList<Device>::~LinkedList()>:
c0020288:	90                   	nop
c0020289:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002028c <LinkedList<Device>::isEmpty()>:
c002028c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020290:	8b 00                	mov    eax,DWORD PTR [eax]
c0020292:	85 c0                	test   eax,eax
c0020294:	75 0e                	jne    c00202a4 <LinkedList<Device>::isEmpty()+0x18>
c0020296:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002029a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002029d:	85 c0                	test   eax,eax
c002029f:	75 03                	jne    c00202a4 <LinkedList<Device>::isEmpty()+0x18>
c00202a1:	b0 01                	mov    al,0x1
c00202a3:	c3                   	ret    
c00202a4:	b0 00                	mov    al,0x0
c00202a6:	90                   	nop
c00202a7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00202a8 <LinkedList<Device>::getFirstElement()>:
c00202a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00202ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00202ae:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00202b0 <LinkedList<Device>::removeFirst()>:
c00202b0:	83 ec 0c             	sub    esp,0xc
c00202b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00202b9:	85 c0                	test   eax,eax
c00202bb:	75 17                	jne    c00202d4 <LinkedList<Device>::removeFirst()+0x24>
c00202bd:	83 ec 0c             	sub    esp,0xc
c00202c0:	68 d0 1a 02 c0       	push   0xc0021ad0
c00202c5:	e8 4c e9 fe ff       	call   c000ec16 <KePanic(char const*)>
c00202ca:	83 c4 10             	add    esp,0x10
c00202cd:	e9 92 00 00 00       	jmp    c0020364 <LinkedList<Device>::removeFirst()+0xb4>
c00202d2:	66 90                	xchg   ax,ax
c00202d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00202db:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00202e1:	85 c0                	test   eax,eax
c00202e3:	74 13                	je     c00202f8 <LinkedList<Device>::removeFirst()+0x48>
c00202e5:	83 ec 0c             	sub    esp,0xc
c00202e8:	68 1b 1b 02 c0       	push   0xc0021b1b
c00202ed:	e8 24 e9 fe ff       	call   c000ec16 <KePanic(char const*)>
c00202f2:	83 c4 10             	add    esp,0x10
c00202f5:	8d 76 00             	lea    esi,[esi+0x0]
c00202f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00202fe:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020304:	85 c0                	test   eax,eax
c0020306:	75 34                	jne    c002033c <LinkedList<Device>::removeFirst()+0x8c>
c0020308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002030c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020316:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002031d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020321:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020324:	83 f8 01             	cmp    eax,0x1
c0020327:	74 27                	je     c0020350 <LinkedList<Device>::removeFirst()+0xa0>
c0020329:	83 ec 0c             	sub    esp,0xc
c002032c:	68 f4 1a 02 c0       	push   0xc0021af4
c0020331:	e8 e0 e8 fe ff       	call   c000ec16 <KePanic(char const*)>
c0020336:	83 c4 10             	add    esp,0x10
c0020339:	eb 15                	jmp    c0020350 <LinkedList<Device>::removeFirst()+0xa0>
c002033b:	90                   	nop
c002033c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020340:	8b 00                	mov    eax,DWORD PTR [eax]
c0020342:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0020348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002034c:	89 10                	mov    DWORD PTR [eax],edx
c002034e:	66 90                	xchg   ax,ax
c0020350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020354:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020357:	8d 50 ff             	lea    edx,[eax-0x1]
c002035a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002035e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020361:	8d 76 00             	lea    esi,[esi+0x0]
c0020364:	83 c4 0c             	add    esp,0xc
c0020367:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0020368 <Computer::~Computer()>:
c0020368:	83 ec 0c             	sub    esp,0xc
c002036b:	ba 0c 21 02 c0       	mov    edx,0xc002210c
c0020370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020374:	89 10                	mov    DWORD PTR [eax],edx
c0020376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002037a:	83 ec 0c             	sub    esp,0xc
c002037d:	50                   	push   eax
c002037e:	e8 c5 8b fe ff       	call   c0008f48 <Device::~Device()>
c0020383:	83 c4 10             	add    esp,0x10
c0020386:	90                   	nop
c0020387:	83 c4 0c             	add    esp,0xc
c002038a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002038c <Computer::~Computer()>:
c002038c:	83 ec 0c             	sub    esp,0xc
c002038f:	83 ec 0c             	sub    esp,0xc
c0020392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020396:	e8 cd ff ff ff       	call   c0020368 <Computer::~Computer()>
c002039b:	83 c4 10             	add    esp,0x10
c002039e:	83 ec 08             	sub    esp,0x8
c00203a1:	68 6c 01 00 00       	push   0x16c
c00203a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203aa:	e8 ac c2 fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c00203af:	83 c4 10             	add    esp,0x10
c00203b2:	83 c4 0c             	add    esp,0xc
c00203b5:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00203b6 <idleCommon()>:
c00203b6:	83 ec 0c             	sub    esp,0xc
c00203b9:	fa                   	cli    
c00203ba:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c00203c0:	e8 27 50 ff ff       	call   c00153ec <schedule()>
c00203c5:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c00203cc:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c00203d3:	75 01                	jne    c00203d6 <idleCommon()+0x20>
c00203d5:	fb                   	sti    
c00203d6:	83 c4 0c             	add    esp,0xc
c00203d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00203da <LinkedList<UnixFile>::~LinkedList()>:
c00203da:	90                   	nop
c00203db:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00203dc <LinkedList<UnixFile>::LinkedList()>:
c00203dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00203e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00203f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203f5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00203fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020400:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020406:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002040a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020411:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020415:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002041c:	90                   	nop
c002041d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002041e <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002041e:	83 ec 0c             	sub    esp,0xc
c0020421:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020426:	75 10                	jne    c0020438 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0020428:	83 ec 0c             	sub    esp,0xc
c002042b:	68 34 18 02 c0       	push   0xc0021834
c0020430:	e8 e1 e7 fe ff       	call   c000ec16 <KePanic(char const*)>
c0020435:	83 c4 10             	add    esp,0x10
c0020438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002043c:	8b 00                	mov    eax,DWORD PTR [eax]
c002043e:	85 c0                	test   eax,eax
c0020440:	74 34                	je     c0020476 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0020442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020446:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020449:	85 c0                	test   eax,eax
c002044b:	74 29                	je     c0020476 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002044d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020451:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020454:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020458:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002045b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002045f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020463:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002046a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002046d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020474:	eb 65                	jmp    c00204db <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0020476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002047a:	8b 00                	mov    eax,DWORD PTR [eax]
c002047c:	85 c0                	test   eax,eax
c002047e:	75 4b                	jne    c00204cb <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0020480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020484:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020487:	85 c0                	test   eax,eax
c0020489:	75 40                	jne    c00204cb <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002048b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002048f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020493:	89 10                	mov    DWORD PTR [eax],edx
c0020495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020499:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002049d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00204a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00204a7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00204ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00204b5:	85 c0                	test   eax,eax
c00204b7:	74 22                	je     c00204db <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00204b9:	83 ec 0c             	sub    esp,0xc
c00204bc:	68 56 18 02 c0       	push   0xc0021856
c00204c1:	e8 50 e7 fe ff       	call   c000ec16 <KePanic(char const*)>
c00204c6:	83 c4 10             	add    esp,0x10
c00204c9:	eb 10                	jmp    c00204db <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00204cb:	83 ec 0c             	sub    esp,0xc
c00204ce:	68 60 18 02 c0       	push   0xc0021860
c00204d3:	e8 3e e7 fe ff       	call   c000ec16 <KePanic(char const*)>
c00204d8:	83 c4 10             	add    esp,0x10
c00204db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204df:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00204e2:	8d 50 01             	lea    edx,[eax+0x1]
c00204e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204e9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00204ec:	90                   	nop
c00204ed:	83 c4 0c             	add    esp,0xc
c00204f0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00204f2 <LinkedList<UnixFile>::getFirstElement()>:
c00204f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00204f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00204f8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00204fa <LinkedList<UnixFile>::removeFirst()>:
c00204fa:	83 ec 0c             	sub    esp,0xc
c00204fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020501:	8b 00                	mov    eax,DWORD PTR [eax]
c0020503:	85 c0                	test   eax,eax
c0020505:	75 12                	jne    c0020519 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0020507:	83 ec 0c             	sub    esp,0xc
c002050a:	68 d0 1a 02 c0       	push   0xc0021ad0
c002050f:	e8 02 e7 fe ff       	call   c000ec16 <KePanic(char const*)>
c0020514:	83 c4 10             	add    esp,0x10
c0020517:	eb 7e                	jmp    c0020597 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0020519:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002051d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020520:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020523:	85 c0                	test   eax,eax
c0020525:	74 10                	je     c0020537 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0020527:	83 ec 0c             	sub    esp,0xc
c002052a:	68 1b 1b 02 c0       	push   0xc0021b1b
c002052f:	e8 e2 e6 fe ff       	call   c000ec16 <KePanic(char const*)>
c0020534:	83 c4 10             	add    esp,0x10
c0020537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002053b:	8b 00                	mov    eax,DWORD PTR [eax]
c002053d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020540:	85 c0                	test   eax,eax
c0020542:	75 33                	jne    c0020577 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0020544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020548:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002054e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020552:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020559:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002055d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020560:	83 f8 01             	cmp    eax,0x1
c0020563:	74 21                	je     c0020586 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0020565:	83 ec 0c             	sub    esp,0xc
c0020568:	68 f4 1a 02 c0       	push   0xc0021af4
c002056d:	e8 a4 e6 fe ff       	call   c000ec16 <KePanic(char const*)>
c0020572:	83 c4 10             	add    esp,0x10
c0020575:	eb 0f                	jmp    c0020586 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0020577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002057b:	8b 00                	mov    eax,DWORD PTR [eax]
c002057d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0020580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020584:	89 10                	mov    DWORD PTR [eax],edx
c0020586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002058a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002058d:	8d 50 ff             	lea    edx,[eax-0x1]
c0020590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020594:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020597:	83 c4 0c             	add    esp,0xc
c002059a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002059c <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002059c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00205a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00205a3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00205a4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00205a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00205a8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00205ab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00205ac <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00205ac:	90                   	nop
c00205ad:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00205b0 <ThreadControlBlock::ThreadControlBlock()>:
c00205b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00205b4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00205bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00205bf:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00205c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00205ca:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00205d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00205d5:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c00205dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00205e0:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c00205e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00205eb:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00205ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00205f3:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c00205f7:	90                   	nop
c00205f8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00205fc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00205fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020600:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020606:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002060a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020611:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020615:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002061c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020620:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020626:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002062a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020635:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002063c:	90                   	nop
c002063d:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002063e <CPU::~CPU()>:
c002063e:	83 ec 0c             	sub    esp,0xc
c0020641:	ba a4 32 02 c0       	mov    edx,0xc00232a4
c0020646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002064a:	89 10                	mov    DWORD PTR [eax],edx
c002064c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020650:	83 ec 0c             	sub    esp,0xc
c0020653:	50                   	push   eax
c0020654:	e8 ef 88 fe ff       	call   c0008f48 <Device::~Device()>
c0020659:	83 c4 10             	add    esp,0x10
c002065c:	90                   	nop
c002065d:	83 c4 0c             	add    esp,0xc
c0020660:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0020662 <CPU::~CPU()>:
c0020662:	83 ec 0c             	sub    esp,0xc
c0020665:	83 ec 0c             	sub    esp,0xc
c0020668:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002066c:	e8 cd ff ff ff       	call   c002063e <CPU::~CPU()>
c0020671:	83 c4 10             	add    esp,0x10
c0020674:	83 ec 08             	sub    esp,0x8
c0020677:	68 78 11 00 00       	push   0x1178
c002067c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020680:	e8 d6 bf fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0020685:	83 c4 10             	add    esp,0x10
c0020688:	83 c4 0c             	add    esp,0xc
c002068b:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002068c <PCI::~PCI()>:
c002068c:	83 ec 0c             	sub    esp,0xc
c002068f:	ba 08 38 02 c0       	mov    edx,0xc0023808
c0020694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020698:	89 10                	mov    DWORD PTR [eax],edx
c002069a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002069e:	83 ec 0c             	sub    esp,0xc
c00206a1:	50                   	push   eax
c00206a2:	e8 79 82 fe ff       	call   c0008920 <Bus::~Bus()>
c00206a7:	83 c4 10             	add    esp,0x10
c00206aa:	90                   	nop
c00206ab:	83 c4 0c             	add    esp,0xc
c00206ae:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00206b0 <PCI::~PCI()>:
c00206b0:	83 ec 0c             	sub    esp,0xc
c00206b3:	83 ec 0c             	sub    esp,0xc
c00206b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206ba:	e8 cd ff ff ff       	call   c002068c <PCI::~PCI()>
c00206bf:	83 c4 10             	add    esp,0x10
c00206c2:	83 ec 08             	sub    esp,0x8
c00206c5:	68 5c 01 00 00       	push   0x15c
c00206ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206ce:	e8 88 bf fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c00206d3:	83 c4 10             	add    esp,0x10
c00206d6:	83 c4 0c             	add    esp,0xc
c00206d9:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00206da <IDE::~IDE()>:
c00206da:	83 ec 0c             	sub    esp,0xc
c00206dd:	ba 58 39 02 c0       	mov    edx,0xc0023958
c00206e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206e6:	89 10                	mov    DWORD PTR [eax],edx
c00206e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206ec:	83 ec 0c             	sub    esp,0xc
c00206ef:	50                   	push   eax
c00206f0:	e8 e3 8c fe ff       	call   c00093d8 <HardDiskController::~HardDiskController()>
c00206f5:	83 c4 10             	add    esp,0x10
c00206f8:	90                   	nop
c00206f9:	83 c4 0c             	add    esp,0xc
c00206fc:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00206fe <IDE::~IDE()>:
c00206fe:	83 ec 0c             	sub    esp,0xc
c0020701:	83 ec 0c             	sub    esp,0xc
c0020704:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020708:	e8 cd ff ff ff       	call   c00206da <IDE::~IDE()>
c002070d:	83 c4 10             	add    esp,0x10
c0020710:	83 ec 08             	sub    esp,0x8
c0020713:	68 70 02 00 00       	push   0x270
c0020718:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002071c:	e8 3a bf fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0020721:	83 c4 10             	add    esp,0x10
c0020724:	83 c4 0c             	add    esp,0xc
c0020727:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020728 <SATABus::~SATABus()>:
c0020728:	83 ec 0c             	sub    esp,0xc
c002072b:	ba a8 39 02 c0       	mov    edx,0xc00239a8
c0020730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020734:	89 10                	mov    DWORD PTR [eax],edx
c0020736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002073a:	83 ec 0c             	sub    esp,0xc
c002073d:	50                   	push   eax
c002073e:	e8 95 8c fe ff       	call   c00093d8 <HardDiskController::~HardDiskController()>
c0020743:	83 c4 10             	add    esp,0x10
c0020746:	90                   	nop
c0020747:	83 c4 0c             	add    esp,0xc
c002074a:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002074c <SATABus::~SATABus()>:
c002074c:	83 ec 0c             	sub    esp,0xc
c002074f:	83 ec 0c             	sub    esp,0xc
c0020752:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020756:	e8 cd ff ff ff       	call   c0020728 <SATABus::~SATABus()>
c002075b:	83 c4 10             	add    esp,0x10
c002075e:	83 ec 08             	sub    esp,0x8
c0020761:	68 64 01 00 00       	push   0x164
c0020766:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002076a:	e8 ec be fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c002076f:	83 c4 10             	add    esp,0x10
c0020772:	83 c4 0c             	add    esp,0xc
c0020775:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0020776 <ATA::~ATA()>:
c0020776:	83 ec 0c             	sub    esp,0xc
c0020779:	ba 90 3a 02 c0       	mov    edx,0xc0023a90
c002077e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020782:	89 10                	mov    DWORD PTR [eax],edx
c0020784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020788:	83 ec 0c             	sub    esp,0xc
c002078b:	50                   	push   eax
c002078c:	e8 29 8d fe ff       	call   c00094ba <PhysicalDisk::~PhysicalDisk()>
c0020791:	83 c4 10             	add    esp,0x10
c0020794:	90                   	nop
c0020795:	83 c4 0c             	add    esp,0xc
c0020798:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002079a <ATA::~ATA()>:
c002079a:	83 ec 0c             	sub    esp,0xc
c002079d:	83 ec 0c             	sub    esp,0xc
c00207a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207a4:	e8 cd ff ff ff       	call   c0020776 <ATA::~ATA()>
c00207a9:	83 c4 10             	add    esp,0x10
c00207ac:	83 ec 08             	sub    esp,0x8
c00207af:	68 8c 01 00 00       	push   0x18c
c00207b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207b8:	e8 9e be fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c00207bd:	83 c4 10             	add    esp,0x10
c00207c0:	83 c4 0c             	add    esp,0xc
c00207c3:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00207c4 <ATAPI::~ATAPI()>:
c00207c4:	83 ec 0c             	sub    esp,0xc
c00207c7:	ba d8 3a 02 c0       	mov    edx,0xc0023ad8
c00207cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207d0:	89 10                	mov    DWORD PTR [eax],edx
c00207d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207d6:	83 ec 0c             	sub    esp,0xc
c00207d9:	50                   	push   eax
c00207da:	e8 db 8c fe ff       	call   c00094ba <PhysicalDisk::~PhysicalDisk()>
c00207df:	83 c4 10             	add    esp,0x10
c00207e2:	90                   	nop
c00207e3:	83 c4 0c             	add    esp,0xc
c00207e6:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00207e8 <ATAPI::~ATAPI()>:
c00207e8:	83 ec 0c             	sub    esp,0xc
c00207eb:	83 ec 0c             	sub    esp,0xc
c00207ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207f2:	e8 cd ff ff ff       	call   c00207c4 <ATAPI::~ATAPI()>
c00207f7:	83 c4 10             	add    esp,0x10
c00207fa:	83 ec 08             	sub    esp,0x8
c00207fd:	68 84 01 00 00       	push   0x184
c0020802:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020806:	e8 50 be fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c002080b:	83 c4 10             	add    esp,0x10
c002080e:	83 c4 0c             	add    esp,0xc
c0020811:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0020812 <SATA::~SATA()>:
c0020812:	83 ec 0c             	sub    esp,0xc
c0020815:	ba 98 3b 02 c0       	mov    edx,0xc0023b98
c002081a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002081e:	89 10                	mov    DWORD PTR [eax],edx
c0020820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020824:	83 ec 0c             	sub    esp,0xc
c0020827:	50                   	push   eax
c0020828:	e8 8d 8c fe ff       	call   c00094ba <PhysicalDisk::~PhysicalDisk()>
c002082d:	83 c4 10             	add    esp,0x10
c0020830:	90                   	nop
c0020831:	83 c4 0c             	add    esp,0xc
c0020834:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020836 <SATA::~SATA()>:
c0020836:	83 ec 0c             	sub    esp,0xc
c0020839:	83 ec 0c             	sub    esp,0xc
c002083c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020840:	e8 cd ff ff ff       	call   c0020812 <SATA::~SATA()>
c0020845:	83 c4 10             	add    esp,0x10
c0020848:	83 ec 08             	sub    esp,0x8
c002084b:	68 7c 01 00 00       	push   0x17c
c0020850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020854:	e8 02 be fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0020859:	83 c4 10             	add    esp,0x10
c002085c:	83 c4 0c             	add    esp,0xc
c002085f:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0020860 <SATAPI::~SATAPI()>:
c0020860:	83 ec 0c             	sub    esp,0xc
c0020863:	ba bc 3c 02 c0       	mov    edx,0xc0023cbc
c0020868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002086c:	89 10                	mov    DWORD PTR [eax],edx
c002086e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020872:	83 ec 0c             	sub    esp,0xc
c0020875:	50                   	push   eax
c0020876:	e8 3f 8c fe ff       	call   c00094ba <PhysicalDisk::~PhysicalDisk()>
c002087b:	83 c4 10             	add    esp,0x10
c002087e:	90                   	nop
c002087f:	83 c4 0c             	add    esp,0xc
c0020882:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0020884 <SATAPI::~SATAPI()>:
c0020884:	83 ec 0c             	sub    esp,0xc
c0020887:	83 ec 0c             	sub    esp,0xc
c002088a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002088e:	e8 cd ff ff ff       	call   c0020860 <SATAPI::~SATAPI()>
c0020893:	83 c4 10             	add    esp,0x10
c0020896:	83 ec 08             	sub    esp,0x8
c0020899:	68 84 01 00 00       	push   0x184
c002089e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208a2:	e8 b4 bd fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c00208a7:	83 c4 10             	add    esp,0x10
c00208aa:	83 c4 0c             	add    esp,0xc
c00208ad:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00208ae <IOAPIC::~IOAPIC()>:
c00208ae:	83 ec 0c             	sub    esp,0xc
c00208b1:	ba 1c 3d 02 c0       	mov    edx,0xc0023d1c
c00208b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208ba:	89 10                	mov    DWORD PTR [eax],edx
c00208bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208c0:	83 ec 0c             	sub    esp,0xc
c00208c3:	50                   	push   eax
c00208c4:	e8 7f 86 fe ff       	call   c0008f48 <Device::~Device()>
c00208c9:	83 c4 10             	add    esp,0x10
c00208cc:	90                   	nop
c00208cd:	83 c4 0c             	add    esp,0xc
c00208d0:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00208d2 <IOAPIC::~IOAPIC()>:
c00208d2:	83 ec 0c             	sub    esp,0xc
c00208d5:	83 ec 0c             	sub    esp,0xc
c00208d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208dc:	e8 cd ff ff ff       	call   c00208ae <IOAPIC::~IOAPIC()>
c00208e1:	83 c4 10             	add    esp,0x10
c00208e4:	83 ec 08             	sub    esp,0x8
c00208e7:	68 68 01 00 00       	push   0x168
c00208ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208f0:	e8 66 bd fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c00208f5:	83 c4 10             	add    esp,0x10
c00208f8:	83 c4 0c             	add    esp,0xc
c00208fb:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00208fc <APICTimer::~APICTimer()>:
c00208fc:	83 ec 0c             	sub    esp,0xc
c00208ff:	ba 64 3d 02 c0       	mov    edx,0xc0023d64
c0020904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020908:	89 10                	mov    DWORD PTR [eax],edx
c002090a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002090e:	83 ec 0c             	sub    esp,0xc
c0020911:	50                   	push   eax
c0020912:	e8 a5 9d fe ff       	call   c000a6bc <Timer::~Timer()>
c0020917:	83 c4 10             	add    esp,0x10
c002091a:	90                   	nop
c002091b:	83 c4 0c             	add    esp,0xc
c002091e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0020920 <APICTimer::~APICTimer()>:
c0020920:	83 ec 0c             	sub    esp,0xc
c0020923:	83 ec 0c             	sub    esp,0xc
c0020926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002092a:	e8 cd ff ff ff       	call   c00208fc <APICTimer::~APICTimer()>
c002092f:	83 c4 10             	add    esp,0x10
c0020932:	83 ec 08             	sub    esp,0x8
c0020935:	68 60 01 00 00       	push   0x160
c002093a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002093e:	e8 18 bd fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0020943:	83 c4 10             	add    esp,0x10
c0020946:	83 c4 0c             	add    esp,0xc
c0020949:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002094c <PIT::~PIT()>:
c002094c:	83 ec 0c             	sub    esp,0xc
c002094f:	ba b4 3d 02 c0       	mov    edx,0xc0023db4
c0020954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020958:	89 10                	mov    DWORD PTR [eax],edx
c002095a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002095e:	83 ec 0c             	sub    esp,0xc
c0020961:	50                   	push   eax
c0020962:	e8 55 9d fe ff       	call   c000a6bc <Timer::~Timer()>
c0020967:	83 c4 10             	add    esp,0x10
c002096a:	90                   	nop
c002096b:	83 c4 0c             	add    esp,0xc
c002096e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0020970 <PIT::~PIT()>:
c0020970:	83 ec 0c             	sub    esp,0xc
c0020973:	83 ec 0c             	sub    esp,0xc
c0020976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002097a:	e8 cd ff ff ff       	call   c002094c <PIT::~PIT()>
c002097f:	83 c4 10             	add    esp,0x10
c0020982:	83 ec 08             	sub    esp,0x8
c0020985:	68 5c 01 00 00       	push   0x15c
c002098a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002098e:	e8 c8 bc fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0020993:	83 c4 10             	add    esp,0x10
c0020996:	83 c4 0c             	add    esp,0xc
c0020999:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be db 24 02 c0       	mov    esi,0xc00224db
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be f7 24 02 c0       	mov    esi,0xc00224f7
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
